
final_project.elf:     file format elf32-littlenios2
final_project.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00005434 memsz 0x00005434 flags r-x
    LOAD off    0x00006454 vaddr 0x10005454 paddr 0x10006ec0 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x0000892c vaddr 0x1000892c paddr 0x1000892c align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000524c  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  10005408  10005408  00006408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  10005454  10006ec0  00006454  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  1000892c  1000892c  0000892c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00007ec0  2**0
                  CONTENTS
  7 .sdram        00000000  10008a7c  10008a7c  00007ec0  2**0
                  CONTENTS
  8 .comment      00000039  00000000  00000000  00007ec0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000930  00000000  00000000  00007f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00015d76  00000000  00000000  00008830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005c48  00000000  00000000  0001e5a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000067e8  00000000  00000000  000241ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000148c  00000000  00000000  0002a9d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002225  00000000  00000000  0002be64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004748  00000000  00000000  0002e089  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000327d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002f0  00000000  00000000  000327e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00034f95  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00034f98  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00034fa4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00034fa5  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00034fa6  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00034faa  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00034fae  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00034fb2  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00034fbd  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00034fc8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00034fd3  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  00034fe4  2**0
                  CONTENTS, READONLY
 30 .jdi          00004667  00000000  00000000  0003500a  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005d27b  00000000  00000000  00039671  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
10005408 l    d  .rodata	00000000 .rodata
10005454 l    d  .rwdata	00000000 .rwdata
1000892c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10008a7c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
10005454 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10001c98 l     F .text	00000008 __fp_lock
10001ca0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
10002d84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10002ea4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10002ed0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10002fd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
100030cc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100031b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10003390 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10006eb0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10003608 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000374c l     F .text	00000038 alt_dev_reg
10005e28 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10003a24 l     F .text	000001fc altera_avalon_jtag_uart_irq
10003c20 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10004394 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10004820 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10004978 l     F .text	00000050 alt_get_errno
100049c8 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10002c20 g     F .text	00000064 _isatty_r
100032d8 g     F .text	00000078 alt_main
1000022c g     F .text	000000b8 _puts_r
1000897c g     O .bss	00000100 alt_irq
10002c84 g     F .text	0000006c _lseek_r
10006ec0 g       *ABS*	00000000 __flash_rwdata_start
10008a7c g       *ABS*	00000000 __alt_heap_start
10002948 g     F .text	0000005c __sseek
10001d44 g     F .text	0000019c __sinit
10001cb4 g     F .text	00000078 __sfmoreglue
10003370 g     F .text	00000020 __malloc_unlock
100011e8 g     F .text	0000013c memmove
10001d2c g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10002bb8 g     F .text	00000068 _fstat_r
10008938 g     O .bss	00000004 errno
100028c4 g     F .text	00000008 __seofread
10008940 g     O .bss	00000004 alt_argv
1000ee88 g       *ABS*	00000000 _gp
10005ca8 g     O .rwdata	00000180 alt_fd_list
10004dd4 g     F .text	00000090 alt_find_dev
100010dc g     F .text	0000010c memcpy
10001ca8 g     F .text	0000000c _cleanup_r
10004900 g     F .text	00000078 alt_io_redirect
10005408 g       *ABS*	00000000 __DTOR_END__
100002e4 g     F .text	00000014 puts
10003e18 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10003024 g     F .text	000000a8 isatty
10008934 g     O .bss	00000004 __malloc_top_pad
10000384 g     F .text	000004ac __sfvwrite_r
10001888 g     F .text	00000064 _sbrk_r
10002cf0 g     F .text	0000006c _read_r
10006ea8 g     O .rwdata	00000004 alt_max_fd
10002a7c g     F .text	00000128 _fclose_r
10001c68 g     F .text	00000030 fflush
10008930 g     O .bss	00000004 __malloc_max_sbrked_mem
10003200 g     F .text	000000d8 lseek
10006e88 g     O .rwdata	00000004 _global_impure_ptr
10001324 g     F .text	00000564 _realloc_r
10008a7c g       *ABS*	00000000 __bss_end
10004730 g     F .text	000000f0 alt_iic_isr_register
10004cb0 g     F .text	00000104 alt_tick
1000200c g     F .text	00000018 __fp_lock_all
100046e4 g     F .text	0000004c alt_ic_irq_enabled
10004c18 g     F .text	00000098 alt_alarm_stop
10008948 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10005c80 g     O .rwdata	00000028 alt_dev_null
10004378 g     F .text	0000001c alt_dcache_flush_all
10006ec0 g       *ABS*	00000000 __ram_rwdata_end
10006ea0 g     O .rwdata	00000008 alt_dev_list
10003658 g     F .text	000000f4 write
10005454 g       *ABS*	00000000 __ram_rodata_end
10002f20 g     F .text	000000b4 fstat
10008a7c g       *ABS*	00000000 end
10003964 g     F .text	000000c0 altera_avalon_jtag_uart_init
10005408 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10004020 g     F .text	00000218 altera_avalon_jtag_uart_write
10001ffc g     F .text	00000004 __sfp_lock_acquire
10000ff4 g     F .text	000000e8 memchr
10002178 g     F .text	000002d0 _free_r
10005230 g     F .text	000001a4 __call_exitprocs
10006e90 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
1000894c g     O .bss	00000004 _alt_tick_rate
10008950 g     O .bss	00000004 _alt_nticks
100033e0 g     F .text	000000f8 read
100037b8 g     F .text	00000048 alt_sys_init
10005114 g     F .text	0000011c __register_exitproc
10003cc4 g     F .text	00000068 altera_avalon_jtag_uart_close
10002d5c g     F .text	00000028 .hidden __mulsi3
10005454 g       *ABS*	00000000 __ram_rwdata_start
10005408 g       *ABS*	00000000 __ram_rodata_start
10008954 g     O .bss	00000028 __malloc_current_mallinfo
10003800 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10004f78 g     F .text	000000d4 alt_get_fd
10002a18 g     F .text	00000064 _close_r
10005098 g     F .text	0000007c memcmp
100038c0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10008a7c g       *ABS*	00000000 __alt_stack_base
10003910 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100018ec g     F .text	00000138 __swsetup_r
10001ee0 g     F .text	0000011c __sfp
10005878 g     O .rwdata	00000408 __malloc_av_
10002008 g     F .text	00000004 __sinit_lock_release
10002870 g     F .text	00000054 __sread
10004e64 g     F .text	00000114 alt_find_file
100043e4 g     F .text	000000a0 alt_dev_llist_insert
10003350 g     F .text	00000020 __malloc_lock
10003558 g     F .text	000000b0 sbrk
10001a24 g     F .text	00000244 _fflush_r
1000892c g       *ABS*	00000000 __bss_start
1000275c g     F .text	00000114 memset
100001f8 g     F .text	00000034 main
10008944 g     O .bss	00000004 alt_envp
1000892c g     O .bss	00000004 __malloc_max_total_mem
10003860 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100029a4 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10002ba4 g     F .text	00000014 fclose
10000830 g     F .text	000007c4 _malloc_r
10006eac g     O .rwdata	00000004 alt_errno
10002448 g     F .text	000000a8 _fwalk
1000203c g     F .text	0000013c _malloc_trim_r
10005408 g       *ABS*	00000000 __CTOR_END__
10005408 g       *ABS*	00000000 __flash_rodata_start
10005408 g       *ABS*	00000000 __DTOR_LIST__
10003784 g     F .text	00000034 alt_irq_init
100034d8 g     F .text	00000080 alt_release_fd
1000504c g     F .text	00000014 atexit
100029ac g     F .text	0000006c _write_r
10006e8c g     O .rwdata	00000004 _impure_ptr
1000893c g     O .bss	00000004 alt_argc
100044e0 g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
10002024 g     F .text	00000018 __fp_unlock_all
10006e98 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10004558 g     F .text	00000050 alt_ic_isr_register
10006ec0 g       *ABS*	00000000 _edata
10008a7c g       *ABS*	00000000 _end
100001bc g       *ABS*	00000000 __ram_exceptions_end
10003d2c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10004644 g     F .text	000000a0 alt_ic_irq_disable
100028cc g     F .text	0000007c __swrite
10006e94 g     O .rwdata	00000004 __malloc_trim_threshold
10004db4 g     F .text	00000020 altera_nios2_qsys_irq_init
10005060 g     F .text	00000038 exit
100024f0 g     F .text	000000b8 _fwalk_reent
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10002000 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100053d4 g     F .text	00000034 _exit
10004238 g     F .text	00000140 alt_alarm_start
100025a8 g     F .text	000001b4 __smakebuf_r
100002f8 g     F .text	0000008c strlen
10004abc g     F .text	0000015c open
1000453c g     F .text	0000001c alt_icache_flush_all
10006eb4 g     O .rwdata	00000004 alt_priority_mask
100045a8 g     F .text	0000009c alt_ic_irq_enable
10006eb8 g     O .rwdata	00000008 alt_alarm_list
10004484 g     F .text	0000005c _do_ctors
10002dd4 g     F .text	000000d0 close
10003130 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
10002004 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40074 	movhi	r3,4097
10000130:	18e25f04 	addi	r3,r3,-30340
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10800017 	ldw	r2,0(r2)
10000144:	01040074 	movhi	r4,4097
10000148:	21225f04 	addi	r4,r4,-30340
1000014c:	e0fffd17 	ldw	r3,-12(fp)
10000150:	180690fa 	slli	r3,r3,3
10000154:	20c7883a 	add	r3,r4,r3
10000158:	18c00104 	addi	r3,r3,4
1000015c:	18c00017 	ldw	r3,0(r3)
10000160:	1809883a 	mov	r4,r3
10000164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
100001c8:	d6bba214 	ori	gp,gp,61064
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
100001d0:	10a24b14 	ori	r2,r2,35116

    movhi r3, %hi(__bss_end)
100001d4:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
100001d8:	18e29f14 	ori	r3,r3,35452

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	00031300 	call	10003130 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	00032d80 	call	100032d8 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <main>:
#include <stdio.h>

int main()
{
100001f8:	defffe04 	addi	sp,sp,-8
100001fc:	dfc00115 	stw	ra,4(sp)
10000200:	df000015 	stw	fp,0(sp)
10000204:	d839883a 	mov	fp,sp
	printf("Hello NIOS II!\n");
10000208:	01040034 	movhi	r4,4096
1000020c:	21150204 	addi	r4,r4,21512
10000210:	00002e40 	call	100002e4 <puts>
	return 0;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

1000022c <_puts_r>:
1000022c:	defff604 	addi	sp,sp,-40
10000230:	dc400815 	stw	r17,32(sp)
10000234:	2023883a 	mov	r17,r4
10000238:	2809883a 	mov	r4,r5
1000023c:	dc000715 	stw	r16,28(sp)
10000240:	dfc00915 	stw	ra,36(sp)
10000244:	2821883a 	mov	r16,r5
10000248:	00002f80 	call	100002f8 <strlen>
1000024c:	00c40034 	movhi	r3,4096
10000250:	18dba304 	addi	r3,r3,28300
10000254:	18c00017 	ldw	r3,0(r3)
10000258:	11000044 	addi	r4,r2,1
1000025c:	d8800115 	stw	r2,4(sp)
10000260:	18c00217 	ldw	r3,8(r3)
10000264:	00840034 	movhi	r2,4096
10000268:	10950604 	addi	r2,r2,21528
1000026c:	d8800215 	stw	r2,8(sp)
10000270:	1940030b 	ldhu	r5,12(r3)
10000274:	00800044 	movi	r2,1
10000278:	d8800315 	stw	r2,12(sp)
1000027c:	00800084 	movi	r2,2
10000280:	d8800515 	stw	r2,20(sp)
10000284:	dc000015 	stw	r16,0(sp)
10000288:	d9000615 	stw	r4,24(sp)
1000028c:	dec00415 	stw	sp,16(sp)
10000290:	2888000c 	andi	r2,r5,8192
10000294:	1000061e 	bne	r2,zero,100002b0 <_puts_r+0x84>
10000298:	19001917 	ldw	r4,100(r3)
1000029c:	00b7ffc4 	movi	r2,-8193
100002a0:	29480014 	ori	r5,r5,8192
100002a4:	2084703a 	and	r2,r4,r2
100002a8:	1940030d 	sth	r5,12(r3)
100002ac:	18801915 	stw	r2,100(r3)
100002b0:	89400217 	ldw	r5,8(r17)
100002b4:	8809883a 	mov	r4,r17
100002b8:	d9800404 	addi	r6,sp,16
100002bc:	00003840 	call	10000384 <__sfvwrite_r>
100002c0:	1000061e 	bne	r2,zero,100002dc <_puts_r+0xb0>
100002c4:	00800284 	movi	r2,10
100002c8:	dfc00917 	ldw	ra,36(sp)
100002cc:	dc400817 	ldw	r17,32(sp)
100002d0:	dc000717 	ldw	r16,28(sp)
100002d4:	dec00a04 	addi	sp,sp,40
100002d8:	f800283a 	ret
100002dc:	00bfffc4 	movi	r2,-1
100002e0:	003ff906 	br	100002c8 <__alt_data_end+0xf80002c8>

100002e4 <puts>:
100002e4:	00840034 	movhi	r2,4096
100002e8:	109ba304 	addi	r2,r2,28300
100002ec:	200b883a 	mov	r5,r4
100002f0:	11000017 	ldw	r4,0(r2)
100002f4:	000022c1 	jmpi	1000022c <_puts_r>

100002f8 <strlen>:
100002f8:	208000cc 	andi	r2,r4,3
100002fc:	10001d26 	beq	r2,zero,10000374 <strlen+0x7c>
10000300:	20800007 	ldb	r2,0(r4)
10000304:	10001d26 	beq	r2,zero,1000037c <strlen+0x84>
10000308:	2005883a 	mov	r2,r4
1000030c:	00000206 	br	10000318 <strlen+0x20>
10000310:	10c00007 	ldb	r3,0(r2)
10000314:	18001526 	beq	r3,zero,1000036c <strlen+0x74>
10000318:	10800044 	addi	r2,r2,1
1000031c:	10c000cc 	andi	r3,r2,3
10000320:	183ffb1e 	bne	r3,zero,10000310 <__alt_data_end+0xf8000310>
10000324:	10c00017 	ldw	r3,0(r2)
10000328:	01ffbff4 	movhi	r7,65279
1000032c:	39ffbfc4 	addi	r7,r7,-257
10000330:	01a02074 	movhi	r6,32897
10000334:	31a02004 	addi	r6,r6,-32640
10000338:	00000206 	br	10000344 <strlen+0x4c>
1000033c:	10800104 	addi	r2,r2,4
10000340:	10c00017 	ldw	r3,0(r2)
10000344:	19cb883a 	add	r5,r3,r7
10000348:	00c6303a 	nor	r3,zero,r3
1000034c:	28c6703a 	and	r3,r5,r3
10000350:	1986703a 	and	r3,r3,r6
10000354:	183ff926 	beq	r3,zero,1000033c <__alt_data_end+0xf800033c>
10000358:	10c00007 	ldb	r3,0(r2)
1000035c:	18000326 	beq	r3,zero,1000036c <strlen+0x74>
10000360:	10800044 	addi	r2,r2,1
10000364:	10c00007 	ldb	r3,0(r2)
10000368:	183ffd1e 	bne	r3,zero,10000360 <__alt_data_end+0xf8000360>
1000036c:	1105c83a 	sub	r2,r2,r4
10000370:	f800283a 	ret
10000374:	2005883a 	mov	r2,r4
10000378:	003fea06 	br	10000324 <__alt_data_end+0xf8000324>
1000037c:	0005883a 	mov	r2,zero
10000380:	f800283a 	ret

10000384 <__sfvwrite_r>:
10000384:	30800217 	ldw	r2,8(r6)
10000388:	defff404 	addi	sp,sp,-48
1000038c:	dcc00515 	stw	r19,20(sp)
10000390:	dfc00b15 	stw	ra,44(sp)
10000394:	df000a15 	stw	fp,40(sp)
10000398:	ddc00915 	stw	r23,36(sp)
1000039c:	dd800815 	stw	r22,32(sp)
100003a0:	dd400715 	stw	r21,28(sp)
100003a4:	dd000615 	stw	r20,24(sp)
100003a8:	dc800415 	stw	r18,16(sp)
100003ac:	dc400315 	stw	r17,12(sp)
100003b0:	dc000215 	stw	r16,8(sp)
100003b4:	3027883a 	mov	r19,r6
100003b8:	10001d26 	beq	r2,zero,10000430 <__sfvwrite_r+0xac>
100003bc:	2880030b 	ldhu	r2,12(r5)
100003c0:	202b883a 	mov	r21,r4
100003c4:	2821883a 	mov	r16,r5
100003c8:	10c0020c 	andi	r3,r2,8
100003cc:	18002526 	beq	r3,zero,10000464 <__sfvwrite_r+0xe0>
100003d0:	28c00417 	ldw	r3,16(r5)
100003d4:	18002326 	beq	r3,zero,10000464 <__sfvwrite_r+0xe0>
100003d8:	10c0008c 	andi	r3,r2,2
100003dc:	9c400017 	ldw	r17,0(r19)
100003e0:	18002826 	beq	r3,zero,10000484 <__sfvwrite_r+0x100>
100003e4:	0029883a 	mov	r20,zero
100003e8:	0025883a 	mov	r18,zero
100003ec:	05810004 	movi	r22,1024
100003f0:	a00d883a 	mov	r6,r20
100003f4:	a809883a 	mov	r4,r21
100003f8:	90004726 	beq	r18,zero,10000518 <__sfvwrite_r+0x194>
100003fc:	900f883a 	mov	r7,r18
10000400:	81400717 	ldw	r5,28(r16)
10000404:	b480012e 	bgeu	r22,r18,1000040c <__sfvwrite_r+0x88>
10000408:	01c10004 	movi	r7,1024
1000040c:	80800917 	ldw	r2,36(r16)
10000410:	103ee83a 	callr	r2
10000414:	00804c0e 	bge	zero,r2,10000548 <__sfvwrite_r+0x1c4>
10000418:	98c00217 	ldw	r3,8(r19)
1000041c:	a0a9883a 	add	r20,r20,r2
10000420:	90a5c83a 	sub	r18,r18,r2
10000424:	1885c83a 	sub	r2,r3,r2
10000428:	98800215 	stw	r2,8(r19)
1000042c:	103ff01e 	bne	r2,zero,100003f0 <__alt_data_end+0xf80003f0>
10000430:	0005883a 	mov	r2,zero
10000434:	dfc00b17 	ldw	ra,44(sp)
10000438:	df000a17 	ldw	fp,40(sp)
1000043c:	ddc00917 	ldw	r23,36(sp)
10000440:	dd800817 	ldw	r22,32(sp)
10000444:	dd400717 	ldw	r21,28(sp)
10000448:	dd000617 	ldw	r20,24(sp)
1000044c:	dcc00517 	ldw	r19,20(sp)
10000450:	dc800417 	ldw	r18,16(sp)
10000454:	dc400317 	ldw	r17,12(sp)
10000458:	dc000217 	ldw	r16,8(sp)
1000045c:	dec00c04 	addi	sp,sp,48
10000460:	f800283a 	ret
10000464:	a809883a 	mov	r4,r21
10000468:	800b883a 	mov	r5,r16
1000046c:	00018ec0 	call	100018ec <__swsetup_r>
10000470:	1000e81e 	bne	r2,zero,10000814 <__sfvwrite_r+0x490>
10000474:	8080030b 	ldhu	r2,12(r16)
10000478:	9c400017 	ldw	r17,0(r19)
1000047c:	10c0008c 	andi	r3,r2,2
10000480:	183fd81e 	bne	r3,zero,100003e4 <__alt_data_end+0xf80003e4>
10000484:	10c0004c 	andi	r3,r2,1
10000488:	002d883a 	mov	r22,zero
1000048c:	1800331e 	bne	r3,zero,1000055c <__sfvwrite_r+0x1d8>
10000490:	0025883a 	mov	r18,zero
10000494:	90001c26 	beq	r18,zero,10000508 <__sfvwrite_r+0x184>
10000498:	10c0800c 	andi	r3,r2,512
1000049c:	85000217 	ldw	r20,8(r16)
100004a0:	18006f26 	beq	r3,zero,10000660 <__sfvwrite_r+0x2dc>
100004a4:	95008936 	bltu	r18,r20,100006cc <__sfvwrite_r+0x348>
100004a8:	10c1200c 	andi	r3,r2,1152
100004ac:	1800a11e 	bne	r3,zero,10000734 <__sfvwrite_r+0x3b0>
100004b0:	81000017 	ldw	r4,0(r16)
100004b4:	a02f883a 	mov	r23,r20
100004b8:	a039883a 	mov	fp,r20
100004bc:	9029883a 	mov	r20,r18
100004c0:	b00b883a 	mov	r5,r22
100004c4:	b80d883a 	mov	r6,r23
100004c8:	00011e80 	call	100011e8 <memmove>
100004cc:	81400217 	ldw	r5,8(r16)
100004d0:	81000017 	ldw	r4,0(r16)
100004d4:	9005883a 	mov	r2,r18
100004d8:	2f39c83a 	sub	fp,r5,fp
100004dc:	25c7883a 	add	r3,r4,r23
100004e0:	87000215 	stw	fp,8(r16)
100004e4:	80c00015 	stw	r3,0(r16)
100004e8:	98c00217 	ldw	r3,8(r19)
100004ec:	b0ad883a 	add	r22,r22,r2
100004f0:	90a5c83a 	sub	r18,r18,r2
100004f4:	1d29c83a 	sub	r20,r3,r20
100004f8:	9d000215 	stw	r20,8(r19)
100004fc:	a03fcc26 	beq	r20,zero,10000430 <__alt_data_end+0xf8000430>
10000500:	8080030b 	ldhu	r2,12(r16)
10000504:	903fe41e 	bne	r18,zero,10000498 <__alt_data_end+0xf8000498>
10000508:	8d800017 	ldw	r22,0(r17)
1000050c:	8c800117 	ldw	r18,4(r17)
10000510:	8c400204 	addi	r17,r17,8
10000514:	003fdf06 	br	10000494 <__alt_data_end+0xf8000494>
10000518:	8d000017 	ldw	r20,0(r17)
1000051c:	8c800117 	ldw	r18,4(r17)
10000520:	8c400204 	addi	r17,r17,8
10000524:	003fb206 	br	100003f0 <__alt_data_end+0xf80003f0>
10000528:	00013240 	call	10001324 <_realloc_r>
1000052c:	1039883a 	mov	fp,r2
10000530:	10009d1e 	bne	r2,zero,100007a8 <__sfvwrite_r+0x424>
10000534:	81400417 	ldw	r5,16(r16)
10000538:	a809883a 	mov	r4,r21
1000053c:	00021780 	call	10002178 <_free_r>
10000540:	00800304 	movi	r2,12
10000544:	a8800015 	stw	r2,0(r21)
10000548:	80c0030b 	ldhu	r3,12(r16)
1000054c:	00bfffc4 	movi	r2,-1
10000550:	18c01014 	ori	r3,r3,64
10000554:	80c0030d 	sth	r3,12(r16)
10000558:	003fb606 	br	10000434 <__alt_data_end+0xf8000434>
1000055c:	0007883a 	mov	r3,zero
10000560:	0039883a 	mov	fp,zero
10000564:	0025883a 	mov	r18,zero
10000568:	90001f26 	beq	r18,zero,100005e8 <__sfvwrite_r+0x264>
1000056c:	18006826 	beq	r3,zero,10000710 <__sfvwrite_r+0x38c>
10000570:	b02f883a 	mov	r23,r22
10000574:	9580012e 	bgeu	r18,r22,1000057c <__sfvwrite_r+0x1f8>
10000578:	902f883a 	mov	r23,r18
1000057c:	81000017 	ldw	r4,0(r16)
10000580:	80800417 	ldw	r2,16(r16)
10000584:	b829883a 	mov	r20,r23
10000588:	81800217 	ldw	r6,8(r16)
1000058c:	81c00517 	ldw	r7,20(r16)
10000590:	1100022e 	bgeu	r2,r4,1000059c <__sfvwrite_r+0x218>
10000594:	31d1883a 	add	r8,r6,r7
10000598:	45c01816 	blt	r8,r23,100005fc <__sfvwrite_r+0x278>
1000059c:	b9c03f16 	blt	r23,r7,1000069c <__sfvwrite_r+0x318>
100005a0:	80800917 	ldw	r2,36(r16)
100005a4:	81400717 	ldw	r5,28(r16)
100005a8:	a809883a 	mov	r4,r21
100005ac:	d8c00115 	stw	r3,4(sp)
100005b0:	e00d883a 	mov	r6,fp
100005b4:	103ee83a 	callr	r2
100005b8:	1029883a 	mov	r20,r2
100005bc:	d8c00117 	ldw	r3,4(sp)
100005c0:	00bfe10e 	bge	zero,r2,10000548 <__alt_data_end+0xf8000548>
100005c4:	b52dc83a 	sub	r22,r22,r20
100005c8:	b0001f26 	beq	r22,zero,10000648 <__sfvwrite_r+0x2c4>
100005cc:	98800217 	ldw	r2,8(r19)
100005d0:	e539883a 	add	fp,fp,r20
100005d4:	9525c83a 	sub	r18,r18,r20
100005d8:	1529c83a 	sub	r20,r2,r20
100005dc:	9d000215 	stw	r20,8(r19)
100005e0:	a03f9326 	beq	r20,zero,10000430 <__alt_data_end+0xf8000430>
100005e4:	903fe11e 	bne	r18,zero,1000056c <__alt_data_end+0xf800056c>
100005e8:	8f000017 	ldw	fp,0(r17)
100005ec:	8c800117 	ldw	r18,4(r17)
100005f0:	0007883a 	mov	r3,zero
100005f4:	8c400204 	addi	r17,r17,8
100005f8:	003fdb06 	br	10000568 <__alt_data_end+0xf8000568>
100005fc:	400d883a 	mov	r6,r8
10000600:	e00b883a 	mov	r5,fp
10000604:	d8c00115 	stw	r3,4(sp)
10000608:	da000015 	stw	r8,0(sp)
1000060c:	00011e80 	call	100011e8 <memmove>
10000610:	da000017 	ldw	r8,0(sp)
10000614:	80800017 	ldw	r2,0(r16)
10000618:	a809883a 	mov	r4,r21
1000061c:	800b883a 	mov	r5,r16
10000620:	1205883a 	add	r2,r2,r8
10000624:	80800015 	stw	r2,0(r16)
10000628:	da000015 	stw	r8,0(sp)
1000062c:	0001a240 	call	10001a24 <_fflush_r>
10000630:	d8c00117 	ldw	r3,4(sp)
10000634:	da000017 	ldw	r8,0(sp)
10000638:	103fc31e 	bne	r2,zero,10000548 <__alt_data_end+0xf8000548>
1000063c:	4029883a 	mov	r20,r8
10000640:	b52dc83a 	sub	r22,r22,r20
10000644:	b03fe11e 	bne	r22,zero,100005cc <__alt_data_end+0xf80005cc>
10000648:	a809883a 	mov	r4,r21
1000064c:	800b883a 	mov	r5,r16
10000650:	0001a240 	call	10001a24 <_fflush_r>
10000654:	103fbc1e 	bne	r2,zero,10000548 <__alt_data_end+0xf8000548>
10000658:	0007883a 	mov	r3,zero
1000065c:	003fdb06 	br	100005cc <__alt_data_end+0xf80005cc>
10000660:	81000017 	ldw	r4,0(r16)
10000664:	80800417 	ldw	r2,16(r16)
10000668:	1100012e 	bgeu	r2,r4,10000670 <__sfvwrite_r+0x2ec>
1000066c:	a4805836 	bltu	r20,r18,100007d0 <__sfvwrite_r+0x44c>
10000670:	81c00517 	ldw	r7,20(r16)
10000674:	91c01a36 	bltu	r18,r7,100006e0 <__sfvwrite_r+0x35c>
10000678:	80800917 	ldw	r2,36(r16)
1000067c:	81400717 	ldw	r5,28(r16)
10000680:	a809883a 	mov	r4,r21
10000684:	b00d883a 	mov	r6,r22
10000688:	103ee83a 	callr	r2
1000068c:	1029883a 	mov	r20,r2
10000690:	00bfad0e 	bge	zero,r2,10000548 <__alt_data_end+0xf8000548>
10000694:	a005883a 	mov	r2,r20
10000698:	003f9306 	br	100004e8 <__alt_data_end+0xf80004e8>
1000069c:	b80d883a 	mov	r6,r23
100006a0:	e00b883a 	mov	r5,fp
100006a4:	d8c00115 	stw	r3,4(sp)
100006a8:	00011e80 	call	100011e8 <memmove>
100006ac:	80800217 	ldw	r2,8(r16)
100006b0:	81000017 	ldw	r4,0(r16)
100006b4:	d8c00117 	ldw	r3,4(sp)
100006b8:	15c5c83a 	sub	r2,r2,r23
100006bc:	25ef883a 	add	r23,r4,r23
100006c0:	80800215 	stw	r2,8(r16)
100006c4:	85c00015 	stw	r23,0(r16)
100006c8:	003fbe06 	br	100005c4 <__alt_data_end+0xf80005c4>
100006cc:	81000017 	ldw	r4,0(r16)
100006d0:	9039883a 	mov	fp,r18
100006d4:	9029883a 	mov	r20,r18
100006d8:	902f883a 	mov	r23,r18
100006dc:	003f7806 	br	100004c0 <__alt_data_end+0xf80004c0>
100006e0:	b00b883a 	mov	r5,r22
100006e4:	900d883a 	mov	r6,r18
100006e8:	00011e80 	call	100011e8 <memmove>
100006ec:	80c00217 	ldw	r3,8(r16)
100006f0:	80800017 	ldw	r2,0(r16)
100006f4:	9029883a 	mov	r20,r18
100006f8:	1c87c83a 	sub	r3,r3,r18
100006fc:	1485883a 	add	r2,r2,r18
10000700:	80800015 	stw	r2,0(r16)
10000704:	80c00215 	stw	r3,8(r16)
10000708:	9005883a 	mov	r2,r18
1000070c:	003f7606 	br	100004e8 <__alt_data_end+0xf80004e8>
10000710:	e009883a 	mov	r4,fp
10000714:	01400284 	movi	r5,10
10000718:	900d883a 	mov	r6,r18
1000071c:	0000ff40 	call	10000ff4 <memchr>
10000720:	10003926 	beq	r2,zero,10000808 <__sfvwrite_r+0x484>
10000724:	15800044 	addi	r22,r2,1
10000728:	b72dc83a 	sub	r22,r22,fp
1000072c:	00c00044 	movi	r3,1
10000730:	003f8f06 	br	10000570 <__alt_data_end+0xf8000570>
10000734:	81000517 	ldw	r4,20(r16)
10000738:	81400417 	ldw	r5,16(r16)
1000073c:	80c00017 	ldw	r3,0(r16)
10000740:	210d883a 	add	r6,r4,r4
10000744:	3109883a 	add	r4,r6,r4
10000748:	2028d7fa 	srli	r20,r4,31
1000074c:	196fc83a 	sub	r23,r3,r5
10000750:	b9800044 	addi	r6,r23,1
10000754:	a109883a 	add	r4,r20,r4
10000758:	2029d07a 	srai	r20,r4,1
1000075c:	348d883a 	add	r6,r6,r18
10000760:	a180272e 	bgeu	r20,r6,10000800 <__sfvwrite_r+0x47c>
10000764:	3029883a 	mov	r20,r6
10000768:	1081000c 	andi	r2,r2,1024
1000076c:	a809883a 	mov	r4,r21
10000770:	103f6d26 	beq	r2,zero,10000528 <__alt_data_end+0xf8000528>
10000774:	300b883a 	mov	r5,r6
10000778:	00008300 	call	10000830 <_malloc_r>
1000077c:	1039883a 	mov	fp,r2
10000780:	103f6f26 	beq	r2,zero,10000540 <__alt_data_end+0xf8000540>
10000784:	81400417 	ldw	r5,16(r16)
10000788:	1009883a 	mov	r4,r2
1000078c:	b80d883a 	mov	r6,r23
10000790:	00010dc0 	call	100010dc <memcpy>
10000794:	8080030b 	ldhu	r2,12(r16)
10000798:	00fedfc4 	movi	r3,-1153
1000079c:	10c4703a 	and	r2,r2,r3
100007a0:	10802014 	ori	r2,r2,128
100007a4:	8080030d 	sth	r2,12(r16)
100007a8:	e5c9883a 	add	r4,fp,r23
100007ac:	a5c7c83a 	sub	r3,r20,r23
100007b0:	87000415 	stw	fp,16(r16)
100007b4:	85000515 	stw	r20,20(r16)
100007b8:	81000015 	stw	r4,0(r16)
100007bc:	9039883a 	mov	fp,r18
100007c0:	80c00215 	stw	r3,8(r16)
100007c4:	9029883a 	mov	r20,r18
100007c8:	902f883a 	mov	r23,r18
100007cc:	003f3c06 	br	100004c0 <__alt_data_end+0xf80004c0>
100007d0:	b00b883a 	mov	r5,r22
100007d4:	a00d883a 	mov	r6,r20
100007d8:	00011e80 	call	100011e8 <memmove>
100007dc:	80800017 	ldw	r2,0(r16)
100007e0:	a809883a 	mov	r4,r21
100007e4:	800b883a 	mov	r5,r16
100007e8:	1505883a 	add	r2,r2,r20
100007ec:	80800015 	stw	r2,0(r16)
100007f0:	0001a240 	call	10001a24 <_fflush_r>
100007f4:	103f541e 	bne	r2,zero,10000548 <__alt_data_end+0xf8000548>
100007f8:	a005883a 	mov	r2,r20
100007fc:	003f3a06 	br	100004e8 <__alt_data_end+0xf80004e8>
10000800:	a00d883a 	mov	r6,r20
10000804:	003fd806 	br	10000768 <__alt_data_end+0xf8000768>
10000808:	95800044 	addi	r22,r18,1
1000080c:	00c00044 	movi	r3,1
10000810:	003f5706 	br	10000570 <__alt_data_end+0xf8000570>
10000814:	80c0030b 	ldhu	r3,12(r16)
10000818:	00bfffc4 	movi	r2,-1
1000081c:	18c01014 	ori	r3,r3,64
10000820:	80c0030d 	sth	r3,12(r16)
10000824:	00c00244 	movi	r3,9
10000828:	a8c00015 	stw	r3,0(r21)
1000082c:	003f0106 	br	10000434 <__alt_data_end+0xf8000434>

10000830 <_malloc_r>:
10000830:	defff504 	addi	sp,sp,-44
10000834:	dc800315 	stw	r18,12(sp)
10000838:	dfc00a15 	stw	ra,40(sp)
1000083c:	df000915 	stw	fp,36(sp)
10000840:	ddc00815 	stw	r23,32(sp)
10000844:	dd800715 	stw	r22,28(sp)
10000848:	dd400615 	stw	r21,24(sp)
1000084c:	dd000515 	stw	r20,20(sp)
10000850:	dcc00415 	stw	r19,16(sp)
10000854:	dc400215 	stw	r17,8(sp)
10000858:	dc000115 	stw	r16,4(sp)
1000085c:	288002c4 	addi	r2,r5,11
10000860:	00c00584 	movi	r3,22
10000864:	2025883a 	mov	r18,r4
10000868:	18802b2e 	bgeu	r3,r2,10000918 <_malloc_r+0xe8>
1000086c:	047ffe04 	movi	r17,-8
10000870:	1462703a 	and	r17,r2,r17
10000874:	88002a16 	blt	r17,zero,10000920 <_malloc_r+0xf0>
10000878:	89402936 	bltu	r17,r5,10000920 <_malloc_r+0xf0>
1000087c:	9009883a 	mov	r4,r18
10000880:	00033500 	call	10003350 <__malloc_lock>
10000884:	00807dc4 	movi	r2,503
10000888:	14402936 	bltu	r2,r17,10000930 <_malloc_r+0x100>
1000088c:	8808d0fa 	srli	r4,r17,3
10000890:	04c40034 	movhi	r19,4096
10000894:	9cd61e04 	addi	r19,r19,22648
10000898:	2105883a 	add	r2,r4,r4
1000089c:	1085883a 	add	r2,r2,r2
100008a0:	1085883a 	add	r2,r2,r2
100008a4:	9885883a 	add	r2,r19,r2
100008a8:	14000317 	ldw	r16,12(r2)
100008ac:	80815226 	beq	r16,r2,10000df8 <_malloc_r+0x5c8>
100008b0:	81000117 	ldw	r4,4(r16)
100008b4:	00bfff04 	movi	r2,-4
100008b8:	80c00317 	ldw	r3,12(r16)
100008bc:	2084703a 	and	r2,r4,r2
100008c0:	8085883a 	add	r2,r16,r2
100008c4:	81000217 	ldw	r4,8(r16)
100008c8:	11400117 	ldw	r5,4(r2)
100008cc:	20c00315 	stw	r3,12(r4)
100008d0:	19000215 	stw	r4,8(r3)
100008d4:	28c00054 	ori	r3,r5,1
100008d8:	10c00115 	stw	r3,4(r2)
100008dc:	9009883a 	mov	r4,r18
100008e0:	00033700 	call	10003370 <__malloc_unlock>
100008e4:	80800204 	addi	r2,r16,8
100008e8:	dfc00a17 	ldw	ra,40(sp)
100008ec:	df000917 	ldw	fp,36(sp)
100008f0:	ddc00817 	ldw	r23,32(sp)
100008f4:	dd800717 	ldw	r22,28(sp)
100008f8:	dd400617 	ldw	r21,24(sp)
100008fc:	dd000517 	ldw	r20,20(sp)
10000900:	dcc00417 	ldw	r19,16(sp)
10000904:	dc800317 	ldw	r18,12(sp)
10000908:	dc400217 	ldw	r17,8(sp)
1000090c:	dc000117 	ldw	r16,4(sp)
10000910:	dec00b04 	addi	sp,sp,44
10000914:	f800283a 	ret
10000918:	04400404 	movi	r17,16
1000091c:	897fd72e 	bgeu	r17,r5,1000087c <__alt_data_end+0xf800087c>
10000920:	00800304 	movi	r2,12
10000924:	90800015 	stw	r2,0(r18)
10000928:	0005883a 	mov	r2,zero
1000092c:	003fee06 	br	100008e8 <__alt_data_end+0xf80008e8>
10000930:	8808d27a 	srli	r4,r17,9
10000934:	20007126 	beq	r4,zero,10000afc <_malloc_r+0x2cc>
10000938:	00800104 	movi	r2,4
1000093c:	1100f536 	bltu	r2,r4,10000d14 <_malloc_r+0x4e4>
10000940:	8808d1ba 	srli	r4,r17,6
10000944:	21000e04 	addi	r4,r4,56
10000948:	210b883a 	add	r5,r4,r4
1000094c:	294b883a 	add	r5,r5,r5
10000950:	294b883a 	add	r5,r5,r5
10000954:	04c40034 	movhi	r19,4096
10000958:	9cd61e04 	addi	r19,r19,22648
1000095c:	994b883a 	add	r5,r19,r5
10000960:	2c000317 	ldw	r16,12(r5)
10000964:	2c000e26 	beq	r5,r16,100009a0 <_malloc_r+0x170>
10000968:	80c00117 	ldw	r3,4(r16)
1000096c:	01ffff04 	movi	r7,-4
10000970:	018003c4 	movi	r6,15
10000974:	19c6703a 	and	r3,r3,r7
10000978:	1c45c83a 	sub	r2,r3,r17
1000097c:	30800716 	blt	r6,r2,1000099c <_malloc_r+0x16c>
10000980:	1000610e 	bge	r2,zero,10000b08 <_malloc_r+0x2d8>
10000984:	84000317 	ldw	r16,12(r16)
10000988:	2c000526 	beq	r5,r16,100009a0 <_malloc_r+0x170>
1000098c:	80c00117 	ldw	r3,4(r16)
10000990:	19c6703a 	and	r3,r3,r7
10000994:	1c45c83a 	sub	r2,r3,r17
10000998:	30bff90e 	bge	r6,r2,10000980 <__alt_data_end+0xf8000980>
1000099c:	213fffc4 	addi	r4,r4,-1
100009a0:	21000044 	addi	r4,r4,1
100009a4:	9c000417 	ldw	r16,16(r19)
100009a8:	00c40034 	movhi	r3,4096
100009ac:	18d61e04 	addi	r3,r3,22648
100009b0:	1a400204 	addi	r9,r3,8
100009b4:	82410926 	beq	r16,r9,10000ddc <_malloc_r+0x5ac>
100009b8:	81400117 	ldw	r5,4(r16)
100009bc:	00bfff04 	movi	r2,-4
100009c0:	018003c4 	movi	r6,15
100009c4:	2884703a 	and	r2,r5,r2
100009c8:	144bc83a 	sub	r5,r2,r17
100009cc:	3140f416 	blt	r6,r5,10000da0 <_malloc_r+0x570>
100009d0:	1a400515 	stw	r9,20(r3)
100009d4:	1a400415 	stw	r9,16(r3)
100009d8:	2800570e 	bge	r5,zero,10000b38 <_malloc_r+0x308>
100009dc:	01407fc4 	movi	r5,511
100009e0:	2880d436 	bltu	r5,r2,10000d34 <_malloc_r+0x504>
100009e4:	1004d0fa 	srli	r2,r2,3
100009e8:	02000044 	movi	r8,1
100009ec:	19c00117 	ldw	r7,4(r3)
100009f0:	108b883a 	add	r5,r2,r2
100009f4:	294b883a 	add	r5,r5,r5
100009f8:	1005d0ba 	srai	r2,r2,2
100009fc:	294b883a 	add	r5,r5,r5
10000a00:	28cb883a 	add	r5,r5,r3
10000a04:	29800217 	ldw	r6,8(r5)
10000a08:	4084983a 	sll	r2,r8,r2
10000a0c:	81400315 	stw	r5,12(r16)
10000a10:	81800215 	stw	r6,8(r16)
10000a14:	11c4b03a 	or	r2,r2,r7
10000a18:	2c000215 	stw	r16,8(r5)
10000a1c:	18800115 	stw	r2,4(r3)
10000a20:	34000315 	stw	r16,12(r6)
10000a24:	2007d0ba 	srai	r3,r4,2
10000a28:	01400044 	movi	r5,1
10000a2c:	28ca983a 	sll	r5,r5,r3
10000a30:	11404936 	bltu	r2,r5,10000b58 <_malloc_r+0x328>
10000a34:	1146703a 	and	r3,r2,r5
10000a38:	18000a1e 	bne	r3,zero,10000a64 <_malloc_r+0x234>
10000a3c:	00ffff04 	movi	r3,-4
10000a40:	294b883a 	add	r5,r5,r5
10000a44:	20c8703a 	and	r4,r4,r3
10000a48:	1146703a 	and	r3,r2,r5
10000a4c:	21000104 	addi	r4,r4,4
10000a50:	1800041e 	bne	r3,zero,10000a64 <_malloc_r+0x234>
10000a54:	294b883a 	add	r5,r5,r5
10000a58:	1146703a 	and	r3,r2,r5
10000a5c:	21000104 	addi	r4,r4,4
10000a60:	183ffc26 	beq	r3,zero,10000a54 <__alt_data_end+0xf8000a54>
10000a64:	023fff04 	movi	r8,-4
10000a68:	01c003c4 	movi	r7,15
10000a6c:	2105883a 	add	r2,r4,r4
10000a70:	1085883a 	add	r2,r2,r2
10000a74:	1085883a 	add	r2,r2,r2
10000a78:	9897883a 	add	r11,r19,r2
10000a7c:	5a800304 	addi	r10,r11,12
10000a80:	2019883a 	mov	r12,r4
10000a84:	54000017 	ldw	r16,0(r10)
10000a88:	51bffd04 	addi	r6,r10,-12
10000a8c:	8180041e 	bne	r16,r6,10000aa0 <_malloc_r+0x270>
10000a90:	0000d406 	br	10000de4 <_malloc_r+0x5b4>
10000a94:	1000dd0e 	bge	r2,zero,10000e0c <_malloc_r+0x5dc>
10000a98:	84000317 	ldw	r16,12(r16)
10000a9c:	8180d126 	beq	r16,r6,10000de4 <_malloc_r+0x5b4>
10000aa0:	80c00117 	ldw	r3,4(r16)
10000aa4:	1a06703a 	and	r3,r3,r8
10000aa8:	1c45c83a 	sub	r2,r3,r17
10000aac:	38bff90e 	bge	r7,r2,10000a94 <__alt_data_end+0xf8000a94>
10000ab0:	80c00317 	ldw	r3,12(r16)
10000ab4:	81000217 	ldw	r4,8(r16)
10000ab8:	89400054 	ori	r5,r17,1
10000abc:	81400115 	stw	r5,4(r16)
10000ac0:	20c00315 	stw	r3,12(r4)
10000ac4:	19000215 	stw	r4,8(r3)
10000ac8:	8463883a 	add	r17,r16,r17
10000acc:	9c400515 	stw	r17,20(r19)
10000ad0:	9c400415 	stw	r17,16(r19)
10000ad4:	10c00054 	ori	r3,r2,1
10000ad8:	8a400315 	stw	r9,12(r17)
10000adc:	8a400215 	stw	r9,8(r17)
10000ae0:	88c00115 	stw	r3,4(r17)
10000ae4:	88a3883a 	add	r17,r17,r2
10000ae8:	88800015 	stw	r2,0(r17)
10000aec:	9009883a 	mov	r4,r18
10000af0:	00033700 	call	10003370 <__malloc_unlock>
10000af4:	80800204 	addi	r2,r16,8
10000af8:	003f7b06 	br	100008e8 <__alt_data_end+0xf80008e8>
10000afc:	01401f84 	movi	r5,126
10000b00:	01000fc4 	movi	r4,63
10000b04:	003f9106 	br	1000094c <__alt_data_end+0xf800094c>
10000b08:	80800317 	ldw	r2,12(r16)
10000b0c:	81000217 	ldw	r4,8(r16)
10000b10:	80c7883a 	add	r3,r16,r3
10000b14:	19400117 	ldw	r5,4(r3)
10000b18:	20800315 	stw	r2,12(r4)
10000b1c:	11000215 	stw	r4,8(r2)
10000b20:	28800054 	ori	r2,r5,1
10000b24:	18800115 	stw	r2,4(r3)
10000b28:	9009883a 	mov	r4,r18
10000b2c:	00033700 	call	10003370 <__malloc_unlock>
10000b30:	80800204 	addi	r2,r16,8
10000b34:	003f6c06 	br	100008e8 <__alt_data_end+0xf80008e8>
10000b38:	8085883a 	add	r2,r16,r2
10000b3c:	10c00117 	ldw	r3,4(r2)
10000b40:	9009883a 	mov	r4,r18
10000b44:	18c00054 	ori	r3,r3,1
10000b48:	10c00115 	stw	r3,4(r2)
10000b4c:	00033700 	call	10003370 <__malloc_unlock>
10000b50:	80800204 	addi	r2,r16,8
10000b54:	003f6406 	br	100008e8 <__alt_data_end+0xf80008e8>
10000b58:	9c000217 	ldw	r16,8(r19)
10000b5c:	00bfff04 	movi	r2,-4
10000b60:	85400117 	ldw	r21,4(r16)
10000b64:	a8aa703a 	and	r21,r21,r2
10000b68:	ac400336 	bltu	r21,r17,10000b78 <_malloc_r+0x348>
10000b6c:	ac45c83a 	sub	r2,r21,r17
10000b70:	00c003c4 	movi	r3,15
10000b74:	18805d16 	blt	r3,r2,10000cec <_malloc_r+0x4bc>
10000b78:	00840074 	movhi	r2,4097
10000b7c:	10a24d04 	addi	r2,r2,-30412
10000b80:	00c40034 	movhi	r3,4096
10000b84:	18dba404 	addi	r3,r3,28304
10000b88:	15c00017 	ldw	r23,0(r2)
10000b8c:	19000017 	ldw	r4,0(r3)
10000b90:	00bfffc4 	movi	r2,-1
10000b94:	8579883a 	add	fp,r16,r21
10000b98:	8def883a 	add	r23,r17,r23
10000b9c:	2080e426 	beq	r4,r2,10000f30 <_malloc_r+0x700>
10000ba0:	bdc403c4 	addi	r23,r23,4111
10000ba4:	00bc0004 	movi	r2,-4096
10000ba8:	b8ae703a 	and	r23,r23,r2
10000bac:	9009883a 	mov	r4,r18
10000bb0:	b80b883a 	mov	r5,r23
10000bb4:	d8c00015 	stw	r3,0(sp)
10000bb8:	00018880 	call	10001888 <_sbrk_r>
10000bbc:	1029883a 	mov	r20,r2
10000bc0:	00bfffc4 	movi	r2,-1
10000bc4:	d8c00017 	ldw	r3,0(sp)
10000bc8:	a080a426 	beq	r20,r2,10000e5c <_malloc_r+0x62c>
10000bcc:	a700a236 	bltu	r20,fp,10000e58 <_malloc_r+0x628>
10000bd0:	05840074 	movhi	r22,4097
10000bd4:	b5a25504 	addi	r22,r22,-30380
10000bd8:	b0800017 	ldw	r2,0(r22)
10000bdc:	b885883a 	add	r2,r23,r2
10000be0:	b0800015 	stw	r2,0(r22)
10000be4:	e500da26 	beq	fp,r20,10000f50 <_malloc_r+0x720>
10000be8:	19000017 	ldw	r4,0(r3)
10000bec:	00ffffc4 	movi	r3,-1
10000bf0:	20c0e426 	beq	r4,r3,10000f84 <_malloc_r+0x754>
10000bf4:	a739c83a 	sub	fp,r20,fp
10000bf8:	1705883a 	add	r2,r2,fp
10000bfc:	b0800015 	stw	r2,0(r22)
10000c00:	a08001cc 	andi	r2,r20,7
10000c04:	1000b526 	beq	r2,zero,10000edc <_malloc_r+0x6ac>
10000c08:	a0a9c83a 	sub	r20,r20,r2
10000c0c:	00c40204 	movi	r3,4104
10000c10:	a5000204 	addi	r20,r20,8
10000c14:	1885c83a 	sub	r2,r3,r2
10000c18:	a5c7883a 	add	r3,r20,r23
10000c1c:	18c3ffcc 	andi	r3,r3,4095
10000c20:	10efc83a 	sub	r23,r2,r3
10000c24:	9009883a 	mov	r4,r18
10000c28:	b80b883a 	mov	r5,r23
10000c2c:	00018880 	call	10001888 <_sbrk_r>
10000c30:	00ffffc4 	movi	r3,-1
10000c34:	10c0d026 	beq	r2,r3,10000f78 <_malloc_r+0x748>
10000c38:	1505c83a 	sub	r2,r2,r20
10000c3c:	b887883a 	add	r3,r23,r2
10000c40:	18c00054 	ori	r3,r3,1
10000c44:	b0800017 	ldw	r2,0(r22)
10000c48:	9d000215 	stw	r20,8(r19)
10000c4c:	a0c00115 	stw	r3,4(r20)
10000c50:	b885883a 	add	r2,r23,r2
10000c54:	b0800015 	stw	r2,0(r22)
10000c58:	84c00e26 	beq	r16,r19,10000c94 <_malloc_r+0x464>
10000c5c:	00c003c4 	movi	r3,15
10000c60:	1d40a02e 	bgeu	r3,r21,10000ee4 <_malloc_r+0x6b4>
10000c64:	81400117 	ldw	r5,4(r16)
10000c68:	ad7ffd04 	addi	r21,r21,-12
10000c6c:	013ffe04 	movi	r4,-8
10000c70:	a908703a 	and	r4,r21,r4
10000c74:	2940004c 	andi	r5,r5,1
10000c78:	214ab03a 	or	r5,r4,r5
10000c7c:	81400115 	stw	r5,4(r16)
10000c80:	01800144 	movi	r6,5
10000c84:	810b883a 	add	r5,r16,r4
10000c88:	29800115 	stw	r6,4(r5)
10000c8c:	29800215 	stw	r6,8(r5)
10000c90:	1900c036 	bltu	r3,r4,10000f94 <_malloc_r+0x764>
10000c94:	00c40074 	movhi	r3,4097
10000c98:	18e24c04 	addi	r3,r3,-30416
10000c9c:	19000017 	ldw	r4,0(r3)
10000ca0:	2080012e 	bgeu	r4,r2,10000ca8 <_malloc_r+0x478>
10000ca4:	18800015 	stw	r2,0(r3)
10000ca8:	00c40074 	movhi	r3,4097
10000cac:	18e24b04 	addi	r3,r3,-30420
10000cb0:	19000017 	ldw	r4,0(r3)
10000cb4:	9c000217 	ldw	r16,8(r19)
10000cb8:	2080012e 	bgeu	r4,r2,10000cc0 <_malloc_r+0x490>
10000cbc:	18800015 	stw	r2,0(r3)
10000cc0:	80c00117 	ldw	r3,4(r16)
10000cc4:	00bfff04 	movi	r2,-4
10000cc8:	1886703a 	and	r3,r3,r2
10000ccc:	1c45c83a 	sub	r2,r3,r17
10000cd0:	1c400236 	bltu	r3,r17,10000cdc <_malloc_r+0x4ac>
10000cd4:	00c003c4 	movi	r3,15
10000cd8:	18800416 	blt	r3,r2,10000cec <_malloc_r+0x4bc>
10000cdc:	9009883a 	mov	r4,r18
10000ce0:	00033700 	call	10003370 <__malloc_unlock>
10000ce4:	0005883a 	mov	r2,zero
10000ce8:	003eff06 	br	100008e8 <__alt_data_end+0xf80008e8>
10000cec:	88c00054 	ori	r3,r17,1
10000cf0:	80c00115 	stw	r3,4(r16)
10000cf4:	8463883a 	add	r17,r16,r17
10000cf8:	10800054 	ori	r2,r2,1
10000cfc:	9c400215 	stw	r17,8(r19)
10000d00:	88800115 	stw	r2,4(r17)
10000d04:	9009883a 	mov	r4,r18
10000d08:	00033700 	call	10003370 <__malloc_unlock>
10000d0c:	80800204 	addi	r2,r16,8
10000d10:	003ef506 	br	100008e8 <__alt_data_end+0xf80008e8>
10000d14:	00800504 	movi	r2,20
10000d18:	1100482e 	bgeu	r2,r4,10000e3c <_malloc_r+0x60c>
10000d1c:	00801504 	movi	r2,84
10000d20:	11006836 	bltu	r2,r4,10000ec4 <_malloc_r+0x694>
10000d24:	8808d33a 	srli	r4,r17,12
10000d28:	21001b84 	addi	r4,r4,110
10000d2c:	210b883a 	add	r5,r4,r4
10000d30:	003f0606 	br	1000094c <__alt_data_end+0xf800094c>
10000d34:	1006d27a 	srli	r3,r2,9
10000d38:	01400104 	movi	r5,4
10000d3c:	28c0422e 	bgeu	r5,r3,10000e48 <_malloc_r+0x618>
10000d40:	01400504 	movi	r5,20
10000d44:	28c07c36 	bltu	r5,r3,10000f38 <_malloc_r+0x708>
10000d48:	194016c4 	addi	r5,r3,91
10000d4c:	294d883a 	add	r6,r5,r5
10000d50:	318d883a 	add	r6,r6,r6
10000d54:	318d883a 	add	r6,r6,r6
10000d58:	998d883a 	add	r6,r19,r6
10000d5c:	30c00217 	ldw	r3,8(r6)
10000d60:	01c40034 	movhi	r7,4096
10000d64:	39d61e04 	addi	r7,r7,22648
10000d68:	19806326 	beq	r3,r6,10000ef8 <_malloc_r+0x6c8>
10000d6c:	01ffff04 	movi	r7,-4
10000d70:	19400117 	ldw	r5,4(r3)
10000d74:	29ca703a 	and	r5,r5,r7
10000d78:	1140022e 	bgeu	r2,r5,10000d84 <_malloc_r+0x554>
10000d7c:	18c00217 	ldw	r3,8(r3)
10000d80:	30fffb1e 	bne	r6,r3,10000d70 <__alt_data_end+0xf8000d70>
10000d84:	19400317 	ldw	r5,12(r3)
10000d88:	98800117 	ldw	r2,4(r19)
10000d8c:	81400315 	stw	r5,12(r16)
10000d90:	80c00215 	stw	r3,8(r16)
10000d94:	2c000215 	stw	r16,8(r5)
10000d98:	1c000315 	stw	r16,12(r3)
10000d9c:	003f2106 	br	10000a24 <__alt_data_end+0xf8000a24>
10000da0:	88800054 	ori	r2,r17,1
10000da4:	80800115 	stw	r2,4(r16)
10000da8:	8463883a 	add	r17,r16,r17
10000dac:	1c400515 	stw	r17,20(r3)
10000db0:	1c400415 	stw	r17,16(r3)
10000db4:	28800054 	ori	r2,r5,1
10000db8:	88800115 	stw	r2,4(r17)
10000dbc:	8a400315 	stw	r9,12(r17)
10000dc0:	8a400215 	stw	r9,8(r17)
10000dc4:	8963883a 	add	r17,r17,r5
10000dc8:	89400015 	stw	r5,0(r17)
10000dcc:	9009883a 	mov	r4,r18
10000dd0:	00033700 	call	10003370 <__malloc_unlock>
10000dd4:	80800204 	addi	r2,r16,8
10000dd8:	003ec306 	br	100008e8 <__alt_data_end+0xf80008e8>
10000ddc:	18800117 	ldw	r2,4(r3)
10000de0:	003f1006 	br	10000a24 <__alt_data_end+0xf8000a24>
10000de4:	63000044 	addi	r12,r12,1
10000de8:	608000cc 	andi	r2,r12,3
10000dec:	52800204 	addi	r10,r10,8
10000df0:	103f241e 	bne	r2,zero,10000a84 <__alt_data_end+0xf8000a84>
10000df4:	00002106 	br	10000e7c <_malloc_r+0x64c>
10000df8:	80800204 	addi	r2,r16,8
10000dfc:	84000517 	ldw	r16,20(r16)
10000e00:	143eab1e 	bne	r2,r16,100008b0 <__alt_data_end+0xf80008b0>
10000e04:	21000084 	addi	r4,r4,2
10000e08:	003ee606 	br	100009a4 <__alt_data_end+0xf80009a4>
10000e0c:	80c7883a 	add	r3,r16,r3
10000e10:	19400117 	ldw	r5,4(r3)
10000e14:	80800317 	ldw	r2,12(r16)
10000e18:	81000217 	ldw	r4,8(r16)
10000e1c:	29400054 	ori	r5,r5,1
10000e20:	19400115 	stw	r5,4(r3)
10000e24:	20800315 	stw	r2,12(r4)
10000e28:	11000215 	stw	r4,8(r2)
10000e2c:	9009883a 	mov	r4,r18
10000e30:	00033700 	call	10003370 <__malloc_unlock>
10000e34:	80800204 	addi	r2,r16,8
10000e38:	003eab06 	br	100008e8 <__alt_data_end+0xf80008e8>
10000e3c:	210016c4 	addi	r4,r4,91
10000e40:	210b883a 	add	r5,r4,r4
10000e44:	003ec106 	br	1000094c <__alt_data_end+0xf800094c>
10000e48:	100ad1ba 	srli	r5,r2,6
10000e4c:	29400e04 	addi	r5,r5,56
10000e50:	294d883a 	add	r6,r5,r5
10000e54:	003fbe06 	br	10000d50 <__alt_data_end+0xf8000d50>
10000e58:	84ff5d26 	beq	r16,r19,10000bd0 <__alt_data_end+0xf8000bd0>
10000e5c:	9c000217 	ldw	r16,8(r19)
10000e60:	00bfff04 	movi	r2,-4
10000e64:	80c00117 	ldw	r3,4(r16)
10000e68:	1886703a 	and	r3,r3,r2
10000e6c:	003f9706 	br	10000ccc <__alt_data_end+0xf8000ccc>
10000e70:	5ac00017 	ldw	r11,0(r11)
10000e74:	213fffc4 	addi	r4,r4,-1
10000e78:	58805c1e 	bne	r11,r2,10000fec <_malloc_r+0x7bc>
10000e7c:	20c000cc 	andi	r3,r4,3
10000e80:	58bffe04 	addi	r2,r11,-8
10000e84:	183ffa1e 	bne	r3,zero,10000e70 <__alt_data_end+0xf8000e70>
10000e88:	98800117 	ldw	r2,4(r19)
10000e8c:	0146303a 	nor	r3,zero,r5
10000e90:	1884703a 	and	r2,r3,r2
10000e94:	98800115 	stw	r2,4(r19)
10000e98:	294b883a 	add	r5,r5,r5
10000e9c:	117f2e36 	bltu	r2,r5,10000b58 <__alt_data_end+0xf8000b58>
10000ea0:	283f2d26 	beq	r5,zero,10000b58 <__alt_data_end+0xf8000b58>
10000ea4:	1146703a 	and	r3,r2,r5
10000ea8:	6009883a 	mov	r4,r12
10000eac:	183eef1e 	bne	r3,zero,10000a6c <__alt_data_end+0xf8000a6c>
10000eb0:	294b883a 	add	r5,r5,r5
10000eb4:	1146703a 	and	r3,r2,r5
10000eb8:	21000104 	addi	r4,r4,4
10000ebc:	183ffc26 	beq	r3,zero,10000eb0 <__alt_data_end+0xf8000eb0>
10000ec0:	003eea06 	br	10000a6c <__alt_data_end+0xf8000a6c>
10000ec4:	00805504 	movi	r2,340
10000ec8:	11001336 	bltu	r2,r4,10000f18 <_malloc_r+0x6e8>
10000ecc:	8808d3fa 	srli	r4,r17,15
10000ed0:	21001dc4 	addi	r4,r4,119
10000ed4:	210b883a 	add	r5,r4,r4
10000ed8:	003e9c06 	br	1000094c <__alt_data_end+0xf800094c>
10000edc:	00840004 	movi	r2,4096
10000ee0:	003f4d06 	br	10000c18 <__alt_data_end+0xf8000c18>
10000ee4:	00800044 	movi	r2,1
10000ee8:	a0800115 	stw	r2,4(r20)
10000eec:	a021883a 	mov	r16,r20
10000ef0:	0007883a 	mov	r3,zero
10000ef4:	003f7506 	br	10000ccc <__alt_data_end+0xf8000ccc>
10000ef8:	280bd0ba 	srai	r5,r5,2
10000efc:	01800044 	movi	r6,1
10000f00:	38800117 	ldw	r2,4(r7)
10000f04:	314c983a 	sll	r6,r6,r5
10000f08:	180b883a 	mov	r5,r3
10000f0c:	3084b03a 	or	r2,r6,r2
10000f10:	38800115 	stw	r2,4(r7)
10000f14:	003f9d06 	br	10000d8c <__alt_data_end+0xf8000d8c>
10000f18:	00815504 	movi	r2,1364
10000f1c:	11001336 	bltu	r2,r4,10000f6c <_malloc_r+0x73c>
10000f20:	8808d4ba 	srli	r4,r17,18
10000f24:	21001f04 	addi	r4,r4,124
10000f28:	210b883a 	add	r5,r4,r4
10000f2c:	003e8706 	br	1000094c <__alt_data_end+0xf800094c>
10000f30:	bdc00404 	addi	r23,r23,16
10000f34:	003f1d06 	br	10000bac <__alt_data_end+0xf8000bac>
10000f38:	01401504 	movi	r5,84
10000f3c:	28c01c36 	bltu	r5,r3,10000fb0 <_malloc_r+0x780>
10000f40:	100ad33a 	srli	r5,r2,12
10000f44:	29401b84 	addi	r5,r5,110
10000f48:	294d883a 	add	r6,r5,r5
10000f4c:	003f8006 	br	10000d50 <__alt_data_end+0xf8000d50>
10000f50:	e103ffcc 	andi	r4,fp,4095
10000f54:	203f241e 	bne	r4,zero,10000be8 <__alt_data_end+0xf8000be8>
10000f58:	98c00217 	ldw	r3,8(r19)
10000f5c:	bd49883a 	add	r4,r23,r21
10000f60:	21000054 	ori	r4,r4,1
10000f64:	19000115 	stw	r4,4(r3)
10000f68:	003f4a06 	br	10000c94 <__alt_data_end+0xf8000c94>
10000f6c:	01403f04 	movi	r5,252
10000f70:	01001f84 	movi	r4,126
10000f74:	003e7506 	br	1000094c <__alt_data_end+0xf800094c>
10000f78:	00c00044 	movi	r3,1
10000f7c:	002f883a 	mov	r23,zero
10000f80:	003f3006 	br	10000c44 <__alt_data_end+0xf8000c44>
10000f84:	00840034 	movhi	r2,4096
10000f88:	109ba404 	addi	r2,r2,28304
10000f8c:	15000015 	stw	r20,0(r2)
10000f90:	003f1b06 	br	10000c00 <__alt_data_end+0xf8000c00>
10000f94:	9009883a 	mov	r4,r18
10000f98:	81400204 	addi	r5,r16,8
10000f9c:	00021780 	call	10002178 <_free_r>
10000fa0:	00840074 	movhi	r2,4097
10000fa4:	10a25504 	addi	r2,r2,-30380
10000fa8:	10800017 	ldw	r2,0(r2)
10000fac:	003f3906 	br	10000c94 <__alt_data_end+0xf8000c94>
10000fb0:	01405504 	movi	r5,340
10000fb4:	28c00436 	bltu	r5,r3,10000fc8 <_malloc_r+0x798>
10000fb8:	100ad3fa 	srli	r5,r2,15
10000fbc:	29401dc4 	addi	r5,r5,119
10000fc0:	294d883a 	add	r6,r5,r5
10000fc4:	003f6206 	br	10000d50 <__alt_data_end+0xf8000d50>
10000fc8:	01415504 	movi	r5,1364
10000fcc:	28c00436 	bltu	r5,r3,10000fe0 <_malloc_r+0x7b0>
10000fd0:	100ad4ba 	srli	r5,r2,18
10000fd4:	29401f04 	addi	r5,r5,124
10000fd8:	294d883a 	add	r6,r5,r5
10000fdc:	003f5c06 	br	10000d50 <__alt_data_end+0xf8000d50>
10000fe0:	01803f04 	movi	r6,252
10000fe4:	01401f84 	movi	r5,126
10000fe8:	003f5906 	br	10000d50 <__alt_data_end+0xf8000d50>
10000fec:	98800117 	ldw	r2,4(r19)
10000ff0:	003fa906 	br	10000e98 <__alt_data_end+0xf8000e98>

10000ff4 <memchr>:
10000ff4:	208000cc 	andi	r2,r4,3
10000ff8:	2811883a 	mov	r8,r5
10000ffc:	10003526 	beq	r2,zero,100010d4 <memchr+0xe0>
10001000:	30bfffc4 	addi	r2,r6,-1
10001004:	30001b26 	beq	r6,zero,10001074 <memchr+0x80>
10001008:	21800003 	ldbu	r6,0(r4)
1000100c:	28c03fcc 	andi	r3,r5,255
10001010:	30c01a26 	beq	r6,r3,1000107c <memchr+0x88>
10001014:	180d883a 	mov	r6,r3
10001018:	00000406 	br	1000102c <memchr+0x38>
1000101c:	10001526 	beq	r2,zero,10001074 <memchr+0x80>
10001020:	20c00003 	ldbu	r3,0(r4)
10001024:	10bfffc4 	addi	r2,r2,-1
10001028:	19801426 	beq	r3,r6,1000107c <memchr+0x88>
1000102c:	21000044 	addi	r4,r4,1
10001030:	20c000cc 	andi	r3,r4,3
10001034:	183ff91e 	bne	r3,zero,1000101c <__alt_data_end+0xf800101c>
10001038:	02c000c4 	movi	r11,3
1000103c:	58801136 	bltu	r11,r2,10001084 <memchr+0x90>
10001040:	10000c26 	beq	r2,zero,10001074 <memchr+0x80>
10001044:	20c00003 	ldbu	r3,0(r4)
10001048:	29403fcc 	andi	r5,r5,255
1000104c:	19400b26 	beq	r3,r5,1000107c <memchr+0x88>
10001050:	20c00044 	addi	r3,r4,1
10001054:	2085883a 	add	r2,r4,r2
10001058:	41803fcc 	andi	r6,r8,255
1000105c:	00000306 	br	1000106c <memchr+0x78>
10001060:	18c00044 	addi	r3,r3,1
10001064:	197fffc3 	ldbu	r5,-1(r3)
10001068:	29800426 	beq	r5,r6,1000107c <memchr+0x88>
1000106c:	1809883a 	mov	r4,r3
10001070:	18bffb1e 	bne	r3,r2,10001060 <__alt_data_end+0xf8001060>
10001074:	0005883a 	mov	r2,zero
10001078:	f800283a 	ret
1000107c:	2005883a 	mov	r2,r4
10001080:	f800283a 	ret
10001084:	28c03fcc 	andi	r3,r5,255
10001088:	180c923a 	slli	r6,r3,8
1000108c:	02bfbff4 	movhi	r10,65279
10001090:	52bfbfc4 	addi	r10,r10,-257
10001094:	02602074 	movhi	r9,32897
10001098:	4a602004 	addi	r9,r9,-32640
1000109c:	30c6b03a 	or	r3,r6,r3
100010a0:	180c943a 	slli	r6,r3,16
100010a4:	30ccb03a 	or	r6,r6,r3
100010a8:	20c00017 	ldw	r3,0(r4)
100010ac:	30c6f03a 	xor	r3,r6,r3
100010b0:	1a8f883a 	add	r7,r3,r10
100010b4:	00c6303a 	nor	r3,zero,r3
100010b8:	38c6703a 	and	r3,r7,r3
100010bc:	1a46703a 	and	r3,r3,r9
100010c0:	183fdf1e 	bne	r3,zero,10001040 <__alt_data_end+0xf8001040>
100010c4:	10bfff04 	addi	r2,r2,-4
100010c8:	21000104 	addi	r4,r4,4
100010cc:	58bff636 	bltu	r11,r2,100010a8 <__alt_data_end+0xf80010a8>
100010d0:	003fdb06 	br	10001040 <__alt_data_end+0xf8001040>
100010d4:	3005883a 	mov	r2,r6
100010d8:	003fd706 	br	10001038 <__alt_data_end+0xf8001038>

100010dc <memcpy>:
100010dc:	00c003c4 	movi	r3,15
100010e0:	2005883a 	mov	r2,r4
100010e4:	1980372e 	bgeu	r3,r6,100011c4 <memcpy+0xe8>
100010e8:	2146b03a 	or	r3,r4,r5
100010ec:	18c000cc 	andi	r3,r3,3
100010f0:	1800371e 	bne	r3,zero,100011d0 <memcpy+0xf4>
100010f4:	327ffc04 	addi	r9,r6,-16
100010f8:	4812d13a 	srli	r9,r9,4
100010fc:	2007883a 	mov	r3,r4
10001100:	280f883a 	mov	r7,r5
10001104:	4808913a 	slli	r4,r9,4
10001108:	1109883a 	add	r4,r2,r4
1000110c:	21000404 	addi	r4,r4,16
10001110:	3a000017 	ldw	r8,0(r7)
10001114:	18c00404 	addi	r3,r3,16
10001118:	39c00404 	addi	r7,r7,16
1000111c:	1a3ffc15 	stw	r8,-16(r3)
10001120:	3a3ffd17 	ldw	r8,-12(r7)
10001124:	1a3ffd15 	stw	r8,-12(r3)
10001128:	3a3ffe17 	ldw	r8,-8(r7)
1000112c:	1a3ffe15 	stw	r8,-8(r3)
10001130:	3a3fff17 	ldw	r8,-4(r7)
10001134:	1a3fff15 	stw	r8,-4(r3)
10001138:	193ff51e 	bne	r3,r4,10001110 <__alt_data_end+0xf8001110>
1000113c:	49000044 	addi	r4,r9,1
10001140:	2008913a 	slli	r4,r4,4
10001144:	328003cc 	andi	r10,r6,15
10001148:	1107883a 	add	r3,r2,r4
1000114c:	290b883a 	add	r5,r5,r4
10001150:	010000c4 	movi	r4,3
10001154:	2280212e 	bgeu	r4,r10,100011dc <memcpy+0x100>
10001158:	52bfff04 	addi	r10,r10,-4
1000115c:	5014d0ba 	srli	r10,r10,2
10001160:	180f883a 	mov	r7,r3
10001164:	2811883a 	mov	r8,r5
10001168:	5289883a 	add	r4,r10,r10
1000116c:	2109883a 	add	r4,r4,r4
10001170:	21000104 	addi	r4,r4,4
10001174:	1909883a 	add	r4,r3,r4
10001178:	42400017 	ldw	r9,0(r8)
1000117c:	39c00104 	addi	r7,r7,4
10001180:	42000104 	addi	r8,r8,4
10001184:	3a7fff15 	stw	r9,-4(r7)
10001188:	393ffb1e 	bne	r7,r4,10001178 <__alt_data_end+0xf8001178>
1000118c:	51000044 	addi	r4,r10,1
10001190:	2109883a 	add	r4,r4,r4
10001194:	2109883a 	add	r4,r4,r4
10001198:	318000cc 	andi	r6,r6,3
1000119c:	1907883a 	add	r3,r3,r4
100011a0:	290b883a 	add	r5,r5,r4
100011a4:	30000c26 	beq	r6,zero,100011d8 <memcpy+0xfc>
100011a8:	298d883a 	add	r6,r5,r6
100011ac:	29c00003 	ldbu	r7,0(r5)
100011b0:	18c00044 	addi	r3,r3,1
100011b4:	29400044 	addi	r5,r5,1
100011b8:	19ffffc5 	stb	r7,-1(r3)
100011bc:	29bffb1e 	bne	r5,r6,100011ac <__alt_data_end+0xf80011ac>
100011c0:	f800283a 	ret
100011c4:	2007883a 	mov	r3,r4
100011c8:	303ff71e 	bne	r6,zero,100011a8 <__alt_data_end+0xf80011a8>
100011cc:	00000206 	br	100011d8 <memcpy+0xfc>
100011d0:	2007883a 	mov	r3,r4
100011d4:	003ff406 	br	100011a8 <__alt_data_end+0xf80011a8>
100011d8:	f800283a 	ret
100011dc:	500d883a 	mov	r6,r10
100011e0:	303ff11e 	bne	r6,zero,100011a8 <__alt_data_end+0xf80011a8>
100011e4:	003ffc06 	br	100011d8 <__alt_data_end+0xf80011d8>

100011e8 <memmove>:
100011e8:	2005883a 	mov	r2,r4
100011ec:	29000b2e 	bgeu	r5,r4,1000121c <memmove+0x34>
100011f0:	298f883a 	add	r7,r5,r6
100011f4:	21c0092e 	bgeu	r4,r7,1000121c <memmove+0x34>
100011f8:	2187883a 	add	r3,r4,r6
100011fc:	198bc83a 	sub	r5,r3,r6
10001200:	30003e26 	beq	r6,zero,100012fc <memmove+0x114>
10001204:	39ffffc4 	addi	r7,r7,-1
10001208:	39000003 	ldbu	r4,0(r7)
1000120c:	18ffffc4 	addi	r3,r3,-1
10001210:	19000005 	stb	r4,0(r3)
10001214:	197ffb1e 	bne	r3,r5,10001204 <__alt_data_end+0xf8001204>
10001218:	f800283a 	ret
1000121c:	00c003c4 	movi	r3,15
10001220:	1980372e 	bgeu	r3,r6,10001300 <memmove+0x118>
10001224:	1146b03a 	or	r3,r2,r5
10001228:	18c000cc 	andi	r3,r3,3
1000122c:	1800371e 	bne	r3,zero,1000130c <memmove+0x124>
10001230:	327ffc04 	addi	r9,r6,-16
10001234:	4812d13a 	srli	r9,r9,4
10001238:	280f883a 	mov	r7,r5
1000123c:	1007883a 	mov	r3,r2
10001240:	4810913a 	slli	r8,r9,4
10001244:	1211883a 	add	r8,r2,r8
10001248:	42000404 	addi	r8,r8,16
1000124c:	39000017 	ldw	r4,0(r7)
10001250:	18c00404 	addi	r3,r3,16
10001254:	39c00404 	addi	r7,r7,16
10001258:	193ffc15 	stw	r4,-16(r3)
1000125c:	393ffd17 	ldw	r4,-12(r7)
10001260:	193ffd15 	stw	r4,-12(r3)
10001264:	393ffe17 	ldw	r4,-8(r7)
10001268:	193ffe15 	stw	r4,-8(r3)
1000126c:	393fff17 	ldw	r4,-4(r7)
10001270:	193fff15 	stw	r4,-4(r3)
10001274:	1a3ff51e 	bne	r3,r8,1000124c <__alt_data_end+0xf800124c>
10001278:	49000044 	addi	r4,r9,1
1000127c:	2008913a 	slli	r4,r4,4
10001280:	328003cc 	andi	r10,r6,15
10001284:	1107883a 	add	r3,r2,r4
10001288:	290b883a 	add	r5,r5,r4
1000128c:	010000c4 	movi	r4,3
10001290:	2280212e 	bgeu	r4,r10,10001318 <memmove+0x130>
10001294:	52bfff04 	addi	r10,r10,-4
10001298:	5014d0ba 	srli	r10,r10,2
1000129c:	180f883a 	mov	r7,r3
100012a0:	2809883a 	mov	r4,r5
100012a4:	5291883a 	add	r8,r10,r10
100012a8:	4211883a 	add	r8,r8,r8
100012ac:	42400104 	addi	r9,r8,4
100012b0:	1a53883a 	add	r9,r3,r9
100012b4:	22000017 	ldw	r8,0(r4)
100012b8:	39c00104 	addi	r7,r7,4
100012bc:	21000104 	addi	r4,r4,4
100012c0:	3a3fff15 	stw	r8,-4(r7)
100012c4:	3a7ffb1e 	bne	r7,r9,100012b4 <__alt_data_end+0xf80012b4>
100012c8:	51000044 	addi	r4,r10,1
100012cc:	2109883a 	add	r4,r4,r4
100012d0:	2109883a 	add	r4,r4,r4
100012d4:	318000cc 	andi	r6,r6,3
100012d8:	1907883a 	add	r3,r3,r4
100012dc:	290b883a 	add	r5,r5,r4
100012e0:	30000c26 	beq	r6,zero,10001314 <memmove+0x12c>
100012e4:	198d883a 	add	r6,r3,r6
100012e8:	29c00003 	ldbu	r7,0(r5)
100012ec:	18c00044 	addi	r3,r3,1
100012f0:	29400044 	addi	r5,r5,1
100012f4:	19ffffc5 	stb	r7,-1(r3)
100012f8:	19bffb1e 	bne	r3,r6,100012e8 <__alt_data_end+0xf80012e8>
100012fc:	f800283a 	ret
10001300:	1007883a 	mov	r3,r2
10001304:	303ff71e 	bne	r6,zero,100012e4 <__alt_data_end+0xf80012e4>
10001308:	00000206 	br	10001314 <memmove+0x12c>
1000130c:	1007883a 	mov	r3,r2
10001310:	003ff406 	br	100012e4 <__alt_data_end+0xf80012e4>
10001314:	f800283a 	ret
10001318:	500d883a 	mov	r6,r10
1000131c:	303ff11e 	bne	r6,zero,100012e4 <__alt_data_end+0xf80012e4>
10001320:	003ffc06 	br	10001314 <__alt_data_end+0xf8001314>

10001324 <_realloc_r>:
10001324:	defff604 	addi	sp,sp,-40
10001328:	dd000415 	stw	r20,16(sp)
1000132c:	dc000015 	stw	r16,0(sp)
10001330:	dfc00915 	stw	ra,36(sp)
10001334:	df000815 	stw	fp,32(sp)
10001338:	ddc00715 	stw	r23,28(sp)
1000133c:	dd800615 	stw	r22,24(sp)
10001340:	dd400515 	stw	r21,20(sp)
10001344:	dcc00315 	stw	r19,12(sp)
10001348:	dc800215 	stw	r18,8(sp)
1000134c:	dc400115 	stw	r17,4(sp)
10001350:	2821883a 	mov	r16,r5
10001354:	3029883a 	mov	r20,r6
10001358:	28009a26 	beq	r5,zero,100015c4 <_realloc_r+0x2a0>
1000135c:	202b883a 	mov	r21,r4
10001360:	00033500 	call	10003350 <__malloc_lock>
10001364:	80ffff17 	ldw	r3,-4(r16)
10001368:	047fff04 	movi	r17,-4
1000136c:	a08002c4 	addi	r2,r20,11
10001370:	01000584 	movi	r4,22
10001374:	84fffe04 	addi	r19,r16,-8
10001378:	1c62703a 	and	r17,r3,r17
1000137c:	2080372e 	bgeu	r4,r2,1000145c <_realloc_r+0x138>
10001380:	04bffe04 	movi	r18,-8
10001384:	14a4703a 	and	r18,r2,r18
10001388:	9005883a 	mov	r2,r18
1000138c:	90005b16 	blt	r18,zero,100014fc <_realloc_r+0x1d8>
10001390:	95005a36 	bltu	r18,r20,100014fc <_realloc_r+0x1d8>
10001394:	8880340e 	bge	r17,r2,10001468 <_realloc_r+0x144>
10001398:	05c40034 	movhi	r23,4096
1000139c:	bdd61e04 	addi	r23,r23,22648
100013a0:	b9000217 	ldw	r4,8(r23)
100013a4:	9c4b883a 	add	r5,r19,r17
100013a8:	21409626 	beq	r4,r5,10001604 <_realloc_r+0x2e0>
100013ac:	29800117 	ldw	r6,4(r5)
100013b0:	01ffff84 	movi	r7,-2
100013b4:	31ce703a 	and	r7,r6,r7
100013b8:	29cf883a 	add	r7,r5,r7
100013bc:	39c00117 	ldw	r7,4(r7)
100013c0:	39c0004c 	andi	r7,r7,1
100013c4:	38004226 	beq	r7,zero,100014d0 <_realloc_r+0x1ac>
100013c8:	000d883a 	mov	r6,zero
100013cc:	000b883a 	mov	r5,zero
100013d0:	18c0004c 	andi	r3,r3,1
100013d4:	18005c1e 	bne	r3,zero,10001548 <_realloc_r+0x224>
100013d8:	85bffe17 	ldw	r22,-8(r16)
100013dc:	00ffff04 	movi	r3,-4
100013e0:	9dadc83a 	sub	r22,r19,r22
100013e4:	b1c00117 	ldw	r7,4(r22)
100013e8:	38c6703a 	and	r3,r7,r3
100013ec:	28005426 	beq	r5,zero,10001540 <_realloc_r+0x21c>
100013f0:	1c47883a 	add	r3,r3,r17
100013f4:	2900bf26 	beq	r5,r4,100016f4 <_realloc_r+0x3d0>
100013f8:	30ef883a 	add	r23,r6,r3
100013fc:	b8807e16 	blt	r23,r2,100015f8 <_realloc_r+0x2d4>
10001400:	28800317 	ldw	r2,12(r5)
10001404:	28c00217 	ldw	r3,8(r5)
10001408:	89bfff04 	addi	r6,r17,-4
1000140c:	01000904 	movi	r4,36
10001410:	18800315 	stw	r2,12(r3)
10001414:	10c00215 	stw	r3,8(r2)
10001418:	b1400217 	ldw	r5,8(r22)
1000141c:	b0c00317 	ldw	r3,12(r22)
10001420:	b5000204 	addi	r20,r22,8
10001424:	28c00315 	stw	r3,12(r5)
10001428:	19400215 	stw	r5,8(r3)
1000142c:	21808536 	bltu	r4,r6,10001644 <_realloc_r+0x320>
10001430:	008004c4 	movi	r2,19
10001434:	1180932e 	bgeu	r2,r6,10001684 <_realloc_r+0x360>
10001438:	80800017 	ldw	r2,0(r16)
1000143c:	b0800215 	stw	r2,8(r22)
10001440:	80800117 	ldw	r2,4(r16)
10001444:	b0800315 	stw	r2,12(r22)
10001448:	008006c4 	movi	r2,27
1000144c:	1180df36 	bltu	r2,r6,100017cc <_realloc_r+0x4a8>
10001450:	b0c00404 	addi	r3,r22,16
10001454:	84000204 	addi	r16,r16,8
10001458:	00008b06 	br	10001688 <_realloc_r+0x364>
1000145c:	00800404 	movi	r2,16
10001460:	1025883a 	mov	r18,r2
10001464:	003fca06 	br	10001390 <__alt_data_end+0xf8001390>
10001468:	8029883a 	mov	r20,r16
1000146c:	8c8dc83a 	sub	r6,r17,r18
10001470:	008003c4 	movi	r2,15
10001474:	18c0004c 	andi	r3,r3,1
10001478:	11802436 	bltu	r2,r6,1000150c <_realloc_r+0x1e8>
1000147c:	1c46b03a 	or	r3,r3,r17
10001480:	98c00115 	stw	r3,4(r19)
10001484:	9c63883a 	add	r17,r19,r17
10001488:	88800117 	ldw	r2,4(r17)
1000148c:	10800054 	ori	r2,r2,1
10001490:	88800115 	stw	r2,4(r17)
10001494:	a809883a 	mov	r4,r21
10001498:	00033700 	call	10003370 <__malloc_unlock>
1000149c:	a005883a 	mov	r2,r20
100014a0:	dfc00917 	ldw	ra,36(sp)
100014a4:	df000817 	ldw	fp,32(sp)
100014a8:	ddc00717 	ldw	r23,28(sp)
100014ac:	dd800617 	ldw	r22,24(sp)
100014b0:	dd400517 	ldw	r21,20(sp)
100014b4:	dd000417 	ldw	r20,16(sp)
100014b8:	dcc00317 	ldw	r19,12(sp)
100014bc:	dc800217 	ldw	r18,8(sp)
100014c0:	dc400117 	ldw	r17,4(sp)
100014c4:	dc000017 	ldw	r16,0(sp)
100014c8:	dec00a04 	addi	sp,sp,40
100014cc:	f800283a 	ret
100014d0:	01ffff04 	movi	r7,-4
100014d4:	31cc703a 	and	r6,r6,r7
100014d8:	344f883a 	add	r7,r6,r17
100014dc:	38bfbc16 	blt	r7,r2,100013d0 <__alt_data_end+0xf80013d0>
100014e0:	28800317 	ldw	r2,12(r5)
100014e4:	29000217 	ldw	r4,8(r5)
100014e8:	8029883a 	mov	r20,r16
100014ec:	3823883a 	mov	r17,r7
100014f0:	20800315 	stw	r2,12(r4)
100014f4:	11000215 	stw	r4,8(r2)
100014f8:	003fdc06 	br	1000146c <__alt_data_end+0xf800146c>
100014fc:	00800304 	movi	r2,12
10001500:	a8800015 	stw	r2,0(r21)
10001504:	0005883a 	mov	r2,zero
10001508:	003fe506 	br	100014a0 <__alt_data_end+0xf80014a0>
1000150c:	1c86b03a 	or	r3,r3,r18
10001510:	9c8b883a 	add	r5,r19,r18
10001514:	98c00115 	stw	r3,4(r19)
10001518:	30800054 	ori	r2,r6,1
1000151c:	28800115 	stw	r2,4(r5)
10001520:	298d883a 	add	r6,r5,r6
10001524:	30800117 	ldw	r2,4(r6)
10001528:	a809883a 	mov	r4,r21
1000152c:	29400204 	addi	r5,r5,8
10001530:	10800054 	ori	r2,r2,1
10001534:	30800115 	stw	r2,4(r6)
10001538:	00021780 	call	10002178 <_free_r>
1000153c:	003fd506 	br	10001494 <__alt_data_end+0xf8001494>
10001540:	1c6f883a 	add	r23,r3,r17
10001544:	b880370e 	bge	r23,r2,10001624 <_realloc_r+0x300>
10001548:	a00b883a 	mov	r5,r20
1000154c:	a809883a 	mov	r4,r21
10001550:	00008300 	call	10000830 <_malloc_r>
10001554:	1029883a 	mov	r20,r2
10001558:	1000c026 	beq	r2,zero,1000185c <_realloc_r+0x538>
1000155c:	80ffff17 	ldw	r3,-4(r16)
10001560:	113ffe04 	addi	r4,r2,-8
10001564:	00bfff84 	movi	r2,-2
10001568:	1884703a 	and	r2,r3,r2
1000156c:	9885883a 	add	r2,r19,r2
10001570:	20809026 	beq	r4,r2,100017b4 <_realloc_r+0x490>
10001574:	89bfff04 	addi	r6,r17,-4
10001578:	00800904 	movi	r2,36
1000157c:	11805936 	bltu	r2,r6,100016e4 <_realloc_r+0x3c0>
10001580:	00c004c4 	movi	r3,19
10001584:	19803636 	bltu	r3,r6,10001660 <_realloc_r+0x33c>
10001588:	a005883a 	mov	r2,r20
1000158c:	8007883a 	mov	r3,r16
10001590:	19000017 	ldw	r4,0(r3)
10001594:	11000015 	stw	r4,0(r2)
10001598:	19000117 	ldw	r4,4(r3)
1000159c:	11000115 	stw	r4,4(r2)
100015a0:	18c00217 	ldw	r3,8(r3)
100015a4:	10c00215 	stw	r3,8(r2)
100015a8:	800b883a 	mov	r5,r16
100015ac:	a809883a 	mov	r4,r21
100015b0:	00021780 	call	10002178 <_free_r>
100015b4:	a809883a 	mov	r4,r21
100015b8:	00033700 	call	10003370 <__malloc_unlock>
100015bc:	a005883a 	mov	r2,r20
100015c0:	003fb706 	br	100014a0 <__alt_data_end+0xf80014a0>
100015c4:	300b883a 	mov	r5,r6
100015c8:	dfc00917 	ldw	ra,36(sp)
100015cc:	df000817 	ldw	fp,32(sp)
100015d0:	ddc00717 	ldw	r23,28(sp)
100015d4:	dd800617 	ldw	r22,24(sp)
100015d8:	dd400517 	ldw	r21,20(sp)
100015dc:	dd000417 	ldw	r20,16(sp)
100015e0:	dcc00317 	ldw	r19,12(sp)
100015e4:	dc800217 	ldw	r18,8(sp)
100015e8:	dc400117 	ldw	r17,4(sp)
100015ec:	dc000017 	ldw	r16,0(sp)
100015f0:	dec00a04 	addi	sp,sp,40
100015f4:	00008301 	jmpi	10000830 <_malloc_r>
100015f8:	182f883a 	mov	r23,r3
100015fc:	b8bfd216 	blt	r23,r2,10001548 <__alt_data_end+0xf8001548>
10001600:	00000806 	br	10001624 <_realloc_r+0x300>
10001604:	21800117 	ldw	r6,4(r4)
10001608:	017fff04 	movi	r5,-4
1000160c:	91c00404 	addi	r7,r18,16
10001610:	314c703a 	and	r6,r6,r5
10001614:	344b883a 	add	r5,r6,r17
10001618:	29c0250e 	bge	r5,r7,100016b0 <_realloc_r+0x38c>
1000161c:	200b883a 	mov	r5,r4
10001620:	003f6b06 	br	100013d0 <__alt_data_end+0xf80013d0>
10001624:	b0800317 	ldw	r2,12(r22)
10001628:	b0c00217 	ldw	r3,8(r22)
1000162c:	89bfff04 	addi	r6,r17,-4
10001630:	01000904 	movi	r4,36
10001634:	18800315 	stw	r2,12(r3)
10001638:	10c00215 	stw	r3,8(r2)
1000163c:	b5000204 	addi	r20,r22,8
10001640:	21bf7b2e 	bgeu	r4,r6,10001430 <__alt_data_end+0xf8001430>
10001644:	a009883a 	mov	r4,r20
10001648:	800b883a 	mov	r5,r16
1000164c:	00011e80 	call	100011e8 <memmove>
10001650:	b0c00117 	ldw	r3,4(r22)
10001654:	b823883a 	mov	r17,r23
10001658:	b027883a 	mov	r19,r22
1000165c:	003f8306 	br	1000146c <__alt_data_end+0xf800146c>
10001660:	80c00017 	ldw	r3,0(r16)
10001664:	a0c00015 	stw	r3,0(r20)
10001668:	80c00117 	ldw	r3,4(r16)
1000166c:	a0c00115 	stw	r3,4(r20)
10001670:	00c006c4 	movi	r3,27
10001674:	19804736 	bltu	r3,r6,10001794 <_realloc_r+0x470>
10001678:	a0800204 	addi	r2,r20,8
1000167c:	80c00204 	addi	r3,r16,8
10001680:	003fc306 	br	10001590 <__alt_data_end+0xf8001590>
10001684:	a007883a 	mov	r3,r20
10001688:	80800017 	ldw	r2,0(r16)
1000168c:	b823883a 	mov	r17,r23
10001690:	b027883a 	mov	r19,r22
10001694:	18800015 	stw	r2,0(r3)
10001698:	80800117 	ldw	r2,4(r16)
1000169c:	18800115 	stw	r2,4(r3)
100016a0:	80800217 	ldw	r2,8(r16)
100016a4:	18800215 	stw	r2,8(r3)
100016a8:	b0c00117 	ldw	r3,4(r22)
100016ac:	003f6f06 	br	1000146c <__alt_data_end+0xf800146c>
100016b0:	9ca7883a 	add	r19,r19,r18
100016b4:	2c85c83a 	sub	r2,r5,r18
100016b8:	bcc00215 	stw	r19,8(r23)
100016bc:	10800054 	ori	r2,r2,1
100016c0:	98800115 	stw	r2,4(r19)
100016c4:	80bfff17 	ldw	r2,-4(r16)
100016c8:	a809883a 	mov	r4,r21
100016cc:	1080004c 	andi	r2,r2,1
100016d0:	90a4b03a 	or	r18,r18,r2
100016d4:	84bfff15 	stw	r18,-4(r16)
100016d8:	00033700 	call	10003370 <__malloc_unlock>
100016dc:	8005883a 	mov	r2,r16
100016e0:	003f6f06 	br	100014a0 <__alt_data_end+0xf80014a0>
100016e4:	a009883a 	mov	r4,r20
100016e8:	800b883a 	mov	r5,r16
100016ec:	00011e80 	call	100011e8 <memmove>
100016f0:	003fad06 	br	100015a8 <__alt_data_end+0xf80015a8>
100016f4:	30f9883a 	add	fp,r6,r3
100016f8:	91000404 	addi	r4,r18,16
100016fc:	e13fbe16 	blt	fp,r4,100015f8 <__alt_data_end+0xf80015f8>
10001700:	b0800317 	ldw	r2,12(r22)
10001704:	b0c00217 	ldw	r3,8(r22)
10001708:	89bfff04 	addi	r6,r17,-4
1000170c:	01000904 	movi	r4,36
10001710:	18800315 	stw	r2,12(r3)
10001714:	10c00215 	stw	r3,8(r2)
10001718:	b4400204 	addi	r17,r22,8
1000171c:	21804336 	bltu	r4,r6,1000182c <_realloc_r+0x508>
10001720:	008004c4 	movi	r2,19
10001724:	11803f2e 	bgeu	r2,r6,10001824 <_realloc_r+0x500>
10001728:	80800017 	ldw	r2,0(r16)
1000172c:	b0800215 	stw	r2,8(r22)
10001730:	80800117 	ldw	r2,4(r16)
10001734:	b0800315 	stw	r2,12(r22)
10001738:	008006c4 	movi	r2,27
1000173c:	11803f36 	bltu	r2,r6,1000183c <_realloc_r+0x518>
10001740:	b0c00404 	addi	r3,r22,16
10001744:	84000204 	addi	r16,r16,8
10001748:	80800017 	ldw	r2,0(r16)
1000174c:	18800015 	stw	r2,0(r3)
10001750:	80800117 	ldw	r2,4(r16)
10001754:	18800115 	stw	r2,4(r3)
10001758:	80800217 	ldw	r2,8(r16)
1000175c:	18800215 	stw	r2,8(r3)
10001760:	b487883a 	add	r3,r22,r18
10001764:	e485c83a 	sub	r2,fp,r18
10001768:	b8c00215 	stw	r3,8(r23)
1000176c:	10800054 	ori	r2,r2,1
10001770:	18800115 	stw	r2,4(r3)
10001774:	b0800117 	ldw	r2,4(r22)
10001778:	a809883a 	mov	r4,r21
1000177c:	1080004c 	andi	r2,r2,1
10001780:	90a4b03a 	or	r18,r18,r2
10001784:	b4800115 	stw	r18,4(r22)
10001788:	00033700 	call	10003370 <__malloc_unlock>
1000178c:	8805883a 	mov	r2,r17
10001790:	003f4306 	br	100014a0 <__alt_data_end+0xf80014a0>
10001794:	80c00217 	ldw	r3,8(r16)
10001798:	a0c00215 	stw	r3,8(r20)
1000179c:	80c00317 	ldw	r3,12(r16)
100017a0:	a0c00315 	stw	r3,12(r20)
100017a4:	30801126 	beq	r6,r2,100017ec <_realloc_r+0x4c8>
100017a8:	a0800404 	addi	r2,r20,16
100017ac:	80c00404 	addi	r3,r16,16
100017b0:	003f7706 	br	10001590 <__alt_data_end+0xf8001590>
100017b4:	a13fff17 	ldw	r4,-4(r20)
100017b8:	00bfff04 	movi	r2,-4
100017bc:	8029883a 	mov	r20,r16
100017c0:	2084703a 	and	r2,r4,r2
100017c4:	88a3883a 	add	r17,r17,r2
100017c8:	003f2806 	br	1000146c <__alt_data_end+0xf800146c>
100017cc:	80800217 	ldw	r2,8(r16)
100017d0:	b0800415 	stw	r2,16(r22)
100017d4:	80800317 	ldw	r2,12(r16)
100017d8:	b0800515 	stw	r2,20(r22)
100017dc:	31000a26 	beq	r6,r4,10001808 <_realloc_r+0x4e4>
100017e0:	b0c00604 	addi	r3,r22,24
100017e4:	84000404 	addi	r16,r16,16
100017e8:	003fa706 	br	10001688 <__alt_data_end+0xf8001688>
100017ec:	81000417 	ldw	r4,16(r16)
100017f0:	a0800604 	addi	r2,r20,24
100017f4:	80c00604 	addi	r3,r16,24
100017f8:	a1000415 	stw	r4,16(r20)
100017fc:	81000517 	ldw	r4,20(r16)
10001800:	a1000515 	stw	r4,20(r20)
10001804:	003f6206 	br	10001590 <__alt_data_end+0xf8001590>
10001808:	80800417 	ldw	r2,16(r16)
1000180c:	84000604 	addi	r16,r16,24
10001810:	b0c00804 	addi	r3,r22,32
10001814:	b0800615 	stw	r2,24(r22)
10001818:	80bfff17 	ldw	r2,-4(r16)
1000181c:	b0800715 	stw	r2,28(r22)
10001820:	003f9906 	br	10001688 <__alt_data_end+0xf8001688>
10001824:	8807883a 	mov	r3,r17
10001828:	003fc706 	br	10001748 <__alt_data_end+0xf8001748>
1000182c:	8809883a 	mov	r4,r17
10001830:	800b883a 	mov	r5,r16
10001834:	00011e80 	call	100011e8 <memmove>
10001838:	003fc906 	br	10001760 <__alt_data_end+0xf8001760>
1000183c:	80800217 	ldw	r2,8(r16)
10001840:	b0800415 	stw	r2,16(r22)
10001844:	80800317 	ldw	r2,12(r16)
10001848:	b0800515 	stw	r2,20(r22)
1000184c:	31000726 	beq	r6,r4,1000186c <_realloc_r+0x548>
10001850:	b0c00604 	addi	r3,r22,24
10001854:	84000404 	addi	r16,r16,16
10001858:	003fbb06 	br	10001748 <__alt_data_end+0xf8001748>
1000185c:	a809883a 	mov	r4,r21
10001860:	00033700 	call	10003370 <__malloc_unlock>
10001864:	0005883a 	mov	r2,zero
10001868:	003f0d06 	br	100014a0 <__alt_data_end+0xf80014a0>
1000186c:	80800417 	ldw	r2,16(r16)
10001870:	84000604 	addi	r16,r16,24
10001874:	b0c00804 	addi	r3,r22,32
10001878:	b0800615 	stw	r2,24(r22)
1000187c:	80bfff17 	ldw	r2,-4(r16)
10001880:	b0800715 	stw	r2,28(r22)
10001884:	003fb006 	br	10001748 <__alt_data_end+0xf8001748>

10001888 <_sbrk_r>:
10001888:	defffd04 	addi	sp,sp,-12
1000188c:	dc400115 	stw	r17,4(sp)
10001890:	dc000015 	stw	r16,0(sp)
10001894:	2023883a 	mov	r17,r4
10001898:	04040074 	movhi	r16,4097
1000189c:	84224e04 	addi	r16,r16,-30408
100018a0:	2809883a 	mov	r4,r5
100018a4:	dfc00215 	stw	ra,8(sp)
100018a8:	80000015 	stw	zero,0(r16)
100018ac:	00035580 	call	10003558 <sbrk>
100018b0:	00ffffc4 	movi	r3,-1
100018b4:	10c00526 	beq	r2,r3,100018cc <_sbrk_r+0x44>
100018b8:	dfc00217 	ldw	ra,8(sp)
100018bc:	dc400117 	ldw	r17,4(sp)
100018c0:	dc000017 	ldw	r16,0(sp)
100018c4:	dec00304 	addi	sp,sp,12
100018c8:	f800283a 	ret
100018cc:	80c00017 	ldw	r3,0(r16)
100018d0:	183ff926 	beq	r3,zero,100018b8 <__alt_data_end+0xf80018b8>
100018d4:	88c00015 	stw	r3,0(r17)
100018d8:	dfc00217 	ldw	ra,8(sp)
100018dc:	dc400117 	ldw	r17,4(sp)
100018e0:	dc000017 	ldw	r16,0(sp)
100018e4:	dec00304 	addi	sp,sp,12
100018e8:	f800283a 	ret

100018ec <__swsetup_r>:
100018ec:	00840034 	movhi	r2,4096
100018f0:	109ba304 	addi	r2,r2,28300
100018f4:	10800017 	ldw	r2,0(r2)
100018f8:	defffd04 	addi	sp,sp,-12
100018fc:	dc400115 	stw	r17,4(sp)
10001900:	dc000015 	stw	r16,0(sp)
10001904:	dfc00215 	stw	ra,8(sp)
10001908:	2023883a 	mov	r17,r4
1000190c:	2821883a 	mov	r16,r5
10001910:	10000226 	beq	r2,zero,1000191c <__swsetup_r+0x30>
10001914:	10c00e17 	ldw	r3,56(r2)
10001918:	18002e26 	beq	r3,zero,100019d4 <__swsetup_r+0xe8>
1000191c:	8080030b 	ldhu	r2,12(r16)
10001920:	10c0020c 	andi	r3,r2,8
10001924:	100d883a 	mov	r6,r2
10001928:	18000f26 	beq	r3,zero,10001968 <__swsetup_r+0x7c>
1000192c:	80c00417 	ldw	r3,16(r16)
10001930:	18001526 	beq	r3,zero,10001988 <__swsetup_r+0x9c>
10001934:	1100004c 	andi	r4,r2,1
10001938:	20001c1e 	bne	r4,zero,100019ac <__swsetup_r+0xc0>
1000193c:	1080008c 	andi	r2,r2,2
10001940:	1000271e 	bne	r2,zero,100019e0 <__swsetup_r+0xf4>
10001944:	80800517 	ldw	r2,20(r16)
10001948:	80800215 	stw	r2,8(r16)
1000194c:	18001c26 	beq	r3,zero,100019c0 <__swsetup_r+0xd4>
10001950:	0005883a 	mov	r2,zero
10001954:	dfc00217 	ldw	ra,8(sp)
10001958:	dc400117 	ldw	r17,4(sp)
1000195c:	dc000017 	ldw	r16,0(sp)
10001960:	dec00304 	addi	sp,sp,12
10001964:	f800283a 	ret
10001968:	3080040c 	andi	r2,r6,16
1000196c:	10001726 	beq	r2,zero,100019cc <__swsetup_r+0xe0>
10001970:	3080010c 	andi	r2,r6,4
10001974:	10001d1e 	bne	r2,zero,100019ec <__swsetup_r+0x100>
10001978:	80c00417 	ldw	r3,16(r16)
1000197c:	30800214 	ori	r2,r6,8
10001980:	8080030d 	sth	r2,12(r16)
10001984:	183feb1e 	bne	r3,zero,10001934 <__alt_data_end+0xf8001934>
10001988:	1140a00c 	andi	r5,r2,640
1000198c:	01008004 	movi	r4,512
10001990:	293fe826 	beq	r5,r4,10001934 <__alt_data_end+0xf8001934>
10001994:	8809883a 	mov	r4,r17
10001998:	800b883a 	mov	r5,r16
1000199c:	00025a80 	call	100025a8 <__smakebuf_r>
100019a0:	8080030b 	ldhu	r2,12(r16)
100019a4:	80c00417 	ldw	r3,16(r16)
100019a8:	003fe206 	br	10001934 <__alt_data_end+0xf8001934>
100019ac:	80800517 	ldw	r2,20(r16)
100019b0:	80000215 	stw	zero,8(r16)
100019b4:	0085c83a 	sub	r2,zero,r2
100019b8:	80800615 	stw	r2,24(r16)
100019bc:	183fe41e 	bne	r3,zero,10001950 <__alt_data_end+0xf8001950>
100019c0:	8080030b 	ldhu	r2,12(r16)
100019c4:	1080200c 	andi	r2,r2,128
100019c8:	103fe226 	beq	r2,zero,10001954 <__alt_data_end+0xf8001954>
100019cc:	00bfffc4 	movi	r2,-1
100019d0:	003fe006 	br	10001954 <__alt_data_end+0xf8001954>
100019d4:	1009883a 	mov	r4,r2
100019d8:	0001d440 	call	10001d44 <__sinit>
100019dc:	003fcf06 	br	1000191c <__alt_data_end+0xf800191c>
100019e0:	0005883a 	mov	r2,zero
100019e4:	80800215 	stw	r2,8(r16)
100019e8:	003fd806 	br	1000194c <__alt_data_end+0xf800194c>
100019ec:	81400c17 	ldw	r5,48(r16)
100019f0:	28000626 	beq	r5,zero,10001a0c <__swsetup_r+0x120>
100019f4:	80801004 	addi	r2,r16,64
100019f8:	28800326 	beq	r5,r2,10001a08 <__swsetup_r+0x11c>
100019fc:	8809883a 	mov	r4,r17
10001a00:	00021780 	call	10002178 <_free_r>
10001a04:	8180030b 	ldhu	r6,12(r16)
10001a08:	80000c15 	stw	zero,48(r16)
10001a0c:	80c00417 	ldw	r3,16(r16)
10001a10:	00bff6c4 	movi	r2,-37
10001a14:	118c703a 	and	r6,r2,r6
10001a18:	80000115 	stw	zero,4(r16)
10001a1c:	80c00015 	stw	r3,0(r16)
10001a20:	003fd606 	br	1000197c <__alt_data_end+0xf800197c>

10001a24 <_fflush_r>:
10001a24:	defffb04 	addi	sp,sp,-20
10001a28:	dcc00315 	stw	r19,12(sp)
10001a2c:	dc400115 	stw	r17,4(sp)
10001a30:	dfc00415 	stw	ra,16(sp)
10001a34:	dc800215 	stw	r18,8(sp)
10001a38:	dc000015 	stw	r16,0(sp)
10001a3c:	2027883a 	mov	r19,r4
10001a40:	2823883a 	mov	r17,r5
10001a44:	20000226 	beq	r4,zero,10001a50 <_fflush_r+0x2c>
10001a48:	20800e17 	ldw	r2,56(r4)
10001a4c:	10005826 	beq	r2,zero,10001bb0 <_fflush_r+0x18c>
10001a50:	8880030b 	ldhu	r2,12(r17)
10001a54:	10ffffcc 	andi	r3,r2,65535
10001a58:	18e0001c 	xori	r3,r3,32768
10001a5c:	18e00004 	addi	r3,r3,-32768
10001a60:	18002b26 	beq	r3,zero,10001b10 <_fflush_r+0xec>
10001a64:	10c0020c 	andi	r3,r2,8
10001a68:	1800311e 	bne	r3,zero,10001b30 <_fflush_r+0x10c>
10001a6c:	88c00117 	ldw	r3,4(r17)
10001a70:	10820014 	ori	r2,r2,2048
10001a74:	8880030d 	sth	r2,12(r17)
10001a78:	00c05c0e 	bge	zero,r3,10001bec <_fflush_r+0x1c8>
10001a7c:	88c00a17 	ldw	r3,40(r17)
10001a80:	18002326 	beq	r3,zero,10001b10 <_fflush_r+0xec>
10001a84:	9c000017 	ldw	r16,0(r19)
10001a88:	1104000c 	andi	r4,r2,4096
10001a8c:	98000015 	stw	zero,0(r19)
10001a90:	20004b26 	beq	r4,zero,10001bc0 <_fflush_r+0x19c>
10001a94:	89801417 	ldw	r6,80(r17)
10001a98:	1080010c 	andi	r2,r2,4
10001a9c:	10000626 	beq	r2,zero,10001ab8 <_fflush_r+0x94>
10001aa0:	89000117 	ldw	r4,4(r17)
10001aa4:	88800c17 	ldw	r2,48(r17)
10001aa8:	310dc83a 	sub	r6,r6,r4
10001aac:	10000226 	beq	r2,zero,10001ab8 <_fflush_r+0x94>
10001ab0:	88800f17 	ldw	r2,60(r17)
10001ab4:	308dc83a 	sub	r6,r6,r2
10001ab8:	89400717 	ldw	r5,28(r17)
10001abc:	9809883a 	mov	r4,r19
10001ac0:	000f883a 	mov	r7,zero
10001ac4:	183ee83a 	callr	r3
10001ac8:	00ffffc4 	movi	r3,-1
10001acc:	10c04a26 	beq	r2,r3,10001bf8 <_fflush_r+0x1d4>
10001ad0:	88c0030b 	ldhu	r3,12(r17)
10001ad4:	89000417 	ldw	r4,16(r17)
10001ad8:	88000115 	stw	zero,4(r17)
10001adc:	197dffcc 	andi	r5,r3,63487
10001ae0:	8940030d 	sth	r5,12(r17)
10001ae4:	89000015 	stw	r4,0(r17)
10001ae8:	18c4000c 	andi	r3,r3,4096
10001aec:	1800581e 	bne	r3,zero,10001c50 <_fflush_r+0x22c>
10001af0:	89400c17 	ldw	r5,48(r17)
10001af4:	9c000015 	stw	r16,0(r19)
10001af8:	28000526 	beq	r5,zero,10001b10 <_fflush_r+0xec>
10001afc:	88801004 	addi	r2,r17,64
10001b00:	28800226 	beq	r5,r2,10001b0c <_fflush_r+0xe8>
10001b04:	9809883a 	mov	r4,r19
10001b08:	00021780 	call	10002178 <_free_r>
10001b0c:	88000c15 	stw	zero,48(r17)
10001b10:	0005883a 	mov	r2,zero
10001b14:	dfc00417 	ldw	ra,16(sp)
10001b18:	dcc00317 	ldw	r19,12(sp)
10001b1c:	dc800217 	ldw	r18,8(sp)
10001b20:	dc400117 	ldw	r17,4(sp)
10001b24:	dc000017 	ldw	r16,0(sp)
10001b28:	dec00504 	addi	sp,sp,20
10001b2c:	f800283a 	ret
10001b30:	8c800417 	ldw	r18,16(r17)
10001b34:	903ff626 	beq	r18,zero,10001b10 <__alt_data_end+0xf8001b10>
10001b38:	8c000017 	ldw	r16,0(r17)
10001b3c:	108000cc 	andi	r2,r2,3
10001b40:	8c800015 	stw	r18,0(r17)
10001b44:	84a1c83a 	sub	r16,r16,r18
10001b48:	10001b26 	beq	r2,zero,10001bb8 <_fflush_r+0x194>
10001b4c:	0005883a 	mov	r2,zero
10001b50:	88800215 	stw	r2,8(r17)
10001b54:	04000316 	blt	zero,r16,10001b64 <_fflush_r+0x140>
10001b58:	003fed06 	br	10001b10 <__alt_data_end+0xf8001b10>
10001b5c:	90a5883a 	add	r18,r18,r2
10001b60:	043feb0e 	bge	zero,r16,10001b10 <__alt_data_end+0xf8001b10>
10001b64:	88800917 	ldw	r2,36(r17)
10001b68:	89400717 	ldw	r5,28(r17)
10001b6c:	800f883a 	mov	r7,r16
10001b70:	900d883a 	mov	r6,r18
10001b74:	9809883a 	mov	r4,r19
10001b78:	103ee83a 	callr	r2
10001b7c:	80a1c83a 	sub	r16,r16,r2
10001b80:	00bff616 	blt	zero,r2,10001b5c <__alt_data_end+0xf8001b5c>
10001b84:	88c0030b 	ldhu	r3,12(r17)
10001b88:	00bfffc4 	movi	r2,-1
10001b8c:	18c01014 	ori	r3,r3,64
10001b90:	88c0030d 	sth	r3,12(r17)
10001b94:	dfc00417 	ldw	ra,16(sp)
10001b98:	dcc00317 	ldw	r19,12(sp)
10001b9c:	dc800217 	ldw	r18,8(sp)
10001ba0:	dc400117 	ldw	r17,4(sp)
10001ba4:	dc000017 	ldw	r16,0(sp)
10001ba8:	dec00504 	addi	sp,sp,20
10001bac:	f800283a 	ret
10001bb0:	0001d440 	call	10001d44 <__sinit>
10001bb4:	003fa606 	br	10001a50 <__alt_data_end+0xf8001a50>
10001bb8:	88800517 	ldw	r2,20(r17)
10001bbc:	003fe406 	br	10001b50 <__alt_data_end+0xf8001b50>
10001bc0:	89400717 	ldw	r5,28(r17)
10001bc4:	000d883a 	mov	r6,zero
10001bc8:	9809883a 	mov	r4,r19
10001bcc:	01c00044 	movi	r7,1
10001bd0:	183ee83a 	callr	r3
10001bd4:	100d883a 	mov	r6,r2
10001bd8:	00bfffc4 	movi	r2,-1
10001bdc:	30801326 	beq	r6,r2,10001c2c <_fflush_r+0x208>
10001be0:	8880030b 	ldhu	r2,12(r17)
10001be4:	88c00a17 	ldw	r3,40(r17)
10001be8:	003fab06 	br	10001a98 <__alt_data_end+0xf8001a98>
10001bec:	88c00f17 	ldw	r3,60(r17)
10001bf0:	00ffa216 	blt	zero,r3,10001a7c <__alt_data_end+0xf8001a7c>
10001bf4:	003fc606 	br	10001b10 <__alt_data_end+0xf8001b10>
10001bf8:	98c00017 	ldw	r3,0(r19)
10001bfc:	183fb426 	beq	r3,zero,10001ad0 <__alt_data_end+0xf8001ad0>
10001c00:	01000744 	movi	r4,29
10001c04:	19000226 	beq	r3,r4,10001c10 <_fflush_r+0x1ec>
10001c08:	01000584 	movi	r4,22
10001c0c:	1900121e 	bne	r3,r4,10001c58 <_fflush_r+0x234>
10001c10:	88c0030b 	ldhu	r3,12(r17)
10001c14:	88800417 	ldw	r2,16(r17)
10001c18:	88000115 	stw	zero,4(r17)
10001c1c:	18fdffcc 	andi	r3,r3,63487
10001c20:	88c0030d 	sth	r3,12(r17)
10001c24:	88800015 	stw	r2,0(r17)
10001c28:	003fb106 	br	10001af0 <__alt_data_end+0xf8001af0>
10001c2c:	98800017 	ldw	r2,0(r19)
10001c30:	103feb26 	beq	r2,zero,10001be0 <__alt_data_end+0xf8001be0>
10001c34:	00c00744 	movi	r3,29
10001c38:	10c00226 	beq	r2,r3,10001c44 <_fflush_r+0x220>
10001c3c:	00c00584 	movi	r3,22
10001c40:	10ffd01e 	bne	r2,r3,10001b84 <__alt_data_end+0xf8001b84>
10001c44:	9c000015 	stw	r16,0(r19)
10001c48:	0005883a 	mov	r2,zero
10001c4c:	003fb106 	br	10001b14 <__alt_data_end+0xf8001b14>
10001c50:	88801415 	stw	r2,80(r17)
10001c54:	003fa606 	br	10001af0 <__alt_data_end+0xf8001af0>
10001c58:	88c0030b 	ldhu	r3,12(r17)
10001c5c:	18c01014 	ori	r3,r3,64
10001c60:	88c0030d 	sth	r3,12(r17)
10001c64:	003fab06 	br	10001b14 <__alt_data_end+0xf8001b14>

10001c68 <fflush>:
10001c68:	200b883a 	mov	r5,r4
10001c6c:	20000426 	beq	r4,zero,10001c80 <fflush+0x18>
10001c70:	00840034 	movhi	r2,4096
10001c74:	109ba304 	addi	r2,r2,28300
10001c78:	11000017 	ldw	r4,0(r2)
10001c7c:	0001a241 	jmpi	10001a24 <_fflush_r>
10001c80:	00840034 	movhi	r2,4096
10001c84:	109ba204 	addi	r2,r2,28296
10001c88:	11000017 	ldw	r4,0(r2)
10001c8c:	01440034 	movhi	r5,4096
10001c90:	29468904 	addi	r5,r5,6692
10001c94:	00024f01 	jmpi	100024f0 <_fwalk_reent>

10001c98 <__fp_lock>:
10001c98:	0005883a 	mov	r2,zero
10001c9c:	f800283a 	ret

10001ca0 <__fp_unlock>:
10001ca0:	0005883a 	mov	r2,zero
10001ca4:	f800283a 	ret

10001ca8 <_cleanup_r>:
10001ca8:	01440034 	movhi	r5,4096
10001cac:	294ae904 	addi	r5,r5,11172
10001cb0:	00024481 	jmpi	10002448 <_fwalk>

10001cb4 <__sfmoreglue>:
10001cb4:	defffc04 	addi	sp,sp,-16
10001cb8:	dc800215 	stw	r18,8(sp)
10001cbc:	2825883a 	mov	r18,r5
10001cc0:	dc000015 	stw	r16,0(sp)
10001cc4:	01401a04 	movi	r5,104
10001cc8:	2021883a 	mov	r16,r4
10001ccc:	9009883a 	mov	r4,r18
10001cd0:	dfc00315 	stw	ra,12(sp)
10001cd4:	dc400115 	stw	r17,4(sp)
10001cd8:	0002d5c0 	call	10002d5c <__mulsi3>
10001cdc:	8009883a 	mov	r4,r16
10001ce0:	11400304 	addi	r5,r2,12
10001ce4:	1023883a 	mov	r17,r2
10001ce8:	00008300 	call	10000830 <_malloc_r>
10001cec:	1021883a 	mov	r16,r2
10001cf0:	10000726 	beq	r2,zero,10001d10 <__sfmoreglue+0x5c>
10001cf4:	11000304 	addi	r4,r2,12
10001cf8:	10000015 	stw	zero,0(r2)
10001cfc:	14800115 	stw	r18,4(r2)
10001d00:	11000215 	stw	r4,8(r2)
10001d04:	000b883a 	mov	r5,zero
10001d08:	880d883a 	mov	r6,r17
10001d0c:	000275c0 	call	1000275c <memset>
10001d10:	8005883a 	mov	r2,r16
10001d14:	dfc00317 	ldw	ra,12(sp)
10001d18:	dc800217 	ldw	r18,8(sp)
10001d1c:	dc400117 	ldw	r17,4(sp)
10001d20:	dc000017 	ldw	r16,0(sp)
10001d24:	dec00404 	addi	sp,sp,16
10001d28:	f800283a 	ret

10001d2c <_cleanup>:
10001d2c:	00840034 	movhi	r2,4096
10001d30:	109ba204 	addi	r2,r2,28296
10001d34:	11000017 	ldw	r4,0(r2)
10001d38:	01440034 	movhi	r5,4096
10001d3c:	294ae904 	addi	r5,r5,11172
10001d40:	00024481 	jmpi	10002448 <_fwalk>

10001d44 <__sinit>:
10001d44:	20800e17 	ldw	r2,56(r4)
10001d48:	defff704 	addi	sp,sp,-36
10001d4c:	dc800215 	stw	r18,8(sp)
10001d50:	dfc00815 	stw	ra,32(sp)
10001d54:	ddc00715 	stw	r23,28(sp)
10001d58:	dd800615 	stw	r22,24(sp)
10001d5c:	dd400515 	stw	r21,20(sp)
10001d60:	dd000415 	stw	r20,16(sp)
10001d64:	dcc00315 	stw	r19,12(sp)
10001d68:	dc400115 	stw	r17,4(sp)
10001d6c:	dc000015 	stw	r16,0(sp)
10001d70:	2025883a 	mov	r18,r4
10001d74:	10004f1e 	bne	r2,zero,10001eb4 <__sinit+0x170>
10001d78:	24000117 	ldw	r16,4(r4)
10001d7c:	00c40034 	movhi	r3,4096
10001d80:	18c72a04 	addi	r3,r3,7336
10001d84:	20c00f15 	stw	r3,60(r4)
10001d88:	2080bb04 	addi	r2,r4,748
10001d8c:	00c000c4 	movi	r3,3
10001d90:	05c00044 	movi	r23,1
10001d94:	20c0b915 	stw	r3,740(r4)
10001d98:	2080ba15 	stw	r2,744(r4)
10001d9c:	25c00e15 	stw	r23,56(r4)
10001da0:	2000b815 	stw	zero,736(r4)
10001da4:	00800104 	movi	r2,4
10001da8:	81001704 	addi	r4,r16,92
10001dac:	000b883a 	mov	r5,zero
10001db0:	01800204 	movi	r6,8
10001db4:	80000015 	stw	zero,0(r16)
10001db8:	80000115 	stw	zero,4(r16)
10001dbc:	80000215 	stw	zero,8(r16)
10001dc0:	8080030d 	sth	r2,12(r16)
10001dc4:	80001915 	stw	zero,100(r16)
10001dc8:	8000038d 	sth	zero,14(r16)
10001dcc:	80000415 	stw	zero,16(r16)
10001dd0:	80000515 	stw	zero,20(r16)
10001dd4:	80000615 	stw	zero,24(r16)
10001dd8:	000275c0 	call	1000275c <memset>
10001ddc:	94400217 	ldw	r17,8(r18)
10001de0:	05840034 	movhi	r22,4096
10001de4:	b58a1c04 	addi	r22,r22,10352
10001de8:	05440034 	movhi	r21,4096
10001dec:	ad4a3304 	addi	r21,r21,10444
10001df0:	05040034 	movhi	r20,4096
10001df4:	a50a5204 	addi	r20,r20,10568
10001df8:	04c40034 	movhi	r19,4096
10001dfc:	9cca6904 	addi	r19,r19,10660
10001e00:	84000715 	stw	r16,28(r16)
10001e04:	85800815 	stw	r22,32(r16)
10001e08:	85400915 	stw	r21,36(r16)
10001e0c:	85000a15 	stw	r20,40(r16)
10001e10:	84c00b15 	stw	r19,44(r16)
10001e14:	00800284 	movi	r2,10
10001e18:	89001704 	addi	r4,r17,92
10001e1c:	000b883a 	mov	r5,zero
10001e20:	01800204 	movi	r6,8
10001e24:	88000015 	stw	zero,0(r17)
10001e28:	88000115 	stw	zero,4(r17)
10001e2c:	88000215 	stw	zero,8(r17)
10001e30:	8880030d 	sth	r2,12(r17)
10001e34:	88001915 	stw	zero,100(r17)
10001e38:	8dc0038d 	sth	r23,14(r17)
10001e3c:	88000415 	stw	zero,16(r17)
10001e40:	88000515 	stw	zero,20(r17)
10001e44:	88000615 	stw	zero,24(r17)
10001e48:	000275c0 	call	1000275c <memset>
10001e4c:	94000317 	ldw	r16,12(r18)
10001e50:	00800484 	movi	r2,18
10001e54:	8c400715 	stw	r17,28(r17)
10001e58:	8d800815 	stw	r22,32(r17)
10001e5c:	8d400915 	stw	r21,36(r17)
10001e60:	8d000a15 	stw	r20,40(r17)
10001e64:	8cc00b15 	stw	r19,44(r17)
10001e68:	8080030d 	sth	r2,12(r16)
10001e6c:	00800084 	movi	r2,2
10001e70:	80000015 	stw	zero,0(r16)
10001e74:	80000115 	stw	zero,4(r16)
10001e78:	80000215 	stw	zero,8(r16)
10001e7c:	80001915 	stw	zero,100(r16)
10001e80:	8080038d 	sth	r2,14(r16)
10001e84:	80000415 	stw	zero,16(r16)
10001e88:	80000515 	stw	zero,20(r16)
10001e8c:	80000615 	stw	zero,24(r16)
10001e90:	81001704 	addi	r4,r16,92
10001e94:	000b883a 	mov	r5,zero
10001e98:	01800204 	movi	r6,8
10001e9c:	000275c0 	call	1000275c <memset>
10001ea0:	84000715 	stw	r16,28(r16)
10001ea4:	85800815 	stw	r22,32(r16)
10001ea8:	85400915 	stw	r21,36(r16)
10001eac:	85000a15 	stw	r20,40(r16)
10001eb0:	84c00b15 	stw	r19,44(r16)
10001eb4:	dfc00817 	ldw	ra,32(sp)
10001eb8:	ddc00717 	ldw	r23,28(sp)
10001ebc:	dd800617 	ldw	r22,24(sp)
10001ec0:	dd400517 	ldw	r21,20(sp)
10001ec4:	dd000417 	ldw	r20,16(sp)
10001ec8:	dcc00317 	ldw	r19,12(sp)
10001ecc:	dc800217 	ldw	r18,8(sp)
10001ed0:	dc400117 	ldw	r17,4(sp)
10001ed4:	dc000017 	ldw	r16,0(sp)
10001ed8:	dec00904 	addi	sp,sp,36
10001edc:	f800283a 	ret

10001ee0 <__sfp>:
10001ee0:	defffb04 	addi	sp,sp,-20
10001ee4:	00840034 	movhi	r2,4096
10001ee8:	109ba204 	addi	r2,r2,28296
10001eec:	dc800215 	stw	r18,8(sp)
10001ef0:	14800017 	ldw	r18,0(r2)
10001ef4:	dcc00315 	stw	r19,12(sp)
10001ef8:	dfc00415 	stw	ra,16(sp)
10001efc:	90800e17 	ldw	r2,56(r18)
10001f00:	dc400115 	stw	r17,4(sp)
10001f04:	dc000015 	stw	r16,0(sp)
10001f08:	2027883a 	mov	r19,r4
10001f0c:	10002f26 	beq	r2,zero,10001fcc <__sfp+0xec>
10001f10:	9480b804 	addi	r18,r18,736
10001f14:	047fffc4 	movi	r17,-1
10001f18:	91400117 	ldw	r5,4(r18)
10001f1c:	94000217 	ldw	r16,8(r18)
10001f20:	297fffc4 	addi	r5,r5,-1
10001f24:	28000a16 	blt	r5,zero,10001f50 <__sfp+0x70>
10001f28:	8080030f 	ldh	r2,12(r16)
10001f2c:	10000c26 	beq	r2,zero,10001f60 <__sfp+0x80>
10001f30:	80c01d04 	addi	r3,r16,116
10001f34:	00000206 	br	10001f40 <__sfp+0x60>
10001f38:	18bfe60f 	ldh	r2,-104(r3)
10001f3c:	10000826 	beq	r2,zero,10001f60 <__sfp+0x80>
10001f40:	297fffc4 	addi	r5,r5,-1
10001f44:	1c3ffd04 	addi	r16,r3,-12
10001f48:	18c01a04 	addi	r3,r3,104
10001f4c:	2c7ffa1e 	bne	r5,r17,10001f38 <__alt_data_end+0xf8001f38>
10001f50:	90800017 	ldw	r2,0(r18)
10001f54:	10002026 	beq	r2,zero,10001fd8 <__sfp+0xf8>
10001f58:	1025883a 	mov	r18,r2
10001f5c:	003fee06 	br	10001f18 <__alt_data_end+0xf8001f18>
10001f60:	00bfffc4 	movi	r2,-1
10001f64:	8080038d 	sth	r2,14(r16)
10001f68:	00800044 	movi	r2,1
10001f6c:	8080030d 	sth	r2,12(r16)
10001f70:	80001915 	stw	zero,100(r16)
10001f74:	80000015 	stw	zero,0(r16)
10001f78:	80000215 	stw	zero,8(r16)
10001f7c:	80000115 	stw	zero,4(r16)
10001f80:	80000415 	stw	zero,16(r16)
10001f84:	80000515 	stw	zero,20(r16)
10001f88:	80000615 	stw	zero,24(r16)
10001f8c:	81001704 	addi	r4,r16,92
10001f90:	000b883a 	mov	r5,zero
10001f94:	01800204 	movi	r6,8
10001f98:	000275c0 	call	1000275c <memset>
10001f9c:	8005883a 	mov	r2,r16
10001fa0:	80000c15 	stw	zero,48(r16)
10001fa4:	80000d15 	stw	zero,52(r16)
10001fa8:	80001115 	stw	zero,68(r16)
10001fac:	80001215 	stw	zero,72(r16)
10001fb0:	dfc00417 	ldw	ra,16(sp)
10001fb4:	dcc00317 	ldw	r19,12(sp)
10001fb8:	dc800217 	ldw	r18,8(sp)
10001fbc:	dc400117 	ldw	r17,4(sp)
10001fc0:	dc000017 	ldw	r16,0(sp)
10001fc4:	dec00504 	addi	sp,sp,20
10001fc8:	f800283a 	ret
10001fcc:	9009883a 	mov	r4,r18
10001fd0:	0001d440 	call	10001d44 <__sinit>
10001fd4:	003fce06 	br	10001f10 <__alt_data_end+0xf8001f10>
10001fd8:	9809883a 	mov	r4,r19
10001fdc:	01400104 	movi	r5,4
10001fe0:	0001cb40 	call	10001cb4 <__sfmoreglue>
10001fe4:	90800015 	stw	r2,0(r18)
10001fe8:	103fdb1e 	bne	r2,zero,10001f58 <__alt_data_end+0xf8001f58>
10001fec:	00800304 	movi	r2,12
10001ff0:	98800015 	stw	r2,0(r19)
10001ff4:	0005883a 	mov	r2,zero
10001ff8:	003fed06 	br	10001fb0 <__alt_data_end+0xf8001fb0>

10001ffc <__sfp_lock_acquire>:
10001ffc:	f800283a 	ret

10002000 <__sfp_lock_release>:
10002000:	f800283a 	ret

10002004 <__sinit_lock_acquire>:
10002004:	f800283a 	ret

10002008 <__sinit_lock_release>:
10002008:	f800283a 	ret

1000200c <__fp_lock_all>:
1000200c:	00840034 	movhi	r2,4096
10002010:	109ba304 	addi	r2,r2,28300
10002014:	11000017 	ldw	r4,0(r2)
10002018:	01440034 	movhi	r5,4096
1000201c:	29472604 	addi	r5,r5,7320
10002020:	00024481 	jmpi	10002448 <_fwalk>

10002024 <__fp_unlock_all>:
10002024:	00840034 	movhi	r2,4096
10002028:	109ba304 	addi	r2,r2,28300
1000202c:	11000017 	ldw	r4,0(r2)
10002030:	01440034 	movhi	r5,4096
10002034:	29472804 	addi	r5,r5,7328
10002038:	00024481 	jmpi	10002448 <_fwalk>

1000203c <_malloc_trim_r>:
1000203c:	defffb04 	addi	sp,sp,-20
10002040:	dcc00315 	stw	r19,12(sp)
10002044:	dc800215 	stw	r18,8(sp)
10002048:	dc400115 	stw	r17,4(sp)
1000204c:	dc000015 	stw	r16,0(sp)
10002050:	2827883a 	mov	r19,r5
10002054:	dfc00415 	stw	ra,16(sp)
10002058:	04440034 	movhi	r17,4096
1000205c:	8c561e04 	addi	r17,r17,22648
10002060:	2021883a 	mov	r16,r4
10002064:	00033500 	call	10003350 <__malloc_lock>
10002068:	88800217 	ldw	r2,8(r17)
1000206c:	14800117 	ldw	r18,4(r2)
10002070:	00bfff04 	movi	r2,-4
10002074:	90a4703a 	and	r18,r18,r2
10002078:	94e7c83a 	sub	r19,r18,r19
1000207c:	9cc3fbc4 	addi	r19,r19,4079
10002080:	9826d33a 	srli	r19,r19,12
10002084:	0083ffc4 	movi	r2,4095
10002088:	9cffffc4 	addi	r19,r19,-1
1000208c:	9826933a 	slli	r19,r19,12
10002090:	14c0060e 	bge	r2,r19,100020ac <_malloc_trim_r+0x70>
10002094:	8009883a 	mov	r4,r16
10002098:	000b883a 	mov	r5,zero
1000209c:	00018880 	call	10001888 <_sbrk_r>
100020a0:	88c00217 	ldw	r3,8(r17)
100020a4:	1c87883a 	add	r3,r3,r18
100020a8:	10c00a26 	beq	r2,r3,100020d4 <_malloc_trim_r+0x98>
100020ac:	8009883a 	mov	r4,r16
100020b0:	00033700 	call	10003370 <__malloc_unlock>
100020b4:	0005883a 	mov	r2,zero
100020b8:	dfc00417 	ldw	ra,16(sp)
100020bc:	dcc00317 	ldw	r19,12(sp)
100020c0:	dc800217 	ldw	r18,8(sp)
100020c4:	dc400117 	ldw	r17,4(sp)
100020c8:	dc000017 	ldw	r16,0(sp)
100020cc:	dec00504 	addi	sp,sp,20
100020d0:	f800283a 	ret
100020d4:	8009883a 	mov	r4,r16
100020d8:	04cbc83a 	sub	r5,zero,r19
100020dc:	00018880 	call	10001888 <_sbrk_r>
100020e0:	00ffffc4 	movi	r3,-1
100020e4:	10c01326 	beq	r2,r3,10002134 <_malloc_trim_r+0xf8>
100020e8:	00840074 	movhi	r2,4097
100020ec:	10a25504 	addi	r2,r2,-30380
100020f0:	11000017 	ldw	r4,0(r2)
100020f4:	88c00217 	ldw	r3,8(r17)
100020f8:	94e5c83a 	sub	r18,r18,r19
100020fc:	94800054 	ori	r18,r18,1
10002100:	24e7c83a 	sub	r19,r4,r19
10002104:	1c800115 	stw	r18,4(r3)
10002108:	8009883a 	mov	r4,r16
1000210c:	14c00015 	stw	r19,0(r2)
10002110:	00033700 	call	10003370 <__malloc_unlock>
10002114:	00800044 	movi	r2,1
10002118:	dfc00417 	ldw	ra,16(sp)
1000211c:	dcc00317 	ldw	r19,12(sp)
10002120:	dc800217 	ldw	r18,8(sp)
10002124:	dc400117 	ldw	r17,4(sp)
10002128:	dc000017 	ldw	r16,0(sp)
1000212c:	dec00504 	addi	sp,sp,20
10002130:	f800283a 	ret
10002134:	8009883a 	mov	r4,r16
10002138:	000b883a 	mov	r5,zero
1000213c:	00018880 	call	10001888 <_sbrk_r>
10002140:	88c00217 	ldw	r3,8(r17)
10002144:	014003c4 	movi	r5,15
10002148:	10c9c83a 	sub	r4,r2,r3
1000214c:	293fd70e 	bge	r5,r4,100020ac <__alt_data_end+0xf80020ac>
10002150:	01440034 	movhi	r5,4096
10002154:	295ba404 	addi	r5,r5,28304
10002158:	29400017 	ldw	r5,0(r5)
1000215c:	21000054 	ori	r4,r4,1
10002160:	19000115 	stw	r4,4(r3)
10002164:	1145c83a 	sub	r2,r2,r5
10002168:	01440074 	movhi	r5,4097
1000216c:	29625504 	addi	r5,r5,-30380
10002170:	28800015 	stw	r2,0(r5)
10002174:	003fcd06 	br	100020ac <__alt_data_end+0xf80020ac>

10002178 <_free_r>:
10002178:	defffd04 	addi	sp,sp,-12
1000217c:	dc000015 	stw	r16,0(sp)
10002180:	dfc00215 	stw	ra,8(sp)
10002184:	dc400115 	stw	r17,4(sp)
10002188:	2821883a 	mov	r16,r5
1000218c:	28004c26 	beq	r5,zero,100022c0 <_free_r+0x148>
10002190:	2023883a 	mov	r17,r4
10002194:	00033500 	call	10003350 <__malloc_lock>
10002198:	823fff17 	ldw	r8,-4(r16)
1000219c:	00bfff84 	movi	r2,-2
100021a0:	81bffe04 	addi	r6,r16,-8
100021a4:	4084703a 	and	r2,r8,r2
100021a8:	3087883a 	add	r3,r6,r2
100021ac:	01440034 	movhi	r5,4096
100021b0:	29561e04 	addi	r5,r5,22648
100021b4:	1a400117 	ldw	r9,4(r3)
100021b8:	29000217 	ldw	r4,8(r5)
100021bc:	01ffff04 	movi	r7,-4
100021c0:	49ce703a 	and	r7,r9,r7
100021c4:	20c06526 	beq	r4,r3,1000235c <_free_r+0x1e4>
100021c8:	19c00115 	stw	r7,4(r3)
100021cc:	4200004c 	andi	r8,r8,1
100021d0:	40003026 	beq	r8,zero,10002294 <_free_r+0x11c>
100021d4:	0009883a 	mov	r4,zero
100021d8:	19d1883a 	add	r8,r3,r7
100021dc:	42000117 	ldw	r8,4(r8)
100021e0:	4200004c 	andi	r8,r8,1
100021e4:	4000061e 	bne	r8,zero,10002200 <_free_r+0x88>
100021e8:	11c5883a 	add	r2,r2,r7
100021ec:	19c00217 	ldw	r7,8(r3)
100021f0:	20004e26 	beq	r4,zero,1000232c <_free_r+0x1b4>
100021f4:	18c00317 	ldw	r3,12(r3)
100021f8:	38c00315 	stw	r3,12(r7)
100021fc:	19c00215 	stw	r7,8(r3)
10002200:	10c00054 	ori	r3,r2,1
10002204:	30c00115 	stw	r3,4(r6)
10002208:	3087883a 	add	r3,r6,r2
1000220c:	18800015 	stw	r2,0(r3)
10002210:	20001a1e 	bne	r4,zero,1000227c <_free_r+0x104>
10002214:	00c07fc4 	movi	r3,511
10002218:	18802e2e 	bgeu	r3,r2,100022d4 <_free_r+0x15c>
1000221c:	1006d27a 	srli	r3,r2,9
10002220:	01000104 	movi	r4,4
10002224:	20c06636 	bltu	r4,r3,100023c0 <_free_r+0x248>
10002228:	1008d1ba 	srli	r4,r2,6
1000222c:	21000e04 	addi	r4,r4,56
10002230:	210f883a 	add	r7,r4,r4
10002234:	39cf883a 	add	r7,r7,r7
10002238:	39cf883a 	add	r7,r7,r7
1000223c:	29cf883a 	add	r7,r5,r7
10002240:	38c00217 	ldw	r3,8(r7)
10002244:	01440034 	movhi	r5,4096
10002248:	29561e04 	addi	r5,r5,22648
1000224c:	19c06126 	beq	r3,r7,100023d4 <_free_r+0x25c>
10002250:	013fff04 	movi	r4,-4
10002254:	19400117 	ldw	r5,4(r3)
10002258:	290a703a 	and	r5,r5,r4
1000225c:	1140022e 	bgeu	r2,r5,10002268 <_free_r+0xf0>
10002260:	18c00217 	ldw	r3,8(r3)
10002264:	38fffb1e 	bne	r7,r3,10002254 <__alt_data_end+0xf8002254>
10002268:	18800317 	ldw	r2,12(r3)
1000226c:	30800315 	stw	r2,12(r6)
10002270:	30c00215 	stw	r3,8(r6)
10002274:	11800215 	stw	r6,8(r2)
10002278:	19800315 	stw	r6,12(r3)
1000227c:	8809883a 	mov	r4,r17
10002280:	dfc00217 	ldw	ra,8(sp)
10002284:	dc400117 	ldw	r17,4(sp)
10002288:	dc000017 	ldw	r16,0(sp)
1000228c:	dec00304 	addi	sp,sp,12
10002290:	00033701 	jmpi	10003370 <__malloc_unlock>
10002294:	813ffe17 	ldw	r4,-8(r16)
10002298:	2a400204 	addi	r9,r5,8
1000229c:	310dc83a 	sub	r6,r6,r4
100022a0:	32000217 	ldw	r8,8(r6)
100022a4:	1105883a 	add	r2,r2,r4
100022a8:	42404326 	beq	r8,r9,100023b8 <_free_r+0x240>
100022ac:	32400317 	ldw	r9,12(r6)
100022b0:	0009883a 	mov	r4,zero
100022b4:	42400315 	stw	r9,12(r8)
100022b8:	4a000215 	stw	r8,8(r9)
100022bc:	003fc606 	br	100021d8 <__alt_data_end+0xf80021d8>
100022c0:	dfc00217 	ldw	ra,8(sp)
100022c4:	dc400117 	ldw	r17,4(sp)
100022c8:	dc000017 	ldw	r16,0(sp)
100022cc:	dec00304 	addi	sp,sp,12
100022d0:	f800283a 	ret
100022d4:	1004d0fa 	srli	r2,r2,3
100022d8:	02000044 	movi	r8,1
100022dc:	29c00117 	ldw	r7,4(r5)
100022e0:	1087883a 	add	r3,r2,r2
100022e4:	18c7883a 	add	r3,r3,r3
100022e8:	18c7883a 	add	r3,r3,r3
100022ec:	28c7883a 	add	r3,r5,r3
100022f0:	1005d0ba 	srai	r2,r2,2
100022f4:	19000217 	ldw	r4,8(r3)
100022f8:	30c00315 	stw	r3,12(r6)
100022fc:	4084983a 	sll	r2,r8,r2
10002300:	31000215 	stw	r4,8(r6)
10002304:	19800215 	stw	r6,8(r3)
10002308:	11c4b03a 	or	r2,r2,r7
1000230c:	21800315 	stw	r6,12(r4)
10002310:	8809883a 	mov	r4,r17
10002314:	28800115 	stw	r2,4(r5)
10002318:	dfc00217 	ldw	ra,8(sp)
1000231c:	dc400117 	ldw	r17,4(sp)
10002320:	dc000017 	ldw	r16,0(sp)
10002324:	dec00304 	addi	sp,sp,12
10002328:	00033701 	jmpi	10003370 <__malloc_unlock>
1000232c:	02040034 	movhi	r8,4096
10002330:	42162004 	addi	r8,r8,22656
10002334:	3a3faf1e 	bne	r7,r8,100021f4 <__alt_data_end+0xf80021f4>
10002338:	29800515 	stw	r6,20(r5)
1000233c:	29800415 	stw	r6,16(r5)
10002340:	10c00054 	ori	r3,r2,1
10002344:	31c00315 	stw	r7,12(r6)
10002348:	31c00215 	stw	r7,8(r6)
1000234c:	30c00115 	stw	r3,4(r6)
10002350:	308d883a 	add	r6,r6,r2
10002354:	30800015 	stw	r2,0(r6)
10002358:	003fc806 	br	1000227c <__alt_data_end+0xf800227c>
1000235c:	4200004c 	andi	r8,r8,1
10002360:	3885883a 	add	r2,r7,r2
10002364:	4000071e 	bne	r8,zero,10002384 <_free_r+0x20c>
10002368:	81fffe17 	ldw	r7,-8(r16)
1000236c:	31cdc83a 	sub	r6,r6,r7
10002370:	30c00317 	ldw	r3,12(r6)
10002374:	31000217 	ldw	r4,8(r6)
10002378:	11c5883a 	add	r2,r2,r7
1000237c:	20c00315 	stw	r3,12(r4)
10002380:	19000215 	stw	r4,8(r3)
10002384:	00c40034 	movhi	r3,4096
10002388:	18dba504 	addi	r3,r3,28308
1000238c:	11000054 	ori	r4,r2,1
10002390:	18c00017 	ldw	r3,0(r3)
10002394:	31000115 	stw	r4,4(r6)
10002398:	29800215 	stw	r6,8(r5)
1000239c:	10ffb736 	bltu	r2,r3,1000227c <__alt_data_end+0xf800227c>
100023a0:	00840074 	movhi	r2,4097
100023a4:	10a24d04 	addi	r2,r2,-30412
100023a8:	11400017 	ldw	r5,0(r2)
100023ac:	8809883a 	mov	r4,r17
100023b0:	000203c0 	call	1000203c <_malloc_trim_r>
100023b4:	003fb106 	br	1000227c <__alt_data_end+0xf800227c>
100023b8:	01000044 	movi	r4,1
100023bc:	003f8606 	br	100021d8 <__alt_data_end+0xf80021d8>
100023c0:	01000504 	movi	r4,20
100023c4:	20c00b36 	bltu	r4,r3,100023f4 <_free_r+0x27c>
100023c8:	190016c4 	addi	r4,r3,91
100023cc:	210f883a 	add	r7,r4,r4
100023d0:	003f9806 	br	10002234 <__alt_data_end+0xf8002234>
100023d4:	2009d0ba 	srai	r4,r4,2
100023d8:	00800044 	movi	r2,1
100023dc:	29c00117 	ldw	r7,4(r5)
100023e0:	1108983a 	sll	r4,r2,r4
100023e4:	1805883a 	mov	r2,r3
100023e8:	21c8b03a 	or	r4,r4,r7
100023ec:	29000115 	stw	r4,4(r5)
100023f0:	003f9e06 	br	1000226c <__alt_data_end+0xf800226c>
100023f4:	01001504 	movi	r4,84
100023f8:	20c00436 	bltu	r4,r3,1000240c <_free_r+0x294>
100023fc:	1008d33a 	srli	r4,r2,12
10002400:	21001b84 	addi	r4,r4,110
10002404:	210f883a 	add	r7,r4,r4
10002408:	003f8a06 	br	10002234 <__alt_data_end+0xf8002234>
1000240c:	01005504 	movi	r4,340
10002410:	20c00436 	bltu	r4,r3,10002424 <_free_r+0x2ac>
10002414:	1008d3fa 	srli	r4,r2,15
10002418:	21001dc4 	addi	r4,r4,119
1000241c:	210f883a 	add	r7,r4,r4
10002420:	003f8406 	br	10002234 <__alt_data_end+0xf8002234>
10002424:	01015504 	movi	r4,1364
10002428:	20c00436 	bltu	r4,r3,1000243c <_free_r+0x2c4>
1000242c:	1008d4ba 	srli	r4,r2,18
10002430:	21001f04 	addi	r4,r4,124
10002434:	210f883a 	add	r7,r4,r4
10002438:	003f7e06 	br	10002234 <__alt_data_end+0xf8002234>
1000243c:	01c03f04 	movi	r7,252
10002440:	01001f84 	movi	r4,126
10002444:	003f7b06 	br	10002234 <__alt_data_end+0xf8002234>

10002448 <_fwalk>:
10002448:	defff904 	addi	sp,sp,-28
1000244c:	dcc00315 	stw	r19,12(sp)
10002450:	24c0b804 	addi	r19,r4,736
10002454:	dd400515 	stw	r21,20(sp)
10002458:	dd000415 	stw	r20,16(sp)
1000245c:	dfc00615 	stw	ra,24(sp)
10002460:	dc800215 	stw	r18,8(sp)
10002464:	dc400115 	stw	r17,4(sp)
10002468:	dc000015 	stw	r16,0(sp)
1000246c:	282b883a 	mov	r21,r5
10002470:	0029883a 	mov	r20,zero
10002474:	0001ffc0 	call	10001ffc <__sfp_lock_acquire>
10002478:	98001226 	beq	r19,zero,100024c4 <_fwalk+0x7c>
1000247c:	04bfffc4 	movi	r18,-1
10002480:	9c400117 	ldw	r17,4(r19)
10002484:	9c000217 	ldw	r16,8(r19)
10002488:	8c7fffc4 	addi	r17,r17,-1
1000248c:	88000b16 	blt	r17,zero,100024bc <_fwalk+0x74>
10002490:	84000304 	addi	r16,r16,12
10002494:	80c0000f 	ldh	r3,0(r16)
10002498:	8c7fffc4 	addi	r17,r17,-1
1000249c:	813ffd04 	addi	r4,r16,-12
100024a0:	18000426 	beq	r3,zero,100024b4 <_fwalk+0x6c>
100024a4:	80c0008f 	ldh	r3,2(r16)
100024a8:	1c800226 	beq	r3,r18,100024b4 <_fwalk+0x6c>
100024ac:	a83ee83a 	callr	r21
100024b0:	a0a8b03a 	or	r20,r20,r2
100024b4:	84001a04 	addi	r16,r16,104
100024b8:	8cbff61e 	bne	r17,r18,10002494 <__alt_data_end+0xf8002494>
100024bc:	9cc00017 	ldw	r19,0(r19)
100024c0:	983fef1e 	bne	r19,zero,10002480 <__alt_data_end+0xf8002480>
100024c4:	00020000 	call	10002000 <__sfp_lock_release>
100024c8:	a005883a 	mov	r2,r20
100024cc:	dfc00617 	ldw	ra,24(sp)
100024d0:	dd400517 	ldw	r21,20(sp)
100024d4:	dd000417 	ldw	r20,16(sp)
100024d8:	dcc00317 	ldw	r19,12(sp)
100024dc:	dc800217 	ldw	r18,8(sp)
100024e0:	dc400117 	ldw	r17,4(sp)
100024e4:	dc000017 	ldw	r16,0(sp)
100024e8:	dec00704 	addi	sp,sp,28
100024ec:	f800283a 	ret

100024f0 <_fwalk_reent>:
100024f0:	defff804 	addi	sp,sp,-32
100024f4:	dcc00315 	stw	r19,12(sp)
100024f8:	24c0b804 	addi	r19,r4,736
100024fc:	dd800615 	stw	r22,24(sp)
10002500:	dd400515 	stw	r21,20(sp)
10002504:	dd000415 	stw	r20,16(sp)
10002508:	dfc00715 	stw	ra,28(sp)
1000250c:	dc800215 	stw	r18,8(sp)
10002510:	dc400115 	stw	r17,4(sp)
10002514:	dc000015 	stw	r16,0(sp)
10002518:	2029883a 	mov	r20,r4
1000251c:	282b883a 	mov	r21,r5
10002520:	002d883a 	mov	r22,zero
10002524:	0001ffc0 	call	10001ffc <__sfp_lock_acquire>
10002528:	98001326 	beq	r19,zero,10002578 <_fwalk_reent+0x88>
1000252c:	04bfffc4 	movi	r18,-1
10002530:	9c400117 	ldw	r17,4(r19)
10002534:	9c000217 	ldw	r16,8(r19)
10002538:	8c7fffc4 	addi	r17,r17,-1
1000253c:	88000c16 	blt	r17,zero,10002570 <_fwalk_reent+0x80>
10002540:	84000304 	addi	r16,r16,12
10002544:	80c0000f 	ldh	r3,0(r16)
10002548:	8c7fffc4 	addi	r17,r17,-1
1000254c:	817ffd04 	addi	r5,r16,-12
10002550:	18000526 	beq	r3,zero,10002568 <_fwalk_reent+0x78>
10002554:	80c0008f 	ldh	r3,2(r16)
10002558:	a009883a 	mov	r4,r20
1000255c:	1c800226 	beq	r3,r18,10002568 <_fwalk_reent+0x78>
10002560:	a83ee83a 	callr	r21
10002564:	b0acb03a 	or	r22,r22,r2
10002568:	84001a04 	addi	r16,r16,104
1000256c:	8cbff51e 	bne	r17,r18,10002544 <__alt_data_end+0xf8002544>
10002570:	9cc00017 	ldw	r19,0(r19)
10002574:	983fee1e 	bne	r19,zero,10002530 <__alt_data_end+0xf8002530>
10002578:	00020000 	call	10002000 <__sfp_lock_release>
1000257c:	b005883a 	mov	r2,r22
10002580:	dfc00717 	ldw	ra,28(sp)
10002584:	dd800617 	ldw	r22,24(sp)
10002588:	dd400517 	ldw	r21,20(sp)
1000258c:	dd000417 	ldw	r20,16(sp)
10002590:	dcc00317 	ldw	r19,12(sp)
10002594:	dc800217 	ldw	r18,8(sp)
10002598:	dc400117 	ldw	r17,4(sp)
1000259c:	dc000017 	ldw	r16,0(sp)
100025a0:	dec00804 	addi	sp,sp,32
100025a4:	f800283a 	ret

100025a8 <__smakebuf_r>:
100025a8:	2880030b 	ldhu	r2,12(r5)
100025ac:	deffec04 	addi	sp,sp,-80
100025b0:	dc000f15 	stw	r16,60(sp)
100025b4:	dfc01315 	stw	ra,76(sp)
100025b8:	dcc01215 	stw	r19,72(sp)
100025bc:	dc801115 	stw	r18,68(sp)
100025c0:	dc401015 	stw	r17,64(sp)
100025c4:	10c0008c 	andi	r3,r2,2
100025c8:	2821883a 	mov	r16,r5
100025cc:	18003a1e 	bne	r3,zero,100026b8 <__smakebuf_r+0x110>
100025d0:	2940038f 	ldh	r5,14(r5)
100025d4:	2023883a 	mov	r17,r4
100025d8:	28001b16 	blt	r5,zero,10002648 <__smakebuf_r+0xa0>
100025dc:	d80d883a 	mov	r6,sp
100025e0:	0002bb80 	call	10002bb8 <_fstat_r>
100025e4:	10001716 	blt	r2,zero,10002644 <__smakebuf_r+0x9c>
100025e8:	d8800117 	ldw	r2,4(sp)
100025ec:	00e00014 	movui	r3,32768
100025f0:	10bc000c 	andi	r2,r2,61440
100025f4:	10c03e26 	beq	r2,r3,100026f0 <__smakebuf_r+0x148>
100025f8:	80c0030b 	ldhu	r3,12(r16)
100025fc:	18c20014 	ori	r3,r3,2048
10002600:	80c0030d 	sth	r3,12(r16)
10002604:	00c80004 	movi	r3,8192
10002608:	10c0431e 	bne	r2,r3,10002718 <__smakebuf_r+0x170>
1000260c:	8140038f 	ldh	r5,14(r16)
10002610:	8809883a 	mov	r4,r17
10002614:	0002c200 	call	10002c20 <_isatty_r>
10002618:	10004d26 	beq	r2,zero,10002750 <__smakebuf_r+0x1a8>
1000261c:	80c0030b 	ldhu	r3,12(r16)
10002620:	04c00044 	movi	r19,1
10002624:	808010c4 	addi	r2,r16,67
10002628:	1cc6b03a 	or	r3,r3,r19
1000262c:	80c0030d 	sth	r3,12(r16)
10002630:	80800015 	stw	r2,0(r16)
10002634:	80800415 	stw	r2,16(r16)
10002638:	84c00515 	stw	r19,20(r16)
1000263c:	04810004 	movi	r18,1024
10002640:	00000706 	br	10002660 <__smakebuf_r+0xb8>
10002644:	8080030b 	ldhu	r2,12(r16)
10002648:	10c0200c 	andi	r3,r2,128
1000264c:	1800261e 	bne	r3,zero,100026e8 <__smakebuf_r+0x140>
10002650:	04810004 	movi	r18,1024
10002654:	10820014 	ori	r2,r2,2048
10002658:	8080030d 	sth	r2,12(r16)
1000265c:	0027883a 	mov	r19,zero
10002660:	8809883a 	mov	r4,r17
10002664:	900b883a 	mov	r5,r18
10002668:	00008300 	call	10000830 <_malloc_r>
1000266c:	10002d26 	beq	r2,zero,10002724 <__smakebuf_r+0x17c>
10002670:	80c0030b 	ldhu	r3,12(r16)
10002674:	01040034 	movhi	r4,4096
10002678:	21072a04 	addi	r4,r4,7336
1000267c:	89000f15 	stw	r4,60(r17)
10002680:	18c02014 	ori	r3,r3,128
10002684:	80c0030d 	sth	r3,12(r16)
10002688:	80800015 	stw	r2,0(r16)
1000268c:	80800415 	stw	r2,16(r16)
10002690:	84800515 	stw	r18,20(r16)
10002694:	98000d26 	beq	r19,zero,100026cc <__smakebuf_r+0x124>
10002698:	8140038f 	ldh	r5,14(r16)
1000269c:	8809883a 	mov	r4,r17
100026a0:	0002c200 	call	10002c20 <_isatty_r>
100026a4:	10000926 	beq	r2,zero,100026cc <__smakebuf_r+0x124>
100026a8:	8080030b 	ldhu	r2,12(r16)
100026ac:	10800054 	ori	r2,r2,1
100026b0:	8080030d 	sth	r2,12(r16)
100026b4:	00000506 	br	100026cc <__smakebuf_r+0x124>
100026b8:	288010c4 	addi	r2,r5,67
100026bc:	28800015 	stw	r2,0(r5)
100026c0:	28800415 	stw	r2,16(r5)
100026c4:	00800044 	movi	r2,1
100026c8:	28800515 	stw	r2,20(r5)
100026cc:	dfc01317 	ldw	ra,76(sp)
100026d0:	dcc01217 	ldw	r19,72(sp)
100026d4:	dc801117 	ldw	r18,68(sp)
100026d8:	dc401017 	ldw	r17,64(sp)
100026dc:	dc000f17 	ldw	r16,60(sp)
100026e0:	dec01404 	addi	sp,sp,80
100026e4:	f800283a 	ret
100026e8:	04801004 	movi	r18,64
100026ec:	003fd906 	br	10002654 <__alt_data_end+0xf8002654>
100026f0:	81000a17 	ldw	r4,40(r16)
100026f4:	00c40034 	movhi	r3,4096
100026f8:	18ca5204 	addi	r3,r3,10568
100026fc:	20ffbe1e 	bne	r4,r3,100025f8 <__alt_data_end+0xf80025f8>
10002700:	80c0030b 	ldhu	r3,12(r16)
10002704:	01010004 	movi	r4,1024
10002708:	81001315 	stw	r4,76(r16)
1000270c:	1906b03a 	or	r3,r3,r4
10002710:	80c0030d 	sth	r3,12(r16)
10002714:	003fbb06 	br	10002604 <__alt_data_end+0xf8002604>
10002718:	0027883a 	mov	r19,zero
1000271c:	04810004 	movi	r18,1024
10002720:	003fcf06 	br	10002660 <__alt_data_end+0xf8002660>
10002724:	8080030b 	ldhu	r2,12(r16)
10002728:	10c0800c 	andi	r3,r2,512
1000272c:	183fe71e 	bne	r3,zero,100026cc <__alt_data_end+0xf80026cc>
10002730:	10800094 	ori	r2,r2,2
10002734:	80c010c4 	addi	r3,r16,67
10002738:	8080030d 	sth	r2,12(r16)
1000273c:	00800044 	movi	r2,1
10002740:	80c00015 	stw	r3,0(r16)
10002744:	80c00415 	stw	r3,16(r16)
10002748:	80800515 	stw	r2,20(r16)
1000274c:	003fdf06 	br	100026cc <__alt_data_end+0xf80026cc>
10002750:	04c00044 	movi	r19,1
10002754:	04810004 	movi	r18,1024
10002758:	003fc106 	br	10002660 <__alt_data_end+0xf8002660>

1000275c <memset>:
1000275c:	20c000cc 	andi	r3,r4,3
10002760:	2005883a 	mov	r2,r4
10002764:	18003f26 	beq	r3,zero,10002864 <memset+0x108>
10002768:	31ffffc4 	addi	r7,r6,-1
1000276c:	30003b26 	beq	r6,zero,1000285c <memset+0x100>
10002770:	2813883a 	mov	r9,r5
10002774:	200d883a 	mov	r6,r4
10002778:	2007883a 	mov	r3,r4
1000277c:	00000406 	br	10002790 <memset+0x34>
10002780:	3a3fffc4 	addi	r8,r7,-1
10002784:	31800044 	addi	r6,r6,1
10002788:	38003426 	beq	r7,zero,1000285c <memset+0x100>
1000278c:	400f883a 	mov	r7,r8
10002790:	18c00044 	addi	r3,r3,1
10002794:	32400005 	stb	r9,0(r6)
10002798:	1a0000cc 	andi	r8,r3,3
1000279c:	403ff81e 	bne	r8,zero,10002780 <__alt_data_end+0xf8002780>
100027a0:	010000c4 	movi	r4,3
100027a4:	21c0282e 	bgeu	r4,r7,10002848 <memset+0xec>
100027a8:	29003fcc 	andi	r4,r5,255
100027ac:	2010923a 	slli	r8,r4,8
100027b0:	4108b03a 	or	r4,r8,r4
100027b4:	2010943a 	slli	r8,r4,16
100027b8:	4110b03a 	or	r8,r8,r4
100027bc:	010003c4 	movi	r4,15
100027c0:	21c0122e 	bgeu	r4,r7,1000280c <memset+0xb0>
100027c4:	3a7ffc04 	addi	r9,r7,-16
100027c8:	4812d13a 	srli	r9,r9,4
100027cc:	19000404 	addi	r4,r3,16
100027d0:	180d883a 	mov	r6,r3
100027d4:	4814913a 	slli	r10,r9,4
100027d8:	2289883a 	add	r4,r4,r10
100027dc:	32000015 	stw	r8,0(r6)
100027e0:	32000115 	stw	r8,4(r6)
100027e4:	32000215 	stw	r8,8(r6)
100027e8:	32000315 	stw	r8,12(r6)
100027ec:	31800404 	addi	r6,r6,16
100027f0:	313ffa1e 	bne	r6,r4,100027dc <__alt_data_end+0xf80027dc>
100027f4:	4a400044 	addi	r9,r9,1
100027f8:	4812913a 	slli	r9,r9,4
100027fc:	39c003cc 	andi	r7,r7,15
10002800:	010000c4 	movi	r4,3
10002804:	1a47883a 	add	r3,r3,r9
10002808:	21c00f2e 	bgeu	r4,r7,10002848 <memset+0xec>
1000280c:	3a7fff04 	addi	r9,r7,-4
10002810:	4812d0ba 	srli	r9,r9,2
10002814:	19000104 	addi	r4,r3,4
10002818:	180d883a 	mov	r6,r3
1000281c:	4a55883a 	add	r10,r9,r9
10002820:	5295883a 	add	r10,r10,r10
10002824:	2289883a 	add	r4,r4,r10
10002828:	32000015 	stw	r8,0(r6)
1000282c:	31800104 	addi	r6,r6,4
10002830:	313ffd1e 	bne	r6,r4,10002828 <__alt_data_end+0xf8002828>
10002834:	4a400044 	addi	r9,r9,1
10002838:	4a53883a 	add	r9,r9,r9
1000283c:	4a53883a 	add	r9,r9,r9
10002840:	1a47883a 	add	r3,r3,r9
10002844:	39c000cc 	andi	r7,r7,3
10002848:	38000526 	beq	r7,zero,10002860 <memset+0x104>
1000284c:	19cf883a 	add	r7,r3,r7
10002850:	19400005 	stb	r5,0(r3)
10002854:	18c00044 	addi	r3,r3,1
10002858:	19fffd1e 	bne	r3,r7,10002850 <__alt_data_end+0xf8002850>
1000285c:	f800283a 	ret
10002860:	f800283a 	ret
10002864:	2007883a 	mov	r3,r4
10002868:	300f883a 	mov	r7,r6
1000286c:	003fcc06 	br	100027a0 <__alt_data_end+0xf80027a0>

10002870 <__sread>:
10002870:	defffe04 	addi	sp,sp,-8
10002874:	dc000015 	stw	r16,0(sp)
10002878:	2821883a 	mov	r16,r5
1000287c:	2940038f 	ldh	r5,14(r5)
10002880:	dfc00115 	stw	ra,4(sp)
10002884:	0002cf00 	call	10002cf0 <_read_r>
10002888:	10000716 	blt	r2,zero,100028a8 <__sread+0x38>
1000288c:	80c01417 	ldw	r3,80(r16)
10002890:	1887883a 	add	r3,r3,r2
10002894:	80c01415 	stw	r3,80(r16)
10002898:	dfc00117 	ldw	ra,4(sp)
1000289c:	dc000017 	ldw	r16,0(sp)
100028a0:	dec00204 	addi	sp,sp,8
100028a4:	f800283a 	ret
100028a8:	80c0030b 	ldhu	r3,12(r16)
100028ac:	18fbffcc 	andi	r3,r3,61439
100028b0:	80c0030d 	sth	r3,12(r16)
100028b4:	dfc00117 	ldw	ra,4(sp)
100028b8:	dc000017 	ldw	r16,0(sp)
100028bc:	dec00204 	addi	sp,sp,8
100028c0:	f800283a 	ret

100028c4 <__seofread>:
100028c4:	0005883a 	mov	r2,zero
100028c8:	f800283a 	ret

100028cc <__swrite>:
100028cc:	2880030b 	ldhu	r2,12(r5)
100028d0:	defffb04 	addi	sp,sp,-20
100028d4:	dcc00315 	stw	r19,12(sp)
100028d8:	dc800215 	stw	r18,8(sp)
100028dc:	dc400115 	stw	r17,4(sp)
100028e0:	dc000015 	stw	r16,0(sp)
100028e4:	dfc00415 	stw	ra,16(sp)
100028e8:	10c0400c 	andi	r3,r2,256
100028ec:	2821883a 	mov	r16,r5
100028f0:	2027883a 	mov	r19,r4
100028f4:	3025883a 	mov	r18,r6
100028f8:	3823883a 	mov	r17,r7
100028fc:	18000526 	beq	r3,zero,10002914 <__swrite+0x48>
10002900:	2940038f 	ldh	r5,14(r5)
10002904:	000d883a 	mov	r6,zero
10002908:	01c00084 	movi	r7,2
1000290c:	0002c840 	call	10002c84 <_lseek_r>
10002910:	8080030b 	ldhu	r2,12(r16)
10002914:	8140038f 	ldh	r5,14(r16)
10002918:	10bbffcc 	andi	r2,r2,61439
1000291c:	9809883a 	mov	r4,r19
10002920:	900d883a 	mov	r6,r18
10002924:	880f883a 	mov	r7,r17
10002928:	8080030d 	sth	r2,12(r16)
1000292c:	dfc00417 	ldw	ra,16(sp)
10002930:	dcc00317 	ldw	r19,12(sp)
10002934:	dc800217 	ldw	r18,8(sp)
10002938:	dc400117 	ldw	r17,4(sp)
1000293c:	dc000017 	ldw	r16,0(sp)
10002940:	dec00504 	addi	sp,sp,20
10002944:	00029ac1 	jmpi	100029ac <_write_r>

10002948 <__sseek>:
10002948:	defffe04 	addi	sp,sp,-8
1000294c:	dc000015 	stw	r16,0(sp)
10002950:	2821883a 	mov	r16,r5
10002954:	2940038f 	ldh	r5,14(r5)
10002958:	dfc00115 	stw	ra,4(sp)
1000295c:	0002c840 	call	10002c84 <_lseek_r>
10002960:	00ffffc4 	movi	r3,-1
10002964:	10c00826 	beq	r2,r3,10002988 <__sseek+0x40>
10002968:	80c0030b 	ldhu	r3,12(r16)
1000296c:	80801415 	stw	r2,80(r16)
10002970:	18c40014 	ori	r3,r3,4096
10002974:	80c0030d 	sth	r3,12(r16)
10002978:	dfc00117 	ldw	ra,4(sp)
1000297c:	dc000017 	ldw	r16,0(sp)
10002980:	dec00204 	addi	sp,sp,8
10002984:	f800283a 	ret
10002988:	80c0030b 	ldhu	r3,12(r16)
1000298c:	18fbffcc 	andi	r3,r3,61439
10002990:	80c0030d 	sth	r3,12(r16)
10002994:	dfc00117 	ldw	ra,4(sp)
10002998:	dc000017 	ldw	r16,0(sp)
1000299c:	dec00204 	addi	sp,sp,8
100029a0:	f800283a 	ret

100029a4 <__sclose>:
100029a4:	2940038f 	ldh	r5,14(r5)
100029a8:	0002a181 	jmpi	10002a18 <_close_r>

100029ac <_write_r>:
100029ac:	defffd04 	addi	sp,sp,-12
100029b0:	dc400115 	stw	r17,4(sp)
100029b4:	dc000015 	stw	r16,0(sp)
100029b8:	2023883a 	mov	r17,r4
100029bc:	04040074 	movhi	r16,4097
100029c0:	84224e04 	addi	r16,r16,-30408
100029c4:	2809883a 	mov	r4,r5
100029c8:	300b883a 	mov	r5,r6
100029cc:	380d883a 	mov	r6,r7
100029d0:	dfc00215 	stw	ra,8(sp)
100029d4:	80000015 	stw	zero,0(r16)
100029d8:	00036580 	call	10003658 <write>
100029dc:	00ffffc4 	movi	r3,-1
100029e0:	10c00526 	beq	r2,r3,100029f8 <_write_r+0x4c>
100029e4:	dfc00217 	ldw	ra,8(sp)
100029e8:	dc400117 	ldw	r17,4(sp)
100029ec:	dc000017 	ldw	r16,0(sp)
100029f0:	dec00304 	addi	sp,sp,12
100029f4:	f800283a 	ret
100029f8:	80c00017 	ldw	r3,0(r16)
100029fc:	183ff926 	beq	r3,zero,100029e4 <__alt_data_end+0xf80029e4>
10002a00:	88c00015 	stw	r3,0(r17)
10002a04:	dfc00217 	ldw	ra,8(sp)
10002a08:	dc400117 	ldw	r17,4(sp)
10002a0c:	dc000017 	ldw	r16,0(sp)
10002a10:	dec00304 	addi	sp,sp,12
10002a14:	f800283a 	ret

10002a18 <_close_r>:
10002a18:	defffd04 	addi	sp,sp,-12
10002a1c:	dc400115 	stw	r17,4(sp)
10002a20:	dc000015 	stw	r16,0(sp)
10002a24:	2023883a 	mov	r17,r4
10002a28:	04040074 	movhi	r16,4097
10002a2c:	84224e04 	addi	r16,r16,-30408
10002a30:	2809883a 	mov	r4,r5
10002a34:	dfc00215 	stw	ra,8(sp)
10002a38:	80000015 	stw	zero,0(r16)
10002a3c:	0002dd40 	call	10002dd4 <close>
10002a40:	00ffffc4 	movi	r3,-1
10002a44:	10c00526 	beq	r2,r3,10002a5c <_close_r+0x44>
10002a48:	dfc00217 	ldw	ra,8(sp)
10002a4c:	dc400117 	ldw	r17,4(sp)
10002a50:	dc000017 	ldw	r16,0(sp)
10002a54:	dec00304 	addi	sp,sp,12
10002a58:	f800283a 	ret
10002a5c:	80c00017 	ldw	r3,0(r16)
10002a60:	183ff926 	beq	r3,zero,10002a48 <__alt_data_end+0xf8002a48>
10002a64:	88c00015 	stw	r3,0(r17)
10002a68:	dfc00217 	ldw	ra,8(sp)
10002a6c:	dc400117 	ldw	r17,4(sp)
10002a70:	dc000017 	ldw	r16,0(sp)
10002a74:	dec00304 	addi	sp,sp,12
10002a78:	f800283a 	ret

10002a7c <_fclose_r>:
10002a7c:	defffc04 	addi	sp,sp,-16
10002a80:	dc000015 	stw	r16,0(sp)
10002a84:	dfc00315 	stw	ra,12(sp)
10002a88:	dc800215 	stw	r18,8(sp)
10002a8c:	dc400115 	stw	r17,4(sp)
10002a90:	2821883a 	mov	r16,r5
10002a94:	28003126 	beq	r5,zero,10002b5c <_fclose_r+0xe0>
10002a98:	2023883a 	mov	r17,r4
10002a9c:	0001ffc0 	call	10001ffc <__sfp_lock_acquire>
10002aa0:	88000226 	beq	r17,zero,10002aac <_fclose_r+0x30>
10002aa4:	88800e17 	ldw	r2,56(r17)
10002aa8:	10003326 	beq	r2,zero,10002b78 <_fclose_r+0xfc>
10002aac:	8080030f 	ldh	r2,12(r16)
10002ab0:	10002226 	beq	r2,zero,10002b3c <_fclose_r+0xc0>
10002ab4:	8809883a 	mov	r4,r17
10002ab8:	800b883a 	mov	r5,r16
10002abc:	0001a240 	call	10001a24 <_fflush_r>
10002ac0:	80c00b17 	ldw	r3,44(r16)
10002ac4:	1025883a 	mov	r18,r2
10002ac8:	18000426 	beq	r3,zero,10002adc <_fclose_r+0x60>
10002acc:	81400717 	ldw	r5,28(r16)
10002ad0:	8809883a 	mov	r4,r17
10002ad4:	183ee83a 	callr	r3
10002ad8:	10003016 	blt	r2,zero,10002b9c <_fclose_r+0x120>
10002adc:	8080030b 	ldhu	r2,12(r16)
10002ae0:	1080200c 	andi	r2,r2,128
10002ae4:	1000291e 	bne	r2,zero,10002b8c <_fclose_r+0x110>
10002ae8:	81400c17 	ldw	r5,48(r16)
10002aec:	28000526 	beq	r5,zero,10002b04 <_fclose_r+0x88>
10002af0:	80801004 	addi	r2,r16,64
10002af4:	28800226 	beq	r5,r2,10002b00 <_fclose_r+0x84>
10002af8:	8809883a 	mov	r4,r17
10002afc:	00021780 	call	10002178 <_free_r>
10002b00:	80000c15 	stw	zero,48(r16)
10002b04:	81401117 	ldw	r5,68(r16)
10002b08:	28000326 	beq	r5,zero,10002b18 <_fclose_r+0x9c>
10002b0c:	8809883a 	mov	r4,r17
10002b10:	00021780 	call	10002178 <_free_r>
10002b14:	80001115 	stw	zero,68(r16)
10002b18:	8000030d 	sth	zero,12(r16)
10002b1c:	00020000 	call	10002000 <__sfp_lock_release>
10002b20:	9005883a 	mov	r2,r18
10002b24:	dfc00317 	ldw	ra,12(sp)
10002b28:	dc800217 	ldw	r18,8(sp)
10002b2c:	dc400117 	ldw	r17,4(sp)
10002b30:	dc000017 	ldw	r16,0(sp)
10002b34:	dec00404 	addi	sp,sp,16
10002b38:	f800283a 	ret
10002b3c:	00020000 	call	10002000 <__sfp_lock_release>
10002b40:	0005883a 	mov	r2,zero
10002b44:	dfc00317 	ldw	ra,12(sp)
10002b48:	dc800217 	ldw	r18,8(sp)
10002b4c:	dc400117 	ldw	r17,4(sp)
10002b50:	dc000017 	ldw	r16,0(sp)
10002b54:	dec00404 	addi	sp,sp,16
10002b58:	f800283a 	ret
10002b5c:	0005883a 	mov	r2,zero
10002b60:	dfc00317 	ldw	ra,12(sp)
10002b64:	dc800217 	ldw	r18,8(sp)
10002b68:	dc400117 	ldw	r17,4(sp)
10002b6c:	dc000017 	ldw	r16,0(sp)
10002b70:	dec00404 	addi	sp,sp,16
10002b74:	f800283a 	ret
10002b78:	8809883a 	mov	r4,r17
10002b7c:	0001d440 	call	10001d44 <__sinit>
10002b80:	8080030f 	ldh	r2,12(r16)
10002b84:	103fcb1e 	bne	r2,zero,10002ab4 <__alt_data_end+0xf8002ab4>
10002b88:	003fec06 	br	10002b3c <__alt_data_end+0xf8002b3c>
10002b8c:	81400417 	ldw	r5,16(r16)
10002b90:	8809883a 	mov	r4,r17
10002b94:	00021780 	call	10002178 <_free_r>
10002b98:	003fd306 	br	10002ae8 <__alt_data_end+0xf8002ae8>
10002b9c:	04bfffc4 	movi	r18,-1
10002ba0:	003fce06 	br	10002adc <__alt_data_end+0xf8002adc>

10002ba4 <fclose>:
10002ba4:	00840034 	movhi	r2,4096
10002ba8:	109ba304 	addi	r2,r2,28300
10002bac:	200b883a 	mov	r5,r4
10002bb0:	11000017 	ldw	r4,0(r2)
10002bb4:	0002a7c1 	jmpi	10002a7c <_fclose_r>

10002bb8 <_fstat_r>:
10002bb8:	defffd04 	addi	sp,sp,-12
10002bbc:	dc400115 	stw	r17,4(sp)
10002bc0:	dc000015 	stw	r16,0(sp)
10002bc4:	2023883a 	mov	r17,r4
10002bc8:	04040074 	movhi	r16,4097
10002bcc:	84224e04 	addi	r16,r16,-30408
10002bd0:	2809883a 	mov	r4,r5
10002bd4:	300b883a 	mov	r5,r6
10002bd8:	dfc00215 	stw	ra,8(sp)
10002bdc:	80000015 	stw	zero,0(r16)
10002be0:	0002f200 	call	10002f20 <fstat>
10002be4:	00ffffc4 	movi	r3,-1
10002be8:	10c00526 	beq	r2,r3,10002c00 <_fstat_r+0x48>
10002bec:	dfc00217 	ldw	ra,8(sp)
10002bf0:	dc400117 	ldw	r17,4(sp)
10002bf4:	dc000017 	ldw	r16,0(sp)
10002bf8:	dec00304 	addi	sp,sp,12
10002bfc:	f800283a 	ret
10002c00:	80c00017 	ldw	r3,0(r16)
10002c04:	183ff926 	beq	r3,zero,10002bec <__alt_data_end+0xf8002bec>
10002c08:	88c00015 	stw	r3,0(r17)
10002c0c:	dfc00217 	ldw	ra,8(sp)
10002c10:	dc400117 	ldw	r17,4(sp)
10002c14:	dc000017 	ldw	r16,0(sp)
10002c18:	dec00304 	addi	sp,sp,12
10002c1c:	f800283a 	ret

10002c20 <_isatty_r>:
10002c20:	defffd04 	addi	sp,sp,-12
10002c24:	dc400115 	stw	r17,4(sp)
10002c28:	dc000015 	stw	r16,0(sp)
10002c2c:	2023883a 	mov	r17,r4
10002c30:	04040074 	movhi	r16,4097
10002c34:	84224e04 	addi	r16,r16,-30408
10002c38:	2809883a 	mov	r4,r5
10002c3c:	dfc00215 	stw	ra,8(sp)
10002c40:	80000015 	stw	zero,0(r16)
10002c44:	00030240 	call	10003024 <isatty>
10002c48:	00ffffc4 	movi	r3,-1
10002c4c:	10c00526 	beq	r2,r3,10002c64 <_isatty_r+0x44>
10002c50:	dfc00217 	ldw	ra,8(sp)
10002c54:	dc400117 	ldw	r17,4(sp)
10002c58:	dc000017 	ldw	r16,0(sp)
10002c5c:	dec00304 	addi	sp,sp,12
10002c60:	f800283a 	ret
10002c64:	80c00017 	ldw	r3,0(r16)
10002c68:	183ff926 	beq	r3,zero,10002c50 <__alt_data_end+0xf8002c50>
10002c6c:	88c00015 	stw	r3,0(r17)
10002c70:	dfc00217 	ldw	ra,8(sp)
10002c74:	dc400117 	ldw	r17,4(sp)
10002c78:	dc000017 	ldw	r16,0(sp)
10002c7c:	dec00304 	addi	sp,sp,12
10002c80:	f800283a 	ret

10002c84 <_lseek_r>:
10002c84:	defffd04 	addi	sp,sp,-12
10002c88:	dc400115 	stw	r17,4(sp)
10002c8c:	dc000015 	stw	r16,0(sp)
10002c90:	2023883a 	mov	r17,r4
10002c94:	04040074 	movhi	r16,4097
10002c98:	84224e04 	addi	r16,r16,-30408
10002c9c:	2809883a 	mov	r4,r5
10002ca0:	300b883a 	mov	r5,r6
10002ca4:	380d883a 	mov	r6,r7
10002ca8:	dfc00215 	stw	ra,8(sp)
10002cac:	80000015 	stw	zero,0(r16)
10002cb0:	00032000 	call	10003200 <lseek>
10002cb4:	00ffffc4 	movi	r3,-1
10002cb8:	10c00526 	beq	r2,r3,10002cd0 <_lseek_r+0x4c>
10002cbc:	dfc00217 	ldw	ra,8(sp)
10002cc0:	dc400117 	ldw	r17,4(sp)
10002cc4:	dc000017 	ldw	r16,0(sp)
10002cc8:	dec00304 	addi	sp,sp,12
10002ccc:	f800283a 	ret
10002cd0:	80c00017 	ldw	r3,0(r16)
10002cd4:	183ff926 	beq	r3,zero,10002cbc <__alt_data_end+0xf8002cbc>
10002cd8:	88c00015 	stw	r3,0(r17)
10002cdc:	dfc00217 	ldw	ra,8(sp)
10002ce0:	dc400117 	ldw	r17,4(sp)
10002ce4:	dc000017 	ldw	r16,0(sp)
10002ce8:	dec00304 	addi	sp,sp,12
10002cec:	f800283a 	ret

10002cf0 <_read_r>:
10002cf0:	defffd04 	addi	sp,sp,-12
10002cf4:	dc400115 	stw	r17,4(sp)
10002cf8:	dc000015 	stw	r16,0(sp)
10002cfc:	2023883a 	mov	r17,r4
10002d00:	04040074 	movhi	r16,4097
10002d04:	84224e04 	addi	r16,r16,-30408
10002d08:	2809883a 	mov	r4,r5
10002d0c:	300b883a 	mov	r5,r6
10002d10:	380d883a 	mov	r6,r7
10002d14:	dfc00215 	stw	ra,8(sp)
10002d18:	80000015 	stw	zero,0(r16)
10002d1c:	00033e00 	call	100033e0 <read>
10002d20:	00ffffc4 	movi	r3,-1
10002d24:	10c00526 	beq	r2,r3,10002d3c <_read_r+0x4c>
10002d28:	dfc00217 	ldw	ra,8(sp)
10002d2c:	dc400117 	ldw	r17,4(sp)
10002d30:	dc000017 	ldw	r16,0(sp)
10002d34:	dec00304 	addi	sp,sp,12
10002d38:	f800283a 	ret
10002d3c:	80c00017 	ldw	r3,0(r16)
10002d40:	183ff926 	beq	r3,zero,10002d28 <__alt_data_end+0xf8002d28>
10002d44:	88c00015 	stw	r3,0(r17)
10002d48:	dfc00217 	ldw	ra,8(sp)
10002d4c:	dc400117 	ldw	r17,4(sp)
10002d50:	dc000017 	ldw	r16,0(sp)
10002d54:	dec00304 	addi	sp,sp,12
10002d58:	f800283a 	ret

10002d5c <__mulsi3>:
10002d5c:	0005883a 	mov	r2,zero
10002d60:	20000726 	beq	r4,zero,10002d80 <__mulsi3+0x24>
10002d64:	20c0004c 	andi	r3,r4,1
10002d68:	2008d07a 	srli	r4,r4,1
10002d6c:	18000126 	beq	r3,zero,10002d74 <__mulsi3+0x18>
10002d70:	1145883a 	add	r2,r2,r5
10002d74:	294b883a 	add	r5,r5,r5
10002d78:	203ffa1e 	bne	r4,zero,10002d64 <__alt_data_end+0xf8002d64>
10002d7c:	f800283a 	ret
10002d80:	f800283a 	ret

10002d84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002d84:	defffe04 	addi	sp,sp,-8
10002d88:	dfc00115 	stw	ra,4(sp)
10002d8c:	df000015 	stw	fp,0(sp)
10002d90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10002d94:	00840034 	movhi	r2,4096
10002d98:	109bab04 	addi	r2,r2,28332
10002d9c:	10800017 	ldw	r2,0(r2)
10002da0:	10000526 	beq	r2,zero,10002db8 <alt_get_errno+0x34>
10002da4:	00840034 	movhi	r2,4096
10002da8:	109bab04 	addi	r2,r2,28332
10002dac:	10800017 	ldw	r2,0(r2)
10002db0:	103ee83a 	callr	r2
10002db4:	00000206 	br	10002dc0 <alt_get_errno+0x3c>
10002db8:	00840074 	movhi	r2,4097
10002dbc:	10a24e04 	addi	r2,r2,-30408
}
10002dc0:	e037883a 	mov	sp,fp
10002dc4:	dfc00117 	ldw	ra,4(sp)
10002dc8:	df000017 	ldw	fp,0(sp)
10002dcc:	dec00204 	addi	sp,sp,8
10002dd0:	f800283a 	ret

10002dd4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10002dd4:	defffb04 	addi	sp,sp,-20
10002dd8:	dfc00415 	stw	ra,16(sp)
10002ddc:	df000315 	stw	fp,12(sp)
10002de0:	df000304 	addi	fp,sp,12
10002de4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10002de8:	e0bfff17 	ldw	r2,-4(fp)
10002dec:	10000816 	blt	r2,zero,10002e10 <close+0x3c>
10002df0:	e13fff17 	ldw	r4,-4(fp)
10002df4:	01400304 	movi	r5,12
10002df8:	0002d5c0 	call	10002d5c <__mulsi3>
10002dfc:	1007883a 	mov	r3,r2
10002e00:	00840034 	movhi	r2,4096
10002e04:	10972a04 	addi	r2,r2,23720
10002e08:	1885883a 	add	r2,r3,r2
10002e0c:	00000106 	br	10002e14 <close+0x40>
10002e10:	0005883a 	mov	r2,zero
10002e14:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10002e18:	e0bffd17 	ldw	r2,-12(fp)
10002e1c:	10001826 	beq	r2,zero,10002e80 <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10002e20:	e0bffd17 	ldw	r2,-12(fp)
10002e24:	10800017 	ldw	r2,0(r2)
10002e28:	10800417 	ldw	r2,16(r2)
10002e2c:	10000626 	beq	r2,zero,10002e48 <close+0x74>
10002e30:	e0bffd17 	ldw	r2,-12(fp)
10002e34:	10800017 	ldw	r2,0(r2)
10002e38:	10800417 	ldw	r2,16(r2)
10002e3c:	e13ffd17 	ldw	r4,-12(fp)
10002e40:	103ee83a 	callr	r2
10002e44:	00000106 	br	10002e4c <close+0x78>
10002e48:	0005883a 	mov	r2,zero
10002e4c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10002e50:	e13fff17 	ldw	r4,-4(fp)
10002e54:	00034d80 	call	100034d8 <alt_release_fd>
    if (rval < 0)
10002e58:	e0bffe17 	ldw	r2,-8(fp)
10002e5c:	1000060e 	bge	r2,zero,10002e78 <close+0xa4>
    {
      ALT_ERRNO = -rval;
10002e60:	0002d840 	call	10002d84 <alt_get_errno>
10002e64:	e0fffe17 	ldw	r3,-8(fp)
10002e68:	00c7c83a 	sub	r3,zero,r3
10002e6c:	10c00015 	stw	r3,0(r2)
      return -1;
10002e70:	00bfffc4 	movi	r2,-1
10002e74:	00000606 	br	10002e90 <close+0xbc>
    }
    return 0;
10002e78:	0005883a 	mov	r2,zero
10002e7c:	00000406 	br	10002e90 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10002e80:	0002d840 	call	10002d84 <alt_get_errno>
10002e84:	00c01444 	movi	r3,81
10002e88:	10c00015 	stw	r3,0(r2)
    return -1;
10002e8c:	00bfffc4 	movi	r2,-1
  }
}
10002e90:	e037883a 	mov	sp,fp
10002e94:	dfc00117 	ldw	ra,4(sp)
10002e98:	df000017 	ldw	fp,0(sp)
10002e9c:	dec00204 	addi	sp,sp,8
10002ea0:	f800283a 	ret

10002ea4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10002ea4:	defffc04 	addi	sp,sp,-16
10002ea8:	df000315 	stw	fp,12(sp)
10002eac:	df000304 	addi	fp,sp,12
10002eb0:	e13ffd15 	stw	r4,-12(fp)
10002eb4:	e17ffe15 	stw	r5,-8(fp)
10002eb8:	e1bfff15 	stw	r6,-4(fp)
  return len;
10002ebc:	e0bfff17 	ldw	r2,-4(fp)
}
10002ec0:	e037883a 	mov	sp,fp
10002ec4:	df000017 	ldw	fp,0(sp)
10002ec8:	dec00104 	addi	sp,sp,4
10002ecc:	f800283a 	ret

10002ed0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002ed0:	defffe04 	addi	sp,sp,-8
10002ed4:	dfc00115 	stw	ra,4(sp)
10002ed8:	df000015 	stw	fp,0(sp)
10002edc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10002ee0:	00840034 	movhi	r2,4096
10002ee4:	109bab04 	addi	r2,r2,28332
10002ee8:	10800017 	ldw	r2,0(r2)
10002eec:	10000526 	beq	r2,zero,10002f04 <alt_get_errno+0x34>
10002ef0:	00840034 	movhi	r2,4096
10002ef4:	109bab04 	addi	r2,r2,28332
10002ef8:	10800017 	ldw	r2,0(r2)
10002efc:	103ee83a 	callr	r2
10002f00:	00000206 	br	10002f0c <alt_get_errno+0x3c>
10002f04:	00840074 	movhi	r2,4097
10002f08:	10a24e04 	addi	r2,r2,-30408
}
10002f0c:	e037883a 	mov	sp,fp
10002f10:	dfc00117 	ldw	ra,4(sp)
10002f14:	df000017 	ldw	fp,0(sp)
10002f18:	dec00204 	addi	sp,sp,8
10002f1c:	f800283a 	ret

10002f20 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10002f20:	defffb04 	addi	sp,sp,-20
10002f24:	dfc00415 	stw	ra,16(sp)
10002f28:	df000315 	stw	fp,12(sp)
10002f2c:	df000304 	addi	fp,sp,12
10002f30:	e13ffe15 	stw	r4,-8(fp)
10002f34:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10002f38:	e0bffe17 	ldw	r2,-8(fp)
10002f3c:	10000816 	blt	r2,zero,10002f60 <fstat+0x40>
10002f40:	e13ffe17 	ldw	r4,-8(fp)
10002f44:	01400304 	movi	r5,12
10002f48:	0002d5c0 	call	10002d5c <__mulsi3>
10002f4c:	1007883a 	mov	r3,r2
10002f50:	00840034 	movhi	r2,4096
10002f54:	10972a04 	addi	r2,r2,23720
10002f58:	1885883a 	add	r2,r3,r2
10002f5c:	00000106 	br	10002f64 <fstat+0x44>
10002f60:	0005883a 	mov	r2,zero
10002f64:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10002f68:	e0bffd17 	ldw	r2,-12(fp)
10002f6c:	10001026 	beq	r2,zero,10002fb0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10002f70:	e0bffd17 	ldw	r2,-12(fp)
10002f74:	10800017 	ldw	r2,0(r2)
10002f78:	10800817 	ldw	r2,32(r2)
10002f7c:	10000726 	beq	r2,zero,10002f9c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10002f80:	e0bffd17 	ldw	r2,-12(fp)
10002f84:	10800017 	ldw	r2,0(r2)
10002f88:	10800817 	ldw	r2,32(r2)
10002f8c:	e13ffd17 	ldw	r4,-12(fp)
10002f90:	e17fff17 	ldw	r5,-4(fp)
10002f94:	103ee83a 	callr	r2
10002f98:	00000906 	br	10002fc0 <fstat+0xa0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10002f9c:	e0bfff17 	ldw	r2,-4(fp)
10002fa0:	00c80004 	movi	r3,8192
10002fa4:	10c00115 	stw	r3,4(r2)
      return 0;
10002fa8:	0005883a 	mov	r2,zero
10002fac:	00000406 	br	10002fc0 <fstat+0xa0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10002fb0:	0002ed00 	call	10002ed0 <alt_get_errno>
10002fb4:	00c01444 	movi	r3,81
10002fb8:	10c00015 	stw	r3,0(r2)
    return -1;
10002fbc:	00bfffc4 	movi	r2,-1
  }
}
10002fc0:	e037883a 	mov	sp,fp
10002fc4:	dfc00117 	ldw	ra,4(sp)
10002fc8:	df000017 	ldw	fp,0(sp)
10002fcc:	dec00204 	addi	sp,sp,8
10002fd0:	f800283a 	ret

10002fd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002fd4:	defffe04 	addi	sp,sp,-8
10002fd8:	dfc00115 	stw	ra,4(sp)
10002fdc:	df000015 	stw	fp,0(sp)
10002fe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10002fe4:	00840034 	movhi	r2,4096
10002fe8:	109bab04 	addi	r2,r2,28332
10002fec:	10800017 	ldw	r2,0(r2)
10002ff0:	10000526 	beq	r2,zero,10003008 <alt_get_errno+0x34>
10002ff4:	00840034 	movhi	r2,4096
10002ff8:	109bab04 	addi	r2,r2,28332
10002ffc:	10800017 	ldw	r2,0(r2)
10003000:	103ee83a 	callr	r2
10003004:	00000206 	br	10003010 <alt_get_errno+0x3c>
10003008:	00840074 	movhi	r2,4097
1000300c:	10a24e04 	addi	r2,r2,-30408
}
10003010:	e037883a 	mov	sp,fp
10003014:	dfc00117 	ldw	ra,4(sp)
10003018:	df000017 	ldw	fp,0(sp)
1000301c:	dec00204 	addi	sp,sp,8
10003020:	f800283a 	ret

10003024 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10003024:	deffed04 	addi	sp,sp,-76
10003028:	dfc01215 	stw	ra,72(sp)
1000302c:	df001115 	stw	fp,68(sp)
10003030:	df001104 	addi	fp,sp,68
10003034:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003038:	e0bfff17 	ldw	r2,-4(fp)
1000303c:	10000816 	blt	r2,zero,10003060 <isatty+0x3c>
10003040:	e13fff17 	ldw	r4,-4(fp)
10003044:	01400304 	movi	r5,12
10003048:	0002d5c0 	call	10002d5c <__mulsi3>
1000304c:	1007883a 	mov	r3,r2
10003050:	00840034 	movhi	r2,4096
10003054:	10972a04 	addi	r2,r2,23720
10003058:	1885883a 	add	r2,r3,r2
1000305c:	00000106 	br	10003064 <isatty+0x40>
10003060:	0005883a 	mov	r2,zero
10003064:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10003068:	e0bfef17 	ldw	r2,-68(fp)
1000306c:	10000e26 	beq	r2,zero,100030a8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10003070:	e0bfef17 	ldw	r2,-68(fp)
10003074:	10800017 	ldw	r2,0(r2)
10003078:	10800817 	ldw	r2,32(r2)
1000307c:	1000021e 	bne	r2,zero,10003088 <isatty+0x64>
    {
      return 1;
10003080:	00800044 	movi	r2,1
10003084:	00000c06 	br	100030b8 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10003088:	e0bff004 	addi	r2,fp,-64
1000308c:	e13fff17 	ldw	r4,-4(fp)
10003090:	100b883a 	mov	r5,r2
10003094:	0002f200 	call	10002f20 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10003098:	e0bff117 	ldw	r2,-60(fp)
1000309c:	10880020 	cmpeqi	r2,r2,8192
100030a0:	10803fcc 	andi	r2,r2,255
100030a4:	00000406 	br	100030b8 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100030a8:	0002fd40 	call	10002fd4 <alt_get_errno>
100030ac:	00c01444 	movi	r3,81
100030b0:	10c00015 	stw	r3,0(r2)
    return 0;
100030b4:	0005883a 	mov	r2,zero
  }
}
100030b8:	e037883a 	mov	sp,fp
100030bc:	dfc00117 	ldw	ra,4(sp)
100030c0:	df000017 	ldw	fp,0(sp)
100030c4:	dec00204 	addi	sp,sp,8
100030c8:	f800283a 	ret

100030cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100030cc:	defffc04 	addi	sp,sp,-16
100030d0:	df000315 	stw	fp,12(sp)
100030d4:	df000304 	addi	fp,sp,12
100030d8:	e13ffd15 	stw	r4,-12(fp)
100030dc:	e17ffe15 	stw	r5,-8(fp)
100030e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
100030e4:	e0fffe17 	ldw	r3,-8(fp)
100030e8:	e0bffd17 	ldw	r2,-12(fp)
100030ec:	18800c26 	beq	r3,r2,10003120 <alt_load_section+0x54>
  {
    while( to != end )
100030f0:	00000806 	br	10003114 <alt_load_section+0x48>
    {
      *to++ = *from++;
100030f4:	e0bffe17 	ldw	r2,-8(fp)
100030f8:	10c00104 	addi	r3,r2,4
100030fc:	e0fffe15 	stw	r3,-8(fp)
10003100:	e0fffd17 	ldw	r3,-12(fp)
10003104:	19000104 	addi	r4,r3,4
10003108:	e13ffd15 	stw	r4,-12(fp)
1000310c:	18c00017 	ldw	r3,0(r3)
10003110:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10003114:	e0fffe17 	ldw	r3,-8(fp)
10003118:	e0bfff17 	ldw	r2,-4(fp)
1000311c:	18bff51e 	bne	r3,r2,100030f4 <__alt_data_end+0xf80030f4>
    {
      *to++ = *from++;
    }
  }
}
10003120:	e037883a 	mov	sp,fp
10003124:	df000017 	ldw	fp,0(sp)
10003128:	dec00104 	addi	sp,sp,4
1000312c:	f800283a 	ret

10003130 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10003130:	defffe04 	addi	sp,sp,-8
10003134:	dfc00115 	stw	ra,4(sp)
10003138:	df000015 	stw	fp,0(sp)
1000313c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10003140:	01040034 	movhi	r4,4096
10003144:	211bb004 	addi	r4,r4,28352
10003148:	01440034 	movhi	r5,4096
1000314c:	29551504 	addi	r5,r5,21588
10003150:	01840034 	movhi	r6,4096
10003154:	319bb004 	addi	r6,r6,28352
10003158:	00030cc0 	call	100030cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000315c:	01040034 	movhi	r4,4096
10003160:	21000804 	addi	r4,r4,32
10003164:	01440034 	movhi	r5,4096
10003168:	29400804 	addi	r5,r5,32
1000316c:	01840034 	movhi	r6,4096
10003170:	31806f04 	addi	r6,r6,444
10003174:	00030cc0 	call	100030cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10003178:	01040034 	movhi	r4,4096
1000317c:	21150204 	addi	r4,r4,21512
10003180:	01440034 	movhi	r5,4096
10003184:	29550204 	addi	r5,r5,21512
10003188:	01840034 	movhi	r6,4096
1000318c:	31951504 	addi	r6,r6,21588
10003190:	00030cc0 	call	100030cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10003194:	00043780 	call	10004378 <alt_dcache_flush_all>
  alt_icache_flush_all();
10003198:	000453c0 	call	1000453c <alt_icache_flush_all>
}
1000319c:	e037883a 	mov	sp,fp
100031a0:	dfc00117 	ldw	ra,4(sp)
100031a4:	df000017 	ldw	fp,0(sp)
100031a8:	dec00204 	addi	sp,sp,8
100031ac:	f800283a 	ret

100031b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100031b0:	defffe04 	addi	sp,sp,-8
100031b4:	dfc00115 	stw	ra,4(sp)
100031b8:	df000015 	stw	fp,0(sp)
100031bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100031c0:	00840034 	movhi	r2,4096
100031c4:	109bab04 	addi	r2,r2,28332
100031c8:	10800017 	ldw	r2,0(r2)
100031cc:	10000526 	beq	r2,zero,100031e4 <alt_get_errno+0x34>
100031d0:	00840034 	movhi	r2,4096
100031d4:	109bab04 	addi	r2,r2,28332
100031d8:	10800017 	ldw	r2,0(r2)
100031dc:	103ee83a 	callr	r2
100031e0:	00000206 	br	100031ec <alt_get_errno+0x3c>
100031e4:	00840074 	movhi	r2,4097
100031e8:	10a24e04 	addi	r2,r2,-30408
}
100031ec:	e037883a 	mov	sp,fp
100031f0:	dfc00117 	ldw	ra,4(sp)
100031f4:	df000017 	ldw	fp,0(sp)
100031f8:	dec00204 	addi	sp,sp,8
100031fc:	f800283a 	ret

10003200 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10003200:	defff904 	addi	sp,sp,-28
10003204:	dfc00615 	stw	ra,24(sp)
10003208:	df000515 	stw	fp,20(sp)
1000320c:	df000504 	addi	fp,sp,20
10003210:	e13ffd15 	stw	r4,-12(fp)
10003214:	e17ffe15 	stw	r5,-8(fp)
10003218:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000321c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003220:	e0bffd17 	ldw	r2,-12(fp)
10003224:	10000816 	blt	r2,zero,10003248 <lseek+0x48>
10003228:	e13ffd17 	ldw	r4,-12(fp)
1000322c:	01400304 	movi	r5,12
10003230:	0002d5c0 	call	10002d5c <__mulsi3>
10003234:	1007883a 	mov	r3,r2
10003238:	00840034 	movhi	r2,4096
1000323c:	10972a04 	addi	r2,r2,23720
10003240:	1885883a 	add	r2,r3,r2
10003244:	00000106 	br	1000324c <lseek+0x4c>
10003248:	0005883a 	mov	r2,zero
1000324c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10003250:	e0bffc17 	ldw	r2,-16(fp)
10003254:	10001026 	beq	r2,zero,10003298 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10003258:	e0bffc17 	ldw	r2,-16(fp)
1000325c:	10800017 	ldw	r2,0(r2)
10003260:	10800717 	ldw	r2,28(r2)
10003264:	10000926 	beq	r2,zero,1000328c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10003268:	e0bffc17 	ldw	r2,-16(fp)
1000326c:	10800017 	ldw	r2,0(r2)
10003270:	10800717 	ldw	r2,28(r2)
10003274:	e13ffc17 	ldw	r4,-16(fp)
10003278:	e17ffe17 	ldw	r5,-8(fp)
1000327c:	e1bfff17 	ldw	r6,-4(fp)
10003280:	103ee83a 	callr	r2
10003284:	e0bffb15 	stw	r2,-20(fp)
10003288:	00000506 	br	100032a0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000328c:	00bfde84 	movi	r2,-134
10003290:	e0bffb15 	stw	r2,-20(fp)
10003294:	00000206 	br	100032a0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10003298:	00bfebc4 	movi	r2,-81
1000329c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100032a0:	e0bffb17 	ldw	r2,-20(fp)
100032a4:	1000060e 	bge	r2,zero,100032c0 <lseek+0xc0>
  {
    ALT_ERRNO = -rc;
100032a8:	00031b00 	call	100031b0 <alt_get_errno>
100032ac:	e0fffb17 	ldw	r3,-20(fp)
100032b0:	00c7c83a 	sub	r3,zero,r3
100032b4:	10c00015 	stw	r3,0(r2)
    rc = -1;
100032b8:	00bfffc4 	movi	r2,-1
100032bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100032c0:	e0bffb17 	ldw	r2,-20(fp)
}
100032c4:	e037883a 	mov	sp,fp
100032c8:	dfc00117 	ldw	ra,4(sp)
100032cc:	df000017 	ldw	fp,0(sp)
100032d0:	dec00204 	addi	sp,sp,8
100032d4:	f800283a 	ret

100032d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100032d8:	defffd04 	addi	sp,sp,-12
100032dc:	dfc00215 	stw	ra,8(sp)
100032e0:	df000115 	stw	fp,4(sp)
100032e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100032e8:	0009883a 	mov	r4,zero
100032ec:	00037840 	call	10003784 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
100032f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
100032f4:	00037b80 	call	100037b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
100032f8:	01040034 	movhi	r4,4096
100032fc:	21150b04 	addi	r4,r4,21548
10003300:	01440034 	movhi	r5,4096
10003304:	29550b04 	addi	r5,r5,21548
10003308:	01840034 	movhi	r6,4096
1000330c:	31950b04 	addi	r6,r6,21548
10003310:	00049000 	call	10004900 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10003314:	00044840 	call	10004484 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10003318:	01040034 	movhi	r4,4096
1000331c:	21113804 	addi	r4,r4,17632
10003320:	000504c0 	call	1000504c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10003324:	d126ad17 	ldw	r4,-25932(gp)
10003328:	d0e6ae17 	ldw	r3,-25928(gp)
1000332c:	d0a6af17 	ldw	r2,-25924(gp)
10003330:	180b883a 	mov	r5,r3
10003334:	100d883a 	mov	r6,r2
10003338:	00001f80 	call	100001f8 <main>
1000333c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10003340:	01000044 	movi	r4,1
10003344:	0002dd40 	call	10002dd4 <close>
  exit (result);
10003348:	e13fff17 	ldw	r4,-4(fp)
1000334c:	00050600 	call	10005060 <exit>

10003350 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10003350:	defffe04 	addi	sp,sp,-8
10003354:	df000115 	stw	fp,4(sp)
10003358:	df000104 	addi	fp,sp,4
1000335c:	e13fff15 	stw	r4,-4(fp)
}
10003360:	e037883a 	mov	sp,fp
10003364:	df000017 	ldw	fp,0(sp)
10003368:	dec00104 	addi	sp,sp,4
1000336c:	f800283a 	ret

10003370 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10003370:	defffe04 	addi	sp,sp,-8
10003374:	df000115 	stw	fp,4(sp)
10003378:	df000104 	addi	fp,sp,4
1000337c:	e13fff15 	stw	r4,-4(fp)
}
10003380:	e037883a 	mov	sp,fp
10003384:	df000017 	ldw	fp,0(sp)
10003388:	dec00104 	addi	sp,sp,4
1000338c:	f800283a 	ret

10003390 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003390:	defffe04 	addi	sp,sp,-8
10003394:	dfc00115 	stw	ra,4(sp)
10003398:	df000015 	stw	fp,0(sp)
1000339c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100033a0:	00840034 	movhi	r2,4096
100033a4:	109bab04 	addi	r2,r2,28332
100033a8:	10800017 	ldw	r2,0(r2)
100033ac:	10000526 	beq	r2,zero,100033c4 <alt_get_errno+0x34>
100033b0:	00840034 	movhi	r2,4096
100033b4:	109bab04 	addi	r2,r2,28332
100033b8:	10800017 	ldw	r2,0(r2)
100033bc:	103ee83a 	callr	r2
100033c0:	00000206 	br	100033cc <alt_get_errno+0x3c>
100033c4:	00840074 	movhi	r2,4097
100033c8:	10a24e04 	addi	r2,r2,-30408
}
100033cc:	e037883a 	mov	sp,fp
100033d0:	dfc00117 	ldw	ra,4(sp)
100033d4:	df000017 	ldw	fp,0(sp)
100033d8:	dec00204 	addi	sp,sp,8
100033dc:	f800283a 	ret

100033e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
100033e0:	defff904 	addi	sp,sp,-28
100033e4:	dfc00615 	stw	ra,24(sp)
100033e8:	df000515 	stw	fp,20(sp)
100033ec:	df000504 	addi	fp,sp,20
100033f0:	e13ffd15 	stw	r4,-12(fp)
100033f4:	e17ffe15 	stw	r5,-8(fp)
100033f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100033fc:	e0bffd17 	ldw	r2,-12(fp)
10003400:	10000816 	blt	r2,zero,10003424 <read+0x44>
10003404:	e13ffd17 	ldw	r4,-12(fp)
10003408:	01400304 	movi	r5,12
1000340c:	0002d5c0 	call	10002d5c <__mulsi3>
10003410:	1007883a 	mov	r3,r2
10003414:	00840034 	movhi	r2,4096
10003418:	10972a04 	addi	r2,r2,23720
1000341c:	1885883a 	add	r2,r3,r2
10003420:	00000106 	br	10003428 <read+0x48>
10003424:	0005883a 	mov	r2,zero
10003428:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000342c:	e0bffb17 	ldw	r2,-20(fp)
10003430:	10002026 	beq	r2,zero,100034b4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10003434:	e0bffb17 	ldw	r2,-20(fp)
10003438:	10800217 	ldw	r2,8(r2)
1000343c:	108000cc 	andi	r2,r2,3
10003440:	10800060 	cmpeqi	r2,r2,1
10003444:	1000171e 	bne	r2,zero,100034a4 <read+0xc4>
        (fd->dev->read))
10003448:	e0bffb17 	ldw	r2,-20(fp)
1000344c:	10800017 	ldw	r2,0(r2)
10003450:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10003454:	10001326 	beq	r2,zero,100034a4 <read+0xc4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10003458:	e0bffb17 	ldw	r2,-20(fp)
1000345c:	10800017 	ldw	r2,0(r2)
10003460:	10800517 	ldw	r2,20(r2)
10003464:	e0ffff17 	ldw	r3,-4(fp)
10003468:	e13ffb17 	ldw	r4,-20(fp)
1000346c:	e17ffe17 	ldw	r5,-8(fp)
10003470:	180d883a 	mov	r6,r3
10003474:	103ee83a 	callr	r2
10003478:	e0bffc15 	stw	r2,-16(fp)
1000347c:	e0bffc17 	ldw	r2,-16(fp)
10003480:	1000060e 	bge	r2,zero,1000349c <read+0xbc>
        {
          ALT_ERRNO = -rval;
10003484:	00033900 	call	10003390 <alt_get_errno>
10003488:	e0fffc17 	ldw	r3,-16(fp)
1000348c:	00c7c83a 	sub	r3,zero,r3
10003490:	10c00015 	stw	r3,0(r2)
          return -1;
10003494:	00bfffc4 	movi	r2,-1
10003498:	00000a06 	br	100034c4 <read+0xe4>
        }
        return rval;
1000349c:	e0bffc17 	ldw	r2,-16(fp)
100034a0:	00000806 	br	100034c4 <read+0xe4>
      }
      else
      {
        ALT_ERRNO = EACCES;
100034a4:	00033900 	call	10003390 <alt_get_errno>
100034a8:	00c00344 	movi	r3,13
100034ac:	10c00015 	stw	r3,0(r2)
100034b0:	00000306 	br	100034c0 <read+0xe0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
100034b4:	00033900 	call	10003390 <alt_get_errno>
100034b8:	00c01444 	movi	r3,81
100034bc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
100034c0:	00bfffc4 	movi	r2,-1
}
100034c4:	e037883a 	mov	sp,fp
100034c8:	dfc00117 	ldw	ra,4(sp)
100034cc:	df000017 	ldw	fp,0(sp)
100034d0:	dec00204 	addi	sp,sp,8
100034d4:	f800283a 	ret

100034d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
100034d8:	defffc04 	addi	sp,sp,-16
100034dc:	dfc00315 	stw	ra,12(sp)
100034e0:	df000215 	stw	fp,8(sp)
100034e4:	dc000115 	stw	r16,4(sp)
100034e8:	df000204 	addi	fp,sp,8
100034ec:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
100034f0:	e0bffe17 	ldw	r2,-8(fp)
100034f4:	108000d0 	cmplti	r2,r2,3
100034f8:	1000111e 	bne	r2,zero,10003540 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
100034fc:	04040034 	movhi	r16,4096
10003500:	84172a04 	addi	r16,r16,23720
10003504:	e0bffe17 	ldw	r2,-8(fp)
10003508:	1009883a 	mov	r4,r2
1000350c:	01400304 	movi	r5,12
10003510:	0002d5c0 	call	10002d5c <__mulsi3>
10003514:	8085883a 	add	r2,r16,r2
10003518:	10800204 	addi	r2,r2,8
1000351c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10003520:	04040034 	movhi	r16,4096
10003524:	84172a04 	addi	r16,r16,23720
10003528:	e0bffe17 	ldw	r2,-8(fp)
1000352c:	1009883a 	mov	r4,r2
10003530:	01400304 	movi	r5,12
10003534:	0002d5c0 	call	10002d5c <__mulsi3>
10003538:	8085883a 	add	r2,r16,r2
1000353c:	10000015 	stw	zero,0(r2)
  }
}
10003540:	e6ffff04 	addi	sp,fp,-4
10003544:	dfc00217 	ldw	ra,8(sp)
10003548:	df000117 	ldw	fp,4(sp)
1000354c:	dc000017 	ldw	r16,0(sp)
10003550:	dec00304 	addi	sp,sp,12
10003554:	f800283a 	ret

10003558 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10003558:	defff904 	addi	sp,sp,-28
1000355c:	df000615 	stw	fp,24(sp)
10003560:	df000604 	addi	fp,sp,24
10003564:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003568:	0005303a 	rdctl	r2,status
1000356c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003570:	e0fffc17 	ldw	r3,-16(fp)
10003574:	00bfff84 	movi	r2,-2
10003578:	1884703a 	and	r2,r3,r2
1000357c:	1001703a 	wrctl	status,r2
  
  return context;
10003580:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10003584:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10003588:	d0a00a17 	ldw	r2,-32728(gp)
1000358c:	10c000c4 	addi	r3,r2,3
10003590:	00bfff04 	movi	r2,-4
10003594:	1884703a 	and	r2,r3,r2
10003598:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000359c:	d0e00a17 	ldw	r3,-32728(gp)
100035a0:	e0bfff17 	ldw	r2,-4(fp)
100035a4:	1885883a 	add	r2,r3,r2
100035a8:	00c60034 	movhi	r3,6144
100035ac:	18c00004 	addi	r3,r3,0
100035b0:	1880062e 	bgeu	r3,r2,100035cc <sbrk+0x74>
100035b4:	e0bffa17 	ldw	r2,-24(fp)
100035b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100035bc:	e0bffd17 	ldw	r2,-12(fp)
100035c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
100035c4:	00bfffc4 	movi	r2,-1
100035c8:	00000b06 	br	100035f8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
100035cc:	d0a00a17 	ldw	r2,-32728(gp)
100035d0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
100035d4:	d0e00a17 	ldw	r3,-32728(gp)
100035d8:	e0bfff17 	ldw	r2,-4(fp)
100035dc:	1885883a 	add	r2,r3,r2
100035e0:	d0a00a15 	stw	r2,-32728(gp)
100035e4:	e0bffa17 	ldw	r2,-24(fp)
100035e8:	e0bffe15 	stw	r2,-8(fp)
100035ec:	e0bffe17 	ldw	r2,-8(fp)
100035f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
100035f4:	e0bffb17 	ldw	r2,-20(fp)
} 
100035f8:	e037883a 	mov	sp,fp
100035fc:	df000017 	ldw	fp,0(sp)
10003600:	dec00104 	addi	sp,sp,4
10003604:	f800283a 	ret

10003608 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003608:	defffe04 	addi	sp,sp,-8
1000360c:	dfc00115 	stw	ra,4(sp)
10003610:	df000015 	stw	fp,0(sp)
10003614:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003618:	00840034 	movhi	r2,4096
1000361c:	109bab04 	addi	r2,r2,28332
10003620:	10800017 	ldw	r2,0(r2)
10003624:	10000526 	beq	r2,zero,1000363c <alt_get_errno+0x34>
10003628:	00840034 	movhi	r2,4096
1000362c:	109bab04 	addi	r2,r2,28332
10003630:	10800017 	ldw	r2,0(r2)
10003634:	103ee83a 	callr	r2
10003638:	00000206 	br	10003644 <alt_get_errno+0x3c>
1000363c:	00840074 	movhi	r2,4097
10003640:	10a24e04 	addi	r2,r2,-30408
}
10003644:	e037883a 	mov	sp,fp
10003648:	dfc00117 	ldw	ra,4(sp)
1000364c:	df000017 	ldw	fp,0(sp)
10003650:	dec00204 	addi	sp,sp,8
10003654:	f800283a 	ret

10003658 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10003658:	defff904 	addi	sp,sp,-28
1000365c:	dfc00615 	stw	ra,24(sp)
10003660:	df000515 	stw	fp,20(sp)
10003664:	df000504 	addi	fp,sp,20
10003668:	e13ffd15 	stw	r4,-12(fp)
1000366c:	e17ffe15 	stw	r5,-8(fp)
10003670:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003674:	e0bffd17 	ldw	r2,-12(fp)
10003678:	10000816 	blt	r2,zero,1000369c <write+0x44>
1000367c:	e13ffd17 	ldw	r4,-12(fp)
10003680:	01400304 	movi	r5,12
10003684:	0002d5c0 	call	10002d5c <__mulsi3>
10003688:	1007883a 	mov	r3,r2
1000368c:	00840034 	movhi	r2,4096
10003690:	10972a04 	addi	r2,r2,23720
10003694:	1885883a 	add	r2,r3,r2
10003698:	00000106 	br	100036a0 <write+0x48>
1000369c:	0005883a 	mov	r2,zero
100036a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100036a4:	e0bffb17 	ldw	r2,-20(fp)
100036a8:	10001f26 	beq	r2,zero,10003728 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
100036ac:	e0bffb17 	ldw	r2,-20(fp)
100036b0:	10800217 	ldw	r2,8(r2)
100036b4:	108000cc 	andi	r2,r2,3
100036b8:	10001726 	beq	r2,zero,10003718 <write+0xc0>
100036bc:	e0bffb17 	ldw	r2,-20(fp)
100036c0:	10800017 	ldw	r2,0(r2)
100036c4:	10800617 	ldw	r2,24(r2)
100036c8:	10001326 	beq	r2,zero,10003718 <write+0xc0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
100036cc:	e0bffb17 	ldw	r2,-20(fp)
100036d0:	10800017 	ldw	r2,0(r2)
100036d4:	10800617 	ldw	r2,24(r2)
100036d8:	e0ffff17 	ldw	r3,-4(fp)
100036dc:	e13ffb17 	ldw	r4,-20(fp)
100036e0:	e17ffe17 	ldw	r5,-8(fp)
100036e4:	180d883a 	mov	r6,r3
100036e8:	103ee83a 	callr	r2
100036ec:	e0bffc15 	stw	r2,-16(fp)
100036f0:	e0bffc17 	ldw	r2,-16(fp)
100036f4:	1000060e 	bge	r2,zero,10003710 <write+0xb8>
      {
        ALT_ERRNO = -rval;
100036f8:	00036080 	call	10003608 <alt_get_errno>
100036fc:	e0fffc17 	ldw	r3,-16(fp)
10003700:	00c7c83a 	sub	r3,zero,r3
10003704:	10c00015 	stw	r3,0(r2)
        return -1;
10003708:	00bfffc4 	movi	r2,-1
1000370c:	00000a06 	br	10003738 <write+0xe0>
      }
      return rval;
10003710:	e0bffc17 	ldw	r2,-16(fp)
10003714:	00000806 	br	10003738 <write+0xe0>
    }
    else
    {
      ALT_ERRNO = EACCES;
10003718:	00036080 	call	10003608 <alt_get_errno>
1000371c:	00c00344 	movi	r3,13
10003720:	10c00015 	stw	r3,0(r2)
10003724:	00000306 	br	10003734 <write+0xdc>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10003728:	00036080 	call	10003608 <alt_get_errno>
1000372c:	00c01444 	movi	r3,81
10003730:	10c00015 	stw	r3,0(r2)
  }
  return -1;
10003734:	00bfffc4 	movi	r2,-1
}
10003738:	e037883a 	mov	sp,fp
1000373c:	dfc00117 	ldw	ra,4(sp)
10003740:	df000017 	ldw	fp,0(sp)
10003744:	dec00204 	addi	sp,sp,8
10003748:	f800283a 	ret

1000374c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000374c:	defffd04 	addi	sp,sp,-12
10003750:	dfc00215 	stw	ra,8(sp)
10003754:	df000115 	stw	fp,4(sp)
10003758:	df000104 	addi	fp,sp,4
1000375c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10003760:	e13fff17 	ldw	r4,-4(fp)
10003764:	01440034 	movhi	r5,4096
10003768:	295ba804 	addi	r5,r5,28320
1000376c:	00043e40 	call	100043e4 <alt_dev_llist_insert>
}
10003770:	e037883a 	mov	sp,fp
10003774:	dfc00117 	ldw	ra,4(sp)
10003778:	df000017 	ldw	fp,0(sp)
1000377c:	dec00204 	addi	sp,sp,8
10003780:	f800283a 	ret

10003784 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10003784:	defffd04 	addi	sp,sp,-12
10003788:	dfc00215 	stw	ra,8(sp)
1000378c:	df000115 	stw	fp,4(sp)
10003790:	df000104 	addi	fp,sp,4
10003794:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10003798:	0004db40 	call	10004db4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000379c:	00800044 	movi	r2,1
100037a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100037a4:	e037883a 	mov	sp,fp
100037a8:	dfc00117 	ldw	ra,4(sp)
100037ac:	df000017 	ldw	fp,0(sp)
100037b0:	dec00204 	addi	sp,sp,8
100037b4:	f800283a 	ret

100037b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100037b8:	defffe04 	addi	sp,sp,-8
100037bc:	dfc00115 	stw	ra,4(sp)
100037c0:	df000015 	stw	fp,0(sp)
100037c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100037c8:	01040034 	movhi	r4,4096
100037cc:	21179404 	addi	r4,r4,24144
100037d0:	000b883a 	mov	r5,zero
100037d4:	01800144 	movi	r6,5
100037d8:	00039640 	call	10003964 <altera_avalon_jtag_uart_init>
100037dc:	01040034 	movhi	r4,4096
100037e0:	21178a04 	addi	r4,r4,24104
100037e4:	000374c0 	call	1000374c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100037e8:	0001883a 	nop
}
100037ec:	e037883a 	mov	sp,fp
100037f0:	dfc00117 	ldw	ra,4(sp)
100037f4:	df000017 	ldw	fp,0(sp)
100037f8:	dec00204 	addi	sp,sp,8
100037fc:	f800283a 	ret

10003800 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10003800:	defffa04 	addi	sp,sp,-24
10003804:	dfc00515 	stw	ra,20(sp)
10003808:	df000415 	stw	fp,16(sp)
1000380c:	df000404 	addi	fp,sp,16
10003810:	e13ffd15 	stw	r4,-12(fp)
10003814:	e17ffe15 	stw	r5,-8(fp)
10003818:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000381c:	e0bffd17 	ldw	r2,-12(fp)
10003820:	10800017 	ldw	r2,0(r2)
10003824:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10003828:	e0bffc17 	ldw	r2,-16(fp)
1000382c:	10c00a04 	addi	r3,r2,40
10003830:	e0bffd17 	ldw	r2,-12(fp)
10003834:	10800217 	ldw	r2,8(r2)
10003838:	1809883a 	mov	r4,r3
1000383c:	e17ffe17 	ldw	r5,-8(fp)
10003840:	e1bfff17 	ldw	r6,-4(fp)
10003844:	100f883a 	mov	r7,r2
10003848:	0003e180 	call	10003e18 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000384c:	e037883a 	mov	sp,fp
10003850:	dfc00117 	ldw	ra,4(sp)
10003854:	df000017 	ldw	fp,0(sp)
10003858:	dec00204 	addi	sp,sp,8
1000385c:	f800283a 	ret

10003860 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10003860:	defffa04 	addi	sp,sp,-24
10003864:	dfc00515 	stw	ra,20(sp)
10003868:	df000415 	stw	fp,16(sp)
1000386c:	df000404 	addi	fp,sp,16
10003870:	e13ffd15 	stw	r4,-12(fp)
10003874:	e17ffe15 	stw	r5,-8(fp)
10003878:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000387c:	e0bffd17 	ldw	r2,-12(fp)
10003880:	10800017 	ldw	r2,0(r2)
10003884:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10003888:	e0bffc17 	ldw	r2,-16(fp)
1000388c:	10c00a04 	addi	r3,r2,40
10003890:	e0bffd17 	ldw	r2,-12(fp)
10003894:	10800217 	ldw	r2,8(r2)
10003898:	1809883a 	mov	r4,r3
1000389c:	e17ffe17 	ldw	r5,-8(fp)
100038a0:	e1bfff17 	ldw	r6,-4(fp)
100038a4:	100f883a 	mov	r7,r2
100038a8:	00040200 	call	10004020 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100038ac:	e037883a 	mov	sp,fp
100038b0:	dfc00117 	ldw	ra,4(sp)
100038b4:	df000017 	ldw	fp,0(sp)
100038b8:	dec00204 	addi	sp,sp,8
100038bc:	f800283a 	ret

100038c0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100038c0:	defffc04 	addi	sp,sp,-16
100038c4:	dfc00315 	stw	ra,12(sp)
100038c8:	df000215 	stw	fp,8(sp)
100038cc:	df000204 	addi	fp,sp,8
100038d0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100038d4:	e0bfff17 	ldw	r2,-4(fp)
100038d8:	10800017 	ldw	r2,0(r2)
100038dc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100038e0:	e0bffe17 	ldw	r2,-8(fp)
100038e4:	10c00a04 	addi	r3,r2,40
100038e8:	e0bfff17 	ldw	r2,-4(fp)
100038ec:	10800217 	ldw	r2,8(r2)
100038f0:	1809883a 	mov	r4,r3
100038f4:	100b883a 	mov	r5,r2
100038f8:	0003cc40 	call	10003cc4 <altera_avalon_jtag_uart_close>
}
100038fc:	e037883a 	mov	sp,fp
10003900:	dfc00117 	ldw	ra,4(sp)
10003904:	df000017 	ldw	fp,0(sp)
10003908:	dec00204 	addi	sp,sp,8
1000390c:	f800283a 	ret

10003910 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10003910:	defffa04 	addi	sp,sp,-24
10003914:	dfc00515 	stw	ra,20(sp)
10003918:	df000415 	stw	fp,16(sp)
1000391c:	df000404 	addi	fp,sp,16
10003920:	e13ffd15 	stw	r4,-12(fp)
10003924:	e17ffe15 	stw	r5,-8(fp)
10003928:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000392c:	e0bffd17 	ldw	r2,-12(fp)
10003930:	10800017 	ldw	r2,0(r2)
10003934:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10003938:	e0bffc17 	ldw	r2,-16(fp)
1000393c:	10800a04 	addi	r2,r2,40
10003940:	1009883a 	mov	r4,r2
10003944:	e17ffe17 	ldw	r5,-8(fp)
10003948:	e1bfff17 	ldw	r6,-4(fp)
1000394c:	0003d2c0 	call	10003d2c <altera_avalon_jtag_uart_ioctl>
}
10003950:	e037883a 	mov	sp,fp
10003954:	dfc00117 	ldw	ra,4(sp)
10003958:	df000017 	ldw	fp,0(sp)
1000395c:	dec00204 	addi	sp,sp,8
10003960:	f800283a 	ret

10003964 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10003964:	defffa04 	addi	sp,sp,-24
10003968:	dfc00515 	stw	ra,20(sp)
1000396c:	df000415 	stw	fp,16(sp)
10003970:	df000404 	addi	fp,sp,16
10003974:	e13ffd15 	stw	r4,-12(fp)
10003978:	e17ffe15 	stw	r5,-8(fp)
1000397c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003980:	e0bffd17 	ldw	r2,-12(fp)
10003984:	00c00044 	movi	r3,1
10003988:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000398c:	e0bffd17 	ldw	r2,-12(fp)
10003990:	10800017 	ldw	r2,0(r2)
10003994:	10800104 	addi	r2,r2,4
10003998:	e0fffd17 	ldw	r3,-12(fp)
1000399c:	18c00817 	ldw	r3,32(r3)
100039a0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100039a4:	e0fffe17 	ldw	r3,-8(fp)
100039a8:	e0bfff17 	ldw	r2,-4(fp)
100039ac:	d8000015 	stw	zero,0(sp)
100039b0:	1809883a 	mov	r4,r3
100039b4:	100b883a 	mov	r5,r2
100039b8:	01840034 	movhi	r6,4096
100039bc:	318e8904 	addi	r6,r6,14884
100039c0:	e1fffd17 	ldw	r7,-12(fp)
100039c4:	00045580 	call	10004558 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100039c8:	e0bffd17 	ldw	r2,-12(fp)
100039cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100039d0:	e0bffd17 	ldw	r2,-12(fp)
100039d4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100039d8:	00840074 	movhi	r2,4097
100039dc:	10a25304 	addi	r2,r2,-30388
100039e0:	10800017 	ldw	r2,0(r2)
100039e4:	1809883a 	mov	r4,r3
100039e8:	100b883a 	mov	r5,r2
100039ec:	01840034 	movhi	r6,4096
100039f0:	318f0804 	addi	r6,r6,15392
100039f4:	e1fffd17 	ldw	r7,-12(fp)
100039f8:	00042380 	call	10004238 <alt_alarm_start>
100039fc:	1000040e 	bge	r2,zero,10003a10 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10003a00:	e0bffd17 	ldw	r2,-12(fp)
10003a04:	00e00034 	movhi	r3,32768
10003a08:	18ffffc4 	addi	r3,r3,-1
10003a0c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10003a10:	e037883a 	mov	sp,fp
10003a14:	dfc00117 	ldw	ra,4(sp)
10003a18:	df000017 	ldw	fp,0(sp)
10003a1c:	dec00204 	addi	sp,sp,8
10003a20:	f800283a 	ret

10003a24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10003a24:	defff804 	addi	sp,sp,-32
10003a28:	df000715 	stw	fp,28(sp)
10003a2c:	df000704 	addi	fp,sp,28
10003a30:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10003a34:	e0bfff17 	ldw	r2,-4(fp)
10003a38:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10003a3c:	e0bffb17 	ldw	r2,-20(fp)
10003a40:	10800017 	ldw	r2,0(r2)
10003a44:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003a48:	e0bffc17 	ldw	r2,-16(fp)
10003a4c:	10800104 	addi	r2,r2,4
10003a50:	10800037 	ldwio	r2,0(r2)
10003a54:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10003a58:	e0bffd17 	ldw	r2,-12(fp)
10003a5c:	1080c00c 	andi	r2,r2,768
10003a60:	1000011e 	bne	r2,zero,10003a68 <altera_avalon_jtag_uart_irq+0x44>
      break;
10003a64:	00006a06 	br	10003c10 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10003a68:	e0bffd17 	ldw	r2,-12(fp)
10003a6c:	1080400c 	andi	r2,r2,256
10003a70:	10003226 	beq	r2,zero,10003b3c <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10003a74:	00800074 	movhi	r2,1
10003a78:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003a7c:	e0bffb17 	ldw	r2,-20(fp)
10003a80:	10800a17 	ldw	r2,40(r2)
10003a84:	10800044 	addi	r2,r2,1
10003a88:	1081ffcc 	andi	r2,r2,2047
10003a8c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10003a90:	e0bffb17 	ldw	r2,-20(fp)
10003a94:	10c00b17 	ldw	r3,44(r2)
10003a98:	e0bffe17 	ldw	r2,-8(fp)
10003a9c:	1880011e 	bne	r3,r2,10003aa4 <altera_avalon_jtag_uart_irq+0x80>
          break;
10003aa0:	00001506 	br	10003af8 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10003aa4:	e0bffc17 	ldw	r2,-16(fp)
10003aa8:	10800037 	ldwio	r2,0(r2)
10003aac:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10003ab0:	e0bff917 	ldw	r2,-28(fp)
10003ab4:	10a0000c 	andi	r2,r2,32768
10003ab8:	1000011e 	bne	r2,zero,10003ac0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10003abc:	00000e06 	br	10003af8 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10003ac0:	e0bffb17 	ldw	r2,-20(fp)
10003ac4:	10800a17 	ldw	r2,40(r2)
10003ac8:	e0fff917 	ldw	r3,-28(fp)
10003acc:	e13ffb17 	ldw	r4,-20(fp)
10003ad0:	2085883a 	add	r2,r4,r2
10003ad4:	10800e04 	addi	r2,r2,56
10003ad8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003adc:	e0bffb17 	ldw	r2,-20(fp)
10003ae0:	10800a17 	ldw	r2,40(r2)
10003ae4:	10800044 	addi	r2,r2,1
10003ae8:	10c1ffcc 	andi	r3,r2,2047
10003aec:	e0bffb17 	ldw	r2,-20(fp)
10003af0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10003af4:	003fe106 	br	10003a7c <__alt_data_end+0xf8003a7c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10003af8:	e0bff917 	ldw	r2,-28(fp)
10003afc:	10bfffec 	andhi	r2,r2,65535
10003b00:	10000e26 	beq	r2,zero,10003b3c <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003b04:	e0bffb17 	ldw	r2,-20(fp)
10003b08:	10c00817 	ldw	r3,32(r2)
10003b0c:	00bfff84 	movi	r2,-2
10003b10:	1886703a 	and	r3,r3,r2
10003b14:	e0bffb17 	ldw	r2,-20(fp)
10003b18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10003b1c:	e0bffc17 	ldw	r2,-16(fp)
10003b20:	10800104 	addi	r2,r2,4
10003b24:	e0fffb17 	ldw	r3,-20(fp)
10003b28:	18c00817 	ldw	r3,32(r3)
10003b2c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003b30:	e0bffc17 	ldw	r2,-16(fp)
10003b34:	10800104 	addi	r2,r2,4
10003b38:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10003b3c:	e0bffd17 	ldw	r2,-12(fp)
10003b40:	1080800c 	andi	r2,r2,512
10003b44:	10003126 	beq	r2,zero,10003c0c <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10003b48:	e0bffd17 	ldw	r2,-12(fp)
10003b4c:	1004d43a 	srli	r2,r2,16
10003b50:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10003b54:	00001406 	br	10003ba8 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10003b58:	e0bffc17 	ldw	r2,-16(fp)
10003b5c:	e0fffb17 	ldw	r3,-20(fp)
10003b60:	18c00d17 	ldw	r3,52(r3)
10003b64:	e13ffb17 	ldw	r4,-20(fp)
10003b68:	20c7883a 	add	r3,r4,r3
10003b6c:	18c20e04 	addi	r3,r3,2104
10003b70:	18c00003 	ldbu	r3,0(r3)
10003b74:	18c03fcc 	andi	r3,r3,255
10003b78:	18c0201c 	xori	r3,r3,128
10003b7c:	18ffe004 	addi	r3,r3,-128
10003b80:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003b84:	e0bffb17 	ldw	r2,-20(fp)
10003b88:	10800d17 	ldw	r2,52(r2)
10003b8c:	10800044 	addi	r2,r2,1
10003b90:	10c1ffcc 	andi	r3,r2,2047
10003b94:	e0bffb17 	ldw	r2,-20(fp)
10003b98:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10003b9c:	e0bffa17 	ldw	r2,-24(fp)
10003ba0:	10bfffc4 	addi	r2,r2,-1
10003ba4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10003ba8:	e0bffa17 	ldw	r2,-24(fp)
10003bac:	10000526 	beq	r2,zero,10003bc4 <altera_avalon_jtag_uart_irq+0x1a0>
10003bb0:	e0bffb17 	ldw	r2,-20(fp)
10003bb4:	10c00d17 	ldw	r3,52(r2)
10003bb8:	e0bffb17 	ldw	r2,-20(fp)
10003bbc:	10800c17 	ldw	r2,48(r2)
10003bc0:	18bfe51e 	bne	r3,r2,10003b58 <__alt_data_end+0xf8003b58>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10003bc4:	e0bffa17 	ldw	r2,-24(fp)
10003bc8:	10001026 	beq	r2,zero,10003c0c <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10003bcc:	e0bffb17 	ldw	r2,-20(fp)
10003bd0:	10c00817 	ldw	r3,32(r2)
10003bd4:	00bfff44 	movi	r2,-3
10003bd8:	1886703a 	and	r3,r3,r2
10003bdc:	e0bffb17 	ldw	r2,-20(fp)
10003be0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10003be4:	e0bffb17 	ldw	r2,-20(fp)
10003be8:	10800017 	ldw	r2,0(r2)
10003bec:	10800104 	addi	r2,r2,4
10003bf0:	e0fffb17 	ldw	r3,-20(fp)
10003bf4:	18c00817 	ldw	r3,32(r3)
10003bf8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003bfc:	e0bffc17 	ldw	r2,-16(fp)
10003c00:	10800104 	addi	r2,r2,4
10003c04:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10003c08:	003f8f06 	br	10003a48 <__alt_data_end+0xf8003a48>
10003c0c:	003f8e06 	br	10003a48 <__alt_data_end+0xf8003a48>
}
10003c10:	e037883a 	mov	sp,fp
10003c14:	df000017 	ldw	fp,0(sp)
10003c18:	dec00104 	addi	sp,sp,4
10003c1c:	f800283a 	ret

10003c20 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10003c20:	defff804 	addi	sp,sp,-32
10003c24:	df000715 	stw	fp,28(sp)
10003c28:	df000704 	addi	fp,sp,28
10003c2c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10003c30:	e0bffb17 	ldw	r2,-20(fp)
10003c34:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10003c38:	e0bff917 	ldw	r2,-28(fp)
10003c3c:	10800017 	ldw	r2,0(r2)
10003c40:	10800104 	addi	r2,r2,4
10003c44:	10800037 	ldwio	r2,0(r2)
10003c48:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10003c4c:	e0bffa17 	ldw	r2,-24(fp)
10003c50:	1081000c 	andi	r2,r2,1024
10003c54:	10000a26 	beq	r2,zero,10003c80 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10003c58:	e0bff917 	ldw	r2,-28(fp)
10003c5c:	10800017 	ldw	r2,0(r2)
10003c60:	10800104 	addi	r2,r2,4
10003c64:	e0fff917 	ldw	r3,-28(fp)
10003c68:	18c00817 	ldw	r3,32(r3)
10003c6c:	18c10014 	ori	r3,r3,1024
10003c70:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
10003c74:	e0bff917 	ldw	r2,-28(fp)
10003c78:	10000915 	stw	zero,36(r2)
10003c7c:	00000a06 	br	10003ca8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10003c80:	e0bff917 	ldw	r2,-28(fp)
10003c84:	10800917 	ldw	r2,36(r2)
10003c88:	00e00034 	movhi	r3,32768
10003c8c:	18ffff04 	addi	r3,r3,-4
10003c90:	18800536 	bltu	r3,r2,10003ca8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
10003c94:	e0bff917 	ldw	r2,-28(fp)
10003c98:	10800917 	ldw	r2,36(r2)
10003c9c:	10c00044 	addi	r3,r2,1
10003ca0:	e0bff917 	ldw	r2,-28(fp)
10003ca4:	10c00915 	stw	r3,36(r2)
10003ca8:	00840074 	movhi	r2,4097
10003cac:	10a25304 	addi	r2,r2,-30388
10003cb0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10003cb4:	e037883a 	mov	sp,fp
10003cb8:	df000017 	ldw	fp,0(sp)
10003cbc:	dec00104 	addi	sp,sp,4
10003cc0:	f800283a 	ret

10003cc4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10003cc4:	defffd04 	addi	sp,sp,-12
10003cc8:	df000215 	stw	fp,8(sp)
10003ccc:	df000204 	addi	fp,sp,8
10003cd0:	e13ffe15 	stw	r4,-8(fp)
10003cd4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003cd8:	00000506 	br	10003cf0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10003cdc:	e0bfff17 	ldw	r2,-4(fp)
10003ce0:	1090000c 	andi	r2,r2,16384
10003ce4:	10000226 	beq	r2,zero,10003cf0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10003ce8:	00bffd44 	movi	r2,-11
10003cec:	00000b06 	br	10003d1c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003cf0:	e0bffe17 	ldw	r2,-8(fp)
10003cf4:	10c00d17 	ldw	r3,52(r2)
10003cf8:	e0bffe17 	ldw	r2,-8(fp)
10003cfc:	10800c17 	ldw	r2,48(r2)
10003d00:	18800526 	beq	r3,r2,10003d18 <altera_avalon_jtag_uart_close+0x54>
10003d04:	e0bffe17 	ldw	r2,-8(fp)
10003d08:	10c00917 	ldw	r3,36(r2)
10003d0c:	e0bffe17 	ldw	r2,-8(fp)
10003d10:	10800117 	ldw	r2,4(r2)
10003d14:	18bff136 	bltu	r3,r2,10003cdc <__alt_data_end+0xf8003cdc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10003d18:	0005883a 	mov	r2,zero
}
10003d1c:	e037883a 	mov	sp,fp
10003d20:	df000017 	ldw	fp,0(sp)
10003d24:	dec00104 	addi	sp,sp,4
10003d28:	f800283a 	ret

10003d2c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10003d2c:	defffa04 	addi	sp,sp,-24
10003d30:	df000515 	stw	fp,20(sp)
10003d34:	df000504 	addi	fp,sp,20
10003d38:	e13ffd15 	stw	r4,-12(fp)
10003d3c:	e17ffe15 	stw	r5,-8(fp)
10003d40:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10003d44:	00bff9c4 	movi	r2,-25
10003d48:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10003d4c:	e0bffe17 	ldw	r2,-8(fp)
10003d50:	10da8060 	cmpeqi	r3,r2,27137
10003d54:	1800031e 	bne	r3,zero,10003d64 <altera_avalon_jtag_uart_ioctl+0x38>
10003d58:	109a80a0 	cmpeqi	r2,r2,27138
10003d5c:	1000191e 	bne	r2,zero,10003dc4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10003d60:	00002806 	br	10003e04 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10003d64:	e0bffd17 	ldw	r2,-12(fp)
10003d68:	10c00117 	ldw	r3,4(r2)
10003d6c:	00a00034 	movhi	r2,32768
10003d70:	10bfffc4 	addi	r2,r2,-1
10003d74:	18801226 	beq	r3,r2,10003dc0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10003d78:	e0bfff17 	ldw	r2,-4(fp)
10003d7c:	10800017 	ldw	r2,0(r2)
10003d80:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10003d84:	e0bffc17 	ldw	r2,-16(fp)
10003d88:	10800090 	cmplti	r2,r2,2
10003d8c:	1000061e 	bne	r2,zero,10003da8 <altera_avalon_jtag_uart_ioctl+0x7c>
10003d90:	e0fffc17 	ldw	r3,-16(fp)
10003d94:	00a00034 	movhi	r2,32768
10003d98:	10bfffc4 	addi	r2,r2,-1
10003d9c:	18800226 	beq	r3,r2,10003da8 <altera_avalon_jtag_uart_ioctl+0x7c>
10003da0:	e0bffc17 	ldw	r2,-16(fp)
10003da4:	00000206 	br	10003db0 <altera_avalon_jtag_uart_ioctl+0x84>
10003da8:	00a00034 	movhi	r2,32768
10003dac:	10bfff84 	addi	r2,r2,-2
10003db0:	e0fffd17 	ldw	r3,-12(fp)
10003db4:	18800115 	stw	r2,4(r3)
      rc = 0;
10003db8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10003dbc:	00001106 	br	10003e04 <altera_avalon_jtag_uart_ioctl+0xd8>
10003dc0:	00001006 	br	10003e04 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10003dc4:	e0bffd17 	ldw	r2,-12(fp)
10003dc8:	10c00117 	ldw	r3,4(r2)
10003dcc:	00a00034 	movhi	r2,32768
10003dd0:	10bfffc4 	addi	r2,r2,-1
10003dd4:	18800a26 	beq	r3,r2,10003e00 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10003dd8:	e0bffd17 	ldw	r2,-12(fp)
10003ddc:	10c00917 	ldw	r3,36(r2)
10003de0:	e0bffd17 	ldw	r2,-12(fp)
10003de4:	10800117 	ldw	r2,4(r2)
10003de8:	1885803a 	cmpltu	r2,r3,r2
10003dec:	10c03fcc 	andi	r3,r2,255
10003df0:	e0bfff17 	ldw	r2,-4(fp)
10003df4:	10c00015 	stw	r3,0(r2)
      rc = 0;
10003df8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10003dfc:	00000006 	br	10003e00 <altera_avalon_jtag_uart_ioctl+0xd4>
10003e00:	0001883a 	nop

  default:
    break;
  }

  return rc;
10003e04:	e0bffb17 	ldw	r2,-20(fp)
}
10003e08:	e037883a 	mov	sp,fp
10003e0c:	df000017 	ldw	fp,0(sp)
10003e10:	dec00104 	addi	sp,sp,4
10003e14:	f800283a 	ret

10003e18 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10003e18:	defff304 	addi	sp,sp,-52
10003e1c:	dfc00c15 	stw	ra,48(sp)
10003e20:	df000b15 	stw	fp,44(sp)
10003e24:	df000b04 	addi	fp,sp,44
10003e28:	e13ffc15 	stw	r4,-16(fp)
10003e2c:	e17ffd15 	stw	r5,-12(fp)
10003e30:	e1bffe15 	stw	r6,-8(fp)
10003e34:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10003e38:	e0bffd17 	ldw	r2,-12(fp)
10003e3c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10003e40:	00004906 	br	10003f68 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10003e44:	e0bffc17 	ldw	r2,-16(fp)
10003e48:	10800a17 	ldw	r2,40(r2)
10003e4c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10003e50:	e0bffc17 	ldw	r2,-16(fp)
10003e54:	10800b17 	ldw	r2,44(r2)
10003e58:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10003e5c:	e0fff717 	ldw	r3,-36(fp)
10003e60:	e0bff817 	ldw	r2,-32(fp)
10003e64:	18800536 	bltu	r3,r2,10003e7c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10003e68:	e0fff717 	ldw	r3,-36(fp)
10003e6c:	e0bff817 	ldw	r2,-32(fp)
10003e70:	1885c83a 	sub	r2,r3,r2
10003e74:	e0bff615 	stw	r2,-40(fp)
10003e78:	00000406 	br	10003e8c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10003e7c:	00c20004 	movi	r3,2048
10003e80:	e0bff817 	ldw	r2,-32(fp)
10003e84:	1885c83a 	sub	r2,r3,r2
10003e88:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10003e8c:	e0bff617 	ldw	r2,-40(fp)
10003e90:	1000011e 	bne	r2,zero,10003e98 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10003e94:	00001d06 	br	10003f0c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10003e98:	e0fffe17 	ldw	r3,-8(fp)
10003e9c:	e0bff617 	ldw	r2,-40(fp)
10003ea0:	1880022e 	bgeu	r3,r2,10003eac <altera_avalon_jtag_uart_read+0x94>
        n = space;
10003ea4:	e0bffe17 	ldw	r2,-8(fp)
10003ea8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10003eac:	e0bff817 	ldw	r2,-32(fp)
10003eb0:	10800e04 	addi	r2,r2,56
10003eb4:	e0fffc17 	ldw	r3,-16(fp)
10003eb8:	1885883a 	add	r2,r3,r2
10003ebc:	e13ff517 	ldw	r4,-44(fp)
10003ec0:	100b883a 	mov	r5,r2
10003ec4:	e1bff617 	ldw	r6,-40(fp)
10003ec8:	00010dc0 	call	100010dc <memcpy>
      ptr   += n;
10003ecc:	e0fff517 	ldw	r3,-44(fp)
10003ed0:	e0bff617 	ldw	r2,-40(fp)
10003ed4:	1885883a 	add	r2,r3,r2
10003ed8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10003edc:	e0fffe17 	ldw	r3,-8(fp)
10003ee0:	e0bff617 	ldw	r2,-40(fp)
10003ee4:	1885c83a 	sub	r2,r3,r2
10003ee8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003eec:	e0fff817 	ldw	r3,-32(fp)
10003ef0:	e0bff617 	ldw	r2,-40(fp)
10003ef4:	1885883a 	add	r2,r3,r2
10003ef8:	10c1ffcc 	andi	r3,r2,2047
10003efc:	e0bffc17 	ldw	r2,-16(fp)
10003f00:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10003f04:	e0bffe17 	ldw	r2,-8(fp)
10003f08:	00bfce16 	blt	zero,r2,10003e44 <__alt_data_end+0xf8003e44>

    /* If we read any data then return it */
    if (ptr != buffer)
10003f0c:	e0fff517 	ldw	r3,-44(fp)
10003f10:	e0bffd17 	ldw	r2,-12(fp)
10003f14:	18800126 	beq	r3,r2,10003f1c <altera_avalon_jtag_uart_read+0x104>
      break;
10003f18:	00001506 	br	10003f70 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10003f1c:	e0bfff17 	ldw	r2,-4(fp)
10003f20:	1090000c 	andi	r2,r2,16384
10003f24:	10000126 	beq	r2,zero,10003f2c <altera_avalon_jtag_uart_read+0x114>
      break;
10003f28:	00001106 	br	10003f70 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10003f2c:	0001883a 	nop
10003f30:	e0bffc17 	ldw	r2,-16(fp)
10003f34:	10c00a17 	ldw	r3,40(r2)
10003f38:	e0bff717 	ldw	r2,-36(fp)
10003f3c:	1880051e 	bne	r3,r2,10003f54 <altera_avalon_jtag_uart_read+0x13c>
10003f40:	e0bffc17 	ldw	r2,-16(fp)
10003f44:	10c00917 	ldw	r3,36(r2)
10003f48:	e0bffc17 	ldw	r2,-16(fp)
10003f4c:	10800117 	ldw	r2,4(r2)
10003f50:	18bff736 	bltu	r3,r2,10003f30 <__alt_data_end+0xf8003f30>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10003f54:	e0bffc17 	ldw	r2,-16(fp)
10003f58:	10c00a17 	ldw	r3,40(r2)
10003f5c:	e0bff717 	ldw	r2,-36(fp)
10003f60:	1880011e 	bne	r3,r2,10003f68 <altera_avalon_jtag_uart_read+0x150>
      break;
10003f64:	00000206 	br	10003f70 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10003f68:	e0bffe17 	ldw	r2,-8(fp)
10003f6c:	00bfb516 	blt	zero,r2,10003e44 <__alt_data_end+0xf8003e44>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10003f70:	e0fff517 	ldw	r3,-44(fp)
10003f74:	e0bffd17 	ldw	r2,-12(fp)
10003f78:	18801726 	beq	r3,r2,10003fd8 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003f7c:	0005303a 	rdctl	r2,status
10003f80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003f84:	e0fffa17 	ldw	r3,-24(fp)
10003f88:	00bfff84 	movi	r2,-2
10003f8c:	1884703a 	and	r2,r3,r2
10003f90:	1001703a 	wrctl	status,r2
  
  return context;
10003f94:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10003f98:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003f9c:	e0bffc17 	ldw	r2,-16(fp)
10003fa0:	10800817 	ldw	r2,32(r2)
10003fa4:	10c00054 	ori	r3,r2,1
10003fa8:	e0bffc17 	ldw	r2,-16(fp)
10003fac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10003fb0:	e0bffc17 	ldw	r2,-16(fp)
10003fb4:	10800017 	ldw	r2,0(r2)
10003fb8:	10800104 	addi	r2,r2,4
10003fbc:	e0fffc17 	ldw	r3,-16(fp)
10003fc0:	18c00817 	ldw	r3,32(r3)
10003fc4:	10c00035 	stwio	r3,0(r2)
10003fc8:	e0bff917 	ldw	r2,-28(fp)
10003fcc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10003fd0:	e0bffb17 	ldw	r2,-20(fp)
10003fd4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10003fd8:	e0fff517 	ldw	r3,-44(fp)
10003fdc:	e0bffd17 	ldw	r2,-12(fp)
10003fe0:	18800426 	beq	r3,r2,10003ff4 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
10003fe4:	e0fff517 	ldw	r3,-44(fp)
10003fe8:	e0bffd17 	ldw	r2,-12(fp)
10003fec:	1885c83a 	sub	r2,r3,r2
10003ff0:	00000606 	br	1000400c <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
10003ff4:	e0bfff17 	ldw	r2,-4(fp)
10003ff8:	1090000c 	andi	r2,r2,16384
10003ffc:	10000226 	beq	r2,zero,10004008 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
10004000:	00bffd44 	movi	r2,-11
10004004:	00000106 	br	1000400c <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
10004008:	00bffec4 	movi	r2,-5
}
1000400c:	e037883a 	mov	sp,fp
10004010:	dfc00117 	ldw	ra,4(sp)
10004014:	df000017 	ldw	fp,0(sp)
10004018:	dec00204 	addi	sp,sp,8
1000401c:	f800283a 	ret

10004020 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10004020:	defff304 	addi	sp,sp,-52
10004024:	dfc00c15 	stw	ra,48(sp)
10004028:	df000b15 	stw	fp,44(sp)
1000402c:	df000b04 	addi	fp,sp,44
10004030:	e13ffc15 	stw	r4,-16(fp)
10004034:	e17ffd15 	stw	r5,-12(fp)
10004038:	e1bffe15 	stw	r6,-8(fp)
1000403c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10004040:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10004044:	e0bffd17 	ldw	r2,-12(fp)
10004048:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000404c:	00003906 	br	10004134 <altera_avalon_jtag_uart_write+0x114>
10004050:	00003806 	br	10004134 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10004054:	e0bffc17 	ldw	r2,-16(fp)
10004058:	10800c17 	ldw	r2,48(r2)
1000405c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10004060:	e0bffc17 	ldw	r2,-16(fp)
10004064:	10800d17 	ldw	r2,52(r2)
10004068:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000406c:	e0fff817 	ldw	r3,-32(fp)
10004070:	e0bff517 	ldw	r2,-44(fp)
10004074:	1880062e 	bgeu	r3,r2,10004090 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
10004078:	e0fff517 	ldw	r3,-44(fp)
1000407c:	e0bff817 	ldw	r2,-32(fp)
10004080:	1885c83a 	sub	r2,r3,r2
10004084:	10bfffc4 	addi	r2,r2,-1
10004088:	e0bff615 	stw	r2,-40(fp)
1000408c:	00000b06 	br	100040bc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
10004090:	e0bff517 	ldw	r2,-44(fp)
10004094:	10000526 	beq	r2,zero,100040ac <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10004098:	00c20004 	movi	r3,2048
1000409c:	e0bff817 	ldw	r2,-32(fp)
100040a0:	1885c83a 	sub	r2,r3,r2
100040a4:	e0bff615 	stw	r2,-40(fp)
100040a8:	00000406 	br	100040bc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100040ac:	00c1ffc4 	movi	r3,2047
100040b0:	e0bff817 	ldw	r2,-32(fp)
100040b4:	1885c83a 	sub	r2,r3,r2
100040b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100040bc:	e0bff617 	ldw	r2,-40(fp)
100040c0:	1000011e 	bne	r2,zero,100040c8 <altera_avalon_jtag_uart_write+0xa8>
        break;
100040c4:	00001d06 	br	1000413c <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
100040c8:	e0fffe17 	ldw	r3,-8(fp)
100040cc:	e0bff617 	ldw	r2,-40(fp)
100040d0:	1880022e 	bgeu	r3,r2,100040dc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
100040d4:	e0bffe17 	ldw	r2,-8(fp)
100040d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100040dc:	e0bff817 	ldw	r2,-32(fp)
100040e0:	10820e04 	addi	r2,r2,2104
100040e4:	e0fffc17 	ldw	r3,-16(fp)
100040e8:	1885883a 	add	r2,r3,r2
100040ec:	1009883a 	mov	r4,r2
100040f0:	e17ffd17 	ldw	r5,-12(fp)
100040f4:	e1bff617 	ldw	r6,-40(fp)
100040f8:	00010dc0 	call	100010dc <memcpy>
      ptr   += n;
100040fc:	e0fffd17 	ldw	r3,-12(fp)
10004100:	e0bff617 	ldw	r2,-40(fp)
10004104:	1885883a 	add	r2,r3,r2
10004108:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000410c:	e0fffe17 	ldw	r3,-8(fp)
10004110:	e0bff617 	ldw	r2,-40(fp)
10004114:	1885c83a 	sub	r2,r3,r2
10004118:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000411c:	e0fff817 	ldw	r3,-32(fp)
10004120:	e0bff617 	ldw	r2,-40(fp)
10004124:	1885883a 	add	r2,r3,r2
10004128:	10c1ffcc 	andi	r3,r2,2047
1000412c:	e0bffc17 	ldw	r2,-16(fp)
10004130:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10004134:	e0bffe17 	ldw	r2,-8(fp)
10004138:	00bfc616 	blt	zero,r2,10004054 <__alt_data_end+0xf8004054>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000413c:	0005303a 	rdctl	r2,status
10004140:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004144:	e0fffa17 	ldw	r3,-24(fp)
10004148:	00bfff84 	movi	r2,-2
1000414c:	1884703a 	and	r2,r3,r2
10004150:	1001703a 	wrctl	status,r2
  
  return context;
10004154:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10004158:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000415c:	e0bffc17 	ldw	r2,-16(fp)
10004160:	10800817 	ldw	r2,32(r2)
10004164:	10c00094 	ori	r3,r2,2
10004168:	e0bffc17 	ldw	r2,-16(fp)
1000416c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10004170:	e0bffc17 	ldw	r2,-16(fp)
10004174:	10800017 	ldw	r2,0(r2)
10004178:	10800104 	addi	r2,r2,4
1000417c:	e0fffc17 	ldw	r3,-16(fp)
10004180:	18c00817 	ldw	r3,32(r3)
10004184:	10c00035 	stwio	r3,0(r2)
10004188:	e0bff917 	ldw	r2,-28(fp)
1000418c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004190:	e0bffb17 	ldw	r2,-20(fp)
10004194:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10004198:	e0bffe17 	ldw	r2,-8(fp)
1000419c:	0080120e 	bge	zero,r2,100041e8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
100041a0:	e0bfff17 	ldw	r2,-4(fp)
100041a4:	1090000c 	andi	r2,r2,16384
100041a8:	10000126 	beq	r2,zero,100041b0 <altera_avalon_jtag_uart_write+0x190>
        break;
100041ac:	00001006 	br	100041f0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100041b0:	0001883a 	nop
100041b4:	e0bffc17 	ldw	r2,-16(fp)
100041b8:	10c00d17 	ldw	r3,52(r2)
100041bc:	e0bff517 	ldw	r2,-44(fp)
100041c0:	1880051e 	bne	r3,r2,100041d8 <altera_avalon_jtag_uart_write+0x1b8>
100041c4:	e0bffc17 	ldw	r2,-16(fp)
100041c8:	10c00917 	ldw	r3,36(r2)
100041cc:	e0bffc17 	ldw	r2,-16(fp)
100041d0:	10800117 	ldw	r2,4(r2)
100041d4:	18bff736 	bltu	r3,r2,100041b4 <__alt_data_end+0xf80041b4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100041d8:	e0bffc17 	ldw	r2,-16(fp)
100041dc:	10800917 	ldw	r2,36(r2)
100041e0:	10000126 	beq	r2,zero,100041e8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
100041e4:	00000206 	br	100041f0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
100041e8:	e0bffe17 	ldw	r2,-8(fp)
100041ec:	00bf9816 	blt	zero,r2,10004050 <__alt_data_end+0xf8004050>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100041f0:	e0fffd17 	ldw	r3,-12(fp)
100041f4:	e0bff717 	ldw	r2,-36(fp)
100041f8:	18800426 	beq	r3,r2,1000420c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
100041fc:	e0fffd17 	ldw	r3,-12(fp)
10004200:	e0bff717 	ldw	r2,-36(fp)
10004204:	1885c83a 	sub	r2,r3,r2
10004208:	00000606 	br	10004224 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000420c:	e0bfff17 	ldw	r2,-4(fp)
10004210:	1090000c 	andi	r2,r2,16384
10004214:	10000226 	beq	r2,zero,10004220 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10004218:	00bffd44 	movi	r2,-11
1000421c:	00000106 	br	10004224 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10004220:	00bffec4 	movi	r2,-5
}
10004224:	e037883a 	mov	sp,fp
10004228:	dfc00117 	ldw	ra,4(sp)
1000422c:	df000017 	ldw	fp,0(sp)
10004230:	dec00204 	addi	sp,sp,8
10004234:	f800283a 	ret

10004238 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10004238:	defff504 	addi	sp,sp,-44
1000423c:	df000a15 	stw	fp,40(sp)
10004240:	df000a04 	addi	fp,sp,40
10004244:	e13ffc15 	stw	r4,-16(fp)
10004248:	e17ffd15 	stw	r5,-12(fp)
1000424c:	e1bffe15 	stw	r6,-8(fp)
10004250:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10004254:	e03ff615 	stw	zero,-40(fp)
10004258:	00840074 	movhi	r2,4097
1000425c:	10a25304 	addi	r2,r2,-30388
10004260:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10004264:	10003f26 	beq	r2,zero,10004364 <alt_alarm_start+0x12c>
  {
    if (alarm)
10004268:	e0bffc17 	ldw	r2,-16(fp)
1000426c:	10003b26 	beq	r2,zero,1000435c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10004270:	e0bffc17 	ldw	r2,-16(fp)
10004274:	e0fffe17 	ldw	r3,-8(fp)
10004278:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000427c:	e0bffc17 	ldw	r2,-16(fp)
10004280:	e0ffff17 	ldw	r3,-4(fp)
10004284:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004288:	0005303a 	rdctl	r2,status
1000428c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004290:	e0fff817 	ldw	r3,-32(fp)
10004294:	00bfff84 	movi	r2,-2
10004298:	1884703a 	and	r2,r3,r2
1000429c:	1001703a 	wrctl	status,r2
  
  return context;
100042a0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
100042a4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100042a8:	00840074 	movhi	r2,4097
100042ac:	10a25404 	addi	r2,r2,-30384
100042b0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
100042b4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100042b8:	e0fffd17 	ldw	r3,-12(fp)
100042bc:	e0bff617 	ldw	r2,-40(fp)
100042c0:	1885883a 	add	r2,r3,r2
100042c4:	10c00044 	addi	r3,r2,1
100042c8:	e0bffc17 	ldw	r2,-16(fp)
100042cc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100042d0:	e0bffc17 	ldw	r2,-16(fp)
100042d4:	10c00217 	ldw	r3,8(r2)
100042d8:	e0bff617 	ldw	r2,-40(fp)
100042dc:	1880042e 	bgeu	r3,r2,100042f0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
100042e0:	e0bffc17 	ldw	r2,-16(fp)
100042e4:	00c00044 	movi	r3,1
100042e8:	10c00405 	stb	r3,16(r2)
100042ec:	00000206 	br	100042f8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
100042f0:	e0bffc17 	ldw	r2,-16(fp)
100042f4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100042f8:	e0bffc17 	ldw	r2,-16(fp)
100042fc:	00c40034 	movhi	r3,4096
10004300:	18dbae04 	addi	r3,r3,28344
10004304:	e0fff915 	stw	r3,-28(fp)
10004308:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000430c:	e0bffa17 	ldw	r2,-24(fp)
10004310:	e0fff917 	ldw	r3,-28(fp)
10004314:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10004318:	e0bff917 	ldw	r2,-28(fp)
1000431c:	10c00017 	ldw	r3,0(r2)
10004320:	e0bffa17 	ldw	r2,-24(fp)
10004324:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10004328:	e0bff917 	ldw	r2,-28(fp)
1000432c:	10800017 	ldw	r2,0(r2)
10004330:	e0fffa17 	ldw	r3,-24(fp)
10004334:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10004338:	e0bff917 	ldw	r2,-28(fp)
1000433c:	e0fffa17 	ldw	r3,-24(fp)
10004340:	10c00015 	stw	r3,0(r2)
10004344:	e0bff717 	ldw	r2,-36(fp)
10004348:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000434c:	e0bffb17 	ldw	r2,-20(fp)
10004350:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10004354:	0005883a 	mov	r2,zero
10004358:	00000306 	br	10004368 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000435c:	00bffa84 	movi	r2,-22
10004360:	00000106 	br	10004368 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10004364:	00bfde84 	movi	r2,-134
  }
}
10004368:	e037883a 	mov	sp,fp
1000436c:	df000017 	ldw	fp,0(sp)
10004370:	dec00104 	addi	sp,sp,4
10004374:	f800283a 	ret

10004378 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10004378:	deffff04 	addi	sp,sp,-4
1000437c:	df000015 	stw	fp,0(sp)
10004380:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10004384:	e037883a 	mov	sp,fp
10004388:	df000017 	ldw	fp,0(sp)
1000438c:	dec00104 	addi	sp,sp,4
10004390:	f800283a 	ret

10004394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10004394:	defffe04 	addi	sp,sp,-8
10004398:	dfc00115 	stw	ra,4(sp)
1000439c:	df000015 	stw	fp,0(sp)
100043a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100043a4:	00840034 	movhi	r2,4096
100043a8:	109bab04 	addi	r2,r2,28332
100043ac:	10800017 	ldw	r2,0(r2)
100043b0:	10000526 	beq	r2,zero,100043c8 <alt_get_errno+0x34>
100043b4:	00840034 	movhi	r2,4096
100043b8:	109bab04 	addi	r2,r2,28332
100043bc:	10800017 	ldw	r2,0(r2)
100043c0:	103ee83a 	callr	r2
100043c4:	00000206 	br	100043d0 <alt_get_errno+0x3c>
100043c8:	00840074 	movhi	r2,4097
100043cc:	10a24e04 	addi	r2,r2,-30408
}
100043d0:	e037883a 	mov	sp,fp
100043d4:	dfc00117 	ldw	ra,4(sp)
100043d8:	df000017 	ldw	fp,0(sp)
100043dc:	dec00204 	addi	sp,sp,8
100043e0:	f800283a 	ret

100043e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100043e4:	defffa04 	addi	sp,sp,-24
100043e8:	dfc00515 	stw	ra,20(sp)
100043ec:	df000415 	stw	fp,16(sp)
100043f0:	df000404 	addi	fp,sp,16
100043f4:	e13ffe15 	stw	r4,-8(fp)
100043f8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100043fc:	e0bffe17 	ldw	r2,-8(fp)
10004400:	10000326 	beq	r2,zero,10004410 <alt_dev_llist_insert+0x2c>
10004404:	e0bffe17 	ldw	r2,-8(fp)
10004408:	10800217 	ldw	r2,8(r2)
1000440c:	1000051e 	bne	r2,zero,10004424 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
10004410:	00043940 	call	10004394 <alt_get_errno>
10004414:	00c00584 	movi	r3,22
10004418:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
1000441c:	00bffa84 	movi	r2,-22
10004420:	00001306 	br	10004470 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10004424:	e0bffe17 	ldw	r2,-8(fp)
10004428:	e0ffff17 	ldw	r3,-4(fp)
1000442c:	e0fffc15 	stw	r3,-16(fp)
10004430:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10004434:	e0bffd17 	ldw	r2,-12(fp)
10004438:	e0fffc17 	ldw	r3,-16(fp)
1000443c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10004440:	e0bffc17 	ldw	r2,-16(fp)
10004444:	10c00017 	ldw	r3,0(r2)
10004448:	e0bffd17 	ldw	r2,-12(fp)
1000444c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10004450:	e0bffc17 	ldw	r2,-16(fp)
10004454:	10800017 	ldw	r2,0(r2)
10004458:	e0fffd17 	ldw	r3,-12(fp)
1000445c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10004460:	e0bffc17 	ldw	r2,-16(fp)
10004464:	e0fffd17 	ldw	r3,-12(fp)
10004468:	10c00015 	stw	r3,0(r2)

  return 0;  
1000446c:	0005883a 	mov	r2,zero
}
10004470:	e037883a 	mov	sp,fp
10004474:	dfc00117 	ldw	ra,4(sp)
10004478:	df000017 	ldw	fp,0(sp)
1000447c:	dec00204 	addi	sp,sp,8
10004480:	f800283a 	ret

10004484 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10004484:	defffd04 	addi	sp,sp,-12
10004488:	dfc00215 	stw	ra,8(sp)
1000448c:	df000115 	stw	fp,4(sp)
10004490:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10004494:	00840034 	movhi	r2,4096
10004498:	10950104 	addi	r2,r2,21508
1000449c:	e0bfff15 	stw	r2,-4(fp)
100044a0:	00000606 	br	100044bc <_do_ctors+0x38>
        (*ctor) (); 
100044a4:	e0bfff17 	ldw	r2,-4(fp)
100044a8:	10800017 	ldw	r2,0(r2)
100044ac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100044b0:	e0bfff17 	ldw	r2,-4(fp)
100044b4:	10bfff04 	addi	r2,r2,-4
100044b8:	e0bfff15 	stw	r2,-4(fp)
100044bc:	e0ffff17 	ldw	r3,-4(fp)
100044c0:	00840034 	movhi	r2,4096
100044c4:	10950204 	addi	r2,r2,21512
100044c8:	18bff62e 	bgeu	r3,r2,100044a4 <__alt_data_end+0xf80044a4>
        (*ctor) (); 
}
100044cc:	e037883a 	mov	sp,fp
100044d0:	dfc00117 	ldw	ra,4(sp)
100044d4:	df000017 	ldw	fp,0(sp)
100044d8:	dec00204 	addi	sp,sp,8
100044dc:	f800283a 	ret

100044e0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100044e0:	defffd04 	addi	sp,sp,-12
100044e4:	dfc00215 	stw	ra,8(sp)
100044e8:	df000115 	stw	fp,4(sp)
100044ec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100044f0:	00840034 	movhi	r2,4096
100044f4:	10950104 	addi	r2,r2,21508
100044f8:	e0bfff15 	stw	r2,-4(fp)
100044fc:	00000606 	br	10004518 <_do_dtors+0x38>
        (*dtor) (); 
10004500:	e0bfff17 	ldw	r2,-4(fp)
10004504:	10800017 	ldw	r2,0(r2)
10004508:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000450c:	e0bfff17 	ldw	r2,-4(fp)
10004510:	10bfff04 	addi	r2,r2,-4
10004514:	e0bfff15 	stw	r2,-4(fp)
10004518:	e0ffff17 	ldw	r3,-4(fp)
1000451c:	00840034 	movhi	r2,4096
10004520:	10950204 	addi	r2,r2,21512
10004524:	18bff62e 	bgeu	r3,r2,10004500 <__alt_data_end+0xf8004500>
        (*dtor) (); 
}
10004528:	e037883a 	mov	sp,fp
1000452c:	dfc00117 	ldw	ra,4(sp)
10004530:	df000017 	ldw	fp,0(sp)
10004534:	dec00204 	addi	sp,sp,8
10004538:	f800283a 	ret

1000453c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000453c:	deffff04 	addi	sp,sp,-4
10004540:	df000015 	stw	fp,0(sp)
10004544:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10004548:	e037883a 	mov	sp,fp
1000454c:	df000017 	ldw	fp,0(sp)
10004550:	dec00104 	addi	sp,sp,4
10004554:	f800283a 	ret

10004558 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10004558:	defff904 	addi	sp,sp,-28
1000455c:	dfc00615 	stw	ra,24(sp)
10004560:	df000515 	stw	fp,20(sp)
10004564:	df000504 	addi	fp,sp,20
10004568:	e13ffc15 	stw	r4,-16(fp)
1000456c:	e17ffd15 	stw	r5,-12(fp)
10004570:	e1bffe15 	stw	r6,-8(fp)
10004574:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10004578:	e0800217 	ldw	r2,8(fp)
1000457c:	d8800015 	stw	r2,0(sp)
10004580:	e13ffc17 	ldw	r4,-16(fp)
10004584:	e17ffd17 	ldw	r5,-12(fp)
10004588:	e1bffe17 	ldw	r6,-8(fp)
1000458c:	e1ffff17 	ldw	r7,-4(fp)
10004590:	00047300 	call	10004730 <alt_iic_isr_register>
}  
10004594:	e037883a 	mov	sp,fp
10004598:	dfc00117 	ldw	ra,4(sp)
1000459c:	df000017 	ldw	fp,0(sp)
100045a0:	dec00204 	addi	sp,sp,8
100045a4:	f800283a 	ret

100045a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100045a8:	defff904 	addi	sp,sp,-28
100045ac:	df000615 	stw	fp,24(sp)
100045b0:	df000604 	addi	fp,sp,24
100045b4:	e13ffe15 	stw	r4,-8(fp)
100045b8:	e17fff15 	stw	r5,-4(fp)
100045bc:	e0bfff17 	ldw	r2,-4(fp)
100045c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100045c4:	0005303a 	rdctl	r2,status
100045c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100045cc:	e0fffb17 	ldw	r3,-20(fp)
100045d0:	00bfff84 	movi	r2,-2
100045d4:	1884703a 	and	r2,r3,r2
100045d8:	1001703a 	wrctl	status,r2
  
  return context;
100045dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100045e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100045e4:	e0bffa17 	ldw	r2,-24(fp)
100045e8:	00c00044 	movi	r3,1
100045ec:	1884983a 	sll	r2,r3,r2
100045f0:	1007883a 	mov	r3,r2
100045f4:	00840074 	movhi	r2,4097
100045f8:	10a25204 	addi	r2,r2,-30392
100045fc:	10800017 	ldw	r2,0(r2)
10004600:	1886b03a 	or	r3,r3,r2
10004604:	00840074 	movhi	r2,4097
10004608:	10a25204 	addi	r2,r2,-30392
1000460c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10004610:	00840074 	movhi	r2,4097
10004614:	10a25204 	addi	r2,r2,-30392
10004618:	10800017 	ldw	r2,0(r2)
1000461c:	100170fa 	wrctl	ienable,r2
10004620:	e0bffc17 	ldw	r2,-16(fp)
10004624:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004628:	e0bffd17 	ldw	r2,-12(fp)
1000462c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10004630:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
10004634:	e037883a 	mov	sp,fp
10004638:	df000017 	ldw	fp,0(sp)
1000463c:	dec00104 	addi	sp,sp,4
10004640:	f800283a 	ret

10004644 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10004644:	defff904 	addi	sp,sp,-28
10004648:	df000615 	stw	fp,24(sp)
1000464c:	df000604 	addi	fp,sp,24
10004650:	e13ffe15 	stw	r4,-8(fp)
10004654:	e17fff15 	stw	r5,-4(fp)
10004658:	e0bfff17 	ldw	r2,-4(fp)
1000465c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004660:	0005303a 	rdctl	r2,status
10004664:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004668:	e0fffb17 	ldw	r3,-20(fp)
1000466c:	00bfff84 	movi	r2,-2
10004670:	1884703a 	and	r2,r3,r2
10004674:	1001703a 	wrctl	status,r2
  
  return context;
10004678:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000467c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10004680:	e0bffa17 	ldw	r2,-24(fp)
10004684:	00c00044 	movi	r3,1
10004688:	1884983a 	sll	r2,r3,r2
1000468c:	0084303a 	nor	r2,zero,r2
10004690:	1007883a 	mov	r3,r2
10004694:	00840074 	movhi	r2,4097
10004698:	10a25204 	addi	r2,r2,-30392
1000469c:	10800017 	ldw	r2,0(r2)
100046a0:	1886703a 	and	r3,r3,r2
100046a4:	00840074 	movhi	r2,4097
100046a8:	10a25204 	addi	r2,r2,-30392
100046ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100046b0:	00840074 	movhi	r2,4097
100046b4:	10a25204 	addi	r2,r2,-30392
100046b8:	10800017 	ldw	r2,0(r2)
100046bc:	100170fa 	wrctl	ienable,r2
100046c0:	e0bffc17 	ldw	r2,-16(fp)
100046c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100046c8:	e0bffd17 	ldw	r2,-12(fp)
100046cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100046d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
100046d4:	e037883a 	mov	sp,fp
100046d8:	df000017 	ldw	fp,0(sp)
100046dc:	dec00104 	addi	sp,sp,4
100046e0:	f800283a 	ret

100046e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100046e4:	defffc04 	addi	sp,sp,-16
100046e8:	df000315 	stw	fp,12(sp)
100046ec:	df000304 	addi	fp,sp,12
100046f0:	e13ffe15 	stw	r4,-8(fp)
100046f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100046f8:	000530fa 	rdctl	r2,ienable
100046fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10004700:	e0bfff17 	ldw	r2,-4(fp)
10004704:	00c00044 	movi	r3,1
10004708:	1884983a 	sll	r2,r3,r2
1000470c:	1007883a 	mov	r3,r2
10004710:	e0bffd17 	ldw	r2,-12(fp)
10004714:	1884703a 	and	r2,r3,r2
10004718:	1004c03a 	cmpne	r2,r2,zero
1000471c:	10803fcc 	andi	r2,r2,255
}
10004720:	e037883a 	mov	sp,fp
10004724:	df000017 	ldw	fp,0(sp)
10004728:	dec00104 	addi	sp,sp,4
1000472c:	f800283a 	ret

10004730 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10004730:	defff504 	addi	sp,sp,-44
10004734:	dfc00a15 	stw	ra,40(sp)
10004738:	df000915 	stw	fp,36(sp)
1000473c:	df000904 	addi	fp,sp,36
10004740:	e13ffc15 	stw	r4,-16(fp)
10004744:	e17ffd15 	stw	r5,-12(fp)
10004748:	e1bffe15 	stw	r6,-8(fp)
1000474c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10004750:	00bffa84 	movi	r2,-22
10004754:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10004758:	e0bffd17 	ldw	r2,-12(fp)
1000475c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10004760:	e0bff817 	ldw	r2,-32(fp)
10004764:	10800808 	cmpgei	r2,r2,32
10004768:	1000271e 	bne	r2,zero,10004808 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000476c:	0005303a 	rdctl	r2,status
10004770:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004774:	e0fffa17 	ldw	r3,-24(fp)
10004778:	00bfff84 	movi	r2,-2
1000477c:	1884703a 	and	r2,r3,r2
10004780:	1001703a 	wrctl	status,r2
  
  return context;
10004784:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10004788:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000478c:	00c40074 	movhi	r3,4097
10004790:	18e25f04 	addi	r3,r3,-30340
10004794:	e0bff817 	ldw	r2,-32(fp)
10004798:	100490fa 	slli	r2,r2,3
1000479c:	1885883a 	add	r2,r3,r2
100047a0:	e0fffe17 	ldw	r3,-8(fp)
100047a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100047a8:	00c40074 	movhi	r3,4097
100047ac:	18e25f04 	addi	r3,r3,-30340
100047b0:	e0bff817 	ldw	r2,-32(fp)
100047b4:	100490fa 	slli	r2,r2,3
100047b8:	1885883a 	add	r2,r3,r2
100047bc:	10800104 	addi	r2,r2,4
100047c0:	e0ffff17 	ldw	r3,-4(fp)
100047c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100047c8:	e0bffe17 	ldw	r2,-8(fp)
100047cc:	10000526 	beq	r2,zero,100047e4 <alt_iic_isr_register+0xb4>
100047d0:	e0bff817 	ldw	r2,-32(fp)
100047d4:	e13ffc17 	ldw	r4,-16(fp)
100047d8:	100b883a 	mov	r5,r2
100047dc:	00045a80 	call	100045a8 <alt_ic_irq_enable>
100047e0:	00000406 	br	100047f4 <alt_iic_isr_register+0xc4>
100047e4:	e0bff817 	ldw	r2,-32(fp)
100047e8:	e13ffc17 	ldw	r4,-16(fp)
100047ec:	100b883a 	mov	r5,r2
100047f0:	00046440 	call	10004644 <alt_ic_irq_disable>
100047f4:	e0bff715 	stw	r2,-36(fp)
100047f8:	e0bff917 	ldw	r2,-28(fp)
100047fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004800:	e0bffb17 	ldw	r2,-20(fp)
10004804:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10004808:	e0bff717 	ldw	r2,-36(fp)
}
1000480c:	e037883a 	mov	sp,fp
10004810:	dfc00117 	ldw	ra,4(sp)
10004814:	df000017 	ldw	fp,0(sp)
10004818:	dec00204 	addi	sp,sp,8
1000481c:	f800283a 	ret

10004820 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10004820:	defff804 	addi	sp,sp,-32
10004824:	dfc00715 	stw	ra,28(sp)
10004828:	df000615 	stw	fp,24(sp)
1000482c:	dc000515 	stw	r16,20(sp)
10004830:	df000604 	addi	fp,sp,24
10004834:	e13ffb15 	stw	r4,-20(fp)
10004838:	e17ffc15 	stw	r5,-16(fp)
1000483c:	e1bffd15 	stw	r6,-12(fp)
10004840:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10004844:	e13ffc17 	ldw	r4,-16(fp)
10004848:	e17ffd17 	ldw	r5,-12(fp)
1000484c:	e1bffe17 	ldw	r6,-8(fp)
10004850:	0004abc0 	call	10004abc <open>
10004854:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10004858:	e0bffa17 	ldw	r2,-24(fp)
1000485c:	10002216 	blt	r2,zero,100048e8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10004860:	04040034 	movhi	r16,4096
10004864:	84172a04 	addi	r16,r16,23720
10004868:	e0bffa17 	ldw	r2,-24(fp)
1000486c:	1009883a 	mov	r4,r2
10004870:	01400304 	movi	r5,12
10004874:	0002d5c0 	call	10002d5c <__mulsi3>
10004878:	8085883a 	add	r2,r16,r2
1000487c:	10c00017 	ldw	r3,0(r2)
10004880:	e0bffb17 	ldw	r2,-20(fp)
10004884:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10004888:	04040034 	movhi	r16,4096
1000488c:	84172a04 	addi	r16,r16,23720
10004890:	e0bffa17 	ldw	r2,-24(fp)
10004894:	1009883a 	mov	r4,r2
10004898:	01400304 	movi	r5,12
1000489c:	0002d5c0 	call	10002d5c <__mulsi3>
100048a0:	8085883a 	add	r2,r16,r2
100048a4:	10800104 	addi	r2,r2,4
100048a8:	10c00017 	ldw	r3,0(r2)
100048ac:	e0bffb17 	ldw	r2,-20(fp)
100048b0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100048b4:	04040034 	movhi	r16,4096
100048b8:	84172a04 	addi	r16,r16,23720
100048bc:	e0bffa17 	ldw	r2,-24(fp)
100048c0:	1009883a 	mov	r4,r2
100048c4:	01400304 	movi	r5,12
100048c8:	0002d5c0 	call	10002d5c <__mulsi3>
100048cc:	8085883a 	add	r2,r16,r2
100048d0:	10800204 	addi	r2,r2,8
100048d4:	10c00017 	ldw	r3,0(r2)
100048d8:	e0bffb17 	ldw	r2,-20(fp)
100048dc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100048e0:	e13ffa17 	ldw	r4,-24(fp)
100048e4:	00034d80 	call	100034d8 <alt_release_fd>
  }
} 
100048e8:	e6ffff04 	addi	sp,fp,-4
100048ec:	dfc00217 	ldw	ra,8(sp)
100048f0:	df000117 	ldw	fp,4(sp)
100048f4:	dc000017 	ldw	r16,0(sp)
100048f8:	dec00304 	addi	sp,sp,12
100048fc:	f800283a 	ret

10004900 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10004900:	defffb04 	addi	sp,sp,-20
10004904:	dfc00415 	stw	ra,16(sp)
10004908:	df000315 	stw	fp,12(sp)
1000490c:	df000304 	addi	fp,sp,12
10004910:	e13ffd15 	stw	r4,-12(fp)
10004914:	e17ffe15 	stw	r5,-8(fp)
10004918:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000491c:	01040034 	movhi	r4,4096
10004920:	21172d04 	addi	r4,r4,23732
10004924:	e17ffd17 	ldw	r5,-12(fp)
10004928:	01800044 	movi	r6,1
1000492c:	01c07fc4 	movi	r7,511
10004930:	00048200 	call	10004820 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10004934:	01040034 	movhi	r4,4096
10004938:	21172a04 	addi	r4,r4,23720
1000493c:	e17ffe17 	ldw	r5,-8(fp)
10004940:	000d883a 	mov	r6,zero
10004944:	01c07fc4 	movi	r7,511
10004948:	00048200 	call	10004820 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000494c:	01040034 	movhi	r4,4096
10004950:	21173004 	addi	r4,r4,23744
10004954:	e17fff17 	ldw	r5,-4(fp)
10004958:	01800044 	movi	r6,1
1000495c:	01c07fc4 	movi	r7,511
10004960:	00048200 	call	10004820 <alt_open_fd>
}  
10004964:	e037883a 	mov	sp,fp
10004968:	dfc00117 	ldw	ra,4(sp)
1000496c:	df000017 	ldw	fp,0(sp)
10004970:	dec00204 	addi	sp,sp,8
10004974:	f800283a 	ret

10004978 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10004978:	defffe04 	addi	sp,sp,-8
1000497c:	dfc00115 	stw	ra,4(sp)
10004980:	df000015 	stw	fp,0(sp)
10004984:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10004988:	00840034 	movhi	r2,4096
1000498c:	109bab04 	addi	r2,r2,28332
10004990:	10800017 	ldw	r2,0(r2)
10004994:	10000526 	beq	r2,zero,100049ac <alt_get_errno+0x34>
10004998:	00840034 	movhi	r2,4096
1000499c:	109bab04 	addi	r2,r2,28332
100049a0:	10800017 	ldw	r2,0(r2)
100049a4:	103ee83a 	callr	r2
100049a8:	00000206 	br	100049b4 <alt_get_errno+0x3c>
100049ac:	00840074 	movhi	r2,4097
100049b0:	10a24e04 	addi	r2,r2,-30408
}
100049b4:	e037883a 	mov	sp,fp
100049b8:	dfc00117 	ldw	ra,4(sp)
100049bc:	df000017 	ldw	fp,0(sp)
100049c0:	dec00204 	addi	sp,sp,8
100049c4:	f800283a 	ret

100049c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100049c8:	defffb04 	addi	sp,sp,-20
100049cc:	dfc00415 	stw	ra,16(sp)
100049d0:	df000315 	stw	fp,12(sp)
100049d4:	dc000215 	stw	r16,8(sp)
100049d8:	df000304 	addi	fp,sp,12
100049dc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100049e0:	e0bffe17 	ldw	r2,-8(fp)
100049e4:	10800217 	ldw	r2,8(r2)
100049e8:	10d00034 	orhi	r3,r2,16384
100049ec:	e0bffe17 	ldw	r2,-8(fp)
100049f0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100049f4:	e03ffd15 	stw	zero,-12(fp)
100049f8:	00002306 	br	10004a88 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100049fc:	04040034 	movhi	r16,4096
10004a00:	84172a04 	addi	r16,r16,23720
10004a04:	e0bffd17 	ldw	r2,-12(fp)
10004a08:	1009883a 	mov	r4,r2
10004a0c:	01400304 	movi	r5,12
10004a10:	0002d5c0 	call	10002d5c <__mulsi3>
10004a14:	8085883a 	add	r2,r16,r2
10004a18:	10c00017 	ldw	r3,0(r2)
10004a1c:	e0bffe17 	ldw	r2,-8(fp)
10004a20:	10800017 	ldw	r2,0(r2)
10004a24:	1880151e 	bne	r3,r2,10004a7c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004a28:	04040034 	movhi	r16,4096
10004a2c:	84172a04 	addi	r16,r16,23720
10004a30:	e0bffd17 	ldw	r2,-12(fp)
10004a34:	1009883a 	mov	r4,r2
10004a38:	01400304 	movi	r5,12
10004a3c:	0002d5c0 	call	10002d5c <__mulsi3>
10004a40:	8085883a 	add	r2,r16,r2
10004a44:	10800204 	addi	r2,r2,8
10004a48:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10004a4c:	10000b0e 	bge	r2,zero,10004a7c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10004a50:	e13ffd17 	ldw	r4,-12(fp)
10004a54:	01400304 	movi	r5,12
10004a58:	0002d5c0 	call	10002d5c <__mulsi3>
10004a5c:	1007883a 	mov	r3,r2
10004a60:	00840034 	movhi	r2,4096
10004a64:	10972a04 	addi	r2,r2,23720
10004a68:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004a6c:	e0bffe17 	ldw	r2,-8(fp)
10004a70:	18800226 	beq	r3,r2,10004a7c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10004a74:	00bffcc4 	movi	r2,-13
10004a78:	00000a06 	br	10004aa4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10004a7c:	e0bffd17 	ldw	r2,-12(fp)
10004a80:	10800044 	addi	r2,r2,1
10004a84:	e0bffd15 	stw	r2,-12(fp)
10004a88:	00840034 	movhi	r2,4096
10004a8c:	109baa04 	addi	r2,r2,28328
10004a90:	10800017 	ldw	r2,0(r2)
10004a94:	1007883a 	mov	r3,r2
10004a98:	e0bffd17 	ldw	r2,-12(fp)
10004a9c:	18bfd72e 	bgeu	r3,r2,100049fc <__alt_data_end+0xf80049fc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10004aa0:	0005883a 	mov	r2,zero
}
10004aa4:	e6ffff04 	addi	sp,fp,-4
10004aa8:	dfc00217 	ldw	ra,8(sp)
10004aac:	df000117 	ldw	fp,4(sp)
10004ab0:	dc000017 	ldw	r16,0(sp)
10004ab4:	dec00304 	addi	sp,sp,12
10004ab8:	f800283a 	ret

10004abc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10004abc:	defff604 	addi	sp,sp,-40
10004ac0:	dfc00915 	stw	ra,36(sp)
10004ac4:	df000815 	stw	fp,32(sp)
10004ac8:	df000804 	addi	fp,sp,32
10004acc:	e13ffd15 	stw	r4,-12(fp)
10004ad0:	e17ffe15 	stw	r5,-8(fp)
10004ad4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10004ad8:	00bfffc4 	movi	r2,-1
10004adc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10004ae0:	00bffb44 	movi	r2,-19
10004ae4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10004ae8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10004aec:	e13ffd17 	ldw	r4,-12(fp)
10004af0:	01440034 	movhi	r5,4096
10004af4:	295ba804 	addi	r5,r5,28320
10004af8:	0004dd40 	call	10004dd4 <alt_find_dev>
10004afc:	e0bff815 	stw	r2,-32(fp)
10004b00:	e0bff817 	ldw	r2,-32(fp)
10004b04:	1000051e 	bne	r2,zero,10004b1c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10004b08:	e13ffd17 	ldw	r4,-12(fp)
10004b0c:	0004e640 	call	10004e64 <alt_find_file>
10004b10:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10004b14:	00800044 	movi	r2,1
10004b18:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10004b1c:	e0bff817 	ldw	r2,-32(fp)
10004b20:	10002b26 	beq	r2,zero,10004bd0 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10004b24:	e13ff817 	ldw	r4,-32(fp)
10004b28:	0004f780 	call	10004f78 <alt_get_fd>
10004b2c:	e0bff915 	stw	r2,-28(fp)
10004b30:	e0bff917 	ldw	r2,-28(fp)
10004b34:	1000030e 	bge	r2,zero,10004b44 <open+0x88>
    {
      status = index;
10004b38:	e0bff917 	ldw	r2,-28(fp)
10004b3c:	e0bffa15 	stw	r2,-24(fp)
10004b40:	00002506 	br	10004bd8 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10004b44:	e13ff917 	ldw	r4,-28(fp)
10004b48:	01400304 	movi	r5,12
10004b4c:	0002d5c0 	call	10002d5c <__mulsi3>
10004b50:	1007883a 	mov	r3,r2
10004b54:	00840034 	movhi	r2,4096
10004b58:	10972a04 	addi	r2,r2,23720
10004b5c:	1885883a 	add	r2,r3,r2
10004b60:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10004b64:	e0fffe17 	ldw	r3,-8(fp)
10004b68:	00900034 	movhi	r2,16384
10004b6c:	10bfffc4 	addi	r2,r2,-1
10004b70:	1886703a 	and	r3,r3,r2
10004b74:	e0bffc17 	ldw	r2,-16(fp)
10004b78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10004b7c:	e0bffb17 	ldw	r2,-20(fp)
10004b80:	1000051e 	bne	r2,zero,10004b98 <open+0xdc>
10004b84:	e13ffc17 	ldw	r4,-16(fp)
10004b88:	00049c80 	call	100049c8 <alt_file_locked>
10004b8c:	e0bffa15 	stw	r2,-24(fp)
10004b90:	e0bffa17 	ldw	r2,-24(fp)
10004b94:	10001016 	blt	r2,zero,10004bd8 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10004b98:	e0bff817 	ldw	r2,-32(fp)
10004b9c:	10800317 	ldw	r2,12(r2)
10004ba0:	10000826 	beq	r2,zero,10004bc4 <open+0x108>
10004ba4:	e0bff817 	ldw	r2,-32(fp)
10004ba8:	10800317 	ldw	r2,12(r2)
10004bac:	e13ffc17 	ldw	r4,-16(fp)
10004bb0:	e17ffd17 	ldw	r5,-12(fp)
10004bb4:	e1bffe17 	ldw	r6,-8(fp)
10004bb8:	e1ffff17 	ldw	r7,-4(fp)
10004bbc:	103ee83a 	callr	r2
10004bc0:	00000106 	br	10004bc8 <open+0x10c>
10004bc4:	0005883a 	mov	r2,zero
10004bc8:	e0bffa15 	stw	r2,-24(fp)
10004bcc:	00000206 	br	10004bd8 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10004bd0:	00bffb44 	movi	r2,-19
10004bd4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10004bd8:	e0bffa17 	ldw	r2,-24(fp)
10004bdc:	1000080e 	bge	r2,zero,10004c00 <open+0x144>
  {
    alt_release_fd (index);  
10004be0:	e13ff917 	ldw	r4,-28(fp)
10004be4:	00034d80 	call	100034d8 <alt_release_fd>
    ALT_ERRNO = -status;
10004be8:	00049780 	call	10004978 <alt_get_errno>
10004bec:	e0fffa17 	ldw	r3,-24(fp)
10004bf0:	00c7c83a 	sub	r3,zero,r3
10004bf4:	10c00015 	stw	r3,0(r2)
    return -1;
10004bf8:	00bfffc4 	movi	r2,-1
10004bfc:	00000106 	br	10004c04 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10004c00:	e0bff917 	ldw	r2,-28(fp)
}
10004c04:	e037883a 	mov	sp,fp
10004c08:	dfc00117 	ldw	ra,4(sp)
10004c0c:	df000017 	ldw	fp,0(sp)
10004c10:	dec00204 	addi	sp,sp,8
10004c14:	f800283a 	ret

10004c18 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10004c18:	defffa04 	addi	sp,sp,-24
10004c1c:	df000515 	stw	fp,20(sp)
10004c20:	df000504 	addi	fp,sp,20
10004c24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004c28:	0005303a 	rdctl	r2,status
10004c2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004c30:	e0fffc17 	ldw	r3,-16(fp)
10004c34:	00bfff84 	movi	r2,-2
10004c38:	1884703a 	and	r2,r3,r2
10004c3c:	1001703a 	wrctl	status,r2
  
  return context;
10004c40:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10004c44:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10004c48:	e0bfff17 	ldw	r2,-4(fp)
10004c4c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10004c50:	e0bffd17 	ldw	r2,-12(fp)
10004c54:	10800017 	ldw	r2,0(r2)
10004c58:	e0fffd17 	ldw	r3,-12(fp)
10004c5c:	18c00117 	ldw	r3,4(r3)
10004c60:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10004c64:	e0bffd17 	ldw	r2,-12(fp)
10004c68:	10800117 	ldw	r2,4(r2)
10004c6c:	e0fffd17 	ldw	r3,-12(fp)
10004c70:	18c00017 	ldw	r3,0(r3)
10004c74:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10004c78:	e0bffd17 	ldw	r2,-12(fp)
10004c7c:	e0fffd17 	ldw	r3,-12(fp)
10004c80:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10004c84:	e0bffd17 	ldw	r2,-12(fp)
10004c88:	e0fffd17 	ldw	r3,-12(fp)
10004c8c:	10c00015 	stw	r3,0(r2)
10004c90:	e0bffb17 	ldw	r2,-20(fp)
10004c94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004c98:	e0bffe17 	ldw	r2,-8(fp)
10004c9c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10004ca0:	e037883a 	mov	sp,fp
10004ca4:	df000017 	ldw	fp,0(sp)
10004ca8:	dec00104 	addi	sp,sp,4
10004cac:	f800283a 	ret

10004cb0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10004cb0:	defffb04 	addi	sp,sp,-20
10004cb4:	dfc00415 	stw	ra,16(sp)
10004cb8:	df000315 	stw	fp,12(sp)
10004cbc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10004cc0:	d0a00c17 	ldw	r2,-32720(gp)
10004cc4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10004cc8:	d0a6b217 	ldw	r2,-25912(gp)
10004ccc:	10800044 	addi	r2,r2,1
10004cd0:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10004cd4:	00002e06 	br	10004d90 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10004cd8:	e0bffd17 	ldw	r2,-12(fp)
10004cdc:	10800017 	ldw	r2,0(r2)
10004ce0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10004ce4:	e0bffd17 	ldw	r2,-12(fp)
10004ce8:	10800403 	ldbu	r2,16(r2)
10004cec:	10803fcc 	andi	r2,r2,255
10004cf0:	10000426 	beq	r2,zero,10004d04 <alt_tick+0x54>
10004cf4:	d0a6b217 	ldw	r2,-25912(gp)
10004cf8:	1000021e 	bne	r2,zero,10004d04 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10004cfc:	e0bffd17 	ldw	r2,-12(fp)
10004d00:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10004d04:	e0bffd17 	ldw	r2,-12(fp)
10004d08:	10800217 	ldw	r2,8(r2)
10004d0c:	d0e6b217 	ldw	r3,-25912(gp)
10004d10:	18801d36 	bltu	r3,r2,10004d88 <alt_tick+0xd8>
10004d14:	e0bffd17 	ldw	r2,-12(fp)
10004d18:	10800403 	ldbu	r2,16(r2)
10004d1c:	10803fcc 	andi	r2,r2,255
10004d20:	1000191e 	bne	r2,zero,10004d88 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10004d24:	e0bffd17 	ldw	r2,-12(fp)
10004d28:	10800317 	ldw	r2,12(r2)
10004d2c:	e0fffd17 	ldw	r3,-12(fp)
10004d30:	18c00517 	ldw	r3,20(r3)
10004d34:	1809883a 	mov	r4,r3
10004d38:	103ee83a 	callr	r2
10004d3c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10004d40:	e0bfff17 	ldw	r2,-4(fp)
10004d44:	1000031e 	bne	r2,zero,10004d54 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10004d48:	e13ffd17 	ldw	r4,-12(fp)
10004d4c:	0004c180 	call	10004c18 <alt_alarm_stop>
10004d50:	00000d06 	br	10004d88 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10004d54:	e0bffd17 	ldw	r2,-12(fp)
10004d58:	10c00217 	ldw	r3,8(r2)
10004d5c:	e0bfff17 	ldw	r2,-4(fp)
10004d60:	1887883a 	add	r3,r3,r2
10004d64:	e0bffd17 	ldw	r2,-12(fp)
10004d68:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10004d6c:	e0bffd17 	ldw	r2,-12(fp)
10004d70:	10c00217 	ldw	r3,8(r2)
10004d74:	d0a6b217 	ldw	r2,-25912(gp)
10004d78:	1880032e 	bgeu	r3,r2,10004d88 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10004d7c:	e0bffd17 	ldw	r2,-12(fp)
10004d80:	00c00044 	movi	r3,1
10004d84:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10004d88:	e0bffe17 	ldw	r2,-8(fp)
10004d8c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10004d90:	e0fffd17 	ldw	r3,-12(fp)
10004d94:	d0a00c04 	addi	r2,gp,-32720
10004d98:	18bfcf1e 	bne	r3,r2,10004cd8 <__alt_data_end+0xf8004cd8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10004d9c:	0001883a 	nop
}
10004da0:	e037883a 	mov	sp,fp
10004da4:	dfc00117 	ldw	ra,4(sp)
10004da8:	df000017 	ldw	fp,0(sp)
10004dac:	dec00204 	addi	sp,sp,8
10004db0:	f800283a 	ret

10004db4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
10004db4:	deffff04 	addi	sp,sp,-4
10004db8:	df000015 	stw	fp,0(sp)
10004dbc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10004dc0:	000170fa 	wrctl	ienable,zero
}
10004dc4:	e037883a 	mov	sp,fp
10004dc8:	df000017 	ldw	fp,0(sp)
10004dcc:	dec00104 	addi	sp,sp,4
10004dd0:	f800283a 	ret

10004dd4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10004dd4:	defffa04 	addi	sp,sp,-24
10004dd8:	dfc00515 	stw	ra,20(sp)
10004ddc:	df000415 	stw	fp,16(sp)
10004de0:	df000404 	addi	fp,sp,16
10004de4:	e13ffe15 	stw	r4,-8(fp)
10004de8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10004dec:	e0bfff17 	ldw	r2,-4(fp)
10004df0:	10800017 	ldw	r2,0(r2)
10004df4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10004df8:	e13ffe17 	ldw	r4,-8(fp)
10004dfc:	00002f80 	call	100002f8 <strlen>
10004e00:	10800044 	addi	r2,r2,1
10004e04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10004e08:	00000d06 	br	10004e40 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10004e0c:	e0bffc17 	ldw	r2,-16(fp)
10004e10:	10c00217 	ldw	r3,8(r2)
10004e14:	e0bffd17 	ldw	r2,-12(fp)
10004e18:	1809883a 	mov	r4,r3
10004e1c:	e17ffe17 	ldw	r5,-8(fp)
10004e20:	100d883a 	mov	r6,r2
10004e24:	00050980 	call	10005098 <memcmp>
10004e28:	1000021e 	bne	r2,zero,10004e34 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10004e2c:	e0bffc17 	ldw	r2,-16(fp)
10004e30:	00000706 	br	10004e50 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10004e34:	e0bffc17 	ldw	r2,-16(fp)
10004e38:	10800017 	ldw	r2,0(r2)
10004e3c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10004e40:	e0fffc17 	ldw	r3,-16(fp)
10004e44:	e0bfff17 	ldw	r2,-4(fp)
10004e48:	18bff01e 	bne	r3,r2,10004e0c <__alt_data_end+0xf8004e0c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10004e4c:	0005883a 	mov	r2,zero
}
10004e50:	e037883a 	mov	sp,fp
10004e54:	dfc00117 	ldw	ra,4(sp)
10004e58:	df000017 	ldw	fp,0(sp)
10004e5c:	dec00204 	addi	sp,sp,8
10004e60:	f800283a 	ret

10004e64 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10004e64:	defffb04 	addi	sp,sp,-20
10004e68:	dfc00415 	stw	ra,16(sp)
10004e6c:	df000315 	stw	fp,12(sp)
10004e70:	df000304 	addi	fp,sp,12
10004e74:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10004e78:	00840034 	movhi	r2,4096
10004e7c:	109ba604 	addi	r2,r2,28312
10004e80:	10800017 	ldw	r2,0(r2)
10004e84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10004e88:	00003106 	br	10004f50 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10004e8c:	e0bffd17 	ldw	r2,-12(fp)
10004e90:	10800217 	ldw	r2,8(r2)
10004e94:	1009883a 	mov	r4,r2
10004e98:	00002f80 	call	100002f8 <strlen>
10004e9c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10004ea0:	e0bffd17 	ldw	r2,-12(fp)
10004ea4:	10c00217 	ldw	r3,8(r2)
10004ea8:	e0bffe17 	ldw	r2,-8(fp)
10004eac:	10bfffc4 	addi	r2,r2,-1
10004eb0:	1885883a 	add	r2,r3,r2
10004eb4:	10800003 	ldbu	r2,0(r2)
10004eb8:	10803fcc 	andi	r2,r2,255
10004ebc:	1080201c 	xori	r2,r2,128
10004ec0:	10bfe004 	addi	r2,r2,-128
10004ec4:	10800bd8 	cmpnei	r2,r2,47
10004ec8:	1000031e 	bne	r2,zero,10004ed8 <alt_find_file+0x74>
    {
      len -= 1;
10004ecc:	e0bffe17 	ldw	r2,-8(fp)
10004ed0:	10bfffc4 	addi	r2,r2,-1
10004ed4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10004ed8:	e0bffe17 	ldw	r2,-8(fp)
10004edc:	e0ffff17 	ldw	r3,-4(fp)
10004ee0:	1885883a 	add	r2,r3,r2
10004ee4:	10800003 	ldbu	r2,0(r2)
10004ee8:	10803fcc 	andi	r2,r2,255
10004eec:	1080201c 	xori	r2,r2,128
10004ef0:	10bfe004 	addi	r2,r2,-128
10004ef4:	10800be0 	cmpeqi	r2,r2,47
10004ef8:	1000081e 	bne	r2,zero,10004f1c <alt_find_file+0xb8>
10004efc:	e0bffe17 	ldw	r2,-8(fp)
10004f00:	e0ffff17 	ldw	r3,-4(fp)
10004f04:	1885883a 	add	r2,r3,r2
10004f08:	10800003 	ldbu	r2,0(r2)
10004f0c:	10803fcc 	andi	r2,r2,255
10004f10:	1080201c 	xori	r2,r2,128
10004f14:	10bfe004 	addi	r2,r2,-128
10004f18:	10000a1e 	bne	r2,zero,10004f44 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10004f1c:	e0bffd17 	ldw	r2,-12(fp)
10004f20:	10c00217 	ldw	r3,8(r2)
10004f24:	e0bffe17 	ldw	r2,-8(fp)
10004f28:	1809883a 	mov	r4,r3
10004f2c:	e17fff17 	ldw	r5,-4(fp)
10004f30:	100d883a 	mov	r6,r2
10004f34:	00050980 	call	10005098 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10004f38:	1000021e 	bne	r2,zero,10004f44 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10004f3c:	e0bffd17 	ldw	r2,-12(fp)
10004f40:	00000806 	br	10004f64 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10004f44:	e0bffd17 	ldw	r2,-12(fp)
10004f48:	10800017 	ldw	r2,0(r2)
10004f4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10004f50:	e0fffd17 	ldw	r3,-12(fp)
10004f54:	00840034 	movhi	r2,4096
10004f58:	109ba604 	addi	r2,r2,28312
10004f5c:	18bfcb1e 	bne	r3,r2,10004e8c <__alt_data_end+0xf8004e8c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10004f60:	0005883a 	mov	r2,zero
}
10004f64:	e037883a 	mov	sp,fp
10004f68:	dfc00117 	ldw	ra,4(sp)
10004f6c:	df000017 	ldw	fp,0(sp)
10004f70:	dec00204 	addi	sp,sp,8
10004f74:	f800283a 	ret

10004f78 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10004f78:	defffa04 	addi	sp,sp,-24
10004f7c:	dfc00515 	stw	ra,20(sp)
10004f80:	df000415 	stw	fp,16(sp)
10004f84:	dc000315 	stw	r16,12(sp)
10004f88:	df000404 	addi	fp,sp,16
10004f8c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10004f90:	00bffa04 	movi	r2,-24
10004f94:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10004f98:	e03ffc15 	stw	zero,-16(fp)
10004f9c:	00002106 	br	10005024 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10004fa0:	04040034 	movhi	r16,4096
10004fa4:	84172a04 	addi	r16,r16,23720
10004fa8:	e0bffc17 	ldw	r2,-16(fp)
10004fac:	1009883a 	mov	r4,r2
10004fb0:	01400304 	movi	r5,12
10004fb4:	0002d5c0 	call	10002d5c <__mulsi3>
10004fb8:	8085883a 	add	r2,r16,r2
10004fbc:	10800017 	ldw	r2,0(r2)
10004fc0:	1000151e 	bne	r2,zero,10005018 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10004fc4:	04040034 	movhi	r16,4096
10004fc8:	84172a04 	addi	r16,r16,23720
10004fcc:	e0bffc17 	ldw	r2,-16(fp)
10004fd0:	1009883a 	mov	r4,r2
10004fd4:	01400304 	movi	r5,12
10004fd8:	0002d5c0 	call	10002d5c <__mulsi3>
10004fdc:	8085883a 	add	r2,r16,r2
10004fe0:	e0fffe17 	ldw	r3,-8(fp)
10004fe4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10004fe8:	00840034 	movhi	r2,4096
10004fec:	109baa04 	addi	r2,r2,28328
10004ff0:	10c00017 	ldw	r3,0(r2)
10004ff4:	e0bffc17 	ldw	r2,-16(fp)
10004ff8:	1880040e 	bge	r3,r2,1000500c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10004ffc:	00840034 	movhi	r2,4096
10005000:	109baa04 	addi	r2,r2,28328
10005004:	e0fffc17 	ldw	r3,-16(fp)
10005008:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000500c:	e0bffc17 	ldw	r2,-16(fp)
10005010:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10005014:	00000606 	br	10005030 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10005018:	e0bffc17 	ldw	r2,-16(fp)
1000501c:	10800044 	addi	r2,r2,1
10005020:	e0bffc15 	stw	r2,-16(fp)
10005024:	e0bffc17 	ldw	r2,-16(fp)
10005028:	10800810 	cmplti	r2,r2,32
1000502c:	103fdc1e 	bne	r2,zero,10004fa0 <__alt_data_end+0xf8004fa0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10005030:	e0bffd17 	ldw	r2,-12(fp)
}
10005034:	e6ffff04 	addi	sp,fp,-4
10005038:	dfc00217 	ldw	ra,8(sp)
1000503c:	df000117 	ldw	fp,4(sp)
10005040:	dc000017 	ldw	r16,0(sp)
10005044:	dec00304 	addi	sp,sp,12
10005048:	f800283a 	ret

1000504c <atexit>:
1000504c:	200b883a 	mov	r5,r4
10005050:	000d883a 	mov	r6,zero
10005054:	0009883a 	mov	r4,zero
10005058:	000f883a 	mov	r7,zero
1000505c:	00051141 	jmpi	10005114 <__register_exitproc>

10005060 <exit>:
10005060:	defffe04 	addi	sp,sp,-8
10005064:	000b883a 	mov	r5,zero
10005068:	dc000015 	stw	r16,0(sp)
1000506c:	dfc00115 	stw	ra,4(sp)
10005070:	2021883a 	mov	r16,r4
10005074:	00052300 	call	10005230 <__call_exitprocs>
10005078:	00840034 	movhi	r2,4096
1000507c:	109ba204 	addi	r2,r2,28296
10005080:	11000017 	ldw	r4,0(r2)
10005084:	20800f17 	ldw	r2,60(r4)
10005088:	10000126 	beq	r2,zero,10005090 <exit+0x30>
1000508c:	103ee83a 	callr	r2
10005090:	8009883a 	mov	r4,r16
10005094:	00053d40 	call	100053d4 <_exit>

10005098 <memcmp>:
10005098:	01c000c4 	movi	r7,3
1000509c:	3980192e 	bgeu	r7,r6,10005104 <memcmp+0x6c>
100050a0:	2144b03a 	or	r2,r4,r5
100050a4:	11c4703a 	and	r2,r2,r7
100050a8:	10000f26 	beq	r2,zero,100050e8 <memcmp+0x50>
100050ac:	21c00003 	ldbu	r7,0(r4)
100050b0:	28800003 	ldbu	r2,0(r5)
100050b4:	3880151e 	bne	r7,r2,1000510c <memcmp+0x74>
100050b8:	30ffff84 	addi	r3,r6,-2
100050bc:	01bfffc4 	movi	r6,-1
100050c0:	00000406 	br	100050d4 <memcmp+0x3c>
100050c4:	21c00003 	ldbu	r7,0(r4)
100050c8:	28800003 	ldbu	r2,0(r5)
100050cc:	18ffffc4 	addi	r3,r3,-1
100050d0:	38800e1e 	bne	r7,r2,1000510c <memcmp+0x74>
100050d4:	21000044 	addi	r4,r4,1
100050d8:	29400044 	addi	r5,r5,1
100050dc:	19bff91e 	bne	r3,r6,100050c4 <__alt_data_end+0xf80050c4>
100050e0:	0005883a 	mov	r2,zero
100050e4:	f800283a 	ret
100050e8:	20c00017 	ldw	r3,0(r4)
100050ec:	28800017 	ldw	r2,0(r5)
100050f0:	1880041e 	bne	r3,r2,10005104 <memcmp+0x6c>
100050f4:	31bfff04 	addi	r6,r6,-4
100050f8:	21000104 	addi	r4,r4,4
100050fc:	29400104 	addi	r5,r5,4
10005100:	39bff936 	bltu	r7,r6,100050e8 <__alt_data_end+0xf80050e8>
10005104:	303fe91e 	bne	r6,zero,100050ac <__alt_data_end+0xf80050ac>
10005108:	003ff506 	br	100050e0 <__alt_data_end+0xf80050e0>
1000510c:	3885c83a 	sub	r2,r7,r2
10005110:	f800283a 	ret

10005114 <__register_exitproc>:
10005114:	defffa04 	addi	sp,sp,-24
10005118:	00840034 	movhi	r2,4096
1000511c:	109ba204 	addi	r2,r2,28296
10005120:	dc000315 	stw	r16,12(sp)
10005124:	14000017 	ldw	r16,0(r2)
10005128:	dc400415 	stw	r17,16(sp)
1000512c:	dfc00515 	stw	ra,20(sp)
10005130:	80805217 	ldw	r2,328(r16)
10005134:	2023883a 	mov	r17,r4
10005138:	10003a26 	beq	r2,zero,10005224 <__register_exitproc+0x110>
1000513c:	10c00117 	ldw	r3,4(r2)
10005140:	020007c4 	movi	r8,31
10005144:	40c0190e 	bge	r8,r3,100051ac <__register_exitproc+0x98>
10005148:	00800034 	movhi	r2,0
1000514c:	10800004 	addi	r2,r2,0
10005150:	1000061e 	bne	r2,zero,1000516c <__register_exitproc+0x58>
10005154:	00bfffc4 	movi	r2,-1
10005158:	dfc00517 	ldw	ra,20(sp)
1000515c:	dc400417 	ldw	r17,16(sp)
10005160:	dc000317 	ldw	r16,12(sp)
10005164:	dec00604 	addi	sp,sp,24
10005168:	f800283a 	ret
1000516c:	01006404 	movi	r4,400
10005170:	d9400015 	stw	r5,0(sp)
10005174:	d9800115 	stw	r6,4(sp)
10005178:	d9c00215 	stw	r7,8(sp)
1000517c:	00000000 	call	10000000 <__alt_mem_sdram>
10005180:	d9400017 	ldw	r5,0(sp)
10005184:	d9800117 	ldw	r6,4(sp)
10005188:	d9c00217 	ldw	r7,8(sp)
1000518c:	103ff126 	beq	r2,zero,10005154 <__alt_data_end+0xf8005154>
10005190:	81005217 	ldw	r4,328(r16)
10005194:	10000115 	stw	zero,4(r2)
10005198:	0007883a 	mov	r3,zero
1000519c:	11000015 	stw	r4,0(r2)
100051a0:	80805215 	stw	r2,328(r16)
100051a4:	10006215 	stw	zero,392(r2)
100051a8:	10006315 	stw	zero,396(r2)
100051ac:	88000d1e 	bne	r17,zero,100051e4 <__register_exitproc+0xd0>
100051b0:	19000084 	addi	r4,r3,2
100051b4:	2109883a 	add	r4,r4,r4
100051b8:	18c00044 	addi	r3,r3,1
100051bc:	2109883a 	add	r4,r4,r4
100051c0:	10c00115 	stw	r3,4(r2)
100051c4:	1105883a 	add	r2,r2,r4
100051c8:	11400015 	stw	r5,0(r2)
100051cc:	0005883a 	mov	r2,zero
100051d0:	dfc00517 	ldw	ra,20(sp)
100051d4:	dc400417 	ldw	r17,16(sp)
100051d8:	dc000317 	ldw	r16,12(sp)
100051dc:	dec00604 	addi	sp,sp,24
100051e0:	f800283a 	ret
100051e4:	18c9883a 	add	r4,r3,r3
100051e8:	2109883a 	add	r4,r4,r4
100051ec:	1109883a 	add	r4,r2,r4
100051f0:	21802215 	stw	r6,136(r4)
100051f4:	01800044 	movi	r6,1
100051f8:	12006217 	ldw	r8,392(r2)
100051fc:	30cc983a 	sll	r6,r6,r3
10005200:	4190b03a 	or	r8,r8,r6
10005204:	12006215 	stw	r8,392(r2)
10005208:	21c04215 	stw	r7,264(r4)
1000520c:	01000084 	movi	r4,2
10005210:	893fe71e 	bne	r17,r4,100051b0 <__alt_data_end+0xf80051b0>
10005214:	11006317 	ldw	r4,396(r2)
10005218:	218cb03a 	or	r6,r4,r6
1000521c:	11806315 	stw	r6,396(r2)
10005220:	003fe306 	br	100051b0 <__alt_data_end+0xf80051b0>
10005224:	80805304 	addi	r2,r16,332
10005228:	80805215 	stw	r2,328(r16)
1000522c:	003fc306 	br	1000513c <__alt_data_end+0xf800513c>

10005230 <__call_exitprocs>:
10005230:	00840034 	movhi	r2,4096
10005234:	109ba204 	addi	r2,r2,28296
10005238:	10800017 	ldw	r2,0(r2)
1000523c:	defff304 	addi	sp,sp,-52
10005240:	df000b15 	stw	fp,44(sp)
10005244:	d8800015 	stw	r2,0(sp)
10005248:	10805204 	addi	r2,r2,328
1000524c:	dd400815 	stw	r21,32(sp)
10005250:	dfc00c15 	stw	ra,48(sp)
10005254:	ddc00a15 	stw	r23,40(sp)
10005258:	dd800915 	stw	r22,36(sp)
1000525c:	dd000715 	stw	r20,28(sp)
10005260:	dcc00615 	stw	r19,24(sp)
10005264:	dc800515 	stw	r18,20(sp)
10005268:	dc400415 	stw	r17,16(sp)
1000526c:	dc000315 	stw	r16,12(sp)
10005270:	d9000115 	stw	r4,4(sp)
10005274:	2839883a 	mov	fp,r5
10005278:	d8800215 	stw	r2,8(sp)
1000527c:	057fffc4 	movi	r21,-1
10005280:	d8800017 	ldw	r2,0(sp)
10005284:	14805217 	ldw	r18,328(r2)
10005288:	90001826 	beq	r18,zero,100052ec <__call_exitprocs+0xbc>
1000528c:	ddc00217 	ldw	r23,8(sp)
10005290:	90c00117 	ldw	r3,4(r18)
10005294:	1c3fffc4 	addi	r16,r3,-1
10005298:	80001116 	blt	r16,zero,100052e0 <__call_exitprocs+0xb0>
1000529c:	18c00044 	addi	r3,r3,1
100052a0:	8427883a 	add	r19,r16,r16
100052a4:	18c7883a 	add	r3,r3,r3
100052a8:	95802204 	addi	r22,r18,136
100052ac:	9ce7883a 	add	r19,r19,r19
100052b0:	18c7883a 	add	r3,r3,r3
100052b4:	b4e7883a 	add	r19,r22,r19
100052b8:	90e3883a 	add	r17,r18,r3
100052bc:	e0001726 	beq	fp,zero,1000531c <__call_exitprocs+0xec>
100052c0:	8c87c83a 	sub	r3,r17,r18
100052c4:	b0c7883a 	add	r3,r22,r3
100052c8:	18c01e17 	ldw	r3,120(r3)
100052cc:	1f001326 	beq	r3,fp,1000531c <__call_exitprocs+0xec>
100052d0:	843fffc4 	addi	r16,r16,-1
100052d4:	9cffff04 	addi	r19,r19,-4
100052d8:	8c7fff04 	addi	r17,r17,-4
100052dc:	857ff71e 	bne	r16,r21,100052bc <__alt_data_end+0xf80052bc>
100052e0:	00800034 	movhi	r2,0
100052e4:	10800004 	addi	r2,r2,0
100052e8:	10002a1e 	bne	r2,zero,10005394 <__call_exitprocs+0x164>
100052ec:	dfc00c17 	ldw	ra,48(sp)
100052f0:	df000b17 	ldw	fp,44(sp)
100052f4:	ddc00a17 	ldw	r23,40(sp)
100052f8:	dd800917 	ldw	r22,36(sp)
100052fc:	dd400817 	ldw	r21,32(sp)
10005300:	dd000717 	ldw	r20,28(sp)
10005304:	dcc00617 	ldw	r19,24(sp)
10005308:	dc800517 	ldw	r18,20(sp)
1000530c:	dc400417 	ldw	r17,16(sp)
10005310:	dc000317 	ldw	r16,12(sp)
10005314:	dec00d04 	addi	sp,sp,52
10005318:	f800283a 	ret
1000531c:	91000117 	ldw	r4,4(r18)
10005320:	88c00017 	ldw	r3,0(r17)
10005324:	213fffc4 	addi	r4,r4,-1
10005328:	24001526 	beq	r4,r16,10005380 <__call_exitprocs+0x150>
1000532c:	88000015 	stw	zero,0(r17)
10005330:	183fe726 	beq	r3,zero,100052d0 <__alt_data_end+0xf80052d0>
10005334:	00800044 	movi	r2,1
10005338:	1408983a 	sll	r4,r2,r16
1000533c:	91406217 	ldw	r5,392(r18)
10005340:	95000117 	ldw	r20,4(r18)
10005344:	214a703a 	and	r5,r4,r5
10005348:	28000b26 	beq	r5,zero,10005378 <__call_exitprocs+0x148>
1000534c:	91406317 	ldw	r5,396(r18)
10005350:	2148703a 	and	r4,r4,r5
10005354:	20000c1e 	bne	r4,zero,10005388 <__call_exitprocs+0x158>
10005358:	99400017 	ldw	r5,0(r19)
1000535c:	d9000117 	ldw	r4,4(sp)
10005360:	183ee83a 	callr	r3
10005364:	90c00117 	ldw	r3,4(r18)
10005368:	1d3fc51e 	bne	r3,r20,10005280 <__alt_data_end+0xf8005280>
1000536c:	b8c00017 	ldw	r3,0(r23)
10005370:	1cbfd726 	beq	r3,r18,100052d0 <__alt_data_end+0xf80052d0>
10005374:	003fc206 	br	10005280 <__alt_data_end+0xf8005280>
10005378:	183ee83a 	callr	r3
1000537c:	003ff906 	br	10005364 <__alt_data_end+0xf8005364>
10005380:	94000115 	stw	r16,4(r18)
10005384:	003fea06 	br	10005330 <__alt_data_end+0xf8005330>
10005388:	99000017 	ldw	r4,0(r19)
1000538c:	183ee83a 	callr	r3
10005390:	003ff406 	br	10005364 <__alt_data_end+0xf8005364>
10005394:	90c00117 	ldw	r3,4(r18)
10005398:	1800081e 	bne	r3,zero,100053bc <__call_exitprocs+0x18c>
1000539c:	90c00017 	ldw	r3,0(r18)
100053a0:	18000a26 	beq	r3,zero,100053cc <__call_exitprocs+0x19c>
100053a4:	9009883a 	mov	r4,r18
100053a8:	b8c00015 	stw	r3,0(r23)
100053ac:	00000000 	call	10000000 <__alt_mem_sdram>
100053b0:	bc800017 	ldw	r18,0(r23)
100053b4:	903fb61e 	bne	r18,zero,10005290 <__alt_data_end+0xf8005290>
100053b8:	003fcc06 	br	100052ec <__alt_data_end+0xf80052ec>
100053bc:	90c00017 	ldw	r3,0(r18)
100053c0:	902f883a 	mov	r23,r18
100053c4:	1825883a 	mov	r18,r3
100053c8:	003ffa06 	br	100053b4 <__alt_data_end+0xf80053b4>
100053cc:	0007883a 	mov	r3,zero
100053d0:	003ffb06 	br	100053c0 <__alt_data_end+0xf80053c0>

100053d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100053d4:	defffd04 	addi	sp,sp,-12
100053d8:	df000215 	stw	fp,8(sp)
100053dc:	df000204 	addi	fp,sp,8
100053e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100053e4:	0001883a 	nop
100053e8:	e0bfff17 	ldw	r2,-4(fp)
100053ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100053f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100053f4:	10000226 	beq	r2,zero,10005400 <_exit+0x2c>
    ALT_SIM_FAIL();
100053f8:	002af070 	cmpltui	zero,zero,43969
100053fc:	00000106 	br	10005404 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10005400:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10005404:	003fff06 	br	10005404 <__alt_data_end+0xf8005404>
