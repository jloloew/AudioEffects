
final_project_app.elf:     file format elf32-littlenios2
final_project_app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0001015c memsz 0x0001015c flags r-x
    LOAD off    0x0001117c vaddr 0x1001017c paddr 0x10011c70 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013764 vaddr 0x10013764 paddr 0x10013764 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fc98  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000328  1000fe54  1000fe54  00010e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  1001017c  10011c70  0001117c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  10013764  10013764  00013764  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00012c70  2**0
                  CONTENTS
  7 .sdram        00000000  100138c0  100138c0  00012c70  2**0
                  CONTENTS
  8 .comment      00000039  00000000  00000000  00012c70  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cc8  00000000  00000000  00012cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000232be  00000000  00000000  00013978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008cdd  00000000  00000000  00036c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ad4c  00000000  00000000  0003f913  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002478  00000000  00000000  0004a660  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003414  00000000  00000000  0004cad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016f95  00000000  00000000  0004feec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00066e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001338  00000000  00000000  00066e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006b83b  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006b83e  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006b84a  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006b84b  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006b84c  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006b850  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006b854  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006b858  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006b863  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006b86e  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0006b879  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003c  00000000  00000000  0006b88a  2**0
                  CONTENTS, READONLY
 30 .jdi          000047d7  00000000  00000000  0006b8c6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00063454  00000000  00000000  0007009d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
1000fe54 l    d  .rodata	00000000 .rodata
1001017c l    d  .rwdata	00000000 .rwdata
10013764 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100138c0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_app_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 audIO.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000fec2 l     O .rodata	00000010 zeroes.4155
1000fed2 l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10003300 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10004dd8 l     F .text	00000008 __fp_lock
10004de0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1001017c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100105c0 l     O .rwdata	00000020 lc_ctype_charset
100105a0 l     O .rwdata	00000020 lc_message_charset
100105e0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1000ff04 l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000779c l     F .text	000000fc __sprint_r.part.0
10010038 l     O .rodata	00000010 blanks.4099
10010028 l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000af10 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000d7d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000d8f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000d9ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000dab0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000dba8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000dc8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000de6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10011c60 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000e0e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000e228 l     F .text	00000038 alt_dev_reg
10010bc8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000e500 l     F .text	000001fc altera_avalon_jtag_uart_irq
1000e6fc l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000ee70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000f2fc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000f454 l     F .text	00000050 alt_get_errno
1000f4a4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
100072f0 g     F .text	00000074 _mprec_log10
100073dc g     F .text	00000088 __any_on
10009710 g     F .text	00000064 _isatty_r
1000ff10 g     O .rodata	00000028 __mprec_tinytens
1000ddb4 g     F .text	00000078 alt_main
100137c0 g     O .bss	00000100 alt_irq
10009774 g     F .text	0000006c _lseek_r
10011c70 g       *ABS*	00000000 __flash_rwdata_start
1000c264 g     F .text	00000084 .hidden __eqdf2
10000478 g     F .text	00000060 alt_up_audio_read_fifo_avail
100138c0 g       *ABS*	00000000 __alt_heap_start
10001014 g     F .text	0000003c printf
100004d8 g     F .text	00000068 alt_up_audio_record_r
1000a088 g     F .text	0000009c _wcrtomb_r
10007608 g     F .text	0000005c __sseek
10004e84 g     F .text	0000019c __sinit
10009eec g     F .text	00000180 __swbuf_r
100056e8 g     F .text	00000070 _setlocale_r
10004df4 g     F .text	00000078 __sfmoreglue
100009a0 g     F .text	00000044 audio_disable_read_interrupt
1000de4c g     F .text	00000020 __malloc_unlock
100003f0 g     F .text	00000088 alt_up_audio_reset_audio_core
10000d10 g     F .text	00000044 audio_read_fifo_head
10000d54 g     F .text	00000050 audio_write_fifo_head
100097e0 g     F .text	0000013c memmove
10004e6c g     F .text	00000018 _cleanup
10000eb4 g     F .text	0000005c audio_play_r
1000643c g     F .text	000000a8 _Balloc
10000da4 g     F .text	0000005c audio_record_r
1000c2e8 g     F .text	000000d8 .hidden __gtdf2
1000f890 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100091fc g     F .text	00000068 _fstat_r
1001377c g     O .bss	00000004 errno
10007584 g     F .text	00000008 __seofread
100003b0 g     F .text	00000040 alt_up_audio_write_interrupt_pending
10013784 g     O .bss	00000004 alt_argv
10019c28 g       *ABS*	00000000 _gp
10000c28 g     F .text	000000e8 audio_write_fifo
10010a48 g     O .rwdata	00000180 alt_fd_list
1000d91c g     F .text	00000090 alt_find_dev
1000621c g     F .text	0000010c memcpy
10004de8 g     F .text	0000000c _cleanup_r
1000d5b4 g     F .text	000000d0 .hidden __floatsidf
1000f3dc g     F .text	00000078 alt_io_redirect
1000c3c0 g     F .text	000000ec .hidden __ltdf2
1000fe54 g       *ABS*	00000000 __DTOR_END__
10011c2c g     O .rwdata	00000004 AUDIO_CONFIG
10000a1c g     F .text	00000038 audio_read_interrupt_pending
10007464 g     F .text	00000068 __fpclassifyd
10007250 g     F .text	000000a0 __ratio
10008cf8 g     F .text	00000024 __vfiprintf_internal
100008b4 g     F .text	00000050 alt_up_audio_read_fifo_head
1000e8f4 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10000fe8 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000b014 g     F .text	00000008 .hidden __udivsi3
1000db00 g     F .text	000000a8 isatty
1000ff60 g     O .rodata	000000c8 __mprec_tens
10005758 g     F .text	0000000c __locale_charset
10013778 g     O .bss	00000004 __malloc_top_pad
10011c38 g     O .rwdata	00000004 __mb_cur_max
10005788 g     F .text	0000000c _localeconv_r
10009264 g     F .text	000004ac __sfvwrite_r
1000686c g     F .text	0000003c __i2b
100074cc g     F .text	00000064 _sbrk_r
1000991c g     F .text	0000006c _read_r
10011c58 g     O .rwdata	00000004 alt_max_fd
10000904 g     F .text	0000005c alt_up_audio_write_fifo_head
10008ec4 g     F .text	00000128 _fclose_r
10004da8 g     F .text	00000030 fflush
10013774 g     O .bss	00000004 __malloc_max_sbrked_mem
1000b04c g     F .text	0000087c .hidden __adddf3
1000701c g     F .text	000000f0 __b2d
1000a8dc g     F .text	00000634 .hidden __umoddi3
1000dcdc g     F .text	000000d8 lseek
10011c30 g     O .rwdata	00000004 _global_impure_ptr
10009988 g     F .text	00000564 _realloc_r
100138c0 g       *ABS*	00000000 __bss_end
1000f20c g     F .text	000000f0 alt_iic_isr_register
1000f78c g     F .text	00000104 alt_tick
1000a288 g     F .text	00000654 .hidden __udivdi3
10009000 g     F .text	00000184 _fputwc_r
1000ff38 g     O .rodata	00000028 __mprec_bigtens
10006650 g     F .text	00000104 __s2b
1000d684 g     F .text	000000a0 .hidden __floatunsidf
10006dac g     F .text	00000060 __mcmp
100001f8 g     F .text	00000040 alt_up_audio_open_dev
1000514c g     F .text	00000018 __fp_lock_all
1000f1c0 g     F .text	0000004c alt_ic_irq_enabled
10000608 g     F .text	00000068 alt_up_audio_play_r
1000f6f4 g     F .text	00000098 alt_alarm_stop
1001378c g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10010a20 g     O .rwdata	00000028 alt_dev_null
1000ee54 g     F .text	0000001c alt_dcache_flush_all
10006754 g     F .text	00000068 __hi0bits
10011c28 g     O .rwdata	00000004 AUDIO_DEVICE
1000d534 g     F .text	00000080 .hidden __fixdfsi
10011c70 g       *ABS*	00000000 __ram_rwdata_end
10011c50 g     O .rwdata	00000008 alt_dev_list
1000e134 g     F .text	000000f4 write
1001017c g       *ABS*	00000000 __ram_rodata_end
1000d9fc g     F .text	000000b4 fstat
1000c3c0 g     F .text	000000ec .hidden __ledf2
10000960 g     F .text	00000040 audio_enable_read_interrupt
10006b14 g     F .text	00000148 __pow5mult
100078b0 g     F .text	00001448 ___vfiprintf_internal_r
1001376c g     O .bss	00000004 __nlocale_changed
1000b01c g     F .text	00000008 .hidden __umodsi3
100138c0 g       *ABS*	00000000 end
1000e440 g     F .text	000000c0 altera_avalon_jtag_uart_init
1000fe54 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000d724 g     F .text	000000ac .hidden __clzsi2
1000eafc g     F .text	00000218 altera_avalon_jtag_uart_write
1000513c g     F .text	00000004 __sfp_lock_acquire
10006134 g     F .text	000000e8 memchr
10001050 g     F .text	00002154 ___vfprintf_internal_r
100052b8 g     F .text	000002d0 _free_r
10005764 g     F .text	00000010 __locale_mb_cur_max
1000fc7c g     F .text	000001a4 __call_exitprocs
10013768 g     O .bss	00000004 __mlocale_changed
10011c3c g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
10013790 g     O .bss	00000004 _alt_tick_rate
10000b04 g     F .text	00000058 audio_read_fifo_avail
100007b4 g     F .text	00000100 alt_up_audio_write_fifo
10006c5c g     F .text	00000150 __lshift
10013794 g     O .bss	00000004 _alt_nticks
1000debc g     F .text	000000f8 read
1000e294 g     F .text	00000048 alt_sys_init
100006d8 g     F .text	000000dc alt_up_audio_read_fifo
1000fb60 g     F .text	0000011c __register_exitproc
10000320 g     F .text	00000050 alt_up_audio_disable_write_interrupt
100068a8 g     F .text	0000026c __multiply
1000e7a0 g     F .text	00000068 altera_avalon_jtag_uart_close
1000b024 g     F .text	00000028 .hidden __mulsi3
1001017c g       *ABS*	00000000 __ram_rwdata_start
1000fe54 g       *ABS*	00000000 __ram_rodata_start
10013798 g     O .bss	00000028 __malloc_current_mallinfo
1000710c g     F .text	00000144 __d2b
1000e2dc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000f9c4 g     F .text	000000d4 alt_get_fd
10008d88 g     F .text	00000064 _close_r
100002d4 g     F .text	0000004c alt_up_audio_enable_write_interrupt
1000fae4 g     F .text	0000007c memcmp
1000e39c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100138c0 g       *ABS*	00000000 __alt_stack_base
1000e3ec g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100031c8 g     F .text	00000138 __swsetup_r
1000b8c8 g     F .text	0000099c .hidden __divdf3
10000284 g     F .text	00000050 alt_up_audio_disable_read_interrupt
10005020 g     F .text	0000011c __sfp
10007364 g     F .text	00000078 __copybits
10010618 g     O .rwdata	00000408 __malloc_av_
10005148 g     F .text	00000004 __sinit_lock_release
1000c4ac g     F .text	00000800 .hidden __muldf3
10007530 g     F .text	00000054 __sread
1000f8b0 g     F .text	00000114 alt_find_file
1000eec0 g     F .text	000000a0 alt_dev_llist_insert
1000de2c g     F .text	00000020 __malloc_lock
1000e034 g     F .text	000000b0 sbrk
10000a8c g     F .text	00000078 audio_reset_audio_core
10004b64 g     F .text	00000244 _fflush_r
10008dec g     F .text	000000d8 _calloc_r
10013764 g       *ABS*	00000000 __bss_start
10006328 g     F .text	00000114 memset
10000f6c g     F .text	0000007c main
100005a8 g     F .text	00000060 alt_up_audio_write_fifo_space
10013788 g     O .bss	00000004 alt_envp
10013770 g     O .bss	00000004 __malloc_max_total_mem
1000e33c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000a06c g     F .text	0000001c __swbuf
10007664 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10008fec g     F .text	00000014 fclose
10003528 g     F .text	0000163c _dtoa_r
10005970 g     F .text	000007c4 _malloc_r
1000a1fc g     F .text	00000030 __ascii_wctomb
10011c5c g     O .rwdata	00000004 alt_errno
10005588 g     F .text	000000a8 _fwalk
10000a54 g     F .text	00000038 audio_write_interrupt_pending
1000af80 g     F .text	00000048 .hidden __divsi3
1000517c g     F .text	0000013c _malloc_trim_r
1000fe54 g       *ABS*	00000000 __CTOR_END__
1000766c g     F .text	000000a4 strcmp
1000fe54 g       *ABS*	00000000 __flash_rodata_start
1000fe54 g       *ABS*	00000000 __DTOR_LIST__
1000c264 g     F .text	00000084 .hidden __nedf2
1000e260 g     F .text	00000034 alt_irq_init
1000dfb4 g     F .text	00000080 alt_release_fd
10010048 g     O .rodata	00000100 .hidden __clz_tab
10013764 g     O .bss	00000004 _PathLocale
1000fa98 g     F .text	00000014 atexit
10008d1c g     F .text	0000006c _write_r
100009e4 g     F .text	0000001c audio_enable_write_interrupt
10005794 g     F .text	0000001c setlocale
10011c34 g     O .rwdata	00000004 _impure_ptr
10013780 g     O .bss	00000004 alt_argc
1000efbc g     F .text	0000005c _do_dtors
10005780 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10006fbc g     F .text	00000060 __ulp
10005164 g     F .text	00000018 __fp_unlock_all
10011c48 g     O .rwdata	00000008 alt_fs_list
10000540 g     F .text	00000068 alt_up_audio_record_l
10000e00 g     F .text	0000005c audio_record_l
10000020 g       *ABS*	00000000 __ram_exceptions_start
100057b0 g     F .text	0000000c localeconv
1000f034 g     F .text	00000050 alt_ic_isr_register
10000b5c g     F .text	000000cc audio_read_fifo
10011c70 g       *ABS*	00000000 _edata
100138c0 g       *ABS*	00000000 _end
100001bc g       *ABS*	00000000 __ram_exceptions_end
1000e808 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10000670 g     F .text	00000068 alt_up_audio_play_l
1000f120 g     F .text	000000a0 alt_ic_irq_disable
1000758c g     F .text	0000007c __swrite
10011c40 g     O .rwdata	00000004 __malloc_trim_threshold
10005774 g     F .text	0000000c __locale_msgcharset
1000faac g     F .text	00000038 exit
10005630 g     F .text	000000b8 _fwalk_reent
10006e0c g     F .text	000001b0 __mdiff
1000afc8 g     F .text	0000004c .hidden __modsi3
10000e5c g     F .text	00000058 audio_write_fifo_space
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10005140 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000fe20 g     F .text	00000034 _exit
1000ed14 g     F .text	00000140 alt_alarm_start
100057bc g     F .text	000001b4 __smakebuf_r
10007710 g     F .text	0000008c strlen
1000f598 g     F .text	0000015c open
1000c2e8 g     F .text	000000d8 .hidden __gedf2
10011c44 g     O .rwdata	00000004 __wctomb
10007898 g     F .text	00000018 __sprint_r
1000f018 g     F .text	0000001c alt_icache_flush_all
10011c64 g     O .rwdata	00000004 alt_priority_mask
10000a00 g     F .text	0000001c audio_disable_write_interrupt
1000f084 g     F .text	0000009c alt_ic_irq_enable
100031a4 g     F .text	00000024 __vfprintf_internal
10000f10 g     F .text	0000005c audio_play_l
1000a22c g     F .text	0000005c _wctomb_r
1000ccac g     F .text	00000888 .hidden __subdf3
100067bc g     F .text	000000b0 __lo0bits
10011c68 g     O .rwdata	00000008 alt_alarm_list
1000ef60 g     F .text	0000005c _do_ctors
1000a124 g     F .text	000000d8 wcrtomb
1000d820 g     F .text	000000d0 close
1000dc0c g     F .text	00000080 alt_load
10000238 g     F .text	0000004c alt_up_audio_enable_read_interrupt
10009184 g     F .text	00000078 fputwc
00000000  w      *UND*	00000000 free
10005144 g     F .text	00000004 __sinit_lock_acquire
1000650c g     F .text	00000144 __multadd
100064e4 g     F .text	00000028 _Bfree
10000370 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40074 	movhi	r3,4097
10000130:	18cdf004 	addi	r3,r3,14272
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10800017 	ldw	r2,0(r2)
10000144:	01040074 	movhi	r4,4097
10000148:	210df004 	addi	r4,r4,14272
1000014c:	e0fffd17 	ldw	r3,-12(fp)
10000150:	180690fa 	slli	r3,r3,3
10000154:	20c7883a 	add	r3,r4,r3
10000158:	18c00104 	addi	r3,r3,4
1000015c:	18c00017 	ldw	r3,0(r3)
10000160:	1809883a 	mov	r4,r3
10000164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6a70a14 	ori	gp,gp,39976
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	108dd914 	ori	r2,r2,14180

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18ce3014 	ori	r3,r3,14528

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	000dc0c0 	call	1000dc0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	000ddb40 	call	1000ddb4 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
100001f8:	defffc04 	addi	sp,sp,-16
100001fc:	dfc00315 	stw	ra,12(sp)
10000200:	df000215 	stw	fp,8(sp)
10000204:	df000204 	addi	fp,sp,8
10000208:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
1000020c:	e13fff17 	ldw	r4,-4(fp)
10000210:	01440074 	movhi	r5,4097
10000214:	29471404 	addi	r5,r5,7248
10000218:	000d91c0 	call	1000d91c <alt_find_dev>
1000021c:	e0bffe15 	stw	r2,-8(fp)
  return dev;
10000220:	e0bffe17 	ldw	r2,-8(fp)
}
10000224:	e037883a 	mov	sp,fp
10000228:	dfc00117 	ldw	ra,4(sp)
1000022c:	df000017 	ldw	fp,0(sp)
10000230:	dec00204 	addi	sp,sp,8
10000234:	f800283a 	ret

10000238 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
10000238:	defffd04 	addi	sp,sp,-12
1000023c:	df000215 	stw	fp,8(sp)
10000240:	df000204 	addi	fp,sp,8
10000244:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000248:	e0bfff17 	ldw	r2,-4(fp)
1000024c:	10800a17 	ldw	r2,40(r2)
10000250:	10800037 	ldwio	r2,0(r2)
10000254:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
10000258:	e0bffe17 	ldw	r2,-8(fp)
1000025c:	10800054 	ori	r2,r2,1
10000260:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000264:	e0bfff17 	ldw	r2,-4(fp)
10000268:	10800a17 	ldw	r2,40(r2)
1000026c:	e0fffe17 	ldw	r3,-8(fp)
10000270:	10c00035 	stwio	r3,0(r2)
}
10000274:	e037883a 	mov	sp,fp
10000278:	df000017 	ldw	fp,0(sp)
1000027c:	dec00104 	addi	sp,sp,4
10000280:	f800283a 	ret

10000284 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
10000284:	defffd04 	addi	sp,sp,-12
10000288:	df000215 	stw	fp,8(sp)
1000028c:	df000204 	addi	fp,sp,8
10000290:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000294:	e0bfff17 	ldw	r2,-4(fp)
10000298:	10800a17 	ldw	r2,40(r2)
1000029c:	10800037 	ldwio	r2,0(r2)
100002a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
100002a4:	e0fffe17 	ldw	r3,-8(fp)
100002a8:	00bfff84 	movi	r2,-2
100002ac:	1884703a 	and	r2,r3,r2
100002b0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
100002b4:	e0bfff17 	ldw	r2,-4(fp)
100002b8:	10800a17 	ldw	r2,40(r2)
100002bc:	e0fffe17 	ldw	r3,-8(fp)
100002c0:	10c00035 	stwio	r3,0(r2)
}
100002c4:	e037883a 	mov	sp,fp
100002c8:	df000017 	ldw	fp,0(sp)
100002cc:	dec00104 	addi	sp,sp,4
100002d0:	f800283a 	ret

100002d4 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
100002d4:	defffd04 	addi	sp,sp,-12
100002d8:	df000215 	stw	fp,8(sp)
100002dc:	df000204 	addi	fp,sp,8
100002e0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
100002e4:	e0bfff17 	ldw	r2,-4(fp)
100002e8:	10800a17 	ldw	r2,40(r2)
100002ec:	10800037 	ldwio	r2,0(r2)
100002f0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
100002f4:	e0bffe17 	ldw	r2,-8(fp)
100002f8:	10800094 	ori	r2,r2,2
100002fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000300:	e0bfff17 	ldw	r2,-4(fp)
10000304:	10800a17 	ldw	r2,40(r2)
10000308:	e0fffe17 	ldw	r3,-8(fp)
1000030c:	10c00035 	stwio	r3,0(r2)
}
10000310:	e037883a 	mov	sp,fp
10000314:	df000017 	ldw	fp,0(sp)
10000318:	dec00104 	addi	sp,sp,4
1000031c:	f800283a 	ret

10000320 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
10000320:	defffd04 	addi	sp,sp,-12
10000324:	df000215 	stw	fp,8(sp)
10000328:	df000204 	addi	fp,sp,8
1000032c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000330:	e0bfff17 	ldw	r2,-4(fp)
10000334:	10800a17 	ldw	r2,40(r2)
10000338:	10800037 	ldwio	r2,0(r2)
1000033c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
10000340:	e0fffe17 	ldw	r3,-8(fp)
10000344:	00bfff44 	movi	r2,-3
10000348:	1884703a 	and	r2,r3,r2
1000034c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000350:	e0bfff17 	ldw	r2,-4(fp)
10000354:	10800a17 	ldw	r2,40(r2)
10000358:	e0fffe17 	ldw	r3,-8(fp)
1000035c:	10c00035 	stwio	r3,0(r2)
}
10000360:	e037883a 	mov	sp,fp
10000364:	df000017 	ldw	fp,0(sp)
10000368:	dec00104 	addi	sp,sp,4
1000036c:	f800283a 	ret

10000370 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
10000370:	defffd04 	addi	sp,sp,-12
10000374:	df000215 	stw	fp,8(sp)
10000378:	df000204 	addi	fp,sp,8
1000037c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000380:	e0bfff17 	ldw	r2,-4(fp)
10000384:	10800a17 	ldw	r2,40(r2)
10000388:	10800037 	ldwio	r2,0(r2)
1000038c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
10000390:	e0bffe17 	ldw	r2,-8(fp)
10000394:	1080400c 	andi	r2,r2,256
10000398:	1004c03a 	cmpne	r2,r2,zero
1000039c:	10803fcc 	andi	r2,r2,255
}
100003a0:	e037883a 	mov	sp,fp
100003a4:	df000017 	ldw	fp,0(sp)
100003a8:	dec00104 	addi	sp,sp,4
100003ac:	f800283a 	ret

100003b0 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
100003b0:	defffd04 	addi	sp,sp,-12
100003b4:	df000215 	stw	fp,8(sp)
100003b8:	df000204 	addi	fp,sp,8
100003bc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
100003c0:	e0bfff17 	ldw	r2,-4(fp)
100003c4:	10800a17 	ldw	r2,40(r2)
100003c8:	10800037 	ldwio	r2,0(r2)
100003cc:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
100003d0:	e0bffe17 	ldw	r2,-8(fp)
100003d4:	1080800c 	andi	r2,r2,512
100003d8:	1004c03a 	cmpne	r2,r2,zero
100003dc:	10803fcc 	andi	r2,r2,255
}
100003e0:	e037883a 	mov	sp,fp
100003e4:	df000017 	ldw	fp,0(sp)
100003e8:	dec00104 	addi	sp,sp,4
100003ec:	f800283a 	ret

100003f0 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
100003f0:	defffd04 	addi	sp,sp,-12
100003f4:	df000215 	stw	fp,8(sp)
100003f8:	df000204 	addi	fp,sp,8
100003fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000400:	e0bfff17 	ldw	r2,-4(fp)
10000404:	10800a17 	ldw	r2,40(r2)
10000408:	10800037 	ldwio	r2,0(r2)
1000040c:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
10000410:	e0bffe17 	ldw	r2,-8(fp)
10000414:	10800114 	ori	r2,r2,4
10000418:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
1000041c:	e0bffe17 	ldw	r2,-8(fp)
10000420:	10800214 	ori	r2,r2,8
10000424:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000428:	e0bfff17 	ldw	r2,-4(fp)
1000042c:	10800a17 	ldw	r2,40(r2)
10000430:	e0fffe17 	ldw	r3,-8(fp)
10000434:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
10000438:	e0fffe17 	ldw	r3,-8(fp)
1000043c:	00bffec4 	movi	r2,-5
10000440:	1884703a 	and	r2,r3,r2
10000444:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
10000448:	e0fffe17 	ldw	r3,-8(fp)
1000044c:	00bffdc4 	movi	r2,-9
10000450:	1884703a 	and	r2,r3,r2
10000454:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000458:	e0bfff17 	ldw	r2,-4(fp)
1000045c:	10800a17 	ldw	r2,40(r2)
10000460:	e0fffe17 	ldw	r3,-8(fp)
10000464:	10c00035 	stwio	r3,0(r2)
}
10000468:	e037883a 	mov	sp,fp
1000046c:	df000017 	ldw	fp,0(sp)
10000470:	dec00104 	addi	sp,sp,4
10000474:	f800283a 	ret

10000478 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
10000478:	defffc04 	addi	sp,sp,-16
1000047c:	df000315 	stw	fp,12(sp)
10000480:	df000304 	addi	fp,sp,12
10000484:	e13ffe15 	stw	r4,-8(fp)
10000488:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
1000048c:	e0bffe17 	ldw	r2,-8(fp)
10000490:	10800a17 	ldw	r2,40(r2)
10000494:	10800104 	addi	r2,r2,4
10000498:	10800037 	ldwio	r2,0(r2)
1000049c:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
100004a0:	e0bfff17 	ldw	r2,-4(fp)
100004a4:	1000041e 	bne	r2,zero,100004b8 <alt_up_audio_read_fifo_avail+0x40>
100004a8:	e0bffd17 	ldw	r2,-12(fp)
100004ac:	10bfc00c 	andi	r2,r2,65280
100004b0:	1004d23a 	srli	r2,r2,8
100004b4:	00000206 	br	100004c0 <alt_up_audio_read_fifo_avail+0x48>
100004b8:	e0bffd17 	ldw	r2,-12(fp)
100004bc:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
100004c0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
100004c4:	e0bffd17 	ldw	r2,-12(fp)
}
100004c8:	e037883a 	mov	sp,fp
100004cc:	df000017 	ldw	fp,0(sp)
100004d0:	dec00104 	addi	sp,sp,4
100004d4:	f800283a 	ret

100004d8 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
100004d8:	defffa04 	addi	sp,sp,-24
100004dc:	dfc00515 	stw	ra,20(sp)
100004e0:	df000415 	stw	fp,16(sp)
100004e4:	df000404 	addi	fp,sp,16
100004e8:	e13ffd15 	stw	r4,-12(fp)
100004ec:	e17ffe15 	stw	r5,-8(fp)
100004f0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
100004f4:	e13ffd17 	ldw	r4,-12(fp)
100004f8:	01400044 	movi	r5,1
100004fc:	00004780 	call	10000478 <alt_up_audio_read_fifo_avail>
10000500:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
10000504:	e0bffc17 	ldw	r2,-16(fp)
10000508:	10801868 	cmpgeui	r2,r2,97
1000050c:	1000021e 	bne	r2,zero,10000518 <alt_up_audio_record_r+0x40>
		return 0;
10000510:	0005883a 	mov	r2,zero
10000514:	00000506 	br	1000052c <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
10000518:	e13ffd17 	ldw	r4,-12(fp)
1000051c:	e17ffe17 	ldw	r5,-8(fp)
10000520:	e1bfff17 	ldw	r6,-4(fp)
10000524:	01c00044 	movi	r7,1
10000528:	00006d80 	call	100006d8 <alt_up_audio_read_fifo>
}
1000052c:	e037883a 	mov	sp,fp
10000530:	dfc00117 	ldw	ra,4(sp)
10000534:	df000017 	ldw	fp,0(sp)
10000538:	dec00204 	addi	sp,sp,8
1000053c:	f800283a 	ret

10000540 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000540:	defffa04 	addi	sp,sp,-24
10000544:	dfc00515 	stw	ra,20(sp)
10000548:	df000415 	stw	fp,16(sp)
1000054c:	df000404 	addi	fp,sp,16
10000550:	e13ffd15 	stw	r4,-12(fp)
10000554:	e17ffe15 	stw	r5,-8(fp)
10000558:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
1000055c:	e13ffd17 	ldw	r4,-12(fp)
10000560:	000b883a 	mov	r5,zero
10000564:	00004780 	call	10000478 <alt_up_audio_read_fifo_avail>
10000568:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
1000056c:	e0bffc17 	ldw	r2,-16(fp)
10000570:	10801868 	cmpgeui	r2,r2,97
10000574:	1000021e 	bne	r2,zero,10000580 <alt_up_audio_record_l+0x40>
		return 0;
10000578:	0005883a 	mov	r2,zero
1000057c:	00000506 	br	10000594 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
10000580:	e13ffd17 	ldw	r4,-12(fp)
10000584:	e17ffe17 	ldw	r5,-8(fp)
10000588:	e1bfff17 	ldw	r6,-4(fp)
1000058c:	000f883a 	mov	r7,zero
10000590:	00006d80 	call	100006d8 <alt_up_audio_read_fifo>
}
10000594:	e037883a 	mov	sp,fp
10000598:	dfc00117 	ldw	ra,4(sp)
1000059c:	df000017 	ldw	fp,0(sp)
100005a0:	dec00204 	addi	sp,sp,8
100005a4:	f800283a 	ret

100005a8 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
100005a8:	defffc04 	addi	sp,sp,-16
100005ac:	df000315 	stw	fp,12(sp)
100005b0:	df000304 	addi	fp,sp,12
100005b4:	e13ffe15 	stw	r4,-8(fp)
100005b8:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100005bc:	e0bffe17 	ldw	r2,-8(fp)
100005c0:	10800a17 	ldw	r2,40(r2)
100005c4:	10800104 	addi	r2,r2,4
100005c8:	10800037 	ldwio	r2,0(r2)
100005cc:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100005d0:	e0bfff17 	ldw	r2,-4(fp)
100005d4:	1000031e 	bne	r2,zero,100005e4 <alt_up_audio_write_fifo_space+0x3c>
100005d8:	e0bffd17 	ldw	r2,-12(fp)
100005dc:	1004d63a 	srli	r2,r2,24
100005e0:	00000306 	br	100005f0 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
100005e4:	e0bffd17 	ldw	r2,-12(fp)
100005e8:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100005ec:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
100005f0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
100005f4:	e0bffd17 	ldw	r2,-12(fp)
}
100005f8:	e037883a 	mov	sp,fp
100005fc:	df000017 	ldw	fp,0(sp)
10000600:	dec00104 	addi	sp,sp,4
10000604:	f800283a 	ret

10000608 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000608:	defffa04 	addi	sp,sp,-24
1000060c:	dfc00515 	stw	ra,20(sp)
10000610:	df000415 	stw	fp,16(sp)
10000614:	df000404 	addi	fp,sp,16
10000618:	e13ffd15 	stw	r4,-12(fp)
1000061c:	e17ffe15 	stw	r5,-8(fp)
10000620:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
10000624:	e13ffd17 	ldw	r4,-12(fp)
10000628:	01400044 	movi	r5,1
1000062c:	00005a80 	call	100005a8 <alt_up_audio_write_fifo_space>
10000630:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
10000634:	e0bffc17 	ldw	r2,-16(fp)
10000638:	10801868 	cmpgeui	r2,r2,97
1000063c:	1000021e 	bne	r2,zero,10000648 <alt_up_audio_play_r+0x40>
		return 0;
10000640:	0005883a 	mov	r2,zero
10000644:	00000506 	br	1000065c <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
10000648:	e13ffd17 	ldw	r4,-12(fp)
1000064c:	e17ffe17 	ldw	r5,-8(fp)
10000650:	e1bfff17 	ldw	r6,-4(fp)
10000654:	01c00044 	movi	r7,1
10000658:	00007b40 	call	100007b4 <alt_up_audio_write_fifo>
}
1000065c:	e037883a 	mov	sp,fp
10000660:	dfc00117 	ldw	ra,4(sp)
10000664:	df000017 	ldw	fp,0(sp)
10000668:	dec00204 	addi	sp,sp,8
1000066c:	f800283a 	ret

10000670 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000670:	defffa04 	addi	sp,sp,-24
10000674:	dfc00515 	stw	ra,20(sp)
10000678:	df000415 	stw	fp,16(sp)
1000067c:	df000404 	addi	fp,sp,16
10000680:	e13ffd15 	stw	r4,-12(fp)
10000684:	e17ffe15 	stw	r5,-8(fp)
10000688:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
1000068c:	e13ffd17 	ldw	r4,-12(fp)
10000690:	000b883a 	mov	r5,zero
10000694:	00005a80 	call	100005a8 <alt_up_audio_write_fifo_space>
10000698:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
1000069c:	e0bffc17 	ldw	r2,-16(fp)
100006a0:	10801868 	cmpgeui	r2,r2,97
100006a4:	1000021e 	bne	r2,zero,100006b0 <alt_up_audio_play_l+0x40>
		return 0;
100006a8:	0005883a 	mov	r2,zero
100006ac:	00000506 	br	100006c4 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
100006b0:	e13ffd17 	ldw	r4,-12(fp)
100006b4:	e17ffe17 	ldw	r5,-8(fp)
100006b8:	e1bfff17 	ldw	r6,-4(fp)
100006bc:	000f883a 	mov	r7,zero
100006c0:	00007b40 	call	100007b4 <alt_up_audio_write_fifo>
}
100006c4:	e037883a 	mov	sp,fp
100006c8:	dfc00117 	ldw	ra,4(sp)
100006cc:	df000017 	ldw	fp,0(sp)
100006d0:	dec00204 	addi	sp,sp,8
100006d4:	f800283a 	ret

100006d8 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
100006d8:	defff904 	addi	sp,sp,-28
100006dc:	df000615 	stw	fp,24(sp)
100006e0:	df000604 	addi	fp,sp,24
100006e4:	e13ffc15 	stw	r4,-16(fp)
100006e8:	e17ffd15 	stw	r5,-12(fp)
100006ec:	e1bffe15 	stw	r6,-8(fp)
100006f0:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
100006f4:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
100006f8:	00002606 	br	10000794 <alt_up_audio_read_fifo+0xbc>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100006fc:	e0bffc17 	ldw	r2,-16(fp)
10000700:	10800a17 	ldw	r2,40(r2)
10000704:	10800104 	addi	r2,r2,4
10000708:	10800037 	ldwio	r2,0(r2)
1000070c:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
10000710:	e0bfff17 	ldw	r2,-4(fp)
10000714:	1000041e 	bne	r2,zero,10000728 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
10000718:	e0bffb17 	ldw	r2,-20(fp)
1000071c:	10bfc00c 	andi	r2,r2,65280
			:
10000720:	1004d23a 	srli	r2,r2,8
10000724:	00000206 	br	10000730 <alt_up_audio_read_fifo+0x58>
10000728:	e0bffb17 	ldw	r2,-20(fp)
1000072c:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
10000730:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
10000734:	e0bffb17 	ldw	r2,-20(fp)
10000738:	10001526 	beq	r2,zero,10000790 <alt_up_audio_read_fifo+0xb8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
1000073c:	e0bffa17 	ldw	r2,-24(fp)
10000740:	1085883a 	add	r2,r2,r2
10000744:	1085883a 	add	r2,r2,r2
10000748:	e0fffd17 	ldw	r3,-12(fp)
1000074c:	1887883a 	add	r3,r3,r2
10000750:	e0bfff17 	ldw	r2,-4(fp)
10000754:	1000051e 	bne	r2,zero,1000076c <alt_up_audio_read_fifo+0x94>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
10000758:	e0bffc17 	ldw	r2,-16(fp)
1000075c:	10800a17 	ldw	r2,40(r2)
10000760:	10800204 	addi	r2,r2,8
10000764:	10800037 	ldwio	r2,0(r2)
10000768:	00000406 	br	1000077c <alt_up_audio_read_fifo+0xa4>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
1000076c:	e0bffc17 	ldw	r2,-16(fp)
10000770:	10800a17 	ldw	r2,40(r2)
10000774:	10800304 	addi	r2,r2,12
10000778:	10800037 	ldwio	r2,0(r2)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
1000077c:	18800015 	stw	r2,0(r3)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
10000780:	e0bffa17 	ldw	r2,-24(fp)
10000784:	10800044 	addi	r2,r2,1
10000788:	e0bffa15 	stw	r2,-24(fp)
1000078c:	00000106 	br	10000794 <alt_up_audio_read_fifo+0xbc>
		}
		else
		{
			// no more data to read
			break;
10000790:	00000306 	br	100007a0 <alt_up_audio_read_fifo+0xc8>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
10000794:	e0fffa17 	ldw	r3,-24(fp)
10000798:	e0bffe17 	ldw	r2,-8(fp)
1000079c:	18bfd716 	blt	r3,r2,100006fc <__alt_data_end+0xf80006fc>
		{
			// no more data to read
			break;
		}
	}
	return count;
100007a0:	e0bffa17 	ldw	r2,-24(fp)
}
100007a4:	e037883a 	mov	sp,fp
100007a8:	df000017 	ldw	fp,0(sp)
100007ac:	dec00104 	addi	sp,sp,4
100007b0:	f800283a 	ret

100007b4 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
100007b4:	defff904 	addi	sp,sp,-28
100007b8:	df000615 	stw	fp,24(sp)
100007bc:	df000604 	addi	fp,sp,24
100007c0:	e13ffc15 	stw	r4,-16(fp)
100007c4:	e17ffd15 	stw	r5,-12(fp)
100007c8:	e1bffe15 	stw	r6,-8(fp)
100007cc:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
100007d0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
100007d4:	00002f06 	br	10000894 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100007d8:	e0bffc17 	ldw	r2,-16(fp)
100007dc:	10800a17 	ldw	r2,40(r2)
100007e0:	10800104 	addi	r2,r2,4
100007e4:	10800037 	ldwio	r2,0(r2)
100007e8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100007ec:	e0bfff17 	ldw	r2,-4(fp)
100007f0:	1000031e 	bne	r2,zero,10000800 <alt_up_audio_write_fifo+0x4c>
100007f4:	e0bffb17 	ldw	r2,-20(fp)
100007f8:	1004d63a 	srli	r2,r2,24
100007fc:	00000306 	br	1000080c <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
10000800:	e0bffb17 	ldw	r2,-20(fp)
10000804:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
10000808:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
1000080c:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
10000810:	e0bffb17 	ldw	r2,-20(fp)
10000814:	10001e26 	beq	r2,zero,10000890 <alt_up_audio_write_fifo+0xdc>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
10000818:	e0bfff17 	ldw	r2,-4(fp)
1000081c:	10000e1e 	bne	r2,zero,10000858 <alt_up_audio_write_fifo+0xa4>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
10000820:	e0bffc17 	ldw	r2,-16(fp)
10000824:	10800a17 	ldw	r2,40(r2)
10000828:	10800204 	addi	r2,r2,8
1000082c:	1007883a 	mov	r3,r2
10000830:	e0bffa17 	ldw	r2,-24(fp)
10000834:	11000044 	addi	r4,r2,1
10000838:	e13ffa15 	stw	r4,-24(fp)
1000083c:	1085883a 	add	r2,r2,r2
10000840:	1085883a 	add	r2,r2,r2
10000844:	e13ffd17 	ldw	r4,-12(fp)
10000848:	2085883a 	add	r2,r4,r2
1000084c:	10800017 	ldw	r2,0(r2)
10000850:	18800035 	stwio	r2,0(r3)
10000854:	00000f06 	br	10000894 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
10000858:	e0bffc17 	ldw	r2,-16(fp)
1000085c:	10800a17 	ldw	r2,40(r2)
10000860:	10800304 	addi	r2,r2,12
10000864:	1007883a 	mov	r3,r2
10000868:	e0bffa17 	ldw	r2,-24(fp)
1000086c:	11000044 	addi	r4,r2,1
10000870:	e13ffa15 	stw	r4,-24(fp)
10000874:	1085883a 	add	r2,r2,r2
10000878:	1085883a 	add	r2,r2,r2
1000087c:	e13ffd17 	ldw	r4,-12(fp)
10000880:	2085883a 	add	r2,r4,r2
10000884:	10800017 	ldw	r2,0(r2)
10000888:	18800035 	stwio	r2,0(r3)
1000088c:	00000106 	br	10000894 <alt_up_audio_write_fifo+0xe0>
		}
		else
		{
			// no more space to write
			break;
10000890:	00000306 	br	100008a0 <alt_up_audio_write_fifo+0xec>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
10000894:	e0fffa17 	ldw	r3,-24(fp)
10000898:	e0bffe17 	ldw	r2,-8(fp)
1000089c:	18bfce16 	blt	r3,r2,100007d8 <__alt_data_end+0xf80007d8>
		{
			// no more space to write
			break;
		}
	}
	return count;
100008a0:	e0bffa17 	ldw	r2,-24(fp)
}
100008a4:	e037883a 	mov	sp,fp
100008a8:	df000017 	ldw	fp,0(sp)
100008ac:	dec00104 	addi	sp,sp,4
100008b0:	f800283a 	ret

100008b4 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
100008b4:	defffd04 	addi	sp,sp,-12
100008b8:	df000215 	stw	fp,8(sp)
100008bc:	df000204 	addi	fp,sp,8
100008c0:	e13ffe15 	stw	r4,-8(fp)
100008c4:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
100008c8:	e0bfff17 	ldw	r2,-4(fp)
100008cc:	1000051e 	bne	r2,zero,100008e4 <alt_up_audio_read_fifo_head+0x30>
100008d0:	e0bffe17 	ldw	r2,-8(fp)
100008d4:	10800a17 	ldw	r2,40(r2)
100008d8:	10800204 	addi	r2,r2,8
100008dc:	10800037 	ldwio	r2,0(r2)
100008e0:	00000406 	br	100008f4 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
100008e4:	e0bffe17 	ldw	r2,-8(fp)
100008e8:	10800a17 	ldw	r2,40(r2)
100008ec:	10800304 	addi	r2,r2,12
100008f0:	10800037 	ldwio	r2,0(r2)
}
100008f4:	e037883a 	mov	sp,fp
100008f8:	df000017 	ldw	fp,0(sp)
100008fc:	dec00104 	addi	sp,sp,4
10000900:	f800283a 	ret

10000904 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
10000904:	defffc04 	addi	sp,sp,-16
10000908:	df000315 	stw	fp,12(sp)
1000090c:	df000304 	addi	fp,sp,12
10000910:	e13ffd15 	stw	r4,-12(fp)
10000914:	e17ffe15 	stw	r5,-8(fp)
10000918:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
1000091c:	e0bfff17 	ldw	r2,-4(fp)
10000920:	1000061e 	bne	r2,zero,1000093c <alt_up_audio_write_fifo_head+0x38>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
10000924:	e0bffd17 	ldw	r2,-12(fp)
10000928:	10800a17 	ldw	r2,40(r2)
1000092c:	10800204 	addi	r2,r2,8
10000930:	e0fffe17 	ldw	r3,-8(fp)
10000934:	10c00035 	stwio	r3,0(r2)
10000938:	00000506 	br	10000950 <alt_up_audio_write_fifo_head+0x4c>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
1000093c:	e0bffd17 	ldw	r2,-12(fp)
10000940:	10800a17 	ldw	r2,40(r2)
10000944:	10800304 	addi	r2,r2,12
10000948:	e0fffe17 	ldw	r3,-8(fp)
1000094c:	10c00035 	stwio	r3,0(r2)
}
10000950:	e037883a 	mov	sp,fp
10000954:	df000017 	ldw	fp,0(sp)
10000958:	dec00104 	addi	sp,sp,4
1000095c:	f800283a 	ret

10000960 <audio_enable_read_interrupt>:
#define LEFT_DATA	((volatile unsigned int *const)(AUDIO_DEVICE + 2));
#define RIGHT_DATA	((volatile unsigned int *const)(AUDIO_DEVICE + 3));


void audio_enable_read_interrupt()
{
10000960:	defffe04 	addi	sp,sp,-8
10000964:	df000115 	stw	fp,4(sp)
10000968:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg = IORD_AUDIO_CONTROL();
1000096c:	00801004 	movi	r2,64
10000970:	10800037 	ldwio	r2,0(r2)
10000974:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining the other bits
	ctrl_reg |= AUDIO_CONTROL_RE_MASK;
10000978:	e0bfff17 	ldw	r2,-4(fp)
1000097c:	10800054 	ori	r2,r2,1
10000980:	e0bfff15 	stw	r2,-4(fp)
	IOWR_AUDIO_CONTROL(ctrl_reg);
10000984:	00801004 	movi	r2,64
10000988:	e0ffff17 	ldw	r3,-4(fp)
1000098c:	10c00035 	stwio	r3,0(r2)
}
10000990:	e037883a 	mov	sp,fp
10000994:	df000017 	ldw	fp,0(sp)
10000998:	dec00104 	addi	sp,sp,4
1000099c:	f800283a 	ret

100009a0 <audio_disable_read_interrupt>:

void audio_disable_read_interrupt()
{
100009a0:	defffe04 	addi	sp,sp,-8
100009a4:	df000115 	stw	fp,4(sp)
100009a8:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg = IORD_AUDIO_CONTROL();
100009ac:	00801004 	movi	r2,64
100009b0:	10800037 	ldwio	r2,0(r2)
100009b4:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining the other bits
	ctrl_reg &= ~AUDIO_CONTROL_RE_MASK;
100009b8:	e0ffff17 	ldw	r3,-4(fp)
100009bc:	00bfff84 	movi	r2,-2
100009c0:	1884703a 	and	r2,r3,r2
100009c4:	e0bfff15 	stw	r2,-4(fp)
	IOWR_AUDIO_CONTROL(ctrl_reg);
100009c8:	00801004 	movi	r2,64
100009cc:	e0ffff17 	ldw	r3,-4(fp)
100009d0:	10c00035 	stwio	r3,0(r2)
}
100009d4:	e037883a 	mov	sp,fp
100009d8:	df000017 	ldw	fp,0(sp)
100009dc:	dec00104 	addi	sp,sp,4
100009e0:	f800283a 	ret

100009e4 <audio_enable_write_interrupt>:

void audio_enable_write_interrupt()
{
100009e4:	deffff04 	addi	sp,sp,-4
100009e8:	df000015 	stw	fp,0(sp)
100009ec:	d839883a 	mov	fp,sp
	
}
100009f0:	e037883a 	mov	sp,fp
100009f4:	df000017 	ldw	fp,0(sp)
100009f8:	dec00104 	addi	sp,sp,4
100009fc:	f800283a 	ret

10000a00 <audio_disable_write_interrupt>:

void audio_disable_write_interrupt()
{
10000a00:	deffff04 	addi	sp,sp,-4
10000a04:	df000015 	stw	fp,0(sp)
10000a08:	d839883a 	mov	fp,sp
	
}
10000a0c:	e037883a 	mov	sp,fp
10000a10:	df000017 	ldw	fp,0(sp)
10000a14:	dec00104 	addi	sp,sp,4
10000a18:	f800283a 	ret

10000a1c <audio_read_interrupt_pending>:

int audio_read_interrupt_pending()
{
10000a1c:	defffe04 	addi	sp,sp,-8
10000a20:	df000115 	stw	fp,4(sp)
10000a24:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg = IORD_AUDIO_CONTROL();
10000a28:	00801004 	movi	r2,64
10000a2c:	10800037 	ldwio	r2,0(r2)
10000a30:	e0bfff15 	stw	r2,-4(fp)
	// return RI
	return (ctrl_reg & AUDIO_CONTROL_RI_MASK) ? 1 : 0;
10000a34:	e0bfff17 	ldw	r2,-4(fp)
10000a38:	1080400c 	andi	r2,r2,256
10000a3c:	1004c03a 	cmpne	r2,r2,zero
10000a40:	10803fcc 	andi	r2,r2,255
}
10000a44:	e037883a 	mov	sp,fp
10000a48:	df000017 	ldw	fp,0(sp)
10000a4c:	dec00104 	addi	sp,sp,4
10000a50:	f800283a 	ret

10000a54 <audio_write_interrupt_pending>:

int audio_write_interrupt_pending()
{
10000a54:	defffe04 	addi	sp,sp,-8
10000a58:	df000115 	stw	fp,4(sp)
10000a5c:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg = IORD_AUDIO_CONTROL();
10000a60:	00801004 	movi	r2,64
10000a64:	10800037 	ldwio	r2,0(r2)
10000a68:	e0bfff15 	stw	r2,-4(fp)
	// return WI
	return (ctrl_reg & AUDIO_CONTROL_WI_MASK) ? 1 : 0;
10000a6c:	e0bfff17 	ldw	r2,-4(fp)
10000a70:	1080800c 	andi	r2,r2,512
10000a74:	1004c03a 	cmpne	r2,r2,zero
10000a78:	10803fcc 	andi	r2,r2,255
}
10000a7c:	e037883a 	mov	sp,fp
10000a80:	df000017 	ldw	fp,0(sp)
10000a84:	dec00104 	addi	sp,sp,4
10000a88:	f800283a 	ret

10000a8c <audio_reset_audio_core>:

void audio_reset_audio_core()
{
10000a8c:	defffe04 	addi	sp,sp,-8
10000a90:	df000115 	stw	fp,4(sp)
10000a94:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg = IORD_AUDIO_CONTROL();
10000a98:	00801004 	movi	r2,64
10000a9c:	10800037 	ldwio	r2,0(r2)
10000aa0:	e0bfff15 	stw	r2,-4(fp)
	// set CR and CW to 1 while maintaining the other bits
	ctrl_reg |= AUDIO_CONTROL_CR_MASK;
10000aa4:	e0bfff17 	ldw	r2,-4(fp)
10000aa8:	10800114 	ori	r2,r2,4
10000aac:	e0bfff15 	stw	r2,-4(fp)
	ctrl_reg |= AUDIO_CONTROL_CW_MASK;
10000ab0:	e0bfff17 	ldw	r2,-4(fp)
10000ab4:	10800214 	ori	r2,r2,8
10000ab8:	e0bfff15 	stw	r2,-4(fp)
	IOWR_AUDIO_CONTROL(ctrl_reg);
10000abc:	00801004 	movi	r2,64
10000ac0:	e0ffff17 	ldw	r3,-4(fp)
10000ac4:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining the other bits
	ctrl_reg &= ~AUDIO_CONTROL_CR_MASK;
10000ac8:	e0ffff17 	ldw	r3,-4(fp)
10000acc:	00bffec4 	movi	r2,-5
10000ad0:	1884703a 	and	r2,r3,r2
10000ad4:	e0bfff15 	stw	r2,-4(fp)
	ctrl_reg &= ~AUDIO_CONTROL_CW_MASK;
10000ad8:	e0ffff17 	ldw	r3,-4(fp)
10000adc:	00bffdc4 	movi	r2,-9
10000ae0:	1884703a 	and	r2,r3,r2
10000ae4:	e0bfff15 	stw	r2,-4(fp)
	IOWR_AUDIO_CONTROL(ctrl_reg);
10000ae8:	00801004 	movi	r2,64
10000aec:	e0ffff17 	ldw	r3,-4(fp)
10000af0:	10c00035 	stwio	r3,0(r2)
}
10000af4:	e037883a 	mov	sp,fp
10000af8:	df000017 	ldw	fp,0(sp)
10000afc:	dec00104 	addi	sp,sp,4
10000b00:	f800283a 	ret

10000b04 <audio_read_fifo_avail>:

// provides number of words of data available in the incoming FIFO: RALC or RARC
unsigned int audio_read_fifo_avail(int channel)
{
10000b04:	defffd04 	addi	sp,sp,-12
10000b08:	df000215 	stw	fp,8(sp)
10000b0c:	df000204 	addi	fp,sp,8
10000b10:	e13fff15 	stw	r4,-4(fp)
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
10000b14:	00801004 	movi	r2,64
10000b18:	10800104 	addi	r2,r2,4
10000b1c:	10800037 	ldwio	r2,0(r2)
10000b20:	e0bffe15 	stw	r2,-8(fp)
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
10000b24:	e0bfff17 	ldw	r2,-4(fp)
10000b28:	1000041e 	bne	r2,zero,10000b3c <audio_read_fifo_avail+0x38>
{
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
10000b2c:	e0bffe17 	ldw	r2,-8(fp)
10000b30:	10bfc00c 	andi	r2,r2,65280
			:
10000b34:	1004d23a 	srli	r2,r2,8
10000b38:	00000206 	br	10000b44 <audio_read_fifo_avail+0x40>
10000b3c:	e0bffe17 	ldw	r2,-8(fp)
10000b40:	10803fcc 	andi	r2,r2,255
unsigned int audio_read_fifo_avail(int channel)
{
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
10000b44:	e0bffe15 	stw	r2,-8(fp)
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
	return fifospace;
10000b48:	e0bffe17 	ldw	r2,-8(fp)
}
10000b4c:	e037883a 	mov	sp,fp
10000b50:	df000017 	ldw	fp,0(sp)
10000b54:	dec00104 	addi	sp,sp,4
10000b58:	f800283a 	ret

10000b5c <audio_read_fifo>:

int audio_read_fifo(unsigned int *buf, int len, int channel) {
10000b5c:	defffa04 	addi	sp,sp,-24
10000b60:	df000515 	stw	fp,20(sp)
10000b64:	df000504 	addi	fp,sp,20
10000b68:	e13ffd15 	stw	r4,-12(fp)
10000b6c:	e17ffe15 	stw	r5,-8(fp)
10000b70:	e1bfff15 	stw	r6,-4(fp)
	unsigned int fifospace;
	int count = 0;
10000b74:	e03ffb15 	stw	zero,-20(fp)
	while (count < len) {
10000b78:	00002306 	br	10000c08 <audio_read_fifo+0xac>
		// read the whole fifospcae register
		fifospace = IORD_AUDIO_FIFOSPACE();
10000b7c:	00801004 	movi	r2,64
10000b80:	10800104 	addi	r2,r2,4
10000b84:	10800037 	ldwio	r2,0(r2)
10000b88:	e0bffc15 	stw	r2,-16(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
10000b8c:	e0bfff17 	ldw	r2,-4(fp)
10000b90:	1000041e 	bne	r2,zero,10000ba4 <audio_read_fifo+0x48>
	while (count < len) {
		// read the whole fifospcae register
		fifospace = IORD_AUDIO_FIFOSPACE();
		// extract the part for proper Channel Read Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
10000b94:	e0bffc17 	ldw	r2,-16(fp)
10000b98:	10bfc00c 	andi	r2,r2,65280
			:
10000b9c:	1004d23a 	srli	r2,r2,8
10000ba0:	00000206 	br	10000bac <audio_read_fifo+0x50>
10000ba4:	e0bffc17 	ldw	r2,-16(fp)
10000ba8:	10803fcc 	andi	r2,r2,255
	int count = 0;
	while (count < len) {
		// read the whole fifospcae register
		fifospace = IORD_AUDIO_FIFOSPACE();
		// extract the part for proper Channel Read Space
		fifospace = (channel == AUDIO_LEFT) ?
10000bac:	e0bffc15 	stw	r2,-16(fp)
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
		if (fifospace > 0) {
10000bb0:	e0bffc17 	ldw	r2,-16(fp)
10000bb4:	10001326 	beq	r2,zero,10000c04 <audio_read_fifo+0xa8>
			buf[count] = (channel == AUDIO_LEFT) ?
10000bb8:	e0bffb17 	ldw	r2,-20(fp)
10000bbc:	1085883a 	add	r2,r2,r2
10000bc0:	1085883a 	add	r2,r2,r2
10000bc4:	e0fffd17 	ldw	r3,-12(fp)
10000bc8:	1887883a 	add	r3,r3,r2
10000bcc:	e0bfff17 	ldw	r2,-4(fp)
10000bd0:	1000041e 	bne	r2,zero,10000be4 <audio_read_fifo+0x88>
				IORD_AUDIO_LEFTDATA():
10000bd4:	00801004 	movi	r2,64
10000bd8:	10800204 	addi	r2,r2,8
10000bdc:	10800037 	ldwio	r2,0(r2)
10000be0:	00000306 	br	10000bf0 <audio_read_fifo+0x94>
				IORD_AUDIO_RIGHTDATA();
10000be4:	00801004 	movi	r2,64
10000be8:	10800304 	addi	r2,r2,12
10000bec:	10800037 	ldwio	r2,0(r2)
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
		if (fifospace > 0) {
			buf[count] = (channel == AUDIO_LEFT) ?
10000bf0:	18800015 	stw	r2,0(r3)
				IORD_AUDIO_LEFTDATA():
				IORD_AUDIO_RIGHTDATA();
			count ++;
10000bf4:	e0bffb17 	ldw	r2,-20(fp)
10000bf8:	10800044 	addi	r2,r2,1
10000bfc:	e0bffb15 	stw	r2,-20(fp)
10000c00:	00000106 	br	10000c08 <audio_read_fifo+0xac>
		}
		else {
			//no more data to read
			break;
10000c04:	00000306 	br	10000c14 <audio_read_fifo+0xb8>
}

int audio_read_fifo(unsigned int *buf, int len, int channel) {
	unsigned int fifospace;
	int count = 0;
	while (count < len) {
10000c08:	e0fffb17 	ldw	r3,-20(fp)
10000c0c:	e0bffe17 	ldw	r2,-8(fp)
10000c10:	18bfda16 	blt	r3,r2,10000b7c <__alt_data_end+0xf8000b7c>
		else {
			//no more data to read
			break;
		}
	}
	return count;
10000c14:	e0bffb17 	ldw	r2,-20(fp)
}
10000c18:	e037883a 	mov	sp,fp
10000c1c:	df000017 	ldw	fp,0(sp)
10000c20:	dec00104 	addi	sp,sp,4
10000c24:	f800283a 	ret

10000c28 <audio_write_fifo>:

int audio_write_fifo(unsigned int *buf, int len, int channel) {
10000c28:	defffa04 	addi	sp,sp,-24
10000c2c:	df000515 	stw	fp,20(sp)
10000c30:	df000504 	addi	fp,sp,20
10000c34:	e13ffd15 	stw	r4,-12(fp)
10000c38:	e17ffe15 	stw	r5,-8(fp)
10000c3c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int fifospace;
	int count = 0;
10000c40:	e03ffb15 	stw	zero,-20(fp)
	while (count < len) {
10000c44:	00002a06 	br	10000cf0 <audio_write_fifo+0xc8>
		//read the whole fifospace register
		fifospace = IORD_AUDIO_FIFOSPACE();
10000c48:	00801004 	movi	r2,64
10000c4c:	10800104 	addi	r2,r2,4
10000c50:	10800037 	ldwio	r2,0(r2)
10000c54:	e0bffc15 	stw	r2,-16(fp)
		//extract the part for left Channel Write Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET :
10000c58:	e0bfff17 	ldw	r2,-4(fp)
10000c5c:	1000031e 	bne	r2,zero,10000c6c <audio_write_fifo+0x44>
10000c60:	e0bffc17 	ldw	r2,-16(fp)
10000c64:	1004d63a 	srli	r2,r2,24
10000c68:	00000306 	br	10000c78 <audio_write_fifo+0x50>
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
10000c6c:	e0bffc17 	ldw	r2,-16(fp)
10000c70:	10803fec 	andhi	r2,r2,255
	while (count < len) {
		//read the whole fifospace register
		fifospace = IORD_AUDIO_FIFOSPACE();
		//extract the part for left Channel Write Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET :
10000c74:	1004d43a 	srli	r2,r2,16
	int count = 0;
	while (count < len) {
		//read the whole fifospace register
		fifospace = IORD_AUDIO_FIFOSPACE();
		//extract the part for left Channel Write Space
		fifospace = (channel == AUDIO_LEFT) ?
10000c78:	e0bffc15 	stw	r2,-16(fp)
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET :
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
		if (fifospace > 0) {
10000c7c:	e0bffc17 	ldw	r2,-16(fp)
10000c80:	10001a26 	beq	r2,zero,10000cec <audio_write_fifo+0xc4>
			if (channel == AUDIO_LEFT)
10000c84:	e0bfff17 	ldw	r2,-4(fp)
10000c88:	10000c1e 	bne	r2,zero,10000cbc <audio_write_fifo+0x94>
				IOWR_AUDIO_LEFTDATA(buf[count++]);
10000c8c:	00801004 	movi	r2,64
10000c90:	10c00204 	addi	r3,r2,8
10000c94:	e0bffb17 	ldw	r2,-20(fp)
10000c98:	11000044 	addi	r4,r2,1
10000c9c:	e13ffb15 	stw	r4,-20(fp)
10000ca0:	1085883a 	add	r2,r2,r2
10000ca4:	1085883a 	add	r2,r2,r2
10000ca8:	e13ffd17 	ldw	r4,-12(fp)
10000cac:	2085883a 	add	r2,r4,r2
10000cb0:	10800017 	ldw	r2,0(r2)
10000cb4:	18800035 	stwio	r2,0(r3)
10000cb8:	00000d06 	br	10000cf0 <audio_write_fifo+0xc8>
			else 
				IOWR_AUDIO_RIGHTDATA(buf[count++]);
10000cbc:	00801004 	movi	r2,64
10000cc0:	10c00304 	addi	r3,r2,12
10000cc4:	e0bffb17 	ldw	r2,-20(fp)
10000cc8:	11000044 	addi	r4,r2,1
10000ccc:	e13ffb15 	stw	r4,-20(fp)
10000cd0:	1085883a 	add	r2,r2,r2
10000cd4:	1085883a 	add	r2,r2,r2
10000cd8:	e13ffd17 	ldw	r4,-12(fp)
10000cdc:	2085883a 	add	r2,r4,r2
10000ce0:	10800017 	ldw	r2,0(r2)
10000ce4:	18800035 	stwio	r2,0(r3)
10000ce8:	00000106 	br	10000cf0 <audio_write_fifo+0xc8>
		}
		else {
			//no more space to write
			break;
10000cec:	00000306 	br	10000cfc <audio_write_fifo+0xd4>
}

int audio_write_fifo(unsigned int *buf, int len, int channel) {
	unsigned int fifospace;
	int count = 0;
	while (count < len) {
10000cf0:	e0fffb17 	ldw	r3,-20(fp)
10000cf4:	e0bffe17 	ldw	r2,-8(fp)
10000cf8:	18bfd316 	blt	r3,r2,10000c48 <__alt_data_end+0xf8000c48>
		else {
			//no more space to write
			break;
		}
	}
	return count;
10000cfc:	e0bffb17 	ldw	r2,-20(fp)
}
10000d00:	e037883a 	mov	sp,fp
10000d04:	df000017 	ldw	fp,0(sp)
10000d08:	dec00104 	addi	sp,sp,4
10000d0c:	f800283a 	ret

10000d10 <audio_read_fifo_head>:

unsigned int audio_read_fifo_head(int channel) {
10000d10:	defffe04 	addi	sp,sp,-8
10000d14:	df000115 	stw	fp,4(sp)
10000d18:	df000104 	addi	fp,sp,4
10000d1c:	e13fff15 	stw	r4,-4(fp)
	return ( (channel == AUDIO_LEFT) ? IORD_AUDIO_LEFTDATA() :
10000d20:	e0bfff17 	ldw	r2,-4(fp)
10000d24:	1000041e 	bne	r2,zero,10000d38 <audio_read_fifo_head+0x28>
10000d28:	00801004 	movi	r2,64
10000d2c:	10800204 	addi	r2,r2,8
10000d30:	10800037 	ldwio	r2,0(r2)
10000d34:	00000306 	br	10000d44 <audio_read_fifo_head+0x34>
					IORD_AUDIO_RIGHTDATA() );
10000d38:	00801004 	movi	r2,64
10000d3c:	10800304 	addi	r2,r2,12
10000d40:	10800037 	ldwio	r2,0(r2)
}
10000d44:	e037883a 	mov	sp,fp
10000d48:	df000017 	ldw	fp,0(sp)
10000d4c:	dec00104 	addi	sp,sp,4
10000d50:	f800283a 	ret

10000d54 <audio_write_fifo_head>:

void audio_write_fifo_head(unsigned int data, int channel) {
10000d54:	defffd04 	addi	sp,sp,-12
10000d58:	df000215 	stw	fp,8(sp)
10000d5c:	df000204 	addi	fp,sp,8
10000d60:	e13ffe15 	stw	r4,-8(fp)
10000d64:	e17fff15 	stw	r5,-4(fp)
	if (channel == AUDIO_LEFT)
10000d68:	e0bfff17 	ldw	r2,-4(fp)
10000d6c:	1000051e 	bne	r2,zero,10000d84 <audio_write_fifo_head+0x30>
		IOWR_AUDIO_LEFTDATA(data);
10000d70:	00801004 	movi	r2,64
10000d74:	10800204 	addi	r2,r2,8
10000d78:	e0fffe17 	ldw	r3,-8(fp)
10000d7c:	10c00035 	stwio	r3,0(r2)
10000d80:	00000406 	br	10000d94 <audio_write_fifo_head+0x40>
	else
		IOWR_AUDIO_RIGHTDATA(data);
10000d84:	00801004 	movi	r2,64
10000d88:	10800304 	addi	r2,r2,12
10000d8c:	e0fffe17 	ldw	r3,-8(fp)
10000d90:	10c00035 	stwio	r3,0(r2)
}
10000d94:	e037883a 	mov	sp,fp
10000d98:	df000017 	ldw	fp,0(sp)
10000d9c:	dec00104 	addi	sp,sp,4
10000da0:	f800283a 	ret

10000da4 <audio_record_r>:
 * Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words
 * available. If it doesn't, then just returns 0. If it does, then data is read from
 * the FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int audio_record_r(unsigned int *buf, int len)
{
10000da4:	defffb04 	addi	sp,sp,-20
10000da8:	dfc00415 	stw	ra,16(sp)
10000dac:	df000315 	stw	fp,12(sp)
10000db0:	df000304 	addi	fp,sp,12
10000db4:	e13ffe15 	stw	r4,-8(fp)
10000db8:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_words = audio_read_fifo_avail(AUDIO_RIGHT);
10000dbc:	01000044 	movi	r4,1
10000dc0:	0000b040 	call	10000b04 <audio_read_fifo_avail>
10000dc4:	e0bffd15 	stw	r2,-12(fp)
	if (data_words <= BUF_THRESHOLD)
10000dc8:	e0bffd17 	ldw	r2,-12(fp)
10000dcc:	10801868 	cmpgeui	r2,r2,97
10000dd0:	1000021e 	bne	r2,zero,10000ddc <audio_record_r+0x38>
		return 0;
10000dd4:	0005883a 	mov	r2,zero
10000dd8:	00000406 	br	10000dec <audio_record_r+0x48>
	else
		return audio_read_fifo(buf, len, AUDIO_RIGHT);
10000ddc:	e13ffe17 	ldw	r4,-8(fp)
10000de0:	e17fff17 	ldw	r5,-4(fp)
10000de4:	01800044 	movi	r6,1
10000de8:	0000b5c0 	call	10000b5c <audio_read_fifo>
}
10000dec:	e037883a 	mov	sp,fp
10000df0:	dfc00117 	ldw	ra,4(sp)
10000df4:	df000017 	ldw	fp,0(sp)
10000df8:	dec00204 	addi	sp,sp,8
10000dfc:	f800283a 	ret

10000e00 <audio_record_l>:
 * Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words
 * available. If it doesn't, then just returns 0. If it does, then data is read from
 * the FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int audio_record_l(unsigned int *buf, int len)
{
10000e00:	defffb04 	addi	sp,sp,-20
10000e04:	dfc00415 	stw	ra,16(sp)
10000e08:	df000315 	stw	fp,12(sp)
10000e0c:	df000304 	addi	fp,sp,12
10000e10:	e13ffe15 	stw	r4,-8(fp)
10000e14:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_words = audio_read_fifo_avail(AUDIO_LEFT);
10000e18:	0009883a 	mov	r4,zero
10000e1c:	0000b040 	call	10000b04 <audio_read_fifo_avail>
10000e20:	e0bffd15 	stw	r2,-12(fp)
	if (data_words <= BUF_THRESHOLD)
10000e24:	e0bffd17 	ldw	r2,-12(fp)
10000e28:	10801868 	cmpgeui	r2,r2,97
10000e2c:	1000021e 	bne	r2,zero,10000e38 <audio_record_l+0x38>
		return 0;
10000e30:	0005883a 	mov	r2,zero
10000e34:	00000406 	br	10000e48 <audio_record_l+0x48>
	else
		return audio_read_fifo(buf, len, AUDIO_LEFT);
10000e38:	e13ffe17 	ldw	r4,-8(fp)
10000e3c:	e17fff17 	ldw	r5,-4(fp)
10000e40:	000d883a 	mov	r6,zero
10000e44:	0000b5c0 	call	10000b5c <audio_read_fifo>
}
10000e48:	e037883a 	mov	sp,fp
10000e4c:	dfc00117 	ldw	ra,4(sp)
10000e50:	df000017 	ldw	fp,0(sp)
10000e54:	dec00204 	addi	sp,sp,8
10000e58:	f800283a 	ret

10000e5c <audio_write_fifo_space>:

/**
 * Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC
 */
unsigned int audio_write_fifo_space(int channel)
{
10000e5c:	defffd04 	addi	sp,sp,-12
10000e60:	df000215 	stw	fp,8(sp)
10000e64:	df000204 	addi	fp,sp,8
10000e68:	e13fff15 	stw	r4,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_AUDIO_FIFOSPACE();
10000e6c:	00801004 	movi	r2,64
10000e70:	10800104 	addi	r2,r2,4
10000e74:	10800037 	ldwio	r2,0(r2)
10000e78:	e0bffe15 	stw	r2,-8(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET
			:
10000e7c:	e0bfff17 	ldw	r2,-4(fp)
10000e80:	1000031e 	bne	r2,zero,10000e90 <audio_write_fifo_space+0x34>
10000e84:	e0bffe17 	ldw	r2,-8(fp)
10000e88:	1004d63a 	srli	r2,r2,24
10000e8c:	00000306 	br	10000e9c <audio_write_fifo_space+0x40>
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
10000e90:	e0bffe17 	ldw	r2,-8(fp)
10000e94:	10803fec 	andhi	r2,r2,255
	// read the whole fifospace register
	fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper Channel Read Space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET
			:
10000e98:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper Channel Read Space
	fifospace = (channel == AUDIO_LEFT) ?
10000e9c:	e0bffe15 	stw	r2,-8(fp)
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
	return fifospace;
10000ea0:	e0bffe17 	ldw	r2,-8(fp)
}
10000ea4:	e037883a 	mov	sp,fp
10000ea8:	df000017 	ldw	fp,0(sp)
10000eac:	dec00104 	addi	sp,sp,4
10000eb0:	f800283a 	ret

10000eb4 <audio_play_r>:
 * Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the
 * FIFO, up to a maximum of len words.
 */
unsigned int audio_play_r(unsigned int *buf, int len)
{
10000eb4:	defffb04 	addi	sp,sp,-20
10000eb8:	dfc00415 	stw	ra,16(sp)
10000ebc:	df000315 	stw	fp,12(sp)
10000ec0:	df000304 	addi	fp,sp,12
10000ec4:	e13ffe15 	stw	r4,-8(fp)
10000ec8:	e17fff15 	stw	r5,-4(fp)
	unsigned int space = audio_write_fifo_space(AUDIO_RIGHT);
10000ecc:	01000044 	movi	r4,1
10000ed0:	0000e5c0 	call	10000e5c <audio_write_fifo_space>
10000ed4:	e0bffd15 	stw	r2,-12(fp)
		if (space <= BUF_THRESHOLD)
10000ed8:	e0bffd17 	ldw	r2,-12(fp)
10000edc:	10801868 	cmpgeui	r2,r2,97
10000ee0:	1000021e 	bne	r2,zero,10000eec <audio_play_r+0x38>
			return 0;
10000ee4:	0005883a 	mov	r2,zero
10000ee8:	00000406 	br	10000efc <audio_play_r+0x48>
		else
			return audio_write_fifo(buf, len, AUDIO_RIGHT);
10000eec:	e13ffe17 	ldw	r4,-8(fp)
10000ef0:	e17fff17 	ldw	r5,-4(fp)
10000ef4:	01800044 	movi	r6,1
10000ef8:	0000c280 	call	10000c28 <audio_write_fifo>
}
10000efc:	e037883a 	mov	sp,fp
10000f00:	dfc00117 	ldw	ra,4(sp)
10000f04:	df000017 	ldw	fp,0(sp)
10000f08:	dec00204 	addi	sp,sp,8
10000f0c:	f800283a 	ret

10000f10 <audio_play_l>:
 * Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the
 * FIFO, up to a maximum of len words.
 */
unsigned int audio_play_l(unsigned int *buf, int len)
{
10000f10:	defffb04 	addi	sp,sp,-20
10000f14:	dfc00415 	stw	ra,16(sp)
10000f18:	df000315 	stw	fp,12(sp)
10000f1c:	df000304 	addi	fp,sp,12
10000f20:	e13ffe15 	stw	r4,-8(fp)
10000f24:	e17fff15 	stw	r5,-4(fp)
	unsigned int space = audio_write_fifo_space(AUDIO_LEFT);
10000f28:	0009883a 	mov	r4,zero
10000f2c:	0000e5c0 	call	10000e5c <audio_write_fifo_space>
10000f30:	e0bffd15 	stw	r2,-12(fp)
	if (space <= BUF_THRESHOLD)
10000f34:	e0bffd17 	ldw	r2,-12(fp)
10000f38:	10801868 	cmpgeui	r2,r2,97
10000f3c:	1000021e 	bne	r2,zero,10000f48 <audio_play_l+0x38>
		return 0;
10000f40:	0005883a 	mov	r2,zero
10000f44:	00000406 	br	10000f58 <audio_play_l+0x48>
	else
		return audio_write_fifo(buf, len, AUDIO_LEFT);
10000f48:	e13ffe17 	ldw	r4,-8(fp)
10000f4c:	e17fff17 	ldw	r5,-4(fp)
10000f50:	000d883a 	mov	r6,zero
10000f54:	0000c280 	call	10000c28 <audio_write_fifo>
}
10000f58:	e037883a 	mov	sp,fp
10000f5c:	dfc00117 	ldw	ra,4(sp)
10000f60:	df000017 	ldw	fp,0(sp)
10000f64:	dec00204 	addi	sp,sp,8
10000f68:	f800283a 	ret

10000f6c <main>:
//#include "priv/alt_file.h"
#include "audIO.h"


int main()
{
10000f6c:	defc1504 	addi	sp,sp,-4012
10000f70:	dfc3ea15 	stw	ra,4008(sp)
10000f74:	df03e915 	stw	fp,4004(sp)
10000f78:	df03e904 	addi	fp,sp,4004
	  next = (alt_dev *)dev->llist.next;
	  printf("%d:\tList name: %s\n", i++, dev->name);
  } while ((alt_llist *)next != &alt_dev_list);
  */
  
  audio_reset_audio_core();
10000f7c:	0000a8c0 	call	10000a8c <audio_reset_audio_core>
  
  // Check how many data words the read FIFO for the right channel has.
  for (i = 0; i < 5; i++) {
10000f80:	e03c1715 	stw	zero,-4004(fp)
10000f84:	00000f06 	br	10000fc4 <main+0x58>
	  printf("Left available: %u\n", audio_read_fifo_avail(AUDIO_LEFT));
10000f88:	0009883a 	mov	r4,zero
10000f8c:	0000b040 	call	10000b04 <audio_read_fifo_avail>
10000f90:	01040074 	movhi	r4,4097
10000f94:	213f9504 	addi	r4,r4,-428
10000f98:	100b883a 	mov	r5,r2
10000f9c:	00010140 	call	10001014 <printf>
	  printf("Right available: %u\n", audio_read_fifo_avail(AUDIO_RIGHT));
10000fa0:	01000044 	movi	r4,1
10000fa4:	0000b040 	call	10000b04 <audio_read_fifo_avail>
10000fa8:	01040074 	movhi	r4,4097
10000fac:	213f9a04 	addi	r4,r4,-408
10000fb0:	100b883a 	mov	r5,r2
10000fb4:	00010140 	call	10001014 <printf>
  */
  
  audio_reset_audio_core();
  
  // Check how many data words the read FIFO for the right channel has.
  for (i = 0; i < 5; i++) {
10000fb8:	e0bc1717 	ldw	r2,-4004(fp)
10000fbc:	10800044 	addi	r2,r2,1
10000fc0:	e0bc1715 	stw	r2,-4004(fp)
10000fc4:	e0bc1717 	ldw	r2,-4004(fp)
10000fc8:	10800150 	cmplti	r2,r2,5
10000fcc:	103fee1e 	bne	r2,zero,10000f88 <__alt_data_end+0xf8000f88>
	  printf("Left available: %u\n", audio_read_fifo_avail(AUDIO_LEFT));
	  printf("Right available: %u\n", audio_read_fifo_avail(AUDIO_RIGHT));
  }
  return 0;
10000fd0:	0005883a 	mov	r2,zero
  printf("Reading buffer...");
  audio_record_r(buf, sizeof(buf));
  printf(" Done.\n");
  
  return 0;
}
10000fd4:	e037883a 	mov	sp,fp
10000fd8:	dfc00117 	ldw	ra,4(sp)
10000fdc:	df000017 	ldw	fp,0(sp)
10000fe0:	dec00204 	addi	sp,sp,8
10000fe4:	f800283a 	ret

10000fe8 <_printf_r>:
10000fe8:	defffd04 	addi	sp,sp,-12
10000fec:	dfc00015 	stw	ra,0(sp)
10000ff0:	d9800115 	stw	r6,4(sp)
10000ff4:	d9c00215 	stw	r7,8(sp)
10000ff8:	280d883a 	mov	r6,r5
10000ffc:	21400217 	ldw	r5,8(r4)
10001000:	d9c00104 	addi	r7,sp,4
10001004:	00010500 	call	10001050 <___vfprintf_internal_r>
10001008:	dfc00017 	ldw	ra,0(sp)
1000100c:	dec00304 	addi	sp,sp,12
10001010:	f800283a 	ret

10001014 <printf>:
10001014:	defffc04 	addi	sp,sp,-16
10001018:	dfc00015 	stw	ra,0(sp)
1000101c:	d9400115 	stw	r5,4(sp)
10001020:	d9800215 	stw	r6,8(sp)
10001024:	d9c00315 	stw	r7,12(sp)
10001028:	00840074 	movhi	r2,4097
1000102c:	10870d04 	addi	r2,r2,7220
10001030:	10800017 	ldw	r2,0(r2)
10001034:	200b883a 	mov	r5,r4
10001038:	d9800104 	addi	r6,sp,4
1000103c:	11000217 	ldw	r4,8(r2)
10001040:	00031a40 	call	100031a4 <__vfprintf_internal>
10001044:	dfc00017 	ldw	ra,0(sp)
10001048:	dec00404 	addi	sp,sp,16
1000104c:	f800283a 	ret

10001050 <___vfprintf_internal_r>:
10001050:	defeb604 	addi	sp,sp,-1320
10001054:	dfc14915 	stw	ra,1316(sp)
10001058:	dcc14315 	stw	r19,1292(sp)
1000105c:	dc414115 	stw	r17,1284(sp)
10001060:	d9012c15 	stw	r4,1200(sp)
10001064:	2827883a 	mov	r19,r5
10001068:	3023883a 	mov	r17,r6
1000106c:	d9c12f15 	stw	r7,1212(sp)
10001070:	df014815 	stw	fp,1312(sp)
10001074:	ddc14715 	stw	r23,1308(sp)
10001078:	dd814615 	stw	r22,1304(sp)
1000107c:	dd414515 	stw	r21,1300(sp)
10001080:	dd014415 	stw	r20,1296(sp)
10001084:	dc814215 	stw	r18,1288(sp)
10001088:	dc014015 	stw	r16,1280(sp)
1000108c:	00057880 	call	10005788 <_localeconv_r>
10001090:	10800017 	ldw	r2,0(r2)
10001094:	1009883a 	mov	r4,r2
10001098:	d8813415 	stw	r2,1232(sp)
1000109c:	00077100 	call	10007710 <strlen>
100010a0:	d8813815 	stw	r2,1248(sp)
100010a4:	d8812c17 	ldw	r2,1200(sp)
100010a8:	10000226 	beq	r2,zero,100010b4 <___vfprintf_internal_r+0x64>
100010ac:	10800e17 	ldw	r2,56(r2)
100010b0:	10010826 	beq	r2,zero,100014d4 <___vfprintf_internal_r+0x484>
100010b4:	9880030b 	ldhu	r2,12(r19)
100010b8:	1108000c 	andi	r4,r2,8192
100010bc:	1007883a 	mov	r3,r2
100010c0:	2000071e 	bne	r4,zero,100010e0 <___vfprintf_internal_r+0x90>
100010c4:	99001917 	ldw	r4,100(r19)
100010c8:	10c80014 	ori	r3,r2,8192
100010cc:	00b7ffc4 	movi	r2,-8193
100010d0:	2088703a 	and	r4,r4,r2
100010d4:	98c0030d 	sth	r3,12(r19)
100010d8:	1805883a 	mov	r2,r3
100010dc:	99001915 	stw	r4,100(r19)
100010e0:	1900020c 	andi	r4,r3,8
100010e4:	2000ab26 	beq	r4,zero,10001394 <___vfprintf_internal_r+0x344>
100010e8:	99000417 	ldw	r4,16(r19)
100010ec:	2000a926 	beq	r4,zero,10001394 <___vfprintf_internal_r+0x344>
100010f0:	18c0068c 	andi	r3,r3,26
100010f4:	01000284 	movi	r4,10
100010f8:	1900af26 	beq	r3,r4,100013b8 <___vfprintf_internal_r+0x368>
100010fc:	d9010dc4 	addi	r4,sp,1079
10001100:	d9410e04 	addi	r5,sp,1080
10001104:	d8800404 	addi	r2,sp,16
10001108:	2907c83a 	sub	r3,r5,r4
1000110c:	d9012815 	stw	r4,1184(sp)
10001110:	d9412915 	stw	r5,1188(sp)
10001114:	d8811e15 	stw	r2,1144(sp)
10001118:	d8012015 	stw	zero,1152(sp)
1000111c:	d8011f15 	stw	zero,1148(sp)
10001120:	d8013515 	stw	zero,1236(sp)
10001124:	d8013715 	stw	zero,1244(sp)
10001128:	d8013915 	stw	zero,1252(sp)
1000112c:	d8013b15 	stw	zero,1260(sp)
10001130:	d8013a15 	stw	zero,1256(sp)
10001134:	d8013115 	stw	zero,1220(sp)
10001138:	1011883a 	mov	r8,r2
1000113c:	05c40074 	movhi	r23,4097
10001140:	bdffb084 	addi	r23,r23,-318
10001144:	d8c13d15 	stw	r3,1268(sp)
10001148:	88800007 	ldb	r2,0(r17)
1000114c:	10021126 	beq	r2,zero,10001994 <___vfprintf_internal_r+0x944>
10001150:	00c00944 	movi	r3,37
10001154:	8821883a 	mov	r16,r17
10001158:	10c0021e 	bne	r2,r3,10001164 <___vfprintf_internal_r+0x114>
1000115c:	00001406 	br	100011b0 <___vfprintf_internal_r+0x160>
10001160:	10c00326 	beq	r2,r3,10001170 <___vfprintf_internal_r+0x120>
10001164:	84000044 	addi	r16,r16,1
10001168:	80800007 	ldb	r2,0(r16)
1000116c:	103ffc1e 	bne	r2,zero,10001160 <__alt_data_end+0xf8001160>
10001170:	8465c83a 	sub	r18,r16,r17
10001174:	90000e26 	beq	r18,zero,100011b0 <___vfprintf_internal_r+0x160>
10001178:	d8c12017 	ldw	r3,1152(sp)
1000117c:	d8811f17 	ldw	r2,1148(sp)
10001180:	44400015 	stw	r17,0(r8)
10001184:	1c87883a 	add	r3,r3,r18
10001188:	10800044 	addi	r2,r2,1
1000118c:	d8c12015 	stw	r3,1152(sp)
10001190:	44800115 	stw	r18,4(r8)
10001194:	d8811f15 	stw	r2,1148(sp)
10001198:	00c001c4 	movi	r3,7
1000119c:	1880bb16 	blt	r3,r2,1000148c <___vfprintf_internal_r+0x43c>
100011a0:	42000204 	addi	r8,r8,8
100011a4:	d9013117 	ldw	r4,1220(sp)
100011a8:	2489883a 	add	r4,r4,r18
100011ac:	d9013115 	stw	r4,1220(sp)
100011b0:	80800007 	ldb	r2,0(r16)
100011b4:	1000bc26 	beq	r2,zero,100014a8 <___vfprintf_internal_r+0x458>
100011b8:	053fffc4 	movi	r20,-1
100011bc:	84400044 	addi	r17,r16,1
100011c0:	84800047 	ldb	r18,1(r16)
100011c4:	d8012785 	stb	zero,1182(sp)
100011c8:	002d883a 	mov	r22,zero
100011cc:	d8013015 	stw	zero,1216(sp)
100011d0:	d8012a15 	stw	zero,1192(sp)
100011d4:	04001604 	movi	r16,88
100011d8:	05400244 	movi	r21,9
100011dc:	4039883a 	mov	fp,r8
100011e0:	a007883a 	mov	r3,r20
100011e4:	8c400044 	addi	r17,r17,1
100011e8:	90bff804 	addi	r2,r18,-32
100011ec:	80832036 	bltu	r16,r2,10001e70 <___vfprintf_internal_r+0xe20>
100011f0:	1085883a 	add	r2,r2,r2
100011f4:	1085883a 	add	r2,r2,r2
100011f8:	01440034 	movhi	r5,4096
100011fc:	29448304 	addi	r5,r5,4620
10001200:	1145883a 	add	r2,r2,r5
10001204:	10800017 	ldw	r2,0(r2)
10001208:	1000683a 	jmp	r2
1000120c:	10001c10 	cmplti	zero,r2,112
10001210:	10001e70 	cmpltui	zero,r2,121
10001214:	10001e70 	cmpltui	zero,r2,121
10001218:	10001c2c 	andhi	zero,r2,112
1000121c:	10001e70 	cmpltui	zero,r2,121
10001220:	10001e70 	cmpltui	zero,r2,121
10001224:	10001e70 	cmpltui	zero,r2,121
10001228:	10001e70 	cmpltui	zero,r2,121
1000122c:	10001e70 	cmpltui	zero,r2,121
10001230:	10001e70 	cmpltui	zero,r2,121
10001234:	10001c40 	call	110001c4 <_gp+0xfe659c>
10001238:	100014e0 	cmpeqi	zero,r2,83
1000123c:	10001e70 	cmpltui	zero,r2,121
10001240:	10001380 	call	11000138 <_gp+0xfe6510>
10001244:	100014ec 	andhi	zero,r2,83
10001248:	10001e70 	cmpltui	zero,r2,121
1000124c:	1000153c 	xorhi	zero,r2,84
10001250:	10001a4c 	andi	zero,r2,105
10001254:	10001a4c 	andi	zero,r2,105
10001258:	10001a4c 	andi	zero,r2,105
1000125c:	10001a4c 	andi	zero,r2,105
10001260:	10001a4c 	andi	zero,r2,105
10001264:	10001a4c 	andi	zero,r2,105
10001268:	10001a4c 	andi	zero,r2,105
1000126c:	10001a4c 	andi	zero,r2,105
10001270:	10001a4c 	andi	zero,r2,105
10001274:	10001e70 	cmpltui	zero,r2,121
10001278:	10001e70 	cmpltui	zero,r2,121
1000127c:	10001e70 	cmpltui	zero,r2,121
10001280:	10001e70 	cmpltui	zero,r2,121
10001284:	10001e70 	cmpltui	zero,r2,121
10001288:	10001e70 	cmpltui	zero,r2,121
1000128c:	10001e70 	cmpltui	zero,r2,121
10001290:	10001e70 	cmpltui	zero,r2,121
10001294:	10001e70 	cmpltui	zero,r2,121
10001298:	10001e70 	cmpltui	zero,r2,121
1000129c:	10001550 	cmplti	zero,r2,85
100012a0:	1000199c 	xori	zero,r2,102
100012a4:	10001e70 	cmpltui	zero,r2,121
100012a8:	1000199c 	xori	zero,r2,102
100012ac:	10001e70 	cmpltui	zero,r2,121
100012b0:	10001e70 	cmpltui	zero,r2,121
100012b4:	10001e70 	cmpltui	zero,r2,121
100012b8:	10001e70 	cmpltui	zero,r2,121
100012bc:	10001a94 	ori	zero,r2,106
100012c0:	10001e70 	cmpltui	zero,r2,121
100012c4:	10001e70 	cmpltui	zero,r2,121
100012c8:	10001aa8 	cmpgeui	zero,r2,106
100012cc:	10001e70 	cmpltui	zero,r2,121
100012d0:	10001e70 	cmpltui	zero,r2,121
100012d4:	10001e70 	cmpltui	zero,r2,121
100012d8:	10001e70 	cmpltui	zero,r2,121
100012dc:	10001e70 	cmpltui	zero,r2,121
100012e0:	10001af0 	cmpltui	zero,r2,107
100012e4:	10001e70 	cmpltui	zero,r2,121
100012e8:	10001e70 	cmpltui	zero,r2,121
100012ec:	10001c64 	muli	zero,r2,113
100012f0:	10001e70 	cmpltui	zero,r2,121
100012f4:	10001e70 	cmpltui	zero,r2,121
100012f8:	10001e70 	cmpltui	zero,r2,121
100012fc:	10001e70 	cmpltui	zero,r2,121
10001300:	10001e70 	cmpltui	zero,r2,121
10001304:	10001e70 	cmpltui	zero,r2,121
10001308:	10001e70 	cmpltui	zero,r2,121
1000130c:	10001e70 	cmpltui	zero,r2,121
10001310:	10001e70 	cmpltui	zero,r2,121
10001314:	10001e70 	cmpltui	zero,r2,121
10001318:	10001b68 	cmpgeui	zero,r2,109
1000131c:	10001ce0 	cmpeqi	zero,r2,115
10001320:	1000199c 	xori	zero,r2,102
10001324:	1000199c 	xori	zero,r2,102
10001328:	1000199c 	xori	zero,r2,102
1000132c:	10001cac 	andhi	zero,r2,114
10001330:	10001ce0 	cmpeqi	zero,r2,115
10001334:	10001e70 	cmpltui	zero,r2,121
10001338:	10001e70 	cmpltui	zero,r2,121
1000133c:	10001cc0 	call	110001cc <_gp+0xfe65a4>
10001340:	10001e70 	cmpltui	zero,r2,121
10001344:	10001b30 	cmpltui	zero,r2,108
10001348:	10001df0 	cmpltui	zero,r2,119
1000134c:	10001d9c 	xori	zero,r2,118
10001350:	10001d20 	cmpeqi	zero,r2,116
10001354:	10001e70 	cmpltui	zero,r2,121
10001358:	10001d34 	orhi	zero,r2,116
1000135c:	10001e70 	cmpltui	zero,r2,121
10001360:	10001e30 	cmpltui	zero,r2,120
10001364:	10001e70 	cmpltui	zero,r2,121
10001368:	10001e70 	cmpltui	zero,r2,121
1000136c:	10001ba8 	cmpgeui	zero,r2,110
10001370:	d9413017 	ldw	r5,1216(sp)
10001374:	d8812f15 	stw	r2,1212(sp)
10001378:	014bc83a 	sub	r5,zero,r5
1000137c:	d9413015 	stw	r5,1216(sp)
10001380:	d8812a17 	ldw	r2,1192(sp)
10001384:	10800114 	ori	r2,r2,4
10001388:	d8812a15 	stw	r2,1192(sp)
1000138c:	8c800007 	ldb	r18,0(r17)
10001390:	003f9406 	br	100011e4 <__alt_data_end+0xf80011e4>
10001394:	d9012c17 	ldw	r4,1200(sp)
10001398:	980b883a 	mov	r5,r19
1000139c:	00031c80 	call	100031c8 <__swsetup_r>
100013a0:	10002d1e 	bne	r2,zero,10001458 <___vfprintf_internal_r+0x408>
100013a4:	9880030b 	ldhu	r2,12(r19)
100013a8:	01000284 	movi	r4,10
100013ac:	1007883a 	mov	r3,r2
100013b0:	18c0068c 	andi	r3,r3,26
100013b4:	193f511e 	bne	r3,r4,100010fc <__alt_data_end+0xf80010fc>
100013b8:	98c0038b 	ldhu	r3,14(r19)
100013bc:	193fffcc 	andi	r4,r3,65535
100013c0:	2120001c 	xori	r4,r4,32768
100013c4:	21200004 	addi	r4,r4,-32768
100013c8:	203f4c16 	blt	r4,zero,100010fc <__alt_data_end+0xf80010fc>
100013cc:	9ac01917 	ldw	r11,100(r19)
100013d0:	9a800717 	ldw	r10,28(r19)
100013d4:	9a400917 	ldw	r9,36(r19)
100013d8:	d9012c17 	ldw	r4,1200(sp)
100013dc:	d9c12f17 	ldw	r7,1212(sp)
100013e0:	02010004 	movi	r8,1024
100013e4:	10bfff4c 	andi	r2,r2,65533
100013e8:	d8c1078d 	sth	r3,1054(sp)
100013ec:	d9410404 	addi	r5,sp,1040
100013f0:	d8c00404 	addi	r3,sp,16
100013f4:	880d883a 	mov	r6,r17
100013f8:	d881070d 	sth	r2,1052(sp)
100013fc:	dac11d15 	stw	r11,1140(sp)
10001400:	da810b15 	stw	r10,1068(sp)
10001404:	da410d15 	stw	r9,1076(sp)
10001408:	d8c10415 	stw	r3,1040(sp)
1000140c:	d8c10815 	stw	r3,1056(sp)
10001410:	da010615 	stw	r8,1048(sp)
10001414:	da010915 	stw	r8,1060(sp)
10001418:	d8010a15 	stw	zero,1064(sp)
1000141c:	00010500 	call	10001050 <___vfprintf_internal_r>
10001420:	1021883a 	mov	r16,r2
10001424:	10000416 	blt	r2,zero,10001438 <___vfprintf_internal_r+0x3e8>
10001428:	d9012c17 	ldw	r4,1200(sp)
1000142c:	d9410404 	addi	r5,sp,1040
10001430:	0004b640 	call	10004b64 <_fflush_r>
10001434:	10072a1e 	bne	r2,zero,100030e0 <___vfprintf_internal_r+0x2090>
10001438:	d881070b 	ldhu	r2,1052(sp)
1000143c:	1080100c 	andi	r2,r2,64
10001440:	10000326 	beq	r2,zero,10001450 <___vfprintf_internal_r+0x400>
10001444:	9880030b 	ldhu	r2,12(r19)
10001448:	10801014 	ori	r2,r2,64
1000144c:	9880030d 	sth	r2,12(r19)
10001450:	8005883a 	mov	r2,r16
10001454:	00000106 	br	1000145c <___vfprintf_internal_r+0x40c>
10001458:	00bfffc4 	movi	r2,-1
1000145c:	dfc14917 	ldw	ra,1316(sp)
10001460:	df014817 	ldw	fp,1312(sp)
10001464:	ddc14717 	ldw	r23,1308(sp)
10001468:	dd814617 	ldw	r22,1304(sp)
1000146c:	dd414517 	ldw	r21,1300(sp)
10001470:	dd014417 	ldw	r20,1296(sp)
10001474:	dcc14317 	ldw	r19,1292(sp)
10001478:	dc814217 	ldw	r18,1288(sp)
1000147c:	dc414117 	ldw	r17,1284(sp)
10001480:	dc014017 	ldw	r16,1280(sp)
10001484:	dec14a04 	addi	sp,sp,1320
10001488:	f800283a 	ret
1000148c:	d9012c17 	ldw	r4,1200(sp)
10001490:	980b883a 	mov	r5,r19
10001494:	d9811e04 	addi	r6,sp,1144
10001498:	00078980 	call	10007898 <__sprint_r>
1000149c:	1000081e 	bne	r2,zero,100014c0 <___vfprintf_internal_r+0x470>
100014a0:	da000404 	addi	r8,sp,16
100014a4:	003f3f06 	br	100011a4 <__alt_data_end+0xf80011a4>
100014a8:	d8812017 	ldw	r2,1152(sp)
100014ac:	10000426 	beq	r2,zero,100014c0 <___vfprintf_internal_r+0x470>
100014b0:	d9012c17 	ldw	r4,1200(sp)
100014b4:	980b883a 	mov	r5,r19
100014b8:	d9811e04 	addi	r6,sp,1144
100014bc:	00078980 	call	10007898 <__sprint_r>
100014c0:	9880030b 	ldhu	r2,12(r19)
100014c4:	1080100c 	andi	r2,r2,64
100014c8:	103fe31e 	bne	r2,zero,10001458 <__alt_data_end+0xf8001458>
100014cc:	d8813117 	ldw	r2,1220(sp)
100014d0:	003fe206 	br	1000145c <__alt_data_end+0xf800145c>
100014d4:	d9012c17 	ldw	r4,1200(sp)
100014d8:	0004e840 	call	10004e84 <__sinit>
100014dc:	003ef506 	br	100010b4 <__alt_data_end+0xf80010b4>
100014e0:	05800ac4 	movi	r22,43
100014e4:	8c800007 	ldb	r18,0(r17)
100014e8:	003f3e06 	br	100011e4 <__alt_data_end+0xf80011e4>
100014ec:	8c800007 	ldb	r18,0(r17)
100014f0:	00c00a84 	movi	r3,42
100014f4:	88800044 	addi	r2,r17,1
100014f8:	90c6fb26 	beq	r18,r3,100030e8 <___vfprintf_internal_r+0x2098>
100014fc:	953ff404 	addi	r20,r18,-48
10001500:	1023883a 	mov	r17,r2
10001504:	0007883a 	mov	r3,zero
10001508:	ad3f3736 	bltu	r21,r20,100011e8 <__alt_data_end+0xf80011e8>
1000150c:	0009883a 	mov	r4,zero
10001510:	01400284 	movi	r5,10
10001514:	000b0240 	call	1000b024 <__mulsi3>
10001518:	8c800007 	ldb	r18,0(r17)
1000151c:	a089883a 	add	r4,r20,r2
10001520:	8c400044 	addi	r17,r17,1
10001524:	953ff404 	addi	r20,r18,-48
10001528:	ad3ff92e 	bgeu	r21,r20,10001510 <__alt_data_end+0xf8001510>
1000152c:	2007883a 	mov	r3,r4
10001530:	203f2d0e 	bge	r4,zero,100011e8 <__alt_data_end+0xf80011e8>
10001534:	00ffffc4 	movi	r3,-1
10001538:	003f2b06 	br	100011e8 <__alt_data_end+0xf80011e8>
1000153c:	d9412a17 	ldw	r5,1192(sp)
10001540:	29402014 	ori	r5,r5,128
10001544:	d9412a15 	stw	r5,1192(sp)
10001548:	8c800007 	ldb	r18,0(r17)
1000154c:	003f2506 	br	100011e4 <__alt_data_end+0xf80011e4>
10001550:	d9412a17 	ldw	r5,1192(sp)
10001554:	1829883a 	mov	r20,r3
10001558:	dd812785 	stb	r22,1182(sp)
1000155c:	29400414 	ori	r5,r5,16
10001560:	d9412a15 	stw	r5,1192(sp)
10001564:	d8c12a17 	ldw	r3,1192(sp)
10001568:	e011883a 	mov	r8,fp
1000156c:	1880080c 	andi	r2,r3,32
10001570:	1001e126 	beq	r2,zero,10001cf8 <___vfprintf_internal_r+0xca8>
10001574:	d9012f17 	ldw	r4,1212(sp)
10001578:	20800117 	ldw	r2,4(r4)
1000157c:	25400017 	ldw	r21,0(r4)
10001580:	21000204 	addi	r4,r4,8
10001584:	d9012f15 	stw	r4,1212(sp)
10001588:	102d883a 	mov	r22,r2
1000158c:	10046916 	blt	r2,zero,10002734 <___vfprintf_internal_r+0x16e4>
10001590:	df012783 	ldbu	fp,1182(sp)
10001594:	00c00044 	movi	r3,1
10001598:	ad84b03a 	or	r2,r21,r22
1000159c:	a0000416 	blt	r20,zero,100015b0 <___vfprintf_internal_r+0x560>
100015a0:	d9412a17 	ldw	r5,1192(sp)
100015a4:	013fdfc4 	movi	r4,-129
100015a8:	290a703a 	and	r5,r5,r4
100015ac:	d9412a15 	stw	r5,1192(sp)
100015b0:	1002491e 	bne	r2,zero,10001ed8 <___vfprintf_internal_r+0xe88>
100015b4:	a002481e 	bne	r20,zero,10001ed8 <___vfprintf_internal_r+0xe88>
100015b8:	18c03fcc 	andi	r3,r3,255
100015bc:	1803871e 	bne	r3,zero,100023dc <___vfprintf_internal_r+0x138c>
100015c0:	d9012a17 	ldw	r4,1192(sp)
100015c4:	2080004c 	andi	r2,r4,1
100015c8:	10038426 	beq	r2,zero,100023dc <___vfprintf_internal_r+0x138c>
100015cc:	d9413d17 	ldw	r5,1268(sp)
100015d0:	00800c04 	movi	r2,48
100015d4:	d8810dc5 	stb	r2,1079(sp)
100015d8:	d9412e15 	stw	r5,1208(sp)
100015dc:	dc010dc4 	addi	r16,sp,1079
100015e0:	d8812e17 	ldw	r2,1208(sp)
100015e4:	1500010e 	bge	r2,r20,100015ec <___vfprintf_internal_r+0x59c>
100015e8:	a005883a 	mov	r2,r20
100015ec:	d8812b15 	stw	r2,1196(sp)
100015f0:	d8013315 	stw	zero,1228(sp)
100015f4:	e0803fcc 	andi	r2,fp,255
100015f8:	1080201c 	xori	r2,r2,128
100015fc:	10bfe004 	addi	r2,r2,-128
10001600:	10000326 	beq	r2,zero,10001610 <___vfprintf_internal_r+0x5c0>
10001604:	d8c12b17 	ldw	r3,1196(sp)
10001608:	18c00044 	addi	r3,r3,1
1000160c:	d8c12b15 	stw	r3,1196(sp)
10001610:	d8c12a17 	ldw	r3,1192(sp)
10001614:	18c0008c 	andi	r3,r3,2
10001618:	d8c12d15 	stw	r3,1204(sp)
1000161c:	18000326 	beq	r3,zero,1000162c <___vfprintf_internal_r+0x5dc>
10001620:	d8c12b17 	ldw	r3,1196(sp)
10001624:	18c00084 	addi	r3,r3,2
10001628:	d8c12b15 	stw	r3,1196(sp)
1000162c:	d8c12a17 	ldw	r3,1192(sp)
10001630:	18c0210c 	andi	r3,r3,132
10001634:	d8c13215 	stw	r3,1224(sp)
10001638:	1802151e 	bne	r3,zero,10001e90 <___vfprintf_internal_r+0xe40>
1000163c:	d9013017 	ldw	r4,1216(sp)
10001640:	d8c12b17 	ldw	r3,1196(sp)
10001644:	20f9c83a 	sub	fp,r4,r3
10001648:	0702110e 	bge	zero,fp,10001e90 <___vfprintf_internal_r+0xe40>
1000164c:	02400404 	movi	r9,16
10001650:	d8c12017 	ldw	r3,1152(sp)
10001654:	d8811f17 	ldw	r2,1148(sp)
10001658:	4f059a0e 	bge	r9,fp,10002cc4 <___vfprintf_internal_r+0x1c74>
1000165c:	8809883a 	mov	r4,r17
10001660:	01440074 	movhi	r5,4097
10001664:	297fb484 	addi	r5,r5,-302
10001668:	dc013c15 	stw	r16,1264(sp)
1000166c:	e023883a 	mov	r17,fp
10001670:	d9413615 	stw	r5,1240(sp)
10001674:	482d883a 	mov	r22,r9
10001678:	054001c4 	movi	r21,7
1000167c:	dc012c17 	ldw	r16,1200(sp)
10001680:	2039883a 	mov	fp,r4
10001684:	00000306 	br	10001694 <___vfprintf_internal_r+0x644>
10001688:	8c7ffc04 	addi	r17,r17,-16
1000168c:	42000204 	addi	r8,r8,8
10001690:	b440130e 	bge	r22,r17,100016e0 <___vfprintf_internal_r+0x690>
10001694:	18c00404 	addi	r3,r3,16
10001698:	10800044 	addi	r2,r2,1
1000169c:	01040074 	movhi	r4,4097
100016a0:	213fb484 	addi	r4,r4,-302
100016a4:	41000015 	stw	r4,0(r8)
100016a8:	45800115 	stw	r22,4(r8)
100016ac:	d8c12015 	stw	r3,1152(sp)
100016b0:	d8811f15 	stw	r2,1148(sp)
100016b4:	a8bff40e 	bge	r21,r2,10001688 <__alt_data_end+0xf8001688>
100016b8:	8009883a 	mov	r4,r16
100016bc:	980b883a 	mov	r5,r19
100016c0:	d9811e04 	addi	r6,sp,1144
100016c4:	00078980 	call	10007898 <__sprint_r>
100016c8:	103f7d1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
100016cc:	8c7ffc04 	addi	r17,r17,-16
100016d0:	d8c12017 	ldw	r3,1152(sp)
100016d4:	d8811f17 	ldw	r2,1148(sp)
100016d8:	da000404 	addi	r8,sp,16
100016dc:	b47fed16 	blt	r22,r17,10001694 <__alt_data_end+0xf8001694>
100016e0:	dc013c17 	ldw	r16,1264(sp)
100016e4:	e009883a 	mov	r4,fp
100016e8:	8839883a 	mov	fp,r17
100016ec:	2023883a 	mov	r17,r4
100016f0:	d9413617 	ldw	r5,1240(sp)
100016f4:	e0c7883a 	add	r3,fp,r3
100016f8:	10800044 	addi	r2,r2,1
100016fc:	41400015 	stw	r5,0(r8)
10001700:	47000115 	stw	fp,4(r8)
10001704:	d8c12015 	stw	r3,1152(sp)
10001708:	d8811f15 	stw	r2,1148(sp)
1000170c:	010001c4 	movi	r4,7
10001710:	20836b16 	blt	r4,r2,100024c0 <___vfprintf_internal_r+0x1470>
10001714:	d8812787 	ldb	r2,1182(sp)
10001718:	42000204 	addi	r8,r8,8
1000171c:	10000c26 	beq	r2,zero,10001750 <___vfprintf_internal_r+0x700>
10001720:	d8811f17 	ldw	r2,1148(sp)
10001724:	d9012784 	addi	r4,sp,1182
10001728:	18c00044 	addi	r3,r3,1
1000172c:	10800044 	addi	r2,r2,1
10001730:	41000015 	stw	r4,0(r8)
10001734:	01000044 	movi	r4,1
10001738:	41000115 	stw	r4,4(r8)
1000173c:	d8c12015 	stw	r3,1152(sp)
10001740:	d8811f15 	stw	r2,1148(sp)
10001744:	010001c4 	movi	r4,7
10001748:	2082ef16 	blt	r4,r2,10002308 <___vfprintf_internal_r+0x12b8>
1000174c:	42000204 	addi	r8,r8,8
10001750:	d8812d17 	ldw	r2,1204(sp)
10001754:	10000c26 	beq	r2,zero,10001788 <___vfprintf_internal_r+0x738>
10001758:	d8811f17 	ldw	r2,1148(sp)
1000175c:	d9012704 	addi	r4,sp,1180
10001760:	18c00084 	addi	r3,r3,2
10001764:	10800044 	addi	r2,r2,1
10001768:	41000015 	stw	r4,0(r8)
1000176c:	01000084 	movi	r4,2
10001770:	41000115 	stw	r4,4(r8)
10001774:	d8c12015 	stw	r3,1152(sp)
10001778:	d8811f15 	stw	r2,1148(sp)
1000177c:	010001c4 	movi	r4,7
10001780:	2082e916 	blt	r4,r2,10002328 <___vfprintf_internal_r+0x12d8>
10001784:	42000204 	addi	r8,r8,8
10001788:	d9013217 	ldw	r4,1224(sp)
1000178c:	00802004 	movi	r2,128
10001790:	20823226 	beq	r4,r2,1000205c <___vfprintf_internal_r+0x100c>
10001794:	d9012e17 	ldw	r4,1208(sp)
10001798:	a129c83a 	sub	r20,r20,r4
1000179c:	05002d0e 	bge	zero,r20,10001854 <___vfprintf_internal_r+0x804>
100017a0:	05800404 	movi	r22,16
100017a4:	d8811f17 	ldw	r2,1148(sp)
100017a8:	05440074 	movhi	r21,4097
100017ac:	ad7fb084 	addi	r21,r21,-318
100017b0:	b5001f0e 	bge	r22,r20,10001830 <___vfprintf_internal_r+0x7e0>
100017b4:	8809883a 	mov	r4,r17
100017b8:	dc012d15 	stw	r16,1204(sp)
100017bc:	a023883a 	mov	r17,r20
100017c0:	070001c4 	movi	fp,7
100017c4:	dc012c17 	ldw	r16,1200(sp)
100017c8:	2029883a 	mov	r20,r4
100017cc:	00000306 	br	100017dc <___vfprintf_internal_r+0x78c>
100017d0:	8c7ffc04 	addi	r17,r17,-16
100017d4:	42000204 	addi	r8,r8,8
100017d8:	b440110e 	bge	r22,r17,10001820 <___vfprintf_internal_r+0x7d0>
100017dc:	18c00404 	addi	r3,r3,16
100017e0:	10800044 	addi	r2,r2,1
100017e4:	45c00015 	stw	r23,0(r8)
100017e8:	45800115 	stw	r22,4(r8)
100017ec:	d8c12015 	stw	r3,1152(sp)
100017f0:	d8811f15 	stw	r2,1148(sp)
100017f4:	e0bff60e 	bge	fp,r2,100017d0 <__alt_data_end+0xf80017d0>
100017f8:	8009883a 	mov	r4,r16
100017fc:	980b883a 	mov	r5,r19
10001800:	d9811e04 	addi	r6,sp,1144
10001804:	00078980 	call	10007898 <__sprint_r>
10001808:	103f2d1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
1000180c:	8c7ffc04 	addi	r17,r17,-16
10001810:	d8c12017 	ldw	r3,1152(sp)
10001814:	d8811f17 	ldw	r2,1148(sp)
10001818:	da000404 	addi	r8,sp,16
1000181c:	b47fef16 	blt	r22,r17,100017dc <__alt_data_end+0xf80017dc>
10001820:	dc012d17 	ldw	r16,1204(sp)
10001824:	a009883a 	mov	r4,r20
10001828:	8829883a 	mov	r20,r17
1000182c:	2023883a 	mov	r17,r4
10001830:	1d07883a 	add	r3,r3,r20
10001834:	10800044 	addi	r2,r2,1
10001838:	45400015 	stw	r21,0(r8)
1000183c:	45000115 	stw	r20,4(r8)
10001840:	d8c12015 	stw	r3,1152(sp)
10001844:	d8811f15 	stw	r2,1148(sp)
10001848:	010001c4 	movi	r4,7
1000184c:	2082a616 	blt	r4,r2,100022e8 <___vfprintf_internal_r+0x1298>
10001850:	42000204 	addi	r8,r8,8
10001854:	d9412a17 	ldw	r5,1192(sp)
10001858:	2880400c 	andi	r2,r5,256
1000185c:	1001b51e 	bne	r2,zero,10001f34 <___vfprintf_internal_r+0xee4>
10001860:	d8812e17 	ldw	r2,1208(sp)
10001864:	d9012e17 	ldw	r4,1208(sp)
10001868:	44000015 	stw	r16,0(r8)
1000186c:	1887883a 	add	r3,r3,r2
10001870:	d8811f17 	ldw	r2,1148(sp)
10001874:	10800044 	addi	r2,r2,1
10001878:	41000115 	stw	r4,4(r8)
1000187c:	d8c12015 	stw	r3,1152(sp)
10001880:	d8811f15 	stw	r2,1148(sp)
10001884:	010001c4 	movi	r4,7
10001888:	20818b16 	blt	r4,r2,10001eb8 <___vfprintf_internal_r+0xe68>
1000188c:	42000204 	addi	r8,r8,8
10001890:	d9412a17 	ldw	r5,1192(sp)
10001894:	2880010c 	andi	r2,r5,4
10001898:	10003226 	beq	r2,zero,10001964 <___vfprintf_internal_r+0x914>
1000189c:	d8813017 	ldw	r2,1216(sp)
100018a0:	d9012b17 	ldw	r4,1196(sp)
100018a4:	1121c83a 	sub	r16,r2,r4
100018a8:	04002e0e 	bge	zero,r16,10001964 <___vfprintf_internal_r+0x914>
100018ac:	04800404 	movi	r18,16
100018b0:	d8811f17 	ldw	r2,1148(sp)
100018b4:	9405240e 	bge	r18,r16,10002d48 <___vfprintf_internal_r+0x1cf8>
100018b8:	01040074 	movhi	r4,4097
100018bc:	213fb484 	addi	r4,r4,-302
100018c0:	d9013615 	stw	r4,1240(sp)
100018c4:	050001c4 	movi	r20,7
100018c8:	dd412c17 	ldw	r21,1200(sp)
100018cc:	00000306 	br	100018dc <___vfprintf_internal_r+0x88c>
100018d0:	843ffc04 	addi	r16,r16,-16
100018d4:	42000204 	addi	r8,r8,8
100018d8:	9400130e 	bge	r18,r16,10001928 <___vfprintf_internal_r+0x8d8>
100018dc:	18c00404 	addi	r3,r3,16
100018e0:	10800044 	addi	r2,r2,1
100018e4:	01440074 	movhi	r5,4097
100018e8:	297fb484 	addi	r5,r5,-302
100018ec:	41400015 	stw	r5,0(r8)
100018f0:	44800115 	stw	r18,4(r8)
100018f4:	d8c12015 	stw	r3,1152(sp)
100018f8:	d8811f15 	stw	r2,1148(sp)
100018fc:	a0bff40e 	bge	r20,r2,100018d0 <__alt_data_end+0xf80018d0>
10001900:	a809883a 	mov	r4,r21
10001904:	980b883a 	mov	r5,r19
10001908:	d9811e04 	addi	r6,sp,1144
1000190c:	00078980 	call	10007898 <__sprint_r>
10001910:	103eeb1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10001914:	843ffc04 	addi	r16,r16,-16
10001918:	d8c12017 	ldw	r3,1152(sp)
1000191c:	d8811f17 	ldw	r2,1148(sp)
10001920:	da000404 	addi	r8,sp,16
10001924:	943fed16 	blt	r18,r16,100018dc <__alt_data_end+0xf80018dc>
10001928:	d9013617 	ldw	r4,1240(sp)
1000192c:	1c07883a 	add	r3,r3,r16
10001930:	10800044 	addi	r2,r2,1
10001934:	41000015 	stw	r4,0(r8)
10001938:	44000115 	stw	r16,4(r8)
1000193c:	d8c12015 	stw	r3,1152(sp)
10001940:	d8811f15 	stw	r2,1148(sp)
10001944:	010001c4 	movi	r4,7
10001948:	2080060e 	bge	r4,r2,10001964 <___vfprintf_internal_r+0x914>
1000194c:	d9012c17 	ldw	r4,1200(sp)
10001950:	980b883a 	mov	r5,r19
10001954:	d9811e04 	addi	r6,sp,1144
10001958:	00078980 	call	10007898 <__sprint_r>
1000195c:	103ed81e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10001960:	d8c12017 	ldw	r3,1152(sp)
10001964:	d8812b17 	ldw	r2,1196(sp)
10001968:	d9413017 	ldw	r5,1216(sp)
1000196c:	1140010e 	bge	r2,r5,10001974 <___vfprintf_internal_r+0x924>
10001970:	2805883a 	mov	r2,r5
10001974:	d9013117 	ldw	r4,1220(sp)
10001978:	2089883a 	add	r4,r4,r2
1000197c:	d9013115 	stw	r4,1220(sp)
10001980:	1802381e 	bne	r3,zero,10002264 <___vfprintf_internal_r+0x1214>
10001984:	88800007 	ldb	r2,0(r17)
10001988:	d8011f15 	stw	zero,1148(sp)
1000198c:	da000404 	addi	r8,sp,16
10001990:	103def1e 	bne	r2,zero,10001150 <__alt_data_end+0xf8001150>
10001994:	8821883a 	mov	r16,r17
10001998:	003e0506 	br	100011b0 <__alt_data_end+0xf80011b0>
1000199c:	1829883a 	mov	r20,r3
100019a0:	d8c12a17 	ldw	r3,1192(sp)
100019a4:	dd812785 	stb	r22,1182(sp)
100019a8:	e011883a 	mov	r8,fp
100019ac:	1880020c 	andi	r2,r3,8
100019b0:	1003c926 	beq	r2,zero,100028d8 <___vfprintf_internal_r+0x1888>
100019b4:	d9012f17 	ldw	r4,1212(sp)
100019b8:	d9412f17 	ldw	r5,1212(sp)
100019bc:	d8812f17 	ldw	r2,1212(sp)
100019c0:	21000017 	ldw	r4,0(r4)
100019c4:	29400117 	ldw	r5,4(r5)
100019c8:	10800204 	addi	r2,r2,8
100019cc:	d9013715 	stw	r4,1244(sp)
100019d0:	d9413915 	stw	r5,1252(sp)
100019d4:	d8812f15 	stw	r2,1212(sp)
100019d8:	d9013717 	ldw	r4,1244(sp)
100019dc:	d9413917 	ldw	r5,1252(sp)
100019e0:	da013f15 	stw	r8,1276(sp)
100019e4:	04000044 	movi	r16,1
100019e8:	00074640 	call	10007464 <__fpclassifyd>
100019ec:	da013f17 	ldw	r8,1276(sp)
100019f0:	d9013717 	ldw	r4,1244(sp)
100019f4:	d9413917 	ldw	r5,1252(sp)
100019f8:	1403571e 	bne	r2,r16,10002758 <___vfprintf_internal_r+0x1708>
100019fc:	000d883a 	mov	r6,zero
10001a00:	000f883a 	mov	r7,zero
10001a04:	000c3c00 	call	1000c3c0 <__ledf2>
10001a08:	da013f17 	ldw	r8,1276(sp)
10001a0c:	1004f416 	blt	r2,zero,10002de0 <___vfprintf_internal_r+0x1d90>
10001a10:	df012783 	ldbu	fp,1182(sp)
10001a14:	008011c4 	movi	r2,71
10001a18:	14847a0e 	bge	r2,r18,10002c04 <___vfprintf_internal_r+0x1bb4>
10001a1c:	04040074 	movhi	r16,4097
10001a20:	843fa104 	addi	r16,r16,-380
10001a24:	d9012a17 	ldw	r4,1192(sp)
10001a28:	00bfdfc4 	movi	r2,-129
10001a2c:	00c000c4 	movi	r3,3
10001a30:	2088703a 	and	r4,r4,r2
10001a34:	d8c12b15 	stw	r3,1196(sp)
10001a38:	d9012a15 	stw	r4,1192(sp)
10001a3c:	d8c12e15 	stw	r3,1208(sp)
10001a40:	0029883a 	mov	r20,zero
10001a44:	d8013315 	stw	zero,1228(sp)
10001a48:	003eea06 	br	100015f4 <__alt_data_end+0xf80015f4>
10001a4c:	953ff404 	addi	r20,r18,-48
10001a50:	d8013015 	stw	zero,1216(sp)
10001a54:	0009883a 	mov	r4,zero
10001a58:	1825883a 	mov	r18,r3
10001a5c:	01400284 	movi	r5,10
10001a60:	000b0240 	call	1000b024 <__mulsi3>
10001a64:	88c00007 	ldb	r3,0(r17)
10001a68:	1509883a 	add	r4,r2,r20
10001a6c:	8c400044 	addi	r17,r17,1
10001a70:	1d3ff404 	addi	r20,r3,-48
10001a74:	8805883a 	mov	r2,r17
10001a78:	ad3ff82e 	bgeu	r21,r20,10001a5c <__alt_data_end+0xf8001a5c>
10001a7c:	d9013015 	stw	r4,1216(sp)
10001a80:	9009883a 	mov	r4,r18
10001a84:	1023883a 	mov	r17,r2
10001a88:	1825883a 	mov	r18,r3
10001a8c:	2007883a 	mov	r3,r4
10001a90:	003dd506 	br	100011e8 <__alt_data_end+0xf80011e8>
10001a94:	d8812a17 	ldw	r2,1192(sp)
10001a98:	10800214 	ori	r2,r2,8
10001a9c:	d8812a15 	stw	r2,1192(sp)
10001aa0:	8c800007 	ldb	r18,0(r17)
10001aa4:	003dcf06 	br	100011e4 <__alt_data_end+0xf80011e4>
10001aa8:	d9012a17 	ldw	r4,1192(sp)
10001aac:	e011883a 	mov	r8,fp
10001ab0:	1829883a 	mov	r20,r3
10001ab4:	21000414 	ori	r4,r4,16
10001ab8:	d9012a15 	stw	r4,1192(sp)
10001abc:	d9412a17 	ldw	r5,1192(sp)
10001ac0:	2880080c 	andi	r2,r5,32
10001ac4:	1000cf26 	beq	r2,zero,10001e04 <___vfprintf_internal_r+0xdb4>
10001ac8:	d8812f17 	ldw	r2,1212(sp)
10001acc:	0007883a 	mov	r3,zero
10001ad0:	15400017 	ldw	r21,0(r2)
10001ad4:	15800117 	ldw	r22,4(r2)
10001ad8:	10800204 	addi	r2,r2,8
10001adc:	d8812f15 	stw	r2,1212(sp)
10001ae0:	ad84b03a 	or	r2,r21,r22
10001ae4:	d8012785 	stb	zero,1182(sp)
10001ae8:	0039883a 	mov	fp,zero
10001aec:	003eab06 	br	1000159c <__alt_data_end+0xf800159c>
10001af0:	d9012a17 	ldw	r4,1192(sp)
10001af4:	e011883a 	mov	r8,fp
10001af8:	1829883a 	mov	r20,r3
10001afc:	21000414 	ori	r4,r4,16
10001b00:	d9012a15 	stw	r4,1192(sp)
10001b04:	d9412a17 	ldw	r5,1192(sp)
10001b08:	2880080c 	andi	r2,r5,32
10001b0c:	1000cd26 	beq	r2,zero,10001e44 <___vfprintf_internal_r+0xdf4>
10001b10:	d8812f17 	ldw	r2,1212(sp)
10001b14:	00c00044 	movi	r3,1
10001b18:	15400017 	ldw	r21,0(r2)
10001b1c:	15800117 	ldw	r22,4(r2)
10001b20:	10800204 	addi	r2,r2,8
10001b24:	d8812f15 	stw	r2,1212(sp)
10001b28:	ad84b03a 	or	r2,r21,r22
10001b2c:	003fed06 	br	10001ae4 <__alt_data_end+0xf8001ae4>
10001b30:	d9012a17 	ldw	r4,1192(sp)
10001b34:	dd812785 	stb	r22,1182(sp)
10001b38:	e011883a 	mov	r8,fp
10001b3c:	2080080c 	andi	r2,r4,32
10001b40:	10039226 	beq	r2,zero,1000298c <___vfprintf_internal_r+0x193c>
10001b44:	d9412f17 	ldw	r5,1212(sp)
10001b48:	d9013117 	ldw	r4,1220(sp)
10001b4c:	28800017 	ldw	r2,0(r5)
10001b50:	2007d7fa 	srai	r3,r4,31
10001b54:	29400104 	addi	r5,r5,4
10001b58:	d9412f15 	stw	r5,1212(sp)
10001b5c:	11000015 	stw	r4,0(r2)
10001b60:	10c00115 	stw	r3,4(r2)
10001b64:	003d7806 	br	10001148 <__alt_data_end+0xf8001148>
10001b68:	d8c12f17 	ldw	r3,1212(sp)
10001b6c:	d9012f17 	ldw	r4,1212(sp)
10001b70:	e011883a 	mov	r8,fp
10001b74:	18800017 	ldw	r2,0(r3)
10001b78:	21000104 	addi	r4,r4,4
10001b7c:	00c00044 	movi	r3,1
10001b80:	d8c12b15 	stw	r3,1196(sp)
10001b84:	d8012785 	stb	zero,1182(sp)
10001b88:	d8810405 	stb	r2,1040(sp)
10001b8c:	d9012f15 	stw	r4,1212(sp)
10001b90:	d8c12e15 	stw	r3,1208(sp)
10001b94:	0029883a 	mov	r20,zero
10001b98:	d8013315 	stw	zero,1228(sp)
10001b9c:	dc010404 	addi	r16,sp,1040
10001ba0:	0005883a 	mov	r2,zero
10001ba4:	003e9a06 	br	10001610 <__alt_data_end+0xf8001610>
10001ba8:	d9412a17 	ldw	r5,1192(sp)
10001bac:	01040074 	movhi	r4,4097
10001bb0:	213fa904 	addi	r4,r4,-348
10001bb4:	dd812785 	stb	r22,1182(sp)
10001bb8:	d9013b15 	stw	r4,1260(sp)
10001bbc:	2880080c 	andi	r2,r5,32
10001bc0:	e011883a 	mov	r8,fp
10001bc4:	1829883a 	mov	r20,r3
10001bc8:	10002f26 	beq	r2,zero,10001c88 <___vfprintf_internal_r+0xc38>
10001bcc:	d8812f17 	ldw	r2,1212(sp)
10001bd0:	15400017 	ldw	r21,0(r2)
10001bd4:	15800117 	ldw	r22,4(r2)
10001bd8:	10800204 	addi	r2,r2,8
10001bdc:	d8812f15 	stw	r2,1212(sp)
10001be0:	d9012a17 	ldw	r4,1192(sp)
10001be4:	2080004c 	andi	r2,r4,1
10001be8:	10025f26 	beq	r2,zero,10002568 <___vfprintf_internal_r+0x1518>
10001bec:	ad84b03a 	or	r2,r21,r22
10001bf0:	10034e26 	beq	r2,zero,1000292c <___vfprintf_internal_r+0x18dc>
10001bf4:	00c00c04 	movi	r3,48
10001bf8:	21000094 	ori	r4,r4,2
10001bfc:	d8c12705 	stb	r3,1180(sp)
10001c00:	dc812745 	stb	r18,1181(sp)
10001c04:	d9012a15 	stw	r4,1192(sp)
10001c08:	00c00084 	movi	r3,2
10001c0c:	003fb506 	br	10001ae4 <__alt_data_end+0xf8001ae4>
10001c10:	b0803fcc 	andi	r2,r22,255
10001c14:	1080201c 	xori	r2,r2,128
10001c18:	10bfe004 	addi	r2,r2,-128
10001c1c:	1003501e 	bne	r2,zero,10002960 <___vfprintf_internal_r+0x1910>
10001c20:	05800804 	movi	r22,32
10001c24:	8c800007 	ldb	r18,0(r17)
10001c28:	003d6e06 	br	100011e4 <__alt_data_end+0xf80011e4>
10001c2c:	d9012a17 	ldw	r4,1192(sp)
10001c30:	21000054 	ori	r4,r4,1
10001c34:	d9012a15 	stw	r4,1192(sp)
10001c38:	8c800007 	ldb	r18,0(r17)
10001c3c:	003d6906 	br	100011e4 <__alt_data_end+0xf80011e4>
10001c40:	d9412f17 	ldw	r5,1212(sp)
10001c44:	d9012f17 	ldw	r4,1212(sp)
10001c48:	29400017 	ldw	r5,0(r5)
10001c4c:	20800104 	addi	r2,r4,4
10001c50:	d9413015 	stw	r5,1216(sp)
10001c54:	283dc616 	blt	r5,zero,10001370 <__alt_data_end+0xf8001370>
10001c58:	d8812f15 	stw	r2,1212(sp)
10001c5c:	8c800007 	ldb	r18,0(r17)
10001c60:	003d6006 	br	100011e4 <__alt_data_end+0xf80011e4>
10001c64:	d9412a17 	ldw	r5,1192(sp)
10001c68:	00840074 	movhi	r2,4097
10001c6c:	10bfa404 	addi	r2,r2,-368
10001c70:	d8813b15 	stw	r2,1260(sp)
10001c74:	dd812785 	stb	r22,1182(sp)
10001c78:	2880080c 	andi	r2,r5,32
10001c7c:	e011883a 	mov	r8,fp
10001c80:	1829883a 	mov	r20,r3
10001c84:	103fd11e 	bne	r2,zero,10001bcc <__alt_data_end+0xf8001bcc>
10001c88:	d8c12a17 	ldw	r3,1192(sp)
10001c8c:	1880040c 	andi	r2,r3,16
10001c90:	10033526 	beq	r2,zero,10002968 <___vfprintf_internal_r+0x1918>
10001c94:	d9012f17 	ldw	r4,1212(sp)
10001c98:	002d883a 	mov	r22,zero
10001c9c:	25400017 	ldw	r21,0(r4)
10001ca0:	21000104 	addi	r4,r4,4
10001ca4:	d9012f15 	stw	r4,1212(sp)
10001ca8:	003fcd06 	br	10001be0 <__alt_data_end+0xf8001be0>
10001cac:	d9012a17 	ldw	r4,1192(sp)
10001cb0:	21001014 	ori	r4,r4,64
10001cb4:	d9012a15 	stw	r4,1192(sp)
10001cb8:	8c800007 	ldb	r18,0(r17)
10001cbc:	003d4906 	br	100011e4 <__alt_data_end+0xf80011e4>
10001cc0:	8c800007 	ldb	r18,0(r17)
10001cc4:	01401b04 	movi	r5,108
10001cc8:	8805883a 	mov	r2,r17
10001ccc:	9143db26 	beq	r18,r5,10002c3c <___vfprintf_internal_r+0x1bec>
10001cd0:	d9412a17 	ldw	r5,1192(sp)
10001cd4:	29400414 	ori	r5,r5,16
10001cd8:	d9412a15 	stw	r5,1192(sp)
10001cdc:	003d4106 	br	100011e4 <__alt_data_end+0xf80011e4>
10001ce0:	1829883a 	mov	r20,r3
10001ce4:	d8c12a17 	ldw	r3,1192(sp)
10001ce8:	dd812785 	stb	r22,1182(sp)
10001cec:	e011883a 	mov	r8,fp
10001cf0:	1880080c 	andi	r2,r3,32
10001cf4:	103e1f1e 	bne	r2,zero,10001574 <__alt_data_end+0xf8001574>
10001cf8:	d9412a17 	ldw	r5,1192(sp)
10001cfc:	2880040c 	andi	r2,r5,16
10001d00:	10032f26 	beq	r2,zero,100029c0 <___vfprintf_internal_r+0x1970>
10001d04:	d8812f17 	ldw	r2,1212(sp)
10001d08:	15400017 	ldw	r21,0(r2)
10001d0c:	10800104 	addi	r2,r2,4
10001d10:	d8812f15 	stw	r2,1212(sp)
10001d14:	a82dd7fa 	srai	r22,r21,31
10001d18:	b005883a 	mov	r2,r22
10001d1c:	003e1b06 	br	1000158c <__alt_data_end+0xf800158c>
10001d20:	d8812a17 	ldw	r2,1192(sp)
10001d24:	10800814 	ori	r2,r2,32
10001d28:	d8812a15 	stw	r2,1192(sp)
10001d2c:	8c800007 	ldb	r18,0(r17)
10001d30:	003d2c06 	br	100011e4 <__alt_data_end+0xf80011e4>
10001d34:	1829883a 	mov	r20,r3
10001d38:	d8c12f17 	ldw	r3,1212(sp)
10001d3c:	d8012785 	stb	zero,1182(sp)
10001d40:	e011883a 	mov	r8,fp
10001d44:	1c000017 	ldw	r16,0(r3)
10001d48:	1d400104 	addi	r21,r3,4
10001d4c:	80040226 	beq	r16,zero,10002d58 <___vfprintf_internal_r+0x1d08>
10001d50:	8009883a 	mov	r4,r16
10001d54:	a003c716 	blt	r20,zero,10002c74 <___vfprintf_internal_r+0x1c24>
10001d58:	000b883a 	mov	r5,zero
10001d5c:	a00d883a 	mov	r6,r20
10001d60:	df013f15 	stw	fp,1276(sp)
10001d64:	00061340 	call	10006134 <memchr>
10001d68:	da013f17 	ldw	r8,1276(sp)
10001d6c:	10044326 	beq	r2,zero,10002e7c <___vfprintf_internal_r+0x1e2c>
10001d70:	1405c83a 	sub	r2,r2,r16
10001d74:	d8812e15 	stw	r2,1208(sp)
10001d78:	a0837c16 	blt	r20,r2,10002b6c <___vfprintf_internal_r+0x1b1c>
10001d7c:	d8812e17 	ldw	r2,1208(sp)
10001d80:	1003c116 	blt	r2,zero,10002c88 <___vfprintf_internal_r+0x1c38>
10001d84:	df012783 	ldbu	fp,1182(sp)
10001d88:	d8812b15 	stw	r2,1196(sp)
10001d8c:	dd412f15 	stw	r21,1212(sp)
10001d90:	0029883a 	mov	r20,zero
10001d94:	d8013315 	stw	zero,1228(sp)
10001d98:	003e1606 	br	100015f4 <__alt_data_end+0xf80015f4>
10001d9c:	d9012f17 	ldw	r4,1212(sp)
10001da0:	d9412a17 	ldw	r5,1192(sp)
10001da4:	00800c04 	movi	r2,48
10001da8:	25400017 	ldw	r21,0(r4)
10001dac:	d8812705 	stb	r2,1180(sp)
10001db0:	00801e04 	movi	r2,120
10001db4:	29400094 	ori	r5,r5,2
10001db8:	d8812745 	stb	r2,1181(sp)
10001dbc:	21000104 	addi	r4,r4,4
10001dc0:	00840074 	movhi	r2,4097
10001dc4:	10bfa904 	addi	r2,r2,-348
10001dc8:	1829883a 	mov	r20,r3
10001dcc:	d8813b15 	stw	r2,1260(sp)
10001dd0:	e011883a 	mov	r8,fp
10001dd4:	002d883a 	mov	r22,zero
10001dd8:	d9412a15 	stw	r5,1192(sp)
10001ddc:	d9012f15 	stw	r4,1212(sp)
10001de0:	00c00084 	movi	r3,2
10001de4:	04801e04 	movi	r18,120
10001de8:	a805883a 	mov	r2,r21
10001dec:	003f3d06 	br	10001ae4 <__alt_data_end+0xf8001ae4>
10001df0:	d9412a17 	ldw	r5,1192(sp)
10001df4:	e011883a 	mov	r8,fp
10001df8:	1829883a 	mov	r20,r3
10001dfc:	2880080c 	andi	r2,r5,32
10001e00:	103f311e 	bne	r2,zero,10001ac8 <__alt_data_end+0xf8001ac8>
10001e04:	d8c12a17 	ldw	r3,1192(sp)
10001e08:	1880040c 	andi	r2,r3,16
10001e0c:	1002c926 	beq	r2,zero,10002934 <___vfprintf_internal_r+0x18e4>
10001e10:	d9012f17 	ldw	r4,1212(sp)
10001e14:	002d883a 	mov	r22,zero
10001e18:	0007883a 	mov	r3,zero
10001e1c:	25400017 	ldw	r21,0(r4)
10001e20:	21000104 	addi	r4,r4,4
10001e24:	d9012f15 	stw	r4,1212(sp)
10001e28:	a805883a 	mov	r2,r21
10001e2c:	003f2d06 	br	10001ae4 <__alt_data_end+0xf8001ae4>
10001e30:	d9412a17 	ldw	r5,1192(sp)
10001e34:	e011883a 	mov	r8,fp
10001e38:	1829883a 	mov	r20,r3
10001e3c:	2880080c 	andi	r2,r5,32
10001e40:	103f331e 	bne	r2,zero,10001b10 <__alt_data_end+0xf8001b10>
10001e44:	d8c12a17 	ldw	r3,1192(sp)
10001e48:	1880040c 	andi	r2,r3,16
10001e4c:	1002ac26 	beq	r2,zero,10002900 <___vfprintf_internal_r+0x18b0>
10001e50:	d9012f17 	ldw	r4,1212(sp)
10001e54:	002d883a 	mov	r22,zero
10001e58:	00c00044 	movi	r3,1
10001e5c:	25400017 	ldw	r21,0(r4)
10001e60:	21000104 	addi	r4,r4,4
10001e64:	d9012f15 	stw	r4,1212(sp)
10001e68:	a805883a 	mov	r2,r21
10001e6c:	003f1d06 	br	10001ae4 <__alt_data_end+0xf8001ae4>
10001e70:	dd812785 	stb	r22,1182(sp)
10001e74:	e011883a 	mov	r8,fp
10001e78:	903d8b26 	beq	r18,zero,100014a8 <__alt_data_end+0xf80014a8>
10001e7c:	00c00044 	movi	r3,1
10001e80:	d8c12b15 	stw	r3,1196(sp)
10001e84:	dc810405 	stb	r18,1040(sp)
10001e88:	d8012785 	stb	zero,1182(sp)
10001e8c:	003f4006 	br	10001b90 <__alt_data_end+0xf8001b90>
10001e90:	d8c12017 	ldw	r3,1152(sp)
10001e94:	003e2106 	br	1000171c <__alt_data_end+0xf800171c>
10001e98:	45400015 	stw	r21,0(r8)
10001e9c:	44000115 	stw	r16,4(r8)
10001ea0:	1c07883a 	add	r3,r3,r16
10001ea4:	10800044 	addi	r2,r2,1
10001ea8:	d8c12015 	stw	r3,1152(sp)
10001eac:	d8811f15 	stw	r2,1148(sp)
10001eb0:	010001c4 	movi	r4,7
10001eb4:	20be750e 	bge	r4,r2,1000188c <__alt_data_end+0xf800188c>
10001eb8:	d9012c17 	ldw	r4,1200(sp)
10001ebc:	980b883a 	mov	r5,r19
10001ec0:	d9811e04 	addi	r6,sp,1144
10001ec4:	00078980 	call	10007898 <__sprint_r>
10001ec8:	103d7d1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10001ecc:	d8c12017 	ldw	r3,1152(sp)
10001ed0:	da000404 	addi	r8,sp,16
10001ed4:	003e6e06 	br	10001890 <__alt_data_end+0xf8001890>
10001ed8:	18803fcc 	andi	r2,r3,255
10001edc:	00c00044 	movi	r3,1
10001ee0:	10c11926 	beq	r2,r3,10002348 <___vfprintf_internal_r+0x12f8>
10001ee4:	00c00084 	movi	r3,2
10001ee8:	10c0e41e 	bne	r2,r3,1000227c <___vfprintf_internal_r+0x122c>
10001eec:	d9413b17 	ldw	r5,1260(sp)
10001ef0:	d8c10dc4 	addi	r3,sp,1079
10001ef4:	a88003cc 	andi	r2,r21,15
10001ef8:	b008973a 	slli	r4,r22,28
10001efc:	2885883a 	add	r2,r5,r2
10001f00:	a82ad13a 	srli	r21,r21,4
10001f04:	10800003 	ldbu	r2,0(r2)
10001f08:	b02cd13a 	srli	r22,r22,4
10001f0c:	256ab03a 	or	r21,r4,r21
10001f10:	18800005 	stb	r2,0(r3)
10001f14:	ad84b03a 	or	r2,r21,r22
10001f18:	1821883a 	mov	r16,r3
10001f1c:	18ffffc4 	addi	r3,r3,-1
10001f20:	103ff41e 	bne	r2,zero,10001ef4 <__alt_data_end+0xf8001ef4>
10001f24:	d8c12917 	ldw	r3,1188(sp)
10001f28:	1c07c83a 	sub	r3,r3,r16
10001f2c:	d8c12e15 	stw	r3,1208(sp)
10001f30:	003dab06 	br	100015e0 <__alt_data_end+0xf80015e0>
10001f34:	00801944 	movi	r2,101
10001f38:	14807e0e 	bge	r2,r18,10002134 <___vfprintf_internal_r+0x10e4>
10001f3c:	d9013717 	ldw	r4,1244(sp)
10001f40:	d9413917 	ldw	r5,1252(sp)
10001f44:	000d883a 	mov	r6,zero
10001f48:	000f883a 	mov	r7,zero
10001f4c:	d8c13e15 	stw	r3,1272(sp)
10001f50:	da013f15 	stw	r8,1276(sp)
10001f54:	000c2640 	call	1000c264 <__eqdf2>
10001f58:	d8c13e17 	ldw	r3,1272(sp)
10001f5c:	da013f17 	ldw	r8,1276(sp)
10001f60:	1001211e 	bne	r2,zero,100023e8 <___vfprintf_internal_r+0x1398>
10001f64:	d8811f17 	ldw	r2,1148(sp)
10001f68:	01000044 	movi	r4,1
10001f6c:	18c00044 	addi	r3,r3,1
10001f70:	10800044 	addi	r2,r2,1
10001f74:	01440074 	movhi	r5,4097
10001f78:	297fb004 	addi	r5,r5,-320
10001f7c:	41000115 	stw	r4,4(r8)
10001f80:	41400015 	stw	r5,0(r8)
10001f84:	d8c12015 	stw	r3,1152(sp)
10001f88:	d8811f15 	stw	r2,1148(sp)
10001f8c:	010001c4 	movi	r4,7
10001f90:	2082a316 	blt	r4,r2,10002a20 <___vfprintf_internal_r+0x19d0>
10001f94:	42000204 	addi	r8,r8,8
10001f98:	d8812617 	ldw	r2,1176(sp)
10001f9c:	d9013517 	ldw	r4,1236(sp)
10001fa0:	11000316 	blt	r2,r4,10001fb0 <___vfprintf_internal_r+0xf60>
10001fa4:	d9412a17 	ldw	r5,1192(sp)
10001fa8:	2880004c 	andi	r2,r5,1
10001fac:	103e3826 	beq	r2,zero,10001890 <__alt_data_end+0xf8001890>
10001fb0:	d8813817 	ldw	r2,1248(sp)
10001fb4:	d9013417 	ldw	r4,1232(sp)
10001fb8:	d9413817 	ldw	r5,1248(sp)
10001fbc:	1887883a 	add	r3,r3,r2
10001fc0:	d8811f17 	ldw	r2,1148(sp)
10001fc4:	41000015 	stw	r4,0(r8)
10001fc8:	41400115 	stw	r5,4(r8)
10001fcc:	10800044 	addi	r2,r2,1
10001fd0:	d8c12015 	stw	r3,1152(sp)
10001fd4:	d8811f15 	stw	r2,1148(sp)
10001fd8:	010001c4 	movi	r4,7
10001fdc:	20831d16 	blt	r4,r2,10002c54 <___vfprintf_internal_r+0x1c04>
10001fe0:	42000204 	addi	r8,r8,8
10001fe4:	d8813517 	ldw	r2,1236(sp)
10001fe8:	143fffc4 	addi	r16,r2,-1
10001fec:	043e280e 	bge	zero,r16,10001890 <__alt_data_end+0xf8001890>
10001ff0:	04800404 	movi	r18,16
10001ff4:	d8811f17 	ldw	r2,1148(sp)
10001ff8:	05440074 	movhi	r21,4097
10001ffc:	ad7fb084 	addi	r21,r21,-318
10002000:	943fa50e 	bge	r18,r16,10001e98 <__alt_data_end+0xf8001e98>
10002004:	050001c4 	movi	r20,7
10002008:	dd812c17 	ldw	r22,1200(sp)
1000200c:	00000306 	br	1000201c <___vfprintf_internal_r+0xfcc>
10002010:	42000204 	addi	r8,r8,8
10002014:	843ffc04 	addi	r16,r16,-16
10002018:	943f9f0e 	bge	r18,r16,10001e98 <__alt_data_end+0xf8001e98>
1000201c:	18c00404 	addi	r3,r3,16
10002020:	10800044 	addi	r2,r2,1
10002024:	45c00015 	stw	r23,0(r8)
10002028:	44800115 	stw	r18,4(r8)
1000202c:	d8c12015 	stw	r3,1152(sp)
10002030:	d8811f15 	stw	r2,1148(sp)
10002034:	a0bff60e 	bge	r20,r2,10002010 <__alt_data_end+0xf8002010>
10002038:	b009883a 	mov	r4,r22
1000203c:	980b883a 	mov	r5,r19
10002040:	d9811e04 	addi	r6,sp,1144
10002044:	00078980 	call	10007898 <__sprint_r>
10002048:	103d1d1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
1000204c:	d8c12017 	ldw	r3,1152(sp)
10002050:	d8811f17 	ldw	r2,1148(sp)
10002054:	da000404 	addi	r8,sp,16
10002058:	003fee06 	br	10002014 <__alt_data_end+0xf8002014>
1000205c:	d9413017 	ldw	r5,1216(sp)
10002060:	d8812b17 	ldw	r2,1196(sp)
10002064:	28adc83a 	sub	r22,r5,r2
10002068:	05bdca0e 	bge	zero,r22,10001794 <__alt_data_end+0xf8001794>
1000206c:	07000404 	movi	fp,16
10002070:	d8811f17 	ldw	r2,1148(sp)
10002074:	05440074 	movhi	r21,4097
10002078:	ad7fb084 	addi	r21,r21,-318
1000207c:	e580230e 	bge	fp,r22,1000210c <___vfprintf_internal_r+0x10bc>
10002080:	a809883a 	mov	r4,r21
10002084:	dc012d15 	stw	r16,1204(sp)
10002088:	882b883a 	mov	r21,r17
1000208c:	01c001c4 	movi	r7,7
10002090:	b023883a 	mov	r17,r22
10002094:	dc012c17 	ldw	r16,1200(sp)
10002098:	202d883a 	mov	r22,r4
1000209c:	00000306 	br	100020ac <___vfprintf_internal_r+0x105c>
100020a0:	8c7ffc04 	addi	r17,r17,-16
100020a4:	42000204 	addi	r8,r8,8
100020a8:	e440130e 	bge	fp,r17,100020f8 <___vfprintf_internal_r+0x10a8>
100020ac:	18c00404 	addi	r3,r3,16
100020b0:	10800044 	addi	r2,r2,1
100020b4:	45c00015 	stw	r23,0(r8)
100020b8:	47000115 	stw	fp,4(r8)
100020bc:	d8c12015 	stw	r3,1152(sp)
100020c0:	d8811f15 	stw	r2,1148(sp)
100020c4:	38bff60e 	bge	r7,r2,100020a0 <__alt_data_end+0xf80020a0>
100020c8:	8009883a 	mov	r4,r16
100020cc:	980b883a 	mov	r5,r19
100020d0:	d9811e04 	addi	r6,sp,1144
100020d4:	d9c13e15 	stw	r7,1272(sp)
100020d8:	00078980 	call	10007898 <__sprint_r>
100020dc:	d9c13e17 	ldw	r7,1272(sp)
100020e0:	103cf71e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
100020e4:	8c7ffc04 	addi	r17,r17,-16
100020e8:	d8c12017 	ldw	r3,1152(sp)
100020ec:	d8811f17 	ldw	r2,1148(sp)
100020f0:	da000404 	addi	r8,sp,16
100020f4:	e47fed16 	blt	fp,r17,100020ac <__alt_data_end+0xf80020ac>
100020f8:	dc012d17 	ldw	r16,1204(sp)
100020fc:	b009883a 	mov	r4,r22
10002100:	882d883a 	mov	r22,r17
10002104:	a823883a 	mov	r17,r21
10002108:	202b883a 	mov	r21,r4
1000210c:	1d87883a 	add	r3,r3,r22
10002110:	10800044 	addi	r2,r2,1
10002114:	45400015 	stw	r21,0(r8)
10002118:	45800115 	stw	r22,4(r8)
1000211c:	d8c12015 	stw	r3,1152(sp)
10002120:	d8811f15 	stw	r2,1148(sp)
10002124:	010001c4 	movi	r4,7
10002128:	20817a16 	blt	r4,r2,10002714 <___vfprintf_internal_r+0x16c4>
1000212c:	42000204 	addi	r8,r8,8
10002130:	003d9806 	br	10001794 <__alt_data_end+0xf8001794>
10002134:	d9013517 	ldw	r4,1236(sp)
10002138:	00800044 	movi	r2,1
1000213c:	1100340e 	bge	r2,r4,10002210 <___vfprintf_internal_r+0x11c0>
10002140:	dc811f17 	ldw	r18,1148(sp)
10002144:	00800044 	movi	r2,1
10002148:	18c00044 	addi	r3,r3,1
1000214c:	94800044 	addi	r18,r18,1
10002150:	40800115 	stw	r2,4(r8)
10002154:	44000015 	stw	r16,0(r8)
10002158:	d8c12015 	stw	r3,1152(sp)
1000215c:	dc811f15 	stw	r18,1148(sp)
10002160:	008001c4 	movi	r2,7
10002164:	14814e16 	blt	r2,r18,100026a0 <___vfprintf_internal_r+0x1650>
10002168:	42000204 	addi	r8,r8,8
1000216c:	d8813817 	ldw	r2,1248(sp)
10002170:	94800044 	addi	r18,r18,1
10002174:	dc811f15 	stw	r18,1148(sp)
10002178:	18ad883a 	add	r22,r3,r2
1000217c:	d8c13417 	ldw	r3,1232(sp)
10002180:	40800115 	stw	r2,4(r8)
10002184:	dd812015 	stw	r22,1152(sp)
10002188:	40c00015 	stw	r3,0(r8)
1000218c:	008001c4 	movi	r2,7
10002190:	14814c16 	blt	r2,r18,100026c4 <___vfprintf_internal_r+0x1674>
10002194:	45000204 	addi	r20,r8,8
10002198:	d9013717 	ldw	r4,1244(sp)
1000219c:	d9413917 	ldw	r5,1252(sp)
100021a0:	000d883a 	mov	r6,zero
100021a4:	000f883a 	mov	r7,zero
100021a8:	000c2640 	call	1000c264 <__eqdf2>
100021ac:	1000cd26 	beq	r2,zero,100024e4 <___vfprintf_internal_r+0x1494>
100021b0:	d9013517 	ldw	r4,1236(sp)
100021b4:	84000044 	addi	r16,r16,1
100021b8:	94800044 	addi	r18,r18,1
100021bc:	20bfffc4 	addi	r2,r4,-1
100021c0:	b0ad883a 	add	r22,r22,r2
100021c4:	a0800115 	stw	r2,4(r20)
100021c8:	a4000015 	stw	r16,0(r20)
100021cc:	dd812015 	stw	r22,1152(sp)
100021d0:	dc811f15 	stw	r18,1148(sp)
100021d4:	008001c4 	movi	r2,7
100021d8:	14801916 	blt	r2,r18,10002240 <___vfprintf_internal_r+0x11f0>
100021dc:	a5000204 	addi	r20,r20,8
100021e0:	d9013a17 	ldw	r4,1256(sp)
100021e4:	d88122c4 	addi	r2,sp,1163
100021e8:	94800044 	addi	r18,r18,1
100021ec:	2587883a 	add	r3,r4,r22
100021f0:	a0800015 	stw	r2,0(r20)
100021f4:	a1000115 	stw	r4,4(r20)
100021f8:	d8c12015 	stw	r3,1152(sp)
100021fc:	dc811f15 	stw	r18,1148(sp)
10002200:	008001c4 	movi	r2,7
10002204:	14bf2c16 	blt	r2,r18,10001eb8 <__alt_data_end+0xf8001eb8>
10002208:	a2000204 	addi	r8,r20,8
1000220c:	003da006 	br	10001890 <__alt_data_end+0xf8001890>
10002210:	d9412a17 	ldw	r5,1192(sp)
10002214:	2888703a 	and	r4,r5,r2
10002218:	203fc91e 	bne	r4,zero,10002140 <__alt_data_end+0xf8002140>
1000221c:	dc811f17 	ldw	r18,1148(sp)
10002220:	1d800044 	addi	r22,r3,1
10002224:	40800115 	stw	r2,4(r8)
10002228:	94800044 	addi	r18,r18,1
1000222c:	44000015 	stw	r16,0(r8)
10002230:	dd812015 	stw	r22,1152(sp)
10002234:	dc811f15 	stw	r18,1148(sp)
10002238:	008001c4 	movi	r2,7
1000223c:	1482740e 	bge	r2,r18,10002c10 <___vfprintf_internal_r+0x1bc0>
10002240:	d9012c17 	ldw	r4,1200(sp)
10002244:	980b883a 	mov	r5,r19
10002248:	d9811e04 	addi	r6,sp,1144
1000224c:	00078980 	call	10007898 <__sprint_r>
10002250:	103c9b1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002254:	dd812017 	ldw	r22,1152(sp)
10002258:	dc811f17 	ldw	r18,1148(sp)
1000225c:	dd000404 	addi	r20,sp,16
10002260:	003fdf06 	br	100021e0 <__alt_data_end+0xf80021e0>
10002264:	d9012c17 	ldw	r4,1200(sp)
10002268:	980b883a 	mov	r5,r19
1000226c:	d9811e04 	addi	r6,sp,1144
10002270:	00078980 	call	10007898 <__sprint_r>
10002274:	103dc326 	beq	r2,zero,10001984 <__alt_data_end+0xf8001984>
10002278:	003c9106 	br	100014c0 <__alt_data_end+0xf80014c0>
1000227c:	d8c10dc4 	addi	r3,sp,1079
10002280:	a808d0fa 	srli	r4,r21,3
10002284:	b00a977a 	slli	r5,r22,29
10002288:	b02cd0fa 	srli	r22,r22,3
1000228c:	ad4001cc 	andi	r21,r21,7
10002290:	a8800c04 	addi	r2,r21,48
10002294:	292ab03a 	or	r21,r5,r4
10002298:	18800005 	stb	r2,0(r3)
1000229c:	ad88b03a 	or	r4,r21,r22
100022a0:	1821883a 	mov	r16,r3
100022a4:	18ffffc4 	addi	r3,r3,-1
100022a8:	203ff51e 	bne	r4,zero,10002280 <__alt_data_end+0xf8002280>
100022ac:	d9412a17 	ldw	r5,1192(sp)
100022b0:	2900004c 	andi	r4,r5,1
100022b4:	800b883a 	mov	r5,r16
100022b8:	203f1a26 	beq	r4,zero,10001f24 <__alt_data_end+0xf8001f24>
100022bc:	10803fcc 	andi	r2,r2,255
100022c0:	1080201c 	xori	r2,r2,128
100022c4:	10bfe004 	addi	r2,r2,-128
100022c8:	01000c04 	movi	r4,48
100022cc:	113f1526 	beq	r2,r4,10001f24 <__alt_data_end+0xf8001f24>
100022d0:	1821883a 	mov	r16,r3
100022d4:	d8c12917 	ldw	r3,1188(sp)
100022d8:	293fffc5 	stb	r4,-1(r5)
100022dc:	1c07c83a 	sub	r3,r3,r16
100022e0:	d8c12e15 	stw	r3,1208(sp)
100022e4:	003cbe06 	br	100015e0 <__alt_data_end+0xf80015e0>
100022e8:	d9012c17 	ldw	r4,1200(sp)
100022ec:	980b883a 	mov	r5,r19
100022f0:	d9811e04 	addi	r6,sp,1144
100022f4:	00078980 	call	10007898 <__sprint_r>
100022f8:	103c711e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
100022fc:	d8c12017 	ldw	r3,1152(sp)
10002300:	da000404 	addi	r8,sp,16
10002304:	003d5306 	br	10001854 <__alt_data_end+0xf8001854>
10002308:	d9012c17 	ldw	r4,1200(sp)
1000230c:	980b883a 	mov	r5,r19
10002310:	d9811e04 	addi	r6,sp,1144
10002314:	00078980 	call	10007898 <__sprint_r>
10002318:	103c691e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
1000231c:	d8c12017 	ldw	r3,1152(sp)
10002320:	da000404 	addi	r8,sp,16
10002324:	003d0a06 	br	10001750 <__alt_data_end+0xf8001750>
10002328:	d9012c17 	ldw	r4,1200(sp)
1000232c:	980b883a 	mov	r5,r19
10002330:	d9811e04 	addi	r6,sp,1144
10002334:	00078980 	call	10007898 <__sprint_r>
10002338:	103c611e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
1000233c:	d8c12017 	ldw	r3,1152(sp)
10002340:	da000404 	addi	r8,sp,16
10002344:	003d1006 	br	10001788 <__alt_data_end+0xf8001788>
10002348:	b000021e 	bne	r22,zero,10002354 <___vfprintf_internal_r+0x1304>
1000234c:	00800244 	movi	r2,9
10002350:	15401c2e 	bgeu	r2,r21,100023c4 <___vfprintf_internal_r+0x1374>
10002354:	dc412b15 	stw	r17,1196(sp)
10002358:	d8810dc4 	addi	r2,sp,1079
1000235c:	b023883a 	mov	r17,r22
10002360:	402d883a 	mov	r22,r8
10002364:	a809883a 	mov	r4,r21
10002368:	880b883a 	mov	r5,r17
1000236c:	01800284 	movi	r6,10
10002370:	000f883a 	mov	r7,zero
10002374:	1021883a 	mov	r16,r2
10002378:	000a8dc0 	call	1000a8dc <__umoddi3>
1000237c:	10800c04 	addi	r2,r2,48
10002380:	a809883a 	mov	r4,r21
10002384:	880b883a 	mov	r5,r17
10002388:	80800005 	stb	r2,0(r16)
1000238c:	01800284 	movi	r6,10
10002390:	000f883a 	mov	r7,zero
10002394:	000a2880 	call	1000a288 <__udivdi3>
10002398:	1823883a 	mov	r17,r3
1000239c:	10c6b03a 	or	r3,r2,r3
100023a0:	102b883a 	mov	r21,r2
100023a4:	80bfffc4 	addi	r2,r16,-1
100023a8:	183fee1e 	bne	r3,zero,10002364 <__alt_data_end+0xf8002364>
100023ac:	d8c12917 	ldw	r3,1188(sp)
100023b0:	b011883a 	mov	r8,r22
100023b4:	dc412b17 	ldw	r17,1196(sp)
100023b8:	1c07c83a 	sub	r3,r3,r16
100023bc:	d8c12e15 	stw	r3,1208(sp)
100023c0:	003c8706 	br	100015e0 <__alt_data_end+0xf80015e0>
100023c4:	d9013d17 	ldw	r4,1268(sp)
100023c8:	ad400c04 	addi	r21,r21,48
100023cc:	dd410dc5 	stb	r21,1079(sp)
100023d0:	d9012e15 	stw	r4,1208(sp)
100023d4:	dc010dc4 	addi	r16,sp,1079
100023d8:	003c8106 	br	100015e0 <__alt_data_end+0xf80015e0>
100023dc:	d8012e15 	stw	zero,1208(sp)
100023e0:	dc010e04 	addi	r16,sp,1080
100023e4:	003c7e06 	br	100015e0 <__alt_data_end+0xf80015e0>
100023e8:	d8812617 	ldw	r2,1176(sp)
100023ec:	0081940e 	bge	zero,r2,10002a40 <___vfprintf_internal_r+0x19f0>
100023f0:	d9413517 	ldw	r5,1236(sp)
100023f4:	d8813317 	ldw	r2,1228(sp)
100023f8:	8165883a 	add	r18,r16,r5
100023fc:	9429c83a 	sub	r20,r18,r16
10002400:	1500010e 	bge	r2,r20,10002408 <___vfprintf_internal_r+0x13b8>
10002404:	1029883a 	mov	r20,r2
10002408:	05000a0e 	bge	zero,r20,10002434 <___vfprintf_internal_r+0x13e4>
1000240c:	d8811f17 	ldw	r2,1148(sp)
10002410:	1d07883a 	add	r3,r3,r20
10002414:	44000015 	stw	r16,0(r8)
10002418:	10800044 	addi	r2,r2,1
1000241c:	45000115 	stw	r20,4(r8)
10002420:	d8c12015 	stw	r3,1152(sp)
10002424:	d8811f15 	stw	r2,1148(sp)
10002428:	010001c4 	movi	r4,7
1000242c:	20822b16 	blt	r4,r2,10002cdc <___vfprintf_internal_r+0x1c8c>
10002430:	42000204 	addi	r8,r8,8
10002434:	a0022716 	blt	r20,zero,10002cd4 <___vfprintf_internal_r+0x1c84>
10002438:	d9013317 	ldw	r4,1228(sp)
1000243c:	2529c83a 	sub	r20,r4,r20
10002440:	0500530e 	bge	zero,r20,10002590 <___vfprintf_internal_r+0x1540>
10002444:	05800404 	movi	r22,16
10002448:	d8811f17 	ldw	r2,1148(sp)
1000244c:	05440074 	movhi	r21,4097
10002450:	ad7fb084 	addi	r21,r21,-318
10002454:	b501680e 	bge	r22,r20,100029f8 <___vfprintf_internal_r+0x19a8>
10002458:	8809883a 	mov	r4,r17
1000245c:	dc012e15 	stw	r16,1208(sp)
10002460:	a023883a 	mov	r17,r20
10002464:	070001c4 	movi	fp,7
10002468:	dc012c17 	ldw	r16,1200(sp)
1000246c:	2029883a 	mov	r20,r4
10002470:	00000306 	br	10002480 <___vfprintf_internal_r+0x1430>
10002474:	42000204 	addi	r8,r8,8
10002478:	8c7ffc04 	addi	r17,r17,-16
1000247c:	b4415a0e 	bge	r22,r17,100029e8 <___vfprintf_internal_r+0x1998>
10002480:	18c00404 	addi	r3,r3,16
10002484:	10800044 	addi	r2,r2,1
10002488:	45c00015 	stw	r23,0(r8)
1000248c:	45800115 	stw	r22,4(r8)
10002490:	d8c12015 	stw	r3,1152(sp)
10002494:	d8811f15 	stw	r2,1148(sp)
10002498:	e0bff60e 	bge	fp,r2,10002474 <__alt_data_end+0xf8002474>
1000249c:	8009883a 	mov	r4,r16
100024a0:	980b883a 	mov	r5,r19
100024a4:	d9811e04 	addi	r6,sp,1144
100024a8:	00078980 	call	10007898 <__sprint_r>
100024ac:	103c041e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
100024b0:	d8c12017 	ldw	r3,1152(sp)
100024b4:	d8811f17 	ldw	r2,1148(sp)
100024b8:	da000404 	addi	r8,sp,16
100024bc:	003fee06 	br	10002478 <__alt_data_end+0xf8002478>
100024c0:	d9012c17 	ldw	r4,1200(sp)
100024c4:	980b883a 	mov	r5,r19
100024c8:	d9811e04 	addi	r6,sp,1144
100024cc:	00078980 	call	10007898 <__sprint_r>
100024d0:	103bfb1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
100024d4:	d8c12017 	ldw	r3,1152(sp)
100024d8:	d8812787 	ldb	r2,1182(sp)
100024dc:	da000404 	addi	r8,sp,16
100024e0:	003c8e06 	br	1000171c <__alt_data_end+0xf800171c>
100024e4:	d9413517 	ldw	r5,1236(sp)
100024e8:	2c3fffc4 	addi	r16,r5,-1
100024ec:	043f3c0e 	bge	zero,r16,100021e0 <__alt_data_end+0xf80021e0>
100024f0:	07000404 	movi	fp,16
100024f4:	05440074 	movhi	r21,4097
100024f8:	ad7fb084 	addi	r21,r21,-318
100024fc:	e4007c0e 	bge	fp,r16,100026f0 <___vfprintf_internal_r+0x16a0>
10002500:	dc412e15 	stw	r17,1208(sp)
10002504:	00c001c4 	movi	r3,7
10002508:	8023883a 	mov	r17,r16
1000250c:	dc012c17 	ldw	r16,1200(sp)
10002510:	00000306 	br	10002520 <___vfprintf_internal_r+0x14d0>
10002514:	a5000204 	addi	r20,r20,8
10002518:	8c7ffc04 	addi	r17,r17,-16
1000251c:	e440720e 	bge	fp,r17,100026e8 <___vfprintf_internal_r+0x1698>
10002520:	b5800404 	addi	r22,r22,16
10002524:	94800044 	addi	r18,r18,1
10002528:	a5c00015 	stw	r23,0(r20)
1000252c:	a7000115 	stw	fp,4(r20)
10002530:	dd812015 	stw	r22,1152(sp)
10002534:	dc811f15 	stw	r18,1148(sp)
10002538:	1cbff60e 	bge	r3,r18,10002514 <__alt_data_end+0xf8002514>
1000253c:	8009883a 	mov	r4,r16
10002540:	980b883a 	mov	r5,r19
10002544:	d9811e04 	addi	r6,sp,1144
10002548:	d8c13e15 	stw	r3,1272(sp)
1000254c:	00078980 	call	10007898 <__sprint_r>
10002550:	d8c13e17 	ldw	r3,1272(sp)
10002554:	103bda1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002558:	dd812017 	ldw	r22,1152(sp)
1000255c:	dc811f17 	ldw	r18,1148(sp)
10002560:	dd000404 	addi	r20,sp,16
10002564:	003fec06 	br	10002518 <__alt_data_end+0xf8002518>
10002568:	00c00084 	movi	r3,2
1000256c:	ad84b03a 	or	r2,r21,r22
10002570:	003d5c06 	br	10001ae4 <__alt_data_end+0xf8001ae4>
10002574:	d9012c17 	ldw	r4,1200(sp)
10002578:	980b883a 	mov	r5,r19
1000257c:	d9811e04 	addi	r6,sp,1144
10002580:	00078980 	call	10007898 <__sprint_r>
10002584:	103bce1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002588:	d8c12017 	ldw	r3,1152(sp)
1000258c:	da000404 	addi	r8,sp,16
10002590:	d9413317 	ldw	r5,1228(sp)
10002594:	d8812617 	ldw	r2,1176(sp)
10002598:	d9013517 	ldw	r4,1236(sp)
1000259c:	8161883a 	add	r16,r16,r5
100025a0:	11000316 	blt	r2,r4,100025b0 <___vfprintf_internal_r+0x1560>
100025a4:	d9412a17 	ldw	r5,1192(sp)
100025a8:	2900004c 	andi	r4,r5,1
100025ac:	20000d26 	beq	r4,zero,100025e4 <___vfprintf_internal_r+0x1594>
100025b0:	d9013817 	ldw	r4,1248(sp)
100025b4:	d9413417 	ldw	r5,1232(sp)
100025b8:	1907883a 	add	r3,r3,r4
100025bc:	d9011f17 	ldw	r4,1148(sp)
100025c0:	41400015 	stw	r5,0(r8)
100025c4:	d9413817 	ldw	r5,1248(sp)
100025c8:	21000044 	addi	r4,r4,1
100025cc:	d8c12015 	stw	r3,1152(sp)
100025d0:	41400115 	stw	r5,4(r8)
100025d4:	d9011f15 	stw	r4,1148(sp)
100025d8:	014001c4 	movi	r5,7
100025dc:	2901c716 	blt	r5,r4,10002cfc <___vfprintf_internal_r+0x1cac>
100025e0:	42000204 	addi	r8,r8,8
100025e4:	d9013517 	ldw	r4,1236(sp)
100025e8:	9425c83a 	sub	r18,r18,r16
100025ec:	2085c83a 	sub	r2,r4,r2
100025f0:	1029883a 	mov	r20,r2
100025f4:	9080010e 	bge	r18,r2,100025fc <___vfprintf_internal_r+0x15ac>
100025f8:	9029883a 	mov	r20,r18
100025fc:	05000a0e 	bge	zero,r20,10002628 <___vfprintf_internal_r+0x15d8>
10002600:	d9011f17 	ldw	r4,1148(sp)
10002604:	1d07883a 	add	r3,r3,r20
10002608:	44000015 	stw	r16,0(r8)
1000260c:	21000044 	addi	r4,r4,1
10002610:	45000115 	stw	r20,4(r8)
10002614:	d8c12015 	stw	r3,1152(sp)
10002618:	d9011f15 	stw	r4,1148(sp)
1000261c:	014001c4 	movi	r5,7
10002620:	2901dd16 	blt	r5,r4,10002d98 <___vfprintf_internal_r+0x1d48>
10002624:	42000204 	addi	r8,r8,8
10002628:	a001d916 	blt	r20,zero,10002d90 <___vfprintf_internal_r+0x1d40>
1000262c:	1521c83a 	sub	r16,r2,r20
10002630:	043c970e 	bge	zero,r16,10001890 <__alt_data_end+0xf8001890>
10002634:	04800404 	movi	r18,16
10002638:	d8811f17 	ldw	r2,1148(sp)
1000263c:	05440074 	movhi	r21,4097
10002640:	ad7fb084 	addi	r21,r21,-318
10002644:	943e140e 	bge	r18,r16,10001e98 <__alt_data_end+0xf8001e98>
10002648:	050001c4 	movi	r20,7
1000264c:	dd812c17 	ldw	r22,1200(sp)
10002650:	00000306 	br	10002660 <___vfprintf_internal_r+0x1610>
10002654:	42000204 	addi	r8,r8,8
10002658:	843ffc04 	addi	r16,r16,-16
1000265c:	943e0e0e 	bge	r18,r16,10001e98 <__alt_data_end+0xf8001e98>
10002660:	18c00404 	addi	r3,r3,16
10002664:	10800044 	addi	r2,r2,1
10002668:	45c00015 	stw	r23,0(r8)
1000266c:	44800115 	stw	r18,4(r8)
10002670:	d8c12015 	stw	r3,1152(sp)
10002674:	d8811f15 	stw	r2,1148(sp)
10002678:	a0bff60e 	bge	r20,r2,10002654 <__alt_data_end+0xf8002654>
1000267c:	b009883a 	mov	r4,r22
10002680:	980b883a 	mov	r5,r19
10002684:	d9811e04 	addi	r6,sp,1144
10002688:	00078980 	call	10007898 <__sprint_r>
1000268c:	103b8c1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002690:	d8c12017 	ldw	r3,1152(sp)
10002694:	d8811f17 	ldw	r2,1148(sp)
10002698:	da000404 	addi	r8,sp,16
1000269c:	003fee06 	br	10002658 <__alt_data_end+0xf8002658>
100026a0:	d9012c17 	ldw	r4,1200(sp)
100026a4:	980b883a 	mov	r5,r19
100026a8:	d9811e04 	addi	r6,sp,1144
100026ac:	00078980 	call	10007898 <__sprint_r>
100026b0:	103b831e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
100026b4:	d8c12017 	ldw	r3,1152(sp)
100026b8:	dc811f17 	ldw	r18,1148(sp)
100026bc:	da000404 	addi	r8,sp,16
100026c0:	003eaa06 	br	1000216c <__alt_data_end+0xf800216c>
100026c4:	d9012c17 	ldw	r4,1200(sp)
100026c8:	980b883a 	mov	r5,r19
100026cc:	d9811e04 	addi	r6,sp,1144
100026d0:	00078980 	call	10007898 <__sprint_r>
100026d4:	103b7a1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
100026d8:	dd812017 	ldw	r22,1152(sp)
100026dc:	dc811f17 	ldw	r18,1148(sp)
100026e0:	dd000404 	addi	r20,sp,16
100026e4:	003eac06 	br	10002198 <__alt_data_end+0xf8002198>
100026e8:	8821883a 	mov	r16,r17
100026ec:	dc412e17 	ldw	r17,1208(sp)
100026f0:	b42d883a 	add	r22,r22,r16
100026f4:	94800044 	addi	r18,r18,1
100026f8:	a5400015 	stw	r21,0(r20)
100026fc:	a4000115 	stw	r16,4(r20)
10002700:	dd812015 	stw	r22,1152(sp)
10002704:	dc811f15 	stw	r18,1148(sp)
10002708:	008001c4 	movi	r2,7
1000270c:	14beb30e 	bge	r2,r18,100021dc <__alt_data_end+0xf80021dc>
10002710:	003ecb06 	br	10002240 <__alt_data_end+0xf8002240>
10002714:	d9012c17 	ldw	r4,1200(sp)
10002718:	980b883a 	mov	r5,r19
1000271c:	d9811e04 	addi	r6,sp,1144
10002720:	00078980 	call	10007898 <__sprint_r>
10002724:	103b661e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002728:	d8c12017 	ldw	r3,1152(sp)
1000272c:	da000404 	addi	r8,sp,16
10002730:	003c1806 	br	10001794 <__alt_data_end+0xf8001794>
10002734:	056bc83a 	sub	r21,zero,r21
10002738:	a804c03a 	cmpne	r2,r21,zero
1000273c:	05adc83a 	sub	r22,zero,r22
10002740:	07000b44 	movi	fp,45
10002744:	b0adc83a 	sub	r22,r22,r2
10002748:	df012785 	stb	fp,1182(sp)
1000274c:	00c00044 	movi	r3,1
10002750:	ad84b03a 	or	r2,r21,r22
10002754:	003b9106 	br	1000159c <__alt_data_end+0xf800159c>
10002758:	da013f15 	stw	r8,1276(sp)
1000275c:	00074640 	call	10007464 <__fpclassifyd>
10002760:	da013f17 	ldw	r8,1276(sp)
10002764:	1000f226 	beq	r2,zero,10002b30 <___vfprintf_internal_r+0x1ae0>
10002768:	05bff7c4 	movi	r22,-33
1000276c:	00bfffc4 	movi	r2,-1
10002770:	95ac703a 	and	r22,r18,r22
10002774:	a0820b26 	beq	r20,r2,10002fa4 <___vfprintf_internal_r+0x1f54>
10002778:	008011c4 	movi	r2,71
1000277c:	b081fc26 	beq	r22,r2,10002f70 <___vfprintf_internal_r+0x1f20>
10002780:	d8c12a17 	ldw	r3,1192(sp)
10002784:	d9013917 	ldw	r4,1252(sp)
10002788:	18c04014 	ori	r3,r3,256
1000278c:	d8c12d15 	stw	r3,1204(sp)
10002790:	20020616 	blt	r4,zero,10002fac <___vfprintf_internal_r+0x1f5c>
10002794:	dd413917 	ldw	r21,1252(sp)
10002798:	d8012b05 	stb	zero,1196(sp)
1000279c:	00801984 	movi	r2,102
100027a0:	9081a526 	beq	r18,r2,10002e38 <___vfprintf_internal_r+0x1de8>
100027a4:	00801184 	movi	r2,70
100027a8:	9081a326 	beq	r18,r2,10002e38 <___vfprintf_internal_r+0x1de8>
100027ac:	00801144 	movi	r2,69
100027b0:	b0820226 	beq	r22,r2,10002fbc <___vfprintf_internal_r+0x1f6c>
100027b4:	a039883a 	mov	fp,r20
100027b8:	d8812604 	addi	r2,sp,1176
100027bc:	d8800115 	stw	r2,4(sp)
100027c0:	d9012c17 	ldw	r4,1200(sp)
100027c4:	d8812504 	addi	r2,sp,1172
100027c8:	d9413717 	ldw	r5,1244(sp)
100027cc:	d8800215 	stw	r2,8(sp)
100027d0:	d8812104 	addi	r2,sp,1156
100027d4:	df000015 	stw	fp,0(sp)
100027d8:	d8800315 	stw	r2,12(sp)
100027dc:	a80d883a 	mov	r6,r21
100027e0:	01c00084 	movi	r7,2
100027e4:	da013f15 	stw	r8,1276(sp)
100027e8:	00035280 	call	10003528 <_dtoa_r>
100027ec:	1021883a 	mov	r16,r2
100027f0:	008019c4 	movi	r2,103
100027f4:	da013f17 	ldw	r8,1276(sp)
100027f8:	90800226 	beq	r18,r2,10002804 <___vfprintf_internal_r+0x17b4>
100027fc:	008011c4 	movi	r2,71
10002800:	9080031e 	bne	r18,r2,10002810 <___vfprintf_internal_r+0x17c0>
10002804:	d9012a17 	ldw	r4,1192(sp)
10002808:	2080004c 	andi	r2,r4,1
1000280c:	1001fe26 	beq	r2,zero,10003008 <___vfprintf_internal_r+0x1fb8>
10002810:	00801184 	movi	r2,70
10002814:	8713883a 	add	r9,r16,fp
10002818:	b0819f26 	beq	r22,r2,10002e98 <___vfprintf_internal_r+0x1e48>
1000281c:	d9013717 	ldw	r4,1244(sp)
10002820:	a80b883a 	mov	r5,r21
10002824:	000d883a 	mov	r6,zero
10002828:	000f883a 	mov	r7,zero
1000282c:	da013f15 	stw	r8,1276(sp)
10002830:	da413e15 	stw	r9,1272(sp)
10002834:	000c2640 	call	1000c264 <__eqdf2>
10002838:	da013f17 	ldw	r8,1276(sp)
1000283c:	da413e17 	ldw	r9,1272(sp)
10002840:	10017b26 	beq	r2,zero,10002e30 <___vfprintf_internal_r+0x1de0>
10002844:	d8812117 	ldw	r2,1156(sp)
10002848:	1240062e 	bgeu	r2,r9,10002864 <___vfprintf_internal_r+0x1814>
1000284c:	01000c04 	movi	r4,48
10002850:	10c00044 	addi	r3,r2,1
10002854:	d8c12115 	stw	r3,1156(sp)
10002858:	11000005 	stb	r4,0(r2)
1000285c:	d8812117 	ldw	r2,1156(sp)
10002860:	127ffb36 	bltu	r2,r9,10002850 <__alt_data_end+0xf8002850>
10002864:	1405c83a 	sub	r2,r2,r16
10002868:	d8813515 	stw	r2,1236(sp)
1000286c:	008011c4 	movi	r2,71
10002870:	b0816926 	beq	r22,r2,10002e18 <___vfprintf_internal_r+0x1dc8>
10002874:	00801944 	movi	r2,101
10002878:	14823f0e 	bge	r2,r18,10003178 <___vfprintf_internal_r+0x2128>
1000287c:	d8c12617 	ldw	r3,1176(sp)
10002880:	00801984 	movi	r2,102
10002884:	d8c13315 	stw	r3,1228(sp)
10002888:	9081e126 	beq	r18,r2,10003010 <___vfprintf_internal_r+0x1fc0>
1000288c:	d8c13317 	ldw	r3,1228(sp)
10002890:	d9013517 	ldw	r4,1236(sp)
10002894:	1901cb16 	blt	r3,r4,10002fc4 <___vfprintf_internal_r+0x1f74>
10002898:	d9412a17 	ldw	r5,1192(sp)
1000289c:	2880004c 	andi	r2,r5,1
100028a0:	1001d11e 	bne	r2,zero,10002fe8 <___vfprintf_internal_r+0x1f98>
100028a4:	1805883a 	mov	r2,r3
100028a8:	18023116 	blt	r3,zero,10003170 <___vfprintf_internal_r+0x2120>
100028ac:	d8c13317 	ldw	r3,1228(sp)
100028b0:	048019c4 	movi	r18,103
100028b4:	d8c12e15 	stw	r3,1208(sp)
100028b8:	df012b07 	ldb	fp,1196(sp)
100028bc:	e0014e1e 	bne	fp,zero,10002df8 <___vfprintf_internal_r+0x1da8>
100028c0:	d8c12d17 	ldw	r3,1204(sp)
100028c4:	df012783 	ldbu	fp,1182(sp)
100028c8:	d8812b15 	stw	r2,1196(sp)
100028cc:	d8c12a15 	stw	r3,1192(sp)
100028d0:	0029883a 	mov	r20,zero
100028d4:	003b4706 	br	100015f4 <__alt_data_end+0xf80015f4>
100028d8:	d8c12f17 	ldw	r3,1212(sp)
100028dc:	d9012f17 	ldw	r4,1212(sp)
100028e0:	d9412f17 	ldw	r5,1212(sp)
100028e4:	18c00017 	ldw	r3,0(r3)
100028e8:	21000117 	ldw	r4,4(r4)
100028ec:	29400204 	addi	r5,r5,8
100028f0:	d8c13715 	stw	r3,1244(sp)
100028f4:	d9013915 	stw	r4,1252(sp)
100028f8:	d9412f15 	stw	r5,1212(sp)
100028fc:	003c3606 	br	100019d8 <__alt_data_end+0xf80019d8>
10002900:	d9412a17 	ldw	r5,1192(sp)
10002904:	2880100c 	andi	r2,r5,64
10002908:	1000b026 	beq	r2,zero,10002bcc <___vfprintf_internal_r+0x1b7c>
1000290c:	d8812f17 	ldw	r2,1212(sp)
10002910:	002d883a 	mov	r22,zero
10002914:	00c00044 	movi	r3,1
10002918:	1540000b 	ldhu	r21,0(r2)
1000291c:	10800104 	addi	r2,r2,4
10002920:	d8812f15 	stw	r2,1212(sp)
10002924:	a805883a 	mov	r2,r21
10002928:	003c6e06 	br	10001ae4 <__alt_data_end+0xf8001ae4>
1000292c:	00c00084 	movi	r3,2
10002930:	003c6c06 	br	10001ae4 <__alt_data_end+0xf8001ae4>
10002934:	d9412a17 	ldw	r5,1192(sp)
10002938:	2880100c 	andi	r2,r5,64
1000293c:	10009b26 	beq	r2,zero,10002bac <___vfprintf_internal_r+0x1b5c>
10002940:	d8812f17 	ldw	r2,1212(sp)
10002944:	002d883a 	mov	r22,zero
10002948:	0007883a 	mov	r3,zero
1000294c:	1540000b 	ldhu	r21,0(r2)
10002950:	10800104 	addi	r2,r2,4
10002954:	d8812f15 	stw	r2,1212(sp)
10002958:	a805883a 	mov	r2,r21
1000295c:	003c6106 	br	10001ae4 <__alt_data_end+0xf8001ae4>
10002960:	8c800007 	ldb	r18,0(r17)
10002964:	003a1f06 	br	100011e4 <__alt_data_end+0xf80011e4>
10002968:	d9412a17 	ldw	r5,1192(sp)
1000296c:	2880100c 	andi	r2,r5,64
10002970:	10009e26 	beq	r2,zero,10002bec <___vfprintf_internal_r+0x1b9c>
10002974:	d8812f17 	ldw	r2,1212(sp)
10002978:	002d883a 	mov	r22,zero
1000297c:	1540000b 	ldhu	r21,0(r2)
10002980:	10800104 	addi	r2,r2,4
10002984:	d8812f15 	stw	r2,1212(sp)
10002988:	003c9506 	br	10001be0 <__alt_data_end+0xf8001be0>
1000298c:	d9412a17 	ldw	r5,1192(sp)
10002990:	2880040c 	andi	r2,r5,16
10002994:	10007e1e 	bne	r2,zero,10002b90 <___vfprintf_internal_r+0x1b40>
10002998:	d9412a17 	ldw	r5,1192(sp)
1000299c:	2880100c 	andi	r2,r5,64
100029a0:	10010826 	beq	r2,zero,10002dc4 <___vfprintf_internal_r+0x1d74>
100029a4:	d8c12f17 	ldw	r3,1212(sp)
100029a8:	d9013117 	ldw	r4,1220(sp)
100029ac:	18800017 	ldw	r2,0(r3)
100029b0:	18c00104 	addi	r3,r3,4
100029b4:	d8c12f15 	stw	r3,1212(sp)
100029b8:	1100000d 	sth	r4,0(r2)
100029bc:	0039e206 	br	10001148 <__alt_data_end+0xf8001148>
100029c0:	d8c12a17 	ldw	r3,1192(sp)
100029c4:	1880100c 	andi	r2,r3,64
100029c8:	10006a26 	beq	r2,zero,10002b74 <___vfprintf_internal_r+0x1b24>
100029cc:	d9012f17 	ldw	r4,1212(sp)
100029d0:	2540000f 	ldh	r21,0(r4)
100029d4:	21000104 	addi	r4,r4,4
100029d8:	d9012f15 	stw	r4,1212(sp)
100029dc:	a82dd7fa 	srai	r22,r21,31
100029e0:	b005883a 	mov	r2,r22
100029e4:	003ae906 	br	1000158c <__alt_data_end+0xf800158c>
100029e8:	dc012e17 	ldw	r16,1208(sp)
100029ec:	a009883a 	mov	r4,r20
100029f0:	8829883a 	mov	r20,r17
100029f4:	2023883a 	mov	r17,r4
100029f8:	1d07883a 	add	r3,r3,r20
100029fc:	10800044 	addi	r2,r2,1
10002a00:	45400015 	stw	r21,0(r8)
10002a04:	45000115 	stw	r20,4(r8)
10002a08:	d8c12015 	stw	r3,1152(sp)
10002a0c:	d8811f15 	stw	r2,1148(sp)
10002a10:	010001c4 	movi	r4,7
10002a14:	20bed716 	blt	r4,r2,10002574 <__alt_data_end+0xf8002574>
10002a18:	42000204 	addi	r8,r8,8
10002a1c:	003edc06 	br	10002590 <__alt_data_end+0xf8002590>
10002a20:	d9012c17 	ldw	r4,1200(sp)
10002a24:	980b883a 	mov	r5,r19
10002a28:	d9811e04 	addi	r6,sp,1144
10002a2c:	00078980 	call	10007898 <__sprint_r>
10002a30:	103aa31e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002a34:	d8c12017 	ldw	r3,1152(sp)
10002a38:	da000404 	addi	r8,sp,16
10002a3c:	003d5606 	br	10001f98 <__alt_data_end+0xf8001f98>
10002a40:	d9011f17 	ldw	r4,1148(sp)
10002a44:	01440074 	movhi	r5,4097
10002a48:	297fb004 	addi	r5,r5,-320
10002a4c:	18c00044 	addi	r3,r3,1
10002a50:	21000044 	addi	r4,r4,1
10002a54:	41400015 	stw	r5,0(r8)
10002a58:	01400044 	movi	r5,1
10002a5c:	41400115 	stw	r5,4(r8)
10002a60:	d8c12015 	stw	r3,1152(sp)
10002a64:	d9011f15 	stw	r4,1148(sp)
10002a68:	014001c4 	movi	r5,7
10002a6c:	29006a16 	blt	r5,r4,10002c18 <___vfprintf_internal_r+0x1bc8>
10002a70:	42000204 	addi	r8,r8,8
10002a74:	1025883a 	mov	r18,r2
10002a78:	9000051e 	bne	r18,zero,10002a90 <___vfprintf_internal_r+0x1a40>
10002a7c:	d8813517 	ldw	r2,1236(sp)
10002a80:	1000031e 	bne	r2,zero,10002a90 <___vfprintf_internal_r+0x1a40>
10002a84:	d9012a17 	ldw	r4,1192(sp)
10002a88:	2080004c 	andi	r2,r4,1
10002a8c:	103b8026 	beq	r2,zero,10001890 <__alt_data_end+0xf8001890>
10002a90:	d8813417 	ldw	r2,1232(sp)
10002a94:	d9413817 	ldw	r5,1248(sp)
10002a98:	010001c4 	movi	r4,7
10002a9c:	40800015 	stw	r2,0(r8)
10002aa0:	d8811f17 	ldw	r2,1148(sp)
10002aa4:	1947883a 	add	r3,r3,r5
10002aa8:	41400115 	stw	r5,4(r8)
10002aac:	10800044 	addi	r2,r2,1
10002ab0:	d8c12015 	stw	r3,1152(sp)
10002ab4:	d8811f15 	stw	r2,1148(sp)
10002ab8:	20813016 	blt	r4,r2,10002f7c <___vfprintf_internal_r+0x1f2c>
10002abc:	42000204 	addi	r8,r8,8
10002ac0:	04a5c83a 	sub	r18,zero,r18
10002ac4:	04807a0e 	bge	zero,r18,10002cb0 <___vfprintf_internal_r+0x1c60>
10002ac8:	05000404 	movi	r20,16
10002acc:	05440074 	movhi	r21,4097
10002ad0:	ad7fb084 	addi	r21,r21,-318
10002ad4:	a480920e 	bge	r20,r18,10002d20 <___vfprintf_internal_r+0x1cd0>
10002ad8:	058001c4 	movi	r22,7
10002adc:	df012c17 	ldw	fp,1200(sp)
10002ae0:	00000306 	br	10002af0 <___vfprintf_internal_r+0x1aa0>
10002ae4:	42000204 	addi	r8,r8,8
10002ae8:	94bffc04 	addi	r18,r18,-16
10002aec:	a4808c0e 	bge	r20,r18,10002d20 <___vfprintf_internal_r+0x1cd0>
10002af0:	18c00404 	addi	r3,r3,16
10002af4:	10800044 	addi	r2,r2,1
10002af8:	45c00015 	stw	r23,0(r8)
10002afc:	45000115 	stw	r20,4(r8)
10002b00:	d8c12015 	stw	r3,1152(sp)
10002b04:	d8811f15 	stw	r2,1148(sp)
10002b08:	b0bff60e 	bge	r22,r2,10002ae4 <__alt_data_end+0xf8002ae4>
10002b0c:	e009883a 	mov	r4,fp
10002b10:	980b883a 	mov	r5,r19
10002b14:	d9811e04 	addi	r6,sp,1144
10002b18:	00078980 	call	10007898 <__sprint_r>
10002b1c:	103a681e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002b20:	d8c12017 	ldw	r3,1152(sp)
10002b24:	d8811f17 	ldw	r2,1148(sp)
10002b28:	da000404 	addi	r8,sp,16
10002b2c:	003fee06 	br	10002ae8 <__alt_data_end+0xf8002ae8>
10002b30:	008011c4 	movi	r2,71
10002b34:	1480ad16 	blt	r2,r18,10002dec <___vfprintf_internal_r+0x1d9c>
10002b38:	04040074 	movhi	r16,4097
10002b3c:	843fa204 	addi	r16,r16,-376
10002b40:	d9012a17 	ldw	r4,1192(sp)
10002b44:	00bfdfc4 	movi	r2,-129
10002b48:	00c000c4 	movi	r3,3
10002b4c:	2088703a 	and	r4,r4,r2
10002b50:	d8c12b15 	stw	r3,1196(sp)
10002b54:	d9012a15 	stw	r4,1192(sp)
10002b58:	df012783 	ldbu	fp,1182(sp)
10002b5c:	d8c12e15 	stw	r3,1208(sp)
10002b60:	0029883a 	mov	r20,zero
10002b64:	d8013315 	stw	zero,1228(sp)
10002b68:	003aa206 	br	100015f4 <__alt_data_end+0xf80015f4>
10002b6c:	dd012e15 	stw	r20,1208(sp)
10002b70:	003c8206 	br	10001d7c <__alt_data_end+0xf8001d7c>
10002b74:	d9412f17 	ldw	r5,1212(sp)
10002b78:	2d400017 	ldw	r21,0(r5)
10002b7c:	29400104 	addi	r5,r5,4
10002b80:	d9412f15 	stw	r5,1212(sp)
10002b84:	a82dd7fa 	srai	r22,r21,31
10002b88:	b005883a 	mov	r2,r22
10002b8c:	003a7f06 	br	1000158c <__alt_data_end+0xf800158c>
10002b90:	d8c12f17 	ldw	r3,1212(sp)
10002b94:	d9013117 	ldw	r4,1220(sp)
10002b98:	18800017 	ldw	r2,0(r3)
10002b9c:	18c00104 	addi	r3,r3,4
10002ba0:	d8c12f15 	stw	r3,1212(sp)
10002ba4:	11000015 	stw	r4,0(r2)
10002ba8:	00396706 	br	10001148 <__alt_data_end+0xf8001148>
10002bac:	d8c12f17 	ldw	r3,1212(sp)
10002bb0:	002d883a 	mov	r22,zero
10002bb4:	1d400017 	ldw	r21,0(r3)
10002bb8:	18c00104 	addi	r3,r3,4
10002bbc:	d8c12f15 	stw	r3,1212(sp)
10002bc0:	a805883a 	mov	r2,r21
10002bc4:	0007883a 	mov	r3,zero
10002bc8:	003bc606 	br	10001ae4 <__alt_data_end+0xf8001ae4>
10002bcc:	d8c12f17 	ldw	r3,1212(sp)
10002bd0:	002d883a 	mov	r22,zero
10002bd4:	1d400017 	ldw	r21,0(r3)
10002bd8:	18c00104 	addi	r3,r3,4
10002bdc:	d8c12f15 	stw	r3,1212(sp)
10002be0:	a805883a 	mov	r2,r21
10002be4:	00c00044 	movi	r3,1
10002be8:	003bbe06 	br	10001ae4 <__alt_data_end+0xf8001ae4>
10002bec:	d8c12f17 	ldw	r3,1212(sp)
10002bf0:	002d883a 	mov	r22,zero
10002bf4:	1d400017 	ldw	r21,0(r3)
10002bf8:	18c00104 	addi	r3,r3,4
10002bfc:	d8c12f15 	stw	r3,1212(sp)
10002c00:	003bf706 	br	10001be0 <__alt_data_end+0xf8001be0>
10002c04:	04040074 	movhi	r16,4097
10002c08:	843fa004 	addi	r16,r16,-384
10002c0c:	003b8506 	br	10001a24 <__alt_data_end+0xf8001a24>
10002c10:	45000204 	addi	r20,r8,8
10002c14:	003d7206 	br	100021e0 <__alt_data_end+0xf80021e0>
10002c18:	d9012c17 	ldw	r4,1200(sp)
10002c1c:	980b883a 	mov	r5,r19
10002c20:	d9811e04 	addi	r6,sp,1144
10002c24:	00078980 	call	10007898 <__sprint_r>
10002c28:	103a251e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002c2c:	dc812617 	ldw	r18,1176(sp)
10002c30:	d8c12017 	ldw	r3,1152(sp)
10002c34:	da000404 	addi	r8,sp,16
10002c38:	003f8f06 	br	10002a78 <__alt_data_end+0xf8002a78>
10002c3c:	d9012a17 	ldw	r4,1192(sp)
10002c40:	8c400044 	addi	r17,r17,1
10002c44:	14800047 	ldb	r18,1(r2)
10002c48:	21000814 	ori	r4,r4,32
10002c4c:	d9012a15 	stw	r4,1192(sp)
10002c50:	00396406 	br	100011e4 <__alt_data_end+0xf80011e4>
10002c54:	d9012c17 	ldw	r4,1200(sp)
10002c58:	980b883a 	mov	r5,r19
10002c5c:	d9811e04 	addi	r6,sp,1144
10002c60:	00078980 	call	10007898 <__sprint_r>
10002c64:	103a161e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002c68:	d8c12017 	ldw	r3,1152(sp)
10002c6c:	da000404 	addi	r8,sp,16
10002c70:	003cdc06 	br	10001fe4 <__alt_data_end+0xf8001fe4>
10002c74:	df013f15 	stw	fp,1276(sp)
10002c78:	00077100 	call	10007710 <strlen>
10002c7c:	d8812e15 	stw	r2,1208(sp)
10002c80:	da013f17 	ldw	r8,1276(sp)
10002c84:	103c3f0e 	bge	r2,zero,10001d84 <__alt_data_end+0xf8001d84>
10002c88:	0005883a 	mov	r2,zero
10002c8c:	003c3d06 	br	10001d84 <__alt_data_end+0xf8001d84>
10002c90:	d9012c17 	ldw	r4,1200(sp)
10002c94:	980b883a 	mov	r5,r19
10002c98:	d9811e04 	addi	r6,sp,1144
10002c9c:	00078980 	call	10007898 <__sprint_r>
10002ca0:	103a071e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002ca4:	d8c12017 	ldw	r3,1152(sp)
10002ca8:	d8811f17 	ldw	r2,1148(sp)
10002cac:	da000404 	addi	r8,sp,16
10002cb0:	d9013517 	ldw	r4,1236(sp)
10002cb4:	10800044 	addi	r2,r2,1
10002cb8:	44000015 	stw	r16,0(r8)
10002cbc:	20c7883a 	add	r3,r4,r3
10002cc0:	003aed06 	br	10001878 <__alt_data_end+0xf8001878>
10002cc4:	01040074 	movhi	r4,4097
10002cc8:	213fb484 	addi	r4,r4,-302
10002ccc:	d9013615 	stw	r4,1240(sp)
10002cd0:	003a8706 	br	100016f0 <__alt_data_end+0xf80016f0>
10002cd4:	0029883a 	mov	r20,zero
10002cd8:	003dd706 	br	10002438 <__alt_data_end+0xf8002438>
10002cdc:	d9012c17 	ldw	r4,1200(sp)
10002ce0:	980b883a 	mov	r5,r19
10002ce4:	d9811e04 	addi	r6,sp,1144
10002ce8:	00078980 	call	10007898 <__sprint_r>
10002cec:	1039f41e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002cf0:	d8c12017 	ldw	r3,1152(sp)
10002cf4:	da000404 	addi	r8,sp,16
10002cf8:	003dce06 	br	10002434 <__alt_data_end+0xf8002434>
10002cfc:	d9012c17 	ldw	r4,1200(sp)
10002d00:	980b883a 	mov	r5,r19
10002d04:	d9811e04 	addi	r6,sp,1144
10002d08:	00078980 	call	10007898 <__sprint_r>
10002d0c:	1039ec1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002d10:	d8812617 	ldw	r2,1176(sp)
10002d14:	d8c12017 	ldw	r3,1152(sp)
10002d18:	da000404 	addi	r8,sp,16
10002d1c:	003e3106 	br	100025e4 <__alt_data_end+0xf80025e4>
10002d20:	1c87883a 	add	r3,r3,r18
10002d24:	10800044 	addi	r2,r2,1
10002d28:	45400015 	stw	r21,0(r8)
10002d2c:	44800115 	stw	r18,4(r8)
10002d30:	d8c12015 	stw	r3,1152(sp)
10002d34:	d8811f15 	stw	r2,1148(sp)
10002d38:	010001c4 	movi	r4,7
10002d3c:	20bfd416 	blt	r4,r2,10002c90 <__alt_data_end+0xf8002c90>
10002d40:	42000204 	addi	r8,r8,8
10002d44:	003fda06 	br	10002cb0 <__alt_data_end+0xf8002cb0>
10002d48:	01440074 	movhi	r5,4097
10002d4c:	297fb484 	addi	r5,r5,-302
10002d50:	d9413615 	stw	r5,1240(sp)
10002d54:	003af406 	br	10001928 <__alt_data_end+0xf8001928>
10002d58:	00800184 	movi	r2,6
10002d5c:	1500012e 	bgeu	r2,r20,10002d64 <___vfprintf_internal_r+0x1d14>
10002d60:	1029883a 	mov	r20,r2
10002d64:	dd012e15 	stw	r20,1208(sp)
10002d68:	a005883a 	mov	r2,r20
10002d6c:	a000d216 	blt	r20,zero,100030b8 <___vfprintf_internal_r+0x2068>
10002d70:	d8812b15 	stw	r2,1196(sp)
10002d74:	dd412f15 	stw	r21,1212(sp)
10002d78:	0029883a 	mov	r20,zero
10002d7c:	d8013315 	stw	zero,1228(sp)
10002d80:	04040074 	movhi	r16,4097
10002d84:	843fae04 	addi	r16,r16,-328
10002d88:	0005883a 	mov	r2,zero
10002d8c:	003a2006 	br	10001610 <__alt_data_end+0xf8001610>
10002d90:	0029883a 	mov	r20,zero
10002d94:	003e2506 	br	1000262c <__alt_data_end+0xf800262c>
10002d98:	d9012c17 	ldw	r4,1200(sp)
10002d9c:	980b883a 	mov	r5,r19
10002da0:	d9811e04 	addi	r6,sp,1144
10002da4:	00078980 	call	10007898 <__sprint_r>
10002da8:	1039c51e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002dac:	d8812617 	ldw	r2,1176(sp)
10002db0:	d9413517 	ldw	r5,1236(sp)
10002db4:	d8c12017 	ldw	r3,1152(sp)
10002db8:	da000404 	addi	r8,sp,16
10002dbc:	2885c83a 	sub	r2,r5,r2
10002dc0:	003e1906 	br	10002628 <__alt_data_end+0xf8002628>
10002dc4:	d9412f17 	ldw	r5,1212(sp)
10002dc8:	d8c13117 	ldw	r3,1220(sp)
10002dcc:	28800017 	ldw	r2,0(r5)
10002dd0:	29400104 	addi	r5,r5,4
10002dd4:	d9412f15 	stw	r5,1212(sp)
10002dd8:	10c00015 	stw	r3,0(r2)
10002ddc:	0038da06 	br	10001148 <__alt_data_end+0xf8001148>
10002de0:	07000b44 	movi	fp,45
10002de4:	df012785 	stb	fp,1182(sp)
10002de8:	003b0a06 	br	10001a14 <__alt_data_end+0xf8001a14>
10002dec:	04040074 	movhi	r16,4097
10002df0:	843fa304 	addi	r16,r16,-372
10002df4:	003f5206 	br	10002b40 <__alt_data_end+0xf8002b40>
10002df8:	00c00b44 	movi	r3,45
10002dfc:	d8c12785 	stb	r3,1182(sp)
10002e00:	d8c12d17 	ldw	r3,1204(sp)
10002e04:	d8812b15 	stw	r2,1196(sp)
10002e08:	0029883a 	mov	r20,zero
10002e0c:	d8c12a15 	stw	r3,1192(sp)
10002e10:	00800b44 	movi	r2,45
10002e14:	0039fb06 	br	10001604 <__alt_data_end+0xf8001604>
10002e18:	d8812617 	ldw	r2,1176(sp)
10002e1c:	00ffff44 	movi	r3,-3
10002e20:	10c03216 	blt	r2,r3,10002eec <___vfprintf_internal_r+0x1e9c>
10002e24:	a0803116 	blt	r20,r2,10002eec <___vfprintf_internal_r+0x1e9c>
10002e28:	d8813315 	stw	r2,1228(sp)
10002e2c:	003e9706 	br	1000288c <__alt_data_end+0xf800288c>
10002e30:	4805883a 	mov	r2,r9
10002e34:	003e8b06 	br	10002864 <__alt_data_end+0xf8002864>
10002e38:	d8812604 	addi	r2,sp,1176
10002e3c:	d8800115 	stw	r2,4(sp)
10002e40:	d9012c17 	ldw	r4,1200(sp)
10002e44:	d8812504 	addi	r2,sp,1172
10002e48:	d9413717 	ldw	r5,1244(sp)
10002e4c:	d8800215 	stw	r2,8(sp)
10002e50:	d8812104 	addi	r2,sp,1156
10002e54:	dd000015 	stw	r20,0(sp)
10002e58:	d8800315 	stw	r2,12(sp)
10002e5c:	a80d883a 	mov	r6,r21
10002e60:	01c000c4 	movi	r7,3
10002e64:	da013f15 	stw	r8,1276(sp)
10002e68:	00035280 	call	10003528 <_dtoa_r>
10002e6c:	1021883a 	mov	r16,r2
10002e70:	a039883a 	mov	fp,r20
10002e74:	da013f17 	ldw	r8,1276(sp)
10002e78:	003e6506 	br	10002810 <__alt_data_end+0xf8002810>
10002e7c:	dd012b15 	stw	r20,1196(sp)
10002e80:	dd012e15 	stw	r20,1208(sp)
10002e84:	df012783 	ldbu	fp,1182(sp)
10002e88:	dd412f15 	stw	r21,1212(sp)
10002e8c:	0029883a 	mov	r20,zero
10002e90:	d8013315 	stw	zero,1228(sp)
10002e94:	0039d706 	br	100015f4 <__alt_data_end+0xf80015f4>
10002e98:	81000007 	ldb	r4,0(r16)
10002e9c:	00800c04 	movi	r2,48
10002ea0:	20800326 	beq	r4,r2,10002eb0 <___vfprintf_internal_r+0x1e60>
10002ea4:	d8c12617 	ldw	r3,1176(sp)
10002ea8:	48d3883a 	add	r9,r9,r3
10002eac:	003e5b06 	br	1000281c <__alt_data_end+0xf800281c>
10002eb0:	d9013717 	ldw	r4,1244(sp)
10002eb4:	a80b883a 	mov	r5,r21
10002eb8:	000d883a 	mov	r6,zero
10002ebc:	000f883a 	mov	r7,zero
10002ec0:	da013f15 	stw	r8,1276(sp)
10002ec4:	da413e15 	stw	r9,1272(sp)
10002ec8:	000c2640 	call	1000c264 <__eqdf2>
10002ecc:	da013f17 	ldw	r8,1276(sp)
10002ed0:	da413e17 	ldw	r9,1272(sp)
10002ed4:	103ff326 	beq	r2,zero,10002ea4 <__alt_data_end+0xf8002ea4>
10002ed8:	00800044 	movi	r2,1
10002edc:	1707c83a 	sub	r3,r2,fp
10002ee0:	d8c12615 	stw	r3,1176(sp)
10002ee4:	48d3883a 	add	r9,r9,r3
10002ee8:	003e4c06 	br	1000281c <__alt_data_end+0xf800281c>
10002eec:	94bfff84 	addi	r18,r18,-2
10002ef0:	157fffc4 	addi	r21,r2,-1
10002ef4:	dd412615 	stw	r21,1176(sp)
10002ef8:	dc8122c5 	stb	r18,1163(sp)
10002efc:	a8009016 	blt	r21,zero,10003140 <___vfprintf_internal_r+0x20f0>
10002f00:	00800ac4 	movi	r2,43
10002f04:	d8812305 	stb	r2,1164(sp)
10002f08:	05000244 	movi	r20,9
10002f0c:	a5404a16 	blt	r20,r21,10003038 <___vfprintf_internal_r+0x1fe8>
10002f10:	00800c04 	movi	r2,48
10002f14:	ad400c04 	addi	r21,r21,48
10002f18:	d8812345 	stb	r2,1165(sp)
10002f1c:	dd412385 	stb	r21,1166(sp)
10002f20:	d8c123c4 	addi	r3,sp,1167
10002f24:	d88122c4 	addi	r2,sp,1163
10002f28:	1885c83a 	sub	r2,r3,r2
10002f2c:	d8c13517 	ldw	r3,1236(sp)
10002f30:	d9013517 	ldw	r4,1236(sp)
10002f34:	d8813a15 	stw	r2,1256(sp)
10002f38:	1887883a 	add	r3,r3,r2
10002f3c:	d8c12e15 	stw	r3,1208(sp)
10002f40:	00800044 	movi	r2,1
10002f44:	11007a0e 	bge	r2,r4,10003130 <___vfprintf_internal_r+0x20e0>
10002f48:	d8c12e17 	ldw	r3,1208(sp)
10002f4c:	18c00044 	addi	r3,r3,1
10002f50:	d8c12e15 	stw	r3,1208(sp)
10002f54:	1805883a 	mov	r2,r3
10002f58:	18000216 	blt	r3,zero,10002f64 <___vfprintf_internal_r+0x1f14>
10002f5c:	d8013315 	stw	zero,1228(sp)
10002f60:	003e5506 	br	100028b8 <__alt_data_end+0xf80028b8>
10002f64:	0005883a 	mov	r2,zero
10002f68:	d8013315 	stw	zero,1228(sp)
10002f6c:	003e5206 	br	100028b8 <__alt_data_end+0xf80028b8>
10002f70:	a03e031e 	bne	r20,zero,10002780 <__alt_data_end+0xf8002780>
10002f74:	8029883a 	mov	r20,r16
10002f78:	003e0106 	br	10002780 <__alt_data_end+0xf8002780>
10002f7c:	d9012c17 	ldw	r4,1200(sp)
10002f80:	980b883a 	mov	r5,r19
10002f84:	d9811e04 	addi	r6,sp,1144
10002f88:	00078980 	call	10007898 <__sprint_r>
10002f8c:	10394c1e 	bne	r2,zero,100014c0 <__alt_data_end+0xf80014c0>
10002f90:	dc812617 	ldw	r18,1176(sp)
10002f94:	d8c12017 	ldw	r3,1152(sp)
10002f98:	d8811f17 	ldw	r2,1148(sp)
10002f9c:	da000404 	addi	r8,sp,16
10002fa0:	003ec706 	br	10002ac0 <__alt_data_end+0xf8002ac0>
10002fa4:	05000184 	movi	r20,6
10002fa8:	003df506 	br	10002780 <__alt_data_end+0xf8002780>
10002fac:	00c00b44 	movi	r3,45
10002fb0:	2560003c 	xorhi	r21,r4,32768
10002fb4:	d8c12b05 	stb	r3,1196(sp)
10002fb8:	003df806 	br	1000279c <__alt_data_end+0xf800279c>
10002fbc:	a7000044 	addi	fp,r20,1
10002fc0:	003dfd06 	br	100027b8 <__alt_data_end+0xf80027b8>
10002fc4:	d8c13317 	ldw	r3,1228(sp)
10002fc8:	00c0610e 	bge	zero,r3,10003150 <___vfprintf_internal_r+0x2100>
10002fcc:	00800044 	movi	r2,1
10002fd0:	d9013517 	ldw	r4,1236(sp)
10002fd4:	1105883a 	add	r2,r2,r4
10002fd8:	d8812e15 	stw	r2,1208(sp)
10002fdc:	10000716 	blt	r2,zero,10002ffc <___vfprintf_internal_r+0x1fac>
10002fe0:	048019c4 	movi	r18,103
10002fe4:	003e3406 	br	100028b8 <__alt_data_end+0xf80028b8>
10002fe8:	d8c13317 	ldw	r3,1228(sp)
10002fec:	18c00044 	addi	r3,r3,1
10002ff0:	d8c12e15 	stw	r3,1208(sp)
10002ff4:	1805883a 	mov	r2,r3
10002ff8:	183ff90e 	bge	r3,zero,10002fe0 <__alt_data_end+0xf8002fe0>
10002ffc:	0005883a 	mov	r2,zero
10003000:	048019c4 	movi	r18,103
10003004:	003e2c06 	br	100028b8 <__alt_data_end+0xf80028b8>
10003008:	d8812117 	ldw	r2,1156(sp)
1000300c:	003e1506 	br	10002864 <__alt_data_end+0xf8002864>
10003010:	00c0400e 	bge	zero,r3,10003114 <___vfprintf_internal_r+0x20c4>
10003014:	a0002a1e 	bne	r20,zero,100030c0 <___vfprintf_internal_r+0x2070>
10003018:	d9012a17 	ldw	r4,1192(sp)
1000301c:	2080004c 	andi	r2,r4,1
10003020:	1000271e 	bne	r2,zero,100030c0 <___vfprintf_internal_r+0x2070>
10003024:	1805883a 	mov	r2,r3
10003028:	18005a16 	blt	r3,zero,10003194 <___vfprintf_internal_r+0x2144>
1000302c:	d8c13317 	ldw	r3,1228(sp)
10003030:	d8c12e15 	stw	r3,1208(sp)
10003034:	003e2006 	br	100028b8 <__alt_data_end+0xf80028b8>
10003038:	d8c12284 	addi	r3,sp,1162
1000303c:	4039883a 	mov	fp,r8
10003040:	a809883a 	mov	r4,r21
10003044:	01400284 	movi	r5,10
10003048:	182d883a 	mov	r22,r3
1000304c:	000afc80 	call	1000afc8 <__modsi3>
10003050:	10800c04 	addi	r2,r2,48
10003054:	a809883a 	mov	r4,r21
10003058:	b0800005 	stb	r2,0(r22)
1000305c:	01400284 	movi	r5,10
10003060:	000af800 	call	1000af80 <__divsi3>
10003064:	102b883a 	mov	r21,r2
10003068:	b0ffffc4 	addi	r3,r22,-1
1000306c:	a0bff416 	blt	r20,r2,10003040 <__alt_data_end+0xf8003040>
10003070:	11400c04 	addi	r5,r2,48
10003074:	b17fffc5 	stb	r5,-1(r22)
10003078:	d88122c4 	addi	r2,sp,1163
1000307c:	e011883a 	mov	r8,fp
10003080:	1880462e 	bgeu	r3,r2,1000319c <___vfprintf_internal_r+0x214c>
10003084:	d9012344 	addi	r4,sp,1165
10003088:	b007883a 	mov	r3,r22
1000308c:	00000206 	br	10003098 <___vfprintf_internal_r+0x2048>
10003090:	19400003 	ldbu	r5,0(r3)
10003094:	18c00044 	addi	r3,r3,1
10003098:	21400005 	stb	r5,0(r4)
1000309c:	21000044 	addi	r4,r4,1
100030a0:	10fffb1e 	bne	r2,r3,10003090 <__alt_data_end+0xf8003090>
100030a4:	d8c12304 	addi	r3,sp,1164
100030a8:	1d87c83a 	sub	r3,r3,r22
100030ac:	d9412344 	addi	r5,sp,1165
100030b0:	28c7883a 	add	r3,r5,r3
100030b4:	003f9c06 	br	10002f28 <__alt_data_end+0xf8002f28>
100030b8:	0005883a 	mov	r2,zero
100030bc:	003f2c06 	br	10002d70 <__alt_data_end+0xf8002d70>
100030c0:	d8c13317 	ldw	r3,1228(sp)
100030c4:	a5000044 	addi	r20,r20,1
100030c8:	1d29883a 	add	r20,r3,r20
100030cc:	dd012e15 	stw	r20,1208(sp)
100030d0:	a005883a 	mov	r2,r20
100030d4:	a03df80e 	bge	r20,zero,100028b8 <__alt_data_end+0xf80028b8>
100030d8:	0005883a 	mov	r2,zero
100030dc:	003df606 	br	100028b8 <__alt_data_end+0xf80028b8>
100030e0:	043fffc4 	movi	r16,-1
100030e4:	0038d406 	br	10001438 <__alt_data_end+0xf8001438>
100030e8:	d9012f17 	ldw	r4,1212(sp)
100030ec:	8c800043 	ldbu	r18,1(r17)
100030f0:	1023883a 	mov	r17,r2
100030f4:	20c00017 	ldw	r3,0(r4)
100030f8:	21000104 	addi	r4,r4,4
100030fc:	d9012f15 	stw	r4,1212(sp)
10003100:	18001f16 	blt	r3,zero,10003180 <___vfprintf_internal_r+0x2130>
10003104:	94803fcc 	andi	r18,r18,255
10003108:	9480201c 	xori	r18,r18,128
1000310c:	94bfe004 	addi	r18,r18,-128
10003110:	00383406 	br	100011e4 <__alt_data_end+0xf80011e4>
10003114:	a000111e 	bne	r20,zero,1000315c <___vfprintf_internal_r+0x210c>
10003118:	d9012a17 	ldw	r4,1192(sp)
1000311c:	2080004c 	andi	r2,r4,1
10003120:	10000e1e 	bne	r2,zero,1000315c <___vfprintf_internal_r+0x210c>
10003124:	00800044 	movi	r2,1
10003128:	d8812e15 	stw	r2,1208(sp)
1000312c:	003de206 	br	100028b8 <__alt_data_end+0xf80028b8>
10003130:	d9412a17 	ldw	r5,1192(sp)
10003134:	2884703a 	and	r2,r5,r2
10003138:	103f831e 	bne	r2,zero,10002f48 <__alt_data_end+0xf8002f48>
1000313c:	003f8506 	br	10002f54 <__alt_data_end+0xf8002f54>
10003140:	00800b44 	movi	r2,45
10003144:	056bc83a 	sub	r21,zero,r21
10003148:	d8812305 	stb	r2,1164(sp)
1000314c:	003f6e06 	br	10002f08 <__alt_data_end+0xf8002f08>
10003150:	00800084 	movi	r2,2
10003154:	10c5c83a 	sub	r2,r2,r3
10003158:	003f9d06 	br	10002fd0 <__alt_data_end+0xf8002fd0>
1000315c:	a5000084 	addi	r20,r20,2
10003160:	dd012e15 	stw	r20,1208(sp)
10003164:	a005883a 	mov	r2,r20
10003168:	a03dd30e 	bge	r20,zero,100028b8 <__alt_data_end+0xf80028b8>
1000316c:	003fda06 	br	100030d8 <__alt_data_end+0xf80030d8>
10003170:	0005883a 	mov	r2,zero
10003174:	003dcd06 	br	100028ac <__alt_data_end+0xf80028ac>
10003178:	d8812617 	ldw	r2,1176(sp)
1000317c:	003f5c06 	br	10002ef0 <__alt_data_end+0xf8002ef0>
10003180:	94803fcc 	andi	r18,r18,255
10003184:	9480201c 	xori	r18,r18,128
10003188:	00ffffc4 	movi	r3,-1
1000318c:	94bfe004 	addi	r18,r18,-128
10003190:	00381406 	br	100011e4 <__alt_data_end+0xf80011e4>
10003194:	0005883a 	mov	r2,zero
10003198:	003fa406 	br	1000302c <__alt_data_end+0xf800302c>
1000319c:	d8c12344 	addi	r3,sp,1165
100031a0:	003f6106 	br	10002f28 <__alt_data_end+0xf8002f28>

100031a4 <__vfprintf_internal>:
100031a4:	00840074 	movhi	r2,4097
100031a8:	10870d04 	addi	r2,r2,7220
100031ac:	2007883a 	mov	r3,r4
100031b0:	11000017 	ldw	r4,0(r2)
100031b4:	2805883a 	mov	r2,r5
100031b8:	300f883a 	mov	r7,r6
100031bc:	180b883a 	mov	r5,r3
100031c0:	100d883a 	mov	r6,r2
100031c4:	00010501 	jmpi	10001050 <___vfprintf_internal_r>

100031c8 <__swsetup_r>:
100031c8:	00840074 	movhi	r2,4097
100031cc:	10870d04 	addi	r2,r2,7220
100031d0:	10800017 	ldw	r2,0(r2)
100031d4:	defffd04 	addi	sp,sp,-12
100031d8:	dc400115 	stw	r17,4(sp)
100031dc:	dc000015 	stw	r16,0(sp)
100031e0:	dfc00215 	stw	ra,8(sp)
100031e4:	2023883a 	mov	r17,r4
100031e8:	2821883a 	mov	r16,r5
100031ec:	10000226 	beq	r2,zero,100031f8 <__swsetup_r+0x30>
100031f0:	10c00e17 	ldw	r3,56(r2)
100031f4:	18002e26 	beq	r3,zero,100032b0 <__swsetup_r+0xe8>
100031f8:	8080030b 	ldhu	r2,12(r16)
100031fc:	10c0020c 	andi	r3,r2,8
10003200:	100d883a 	mov	r6,r2
10003204:	18000f26 	beq	r3,zero,10003244 <__swsetup_r+0x7c>
10003208:	80c00417 	ldw	r3,16(r16)
1000320c:	18001526 	beq	r3,zero,10003264 <__swsetup_r+0x9c>
10003210:	1100004c 	andi	r4,r2,1
10003214:	20001c1e 	bne	r4,zero,10003288 <__swsetup_r+0xc0>
10003218:	1080008c 	andi	r2,r2,2
1000321c:	1000271e 	bne	r2,zero,100032bc <__swsetup_r+0xf4>
10003220:	80800517 	ldw	r2,20(r16)
10003224:	80800215 	stw	r2,8(r16)
10003228:	18001c26 	beq	r3,zero,1000329c <__swsetup_r+0xd4>
1000322c:	0005883a 	mov	r2,zero
10003230:	dfc00217 	ldw	ra,8(sp)
10003234:	dc400117 	ldw	r17,4(sp)
10003238:	dc000017 	ldw	r16,0(sp)
1000323c:	dec00304 	addi	sp,sp,12
10003240:	f800283a 	ret
10003244:	3080040c 	andi	r2,r6,16
10003248:	10001726 	beq	r2,zero,100032a8 <__swsetup_r+0xe0>
1000324c:	3080010c 	andi	r2,r6,4
10003250:	10001d1e 	bne	r2,zero,100032c8 <__swsetup_r+0x100>
10003254:	80c00417 	ldw	r3,16(r16)
10003258:	30800214 	ori	r2,r6,8
1000325c:	8080030d 	sth	r2,12(r16)
10003260:	183feb1e 	bne	r3,zero,10003210 <__alt_data_end+0xf8003210>
10003264:	1140a00c 	andi	r5,r2,640
10003268:	01008004 	movi	r4,512
1000326c:	293fe826 	beq	r5,r4,10003210 <__alt_data_end+0xf8003210>
10003270:	8809883a 	mov	r4,r17
10003274:	800b883a 	mov	r5,r16
10003278:	00057bc0 	call	100057bc <__smakebuf_r>
1000327c:	8080030b 	ldhu	r2,12(r16)
10003280:	80c00417 	ldw	r3,16(r16)
10003284:	003fe206 	br	10003210 <__alt_data_end+0xf8003210>
10003288:	80800517 	ldw	r2,20(r16)
1000328c:	80000215 	stw	zero,8(r16)
10003290:	0085c83a 	sub	r2,zero,r2
10003294:	80800615 	stw	r2,24(r16)
10003298:	183fe41e 	bne	r3,zero,1000322c <__alt_data_end+0xf800322c>
1000329c:	8080030b 	ldhu	r2,12(r16)
100032a0:	1080200c 	andi	r2,r2,128
100032a4:	103fe226 	beq	r2,zero,10003230 <__alt_data_end+0xf8003230>
100032a8:	00bfffc4 	movi	r2,-1
100032ac:	003fe006 	br	10003230 <__alt_data_end+0xf8003230>
100032b0:	1009883a 	mov	r4,r2
100032b4:	0004e840 	call	10004e84 <__sinit>
100032b8:	003fcf06 	br	100031f8 <__alt_data_end+0xf80031f8>
100032bc:	0005883a 	mov	r2,zero
100032c0:	80800215 	stw	r2,8(r16)
100032c4:	003fd806 	br	10003228 <__alt_data_end+0xf8003228>
100032c8:	81400c17 	ldw	r5,48(r16)
100032cc:	28000626 	beq	r5,zero,100032e8 <__swsetup_r+0x120>
100032d0:	80801004 	addi	r2,r16,64
100032d4:	28800326 	beq	r5,r2,100032e4 <__swsetup_r+0x11c>
100032d8:	8809883a 	mov	r4,r17
100032dc:	00052b80 	call	100052b8 <_free_r>
100032e0:	8180030b 	ldhu	r6,12(r16)
100032e4:	80000c15 	stw	zero,48(r16)
100032e8:	80c00417 	ldw	r3,16(r16)
100032ec:	00bff6c4 	movi	r2,-37
100032f0:	118c703a 	and	r6,r2,r6
100032f4:	80000115 	stw	zero,4(r16)
100032f8:	80c00015 	stw	r3,0(r16)
100032fc:	003fd606 	br	10003258 <__alt_data_end+0xf8003258>

10003300 <quorem>:
10003300:	defff204 	addi	sp,sp,-56
10003304:	dd400915 	stw	r21,36(sp)
10003308:	20800417 	ldw	r2,16(r4)
1000330c:	2d400417 	ldw	r21,16(r5)
10003310:	dfc00d15 	stw	ra,52(sp)
10003314:	df000c15 	stw	fp,48(sp)
10003318:	ddc00b15 	stw	r23,44(sp)
1000331c:	dd800a15 	stw	r22,40(sp)
10003320:	dd000815 	stw	r20,32(sp)
10003324:	dcc00715 	stw	r19,28(sp)
10003328:	dc800615 	stw	r18,24(sp)
1000332c:	dc400515 	stw	r17,20(sp)
10003330:	dc000415 	stw	r16,16(sp)
10003334:	d9000015 	stw	r4,0(sp)
10003338:	d9400115 	stw	r5,4(sp)
1000333c:	15407816 	blt	r2,r21,10003520 <quorem+0x220>
10003340:	ad7fffc4 	addi	r21,r21,-1
10003344:	ad79883a 	add	fp,r21,r21
10003348:	28c00504 	addi	r3,r5,20
1000334c:	e739883a 	add	fp,fp,fp
10003350:	1f2f883a 	add	r23,r3,fp
10003354:	24400504 	addi	r17,r4,20
10003358:	8f39883a 	add	fp,r17,fp
1000335c:	b9400017 	ldw	r5,0(r23)
10003360:	e1000017 	ldw	r4,0(fp)
10003364:	d8c00215 	stw	r3,8(sp)
10003368:	29400044 	addi	r5,r5,1
1000336c:	df000315 	stw	fp,12(sp)
10003370:	000b0140 	call	1000b014 <__udivsi3>
10003374:	1021883a 	mov	r16,r2
10003378:	10003026 	beq	r2,zero,1000343c <quorem+0x13c>
1000337c:	dcc00217 	ldw	r19,8(sp)
10003380:	8829883a 	mov	r20,r17
10003384:	002d883a 	mov	r22,zero
10003388:	0039883a 	mov	fp,zero
1000338c:	9c800017 	ldw	r18,0(r19)
10003390:	800b883a 	mov	r5,r16
10003394:	9cc00104 	addi	r19,r19,4
10003398:	913fffcc 	andi	r4,r18,65535
1000339c:	000b0240 	call	1000b024 <__mulsi3>
100033a0:	9008d43a 	srli	r4,r18,16
100033a4:	800b883a 	mov	r5,r16
100033a8:	b0ad883a 	add	r22,r22,r2
100033ac:	000b0240 	call	1000b024 <__mulsi3>
100033b0:	a1400017 	ldw	r5,0(r20)
100033b4:	b010d43a 	srli	r8,r22,16
100033b8:	b0ffffcc 	andi	r3,r22,65535
100033bc:	293fffcc 	andi	r4,r5,65535
100033c0:	2709883a 	add	r4,r4,fp
100033c4:	280cd43a 	srli	r6,r5,16
100033c8:	20c9c83a 	sub	r4,r4,r3
100033cc:	4085883a 	add	r2,r8,r2
100033d0:	2007d43a 	srai	r3,r4,16
100033d4:	117fffcc 	andi	r5,r2,65535
100033d8:	314bc83a 	sub	r5,r6,r5
100033dc:	28cb883a 	add	r5,r5,r3
100033e0:	280c943a 	slli	r6,r5,16
100033e4:	213fffcc 	andi	r4,r4,65535
100033e8:	102cd43a 	srli	r22,r2,16
100033ec:	3108b03a 	or	r4,r6,r4
100033f0:	a1000015 	stw	r4,0(r20)
100033f4:	2839d43a 	srai	fp,r5,16
100033f8:	a5000104 	addi	r20,r20,4
100033fc:	bcffe32e 	bgeu	r23,r19,1000338c <__alt_data_end+0xf800338c>
10003400:	d8c00317 	ldw	r3,12(sp)
10003404:	18800017 	ldw	r2,0(r3)
10003408:	10000c1e 	bne	r2,zero,1000343c <quorem+0x13c>
1000340c:	18bfff04 	addi	r2,r3,-4
10003410:	8880082e 	bgeu	r17,r2,10003434 <quorem+0x134>
10003414:	18ffff17 	ldw	r3,-4(r3)
10003418:	18000326 	beq	r3,zero,10003428 <quorem+0x128>
1000341c:	00000506 	br	10003434 <quorem+0x134>
10003420:	10c00017 	ldw	r3,0(r2)
10003424:	1800031e 	bne	r3,zero,10003434 <quorem+0x134>
10003428:	10bfff04 	addi	r2,r2,-4
1000342c:	ad7fffc4 	addi	r21,r21,-1
10003430:	88bffb36 	bltu	r17,r2,10003420 <__alt_data_end+0xf8003420>
10003434:	d8c00017 	ldw	r3,0(sp)
10003438:	1d400415 	stw	r21,16(r3)
1000343c:	d9000017 	ldw	r4,0(sp)
10003440:	d9400117 	ldw	r5,4(sp)
10003444:	0006dac0 	call	10006dac <__mcmp>
10003448:	10002816 	blt	r2,zero,100034ec <quorem+0x1ec>
1000344c:	d8c00217 	ldw	r3,8(sp)
10003450:	84000044 	addi	r16,r16,1
10003454:	880d883a 	mov	r6,r17
10003458:	000f883a 	mov	r7,zero
1000345c:	32800017 	ldw	r10,0(r6)
10003460:	1a400017 	ldw	r9,0(r3)
10003464:	31800104 	addi	r6,r6,4
10003468:	523fffcc 	andi	r8,r10,65535
1000346c:	48bfffcc 	andi	r2,r9,65535
10003470:	41cf883a 	add	r7,r8,r7
10003474:	3891c83a 	sub	r8,r7,r2
10003478:	4812d43a 	srli	r9,r9,16
1000347c:	500ed43a 	srli	r7,r10,16
10003480:	4005d43a 	srai	r2,r8,16
10003484:	423fffcc 	andi	r8,r8,65535
10003488:	3a4fc83a 	sub	r7,r7,r9
1000348c:	388f883a 	add	r7,r7,r2
10003490:	3804943a 	slli	r2,r7,16
10003494:	18c00104 	addi	r3,r3,4
10003498:	380fd43a 	srai	r7,r7,16
1000349c:	1210b03a 	or	r8,r2,r8
100034a0:	323fff15 	stw	r8,-4(r6)
100034a4:	b8ffed2e 	bgeu	r23,r3,1000345c <__alt_data_end+0xf800345c>
100034a8:	ad45883a 	add	r2,r21,r21
100034ac:	1085883a 	add	r2,r2,r2
100034b0:	8887883a 	add	r3,r17,r2
100034b4:	18800017 	ldw	r2,0(r3)
100034b8:	10000c1e 	bne	r2,zero,100034ec <quorem+0x1ec>
100034bc:	18bfff04 	addi	r2,r3,-4
100034c0:	8880082e 	bgeu	r17,r2,100034e4 <quorem+0x1e4>
100034c4:	18ffff17 	ldw	r3,-4(r3)
100034c8:	18000326 	beq	r3,zero,100034d8 <quorem+0x1d8>
100034cc:	00000506 	br	100034e4 <quorem+0x1e4>
100034d0:	10c00017 	ldw	r3,0(r2)
100034d4:	1800031e 	bne	r3,zero,100034e4 <quorem+0x1e4>
100034d8:	10bfff04 	addi	r2,r2,-4
100034dc:	ad7fffc4 	addi	r21,r21,-1
100034e0:	88bffb36 	bltu	r17,r2,100034d0 <__alt_data_end+0xf80034d0>
100034e4:	d8c00017 	ldw	r3,0(sp)
100034e8:	1d400415 	stw	r21,16(r3)
100034ec:	8005883a 	mov	r2,r16
100034f0:	dfc00d17 	ldw	ra,52(sp)
100034f4:	df000c17 	ldw	fp,48(sp)
100034f8:	ddc00b17 	ldw	r23,44(sp)
100034fc:	dd800a17 	ldw	r22,40(sp)
10003500:	dd400917 	ldw	r21,36(sp)
10003504:	dd000817 	ldw	r20,32(sp)
10003508:	dcc00717 	ldw	r19,28(sp)
1000350c:	dc800617 	ldw	r18,24(sp)
10003510:	dc400517 	ldw	r17,20(sp)
10003514:	dc000417 	ldw	r16,16(sp)
10003518:	dec00e04 	addi	sp,sp,56
1000351c:	f800283a 	ret
10003520:	0005883a 	mov	r2,zero
10003524:	003ff206 	br	100034f0 <__alt_data_end+0xf80034f0>

10003528 <_dtoa_r>:
10003528:	20801017 	ldw	r2,64(r4)
1000352c:	deffdf04 	addi	sp,sp,-132
10003530:	dcc01a15 	stw	r19,104(sp)
10003534:	dc801915 	stw	r18,100(sp)
10003538:	dc401815 	stw	r17,96(sp)
1000353c:	dc001715 	stw	r16,92(sp)
10003540:	dfc02015 	stw	ra,128(sp)
10003544:	df001f15 	stw	fp,124(sp)
10003548:	ddc01e15 	stw	r23,120(sp)
1000354c:	dd801d15 	stw	r22,116(sp)
10003550:	dd401c15 	stw	r21,112(sp)
10003554:	dd001b15 	stw	r20,108(sp)
10003558:	d9400315 	stw	r5,12(sp)
1000355c:	d9c00415 	stw	r7,16(sp)
10003560:	2021883a 	mov	r16,r4
10003564:	3023883a 	mov	r17,r6
10003568:	dcc02317 	ldw	r19,140(sp)
1000356c:	3025883a 	mov	r18,r6
10003570:	10000826 	beq	r2,zero,10003594 <_dtoa_r+0x6c>
10003574:	20c01117 	ldw	r3,68(r4)
10003578:	01800044 	movi	r6,1
1000357c:	100b883a 	mov	r5,r2
10003580:	30cc983a 	sll	r6,r6,r3
10003584:	10c00115 	stw	r3,4(r2)
10003588:	11800215 	stw	r6,8(r2)
1000358c:	00064e40 	call	100064e4 <_Bfree>
10003590:	80001015 	stw	zero,64(r16)
10003594:	88002e16 	blt	r17,zero,10003650 <_dtoa_r+0x128>
10003598:	98000015 	stw	zero,0(r19)
1000359c:	88dffc2c 	andhi	r3,r17,32752
100035a0:	009ffc34 	movhi	r2,32752
100035a4:	18801b26 	beq	r3,r2,10003614 <_dtoa_r+0xec>
100035a8:	d9000317 	ldw	r4,12(sp)
100035ac:	900b883a 	mov	r5,r18
100035b0:	000d883a 	mov	r6,zero
100035b4:	000f883a 	mov	r7,zero
100035b8:	000c2640 	call	1000c264 <__eqdf2>
100035bc:	10002b1e 	bne	r2,zero,1000366c <_dtoa_r+0x144>
100035c0:	d8c02217 	ldw	r3,136(sp)
100035c4:	d9002417 	ldw	r4,144(sp)
100035c8:	00800044 	movi	r2,1
100035cc:	18800015 	stw	r2,0(r3)
100035d0:	2001a026 	beq	r4,zero,10003c54 <_dtoa_r+0x72c>
100035d4:	00840074 	movhi	r2,4097
100035d8:	10bfb044 	addi	r2,r2,-319
100035dc:	20800015 	stw	r2,0(r4)
100035e0:	10bfffc4 	addi	r2,r2,-1
100035e4:	dfc02017 	ldw	ra,128(sp)
100035e8:	df001f17 	ldw	fp,124(sp)
100035ec:	ddc01e17 	ldw	r23,120(sp)
100035f0:	dd801d17 	ldw	r22,116(sp)
100035f4:	dd401c17 	ldw	r21,112(sp)
100035f8:	dd001b17 	ldw	r20,108(sp)
100035fc:	dcc01a17 	ldw	r19,104(sp)
10003600:	dc801917 	ldw	r18,100(sp)
10003604:	dc401817 	ldw	r17,96(sp)
10003608:	dc001717 	ldw	r16,92(sp)
1000360c:	dec02104 	addi	sp,sp,132
10003610:	f800283a 	ret
10003614:	d8c02217 	ldw	r3,136(sp)
10003618:	d9000317 	ldw	r4,12(sp)
1000361c:	0089c3c4 	movi	r2,9999
10003620:	18800015 	stw	r2,0(r3)
10003624:	20017926 	beq	r4,zero,10003c0c <_dtoa_r+0x6e4>
10003628:	00840074 	movhi	r2,4097
1000362c:	10bfbc04 	addi	r2,r2,-272
10003630:	d9802417 	ldw	r6,144(sp)
10003634:	303feb26 	beq	r6,zero,100035e4 <__alt_data_end+0xf80035e4>
10003638:	10c000c7 	ldb	r3,3(r2)
1000363c:	18017a1e 	bne	r3,zero,10003c28 <_dtoa_r+0x700>
10003640:	10c000c4 	addi	r3,r2,3
10003644:	d9c02417 	ldw	r7,144(sp)
10003648:	38c00015 	stw	r3,0(r7)
1000364c:	003fe506 	br	100035e4 <__alt_data_end+0xf80035e4>
10003650:	04a00034 	movhi	r18,32768
10003654:	94bfffc4 	addi	r18,r18,-1
10003658:	8ca4703a 	and	r18,r17,r18
1000365c:	00800044 	movi	r2,1
10003660:	98800015 	stw	r2,0(r19)
10003664:	9023883a 	mov	r17,r18
10003668:	003fcc06 	br	1000359c <__alt_data_end+0xf800359c>
1000366c:	d9400317 	ldw	r5,12(sp)
10003670:	d8800204 	addi	r2,sp,8
10003674:	8828d53a 	srli	r20,r17,20
10003678:	d8800015 	stw	r2,0(sp)
1000367c:	8009883a 	mov	r4,r16
10003680:	900d883a 	mov	r6,r18
10003684:	d9c00104 	addi	r7,sp,4
10003688:	000710c0 	call	1000710c <__d2b>
1000368c:	1039883a 	mov	fp,r2
10003690:	a001671e 	bne	r20,zero,10003c30 <_dtoa_r+0x708>
10003694:	dd400217 	ldw	r21,8(sp)
10003698:	dd000117 	ldw	r20,4(sp)
1000369c:	00befbc4 	movi	r2,-1041
100036a0:	ad29883a 	add	r20,r21,r20
100036a4:	a082d616 	blt	r20,r2,10004200 <_dtoa_r+0xcd8>
100036a8:	d9800317 	ldw	r6,12(sp)
100036ac:	013f0384 	movi	r4,-1010
100036b0:	2509c83a 	sub	r4,r4,r20
100036b4:	a0810484 	addi	r2,r20,1042
100036b8:	8922983a 	sll	r17,r17,r4
100036bc:	3084d83a 	srl	r2,r6,r2
100036c0:	8888b03a 	or	r4,r17,r2
100036c4:	000d6840 	call	1000d684 <__floatunsidf>
100036c8:	1009883a 	mov	r4,r2
100036cc:	017f8434 	movhi	r5,65040
100036d0:	00800044 	movi	r2,1
100036d4:	194b883a 	add	r5,r3,r5
100036d8:	a53fffc4 	addi	r20,r20,-1
100036dc:	d8800f15 	stw	r2,60(sp)
100036e0:	000d883a 	mov	r6,zero
100036e4:	01cffe34 	movhi	r7,16376
100036e8:	000ccac0 	call	1000ccac <__subdf3>
100036ec:	1009883a 	mov	r4,r2
100036f0:	180b883a 	mov	r5,r3
100036f4:	0198dbf4 	movhi	r6,25455
100036f8:	3190d844 	addi	r6,r6,17249
100036fc:	01cff4f4 	movhi	r7,16339
10003700:	39e1e9c4 	addi	r7,r7,-30809
10003704:	000c4ac0 	call	1000c4ac <__muldf3>
10003708:	180b883a 	mov	r5,r3
1000370c:	01a2d874 	movhi	r6,35681
10003710:	31b22cc4 	addi	r6,r6,-14157
10003714:	01cff1f4 	movhi	r7,16327
10003718:	39e28a04 	addi	r7,r7,-30168
1000371c:	1009883a 	mov	r4,r2
10003720:	000b04c0 	call	1000b04c <__adddf3>
10003724:	a009883a 	mov	r4,r20
10003728:	1027883a 	mov	r19,r2
1000372c:	1823883a 	mov	r17,r3
10003730:	000d5b40 	call	1000d5b4 <__floatsidf>
10003734:	1009883a 	mov	r4,r2
10003738:	180b883a 	mov	r5,r3
1000373c:	019427f4 	movhi	r6,20639
10003740:	319e7ec4 	addi	r6,r6,31227
10003744:	01cff4f4 	movhi	r7,16339
10003748:	39d104c4 	addi	r7,r7,17427
1000374c:	000c4ac0 	call	1000c4ac <__muldf3>
10003750:	9809883a 	mov	r4,r19
10003754:	880b883a 	mov	r5,r17
10003758:	100d883a 	mov	r6,r2
1000375c:	180f883a 	mov	r7,r3
10003760:	000b04c0 	call	1000b04c <__adddf3>
10003764:	1009883a 	mov	r4,r2
10003768:	180b883a 	mov	r5,r3
1000376c:	1027883a 	mov	r19,r2
10003770:	1823883a 	mov	r17,r3
10003774:	000d5340 	call	1000d534 <__fixdfsi>
10003778:	9809883a 	mov	r4,r19
1000377c:	880b883a 	mov	r5,r17
10003780:	000d883a 	mov	r6,zero
10003784:	000f883a 	mov	r7,zero
10003788:	d8800615 	stw	r2,24(sp)
1000378c:	000c3c00 	call	1000c3c0 <__ledf2>
10003790:	10028416 	blt	r2,zero,100041a4 <_dtoa_r+0xc7c>
10003794:	d9000617 	ldw	r4,24(sp)
10003798:	00800584 	movi	r2,22
1000379c:	11027236 	bltu	r2,r4,10004168 <_dtoa_r+0xc40>
100037a0:	200490fa 	slli	r2,r4,3
100037a4:	00c40074 	movhi	r3,4097
100037a8:	18ffd804 	addi	r3,r3,-160
100037ac:	d9800317 	ldw	r6,12(sp)
100037b0:	1885883a 	add	r2,r3,r2
100037b4:	11000017 	ldw	r4,0(r2)
100037b8:	11400117 	ldw	r5,4(r2)
100037bc:	900f883a 	mov	r7,r18
100037c0:	000c2e80 	call	1000c2e8 <__gedf2>
100037c4:	0082930e 	bge	zero,r2,10004214 <_dtoa_r+0xcec>
100037c8:	d9800617 	ldw	r6,24(sp)
100037cc:	d8000e15 	stw	zero,56(sp)
100037d0:	31bfffc4 	addi	r6,r6,-1
100037d4:	d9800615 	stw	r6,24(sp)
100037d8:	ad2bc83a 	sub	r21,r21,r20
100037dc:	ad7fffc4 	addi	r21,r21,-1
100037e0:	a8026c16 	blt	r21,zero,10004194 <_dtoa_r+0xc6c>
100037e4:	d8000815 	stw	zero,32(sp)
100037e8:	d8800617 	ldw	r2,24(sp)
100037ec:	10026116 	blt	r2,zero,10004174 <_dtoa_r+0xc4c>
100037f0:	a8ab883a 	add	r21,r21,r2
100037f4:	d8800b15 	stw	r2,44(sp)
100037f8:	d8000a15 	stw	zero,40(sp)
100037fc:	d9c00417 	ldw	r7,16(sp)
10003800:	00800244 	movi	r2,9
10003804:	11c11636 	bltu	r2,r7,10003c60 <_dtoa_r+0x738>
10003808:	00800144 	movi	r2,5
1000380c:	11c4cc0e 	bge	r2,r7,10004b40 <_dtoa_r+0x1618>
10003810:	39ffff04 	addi	r7,r7,-4
10003814:	d9c00415 	stw	r7,16(sp)
10003818:	0027883a 	mov	r19,zero
1000381c:	d8c00417 	ldw	r3,16(sp)
10003820:	008000c4 	movi	r2,3
10003824:	1883aa26 	beq	r3,r2,100046d0 <_dtoa_r+0x11a8>
10003828:	10c35b0e 	bge	r2,r3,10004598 <_dtoa_r+0x1070>
1000382c:	d9000417 	ldw	r4,16(sp)
10003830:	00800104 	movi	r2,4
10003834:	2082da26 	beq	r4,r2,100043a0 <_dtoa_r+0xe78>
10003838:	00800144 	movi	r2,5
1000383c:	2081091e 	bne	r4,r2,10003c64 <_dtoa_r+0x73c>
10003840:	01c00044 	movi	r7,1
10003844:	d9c00c15 	stw	r7,48(sp)
10003848:	d8c02117 	ldw	r3,132(sp)
1000384c:	d9000617 	ldw	r4,24(sp)
10003850:	1907883a 	add	r3,r3,r4
10003854:	19800044 	addi	r6,r3,1
10003858:	d8c00d15 	stw	r3,52(sp)
1000385c:	d9800915 	stw	r6,36(sp)
10003860:	0183a90e 	bge	zero,r6,10004708 <_dtoa_r+0x11e0>
10003864:	d9800917 	ldw	r6,36(sp)
10003868:	80001115 	stw	zero,68(r16)
1000386c:	008005c4 	movi	r2,23
10003870:	1184b52e 	bgeu	r2,r6,10004b48 <_dtoa_r+0x1620>
10003874:	00c00044 	movi	r3,1
10003878:	00800104 	movi	r2,4
1000387c:	1085883a 	add	r2,r2,r2
10003880:	11000504 	addi	r4,r2,20
10003884:	180b883a 	mov	r5,r3
10003888:	18c00044 	addi	r3,r3,1
1000388c:	313ffb2e 	bgeu	r6,r4,1000387c <__alt_data_end+0xf800387c>
10003890:	81401115 	stw	r5,68(r16)
10003894:	3023883a 	mov	r17,r6
10003898:	8009883a 	mov	r4,r16
1000389c:	000643c0 	call	1000643c <_Balloc>
100038a0:	d8800715 	stw	r2,28(sp)
100038a4:	80801015 	stw	r2,64(r16)
100038a8:	00800384 	movi	r2,14
100038ac:	1440f936 	bltu	r2,r17,10003c94 <_dtoa_r+0x76c>
100038b0:	9800f826 	beq	r19,zero,10003c94 <_dtoa_r+0x76c>
100038b4:	d9c00617 	ldw	r7,24(sp)
100038b8:	01c39c0e 	bge	zero,r7,1000472c <_dtoa_r+0x1204>
100038bc:	388003cc 	andi	r2,r7,15
100038c0:	100490fa 	slli	r2,r2,3
100038c4:	382dd13a 	srai	r22,r7,4
100038c8:	00c40074 	movhi	r3,4097
100038cc:	18ffd804 	addi	r3,r3,-160
100038d0:	1885883a 	add	r2,r3,r2
100038d4:	b0c0040c 	andi	r3,r22,16
100038d8:	12800017 	ldw	r10,0(r2)
100038dc:	12400117 	ldw	r9,4(r2)
100038e0:	18038526 	beq	r3,zero,100046f8 <_dtoa_r+0x11d0>
100038e4:	00840074 	movhi	r2,4097
100038e8:	10bfce04 	addi	r2,r2,-200
100038ec:	11800817 	ldw	r6,32(r2)
100038f0:	11c00917 	ldw	r7,36(r2)
100038f4:	d9000317 	ldw	r4,12(sp)
100038f8:	900b883a 	mov	r5,r18
100038fc:	da401515 	stw	r9,84(sp)
10003900:	da801615 	stw	r10,88(sp)
10003904:	000b8c80 	call	1000b8c8 <__divdf3>
10003908:	da401517 	ldw	r9,84(sp)
1000390c:	da801617 	ldw	r10,88(sp)
10003910:	1027883a 	mov	r19,r2
10003914:	1829883a 	mov	r20,r3
10003918:	b58003cc 	andi	r22,r22,15
1000391c:	044000c4 	movi	r17,3
10003920:	b0001126 	beq	r22,zero,10003968 <_dtoa_r+0x440>
10003924:	05c40074 	movhi	r23,4097
10003928:	bdffce04 	addi	r23,r23,-200
1000392c:	5005883a 	mov	r2,r10
10003930:	4807883a 	mov	r3,r9
10003934:	b180004c 	andi	r6,r22,1
10003938:	1009883a 	mov	r4,r2
1000393c:	b02dd07a 	srai	r22,r22,1
10003940:	180b883a 	mov	r5,r3
10003944:	30000426 	beq	r6,zero,10003958 <_dtoa_r+0x430>
10003948:	b9800017 	ldw	r6,0(r23)
1000394c:	b9c00117 	ldw	r7,4(r23)
10003950:	8c400044 	addi	r17,r17,1
10003954:	000c4ac0 	call	1000c4ac <__muldf3>
10003958:	bdc00204 	addi	r23,r23,8
1000395c:	b03ff51e 	bne	r22,zero,10003934 <__alt_data_end+0xf8003934>
10003960:	1015883a 	mov	r10,r2
10003964:	1813883a 	mov	r9,r3
10003968:	9809883a 	mov	r4,r19
1000396c:	a00b883a 	mov	r5,r20
10003970:	500d883a 	mov	r6,r10
10003974:	480f883a 	mov	r7,r9
10003978:	000b8c80 	call	1000b8c8 <__divdf3>
1000397c:	1027883a 	mov	r19,r2
10003980:	1829883a 	mov	r20,r3
10003984:	d8c00e17 	ldw	r3,56(sp)
10003988:	18000626 	beq	r3,zero,100039a4 <_dtoa_r+0x47c>
1000398c:	9809883a 	mov	r4,r19
10003990:	a00b883a 	mov	r5,r20
10003994:	000d883a 	mov	r6,zero
10003998:	01cffc34 	movhi	r7,16368
1000399c:	000c3c00 	call	1000c3c0 <__ledf2>
100039a0:	10041516 	blt	r2,zero,100049f8 <_dtoa_r+0x14d0>
100039a4:	8809883a 	mov	r4,r17
100039a8:	000d5b40 	call	1000d5b4 <__floatsidf>
100039ac:	1009883a 	mov	r4,r2
100039b0:	180b883a 	mov	r5,r3
100039b4:	980d883a 	mov	r6,r19
100039b8:	a00f883a 	mov	r7,r20
100039bc:	000c4ac0 	call	1000c4ac <__muldf3>
100039c0:	1009883a 	mov	r4,r2
100039c4:	180b883a 	mov	r5,r3
100039c8:	000d883a 	mov	r6,zero
100039cc:	01d00734 	movhi	r7,16412
100039d0:	000b04c0 	call	1000b04c <__adddf3>
100039d4:	1023883a 	mov	r17,r2
100039d8:	d8800917 	ldw	r2,36(sp)
100039dc:	05bf3034 	movhi	r22,64704
100039e0:	1daf883a 	add	r23,r3,r22
100039e4:	10031e26 	beq	r2,zero,10004660 <_dtoa_r+0x1138>
100039e8:	d8c00617 	ldw	r3,24(sp)
100039ec:	dac00917 	ldw	r11,36(sp)
100039f0:	d8c01315 	stw	r3,76(sp)
100039f4:	d9000c17 	ldw	r4,48(sp)
100039f8:	20039626 	beq	r4,zero,10004854 <_dtoa_r+0x132c>
100039fc:	58bfffc4 	addi	r2,r11,-1
10003a00:	100490fa 	slli	r2,r2,3
10003a04:	00c40074 	movhi	r3,4097
10003a08:	18ffd804 	addi	r3,r3,-160
10003a0c:	0009883a 	mov	r4,zero
10003a10:	1885883a 	add	r2,r3,r2
10003a14:	11800017 	ldw	r6,0(r2)
10003a18:	11c00117 	ldw	r7,4(r2)
10003a1c:	d8800717 	ldw	r2,28(sp)
10003a20:	014ff834 	movhi	r5,16352
10003a24:	dac01615 	stw	r11,88(sp)
10003a28:	15800044 	addi	r22,r2,1
10003a2c:	000b8c80 	call	1000b8c8 <__divdf3>
10003a30:	880d883a 	mov	r6,r17
10003a34:	b80f883a 	mov	r7,r23
10003a38:	1009883a 	mov	r4,r2
10003a3c:	180b883a 	mov	r5,r3
10003a40:	000ccac0 	call	1000ccac <__subdf3>
10003a44:	a00b883a 	mov	r5,r20
10003a48:	9809883a 	mov	r4,r19
10003a4c:	102f883a 	mov	r23,r2
10003a50:	d8c01015 	stw	r3,64(sp)
10003a54:	000d5340 	call	1000d534 <__fixdfsi>
10003a58:	1009883a 	mov	r4,r2
10003a5c:	d8801515 	stw	r2,84(sp)
10003a60:	000d5b40 	call	1000d5b4 <__floatsidf>
10003a64:	9809883a 	mov	r4,r19
10003a68:	a00b883a 	mov	r5,r20
10003a6c:	100d883a 	mov	r6,r2
10003a70:	180f883a 	mov	r7,r3
10003a74:	000ccac0 	call	1000ccac <__subdf3>
10003a78:	da401517 	ldw	r9,84(sp)
10003a7c:	1827883a 	mov	r19,r3
10003a80:	d8c00717 	ldw	r3,28(sp)
10003a84:	d9401017 	ldw	r5,64(sp)
10003a88:	4a400c04 	addi	r9,r9,48
10003a8c:	1023883a 	mov	r17,r2
10003a90:	1a400005 	stb	r9,0(r3)
10003a94:	b809883a 	mov	r4,r23
10003a98:	880d883a 	mov	r6,r17
10003a9c:	980f883a 	mov	r7,r19
10003aa0:	4829883a 	mov	r20,r9
10003aa4:	000c2e80 	call	1000c2e8 <__gedf2>
10003aa8:	00842216 	blt	zero,r2,10004b34 <_dtoa_r+0x160c>
10003aac:	0009883a 	mov	r4,zero
10003ab0:	014ffc34 	movhi	r5,16368
10003ab4:	880d883a 	mov	r6,r17
10003ab8:	980f883a 	mov	r7,r19
10003abc:	000ccac0 	call	1000ccac <__subdf3>
10003ac0:	d9401017 	ldw	r5,64(sp)
10003ac4:	b809883a 	mov	r4,r23
10003ac8:	100d883a 	mov	r6,r2
10003acc:	180f883a 	mov	r7,r3
10003ad0:	000c2e80 	call	1000c2e8 <__gedf2>
10003ad4:	dac01617 	ldw	r11,88(sp)
10003ad8:	00841316 	blt	zero,r2,10004b28 <_dtoa_r+0x1600>
10003adc:	00800044 	movi	r2,1
10003ae0:	12c06c0e 	bge	r2,r11,10003c94 <_dtoa_r+0x76c>
10003ae4:	d9000717 	ldw	r4,28(sp)
10003ae8:	dd401215 	stw	r21,72(sp)
10003aec:	dc001115 	stw	r16,68(sp)
10003af0:	22d7883a 	add	r11,r4,r11
10003af4:	dc801415 	stw	r18,80(sp)
10003af8:	582b883a 	mov	r21,r11
10003afc:	b021883a 	mov	r16,r22
10003b00:	dc801017 	ldw	r18,64(sp)
10003b04:	00000906 	br	10003b2c <_dtoa_r+0x604>
10003b08:	000ccac0 	call	1000ccac <__subdf3>
10003b0c:	1009883a 	mov	r4,r2
10003b10:	180b883a 	mov	r5,r3
10003b14:	b80d883a 	mov	r6,r23
10003b18:	900f883a 	mov	r7,r18
10003b1c:	000c3c00 	call	1000c3c0 <__ledf2>
10003b20:	1003ea16 	blt	r2,zero,10004acc <_dtoa_r+0x15a4>
10003b24:	b543ed26 	beq	r22,r21,10004adc <_dtoa_r+0x15b4>
10003b28:	b021883a 	mov	r16,r22
10003b2c:	b809883a 	mov	r4,r23
10003b30:	900b883a 	mov	r5,r18
10003b34:	000d883a 	mov	r6,zero
10003b38:	01d00934 	movhi	r7,16420
10003b3c:	000c4ac0 	call	1000c4ac <__muldf3>
10003b40:	000d883a 	mov	r6,zero
10003b44:	01d00934 	movhi	r7,16420
10003b48:	8809883a 	mov	r4,r17
10003b4c:	980b883a 	mov	r5,r19
10003b50:	102f883a 	mov	r23,r2
10003b54:	1825883a 	mov	r18,r3
10003b58:	000c4ac0 	call	1000c4ac <__muldf3>
10003b5c:	180b883a 	mov	r5,r3
10003b60:	1009883a 	mov	r4,r2
10003b64:	1823883a 	mov	r17,r3
10003b68:	1027883a 	mov	r19,r2
10003b6c:	000d5340 	call	1000d534 <__fixdfsi>
10003b70:	1009883a 	mov	r4,r2
10003b74:	1029883a 	mov	r20,r2
10003b78:	000d5b40 	call	1000d5b4 <__floatsidf>
10003b7c:	9809883a 	mov	r4,r19
10003b80:	880b883a 	mov	r5,r17
10003b84:	100d883a 	mov	r6,r2
10003b88:	180f883a 	mov	r7,r3
10003b8c:	000ccac0 	call	1000ccac <__subdf3>
10003b90:	a5000c04 	addi	r20,r20,48
10003b94:	1009883a 	mov	r4,r2
10003b98:	180b883a 	mov	r5,r3
10003b9c:	b80d883a 	mov	r6,r23
10003ba0:	900f883a 	mov	r7,r18
10003ba4:	85000005 	stb	r20,0(r16)
10003ba8:	1023883a 	mov	r17,r2
10003bac:	1827883a 	mov	r19,r3
10003bb0:	000c3c00 	call	1000c3c0 <__ledf2>
10003bb4:	b5800044 	addi	r22,r22,1
10003bb8:	0009883a 	mov	r4,zero
10003bbc:	014ffc34 	movhi	r5,16368
10003bc0:	880d883a 	mov	r6,r17
10003bc4:	980f883a 	mov	r7,r19
10003bc8:	103fcf0e 	bge	r2,zero,10003b08 <__alt_data_end+0xf8003b08>
10003bcc:	d8c01317 	ldw	r3,76(sp)
10003bd0:	dc001117 	ldw	r16,68(sp)
10003bd4:	d8c00615 	stw	r3,24(sp)
10003bd8:	8009883a 	mov	r4,r16
10003bdc:	e00b883a 	mov	r5,fp
10003be0:	00064e40 	call	100064e4 <_Bfree>
10003be4:	d9800617 	ldw	r6,24(sp)
10003be8:	d9c02217 	ldw	r7,136(sp)
10003bec:	b0000005 	stb	zero,0(r22)
10003bf0:	30800044 	addi	r2,r6,1
10003bf4:	38800015 	stw	r2,0(r7)
10003bf8:	d8802417 	ldw	r2,144(sp)
10003bfc:	10026426 	beq	r2,zero,10004590 <_dtoa_r+0x1068>
10003c00:	15800015 	stw	r22,0(r2)
10003c04:	d8800717 	ldw	r2,28(sp)
10003c08:	003e7606 	br	100035e4 <__alt_data_end+0xf80035e4>
10003c0c:	00800434 	movhi	r2,16
10003c10:	10bfffc4 	addi	r2,r2,-1
10003c14:	88a2703a 	and	r17,r17,r2
10003c18:	883e831e 	bne	r17,zero,10003628 <__alt_data_end+0xf8003628>
10003c1c:	00840074 	movhi	r2,4097
10003c20:	10bfb904 	addi	r2,r2,-284
10003c24:	003e8206 	br	10003630 <__alt_data_end+0xf8003630>
10003c28:	10c00204 	addi	r3,r2,8
10003c2c:	003e8506 	br	10003644 <__alt_data_end+0xf8003644>
10003c30:	01400434 	movhi	r5,16
10003c34:	297fffc4 	addi	r5,r5,-1
10003c38:	914a703a 	and	r5,r18,r5
10003c3c:	d9000317 	ldw	r4,12(sp)
10003c40:	294ffc34 	orhi	r5,r5,16368
10003c44:	a53f0044 	addi	r20,r20,-1023
10003c48:	dd400217 	ldw	r21,8(sp)
10003c4c:	d8000f15 	stw	zero,60(sp)
10003c50:	003ea306 	br	100036e0 <__alt_data_end+0xf80036e0>
10003c54:	00840074 	movhi	r2,4097
10003c58:	10bfb004 	addi	r2,r2,-320
10003c5c:	003e6106 	br	100035e4 <__alt_data_end+0xf80035e4>
10003c60:	d8000415 	stw	zero,16(sp)
10003c64:	8009883a 	mov	r4,r16
10003c68:	80001115 	stw	zero,68(r16)
10003c6c:	000b883a 	mov	r5,zero
10003c70:	000643c0 	call	1000643c <_Balloc>
10003c74:	00ffffc4 	movi	r3,-1
10003c78:	01000044 	movi	r4,1
10003c7c:	d8800715 	stw	r2,28(sp)
10003c80:	d8c00d15 	stw	r3,52(sp)
10003c84:	80801015 	stw	r2,64(r16)
10003c88:	d8002115 	stw	zero,132(sp)
10003c8c:	d8c00915 	stw	r3,36(sp)
10003c90:	d9000c15 	stw	r4,48(sp)
10003c94:	d8800117 	ldw	r2,4(sp)
10003c98:	10008e16 	blt	r2,zero,10003ed4 <_dtoa_r+0x9ac>
10003c9c:	d9000617 	ldw	r4,24(sp)
10003ca0:	00c00384 	movi	r3,14
10003ca4:	19008b16 	blt	r3,r4,10003ed4 <_dtoa_r+0x9ac>
10003ca8:	200490fa 	slli	r2,r4,3
10003cac:	d9802117 	ldw	r6,132(sp)
10003cb0:	00c40074 	movhi	r3,4097
10003cb4:	18ffd804 	addi	r3,r3,-160
10003cb8:	1885883a 	add	r2,r3,r2
10003cbc:	14400017 	ldw	r17,0(r2)
10003cc0:	14c00117 	ldw	r19,4(r2)
10003cc4:	3001be16 	blt	r6,zero,100043c0 <_dtoa_r+0xe98>
10003cc8:	d9000317 	ldw	r4,12(sp)
10003ccc:	880d883a 	mov	r6,r17
10003cd0:	980f883a 	mov	r7,r19
10003cd4:	900b883a 	mov	r5,r18
10003cd8:	000b8c80 	call	1000b8c8 <__divdf3>
10003cdc:	180b883a 	mov	r5,r3
10003ce0:	1009883a 	mov	r4,r2
10003ce4:	000d5340 	call	1000d534 <__fixdfsi>
10003ce8:	1009883a 	mov	r4,r2
10003cec:	102f883a 	mov	r23,r2
10003cf0:	000d5b40 	call	1000d5b4 <__floatsidf>
10003cf4:	1009883a 	mov	r4,r2
10003cf8:	180b883a 	mov	r5,r3
10003cfc:	880d883a 	mov	r6,r17
10003d00:	980f883a 	mov	r7,r19
10003d04:	000c4ac0 	call	1000c4ac <__muldf3>
10003d08:	d9000317 	ldw	r4,12(sp)
10003d0c:	900b883a 	mov	r5,r18
10003d10:	100d883a 	mov	r6,r2
10003d14:	180f883a 	mov	r7,r3
10003d18:	000ccac0 	call	1000ccac <__subdf3>
10003d1c:	d9c00717 	ldw	r7,28(sp)
10003d20:	1009883a 	mov	r4,r2
10003d24:	b8800c04 	addi	r2,r23,48
10003d28:	38800005 	stb	r2,0(r7)
10003d2c:	3d800044 	addi	r22,r7,1
10003d30:	d9c00917 	ldw	r7,36(sp)
10003d34:	01800044 	movi	r6,1
10003d38:	180b883a 	mov	r5,r3
10003d3c:	2005883a 	mov	r2,r4
10003d40:	39803e26 	beq	r7,r6,10003e3c <_dtoa_r+0x914>
10003d44:	000d883a 	mov	r6,zero
10003d48:	01d00934 	movhi	r7,16420
10003d4c:	000c4ac0 	call	1000c4ac <__muldf3>
10003d50:	1009883a 	mov	r4,r2
10003d54:	180b883a 	mov	r5,r3
10003d58:	000d883a 	mov	r6,zero
10003d5c:	000f883a 	mov	r7,zero
10003d60:	1029883a 	mov	r20,r2
10003d64:	182b883a 	mov	r21,r3
10003d68:	000c2640 	call	1000c264 <__eqdf2>
10003d6c:	103f9a26 	beq	r2,zero,10003bd8 <__alt_data_end+0xf8003bd8>
10003d70:	d8c00717 	ldw	r3,28(sp)
10003d74:	d9000917 	ldw	r4,36(sp)
10003d78:	b025883a 	mov	r18,r22
10003d7c:	df000415 	stw	fp,16(sp)
10003d80:	1905883a 	add	r2,r3,r4
10003d84:	15ffffc4 	addi	r23,r2,-1
10003d88:	dc000315 	stw	r16,12(sp)
10003d8c:	00000a06 	br	10003db8 <_dtoa_r+0x890>
10003d90:	000c4ac0 	call	1000c4ac <__muldf3>
10003d94:	1009883a 	mov	r4,r2
10003d98:	180b883a 	mov	r5,r3
10003d9c:	000d883a 	mov	r6,zero
10003da0:	000f883a 	mov	r7,zero
10003da4:	1029883a 	mov	r20,r2
10003da8:	182b883a 	mov	r21,r3
10003dac:	000c2640 	call	1000c264 <__eqdf2>
10003db0:	10021926 	beq	r2,zero,10004618 <_dtoa_r+0x10f0>
10003db4:	e025883a 	mov	r18,fp
10003db8:	880d883a 	mov	r6,r17
10003dbc:	980f883a 	mov	r7,r19
10003dc0:	a009883a 	mov	r4,r20
10003dc4:	a80b883a 	mov	r5,r21
10003dc8:	000b8c80 	call	1000b8c8 <__divdf3>
10003dcc:	180b883a 	mov	r5,r3
10003dd0:	1009883a 	mov	r4,r2
10003dd4:	000d5340 	call	1000d534 <__fixdfsi>
10003dd8:	1009883a 	mov	r4,r2
10003ddc:	1021883a 	mov	r16,r2
10003de0:	000d5b40 	call	1000d5b4 <__floatsidf>
10003de4:	1009883a 	mov	r4,r2
10003de8:	180b883a 	mov	r5,r3
10003dec:	880d883a 	mov	r6,r17
10003df0:	980f883a 	mov	r7,r19
10003df4:	000c4ac0 	call	1000c4ac <__muldf3>
10003df8:	a009883a 	mov	r4,r20
10003dfc:	a80b883a 	mov	r5,r21
10003e00:	100d883a 	mov	r6,r2
10003e04:	180f883a 	mov	r7,r3
10003e08:	000ccac0 	call	1000ccac <__subdf3>
10003e0c:	82800c04 	addi	r10,r16,48
10003e10:	97000044 	addi	fp,r18,1
10003e14:	92800005 	stb	r10,0(r18)
10003e18:	000d883a 	mov	r6,zero
10003e1c:	01d00934 	movhi	r7,16420
10003e20:	1009883a 	mov	r4,r2
10003e24:	180b883a 	mov	r5,r3
10003e28:	e02d883a 	mov	r22,fp
10003e2c:	95ffd81e 	bne	r18,r23,10003d90 <__alt_data_end+0xf8003d90>
10003e30:	802f883a 	mov	r23,r16
10003e34:	df000417 	ldw	fp,16(sp)
10003e38:	dc000317 	ldw	r16,12(sp)
10003e3c:	1009883a 	mov	r4,r2
10003e40:	180b883a 	mov	r5,r3
10003e44:	100d883a 	mov	r6,r2
10003e48:	180f883a 	mov	r7,r3
10003e4c:	000b04c0 	call	1000b04c <__adddf3>
10003e50:	8809883a 	mov	r4,r17
10003e54:	980b883a 	mov	r5,r19
10003e58:	100d883a 	mov	r6,r2
10003e5c:	180f883a 	mov	r7,r3
10003e60:	1025883a 	mov	r18,r2
10003e64:	1829883a 	mov	r20,r3
10003e68:	000c3c00 	call	1000c3c0 <__ledf2>
10003e6c:	10000816 	blt	r2,zero,10003e90 <_dtoa_r+0x968>
10003e70:	8809883a 	mov	r4,r17
10003e74:	980b883a 	mov	r5,r19
10003e78:	900d883a 	mov	r6,r18
10003e7c:	a00f883a 	mov	r7,r20
10003e80:	000c2640 	call	1000c264 <__eqdf2>
10003e84:	103f541e 	bne	r2,zero,10003bd8 <__alt_data_end+0xf8003bd8>
10003e88:	bdc0004c 	andi	r23,r23,1
10003e8c:	b83f5226 	beq	r23,zero,10003bd8 <__alt_data_end+0xf8003bd8>
10003e90:	b53fffc3 	ldbu	r20,-1(r22)
10003e94:	b0ffff84 	addi	r3,r22,-2
10003e98:	01400e44 	movi	r5,57
10003e9c:	d9800717 	ldw	r6,28(sp)
10003ea0:	00000406 	br	10003eb4 <_dtoa_r+0x98c>
10003ea4:	30824326 	beq	r6,r2,100047b4 <_dtoa_r+0x128c>
10003ea8:	1d000003 	ldbu	r20,0(r3)
10003eac:	102d883a 	mov	r22,r2
10003eb0:	18ffffc4 	addi	r3,r3,-1
10003eb4:	a1003fcc 	andi	r4,r20,255
10003eb8:	2100201c 	xori	r4,r4,128
10003ebc:	213fe004 	addi	r4,r4,-128
10003ec0:	b0bfffc4 	addi	r2,r22,-1
10003ec4:	217ff726 	beq	r4,r5,10003ea4 <__alt_data_end+0xf8003ea4>
10003ec8:	a2400044 	addi	r9,r20,1
10003ecc:	12400005 	stb	r9,0(r2)
10003ed0:	003f4106 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10003ed4:	d9000c17 	ldw	r4,48(sp)
10003ed8:	2000be26 	beq	r4,zero,100041d4 <_dtoa_r+0xcac>
10003edc:	d9800417 	ldw	r6,16(sp)
10003ee0:	00c00044 	movi	r3,1
10003ee4:	19815e0e 	bge	r3,r6,10004460 <_dtoa_r+0xf38>
10003ee8:	d8800917 	ldw	r2,36(sp)
10003eec:	d8c00a17 	ldw	r3,40(sp)
10003ef0:	153fffc4 	addi	r20,r2,-1
10003ef4:	1d01f816 	blt	r3,r20,100046d8 <_dtoa_r+0x11b0>
10003ef8:	1d29c83a 	sub	r20,r3,r20
10003efc:	d9c00917 	ldw	r7,36(sp)
10003f00:	3802ad16 	blt	r7,zero,100049b8 <_dtoa_r+0x1490>
10003f04:	dcc00817 	ldw	r19,32(sp)
10003f08:	d8800917 	ldw	r2,36(sp)
10003f0c:	d8c00817 	ldw	r3,32(sp)
10003f10:	8009883a 	mov	r4,r16
10003f14:	01400044 	movi	r5,1
10003f18:	1887883a 	add	r3,r3,r2
10003f1c:	d8c00815 	stw	r3,32(sp)
10003f20:	a8ab883a 	add	r21,r21,r2
10003f24:	000686c0 	call	1000686c <__i2b>
10003f28:	1023883a 	mov	r17,r2
10003f2c:	98000826 	beq	r19,zero,10003f50 <_dtoa_r+0xa28>
10003f30:	0540070e 	bge	zero,r21,10003f50 <_dtoa_r+0xa28>
10003f34:	a805883a 	mov	r2,r21
10003f38:	9d411716 	blt	r19,r21,10004398 <_dtoa_r+0xe70>
10003f3c:	d9000817 	ldw	r4,32(sp)
10003f40:	98a7c83a 	sub	r19,r19,r2
10003f44:	a8abc83a 	sub	r21,r21,r2
10003f48:	2089c83a 	sub	r4,r4,r2
10003f4c:	d9000815 	stw	r4,32(sp)
10003f50:	d9800a17 	ldw	r6,40(sp)
10003f54:	0180140e 	bge	zero,r6,10003fa8 <_dtoa_r+0xa80>
10003f58:	d9c00c17 	ldw	r7,48(sp)
10003f5c:	3801d626 	beq	r7,zero,100046b8 <_dtoa_r+0x1190>
10003f60:	05000e0e 	bge	zero,r20,10003f9c <_dtoa_r+0xa74>
10003f64:	880b883a 	mov	r5,r17
10003f68:	8009883a 	mov	r4,r16
10003f6c:	a00d883a 	mov	r6,r20
10003f70:	0006b140 	call	10006b14 <__pow5mult>
10003f74:	e00d883a 	mov	r6,fp
10003f78:	8009883a 	mov	r4,r16
10003f7c:	100b883a 	mov	r5,r2
10003f80:	1023883a 	mov	r17,r2
10003f84:	00068a80 	call	100068a8 <__multiply>
10003f88:	102d883a 	mov	r22,r2
10003f8c:	e00b883a 	mov	r5,fp
10003f90:	8009883a 	mov	r4,r16
10003f94:	00064e40 	call	100064e4 <_Bfree>
10003f98:	b039883a 	mov	fp,r22
10003f9c:	d8800a17 	ldw	r2,40(sp)
10003fa0:	150dc83a 	sub	r6,r2,r20
10003fa4:	30011f1e 	bne	r6,zero,10004424 <_dtoa_r+0xefc>
10003fa8:	8009883a 	mov	r4,r16
10003fac:	01400044 	movi	r5,1
10003fb0:	000686c0 	call	1000686c <__i2b>
10003fb4:	d8c00b17 	ldw	r3,44(sp)
10003fb8:	1029883a 	mov	r20,r2
10003fbc:	00c0050e 	bge	zero,r3,10003fd4 <_dtoa_r+0xaac>
10003fc0:	8009883a 	mov	r4,r16
10003fc4:	100b883a 	mov	r5,r2
10003fc8:	180d883a 	mov	r6,r3
10003fcc:	0006b140 	call	10006b14 <__pow5mult>
10003fd0:	1029883a 	mov	r20,r2
10003fd4:	d9000417 	ldw	r4,16(sp)
10003fd8:	00800044 	movi	r2,1
10003fdc:	1100e00e 	bge	r2,r4,10004360 <_dtoa_r+0xe38>
10003fe0:	0025883a 	mov	r18,zero
10003fe4:	d8800b17 	ldw	r2,44(sp)
10003fe8:	10015f1e 	bne	r2,zero,10004568 <_dtoa_r+0x1040>
10003fec:	00800044 	movi	r2,1
10003ff0:	1545883a 	add	r2,r2,r21
10003ff4:	108007cc 	andi	r2,r2,31
10003ff8:	10007a26 	beq	r2,zero,100041e4 <_dtoa_r+0xcbc>
10003ffc:	01000804 	movi	r4,32
10004000:	2089c83a 	sub	r4,r4,r2
10004004:	00c00104 	movi	r3,4
10004008:	1902d20e 	bge	r3,r4,10004b54 <_dtoa_r+0x162c>
1000400c:	00c00704 	movi	r3,28
10004010:	1885c83a 	sub	r2,r3,r2
10004014:	d8c00817 	ldw	r3,32(sp)
10004018:	98a7883a 	add	r19,r19,r2
1000401c:	a8ab883a 	add	r21,r21,r2
10004020:	1887883a 	add	r3,r3,r2
10004024:	d8c00815 	stw	r3,32(sp)
10004028:	d9800817 	ldw	r6,32(sp)
1000402c:	0180040e 	bge	zero,r6,10004040 <_dtoa_r+0xb18>
10004030:	e00b883a 	mov	r5,fp
10004034:	8009883a 	mov	r4,r16
10004038:	0006c5c0 	call	10006c5c <__lshift>
1000403c:	1039883a 	mov	fp,r2
10004040:	0540050e 	bge	zero,r21,10004058 <_dtoa_r+0xb30>
10004044:	a00b883a 	mov	r5,r20
10004048:	8009883a 	mov	r4,r16
1000404c:	a80d883a 	mov	r6,r21
10004050:	0006c5c0 	call	10006c5c <__lshift>
10004054:	1029883a 	mov	r20,r2
10004058:	d9c00e17 	ldw	r7,56(sp)
1000405c:	3801301e 	bne	r7,zero,10004520 <_dtoa_r+0xff8>
10004060:	d9c00917 	ldw	r7,36(sp)
10004064:	01c1500e 	bge	zero,r7,100045a8 <_dtoa_r+0x1080>
10004068:	d8800c17 	ldw	r2,48(sp)
1000406c:	10006b1e 	bne	r2,zero,1000421c <_dtoa_r+0xcf4>
10004070:	dc800717 	ldw	r18,28(sp)
10004074:	dcc00917 	ldw	r19,36(sp)
10004078:	902b883a 	mov	r21,r18
1000407c:	00000206 	br	10004088 <_dtoa_r+0xb60>
10004080:	000650c0 	call	1000650c <__multadd>
10004084:	1039883a 	mov	fp,r2
10004088:	e009883a 	mov	r4,fp
1000408c:	a00b883a 	mov	r5,r20
10004090:	00033000 	call	10003300 <quorem>
10004094:	10800c04 	addi	r2,r2,48
10004098:	90800005 	stb	r2,0(r18)
1000409c:	94800044 	addi	r18,r18,1
100040a0:	9547c83a 	sub	r3,r18,r21
100040a4:	8009883a 	mov	r4,r16
100040a8:	e00b883a 	mov	r5,fp
100040ac:	01800284 	movi	r6,10
100040b0:	000f883a 	mov	r7,zero
100040b4:	1cfff216 	blt	r3,r19,10004080 <__alt_data_end+0xf8004080>
100040b8:	102f883a 	mov	r23,r2
100040bc:	d8800917 	ldw	r2,36(sp)
100040c0:	0082410e 	bge	zero,r2,100049c8 <_dtoa_r+0x14a0>
100040c4:	d9000717 	ldw	r4,28(sp)
100040c8:	002b883a 	mov	r21,zero
100040cc:	20ad883a 	add	r22,r4,r2
100040d0:	e00b883a 	mov	r5,fp
100040d4:	8009883a 	mov	r4,r16
100040d8:	01800044 	movi	r6,1
100040dc:	0006c5c0 	call	10006c5c <__lshift>
100040e0:	1009883a 	mov	r4,r2
100040e4:	a00b883a 	mov	r5,r20
100040e8:	1039883a 	mov	fp,r2
100040ec:	0006dac0 	call	10006dac <__mcmp>
100040f0:	0080d10e 	bge	zero,r2,10004438 <_dtoa_r+0xf10>
100040f4:	b13fffc3 	ldbu	r4,-1(r22)
100040f8:	b0ffff84 	addi	r3,r22,-2
100040fc:	01800e44 	movi	r6,57
10004100:	d9c00717 	ldw	r7,28(sp)
10004104:	00000406 	br	10004118 <_dtoa_r+0xbf0>
10004108:	38813c26 	beq	r7,r2,100045fc <_dtoa_r+0x10d4>
1000410c:	19000003 	ldbu	r4,0(r3)
10004110:	102d883a 	mov	r22,r2
10004114:	18ffffc4 	addi	r3,r3,-1
10004118:	21403fcc 	andi	r5,r4,255
1000411c:	2940201c 	xori	r5,r5,128
10004120:	297fe004 	addi	r5,r5,-128
10004124:	b0bfffc4 	addi	r2,r22,-1
10004128:	29bff726 	beq	r5,r6,10004108 <__alt_data_end+0xf8004108>
1000412c:	21000044 	addi	r4,r4,1
10004130:	11000005 	stb	r4,0(r2)
10004134:	8009883a 	mov	r4,r16
10004138:	a00b883a 	mov	r5,r20
1000413c:	00064e40 	call	100064e4 <_Bfree>
10004140:	883ea526 	beq	r17,zero,10003bd8 <__alt_data_end+0xf8003bd8>
10004144:	a8000426 	beq	r21,zero,10004158 <_dtoa_r+0xc30>
10004148:	ac400326 	beq	r21,r17,10004158 <_dtoa_r+0xc30>
1000414c:	8009883a 	mov	r4,r16
10004150:	a80b883a 	mov	r5,r21
10004154:	00064e40 	call	100064e4 <_Bfree>
10004158:	8009883a 	mov	r4,r16
1000415c:	880b883a 	mov	r5,r17
10004160:	00064e40 	call	100064e4 <_Bfree>
10004164:	003e9c06 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10004168:	01c00044 	movi	r7,1
1000416c:	d9c00e15 	stw	r7,56(sp)
10004170:	003d9906 	br	100037d8 <__alt_data_end+0xf80037d8>
10004174:	d8c00817 	ldw	r3,32(sp)
10004178:	d9000617 	ldw	r4,24(sp)
1000417c:	d8000b15 	stw	zero,44(sp)
10004180:	1907c83a 	sub	r3,r3,r4
10004184:	010dc83a 	sub	r6,zero,r4
10004188:	d8c00815 	stw	r3,32(sp)
1000418c:	d9800a15 	stw	r6,40(sp)
10004190:	003d9a06 	br	100037fc <__alt_data_end+0xf80037fc>
10004194:	056bc83a 	sub	r21,zero,r21
10004198:	dd400815 	stw	r21,32(sp)
1000419c:	002b883a 	mov	r21,zero
100041a0:	003d9106 	br	100037e8 <__alt_data_end+0xf80037e8>
100041a4:	d9000617 	ldw	r4,24(sp)
100041a8:	000d5b40 	call	1000d5b4 <__floatsidf>
100041ac:	1009883a 	mov	r4,r2
100041b0:	180b883a 	mov	r5,r3
100041b4:	980d883a 	mov	r6,r19
100041b8:	880f883a 	mov	r7,r17
100041bc:	000c2640 	call	1000c264 <__eqdf2>
100041c0:	103d7426 	beq	r2,zero,10003794 <__alt_data_end+0xf8003794>
100041c4:	d8c00617 	ldw	r3,24(sp)
100041c8:	18ffffc4 	addi	r3,r3,-1
100041cc:	d8c00615 	stw	r3,24(sp)
100041d0:	003d7006 	br	10003794 <__alt_data_end+0xf8003794>
100041d4:	dd000a17 	ldw	r20,40(sp)
100041d8:	dcc00817 	ldw	r19,32(sp)
100041dc:	0023883a 	mov	r17,zero
100041e0:	003f5206 	br	10003f2c <__alt_data_end+0xf8003f2c>
100041e4:	00800704 	movi	r2,28
100041e8:	d9000817 	ldw	r4,32(sp)
100041ec:	98a7883a 	add	r19,r19,r2
100041f0:	a8ab883a 	add	r21,r21,r2
100041f4:	2089883a 	add	r4,r4,r2
100041f8:	d9000815 	stw	r4,32(sp)
100041fc:	003f8a06 	br	10004028 <__alt_data_end+0xf8004028>
10004200:	d9c00317 	ldw	r7,12(sp)
10004204:	013efb84 	movi	r4,-1042
10004208:	2509c83a 	sub	r4,r4,r20
1000420c:	3908983a 	sll	r4,r7,r4
10004210:	003d2c06 	br	100036c4 <__alt_data_end+0xf80036c4>
10004214:	d8000e15 	stw	zero,56(sp)
10004218:	003d6f06 	br	100037d8 <__alt_data_end+0xf80037d8>
1000421c:	04c0050e 	bge	zero,r19,10004234 <_dtoa_r+0xd0c>
10004220:	880b883a 	mov	r5,r17
10004224:	8009883a 	mov	r4,r16
10004228:	980d883a 	mov	r6,r19
1000422c:	0006c5c0 	call	10006c5c <__lshift>
10004230:	1023883a 	mov	r17,r2
10004234:	9001681e 	bne	r18,zero,100047d8 <_dtoa_r+0x12b0>
10004238:	8827883a 	mov	r19,r17
1000423c:	d8c00717 	ldw	r3,28(sp)
10004240:	d9000917 	ldw	r4,36(sp)
10004244:	1dffffc4 	addi	r23,r3,-1
10004248:	1825883a 	mov	r18,r3
1000424c:	d8c00317 	ldw	r3,12(sp)
10004250:	b92f883a 	add	r23,r23,r4
10004254:	ddc00515 	stw	r23,20(sp)
10004258:	18c0004c 	andi	r3,r3,1
1000425c:	d8c00315 	stw	r3,12(sp)
10004260:	e009883a 	mov	r4,fp
10004264:	a00b883a 	mov	r5,r20
10004268:	00033000 	call	10003300 <quorem>
1000426c:	e009883a 	mov	r4,fp
10004270:	880b883a 	mov	r5,r17
10004274:	102d883a 	mov	r22,r2
10004278:	0006dac0 	call	10006dac <__mcmp>
1000427c:	8009883a 	mov	r4,r16
10004280:	a00b883a 	mov	r5,r20
10004284:	980d883a 	mov	r6,r19
10004288:	102b883a 	mov	r21,r2
1000428c:	0006e0c0 	call	10006e0c <__mdiff>
10004290:	1007883a 	mov	r3,r2
10004294:	10800317 	ldw	r2,12(r2)
10004298:	b5c00c04 	addi	r23,r22,48
1000429c:	10009b1e 	bne	r2,zero,1000450c <_dtoa_r+0xfe4>
100042a0:	180b883a 	mov	r5,r3
100042a4:	e009883a 	mov	r4,fp
100042a8:	d8c01515 	stw	r3,84(sp)
100042ac:	0006dac0 	call	10006dac <__mcmp>
100042b0:	d8c01517 	ldw	r3,84(sp)
100042b4:	8009883a 	mov	r4,r16
100042b8:	d8801515 	stw	r2,84(sp)
100042bc:	180b883a 	mov	r5,r3
100042c0:	00064e40 	call	100064e4 <_Bfree>
100042c4:	d8801517 	ldw	r2,84(sp)
100042c8:	1000041e 	bne	r2,zero,100042dc <_dtoa_r+0xdb4>
100042cc:	d9000417 	ldw	r4,16(sp)
100042d0:	2000021e 	bne	r4,zero,100042dc <_dtoa_r+0xdb4>
100042d4:	d8c00317 	ldw	r3,12(sp)
100042d8:	18007926 	beq	r3,zero,100044c0 <_dtoa_r+0xf98>
100042dc:	a8006616 	blt	r21,zero,10004478 <_dtoa_r+0xf50>
100042e0:	a800041e 	bne	r21,zero,100042f4 <_dtoa_r+0xdcc>
100042e4:	d9000417 	ldw	r4,16(sp)
100042e8:	2000021e 	bne	r4,zero,100042f4 <_dtoa_r+0xdcc>
100042ec:	d8c00317 	ldw	r3,12(sp)
100042f0:	18006126 	beq	r3,zero,10004478 <_dtoa_r+0xf50>
100042f4:	00814916 	blt	zero,r2,1000481c <_dtoa_r+0x12f4>
100042f8:	d8c00517 	ldw	r3,20(sp)
100042fc:	95400044 	addi	r21,r18,1
10004300:	95c00005 	stb	r23,0(r18)
10004304:	a82d883a 	mov	r22,r21
10004308:	90c14c26 	beq	r18,r3,1000483c <_dtoa_r+0x1314>
1000430c:	e00b883a 	mov	r5,fp
10004310:	8009883a 	mov	r4,r16
10004314:	01800284 	movi	r6,10
10004318:	000f883a 	mov	r7,zero
1000431c:	000650c0 	call	1000650c <__multadd>
10004320:	1039883a 	mov	fp,r2
10004324:	8cc07026 	beq	r17,r19,100044e8 <_dtoa_r+0xfc0>
10004328:	880b883a 	mov	r5,r17
1000432c:	01800284 	movi	r6,10
10004330:	000f883a 	mov	r7,zero
10004334:	8009883a 	mov	r4,r16
10004338:	000650c0 	call	1000650c <__multadd>
1000433c:	980b883a 	mov	r5,r19
10004340:	8009883a 	mov	r4,r16
10004344:	01800284 	movi	r6,10
10004348:	000f883a 	mov	r7,zero
1000434c:	1023883a 	mov	r17,r2
10004350:	000650c0 	call	1000650c <__multadd>
10004354:	1027883a 	mov	r19,r2
10004358:	a825883a 	mov	r18,r21
1000435c:	003fc006 	br	10004260 <__alt_data_end+0xf8004260>
10004360:	d9800317 	ldw	r6,12(sp)
10004364:	303f1e1e 	bne	r6,zero,10003fe0 <__alt_data_end+0xf8003fe0>
10004368:	00c00434 	movhi	r3,16
1000436c:	18ffffc4 	addi	r3,r3,-1
10004370:	90c6703a 	and	r3,r18,r3
10004374:	183f1a1e 	bne	r3,zero,10003fe0 <__alt_data_end+0xf8003fe0>
10004378:	949ffc2c 	andhi	r18,r18,32752
1000437c:	903f1826 	beq	r18,zero,10003fe0 <__alt_data_end+0xf8003fe0>
10004380:	d9c00817 	ldw	r7,32(sp)
10004384:	a8ab883a 	add	r21,r21,r2
10004388:	1025883a 	mov	r18,r2
1000438c:	388f883a 	add	r7,r7,r2
10004390:	d9c00815 	stw	r7,32(sp)
10004394:	003f1306 	br	10003fe4 <__alt_data_end+0xf8003fe4>
10004398:	9805883a 	mov	r2,r19
1000439c:	003ee706 	br	10003f3c <__alt_data_end+0xf8003f3c>
100043a0:	01800044 	movi	r6,1
100043a4:	d9800c15 	stw	r6,48(sp)
100043a8:	d8802117 	ldw	r2,132(sp)
100043ac:	0080da0e 	bge	zero,r2,10004718 <_dtoa_r+0x11f0>
100043b0:	100d883a 	mov	r6,r2
100043b4:	d8800d15 	stw	r2,52(sp)
100043b8:	d8800915 	stw	r2,36(sp)
100043bc:	003d2a06 	br	10003868 <__alt_data_end+0xf8003868>
100043c0:	d8800917 	ldw	r2,36(sp)
100043c4:	00be4016 	blt	zero,r2,10003cc8 <__alt_data_end+0xf8003cc8>
100043c8:	1000b81e 	bne	r2,zero,100046ac <_dtoa_r+0x1184>
100043cc:	8809883a 	mov	r4,r17
100043d0:	980b883a 	mov	r5,r19
100043d4:	000d883a 	mov	r6,zero
100043d8:	01d00534 	movhi	r7,16404
100043dc:	000c4ac0 	call	1000c4ac <__muldf3>
100043e0:	d9800317 	ldw	r6,12(sp)
100043e4:	1009883a 	mov	r4,r2
100043e8:	180b883a 	mov	r5,r3
100043ec:	900f883a 	mov	r7,r18
100043f0:	000c2e80 	call	1000c2e8 <__gedf2>
100043f4:	0029883a 	mov	r20,zero
100043f8:	0023883a 	mov	r17,zero
100043fc:	10007716 	blt	r2,zero,100045dc <_dtoa_r+0x10b4>
10004400:	d9002117 	ldw	r4,132(sp)
10004404:	dd800717 	ldw	r22,28(sp)
10004408:	0108303a 	nor	r4,zero,r4
1000440c:	d9000615 	stw	r4,24(sp)
10004410:	8009883a 	mov	r4,r16
10004414:	a00b883a 	mov	r5,r20
10004418:	00064e40 	call	100064e4 <_Bfree>
1000441c:	883f4e1e 	bne	r17,zero,10004158 <__alt_data_end+0xf8004158>
10004420:	003ded06 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10004424:	e00b883a 	mov	r5,fp
10004428:	8009883a 	mov	r4,r16
1000442c:	0006b140 	call	10006b14 <__pow5mult>
10004430:	1039883a 	mov	fp,r2
10004434:	003edc06 	br	10003fa8 <__alt_data_end+0xf8003fa8>
10004438:	1000021e 	bne	r2,zero,10004444 <_dtoa_r+0xf1c>
1000443c:	ba40004c 	andi	r9,r23,1
10004440:	483f2c1e 	bne	r9,zero,100040f4 <__alt_data_end+0xf80040f4>
10004444:	01000c04 	movi	r4,48
10004448:	00000106 	br	10004450 <_dtoa_r+0xf28>
1000444c:	102d883a 	mov	r22,r2
10004450:	b0bfffc4 	addi	r2,r22,-1
10004454:	10c00007 	ldb	r3,0(r2)
10004458:	193ffc26 	beq	r3,r4,1000444c <__alt_data_end+0xf800444c>
1000445c:	003f3506 	br	10004134 <__alt_data_end+0xf8004134>
10004460:	d9c00f17 	ldw	r7,60(sp)
10004464:	38015a26 	beq	r7,zero,100049d0 <_dtoa_r+0x14a8>
10004468:	10810cc4 	addi	r2,r2,1075
1000446c:	dd000a17 	ldw	r20,40(sp)
10004470:	dcc00817 	ldw	r19,32(sp)
10004474:	003ea506 	br	10003f0c <__alt_data_end+0xf8003f0c>
10004478:	00800c0e 	bge	zero,r2,100044ac <_dtoa_r+0xf84>
1000447c:	e00b883a 	mov	r5,fp
10004480:	8009883a 	mov	r4,r16
10004484:	01800044 	movi	r6,1
10004488:	0006c5c0 	call	10006c5c <__lshift>
1000448c:	1009883a 	mov	r4,r2
10004490:	a00b883a 	mov	r5,r20
10004494:	1039883a 	mov	fp,r2
10004498:	0006dac0 	call	10006dac <__mcmp>
1000449c:	0081930e 	bge	zero,r2,10004aec <_dtoa_r+0x15c4>
100044a0:	00800e44 	movi	r2,57
100044a4:	b8800a26 	beq	r23,r2,100044d0 <_dtoa_r+0xfa8>
100044a8:	b5c00c44 	addi	r23,r22,49
100044ac:	882b883a 	mov	r21,r17
100044b0:	95800044 	addi	r22,r18,1
100044b4:	95c00005 	stb	r23,0(r18)
100044b8:	9823883a 	mov	r17,r19
100044bc:	003f1d06 	br	10004134 <__alt_data_end+0xf8004134>
100044c0:	00800e44 	movi	r2,57
100044c4:	b8800226 	beq	r23,r2,100044d0 <_dtoa_r+0xfa8>
100044c8:	057ff716 	blt	zero,r21,100044a8 <__alt_data_end+0xf80044a8>
100044cc:	003ff706 	br	100044ac <__alt_data_end+0xf80044ac>
100044d0:	01000e44 	movi	r4,57
100044d4:	882b883a 	mov	r21,r17
100044d8:	95800044 	addi	r22,r18,1
100044dc:	91000005 	stb	r4,0(r18)
100044e0:	9823883a 	mov	r17,r19
100044e4:	003f0406 	br	100040f8 <__alt_data_end+0xf80040f8>
100044e8:	880b883a 	mov	r5,r17
100044ec:	8009883a 	mov	r4,r16
100044f0:	01800284 	movi	r6,10
100044f4:	000f883a 	mov	r7,zero
100044f8:	000650c0 	call	1000650c <__multadd>
100044fc:	1023883a 	mov	r17,r2
10004500:	1027883a 	mov	r19,r2
10004504:	a825883a 	mov	r18,r21
10004508:	003f5506 	br	10004260 <__alt_data_end+0xf8004260>
1000450c:	8009883a 	mov	r4,r16
10004510:	180b883a 	mov	r5,r3
10004514:	00064e40 	call	100064e4 <_Bfree>
10004518:	00800044 	movi	r2,1
1000451c:	003f6f06 	br	100042dc <__alt_data_end+0xf80042dc>
10004520:	e009883a 	mov	r4,fp
10004524:	a00b883a 	mov	r5,r20
10004528:	0006dac0 	call	10006dac <__mcmp>
1000452c:	103ecc0e 	bge	r2,zero,10004060 <__alt_data_end+0xf8004060>
10004530:	e00b883a 	mov	r5,fp
10004534:	8009883a 	mov	r4,r16
10004538:	01800284 	movi	r6,10
1000453c:	000f883a 	mov	r7,zero
10004540:	000650c0 	call	1000650c <__multadd>
10004544:	1039883a 	mov	fp,r2
10004548:	d8800617 	ldw	r2,24(sp)
1000454c:	d8c00c17 	ldw	r3,48(sp)
10004550:	10bfffc4 	addi	r2,r2,-1
10004554:	d8800615 	stw	r2,24(sp)
10004558:	1801681e 	bne	r3,zero,10004afc <_dtoa_r+0x15d4>
1000455c:	d9800d17 	ldw	r6,52(sp)
10004560:	d9800915 	stw	r6,36(sp)
10004564:	003ebe06 	br	10004060 <__alt_data_end+0xf8004060>
10004568:	a0800417 	ldw	r2,16(r20)
1000456c:	10800104 	addi	r2,r2,4
10004570:	1085883a 	add	r2,r2,r2
10004574:	1085883a 	add	r2,r2,r2
10004578:	a085883a 	add	r2,r20,r2
1000457c:	11000017 	ldw	r4,0(r2)
10004580:	00067540 	call	10006754 <__hi0bits>
10004584:	00c00804 	movi	r3,32
10004588:	1885c83a 	sub	r2,r3,r2
1000458c:	003e9806 	br	10003ff0 <__alt_data_end+0xf8003ff0>
10004590:	d8800717 	ldw	r2,28(sp)
10004594:	003c1306 	br	100035e4 <__alt_data_end+0xf80035e4>
10004598:	00800084 	movi	r2,2
1000459c:	18bdb11e 	bne	r3,r2,10003c64 <__alt_data_end+0xf8003c64>
100045a0:	d8000c15 	stw	zero,48(sp)
100045a4:	003f8006 	br	100043a8 <__alt_data_end+0xf80043a8>
100045a8:	d8c00417 	ldw	r3,16(sp)
100045ac:	00800084 	movi	r2,2
100045b0:	10fead0e 	bge	r2,r3,10004068 <__alt_data_end+0xf8004068>
100045b4:	383f921e 	bne	r7,zero,10004400 <__alt_data_end+0xf8004400>
100045b8:	a00b883a 	mov	r5,r20
100045bc:	8009883a 	mov	r4,r16
100045c0:	01800144 	movi	r6,5
100045c4:	000650c0 	call	1000650c <__multadd>
100045c8:	e009883a 	mov	r4,fp
100045cc:	100b883a 	mov	r5,r2
100045d0:	1029883a 	mov	r20,r2
100045d4:	0006dac0 	call	10006dac <__mcmp>
100045d8:	00bf890e 	bge	zero,r2,10004400 <__alt_data_end+0xf8004400>
100045dc:	d9c00617 	ldw	r7,24(sp)
100045e0:	d9800717 	ldw	r6,28(sp)
100045e4:	00800c44 	movi	r2,49
100045e8:	39c00044 	addi	r7,r7,1
100045ec:	35800044 	addi	r22,r6,1
100045f0:	30800005 	stb	r2,0(r6)
100045f4:	d9c00615 	stw	r7,24(sp)
100045f8:	003f8506 	br	10004410 <__alt_data_end+0xf8004410>
100045fc:	d9800617 	ldw	r6,24(sp)
10004600:	d9c00717 	ldw	r7,28(sp)
10004604:	00800c44 	movi	r2,49
10004608:	31800044 	addi	r6,r6,1
1000460c:	d9800615 	stw	r6,24(sp)
10004610:	38800005 	stb	r2,0(r7)
10004614:	003ec706 	br	10004134 <__alt_data_end+0xf8004134>
10004618:	df000417 	ldw	fp,16(sp)
1000461c:	dc000317 	ldw	r16,12(sp)
10004620:	003d6d06 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10004624:	8809883a 	mov	r4,r17
10004628:	000d5b40 	call	1000d5b4 <__floatsidf>
1000462c:	9809883a 	mov	r4,r19
10004630:	a00b883a 	mov	r5,r20
10004634:	100d883a 	mov	r6,r2
10004638:	180f883a 	mov	r7,r3
1000463c:	000c4ac0 	call	1000c4ac <__muldf3>
10004640:	1009883a 	mov	r4,r2
10004644:	180b883a 	mov	r5,r3
10004648:	000d883a 	mov	r6,zero
1000464c:	01d00734 	movhi	r7,16412
10004650:	000b04c0 	call	1000b04c <__adddf3>
10004654:	05bf3034 	movhi	r22,64704
10004658:	1023883a 	mov	r17,r2
1000465c:	1daf883a 	add	r23,r3,r22
10004660:	9809883a 	mov	r4,r19
10004664:	a00b883a 	mov	r5,r20
10004668:	000d883a 	mov	r6,zero
1000466c:	01d00534 	movhi	r7,16404
10004670:	000ccac0 	call	1000ccac <__subdf3>
10004674:	1009883a 	mov	r4,r2
10004678:	180b883a 	mov	r5,r3
1000467c:	880d883a 	mov	r6,r17
10004680:	b80f883a 	mov	r7,r23
10004684:	1027883a 	mov	r19,r2
10004688:	1829883a 	mov	r20,r3
1000468c:	000c2e80 	call	1000c2e8 <__gedf2>
10004690:	00806d16 	blt	zero,r2,10004848 <_dtoa_r+0x1320>
10004694:	b9e0003c 	xorhi	r7,r23,32768
10004698:	9809883a 	mov	r4,r19
1000469c:	a00b883a 	mov	r5,r20
100046a0:	880d883a 	mov	r6,r17
100046a4:	000c3c00 	call	1000c3c0 <__ledf2>
100046a8:	103d7a0e 	bge	r2,zero,10003c94 <__alt_data_end+0xf8003c94>
100046ac:	0029883a 	mov	r20,zero
100046b0:	0023883a 	mov	r17,zero
100046b4:	003f5206 	br	10004400 <__alt_data_end+0xf8004400>
100046b8:	d9800a17 	ldw	r6,40(sp)
100046bc:	e00b883a 	mov	r5,fp
100046c0:	8009883a 	mov	r4,r16
100046c4:	0006b140 	call	10006b14 <__pow5mult>
100046c8:	1039883a 	mov	fp,r2
100046cc:	003e3606 	br	10003fa8 <__alt_data_end+0xf8003fa8>
100046d0:	d8000c15 	stw	zero,48(sp)
100046d4:	003c5c06 	br	10003848 <__alt_data_end+0xf8003848>
100046d8:	d9000a17 	ldw	r4,40(sp)
100046dc:	d9800b17 	ldw	r6,44(sp)
100046e0:	dd000a15 	stw	r20,40(sp)
100046e4:	a105c83a 	sub	r2,r20,r4
100046e8:	308d883a 	add	r6,r6,r2
100046ec:	d9800b15 	stw	r6,44(sp)
100046f0:	0029883a 	mov	r20,zero
100046f4:	003e0106 	br	10003efc <__alt_data_end+0xf8003efc>
100046f8:	dcc00317 	ldw	r19,12(sp)
100046fc:	9029883a 	mov	r20,r18
10004700:	04400084 	movi	r17,2
10004704:	003c8606 	br	10003920 <__alt_data_end+0xf8003920>
10004708:	3023883a 	mov	r17,r6
1000470c:	80001115 	stw	zero,68(r16)
10004710:	000b883a 	mov	r5,zero
10004714:	003c6006 	br	10003898 <__alt_data_end+0xf8003898>
10004718:	04400044 	movi	r17,1
1000471c:	dc400d15 	stw	r17,52(sp)
10004720:	dc400915 	stw	r17,36(sp)
10004724:	dc402115 	stw	r17,132(sp)
10004728:	003ff806 	br	1000470c <__alt_data_end+0xf800470c>
1000472c:	d8800617 	ldw	r2,24(sp)
10004730:	00adc83a 	sub	r22,zero,r2
10004734:	b000ac26 	beq	r22,zero,100049e8 <_dtoa_r+0x14c0>
10004738:	b08003cc 	andi	r2,r22,15
1000473c:	100490fa 	slli	r2,r2,3
10004740:	00c40074 	movhi	r3,4097
10004744:	18ffd804 	addi	r3,r3,-160
10004748:	d9000317 	ldw	r4,12(sp)
1000474c:	1885883a 	add	r2,r3,r2
10004750:	11800017 	ldw	r6,0(r2)
10004754:	11c00117 	ldw	r7,4(r2)
10004758:	b02dd13a 	srai	r22,r22,4
1000475c:	900b883a 	mov	r5,r18
10004760:	000c4ac0 	call	1000c4ac <__muldf3>
10004764:	1027883a 	mov	r19,r2
10004768:	1829883a 	mov	r20,r3
1000476c:	b000ec26 	beq	r22,zero,10004b20 <_dtoa_r+0x15f8>
10004770:	05c40074 	movhi	r23,4097
10004774:	bdffce04 	addi	r23,r23,-200
10004778:	04400084 	movi	r17,2
1000477c:	b180004c 	andi	r6,r22,1
10004780:	1009883a 	mov	r4,r2
10004784:	b02dd07a 	srai	r22,r22,1
10004788:	180b883a 	mov	r5,r3
1000478c:	30000426 	beq	r6,zero,100047a0 <_dtoa_r+0x1278>
10004790:	b9800017 	ldw	r6,0(r23)
10004794:	b9c00117 	ldw	r7,4(r23)
10004798:	8c400044 	addi	r17,r17,1
1000479c:	000c4ac0 	call	1000c4ac <__muldf3>
100047a0:	bdc00204 	addi	r23,r23,8
100047a4:	b03ff51e 	bne	r22,zero,1000477c <__alt_data_end+0xf800477c>
100047a8:	1027883a 	mov	r19,r2
100047ac:	1829883a 	mov	r20,r3
100047b0:	003c7406 	br	10003984 <__alt_data_end+0xf8003984>
100047b4:	d9800617 	ldw	r6,24(sp)
100047b8:	d9c00717 	ldw	r7,28(sp)
100047bc:	00c00c04 	movi	r3,48
100047c0:	31800044 	addi	r6,r6,1
100047c4:	38c00005 	stb	r3,0(r7)
100047c8:	02400c44 	movi	r9,49
100047cc:	d9800615 	stw	r6,24(sp)
100047d0:	12400005 	stb	r9,0(r2)
100047d4:	003d0006 	br	10003bd8 <__alt_data_end+0xf8003bd8>
100047d8:	89400117 	ldw	r5,4(r17)
100047dc:	8009883a 	mov	r4,r16
100047e0:	000643c0 	call	1000643c <_Balloc>
100047e4:	89800417 	ldw	r6,16(r17)
100047e8:	11000304 	addi	r4,r2,12
100047ec:	89400304 	addi	r5,r17,12
100047f0:	31800084 	addi	r6,r6,2
100047f4:	318d883a 	add	r6,r6,r6
100047f8:	318d883a 	add	r6,r6,r6
100047fc:	1025883a 	mov	r18,r2
10004800:	000621c0 	call	1000621c <memcpy>
10004804:	8009883a 	mov	r4,r16
10004808:	900b883a 	mov	r5,r18
1000480c:	01800044 	movi	r6,1
10004810:	0006c5c0 	call	10006c5c <__lshift>
10004814:	1027883a 	mov	r19,r2
10004818:	003e8806 	br	1000423c <__alt_data_end+0xf800423c>
1000481c:	00800e44 	movi	r2,57
10004820:	b8bf2b26 	beq	r23,r2,100044d0 <__alt_data_end+0xf80044d0>
10004824:	ba400044 	addi	r9,r23,1
10004828:	882b883a 	mov	r21,r17
1000482c:	95800044 	addi	r22,r18,1
10004830:	92400005 	stb	r9,0(r18)
10004834:	9823883a 	mov	r17,r19
10004838:	003e3e06 	br	10004134 <__alt_data_end+0xf8004134>
1000483c:	882b883a 	mov	r21,r17
10004840:	9823883a 	mov	r17,r19
10004844:	003e2206 	br	100040d0 <__alt_data_end+0xf80040d0>
10004848:	0029883a 	mov	r20,zero
1000484c:	0023883a 	mov	r17,zero
10004850:	003f6206 	br	100045dc <__alt_data_end+0xf80045dc>
10004854:	59bfffc4 	addi	r6,r11,-1
10004858:	300490fa 	slli	r2,r6,3
1000485c:	00c40074 	movhi	r3,4097
10004860:	18ffd804 	addi	r3,r3,-160
10004864:	b80f883a 	mov	r7,r23
10004868:	1885883a 	add	r2,r3,r2
1000486c:	11000017 	ldw	r4,0(r2)
10004870:	11400117 	ldw	r5,4(r2)
10004874:	d8800717 	ldw	r2,28(sp)
10004878:	d9801015 	stw	r6,64(sp)
1000487c:	880d883a 	mov	r6,r17
10004880:	dac01615 	stw	r11,88(sp)
10004884:	15800044 	addi	r22,r2,1
10004888:	000c4ac0 	call	1000c4ac <__muldf3>
1000488c:	a00b883a 	mov	r5,r20
10004890:	9809883a 	mov	r4,r19
10004894:	d8c01215 	stw	r3,72(sp)
10004898:	d8801115 	stw	r2,68(sp)
1000489c:	000d5340 	call	1000d534 <__fixdfsi>
100048a0:	1009883a 	mov	r4,r2
100048a4:	1023883a 	mov	r17,r2
100048a8:	000d5b40 	call	1000d5b4 <__floatsidf>
100048ac:	9809883a 	mov	r4,r19
100048b0:	a00b883a 	mov	r5,r20
100048b4:	100d883a 	mov	r6,r2
100048b8:	180f883a 	mov	r7,r3
100048bc:	000ccac0 	call	1000ccac <__subdf3>
100048c0:	1815883a 	mov	r10,r3
100048c4:	d8c00717 	ldw	r3,28(sp)
100048c8:	8c400c04 	addi	r17,r17,48
100048cc:	102f883a 	mov	r23,r2
100048d0:	1c400005 	stb	r17,0(r3)
100048d4:	dac01617 	ldw	r11,88(sp)
100048d8:	00800044 	movi	r2,1
100048dc:	58802426 	beq	r11,r2,10004970 <_dtoa_r+0x1448>
100048e0:	d9800717 	ldw	r6,28(sp)
100048e4:	dc001415 	stw	r16,80(sp)
100048e8:	b805883a 	mov	r2,r23
100048ec:	32d7883a 	add	r11,r6,r11
100048f0:	b027883a 	mov	r19,r22
100048f4:	5821883a 	mov	r16,r11
100048f8:	5007883a 	mov	r3,r10
100048fc:	902f883a 	mov	r23,r18
10004900:	000d883a 	mov	r6,zero
10004904:	01d00934 	movhi	r7,16420
10004908:	1009883a 	mov	r4,r2
1000490c:	180b883a 	mov	r5,r3
10004910:	000c4ac0 	call	1000c4ac <__muldf3>
10004914:	180b883a 	mov	r5,r3
10004918:	1009883a 	mov	r4,r2
1000491c:	1829883a 	mov	r20,r3
10004920:	1025883a 	mov	r18,r2
10004924:	000d5340 	call	1000d534 <__fixdfsi>
10004928:	1009883a 	mov	r4,r2
1000492c:	1023883a 	mov	r17,r2
10004930:	000d5b40 	call	1000d5b4 <__floatsidf>
10004934:	9009883a 	mov	r4,r18
10004938:	a00b883a 	mov	r5,r20
1000493c:	100d883a 	mov	r6,r2
10004940:	180f883a 	mov	r7,r3
10004944:	8c400c04 	addi	r17,r17,48
10004948:	000ccac0 	call	1000ccac <__subdf3>
1000494c:	9cc00044 	addi	r19,r19,1
10004950:	9c7fffc5 	stb	r17,-1(r19)
10004954:	9c3fea1e 	bne	r19,r16,10004900 <__alt_data_end+0xf8004900>
10004958:	d9c01017 	ldw	r7,64(sp)
1000495c:	dc001417 	ldw	r16,80(sp)
10004960:	b825883a 	mov	r18,r23
10004964:	1815883a 	mov	r10,r3
10004968:	102f883a 	mov	r23,r2
1000496c:	b1ed883a 	add	r22,r22,r7
10004970:	d9001117 	ldw	r4,68(sp)
10004974:	d9401217 	ldw	r5,72(sp)
10004978:	000d883a 	mov	r6,zero
1000497c:	01cff834 	movhi	r7,16352
10004980:	da801615 	stw	r10,88(sp)
10004984:	000b04c0 	call	1000b04c <__adddf3>
10004988:	da801617 	ldw	r10,88(sp)
1000498c:	1009883a 	mov	r4,r2
10004990:	180b883a 	mov	r5,r3
10004994:	500f883a 	mov	r7,r10
10004998:	b80d883a 	mov	r6,r23
1000499c:	000c3c00 	call	1000c3c0 <__ledf2>
100049a0:	da801617 	ldw	r10,88(sp)
100049a4:	1000330e 	bge	r2,zero,10004a74 <_dtoa_r+0x154c>
100049a8:	d9001317 	ldw	r4,76(sp)
100049ac:	b53fffc3 	ldbu	r20,-1(r22)
100049b0:	d9000615 	stw	r4,24(sp)
100049b4:	003d3706 	br	10003e94 <__alt_data_end+0xf8003e94>
100049b8:	d8800817 	ldw	r2,32(sp)
100049bc:	11e7c83a 	sub	r19,r2,r7
100049c0:	0005883a 	mov	r2,zero
100049c4:	003d5106 	br	10003f0c <__alt_data_end+0xf8003f0c>
100049c8:	00800044 	movi	r2,1
100049cc:	003dbd06 	br	100040c4 <__alt_data_end+0xf80040c4>
100049d0:	d8800217 	ldw	r2,8(sp)
100049d4:	00c00d84 	movi	r3,54
100049d8:	dd000a17 	ldw	r20,40(sp)
100049dc:	1885c83a 	sub	r2,r3,r2
100049e0:	dcc00817 	ldw	r19,32(sp)
100049e4:	003d4906 	br	10003f0c <__alt_data_end+0xf8003f0c>
100049e8:	dcc00317 	ldw	r19,12(sp)
100049ec:	9029883a 	mov	r20,r18
100049f0:	04400084 	movi	r17,2
100049f4:	003be306 	br	10003984 <__alt_data_end+0xf8003984>
100049f8:	d9000917 	ldw	r4,36(sp)
100049fc:	203f0926 	beq	r4,zero,10004624 <__alt_data_end+0xf8004624>
10004a00:	d9800d17 	ldw	r6,52(sp)
10004a04:	01bca30e 	bge	zero,r6,10003c94 <__alt_data_end+0xf8003c94>
10004a08:	a00b883a 	mov	r5,r20
10004a0c:	9809883a 	mov	r4,r19
10004a10:	000d883a 	mov	r6,zero
10004a14:	01d00934 	movhi	r7,16420
10004a18:	000c4ac0 	call	1000c4ac <__muldf3>
10004a1c:	89000044 	addi	r4,r17,1
10004a20:	1027883a 	mov	r19,r2
10004a24:	1829883a 	mov	r20,r3
10004a28:	000d5b40 	call	1000d5b4 <__floatsidf>
10004a2c:	9809883a 	mov	r4,r19
10004a30:	a00b883a 	mov	r5,r20
10004a34:	100d883a 	mov	r6,r2
10004a38:	180f883a 	mov	r7,r3
10004a3c:	000c4ac0 	call	1000c4ac <__muldf3>
10004a40:	01d00734 	movhi	r7,16412
10004a44:	1009883a 	mov	r4,r2
10004a48:	180b883a 	mov	r5,r3
10004a4c:	000d883a 	mov	r6,zero
10004a50:	000b04c0 	call	1000b04c <__adddf3>
10004a54:	d9c00617 	ldw	r7,24(sp)
10004a58:	05bf3034 	movhi	r22,64704
10004a5c:	1023883a 	mov	r17,r2
10004a60:	39ffffc4 	addi	r7,r7,-1
10004a64:	d9c01315 	stw	r7,76(sp)
10004a68:	1daf883a 	add	r23,r3,r22
10004a6c:	dac00d17 	ldw	r11,52(sp)
10004a70:	003be006 	br	100039f4 <__alt_data_end+0xf80039f4>
10004a74:	d9801117 	ldw	r6,68(sp)
10004a78:	d9c01217 	ldw	r7,72(sp)
10004a7c:	0009883a 	mov	r4,zero
10004a80:	014ff834 	movhi	r5,16352
10004a84:	da801615 	stw	r10,88(sp)
10004a88:	000ccac0 	call	1000ccac <__subdf3>
10004a8c:	da801617 	ldw	r10,88(sp)
10004a90:	1009883a 	mov	r4,r2
10004a94:	180b883a 	mov	r5,r3
10004a98:	b80d883a 	mov	r6,r23
10004a9c:	500f883a 	mov	r7,r10
10004aa0:	000c2e80 	call	1000c2e8 <__gedf2>
10004aa4:	00bc7b0e 	bge	zero,r2,10003c94 <__alt_data_end+0xf8003c94>
10004aa8:	01000c04 	movi	r4,48
10004aac:	00000106 	br	10004ab4 <_dtoa_r+0x158c>
10004ab0:	102d883a 	mov	r22,r2
10004ab4:	b0bfffc4 	addi	r2,r22,-1
10004ab8:	10c00007 	ldb	r3,0(r2)
10004abc:	193ffc26 	beq	r3,r4,10004ab0 <__alt_data_end+0xf8004ab0>
10004ac0:	d9001317 	ldw	r4,76(sp)
10004ac4:	d9000615 	stw	r4,24(sp)
10004ac8:	003c4306 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10004acc:	d8c01317 	ldw	r3,76(sp)
10004ad0:	dc001117 	ldw	r16,68(sp)
10004ad4:	d8c00615 	stw	r3,24(sp)
10004ad8:	003cee06 	br	10003e94 <__alt_data_end+0xf8003e94>
10004adc:	dd401217 	ldw	r21,72(sp)
10004ae0:	dc001117 	ldw	r16,68(sp)
10004ae4:	dc801417 	ldw	r18,80(sp)
10004ae8:	003c6a06 	br	10003c94 <__alt_data_end+0xf8003c94>
10004aec:	103e6f1e 	bne	r2,zero,100044ac <__alt_data_end+0xf80044ac>
10004af0:	b880004c 	andi	r2,r23,1
10004af4:	103e6d26 	beq	r2,zero,100044ac <__alt_data_end+0xf80044ac>
10004af8:	003e6906 	br	100044a0 <__alt_data_end+0xf80044a0>
10004afc:	8009883a 	mov	r4,r16
10004b00:	880b883a 	mov	r5,r17
10004b04:	01800284 	movi	r6,10
10004b08:	000f883a 	mov	r7,zero
10004b0c:	000650c0 	call	1000650c <__multadd>
10004b10:	d9000d17 	ldw	r4,52(sp)
10004b14:	1023883a 	mov	r17,r2
10004b18:	d9000915 	stw	r4,36(sp)
10004b1c:	003d5006 	br	10004060 <__alt_data_end+0xf8004060>
10004b20:	04400084 	movi	r17,2
10004b24:	003b9706 	br	10003984 <__alt_data_end+0xf8003984>
10004b28:	d8801317 	ldw	r2,76(sp)
10004b2c:	d8800615 	stw	r2,24(sp)
10004b30:	003cd806 	br	10003e94 <__alt_data_end+0xf8003e94>
10004b34:	d8801317 	ldw	r2,76(sp)
10004b38:	d8800615 	stw	r2,24(sp)
10004b3c:	003c2606 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10004b40:	04c00044 	movi	r19,1
10004b44:	003b3506 	br	1000381c <__alt_data_end+0xf800381c>
10004b48:	3023883a 	mov	r17,r6
10004b4c:	000b883a 	mov	r5,zero
10004b50:	003b5106 	br	10003898 <__alt_data_end+0xf8003898>
10004b54:	20fd3426 	beq	r4,r3,10004028 <__alt_data_end+0xf8004028>
10004b58:	00c00f04 	movi	r3,60
10004b5c:	1885c83a 	sub	r2,r3,r2
10004b60:	003da106 	br	100041e8 <__alt_data_end+0xf80041e8>

10004b64 <_fflush_r>:
10004b64:	defffb04 	addi	sp,sp,-20
10004b68:	dcc00315 	stw	r19,12(sp)
10004b6c:	dc400115 	stw	r17,4(sp)
10004b70:	dfc00415 	stw	ra,16(sp)
10004b74:	dc800215 	stw	r18,8(sp)
10004b78:	dc000015 	stw	r16,0(sp)
10004b7c:	2027883a 	mov	r19,r4
10004b80:	2823883a 	mov	r17,r5
10004b84:	20000226 	beq	r4,zero,10004b90 <_fflush_r+0x2c>
10004b88:	20800e17 	ldw	r2,56(r4)
10004b8c:	10005826 	beq	r2,zero,10004cf0 <_fflush_r+0x18c>
10004b90:	8880030b 	ldhu	r2,12(r17)
10004b94:	10ffffcc 	andi	r3,r2,65535
10004b98:	18e0001c 	xori	r3,r3,32768
10004b9c:	18e00004 	addi	r3,r3,-32768
10004ba0:	18002b26 	beq	r3,zero,10004c50 <_fflush_r+0xec>
10004ba4:	10c0020c 	andi	r3,r2,8
10004ba8:	1800311e 	bne	r3,zero,10004c70 <_fflush_r+0x10c>
10004bac:	88c00117 	ldw	r3,4(r17)
10004bb0:	10820014 	ori	r2,r2,2048
10004bb4:	8880030d 	sth	r2,12(r17)
10004bb8:	00c05c0e 	bge	zero,r3,10004d2c <_fflush_r+0x1c8>
10004bbc:	88c00a17 	ldw	r3,40(r17)
10004bc0:	18002326 	beq	r3,zero,10004c50 <_fflush_r+0xec>
10004bc4:	9c000017 	ldw	r16,0(r19)
10004bc8:	1104000c 	andi	r4,r2,4096
10004bcc:	98000015 	stw	zero,0(r19)
10004bd0:	20004b26 	beq	r4,zero,10004d00 <_fflush_r+0x19c>
10004bd4:	89801417 	ldw	r6,80(r17)
10004bd8:	1080010c 	andi	r2,r2,4
10004bdc:	10000626 	beq	r2,zero,10004bf8 <_fflush_r+0x94>
10004be0:	89000117 	ldw	r4,4(r17)
10004be4:	88800c17 	ldw	r2,48(r17)
10004be8:	310dc83a 	sub	r6,r6,r4
10004bec:	10000226 	beq	r2,zero,10004bf8 <_fflush_r+0x94>
10004bf0:	88800f17 	ldw	r2,60(r17)
10004bf4:	308dc83a 	sub	r6,r6,r2
10004bf8:	89400717 	ldw	r5,28(r17)
10004bfc:	9809883a 	mov	r4,r19
10004c00:	000f883a 	mov	r7,zero
10004c04:	183ee83a 	callr	r3
10004c08:	00ffffc4 	movi	r3,-1
10004c0c:	10c04a26 	beq	r2,r3,10004d38 <_fflush_r+0x1d4>
10004c10:	88c0030b 	ldhu	r3,12(r17)
10004c14:	89000417 	ldw	r4,16(r17)
10004c18:	88000115 	stw	zero,4(r17)
10004c1c:	197dffcc 	andi	r5,r3,63487
10004c20:	8940030d 	sth	r5,12(r17)
10004c24:	89000015 	stw	r4,0(r17)
10004c28:	18c4000c 	andi	r3,r3,4096
10004c2c:	1800581e 	bne	r3,zero,10004d90 <_fflush_r+0x22c>
10004c30:	89400c17 	ldw	r5,48(r17)
10004c34:	9c000015 	stw	r16,0(r19)
10004c38:	28000526 	beq	r5,zero,10004c50 <_fflush_r+0xec>
10004c3c:	88801004 	addi	r2,r17,64
10004c40:	28800226 	beq	r5,r2,10004c4c <_fflush_r+0xe8>
10004c44:	9809883a 	mov	r4,r19
10004c48:	00052b80 	call	100052b8 <_free_r>
10004c4c:	88000c15 	stw	zero,48(r17)
10004c50:	0005883a 	mov	r2,zero
10004c54:	dfc00417 	ldw	ra,16(sp)
10004c58:	dcc00317 	ldw	r19,12(sp)
10004c5c:	dc800217 	ldw	r18,8(sp)
10004c60:	dc400117 	ldw	r17,4(sp)
10004c64:	dc000017 	ldw	r16,0(sp)
10004c68:	dec00504 	addi	sp,sp,20
10004c6c:	f800283a 	ret
10004c70:	8c800417 	ldw	r18,16(r17)
10004c74:	903ff626 	beq	r18,zero,10004c50 <__alt_data_end+0xf8004c50>
10004c78:	8c000017 	ldw	r16,0(r17)
10004c7c:	108000cc 	andi	r2,r2,3
10004c80:	8c800015 	stw	r18,0(r17)
10004c84:	84a1c83a 	sub	r16,r16,r18
10004c88:	10001b26 	beq	r2,zero,10004cf8 <_fflush_r+0x194>
10004c8c:	0005883a 	mov	r2,zero
10004c90:	88800215 	stw	r2,8(r17)
10004c94:	04000316 	blt	zero,r16,10004ca4 <_fflush_r+0x140>
10004c98:	003fed06 	br	10004c50 <__alt_data_end+0xf8004c50>
10004c9c:	90a5883a 	add	r18,r18,r2
10004ca0:	043feb0e 	bge	zero,r16,10004c50 <__alt_data_end+0xf8004c50>
10004ca4:	88800917 	ldw	r2,36(r17)
10004ca8:	89400717 	ldw	r5,28(r17)
10004cac:	800f883a 	mov	r7,r16
10004cb0:	900d883a 	mov	r6,r18
10004cb4:	9809883a 	mov	r4,r19
10004cb8:	103ee83a 	callr	r2
10004cbc:	80a1c83a 	sub	r16,r16,r2
10004cc0:	00bff616 	blt	zero,r2,10004c9c <__alt_data_end+0xf8004c9c>
10004cc4:	88c0030b 	ldhu	r3,12(r17)
10004cc8:	00bfffc4 	movi	r2,-1
10004ccc:	18c01014 	ori	r3,r3,64
10004cd0:	88c0030d 	sth	r3,12(r17)
10004cd4:	dfc00417 	ldw	ra,16(sp)
10004cd8:	dcc00317 	ldw	r19,12(sp)
10004cdc:	dc800217 	ldw	r18,8(sp)
10004ce0:	dc400117 	ldw	r17,4(sp)
10004ce4:	dc000017 	ldw	r16,0(sp)
10004ce8:	dec00504 	addi	sp,sp,20
10004cec:	f800283a 	ret
10004cf0:	0004e840 	call	10004e84 <__sinit>
10004cf4:	003fa606 	br	10004b90 <__alt_data_end+0xf8004b90>
10004cf8:	88800517 	ldw	r2,20(r17)
10004cfc:	003fe406 	br	10004c90 <__alt_data_end+0xf8004c90>
10004d00:	89400717 	ldw	r5,28(r17)
10004d04:	000d883a 	mov	r6,zero
10004d08:	9809883a 	mov	r4,r19
10004d0c:	01c00044 	movi	r7,1
10004d10:	183ee83a 	callr	r3
10004d14:	100d883a 	mov	r6,r2
10004d18:	00bfffc4 	movi	r2,-1
10004d1c:	30801326 	beq	r6,r2,10004d6c <_fflush_r+0x208>
10004d20:	8880030b 	ldhu	r2,12(r17)
10004d24:	88c00a17 	ldw	r3,40(r17)
10004d28:	003fab06 	br	10004bd8 <__alt_data_end+0xf8004bd8>
10004d2c:	88c00f17 	ldw	r3,60(r17)
10004d30:	00ffa216 	blt	zero,r3,10004bbc <__alt_data_end+0xf8004bbc>
10004d34:	003fc606 	br	10004c50 <__alt_data_end+0xf8004c50>
10004d38:	98c00017 	ldw	r3,0(r19)
10004d3c:	183fb426 	beq	r3,zero,10004c10 <__alt_data_end+0xf8004c10>
10004d40:	01000744 	movi	r4,29
10004d44:	19000226 	beq	r3,r4,10004d50 <_fflush_r+0x1ec>
10004d48:	01000584 	movi	r4,22
10004d4c:	1900121e 	bne	r3,r4,10004d98 <_fflush_r+0x234>
10004d50:	88c0030b 	ldhu	r3,12(r17)
10004d54:	88800417 	ldw	r2,16(r17)
10004d58:	88000115 	stw	zero,4(r17)
10004d5c:	18fdffcc 	andi	r3,r3,63487
10004d60:	88c0030d 	sth	r3,12(r17)
10004d64:	88800015 	stw	r2,0(r17)
10004d68:	003fb106 	br	10004c30 <__alt_data_end+0xf8004c30>
10004d6c:	98800017 	ldw	r2,0(r19)
10004d70:	103feb26 	beq	r2,zero,10004d20 <__alt_data_end+0xf8004d20>
10004d74:	00c00744 	movi	r3,29
10004d78:	10c00226 	beq	r2,r3,10004d84 <_fflush_r+0x220>
10004d7c:	00c00584 	movi	r3,22
10004d80:	10ffd01e 	bne	r2,r3,10004cc4 <__alt_data_end+0xf8004cc4>
10004d84:	9c000015 	stw	r16,0(r19)
10004d88:	0005883a 	mov	r2,zero
10004d8c:	003fb106 	br	10004c54 <__alt_data_end+0xf8004c54>
10004d90:	88801415 	stw	r2,80(r17)
10004d94:	003fa606 	br	10004c30 <__alt_data_end+0xf8004c30>
10004d98:	88c0030b 	ldhu	r3,12(r17)
10004d9c:	18c01014 	ori	r3,r3,64
10004da0:	88c0030d 	sth	r3,12(r17)
10004da4:	003fab06 	br	10004c54 <__alt_data_end+0xf8004c54>

10004da8 <fflush>:
10004da8:	200b883a 	mov	r5,r4
10004dac:	20000426 	beq	r4,zero,10004dc0 <fflush+0x18>
10004db0:	00840074 	movhi	r2,4097
10004db4:	10870d04 	addi	r2,r2,7220
10004db8:	11000017 	ldw	r4,0(r2)
10004dbc:	0004b641 	jmpi	10004b64 <_fflush_r>
10004dc0:	00840074 	movhi	r2,4097
10004dc4:	10870c04 	addi	r2,r2,7216
10004dc8:	11000017 	ldw	r4,0(r2)
10004dcc:	01440034 	movhi	r5,4096
10004dd0:	2952d904 	addi	r5,r5,19300
10004dd4:	00056301 	jmpi	10005630 <_fwalk_reent>

10004dd8 <__fp_lock>:
10004dd8:	0005883a 	mov	r2,zero
10004ddc:	f800283a 	ret

10004de0 <__fp_unlock>:
10004de0:	0005883a 	mov	r2,zero
10004de4:	f800283a 	ret

10004de8 <_cleanup_r>:
10004de8:	01440074 	movhi	r5,4097
10004dec:	2963fb04 	addi	r5,r5,-28692
10004df0:	00055881 	jmpi	10005588 <_fwalk>

10004df4 <__sfmoreglue>:
10004df4:	defffc04 	addi	sp,sp,-16
10004df8:	dc800215 	stw	r18,8(sp)
10004dfc:	2825883a 	mov	r18,r5
10004e00:	dc000015 	stw	r16,0(sp)
10004e04:	01401a04 	movi	r5,104
10004e08:	2021883a 	mov	r16,r4
10004e0c:	9009883a 	mov	r4,r18
10004e10:	dfc00315 	stw	ra,12(sp)
10004e14:	dc400115 	stw	r17,4(sp)
10004e18:	000b0240 	call	1000b024 <__mulsi3>
10004e1c:	8009883a 	mov	r4,r16
10004e20:	11400304 	addi	r5,r2,12
10004e24:	1023883a 	mov	r17,r2
10004e28:	00059700 	call	10005970 <_malloc_r>
10004e2c:	1021883a 	mov	r16,r2
10004e30:	10000726 	beq	r2,zero,10004e50 <__sfmoreglue+0x5c>
10004e34:	11000304 	addi	r4,r2,12
10004e38:	10000015 	stw	zero,0(r2)
10004e3c:	14800115 	stw	r18,4(r2)
10004e40:	11000215 	stw	r4,8(r2)
10004e44:	000b883a 	mov	r5,zero
10004e48:	880d883a 	mov	r6,r17
10004e4c:	00063280 	call	10006328 <memset>
10004e50:	8005883a 	mov	r2,r16
10004e54:	dfc00317 	ldw	ra,12(sp)
10004e58:	dc800217 	ldw	r18,8(sp)
10004e5c:	dc400117 	ldw	r17,4(sp)
10004e60:	dc000017 	ldw	r16,0(sp)
10004e64:	dec00404 	addi	sp,sp,16
10004e68:	f800283a 	ret

10004e6c <_cleanup>:
10004e6c:	00840074 	movhi	r2,4097
10004e70:	10870c04 	addi	r2,r2,7216
10004e74:	11000017 	ldw	r4,0(r2)
10004e78:	01440074 	movhi	r5,4097
10004e7c:	2963fb04 	addi	r5,r5,-28692
10004e80:	00055881 	jmpi	10005588 <_fwalk>

10004e84 <__sinit>:
10004e84:	20800e17 	ldw	r2,56(r4)
10004e88:	defff704 	addi	sp,sp,-36
10004e8c:	dc800215 	stw	r18,8(sp)
10004e90:	dfc00815 	stw	ra,32(sp)
10004e94:	ddc00715 	stw	r23,28(sp)
10004e98:	dd800615 	stw	r22,24(sp)
10004e9c:	dd400515 	stw	r21,20(sp)
10004ea0:	dd000415 	stw	r20,16(sp)
10004ea4:	dcc00315 	stw	r19,12(sp)
10004ea8:	dc400115 	stw	r17,4(sp)
10004eac:	dc000015 	stw	r16,0(sp)
10004eb0:	2025883a 	mov	r18,r4
10004eb4:	10004f1e 	bne	r2,zero,10004ff4 <__sinit+0x170>
10004eb8:	24000117 	ldw	r16,4(r4)
10004ebc:	00c40034 	movhi	r3,4096
10004ec0:	18d37a04 	addi	r3,r3,19944
10004ec4:	20c00f15 	stw	r3,60(r4)
10004ec8:	2080bb04 	addi	r2,r4,748
10004ecc:	00c000c4 	movi	r3,3
10004ed0:	05c00044 	movi	r23,1
10004ed4:	20c0b915 	stw	r3,740(r4)
10004ed8:	2080ba15 	stw	r2,744(r4)
10004edc:	25c00e15 	stw	r23,56(r4)
10004ee0:	2000b815 	stw	zero,736(r4)
10004ee4:	00800104 	movi	r2,4
10004ee8:	81001704 	addi	r4,r16,92
10004eec:	000b883a 	mov	r5,zero
10004ef0:	01800204 	movi	r6,8
10004ef4:	80000015 	stw	zero,0(r16)
10004ef8:	80000115 	stw	zero,4(r16)
10004efc:	80000215 	stw	zero,8(r16)
10004f00:	8080030d 	sth	r2,12(r16)
10004f04:	80001915 	stw	zero,100(r16)
10004f08:	8000038d 	sth	zero,14(r16)
10004f0c:	80000415 	stw	zero,16(r16)
10004f10:	80000515 	stw	zero,20(r16)
10004f14:	80000615 	stw	zero,24(r16)
10004f18:	00063280 	call	10006328 <memset>
10004f1c:	94400217 	ldw	r17,8(r18)
10004f20:	05840034 	movhi	r22,4096
10004f24:	b59d4c04 	addi	r22,r22,30000
10004f28:	05440034 	movhi	r21,4096
10004f2c:	ad5d6304 	addi	r21,r21,30092
10004f30:	05040034 	movhi	r20,4096
10004f34:	a51d8204 	addi	r20,r20,30216
10004f38:	04c40034 	movhi	r19,4096
10004f3c:	9cdd9904 	addi	r19,r19,30308
10004f40:	84000715 	stw	r16,28(r16)
10004f44:	85800815 	stw	r22,32(r16)
10004f48:	85400915 	stw	r21,36(r16)
10004f4c:	85000a15 	stw	r20,40(r16)
10004f50:	84c00b15 	stw	r19,44(r16)
10004f54:	00800284 	movi	r2,10
10004f58:	89001704 	addi	r4,r17,92
10004f5c:	000b883a 	mov	r5,zero
10004f60:	01800204 	movi	r6,8
10004f64:	88000015 	stw	zero,0(r17)
10004f68:	88000115 	stw	zero,4(r17)
10004f6c:	88000215 	stw	zero,8(r17)
10004f70:	8880030d 	sth	r2,12(r17)
10004f74:	88001915 	stw	zero,100(r17)
10004f78:	8dc0038d 	sth	r23,14(r17)
10004f7c:	88000415 	stw	zero,16(r17)
10004f80:	88000515 	stw	zero,20(r17)
10004f84:	88000615 	stw	zero,24(r17)
10004f88:	00063280 	call	10006328 <memset>
10004f8c:	94000317 	ldw	r16,12(r18)
10004f90:	00800484 	movi	r2,18
10004f94:	8c400715 	stw	r17,28(r17)
10004f98:	8d800815 	stw	r22,32(r17)
10004f9c:	8d400915 	stw	r21,36(r17)
10004fa0:	8d000a15 	stw	r20,40(r17)
10004fa4:	8cc00b15 	stw	r19,44(r17)
10004fa8:	8080030d 	sth	r2,12(r16)
10004fac:	00800084 	movi	r2,2
10004fb0:	80000015 	stw	zero,0(r16)
10004fb4:	80000115 	stw	zero,4(r16)
10004fb8:	80000215 	stw	zero,8(r16)
10004fbc:	80001915 	stw	zero,100(r16)
10004fc0:	8080038d 	sth	r2,14(r16)
10004fc4:	80000415 	stw	zero,16(r16)
10004fc8:	80000515 	stw	zero,20(r16)
10004fcc:	80000615 	stw	zero,24(r16)
10004fd0:	81001704 	addi	r4,r16,92
10004fd4:	000b883a 	mov	r5,zero
10004fd8:	01800204 	movi	r6,8
10004fdc:	00063280 	call	10006328 <memset>
10004fe0:	84000715 	stw	r16,28(r16)
10004fe4:	85800815 	stw	r22,32(r16)
10004fe8:	85400915 	stw	r21,36(r16)
10004fec:	85000a15 	stw	r20,40(r16)
10004ff0:	84c00b15 	stw	r19,44(r16)
10004ff4:	dfc00817 	ldw	ra,32(sp)
10004ff8:	ddc00717 	ldw	r23,28(sp)
10004ffc:	dd800617 	ldw	r22,24(sp)
10005000:	dd400517 	ldw	r21,20(sp)
10005004:	dd000417 	ldw	r20,16(sp)
10005008:	dcc00317 	ldw	r19,12(sp)
1000500c:	dc800217 	ldw	r18,8(sp)
10005010:	dc400117 	ldw	r17,4(sp)
10005014:	dc000017 	ldw	r16,0(sp)
10005018:	dec00904 	addi	sp,sp,36
1000501c:	f800283a 	ret

10005020 <__sfp>:
10005020:	defffb04 	addi	sp,sp,-20
10005024:	00840074 	movhi	r2,4097
10005028:	10870c04 	addi	r2,r2,7216
1000502c:	dc800215 	stw	r18,8(sp)
10005030:	14800017 	ldw	r18,0(r2)
10005034:	dcc00315 	stw	r19,12(sp)
10005038:	dfc00415 	stw	ra,16(sp)
1000503c:	90800e17 	ldw	r2,56(r18)
10005040:	dc400115 	stw	r17,4(sp)
10005044:	dc000015 	stw	r16,0(sp)
10005048:	2027883a 	mov	r19,r4
1000504c:	10002f26 	beq	r2,zero,1000510c <__sfp+0xec>
10005050:	9480b804 	addi	r18,r18,736
10005054:	047fffc4 	movi	r17,-1
10005058:	91400117 	ldw	r5,4(r18)
1000505c:	94000217 	ldw	r16,8(r18)
10005060:	297fffc4 	addi	r5,r5,-1
10005064:	28000a16 	blt	r5,zero,10005090 <__sfp+0x70>
10005068:	8080030f 	ldh	r2,12(r16)
1000506c:	10000c26 	beq	r2,zero,100050a0 <__sfp+0x80>
10005070:	80c01d04 	addi	r3,r16,116
10005074:	00000206 	br	10005080 <__sfp+0x60>
10005078:	18bfe60f 	ldh	r2,-104(r3)
1000507c:	10000826 	beq	r2,zero,100050a0 <__sfp+0x80>
10005080:	297fffc4 	addi	r5,r5,-1
10005084:	1c3ffd04 	addi	r16,r3,-12
10005088:	18c01a04 	addi	r3,r3,104
1000508c:	2c7ffa1e 	bne	r5,r17,10005078 <__alt_data_end+0xf8005078>
10005090:	90800017 	ldw	r2,0(r18)
10005094:	10002026 	beq	r2,zero,10005118 <__sfp+0xf8>
10005098:	1025883a 	mov	r18,r2
1000509c:	003fee06 	br	10005058 <__alt_data_end+0xf8005058>
100050a0:	00bfffc4 	movi	r2,-1
100050a4:	8080038d 	sth	r2,14(r16)
100050a8:	00800044 	movi	r2,1
100050ac:	8080030d 	sth	r2,12(r16)
100050b0:	80001915 	stw	zero,100(r16)
100050b4:	80000015 	stw	zero,0(r16)
100050b8:	80000215 	stw	zero,8(r16)
100050bc:	80000115 	stw	zero,4(r16)
100050c0:	80000415 	stw	zero,16(r16)
100050c4:	80000515 	stw	zero,20(r16)
100050c8:	80000615 	stw	zero,24(r16)
100050cc:	81001704 	addi	r4,r16,92
100050d0:	000b883a 	mov	r5,zero
100050d4:	01800204 	movi	r6,8
100050d8:	00063280 	call	10006328 <memset>
100050dc:	8005883a 	mov	r2,r16
100050e0:	80000c15 	stw	zero,48(r16)
100050e4:	80000d15 	stw	zero,52(r16)
100050e8:	80001115 	stw	zero,68(r16)
100050ec:	80001215 	stw	zero,72(r16)
100050f0:	dfc00417 	ldw	ra,16(sp)
100050f4:	dcc00317 	ldw	r19,12(sp)
100050f8:	dc800217 	ldw	r18,8(sp)
100050fc:	dc400117 	ldw	r17,4(sp)
10005100:	dc000017 	ldw	r16,0(sp)
10005104:	dec00504 	addi	sp,sp,20
10005108:	f800283a 	ret
1000510c:	9009883a 	mov	r4,r18
10005110:	0004e840 	call	10004e84 <__sinit>
10005114:	003fce06 	br	10005050 <__alt_data_end+0xf8005050>
10005118:	9809883a 	mov	r4,r19
1000511c:	01400104 	movi	r5,4
10005120:	0004df40 	call	10004df4 <__sfmoreglue>
10005124:	90800015 	stw	r2,0(r18)
10005128:	103fdb1e 	bne	r2,zero,10005098 <__alt_data_end+0xf8005098>
1000512c:	00800304 	movi	r2,12
10005130:	98800015 	stw	r2,0(r19)
10005134:	0005883a 	mov	r2,zero
10005138:	003fed06 	br	100050f0 <__alt_data_end+0xf80050f0>

1000513c <__sfp_lock_acquire>:
1000513c:	f800283a 	ret

10005140 <__sfp_lock_release>:
10005140:	f800283a 	ret

10005144 <__sinit_lock_acquire>:
10005144:	f800283a 	ret

10005148 <__sinit_lock_release>:
10005148:	f800283a 	ret

1000514c <__fp_lock_all>:
1000514c:	00840074 	movhi	r2,4097
10005150:	10870d04 	addi	r2,r2,7220
10005154:	11000017 	ldw	r4,0(r2)
10005158:	01440034 	movhi	r5,4096
1000515c:	29537604 	addi	r5,r5,19928
10005160:	00055881 	jmpi	10005588 <_fwalk>

10005164 <__fp_unlock_all>:
10005164:	00840074 	movhi	r2,4097
10005168:	10870d04 	addi	r2,r2,7220
1000516c:	11000017 	ldw	r4,0(r2)
10005170:	01440034 	movhi	r5,4096
10005174:	29537804 	addi	r5,r5,19936
10005178:	00055881 	jmpi	10005588 <_fwalk>

1000517c <_malloc_trim_r>:
1000517c:	defffb04 	addi	sp,sp,-20
10005180:	dcc00315 	stw	r19,12(sp)
10005184:	dc800215 	stw	r18,8(sp)
10005188:	dc400115 	stw	r17,4(sp)
1000518c:	dc000015 	stw	r16,0(sp)
10005190:	2827883a 	mov	r19,r5
10005194:	dfc00415 	stw	ra,16(sp)
10005198:	04440074 	movhi	r17,4097
1000519c:	8c418604 	addi	r17,r17,1560
100051a0:	2021883a 	mov	r16,r4
100051a4:	000de2c0 	call	1000de2c <__malloc_lock>
100051a8:	88800217 	ldw	r2,8(r17)
100051ac:	14800117 	ldw	r18,4(r2)
100051b0:	00bfff04 	movi	r2,-4
100051b4:	90a4703a 	and	r18,r18,r2
100051b8:	94e7c83a 	sub	r19,r18,r19
100051bc:	9cc3fbc4 	addi	r19,r19,4079
100051c0:	9826d33a 	srli	r19,r19,12
100051c4:	0083ffc4 	movi	r2,4095
100051c8:	9cffffc4 	addi	r19,r19,-1
100051cc:	9826933a 	slli	r19,r19,12
100051d0:	14c0060e 	bge	r2,r19,100051ec <_malloc_trim_r+0x70>
100051d4:	8009883a 	mov	r4,r16
100051d8:	000b883a 	mov	r5,zero
100051dc:	00074cc0 	call	100074cc <_sbrk_r>
100051e0:	88c00217 	ldw	r3,8(r17)
100051e4:	1c87883a 	add	r3,r3,r18
100051e8:	10c00a26 	beq	r2,r3,10005214 <_malloc_trim_r+0x98>
100051ec:	8009883a 	mov	r4,r16
100051f0:	000de4c0 	call	1000de4c <__malloc_unlock>
100051f4:	0005883a 	mov	r2,zero
100051f8:	dfc00417 	ldw	ra,16(sp)
100051fc:	dcc00317 	ldw	r19,12(sp)
10005200:	dc800217 	ldw	r18,8(sp)
10005204:	dc400117 	ldw	r17,4(sp)
10005208:	dc000017 	ldw	r16,0(sp)
1000520c:	dec00504 	addi	sp,sp,20
10005210:	f800283a 	ret
10005214:	8009883a 	mov	r4,r16
10005218:	04cbc83a 	sub	r5,zero,r19
1000521c:	00074cc0 	call	100074cc <_sbrk_r>
10005220:	00ffffc4 	movi	r3,-1
10005224:	10c01326 	beq	r2,r3,10005274 <_malloc_trim_r+0xf8>
10005228:	00840074 	movhi	r2,4097
1000522c:	108de604 	addi	r2,r2,14232
10005230:	11000017 	ldw	r4,0(r2)
10005234:	88c00217 	ldw	r3,8(r17)
10005238:	94e5c83a 	sub	r18,r18,r19
1000523c:	94800054 	ori	r18,r18,1
10005240:	24e7c83a 	sub	r19,r4,r19
10005244:	1c800115 	stw	r18,4(r3)
10005248:	8009883a 	mov	r4,r16
1000524c:	14c00015 	stw	r19,0(r2)
10005250:	000de4c0 	call	1000de4c <__malloc_unlock>
10005254:	00800044 	movi	r2,1
10005258:	dfc00417 	ldw	ra,16(sp)
1000525c:	dcc00317 	ldw	r19,12(sp)
10005260:	dc800217 	ldw	r18,8(sp)
10005264:	dc400117 	ldw	r17,4(sp)
10005268:	dc000017 	ldw	r16,0(sp)
1000526c:	dec00504 	addi	sp,sp,20
10005270:	f800283a 	ret
10005274:	8009883a 	mov	r4,r16
10005278:	000b883a 	mov	r5,zero
1000527c:	00074cc0 	call	100074cc <_sbrk_r>
10005280:	88c00217 	ldw	r3,8(r17)
10005284:	014003c4 	movi	r5,15
10005288:	10c9c83a 	sub	r4,r2,r3
1000528c:	293fd70e 	bge	r5,r4,100051ec <__alt_data_end+0xf80051ec>
10005290:	01440074 	movhi	r5,4097
10005294:	29470f04 	addi	r5,r5,7228
10005298:	29400017 	ldw	r5,0(r5)
1000529c:	21000054 	ori	r4,r4,1
100052a0:	19000115 	stw	r4,4(r3)
100052a4:	1145c83a 	sub	r2,r2,r5
100052a8:	01440074 	movhi	r5,4097
100052ac:	294de604 	addi	r5,r5,14232
100052b0:	28800015 	stw	r2,0(r5)
100052b4:	003fcd06 	br	100051ec <__alt_data_end+0xf80051ec>

100052b8 <_free_r>:
100052b8:	defffd04 	addi	sp,sp,-12
100052bc:	dc000015 	stw	r16,0(sp)
100052c0:	dfc00215 	stw	ra,8(sp)
100052c4:	dc400115 	stw	r17,4(sp)
100052c8:	2821883a 	mov	r16,r5
100052cc:	28004c26 	beq	r5,zero,10005400 <_free_r+0x148>
100052d0:	2023883a 	mov	r17,r4
100052d4:	000de2c0 	call	1000de2c <__malloc_lock>
100052d8:	823fff17 	ldw	r8,-4(r16)
100052dc:	00bfff84 	movi	r2,-2
100052e0:	81bffe04 	addi	r6,r16,-8
100052e4:	4084703a 	and	r2,r8,r2
100052e8:	3087883a 	add	r3,r6,r2
100052ec:	01440074 	movhi	r5,4097
100052f0:	29418604 	addi	r5,r5,1560
100052f4:	1a400117 	ldw	r9,4(r3)
100052f8:	29000217 	ldw	r4,8(r5)
100052fc:	01ffff04 	movi	r7,-4
10005300:	49ce703a 	and	r7,r9,r7
10005304:	20c06526 	beq	r4,r3,1000549c <_free_r+0x1e4>
10005308:	19c00115 	stw	r7,4(r3)
1000530c:	4200004c 	andi	r8,r8,1
10005310:	40003026 	beq	r8,zero,100053d4 <_free_r+0x11c>
10005314:	0009883a 	mov	r4,zero
10005318:	19d1883a 	add	r8,r3,r7
1000531c:	42000117 	ldw	r8,4(r8)
10005320:	4200004c 	andi	r8,r8,1
10005324:	4000061e 	bne	r8,zero,10005340 <_free_r+0x88>
10005328:	11c5883a 	add	r2,r2,r7
1000532c:	19c00217 	ldw	r7,8(r3)
10005330:	20004e26 	beq	r4,zero,1000546c <_free_r+0x1b4>
10005334:	18c00317 	ldw	r3,12(r3)
10005338:	38c00315 	stw	r3,12(r7)
1000533c:	19c00215 	stw	r7,8(r3)
10005340:	10c00054 	ori	r3,r2,1
10005344:	30c00115 	stw	r3,4(r6)
10005348:	3087883a 	add	r3,r6,r2
1000534c:	18800015 	stw	r2,0(r3)
10005350:	20001a1e 	bne	r4,zero,100053bc <_free_r+0x104>
10005354:	00c07fc4 	movi	r3,511
10005358:	18802e2e 	bgeu	r3,r2,10005414 <_free_r+0x15c>
1000535c:	1006d27a 	srli	r3,r2,9
10005360:	01000104 	movi	r4,4
10005364:	20c06636 	bltu	r4,r3,10005500 <_free_r+0x248>
10005368:	1008d1ba 	srli	r4,r2,6
1000536c:	21000e04 	addi	r4,r4,56
10005370:	210f883a 	add	r7,r4,r4
10005374:	39cf883a 	add	r7,r7,r7
10005378:	39cf883a 	add	r7,r7,r7
1000537c:	29cf883a 	add	r7,r5,r7
10005380:	38c00217 	ldw	r3,8(r7)
10005384:	01440074 	movhi	r5,4097
10005388:	29418604 	addi	r5,r5,1560
1000538c:	19c06126 	beq	r3,r7,10005514 <_free_r+0x25c>
10005390:	013fff04 	movi	r4,-4
10005394:	19400117 	ldw	r5,4(r3)
10005398:	290a703a 	and	r5,r5,r4
1000539c:	1140022e 	bgeu	r2,r5,100053a8 <_free_r+0xf0>
100053a0:	18c00217 	ldw	r3,8(r3)
100053a4:	38fffb1e 	bne	r7,r3,10005394 <__alt_data_end+0xf8005394>
100053a8:	18800317 	ldw	r2,12(r3)
100053ac:	30800315 	stw	r2,12(r6)
100053b0:	30c00215 	stw	r3,8(r6)
100053b4:	11800215 	stw	r6,8(r2)
100053b8:	19800315 	stw	r6,12(r3)
100053bc:	8809883a 	mov	r4,r17
100053c0:	dfc00217 	ldw	ra,8(sp)
100053c4:	dc400117 	ldw	r17,4(sp)
100053c8:	dc000017 	ldw	r16,0(sp)
100053cc:	dec00304 	addi	sp,sp,12
100053d0:	000de4c1 	jmpi	1000de4c <__malloc_unlock>
100053d4:	813ffe17 	ldw	r4,-8(r16)
100053d8:	2a400204 	addi	r9,r5,8
100053dc:	310dc83a 	sub	r6,r6,r4
100053e0:	32000217 	ldw	r8,8(r6)
100053e4:	1105883a 	add	r2,r2,r4
100053e8:	42404326 	beq	r8,r9,100054f8 <_free_r+0x240>
100053ec:	32400317 	ldw	r9,12(r6)
100053f0:	0009883a 	mov	r4,zero
100053f4:	42400315 	stw	r9,12(r8)
100053f8:	4a000215 	stw	r8,8(r9)
100053fc:	003fc606 	br	10005318 <__alt_data_end+0xf8005318>
10005400:	dfc00217 	ldw	ra,8(sp)
10005404:	dc400117 	ldw	r17,4(sp)
10005408:	dc000017 	ldw	r16,0(sp)
1000540c:	dec00304 	addi	sp,sp,12
10005410:	f800283a 	ret
10005414:	1004d0fa 	srli	r2,r2,3
10005418:	02000044 	movi	r8,1
1000541c:	29c00117 	ldw	r7,4(r5)
10005420:	1087883a 	add	r3,r2,r2
10005424:	18c7883a 	add	r3,r3,r3
10005428:	18c7883a 	add	r3,r3,r3
1000542c:	28c7883a 	add	r3,r5,r3
10005430:	1005d0ba 	srai	r2,r2,2
10005434:	19000217 	ldw	r4,8(r3)
10005438:	30c00315 	stw	r3,12(r6)
1000543c:	4084983a 	sll	r2,r8,r2
10005440:	31000215 	stw	r4,8(r6)
10005444:	19800215 	stw	r6,8(r3)
10005448:	11c4b03a 	or	r2,r2,r7
1000544c:	21800315 	stw	r6,12(r4)
10005450:	8809883a 	mov	r4,r17
10005454:	28800115 	stw	r2,4(r5)
10005458:	dfc00217 	ldw	ra,8(sp)
1000545c:	dc400117 	ldw	r17,4(sp)
10005460:	dc000017 	ldw	r16,0(sp)
10005464:	dec00304 	addi	sp,sp,12
10005468:	000de4c1 	jmpi	1000de4c <__malloc_unlock>
1000546c:	02040074 	movhi	r8,4097
10005470:	42018804 	addi	r8,r8,1568
10005474:	3a3faf1e 	bne	r7,r8,10005334 <__alt_data_end+0xf8005334>
10005478:	29800515 	stw	r6,20(r5)
1000547c:	29800415 	stw	r6,16(r5)
10005480:	10c00054 	ori	r3,r2,1
10005484:	31c00315 	stw	r7,12(r6)
10005488:	31c00215 	stw	r7,8(r6)
1000548c:	30c00115 	stw	r3,4(r6)
10005490:	308d883a 	add	r6,r6,r2
10005494:	30800015 	stw	r2,0(r6)
10005498:	003fc806 	br	100053bc <__alt_data_end+0xf80053bc>
1000549c:	4200004c 	andi	r8,r8,1
100054a0:	3885883a 	add	r2,r7,r2
100054a4:	4000071e 	bne	r8,zero,100054c4 <_free_r+0x20c>
100054a8:	81fffe17 	ldw	r7,-8(r16)
100054ac:	31cdc83a 	sub	r6,r6,r7
100054b0:	30c00317 	ldw	r3,12(r6)
100054b4:	31000217 	ldw	r4,8(r6)
100054b8:	11c5883a 	add	r2,r2,r7
100054bc:	20c00315 	stw	r3,12(r4)
100054c0:	19000215 	stw	r4,8(r3)
100054c4:	00c40074 	movhi	r3,4097
100054c8:	18c71004 	addi	r3,r3,7232
100054cc:	11000054 	ori	r4,r2,1
100054d0:	18c00017 	ldw	r3,0(r3)
100054d4:	31000115 	stw	r4,4(r6)
100054d8:	29800215 	stw	r6,8(r5)
100054dc:	10ffb736 	bltu	r2,r3,100053bc <__alt_data_end+0xf80053bc>
100054e0:	00840074 	movhi	r2,4097
100054e4:	108dde04 	addi	r2,r2,14200
100054e8:	11400017 	ldw	r5,0(r2)
100054ec:	8809883a 	mov	r4,r17
100054f0:	000517c0 	call	1000517c <_malloc_trim_r>
100054f4:	003fb106 	br	100053bc <__alt_data_end+0xf80053bc>
100054f8:	01000044 	movi	r4,1
100054fc:	003f8606 	br	10005318 <__alt_data_end+0xf8005318>
10005500:	01000504 	movi	r4,20
10005504:	20c00b36 	bltu	r4,r3,10005534 <_free_r+0x27c>
10005508:	190016c4 	addi	r4,r3,91
1000550c:	210f883a 	add	r7,r4,r4
10005510:	003f9806 	br	10005374 <__alt_data_end+0xf8005374>
10005514:	2009d0ba 	srai	r4,r4,2
10005518:	00800044 	movi	r2,1
1000551c:	29c00117 	ldw	r7,4(r5)
10005520:	1108983a 	sll	r4,r2,r4
10005524:	1805883a 	mov	r2,r3
10005528:	21c8b03a 	or	r4,r4,r7
1000552c:	29000115 	stw	r4,4(r5)
10005530:	003f9e06 	br	100053ac <__alt_data_end+0xf80053ac>
10005534:	01001504 	movi	r4,84
10005538:	20c00436 	bltu	r4,r3,1000554c <_free_r+0x294>
1000553c:	1008d33a 	srli	r4,r2,12
10005540:	21001b84 	addi	r4,r4,110
10005544:	210f883a 	add	r7,r4,r4
10005548:	003f8a06 	br	10005374 <__alt_data_end+0xf8005374>
1000554c:	01005504 	movi	r4,340
10005550:	20c00436 	bltu	r4,r3,10005564 <_free_r+0x2ac>
10005554:	1008d3fa 	srli	r4,r2,15
10005558:	21001dc4 	addi	r4,r4,119
1000555c:	210f883a 	add	r7,r4,r4
10005560:	003f8406 	br	10005374 <__alt_data_end+0xf8005374>
10005564:	01015504 	movi	r4,1364
10005568:	20c00436 	bltu	r4,r3,1000557c <_free_r+0x2c4>
1000556c:	1008d4ba 	srli	r4,r2,18
10005570:	21001f04 	addi	r4,r4,124
10005574:	210f883a 	add	r7,r4,r4
10005578:	003f7e06 	br	10005374 <__alt_data_end+0xf8005374>
1000557c:	01c03f04 	movi	r7,252
10005580:	01001f84 	movi	r4,126
10005584:	003f7b06 	br	10005374 <__alt_data_end+0xf8005374>

10005588 <_fwalk>:
10005588:	defff904 	addi	sp,sp,-28
1000558c:	dcc00315 	stw	r19,12(sp)
10005590:	24c0b804 	addi	r19,r4,736
10005594:	dd400515 	stw	r21,20(sp)
10005598:	dd000415 	stw	r20,16(sp)
1000559c:	dfc00615 	stw	ra,24(sp)
100055a0:	dc800215 	stw	r18,8(sp)
100055a4:	dc400115 	stw	r17,4(sp)
100055a8:	dc000015 	stw	r16,0(sp)
100055ac:	282b883a 	mov	r21,r5
100055b0:	0029883a 	mov	r20,zero
100055b4:	000513c0 	call	1000513c <__sfp_lock_acquire>
100055b8:	98001226 	beq	r19,zero,10005604 <_fwalk+0x7c>
100055bc:	04bfffc4 	movi	r18,-1
100055c0:	9c400117 	ldw	r17,4(r19)
100055c4:	9c000217 	ldw	r16,8(r19)
100055c8:	8c7fffc4 	addi	r17,r17,-1
100055cc:	88000b16 	blt	r17,zero,100055fc <_fwalk+0x74>
100055d0:	84000304 	addi	r16,r16,12
100055d4:	80c0000f 	ldh	r3,0(r16)
100055d8:	8c7fffc4 	addi	r17,r17,-1
100055dc:	813ffd04 	addi	r4,r16,-12
100055e0:	18000426 	beq	r3,zero,100055f4 <_fwalk+0x6c>
100055e4:	80c0008f 	ldh	r3,2(r16)
100055e8:	1c800226 	beq	r3,r18,100055f4 <_fwalk+0x6c>
100055ec:	a83ee83a 	callr	r21
100055f0:	a0a8b03a 	or	r20,r20,r2
100055f4:	84001a04 	addi	r16,r16,104
100055f8:	8cbff61e 	bne	r17,r18,100055d4 <__alt_data_end+0xf80055d4>
100055fc:	9cc00017 	ldw	r19,0(r19)
10005600:	983fef1e 	bne	r19,zero,100055c0 <__alt_data_end+0xf80055c0>
10005604:	00051400 	call	10005140 <__sfp_lock_release>
10005608:	a005883a 	mov	r2,r20
1000560c:	dfc00617 	ldw	ra,24(sp)
10005610:	dd400517 	ldw	r21,20(sp)
10005614:	dd000417 	ldw	r20,16(sp)
10005618:	dcc00317 	ldw	r19,12(sp)
1000561c:	dc800217 	ldw	r18,8(sp)
10005620:	dc400117 	ldw	r17,4(sp)
10005624:	dc000017 	ldw	r16,0(sp)
10005628:	dec00704 	addi	sp,sp,28
1000562c:	f800283a 	ret

10005630 <_fwalk_reent>:
10005630:	defff804 	addi	sp,sp,-32
10005634:	dcc00315 	stw	r19,12(sp)
10005638:	24c0b804 	addi	r19,r4,736
1000563c:	dd800615 	stw	r22,24(sp)
10005640:	dd400515 	stw	r21,20(sp)
10005644:	dd000415 	stw	r20,16(sp)
10005648:	dfc00715 	stw	ra,28(sp)
1000564c:	dc800215 	stw	r18,8(sp)
10005650:	dc400115 	stw	r17,4(sp)
10005654:	dc000015 	stw	r16,0(sp)
10005658:	2029883a 	mov	r20,r4
1000565c:	282b883a 	mov	r21,r5
10005660:	002d883a 	mov	r22,zero
10005664:	000513c0 	call	1000513c <__sfp_lock_acquire>
10005668:	98001326 	beq	r19,zero,100056b8 <_fwalk_reent+0x88>
1000566c:	04bfffc4 	movi	r18,-1
10005670:	9c400117 	ldw	r17,4(r19)
10005674:	9c000217 	ldw	r16,8(r19)
10005678:	8c7fffc4 	addi	r17,r17,-1
1000567c:	88000c16 	blt	r17,zero,100056b0 <_fwalk_reent+0x80>
10005680:	84000304 	addi	r16,r16,12
10005684:	80c0000f 	ldh	r3,0(r16)
10005688:	8c7fffc4 	addi	r17,r17,-1
1000568c:	817ffd04 	addi	r5,r16,-12
10005690:	18000526 	beq	r3,zero,100056a8 <_fwalk_reent+0x78>
10005694:	80c0008f 	ldh	r3,2(r16)
10005698:	a009883a 	mov	r4,r20
1000569c:	1c800226 	beq	r3,r18,100056a8 <_fwalk_reent+0x78>
100056a0:	a83ee83a 	callr	r21
100056a4:	b0acb03a 	or	r22,r22,r2
100056a8:	84001a04 	addi	r16,r16,104
100056ac:	8cbff51e 	bne	r17,r18,10005684 <__alt_data_end+0xf8005684>
100056b0:	9cc00017 	ldw	r19,0(r19)
100056b4:	983fee1e 	bne	r19,zero,10005670 <__alt_data_end+0xf8005670>
100056b8:	00051400 	call	10005140 <__sfp_lock_release>
100056bc:	b005883a 	mov	r2,r22
100056c0:	dfc00717 	ldw	ra,28(sp)
100056c4:	dd800617 	ldw	r22,24(sp)
100056c8:	dd400517 	ldw	r21,20(sp)
100056cc:	dd000417 	ldw	r20,16(sp)
100056d0:	dcc00317 	ldw	r19,12(sp)
100056d4:	dc800217 	ldw	r18,8(sp)
100056d8:	dc400117 	ldw	r17,4(sp)
100056dc:	dc000017 	ldw	r16,0(sp)
100056e0:	dec00804 	addi	sp,sp,32
100056e4:	f800283a 	ret

100056e8 <_setlocale_r>:
100056e8:	defffe04 	addi	sp,sp,-8
100056ec:	dc000015 	stw	r16,0(sp)
100056f0:	dfc00115 	stw	ra,4(sp)
100056f4:	3021883a 	mov	r16,r6
100056f8:	30000526 	beq	r6,zero,10005710 <_setlocale_r+0x28>
100056fc:	3009883a 	mov	r4,r6
10005700:	01440074 	movhi	r5,4097
10005704:	297fbe04 	addi	r5,r5,-264
10005708:	000766c0 	call	1000766c <strcmp>
1000570c:	1000061e 	bne	r2,zero,10005728 <_setlocale_r+0x40>
10005710:	00840074 	movhi	r2,4097
10005714:	10bfbd04 	addi	r2,r2,-268
10005718:	dfc00117 	ldw	ra,4(sp)
1000571c:	dc000017 	ldw	r16,0(sp)
10005720:	dec00204 	addi	sp,sp,8
10005724:	f800283a 	ret
10005728:	8009883a 	mov	r4,r16
1000572c:	01440074 	movhi	r5,4097
10005730:	297fbd04 	addi	r5,r5,-268
10005734:	000766c0 	call	1000766c <strcmp>
10005738:	103ff526 	beq	r2,zero,10005710 <__alt_data_end+0xf8005710>
1000573c:	8009883a 	mov	r4,r16
10005740:	01440074 	movhi	r5,4097
10005744:	297fa804 	addi	r5,r5,-352
10005748:	000766c0 	call	1000766c <strcmp>
1000574c:	103ff026 	beq	r2,zero,10005710 <__alt_data_end+0xf8005710>
10005750:	0005883a 	mov	r2,zero
10005754:	003ff006 	br	10005718 <__alt_data_end+0xf8005718>

10005758 <__locale_charset>:
10005758:	00840074 	movhi	r2,4097
1000575c:	10817004 	addi	r2,r2,1472
10005760:	f800283a 	ret

10005764 <__locale_mb_cur_max>:
10005764:	00840074 	movhi	r2,4097
10005768:	10870e04 	addi	r2,r2,7224
1000576c:	10800017 	ldw	r2,0(r2)
10005770:	f800283a 	ret

10005774 <__locale_msgcharset>:
10005774:	00840074 	movhi	r2,4097
10005778:	10816804 	addi	r2,r2,1440
1000577c:	f800283a 	ret

10005780 <__locale_cjk_lang>:
10005780:	0005883a 	mov	r2,zero
10005784:	f800283a 	ret

10005788 <_localeconv_r>:
10005788:	00840074 	movhi	r2,4097
1000578c:	10817804 	addi	r2,r2,1504
10005790:	f800283a 	ret

10005794 <setlocale>:
10005794:	00c40074 	movhi	r3,4097
10005798:	18c70d04 	addi	r3,r3,7220
1000579c:	2005883a 	mov	r2,r4
100057a0:	19000017 	ldw	r4,0(r3)
100057a4:	280d883a 	mov	r6,r5
100057a8:	100b883a 	mov	r5,r2
100057ac:	00056e81 	jmpi	100056e8 <_setlocale_r>

100057b0 <localeconv>:
100057b0:	00840074 	movhi	r2,4097
100057b4:	10817804 	addi	r2,r2,1504
100057b8:	f800283a 	ret

100057bc <__smakebuf_r>:
100057bc:	2880030b 	ldhu	r2,12(r5)
100057c0:	deffec04 	addi	sp,sp,-80
100057c4:	dc000f15 	stw	r16,60(sp)
100057c8:	dfc01315 	stw	ra,76(sp)
100057cc:	dcc01215 	stw	r19,72(sp)
100057d0:	dc801115 	stw	r18,68(sp)
100057d4:	dc401015 	stw	r17,64(sp)
100057d8:	10c0008c 	andi	r3,r2,2
100057dc:	2821883a 	mov	r16,r5
100057e0:	18003a1e 	bne	r3,zero,100058cc <__smakebuf_r+0x110>
100057e4:	2940038f 	ldh	r5,14(r5)
100057e8:	2023883a 	mov	r17,r4
100057ec:	28001b16 	blt	r5,zero,1000585c <__smakebuf_r+0xa0>
100057f0:	d80d883a 	mov	r6,sp
100057f4:	00091fc0 	call	100091fc <_fstat_r>
100057f8:	10001716 	blt	r2,zero,10005858 <__smakebuf_r+0x9c>
100057fc:	d8800117 	ldw	r2,4(sp)
10005800:	00e00014 	movui	r3,32768
10005804:	10bc000c 	andi	r2,r2,61440
10005808:	10c03e26 	beq	r2,r3,10005904 <__smakebuf_r+0x148>
1000580c:	80c0030b 	ldhu	r3,12(r16)
10005810:	18c20014 	ori	r3,r3,2048
10005814:	80c0030d 	sth	r3,12(r16)
10005818:	00c80004 	movi	r3,8192
1000581c:	10c0431e 	bne	r2,r3,1000592c <__smakebuf_r+0x170>
10005820:	8140038f 	ldh	r5,14(r16)
10005824:	8809883a 	mov	r4,r17
10005828:	00097100 	call	10009710 <_isatty_r>
1000582c:	10004d26 	beq	r2,zero,10005964 <__smakebuf_r+0x1a8>
10005830:	80c0030b 	ldhu	r3,12(r16)
10005834:	04c00044 	movi	r19,1
10005838:	808010c4 	addi	r2,r16,67
1000583c:	1cc6b03a 	or	r3,r3,r19
10005840:	80c0030d 	sth	r3,12(r16)
10005844:	80800015 	stw	r2,0(r16)
10005848:	80800415 	stw	r2,16(r16)
1000584c:	84c00515 	stw	r19,20(r16)
10005850:	04810004 	movi	r18,1024
10005854:	00000706 	br	10005874 <__smakebuf_r+0xb8>
10005858:	8080030b 	ldhu	r2,12(r16)
1000585c:	10c0200c 	andi	r3,r2,128
10005860:	1800261e 	bne	r3,zero,100058fc <__smakebuf_r+0x140>
10005864:	04810004 	movi	r18,1024
10005868:	10820014 	ori	r2,r2,2048
1000586c:	8080030d 	sth	r2,12(r16)
10005870:	0027883a 	mov	r19,zero
10005874:	8809883a 	mov	r4,r17
10005878:	900b883a 	mov	r5,r18
1000587c:	00059700 	call	10005970 <_malloc_r>
10005880:	10002d26 	beq	r2,zero,10005938 <__smakebuf_r+0x17c>
10005884:	80c0030b 	ldhu	r3,12(r16)
10005888:	01040034 	movhi	r4,4096
1000588c:	21137a04 	addi	r4,r4,19944
10005890:	89000f15 	stw	r4,60(r17)
10005894:	18c02014 	ori	r3,r3,128
10005898:	80c0030d 	sth	r3,12(r16)
1000589c:	80800015 	stw	r2,0(r16)
100058a0:	80800415 	stw	r2,16(r16)
100058a4:	84800515 	stw	r18,20(r16)
100058a8:	98000d26 	beq	r19,zero,100058e0 <__smakebuf_r+0x124>
100058ac:	8140038f 	ldh	r5,14(r16)
100058b0:	8809883a 	mov	r4,r17
100058b4:	00097100 	call	10009710 <_isatty_r>
100058b8:	10000926 	beq	r2,zero,100058e0 <__smakebuf_r+0x124>
100058bc:	8080030b 	ldhu	r2,12(r16)
100058c0:	10800054 	ori	r2,r2,1
100058c4:	8080030d 	sth	r2,12(r16)
100058c8:	00000506 	br	100058e0 <__smakebuf_r+0x124>
100058cc:	288010c4 	addi	r2,r5,67
100058d0:	28800015 	stw	r2,0(r5)
100058d4:	28800415 	stw	r2,16(r5)
100058d8:	00800044 	movi	r2,1
100058dc:	28800515 	stw	r2,20(r5)
100058e0:	dfc01317 	ldw	ra,76(sp)
100058e4:	dcc01217 	ldw	r19,72(sp)
100058e8:	dc801117 	ldw	r18,68(sp)
100058ec:	dc401017 	ldw	r17,64(sp)
100058f0:	dc000f17 	ldw	r16,60(sp)
100058f4:	dec01404 	addi	sp,sp,80
100058f8:	f800283a 	ret
100058fc:	04801004 	movi	r18,64
10005900:	003fd906 	br	10005868 <__alt_data_end+0xf8005868>
10005904:	81000a17 	ldw	r4,40(r16)
10005908:	00c40034 	movhi	r3,4096
1000590c:	18dd8204 	addi	r3,r3,30216
10005910:	20ffbe1e 	bne	r4,r3,1000580c <__alt_data_end+0xf800580c>
10005914:	80c0030b 	ldhu	r3,12(r16)
10005918:	01010004 	movi	r4,1024
1000591c:	81001315 	stw	r4,76(r16)
10005920:	1906b03a 	or	r3,r3,r4
10005924:	80c0030d 	sth	r3,12(r16)
10005928:	003fbb06 	br	10005818 <__alt_data_end+0xf8005818>
1000592c:	0027883a 	mov	r19,zero
10005930:	04810004 	movi	r18,1024
10005934:	003fcf06 	br	10005874 <__alt_data_end+0xf8005874>
10005938:	8080030b 	ldhu	r2,12(r16)
1000593c:	10c0800c 	andi	r3,r2,512
10005940:	183fe71e 	bne	r3,zero,100058e0 <__alt_data_end+0xf80058e0>
10005944:	10800094 	ori	r2,r2,2
10005948:	80c010c4 	addi	r3,r16,67
1000594c:	8080030d 	sth	r2,12(r16)
10005950:	00800044 	movi	r2,1
10005954:	80c00015 	stw	r3,0(r16)
10005958:	80c00415 	stw	r3,16(r16)
1000595c:	80800515 	stw	r2,20(r16)
10005960:	003fdf06 	br	100058e0 <__alt_data_end+0xf80058e0>
10005964:	04c00044 	movi	r19,1
10005968:	04810004 	movi	r18,1024
1000596c:	003fc106 	br	10005874 <__alt_data_end+0xf8005874>

10005970 <_malloc_r>:
10005970:	defff504 	addi	sp,sp,-44
10005974:	dc800315 	stw	r18,12(sp)
10005978:	dfc00a15 	stw	ra,40(sp)
1000597c:	df000915 	stw	fp,36(sp)
10005980:	ddc00815 	stw	r23,32(sp)
10005984:	dd800715 	stw	r22,28(sp)
10005988:	dd400615 	stw	r21,24(sp)
1000598c:	dd000515 	stw	r20,20(sp)
10005990:	dcc00415 	stw	r19,16(sp)
10005994:	dc400215 	stw	r17,8(sp)
10005998:	dc000115 	stw	r16,4(sp)
1000599c:	288002c4 	addi	r2,r5,11
100059a0:	00c00584 	movi	r3,22
100059a4:	2025883a 	mov	r18,r4
100059a8:	18802b2e 	bgeu	r3,r2,10005a58 <_malloc_r+0xe8>
100059ac:	047ffe04 	movi	r17,-8
100059b0:	1462703a 	and	r17,r2,r17
100059b4:	88002a16 	blt	r17,zero,10005a60 <_malloc_r+0xf0>
100059b8:	89402936 	bltu	r17,r5,10005a60 <_malloc_r+0xf0>
100059bc:	9009883a 	mov	r4,r18
100059c0:	000de2c0 	call	1000de2c <__malloc_lock>
100059c4:	00807dc4 	movi	r2,503
100059c8:	14402936 	bltu	r2,r17,10005a70 <_malloc_r+0x100>
100059cc:	8808d0fa 	srli	r4,r17,3
100059d0:	04c40074 	movhi	r19,4097
100059d4:	9cc18604 	addi	r19,r19,1560
100059d8:	2105883a 	add	r2,r4,r4
100059dc:	1085883a 	add	r2,r2,r2
100059e0:	1085883a 	add	r2,r2,r2
100059e4:	9885883a 	add	r2,r19,r2
100059e8:	14000317 	ldw	r16,12(r2)
100059ec:	80815226 	beq	r16,r2,10005f38 <_malloc_r+0x5c8>
100059f0:	81000117 	ldw	r4,4(r16)
100059f4:	00bfff04 	movi	r2,-4
100059f8:	80c00317 	ldw	r3,12(r16)
100059fc:	2084703a 	and	r2,r4,r2
10005a00:	8085883a 	add	r2,r16,r2
10005a04:	81000217 	ldw	r4,8(r16)
10005a08:	11400117 	ldw	r5,4(r2)
10005a0c:	20c00315 	stw	r3,12(r4)
10005a10:	19000215 	stw	r4,8(r3)
10005a14:	28c00054 	ori	r3,r5,1
10005a18:	10c00115 	stw	r3,4(r2)
10005a1c:	9009883a 	mov	r4,r18
10005a20:	000de4c0 	call	1000de4c <__malloc_unlock>
10005a24:	80800204 	addi	r2,r16,8
10005a28:	dfc00a17 	ldw	ra,40(sp)
10005a2c:	df000917 	ldw	fp,36(sp)
10005a30:	ddc00817 	ldw	r23,32(sp)
10005a34:	dd800717 	ldw	r22,28(sp)
10005a38:	dd400617 	ldw	r21,24(sp)
10005a3c:	dd000517 	ldw	r20,20(sp)
10005a40:	dcc00417 	ldw	r19,16(sp)
10005a44:	dc800317 	ldw	r18,12(sp)
10005a48:	dc400217 	ldw	r17,8(sp)
10005a4c:	dc000117 	ldw	r16,4(sp)
10005a50:	dec00b04 	addi	sp,sp,44
10005a54:	f800283a 	ret
10005a58:	04400404 	movi	r17,16
10005a5c:	897fd72e 	bgeu	r17,r5,100059bc <__alt_data_end+0xf80059bc>
10005a60:	00800304 	movi	r2,12
10005a64:	90800015 	stw	r2,0(r18)
10005a68:	0005883a 	mov	r2,zero
10005a6c:	003fee06 	br	10005a28 <__alt_data_end+0xf8005a28>
10005a70:	8808d27a 	srli	r4,r17,9
10005a74:	20007126 	beq	r4,zero,10005c3c <_malloc_r+0x2cc>
10005a78:	00800104 	movi	r2,4
10005a7c:	1100f536 	bltu	r2,r4,10005e54 <_malloc_r+0x4e4>
10005a80:	8808d1ba 	srli	r4,r17,6
10005a84:	21000e04 	addi	r4,r4,56
10005a88:	210b883a 	add	r5,r4,r4
10005a8c:	294b883a 	add	r5,r5,r5
10005a90:	294b883a 	add	r5,r5,r5
10005a94:	04c40074 	movhi	r19,4097
10005a98:	9cc18604 	addi	r19,r19,1560
10005a9c:	994b883a 	add	r5,r19,r5
10005aa0:	2c000317 	ldw	r16,12(r5)
10005aa4:	2c000e26 	beq	r5,r16,10005ae0 <_malloc_r+0x170>
10005aa8:	80c00117 	ldw	r3,4(r16)
10005aac:	01ffff04 	movi	r7,-4
10005ab0:	018003c4 	movi	r6,15
10005ab4:	19c6703a 	and	r3,r3,r7
10005ab8:	1c45c83a 	sub	r2,r3,r17
10005abc:	30800716 	blt	r6,r2,10005adc <_malloc_r+0x16c>
10005ac0:	1000610e 	bge	r2,zero,10005c48 <_malloc_r+0x2d8>
10005ac4:	84000317 	ldw	r16,12(r16)
10005ac8:	2c000526 	beq	r5,r16,10005ae0 <_malloc_r+0x170>
10005acc:	80c00117 	ldw	r3,4(r16)
10005ad0:	19c6703a 	and	r3,r3,r7
10005ad4:	1c45c83a 	sub	r2,r3,r17
10005ad8:	30bff90e 	bge	r6,r2,10005ac0 <__alt_data_end+0xf8005ac0>
10005adc:	213fffc4 	addi	r4,r4,-1
10005ae0:	21000044 	addi	r4,r4,1
10005ae4:	9c000417 	ldw	r16,16(r19)
10005ae8:	00c40074 	movhi	r3,4097
10005aec:	18c18604 	addi	r3,r3,1560
10005af0:	1a400204 	addi	r9,r3,8
10005af4:	82410926 	beq	r16,r9,10005f1c <_malloc_r+0x5ac>
10005af8:	81400117 	ldw	r5,4(r16)
10005afc:	00bfff04 	movi	r2,-4
10005b00:	018003c4 	movi	r6,15
10005b04:	2884703a 	and	r2,r5,r2
10005b08:	144bc83a 	sub	r5,r2,r17
10005b0c:	3140f416 	blt	r6,r5,10005ee0 <_malloc_r+0x570>
10005b10:	1a400515 	stw	r9,20(r3)
10005b14:	1a400415 	stw	r9,16(r3)
10005b18:	2800570e 	bge	r5,zero,10005c78 <_malloc_r+0x308>
10005b1c:	01407fc4 	movi	r5,511
10005b20:	2880d436 	bltu	r5,r2,10005e74 <_malloc_r+0x504>
10005b24:	1004d0fa 	srli	r2,r2,3
10005b28:	02000044 	movi	r8,1
10005b2c:	19c00117 	ldw	r7,4(r3)
10005b30:	108b883a 	add	r5,r2,r2
10005b34:	294b883a 	add	r5,r5,r5
10005b38:	1005d0ba 	srai	r2,r2,2
10005b3c:	294b883a 	add	r5,r5,r5
10005b40:	28cb883a 	add	r5,r5,r3
10005b44:	29800217 	ldw	r6,8(r5)
10005b48:	4084983a 	sll	r2,r8,r2
10005b4c:	81400315 	stw	r5,12(r16)
10005b50:	81800215 	stw	r6,8(r16)
10005b54:	11c4b03a 	or	r2,r2,r7
10005b58:	2c000215 	stw	r16,8(r5)
10005b5c:	18800115 	stw	r2,4(r3)
10005b60:	34000315 	stw	r16,12(r6)
10005b64:	2007d0ba 	srai	r3,r4,2
10005b68:	01400044 	movi	r5,1
10005b6c:	28ca983a 	sll	r5,r5,r3
10005b70:	11404936 	bltu	r2,r5,10005c98 <_malloc_r+0x328>
10005b74:	1146703a 	and	r3,r2,r5
10005b78:	18000a1e 	bne	r3,zero,10005ba4 <_malloc_r+0x234>
10005b7c:	00ffff04 	movi	r3,-4
10005b80:	294b883a 	add	r5,r5,r5
10005b84:	20c8703a 	and	r4,r4,r3
10005b88:	1146703a 	and	r3,r2,r5
10005b8c:	21000104 	addi	r4,r4,4
10005b90:	1800041e 	bne	r3,zero,10005ba4 <_malloc_r+0x234>
10005b94:	294b883a 	add	r5,r5,r5
10005b98:	1146703a 	and	r3,r2,r5
10005b9c:	21000104 	addi	r4,r4,4
10005ba0:	183ffc26 	beq	r3,zero,10005b94 <__alt_data_end+0xf8005b94>
10005ba4:	023fff04 	movi	r8,-4
10005ba8:	01c003c4 	movi	r7,15
10005bac:	2105883a 	add	r2,r4,r4
10005bb0:	1085883a 	add	r2,r2,r2
10005bb4:	1085883a 	add	r2,r2,r2
10005bb8:	9897883a 	add	r11,r19,r2
10005bbc:	5a800304 	addi	r10,r11,12
10005bc0:	2019883a 	mov	r12,r4
10005bc4:	54000017 	ldw	r16,0(r10)
10005bc8:	51bffd04 	addi	r6,r10,-12
10005bcc:	8180041e 	bne	r16,r6,10005be0 <_malloc_r+0x270>
10005bd0:	0000d406 	br	10005f24 <_malloc_r+0x5b4>
10005bd4:	1000dd0e 	bge	r2,zero,10005f4c <_malloc_r+0x5dc>
10005bd8:	84000317 	ldw	r16,12(r16)
10005bdc:	8180d126 	beq	r16,r6,10005f24 <_malloc_r+0x5b4>
10005be0:	80c00117 	ldw	r3,4(r16)
10005be4:	1a06703a 	and	r3,r3,r8
10005be8:	1c45c83a 	sub	r2,r3,r17
10005bec:	38bff90e 	bge	r7,r2,10005bd4 <__alt_data_end+0xf8005bd4>
10005bf0:	80c00317 	ldw	r3,12(r16)
10005bf4:	81000217 	ldw	r4,8(r16)
10005bf8:	89400054 	ori	r5,r17,1
10005bfc:	81400115 	stw	r5,4(r16)
10005c00:	20c00315 	stw	r3,12(r4)
10005c04:	19000215 	stw	r4,8(r3)
10005c08:	8463883a 	add	r17,r16,r17
10005c0c:	9c400515 	stw	r17,20(r19)
10005c10:	9c400415 	stw	r17,16(r19)
10005c14:	10c00054 	ori	r3,r2,1
10005c18:	8a400315 	stw	r9,12(r17)
10005c1c:	8a400215 	stw	r9,8(r17)
10005c20:	88c00115 	stw	r3,4(r17)
10005c24:	88a3883a 	add	r17,r17,r2
10005c28:	88800015 	stw	r2,0(r17)
10005c2c:	9009883a 	mov	r4,r18
10005c30:	000de4c0 	call	1000de4c <__malloc_unlock>
10005c34:	80800204 	addi	r2,r16,8
10005c38:	003f7b06 	br	10005a28 <__alt_data_end+0xf8005a28>
10005c3c:	01401f84 	movi	r5,126
10005c40:	01000fc4 	movi	r4,63
10005c44:	003f9106 	br	10005a8c <__alt_data_end+0xf8005a8c>
10005c48:	80800317 	ldw	r2,12(r16)
10005c4c:	81000217 	ldw	r4,8(r16)
10005c50:	80c7883a 	add	r3,r16,r3
10005c54:	19400117 	ldw	r5,4(r3)
10005c58:	20800315 	stw	r2,12(r4)
10005c5c:	11000215 	stw	r4,8(r2)
10005c60:	28800054 	ori	r2,r5,1
10005c64:	18800115 	stw	r2,4(r3)
10005c68:	9009883a 	mov	r4,r18
10005c6c:	000de4c0 	call	1000de4c <__malloc_unlock>
10005c70:	80800204 	addi	r2,r16,8
10005c74:	003f6c06 	br	10005a28 <__alt_data_end+0xf8005a28>
10005c78:	8085883a 	add	r2,r16,r2
10005c7c:	10c00117 	ldw	r3,4(r2)
10005c80:	9009883a 	mov	r4,r18
10005c84:	18c00054 	ori	r3,r3,1
10005c88:	10c00115 	stw	r3,4(r2)
10005c8c:	000de4c0 	call	1000de4c <__malloc_unlock>
10005c90:	80800204 	addi	r2,r16,8
10005c94:	003f6406 	br	10005a28 <__alt_data_end+0xf8005a28>
10005c98:	9c000217 	ldw	r16,8(r19)
10005c9c:	00bfff04 	movi	r2,-4
10005ca0:	85400117 	ldw	r21,4(r16)
10005ca4:	a8aa703a 	and	r21,r21,r2
10005ca8:	ac400336 	bltu	r21,r17,10005cb8 <_malloc_r+0x348>
10005cac:	ac45c83a 	sub	r2,r21,r17
10005cb0:	00c003c4 	movi	r3,15
10005cb4:	18805d16 	blt	r3,r2,10005e2c <_malloc_r+0x4bc>
10005cb8:	00840074 	movhi	r2,4097
10005cbc:	108dde04 	addi	r2,r2,14200
10005cc0:	00c40074 	movhi	r3,4097
10005cc4:	18c70f04 	addi	r3,r3,7228
10005cc8:	15c00017 	ldw	r23,0(r2)
10005ccc:	19000017 	ldw	r4,0(r3)
10005cd0:	00bfffc4 	movi	r2,-1
10005cd4:	8579883a 	add	fp,r16,r21
10005cd8:	8def883a 	add	r23,r17,r23
10005cdc:	2080e426 	beq	r4,r2,10006070 <_malloc_r+0x700>
10005ce0:	bdc403c4 	addi	r23,r23,4111
10005ce4:	00bc0004 	movi	r2,-4096
10005ce8:	b8ae703a 	and	r23,r23,r2
10005cec:	9009883a 	mov	r4,r18
10005cf0:	b80b883a 	mov	r5,r23
10005cf4:	d8c00015 	stw	r3,0(sp)
10005cf8:	00074cc0 	call	100074cc <_sbrk_r>
10005cfc:	1029883a 	mov	r20,r2
10005d00:	00bfffc4 	movi	r2,-1
10005d04:	d8c00017 	ldw	r3,0(sp)
10005d08:	a080a426 	beq	r20,r2,10005f9c <_malloc_r+0x62c>
10005d0c:	a700a236 	bltu	r20,fp,10005f98 <_malloc_r+0x628>
10005d10:	05840074 	movhi	r22,4097
10005d14:	b58de604 	addi	r22,r22,14232
10005d18:	b0800017 	ldw	r2,0(r22)
10005d1c:	b885883a 	add	r2,r23,r2
10005d20:	b0800015 	stw	r2,0(r22)
10005d24:	e500da26 	beq	fp,r20,10006090 <_malloc_r+0x720>
10005d28:	19000017 	ldw	r4,0(r3)
10005d2c:	00ffffc4 	movi	r3,-1
10005d30:	20c0e426 	beq	r4,r3,100060c4 <_malloc_r+0x754>
10005d34:	a739c83a 	sub	fp,r20,fp
10005d38:	1705883a 	add	r2,r2,fp
10005d3c:	b0800015 	stw	r2,0(r22)
10005d40:	a08001cc 	andi	r2,r20,7
10005d44:	1000b526 	beq	r2,zero,1000601c <_malloc_r+0x6ac>
10005d48:	a0a9c83a 	sub	r20,r20,r2
10005d4c:	00c40204 	movi	r3,4104
10005d50:	a5000204 	addi	r20,r20,8
10005d54:	1885c83a 	sub	r2,r3,r2
10005d58:	a5c7883a 	add	r3,r20,r23
10005d5c:	18c3ffcc 	andi	r3,r3,4095
10005d60:	10efc83a 	sub	r23,r2,r3
10005d64:	9009883a 	mov	r4,r18
10005d68:	b80b883a 	mov	r5,r23
10005d6c:	00074cc0 	call	100074cc <_sbrk_r>
10005d70:	00ffffc4 	movi	r3,-1
10005d74:	10c0d026 	beq	r2,r3,100060b8 <_malloc_r+0x748>
10005d78:	1505c83a 	sub	r2,r2,r20
10005d7c:	b887883a 	add	r3,r23,r2
10005d80:	18c00054 	ori	r3,r3,1
10005d84:	b0800017 	ldw	r2,0(r22)
10005d88:	9d000215 	stw	r20,8(r19)
10005d8c:	a0c00115 	stw	r3,4(r20)
10005d90:	b885883a 	add	r2,r23,r2
10005d94:	b0800015 	stw	r2,0(r22)
10005d98:	84c00e26 	beq	r16,r19,10005dd4 <_malloc_r+0x464>
10005d9c:	00c003c4 	movi	r3,15
10005da0:	1d40a02e 	bgeu	r3,r21,10006024 <_malloc_r+0x6b4>
10005da4:	81400117 	ldw	r5,4(r16)
10005da8:	ad7ffd04 	addi	r21,r21,-12
10005dac:	013ffe04 	movi	r4,-8
10005db0:	a908703a 	and	r4,r21,r4
10005db4:	2940004c 	andi	r5,r5,1
10005db8:	214ab03a 	or	r5,r4,r5
10005dbc:	81400115 	stw	r5,4(r16)
10005dc0:	01800144 	movi	r6,5
10005dc4:	810b883a 	add	r5,r16,r4
10005dc8:	29800115 	stw	r6,4(r5)
10005dcc:	29800215 	stw	r6,8(r5)
10005dd0:	1900c036 	bltu	r3,r4,100060d4 <_malloc_r+0x764>
10005dd4:	00c40074 	movhi	r3,4097
10005dd8:	18cddd04 	addi	r3,r3,14196
10005ddc:	19000017 	ldw	r4,0(r3)
10005de0:	2080012e 	bgeu	r4,r2,10005de8 <_malloc_r+0x478>
10005de4:	18800015 	stw	r2,0(r3)
10005de8:	00c40074 	movhi	r3,4097
10005dec:	18cddc04 	addi	r3,r3,14192
10005df0:	19000017 	ldw	r4,0(r3)
10005df4:	9c000217 	ldw	r16,8(r19)
10005df8:	2080012e 	bgeu	r4,r2,10005e00 <_malloc_r+0x490>
10005dfc:	18800015 	stw	r2,0(r3)
10005e00:	80c00117 	ldw	r3,4(r16)
10005e04:	00bfff04 	movi	r2,-4
10005e08:	1886703a 	and	r3,r3,r2
10005e0c:	1c45c83a 	sub	r2,r3,r17
10005e10:	1c400236 	bltu	r3,r17,10005e1c <_malloc_r+0x4ac>
10005e14:	00c003c4 	movi	r3,15
10005e18:	18800416 	blt	r3,r2,10005e2c <_malloc_r+0x4bc>
10005e1c:	9009883a 	mov	r4,r18
10005e20:	000de4c0 	call	1000de4c <__malloc_unlock>
10005e24:	0005883a 	mov	r2,zero
10005e28:	003eff06 	br	10005a28 <__alt_data_end+0xf8005a28>
10005e2c:	88c00054 	ori	r3,r17,1
10005e30:	80c00115 	stw	r3,4(r16)
10005e34:	8463883a 	add	r17,r16,r17
10005e38:	10800054 	ori	r2,r2,1
10005e3c:	9c400215 	stw	r17,8(r19)
10005e40:	88800115 	stw	r2,4(r17)
10005e44:	9009883a 	mov	r4,r18
10005e48:	000de4c0 	call	1000de4c <__malloc_unlock>
10005e4c:	80800204 	addi	r2,r16,8
10005e50:	003ef506 	br	10005a28 <__alt_data_end+0xf8005a28>
10005e54:	00800504 	movi	r2,20
10005e58:	1100482e 	bgeu	r2,r4,10005f7c <_malloc_r+0x60c>
10005e5c:	00801504 	movi	r2,84
10005e60:	11006836 	bltu	r2,r4,10006004 <_malloc_r+0x694>
10005e64:	8808d33a 	srli	r4,r17,12
10005e68:	21001b84 	addi	r4,r4,110
10005e6c:	210b883a 	add	r5,r4,r4
10005e70:	003f0606 	br	10005a8c <__alt_data_end+0xf8005a8c>
10005e74:	1006d27a 	srli	r3,r2,9
10005e78:	01400104 	movi	r5,4
10005e7c:	28c0422e 	bgeu	r5,r3,10005f88 <_malloc_r+0x618>
10005e80:	01400504 	movi	r5,20
10005e84:	28c07c36 	bltu	r5,r3,10006078 <_malloc_r+0x708>
10005e88:	194016c4 	addi	r5,r3,91
10005e8c:	294d883a 	add	r6,r5,r5
10005e90:	318d883a 	add	r6,r6,r6
10005e94:	318d883a 	add	r6,r6,r6
10005e98:	998d883a 	add	r6,r19,r6
10005e9c:	30c00217 	ldw	r3,8(r6)
10005ea0:	01c40074 	movhi	r7,4097
10005ea4:	39c18604 	addi	r7,r7,1560
10005ea8:	19806326 	beq	r3,r6,10006038 <_malloc_r+0x6c8>
10005eac:	01ffff04 	movi	r7,-4
10005eb0:	19400117 	ldw	r5,4(r3)
10005eb4:	29ca703a 	and	r5,r5,r7
10005eb8:	1140022e 	bgeu	r2,r5,10005ec4 <_malloc_r+0x554>
10005ebc:	18c00217 	ldw	r3,8(r3)
10005ec0:	30fffb1e 	bne	r6,r3,10005eb0 <__alt_data_end+0xf8005eb0>
10005ec4:	19400317 	ldw	r5,12(r3)
10005ec8:	98800117 	ldw	r2,4(r19)
10005ecc:	81400315 	stw	r5,12(r16)
10005ed0:	80c00215 	stw	r3,8(r16)
10005ed4:	2c000215 	stw	r16,8(r5)
10005ed8:	1c000315 	stw	r16,12(r3)
10005edc:	003f2106 	br	10005b64 <__alt_data_end+0xf8005b64>
10005ee0:	88800054 	ori	r2,r17,1
10005ee4:	80800115 	stw	r2,4(r16)
10005ee8:	8463883a 	add	r17,r16,r17
10005eec:	1c400515 	stw	r17,20(r3)
10005ef0:	1c400415 	stw	r17,16(r3)
10005ef4:	28800054 	ori	r2,r5,1
10005ef8:	88800115 	stw	r2,4(r17)
10005efc:	8a400315 	stw	r9,12(r17)
10005f00:	8a400215 	stw	r9,8(r17)
10005f04:	8963883a 	add	r17,r17,r5
10005f08:	89400015 	stw	r5,0(r17)
10005f0c:	9009883a 	mov	r4,r18
10005f10:	000de4c0 	call	1000de4c <__malloc_unlock>
10005f14:	80800204 	addi	r2,r16,8
10005f18:	003ec306 	br	10005a28 <__alt_data_end+0xf8005a28>
10005f1c:	18800117 	ldw	r2,4(r3)
10005f20:	003f1006 	br	10005b64 <__alt_data_end+0xf8005b64>
10005f24:	63000044 	addi	r12,r12,1
10005f28:	608000cc 	andi	r2,r12,3
10005f2c:	52800204 	addi	r10,r10,8
10005f30:	103f241e 	bne	r2,zero,10005bc4 <__alt_data_end+0xf8005bc4>
10005f34:	00002106 	br	10005fbc <_malloc_r+0x64c>
10005f38:	80800204 	addi	r2,r16,8
10005f3c:	84000517 	ldw	r16,20(r16)
10005f40:	143eab1e 	bne	r2,r16,100059f0 <__alt_data_end+0xf80059f0>
10005f44:	21000084 	addi	r4,r4,2
10005f48:	003ee606 	br	10005ae4 <__alt_data_end+0xf8005ae4>
10005f4c:	80c7883a 	add	r3,r16,r3
10005f50:	19400117 	ldw	r5,4(r3)
10005f54:	80800317 	ldw	r2,12(r16)
10005f58:	81000217 	ldw	r4,8(r16)
10005f5c:	29400054 	ori	r5,r5,1
10005f60:	19400115 	stw	r5,4(r3)
10005f64:	20800315 	stw	r2,12(r4)
10005f68:	11000215 	stw	r4,8(r2)
10005f6c:	9009883a 	mov	r4,r18
10005f70:	000de4c0 	call	1000de4c <__malloc_unlock>
10005f74:	80800204 	addi	r2,r16,8
10005f78:	003eab06 	br	10005a28 <__alt_data_end+0xf8005a28>
10005f7c:	210016c4 	addi	r4,r4,91
10005f80:	210b883a 	add	r5,r4,r4
10005f84:	003ec106 	br	10005a8c <__alt_data_end+0xf8005a8c>
10005f88:	100ad1ba 	srli	r5,r2,6
10005f8c:	29400e04 	addi	r5,r5,56
10005f90:	294d883a 	add	r6,r5,r5
10005f94:	003fbe06 	br	10005e90 <__alt_data_end+0xf8005e90>
10005f98:	84ff5d26 	beq	r16,r19,10005d10 <__alt_data_end+0xf8005d10>
10005f9c:	9c000217 	ldw	r16,8(r19)
10005fa0:	00bfff04 	movi	r2,-4
10005fa4:	80c00117 	ldw	r3,4(r16)
10005fa8:	1886703a 	and	r3,r3,r2
10005fac:	003f9706 	br	10005e0c <__alt_data_end+0xf8005e0c>
10005fb0:	5ac00017 	ldw	r11,0(r11)
10005fb4:	213fffc4 	addi	r4,r4,-1
10005fb8:	58805c1e 	bne	r11,r2,1000612c <_malloc_r+0x7bc>
10005fbc:	20c000cc 	andi	r3,r4,3
10005fc0:	58bffe04 	addi	r2,r11,-8
10005fc4:	183ffa1e 	bne	r3,zero,10005fb0 <__alt_data_end+0xf8005fb0>
10005fc8:	98800117 	ldw	r2,4(r19)
10005fcc:	0146303a 	nor	r3,zero,r5
10005fd0:	1884703a 	and	r2,r3,r2
10005fd4:	98800115 	stw	r2,4(r19)
10005fd8:	294b883a 	add	r5,r5,r5
10005fdc:	117f2e36 	bltu	r2,r5,10005c98 <__alt_data_end+0xf8005c98>
10005fe0:	283f2d26 	beq	r5,zero,10005c98 <__alt_data_end+0xf8005c98>
10005fe4:	1146703a 	and	r3,r2,r5
10005fe8:	6009883a 	mov	r4,r12
10005fec:	183eef1e 	bne	r3,zero,10005bac <__alt_data_end+0xf8005bac>
10005ff0:	294b883a 	add	r5,r5,r5
10005ff4:	1146703a 	and	r3,r2,r5
10005ff8:	21000104 	addi	r4,r4,4
10005ffc:	183ffc26 	beq	r3,zero,10005ff0 <__alt_data_end+0xf8005ff0>
10006000:	003eea06 	br	10005bac <__alt_data_end+0xf8005bac>
10006004:	00805504 	movi	r2,340
10006008:	11001336 	bltu	r2,r4,10006058 <_malloc_r+0x6e8>
1000600c:	8808d3fa 	srli	r4,r17,15
10006010:	21001dc4 	addi	r4,r4,119
10006014:	210b883a 	add	r5,r4,r4
10006018:	003e9c06 	br	10005a8c <__alt_data_end+0xf8005a8c>
1000601c:	00840004 	movi	r2,4096
10006020:	003f4d06 	br	10005d58 <__alt_data_end+0xf8005d58>
10006024:	00800044 	movi	r2,1
10006028:	a0800115 	stw	r2,4(r20)
1000602c:	a021883a 	mov	r16,r20
10006030:	0007883a 	mov	r3,zero
10006034:	003f7506 	br	10005e0c <__alt_data_end+0xf8005e0c>
10006038:	280bd0ba 	srai	r5,r5,2
1000603c:	01800044 	movi	r6,1
10006040:	38800117 	ldw	r2,4(r7)
10006044:	314c983a 	sll	r6,r6,r5
10006048:	180b883a 	mov	r5,r3
1000604c:	3084b03a 	or	r2,r6,r2
10006050:	38800115 	stw	r2,4(r7)
10006054:	003f9d06 	br	10005ecc <__alt_data_end+0xf8005ecc>
10006058:	00815504 	movi	r2,1364
1000605c:	11001336 	bltu	r2,r4,100060ac <_malloc_r+0x73c>
10006060:	8808d4ba 	srli	r4,r17,18
10006064:	21001f04 	addi	r4,r4,124
10006068:	210b883a 	add	r5,r4,r4
1000606c:	003e8706 	br	10005a8c <__alt_data_end+0xf8005a8c>
10006070:	bdc00404 	addi	r23,r23,16
10006074:	003f1d06 	br	10005cec <__alt_data_end+0xf8005cec>
10006078:	01401504 	movi	r5,84
1000607c:	28c01c36 	bltu	r5,r3,100060f0 <_malloc_r+0x780>
10006080:	100ad33a 	srli	r5,r2,12
10006084:	29401b84 	addi	r5,r5,110
10006088:	294d883a 	add	r6,r5,r5
1000608c:	003f8006 	br	10005e90 <__alt_data_end+0xf8005e90>
10006090:	e103ffcc 	andi	r4,fp,4095
10006094:	203f241e 	bne	r4,zero,10005d28 <__alt_data_end+0xf8005d28>
10006098:	98c00217 	ldw	r3,8(r19)
1000609c:	bd49883a 	add	r4,r23,r21
100060a0:	21000054 	ori	r4,r4,1
100060a4:	19000115 	stw	r4,4(r3)
100060a8:	003f4a06 	br	10005dd4 <__alt_data_end+0xf8005dd4>
100060ac:	01403f04 	movi	r5,252
100060b0:	01001f84 	movi	r4,126
100060b4:	003e7506 	br	10005a8c <__alt_data_end+0xf8005a8c>
100060b8:	00c00044 	movi	r3,1
100060bc:	002f883a 	mov	r23,zero
100060c0:	003f3006 	br	10005d84 <__alt_data_end+0xf8005d84>
100060c4:	00840074 	movhi	r2,4097
100060c8:	10870f04 	addi	r2,r2,7228
100060cc:	15000015 	stw	r20,0(r2)
100060d0:	003f1b06 	br	10005d40 <__alt_data_end+0xf8005d40>
100060d4:	9009883a 	mov	r4,r18
100060d8:	81400204 	addi	r5,r16,8
100060dc:	00052b80 	call	100052b8 <_free_r>
100060e0:	00840074 	movhi	r2,4097
100060e4:	108de604 	addi	r2,r2,14232
100060e8:	10800017 	ldw	r2,0(r2)
100060ec:	003f3906 	br	10005dd4 <__alt_data_end+0xf8005dd4>
100060f0:	01405504 	movi	r5,340
100060f4:	28c00436 	bltu	r5,r3,10006108 <_malloc_r+0x798>
100060f8:	100ad3fa 	srli	r5,r2,15
100060fc:	29401dc4 	addi	r5,r5,119
10006100:	294d883a 	add	r6,r5,r5
10006104:	003f6206 	br	10005e90 <__alt_data_end+0xf8005e90>
10006108:	01415504 	movi	r5,1364
1000610c:	28c00436 	bltu	r5,r3,10006120 <_malloc_r+0x7b0>
10006110:	100ad4ba 	srli	r5,r2,18
10006114:	29401f04 	addi	r5,r5,124
10006118:	294d883a 	add	r6,r5,r5
1000611c:	003f5c06 	br	10005e90 <__alt_data_end+0xf8005e90>
10006120:	01803f04 	movi	r6,252
10006124:	01401f84 	movi	r5,126
10006128:	003f5906 	br	10005e90 <__alt_data_end+0xf8005e90>
1000612c:	98800117 	ldw	r2,4(r19)
10006130:	003fa906 	br	10005fd8 <__alt_data_end+0xf8005fd8>

10006134 <memchr>:
10006134:	208000cc 	andi	r2,r4,3
10006138:	2811883a 	mov	r8,r5
1000613c:	10003526 	beq	r2,zero,10006214 <memchr+0xe0>
10006140:	30bfffc4 	addi	r2,r6,-1
10006144:	30001b26 	beq	r6,zero,100061b4 <memchr+0x80>
10006148:	21800003 	ldbu	r6,0(r4)
1000614c:	28c03fcc 	andi	r3,r5,255
10006150:	30c01a26 	beq	r6,r3,100061bc <memchr+0x88>
10006154:	180d883a 	mov	r6,r3
10006158:	00000406 	br	1000616c <memchr+0x38>
1000615c:	10001526 	beq	r2,zero,100061b4 <memchr+0x80>
10006160:	20c00003 	ldbu	r3,0(r4)
10006164:	10bfffc4 	addi	r2,r2,-1
10006168:	19801426 	beq	r3,r6,100061bc <memchr+0x88>
1000616c:	21000044 	addi	r4,r4,1
10006170:	20c000cc 	andi	r3,r4,3
10006174:	183ff91e 	bne	r3,zero,1000615c <__alt_data_end+0xf800615c>
10006178:	02c000c4 	movi	r11,3
1000617c:	58801136 	bltu	r11,r2,100061c4 <memchr+0x90>
10006180:	10000c26 	beq	r2,zero,100061b4 <memchr+0x80>
10006184:	20c00003 	ldbu	r3,0(r4)
10006188:	29403fcc 	andi	r5,r5,255
1000618c:	19400b26 	beq	r3,r5,100061bc <memchr+0x88>
10006190:	20c00044 	addi	r3,r4,1
10006194:	2085883a 	add	r2,r4,r2
10006198:	41803fcc 	andi	r6,r8,255
1000619c:	00000306 	br	100061ac <memchr+0x78>
100061a0:	18c00044 	addi	r3,r3,1
100061a4:	197fffc3 	ldbu	r5,-1(r3)
100061a8:	29800426 	beq	r5,r6,100061bc <memchr+0x88>
100061ac:	1809883a 	mov	r4,r3
100061b0:	18bffb1e 	bne	r3,r2,100061a0 <__alt_data_end+0xf80061a0>
100061b4:	0005883a 	mov	r2,zero
100061b8:	f800283a 	ret
100061bc:	2005883a 	mov	r2,r4
100061c0:	f800283a 	ret
100061c4:	28c03fcc 	andi	r3,r5,255
100061c8:	180c923a 	slli	r6,r3,8
100061cc:	02bfbff4 	movhi	r10,65279
100061d0:	52bfbfc4 	addi	r10,r10,-257
100061d4:	02602074 	movhi	r9,32897
100061d8:	4a602004 	addi	r9,r9,-32640
100061dc:	30c6b03a 	or	r3,r6,r3
100061e0:	180c943a 	slli	r6,r3,16
100061e4:	30ccb03a 	or	r6,r6,r3
100061e8:	20c00017 	ldw	r3,0(r4)
100061ec:	30c6f03a 	xor	r3,r6,r3
100061f0:	1a8f883a 	add	r7,r3,r10
100061f4:	00c6303a 	nor	r3,zero,r3
100061f8:	38c6703a 	and	r3,r7,r3
100061fc:	1a46703a 	and	r3,r3,r9
10006200:	183fdf1e 	bne	r3,zero,10006180 <__alt_data_end+0xf8006180>
10006204:	10bfff04 	addi	r2,r2,-4
10006208:	21000104 	addi	r4,r4,4
1000620c:	58bff636 	bltu	r11,r2,100061e8 <__alt_data_end+0xf80061e8>
10006210:	003fdb06 	br	10006180 <__alt_data_end+0xf8006180>
10006214:	3005883a 	mov	r2,r6
10006218:	003fd706 	br	10006178 <__alt_data_end+0xf8006178>

1000621c <memcpy>:
1000621c:	00c003c4 	movi	r3,15
10006220:	2005883a 	mov	r2,r4
10006224:	1980372e 	bgeu	r3,r6,10006304 <memcpy+0xe8>
10006228:	2146b03a 	or	r3,r4,r5
1000622c:	18c000cc 	andi	r3,r3,3
10006230:	1800371e 	bne	r3,zero,10006310 <memcpy+0xf4>
10006234:	327ffc04 	addi	r9,r6,-16
10006238:	4812d13a 	srli	r9,r9,4
1000623c:	2007883a 	mov	r3,r4
10006240:	280f883a 	mov	r7,r5
10006244:	4808913a 	slli	r4,r9,4
10006248:	1109883a 	add	r4,r2,r4
1000624c:	21000404 	addi	r4,r4,16
10006250:	3a000017 	ldw	r8,0(r7)
10006254:	18c00404 	addi	r3,r3,16
10006258:	39c00404 	addi	r7,r7,16
1000625c:	1a3ffc15 	stw	r8,-16(r3)
10006260:	3a3ffd17 	ldw	r8,-12(r7)
10006264:	1a3ffd15 	stw	r8,-12(r3)
10006268:	3a3ffe17 	ldw	r8,-8(r7)
1000626c:	1a3ffe15 	stw	r8,-8(r3)
10006270:	3a3fff17 	ldw	r8,-4(r7)
10006274:	1a3fff15 	stw	r8,-4(r3)
10006278:	193ff51e 	bne	r3,r4,10006250 <__alt_data_end+0xf8006250>
1000627c:	49000044 	addi	r4,r9,1
10006280:	2008913a 	slli	r4,r4,4
10006284:	328003cc 	andi	r10,r6,15
10006288:	1107883a 	add	r3,r2,r4
1000628c:	290b883a 	add	r5,r5,r4
10006290:	010000c4 	movi	r4,3
10006294:	2280212e 	bgeu	r4,r10,1000631c <memcpy+0x100>
10006298:	52bfff04 	addi	r10,r10,-4
1000629c:	5014d0ba 	srli	r10,r10,2
100062a0:	180f883a 	mov	r7,r3
100062a4:	2811883a 	mov	r8,r5
100062a8:	5289883a 	add	r4,r10,r10
100062ac:	2109883a 	add	r4,r4,r4
100062b0:	21000104 	addi	r4,r4,4
100062b4:	1909883a 	add	r4,r3,r4
100062b8:	42400017 	ldw	r9,0(r8)
100062bc:	39c00104 	addi	r7,r7,4
100062c0:	42000104 	addi	r8,r8,4
100062c4:	3a7fff15 	stw	r9,-4(r7)
100062c8:	393ffb1e 	bne	r7,r4,100062b8 <__alt_data_end+0xf80062b8>
100062cc:	51000044 	addi	r4,r10,1
100062d0:	2109883a 	add	r4,r4,r4
100062d4:	2109883a 	add	r4,r4,r4
100062d8:	318000cc 	andi	r6,r6,3
100062dc:	1907883a 	add	r3,r3,r4
100062e0:	290b883a 	add	r5,r5,r4
100062e4:	30000c26 	beq	r6,zero,10006318 <memcpy+0xfc>
100062e8:	298d883a 	add	r6,r5,r6
100062ec:	29c00003 	ldbu	r7,0(r5)
100062f0:	18c00044 	addi	r3,r3,1
100062f4:	29400044 	addi	r5,r5,1
100062f8:	19ffffc5 	stb	r7,-1(r3)
100062fc:	29bffb1e 	bne	r5,r6,100062ec <__alt_data_end+0xf80062ec>
10006300:	f800283a 	ret
10006304:	2007883a 	mov	r3,r4
10006308:	303ff71e 	bne	r6,zero,100062e8 <__alt_data_end+0xf80062e8>
1000630c:	00000206 	br	10006318 <memcpy+0xfc>
10006310:	2007883a 	mov	r3,r4
10006314:	003ff406 	br	100062e8 <__alt_data_end+0xf80062e8>
10006318:	f800283a 	ret
1000631c:	500d883a 	mov	r6,r10
10006320:	303ff11e 	bne	r6,zero,100062e8 <__alt_data_end+0xf80062e8>
10006324:	003ffc06 	br	10006318 <__alt_data_end+0xf8006318>

10006328 <memset>:
10006328:	20c000cc 	andi	r3,r4,3
1000632c:	2005883a 	mov	r2,r4
10006330:	18003f26 	beq	r3,zero,10006430 <memset+0x108>
10006334:	31ffffc4 	addi	r7,r6,-1
10006338:	30003b26 	beq	r6,zero,10006428 <memset+0x100>
1000633c:	2813883a 	mov	r9,r5
10006340:	200d883a 	mov	r6,r4
10006344:	2007883a 	mov	r3,r4
10006348:	00000406 	br	1000635c <memset+0x34>
1000634c:	3a3fffc4 	addi	r8,r7,-1
10006350:	31800044 	addi	r6,r6,1
10006354:	38003426 	beq	r7,zero,10006428 <memset+0x100>
10006358:	400f883a 	mov	r7,r8
1000635c:	18c00044 	addi	r3,r3,1
10006360:	32400005 	stb	r9,0(r6)
10006364:	1a0000cc 	andi	r8,r3,3
10006368:	403ff81e 	bne	r8,zero,1000634c <__alt_data_end+0xf800634c>
1000636c:	010000c4 	movi	r4,3
10006370:	21c0282e 	bgeu	r4,r7,10006414 <memset+0xec>
10006374:	29003fcc 	andi	r4,r5,255
10006378:	2010923a 	slli	r8,r4,8
1000637c:	4108b03a 	or	r4,r8,r4
10006380:	2010943a 	slli	r8,r4,16
10006384:	4110b03a 	or	r8,r8,r4
10006388:	010003c4 	movi	r4,15
1000638c:	21c0122e 	bgeu	r4,r7,100063d8 <memset+0xb0>
10006390:	3a7ffc04 	addi	r9,r7,-16
10006394:	4812d13a 	srli	r9,r9,4
10006398:	19000404 	addi	r4,r3,16
1000639c:	180d883a 	mov	r6,r3
100063a0:	4814913a 	slli	r10,r9,4
100063a4:	2289883a 	add	r4,r4,r10
100063a8:	32000015 	stw	r8,0(r6)
100063ac:	32000115 	stw	r8,4(r6)
100063b0:	32000215 	stw	r8,8(r6)
100063b4:	32000315 	stw	r8,12(r6)
100063b8:	31800404 	addi	r6,r6,16
100063bc:	313ffa1e 	bne	r6,r4,100063a8 <__alt_data_end+0xf80063a8>
100063c0:	4a400044 	addi	r9,r9,1
100063c4:	4812913a 	slli	r9,r9,4
100063c8:	39c003cc 	andi	r7,r7,15
100063cc:	010000c4 	movi	r4,3
100063d0:	1a47883a 	add	r3,r3,r9
100063d4:	21c00f2e 	bgeu	r4,r7,10006414 <memset+0xec>
100063d8:	3a7fff04 	addi	r9,r7,-4
100063dc:	4812d0ba 	srli	r9,r9,2
100063e0:	19000104 	addi	r4,r3,4
100063e4:	180d883a 	mov	r6,r3
100063e8:	4a55883a 	add	r10,r9,r9
100063ec:	5295883a 	add	r10,r10,r10
100063f0:	2289883a 	add	r4,r4,r10
100063f4:	32000015 	stw	r8,0(r6)
100063f8:	31800104 	addi	r6,r6,4
100063fc:	313ffd1e 	bne	r6,r4,100063f4 <__alt_data_end+0xf80063f4>
10006400:	4a400044 	addi	r9,r9,1
10006404:	4a53883a 	add	r9,r9,r9
10006408:	4a53883a 	add	r9,r9,r9
1000640c:	1a47883a 	add	r3,r3,r9
10006410:	39c000cc 	andi	r7,r7,3
10006414:	38000526 	beq	r7,zero,1000642c <memset+0x104>
10006418:	19cf883a 	add	r7,r3,r7
1000641c:	19400005 	stb	r5,0(r3)
10006420:	18c00044 	addi	r3,r3,1
10006424:	19fffd1e 	bne	r3,r7,1000641c <__alt_data_end+0xf800641c>
10006428:	f800283a 	ret
1000642c:	f800283a 	ret
10006430:	2007883a 	mov	r3,r4
10006434:	300f883a 	mov	r7,r6
10006438:	003fcc06 	br	1000636c <__alt_data_end+0xf800636c>

1000643c <_Balloc>:
1000643c:	20801317 	ldw	r2,76(r4)
10006440:	defffc04 	addi	sp,sp,-16
10006444:	dc400115 	stw	r17,4(sp)
10006448:	dc000015 	stw	r16,0(sp)
1000644c:	dfc00315 	stw	ra,12(sp)
10006450:	dc800215 	stw	r18,8(sp)
10006454:	2023883a 	mov	r17,r4
10006458:	2821883a 	mov	r16,r5
1000645c:	10000f26 	beq	r2,zero,1000649c <_Balloc+0x60>
10006460:	8407883a 	add	r3,r16,r16
10006464:	18c7883a 	add	r3,r3,r3
10006468:	10c7883a 	add	r3,r2,r3
1000646c:	18800017 	ldw	r2,0(r3)
10006470:	10001126 	beq	r2,zero,100064b8 <_Balloc+0x7c>
10006474:	11000017 	ldw	r4,0(r2)
10006478:	19000015 	stw	r4,0(r3)
1000647c:	10000415 	stw	zero,16(r2)
10006480:	10000315 	stw	zero,12(r2)
10006484:	dfc00317 	ldw	ra,12(sp)
10006488:	dc800217 	ldw	r18,8(sp)
1000648c:	dc400117 	ldw	r17,4(sp)
10006490:	dc000017 	ldw	r16,0(sp)
10006494:	dec00404 	addi	sp,sp,16
10006498:	f800283a 	ret
1000649c:	01400104 	movi	r5,4
100064a0:	01800844 	movi	r6,33
100064a4:	0008dec0 	call	10008dec <_calloc_r>
100064a8:	88801315 	stw	r2,76(r17)
100064ac:	103fec1e 	bne	r2,zero,10006460 <__alt_data_end+0xf8006460>
100064b0:	0005883a 	mov	r2,zero
100064b4:	003ff306 	br	10006484 <__alt_data_end+0xf8006484>
100064b8:	01400044 	movi	r5,1
100064bc:	2c24983a 	sll	r18,r5,r16
100064c0:	8809883a 	mov	r4,r17
100064c4:	91800144 	addi	r6,r18,5
100064c8:	318d883a 	add	r6,r6,r6
100064cc:	318d883a 	add	r6,r6,r6
100064d0:	0008dec0 	call	10008dec <_calloc_r>
100064d4:	103ff626 	beq	r2,zero,100064b0 <__alt_data_end+0xf80064b0>
100064d8:	14000115 	stw	r16,4(r2)
100064dc:	14800215 	stw	r18,8(r2)
100064e0:	003fe606 	br	1000647c <__alt_data_end+0xf800647c>

100064e4 <_Bfree>:
100064e4:	28000826 	beq	r5,zero,10006508 <_Bfree+0x24>
100064e8:	28c00117 	ldw	r3,4(r5)
100064ec:	20801317 	ldw	r2,76(r4)
100064f0:	18c7883a 	add	r3,r3,r3
100064f4:	18c7883a 	add	r3,r3,r3
100064f8:	10c5883a 	add	r2,r2,r3
100064fc:	10c00017 	ldw	r3,0(r2)
10006500:	28c00015 	stw	r3,0(r5)
10006504:	11400015 	stw	r5,0(r2)
10006508:	f800283a 	ret

1000650c <__multadd>:
1000650c:	defff604 	addi	sp,sp,-40
10006510:	dd400515 	stw	r21,20(sp)
10006514:	2d400417 	ldw	r21,16(r5)
10006518:	df000815 	stw	fp,32(sp)
1000651c:	ddc00715 	stw	r23,28(sp)
10006520:	dd800615 	stw	r22,24(sp)
10006524:	dd000415 	stw	r20,16(sp)
10006528:	dc400115 	stw	r17,4(sp)
1000652c:	dc000015 	stw	r16,0(sp)
10006530:	dfc00915 	stw	ra,36(sp)
10006534:	dcc00315 	stw	r19,12(sp)
10006538:	dc800215 	stw	r18,8(sp)
1000653c:	282d883a 	mov	r22,r5
10006540:	202f883a 	mov	r23,r4
10006544:	3029883a 	mov	r20,r6
10006548:	3839883a 	mov	fp,r7
1000654c:	2c000504 	addi	r16,r5,20
10006550:	0023883a 	mov	r17,zero
10006554:	84c00017 	ldw	r19,0(r16)
10006558:	a00b883a 	mov	r5,r20
1000655c:	8c400044 	addi	r17,r17,1
10006560:	993fffcc 	andi	r4,r19,65535
10006564:	000b0240 	call	1000b024 <__mulsi3>
10006568:	1725883a 	add	r18,r2,fp
1000656c:	9808d43a 	srli	r4,r19,16
10006570:	9026d43a 	srli	r19,r18,16
10006574:	a00b883a 	mov	r5,r20
10006578:	000b0240 	call	1000b024 <__mulsi3>
1000657c:	988f883a 	add	r7,r19,r2
10006580:	3804943a 	slli	r2,r7,16
10006584:	94bfffcc 	andi	r18,r18,65535
10006588:	3838d43a 	srli	fp,r7,16
1000658c:	14a5883a 	add	r18,r2,r18
10006590:	84800015 	stw	r18,0(r16)
10006594:	84000104 	addi	r16,r16,4
10006598:	8d7fee16 	blt	r17,r21,10006554 <__alt_data_end+0xf8006554>
1000659c:	e0000926 	beq	fp,zero,100065c4 <__multadd+0xb8>
100065a0:	b0800217 	ldw	r2,8(r22)
100065a4:	a880140e 	bge	r21,r2,100065f8 <__multadd+0xec>
100065a8:	a8800144 	addi	r2,r21,5
100065ac:	1085883a 	add	r2,r2,r2
100065b0:	1085883a 	add	r2,r2,r2
100065b4:	b085883a 	add	r2,r22,r2
100065b8:	17000015 	stw	fp,0(r2)
100065bc:	ad400044 	addi	r21,r21,1
100065c0:	b5400415 	stw	r21,16(r22)
100065c4:	b005883a 	mov	r2,r22
100065c8:	dfc00917 	ldw	ra,36(sp)
100065cc:	df000817 	ldw	fp,32(sp)
100065d0:	ddc00717 	ldw	r23,28(sp)
100065d4:	dd800617 	ldw	r22,24(sp)
100065d8:	dd400517 	ldw	r21,20(sp)
100065dc:	dd000417 	ldw	r20,16(sp)
100065e0:	dcc00317 	ldw	r19,12(sp)
100065e4:	dc800217 	ldw	r18,8(sp)
100065e8:	dc400117 	ldw	r17,4(sp)
100065ec:	dc000017 	ldw	r16,0(sp)
100065f0:	dec00a04 	addi	sp,sp,40
100065f4:	f800283a 	ret
100065f8:	b1400117 	ldw	r5,4(r22)
100065fc:	b809883a 	mov	r4,r23
10006600:	29400044 	addi	r5,r5,1
10006604:	000643c0 	call	1000643c <_Balloc>
10006608:	b1800417 	ldw	r6,16(r22)
1000660c:	b1400304 	addi	r5,r22,12
10006610:	11000304 	addi	r4,r2,12
10006614:	31800084 	addi	r6,r6,2
10006618:	318d883a 	add	r6,r6,r6
1000661c:	318d883a 	add	r6,r6,r6
10006620:	1021883a 	mov	r16,r2
10006624:	000621c0 	call	1000621c <memcpy>
10006628:	b0c00117 	ldw	r3,4(r22)
1000662c:	b8801317 	ldw	r2,76(r23)
10006630:	18c7883a 	add	r3,r3,r3
10006634:	18c7883a 	add	r3,r3,r3
10006638:	10c5883a 	add	r2,r2,r3
1000663c:	10c00017 	ldw	r3,0(r2)
10006640:	b0c00015 	stw	r3,0(r22)
10006644:	15800015 	stw	r22,0(r2)
10006648:	802d883a 	mov	r22,r16
1000664c:	003fd606 	br	100065a8 <__alt_data_end+0xf80065a8>

10006650 <__s2b>:
10006650:	defff904 	addi	sp,sp,-28
10006654:	dd000415 	stw	r20,16(sp)
10006658:	dc400115 	stw	r17,4(sp)
1000665c:	2829883a 	mov	r20,r5
10006660:	2023883a 	mov	r17,r4
10006664:	01400244 	movi	r5,9
10006668:	39000204 	addi	r4,r7,8
1000666c:	dcc00315 	stw	r19,12(sp)
10006670:	dc800215 	stw	r18,8(sp)
10006674:	dfc00615 	stw	ra,24(sp)
10006678:	dd400515 	stw	r21,20(sp)
1000667c:	dc000015 	stw	r16,0(sp)
10006680:	3827883a 	mov	r19,r7
10006684:	3025883a 	mov	r18,r6
10006688:	000af800 	call	1000af80 <__divsi3>
1000668c:	00c00044 	movi	r3,1
10006690:	000b883a 	mov	r5,zero
10006694:	1880030e 	bge	r3,r2,100066a4 <__s2b+0x54>
10006698:	18c7883a 	add	r3,r3,r3
1000669c:	29400044 	addi	r5,r5,1
100066a0:	18bffd16 	blt	r3,r2,10006698 <__alt_data_end+0xf8006698>
100066a4:	8809883a 	mov	r4,r17
100066a8:	000643c0 	call	1000643c <_Balloc>
100066ac:	d8c00717 	ldw	r3,28(sp)
100066b0:	10c00515 	stw	r3,20(r2)
100066b4:	00c00044 	movi	r3,1
100066b8:	10c00415 	stw	r3,16(r2)
100066bc:	00c00244 	movi	r3,9
100066c0:	1c80210e 	bge	r3,r18,10006748 <__s2b+0xf8>
100066c4:	a0eb883a 	add	r21,r20,r3
100066c8:	a821883a 	mov	r16,r21
100066cc:	a4a9883a 	add	r20,r20,r18
100066d0:	81c00007 	ldb	r7,0(r16)
100066d4:	8809883a 	mov	r4,r17
100066d8:	84000044 	addi	r16,r16,1
100066dc:	100b883a 	mov	r5,r2
100066e0:	01800284 	movi	r6,10
100066e4:	39fff404 	addi	r7,r7,-48
100066e8:	000650c0 	call	1000650c <__multadd>
100066ec:	853ff81e 	bne	r16,r20,100066d0 <__alt_data_end+0xf80066d0>
100066f0:	aca1883a 	add	r16,r21,r18
100066f4:	843ffe04 	addi	r16,r16,-8
100066f8:	94c00a0e 	bge	r18,r19,10006724 <__s2b+0xd4>
100066fc:	84e7883a 	add	r19,r16,r19
10006700:	9ca5c83a 	sub	r18,r19,r18
10006704:	81c00007 	ldb	r7,0(r16)
10006708:	8809883a 	mov	r4,r17
1000670c:	84000044 	addi	r16,r16,1
10006710:	100b883a 	mov	r5,r2
10006714:	01800284 	movi	r6,10
10006718:	39fff404 	addi	r7,r7,-48
1000671c:	000650c0 	call	1000650c <__multadd>
10006720:	84bff81e 	bne	r16,r18,10006704 <__alt_data_end+0xf8006704>
10006724:	dfc00617 	ldw	ra,24(sp)
10006728:	dd400517 	ldw	r21,20(sp)
1000672c:	dd000417 	ldw	r20,16(sp)
10006730:	dcc00317 	ldw	r19,12(sp)
10006734:	dc800217 	ldw	r18,8(sp)
10006738:	dc400117 	ldw	r17,4(sp)
1000673c:	dc000017 	ldw	r16,0(sp)
10006740:	dec00704 	addi	sp,sp,28
10006744:	f800283a 	ret
10006748:	a4000284 	addi	r16,r20,10
1000674c:	1825883a 	mov	r18,r3
10006750:	003fe906 	br	100066f8 <__alt_data_end+0xf80066f8>

10006754 <__hi0bits>:
10006754:	20bfffec 	andhi	r2,r4,65535
10006758:	1000141e 	bne	r2,zero,100067ac <__hi0bits+0x58>
1000675c:	2008943a 	slli	r4,r4,16
10006760:	00800404 	movi	r2,16
10006764:	20ffc02c 	andhi	r3,r4,65280
10006768:	1800021e 	bne	r3,zero,10006774 <__hi0bits+0x20>
1000676c:	2008923a 	slli	r4,r4,8
10006770:	10800204 	addi	r2,r2,8
10006774:	20fc002c 	andhi	r3,r4,61440
10006778:	1800021e 	bne	r3,zero,10006784 <__hi0bits+0x30>
1000677c:	2008913a 	slli	r4,r4,4
10006780:	10800104 	addi	r2,r2,4
10006784:	20f0002c 	andhi	r3,r4,49152
10006788:	1800031e 	bne	r3,zero,10006798 <__hi0bits+0x44>
1000678c:	2109883a 	add	r4,r4,r4
10006790:	10800084 	addi	r2,r2,2
10006794:	2109883a 	add	r4,r4,r4
10006798:	20000316 	blt	r4,zero,100067a8 <__hi0bits+0x54>
1000679c:	2110002c 	andhi	r4,r4,16384
100067a0:	2000041e 	bne	r4,zero,100067b4 <__hi0bits+0x60>
100067a4:	00800804 	movi	r2,32
100067a8:	f800283a 	ret
100067ac:	0005883a 	mov	r2,zero
100067b0:	003fec06 	br	10006764 <__alt_data_end+0xf8006764>
100067b4:	10800044 	addi	r2,r2,1
100067b8:	f800283a 	ret

100067bc <__lo0bits>:
100067bc:	20c00017 	ldw	r3,0(r4)
100067c0:	188001cc 	andi	r2,r3,7
100067c4:	10000826 	beq	r2,zero,100067e8 <__lo0bits+0x2c>
100067c8:	1880004c 	andi	r2,r3,1
100067cc:	1000211e 	bne	r2,zero,10006854 <__lo0bits+0x98>
100067d0:	1880008c 	andi	r2,r3,2
100067d4:	1000211e 	bne	r2,zero,1000685c <__lo0bits+0xa0>
100067d8:	1806d0ba 	srli	r3,r3,2
100067dc:	00800084 	movi	r2,2
100067e0:	20c00015 	stw	r3,0(r4)
100067e4:	f800283a 	ret
100067e8:	18bfffcc 	andi	r2,r3,65535
100067ec:	10001326 	beq	r2,zero,1000683c <__lo0bits+0x80>
100067f0:	0005883a 	mov	r2,zero
100067f4:	19403fcc 	andi	r5,r3,255
100067f8:	2800021e 	bne	r5,zero,10006804 <__lo0bits+0x48>
100067fc:	1806d23a 	srli	r3,r3,8
10006800:	10800204 	addi	r2,r2,8
10006804:	194003cc 	andi	r5,r3,15
10006808:	2800021e 	bne	r5,zero,10006814 <__lo0bits+0x58>
1000680c:	1806d13a 	srli	r3,r3,4
10006810:	10800104 	addi	r2,r2,4
10006814:	194000cc 	andi	r5,r3,3
10006818:	2800021e 	bne	r5,zero,10006824 <__lo0bits+0x68>
1000681c:	1806d0ba 	srli	r3,r3,2
10006820:	10800084 	addi	r2,r2,2
10006824:	1940004c 	andi	r5,r3,1
10006828:	2800081e 	bne	r5,zero,1000684c <__lo0bits+0x90>
1000682c:	1806d07a 	srli	r3,r3,1
10006830:	1800051e 	bne	r3,zero,10006848 <__lo0bits+0x8c>
10006834:	00800804 	movi	r2,32
10006838:	f800283a 	ret
1000683c:	1806d43a 	srli	r3,r3,16
10006840:	00800404 	movi	r2,16
10006844:	003feb06 	br	100067f4 <__alt_data_end+0xf80067f4>
10006848:	10800044 	addi	r2,r2,1
1000684c:	20c00015 	stw	r3,0(r4)
10006850:	f800283a 	ret
10006854:	0005883a 	mov	r2,zero
10006858:	f800283a 	ret
1000685c:	1806d07a 	srli	r3,r3,1
10006860:	00800044 	movi	r2,1
10006864:	20c00015 	stw	r3,0(r4)
10006868:	f800283a 	ret

1000686c <__i2b>:
1000686c:	defffd04 	addi	sp,sp,-12
10006870:	dc000015 	stw	r16,0(sp)
10006874:	04000044 	movi	r16,1
10006878:	dc400115 	stw	r17,4(sp)
1000687c:	2823883a 	mov	r17,r5
10006880:	800b883a 	mov	r5,r16
10006884:	dfc00215 	stw	ra,8(sp)
10006888:	000643c0 	call	1000643c <_Balloc>
1000688c:	14400515 	stw	r17,20(r2)
10006890:	14000415 	stw	r16,16(r2)
10006894:	dfc00217 	ldw	ra,8(sp)
10006898:	dc400117 	ldw	r17,4(sp)
1000689c:	dc000017 	ldw	r16,0(sp)
100068a0:	dec00304 	addi	sp,sp,12
100068a4:	f800283a 	ret

100068a8 <__multiply>:
100068a8:	defff004 	addi	sp,sp,-64
100068ac:	dc400715 	stw	r17,28(sp)
100068b0:	dc000615 	stw	r16,24(sp)
100068b4:	34400417 	ldw	r17,16(r6)
100068b8:	2c000417 	ldw	r16,16(r5)
100068bc:	df000e15 	stw	fp,56(sp)
100068c0:	dd000a15 	stw	r20,40(sp)
100068c4:	dfc00f15 	stw	ra,60(sp)
100068c8:	ddc00d15 	stw	r23,52(sp)
100068cc:	dd800c15 	stw	r22,48(sp)
100068d0:	dd400b15 	stw	r21,44(sp)
100068d4:	dcc00915 	stw	r19,36(sp)
100068d8:	dc800815 	stw	r18,32(sp)
100068dc:	2839883a 	mov	fp,r5
100068e0:	3029883a 	mov	r20,r6
100068e4:	8440050e 	bge	r16,r17,100068fc <__multiply+0x54>
100068e8:	8007883a 	mov	r3,r16
100068ec:	3039883a 	mov	fp,r6
100068f0:	8821883a 	mov	r16,r17
100068f4:	2829883a 	mov	r20,r5
100068f8:	1823883a 	mov	r17,r3
100068fc:	e0800217 	ldw	r2,8(fp)
10006900:	8447883a 	add	r3,r16,r17
10006904:	d8c00115 	stw	r3,4(sp)
10006908:	e1400117 	ldw	r5,4(fp)
1000690c:	10c0010e 	bge	r2,r3,10006914 <__multiply+0x6c>
10006910:	29400044 	addi	r5,r5,1
10006914:	000643c0 	call	1000643c <_Balloc>
10006918:	d8c00117 	ldw	r3,4(sp)
1000691c:	d8800515 	stw	r2,20(sp)
10006920:	18ef883a 	add	r23,r3,r3
10006924:	bdef883a 	add	r23,r23,r23
10006928:	10c00504 	addi	r3,r2,20
1000692c:	1def883a 	add	r23,r3,r23
10006930:	d8c00015 	stw	r3,0(sp)
10006934:	ddc00215 	stw	r23,8(sp)
10006938:	1805883a 	mov	r2,r3
1000693c:	1dc0042e 	bgeu	r3,r23,10006950 <__multiply+0xa8>
10006940:	d8c00217 	ldw	r3,8(sp)
10006944:	10000015 	stw	zero,0(r2)
10006948:	10800104 	addi	r2,r2,4
1000694c:	10fffc36 	bltu	r2,r3,10006940 <__alt_data_end+0xf8006940>
10006950:	8c63883a 	add	r17,r17,r17
10006954:	a5000504 	addi	r20,r20,20
10006958:	8c63883a 	add	r17,r17,r17
1000695c:	e7000504 	addi	fp,fp,20
10006960:	8421883a 	add	r16,r16,r16
10006964:	a463883a 	add	r17,r20,r17
10006968:	8421883a 	add	r16,r16,r16
1000696c:	df000315 	stw	fp,12(sp)
10006970:	dc400415 	stw	r17,16(sp)
10006974:	e425883a 	add	r18,fp,r16
10006978:	a440482e 	bgeu	r20,r17,10006a9c <__multiply+0x1f4>
1000697c:	a4000017 	ldw	r16,0(r20)
10006980:	847fffcc 	andi	r17,r16,65535
10006984:	88001d26 	beq	r17,zero,100069fc <__multiply+0x154>
10006988:	dc000017 	ldw	r16,0(sp)
1000698c:	dcc00317 	ldw	r19,12(sp)
10006990:	002b883a 	mov	r21,zero
10006994:	9dc00017 	ldw	r23,0(r19)
10006998:	85800017 	ldw	r22,0(r16)
1000699c:	880b883a 	mov	r5,r17
100069a0:	b93fffcc 	andi	r4,r23,65535
100069a4:	000b0240 	call	1000b024 <__mulsi3>
100069a8:	b808d43a 	srli	r4,r23,16
100069ac:	b0ffffcc 	andi	r3,r22,65535
100069b0:	1885883a 	add	r2,r3,r2
100069b4:	880b883a 	mov	r5,r17
100069b8:	156b883a 	add	r21,r2,r21
100069bc:	b02cd43a 	srli	r22,r22,16
100069c0:	000b0240 	call	1000b024 <__mulsi3>
100069c4:	a808d43a 	srli	r4,r21,16
100069c8:	b085883a 	add	r2,r22,r2
100069cc:	a8ffffcc 	andi	r3,r21,65535
100069d0:	110d883a 	add	r6,r2,r4
100069d4:	3004943a 	slli	r2,r6,16
100069d8:	9cc00104 	addi	r19,r19,4
100069dc:	8009883a 	mov	r4,r16
100069e0:	10c6b03a 	or	r3,r2,r3
100069e4:	80c00015 	stw	r3,0(r16)
100069e8:	302ad43a 	srli	r21,r6,16
100069ec:	84000104 	addi	r16,r16,4
100069f0:	9cbfe836 	bltu	r19,r18,10006994 <__alt_data_end+0xf8006994>
100069f4:	25400115 	stw	r21,4(r4)
100069f8:	a4000017 	ldw	r16,0(r20)
100069fc:	8020d43a 	srli	r16,r16,16
10006a00:	80002026 	beq	r16,zero,10006a84 <__multiply+0x1dc>
10006a04:	d8c00017 	ldw	r3,0(sp)
10006a08:	dd400317 	ldw	r21,12(sp)
10006a0c:	002f883a 	mov	r23,zero
10006a10:	1f000017 	ldw	fp,0(r3)
10006a14:	182d883a 	mov	r22,r3
10006a18:	e023883a 	mov	r17,fp
10006a1c:	a900000b 	ldhu	r4,0(r21)
10006a20:	8822d43a 	srli	r17,r17,16
10006a24:	800b883a 	mov	r5,r16
10006a28:	000b0240 	call	1000b024 <__mulsi3>
10006a2c:	1445883a 	add	r2,r2,r17
10006a30:	15ef883a 	add	r23,r2,r23
10006a34:	b804943a 	slli	r2,r23,16
10006a38:	e1ffffcc 	andi	r7,fp,65535
10006a3c:	ad400104 	addi	r21,r21,4
10006a40:	11ceb03a 	or	r7,r2,r7
10006a44:	b1c00015 	stw	r7,0(r22)
10006a48:	a93fff17 	ldw	r4,-4(r21)
10006a4c:	b7000117 	ldw	fp,4(r22)
10006a50:	800b883a 	mov	r5,r16
10006a54:	2008d43a 	srli	r4,r4,16
10006a58:	e023883a 	mov	r17,fp
10006a5c:	b027883a 	mov	r19,r22
10006a60:	000b0240 	call	1000b024 <__mulsi3>
10006a64:	b812d43a 	srli	r9,r23,16
10006a68:	e23fffcc 	andi	r8,fp,65535
10006a6c:	1205883a 	add	r2,r2,r8
10006a70:	1279883a 	add	fp,r2,r9
10006a74:	b5800104 	addi	r22,r22,4
10006a78:	e02ed43a 	srli	r23,fp,16
10006a7c:	acbfe736 	bltu	r21,r18,10006a1c <__alt_data_end+0xf8006a1c>
10006a80:	9f000115 	stw	fp,4(r19)
10006a84:	d8c00017 	ldw	r3,0(sp)
10006a88:	a5000104 	addi	r20,r20,4
10006a8c:	18c00104 	addi	r3,r3,4
10006a90:	d8c00015 	stw	r3,0(sp)
10006a94:	d8c00417 	ldw	r3,16(sp)
10006a98:	a0ffb836 	bltu	r20,r3,1000697c <__alt_data_end+0xf800697c>
10006a9c:	d8c00117 	ldw	r3,4(sp)
10006aa0:	00c00c0e 	bge	zero,r3,10006ad4 <__multiply+0x22c>
10006aa4:	d8c00217 	ldw	r3,8(sp)
10006aa8:	18bfff17 	ldw	r2,-4(r3)
10006aac:	1dffff04 	addi	r23,r3,-4
10006ab0:	10000326 	beq	r2,zero,10006ac0 <__multiply+0x218>
10006ab4:	00000706 	br	10006ad4 <__multiply+0x22c>
10006ab8:	b8800017 	ldw	r2,0(r23)
10006abc:	1000051e 	bne	r2,zero,10006ad4 <__multiply+0x22c>
10006ac0:	d8c00117 	ldw	r3,4(sp)
10006ac4:	bdffff04 	addi	r23,r23,-4
10006ac8:	18ffffc4 	addi	r3,r3,-1
10006acc:	d8c00115 	stw	r3,4(sp)
10006ad0:	183ff91e 	bne	r3,zero,10006ab8 <__alt_data_end+0xf8006ab8>
10006ad4:	d8c00517 	ldw	r3,20(sp)
10006ad8:	d9000117 	ldw	r4,4(sp)
10006adc:	1805883a 	mov	r2,r3
10006ae0:	19000415 	stw	r4,16(r3)
10006ae4:	dfc00f17 	ldw	ra,60(sp)
10006ae8:	df000e17 	ldw	fp,56(sp)
10006aec:	ddc00d17 	ldw	r23,52(sp)
10006af0:	dd800c17 	ldw	r22,48(sp)
10006af4:	dd400b17 	ldw	r21,44(sp)
10006af8:	dd000a17 	ldw	r20,40(sp)
10006afc:	dcc00917 	ldw	r19,36(sp)
10006b00:	dc800817 	ldw	r18,32(sp)
10006b04:	dc400717 	ldw	r17,28(sp)
10006b08:	dc000617 	ldw	r16,24(sp)
10006b0c:	dec01004 	addi	sp,sp,64
10006b10:	f800283a 	ret

10006b14 <__pow5mult>:
10006b14:	defffa04 	addi	sp,sp,-24
10006b18:	dcc00315 	stw	r19,12(sp)
10006b1c:	dc800215 	stw	r18,8(sp)
10006b20:	dc000015 	stw	r16,0(sp)
10006b24:	dfc00515 	stw	ra,20(sp)
10006b28:	dd000415 	stw	r20,16(sp)
10006b2c:	dc400115 	stw	r17,4(sp)
10006b30:	308000cc 	andi	r2,r6,3
10006b34:	3021883a 	mov	r16,r6
10006b38:	2027883a 	mov	r19,r4
10006b3c:	2825883a 	mov	r18,r5
10006b40:	1000301e 	bne	r2,zero,10006c04 <__pow5mult+0xf0>
10006b44:	8021d0ba 	srai	r16,r16,2
10006b48:	80001b26 	beq	r16,zero,10006bb8 <__pow5mult+0xa4>
10006b4c:	9c401217 	ldw	r17,72(r19)
10006b50:	88003726 	beq	r17,zero,10006c30 <__pow5mult+0x11c>
10006b54:	80c0004c 	andi	r3,r16,1
10006b58:	1800071e 	bne	r3,zero,10006b78 <__pow5mult+0x64>
10006b5c:	8021d07a 	srai	r16,r16,1
10006b60:	80001526 	beq	r16,zero,10006bb8 <__pow5mult+0xa4>
10006b64:	88800017 	ldw	r2,0(r17)
10006b68:	10001c26 	beq	r2,zero,10006bdc <__pow5mult+0xc8>
10006b6c:	1023883a 	mov	r17,r2
10006b70:	80c0004c 	andi	r3,r16,1
10006b74:	183ff926 	beq	r3,zero,10006b5c <__alt_data_end+0xf8006b5c>
10006b78:	900b883a 	mov	r5,r18
10006b7c:	880d883a 	mov	r6,r17
10006b80:	9809883a 	mov	r4,r19
10006b84:	00068a80 	call	100068a8 <__multiply>
10006b88:	90001c26 	beq	r18,zero,10006bfc <__pow5mult+0xe8>
10006b8c:	91000117 	ldw	r4,4(r18)
10006b90:	98c01317 	ldw	r3,76(r19)
10006b94:	8021d07a 	srai	r16,r16,1
10006b98:	2109883a 	add	r4,r4,r4
10006b9c:	2109883a 	add	r4,r4,r4
10006ba0:	1907883a 	add	r3,r3,r4
10006ba4:	19000017 	ldw	r4,0(r3)
10006ba8:	91000015 	stw	r4,0(r18)
10006bac:	1c800015 	stw	r18,0(r3)
10006bb0:	1025883a 	mov	r18,r2
10006bb4:	803feb1e 	bne	r16,zero,10006b64 <__alt_data_end+0xf8006b64>
10006bb8:	9005883a 	mov	r2,r18
10006bbc:	dfc00517 	ldw	ra,20(sp)
10006bc0:	dd000417 	ldw	r20,16(sp)
10006bc4:	dcc00317 	ldw	r19,12(sp)
10006bc8:	dc800217 	ldw	r18,8(sp)
10006bcc:	dc400117 	ldw	r17,4(sp)
10006bd0:	dc000017 	ldw	r16,0(sp)
10006bd4:	dec00604 	addi	sp,sp,24
10006bd8:	f800283a 	ret
10006bdc:	880b883a 	mov	r5,r17
10006be0:	880d883a 	mov	r6,r17
10006be4:	9809883a 	mov	r4,r19
10006be8:	00068a80 	call	100068a8 <__multiply>
10006bec:	88800015 	stw	r2,0(r17)
10006bf0:	10000015 	stw	zero,0(r2)
10006bf4:	1023883a 	mov	r17,r2
10006bf8:	003fdd06 	br	10006b70 <__alt_data_end+0xf8006b70>
10006bfc:	1025883a 	mov	r18,r2
10006c00:	003fd606 	br	10006b5c <__alt_data_end+0xf8006b5c>
10006c04:	10bfffc4 	addi	r2,r2,-1
10006c08:	1085883a 	add	r2,r2,r2
10006c0c:	00c40074 	movhi	r3,4097
10006c10:	18ffc104 	addi	r3,r3,-252
10006c14:	1085883a 	add	r2,r2,r2
10006c18:	1885883a 	add	r2,r3,r2
10006c1c:	11800017 	ldw	r6,0(r2)
10006c20:	000f883a 	mov	r7,zero
10006c24:	000650c0 	call	1000650c <__multadd>
10006c28:	1025883a 	mov	r18,r2
10006c2c:	003fc506 	br	10006b44 <__alt_data_end+0xf8006b44>
10006c30:	05000044 	movi	r20,1
10006c34:	9809883a 	mov	r4,r19
10006c38:	a00b883a 	mov	r5,r20
10006c3c:	000643c0 	call	1000643c <_Balloc>
10006c40:	1023883a 	mov	r17,r2
10006c44:	00809c44 	movi	r2,625
10006c48:	88800515 	stw	r2,20(r17)
10006c4c:	8d000415 	stw	r20,16(r17)
10006c50:	9c401215 	stw	r17,72(r19)
10006c54:	88000015 	stw	zero,0(r17)
10006c58:	003fbe06 	br	10006b54 <__alt_data_end+0xf8006b54>

10006c5c <__lshift>:
10006c5c:	defff904 	addi	sp,sp,-28
10006c60:	dd000415 	stw	r20,16(sp)
10006c64:	dc400115 	stw	r17,4(sp)
10006c68:	2d000417 	ldw	r20,16(r5)
10006c6c:	3023d17a 	srai	r17,r6,5
10006c70:	28800217 	ldw	r2,8(r5)
10006c74:	dd400515 	stw	r21,20(sp)
10006c78:	8d29883a 	add	r20,r17,r20
10006c7c:	dcc00315 	stw	r19,12(sp)
10006c80:	dc800215 	stw	r18,8(sp)
10006c84:	dc000015 	stw	r16,0(sp)
10006c88:	dfc00615 	stw	ra,24(sp)
10006c8c:	a4000044 	addi	r16,r20,1
10006c90:	2825883a 	mov	r18,r5
10006c94:	302b883a 	mov	r21,r6
10006c98:	2027883a 	mov	r19,r4
10006c9c:	29400117 	ldw	r5,4(r5)
10006ca0:	1400030e 	bge	r2,r16,10006cb0 <__lshift+0x54>
10006ca4:	1085883a 	add	r2,r2,r2
10006ca8:	29400044 	addi	r5,r5,1
10006cac:	143ffd16 	blt	r2,r16,10006ca4 <__alt_data_end+0xf8006ca4>
10006cb0:	9809883a 	mov	r4,r19
10006cb4:	000643c0 	call	1000643c <_Balloc>
10006cb8:	11000504 	addi	r4,r2,20
10006cbc:	0440090e 	bge	zero,r17,10006ce4 <__lshift+0x88>
10006cc0:	200f883a 	mov	r7,r4
10006cc4:	0007883a 	mov	r3,zero
10006cc8:	38000015 	stw	zero,0(r7)
10006ccc:	18c00044 	addi	r3,r3,1
10006cd0:	39c00104 	addi	r7,r7,4
10006cd4:	1c7ffc1e 	bne	r3,r17,10006cc8 <__alt_data_end+0xf8006cc8>
10006cd8:	18c7883a 	add	r3,r3,r3
10006cdc:	18c7883a 	add	r3,r3,r3
10006ce0:	20c9883a 	add	r4,r4,r3
10006ce4:	92400417 	ldw	r9,16(r18)
10006ce8:	90c00504 	addi	r3,r18,20
10006cec:	a98007cc 	andi	r6,r21,31
10006cf0:	4a53883a 	add	r9,r9,r9
10006cf4:	4a53883a 	add	r9,r9,r9
10006cf8:	1a53883a 	add	r9,r3,r9
10006cfc:	30002426 	beq	r6,zero,10006d90 <__lshift+0x134>
10006d00:	01400804 	movi	r5,32
10006d04:	298bc83a 	sub	r5,r5,r6
10006d08:	200f883a 	mov	r7,r4
10006d0c:	0011883a 	mov	r8,zero
10006d10:	1a800017 	ldw	r10,0(r3)
10006d14:	3809883a 	mov	r4,r7
10006d18:	39c00104 	addi	r7,r7,4
10006d1c:	5194983a 	sll	r10,r10,r6
10006d20:	18c00104 	addi	r3,r3,4
10006d24:	4290b03a 	or	r8,r8,r10
10006d28:	3a3fff15 	stw	r8,-4(r7)
10006d2c:	1a3fff17 	ldw	r8,-4(r3)
10006d30:	4150d83a 	srl	r8,r8,r5
10006d34:	1a7ff636 	bltu	r3,r9,10006d10 <__alt_data_end+0xf8006d10>
10006d38:	22000115 	stw	r8,4(r4)
10006d3c:	40000126 	beq	r8,zero,10006d44 <__lshift+0xe8>
10006d40:	a4000084 	addi	r16,r20,2
10006d44:	91000117 	ldw	r4,4(r18)
10006d48:	98c01317 	ldw	r3,76(r19)
10006d4c:	843fffc4 	addi	r16,r16,-1
10006d50:	2109883a 	add	r4,r4,r4
10006d54:	2109883a 	add	r4,r4,r4
10006d58:	1907883a 	add	r3,r3,r4
10006d5c:	19000017 	ldw	r4,0(r3)
10006d60:	14000415 	stw	r16,16(r2)
10006d64:	91000015 	stw	r4,0(r18)
10006d68:	1c800015 	stw	r18,0(r3)
10006d6c:	dfc00617 	ldw	ra,24(sp)
10006d70:	dd400517 	ldw	r21,20(sp)
10006d74:	dd000417 	ldw	r20,16(sp)
10006d78:	dcc00317 	ldw	r19,12(sp)
10006d7c:	dc800217 	ldw	r18,8(sp)
10006d80:	dc400117 	ldw	r17,4(sp)
10006d84:	dc000017 	ldw	r16,0(sp)
10006d88:	dec00704 	addi	sp,sp,28
10006d8c:	f800283a 	ret
10006d90:	200f883a 	mov	r7,r4
10006d94:	19800017 	ldw	r6,0(r3)
10006d98:	39c00104 	addi	r7,r7,4
10006d9c:	18c00104 	addi	r3,r3,4
10006da0:	39bfff15 	stw	r6,-4(r7)
10006da4:	1a7ffb36 	bltu	r3,r9,10006d94 <__alt_data_end+0xf8006d94>
10006da8:	003fe606 	br	10006d44 <__alt_data_end+0xf8006d44>

10006dac <__mcmp>:
10006dac:	20800417 	ldw	r2,16(r4)
10006db0:	28c00417 	ldw	r3,16(r5)
10006db4:	10c5c83a 	sub	r2,r2,r3
10006db8:	1000111e 	bne	r2,zero,10006e00 <__mcmp+0x54>
10006dbc:	18c7883a 	add	r3,r3,r3
10006dc0:	18c7883a 	add	r3,r3,r3
10006dc4:	21000504 	addi	r4,r4,20
10006dc8:	29400504 	addi	r5,r5,20
10006dcc:	20c5883a 	add	r2,r4,r3
10006dd0:	28cb883a 	add	r5,r5,r3
10006dd4:	00000106 	br	10006ddc <__mcmp+0x30>
10006dd8:	2080082e 	bgeu	r4,r2,10006dfc <__mcmp+0x50>
10006ddc:	10bfff04 	addi	r2,r2,-4
10006de0:	297fff04 	addi	r5,r5,-4
10006de4:	11800017 	ldw	r6,0(r2)
10006de8:	28c00017 	ldw	r3,0(r5)
10006dec:	30fffa26 	beq	r6,r3,10006dd8 <__alt_data_end+0xf8006dd8>
10006df0:	30c00436 	bltu	r6,r3,10006e04 <__mcmp+0x58>
10006df4:	00800044 	movi	r2,1
10006df8:	f800283a 	ret
10006dfc:	0005883a 	mov	r2,zero
10006e00:	f800283a 	ret
10006e04:	00bfffc4 	movi	r2,-1
10006e08:	f800283a 	ret

10006e0c <__mdiff>:
10006e0c:	defffc04 	addi	sp,sp,-16
10006e10:	dc000015 	stw	r16,0(sp)
10006e14:	2821883a 	mov	r16,r5
10006e18:	200f883a 	mov	r7,r4
10006e1c:	300b883a 	mov	r5,r6
10006e20:	8009883a 	mov	r4,r16
10006e24:	dc400115 	stw	r17,4(sp)
10006e28:	dfc00315 	stw	ra,12(sp)
10006e2c:	dc800215 	stw	r18,8(sp)
10006e30:	3023883a 	mov	r17,r6
10006e34:	0006dac0 	call	10006dac <__mcmp>
10006e38:	10005226 	beq	r2,zero,10006f84 <__mdiff+0x178>
10006e3c:	10004c16 	blt	r2,zero,10006f70 <__mdiff+0x164>
10006e40:	0025883a 	mov	r18,zero
10006e44:	81400117 	ldw	r5,4(r16)
10006e48:	3809883a 	mov	r4,r7
10006e4c:	000643c0 	call	1000643c <_Balloc>
10006e50:	82800417 	ldw	r10,16(r16)
10006e54:	8b400417 	ldw	r13,16(r17)
10006e58:	81000504 	addi	r4,r16,20
10006e5c:	5299883a 	add	r12,r10,r10
10006e60:	6b5b883a 	add	r13,r13,r13
10006e64:	6319883a 	add	r12,r12,r12
10006e68:	89800504 	addi	r6,r17,20
10006e6c:	6b5b883a 	add	r13,r13,r13
10006e70:	14800315 	stw	r18,12(r2)
10006e74:	2319883a 	add	r12,r4,r12
10006e78:	335b883a 	add	r13,r6,r13
10006e7c:	11400504 	addi	r5,r2,20
10006e80:	0007883a 	mov	r3,zero
10006e84:	00000106 	br	10006e8c <__mdiff+0x80>
10006e88:	400b883a 	mov	r5,r8
10006e8c:	22400017 	ldw	r9,0(r4)
10006e90:	32000017 	ldw	r8,0(r6)
10006e94:	31800104 	addi	r6,r6,4
10006e98:	49ffffcc 	andi	r7,r9,65535
10006e9c:	42ffffcc 	andi	r11,r8,65535
10006ea0:	38c7883a 	add	r3,r7,r3
10006ea4:	1acfc83a 	sub	r7,r3,r11
10006ea8:	4010d43a 	srli	r8,r8,16
10006eac:	4806d43a 	srli	r3,r9,16
10006eb0:	3817d43a 	srai	r11,r7,16
10006eb4:	39ffffcc 	andi	r7,r7,65535
10006eb8:	1a07c83a 	sub	r3,r3,r8
10006ebc:	1ac7883a 	add	r3,r3,r11
10006ec0:	1812943a 	slli	r9,r3,16
10006ec4:	2a000104 	addi	r8,r5,4
10006ec8:	21000104 	addi	r4,r4,4
10006ecc:	49ceb03a 	or	r7,r9,r7
10006ed0:	29c00015 	stw	r7,0(r5)
10006ed4:	1807d43a 	srai	r3,r3,16
10006ed8:	337feb36 	bltu	r6,r13,10006e88 <__alt_data_end+0xf8006e88>
10006edc:	2013883a 	mov	r9,r4
10006ee0:	2300342e 	bgeu	r4,r12,10006fb4 <__mdiff+0x1a8>
10006ee4:	400b883a 	mov	r5,r8
10006ee8:	21c00017 	ldw	r7,0(r4)
10006eec:	29400104 	addi	r5,r5,4
10006ef0:	21000104 	addi	r4,r4,4
10006ef4:	39bfffcc 	andi	r6,r7,65535
10006ef8:	30cd883a 	add	r6,r6,r3
10006efc:	3007d43a 	srai	r3,r6,16
10006f00:	380ed43a 	srli	r7,r7,16
10006f04:	31bfffcc 	andi	r6,r6,65535
10006f08:	19c7883a 	add	r3,r3,r7
10006f0c:	180e943a 	slli	r7,r3,16
10006f10:	1807d43a 	srai	r3,r3,16
10006f14:	398cb03a 	or	r6,r7,r6
10006f18:	29bfff15 	stw	r6,-4(r5)
10006f1c:	233ff236 	bltu	r4,r12,10006ee8 <__alt_data_end+0xf8006ee8>
10006f20:	0248303a 	nor	r4,zero,r9
10006f24:	2309883a 	add	r4,r4,r12
10006f28:	2008d0ba 	srli	r4,r4,2
10006f2c:	21000044 	addi	r4,r4,1
10006f30:	2109883a 	add	r4,r4,r4
10006f34:	2109883a 	add	r4,r4,r4
10006f38:	4111883a 	add	r8,r8,r4
10006f3c:	413fff04 	addi	r4,r8,-4
10006f40:	3000041e 	bne	r6,zero,10006f54 <__mdiff+0x148>
10006f44:	213fff04 	addi	r4,r4,-4
10006f48:	20c00017 	ldw	r3,0(r4)
10006f4c:	52bfffc4 	addi	r10,r10,-1
10006f50:	183ffc26 	beq	r3,zero,10006f44 <__alt_data_end+0xf8006f44>
10006f54:	12800415 	stw	r10,16(r2)
10006f58:	dfc00317 	ldw	ra,12(sp)
10006f5c:	dc800217 	ldw	r18,8(sp)
10006f60:	dc400117 	ldw	r17,4(sp)
10006f64:	dc000017 	ldw	r16,0(sp)
10006f68:	dec00404 	addi	sp,sp,16
10006f6c:	f800283a 	ret
10006f70:	8005883a 	mov	r2,r16
10006f74:	04800044 	movi	r18,1
10006f78:	8821883a 	mov	r16,r17
10006f7c:	1023883a 	mov	r17,r2
10006f80:	003fb006 	br	10006e44 <__alt_data_end+0xf8006e44>
10006f84:	3809883a 	mov	r4,r7
10006f88:	000b883a 	mov	r5,zero
10006f8c:	000643c0 	call	1000643c <_Balloc>
10006f90:	00c00044 	movi	r3,1
10006f94:	10c00415 	stw	r3,16(r2)
10006f98:	10000515 	stw	zero,20(r2)
10006f9c:	dfc00317 	ldw	ra,12(sp)
10006fa0:	dc800217 	ldw	r18,8(sp)
10006fa4:	dc400117 	ldw	r17,4(sp)
10006fa8:	dc000017 	ldw	r16,0(sp)
10006fac:	dec00404 	addi	sp,sp,16
10006fb0:	f800283a 	ret
10006fb4:	380d883a 	mov	r6,r7
10006fb8:	003fe006 	br	10006f3c <__alt_data_end+0xf8006f3c>

10006fbc <__ulp>:
10006fbc:	295ffc2c 	andhi	r5,r5,32752
10006fc0:	00bf3034 	movhi	r2,64704
10006fc4:	2887883a 	add	r3,r5,r2
10006fc8:	00c0020e 	bge	zero,r3,10006fd4 <__ulp+0x18>
10006fcc:	0005883a 	mov	r2,zero
10006fd0:	f800283a 	ret
10006fd4:	00c7c83a 	sub	r3,zero,r3
10006fd8:	1805d53a 	srai	r2,r3,20
10006fdc:	00c004c4 	movi	r3,19
10006fe0:	18800a0e 	bge	r3,r2,1000700c <__ulp+0x50>
10006fe4:	01000c84 	movi	r4,50
10006fe8:	0007883a 	mov	r3,zero
10006fec:	20800516 	blt	r4,r2,10007004 <__ulp+0x48>
10006ff0:	01000cc4 	movi	r4,51
10006ff4:	2085c83a 	sub	r2,r4,r2
10006ff8:	01000044 	movi	r4,1
10006ffc:	2084983a 	sll	r2,r4,r2
10007000:	f800283a 	ret
10007004:	00800044 	movi	r2,1
10007008:	f800283a 	ret
1000700c:	00c00234 	movhi	r3,8
10007010:	1887d83a 	sra	r3,r3,r2
10007014:	0005883a 	mov	r2,zero
10007018:	f800283a 	ret

1000701c <__b2d>:
1000701c:	21800417 	ldw	r6,16(r4)
10007020:	22000504 	addi	r8,r4,20
10007024:	deffff04 	addi	sp,sp,-4
10007028:	318d883a 	add	r6,r6,r6
1000702c:	318d883a 	add	r6,r6,r6
10007030:	418d883a 	add	r6,r8,r6
10007034:	31ffff17 	ldw	r7,-4(r6)
10007038:	327fff04 	addi	r9,r6,-4
1000703c:	dfc00015 	stw	ra,0(sp)
10007040:	3809883a 	mov	r4,r7
10007044:	00067540 	call	10006754 <__hi0bits>
10007048:	00c00804 	movi	r3,32
1000704c:	1887c83a 	sub	r3,r3,r2
10007050:	28c00015 	stw	r3,0(r5)
10007054:	00c00284 	movi	r3,10
10007058:	18800d16 	blt	r3,r2,10007090 <__b2d+0x74>
1000705c:	010002c4 	movi	r4,11
10007060:	2089c83a 	sub	r4,r4,r2
10007064:	3906d83a 	srl	r3,r7,r4
10007068:	18cffc34 	orhi	r3,r3,16368
1000706c:	4240232e 	bgeu	r8,r9,100070fc <__b2d+0xe0>
10007070:	317ffe17 	ldw	r5,-8(r6)
10007074:	2908d83a 	srl	r4,r5,r4
10007078:	10800544 	addi	r2,r2,21
1000707c:	388e983a 	sll	r7,r7,r2
10007080:	21c4b03a 	or	r2,r4,r7
10007084:	dfc00017 	ldw	ra,0(sp)
10007088:	dec00104 	addi	sp,sp,4
1000708c:	f800283a 	ret
10007090:	42401136 	bltu	r8,r9,100070d8 <__b2d+0xbc>
10007094:	113ffd44 	addi	r4,r2,-11
10007098:	000b883a 	mov	r5,zero
1000709c:	20001226 	beq	r4,zero,100070e8 <__b2d+0xcc>
100070a0:	00c00ac4 	movi	r3,43
100070a4:	1885c83a 	sub	r2,r3,r2
100070a8:	3906983a 	sll	r3,r7,r4
100070ac:	288cd83a 	srl	r6,r5,r2
100070b0:	18cffc34 	orhi	r3,r3,16368
100070b4:	1986b03a 	or	r3,r3,r6
100070b8:	4240122e 	bgeu	r8,r9,10007104 <__b2d+0xe8>
100070bc:	49bfff17 	ldw	r6,-4(r9)
100070c0:	3084d83a 	srl	r2,r6,r2
100070c4:	2908983a 	sll	r4,r5,r4
100070c8:	1104b03a 	or	r2,r2,r4
100070cc:	dfc00017 	ldw	ra,0(sp)
100070d0:	dec00104 	addi	sp,sp,4
100070d4:	f800283a 	ret
100070d8:	113ffd44 	addi	r4,r2,-11
100070dc:	327ffe04 	addi	r9,r6,-8
100070e0:	317ffe17 	ldw	r5,-8(r6)
100070e4:	203fee1e 	bne	r4,zero,100070a0 <__alt_data_end+0xf80070a0>
100070e8:	38cffc34 	orhi	r3,r7,16368
100070ec:	2805883a 	mov	r2,r5
100070f0:	dfc00017 	ldw	ra,0(sp)
100070f4:	dec00104 	addi	sp,sp,4
100070f8:	f800283a 	ret
100070fc:	0009883a 	mov	r4,zero
10007100:	003fdd06 	br	10007078 <__alt_data_end+0xf8007078>
10007104:	0005883a 	mov	r2,zero
10007108:	003fee06 	br	100070c4 <__alt_data_end+0xf80070c4>

1000710c <__d2b>:
1000710c:	defffa04 	addi	sp,sp,-24
10007110:	dc400315 	stw	r17,12(sp)
10007114:	2823883a 	mov	r17,r5
10007118:	01400044 	movi	r5,1
1000711c:	dc800415 	stw	r18,16(sp)
10007120:	dc000215 	stw	r16,8(sp)
10007124:	dfc00515 	stw	ra,20(sp)
10007128:	3021883a 	mov	r16,r6
1000712c:	3825883a 	mov	r18,r7
10007130:	000643c0 	call	1000643c <_Balloc>
10007134:	8012907a 	slli	r9,r16,1
10007138:	1011883a 	mov	r8,r2
1000713c:	00800434 	movhi	r2,16
10007140:	10bfffc4 	addi	r2,r2,-1
10007144:	4812d57a 	srli	r9,r9,21
10007148:	80a0703a 	and	r16,r16,r2
1000714c:	48000126 	beq	r9,zero,10007154 <__d2b+0x48>
10007150:	84000434 	orhi	r16,r16,16
10007154:	dc000015 	stw	r16,0(sp)
10007158:	88001e26 	beq	r17,zero,100071d4 <__d2b+0xc8>
1000715c:	d9000104 	addi	r4,sp,4
10007160:	dc400115 	stw	r17,4(sp)
10007164:	00067bc0 	call	100067bc <__lo0bits>
10007168:	d8c00017 	ldw	r3,0(sp)
1000716c:	10002f1e 	bne	r2,zero,1000722c <__d2b+0x120>
10007170:	d9000117 	ldw	r4,4(sp)
10007174:	41000515 	stw	r4,20(r8)
10007178:	180b003a 	cmpeq	r5,r3,zero
1000717c:	01000084 	movi	r4,2
10007180:	214bc83a 	sub	r5,r4,r5
10007184:	40c00615 	stw	r3,24(r8)
10007188:	41400415 	stw	r5,16(r8)
1000718c:	4800191e 	bne	r9,zero,100071f4 <__d2b+0xe8>
10007190:	280690ba 	slli	r3,r5,2
10007194:	10bef384 	addi	r2,r2,-1074
10007198:	90800015 	stw	r2,0(r18)
1000719c:	40c5883a 	add	r2,r8,r3
100071a0:	11000417 	ldw	r4,16(r2)
100071a4:	00067540 	call	10006754 <__hi0bits>
100071a8:	280a917a 	slli	r5,r5,5
100071ac:	d8c00617 	ldw	r3,24(sp)
100071b0:	2885c83a 	sub	r2,r5,r2
100071b4:	18800015 	stw	r2,0(r3)
100071b8:	4005883a 	mov	r2,r8
100071bc:	dfc00517 	ldw	ra,20(sp)
100071c0:	dc800417 	ldw	r18,16(sp)
100071c4:	dc400317 	ldw	r17,12(sp)
100071c8:	dc000217 	ldw	r16,8(sp)
100071cc:	dec00604 	addi	sp,sp,24
100071d0:	f800283a 	ret
100071d4:	d809883a 	mov	r4,sp
100071d8:	00067bc0 	call	100067bc <__lo0bits>
100071dc:	d8c00017 	ldw	r3,0(sp)
100071e0:	01400044 	movi	r5,1
100071e4:	41400415 	stw	r5,16(r8)
100071e8:	40c00515 	stw	r3,20(r8)
100071ec:	10800804 	addi	r2,r2,32
100071f0:	483fe726 	beq	r9,zero,10007190 <__alt_data_end+0xf8007190>
100071f4:	00c00d44 	movi	r3,53
100071f8:	4a7ef344 	addi	r9,r9,-1075
100071fc:	4893883a 	add	r9,r9,r2
10007200:	1885c83a 	sub	r2,r3,r2
10007204:	d8c00617 	ldw	r3,24(sp)
10007208:	92400015 	stw	r9,0(r18)
1000720c:	18800015 	stw	r2,0(r3)
10007210:	4005883a 	mov	r2,r8
10007214:	dfc00517 	ldw	ra,20(sp)
10007218:	dc800417 	ldw	r18,16(sp)
1000721c:	dc400317 	ldw	r17,12(sp)
10007220:	dc000217 	ldw	r16,8(sp)
10007224:	dec00604 	addi	sp,sp,24
10007228:	f800283a 	ret
1000722c:	01000804 	movi	r4,32
10007230:	2089c83a 	sub	r4,r4,r2
10007234:	1908983a 	sll	r4,r3,r4
10007238:	d9400117 	ldw	r5,4(sp)
1000723c:	1886d83a 	srl	r3,r3,r2
10007240:	2148b03a 	or	r4,r4,r5
10007244:	41000515 	stw	r4,20(r8)
10007248:	d8c00015 	stw	r3,0(sp)
1000724c:	003fca06 	br	10007178 <__alt_data_end+0xf8007178>

10007250 <__ratio>:
10007250:	defffd04 	addi	sp,sp,-12
10007254:	2817883a 	mov	r11,r5
10007258:	201b883a 	mov	r13,r4
1000725c:	d9400104 	addi	r5,sp,4
10007260:	dfc00215 	stw	ra,8(sp)
10007264:	000701c0 	call	1000701c <__b2d>
10007268:	5809883a 	mov	r4,r11
1000726c:	d80b883a 	mov	r5,sp
10007270:	1019883a 	mov	r12,r2
10007274:	1815883a 	mov	r10,r3
10007278:	000701c0 	call	1000701c <__b2d>
1000727c:	69400417 	ldw	r5,16(r13)
10007280:	59000417 	ldw	r4,16(r11)
10007284:	d9800117 	ldw	r6,4(sp)
10007288:	2909c83a 	sub	r4,r5,r4
1000728c:	d9400017 	ldw	r5,0(sp)
10007290:	2008917a 	slli	r4,r4,5
10007294:	314bc83a 	sub	r5,r6,r5
10007298:	290b883a 	add	r5,r5,r4
1000729c:	01400a0e 	bge	zero,r5,100072c8 <__ratio+0x78>
100072a0:	280a953a 	slli	r5,r5,20
100072a4:	6009883a 	mov	r4,r12
100072a8:	100d883a 	mov	r6,r2
100072ac:	2a95883a 	add	r10,r5,r10
100072b0:	500b883a 	mov	r5,r10
100072b4:	180f883a 	mov	r7,r3
100072b8:	000b8c80 	call	1000b8c8 <__divdf3>
100072bc:	dfc00217 	ldw	ra,8(sp)
100072c0:	dec00304 	addi	sp,sp,12
100072c4:	f800283a 	ret
100072c8:	280a953a 	slli	r5,r5,20
100072cc:	6009883a 	mov	r4,r12
100072d0:	100d883a 	mov	r6,r2
100072d4:	1947c83a 	sub	r3,r3,r5
100072d8:	180f883a 	mov	r7,r3
100072dc:	500b883a 	mov	r5,r10
100072e0:	000b8c80 	call	1000b8c8 <__divdf3>
100072e4:	dfc00217 	ldw	ra,8(sp)
100072e8:	dec00304 	addi	sp,sp,12
100072ec:	f800283a 	ret

100072f0 <_mprec_log10>:
100072f0:	defffe04 	addi	sp,sp,-8
100072f4:	dc000015 	stw	r16,0(sp)
100072f8:	dfc00115 	stw	ra,4(sp)
100072fc:	008005c4 	movi	r2,23
10007300:	2021883a 	mov	r16,r4
10007304:	11000d0e 	bge	r2,r4,1000733c <_mprec_log10+0x4c>
10007308:	0005883a 	mov	r2,zero
1000730c:	00cffc34 	movhi	r3,16368
10007310:	843fffc4 	addi	r16,r16,-1
10007314:	1009883a 	mov	r4,r2
10007318:	180b883a 	mov	r5,r3
1000731c:	000d883a 	mov	r6,zero
10007320:	01d00934 	movhi	r7,16420
10007324:	000c4ac0 	call	1000c4ac <__muldf3>
10007328:	803ff91e 	bne	r16,zero,10007310 <__alt_data_end+0xf8007310>
1000732c:	dfc00117 	ldw	ra,4(sp)
10007330:	dc000017 	ldw	r16,0(sp)
10007334:	dec00204 	addi	sp,sp,8
10007338:	f800283a 	ret
1000733c:	202090fa 	slli	r16,r4,3
10007340:	00840074 	movhi	r2,4097
10007344:	10bfd804 	addi	r2,r2,-160
10007348:	1421883a 	add	r16,r2,r16
1000734c:	80800017 	ldw	r2,0(r16)
10007350:	80c00117 	ldw	r3,4(r16)
10007354:	dfc00117 	ldw	ra,4(sp)
10007358:	dc000017 	ldw	r16,0(sp)
1000735c:	dec00204 	addi	sp,sp,8
10007360:	f800283a 	ret

10007364 <__copybits>:
10007364:	297fffc4 	addi	r5,r5,-1
10007368:	2811d17a 	srai	r8,r5,5
1000736c:	31c00417 	ldw	r7,16(r6)
10007370:	30800504 	addi	r2,r6,20
10007374:	42000044 	addi	r8,r8,1
10007378:	39cf883a 	add	r7,r7,r7
1000737c:	4211883a 	add	r8,r8,r8
10007380:	39cf883a 	add	r7,r7,r7
10007384:	4211883a 	add	r8,r8,r8
10007388:	11cf883a 	add	r7,r2,r7
1000738c:	2211883a 	add	r8,r4,r8
10007390:	11c00d2e 	bgeu	r2,r7,100073c8 <__copybits+0x64>
10007394:	2007883a 	mov	r3,r4
10007398:	11400017 	ldw	r5,0(r2)
1000739c:	18c00104 	addi	r3,r3,4
100073a0:	10800104 	addi	r2,r2,4
100073a4:	197fff15 	stw	r5,-4(r3)
100073a8:	11fffb36 	bltu	r2,r7,10007398 <__alt_data_end+0xf8007398>
100073ac:	3985c83a 	sub	r2,r7,r6
100073b0:	10bffac4 	addi	r2,r2,-21
100073b4:	1004d0ba 	srli	r2,r2,2
100073b8:	10800044 	addi	r2,r2,1
100073bc:	1085883a 	add	r2,r2,r2
100073c0:	1085883a 	add	r2,r2,r2
100073c4:	2089883a 	add	r4,r4,r2
100073c8:	2200032e 	bgeu	r4,r8,100073d8 <__copybits+0x74>
100073cc:	20000015 	stw	zero,0(r4)
100073d0:	21000104 	addi	r4,r4,4
100073d4:	223ffd36 	bltu	r4,r8,100073cc <__alt_data_end+0xf80073cc>
100073d8:	f800283a 	ret

100073dc <__any_on>:
100073dc:	20800417 	ldw	r2,16(r4)
100073e0:	2807d17a 	srai	r3,r5,5
100073e4:	21000504 	addi	r4,r4,20
100073e8:	10c00d0e 	bge	r2,r3,10007420 <__any_on+0x44>
100073ec:	1085883a 	add	r2,r2,r2
100073f0:	1085883a 	add	r2,r2,r2
100073f4:	2085883a 	add	r2,r4,r2
100073f8:	2080182e 	bgeu	r4,r2,1000745c <__any_on+0x80>
100073fc:	10ffff17 	ldw	r3,-4(r2)
10007400:	10bfff04 	addi	r2,r2,-4
10007404:	1800041e 	bne	r3,zero,10007418 <__any_on+0x3c>
10007408:	2080142e 	bgeu	r4,r2,1000745c <__any_on+0x80>
1000740c:	10bfff04 	addi	r2,r2,-4
10007410:	10c00017 	ldw	r3,0(r2)
10007414:	183ffc26 	beq	r3,zero,10007408 <__alt_data_end+0xf8007408>
10007418:	00800044 	movi	r2,1
1000741c:	f800283a 	ret
10007420:	18800a0e 	bge	r3,r2,1000744c <__any_on+0x70>
10007424:	18c7883a 	add	r3,r3,r3
10007428:	18c7883a 	add	r3,r3,r3
1000742c:	294007cc 	andi	r5,r5,31
10007430:	20c5883a 	add	r2,r4,r3
10007434:	283ff026 	beq	r5,zero,100073f8 <__alt_data_end+0xf80073f8>
10007438:	10c00017 	ldw	r3,0(r2)
1000743c:	194cd83a 	srl	r6,r3,r5
10007440:	314a983a 	sll	r5,r6,r5
10007444:	28fff41e 	bne	r5,r3,10007418 <__alt_data_end+0xf8007418>
10007448:	003feb06 	br	100073f8 <__alt_data_end+0xf80073f8>
1000744c:	18c7883a 	add	r3,r3,r3
10007450:	18c7883a 	add	r3,r3,r3
10007454:	20c5883a 	add	r2,r4,r3
10007458:	003fe706 	br	100073f8 <__alt_data_end+0xf80073f8>
1000745c:	0005883a 	mov	r2,zero
10007460:	f800283a 	ret

10007464 <__fpclassifyd>:
10007464:	00a00034 	movhi	r2,32768
10007468:	10bfffc4 	addi	r2,r2,-1
1000746c:	288a703a 	and	r5,r5,r2
10007470:	28000726 	beq	r5,zero,10007490 <__fpclassifyd+0x2c>
10007474:	00bffc34 	movhi	r2,65520
10007478:	2885883a 	add	r2,r5,r2
1000747c:	00dff834 	movhi	r3,32736
10007480:	18ffffc4 	addi	r3,r3,-1
10007484:	18800636 	bltu	r3,r2,100074a0 <__fpclassifyd+0x3c>
10007488:	00800104 	movi	r2,4
1000748c:	f800283a 	ret
10007490:	2005003a 	cmpeq	r2,r4,zero
10007494:	00c000c4 	movi	r3,3
10007498:	1885c83a 	sub	r2,r3,r2
1000749c:	f800283a 	ret
100074a0:	00800434 	movhi	r2,16
100074a4:	10bfffc4 	addi	r2,r2,-1
100074a8:	11400236 	bltu	r2,r5,100074b4 <__fpclassifyd+0x50>
100074ac:	008000c4 	movi	r2,3
100074b0:	f800283a 	ret
100074b4:	009ffc34 	movhi	r2,32752
100074b8:	28800226 	beq	r5,r2,100074c4 <__fpclassifyd+0x60>
100074bc:	0005883a 	mov	r2,zero
100074c0:	f800283a 	ret
100074c4:	2005003a 	cmpeq	r2,r4,zero
100074c8:	f800283a 	ret

100074cc <_sbrk_r>:
100074cc:	defffd04 	addi	sp,sp,-12
100074d0:	dc400115 	stw	r17,4(sp)
100074d4:	dc000015 	stw	r16,0(sp)
100074d8:	2023883a 	mov	r17,r4
100074dc:	04040074 	movhi	r16,4097
100074e0:	840ddf04 	addi	r16,r16,14204
100074e4:	2809883a 	mov	r4,r5
100074e8:	dfc00215 	stw	ra,8(sp)
100074ec:	80000015 	stw	zero,0(r16)
100074f0:	000e0340 	call	1000e034 <sbrk>
100074f4:	00ffffc4 	movi	r3,-1
100074f8:	10c00526 	beq	r2,r3,10007510 <_sbrk_r+0x44>
100074fc:	dfc00217 	ldw	ra,8(sp)
10007500:	dc400117 	ldw	r17,4(sp)
10007504:	dc000017 	ldw	r16,0(sp)
10007508:	dec00304 	addi	sp,sp,12
1000750c:	f800283a 	ret
10007510:	80c00017 	ldw	r3,0(r16)
10007514:	183ff926 	beq	r3,zero,100074fc <__alt_data_end+0xf80074fc>
10007518:	88c00015 	stw	r3,0(r17)
1000751c:	dfc00217 	ldw	ra,8(sp)
10007520:	dc400117 	ldw	r17,4(sp)
10007524:	dc000017 	ldw	r16,0(sp)
10007528:	dec00304 	addi	sp,sp,12
1000752c:	f800283a 	ret

10007530 <__sread>:
10007530:	defffe04 	addi	sp,sp,-8
10007534:	dc000015 	stw	r16,0(sp)
10007538:	2821883a 	mov	r16,r5
1000753c:	2940038f 	ldh	r5,14(r5)
10007540:	dfc00115 	stw	ra,4(sp)
10007544:	000991c0 	call	1000991c <_read_r>
10007548:	10000716 	blt	r2,zero,10007568 <__sread+0x38>
1000754c:	80c01417 	ldw	r3,80(r16)
10007550:	1887883a 	add	r3,r3,r2
10007554:	80c01415 	stw	r3,80(r16)
10007558:	dfc00117 	ldw	ra,4(sp)
1000755c:	dc000017 	ldw	r16,0(sp)
10007560:	dec00204 	addi	sp,sp,8
10007564:	f800283a 	ret
10007568:	80c0030b 	ldhu	r3,12(r16)
1000756c:	18fbffcc 	andi	r3,r3,61439
10007570:	80c0030d 	sth	r3,12(r16)
10007574:	dfc00117 	ldw	ra,4(sp)
10007578:	dc000017 	ldw	r16,0(sp)
1000757c:	dec00204 	addi	sp,sp,8
10007580:	f800283a 	ret

10007584 <__seofread>:
10007584:	0005883a 	mov	r2,zero
10007588:	f800283a 	ret

1000758c <__swrite>:
1000758c:	2880030b 	ldhu	r2,12(r5)
10007590:	defffb04 	addi	sp,sp,-20
10007594:	dcc00315 	stw	r19,12(sp)
10007598:	dc800215 	stw	r18,8(sp)
1000759c:	dc400115 	stw	r17,4(sp)
100075a0:	dc000015 	stw	r16,0(sp)
100075a4:	dfc00415 	stw	ra,16(sp)
100075a8:	10c0400c 	andi	r3,r2,256
100075ac:	2821883a 	mov	r16,r5
100075b0:	2027883a 	mov	r19,r4
100075b4:	3025883a 	mov	r18,r6
100075b8:	3823883a 	mov	r17,r7
100075bc:	18000526 	beq	r3,zero,100075d4 <__swrite+0x48>
100075c0:	2940038f 	ldh	r5,14(r5)
100075c4:	000d883a 	mov	r6,zero
100075c8:	01c00084 	movi	r7,2
100075cc:	00097740 	call	10009774 <_lseek_r>
100075d0:	8080030b 	ldhu	r2,12(r16)
100075d4:	8140038f 	ldh	r5,14(r16)
100075d8:	10bbffcc 	andi	r2,r2,61439
100075dc:	9809883a 	mov	r4,r19
100075e0:	900d883a 	mov	r6,r18
100075e4:	880f883a 	mov	r7,r17
100075e8:	8080030d 	sth	r2,12(r16)
100075ec:	dfc00417 	ldw	ra,16(sp)
100075f0:	dcc00317 	ldw	r19,12(sp)
100075f4:	dc800217 	ldw	r18,8(sp)
100075f8:	dc400117 	ldw	r17,4(sp)
100075fc:	dc000017 	ldw	r16,0(sp)
10007600:	dec00504 	addi	sp,sp,20
10007604:	0008d1c1 	jmpi	10008d1c <_write_r>

10007608 <__sseek>:
10007608:	defffe04 	addi	sp,sp,-8
1000760c:	dc000015 	stw	r16,0(sp)
10007610:	2821883a 	mov	r16,r5
10007614:	2940038f 	ldh	r5,14(r5)
10007618:	dfc00115 	stw	ra,4(sp)
1000761c:	00097740 	call	10009774 <_lseek_r>
10007620:	00ffffc4 	movi	r3,-1
10007624:	10c00826 	beq	r2,r3,10007648 <__sseek+0x40>
10007628:	80c0030b 	ldhu	r3,12(r16)
1000762c:	80801415 	stw	r2,80(r16)
10007630:	18c40014 	ori	r3,r3,4096
10007634:	80c0030d 	sth	r3,12(r16)
10007638:	dfc00117 	ldw	ra,4(sp)
1000763c:	dc000017 	ldw	r16,0(sp)
10007640:	dec00204 	addi	sp,sp,8
10007644:	f800283a 	ret
10007648:	80c0030b 	ldhu	r3,12(r16)
1000764c:	18fbffcc 	andi	r3,r3,61439
10007650:	80c0030d 	sth	r3,12(r16)
10007654:	dfc00117 	ldw	ra,4(sp)
10007658:	dc000017 	ldw	r16,0(sp)
1000765c:	dec00204 	addi	sp,sp,8
10007660:	f800283a 	ret

10007664 <__sclose>:
10007664:	2940038f 	ldh	r5,14(r5)
10007668:	0008d881 	jmpi	10008d88 <_close_r>

1000766c <strcmp>:
1000766c:	2144b03a 	or	r2,r4,r5
10007670:	108000cc 	andi	r2,r2,3
10007674:	1000171e 	bne	r2,zero,100076d4 <strcmp+0x68>
10007678:	20800017 	ldw	r2,0(r4)
1000767c:	28c00017 	ldw	r3,0(r5)
10007680:	10c0141e 	bne	r2,r3,100076d4 <strcmp+0x68>
10007684:	027fbff4 	movhi	r9,65279
10007688:	4a7fbfc4 	addi	r9,r9,-257
1000768c:	1247883a 	add	r3,r2,r9
10007690:	0084303a 	nor	r2,zero,r2
10007694:	1884703a 	and	r2,r3,r2
10007698:	02202074 	movhi	r8,32897
1000769c:	42202004 	addi	r8,r8,-32640
100076a0:	1204703a 	and	r2,r2,r8
100076a4:	10000226 	beq	r2,zero,100076b0 <strcmp+0x44>
100076a8:	00001706 	br	10007708 <strcmp+0x9c>
100076ac:	3000161e 	bne	r6,zero,10007708 <strcmp+0x9c>
100076b0:	21000104 	addi	r4,r4,4
100076b4:	20800017 	ldw	r2,0(r4)
100076b8:	29400104 	addi	r5,r5,4
100076bc:	28c00017 	ldw	r3,0(r5)
100076c0:	124f883a 	add	r7,r2,r9
100076c4:	008c303a 	nor	r6,zero,r2
100076c8:	398c703a 	and	r6,r7,r6
100076cc:	320c703a 	and	r6,r6,r8
100076d0:	10fff626 	beq	r2,r3,100076ac <__alt_data_end+0xf80076ac>
100076d4:	20800007 	ldb	r2,0(r4)
100076d8:	1000051e 	bne	r2,zero,100076f0 <strcmp+0x84>
100076dc:	00000606 	br	100076f8 <strcmp+0x8c>
100076e0:	21000044 	addi	r4,r4,1
100076e4:	20800007 	ldb	r2,0(r4)
100076e8:	29400044 	addi	r5,r5,1
100076ec:	10000226 	beq	r2,zero,100076f8 <strcmp+0x8c>
100076f0:	28c00007 	ldb	r3,0(r5)
100076f4:	10fffa26 	beq	r2,r3,100076e0 <__alt_data_end+0xf80076e0>
100076f8:	20c00003 	ldbu	r3,0(r4)
100076fc:	28800003 	ldbu	r2,0(r5)
10007700:	1885c83a 	sub	r2,r3,r2
10007704:	f800283a 	ret
10007708:	0005883a 	mov	r2,zero
1000770c:	f800283a 	ret

10007710 <strlen>:
10007710:	208000cc 	andi	r2,r4,3
10007714:	10001d26 	beq	r2,zero,1000778c <strlen+0x7c>
10007718:	20800007 	ldb	r2,0(r4)
1000771c:	10001d26 	beq	r2,zero,10007794 <strlen+0x84>
10007720:	2005883a 	mov	r2,r4
10007724:	00000206 	br	10007730 <strlen+0x20>
10007728:	10c00007 	ldb	r3,0(r2)
1000772c:	18001526 	beq	r3,zero,10007784 <strlen+0x74>
10007730:	10800044 	addi	r2,r2,1
10007734:	10c000cc 	andi	r3,r2,3
10007738:	183ffb1e 	bne	r3,zero,10007728 <__alt_data_end+0xf8007728>
1000773c:	10c00017 	ldw	r3,0(r2)
10007740:	01ffbff4 	movhi	r7,65279
10007744:	39ffbfc4 	addi	r7,r7,-257
10007748:	01a02074 	movhi	r6,32897
1000774c:	31a02004 	addi	r6,r6,-32640
10007750:	00000206 	br	1000775c <strlen+0x4c>
10007754:	10800104 	addi	r2,r2,4
10007758:	10c00017 	ldw	r3,0(r2)
1000775c:	19cb883a 	add	r5,r3,r7
10007760:	00c6303a 	nor	r3,zero,r3
10007764:	28c6703a 	and	r3,r5,r3
10007768:	1986703a 	and	r3,r3,r6
1000776c:	183ff926 	beq	r3,zero,10007754 <__alt_data_end+0xf8007754>
10007770:	10c00007 	ldb	r3,0(r2)
10007774:	18000326 	beq	r3,zero,10007784 <strlen+0x74>
10007778:	10800044 	addi	r2,r2,1
1000777c:	10c00007 	ldb	r3,0(r2)
10007780:	183ffd1e 	bne	r3,zero,10007778 <__alt_data_end+0xf8007778>
10007784:	1105c83a 	sub	r2,r2,r4
10007788:	f800283a 	ret
1000778c:	2005883a 	mov	r2,r4
10007790:	003fea06 	br	1000773c <__alt_data_end+0xf800773c>
10007794:	0005883a 	mov	r2,zero
10007798:	f800283a 	ret

1000779c <__sprint_r.part.0>:
1000779c:	28801917 	ldw	r2,100(r5)
100077a0:	defff604 	addi	sp,sp,-40
100077a4:	dd800615 	stw	r22,24(sp)
100077a8:	dcc00315 	stw	r19,12(sp)
100077ac:	dfc00915 	stw	ra,36(sp)
100077b0:	df000815 	stw	fp,32(sp)
100077b4:	ddc00715 	stw	r23,28(sp)
100077b8:	dd400515 	stw	r21,20(sp)
100077bc:	dd000415 	stw	r20,16(sp)
100077c0:	dc800215 	stw	r18,8(sp)
100077c4:	dc400115 	stw	r17,4(sp)
100077c8:	dc000015 	stw	r16,0(sp)
100077cc:	1088000c 	andi	r2,r2,8192
100077d0:	2827883a 	mov	r19,r5
100077d4:	302d883a 	mov	r22,r6
100077d8:	10002d26 	beq	r2,zero,10007890 <__sprint_r.part.0+0xf4>
100077dc:	30800217 	ldw	r2,8(r6)
100077e0:	35c00017 	ldw	r23,0(r6)
100077e4:	10002826 	beq	r2,zero,10007888 <__sprint_r.part.0+0xec>
100077e8:	202b883a 	mov	r21,r4
100077ec:	bf000104 	addi	fp,r23,4
100077f0:	053fffc4 	movi	r20,-1
100077f4:	e4800017 	ldw	r18,0(fp)
100077f8:	bc400017 	ldw	r17,0(r23)
100077fc:	0021883a 	mov	r16,zero
10007800:	9024d0ba 	srli	r18,r18,2
10007804:	04800316 	blt	zero,r18,10007814 <__sprint_r.part.0+0x78>
10007808:	00001806 	br	1000786c <__sprint_r.part.0+0xd0>
1000780c:	8c400104 	addi	r17,r17,4
10007810:	94001526 	beq	r18,r16,10007868 <__sprint_r.part.0+0xcc>
10007814:	89400017 	ldw	r5,0(r17)
10007818:	a809883a 	mov	r4,r21
1000781c:	980d883a 	mov	r6,r19
10007820:	00090000 	call	10009000 <_fputwc_r>
10007824:	84000044 	addi	r16,r16,1
10007828:	153ff81e 	bne	r2,r20,1000780c <__alt_data_end+0xf800780c>
1000782c:	a005883a 	mov	r2,r20
10007830:	b0000215 	stw	zero,8(r22)
10007834:	b0000115 	stw	zero,4(r22)
10007838:	dfc00917 	ldw	ra,36(sp)
1000783c:	df000817 	ldw	fp,32(sp)
10007840:	ddc00717 	ldw	r23,28(sp)
10007844:	dd800617 	ldw	r22,24(sp)
10007848:	dd400517 	ldw	r21,20(sp)
1000784c:	dd000417 	ldw	r20,16(sp)
10007850:	dcc00317 	ldw	r19,12(sp)
10007854:	dc800217 	ldw	r18,8(sp)
10007858:	dc400117 	ldw	r17,4(sp)
1000785c:	dc000017 	ldw	r16,0(sp)
10007860:	dec00a04 	addi	sp,sp,40
10007864:	f800283a 	ret
10007868:	b0800217 	ldw	r2,8(r22)
1000786c:	94a5883a 	add	r18,r18,r18
10007870:	94a5883a 	add	r18,r18,r18
10007874:	1485c83a 	sub	r2,r2,r18
10007878:	b0800215 	stw	r2,8(r22)
1000787c:	bdc00204 	addi	r23,r23,8
10007880:	e7000204 	addi	fp,fp,8
10007884:	103fdb1e 	bne	r2,zero,100077f4 <__alt_data_end+0xf80077f4>
10007888:	0005883a 	mov	r2,zero
1000788c:	003fe806 	br	10007830 <__alt_data_end+0xf8007830>
10007890:	00092640 	call	10009264 <__sfvwrite_r>
10007894:	003fe606 	br	10007830 <__alt_data_end+0xf8007830>

10007898 <__sprint_r>:
10007898:	30c00217 	ldw	r3,8(r6)
1000789c:	18000126 	beq	r3,zero,100078a4 <__sprint_r+0xc>
100078a0:	000779c1 	jmpi	1000779c <__sprint_r.part.0>
100078a4:	30000115 	stw	zero,4(r6)
100078a8:	0005883a 	mov	r2,zero
100078ac:	f800283a 	ret

100078b0 <___vfiprintf_internal_r>:
100078b0:	defec804 	addi	sp,sp,-1248
100078b4:	dfc13715 	stw	ra,1244(sp)
100078b8:	df013615 	stw	fp,1240(sp)
100078bc:	ddc13515 	stw	r23,1236(sp)
100078c0:	dd813415 	stw	r22,1232(sp)
100078c4:	dd413315 	stw	r21,1228(sp)
100078c8:	dd013215 	stw	r20,1224(sp)
100078cc:	dcc13115 	stw	r19,1220(sp)
100078d0:	dc813015 	stw	r18,1216(sp)
100078d4:	dc412f15 	stw	r17,1212(sp)
100078d8:	dc012e15 	stw	r16,1208(sp)
100078dc:	d9012215 	stw	r4,1160(sp)
100078e0:	d9412015 	stw	r5,1152(sp)
100078e4:	d9c12315 	stw	r7,1164(sp)
100078e8:	3013883a 	mov	r9,r6
100078ec:	20000226 	beq	r4,zero,100078f8 <___vfiprintf_internal_r+0x48>
100078f0:	20800e17 	ldw	r2,56(r4)
100078f4:	1000f926 	beq	r2,zero,10007cdc <___vfiprintf_internal_r+0x42c>
100078f8:	d8c12017 	ldw	r3,1152(sp)
100078fc:	1880030b 	ldhu	r2,12(r3)
10007900:	1108000c 	andi	r4,r2,8192
10007904:	1007883a 	mov	r3,r2
10007908:	2000081e 	bne	r4,zero,1000792c <___vfiprintf_internal_r+0x7c>
1000790c:	d9412017 	ldw	r5,1152(sp)
10007910:	10c80014 	ori	r3,r2,8192
10007914:	00b7ffc4 	movi	r2,-8193
10007918:	29001917 	ldw	r4,100(r5)
1000791c:	28c0030d 	sth	r3,12(r5)
10007920:	2088703a 	and	r4,r4,r2
10007924:	29001915 	stw	r4,100(r5)
10007928:	1805883a 	mov	r2,r3
1000792c:	1900020c 	andi	r4,r3,8
10007930:	2000a726 	beq	r4,zero,10007bd0 <___vfiprintf_internal_r+0x320>
10007934:	d9412017 	ldw	r5,1152(sp)
10007938:	29000417 	ldw	r4,16(r5)
1000793c:	2000a426 	beq	r4,zero,10007bd0 <___vfiprintf_internal_r+0x320>
10007940:	18c0068c 	andi	r3,r3,26
10007944:	01000284 	movi	r4,10
10007948:	1900ad26 	beq	r3,r4,10007c00 <___vfiprintf_internal_r+0x350>
1000794c:	d90109c4 	addi	r4,sp,1063
10007950:	d9410a04 	addi	r5,sp,1064
10007954:	2905c83a 	sub	r2,r5,r4
10007958:	d9011e15 	stw	r4,1144(sp)
1000795c:	d9411f15 	stw	r5,1148(sp)
10007960:	dec11a15 	stw	sp,1128(sp)
10007964:	d8011c15 	stw	zero,1136(sp)
10007968:	d8011b15 	stw	zero,1132(sp)
1000796c:	d8012715 	stw	zero,1180(sp)
10007970:	d8012415 	stw	zero,1168(sp)
10007974:	d811883a 	mov	r8,sp
10007978:	04c40074 	movhi	r19,4097
1000797c:	9cc00e04 	addi	r19,r19,56
10007980:	04040074 	movhi	r16,4097
10007984:	84000a04 	addi	r16,r16,40
10007988:	d8812815 	stw	r2,1184(sp)
1000798c:	48800007 	ldb	r2,0(r9)
10007990:	10040126 	beq	r2,zero,10008998 <___vfiprintf_internal_r+0x10e8>
10007994:	00c00944 	movi	r3,37
10007998:	4829883a 	mov	r20,r9
1000799c:	10c0021e 	bne	r2,r3,100079a8 <___vfiprintf_internal_r+0xf8>
100079a0:	00001606 	br	100079fc <___vfiprintf_internal_r+0x14c>
100079a4:	10c00326 	beq	r2,r3,100079b4 <___vfiprintf_internal_r+0x104>
100079a8:	a5000044 	addi	r20,r20,1
100079ac:	a0800007 	ldb	r2,0(r20)
100079b0:	103ffc1e 	bne	r2,zero,100079a4 <__alt_data_end+0xf80079a4>
100079b4:	a263c83a 	sub	r17,r20,r9
100079b8:	88001026 	beq	r17,zero,100079fc <___vfiprintf_internal_r+0x14c>
100079bc:	d8c11c17 	ldw	r3,1136(sp)
100079c0:	d8811b17 	ldw	r2,1132(sp)
100079c4:	42400015 	stw	r9,0(r8)
100079c8:	88c7883a 	add	r3,r17,r3
100079cc:	10800044 	addi	r2,r2,1
100079d0:	44400115 	stw	r17,4(r8)
100079d4:	d8c11c15 	stw	r3,1136(sp)
100079d8:	d8811b15 	stw	r2,1132(sp)
100079dc:	010001c4 	movi	r4,7
100079e0:	2080760e 	bge	r4,r2,10007bbc <___vfiprintf_internal_r+0x30c>
100079e4:	1803b41e 	bne	r3,zero,100088b8 <___vfiprintf_internal_r+0x1008>
100079e8:	d8c12417 	ldw	r3,1168(sp)
100079ec:	d8011b15 	stw	zero,1132(sp)
100079f0:	d811883a 	mov	r8,sp
100079f4:	1c47883a 	add	r3,r3,r17
100079f8:	d8c12415 	stw	r3,1168(sp)
100079fc:	a0800007 	ldb	r2,0(r20)
10007a00:	1002dc26 	beq	r2,zero,10008574 <___vfiprintf_internal_r+0xcc4>
10007a04:	04bfffc4 	movi	r18,-1
10007a08:	a2400044 	addi	r9,r20,1
10007a0c:	a0c00047 	ldb	r3,1(r20)
10007a10:	d8011d85 	stb	zero,1142(sp)
10007a14:	002d883a 	mov	r22,zero
10007a18:	d8012115 	stw	zero,1156(sp)
10007a1c:	0023883a 	mov	r17,zero
10007a20:	05001604 	movi	r20,88
10007a24:	05400244 	movi	r21,9
10007a28:	402f883a 	mov	r23,r8
10007a2c:	900d883a 	mov	r6,r18
10007a30:	4a400044 	addi	r9,r9,1
10007a34:	18bff804 	addi	r2,r3,-32
10007a38:	a0828736 	bltu	r20,r2,10008458 <___vfiprintf_internal_r+0xba8>
10007a3c:	1085883a 	add	r2,r2,r2
10007a40:	1085883a 	add	r2,r2,r2
10007a44:	01040034 	movhi	r4,4096
10007a48:	211e9604 	addi	r4,r4,31320
10007a4c:	1105883a 	add	r2,r2,r4
10007a50:	10800017 	ldw	r2,0(r2)
10007a54:	1000683a 	jmp	r2
10007a58:	100081b8 	rdprs	zero,r2,518
10007a5c:	10008458 	cmpnei	zero,r2,529
10007a60:	10008458 	cmpnei	zero,r2,529
10007a64:	100081d4 	ori	zero,r2,519
10007a68:	10008458 	cmpnei	zero,r2,529
10007a6c:	10008458 	cmpnei	zero,r2,529
10007a70:	10008458 	cmpnei	zero,r2,529
10007a74:	10008458 	cmpnei	zero,r2,529
10007a78:	10008458 	cmpnei	zero,r2,529
10007a7c:	10008458 	cmpnei	zero,r2,529
10007a80:	10008268 	cmpgeui	zero,r2,521
10007a84:	10008290 	cmplti	zero,r2,522
10007a88:	10008458 	cmpnei	zero,r2,529
10007a8c:	10007cfc 	xorhi	zero,r2,499
10007a90:	1000829c 	xori	zero,r2,522
10007a94:	10008458 	cmpnei	zero,r2,529
10007a98:	10007d08 	cmpgei	zero,r2,500
10007a9c:	10007d14 	ori	zero,r2,500
10007aa0:	10007d14 	ori	zero,r2,500
10007aa4:	10007d14 	ori	zero,r2,500
10007aa8:	10007d14 	ori	zero,r2,500
10007aac:	10007d14 	ori	zero,r2,500
10007ab0:	10007d14 	ori	zero,r2,500
10007ab4:	10007d14 	ori	zero,r2,500
10007ab8:	10007d14 	ori	zero,r2,500
10007abc:	10007d14 	ori	zero,r2,500
10007ac0:	10008458 	cmpnei	zero,r2,529
10007ac4:	10008458 	cmpnei	zero,r2,529
10007ac8:	10008458 	cmpnei	zero,r2,529
10007acc:	10008458 	cmpnei	zero,r2,529
10007ad0:	10008458 	cmpnei	zero,r2,529
10007ad4:	10008458 	cmpnei	zero,r2,529
10007ad8:	10008458 	cmpnei	zero,r2,529
10007adc:	10008458 	cmpnei	zero,r2,529
10007ae0:	10008458 	cmpnei	zero,r2,529
10007ae4:	10008458 	cmpnei	zero,r2,529
10007ae8:	10007d5c 	xori	zero,r2,501
10007aec:	10008458 	cmpnei	zero,r2,529
10007af0:	10008458 	cmpnei	zero,r2,529
10007af4:	10008458 	cmpnei	zero,r2,529
10007af8:	10008458 	cmpnei	zero,r2,529
10007afc:	10008458 	cmpnei	zero,r2,529
10007b00:	10008458 	cmpnei	zero,r2,529
10007b04:	10008458 	cmpnei	zero,r2,529
10007b08:	10008458 	cmpnei	zero,r2,529
10007b0c:	10008458 	cmpnei	zero,r2,529
10007b10:	10008458 	cmpnei	zero,r2,529
10007b14:	100080b0 	cmpltui	zero,r2,514
10007b18:	10008458 	cmpnei	zero,r2,529
10007b1c:	10008458 	cmpnei	zero,r2,529
10007b20:	10008458 	cmpnei	zero,r2,529
10007b24:	10008458 	cmpnei	zero,r2,529
10007b28:	10008458 	cmpnei	zero,r2,529
10007b2c:	100080f4 	orhi	zero,r2,515
10007b30:	10008458 	cmpnei	zero,r2,529
10007b34:	10008458 	cmpnei	zero,r2,529
10007b38:	1000812c 	andhi	zero,r2,516
10007b3c:	10008458 	cmpnei	zero,r2,529
10007b40:	10008458 	cmpnei	zero,r2,529
10007b44:	10008458 	cmpnei	zero,r2,529
10007b48:	10008458 	cmpnei	zero,r2,529
10007b4c:	10008458 	cmpnei	zero,r2,529
10007b50:	10008458 	cmpnei	zero,r2,529
10007b54:	10008458 	cmpnei	zero,r2,529
10007b58:	10008458 	cmpnei	zero,r2,529
10007b5c:	10008458 	cmpnei	zero,r2,529
10007b60:	10008458 	cmpnei	zero,r2,529
10007b64:	10008188 	cmpgei	zero,r2,518
10007b68:	100082fc 	xorhi	zero,r2,523
10007b6c:	10008458 	cmpnei	zero,r2,529
10007b70:	10008458 	cmpnei	zero,r2,529
10007b74:	10008458 	cmpnei	zero,r2,529
10007b78:	100082f0 	cmpltui	zero,r2,523
10007b7c:	100082fc 	xorhi	zero,r2,523
10007b80:	10008458 	cmpnei	zero,r2,529
10007b84:	10008458 	cmpnei	zero,r2,529
10007b88:	100081e0 	cmpeqi	zero,r2,519
10007b8c:	10008458 	cmpnei	zero,r2,529
10007b90:	100081f8 	rdprs	zero,r2,519
10007b94:	10008230 	cmpltui	zero,r2,520
10007b98:	10008410 	cmplti	zero,r2,528
10007b9c:	10008334 	orhi	zero,r2,524
10007ba0:	10008458 	cmpnei	zero,r2,529
10007ba4:	10008340 	call	11000834 <_gp+0xfe6c0c>
10007ba8:	10008458 	cmpnei	zero,r2,529
10007bac:	10008398 	cmpnei	zero,r2,526
10007bb0:	10008458 	cmpnei	zero,r2,529
10007bb4:	10008458 	cmpnei	zero,r2,529
10007bb8:	100083d0 	cmplti	zero,r2,527
10007bbc:	42000204 	addi	r8,r8,8
10007bc0:	d8c12417 	ldw	r3,1168(sp)
10007bc4:	1c47883a 	add	r3,r3,r17
10007bc8:	d8c12415 	stw	r3,1168(sp)
10007bcc:	003f8b06 	br	100079fc <__alt_data_end+0xf80079fc>
10007bd0:	d9012217 	ldw	r4,1160(sp)
10007bd4:	d9412017 	ldw	r5,1152(sp)
10007bd8:	da412d15 	stw	r9,1204(sp)
10007bdc:	00031c80 	call	100031c8 <__swsetup_r>
10007be0:	da412d17 	ldw	r9,1204(sp)
10007be4:	1000301e 	bne	r2,zero,10007ca8 <___vfiprintf_internal_r+0x3f8>
10007be8:	d8c12017 	ldw	r3,1152(sp)
10007bec:	01000284 	movi	r4,10
10007bf0:	1880030b 	ldhu	r2,12(r3)
10007bf4:	1007883a 	mov	r3,r2
10007bf8:	18c0068c 	andi	r3,r3,26
10007bfc:	193f531e 	bne	r3,r4,1000794c <__alt_data_end+0xf800794c>
10007c00:	d9012017 	ldw	r4,1152(sp)
10007c04:	20c0038b 	ldhu	r3,14(r4)
10007c08:	193fffcc 	andi	r4,r3,65535
10007c0c:	2120001c 	xori	r4,r4,32768
10007c10:	21200004 	addi	r4,r4,-32768
10007c14:	203f4d16 	blt	r4,zero,1000794c <__alt_data_end+0xf800794c>
10007c18:	d9412017 	ldw	r5,1152(sp)
10007c1c:	d9012217 	ldw	r4,1160(sp)
10007c20:	d9c12317 	ldw	r7,1164(sp)
10007c24:	2b001917 	ldw	r12,100(r5)
10007c28:	2ac00717 	ldw	r11,28(r5)
10007c2c:	2a800917 	ldw	r10,36(r5)
10007c30:	02010004 	movi	r8,1024
10007c34:	10bfff4c 	andi	r2,r2,65533
10007c38:	da0b883a 	add	r5,sp,r8
10007c3c:	480d883a 	mov	r6,r9
10007c40:	d881030d 	sth	r2,1036(sp)
10007c44:	db011915 	stw	r12,1124(sp)
10007c48:	d8c1038d 	sth	r3,1038(sp)
10007c4c:	dac10715 	stw	r11,1052(sp)
10007c50:	da810915 	stw	r10,1060(sp)
10007c54:	dec10015 	stw	sp,1024(sp)
10007c58:	dec10415 	stw	sp,1040(sp)
10007c5c:	da010215 	stw	r8,1032(sp)
10007c60:	da010515 	stw	r8,1044(sp)
10007c64:	d8010615 	stw	zero,1048(sp)
10007c68:	00078b00 	call	100078b0 <___vfiprintf_internal_r>
10007c6c:	1021883a 	mov	r16,r2
10007c70:	10000416 	blt	r2,zero,10007c84 <___vfiprintf_internal_r+0x3d4>
10007c74:	d9012217 	ldw	r4,1160(sp)
10007c78:	d9410004 	addi	r5,sp,1024
10007c7c:	0004b640 	call	10004b64 <_fflush_r>
10007c80:	10040b1e 	bne	r2,zero,10008cb0 <___vfiprintf_internal_r+0x1400>
10007c84:	d881030b 	ldhu	r2,1036(sp)
10007c88:	1080100c 	andi	r2,r2,64
10007c8c:	10000426 	beq	r2,zero,10007ca0 <___vfiprintf_internal_r+0x3f0>
10007c90:	d8c12017 	ldw	r3,1152(sp)
10007c94:	1880030b 	ldhu	r2,12(r3)
10007c98:	10801014 	ori	r2,r2,64
10007c9c:	1880030d 	sth	r2,12(r3)
10007ca0:	8005883a 	mov	r2,r16
10007ca4:	00000106 	br	10007cac <___vfiprintf_internal_r+0x3fc>
10007ca8:	00bfffc4 	movi	r2,-1
10007cac:	dfc13717 	ldw	ra,1244(sp)
10007cb0:	df013617 	ldw	fp,1240(sp)
10007cb4:	ddc13517 	ldw	r23,1236(sp)
10007cb8:	dd813417 	ldw	r22,1232(sp)
10007cbc:	dd413317 	ldw	r21,1228(sp)
10007cc0:	dd013217 	ldw	r20,1224(sp)
10007cc4:	dcc13117 	ldw	r19,1220(sp)
10007cc8:	dc813017 	ldw	r18,1216(sp)
10007ccc:	dc412f17 	ldw	r17,1212(sp)
10007cd0:	dc012e17 	ldw	r16,1208(sp)
10007cd4:	dec13804 	addi	sp,sp,1248
10007cd8:	f800283a 	ret
10007cdc:	d9812d15 	stw	r6,1204(sp)
10007ce0:	0004e840 	call	10004e84 <__sinit>
10007ce4:	da412d17 	ldw	r9,1204(sp)
10007ce8:	003f0306 	br	100078f8 <__alt_data_end+0xf80078f8>
10007cec:	d9412117 	ldw	r5,1156(sp)
10007cf0:	d8812315 	stw	r2,1164(sp)
10007cf4:	014bc83a 	sub	r5,zero,r5
10007cf8:	d9412115 	stw	r5,1156(sp)
10007cfc:	8c400114 	ori	r17,r17,4
10007d00:	48c00007 	ldb	r3,0(r9)
10007d04:	003f4a06 	br	10007a30 <__alt_data_end+0xf8007a30>
10007d08:	8c402014 	ori	r17,r17,128
10007d0c:	48c00007 	ldb	r3,0(r9)
10007d10:	003f4706 	br	10007a30 <__alt_data_end+0xf8007a30>
10007d14:	4825883a 	mov	r18,r9
10007d18:	d8012115 	stw	zero,1156(sp)
10007d1c:	1f3ff404 	addi	fp,r3,-48
10007d20:	00000106 	br	10007d28 <___vfiprintf_internal_r+0x478>
10007d24:	1025883a 	mov	r18,r2
10007d28:	d9012117 	ldw	r4,1156(sp)
10007d2c:	01400284 	movi	r5,10
10007d30:	d9812b15 	stw	r6,1196(sp)
10007d34:	000b0240 	call	1000b024 <__mulsi3>
10007d38:	90c00007 	ldb	r3,0(r18)
10007d3c:	1739883a 	add	fp,r2,fp
10007d40:	df012115 	stw	fp,1156(sp)
10007d44:	90800044 	addi	r2,r18,1
10007d48:	1f3ff404 	addi	fp,r3,-48
10007d4c:	1013883a 	mov	r9,r2
10007d50:	d9812b17 	ldw	r6,1196(sp)
10007d54:	af3ff32e 	bgeu	r21,fp,10007d24 <__alt_data_end+0xf8007d24>
10007d58:	003f3606 	br	10007a34 <__alt_data_end+0xf8007a34>
10007d5c:	8c400414 	ori	r17,r17,16
10007d60:	dd811d85 	stb	r22,1142(sp)
10007d64:	8880080c 	andi	r2,r17,32
10007d68:	b811883a 	mov	r8,r23
10007d6c:	3025883a 	mov	r18,r6
10007d70:	10016726 	beq	r2,zero,10008310 <___vfiprintf_internal_r+0xa60>
10007d74:	d8c12317 	ldw	r3,1164(sp)
10007d78:	18800117 	ldw	r2,4(r3)
10007d7c:	1d000017 	ldw	r20,0(r3)
10007d80:	18c00204 	addi	r3,r3,8
10007d84:	d8c12315 	stw	r3,1164(sp)
10007d88:	102b883a 	mov	r21,r2
10007d8c:	10030416 	blt	r2,zero,100089a0 <___vfiprintf_internal_r+0x10f0>
10007d90:	dd811d83 	ldbu	r22,1142(sp)
10007d94:	900f883a 	mov	r7,r18
10007d98:	00800044 	movi	r2,1
10007d9c:	a548b03a 	or	r4,r20,r21
10007da0:	90000216 	blt	r18,zero,10007dac <___vfiprintf_internal_r+0x4fc>
10007da4:	00ffdfc4 	movi	r3,-129
10007da8:	88e2703a 	and	r17,r17,r3
10007dac:	10803fcc 	andi	r2,r2,255
10007db0:	2001db1e 	bne	r4,zero,10008520 <___vfiprintf_internal_r+0xc70>
10007db4:	9001da1e 	bne	r18,zero,10008520 <___vfiprintf_internal_r+0xc70>
10007db8:	1002ab1e 	bne	r2,zero,10008868 <___vfiprintf_internal_r+0xfb8>
10007dbc:	8880004c 	andi	r2,r17,1
10007dc0:	1002a926 	beq	r2,zero,10008868 <___vfiprintf_internal_r+0xfb8>
10007dc4:	d9c12817 	ldw	r7,1184(sp)
10007dc8:	00800c04 	movi	r2,48
10007dcc:	d88109c5 	stb	r2,1063(sp)
10007dd0:	ddc109c4 	addi	r23,sp,1063
10007dd4:	3829883a 	mov	r20,r7
10007dd8:	3c80010e 	bge	r7,r18,10007de0 <___vfiprintf_internal_r+0x530>
10007ddc:	9029883a 	mov	r20,r18
10007de0:	b5803fcc 	andi	r22,r22,255
10007de4:	b580201c 	xori	r22,r22,128
10007de8:	b5bfe004 	addi	r22,r22,-128
10007dec:	b0000126 	beq	r22,zero,10007df4 <___vfiprintf_internal_r+0x544>
10007df0:	a5000044 	addi	r20,r20,1
10007df4:	8a80008c 	andi	r10,r17,2
10007df8:	50000126 	beq	r10,zero,10007e00 <___vfiprintf_internal_r+0x550>
10007dfc:	a5000084 	addi	r20,r20,2
10007e00:	8d40210c 	andi	r21,r17,132
10007e04:	a801aa1e 	bne	r21,zero,100084b0 <___vfiprintf_internal_r+0xc00>
10007e08:	d8c12117 	ldw	r3,1156(sp)
10007e0c:	1d2dc83a 	sub	r22,r3,r20
10007e10:	0581a70e 	bge	zero,r22,100084b0 <___vfiprintf_internal_r+0xc00>
10007e14:	07000404 	movi	fp,16
10007e18:	d8c11c17 	ldw	r3,1136(sp)
10007e1c:	e583780e 	bge	fp,r22,10008c00 <___vfiprintf_internal_r+0x1350>
10007e20:	01440074 	movhi	r5,4097
10007e24:	29400e04 	addi	r5,r5,56
10007e28:	dc412615 	stw	r17,1176(sp)
10007e2c:	d9011b17 	ldw	r4,1132(sp)
10007e30:	b023883a 	mov	r17,r22
10007e34:	d9412515 	stw	r5,1172(sp)
10007e38:	030001c4 	movi	r12,7
10007e3c:	d9c12915 	stw	r7,1188(sp)
10007e40:	da812a15 	stw	r10,1192(sp)
10007e44:	482d883a 	mov	r22,r9
10007e48:	00000506 	br	10007e60 <___vfiprintf_internal_r+0x5b0>
10007e4c:	21400084 	addi	r5,r4,2
10007e50:	42000204 	addi	r8,r8,8
10007e54:	1009883a 	mov	r4,r2
10007e58:	8c7ffc04 	addi	r17,r17,-16
10007e5c:	e4400d0e 	bge	fp,r17,10007e94 <___vfiprintf_internal_r+0x5e4>
10007e60:	18c00404 	addi	r3,r3,16
10007e64:	20800044 	addi	r2,r4,1
10007e68:	44c00015 	stw	r19,0(r8)
10007e6c:	47000115 	stw	fp,4(r8)
10007e70:	d8c11c15 	stw	r3,1136(sp)
10007e74:	d8811b15 	stw	r2,1132(sp)
10007e78:	60bff40e 	bge	r12,r2,10007e4c <__alt_data_end+0xf8007e4c>
10007e7c:	1801801e 	bne	r3,zero,10008480 <___vfiprintf_internal_r+0xbd0>
10007e80:	8c7ffc04 	addi	r17,r17,-16
10007e84:	0009883a 	mov	r4,zero
10007e88:	01400044 	movi	r5,1
10007e8c:	d811883a 	mov	r8,sp
10007e90:	e47ff316 	blt	fp,r17,10007e60 <__alt_data_end+0xf8007e60>
10007e94:	b013883a 	mov	r9,r22
10007e98:	d9c12917 	ldw	r7,1188(sp)
10007e9c:	882d883a 	mov	r22,r17
10007ea0:	da812a17 	ldw	r10,1192(sp)
10007ea4:	dc412617 	ldw	r17,1176(sp)
10007ea8:	d8812517 	ldw	r2,1172(sp)
10007eac:	b0c7883a 	add	r3,r22,r3
10007eb0:	45800115 	stw	r22,4(r8)
10007eb4:	40800015 	stw	r2,0(r8)
10007eb8:	d8c11c15 	stw	r3,1136(sp)
10007ebc:	d9411b15 	stw	r5,1132(sp)
10007ec0:	008001c4 	movi	r2,7
10007ec4:	11426a16 	blt	r2,r5,10008870 <___vfiprintf_internal_r+0xfc0>
10007ec8:	d9011d87 	ldb	r4,1142(sp)
10007ecc:	42000204 	addi	r8,r8,8
10007ed0:	28800044 	addi	r2,r5,1
10007ed4:	20017b1e 	bne	r4,zero,100084c4 <___vfiprintf_internal_r+0xc14>
10007ed8:	50000c26 	beq	r10,zero,10007f0c <___vfiprintf_internal_r+0x65c>
10007edc:	d9011d04 	addi	r4,sp,1140
10007ee0:	18c00084 	addi	r3,r3,2
10007ee4:	41000015 	stw	r4,0(r8)
10007ee8:	01000084 	movi	r4,2
10007eec:	41000115 	stw	r4,4(r8)
10007ef0:	d8c11c15 	stw	r3,1136(sp)
10007ef4:	d8811b15 	stw	r2,1132(sp)
10007ef8:	010001c4 	movi	r4,7
10007efc:	20821716 	blt	r4,r2,1000875c <___vfiprintf_internal_r+0xeac>
10007f00:	100b883a 	mov	r5,r2
10007f04:	42000204 	addi	r8,r8,8
10007f08:	10800044 	addi	r2,r2,1
10007f0c:	01002004 	movi	r4,128
10007f10:	a901d126 	beq	r21,r4,10008658 <___vfiprintf_internal_r+0xda8>
10007f14:	91e5c83a 	sub	r18,r18,r7
10007f18:	0480290e 	bge	zero,r18,10007fc0 <___vfiprintf_internal_r+0x710>
10007f1c:	05800404 	movi	r22,16
10007f20:	05440074 	movhi	r21,4097
10007f24:	ad400a04 	addi	r21,r21,40
10007f28:	b4801c0e 	bge	r22,r18,10007f9c <___vfiprintf_internal_r+0x6ec>
10007f2c:	dc412515 	stw	r17,1172(sp)
10007f30:	070001c4 	movi	fp,7
10007f34:	9023883a 	mov	r17,r18
10007f38:	d9c12615 	stw	r7,1176(sp)
10007f3c:	4825883a 	mov	r18,r9
10007f40:	00000506 	br	10007f58 <___vfiprintf_internal_r+0x6a8>
10007f44:	28800084 	addi	r2,r5,2
10007f48:	42000204 	addi	r8,r8,8
10007f4c:	200b883a 	mov	r5,r4
10007f50:	8c7ffc04 	addi	r17,r17,-16
10007f54:	b4400d0e 	bge	r22,r17,10007f8c <___vfiprintf_internal_r+0x6dc>
10007f58:	18c00404 	addi	r3,r3,16
10007f5c:	29000044 	addi	r4,r5,1
10007f60:	44000015 	stw	r16,0(r8)
10007f64:	45800115 	stw	r22,4(r8)
10007f68:	d8c11c15 	stw	r3,1136(sp)
10007f6c:	d9011b15 	stw	r4,1132(sp)
10007f70:	e13ff40e 	bge	fp,r4,10007f44 <__alt_data_end+0xf8007f44>
10007f74:	1801601e 	bne	r3,zero,100084f8 <___vfiprintf_internal_r+0xc48>
10007f78:	8c7ffc04 	addi	r17,r17,-16
10007f7c:	000b883a 	mov	r5,zero
10007f80:	00800044 	movi	r2,1
10007f84:	d811883a 	mov	r8,sp
10007f88:	b47ff316 	blt	r22,r17,10007f58 <__alt_data_end+0xf8007f58>
10007f8c:	9013883a 	mov	r9,r18
10007f90:	d9c12617 	ldw	r7,1176(sp)
10007f94:	8825883a 	mov	r18,r17
10007f98:	dc412517 	ldw	r17,1172(sp)
10007f9c:	1c87883a 	add	r3,r3,r18
10007fa0:	45400015 	stw	r21,0(r8)
10007fa4:	44800115 	stw	r18,4(r8)
10007fa8:	d8c11c15 	stw	r3,1136(sp)
10007fac:	d8811b15 	stw	r2,1132(sp)
10007fb0:	010001c4 	movi	r4,7
10007fb4:	20819e16 	blt	r4,r2,10008630 <___vfiprintf_internal_r+0xd80>
10007fb8:	42000204 	addi	r8,r8,8
10007fbc:	10800044 	addi	r2,r2,1
10007fc0:	38c7883a 	add	r3,r7,r3
10007fc4:	45c00015 	stw	r23,0(r8)
10007fc8:	41c00115 	stw	r7,4(r8)
10007fcc:	d8c11c15 	stw	r3,1136(sp)
10007fd0:	d8811b15 	stw	r2,1132(sp)
10007fd4:	010001c4 	movi	r4,7
10007fd8:	20819d0e 	bge	r4,r2,10008650 <___vfiprintf_internal_r+0xda0>
10007fdc:	1802291e 	bne	r3,zero,10008884 <___vfiprintf_internal_r+0xfd4>
10007fe0:	d8011b15 	stw	zero,1132(sp)
10007fe4:	d811883a 	mov	r8,sp
10007fe8:	8c40010c 	andi	r17,r17,4
10007fec:	88017526 	beq	r17,zero,100085c4 <___vfiprintf_internal_r+0xd14>
10007ff0:	d9412117 	ldw	r5,1156(sp)
10007ff4:	2d23c83a 	sub	r17,r5,r20
10007ff8:	0441720e 	bge	zero,r17,100085c4 <___vfiprintf_internal_r+0xd14>
10007ffc:	04800404 	movi	r18,16
10008000:	9443170e 	bge	r18,r17,10008c60 <___vfiprintf_internal_r+0x13b0>
10008004:	01440074 	movhi	r5,4097
10008008:	29400e04 	addi	r5,r5,56
1000800c:	d9011b17 	ldw	r4,1132(sp)
10008010:	d9412515 	stw	r5,1172(sp)
10008014:	058001c4 	movi	r22,7
10008018:	dd412217 	ldw	r21,1160(sp)
1000801c:	ddc12017 	ldw	r23,1152(sp)
10008020:	4839883a 	mov	fp,r9
10008024:	00000506 	br	1000803c <___vfiprintf_internal_r+0x78c>
10008028:	21400084 	addi	r5,r4,2
1000802c:	42000204 	addi	r8,r8,8
10008030:	1009883a 	mov	r4,r2
10008034:	8c7ffc04 	addi	r17,r17,-16
10008038:	94400d0e 	bge	r18,r17,10008070 <___vfiprintf_internal_r+0x7c0>
1000803c:	18c00404 	addi	r3,r3,16
10008040:	20800044 	addi	r2,r4,1
10008044:	44c00015 	stw	r19,0(r8)
10008048:	44800115 	stw	r18,4(r8)
1000804c:	d8c11c15 	stw	r3,1136(sp)
10008050:	d8811b15 	stw	r2,1132(sp)
10008054:	b0bff40e 	bge	r22,r2,10008028 <__alt_data_end+0xf8008028>
10008058:	18016b1e 	bne	r3,zero,10008608 <___vfiprintf_internal_r+0xd58>
1000805c:	8c7ffc04 	addi	r17,r17,-16
10008060:	0009883a 	mov	r4,zero
10008064:	01400044 	movi	r5,1
10008068:	d811883a 	mov	r8,sp
1000806c:	947ff316 	blt	r18,r17,1000803c <__alt_data_end+0xf800803c>
10008070:	e013883a 	mov	r9,fp
10008074:	d8812517 	ldw	r2,1172(sp)
10008078:	1c47883a 	add	r3,r3,r17
1000807c:	44400115 	stw	r17,4(r8)
10008080:	40800015 	stw	r2,0(r8)
10008084:	d8c11c15 	stw	r3,1136(sp)
10008088:	d9411b15 	stw	r5,1132(sp)
1000808c:	008001c4 	movi	r2,7
10008090:	11414c0e 	bge	r2,r5,100085c4 <___vfiprintf_internal_r+0xd14>
10008094:	1801431e 	bne	r3,zero,100085a4 <___vfiprintf_internal_r+0xcf4>
10008098:	d8c12117 	ldw	r3,1156(sp)
1000809c:	a0c28e16 	blt	r20,r3,10008ad8 <___vfiprintf_internal_r+0x1228>
100080a0:	d9012417 	ldw	r4,1168(sp)
100080a4:	2509883a 	add	r4,r4,r20
100080a8:	d9012415 	stw	r4,1168(sp)
100080ac:	00015306 	br	100085fc <___vfiprintf_internal_r+0xd4c>
100080b0:	8c400414 	ori	r17,r17,16
100080b4:	8880080c 	andi	r2,r17,32
100080b8:	b811883a 	mov	r8,r23
100080bc:	3025883a 	mov	r18,r6
100080c0:	10005f26 	beq	r2,zero,10008240 <___vfiprintf_internal_r+0x990>
100080c4:	d8812317 	ldw	r2,1164(sp)
100080c8:	d8c12317 	ldw	r3,1164(sp)
100080cc:	15000017 	ldw	r20,0(r2)
100080d0:	15400117 	ldw	r21,4(r2)
100080d4:	18c00204 	addi	r3,r3,8
100080d8:	0005883a 	mov	r2,zero
100080dc:	d8c12315 	stw	r3,1164(sp)
100080e0:	a548b03a 	or	r4,r20,r21
100080e4:	d8011d85 	stb	zero,1142(sp)
100080e8:	900f883a 	mov	r7,r18
100080ec:	002d883a 	mov	r22,zero
100080f0:	003f2b06 	br	10007da0 <__alt_data_end+0xf8007da0>
100080f4:	8c400414 	ori	r17,r17,16
100080f8:	8880080c 	andi	r2,r17,32
100080fc:	b811883a 	mov	r8,r23
10008100:	3025883a 	mov	r18,r6
10008104:	1000a826 	beq	r2,zero,100083a8 <___vfiprintf_internal_r+0xaf8>
10008108:	d8812317 	ldw	r2,1164(sp)
1000810c:	d8c12317 	ldw	r3,1164(sp)
10008110:	15000017 	ldw	r20,0(r2)
10008114:	15400117 	ldw	r21,4(r2)
10008118:	18c00204 	addi	r3,r3,8
1000811c:	00800044 	movi	r2,1
10008120:	d8c12315 	stw	r3,1164(sp)
10008124:	a548b03a 	or	r4,r20,r21
10008128:	003fee06 	br	100080e4 <__alt_data_end+0xf80080e4>
1000812c:	01440074 	movhi	r5,4097
10008130:	297fa404 	addi	r5,r5,-368
10008134:	dd811d85 	stb	r22,1142(sp)
10008138:	d9412715 	stw	r5,1180(sp)
1000813c:	8880080c 	andi	r2,r17,32
10008140:	b811883a 	mov	r8,r23
10008144:	3025883a 	mov	r18,r6
10008148:	1000a926 	beq	r2,zero,100083f0 <___vfiprintf_internal_r+0xb40>
1000814c:	d9412317 	ldw	r5,1164(sp)
10008150:	2d000017 	ldw	r20,0(r5)
10008154:	2d400117 	ldw	r21,4(r5)
10008158:	29400204 	addi	r5,r5,8
1000815c:	d9412315 	stw	r5,1164(sp)
10008160:	8880004c 	andi	r2,r17,1
10008164:	1001d126 	beq	r2,zero,100088ac <___vfiprintf_internal_r+0xffc>
10008168:	a548b03a 	or	r4,r20,r21
1000816c:	20021626 	beq	r4,zero,100089c8 <___vfiprintf_internal_r+0x1118>
10008170:	00800c04 	movi	r2,48
10008174:	d8811d05 	stb	r2,1140(sp)
10008178:	d8c11d45 	stb	r3,1141(sp)
1000817c:	8c400094 	ori	r17,r17,2
10008180:	00800084 	movi	r2,2
10008184:	003fd706 	br	100080e4 <__alt_data_end+0xf80080e4>
10008188:	d9412317 	ldw	r5,1164(sp)
1000818c:	05000044 	movi	r20,1
10008190:	b811883a 	mov	r8,r23
10008194:	28800017 	ldw	r2,0(r5)
10008198:	29400104 	addi	r5,r5,4
1000819c:	d8011d85 	stb	zero,1142(sp)
100081a0:	d8810005 	stb	r2,1024(sp)
100081a4:	d9412315 	stw	r5,1164(sp)
100081a8:	a00f883a 	mov	r7,r20
100081ac:	ddc10004 	addi	r23,sp,1024
100081b0:	0025883a 	mov	r18,zero
100081b4:	003f0f06 	br	10007df4 <__alt_data_end+0xf8007df4>
100081b8:	b0803fcc 	andi	r2,r22,255
100081bc:	1080201c 	xori	r2,r2,128
100081c0:	10bfe004 	addi	r2,r2,-128
100081c4:	10021f1e 	bne	r2,zero,10008a44 <___vfiprintf_internal_r+0x1194>
100081c8:	05800804 	movi	r22,32
100081cc:	48c00007 	ldb	r3,0(r9)
100081d0:	003e1706 	br	10007a30 <__alt_data_end+0xf8007a30>
100081d4:	8c400054 	ori	r17,r17,1
100081d8:	48c00007 	ldb	r3,0(r9)
100081dc:	003e1406 	br	10007a30 <__alt_data_end+0xf8007a30>
100081e0:	48c00007 	ldb	r3,0(r9)
100081e4:	01001b04 	movi	r4,108
100081e8:	4805883a 	mov	r2,r9
100081ec:	19026526 	beq	r3,r4,10008b84 <___vfiprintf_internal_r+0x12d4>
100081f0:	8c400414 	ori	r17,r17,16
100081f4:	003e0e06 	br	10007a30 <__alt_data_end+0xf8007a30>
100081f8:	dd811d85 	stb	r22,1142(sp)
100081fc:	8880080c 	andi	r2,r17,32
10008200:	b811883a 	mov	r8,r23
10008204:	10020426 	beq	r2,zero,10008a18 <___vfiprintf_internal_r+0x1168>
10008208:	d8c12317 	ldw	r3,1164(sp)
1000820c:	d9012417 	ldw	r4,1168(sp)
10008210:	d9412317 	ldw	r5,1164(sp)
10008214:	18800017 	ldw	r2,0(r3)
10008218:	2007d7fa 	srai	r3,r4,31
1000821c:	29400104 	addi	r5,r5,4
10008220:	d9412315 	stw	r5,1164(sp)
10008224:	11000015 	stw	r4,0(r2)
10008228:	10c00115 	stw	r3,4(r2)
1000822c:	003dd706 	br	1000798c <__alt_data_end+0xf800798c>
10008230:	8880080c 	andi	r2,r17,32
10008234:	b811883a 	mov	r8,r23
10008238:	3025883a 	mov	r18,r6
1000823c:	103fa11e 	bne	r2,zero,100080c4 <__alt_data_end+0xf80080c4>
10008240:	8880040c 	andi	r2,r17,16
10008244:	1001ea26 	beq	r2,zero,100089f0 <___vfiprintf_internal_r+0x1140>
10008248:	d9012317 	ldw	r4,1164(sp)
1000824c:	002b883a 	mov	r21,zero
10008250:	0005883a 	mov	r2,zero
10008254:	25000017 	ldw	r20,0(r4)
10008258:	21000104 	addi	r4,r4,4
1000825c:	d9012315 	stw	r4,1164(sp)
10008260:	a009883a 	mov	r4,r20
10008264:	003f9f06 	br	100080e4 <__alt_data_end+0xf80080e4>
10008268:	d8812317 	ldw	r2,1164(sp)
1000826c:	d8c12317 	ldw	r3,1164(sp)
10008270:	10800017 	ldw	r2,0(r2)
10008274:	d8812115 	stw	r2,1156(sp)
10008278:	d9012117 	ldw	r4,1156(sp)
1000827c:	18800104 	addi	r2,r3,4
10008280:	203e9a16 	blt	r4,zero,10007cec <__alt_data_end+0xf8007cec>
10008284:	d8812315 	stw	r2,1164(sp)
10008288:	48c00007 	ldb	r3,0(r9)
1000828c:	003de806 	br	10007a30 <__alt_data_end+0xf8007a30>
10008290:	05800ac4 	movi	r22,43
10008294:	48c00007 	ldb	r3,0(r9)
10008298:	003de506 	br	10007a30 <__alt_data_end+0xf8007a30>
1000829c:	48c00007 	ldb	r3,0(r9)
100082a0:	01000a84 	movi	r4,42
100082a4:	48800044 	addi	r2,r9,1
100082a8:	19028326 	beq	r3,r4,10008cb8 <___vfiprintf_internal_r+0x1408>
100082ac:	1f3ff404 	addi	fp,r3,-48
100082b0:	af027a36 	bltu	r21,fp,10008c9c <___vfiprintf_internal_r+0x13ec>
100082b4:	1025883a 	mov	r18,r2
100082b8:	0009883a 	mov	r4,zero
100082bc:	00000106 	br	100082c4 <___vfiprintf_internal_r+0xa14>
100082c0:	4825883a 	mov	r18,r9
100082c4:	01400284 	movi	r5,10
100082c8:	000b0240 	call	1000b024 <__mulsi3>
100082cc:	90c00007 	ldb	r3,0(r18)
100082d0:	e089883a 	add	r4,fp,r2
100082d4:	92400044 	addi	r9,r18,1
100082d8:	1f3ff404 	addi	fp,r3,-48
100082dc:	af3ff82e 	bgeu	r21,fp,100082c0 <__alt_data_end+0xf80082c0>
100082e0:	2025883a 	mov	r18,r4
100082e4:	20022416 	blt	r4,zero,10008b78 <___vfiprintf_internal_r+0x12c8>
100082e8:	900d883a 	mov	r6,r18
100082ec:	003dd106 	br	10007a34 <__alt_data_end+0xf8007a34>
100082f0:	8c401014 	ori	r17,r17,64
100082f4:	48c00007 	ldb	r3,0(r9)
100082f8:	003dcd06 	br	10007a30 <__alt_data_end+0xf8007a30>
100082fc:	dd811d85 	stb	r22,1142(sp)
10008300:	8880080c 	andi	r2,r17,32
10008304:	b811883a 	mov	r8,r23
10008308:	3025883a 	mov	r18,r6
1000830c:	103e991e 	bne	r2,zero,10007d74 <__alt_data_end+0xf8007d74>
10008310:	8880040c 	andi	r2,r17,16
10008314:	1001d726 	beq	r2,zero,10008a74 <___vfiprintf_internal_r+0x11c4>
10008318:	d9012317 	ldw	r4,1164(sp)
1000831c:	25000017 	ldw	r20,0(r4)
10008320:	21000104 	addi	r4,r4,4
10008324:	d9012315 	stw	r4,1164(sp)
10008328:	a02bd7fa 	srai	r21,r20,31
1000832c:	a805883a 	mov	r2,r21
10008330:	003e9606 	br	10007d8c <__alt_data_end+0xf8007d8c>
10008334:	8c400814 	ori	r17,r17,32
10008338:	48c00007 	ldb	r3,0(r9)
1000833c:	003dbc06 	br	10007a30 <__alt_data_end+0xf8007a30>
10008340:	d9412317 	ldw	r5,1164(sp)
10008344:	b811883a 	mov	r8,r23
10008348:	d8011d85 	stb	zero,1142(sp)
1000834c:	2dc00017 	ldw	r23,0(r5)
10008350:	3025883a 	mov	r18,r6
10008354:	2d400104 	addi	r21,r5,4
10008358:	b8022f26 	beq	r23,zero,10008c18 <___vfiprintf_internal_r+0x1368>
1000835c:	b809883a 	mov	r4,r23
10008360:	30020f16 	blt	r6,zero,10008ba0 <___vfiprintf_internal_r+0x12f0>
10008364:	000b883a 	mov	r5,zero
10008368:	da012b15 	stw	r8,1196(sp)
1000836c:	da412d15 	stw	r9,1204(sp)
10008370:	00061340 	call	10006134 <memchr>
10008374:	da012b17 	ldw	r8,1196(sp)
10008378:	da412d17 	ldw	r9,1204(sp)
1000837c:	10024226 	beq	r2,zero,10008c88 <___vfiprintf_internal_r+0x13d8>
10008380:	15cfc83a 	sub	r7,r2,r23
10008384:	91c1d616 	blt	r18,r7,10008ae0 <___vfiprintf_internal_r+0x1230>
10008388:	dd811d83 	ldbu	r22,1142(sp)
1000838c:	dd412315 	stw	r21,1164(sp)
10008390:	0025883a 	mov	r18,zero
10008394:	003e8f06 	br	10007dd4 <__alt_data_end+0xf8007dd4>
10008398:	8880080c 	andi	r2,r17,32
1000839c:	b811883a 	mov	r8,r23
100083a0:	3025883a 	mov	r18,r6
100083a4:	103f581e 	bne	r2,zero,10008108 <__alt_data_end+0xf8008108>
100083a8:	8880040c 	andi	r2,r17,16
100083ac:	1001a726 	beq	r2,zero,10008a4c <___vfiprintf_internal_r+0x119c>
100083b0:	d9012317 	ldw	r4,1164(sp)
100083b4:	002b883a 	mov	r21,zero
100083b8:	00800044 	movi	r2,1
100083bc:	25000017 	ldw	r20,0(r4)
100083c0:	21000104 	addi	r4,r4,4
100083c4:	d9012315 	stw	r4,1164(sp)
100083c8:	a009883a 	mov	r4,r20
100083cc:	003f4506 	br	100080e4 <__alt_data_end+0xf80080e4>
100083d0:	01040074 	movhi	r4,4097
100083d4:	213fa904 	addi	r4,r4,-348
100083d8:	dd811d85 	stb	r22,1142(sp)
100083dc:	d9012715 	stw	r4,1180(sp)
100083e0:	8880080c 	andi	r2,r17,32
100083e4:	b811883a 	mov	r8,r23
100083e8:	3025883a 	mov	r18,r6
100083ec:	103f571e 	bne	r2,zero,1000814c <__alt_data_end+0xf800814c>
100083f0:	8880040c 	andi	r2,r17,16
100083f4:	10017626 	beq	r2,zero,100089d0 <___vfiprintf_internal_r+0x1120>
100083f8:	d8812317 	ldw	r2,1164(sp)
100083fc:	002b883a 	mov	r21,zero
10008400:	15000017 	ldw	r20,0(r2)
10008404:	10800104 	addi	r2,r2,4
10008408:	d8812315 	stw	r2,1164(sp)
1000840c:	003f5406 	br	10008160 <__alt_data_end+0xf8008160>
10008410:	d8c12317 	ldw	r3,1164(sp)
10008414:	00800c04 	movi	r2,48
10008418:	01040074 	movhi	r4,4097
1000841c:	213fa904 	addi	r4,r4,-348
10008420:	1d000017 	ldw	r20,0(r3)
10008424:	d8811d05 	stb	r2,1140(sp)
10008428:	18c00104 	addi	r3,r3,4
1000842c:	00801e04 	movi	r2,120
10008430:	d8811d45 	stb	r2,1141(sp)
10008434:	d9012715 	stw	r4,1180(sp)
10008438:	b811883a 	mov	r8,r23
1000843c:	3025883a 	mov	r18,r6
10008440:	002b883a 	mov	r21,zero
10008444:	8c400094 	ori	r17,r17,2
10008448:	d8c12315 	stw	r3,1164(sp)
1000844c:	00800084 	movi	r2,2
10008450:	a009883a 	mov	r4,r20
10008454:	003f2306 	br	100080e4 <__alt_data_end+0xf80080e4>
10008458:	dd811d85 	stb	r22,1142(sp)
1000845c:	b811883a 	mov	r8,r23
10008460:	18004426 	beq	r3,zero,10008574 <___vfiprintf_internal_r+0xcc4>
10008464:	05000044 	movi	r20,1
10008468:	d8c10005 	stb	r3,1024(sp)
1000846c:	d8011d85 	stb	zero,1142(sp)
10008470:	a00f883a 	mov	r7,r20
10008474:	ddc10004 	addi	r23,sp,1024
10008478:	0025883a 	mov	r18,zero
1000847c:	003e5d06 	br	10007df4 <__alt_data_end+0xf8007df4>
10008480:	d9012217 	ldw	r4,1160(sp)
10008484:	d9412017 	ldw	r5,1152(sp)
10008488:	d9811a04 	addi	r6,sp,1128
1000848c:	db012b15 	stw	r12,1196(sp)
10008490:	000779c0 	call	1000779c <__sprint_r.part.0>
10008494:	db012b17 	ldw	r12,1196(sp)
10008498:	10003c1e 	bne	r2,zero,1000858c <___vfiprintf_internal_r+0xcdc>
1000849c:	d9011b17 	ldw	r4,1132(sp)
100084a0:	d8c11c17 	ldw	r3,1136(sp)
100084a4:	d811883a 	mov	r8,sp
100084a8:	21400044 	addi	r5,r4,1
100084ac:	003e6a06 	br	10007e58 <__alt_data_end+0xf8007e58>
100084b0:	d9411b17 	ldw	r5,1132(sp)
100084b4:	d8c11c17 	ldw	r3,1136(sp)
100084b8:	28800044 	addi	r2,r5,1
100084bc:	d9011d87 	ldb	r4,1142(sp)
100084c0:	203e8526 	beq	r4,zero,10007ed8 <__alt_data_end+0xf8007ed8>
100084c4:	01000044 	movi	r4,1
100084c8:	d9411d84 	addi	r5,sp,1142
100084cc:	1907883a 	add	r3,r3,r4
100084d0:	41400015 	stw	r5,0(r8)
100084d4:	41000115 	stw	r4,4(r8)
100084d8:	d8c11c15 	stw	r3,1136(sp)
100084dc:	d8811b15 	stw	r2,1132(sp)
100084e0:	014001c4 	movi	r5,7
100084e4:	28809816 	blt	r5,r2,10008748 <___vfiprintf_internal_r+0xe98>
100084e8:	100b883a 	mov	r5,r2
100084ec:	42000204 	addi	r8,r8,8
100084f0:	1105883a 	add	r2,r2,r4
100084f4:	003e7806 	br	10007ed8 <__alt_data_end+0xf8007ed8>
100084f8:	d9012217 	ldw	r4,1160(sp)
100084fc:	d9412017 	ldw	r5,1152(sp)
10008500:	d9811a04 	addi	r6,sp,1128
10008504:	000779c0 	call	1000779c <__sprint_r.part.0>
10008508:	1000201e 	bne	r2,zero,1000858c <___vfiprintf_internal_r+0xcdc>
1000850c:	d9411b17 	ldw	r5,1132(sp)
10008510:	d8c11c17 	ldw	r3,1136(sp)
10008514:	d811883a 	mov	r8,sp
10008518:	28800044 	addi	r2,r5,1
1000851c:	003e8c06 	br	10007f50 <__alt_data_end+0xf8007f50>
10008520:	00c00044 	movi	r3,1
10008524:	10c0ab26 	beq	r2,r3,100087d4 <___vfiprintf_internal_r+0xf24>
10008528:	00c00084 	movi	r3,2
1000852c:	10c0901e 	bne	r2,r3,10008770 <___vfiprintf_internal_r+0xec0>
10008530:	d9412717 	ldw	r5,1180(sp)
10008534:	d88109c4 	addi	r2,sp,1063
10008538:	a0c003cc 	andi	r3,r20,15
1000853c:	a808973a 	slli	r4,r21,28
10008540:	28c7883a 	add	r3,r5,r3
10008544:	a028d13a 	srli	r20,r20,4
10008548:	18c00003 	ldbu	r3,0(r3)
1000854c:	a82ad13a 	srli	r21,r21,4
10008550:	2528b03a 	or	r20,r4,r20
10008554:	10c00005 	stb	r3,0(r2)
10008558:	a546b03a 	or	r3,r20,r21
1000855c:	102f883a 	mov	r23,r2
10008560:	10bfffc4 	addi	r2,r2,-1
10008564:	183ff41e 	bne	r3,zero,10008538 <__alt_data_end+0xf8008538>
10008568:	d8811f17 	ldw	r2,1148(sp)
1000856c:	15cfc83a 	sub	r7,r2,r23
10008570:	003e1806 	br	10007dd4 <__alt_data_end+0xf8007dd4>
10008574:	d8811c17 	ldw	r2,1136(sp)
10008578:	10000426 	beq	r2,zero,1000858c <___vfiprintf_internal_r+0xcdc>
1000857c:	d9012217 	ldw	r4,1160(sp)
10008580:	d9412017 	ldw	r5,1152(sp)
10008584:	d9811a04 	addi	r6,sp,1128
10008588:	000779c0 	call	1000779c <__sprint_r.part.0>
1000858c:	d8c12017 	ldw	r3,1152(sp)
10008590:	1880030b 	ldhu	r2,12(r3)
10008594:	1080100c 	andi	r2,r2,64
10008598:	103dc31e 	bne	r2,zero,10007ca8 <__alt_data_end+0xf8007ca8>
1000859c:	d8812417 	ldw	r2,1168(sp)
100085a0:	003dc206 	br	10007cac <__alt_data_end+0xf8007cac>
100085a4:	d9012217 	ldw	r4,1160(sp)
100085a8:	d9412017 	ldw	r5,1152(sp)
100085ac:	d9811a04 	addi	r6,sp,1128
100085b0:	da412d15 	stw	r9,1204(sp)
100085b4:	000779c0 	call	1000779c <__sprint_r.part.0>
100085b8:	da412d17 	ldw	r9,1204(sp)
100085bc:	103ff31e 	bne	r2,zero,1000858c <__alt_data_end+0xf800858c>
100085c0:	d8c11c17 	ldw	r3,1136(sp)
100085c4:	d9412117 	ldw	r5,1156(sp)
100085c8:	a140010e 	bge	r20,r5,100085d0 <___vfiprintf_internal_r+0xd20>
100085cc:	2829883a 	mov	r20,r5
100085d0:	d8812417 	ldw	r2,1168(sp)
100085d4:	1505883a 	add	r2,r2,r20
100085d8:	d8812415 	stw	r2,1168(sp)
100085dc:	18000726 	beq	r3,zero,100085fc <___vfiprintf_internal_r+0xd4c>
100085e0:	d9012217 	ldw	r4,1160(sp)
100085e4:	d9412017 	ldw	r5,1152(sp)
100085e8:	d9811a04 	addi	r6,sp,1128
100085ec:	da412d15 	stw	r9,1204(sp)
100085f0:	000779c0 	call	1000779c <__sprint_r.part.0>
100085f4:	da412d17 	ldw	r9,1204(sp)
100085f8:	103fe41e 	bne	r2,zero,1000858c <__alt_data_end+0xf800858c>
100085fc:	d8011b15 	stw	zero,1132(sp)
10008600:	d811883a 	mov	r8,sp
10008604:	003ce106 	br	1000798c <__alt_data_end+0xf800798c>
10008608:	a809883a 	mov	r4,r21
1000860c:	b80b883a 	mov	r5,r23
10008610:	d9811a04 	addi	r6,sp,1128
10008614:	000779c0 	call	1000779c <__sprint_r.part.0>
10008618:	103fdc1e 	bne	r2,zero,1000858c <__alt_data_end+0xf800858c>
1000861c:	d9011b17 	ldw	r4,1132(sp)
10008620:	d8c11c17 	ldw	r3,1136(sp)
10008624:	d811883a 	mov	r8,sp
10008628:	21400044 	addi	r5,r4,1
1000862c:	003e8106 	br	10008034 <__alt_data_end+0xf8008034>
10008630:	1800cb1e 	bne	r3,zero,10008960 <___vfiprintf_internal_r+0x10b0>
10008634:	00800044 	movi	r2,1
10008638:	ddc00015 	stw	r23,0(sp)
1000863c:	d9c00115 	stw	r7,4(sp)
10008640:	d9c11c15 	stw	r7,1136(sp)
10008644:	d8811b15 	stw	r2,1132(sp)
10008648:	3807883a 	mov	r3,r7
1000864c:	d811883a 	mov	r8,sp
10008650:	42000204 	addi	r8,r8,8
10008654:	003e6406 	br	10007fe8 <__alt_data_end+0xf8007fe8>
10008658:	d9012117 	ldw	r4,1156(sp)
1000865c:	252dc83a 	sub	r22,r4,r20
10008660:	05be2c0e 	bge	zero,r22,10007f14 <__alt_data_end+0xf8007f14>
10008664:	07000404 	movi	fp,16
10008668:	e581830e 	bge	fp,r22,10008c78 <___vfiprintf_internal_r+0x13c8>
1000866c:	05440074 	movhi	r21,4097
10008670:	ad400a04 	addi	r21,r21,40
10008674:	dc412515 	stw	r17,1172(sp)
10008678:	028001c4 	movi	r10,7
1000867c:	b023883a 	mov	r17,r22
10008680:	d9c12615 	stw	r7,1176(sp)
10008684:	a82d883a 	mov	r22,r21
10008688:	482b883a 	mov	r21,r9
1000868c:	00000506 	br	100086a4 <___vfiprintf_internal_r+0xdf4>
10008690:	29000084 	addi	r4,r5,2
10008694:	42000204 	addi	r8,r8,8
10008698:	100b883a 	mov	r5,r2
1000869c:	8c7ffc04 	addi	r17,r17,-16
100086a0:	e4400d0e 	bge	fp,r17,100086d8 <___vfiprintf_internal_r+0xe28>
100086a4:	18c00404 	addi	r3,r3,16
100086a8:	28800044 	addi	r2,r5,1
100086ac:	44000015 	stw	r16,0(r8)
100086b0:	47000115 	stw	fp,4(r8)
100086b4:	d8c11c15 	stw	r3,1136(sp)
100086b8:	d8811b15 	stw	r2,1132(sp)
100086bc:	50bff40e 	bge	r10,r2,10008690 <__alt_data_end+0xf8008690>
100086c0:	1800151e 	bne	r3,zero,10008718 <___vfiprintf_internal_r+0xe68>
100086c4:	8c7ffc04 	addi	r17,r17,-16
100086c8:	000b883a 	mov	r5,zero
100086cc:	01000044 	movi	r4,1
100086d0:	d811883a 	mov	r8,sp
100086d4:	e47ff316 	blt	fp,r17,100086a4 <__alt_data_end+0xf80086a4>
100086d8:	a813883a 	mov	r9,r21
100086dc:	d9c12617 	ldw	r7,1176(sp)
100086e0:	b02b883a 	mov	r21,r22
100086e4:	882d883a 	mov	r22,r17
100086e8:	dc412517 	ldw	r17,1172(sp)
100086ec:	1d87883a 	add	r3,r3,r22
100086f0:	45400015 	stw	r21,0(r8)
100086f4:	45800115 	stw	r22,4(r8)
100086f8:	d8c11c15 	stw	r3,1136(sp)
100086fc:	d9011b15 	stw	r4,1132(sp)
10008700:	008001c4 	movi	r2,7
10008704:	11009116 	blt	r2,r4,1000894c <___vfiprintf_internal_r+0x109c>
10008708:	42000204 	addi	r8,r8,8
1000870c:	20800044 	addi	r2,r4,1
10008710:	200b883a 	mov	r5,r4
10008714:	003dff06 	br	10007f14 <__alt_data_end+0xf8007f14>
10008718:	d9012217 	ldw	r4,1160(sp)
1000871c:	d9412017 	ldw	r5,1152(sp)
10008720:	d9811a04 	addi	r6,sp,1128
10008724:	da812c15 	stw	r10,1200(sp)
10008728:	000779c0 	call	1000779c <__sprint_r.part.0>
1000872c:	da812c17 	ldw	r10,1200(sp)
10008730:	103f961e 	bne	r2,zero,1000858c <__alt_data_end+0xf800858c>
10008734:	d9411b17 	ldw	r5,1132(sp)
10008738:	d8c11c17 	ldw	r3,1136(sp)
1000873c:	d811883a 	mov	r8,sp
10008740:	29000044 	addi	r4,r5,1
10008744:	003fd506 	br	1000869c <__alt_data_end+0xf800869c>
10008748:	1800701e 	bne	r3,zero,1000890c <___vfiprintf_internal_r+0x105c>
1000874c:	000b883a 	mov	r5,zero
10008750:	2005883a 	mov	r2,r4
10008754:	d811883a 	mov	r8,sp
10008758:	003ddf06 	br	10007ed8 <__alt_data_end+0xf8007ed8>
1000875c:	18005d1e 	bne	r3,zero,100088d4 <___vfiprintf_internal_r+0x1024>
10008760:	000b883a 	mov	r5,zero
10008764:	00800044 	movi	r2,1
10008768:	d811883a 	mov	r8,sp
1000876c:	003de706 	br	10007f0c <__alt_data_end+0xf8007f0c>
10008770:	d8c109c4 	addi	r3,sp,1063
10008774:	a008d0fa 	srli	r4,r20,3
10008778:	a80a977a 	slli	r5,r21,29
1000877c:	a82ad0fa 	srli	r21,r21,3
10008780:	a50001cc 	andi	r20,r20,7
10008784:	a0800c04 	addi	r2,r20,48
10008788:	2928b03a 	or	r20,r5,r4
1000878c:	18800005 	stb	r2,0(r3)
10008790:	a548b03a 	or	r4,r20,r21
10008794:	182f883a 	mov	r23,r3
10008798:	18ffffc4 	addi	r3,r3,-1
1000879c:	203ff51e 	bne	r4,zero,10008774 <__alt_data_end+0xf8008774>
100087a0:	8900004c 	andi	r4,r17,1
100087a4:	b80b883a 	mov	r5,r23
100087a8:	203f6f26 	beq	r4,zero,10008568 <__alt_data_end+0xf8008568>
100087ac:	10803fcc 	andi	r2,r2,255
100087b0:	1080201c 	xori	r2,r2,128
100087b4:	10bfe004 	addi	r2,r2,-128
100087b8:	01000c04 	movi	r4,48
100087bc:	1100f526 	beq	r2,r4,10008b94 <___vfiprintf_internal_r+0x12e4>
100087c0:	293fffc5 	stb	r4,-1(r5)
100087c4:	d9011f17 	ldw	r4,1148(sp)
100087c8:	182f883a 	mov	r23,r3
100087cc:	20cfc83a 	sub	r7,r4,r3
100087d0:	003d8006 	br	10007dd4 <__alt_data_end+0xf8007dd4>
100087d4:	a800021e 	bne	r21,zero,100087e0 <___vfiprintf_internal_r+0xf30>
100087d8:	00800244 	movi	r2,9
100087dc:	15001d2e 	bgeu	r2,r20,10008854 <___vfiprintf_internal_r+0xfa4>
100087e0:	dc412515 	stw	r17,1172(sp)
100087e4:	d88109c4 	addi	r2,sp,1063
100087e8:	a823883a 	mov	r17,r21
100087ec:	4039883a 	mov	fp,r8
100087f0:	482b883a 	mov	r21,r9
100087f4:	a009883a 	mov	r4,r20
100087f8:	880b883a 	mov	r5,r17
100087fc:	01800284 	movi	r6,10
10008800:	000f883a 	mov	r7,zero
10008804:	102f883a 	mov	r23,r2
10008808:	000a8dc0 	call	1000a8dc <__umoddi3>
1000880c:	10800c04 	addi	r2,r2,48
10008810:	a009883a 	mov	r4,r20
10008814:	880b883a 	mov	r5,r17
10008818:	b8800005 	stb	r2,0(r23)
1000881c:	01800284 	movi	r6,10
10008820:	000f883a 	mov	r7,zero
10008824:	000a2880 	call	1000a288 <__udivdi3>
10008828:	1823883a 	mov	r17,r3
1000882c:	10c6b03a 	or	r3,r2,r3
10008830:	1029883a 	mov	r20,r2
10008834:	b8bfffc4 	addi	r2,r23,-1
10008838:	183fee1e 	bne	r3,zero,100087f4 <__alt_data_end+0xf80087f4>
1000883c:	d9411f17 	ldw	r5,1148(sp)
10008840:	e011883a 	mov	r8,fp
10008844:	dc412517 	ldw	r17,1172(sp)
10008848:	a813883a 	mov	r9,r21
1000884c:	2dcfc83a 	sub	r7,r5,r23
10008850:	003d6006 	br	10007dd4 <__alt_data_end+0xf8007dd4>
10008854:	a5000c04 	addi	r20,r20,48
10008858:	dd0109c5 	stb	r20,1063(sp)
1000885c:	d9c12817 	ldw	r7,1184(sp)
10008860:	ddc109c4 	addi	r23,sp,1063
10008864:	003d5b06 	br	10007dd4 <__alt_data_end+0xf8007dd4>
10008868:	ddc10a04 	addi	r23,sp,1064
1000886c:	003d5906 	br	10007dd4 <__alt_data_end+0xf8007dd4>
10008870:	1800891e 	bne	r3,zero,10008a98 <___vfiprintf_internal_r+0x11e8>
10008874:	000b883a 	mov	r5,zero
10008878:	00800044 	movi	r2,1
1000887c:	d811883a 	mov	r8,sp
10008880:	003f0e06 	br	100084bc <__alt_data_end+0xf80084bc>
10008884:	d9012217 	ldw	r4,1160(sp)
10008888:	d9412017 	ldw	r5,1152(sp)
1000888c:	d9811a04 	addi	r6,sp,1128
10008890:	da412d15 	stw	r9,1204(sp)
10008894:	000779c0 	call	1000779c <__sprint_r.part.0>
10008898:	da412d17 	ldw	r9,1204(sp)
1000889c:	103f3b1e 	bne	r2,zero,1000858c <__alt_data_end+0xf800858c>
100088a0:	d8c11c17 	ldw	r3,1136(sp)
100088a4:	d811883a 	mov	r8,sp
100088a8:	003dcf06 	br	10007fe8 <__alt_data_end+0xf8007fe8>
100088ac:	00800084 	movi	r2,2
100088b0:	a548b03a 	or	r4,r20,r21
100088b4:	003e0b06 	br	100080e4 <__alt_data_end+0xf80080e4>
100088b8:	d9012217 	ldw	r4,1160(sp)
100088bc:	d9412017 	ldw	r5,1152(sp)
100088c0:	d9811a04 	addi	r6,sp,1128
100088c4:	000779c0 	call	1000779c <__sprint_r.part.0>
100088c8:	103f301e 	bne	r2,zero,1000858c <__alt_data_end+0xf800858c>
100088cc:	d811883a 	mov	r8,sp
100088d0:	003cbb06 	br	10007bc0 <__alt_data_end+0xf8007bc0>
100088d4:	d9012217 	ldw	r4,1160(sp)
100088d8:	d9412017 	ldw	r5,1152(sp)
100088dc:	d9811a04 	addi	r6,sp,1128
100088e0:	d9c12b15 	stw	r7,1196(sp)
100088e4:	da412d15 	stw	r9,1204(sp)
100088e8:	000779c0 	call	1000779c <__sprint_r.part.0>
100088ec:	d9c12b17 	ldw	r7,1196(sp)
100088f0:	da412d17 	ldw	r9,1204(sp)
100088f4:	103f251e 	bne	r2,zero,1000858c <__alt_data_end+0xf800858c>
100088f8:	d9411b17 	ldw	r5,1132(sp)
100088fc:	d8c11c17 	ldw	r3,1136(sp)
10008900:	d811883a 	mov	r8,sp
10008904:	28800044 	addi	r2,r5,1
10008908:	003d8006 	br	10007f0c <__alt_data_end+0xf8007f0c>
1000890c:	d9012217 	ldw	r4,1160(sp)
10008910:	d9412017 	ldw	r5,1152(sp)
10008914:	d9811a04 	addi	r6,sp,1128
10008918:	d9c12b15 	stw	r7,1196(sp)
1000891c:	da412d15 	stw	r9,1204(sp)
10008920:	da812c15 	stw	r10,1200(sp)
10008924:	000779c0 	call	1000779c <__sprint_r.part.0>
10008928:	d9c12b17 	ldw	r7,1196(sp)
1000892c:	da412d17 	ldw	r9,1204(sp)
10008930:	da812c17 	ldw	r10,1200(sp)
10008934:	103f151e 	bne	r2,zero,1000858c <__alt_data_end+0xf800858c>
10008938:	d9411b17 	ldw	r5,1132(sp)
1000893c:	d8c11c17 	ldw	r3,1136(sp)
10008940:	d811883a 	mov	r8,sp
10008944:	28800044 	addi	r2,r5,1
10008948:	003d6306 	br	10007ed8 <__alt_data_end+0xf8007ed8>
1000894c:	18009e1e 	bne	r3,zero,10008bc8 <___vfiprintf_internal_r+0x1318>
10008950:	000b883a 	mov	r5,zero
10008954:	00800044 	movi	r2,1
10008958:	d811883a 	mov	r8,sp
1000895c:	003d6d06 	br	10007f14 <__alt_data_end+0xf8007f14>
10008960:	d9012217 	ldw	r4,1160(sp)
10008964:	d9412017 	ldw	r5,1152(sp)
10008968:	d9811a04 	addi	r6,sp,1128
1000896c:	d9c12b15 	stw	r7,1196(sp)
10008970:	da412d15 	stw	r9,1204(sp)
10008974:	000779c0 	call	1000779c <__sprint_r.part.0>
10008978:	d9c12b17 	ldw	r7,1196(sp)
1000897c:	da412d17 	ldw	r9,1204(sp)
10008980:	103f021e 	bne	r2,zero,1000858c <__alt_data_end+0xf800858c>
10008984:	d8811b17 	ldw	r2,1132(sp)
10008988:	d8c11c17 	ldw	r3,1136(sp)
1000898c:	d811883a 	mov	r8,sp
10008990:	10800044 	addi	r2,r2,1
10008994:	003d8a06 	br	10007fc0 <__alt_data_end+0xf8007fc0>
10008998:	4829883a 	mov	r20,r9
1000899c:	003c1706 	br	100079fc <__alt_data_end+0xf80079fc>
100089a0:	0529c83a 	sub	r20,zero,r20
100089a4:	a004c03a 	cmpne	r2,r20,zero
100089a8:	056bc83a 	sub	r21,zero,r21
100089ac:	a8abc83a 	sub	r21,r21,r2
100089b0:	05800b44 	movi	r22,45
100089b4:	dd811d85 	stb	r22,1142(sp)
100089b8:	900f883a 	mov	r7,r18
100089bc:	00800044 	movi	r2,1
100089c0:	a548b03a 	or	r4,r20,r21
100089c4:	003cf606 	br	10007da0 <__alt_data_end+0xf8007da0>
100089c8:	00800084 	movi	r2,2
100089cc:	003dc506 	br	100080e4 <__alt_data_end+0xf80080e4>
100089d0:	8880100c 	andi	r2,r17,64
100089d4:	10005a26 	beq	r2,zero,10008b40 <___vfiprintf_internal_r+0x1290>
100089d8:	d9012317 	ldw	r4,1164(sp)
100089dc:	002b883a 	mov	r21,zero
100089e0:	2500000b 	ldhu	r20,0(r4)
100089e4:	21000104 	addi	r4,r4,4
100089e8:	d9012315 	stw	r4,1164(sp)
100089ec:	003ddc06 	br	10008160 <__alt_data_end+0xf8008160>
100089f0:	8880100c 	andi	r2,r17,64
100089f4:	10005826 	beq	r2,zero,10008b58 <___vfiprintf_internal_r+0x12a8>
100089f8:	d9412317 	ldw	r5,1164(sp)
100089fc:	002b883a 	mov	r21,zero
10008a00:	0005883a 	mov	r2,zero
10008a04:	2d00000b 	ldhu	r20,0(r5)
10008a08:	29400104 	addi	r5,r5,4
10008a0c:	d9412315 	stw	r5,1164(sp)
10008a10:	a009883a 	mov	r4,r20
10008a14:	003db306 	br	100080e4 <__alt_data_end+0xf80080e4>
10008a18:	8880040c 	andi	r2,r17,16
10008a1c:	1000411e 	bne	r2,zero,10008b24 <___vfiprintf_internal_r+0x1274>
10008a20:	8c40100c 	andi	r17,r17,64
10008a24:	88008726 	beq	r17,zero,10008c44 <___vfiprintf_internal_r+0x1394>
10008a28:	d9412317 	ldw	r5,1164(sp)
10008a2c:	d8c12417 	ldw	r3,1168(sp)
10008a30:	28800017 	ldw	r2,0(r5)
10008a34:	29400104 	addi	r5,r5,4
10008a38:	d9412315 	stw	r5,1164(sp)
10008a3c:	10c0000d 	sth	r3,0(r2)
10008a40:	003bd206 	br	1000798c <__alt_data_end+0xf800798c>
10008a44:	48c00007 	ldb	r3,0(r9)
10008a48:	003bf906 	br	10007a30 <__alt_data_end+0xf8007a30>
10008a4c:	8880100c 	andi	r2,r17,64
10008a50:	10002c26 	beq	r2,zero,10008b04 <___vfiprintf_internal_r+0x1254>
10008a54:	d9412317 	ldw	r5,1164(sp)
10008a58:	002b883a 	mov	r21,zero
10008a5c:	00800044 	movi	r2,1
10008a60:	2d00000b 	ldhu	r20,0(r5)
10008a64:	29400104 	addi	r5,r5,4
10008a68:	d9412315 	stw	r5,1164(sp)
10008a6c:	a009883a 	mov	r4,r20
10008a70:	003d9c06 	br	100080e4 <__alt_data_end+0xf80080e4>
10008a74:	8880100c 	andi	r2,r17,64
10008a78:	10001b26 	beq	r2,zero,10008ae8 <___vfiprintf_internal_r+0x1238>
10008a7c:	d9412317 	ldw	r5,1164(sp)
10008a80:	2d00000f 	ldh	r20,0(r5)
10008a84:	29400104 	addi	r5,r5,4
10008a88:	d9412315 	stw	r5,1164(sp)
10008a8c:	a02bd7fa 	srai	r21,r20,31
10008a90:	a805883a 	mov	r2,r21
10008a94:	003cbd06 	br	10007d8c <__alt_data_end+0xf8007d8c>
10008a98:	d9012217 	ldw	r4,1160(sp)
10008a9c:	d9412017 	ldw	r5,1152(sp)
10008aa0:	d9811a04 	addi	r6,sp,1128
10008aa4:	d9c12b15 	stw	r7,1196(sp)
10008aa8:	da412d15 	stw	r9,1204(sp)
10008aac:	da812c15 	stw	r10,1200(sp)
10008ab0:	000779c0 	call	1000779c <__sprint_r.part.0>
10008ab4:	d9c12b17 	ldw	r7,1196(sp)
10008ab8:	da412d17 	ldw	r9,1204(sp)
10008abc:	da812c17 	ldw	r10,1200(sp)
10008ac0:	103eb21e 	bne	r2,zero,1000858c <__alt_data_end+0xf800858c>
10008ac4:	d9411b17 	ldw	r5,1132(sp)
10008ac8:	d8c11c17 	ldw	r3,1136(sp)
10008acc:	d811883a 	mov	r8,sp
10008ad0:	28800044 	addi	r2,r5,1
10008ad4:	003e7906 	br	100084bc <__alt_data_end+0xf80084bc>
10008ad8:	1829883a 	mov	r20,r3
10008adc:	003d7006 	br	100080a0 <__alt_data_end+0xf80080a0>
10008ae0:	900f883a 	mov	r7,r18
10008ae4:	003e2806 	br	10008388 <__alt_data_end+0xf8008388>
10008ae8:	d8812317 	ldw	r2,1164(sp)
10008aec:	15000017 	ldw	r20,0(r2)
10008af0:	10800104 	addi	r2,r2,4
10008af4:	d8812315 	stw	r2,1164(sp)
10008af8:	a02bd7fa 	srai	r21,r20,31
10008afc:	a805883a 	mov	r2,r21
10008b00:	003ca206 	br	10007d8c <__alt_data_end+0xf8007d8c>
10008b04:	d8812317 	ldw	r2,1164(sp)
10008b08:	002b883a 	mov	r21,zero
10008b0c:	15000017 	ldw	r20,0(r2)
10008b10:	10800104 	addi	r2,r2,4
10008b14:	d8812315 	stw	r2,1164(sp)
10008b18:	a009883a 	mov	r4,r20
10008b1c:	00800044 	movi	r2,1
10008b20:	003d7006 	br	100080e4 <__alt_data_end+0xf80080e4>
10008b24:	d8c12317 	ldw	r3,1164(sp)
10008b28:	d9012417 	ldw	r4,1168(sp)
10008b2c:	18800017 	ldw	r2,0(r3)
10008b30:	18c00104 	addi	r3,r3,4
10008b34:	d8c12315 	stw	r3,1164(sp)
10008b38:	11000015 	stw	r4,0(r2)
10008b3c:	003b9306 	br	1000798c <__alt_data_end+0xf800798c>
10008b40:	d9412317 	ldw	r5,1164(sp)
10008b44:	002b883a 	mov	r21,zero
10008b48:	2d000017 	ldw	r20,0(r5)
10008b4c:	29400104 	addi	r5,r5,4
10008b50:	d9412315 	stw	r5,1164(sp)
10008b54:	003d8206 	br	10008160 <__alt_data_end+0xf8008160>
10008b58:	d8812317 	ldw	r2,1164(sp)
10008b5c:	002b883a 	mov	r21,zero
10008b60:	15000017 	ldw	r20,0(r2)
10008b64:	10800104 	addi	r2,r2,4
10008b68:	d8812315 	stw	r2,1164(sp)
10008b6c:	a009883a 	mov	r4,r20
10008b70:	0005883a 	mov	r2,zero
10008b74:	003d5b06 	br	100080e4 <__alt_data_end+0xf80080e4>
10008b78:	04bfffc4 	movi	r18,-1
10008b7c:	900d883a 	mov	r6,r18
10008b80:	003bac06 	br	10007a34 <__alt_data_end+0xf8007a34>
10008b84:	4a400044 	addi	r9,r9,1
10008b88:	8c400814 	ori	r17,r17,32
10008b8c:	10c00047 	ldb	r3,1(r2)
10008b90:	003ba706 	br	10007a30 <__alt_data_end+0xf8007a30>
10008b94:	d8c11f17 	ldw	r3,1148(sp)
10008b98:	1dcfc83a 	sub	r7,r3,r23
10008b9c:	003c8d06 	br	10007dd4 <__alt_data_end+0xf8007dd4>
10008ba0:	da012b15 	stw	r8,1196(sp)
10008ba4:	da412d15 	stw	r9,1204(sp)
10008ba8:	00077100 	call	10007710 <strlen>
10008bac:	100f883a 	mov	r7,r2
10008bb0:	dd811d83 	ldbu	r22,1142(sp)
10008bb4:	dd412315 	stw	r21,1164(sp)
10008bb8:	0025883a 	mov	r18,zero
10008bbc:	da012b17 	ldw	r8,1196(sp)
10008bc0:	da412d17 	ldw	r9,1204(sp)
10008bc4:	003c8306 	br	10007dd4 <__alt_data_end+0xf8007dd4>
10008bc8:	d9012217 	ldw	r4,1160(sp)
10008bcc:	d9412017 	ldw	r5,1152(sp)
10008bd0:	d9811a04 	addi	r6,sp,1128
10008bd4:	d9c12b15 	stw	r7,1196(sp)
10008bd8:	da412d15 	stw	r9,1204(sp)
10008bdc:	000779c0 	call	1000779c <__sprint_r.part.0>
10008be0:	d9c12b17 	ldw	r7,1196(sp)
10008be4:	da412d17 	ldw	r9,1204(sp)
10008be8:	103e681e 	bne	r2,zero,1000858c <__alt_data_end+0xf800858c>
10008bec:	d9411b17 	ldw	r5,1132(sp)
10008bf0:	d8c11c17 	ldw	r3,1136(sp)
10008bf4:	d811883a 	mov	r8,sp
10008bf8:	28800044 	addi	r2,r5,1
10008bfc:	003cc506 	br	10007f14 <__alt_data_end+0xf8007f14>
10008c00:	d9411b17 	ldw	r5,1132(sp)
10008c04:	01040074 	movhi	r4,4097
10008c08:	21000e04 	addi	r4,r4,56
10008c0c:	d9012515 	stw	r4,1172(sp)
10008c10:	29400044 	addi	r5,r5,1
10008c14:	003ca406 	br	10007ea8 <__alt_data_end+0xf8007ea8>
10008c18:	00800184 	movi	r2,6
10008c1c:	300f883a 	mov	r7,r6
10008c20:	1180012e 	bgeu	r2,r6,10008c28 <___vfiprintf_internal_r+0x1378>
10008c24:	100f883a 	mov	r7,r2
10008c28:	3829883a 	mov	r20,r7
10008c2c:	38001e16 	blt	r7,zero,10008ca8 <___vfiprintf_internal_r+0x13f8>
10008c30:	dd412315 	stw	r21,1164(sp)
10008c34:	05c40074 	movhi	r23,4097
10008c38:	bdffae04 	addi	r23,r23,-328
10008c3c:	0025883a 	mov	r18,zero
10008c40:	003c6c06 	br	10007df4 <__alt_data_end+0xf8007df4>
10008c44:	d9012317 	ldw	r4,1164(sp)
10008c48:	d9412417 	ldw	r5,1168(sp)
10008c4c:	20800017 	ldw	r2,0(r4)
10008c50:	21000104 	addi	r4,r4,4
10008c54:	d9012315 	stw	r4,1164(sp)
10008c58:	11400015 	stw	r5,0(r2)
10008c5c:	003b4b06 	br	1000798c <__alt_data_end+0xf800798c>
10008c60:	d9411b17 	ldw	r5,1132(sp)
10008c64:	00840074 	movhi	r2,4097
10008c68:	10800e04 	addi	r2,r2,56
10008c6c:	d8812515 	stw	r2,1172(sp)
10008c70:	29400044 	addi	r5,r5,1
10008c74:	003cff06 	br	10008074 <__alt_data_end+0xf8008074>
10008c78:	1009883a 	mov	r4,r2
10008c7c:	05440074 	movhi	r21,4097
10008c80:	ad400a04 	addi	r21,r21,40
10008c84:	003e9906 	br	100086ec <__alt_data_end+0xf80086ec>
10008c88:	900f883a 	mov	r7,r18
10008c8c:	dd811d83 	ldbu	r22,1142(sp)
10008c90:	dd412315 	stw	r21,1164(sp)
10008c94:	0025883a 	mov	r18,zero
10008c98:	003c4e06 	br	10007dd4 <__alt_data_end+0xf8007dd4>
10008c9c:	1013883a 	mov	r9,r2
10008ca0:	000d883a 	mov	r6,zero
10008ca4:	003b6306 	br	10007a34 <__alt_data_end+0xf8007a34>
10008ca8:	0029883a 	mov	r20,zero
10008cac:	003fe006 	br	10008c30 <__alt_data_end+0xf8008c30>
10008cb0:	043fffc4 	movi	r16,-1
10008cb4:	003bf306 	br	10007c84 <__alt_data_end+0xf8007c84>
10008cb8:	d9412317 	ldw	r5,1164(sp)
10008cbc:	48c00043 	ldbu	r3,1(r9)
10008cc0:	1013883a 	mov	r9,r2
10008cc4:	29800017 	ldw	r6,0(r5)
10008cc8:	29000104 	addi	r4,r5,4
10008ccc:	d9012315 	stw	r4,1164(sp)
10008cd0:	30000416 	blt	r6,zero,10008ce4 <___vfiprintf_internal_r+0x1434>
10008cd4:	18c03fcc 	andi	r3,r3,255
10008cd8:	18c0201c 	xori	r3,r3,128
10008cdc:	18ffe004 	addi	r3,r3,-128
10008ce0:	003b5306 	br	10007a30 <__alt_data_end+0xf8007a30>
10008ce4:	18c03fcc 	andi	r3,r3,255
10008ce8:	18c0201c 	xori	r3,r3,128
10008cec:	01bfffc4 	movi	r6,-1
10008cf0:	18ffe004 	addi	r3,r3,-128
10008cf4:	003b4e06 	br	10007a30 <__alt_data_end+0xf8007a30>

10008cf8 <__vfiprintf_internal>:
10008cf8:	00840074 	movhi	r2,4097
10008cfc:	10870d04 	addi	r2,r2,7220
10008d00:	2007883a 	mov	r3,r4
10008d04:	11000017 	ldw	r4,0(r2)
10008d08:	2805883a 	mov	r2,r5
10008d0c:	300f883a 	mov	r7,r6
10008d10:	180b883a 	mov	r5,r3
10008d14:	100d883a 	mov	r6,r2
10008d18:	00078b01 	jmpi	100078b0 <___vfiprintf_internal_r>

10008d1c <_write_r>:
10008d1c:	defffd04 	addi	sp,sp,-12
10008d20:	dc400115 	stw	r17,4(sp)
10008d24:	dc000015 	stw	r16,0(sp)
10008d28:	2023883a 	mov	r17,r4
10008d2c:	04040074 	movhi	r16,4097
10008d30:	840ddf04 	addi	r16,r16,14204
10008d34:	2809883a 	mov	r4,r5
10008d38:	300b883a 	mov	r5,r6
10008d3c:	380d883a 	mov	r6,r7
10008d40:	dfc00215 	stw	ra,8(sp)
10008d44:	80000015 	stw	zero,0(r16)
10008d48:	000e1340 	call	1000e134 <write>
10008d4c:	00ffffc4 	movi	r3,-1
10008d50:	10c00526 	beq	r2,r3,10008d68 <_write_r+0x4c>
10008d54:	dfc00217 	ldw	ra,8(sp)
10008d58:	dc400117 	ldw	r17,4(sp)
10008d5c:	dc000017 	ldw	r16,0(sp)
10008d60:	dec00304 	addi	sp,sp,12
10008d64:	f800283a 	ret
10008d68:	80c00017 	ldw	r3,0(r16)
10008d6c:	183ff926 	beq	r3,zero,10008d54 <__alt_data_end+0xf8008d54>
10008d70:	88c00015 	stw	r3,0(r17)
10008d74:	dfc00217 	ldw	ra,8(sp)
10008d78:	dc400117 	ldw	r17,4(sp)
10008d7c:	dc000017 	ldw	r16,0(sp)
10008d80:	dec00304 	addi	sp,sp,12
10008d84:	f800283a 	ret

10008d88 <_close_r>:
10008d88:	defffd04 	addi	sp,sp,-12
10008d8c:	dc400115 	stw	r17,4(sp)
10008d90:	dc000015 	stw	r16,0(sp)
10008d94:	2023883a 	mov	r17,r4
10008d98:	04040074 	movhi	r16,4097
10008d9c:	840ddf04 	addi	r16,r16,14204
10008da0:	2809883a 	mov	r4,r5
10008da4:	dfc00215 	stw	ra,8(sp)
10008da8:	80000015 	stw	zero,0(r16)
10008dac:	000d8200 	call	1000d820 <close>
10008db0:	00ffffc4 	movi	r3,-1
10008db4:	10c00526 	beq	r2,r3,10008dcc <_close_r+0x44>
10008db8:	dfc00217 	ldw	ra,8(sp)
10008dbc:	dc400117 	ldw	r17,4(sp)
10008dc0:	dc000017 	ldw	r16,0(sp)
10008dc4:	dec00304 	addi	sp,sp,12
10008dc8:	f800283a 	ret
10008dcc:	80c00017 	ldw	r3,0(r16)
10008dd0:	183ff926 	beq	r3,zero,10008db8 <__alt_data_end+0xf8008db8>
10008dd4:	88c00015 	stw	r3,0(r17)
10008dd8:	dfc00217 	ldw	ra,8(sp)
10008ddc:	dc400117 	ldw	r17,4(sp)
10008de0:	dc000017 	ldw	r16,0(sp)
10008de4:	dec00304 	addi	sp,sp,12
10008de8:	f800283a 	ret

10008dec <_calloc_r>:
10008dec:	defffe04 	addi	sp,sp,-8
10008df0:	dc000015 	stw	r16,0(sp)
10008df4:	2021883a 	mov	r16,r4
10008df8:	2809883a 	mov	r4,r5
10008dfc:	300b883a 	mov	r5,r6
10008e00:	dfc00115 	stw	ra,4(sp)
10008e04:	000b0240 	call	1000b024 <__mulsi3>
10008e08:	8009883a 	mov	r4,r16
10008e0c:	100b883a 	mov	r5,r2
10008e10:	00059700 	call	10005970 <_malloc_r>
10008e14:	1021883a 	mov	r16,r2
10008e18:	10002826 	beq	r2,zero,10008ebc <_calloc_r+0xd0>
10008e1c:	11bfff17 	ldw	r6,-4(r2)
10008e20:	00ffff04 	movi	r3,-4
10008e24:	00800904 	movi	r2,36
10008e28:	30cc703a 	and	r6,r6,r3
10008e2c:	30cd883a 	add	r6,r6,r3
10008e30:	11801436 	bltu	r2,r6,10008e84 <_calloc_r+0x98>
10008e34:	00c004c4 	movi	r3,19
10008e38:	19800936 	bltu	r3,r6,10008e60 <_calloc_r+0x74>
10008e3c:	8005883a 	mov	r2,r16
10008e40:	10000015 	stw	zero,0(r2)
10008e44:	10000115 	stw	zero,4(r2)
10008e48:	10000215 	stw	zero,8(r2)
10008e4c:	8005883a 	mov	r2,r16
10008e50:	dfc00117 	ldw	ra,4(sp)
10008e54:	dc000017 	ldw	r16,0(sp)
10008e58:	dec00204 	addi	sp,sp,8
10008e5c:	f800283a 	ret
10008e60:	80000015 	stw	zero,0(r16)
10008e64:	80000115 	stw	zero,4(r16)
10008e68:	00c006c4 	movi	r3,27
10008e6c:	19800d2e 	bgeu	r3,r6,10008ea4 <_calloc_r+0xb8>
10008e70:	80000215 	stw	zero,8(r16)
10008e74:	80000315 	stw	zero,12(r16)
10008e78:	30800c26 	beq	r6,r2,10008eac <_calloc_r+0xc0>
10008e7c:	80800404 	addi	r2,r16,16
10008e80:	003fef06 	br	10008e40 <__alt_data_end+0xf8008e40>
10008e84:	8009883a 	mov	r4,r16
10008e88:	000b883a 	mov	r5,zero
10008e8c:	00063280 	call	10006328 <memset>
10008e90:	8005883a 	mov	r2,r16
10008e94:	dfc00117 	ldw	ra,4(sp)
10008e98:	dc000017 	ldw	r16,0(sp)
10008e9c:	dec00204 	addi	sp,sp,8
10008ea0:	f800283a 	ret
10008ea4:	80800204 	addi	r2,r16,8
10008ea8:	003fe506 	br	10008e40 <__alt_data_end+0xf8008e40>
10008eac:	80000415 	stw	zero,16(r16)
10008eb0:	80800604 	addi	r2,r16,24
10008eb4:	80000515 	stw	zero,20(r16)
10008eb8:	003fe106 	br	10008e40 <__alt_data_end+0xf8008e40>
10008ebc:	0005883a 	mov	r2,zero
10008ec0:	003fe306 	br	10008e50 <__alt_data_end+0xf8008e50>

10008ec4 <_fclose_r>:
10008ec4:	defffc04 	addi	sp,sp,-16
10008ec8:	dc000015 	stw	r16,0(sp)
10008ecc:	dfc00315 	stw	ra,12(sp)
10008ed0:	dc800215 	stw	r18,8(sp)
10008ed4:	dc400115 	stw	r17,4(sp)
10008ed8:	2821883a 	mov	r16,r5
10008edc:	28003126 	beq	r5,zero,10008fa4 <_fclose_r+0xe0>
10008ee0:	2023883a 	mov	r17,r4
10008ee4:	000513c0 	call	1000513c <__sfp_lock_acquire>
10008ee8:	88000226 	beq	r17,zero,10008ef4 <_fclose_r+0x30>
10008eec:	88800e17 	ldw	r2,56(r17)
10008ef0:	10003326 	beq	r2,zero,10008fc0 <_fclose_r+0xfc>
10008ef4:	8080030f 	ldh	r2,12(r16)
10008ef8:	10002226 	beq	r2,zero,10008f84 <_fclose_r+0xc0>
10008efc:	8809883a 	mov	r4,r17
10008f00:	800b883a 	mov	r5,r16
10008f04:	0004b640 	call	10004b64 <_fflush_r>
10008f08:	80c00b17 	ldw	r3,44(r16)
10008f0c:	1025883a 	mov	r18,r2
10008f10:	18000426 	beq	r3,zero,10008f24 <_fclose_r+0x60>
10008f14:	81400717 	ldw	r5,28(r16)
10008f18:	8809883a 	mov	r4,r17
10008f1c:	183ee83a 	callr	r3
10008f20:	10003016 	blt	r2,zero,10008fe4 <_fclose_r+0x120>
10008f24:	8080030b 	ldhu	r2,12(r16)
10008f28:	1080200c 	andi	r2,r2,128
10008f2c:	1000291e 	bne	r2,zero,10008fd4 <_fclose_r+0x110>
10008f30:	81400c17 	ldw	r5,48(r16)
10008f34:	28000526 	beq	r5,zero,10008f4c <_fclose_r+0x88>
10008f38:	80801004 	addi	r2,r16,64
10008f3c:	28800226 	beq	r5,r2,10008f48 <_fclose_r+0x84>
10008f40:	8809883a 	mov	r4,r17
10008f44:	00052b80 	call	100052b8 <_free_r>
10008f48:	80000c15 	stw	zero,48(r16)
10008f4c:	81401117 	ldw	r5,68(r16)
10008f50:	28000326 	beq	r5,zero,10008f60 <_fclose_r+0x9c>
10008f54:	8809883a 	mov	r4,r17
10008f58:	00052b80 	call	100052b8 <_free_r>
10008f5c:	80001115 	stw	zero,68(r16)
10008f60:	8000030d 	sth	zero,12(r16)
10008f64:	00051400 	call	10005140 <__sfp_lock_release>
10008f68:	9005883a 	mov	r2,r18
10008f6c:	dfc00317 	ldw	ra,12(sp)
10008f70:	dc800217 	ldw	r18,8(sp)
10008f74:	dc400117 	ldw	r17,4(sp)
10008f78:	dc000017 	ldw	r16,0(sp)
10008f7c:	dec00404 	addi	sp,sp,16
10008f80:	f800283a 	ret
10008f84:	00051400 	call	10005140 <__sfp_lock_release>
10008f88:	0005883a 	mov	r2,zero
10008f8c:	dfc00317 	ldw	ra,12(sp)
10008f90:	dc800217 	ldw	r18,8(sp)
10008f94:	dc400117 	ldw	r17,4(sp)
10008f98:	dc000017 	ldw	r16,0(sp)
10008f9c:	dec00404 	addi	sp,sp,16
10008fa0:	f800283a 	ret
10008fa4:	0005883a 	mov	r2,zero
10008fa8:	dfc00317 	ldw	ra,12(sp)
10008fac:	dc800217 	ldw	r18,8(sp)
10008fb0:	dc400117 	ldw	r17,4(sp)
10008fb4:	dc000017 	ldw	r16,0(sp)
10008fb8:	dec00404 	addi	sp,sp,16
10008fbc:	f800283a 	ret
10008fc0:	8809883a 	mov	r4,r17
10008fc4:	0004e840 	call	10004e84 <__sinit>
10008fc8:	8080030f 	ldh	r2,12(r16)
10008fcc:	103fcb1e 	bne	r2,zero,10008efc <__alt_data_end+0xf8008efc>
10008fd0:	003fec06 	br	10008f84 <__alt_data_end+0xf8008f84>
10008fd4:	81400417 	ldw	r5,16(r16)
10008fd8:	8809883a 	mov	r4,r17
10008fdc:	00052b80 	call	100052b8 <_free_r>
10008fe0:	003fd306 	br	10008f30 <__alt_data_end+0xf8008f30>
10008fe4:	04bfffc4 	movi	r18,-1
10008fe8:	003fce06 	br	10008f24 <__alt_data_end+0xf8008f24>

10008fec <fclose>:
10008fec:	00840074 	movhi	r2,4097
10008ff0:	10870d04 	addi	r2,r2,7220
10008ff4:	200b883a 	mov	r5,r4
10008ff8:	11000017 	ldw	r4,0(r2)
10008ffc:	0008ec41 	jmpi	10008ec4 <_fclose_r>

10009000 <_fputwc_r>:
10009000:	3080030b 	ldhu	r2,12(r6)
10009004:	defff804 	addi	sp,sp,-32
10009008:	dcc00415 	stw	r19,16(sp)
1000900c:	dc800315 	stw	r18,12(sp)
10009010:	dc000115 	stw	r16,4(sp)
10009014:	dfc00715 	stw	ra,28(sp)
10009018:	dd400615 	stw	r21,24(sp)
1000901c:	dd000515 	stw	r20,20(sp)
10009020:	dc400215 	stw	r17,8(sp)
10009024:	10c8000c 	andi	r3,r2,8192
10009028:	3021883a 	mov	r16,r6
1000902c:	2027883a 	mov	r19,r4
10009030:	2825883a 	mov	r18,r5
10009034:	1800051e 	bne	r3,zero,1000904c <_fputwc_r+0x4c>
10009038:	30c01917 	ldw	r3,100(r6)
1000903c:	10880014 	ori	r2,r2,8192
10009040:	3080030d 	sth	r2,12(r6)
10009044:	18880014 	ori	r2,r3,8192
10009048:	30801915 	stw	r2,100(r6)
1000904c:	00057640 	call	10005764 <__locale_mb_cur_max>
10009050:	00c00044 	movi	r3,1
10009054:	10c03e26 	beq	r2,r3,10009150 <_fputwc_r+0x150>
10009058:	9809883a 	mov	r4,r19
1000905c:	d80b883a 	mov	r5,sp
10009060:	900d883a 	mov	r6,r18
10009064:	81c01704 	addi	r7,r16,92
10009068:	000a0880 	call	1000a088 <_wcrtomb_r>
1000906c:	1029883a 	mov	r20,r2
10009070:	00bfffc4 	movi	r2,-1
10009074:	a0802026 	beq	r20,r2,100090f8 <_fputwc_r+0xf8>
10009078:	d9400003 	ldbu	r5,0(sp)
1000907c:	a0001c26 	beq	r20,zero,100090f0 <_fputwc_r+0xf0>
10009080:	0023883a 	mov	r17,zero
10009084:	05400284 	movi	r21,10
10009088:	00000906 	br	100090b0 <_fputwc_r+0xb0>
1000908c:	80c00017 	ldw	r3,0(r16)
10009090:	19400005 	stb	r5,0(r3)
10009094:	80c00017 	ldw	r3,0(r16)
10009098:	18c00044 	addi	r3,r3,1
1000909c:	80c00015 	stw	r3,0(r16)
100090a0:	8c400044 	addi	r17,r17,1
100090a4:	dc47883a 	add	r3,sp,r17
100090a8:	8d00112e 	bgeu	r17,r20,100090f0 <_fputwc_r+0xf0>
100090ac:	19400003 	ldbu	r5,0(r3)
100090b0:	80c00217 	ldw	r3,8(r16)
100090b4:	18ffffc4 	addi	r3,r3,-1
100090b8:	80c00215 	stw	r3,8(r16)
100090bc:	183ff30e 	bge	r3,zero,1000908c <__alt_data_end+0xf800908c>
100090c0:	80800617 	ldw	r2,24(r16)
100090c4:	18801916 	blt	r3,r2,1000912c <_fputwc_r+0x12c>
100090c8:	80800017 	ldw	r2,0(r16)
100090cc:	11400005 	stb	r5,0(r2)
100090d0:	80800017 	ldw	r2,0(r16)
100090d4:	10c00003 	ldbu	r3,0(r2)
100090d8:	10800044 	addi	r2,r2,1
100090dc:	1d402326 	beq	r3,r21,1000916c <_fputwc_r+0x16c>
100090e0:	8c400044 	addi	r17,r17,1
100090e4:	80800015 	stw	r2,0(r16)
100090e8:	dc47883a 	add	r3,sp,r17
100090ec:	8d3fef36 	bltu	r17,r20,100090ac <__alt_data_end+0xf80090ac>
100090f0:	9005883a 	mov	r2,r18
100090f4:	00000406 	br	10009108 <_fputwc_r+0x108>
100090f8:	80c0030b 	ldhu	r3,12(r16)
100090fc:	a005883a 	mov	r2,r20
10009100:	18c01014 	ori	r3,r3,64
10009104:	80c0030d 	sth	r3,12(r16)
10009108:	dfc00717 	ldw	ra,28(sp)
1000910c:	dd400617 	ldw	r21,24(sp)
10009110:	dd000517 	ldw	r20,20(sp)
10009114:	dcc00417 	ldw	r19,16(sp)
10009118:	dc800317 	ldw	r18,12(sp)
1000911c:	dc400217 	ldw	r17,8(sp)
10009120:	dc000117 	ldw	r16,4(sp)
10009124:	dec00804 	addi	sp,sp,32
10009128:	f800283a 	ret
1000912c:	9809883a 	mov	r4,r19
10009130:	29403fcc 	andi	r5,r5,255
10009134:	800d883a 	mov	r6,r16
10009138:	0009eec0 	call	10009eec <__swbuf_r>
1000913c:	10bfffe0 	cmpeqi	r2,r2,-1
10009140:	10803fcc 	andi	r2,r2,255
10009144:	103fd626 	beq	r2,zero,100090a0 <__alt_data_end+0xf80090a0>
10009148:	00bfffc4 	movi	r2,-1
1000914c:	003fee06 	br	10009108 <__alt_data_end+0xf8009108>
10009150:	90ffffc4 	addi	r3,r18,-1
10009154:	01003f84 	movi	r4,254
10009158:	20ffbf36 	bltu	r4,r3,10009058 <__alt_data_end+0xf8009058>
1000915c:	900b883a 	mov	r5,r18
10009160:	dc800005 	stb	r18,0(sp)
10009164:	1029883a 	mov	r20,r2
10009168:	003fc506 	br	10009080 <__alt_data_end+0xf8009080>
1000916c:	9809883a 	mov	r4,r19
10009170:	a80b883a 	mov	r5,r21
10009174:	800d883a 	mov	r6,r16
10009178:	0009eec0 	call	10009eec <__swbuf_r>
1000917c:	10bfffe0 	cmpeqi	r2,r2,-1
10009180:	003fef06 	br	10009140 <__alt_data_end+0xf8009140>

10009184 <fputwc>:
10009184:	defffc04 	addi	sp,sp,-16
10009188:	dc000115 	stw	r16,4(sp)
1000918c:	04040074 	movhi	r16,4097
10009190:	84070d04 	addi	r16,r16,7220
10009194:	80800017 	ldw	r2,0(r16)
10009198:	dc400215 	stw	r17,8(sp)
1000919c:	dfc00315 	stw	ra,12(sp)
100091a0:	2023883a 	mov	r17,r4
100091a4:	280d883a 	mov	r6,r5
100091a8:	10000d26 	beq	r2,zero,100091e0 <fputwc+0x5c>
100091ac:	10c00e17 	ldw	r3,56(r2)
100091b0:	1009883a 	mov	r4,r2
100091b4:	1800041e 	bne	r3,zero,100091c8 <fputwc+0x44>
100091b8:	d9400015 	stw	r5,0(sp)
100091bc:	0004e840 	call	10004e84 <__sinit>
100091c0:	81000017 	ldw	r4,0(r16)
100091c4:	d9800017 	ldw	r6,0(sp)
100091c8:	880b883a 	mov	r5,r17
100091cc:	dfc00317 	ldw	ra,12(sp)
100091d0:	dc400217 	ldw	r17,8(sp)
100091d4:	dc000117 	ldw	r16,4(sp)
100091d8:	dec00404 	addi	sp,sp,16
100091dc:	00090001 	jmpi	10009000 <_fputwc_r>
100091e0:	0009883a 	mov	r4,zero
100091e4:	880b883a 	mov	r5,r17
100091e8:	dfc00317 	ldw	ra,12(sp)
100091ec:	dc400217 	ldw	r17,8(sp)
100091f0:	dc000117 	ldw	r16,4(sp)
100091f4:	dec00404 	addi	sp,sp,16
100091f8:	00090001 	jmpi	10009000 <_fputwc_r>

100091fc <_fstat_r>:
100091fc:	defffd04 	addi	sp,sp,-12
10009200:	dc400115 	stw	r17,4(sp)
10009204:	dc000015 	stw	r16,0(sp)
10009208:	2023883a 	mov	r17,r4
1000920c:	04040074 	movhi	r16,4097
10009210:	840ddf04 	addi	r16,r16,14204
10009214:	2809883a 	mov	r4,r5
10009218:	300b883a 	mov	r5,r6
1000921c:	dfc00215 	stw	ra,8(sp)
10009220:	80000015 	stw	zero,0(r16)
10009224:	000d9fc0 	call	1000d9fc <fstat>
10009228:	00ffffc4 	movi	r3,-1
1000922c:	10c00526 	beq	r2,r3,10009244 <_fstat_r+0x48>
10009230:	dfc00217 	ldw	ra,8(sp)
10009234:	dc400117 	ldw	r17,4(sp)
10009238:	dc000017 	ldw	r16,0(sp)
1000923c:	dec00304 	addi	sp,sp,12
10009240:	f800283a 	ret
10009244:	80c00017 	ldw	r3,0(r16)
10009248:	183ff926 	beq	r3,zero,10009230 <__alt_data_end+0xf8009230>
1000924c:	88c00015 	stw	r3,0(r17)
10009250:	dfc00217 	ldw	ra,8(sp)
10009254:	dc400117 	ldw	r17,4(sp)
10009258:	dc000017 	ldw	r16,0(sp)
1000925c:	dec00304 	addi	sp,sp,12
10009260:	f800283a 	ret

10009264 <__sfvwrite_r>:
10009264:	30800217 	ldw	r2,8(r6)
10009268:	defff404 	addi	sp,sp,-48
1000926c:	dcc00515 	stw	r19,20(sp)
10009270:	dfc00b15 	stw	ra,44(sp)
10009274:	df000a15 	stw	fp,40(sp)
10009278:	ddc00915 	stw	r23,36(sp)
1000927c:	dd800815 	stw	r22,32(sp)
10009280:	dd400715 	stw	r21,28(sp)
10009284:	dd000615 	stw	r20,24(sp)
10009288:	dc800415 	stw	r18,16(sp)
1000928c:	dc400315 	stw	r17,12(sp)
10009290:	dc000215 	stw	r16,8(sp)
10009294:	3027883a 	mov	r19,r6
10009298:	10001d26 	beq	r2,zero,10009310 <__sfvwrite_r+0xac>
1000929c:	2880030b 	ldhu	r2,12(r5)
100092a0:	202b883a 	mov	r21,r4
100092a4:	2821883a 	mov	r16,r5
100092a8:	10c0020c 	andi	r3,r2,8
100092ac:	18002526 	beq	r3,zero,10009344 <__sfvwrite_r+0xe0>
100092b0:	28c00417 	ldw	r3,16(r5)
100092b4:	18002326 	beq	r3,zero,10009344 <__sfvwrite_r+0xe0>
100092b8:	10c0008c 	andi	r3,r2,2
100092bc:	9c400017 	ldw	r17,0(r19)
100092c0:	18002826 	beq	r3,zero,10009364 <__sfvwrite_r+0x100>
100092c4:	0029883a 	mov	r20,zero
100092c8:	0025883a 	mov	r18,zero
100092cc:	05810004 	movi	r22,1024
100092d0:	a00d883a 	mov	r6,r20
100092d4:	a809883a 	mov	r4,r21
100092d8:	90004726 	beq	r18,zero,100093f8 <__sfvwrite_r+0x194>
100092dc:	900f883a 	mov	r7,r18
100092e0:	81400717 	ldw	r5,28(r16)
100092e4:	b480012e 	bgeu	r22,r18,100092ec <__sfvwrite_r+0x88>
100092e8:	01c10004 	movi	r7,1024
100092ec:	80800917 	ldw	r2,36(r16)
100092f0:	103ee83a 	callr	r2
100092f4:	00804c0e 	bge	zero,r2,10009428 <__sfvwrite_r+0x1c4>
100092f8:	98c00217 	ldw	r3,8(r19)
100092fc:	a0a9883a 	add	r20,r20,r2
10009300:	90a5c83a 	sub	r18,r18,r2
10009304:	1885c83a 	sub	r2,r3,r2
10009308:	98800215 	stw	r2,8(r19)
1000930c:	103ff01e 	bne	r2,zero,100092d0 <__alt_data_end+0xf80092d0>
10009310:	0005883a 	mov	r2,zero
10009314:	dfc00b17 	ldw	ra,44(sp)
10009318:	df000a17 	ldw	fp,40(sp)
1000931c:	ddc00917 	ldw	r23,36(sp)
10009320:	dd800817 	ldw	r22,32(sp)
10009324:	dd400717 	ldw	r21,28(sp)
10009328:	dd000617 	ldw	r20,24(sp)
1000932c:	dcc00517 	ldw	r19,20(sp)
10009330:	dc800417 	ldw	r18,16(sp)
10009334:	dc400317 	ldw	r17,12(sp)
10009338:	dc000217 	ldw	r16,8(sp)
1000933c:	dec00c04 	addi	sp,sp,48
10009340:	f800283a 	ret
10009344:	a809883a 	mov	r4,r21
10009348:	800b883a 	mov	r5,r16
1000934c:	00031c80 	call	100031c8 <__swsetup_r>
10009350:	1000e81e 	bne	r2,zero,100096f4 <__sfvwrite_r+0x490>
10009354:	8080030b 	ldhu	r2,12(r16)
10009358:	9c400017 	ldw	r17,0(r19)
1000935c:	10c0008c 	andi	r3,r2,2
10009360:	183fd81e 	bne	r3,zero,100092c4 <__alt_data_end+0xf80092c4>
10009364:	10c0004c 	andi	r3,r2,1
10009368:	002d883a 	mov	r22,zero
1000936c:	1800331e 	bne	r3,zero,1000943c <__sfvwrite_r+0x1d8>
10009370:	0025883a 	mov	r18,zero
10009374:	90001c26 	beq	r18,zero,100093e8 <__sfvwrite_r+0x184>
10009378:	10c0800c 	andi	r3,r2,512
1000937c:	85000217 	ldw	r20,8(r16)
10009380:	18006f26 	beq	r3,zero,10009540 <__sfvwrite_r+0x2dc>
10009384:	95008936 	bltu	r18,r20,100095ac <__sfvwrite_r+0x348>
10009388:	10c1200c 	andi	r3,r2,1152
1000938c:	1800a11e 	bne	r3,zero,10009614 <__sfvwrite_r+0x3b0>
10009390:	81000017 	ldw	r4,0(r16)
10009394:	a02f883a 	mov	r23,r20
10009398:	a039883a 	mov	fp,r20
1000939c:	9029883a 	mov	r20,r18
100093a0:	b00b883a 	mov	r5,r22
100093a4:	b80d883a 	mov	r6,r23
100093a8:	00097e00 	call	100097e0 <memmove>
100093ac:	81400217 	ldw	r5,8(r16)
100093b0:	81000017 	ldw	r4,0(r16)
100093b4:	9005883a 	mov	r2,r18
100093b8:	2f39c83a 	sub	fp,r5,fp
100093bc:	25c7883a 	add	r3,r4,r23
100093c0:	87000215 	stw	fp,8(r16)
100093c4:	80c00015 	stw	r3,0(r16)
100093c8:	98c00217 	ldw	r3,8(r19)
100093cc:	b0ad883a 	add	r22,r22,r2
100093d0:	90a5c83a 	sub	r18,r18,r2
100093d4:	1d29c83a 	sub	r20,r3,r20
100093d8:	9d000215 	stw	r20,8(r19)
100093dc:	a03fcc26 	beq	r20,zero,10009310 <__alt_data_end+0xf8009310>
100093e0:	8080030b 	ldhu	r2,12(r16)
100093e4:	903fe41e 	bne	r18,zero,10009378 <__alt_data_end+0xf8009378>
100093e8:	8d800017 	ldw	r22,0(r17)
100093ec:	8c800117 	ldw	r18,4(r17)
100093f0:	8c400204 	addi	r17,r17,8
100093f4:	003fdf06 	br	10009374 <__alt_data_end+0xf8009374>
100093f8:	8d000017 	ldw	r20,0(r17)
100093fc:	8c800117 	ldw	r18,4(r17)
10009400:	8c400204 	addi	r17,r17,8
10009404:	003fb206 	br	100092d0 <__alt_data_end+0xf80092d0>
10009408:	00099880 	call	10009988 <_realloc_r>
1000940c:	1039883a 	mov	fp,r2
10009410:	10009d1e 	bne	r2,zero,10009688 <__sfvwrite_r+0x424>
10009414:	81400417 	ldw	r5,16(r16)
10009418:	a809883a 	mov	r4,r21
1000941c:	00052b80 	call	100052b8 <_free_r>
10009420:	00800304 	movi	r2,12
10009424:	a8800015 	stw	r2,0(r21)
10009428:	80c0030b 	ldhu	r3,12(r16)
1000942c:	00bfffc4 	movi	r2,-1
10009430:	18c01014 	ori	r3,r3,64
10009434:	80c0030d 	sth	r3,12(r16)
10009438:	003fb606 	br	10009314 <__alt_data_end+0xf8009314>
1000943c:	0007883a 	mov	r3,zero
10009440:	0039883a 	mov	fp,zero
10009444:	0025883a 	mov	r18,zero
10009448:	90001f26 	beq	r18,zero,100094c8 <__sfvwrite_r+0x264>
1000944c:	18006826 	beq	r3,zero,100095f0 <__sfvwrite_r+0x38c>
10009450:	b02f883a 	mov	r23,r22
10009454:	9580012e 	bgeu	r18,r22,1000945c <__sfvwrite_r+0x1f8>
10009458:	902f883a 	mov	r23,r18
1000945c:	81000017 	ldw	r4,0(r16)
10009460:	80800417 	ldw	r2,16(r16)
10009464:	b829883a 	mov	r20,r23
10009468:	81800217 	ldw	r6,8(r16)
1000946c:	81c00517 	ldw	r7,20(r16)
10009470:	1100022e 	bgeu	r2,r4,1000947c <__sfvwrite_r+0x218>
10009474:	31d1883a 	add	r8,r6,r7
10009478:	45c01816 	blt	r8,r23,100094dc <__sfvwrite_r+0x278>
1000947c:	b9c03f16 	blt	r23,r7,1000957c <__sfvwrite_r+0x318>
10009480:	80800917 	ldw	r2,36(r16)
10009484:	81400717 	ldw	r5,28(r16)
10009488:	a809883a 	mov	r4,r21
1000948c:	d8c00115 	stw	r3,4(sp)
10009490:	e00d883a 	mov	r6,fp
10009494:	103ee83a 	callr	r2
10009498:	1029883a 	mov	r20,r2
1000949c:	d8c00117 	ldw	r3,4(sp)
100094a0:	00bfe10e 	bge	zero,r2,10009428 <__alt_data_end+0xf8009428>
100094a4:	b52dc83a 	sub	r22,r22,r20
100094a8:	b0001f26 	beq	r22,zero,10009528 <__sfvwrite_r+0x2c4>
100094ac:	98800217 	ldw	r2,8(r19)
100094b0:	e539883a 	add	fp,fp,r20
100094b4:	9525c83a 	sub	r18,r18,r20
100094b8:	1529c83a 	sub	r20,r2,r20
100094bc:	9d000215 	stw	r20,8(r19)
100094c0:	a03f9326 	beq	r20,zero,10009310 <__alt_data_end+0xf8009310>
100094c4:	903fe11e 	bne	r18,zero,1000944c <__alt_data_end+0xf800944c>
100094c8:	8f000017 	ldw	fp,0(r17)
100094cc:	8c800117 	ldw	r18,4(r17)
100094d0:	0007883a 	mov	r3,zero
100094d4:	8c400204 	addi	r17,r17,8
100094d8:	003fdb06 	br	10009448 <__alt_data_end+0xf8009448>
100094dc:	400d883a 	mov	r6,r8
100094e0:	e00b883a 	mov	r5,fp
100094e4:	d8c00115 	stw	r3,4(sp)
100094e8:	da000015 	stw	r8,0(sp)
100094ec:	00097e00 	call	100097e0 <memmove>
100094f0:	da000017 	ldw	r8,0(sp)
100094f4:	80800017 	ldw	r2,0(r16)
100094f8:	a809883a 	mov	r4,r21
100094fc:	800b883a 	mov	r5,r16
10009500:	1205883a 	add	r2,r2,r8
10009504:	80800015 	stw	r2,0(r16)
10009508:	da000015 	stw	r8,0(sp)
1000950c:	0004b640 	call	10004b64 <_fflush_r>
10009510:	d8c00117 	ldw	r3,4(sp)
10009514:	da000017 	ldw	r8,0(sp)
10009518:	103fc31e 	bne	r2,zero,10009428 <__alt_data_end+0xf8009428>
1000951c:	4029883a 	mov	r20,r8
10009520:	b52dc83a 	sub	r22,r22,r20
10009524:	b03fe11e 	bne	r22,zero,100094ac <__alt_data_end+0xf80094ac>
10009528:	a809883a 	mov	r4,r21
1000952c:	800b883a 	mov	r5,r16
10009530:	0004b640 	call	10004b64 <_fflush_r>
10009534:	103fbc1e 	bne	r2,zero,10009428 <__alt_data_end+0xf8009428>
10009538:	0007883a 	mov	r3,zero
1000953c:	003fdb06 	br	100094ac <__alt_data_end+0xf80094ac>
10009540:	81000017 	ldw	r4,0(r16)
10009544:	80800417 	ldw	r2,16(r16)
10009548:	1100012e 	bgeu	r2,r4,10009550 <__sfvwrite_r+0x2ec>
1000954c:	a4805836 	bltu	r20,r18,100096b0 <__sfvwrite_r+0x44c>
10009550:	81c00517 	ldw	r7,20(r16)
10009554:	91c01a36 	bltu	r18,r7,100095c0 <__sfvwrite_r+0x35c>
10009558:	80800917 	ldw	r2,36(r16)
1000955c:	81400717 	ldw	r5,28(r16)
10009560:	a809883a 	mov	r4,r21
10009564:	b00d883a 	mov	r6,r22
10009568:	103ee83a 	callr	r2
1000956c:	1029883a 	mov	r20,r2
10009570:	00bfad0e 	bge	zero,r2,10009428 <__alt_data_end+0xf8009428>
10009574:	a005883a 	mov	r2,r20
10009578:	003f9306 	br	100093c8 <__alt_data_end+0xf80093c8>
1000957c:	b80d883a 	mov	r6,r23
10009580:	e00b883a 	mov	r5,fp
10009584:	d8c00115 	stw	r3,4(sp)
10009588:	00097e00 	call	100097e0 <memmove>
1000958c:	80800217 	ldw	r2,8(r16)
10009590:	81000017 	ldw	r4,0(r16)
10009594:	d8c00117 	ldw	r3,4(sp)
10009598:	15c5c83a 	sub	r2,r2,r23
1000959c:	25ef883a 	add	r23,r4,r23
100095a0:	80800215 	stw	r2,8(r16)
100095a4:	85c00015 	stw	r23,0(r16)
100095a8:	003fbe06 	br	100094a4 <__alt_data_end+0xf80094a4>
100095ac:	81000017 	ldw	r4,0(r16)
100095b0:	9039883a 	mov	fp,r18
100095b4:	9029883a 	mov	r20,r18
100095b8:	902f883a 	mov	r23,r18
100095bc:	003f7806 	br	100093a0 <__alt_data_end+0xf80093a0>
100095c0:	b00b883a 	mov	r5,r22
100095c4:	900d883a 	mov	r6,r18
100095c8:	00097e00 	call	100097e0 <memmove>
100095cc:	80c00217 	ldw	r3,8(r16)
100095d0:	80800017 	ldw	r2,0(r16)
100095d4:	9029883a 	mov	r20,r18
100095d8:	1c87c83a 	sub	r3,r3,r18
100095dc:	1485883a 	add	r2,r2,r18
100095e0:	80800015 	stw	r2,0(r16)
100095e4:	80c00215 	stw	r3,8(r16)
100095e8:	9005883a 	mov	r2,r18
100095ec:	003f7606 	br	100093c8 <__alt_data_end+0xf80093c8>
100095f0:	e009883a 	mov	r4,fp
100095f4:	01400284 	movi	r5,10
100095f8:	900d883a 	mov	r6,r18
100095fc:	00061340 	call	10006134 <memchr>
10009600:	10003926 	beq	r2,zero,100096e8 <__sfvwrite_r+0x484>
10009604:	15800044 	addi	r22,r2,1
10009608:	b72dc83a 	sub	r22,r22,fp
1000960c:	00c00044 	movi	r3,1
10009610:	003f8f06 	br	10009450 <__alt_data_end+0xf8009450>
10009614:	81000517 	ldw	r4,20(r16)
10009618:	81400417 	ldw	r5,16(r16)
1000961c:	80c00017 	ldw	r3,0(r16)
10009620:	210d883a 	add	r6,r4,r4
10009624:	3109883a 	add	r4,r6,r4
10009628:	2028d7fa 	srli	r20,r4,31
1000962c:	196fc83a 	sub	r23,r3,r5
10009630:	b9800044 	addi	r6,r23,1
10009634:	a109883a 	add	r4,r20,r4
10009638:	2029d07a 	srai	r20,r4,1
1000963c:	348d883a 	add	r6,r6,r18
10009640:	a180272e 	bgeu	r20,r6,100096e0 <__sfvwrite_r+0x47c>
10009644:	3029883a 	mov	r20,r6
10009648:	1081000c 	andi	r2,r2,1024
1000964c:	a809883a 	mov	r4,r21
10009650:	103f6d26 	beq	r2,zero,10009408 <__alt_data_end+0xf8009408>
10009654:	300b883a 	mov	r5,r6
10009658:	00059700 	call	10005970 <_malloc_r>
1000965c:	1039883a 	mov	fp,r2
10009660:	103f6f26 	beq	r2,zero,10009420 <__alt_data_end+0xf8009420>
10009664:	81400417 	ldw	r5,16(r16)
10009668:	1009883a 	mov	r4,r2
1000966c:	b80d883a 	mov	r6,r23
10009670:	000621c0 	call	1000621c <memcpy>
10009674:	8080030b 	ldhu	r2,12(r16)
10009678:	00fedfc4 	movi	r3,-1153
1000967c:	10c4703a 	and	r2,r2,r3
10009680:	10802014 	ori	r2,r2,128
10009684:	8080030d 	sth	r2,12(r16)
10009688:	e5c9883a 	add	r4,fp,r23
1000968c:	a5c7c83a 	sub	r3,r20,r23
10009690:	87000415 	stw	fp,16(r16)
10009694:	85000515 	stw	r20,20(r16)
10009698:	81000015 	stw	r4,0(r16)
1000969c:	9039883a 	mov	fp,r18
100096a0:	80c00215 	stw	r3,8(r16)
100096a4:	9029883a 	mov	r20,r18
100096a8:	902f883a 	mov	r23,r18
100096ac:	003f3c06 	br	100093a0 <__alt_data_end+0xf80093a0>
100096b0:	b00b883a 	mov	r5,r22
100096b4:	a00d883a 	mov	r6,r20
100096b8:	00097e00 	call	100097e0 <memmove>
100096bc:	80800017 	ldw	r2,0(r16)
100096c0:	a809883a 	mov	r4,r21
100096c4:	800b883a 	mov	r5,r16
100096c8:	1505883a 	add	r2,r2,r20
100096cc:	80800015 	stw	r2,0(r16)
100096d0:	0004b640 	call	10004b64 <_fflush_r>
100096d4:	103f541e 	bne	r2,zero,10009428 <__alt_data_end+0xf8009428>
100096d8:	a005883a 	mov	r2,r20
100096dc:	003f3a06 	br	100093c8 <__alt_data_end+0xf80093c8>
100096e0:	a00d883a 	mov	r6,r20
100096e4:	003fd806 	br	10009648 <__alt_data_end+0xf8009648>
100096e8:	95800044 	addi	r22,r18,1
100096ec:	00c00044 	movi	r3,1
100096f0:	003f5706 	br	10009450 <__alt_data_end+0xf8009450>
100096f4:	80c0030b 	ldhu	r3,12(r16)
100096f8:	00bfffc4 	movi	r2,-1
100096fc:	18c01014 	ori	r3,r3,64
10009700:	80c0030d 	sth	r3,12(r16)
10009704:	00c00244 	movi	r3,9
10009708:	a8c00015 	stw	r3,0(r21)
1000970c:	003f0106 	br	10009314 <__alt_data_end+0xf8009314>

10009710 <_isatty_r>:
10009710:	defffd04 	addi	sp,sp,-12
10009714:	dc400115 	stw	r17,4(sp)
10009718:	dc000015 	stw	r16,0(sp)
1000971c:	2023883a 	mov	r17,r4
10009720:	04040074 	movhi	r16,4097
10009724:	840ddf04 	addi	r16,r16,14204
10009728:	2809883a 	mov	r4,r5
1000972c:	dfc00215 	stw	ra,8(sp)
10009730:	80000015 	stw	zero,0(r16)
10009734:	000db000 	call	1000db00 <isatty>
10009738:	00ffffc4 	movi	r3,-1
1000973c:	10c00526 	beq	r2,r3,10009754 <_isatty_r+0x44>
10009740:	dfc00217 	ldw	ra,8(sp)
10009744:	dc400117 	ldw	r17,4(sp)
10009748:	dc000017 	ldw	r16,0(sp)
1000974c:	dec00304 	addi	sp,sp,12
10009750:	f800283a 	ret
10009754:	80c00017 	ldw	r3,0(r16)
10009758:	183ff926 	beq	r3,zero,10009740 <__alt_data_end+0xf8009740>
1000975c:	88c00015 	stw	r3,0(r17)
10009760:	dfc00217 	ldw	ra,8(sp)
10009764:	dc400117 	ldw	r17,4(sp)
10009768:	dc000017 	ldw	r16,0(sp)
1000976c:	dec00304 	addi	sp,sp,12
10009770:	f800283a 	ret

10009774 <_lseek_r>:
10009774:	defffd04 	addi	sp,sp,-12
10009778:	dc400115 	stw	r17,4(sp)
1000977c:	dc000015 	stw	r16,0(sp)
10009780:	2023883a 	mov	r17,r4
10009784:	04040074 	movhi	r16,4097
10009788:	840ddf04 	addi	r16,r16,14204
1000978c:	2809883a 	mov	r4,r5
10009790:	300b883a 	mov	r5,r6
10009794:	380d883a 	mov	r6,r7
10009798:	dfc00215 	stw	ra,8(sp)
1000979c:	80000015 	stw	zero,0(r16)
100097a0:	000dcdc0 	call	1000dcdc <lseek>
100097a4:	00ffffc4 	movi	r3,-1
100097a8:	10c00526 	beq	r2,r3,100097c0 <_lseek_r+0x4c>
100097ac:	dfc00217 	ldw	ra,8(sp)
100097b0:	dc400117 	ldw	r17,4(sp)
100097b4:	dc000017 	ldw	r16,0(sp)
100097b8:	dec00304 	addi	sp,sp,12
100097bc:	f800283a 	ret
100097c0:	80c00017 	ldw	r3,0(r16)
100097c4:	183ff926 	beq	r3,zero,100097ac <__alt_data_end+0xf80097ac>
100097c8:	88c00015 	stw	r3,0(r17)
100097cc:	dfc00217 	ldw	ra,8(sp)
100097d0:	dc400117 	ldw	r17,4(sp)
100097d4:	dc000017 	ldw	r16,0(sp)
100097d8:	dec00304 	addi	sp,sp,12
100097dc:	f800283a 	ret

100097e0 <memmove>:
100097e0:	2005883a 	mov	r2,r4
100097e4:	29000b2e 	bgeu	r5,r4,10009814 <memmove+0x34>
100097e8:	298f883a 	add	r7,r5,r6
100097ec:	21c0092e 	bgeu	r4,r7,10009814 <memmove+0x34>
100097f0:	2187883a 	add	r3,r4,r6
100097f4:	198bc83a 	sub	r5,r3,r6
100097f8:	30003e26 	beq	r6,zero,100098f4 <memmove+0x114>
100097fc:	39ffffc4 	addi	r7,r7,-1
10009800:	39000003 	ldbu	r4,0(r7)
10009804:	18ffffc4 	addi	r3,r3,-1
10009808:	19000005 	stb	r4,0(r3)
1000980c:	197ffb1e 	bne	r3,r5,100097fc <__alt_data_end+0xf80097fc>
10009810:	f800283a 	ret
10009814:	00c003c4 	movi	r3,15
10009818:	1980372e 	bgeu	r3,r6,100098f8 <memmove+0x118>
1000981c:	1146b03a 	or	r3,r2,r5
10009820:	18c000cc 	andi	r3,r3,3
10009824:	1800371e 	bne	r3,zero,10009904 <memmove+0x124>
10009828:	327ffc04 	addi	r9,r6,-16
1000982c:	4812d13a 	srli	r9,r9,4
10009830:	280f883a 	mov	r7,r5
10009834:	1007883a 	mov	r3,r2
10009838:	4810913a 	slli	r8,r9,4
1000983c:	1211883a 	add	r8,r2,r8
10009840:	42000404 	addi	r8,r8,16
10009844:	39000017 	ldw	r4,0(r7)
10009848:	18c00404 	addi	r3,r3,16
1000984c:	39c00404 	addi	r7,r7,16
10009850:	193ffc15 	stw	r4,-16(r3)
10009854:	393ffd17 	ldw	r4,-12(r7)
10009858:	193ffd15 	stw	r4,-12(r3)
1000985c:	393ffe17 	ldw	r4,-8(r7)
10009860:	193ffe15 	stw	r4,-8(r3)
10009864:	393fff17 	ldw	r4,-4(r7)
10009868:	193fff15 	stw	r4,-4(r3)
1000986c:	1a3ff51e 	bne	r3,r8,10009844 <__alt_data_end+0xf8009844>
10009870:	49000044 	addi	r4,r9,1
10009874:	2008913a 	slli	r4,r4,4
10009878:	328003cc 	andi	r10,r6,15
1000987c:	1107883a 	add	r3,r2,r4
10009880:	290b883a 	add	r5,r5,r4
10009884:	010000c4 	movi	r4,3
10009888:	2280212e 	bgeu	r4,r10,10009910 <memmove+0x130>
1000988c:	52bfff04 	addi	r10,r10,-4
10009890:	5014d0ba 	srli	r10,r10,2
10009894:	180f883a 	mov	r7,r3
10009898:	2809883a 	mov	r4,r5
1000989c:	5291883a 	add	r8,r10,r10
100098a0:	4211883a 	add	r8,r8,r8
100098a4:	42400104 	addi	r9,r8,4
100098a8:	1a53883a 	add	r9,r3,r9
100098ac:	22000017 	ldw	r8,0(r4)
100098b0:	39c00104 	addi	r7,r7,4
100098b4:	21000104 	addi	r4,r4,4
100098b8:	3a3fff15 	stw	r8,-4(r7)
100098bc:	3a7ffb1e 	bne	r7,r9,100098ac <__alt_data_end+0xf80098ac>
100098c0:	51000044 	addi	r4,r10,1
100098c4:	2109883a 	add	r4,r4,r4
100098c8:	2109883a 	add	r4,r4,r4
100098cc:	318000cc 	andi	r6,r6,3
100098d0:	1907883a 	add	r3,r3,r4
100098d4:	290b883a 	add	r5,r5,r4
100098d8:	30000c26 	beq	r6,zero,1000990c <memmove+0x12c>
100098dc:	198d883a 	add	r6,r3,r6
100098e0:	29c00003 	ldbu	r7,0(r5)
100098e4:	18c00044 	addi	r3,r3,1
100098e8:	29400044 	addi	r5,r5,1
100098ec:	19ffffc5 	stb	r7,-1(r3)
100098f0:	19bffb1e 	bne	r3,r6,100098e0 <__alt_data_end+0xf80098e0>
100098f4:	f800283a 	ret
100098f8:	1007883a 	mov	r3,r2
100098fc:	303ff71e 	bne	r6,zero,100098dc <__alt_data_end+0xf80098dc>
10009900:	00000206 	br	1000990c <memmove+0x12c>
10009904:	1007883a 	mov	r3,r2
10009908:	003ff406 	br	100098dc <__alt_data_end+0xf80098dc>
1000990c:	f800283a 	ret
10009910:	500d883a 	mov	r6,r10
10009914:	303ff11e 	bne	r6,zero,100098dc <__alt_data_end+0xf80098dc>
10009918:	003ffc06 	br	1000990c <__alt_data_end+0xf800990c>

1000991c <_read_r>:
1000991c:	defffd04 	addi	sp,sp,-12
10009920:	dc400115 	stw	r17,4(sp)
10009924:	dc000015 	stw	r16,0(sp)
10009928:	2023883a 	mov	r17,r4
1000992c:	04040074 	movhi	r16,4097
10009930:	840ddf04 	addi	r16,r16,14204
10009934:	2809883a 	mov	r4,r5
10009938:	300b883a 	mov	r5,r6
1000993c:	380d883a 	mov	r6,r7
10009940:	dfc00215 	stw	ra,8(sp)
10009944:	80000015 	stw	zero,0(r16)
10009948:	000debc0 	call	1000debc <read>
1000994c:	00ffffc4 	movi	r3,-1
10009950:	10c00526 	beq	r2,r3,10009968 <_read_r+0x4c>
10009954:	dfc00217 	ldw	ra,8(sp)
10009958:	dc400117 	ldw	r17,4(sp)
1000995c:	dc000017 	ldw	r16,0(sp)
10009960:	dec00304 	addi	sp,sp,12
10009964:	f800283a 	ret
10009968:	80c00017 	ldw	r3,0(r16)
1000996c:	183ff926 	beq	r3,zero,10009954 <__alt_data_end+0xf8009954>
10009970:	88c00015 	stw	r3,0(r17)
10009974:	dfc00217 	ldw	ra,8(sp)
10009978:	dc400117 	ldw	r17,4(sp)
1000997c:	dc000017 	ldw	r16,0(sp)
10009980:	dec00304 	addi	sp,sp,12
10009984:	f800283a 	ret

10009988 <_realloc_r>:
10009988:	defff604 	addi	sp,sp,-40
1000998c:	dd000415 	stw	r20,16(sp)
10009990:	dc000015 	stw	r16,0(sp)
10009994:	dfc00915 	stw	ra,36(sp)
10009998:	df000815 	stw	fp,32(sp)
1000999c:	ddc00715 	stw	r23,28(sp)
100099a0:	dd800615 	stw	r22,24(sp)
100099a4:	dd400515 	stw	r21,20(sp)
100099a8:	dcc00315 	stw	r19,12(sp)
100099ac:	dc800215 	stw	r18,8(sp)
100099b0:	dc400115 	stw	r17,4(sp)
100099b4:	2821883a 	mov	r16,r5
100099b8:	3029883a 	mov	r20,r6
100099bc:	28009a26 	beq	r5,zero,10009c28 <_realloc_r+0x2a0>
100099c0:	202b883a 	mov	r21,r4
100099c4:	000de2c0 	call	1000de2c <__malloc_lock>
100099c8:	80ffff17 	ldw	r3,-4(r16)
100099cc:	047fff04 	movi	r17,-4
100099d0:	a08002c4 	addi	r2,r20,11
100099d4:	01000584 	movi	r4,22
100099d8:	84fffe04 	addi	r19,r16,-8
100099dc:	1c62703a 	and	r17,r3,r17
100099e0:	2080372e 	bgeu	r4,r2,10009ac0 <_realloc_r+0x138>
100099e4:	04bffe04 	movi	r18,-8
100099e8:	14a4703a 	and	r18,r2,r18
100099ec:	9005883a 	mov	r2,r18
100099f0:	90005b16 	blt	r18,zero,10009b60 <_realloc_r+0x1d8>
100099f4:	95005a36 	bltu	r18,r20,10009b60 <_realloc_r+0x1d8>
100099f8:	8880340e 	bge	r17,r2,10009acc <_realloc_r+0x144>
100099fc:	05c40074 	movhi	r23,4097
10009a00:	bdc18604 	addi	r23,r23,1560
10009a04:	b9000217 	ldw	r4,8(r23)
10009a08:	9c4b883a 	add	r5,r19,r17
10009a0c:	21409626 	beq	r4,r5,10009c68 <_realloc_r+0x2e0>
10009a10:	29800117 	ldw	r6,4(r5)
10009a14:	01ffff84 	movi	r7,-2
10009a18:	31ce703a 	and	r7,r6,r7
10009a1c:	29cf883a 	add	r7,r5,r7
10009a20:	39c00117 	ldw	r7,4(r7)
10009a24:	39c0004c 	andi	r7,r7,1
10009a28:	38004226 	beq	r7,zero,10009b34 <_realloc_r+0x1ac>
10009a2c:	000d883a 	mov	r6,zero
10009a30:	000b883a 	mov	r5,zero
10009a34:	18c0004c 	andi	r3,r3,1
10009a38:	18005c1e 	bne	r3,zero,10009bac <_realloc_r+0x224>
10009a3c:	85bffe17 	ldw	r22,-8(r16)
10009a40:	00ffff04 	movi	r3,-4
10009a44:	9dadc83a 	sub	r22,r19,r22
10009a48:	b1c00117 	ldw	r7,4(r22)
10009a4c:	38c6703a 	and	r3,r7,r3
10009a50:	28005426 	beq	r5,zero,10009ba4 <_realloc_r+0x21c>
10009a54:	1c47883a 	add	r3,r3,r17
10009a58:	2900bf26 	beq	r5,r4,10009d58 <_realloc_r+0x3d0>
10009a5c:	30ef883a 	add	r23,r6,r3
10009a60:	b8807e16 	blt	r23,r2,10009c5c <_realloc_r+0x2d4>
10009a64:	28800317 	ldw	r2,12(r5)
10009a68:	28c00217 	ldw	r3,8(r5)
10009a6c:	89bfff04 	addi	r6,r17,-4
10009a70:	01000904 	movi	r4,36
10009a74:	18800315 	stw	r2,12(r3)
10009a78:	10c00215 	stw	r3,8(r2)
10009a7c:	b1400217 	ldw	r5,8(r22)
10009a80:	b0c00317 	ldw	r3,12(r22)
10009a84:	b5000204 	addi	r20,r22,8
10009a88:	28c00315 	stw	r3,12(r5)
10009a8c:	19400215 	stw	r5,8(r3)
10009a90:	21808536 	bltu	r4,r6,10009ca8 <_realloc_r+0x320>
10009a94:	008004c4 	movi	r2,19
10009a98:	1180932e 	bgeu	r2,r6,10009ce8 <_realloc_r+0x360>
10009a9c:	80800017 	ldw	r2,0(r16)
10009aa0:	b0800215 	stw	r2,8(r22)
10009aa4:	80800117 	ldw	r2,4(r16)
10009aa8:	b0800315 	stw	r2,12(r22)
10009aac:	008006c4 	movi	r2,27
10009ab0:	1180df36 	bltu	r2,r6,10009e30 <_realloc_r+0x4a8>
10009ab4:	b0c00404 	addi	r3,r22,16
10009ab8:	84000204 	addi	r16,r16,8
10009abc:	00008b06 	br	10009cec <_realloc_r+0x364>
10009ac0:	00800404 	movi	r2,16
10009ac4:	1025883a 	mov	r18,r2
10009ac8:	003fca06 	br	100099f4 <__alt_data_end+0xf80099f4>
10009acc:	8029883a 	mov	r20,r16
10009ad0:	8c8dc83a 	sub	r6,r17,r18
10009ad4:	008003c4 	movi	r2,15
10009ad8:	18c0004c 	andi	r3,r3,1
10009adc:	11802436 	bltu	r2,r6,10009b70 <_realloc_r+0x1e8>
10009ae0:	1c46b03a 	or	r3,r3,r17
10009ae4:	98c00115 	stw	r3,4(r19)
10009ae8:	9c63883a 	add	r17,r19,r17
10009aec:	88800117 	ldw	r2,4(r17)
10009af0:	10800054 	ori	r2,r2,1
10009af4:	88800115 	stw	r2,4(r17)
10009af8:	a809883a 	mov	r4,r21
10009afc:	000de4c0 	call	1000de4c <__malloc_unlock>
10009b00:	a005883a 	mov	r2,r20
10009b04:	dfc00917 	ldw	ra,36(sp)
10009b08:	df000817 	ldw	fp,32(sp)
10009b0c:	ddc00717 	ldw	r23,28(sp)
10009b10:	dd800617 	ldw	r22,24(sp)
10009b14:	dd400517 	ldw	r21,20(sp)
10009b18:	dd000417 	ldw	r20,16(sp)
10009b1c:	dcc00317 	ldw	r19,12(sp)
10009b20:	dc800217 	ldw	r18,8(sp)
10009b24:	dc400117 	ldw	r17,4(sp)
10009b28:	dc000017 	ldw	r16,0(sp)
10009b2c:	dec00a04 	addi	sp,sp,40
10009b30:	f800283a 	ret
10009b34:	01ffff04 	movi	r7,-4
10009b38:	31cc703a 	and	r6,r6,r7
10009b3c:	344f883a 	add	r7,r6,r17
10009b40:	38bfbc16 	blt	r7,r2,10009a34 <__alt_data_end+0xf8009a34>
10009b44:	28800317 	ldw	r2,12(r5)
10009b48:	29000217 	ldw	r4,8(r5)
10009b4c:	8029883a 	mov	r20,r16
10009b50:	3823883a 	mov	r17,r7
10009b54:	20800315 	stw	r2,12(r4)
10009b58:	11000215 	stw	r4,8(r2)
10009b5c:	003fdc06 	br	10009ad0 <__alt_data_end+0xf8009ad0>
10009b60:	00800304 	movi	r2,12
10009b64:	a8800015 	stw	r2,0(r21)
10009b68:	0005883a 	mov	r2,zero
10009b6c:	003fe506 	br	10009b04 <__alt_data_end+0xf8009b04>
10009b70:	1c86b03a 	or	r3,r3,r18
10009b74:	9c8b883a 	add	r5,r19,r18
10009b78:	98c00115 	stw	r3,4(r19)
10009b7c:	30800054 	ori	r2,r6,1
10009b80:	28800115 	stw	r2,4(r5)
10009b84:	298d883a 	add	r6,r5,r6
10009b88:	30800117 	ldw	r2,4(r6)
10009b8c:	a809883a 	mov	r4,r21
10009b90:	29400204 	addi	r5,r5,8
10009b94:	10800054 	ori	r2,r2,1
10009b98:	30800115 	stw	r2,4(r6)
10009b9c:	00052b80 	call	100052b8 <_free_r>
10009ba0:	003fd506 	br	10009af8 <__alt_data_end+0xf8009af8>
10009ba4:	1c6f883a 	add	r23,r3,r17
10009ba8:	b880370e 	bge	r23,r2,10009c88 <_realloc_r+0x300>
10009bac:	a00b883a 	mov	r5,r20
10009bb0:	a809883a 	mov	r4,r21
10009bb4:	00059700 	call	10005970 <_malloc_r>
10009bb8:	1029883a 	mov	r20,r2
10009bbc:	1000c026 	beq	r2,zero,10009ec0 <_realloc_r+0x538>
10009bc0:	80ffff17 	ldw	r3,-4(r16)
10009bc4:	113ffe04 	addi	r4,r2,-8
10009bc8:	00bfff84 	movi	r2,-2
10009bcc:	1884703a 	and	r2,r3,r2
10009bd0:	9885883a 	add	r2,r19,r2
10009bd4:	20809026 	beq	r4,r2,10009e18 <_realloc_r+0x490>
10009bd8:	89bfff04 	addi	r6,r17,-4
10009bdc:	00800904 	movi	r2,36
10009be0:	11805936 	bltu	r2,r6,10009d48 <_realloc_r+0x3c0>
10009be4:	00c004c4 	movi	r3,19
10009be8:	19803636 	bltu	r3,r6,10009cc4 <_realloc_r+0x33c>
10009bec:	a005883a 	mov	r2,r20
10009bf0:	8007883a 	mov	r3,r16
10009bf4:	19000017 	ldw	r4,0(r3)
10009bf8:	11000015 	stw	r4,0(r2)
10009bfc:	19000117 	ldw	r4,4(r3)
10009c00:	11000115 	stw	r4,4(r2)
10009c04:	18c00217 	ldw	r3,8(r3)
10009c08:	10c00215 	stw	r3,8(r2)
10009c0c:	800b883a 	mov	r5,r16
10009c10:	a809883a 	mov	r4,r21
10009c14:	00052b80 	call	100052b8 <_free_r>
10009c18:	a809883a 	mov	r4,r21
10009c1c:	000de4c0 	call	1000de4c <__malloc_unlock>
10009c20:	a005883a 	mov	r2,r20
10009c24:	003fb706 	br	10009b04 <__alt_data_end+0xf8009b04>
10009c28:	300b883a 	mov	r5,r6
10009c2c:	dfc00917 	ldw	ra,36(sp)
10009c30:	df000817 	ldw	fp,32(sp)
10009c34:	ddc00717 	ldw	r23,28(sp)
10009c38:	dd800617 	ldw	r22,24(sp)
10009c3c:	dd400517 	ldw	r21,20(sp)
10009c40:	dd000417 	ldw	r20,16(sp)
10009c44:	dcc00317 	ldw	r19,12(sp)
10009c48:	dc800217 	ldw	r18,8(sp)
10009c4c:	dc400117 	ldw	r17,4(sp)
10009c50:	dc000017 	ldw	r16,0(sp)
10009c54:	dec00a04 	addi	sp,sp,40
10009c58:	00059701 	jmpi	10005970 <_malloc_r>
10009c5c:	182f883a 	mov	r23,r3
10009c60:	b8bfd216 	blt	r23,r2,10009bac <__alt_data_end+0xf8009bac>
10009c64:	00000806 	br	10009c88 <_realloc_r+0x300>
10009c68:	21800117 	ldw	r6,4(r4)
10009c6c:	017fff04 	movi	r5,-4
10009c70:	91c00404 	addi	r7,r18,16
10009c74:	314c703a 	and	r6,r6,r5
10009c78:	344b883a 	add	r5,r6,r17
10009c7c:	29c0250e 	bge	r5,r7,10009d14 <_realloc_r+0x38c>
10009c80:	200b883a 	mov	r5,r4
10009c84:	003f6b06 	br	10009a34 <__alt_data_end+0xf8009a34>
10009c88:	b0800317 	ldw	r2,12(r22)
10009c8c:	b0c00217 	ldw	r3,8(r22)
10009c90:	89bfff04 	addi	r6,r17,-4
10009c94:	01000904 	movi	r4,36
10009c98:	18800315 	stw	r2,12(r3)
10009c9c:	10c00215 	stw	r3,8(r2)
10009ca0:	b5000204 	addi	r20,r22,8
10009ca4:	21bf7b2e 	bgeu	r4,r6,10009a94 <__alt_data_end+0xf8009a94>
10009ca8:	a009883a 	mov	r4,r20
10009cac:	800b883a 	mov	r5,r16
10009cb0:	00097e00 	call	100097e0 <memmove>
10009cb4:	b0c00117 	ldw	r3,4(r22)
10009cb8:	b823883a 	mov	r17,r23
10009cbc:	b027883a 	mov	r19,r22
10009cc0:	003f8306 	br	10009ad0 <__alt_data_end+0xf8009ad0>
10009cc4:	80c00017 	ldw	r3,0(r16)
10009cc8:	a0c00015 	stw	r3,0(r20)
10009ccc:	80c00117 	ldw	r3,4(r16)
10009cd0:	a0c00115 	stw	r3,4(r20)
10009cd4:	00c006c4 	movi	r3,27
10009cd8:	19804736 	bltu	r3,r6,10009df8 <_realloc_r+0x470>
10009cdc:	a0800204 	addi	r2,r20,8
10009ce0:	80c00204 	addi	r3,r16,8
10009ce4:	003fc306 	br	10009bf4 <__alt_data_end+0xf8009bf4>
10009ce8:	a007883a 	mov	r3,r20
10009cec:	80800017 	ldw	r2,0(r16)
10009cf0:	b823883a 	mov	r17,r23
10009cf4:	b027883a 	mov	r19,r22
10009cf8:	18800015 	stw	r2,0(r3)
10009cfc:	80800117 	ldw	r2,4(r16)
10009d00:	18800115 	stw	r2,4(r3)
10009d04:	80800217 	ldw	r2,8(r16)
10009d08:	18800215 	stw	r2,8(r3)
10009d0c:	b0c00117 	ldw	r3,4(r22)
10009d10:	003f6f06 	br	10009ad0 <__alt_data_end+0xf8009ad0>
10009d14:	9ca7883a 	add	r19,r19,r18
10009d18:	2c85c83a 	sub	r2,r5,r18
10009d1c:	bcc00215 	stw	r19,8(r23)
10009d20:	10800054 	ori	r2,r2,1
10009d24:	98800115 	stw	r2,4(r19)
10009d28:	80bfff17 	ldw	r2,-4(r16)
10009d2c:	a809883a 	mov	r4,r21
10009d30:	1080004c 	andi	r2,r2,1
10009d34:	90a4b03a 	or	r18,r18,r2
10009d38:	84bfff15 	stw	r18,-4(r16)
10009d3c:	000de4c0 	call	1000de4c <__malloc_unlock>
10009d40:	8005883a 	mov	r2,r16
10009d44:	003f6f06 	br	10009b04 <__alt_data_end+0xf8009b04>
10009d48:	a009883a 	mov	r4,r20
10009d4c:	800b883a 	mov	r5,r16
10009d50:	00097e00 	call	100097e0 <memmove>
10009d54:	003fad06 	br	10009c0c <__alt_data_end+0xf8009c0c>
10009d58:	30f9883a 	add	fp,r6,r3
10009d5c:	91000404 	addi	r4,r18,16
10009d60:	e13fbe16 	blt	fp,r4,10009c5c <__alt_data_end+0xf8009c5c>
10009d64:	b0800317 	ldw	r2,12(r22)
10009d68:	b0c00217 	ldw	r3,8(r22)
10009d6c:	89bfff04 	addi	r6,r17,-4
10009d70:	01000904 	movi	r4,36
10009d74:	18800315 	stw	r2,12(r3)
10009d78:	10c00215 	stw	r3,8(r2)
10009d7c:	b4400204 	addi	r17,r22,8
10009d80:	21804336 	bltu	r4,r6,10009e90 <_realloc_r+0x508>
10009d84:	008004c4 	movi	r2,19
10009d88:	11803f2e 	bgeu	r2,r6,10009e88 <_realloc_r+0x500>
10009d8c:	80800017 	ldw	r2,0(r16)
10009d90:	b0800215 	stw	r2,8(r22)
10009d94:	80800117 	ldw	r2,4(r16)
10009d98:	b0800315 	stw	r2,12(r22)
10009d9c:	008006c4 	movi	r2,27
10009da0:	11803f36 	bltu	r2,r6,10009ea0 <_realloc_r+0x518>
10009da4:	b0c00404 	addi	r3,r22,16
10009da8:	84000204 	addi	r16,r16,8
10009dac:	80800017 	ldw	r2,0(r16)
10009db0:	18800015 	stw	r2,0(r3)
10009db4:	80800117 	ldw	r2,4(r16)
10009db8:	18800115 	stw	r2,4(r3)
10009dbc:	80800217 	ldw	r2,8(r16)
10009dc0:	18800215 	stw	r2,8(r3)
10009dc4:	b487883a 	add	r3,r22,r18
10009dc8:	e485c83a 	sub	r2,fp,r18
10009dcc:	b8c00215 	stw	r3,8(r23)
10009dd0:	10800054 	ori	r2,r2,1
10009dd4:	18800115 	stw	r2,4(r3)
10009dd8:	b0800117 	ldw	r2,4(r22)
10009ddc:	a809883a 	mov	r4,r21
10009de0:	1080004c 	andi	r2,r2,1
10009de4:	90a4b03a 	or	r18,r18,r2
10009de8:	b4800115 	stw	r18,4(r22)
10009dec:	000de4c0 	call	1000de4c <__malloc_unlock>
10009df0:	8805883a 	mov	r2,r17
10009df4:	003f4306 	br	10009b04 <__alt_data_end+0xf8009b04>
10009df8:	80c00217 	ldw	r3,8(r16)
10009dfc:	a0c00215 	stw	r3,8(r20)
10009e00:	80c00317 	ldw	r3,12(r16)
10009e04:	a0c00315 	stw	r3,12(r20)
10009e08:	30801126 	beq	r6,r2,10009e50 <_realloc_r+0x4c8>
10009e0c:	a0800404 	addi	r2,r20,16
10009e10:	80c00404 	addi	r3,r16,16
10009e14:	003f7706 	br	10009bf4 <__alt_data_end+0xf8009bf4>
10009e18:	a13fff17 	ldw	r4,-4(r20)
10009e1c:	00bfff04 	movi	r2,-4
10009e20:	8029883a 	mov	r20,r16
10009e24:	2084703a 	and	r2,r4,r2
10009e28:	88a3883a 	add	r17,r17,r2
10009e2c:	003f2806 	br	10009ad0 <__alt_data_end+0xf8009ad0>
10009e30:	80800217 	ldw	r2,8(r16)
10009e34:	b0800415 	stw	r2,16(r22)
10009e38:	80800317 	ldw	r2,12(r16)
10009e3c:	b0800515 	stw	r2,20(r22)
10009e40:	31000a26 	beq	r6,r4,10009e6c <_realloc_r+0x4e4>
10009e44:	b0c00604 	addi	r3,r22,24
10009e48:	84000404 	addi	r16,r16,16
10009e4c:	003fa706 	br	10009cec <__alt_data_end+0xf8009cec>
10009e50:	81000417 	ldw	r4,16(r16)
10009e54:	a0800604 	addi	r2,r20,24
10009e58:	80c00604 	addi	r3,r16,24
10009e5c:	a1000415 	stw	r4,16(r20)
10009e60:	81000517 	ldw	r4,20(r16)
10009e64:	a1000515 	stw	r4,20(r20)
10009e68:	003f6206 	br	10009bf4 <__alt_data_end+0xf8009bf4>
10009e6c:	80800417 	ldw	r2,16(r16)
10009e70:	84000604 	addi	r16,r16,24
10009e74:	b0c00804 	addi	r3,r22,32
10009e78:	b0800615 	stw	r2,24(r22)
10009e7c:	80bfff17 	ldw	r2,-4(r16)
10009e80:	b0800715 	stw	r2,28(r22)
10009e84:	003f9906 	br	10009cec <__alt_data_end+0xf8009cec>
10009e88:	8807883a 	mov	r3,r17
10009e8c:	003fc706 	br	10009dac <__alt_data_end+0xf8009dac>
10009e90:	8809883a 	mov	r4,r17
10009e94:	800b883a 	mov	r5,r16
10009e98:	00097e00 	call	100097e0 <memmove>
10009e9c:	003fc906 	br	10009dc4 <__alt_data_end+0xf8009dc4>
10009ea0:	80800217 	ldw	r2,8(r16)
10009ea4:	b0800415 	stw	r2,16(r22)
10009ea8:	80800317 	ldw	r2,12(r16)
10009eac:	b0800515 	stw	r2,20(r22)
10009eb0:	31000726 	beq	r6,r4,10009ed0 <_realloc_r+0x548>
10009eb4:	b0c00604 	addi	r3,r22,24
10009eb8:	84000404 	addi	r16,r16,16
10009ebc:	003fbb06 	br	10009dac <__alt_data_end+0xf8009dac>
10009ec0:	a809883a 	mov	r4,r21
10009ec4:	000de4c0 	call	1000de4c <__malloc_unlock>
10009ec8:	0005883a 	mov	r2,zero
10009ecc:	003f0d06 	br	10009b04 <__alt_data_end+0xf8009b04>
10009ed0:	80800417 	ldw	r2,16(r16)
10009ed4:	84000604 	addi	r16,r16,24
10009ed8:	b0c00804 	addi	r3,r22,32
10009edc:	b0800615 	stw	r2,24(r22)
10009ee0:	80bfff17 	ldw	r2,-4(r16)
10009ee4:	b0800715 	stw	r2,28(r22)
10009ee8:	003fb006 	br	10009dac <__alt_data_end+0xf8009dac>

10009eec <__swbuf_r>:
10009eec:	defffc04 	addi	sp,sp,-16
10009ef0:	dc800215 	stw	r18,8(sp)
10009ef4:	dc400115 	stw	r17,4(sp)
10009ef8:	dc000015 	stw	r16,0(sp)
10009efc:	dfc00315 	stw	ra,12(sp)
10009f00:	2023883a 	mov	r17,r4
10009f04:	2825883a 	mov	r18,r5
10009f08:	3021883a 	mov	r16,r6
10009f0c:	20000226 	beq	r4,zero,10009f18 <__swbuf_r+0x2c>
10009f10:	20800e17 	ldw	r2,56(r4)
10009f14:	10004d26 	beq	r2,zero,1000a04c <__swbuf_r+0x160>
10009f18:	80800617 	ldw	r2,24(r16)
10009f1c:	80c0030b 	ldhu	r3,12(r16)
10009f20:	80800215 	stw	r2,8(r16)
10009f24:	1880020c 	andi	r2,r3,8
10009f28:	10004126 	beq	r2,zero,1000a030 <__swbuf_r+0x144>
10009f2c:	80800417 	ldw	r2,16(r16)
10009f30:	10003f26 	beq	r2,zero,1000a030 <__swbuf_r+0x144>
10009f34:	1908000c 	andi	r4,r3,8192
10009f38:	94803fcc 	andi	r18,r18,255
10009f3c:	20001726 	beq	r4,zero,10009f9c <__swbuf_r+0xb0>
10009f40:	80c00017 	ldw	r3,0(r16)
10009f44:	81000517 	ldw	r4,20(r16)
10009f48:	1885c83a 	sub	r2,r3,r2
10009f4c:	11001d0e 	bge	r2,r4,10009fc4 <__swbuf_r+0xd8>
10009f50:	81000217 	ldw	r4,8(r16)
10009f54:	19400044 	addi	r5,r3,1
10009f58:	81400015 	stw	r5,0(r16)
10009f5c:	213fffc4 	addi	r4,r4,-1
10009f60:	81000215 	stw	r4,8(r16)
10009f64:	1c800005 	stb	r18,0(r3)
10009f68:	80c00517 	ldw	r3,20(r16)
10009f6c:	10800044 	addi	r2,r2,1
10009f70:	18802226 	beq	r3,r2,10009ffc <__swbuf_r+0x110>
10009f74:	8080030b 	ldhu	r2,12(r16)
10009f78:	1080004c 	andi	r2,r2,1
10009f7c:	1000251e 	bne	r2,zero,1000a014 <__swbuf_r+0x128>
10009f80:	9005883a 	mov	r2,r18
10009f84:	dfc00317 	ldw	ra,12(sp)
10009f88:	dc800217 	ldw	r18,8(sp)
10009f8c:	dc400117 	ldw	r17,4(sp)
10009f90:	dc000017 	ldw	r16,0(sp)
10009f94:	dec00404 	addi	sp,sp,16
10009f98:	f800283a 	ret
10009f9c:	81401917 	ldw	r5,100(r16)
10009fa0:	18c80014 	ori	r3,r3,8192
10009fa4:	0137ffc4 	movi	r4,-8193
10009fa8:	2908703a 	and	r4,r5,r4
10009fac:	80c0030d 	sth	r3,12(r16)
10009fb0:	80c00017 	ldw	r3,0(r16)
10009fb4:	81001915 	stw	r4,100(r16)
10009fb8:	81000517 	ldw	r4,20(r16)
10009fbc:	1885c83a 	sub	r2,r3,r2
10009fc0:	113fe316 	blt	r2,r4,10009f50 <__alt_data_end+0xf8009f50>
10009fc4:	8809883a 	mov	r4,r17
10009fc8:	800b883a 	mov	r5,r16
10009fcc:	0004b640 	call	10004b64 <_fflush_r>
10009fd0:	10000e1e 	bne	r2,zero,1000a00c <__swbuf_r+0x120>
10009fd4:	80c00017 	ldw	r3,0(r16)
10009fd8:	81000217 	ldw	r4,8(r16)
10009fdc:	00800044 	movi	r2,1
10009fe0:	19400044 	addi	r5,r3,1
10009fe4:	213fffc4 	addi	r4,r4,-1
10009fe8:	81400015 	stw	r5,0(r16)
10009fec:	81000215 	stw	r4,8(r16)
10009ff0:	1c800005 	stb	r18,0(r3)
10009ff4:	80c00517 	ldw	r3,20(r16)
10009ff8:	18bfde1e 	bne	r3,r2,10009f74 <__alt_data_end+0xf8009f74>
10009ffc:	8809883a 	mov	r4,r17
1000a000:	800b883a 	mov	r5,r16
1000a004:	0004b640 	call	10004b64 <_fflush_r>
1000a008:	103fdd26 	beq	r2,zero,10009f80 <__alt_data_end+0xf8009f80>
1000a00c:	00bfffc4 	movi	r2,-1
1000a010:	003fdc06 	br	10009f84 <__alt_data_end+0xf8009f84>
1000a014:	00800284 	movi	r2,10
1000a018:	90bfd91e 	bne	r18,r2,10009f80 <__alt_data_end+0xf8009f80>
1000a01c:	8809883a 	mov	r4,r17
1000a020:	800b883a 	mov	r5,r16
1000a024:	0004b640 	call	10004b64 <_fflush_r>
1000a028:	103fd526 	beq	r2,zero,10009f80 <__alt_data_end+0xf8009f80>
1000a02c:	003ff706 	br	1000a00c <__alt_data_end+0xf800a00c>
1000a030:	8809883a 	mov	r4,r17
1000a034:	800b883a 	mov	r5,r16
1000a038:	00031c80 	call	100031c8 <__swsetup_r>
1000a03c:	80c0030b 	ldhu	r3,12(r16)
1000a040:	1000041e 	bne	r2,zero,1000a054 <__swbuf_r+0x168>
1000a044:	80800417 	ldw	r2,16(r16)
1000a048:	003fba06 	br	10009f34 <__alt_data_end+0xf8009f34>
1000a04c:	0004e840 	call	10004e84 <__sinit>
1000a050:	003fb106 	br	10009f18 <__alt_data_end+0xf8009f18>
1000a054:	18c01014 	ori	r3,r3,64
1000a058:	80c0030d 	sth	r3,12(r16)
1000a05c:	00c00244 	movi	r3,9
1000a060:	00bfffc4 	movi	r2,-1
1000a064:	88c00015 	stw	r3,0(r17)
1000a068:	003fc606 	br	10009f84 <__alt_data_end+0xf8009f84>

1000a06c <__swbuf>:
1000a06c:	00c40074 	movhi	r3,4097
1000a070:	18c70d04 	addi	r3,r3,7220
1000a074:	2005883a 	mov	r2,r4
1000a078:	19000017 	ldw	r4,0(r3)
1000a07c:	280d883a 	mov	r6,r5
1000a080:	100b883a 	mov	r5,r2
1000a084:	0009eec1 	jmpi	10009eec <__swbuf_r>

1000a088 <_wcrtomb_r>:
1000a088:	defff604 	addi	sp,sp,-40
1000a08c:	dc800815 	stw	r18,32(sp)
1000a090:	dc400715 	stw	r17,28(sp)
1000a094:	dc000615 	stw	r16,24(sp)
1000a098:	00840074 	movhi	r2,4097
1000a09c:	10871104 	addi	r2,r2,7236
1000a0a0:	dfc00915 	stw	ra,36(sp)
1000a0a4:	2021883a 	mov	r16,r4
1000a0a8:	3823883a 	mov	r17,r7
1000a0ac:	14800017 	ldw	r18,0(r2)
1000a0b0:	28001426 	beq	r5,zero,1000a104 <_wcrtomb_r+0x7c>
1000a0b4:	d9400415 	stw	r5,16(sp)
1000a0b8:	d9800515 	stw	r6,20(sp)
1000a0bc:	00057580 	call	10005758 <__locale_charset>
1000a0c0:	d9400417 	ldw	r5,16(sp)
1000a0c4:	d9800517 	ldw	r6,20(sp)
1000a0c8:	8009883a 	mov	r4,r16
1000a0cc:	dc400015 	stw	r17,0(sp)
1000a0d0:	100f883a 	mov	r7,r2
1000a0d4:	903ee83a 	callr	r18
1000a0d8:	00ffffc4 	movi	r3,-1
1000a0dc:	10c0031e 	bne	r2,r3,1000a0ec <_wcrtomb_r+0x64>
1000a0e0:	88000015 	stw	zero,0(r17)
1000a0e4:	00c02284 	movi	r3,138
1000a0e8:	80c00015 	stw	r3,0(r16)
1000a0ec:	dfc00917 	ldw	ra,36(sp)
1000a0f0:	dc800817 	ldw	r18,32(sp)
1000a0f4:	dc400717 	ldw	r17,28(sp)
1000a0f8:	dc000617 	ldw	r16,24(sp)
1000a0fc:	dec00a04 	addi	sp,sp,40
1000a100:	f800283a 	ret
1000a104:	00057580 	call	10005758 <__locale_charset>
1000a108:	8009883a 	mov	r4,r16
1000a10c:	dc400015 	stw	r17,0(sp)
1000a110:	d9400104 	addi	r5,sp,4
1000a114:	000d883a 	mov	r6,zero
1000a118:	100f883a 	mov	r7,r2
1000a11c:	903ee83a 	callr	r18
1000a120:	003fed06 	br	1000a0d8 <__alt_data_end+0xf800a0d8>

1000a124 <wcrtomb>:
1000a124:	defff504 	addi	sp,sp,-44
1000a128:	dc400515 	stw	r17,20(sp)
1000a12c:	dc000415 	stw	r16,16(sp)
1000a130:	dfc00a15 	stw	ra,40(sp)
1000a134:	dd400915 	stw	r21,36(sp)
1000a138:	dd000815 	stw	r20,32(sp)
1000a13c:	dcc00715 	stw	r19,28(sp)
1000a140:	dc800615 	stw	r18,24(sp)
1000a144:	2021883a 	mov	r16,r4
1000a148:	3023883a 	mov	r17,r6
1000a14c:	20001d26 	beq	r4,zero,1000a1c4 <wcrtomb+0xa0>
1000a150:	04840074 	movhi	r18,4097
1000a154:	94870d04 	addi	r18,r18,7220
1000a158:	95400017 	ldw	r21,0(r18)
1000a15c:	00840074 	movhi	r2,4097
1000a160:	10871104 	addi	r2,r2,7236
1000a164:	15000017 	ldw	r20,0(r2)
1000a168:	2827883a 	mov	r19,r5
1000a16c:	00057580 	call	10005758 <__locale_charset>
1000a170:	a809883a 	mov	r4,r21
1000a174:	dc400015 	stw	r17,0(sp)
1000a178:	800b883a 	mov	r5,r16
1000a17c:	980d883a 	mov	r6,r19
1000a180:	100f883a 	mov	r7,r2
1000a184:	a03ee83a 	callr	r20
1000a188:	00ffffc4 	movi	r3,-1
1000a18c:	10c0041e 	bne	r2,r3,1000a1a0 <wcrtomb+0x7c>
1000a190:	90c00017 	ldw	r3,0(r18)
1000a194:	01002284 	movi	r4,138
1000a198:	88000015 	stw	zero,0(r17)
1000a19c:	19000015 	stw	r4,0(r3)
1000a1a0:	dfc00a17 	ldw	ra,40(sp)
1000a1a4:	dd400917 	ldw	r21,36(sp)
1000a1a8:	dd000817 	ldw	r20,32(sp)
1000a1ac:	dcc00717 	ldw	r19,28(sp)
1000a1b0:	dc800617 	ldw	r18,24(sp)
1000a1b4:	dc400517 	ldw	r17,20(sp)
1000a1b8:	dc000417 	ldw	r16,16(sp)
1000a1bc:	dec00b04 	addi	sp,sp,44
1000a1c0:	f800283a 	ret
1000a1c4:	04840074 	movhi	r18,4097
1000a1c8:	94870d04 	addi	r18,r18,7220
1000a1cc:	94c00017 	ldw	r19,0(r18)
1000a1d0:	00840074 	movhi	r2,4097
1000a1d4:	10871104 	addi	r2,r2,7236
1000a1d8:	14000017 	ldw	r16,0(r2)
1000a1dc:	00057580 	call	10005758 <__locale_charset>
1000a1e0:	9809883a 	mov	r4,r19
1000a1e4:	dc400015 	stw	r17,0(sp)
1000a1e8:	d9400104 	addi	r5,sp,4
1000a1ec:	000d883a 	mov	r6,zero
1000a1f0:	100f883a 	mov	r7,r2
1000a1f4:	803ee83a 	callr	r16
1000a1f8:	003fe306 	br	1000a188 <__alt_data_end+0xf800a188>

1000a1fc <__ascii_wctomb>:
1000a1fc:	28000526 	beq	r5,zero,1000a214 <__ascii_wctomb+0x18>
1000a200:	00803fc4 	movi	r2,255
1000a204:	11800536 	bltu	r2,r6,1000a21c <__ascii_wctomb+0x20>
1000a208:	29800005 	stb	r6,0(r5)
1000a20c:	00800044 	movi	r2,1
1000a210:	f800283a 	ret
1000a214:	0005883a 	mov	r2,zero
1000a218:	f800283a 	ret
1000a21c:	00802284 	movi	r2,138
1000a220:	20800015 	stw	r2,0(r4)
1000a224:	00bfffc4 	movi	r2,-1
1000a228:	f800283a 	ret

1000a22c <_wctomb_r>:
1000a22c:	defff904 	addi	sp,sp,-28
1000a230:	00840074 	movhi	r2,4097
1000a234:	10871104 	addi	r2,r2,7236
1000a238:	dfc00615 	stw	ra,24(sp)
1000a23c:	dc400515 	stw	r17,20(sp)
1000a240:	dc000415 	stw	r16,16(sp)
1000a244:	3823883a 	mov	r17,r7
1000a248:	14000017 	ldw	r16,0(r2)
1000a24c:	d9000115 	stw	r4,4(sp)
1000a250:	d9400215 	stw	r5,8(sp)
1000a254:	d9800315 	stw	r6,12(sp)
1000a258:	00057580 	call	10005758 <__locale_charset>
1000a25c:	d9000117 	ldw	r4,4(sp)
1000a260:	d9400217 	ldw	r5,8(sp)
1000a264:	d9800317 	ldw	r6,12(sp)
1000a268:	dc400015 	stw	r17,0(sp)
1000a26c:	100f883a 	mov	r7,r2
1000a270:	803ee83a 	callr	r16
1000a274:	dfc00617 	ldw	ra,24(sp)
1000a278:	dc400517 	ldw	r17,20(sp)
1000a27c:	dc000417 	ldw	r16,16(sp)
1000a280:	dec00704 	addi	sp,sp,28
1000a284:	f800283a 	ret

1000a288 <__udivdi3>:
1000a288:	defff504 	addi	sp,sp,-44
1000a28c:	dc800315 	stw	r18,12(sp)
1000a290:	dc400215 	stw	r17,8(sp)
1000a294:	dfc00a15 	stw	ra,40(sp)
1000a298:	df000915 	stw	fp,36(sp)
1000a29c:	ddc00815 	stw	r23,32(sp)
1000a2a0:	dd800715 	stw	r22,28(sp)
1000a2a4:	dd400615 	stw	r21,24(sp)
1000a2a8:	dd000515 	stw	r20,20(sp)
1000a2ac:	dcc00415 	stw	r19,16(sp)
1000a2b0:	dc000115 	stw	r16,4(sp)
1000a2b4:	2025883a 	mov	r18,r4
1000a2b8:	2823883a 	mov	r17,r5
1000a2bc:	3800481e 	bne	r7,zero,1000a3e0 <__udivdi3+0x158>
1000a2c0:	3021883a 	mov	r16,r6
1000a2c4:	2027883a 	mov	r19,r4
1000a2c8:	29805a2e 	bgeu	r5,r6,1000a434 <__udivdi3+0x1ac>
1000a2cc:	00bfffd4 	movui	r2,65535
1000a2d0:	2829883a 	mov	r20,r5
1000a2d4:	1180b436 	bltu	r2,r6,1000a5a8 <__udivdi3+0x320>
1000a2d8:	00803fc4 	movi	r2,255
1000a2dc:	11816736 	bltu	r2,r6,1000a87c <__udivdi3+0x5f4>
1000a2e0:	0005883a 	mov	r2,zero
1000a2e4:	0007883a 	mov	r3,zero
1000a2e8:	3084d83a 	srl	r2,r6,r2
1000a2ec:	01040074 	movhi	r4,4097
1000a2f0:	21001204 	addi	r4,r4,72
1000a2f4:	2085883a 	add	r2,r4,r2
1000a2f8:	10800003 	ldbu	r2,0(r2)
1000a2fc:	10c7883a 	add	r3,r2,r3
1000a300:	00800804 	movi	r2,32
1000a304:	10c5c83a 	sub	r2,r2,r3
1000a308:	10000526 	beq	r2,zero,1000a320 <__udivdi3+0x98>
1000a30c:	88a2983a 	sll	r17,r17,r2
1000a310:	90c6d83a 	srl	r3,r18,r3
1000a314:	30a0983a 	sll	r16,r6,r2
1000a318:	90a6983a 	sll	r19,r18,r2
1000a31c:	88e8b03a 	or	r20,r17,r3
1000a320:	8022d43a 	srli	r17,r16,16
1000a324:	a009883a 	mov	r4,r20
1000a328:	857fffcc 	andi	r21,r16,65535
1000a32c:	880b883a 	mov	r5,r17
1000a330:	000b01c0 	call	1000b01c <__umodsi3>
1000a334:	a009883a 	mov	r4,r20
1000a338:	880b883a 	mov	r5,r17
1000a33c:	102d883a 	mov	r22,r2
1000a340:	000b0140 	call	1000b014 <__udivsi3>
1000a344:	1009883a 	mov	r4,r2
1000a348:	a80b883a 	mov	r5,r21
1000a34c:	1025883a 	mov	r18,r2
1000a350:	000b0240 	call	1000b024 <__mulsi3>
1000a354:	1009883a 	mov	r4,r2
1000a358:	b006943a 	slli	r3,r22,16
1000a35c:	9804d43a 	srli	r2,r19,16
1000a360:	1886b03a 	or	r3,r3,r2
1000a364:	1900052e 	bgeu	r3,r4,1000a37c <__udivdi3+0xf4>
1000a368:	1c07883a 	add	r3,r3,r16
1000a36c:	90bfffc4 	addi	r2,r18,-1
1000a370:	1c000136 	bltu	r3,r16,1000a378 <__udivdi3+0xf0>
1000a374:	19015636 	bltu	r3,r4,1000a8d0 <__udivdi3+0x648>
1000a378:	1025883a 	mov	r18,r2
1000a37c:	1929c83a 	sub	r20,r3,r4
1000a380:	880b883a 	mov	r5,r17
1000a384:	a009883a 	mov	r4,r20
1000a388:	000b01c0 	call	1000b01c <__umodsi3>
1000a38c:	102d883a 	mov	r22,r2
1000a390:	880b883a 	mov	r5,r17
1000a394:	a009883a 	mov	r4,r20
1000a398:	b02c943a 	slli	r22,r22,16
1000a39c:	000b0140 	call	1000b014 <__udivsi3>
1000a3a0:	1009883a 	mov	r4,r2
1000a3a4:	a80b883a 	mov	r5,r21
1000a3a8:	9cffffcc 	andi	r19,r19,65535
1000a3ac:	1023883a 	mov	r17,r2
1000a3b0:	b4e6b03a 	or	r19,r22,r19
1000a3b4:	000b0240 	call	1000b024 <__mulsi3>
1000a3b8:	9880052e 	bgeu	r19,r2,1000a3d0 <__udivdi3+0x148>
1000a3bc:	9c27883a 	add	r19,r19,r16
1000a3c0:	88ffffc4 	addi	r3,r17,-1
1000a3c4:	9c011436 	bltu	r19,r16,1000a818 <__udivdi3+0x590>
1000a3c8:	9881132e 	bgeu	r19,r2,1000a818 <__udivdi3+0x590>
1000a3cc:	8c7fff84 	addi	r17,r17,-2
1000a3d0:	9024943a 	slli	r18,r18,16
1000a3d4:	0007883a 	mov	r3,zero
1000a3d8:	8c84b03a 	or	r2,r17,r18
1000a3dc:	00006106 	br	1000a564 <__udivdi3+0x2dc>
1000a3e0:	29c05e36 	bltu	r5,r7,1000a55c <__udivdi3+0x2d4>
1000a3e4:	00bfffd4 	movui	r2,65535
1000a3e8:	11c06a2e 	bgeu	r2,r7,1000a594 <__udivdi3+0x30c>
1000a3ec:	00804034 	movhi	r2,256
1000a3f0:	10bfffc4 	addi	r2,r2,-1
1000a3f4:	11c11236 	bltu	r2,r7,1000a840 <__udivdi3+0x5b8>
1000a3f8:	00c00404 	movi	r3,16
1000a3fc:	180b883a 	mov	r5,r3
1000a400:	38c6d83a 	srl	r3,r7,r3
1000a404:	01040074 	movhi	r4,4097
1000a408:	21001204 	addi	r4,r4,72
1000a40c:	04000804 	movi	r16,32
1000a410:	20c7883a 	add	r3,r4,r3
1000a414:	18800003 	ldbu	r2,0(r3)
1000a418:	1145883a 	add	r2,r2,r5
1000a41c:	80a1c83a 	sub	r16,r16,r2
1000a420:	80006c1e 	bne	r16,zero,1000a5d4 <__udivdi3+0x34c>
1000a424:	3c411836 	bltu	r7,r17,1000a888 <__udivdi3+0x600>
1000a428:	9185403a 	cmpgeu	r2,r18,r6
1000a42c:	0007883a 	mov	r3,zero
1000a430:	00004c06 	br	1000a564 <__udivdi3+0x2dc>
1000a434:	3000041e 	bne	r6,zero,1000a448 <__udivdi3+0x1c0>
1000a438:	01000044 	movi	r4,1
1000a43c:	000b883a 	mov	r5,zero
1000a440:	000b0140 	call	1000b014 <__udivsi3>
1000a444:	1021883a 	mov	r16,r2
1000a448:	00bfffd4 	movui	r2,65535
1000a44c:	14005c2e 	bgeu	r2,r16,1000a5c0 <__udivdi3+0x338>
1000a450:	00804034 	movhi	r2,256
1000a454:	10bfffc4 	addi	r2,r2,-1
1000a458:	14010236 	bltu	r2,r16,1000a864 <__udivdi3+0x5dc>
1000a45c:	00800404 	movi	r2,16
1000a460:	1007883a 	mov	r3,r2
1000a464:	8084d83a 	srl	r2,r16,r2
1000a468:	01040074 	movhi	r4,4097
1000a46c:	21001204 	addi	r4,r4,72
1000a470:	2085883a 	add	r2,r4,r2
1000a474:	10800003 	ldbu	r2,0(r2)
1000a478:	10c7883a 	add	r3,r2,r3
1000a47c:	00800804 	movi	r2,32
1000a480:	10c5c83a 	sub	r2,r2,r3
1000a484:	1000aa1e 	bne	r2,zero,1000a730 <__udivdi3+0x4a8>
1000a488:	8028d43a 	srli	r20,r16,16
1000a48c:	8c23c83a 	sub	r17,r17,r16
1000a490:	857fffcc 	andi	r21,r16,65535
1000a494:	00c00044 	movi	r3,1
1000a498:	8809883a 	mov	r4,r17
1000a49c:	a00b883a 	mov	r5,r20
1000a4a0:	d8c00015 	stw	r3,0(sp)
1000a4a4:	000b01c0 	call	1000b01c <__umodsi3>
1000a4a8:	8809883a 	mov	r4,r17
1000a4ac:	a00b883a 	mov	r5,r20
1000a4b0:	102d883a 	mov	r22,r2
1000a4b4:	000b0140 	call	1000b014 <__udivsi3>
1000a4b8:	1009883a 	mov	r4,r2
1000a4bc:	a80b883a 	mov	r5,r21
1000a4c0:	1025883a 	mov	r18,r2
1000a4c4:	000b0240 	call	1000b024 <__mulsi3>
1000a4c8:	1009883a 	mov	r4,r2
1000a4cc:	b00e943a 	slli	r7,r22,16
1000a4d0:	9804d43a 	srli	r2,r19,16
1000a4d4:	d8c00017 	ldw	r3,0(sp)
1000a4d8:	388eb03a 	or	r7,r7,r2
1000a4dc:	3900052e 	bgeu	r7,r4,1000a4f4 <__udivdi3+0x26c>
1000a4e0:	3c0f883a 	add	r7,r7,r16
1000a4e4:	90bfffc4 	addi	r2,r18,-1
1000a4e8:	3c000136 	bltu	r7,r16,1000a4f0 <__udivdi3+0x268>
1000a4ec:	3900f536 	bltu	r7,r4,1000a8c4 <__udivdi3+0x63c>
1000a4f0:	1025883a 	mov	r18,r2
1000a4f4:	3923c83a 	sub	r17,r7,r4
1000a4f8:	8809883a 	mov	r4,r17
1000a4fc:	a00b883a 	mov	r5,r20
1000a500:	d8c00015 	stw	r3,0(sp)
1000a504:	000b01c0 	call	1000b01c <__umodsi3>
1000a508:	102d883a 	mov	r22,r2
1000a50c:	8809883a 	mov	r4,r17
1000a510:	a00b883a 	mov	r5,r20
1000a514:	b02c943a 	slli	r22,r22,16
1000a518:	000b0140 	call	1000b014 <__udivsi3>
1000a51c:	1009883a 	mov	r4,r2
1000a520:	a80b883a 	mov	r5,r21
1000a524:	9cffffcc 	andi	r19,r19,65535
1000a528:	1023883a 	mov	r17,r2
1000a52c:	b4e6b03a 	or	r19,r22,r19
1000a530:	000b0240 	call	1000b024 <__mulsi3>
1000a534:	d8c00017 	ldw	r3,0(sp)
1000a538:	9880052e 	bgeu	r19,r2,1000a550 <__udivdi3+0x2c8>
1000a53c:	9c27883a 	add	r19,r19,r16
1000a540:	893fffc4 	addi	r4,r17,-1
1000a544:	9c00b236 	bltu	r19,r16,1000a810 <__udivdi3+0x588>
1000a548:	9880b12e 	bgeu	r19,r2,1000a810 <__udivdi3+0x588>
1000a54c:	8c7fff84 	addi	r17,r17,-2
1000a550:	9024943a 	slli	r18,r18,16
1000a554:	8c84b03a 	or	r2,r17,r18
1000a558:	00000206 	br	1000a564 <__udivdi3+0x2dc>
1000a55c:	0007883a 	mov	r3,zero
1000a560:	0005883a 	mov	r2,zero
1000a564:	dfc00a17 	ldw	ra,40(sp)
1000a568:	df000917 	ldw	fp,36(sp)
1000a56c:	ddc00817 	ldw	r23,32(sp)
1000a570:	dd800717 	ldw	r22,28(sp)
1000a574:	dd400617 	ldw	r21,24(sp)
1000a578:	dd000517 	ldw	r20,20(sp)
1000a57c:	dcc00417 	ldw	r19,16(sp)
1000a580:	dc800317 	ldw	r18,12(sp)
1000a584:	dc400217 	ldw	r17,8(sp)
1000a588:	dc000117 	ldw	r16,4(sp)
1000a58c:	dec00b04 	addi	sp,sp,44
1000a590:	f800283a 	ret
1000a594:	00803fc4 	movi	r2,255
1000a598:	11c0ac36 	bltu	r2,r7,1000a84c <__udivdi3+0x5c4>
1000a59c:	0007883a 	mov	r3,zero
1000a5a0:	000b883a 	mov	r5,zero
1000a5a4:	003f9606 	br	1000a400 <__alt_data_end+0xf800a400>
1000a5a8:	00804034 	movhi	r2,256
1000a5ac:	10bfffc4 	addi	r2,r2,-1
1000a5b0:	1180a936 	bltu	r2,r6,1000a858 <__udivdi3+0x5d0>
1000a5b4:	00800404 	movi	r2,16
1000a5b8:	1007883a 	mov	r3,r2
1000a5bc:	003f4a06 	br	1000a2e8 <__alt_data_end+0xf800a2e8>
1000a5c0:	00803fc4 	movi	r2,255
1000a5c4:	1400aa36 	bltu	r2,r16,1000a870 <__udivdi3+0x5e8>
1000a5c8:	0005883a 	mov	r2,zero
1000a5cc:	0007883a 	mov	r3,zero
1000a5d0:	003fa406 	br	1000a464 <__alt_data_end+0xf800a464>
1000a5d4:	3c0e983a 	sll	r7,r7,r16
1000a5d8:	3086d83a 	srl	r3,r6,r2
1000a5dc:	88aed83a 	srl	r23,r17,r2
1000a5e0:	9084d83a 	srl	r2,r18,r2
1000a5e4:	38e6b03a 	or	r19,r7,r3
1000a5e8:	9828d43a 	srli	r20,r19,16
1000a5ec:	8c22983a 	sll	r17,r17,r16
1000a5f0:	b809883a 	mov	r4,r23
1000a5f4:	a00b883a 	mov	r5,r20
1000a5f8:	342a983a 	sll	r21,r6,r16
1000a5fc:	88a2b03a 	or	r17,r17,r2
1000a600:	000b01c0 	call	1000b01c <__umodsi3>
1000a604:	b809883a 	mov	r4,r23
1000a608:	a00b883a 	mov	r5,r20
1000a60c:	1039883a 	mov	fp,r2
1000a610:	9dbfffcc 	andi	r22,r19,65535
1000a614:	000b0140 	call	1000b014 <__udivsi3>
1000a618:	1009883a 	mov	r4,r2
1000a61c:	b00b883a 	mov	r5,r22
1000a620:	102f883a 	mov	r23,r2
1000a624:	000b0240 	call	1000b024 <__mulsi3>
1000a628:	1009883a 	mov	r4,r2
1000a62c:	e00e943a 	slli	r7,fp,16
1000a630:	8804d43a 	srli	r2,r17,16
1000a634:	388eb03a 	or	r7,r7,r2
1000a638:	3900042e 	bgeu	r7,r4,1000a64c <__udivdi3+0x3c4>
1000a63c:	3ccf883a 	add	r7,r7,r19
1000a640:	b8bfffc4 	addi	r2,r23,-1
1000a644:	3cc0972e 	bgeu	r7,r19,1000a8a4 <__udivdi3+0x61c>
1000a648:	102f883a 	mov	r23,r2
1000a64c:	3939c83a 	sub	fp,r7,r4
1000a650:	a00b883a 	mov	r5,r20
1000a654:	e009883a 	mov	r4,fp
1000a658:	000b01c0 	call	1000b01c <__umodsi3>
1000a65c:	a00b883a 	mov	r5,r20
1000a660:	e009883a 	mov	r4,fp
1000a664:	d8800015 	stw	r2,0(sp)
1000a668:	000b0140 	call	1000b014 <__udivsi3>
1000a66c:	1009883a 	mov	r4,r2
1000a670:	b00b883a 	mov	r5,r22
1000a674:	1029883a 	mov	r20,r2
1000a678:	000b0240 	call	1000b024 <__mulsi3>
1000a67c:	d8c00017 	ldw	r3,0(sp)
1000a680:	8c7fffcc 	andi	r17,r17,65535
1000a684:	1806943a 	slli	r3,r3,16
1000a688:	1c46b03a 	or	r3,r3,r17
1000a68c:	1880042e 	bgeu	r3,r2,1000a6a0 <__udivdi3+0x418>
1000a690:	1cc7883a 	add	r3,r3,r19
1000a694:	a13fffc4 	addi	r4,r20,-1
1000a698:	1cc07e2e 	bgeu	r3,r19,1000a894 <__udivdi3+0x60c>
1000a69c:	2029883a 	mov	r20,r4
1000a6a0:	b82e943a 	slli	r23,r23,16
1000a6a4:	a822d43a 	srli	r17,r21,16
1000a6a8:	ad7fffcc 	andi	r21,r21,65535
1000a6ac:	a5e8b03a 	or	r20,r20,r23
1000a6b0:	a5bfffcc 	andi	r22,r20,65535
1000a6b4:	b009883a 	mov	r4,r22
1000a6b8:	a80b883a 	mov	r5,r21
1000a6bc:	18afc83a 	sub	r23,r3,r2
1000a6c0:	a026d43a 	srli	r19,r20,16
1000a6c4:	000b0240 	call	1000b024 <__mulsi3>
1000a6c8:	b009883a 	mov	r4,r22
1000a6cc:	880b883a 	mov	r5,r17
1000a6d0:	1039883a 	mov	fp,r2
1000a6d4:	000b0240 	call	1000b024 <__mulsi3>
1000a6d8:	a80b883a 	mov	r5,r21
1000a6dc:	9809883a 	mov	r4,r19
1000a6e0:	102d883a 	mov	r22,r2
1000a6e4:	000b0240 	call	1000b024 <__mulsi3>
1000a6e8:	9809883a 	mov	r4,r19
1000a6ec:	880b883a 	mov	r5,r17
1000a6f0:	102b883a 	mov	r21,r2
1000a6f4:	000b0240 	call	1000b024 <__mulsi3>
1000a6f8:	100b883a 	mov	r5,r2
1000a6fc:	e004d43a 	srli	r2,fp,16
1000a700:	ad89883a 	add	r4,r21,r22
1000a704:	2089883a 	add	r4,r4,r2
1000a708:	2540022e 	bgeu	r4,r21,1000a714 <__udivdi3+0x48c>
1000a70c:	00800074 	movhi	r2,1
1000a710:	288b883a 	add	r5,r5,r2
1000a714:	2004d43a 	srli	r2,r4,16
1000a718:	288b883a 	add	r5,r5,r2
1000a71c:	b9404536 	bltu	r23,r5,1000a834 <__udivdi3+0x5ac>
1000a720:	b9403f26 	beq	r23,r5,1000a820 <__udivdi3+0x598>
1000a724:	a005883a 	mov	r2,r20
1000a728:	0007883a 	mov	r3,zero
1000a72c:	003f8d06 	br	1000a564 <__alt_data_end+0xf800a564>
1000a730:	80a0983a 	sll	r16,r16,r2
1000a734:	88eed83a 	srl	r23,r17,r3
1000a738:	90c6d83a 	srl	r3,r18,r3
1000a73c:	8028d43a 	srli	r20,r16,16
1000a740:	88a2983a 	sll	r17,r17,r2
1000a744:	b809883a 	mov	r4,r23
1000a748:	a00b883a 	mov	r5,r20
1000a74c:	88ecb03a 	or	r22,r17,r3
1000a750:	90a6983a 	sll	r19,r18,r2
1000a754:	000b01c0 	call	1000b01c <__umodsi3>
1000a758:	b809883a 	mov	r4,r23
1000a75c:	a00b883a 	mov	r5,r20
1000a760:	1023883a 	mov	r17,r2
1000a764:	857fffcc 	andi	r21,r16,65535
1000a768:	000b0140 	call	1000b014 <__udivsi3>
1000a76c:	1009883a 	mov	r4,r2
1000a770:	a80b883a 	mov	r5,r21
1000a774:	102f883a 	mov	r23,r2
1000a778:	000b0240 	call	1000b024 <__mulsi3>
1000a77c:	1009883a 	mov	r4,r2
1000a780:	880c943a 	slli	r6,r17,16
1000a784:	b004d43a 	srli	r2,r22,16
1000a788:	308cb03a 	or	r6,r6,r2
1000a78c:	3100062e 	bgeu	r6,r4,1000a7a8 <__udivdi3+0x520>
1000a790:	340d883a 	add	r6,r6,r16
1000a794:	b8bfffc4 	addi	r2,r23,-1
1000a798:	34004836 	bltu	r6,r16,1000a8bc <__udivdi3+0x634>
1000a79c:	3100472e 	bgeu	r6,r4,1000a8bc <__udivdi3+0x634>
1000a7a0:	bdffff84 	addi	r23,r23,-2
1000a7a4:	340d883a 	add	r6,r6,r16
1000a7a8:	3125c83a 	sub	r18,r6,r4
1000a7ac:	9009883a 	mov	r4,r18
1000a7b0:	a00b883a 	mov	r5,r20
1000a7b4:	000b01c0 	call	1000b01c <__umodsi3>
1000a7b8:	1023883a 	mov	r17,r2
1000a7bc:	9009883a 	mov	r4,r18
1000a7c0:	a00b883a 	mov	r5,r20
1000a7c4:	8822943a 	slli	r17,r17,16
1000a7c8:	000b0140 	call	1000b014 <__udivsi3>
1000a7cc:	1009883a 	mov	r4,r2
1000a7d0:	a80b883a 	mov	r5,r21
1000a7d4:	b5bfffcc 	andi	r22,r22,65535
1000a7d8:	1025883a 	mov	r18,r2
1000a7dc:	8da2b03a 	or	r17,r17,r22
1000a7e0:	000b0240 	call	1000b024 <__mulsi3>
1000a7e4:	8880062e 	bgeu	r17,r2,1000a800 <__udivdi3+0x578>
1000a7e8:	8c23883a 	add	r17,r17,r16
1000a7ec:	90ffffc4 	addi	r3,r18,-1
1000a7f0:	8c003036 	bltu	r17,r16,1000a8b4 <__udivdi3+0x62c>
1000a7f4:	88802f2e 	bgeu	r17,r2,1000a8b4 <__udivdi3+0x62c>
1000a7f8:	94bfff84 	addi	r18,r18,-2
1000a7fc:	8c23883a 	add	r17,r17,r16
1000a800:	b806943a 	slli	r3,r23,16
1000a804:	88a3c83a 	sub	r17,r17,r2
1000a808:	90c6b03a 	or	r3,r18,r3
1000a80c:	003f2206 	br	1000a498 <__alt_data_end+0xf800a498>
1000a810:	2023883a 	mov	r17,r4
1000a814:	003f4e06 	br	1000a550 <__alt_data_end+0xf800a550>
1000a818:	1823883a 	mov	r17,r3
1000a81c:	003eec06 	br	1000a3d0 <__alt_data_end+0xf800a3d0>
1000a820:	2008943a 	slli	r4,r4,16
1000a824:	9420983a 	sll	r16,r18,r16
1000a828:	e73fffcc 	andi	fp,fp,65535
1000a82c:	2709883a 	add	r4,r4,fp
1000a830:	813fbc2e 	bgeu	r16,r4,1000a724 <__alt_data_end+0xf800a724>
1000a834:	a0bfffc4 	addi	r2,r20,-1
1000a838:	0007883a 	mov	r3,zero
1000a83c:	003f4906 	br	1000a564 <__alt_data_end+0xf800a564>
1000a840:	00c00604 	movi	r3,24
1000a844:	180b883a 	mov	r5,r3
1000a848:	003eed06 	br	1000a400 <__alt_data_end+0xf800a400>
1000a84c:	00c00204 	movi	r3,8
1000a850:	180b883a 	mov	r5,r3
1000a854:	003eea06 	br	1000a400 <__alt_data_end+0xf800a400>
1000a858:	00800604 	movi	r2,24
1000a85c:	1007883a 	mov	r3,r2
1000a860:	003ea106 	br	1000a2e8 <__alt_data_end+0xf800a2e8>
1000a864:	00800604 	movi	r2,24
1000a868:	1007883a 	mov	r3,r2
1000a86c:	003efd06 	br	1000a464 <__alt_data_end+0xf800a464>
1000a870:	00800204 	movi	r2,8
1000a874:	1007883a 	mov	r3,r2
1000a878:	003efa06 	br	1000a464 <__alt_data_end+0xf800a464>
1000a87c:	00800204 	movi	r2,8
1000a880:	1007883a 	mov	r3,r2
1000a884:	003e9806 	br	1000a2e8 <__alt_data_end+0xf800a2e8>
1000a888:	0007883a 	mov	r3,zero
1000a88c:	00800044 	movi	r2,1
1000a890:	003f3406 	br	1000a564 <__alt_data_end+0xf800a564>
1000a894:	18bf812e 	bgeu	r3,r2,1000a69c <__alt_data_end+0xf800a69c>
1000a898:	a53fff84 	addi	r20,r20,-2
1000a89c:	1cc7883a 	add	r3,r3,r19
1000a8a0:	003f7f06 	br	1000a6a0 <__alt_data_end+0xf800a6a0>
1000a8a4:	393f682e 	bgeu	r7,r4,1000a648 <__alt_data_end+0xf800a648>
1000a8a8:	bdffff84 	addi	r23,r23,-2
1000a8ac:	3ccf883a 	add	r7,r7,r19
1000a8b0:	003f6606 	br	1000a64c <__alt_data_end+0xf800a64c>
1000a8b4:	1825883a 	mov	r18,r3
1000a8b8:	003fd106 	br	1000a800 <__alt_data_end+0xf800a800>
1000a8bc:	102f883a 	mov	r23,r2
1000a8c0:	003fb906 	br	1000a7a8 <__alt_data_end+0xf800a7a8>
1000a8c4:	94bfff84 	addi	r18,r18,-2
1000a8c8:	3c0f883a 	add	r7,r7,r16
1000a8cc:	003f0906 	br	1000a4f4 <__alt_data_end+0xf800a4f4>
1000a8d0:	94bfff84 	addi	r18,r18,-2
1000a8d4:	1c07883a 	add	r3,r3,r16
1000a8d8:	003ea806 	br	1000a37c <__alt_data_end+0xf800a37c>

1000a8dc <__umoddi3>:
1000a8dc:	defff304 	addi	sp,sp,-52
1000a8e0:	dd000715 	stw	r20,28(sp)
1000a8e4:	dc800515 	stw	r18,20(sp)
1000a8e8:	dc400415 	stw	r17,16(sp)
1000a8ec:	dfc00c15 	stw	ra,48(sp)
1000a8f0:	df000b15 	stw	fp,44(sp)
1000a8f4:	ddc00a15 	stw	r23,40(sp)
1000a8f8:	dd800915 	stw	r22,36(sp)
1000a8fc:	dd400815 	stw	r21,32(sp)
1000a900:	dcc00615 	stw	r19,24(sp)
1000a904:	dc000315 	stw	r16,12(sp)
1000a908:	2025883a 	mov	r18,r4
1000a90c:	2823883a 	mov	r17,r5
1000a910:	2829883a 	mov	r20,r5
1000a914:	38003d1e 	bne	r7,zero,1000aa0c <__umoddi3+0x130>
1000a918:	3021883a 	mov	r16,r6
1000a91c:	2027883a 	mov	r19,r4
1000a920:	2980532e 	bgeu	r5,r6,1000aa70 <__umoddi3+0x194>
1000a924:	00bfffd4 	movui	r2,65535
1000a928:	1180a636 	bltu	r2,r6,1000abc4 <__umoddi3+0x2e8>
1000a92c:	00803fc4 	movi	r2,255
1000a930:	11816336 	bltu	r2,r6,1000aec0 <__umoddi3+0x5e4>
1000a934:	0005883a 	mov	r2,zero
1000a938:	0009883a 	mov	r4,zero
1000a93c:	3084d83a 	srl	r2,r6,r2
1000a940:	00c40074 	movhi	r3,4097
1000a944:	18c01204 	addi	r3,r3,72
1000a948:	1885883a 	add	r2,r3,r2
1000a94c:	10800003 	ldbu	r2,0(r2)
1000a950:	1109883a 	add	r4,r2,r4
1000a954:	00800804 	movi	r2,32
1000a958:	1105c83a 	sub	r2,r2,r4
1000a95c:	10011026 	beq	r2,zero,1000ada0 <__umoddi3+0x4c4>
1000a960:	9108d83a 	srl	r4,r18,r4
1000a964:	88a2983a 	sll	r17,r17,r2
1000a968:	30a0983a 	sll	r16,r6,r2
1000a96c:	90a6983a 	sll	r19,r18,r2
1000a970:	8928b03a 	or	r20,r17,r4
1000a974:	1025883a 	mov	r18,r2
1000a978:	8022d43a 	srli	r17,r16,16
1000a97c:	a009883a 	mov	r4,r20
1000a980:	857fffcc 	andi	r21,r16,65535
1000a984:	880b883a 	mov	r5,r17
1000a988:	000b01c0 	call	1000b01c <__umodsi3>
1000a98c:	a009883a 	mov	r4,r20
1000a990:	880b883a 	mov	r5,r17
1000a994:	102d883a 	mov	r22,r2
1000a998:	000b0140 	call	1000b014 <__udivsi3>
1000a99c:	1009883a 	mov	r4,r2
1000a9a0:	a80b883a 	mov	r5,r21
1000a9a4:	000b0240 	call	1000b024 <__mulsi3>
1000a9a8:	1009883a 	mov	r4,r2
1000a9ac:	b006943a 	slli	r3,r22,16
1000a9b0:	9804d43a 	srli	r2,r19,16
1000a9b4:	1886b03a 	or	r3,r3,r2
1000a9b8:	1900042e 	bgeu	r3,r4,1000a9cc <__umoddi3+0xf0>
1000a9bc:	1c07883a 	add	r3,r3,r16
1000a9c0:	1c000236 	bltu	r3,r16,1000a9cc <__umoddi3+0xf0>
1000a9c4:	1900012e 	bgeu	r3,r4,1000a9cc <__umoddi3+0xf0>
1000a9c8:	1c07883a 	add	r3,r3,r16
1000a9cc:	1929c83a 	sub	r20,r3,r4
1000a9d0:	a009883a 	mov	r4,r20
1000a9d4:	880b883a 	mov	r5,r17
1000a9d8:	000b01c0 	call	1000b01c <__umodsi3>
1000a9dc:	102d883a 	mov	r22,r2
1000a9e0:	a009883a 	mov	r4,r20
1000a9e4:	880b883a 	mov	r5,r17
1000a9e8:	b02c943a 	slli	r22,r22,16
1000a9ec:	000b0140 	call	1000b014 <__udivsi3>
1000a9f0:	1009883a 	mov	r4,r2
1000a9f4:	a80b883a 	mov	r5,r21
1000a9f8:	9cffffcc 	andi	r19,r19,65535
1000a9fc:	000b0240 	call	1000b024 <__mulsi3>
1000aa00:	b4e6b03a 	or	r19,r22,r19
1000aa04:	9880582e 	bgeu	r19,r2,1000ab68 <__umoddi3+0x28c>
1000aa08:	00005306 	br	1000ab58 <__umoddi3+0x27c>
1000aa0c:	29c05a36 	bltu	r5,r7,1000ab78 <__umoddi3+0x29c>
1000aa10:	00bfffd4 	movui	r2,65535
1000aa14:	11c0662e 	bgeu	r2,r7,1000abb0 <__umoddi3+0x2d4>
1000aa18:	00804034 	movhi	r2,256
1000aa1c:	10bfffc4 	addi	r2,r2,-1
1000aa20:	11c11b36 	bltu	r2,r7,1000ae90 <__umoddi3+0x5b4>
1000aa24:	00c00404 	movi	r3,16
1000aa28:	1827883a 	mov	r19,r3
1000aa2c:	38c6d83a 	srl	r3,r7,r3
1000aa30:	01040074 	movhi	r4,4097
1000aa34:	21001204 	addi	r4,r4,72
1000aa38:	04000804 	movi	r16,32
1000aa3c:	20c7883a 	add	r3,r4,r3
1000aa40:	18800003 	ldbu	r2,0(r3)
1000aa44:	14e7883a 	add	r19,r2,r19
1000aa48:	84e1c83a 	sub	r16,r16,r19
1000aa4c:	8000681e 	bne	r16,zero,1000abf0 <__umoddi3+0x314>
1000aa50:	3c400136 	bltu	r7,r17,1000aa58 <__umoddi3+0x17c>
1000aa54:	91812736 	bltu	r18,r6,1000aef4 <__umoddi3+0x618>
1000aa58:	9185c83a 	sub	r2,r18,r6
1000aa5c:	89e3c83a 	sub	r17,r17,r7
1000aa60:	90a5803a 	cmpltu	r18,r18,r2
1000aa64:	8ca9c83a 	sub	r20,r17,r18
1000aa68:	a007883a 	mov	r3,r20
1000aa6c:	00004406 	br	1000ab80 <__umoddi3+0x2a4>
1000aa70:	3000041e 	bne	r6,zero,1000aa84 <__umoddi3+0x1a8>
1000aa74:	01000044 	movi	r4,1
1000aa78:	000b883a 	mov	r5,zero
1000aa7c:	000b0140 	call	1000b014 <__udivsi3>
1000aa80:	1021883a 	mov	r16,r2
1000aa84:	00bfffd4 	movui	r2,65535
1000aa88:	1400542e 	bgeu	r2,r16,1000abdc <__umoddi3+0x300>
1000aa8c:	00804034 	movhi	r2,256
1000aa90:	10bfffc4 	addi	r2,r2,-1
1000aa94:	14010736 	bltu	r2,r16,1000aeb4 <__umoddi3+0x5d8>
1000aa98:	00800404 	movi	r2,16
1000aa9c:	1007883a 	mov	r3,r2
1000aaa0:	8084d83a 	srl	r2,r16,r2
1000aaa4:	01040074 	movhi	r4,4097
1000aaa8:	21001204 	addi	r4,r4,72
1000aaac:	05400804 	movi	r21,32
1000aab0:	2085883a 	add	r2,r4,r2
1000aab4:	10800003 	ldbu	r2,0(r2)
1000aab8:	10c7883a 	add	r3,r2,r3
1000aabc:	a8ebc83a 	sub	r21,r21,r3
1000aac0:	a800b91e 	bne	r21,zero,1000ada8 <__umoddi3+0x4cc>
1000aac4:	8028d43a 	srli	r20,r16,16
1000aac8:	8c23c83a 	sub	r17,r17,r16
1000aacc:	85bfffcc 	andi	r22,r16,65535
1000aad0:	0025883a 	mov	r18,zero
1000aad4:	8809883a 	mov	r4,r17
1000aad8:	a00b883a 	mov	r5,r20
1000aadc:	000b01c0 	call	1000b01c <__umodsi3>
1000aae0:	8809883a 	mov	r4,r17
1000aae4:	a00b883a 	mov	r5,r20
1000aae8:	102b883a 	mov	r21,r2
1000aaec:	000b0140 	call	1000b014 <__udivsi3>
1000aaf0:	1009883a 	mov	r4,r2
1000aaf4:	b00b883a 	mov	r5,r22
1000aaf8:	000b0240 	call	1000b024 <__mulsi3>
1000aafc:	1009883a 	mov	r4,r2
1000ab00:	a806943a 	slli	r3,r21,16
1000ab04:	9804d43a 	srli	r2,r19,16
1000ab08:	1886b03a 	or	r3,r3,r2
1000ab0c:	1900032e 	bgeu	r3,r4,1000ab1c <__umoddi3+0x240>
1000ab10:	1c07883a 	add	r3,r3,r16
1000ab14:	1c000136 	bltu	r3,r16,1000ab1c <__umoddi3+0x240>
1000ab18:	1900f436 	bltu	r3,r4,1000aeec <__umoddi3+0x610>
1000ab1c:	1923c83a 	sub	r17,r3,r4
1000ab20:	8809883a 	mov	r4,r17
1000ab24:	a00b883a 	mov	r5,r20
1000ab28:	000b01c0 	call	1000b01c <__umodsi3>
1000ab2c:	102b883a 	mov	r21,r2
1000ab30:	8809883a 	mov	r4,r17
1000ab34:	a00b883a 	mov	r5,r20
1000ab38:	a82a943a 	slli	r21,r21,16
1000ab3c:	000b0140 	call	1000b014 <__udivsi3>
1000ab40:	1009883a 	mov	r4,r2
1000ab44:	b00b883a 	mov	r5,r22
1000ab48:	9cffffcc 	andi	r19,r19,65535
1000ab4c:	000b0240 	call	1000b024 <__mulsi3>
1000ab50:	ace6b03a 	or	r19,r21,r19
1000ab54:	9880042e 	bgeu	r19,r2,1000ab68 <__umoddi3+0x28c>
1000ab58:	9c27883a 	add	r19,r19,r16
1000ab5c:	9c000236 	bltu	r19,r16,1000ab68 <__umoddi3+0x28c>
1000ab60:	9880012e 	bgeu	r19,r2,1000ab68 <__umoddi3+0x28c>
1000ab64:	9c27883a 	add	r19,r19,r16
1000ab68:	9885c83a 	sub	r2,r19,r2
1000ab6c:	1484d83a 	srl	r2,r2,r18
1000ab70:	0007883a 	mov	r3,zero
1000ab74:	00000206 	br	1000ab80 <__umoddi3+0x2a4>
1000ab78:	2005883a 	mov	r2,r4
1000ab7c:	2807883a 	mov	r3,r5
1000ab80:	dfc00c17 	ldw	ra,48(sp)
1000ab84:	df000b17 	ldw	fp,44(sp)
1000ab88:	ddc00a17 	ldw	r23,40(sp)
1000ab8c:	dd800917 	ldw	r22,36(sp)
1000ab90:	dd400817 	ldw	r21,32(sp)
1000ab94:	dd000717 	ldw	r20,28(sp)
1000ab98:	dcc00617 	ldw	r19,24(sp)
1000ab9c:	dc800517 	ldw	r18,20(sp)
1000aba0:	dc400417 	ldw	r17,16(sp)
1000aba4:	dc000317 	ldw	r16,12(sp)
1000aba8:	dec00d04 	addi	sp,sp,52
1000abac:	f800283a 	ret
1000abb0:	00803fc4 	movi	r2,255
1000abb4:	11c0b336 	bltu	r2,r7,1000ae84 <__umoddi3+0x5a8>
1000abb8:	0007883a 	mov	r3,zero
1000abbc:	0027883a 	mov	r19,zero
1000abc0:	003f9a06 	br	1000aa2c <__alt_data_end+0xf800aa2c>
1000abc4:	00804034 	movhi	r2,256
1000abc8:	10bfffc4 	addi	r2,r2,-1
1000abcc:	1180b336 	bltu	r2,r6,1000ae9c <__umoddi3+0x5c0>
1000abd0:	00800404 	movi	r2,16
1000abd4:	1009883a 	mov	r4,r2
1000abd8:	003f5806 	br	1000a93c <__alt_data_end+0xf800a93c>
1000abdc:	00803fc4 	movi	r2,255
1000abe0:	1400b136 	bltu	r2,r16,1000aea8 <__umoddi3+0x5cc>
1000abe4:	0005883a 	mov	r2,zero
1000abe8:	0007883a 	mov	r3,zero
1000abec:	003fac06 	br	1000aaa0 <__alt_data_end+0xf800aaa0>
1000abf0:	34c4d83a 	srl	r2,r6,r19
1000abf4:	3c0e983a 	sll	r7,r7,r16
1000abf8:	8cf8d83a 	srl	fp,r17,r19
1000abfc:	8c22983a 	sll	r17,r17,r16
1000ac00:	38a8b03a 	or	r20,r7,r2
1000ac04:	a02ad43a 	srli	r21,r20,16
1000ac08:	94c4d83a 	srl	r2,r18,r19
1000ac0c:	e009883a 	mov	r4,fp
1000ac10:	a80b883a 	mov	r5,r21
1000ac14:	342c983a 	sll	r22,r6,r16
1000ac18:	88a2b03a 	or	r17,r17,r2
1000ac1c:	000b01c0 	call	1000b01c <__umodsi3>
1000ac20:	e009883a 	mov	r4,fp
1000ac24:	a80b883a 	mov	r5,r21
1000ac28:	a5ffffcc 	andi	r23,r20,65535
1000ac2c:	d8800215 	stw	r2,8(sp)
1000ac30:	000b0140 	call	1000b014 <__udivsi3>
1000ac34:	1009883a 	mov	r4,r2
1000ac38:	b80b883a 	mov	r5,r23
1000ac3c:	1039883a 	mov	fp,r2
1000ac40:	000b0240 	call	1000b024 <__mulsi3>
1000ac44:	d8c00217 	ldw	r3,8(sp)
1000ac48:	1009883a 	mov	r4,r2
1000ac4c:	8804d43a 	srli	r2,r17,16
1000ac50:	1806943a 	slli	r3,r3,16
1000ac54:	9424983a 	sll	r18,r18,r16
1000ac58:	1886b03a 	or	r3,r3,r2
1000ac5c:	1900042e 	bgeu	r3,r4,1000ac70 <__umoddi3+0x394>
1000ac60:	1d07883a 	add	r3,r3,r20
1000ac64:	e0bfffc4 	addi	r2,fp,-1
1000ac68:	1d009c2e 	bgeu	r3,r20,1000aedc <__umoddi3+0x600>
1000ac6c:	1039883a 	mov	fp,r2
1000ac70:	1907c83a 	sub	r3,r3,r4
1000ac74:	1809883a 	mov	r4,r3
1000ac78:	a80b883a 	mov	r5,r21
1000ac7c:	d8c00215 	stw	r3,8(sp)
1000ac80:	000b01c0 	call	1000b01c <__umodsi3>
1000ac84:	d8c00217 	ldw	r3,8(sp)
1000ac88:	a80b883a 	mov	r5,r21
1000ac8c:	d8800015 	stw	r2,0(sp)
1000ac90:	1809883a 	mov	r4,r3
1000ac94:	000b0140 	call	1000b014 <__udivsi3>
1000ac98:	1009883a 	mov	r4,r2
1000ac9c:	b80b883a 	mov	r5,r23
1000aca0:	102b883a 	mov	r21,r2
1000aca4:	000b0240 	call	1000b024 <__mulsi3>
1000aca8:	d9c00017 	ldw	r7,0(sp)
1000acac:	8c7fffcc 	andi	r17,r17,65535
1000acb0:	380e943a 	slli	r7,r7,16
1000acb4:	3c4eb03a 	or	r7,r7,r17
1000acb8:	3880042e 	bgeu	r7,r2,1000accc <__umoddi3+0x3f0>
1000acbc:	3d0f883a 	add	r7,r7,r20
1000acc0:	a8ffffc4 	addi	r3,r21,-1
1000acc4:	3d00812e 	bgeu	r7,r20,1000aecc <__umoddi3+0x5f0>
1000acc8:	182b883a 	mov	r21,r3
1000accc:	e038943a 	slli	fp,fp,16
1000acd0:	b010d43a 	srli	r8,r22,16
1000acd4:	b1bfffcc 	andi	r6,r22,65535
1000acd8:	af2ab03a 	or	r21,r21,fp
1000acdc:	a82ed43a 	srli	r23,r21,16
1000ace0:	ad7fffcc 	andi	r21,r21,65535
1000ace4:	300b883a 	mov	r5,r6
1000ace8:	a809883a 	mov	r4,r21
1000acec:	38a3c83a 	sub	r17,r7,r2
1000acf0:	d9800115 	stw	r6,4(sp)
1000acf4:	da000015 	stw	r8,0(sp)
1000acf8:	000b0240 	call	1000b024 <__mulsi3>
1000acfc:	da000017 	ldw	r8,0(sp)
1000ad00:	a809883a 	mov	r4,r21
1000ad04:	1039883a 	mov	fp,r2
1000ad08:	400b883a 	mov	r5,r8
1000ad0c:	da000215 	stw	r8,8(sp)
1000ad10:	000b0240 	call	1000b024 <__mulsi3>
1000ad14:	d9800117 	ldw	r6,4(sp)
1000ad18:	b809883a 	mov	r4,r23
1000ad1c:	d8800015 	stw	r2,0(sp)
1000ad20:	300b883a 	mov	r5,r6
1000ad24:	000b0240 	call	1000b024 <__mulsi3>
1000ad28:	d8c00217 	ldw	r3,8(sp)
1000ad2c:	b809883a 	mov	r4,r23
1000ad30:	102b883a 	mov	r21,r2
1000ad34:	180b883a 	mov	r5,r3
1000ad38:	000b0240 	call	1000b024 <__mulsi3>
1000ad3c:	d9c00017 	ldw	r7,0(sp)
1000ad40:	1007883a 	mov	r3,r2
1000ad44:	e004d43a 	srli	r2,fp,16
1000ad48:	a9c9883a 	add	r4,r21,r7
1000ad4c:	2089883a 	add	r4,r4,r2
1000ad50:	2540022e 	bgeu	r4,r21,1000ad5c <__umoddi3+0x480>
1000ad54:	00800074 	movhi	r2,1
1000ad58:	1887883a 	add	r3,r3,r2
1000ad5c:	2004d43a 	srli	r2,r4,16
1000ad60:	2008943a 	slli	r4,r4,16
1000ad64:	e73fffcc 	andi	fp,fp,65535
1000ad68:	1887883a 	add	r3,r3,r2
1000ad6c:	2709883a 	add	r4,r4,fp
1000ad70:	88c03e36 	bltu	r17,r3,1000ae6c <__umoddi3+0x590>
1000ad74:	88c06226 	beq	r17,r3,1000af00 <__umoddi3+0x624>
1000ad78:	88c7c83a 	sub	r3,r17,r3
1000ad7c:	202d883a 	mov	r22,r4
1000ad80:	95adc83a 	sub	r22,r18,r22
1000ad84:	95a5803a 	cmpltu	r18,r18,r22
1000ad88:	1c87c83a 	sub	r3,r3,r18
1000ad8c:	1cc4983a 	sll	r2,r3,r19
1000ad90:	b42cd83a 	srl	r22,r22,r16
1000ad94:	1c06d83a 	srl	r3,r3,r16
1000ad98:	1584b03a 	or	r2,r2,r22
1000ad9c:	003f7806 	br	1000ab80 <__alt_data_end+0xf800ab80>
1000ada0:	0025883a 	mov	r18,zero
1000ada4:	003ef406 	br	1000a978 <__alt_data_end+0xf800a978>
1000ada8:	8560983a 	sll	r16,r16,r21
1000adac:	88e6d83a 	srl	r19,r17,r3
1000adb0:	90c6d83a 	srl	r3,r18,r3
1000adb4:	8028d43a 	srli	r20,r16,16
1000adb8:	8d62983a 	sll	r17,r17,r21
1000adbc:	9809883a 	mov	r4,r19
1000adc0:	a00b883a 	mov	r5,r20
1000adc4:	88eeb03a 	or	r23,r17,r3
1000adc8:	000b01c0 	call	1000b01c <__umodsi3>
1000adcc:	9809883a 	mov	r4,r19
1000add0:	a00b883a 	mov	r5,r20
1000add4:	1023883a 	mov	r17,r2
1000add8:	85bfffcc 	andi	r22,r16,65535
1000addc:	000b0140 	call	1000b014 <__udivsi3>
1000ade0:	1009883a 	mov	r4,r2
1000ade4:	b00b883a 	mov	r5,r22
1000ade8:	000b0240 	call	1000b024 <__mulsi3>
1000adec:	1007883a 	mov	r3,r2
1000adf0:	8808943a 	slli	r4,r17,16
1000adf4:	b804d43a 	srli	r2,r23,16
1000adf8:	9566983a 	sll	r19,r18,r21
1000adfc:	2088b03a 	or	r4,r4,r2
1000ae00:	20c0042e 	bgeu	r4,r3,1000ae14 <__umoddi3+0x538>
1000ae04:	2409883a 	add	r4,r4,r16
1000ae08:	24000236 	bltu	r4,r16,1000ae14 <__umoddi3+0x538>
1000ae0c:	20c0012e 	bgeu	r4,r3,1000ae14 <__umoddi3+0x538>
1000ae10:	2409883a 	add	r4,r4,r16
1000ae14:	20e5c83a 	sub	r18,r4,r3
1000ae18:	9009883a 	mov	r4,r18
1000ae1c:	a00b883a 	mov	r5,r20
1000ae20:	000b01c0 	call	1000b01c <__umodsi3>
1000ae24:	1023883a 	mov	r17,r2
1000ae28:	9009883a 	mov	r4,r18
1000ae2c:	a00b883a 	mov	r5,r20
1000ae30:	8822943a 	slli	r17,r17,16
1000ae34:	000b0140 	call	1000b014 <__udivsi3>
1000ae38:	1009883a 	mov	r4,r2
1000ae3c:	b00b883a 	mov	r5,r22
1000ae40:	bdffffcc 	andi	r23,r23,65535
1000ae44:	000b0240 	call	1000b024 <__mulsi3>
1000ae48:	8de2b03a 	or	r17,r17,r23
1000ae4c:	8880042e 	bgeu	r17,r2,1000ae60 <__umoddi3+0x584>
1000ae50:	8c23883a 	add	r17,r17,r16
1000ae54:	8c000236 	bltu	r17,r16,1000ae60 <__umoddi3+0x584>
1000ae58:	8880012e 	bgeu	r17,r2,1000ae60 <__umoddi3+0x584>
1000ae5c:	8c23883a 	add	r17,r17,r16
1000ae60:	88a3c83a 	sub	r17,r17,r2
1000ae64:	a825883a 	mov	r18,r21
1000ae68:	003f1a06 	br	1000aad4 <__alt_data_end+0xf800aad4>
1000ae6c:	25adc83a 	sub	r22,r4,r22
1000ae70:	1d07c83a 	sub	r3,r3,r20
1000ae74:	2589803a 	cmpltu	r4,r4,r22
1000ae78:	1907c83a 	sub	r3,r3,r4
1000ae7c:	88c7c83a 	sub	r3,r17,r3
1000ae80:	003fbf06 	br	1000ad80 <__alt_data_end+0xf800ad80>
1000ae84:	00c00204 	movi	r3,8
1000ae88:	1827883a 	mov	r19,r3
1000ae8c:	003ee706 	br	1000aa2c <__alt_data_end+0xf800aa2c>
1000ae90:	00c00604 	movi	r3,24
1000ae94:	1827883a 	mov	r19,r3
1000ae98:	003ee406 	br	1000aa2c <__alt_data_end+0xf800aa2c>
1000ae9c:	00800604 	movi	r2,24
1000aea0:	1009883a 	mov	r4,r2
1000aea4:	003ea506 	br	1000a93c <__alt_data_end+0xf800a93c>
1000aea8:	00800204 	movi	r2,8
1000aeac:	1007883a 	mov	r3,r2
1000aeb0:	003efb06 	br	1000aaa0 <__alt_data_end+0xf800aaa0>
1000aeb4:	00800604 	movi	r2,24
1000aeb8:	1007883a 	mov	r3,r2
1000aebc:	003ef806 	br	1000aaa0 <__alt_data_end+0xf800aaa0>
1000aec0:	00800204 	movi	r2,8
1000aec4:	1009883a 	mov	r4,r2
1000aec8:	003e9c06 	br	1000a93c <__alt_data_end+0xf800a93c>
1000aecc:	38bf7e2e 	bgeu	r7,r2,1000acc8 <__alt_data_end+0xf800acc8>
1000aed0:	ad7fff84 	addi	r21,r21,-2
1000aed4:	3d0f883a 	add	r7,r7,r20
1000aed8:	003f7c06 	br	1000accc <__alt_data_end+0xf800accc>
1000aedc:	193f632e 	bgeu	r3,r4,1000ac6c <__alt_data_end+0xf800ac6c>
1000aee0:	e73fff84 	addi	fp,fp,-2
1000aee4:	1d07883a 	add	r3,r3,r20
1000aee8:	003f6106 	br	1000ac70 <__alt_data_end+0xf800ac70>
1000aeec:	1c07883a 	add	r3,r3,r16
1000aef0:	003f0a06 	br	1000ab1c <__alt_data_end+0xf800ab1c>
1000aef4:	9005883a 	mov	r2,r18
1000aef8:	a007883a 	mov	r3,r20
1000aefc:	003f2006 	br	1000ab80 <__alt_data_end+0xf800ab80>
1000af00:	913fda36 	bltu	r18,r4,1000ae6c <__alt_data_end+0xf800ae6c>
1000af04:	202d883a 	mov	r22,r4
1000af08:	0007883a 	mov	r3,zero
1000af0c:	003f9c06 	br	1000ad80 <__alt_data_end+0xf800ad80>

1000af10 <udivmodsi4>:
1000af10:	2900182e 	bgeu	r5,r4,1000af74 <udivmodsi4+0x64>
1000af14:	28001716 	blt	r5,zero,1000af74 <udivmodsi4+0x64>
1000af18:	00800804 	movi	r2,32
1000af1c:	00c00044 	movi	r3,1
1000af20:	00000206 	br	1000af2c <udivmodsi4+0x1c>
1000af24:	10001126 	beq	r2,zero,1000af6c <udivmodsi4+0x5c>
1000af28:	28000516 	blt	r5,zero,1000af40 <udivmodsi4+0x30>
1000af2c:	294b883a 	add	r5,r5,r5
1000af30:	10bfffc4 	addi	r2,r2,-1
1000af34:	18c7883a 	add	r3,r3,r3
1000af38:	293ffa36 	bltu	r5,r4,1000af24 <__alt_data_end+0xf800af24>
1000af3c:	18000b26 	beq	r3,zero,1000af6c <udivmodsi4+0x5c>
1000af40:	0005883a 	mov	r2,zero
1000af44:	21400236 	bltu	r4,r5,1000af50 <udivmodsi4+0x40>
1000af48:	2149c83a 	sub	r4,r4,r5
1000af4c:	10c4b03a 	or	r2,r2,r3
1000af50:	1806d07a 	srli	r3,r3,1
1000af54:	280ad07a 	srli	r5,r5,1
1000af58:	183ffa1e 	bne	r3,zero,1000af44 <__alt_data_end+0xf800af44>
1000af5c:	3000011e 	bne	r6,zero,1000af64 <udivmodsi4+0x54>
1000af60:	f800283a 	ret
1000af64:	2005883a 	mov	r2,r4
1000af68:	f800283a 	ret
1000af6c:	0005883a 	mov	r2,zero
1000af70:	003ffa06 	br	1000af5c <__alt_data_end+0xf800af5c>
1000af74:	00c00044 	movi	r3,1
1000af78:	0005883a 	mov	r2,zero
1000af7c:	003ff106 	br	1000af44 <__alt_data_end+0xf800af44>

1000af80 <__divsi3>:
1000af80:	deffff04 	addi	sp,sp,-4
1000af84:	dfc00015 	stw	ra,0(sp)
1000af88:	20000916 	blt	r4,zero,1000afb0 <__divsi3+0x30>
1000af8c:	000f883a 	mov	r7,zero
1000af90:	28000a16 	blt	r5,zero,1000afbc <__divsi3+0x3c>
1000af94:	000d883a 	mov	r6,zero
1000af98:	000af100 	call	1000af10 <udivmodsi4>
1000af9c:	38000126 	beq	r7,zero,1000afa4 <__divsi3+0x24>
1000afa0:	0085c83a 	sub	r2,zero,r2
1000afa4:	dfc00017 	ldw	ra,0(sp)
1000afa8:	dec00104 	addi	sp,sp,4
1000afac:	f800283a 	ret
1000afb0:	0109c83a 	sub	r4,zero,r4
1000afb4:	01c00044 	movi	r7,1
1000afb8:	283ff60e 	bge	r5,zero,1000af94 <__alt_data_end+0xf800af94>
1000afbc:	014bc83a 	sub	r5,zero,r5
1000afc0:	39c0005c 	xori	r7,r7,1
1000afc4:	003ff306 	br	1000af94 <__alt_data_end+0xf800af94>

1000afc8 <__modsi3>:
1000afc8:	20000316 	blt	r4,zero,1000afd8 <__modsi3+0x10>
1000afcc:	28000c16 	blt	r5,zero,1000b000 <__modsi3+0x38>
1000afd0:	01800044 	movi	r6,1
1000afd4:	000af101 	jmpi	1000af10 <udivmodsi4>
1000afd8:	deffff04 	addi	sp,sp,-4
1000afdc:	dfc00015 	stw	ra,0(sp)
1000afe0:	0109c83a 	sub	r4,zero,r4
1000afe4:	28000916 	blt	r5,zero,1000b00c <__modsi3+0x44>
1000afe8:	01800044 	movi	r6,1
1000afec:	000af100 	call	1000af10 <udivmodsi4>
1000aff0:	0085c83a 	sub	r2,zero,r2
1000aff4:	dfc00017 	ldw	ra,0(sp)
1000aff8:	dec00104 	addi	sp,sp,4
1000affc:	f800283a 	ret
1000b000:	014bc83a 	sub	r5,zero,r5
1000b004:	01800044 	movi	r6,1
1000b008:	000af101 	jmpi	1000af10 <udivmodsi4>
1000b00c:	014bc83a 	sub	r5,zero,r5
1000b010:	003ff506 	br	1000afe8 <__alt_data_end+0xf800afe8>

1000b014 <__udivsi3>:
1000b014:	000d883a 	mov	r6,zero
1000b018:	000af101 	jmpi	1000af10 <udivmodsi4>

1000b01c <__umodsi3>:
1000b01c:	01800044 	movi	r6,1
1000b020:	000af101 	jmpi	1000af10 <udivmodsi4>

1000b024 <__mulsi3>:
1000b024:	0005883a 	mov	r2,zero
1000b028:	20000726 	beq	r4,zero,1000b048 <__mulsi3+0x24>
1000b02c:	20c0004c 	andi	r3,r4,1
1000b030:	2008d07a 	srli	r4,r4,1
1000b034:	18000126 	beq	r3,zero,1000b03c <__mulsi3+0x18>
1000b038:	1145883a 	add	r2,r2,r5
1000b03c:	294b883a 	add	r5,r5,r5
1000b040:	203ffa1e 	bne	r4,zero,1000b02c <__alt_data_end+0xf800b02c>
1000b044:	f800283a 	ret
1000b048:	f800283a 	ret

1000b04c <__adddf3>:
1000b04c:	00800434 	movhi	r2,16
1000b050:	10bfffc4 	addi	r2,r2,-1
1000b054:	defffb04 	addi	sp,sp,-20
1000b058:	2890703a 	and	r8,r5,r2
1000b05c:	2806d7fa 	srli	r3,r5,31
1000b060:	3884703a 	and	r2,r7,r2
1000b064:	2014d77a 	srli	r10,r4,29
1000b068:	3812d53a 	srli	r9,r7,20
1000b06c:	dc400115 	stw	r17,4(sp)
1000b070:	100490fa 	slli	r2,r2,3
1000b074:	2822d53a 	srli	r17,r5,20
1000b078:	380ed7fa 	srli	r7,r7,31
1000b07c:	400a90fa 	slli	r5,r8,3
1000b080:	3010d77a 	srli	r8,r6,29
1000b084:	dc800215 	stw	r18,8(sp)
1000b088:	dc000015 	stw	r16,0(sp)
1000b08c:	dfc00415 	stw	ra,16(sp)
1000b090:	dcc00315 	stw	r19,12(sp)
1000b094:	1c803fcc 	andi	r18,r3,255
1000b098:	202090fa 	slli	r16,r4,3
1000b09c:	8c41ffcc 	andi	r17,r17,2047
1000b0a0:	2a8ab03a 	or	r5,r5,r10
1000b0a4:	4901ffcc 	andi	r4,r9,2047
1000b0a8:	1204b03a 	or	r2,r2,r8
1000b0ac:	300c90fa 	slli	r6,r6,3
1000b0b0:	91c07126 	beq	r18,r7,1000b278 <__adddf3+0x22c>
1000b0b4:	8907c83a 	sub	r3,r17,r4
1000b0b8:	00c0a00e 	bge	zero,r3,1000b33c <__adddf3+0x2f0>
1000b0bc:	2000291e 	bne	r4,zero,1000b164 <__adddf3+0x118>
1000b0c0:	1188b03a 	or	r4,r2,r6
1000b0c4:	20008b1e 	bne	r4,zero,1000b2f4 <__adddf3+0x2a8>
1000b0c8:	808001cc 	andi	r2,r16,7
1000b0cc:	10005a26 	beq	r2,zero,1000b238 <__adddf3+0x1ec>
1000b0d0:	80c003cc 	andi	r3,r16,15
1000b0d4:	00800104 	movi	r2,4
1000b0d8:	18805726 	beq	r3,r2,1000b238 <__adddf3+0x1ec>
1000b0dc:	81000104 	addi	r4,r16,4
1000b0e0:	2421803a 	cmpltu	r16,r4,r16
1000b0e4:	2c0b883a 	add	r5,r5,r16
1000b0e8:	2880202c 	andhi	r2,r5,128
1000b0ec:	9007883a 	mov	r3,r18
1000b0f0:	2021883a 	mov	r16,r4
1000b0f4:	10005326 	beq	r2,zero,1000b244 <__adddf3+0x1f8>
1000b0f8:	8c400044 	addi	r17,r17,1
1000b0fc:	0081ffc4 	movi	r2,2047
1000b100:	8880ae26 	beq	r17,r2,1000b3bc <__adddf3+0x370>
1000b104:	00bfe034 	movhi	r2,65408
1000b108:	10bfffc4 	addi	r2,r2,-1
1000b10c:	288a703a 	and	r5,r5,r2
1000b110:	2804977a 	slli	r2,r5,29
1000b114:	280a927a 	slli	r5,r5,9
1000b118:	8020d0fa 	srli	r16,r16,3
1000b11c:	280ad33a 	srli	r5,r5,12
1000b120:	1404b03a 	or	r2,r2,r16
1000b124:	8c41ffcc 	andi	r17,r17,2047
1000b128:	8822953a 	slli	r17,r17,20
1000b12c:	18c03fcc 	andi	r3,r3,255
1000b130:	180897fa 	slli	r4,r3,31
1000b134:	00c00434 	movhi	r3,16
1000b138:	18ffffc4 	addi	r3,r3,-1
1000b13c:	28c6703a 	and	r3,r5,r3
1000b140:	1c46b03a 	or	r3,r3,r17
1000b144:	1906b03a 	or	r3,r3,r4
1000b148:	dfc00417 	ldw	ra,16(sp)
1000b14c:	dcc00317 	ldw	r19,12(sp)
1000b150:	dc800217 	ldw	r18,8(sp)
1000b154:	dc400117 	ldw	r17,4(sp)
1000b158:	dc000017 	ldw	r16,0(sp)
1000b15c:	dec00504 	addi	sp,sp,20
1000b160:	f800283a 	ret
1000b164:	0101ffc4 	movi	r4,2047
1000b168:	893fd726 	beq	r17,r4,1000b0c8 <__alt_data_end+0xf800b0c8>
1000b16c:	10802034 	orhi	r2,r2,128
1000b170:	01000e04 	movi	r4,56
1000b174:	20c09416 	blt	r4,r3,1000b3c8 <__adddf3+0x37c>
1000b178:	010007c4 	movi	r4,31
1000b17c:	20c0b716 	blt	r4,r3,1000b45c <__adddf3+0x410>
1000b180:	01000804 	movi	r4,32
1000b184:	20c9c83a 	sub	r4,r4,r3
1000b188:	30ced83a 	srl	r7,r6,r3
1000b18c:	1110983a 	sll	r8,r2,r4
1000b190:	3108983a 	sll	r4,r6,r4
1000b194:	10c6d83a 	srl	r3,r2,r3
1000b198:	41c4b03a 	or	r2,r8,r7
1000b19c:	2008c03a 	cmpne	r4,r4,zero
1000b1a0:	110cb03a 	or	r6,r2,r4
1000b1a4:	818dc83a 	sub	r6,r16,r6
1000b1a8:	81a1803a 	cmpltu	r16,r16,r6
1000b1ac:	28cbc83a 	sub	r5,r5,r3
1000b1b0:	2c0bc83a 	sub	r5,r5,r16
1000b1b4:	3021883a 	mov	r16,r6
1000b1b8:	2880202c 	andhi	r2,r5,128
1000b1bc:	103fc226 	beq	r2,zero,1000b0c8 <__alt_data_end+0xf800b0c8>
1000b1c0:	04c02034 	movhi	r19,128
1000b1c4:	9cffffc4 	addi	r19,r19,-1
1000b1c8:	2ce6703a 	and	r19,r5,r19
1000b1cc:	98006c26 	beq	r19,zero,1000b380 <__adddf3+0x334>
1000b1d0:	9809883a 	mov	r4,r19
1000b1d4:	000d7240 	call	1000d724 <__clzsi2>
1000b1d8:	10fffe04 	addi	r3,r2,-8
1000b1dc:	010007c4 	movi	r4,31
1000b1e0:	20c06d16 	blt	r4,r3,1000b398 <__adddf3+0x34c>
1000b1e4:	01000a04 	movi	r4,40
1000b1e8:	2085c83a 	sub	r2,r4,r2
1000b1ec:	8084d83a 	srl	r2,r16,r2
1000b1f0:	98e6983a 	sll	r19,r19,r3
1000b1f4:	80e0983a 	sll	r16,r16,r3
1000b1f8:	14c4b03a 	or	r2,r2,r19
1000b1fc:	1c406a16 	blt	r3,r17,1000b3a8 <__adddf3+0x35c>
1000b200:	1c63c83a 	sub	r17,r3,r17
1000b204:	89400044 	addi	r5,r17,1
1000b208:	00c007c4 	movi	r3,31
1000b20c:	19408616 	blt	r3,r5,1000b428 <__adddf3+0x3dc>
1000b210:	1c47c83a 	sub	r3,r3,r17
1000b214:	8148d83a 	srl	r4,r16,r5
1000b218:	80e0983a 	sll	r16,r16,r3
1000b21c:	10c6983a 	sll	r3,r2,r3
1000b220:	114ad83a 	srl	r5,r2,r5
1000b224:	8004c03a 	cmpne	r2,r16,zero
1000b228:	20e0b03a 	or	r16,r4,r3
1000b22c:	80a0b03a 	or	r16,r16,r2
1000b230:	0023883a 	mov	r17,zero
1000b234:	003fa406 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b238:	2880202c 	andhi	r2,r5,128
1000b23c:	9007883a 	mov	r3,r18
1000b240:	103fad1e 	bne	r2,zero,1000b0f8 <__alt_data_end+0xf800b0f8>
1000b244:	2804977a 	slli	r2,r5,29
1000b248:	8020d0fa 	srli	r16,r16,3
1000b24c:	0101ffc4 	movi	r4,2047
1000b250:	280ad0fa 	srli	r5,r5,3
1000b254:	1404b03a 	or	r2,r2,r16
1000b258:	8900031e 	bne	r17,r4,1000b268 <__adddf3+0x21c>
1000b25c:	1148b03a 	or	r4,r2,r5
1000b260:	20005626 	beq	r4,zero,1000b3bc <__adddf3+0x370>
1000b264:	29400234 	orhi	r5,r5,8
1000b268:	01000434 	movhi	r4,16
1000b26c:	213fffc4 	addi	r4,r4,-1
1000b270:	290a703a 	and	r5,r5,r4
1000b274:	003fab06 	br	1000b124 <__alt_data_end+0xf800b124>
1000b278:	890fc83a 	sub	r7,r17,r4
1000b27c:	01c0560e 	bge	zero,r7,1000b3d8 <__adddf3+0x38c>
1000b280:	20002426 	beq	r4,zero,1000b314 <__adddf3+0x2c8>
1000b284:	0101ffc4 	movi	r4,2047
1000b288:	893f8f26 	beq	r17,r4,1000b0c8 <__alt_data_end+0xf800b0c8>
1000b28c:	10802034 	orhi	r2,r2,128
1000b290:	01000e04 	movi	r4,56
1000b294:	21c09d0e 	bge	r4,r7,1000b50c <__adddf3+0x4c0>
1000b298:	118cb03a 	or	r6,r2,r6
1000b29c:	300cc03a 	cmpne	r6,r6,zero
1000b2a0:	000f883a 	mov	r7,zero
1000b2a4:	340d883a 	add	r6,r6,r16
1000b2a8:	3421803a 	cmpltu	r16,r6,r16
1000b2ac:	394b883a 	add	r5,r7,r5
1000b2b0:	2c0b883a 	add	r5,r5,r16
1000b2b4:	3021883a 	mov	r16,r6
1000b2b8:	2880202c 	andhi	r2,r5,128
1000b2bc:	103f8226 	beq	r2,zero,1000b0c8 <__alt_data_end+0xf800b0c8>
1000b2c0:	8c400044 	addi	r17,r17,1
1000b2c4:	0081ffc4 	movi	r2,2047
1000b2c8:	8880cb26 	beq	r17,r2,1000b5f8 <__adddf3+0x5ac>
1000b2cc:	00bfe034 	movhi	r2,65408
1000b2d0:	10bfffc4 	addi	r2,r2,-1
1000b2d4:	288a703a 	and	r5,r5,r2
1000b2d8:	8006d07a 	srli	r3,r16,1
1000b2dc:	280497fa 	slli	r2,r5,31
1000b2e0:	8400004c 	andi	r16,r16,1
1000b2e4:	80e0b03a 	or	r16,r16,r3
1000b2e8:	80a0b03a 	or	r16,r16,r2
1000b2ec:	280ad07a 	srli	r5,r5,1
1000b2f0:	003f7506 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b2f4:	18ffffc4 	addi	r3,r3,-1
1000b2f8:	1800481e 	bne	r3,zero,1000b41c <__adddf3+0x3d0>
1000b2fc:	818dc83a 	sub	r6,r16,r6
1000b300:	81a1803a 	cmpltu	r16,r16,r6
1000b304:	288bc83a 	sub	r5,r5,r2
1000b308:	2c0bc83a 	sub	r5,r5,r16
1000b30c:	3021883a 	mov	r16,r6
1000b310:	003fa906 	br	1000b1b8 <__alt_data_end+0xf800b1b8>
1000b314:	1188b03a 	or	r4,r2,r6
1000b318:	203f6b26 	beq	r4,zero,1000b0c8 <__alt_data_end+0xf800b0c8>
1000b31c:	39ffffc4 	addi	r7,r7,-1
1000b320:	3800931e 	bne	r7,zero,1000b570 <__adddf3+0x524>
1000b324:	340d883a 	add	r6,r6,r16
1000b328:	3421803a 	cmpltu	r16,r6,r16
1000b32c:	114b883a 	add	r5,r2,r5
1000b330:	2c0b883a 	add	r5,r5,r16
1000b334:	3021883a 	mov	r16,r6
1000b338:	003fdf06 	br	1000b2b8 <__alt_data_end+0xf800b2b8>
1000b33c:	1800531e 	bne	r3,zero,1000b48c <__adddf3+0x440>
1000b340:	88c00044 	addi	r3,r17,1
1000b344:	18c1ffcc 	andi	r3,r3,2047
1000b348:	01000044 	movi	r4,1
1000b34c:	20c0a00e 	bge	r4,r3,1000b5d0 <__adddf3+0x584>
1000b350:	8187c83a 	sub	r3,r16,r6
1000b354:	80c9803a 	cmpltu	r4,r16,r3
1000b358:	28a7c83a 	sub	r19,r5,r2
1000b35c:	9927c83a 	sub	r19,r19,r4
1000b360:	9900202c 	andhi	r4,r19,128
1000b364:	20006226 	beq	r4,zero,1000b4f0 <__adddf3+0x4a4>
1000b368:	3421c83a 	sub	r16,r6,r16
1000b36c:	1145c83a 	sub	r2,r2,r5
1000b370:	340d803a 	cmpltu	r6,r6,r16
1000b374:	11a7c83a 	sub	r19,r2,r6
1000b378:	3825883a 	mov	r18,r7
1000b37c:	983f941e 	bne	r19,zero,1000b1d0 <__alt_data_end+0xf800b1d0>
1000b380:	8009883a 	mov	r4,r16
1000b384:	000d7240 	call	1000d724 <__clzsi2>
1000b388:	10800804 	addi	r2,r2,32
1000b38c:	10fffe04 	addi	r3,r2,-8
1000b390:	010007c4 	movi	r4,31
1000b394:	20ff930e 	bge	r4,r3,1000b1e4 <__alt_data_end+0xf800b1e4>
1000b398:	10bff604 	addi	r2,r2,-40
1000b39c:	8084983a 	sll	r2,r16,r2
1000b3a0:	0021883a 	mov	r16,zero
1000b3a4:	1c7f960e 	bge	r3,r17,1000b200 <__alt_data_end+0xf800b200>
1000b3a8:	017fe034 	movhi	r5,65408
1000b3ac:	297fffc4 	addi	r5,r5,-1
1000b3b0:	88e3c83a 	sub	r17,r17,r3
1000b3b4:	114a703a 	and	r5,r2,r5
1000b3b8:	003f4306 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b3bc:	000b883a 	mov	r5,zero
1000b3c0:	0005883a 	mov	r2,zero
1000b3c4:	003f5706 	br	1000b124 <__alt_data_end+0xf800b124>
1000b3c8:	118cb03a 	or	r6,r2,r6
1000b3cc:	300cc03a 	cmpne	r6,r6,zero
1000b3d0:	0007883a 	mov	r3,zero
1000b3d4:	003f7306 	br	1000b1a4 <__alt_data_end+0xf800b1a4>
1000b3d8:	3800961e 	bne	r7,zero,1000b634 <__adddf3+0x5e8>
1000b3dc:	89000044 	addi	r4,r17,1
1000b3e0:	2201ffcc 	andi	r8,r4,2047
1000b3e4:	01c00044 	movi	r7,1
1000b3e8:	3a00680e 	bge	r7,r8,1000b58c <__adddf3+0x540>
1000b3ec:	01c1ffc4 	movi	r7,2047
1000b3f0:	21c0a726 	beq	r4,r7,1000b690 <__adddf3+0x644>
1000b3f4:	340d883a 	add	r6,r6,r16
1000b3f8:	3421803a 	cmpltu	r16,r6,r16
1000b3fc:	114b883a 	add	r5,r2,r5
1000b400:	2c0b883a 	add	r5,r5,r16
1000b404:	282097fa 	slli	r16,r5,31
1000b408:	300cd07a 	srli	r6,r6,1
1000b40c:	280ad07a 	srli	r5,r5,1
1000b410:	2023883a 	mov	r17,r4
1000b414:	81a0b03a 	or	r16,r16,r6
1000b418:	003f2b06 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b41c:	0101ffc4 	movi	r4,2047
1000b420:	893f531e 	bne	r17,r4,1000b170 <__alt_data_end+0xf800b170>
1000b424:	003f2806 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b428:	893ff844 	addi	r4,r17,-31
1000b42c:	00c00804 	movi	r3,32
1000b430:	1108d83a 	srl	r4,r2,r4
1000b434:	28c05126 	beq	r5,r3,1000b57c <__adddf3+0x530>
1000b438:	00c00fc4 	movi	r3,63
1000b43c:	1c63c83a 	sub	r17,r3,r17
1000b440:	1444983a 	sll	r2,r2,r17
1000b444:	1420b03a 	or	r16,r2,r16
1000b448:	8020c03a 	cmpne	r16,r16,zero
1000b44c:	8120b03a 	or	r16,r16,r4
1000b450:	000b883a 	mov	r5,zero
1000b454:	0023883a 	mov	r17,zero
1000b458:	003f1b06 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b45c:	193ff804 	addi	r4,r3,-32
1000b460:	01c00804 	movi	r7,32
1000b464:	1108d83a 	srl	r4,r2,r4
1000b468:	19c04626 	beq	r3,r7,1000b584 <__adddf3+0x538>
1000b46c:	01c01004 	movi	r7,64
1000b470:	38c7c83a 	sub	r3,r7,r3
1000b474:	10c4983a 	sll	r2,r2,r3
1000b478:	118cb03a 	or	r6,r2,r6
1000b47c:	300cc03a 	cmpne	r6,r6,zero
1000b480:	310cb03a 	or	r6,r6,r4
1000b484:	0007883a 	mov	r3,zero
1000b488:	003f4606 	br	1000b1a4 <__alt_data_end+0xf800b1a4>
1000b48c:	88002b26 	beq	r17,zero,1000b53c <__adddf3+0x4f0>
1000b490:	0201ffc4 	movi	r8,2047
1000b494:	22002f26 	beq	r4,r8,1000b554 <__adddf3+0x508>
1000b498:	00c7c83a 	sub	r3,zero,r3
1000b49c:	29402034 	orhi	r5,r5,128
1000b4a0:	02000e04 	movi	r8,56
1000b4a4:	40c07616 	blt	r8,r3,1000b680 <__adddf3+0x634>
1000b4a8:	020007c4 	movi	r8,31
1000b4ac:	40c0d216 	blt	r8,r3,1000b7f8 <__adddf3+0x7ac>
1000b4b0:	02000804 	movi	r8,32
1000b4b4:	40d1c83a 	sub	r8,r8,r3
1000b4b8:	2a14983a 	sll	r10,r5,r8
1000b4bc:	80d2d83a 	srl	r9,r16,r3
1000b4c0:	8210983a 	sll	r8,r16,r8
1000b4c4:	28cad83a 	srl	r5,r5,r3
1000b4c8:	5252b03a 	or	r9,r10,r9
1000b4cc:	4006c03a 	cmpne	r3,r8,zero
1000b4d0:	48e0b03a 	or	r16,r9,r3
1000b4d4:	3421c83a 	sub	r16,r6,r16
1000b4d8:	114bc83a 	sub	r5,r2,r5
1000b4dc:	340d803a 	cmpltu	r6,r6,r16
1000b4e0:	298bc83a 	sub	r5,r5,r6
1000b4e4:	2023883a 	mov	r17,r4
1000b4e8:	3825883a 	mov	r18,r7
1000b4ec:	003f3206 	br	1000b1b8 <__alt_data_end+0xf800b1b8>
1000b4f0:	98c4b03a 	or	r2,r19,r3
1000b4f4:	10001c1e 	bne	r2,zero,1000b568 <__adddf3+0x51c>
1000b4f8:	0007883a 	mov	r3,zero
1000b4fc:	000b883a 	mov	r5,zero
1000b500:	0021883a 	mov	r16,zero
1000b504:	0023883a 	mov	r17,zero
1000b508:	003f4e06 	br	1000b244 <__alt_data_end+0xf800b244>
1000b50c:	010007c4 	movi	r4,31
1000b510:	21c03c16 	blt	r4,r7,1000b604 <__adddf3+0x5b8>
1000b514:	01000804 	movi	r4,32
1000b518:	21c9c83a 	sub	r4,r4,r7
1000b51c:	31d0d83a 	srl	r8,r6,r7
1000b520:	1112983a 	sll	r9,r2,r4
1000b524:	3108983a 	sll	r4,r6,r4
1000b528:	11ced83a 	srl	r7,r2,r7
1000b52c:	4a04b03a 	or	r2,r9,r8
1000b530:	2008c03a 	cmpne	r4,r4,zero
1000b534:	110cb03a 	or	r6,r2,r4
1000b538:	003f5a06 	br	1000b2a4 <__alt_data_end+0xf800b2a4>
1000b53c:	2c10b03a 	or	r8,r5,r16
1000b540:	40000426 	beq	r8,zero,1000b554 <__adddf3+0x508>
1000b544:	00c6303a 	nor	r3,zero,r3
1000b548:	183fe226 	beq	r3,zero,1000b4d4 <__alt_data_end+0xf800b4d4>
1000b54c:	0201ffc4 	movi	r8,2047
1000b550:	223fd31e 	bne	r4,r8,1000b4a0 <__alt_data_end+0xf800b4a0>
1000b554:	100b883a 	mov	r5,r2
1000b558:	3021883a 	mov	r16,r6
1000b55c:	2023883a 	mov	r17,r4
1000b560:	3825883a 	mov	r18,r7
1000b564:	003ed806 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b568:	1821883a 	mov	r16,r3
1000b56c:	003f1706 	br	1000b1cc <__alt_data_end+0xf800b1cc>
1000b570:	0101ffc4 	movi	r4,2047
1000b574:	893f461e 	bne	r17,r4,1000b290 <__alt_data_end+0xf800b290>
1000b578:	003ed306 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b57c:	0005883a 	mov	r2,zero
1000b580:	003fb006 	br	1000b444 <__alt_data_end+0xf800b444>
1000b584:	0005883a 	mov	r2,zero
1000b588:	003fbb06 	br	1000b478 <__alt_data_end+0xf800b478>
1000b58c:	2c06b03a 	or	r3,r5,r16
1000b590:	8800841e 	bne	r17,zero,1000b7a4 <__adddf3+0x758>
1000b594:	1800b226 	beq	r3,zero,1000b860 <__adddf3+0x814>
1000b598:	1186b03a 	or	r3,r2,r6
1000b59c:	183eca26 	beq	r3,zero,1000b0c8 <__alt_data_end+0xf800b0c8>
1000b5a0:	340d883a 	add	r6,r6,r16
1000b5a4:	114b883a 	add	r5,r2,r5
1000b5a8:	3421803a 	cmpltu	r16,r6,r16
1000b5ac:	2c0b883a 	add	r5,r5,r16
1000b5b0:	2880202c 	andhi	r2,r5,128
1000b5b4:	1000c026 	beq	r2,zero,1000b8b8 <__adddf3+0x86c>
1000b5b8:	00bfe034 	movhi	r2,65408
1000b5bc:	10bfffc4 	addi	r2,r2,-1
1000b5c0:	288a703a 	and	r5,r5,r2
1000b5c4:	3021883a 	mov	r16,r6
1000b5c8:	3823883a 	mov	r17,r7
1000b5cc:	003ebe06 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b5d0:	2c06b03a 	or	r3,r5,r16
1000b5d4:	8800221e 	bne	r17,zero,1000b660 <__adddf3+0x614>
1000b5d8:	1800481e 	bne	r3,zero,1000b6fc <__adddf3+0x6b0>
1000b5dc:	1186b03a 	or	r3,r2,r6
1000b5e0:	18000426 	beq	r3,zero,1000b5f4 <__adddf3+0x5a8>
1000b5e4:	100b883a 	mov	r5,r2
1000b5e8:	3021883a 	mov	r16,r6
1000b5ec:	3825883a 	mov	r18,r7
1000b5f0:	003eb506 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b5f4:	0007883a 	mov	r3,zero
1000b5f8:	000b883a 	mov	r5,zero
1000b5fc:	0021883a 	mov	r16,zero
1000b600:	003f1006 	br	1000b244 <__alt_data_end+0xf800b244>
1000b604:	393ff804 	addi	r4,r7,-32
1000b608:	02000804 	movi	r8,32
1000b60c:	1108d83a 	srl	r4,r2,r4
1000b610:	3a007726 	beq	r7,r8,1000b7f0 <__adddf3+0x7a4>
1000b614:	02001004 	movi	r8,64
1000b618:	41cfc83a 	sub	r7,r8,r7
1000b61c:	11c4983a 	sll	r2,r2,r7
1000b620:	118cb03a 	or	r6,r2,r6
1000b624:	300cc03a 	cmpne	r6,r6,zero
1000b628:	310cb03a 	or	r6,r6,r4
1000b62c:	000f883a 	mov	r7,zero
1000b630:	003f1c06 	br	1000b2a4 <__alt_data_end+0xf800b2a4>
1000b634:	88001a1e 	bne	r17,zero,1000b6a0 <__adddf3+0x654>
1000b638:	2c10b03a 	or	r8,r5,r16
1000b63c:	40005526 	beq	r8,zero,1000b794 <__adddf3+0x748>
1000b640:	01ce303a 	nor	r7,zero,r7
1000b644:	3800511e 	bne	r7,zero,1000b78c <__adddf3+0x740>
1000b648:	81a1883a 	add	r16,r16,r6
1000b64c:	114b883a 	add	r5,r2,r5
1000b650:	818d803a 	cmpltu	r6,r16,r6
1000b654:	298b883a 	add	r5,r5,r6
1000b658:	2023883a 	mov	r17,r4
1000b65c:	003f1606 	br	1000b2b8 <__alt_data_end+0xf800b2b8>
1000b660:	1800341e 	bne	r3,zero,1000b734 <__adddf3+0x6e8>
1000b664:	1186b03a 	or	r3,r2,r6
1000b668:	18006f26 	beq	r3,zero,1000b828 <__adddf3+0x7dc>
1000b66c:	100b883a 	mov	r5,r2
1000b670:	3021883a 	mov	r16,r6
1000b674:	3825883a 	mov	r18,r7
1000b678:	0441ffc4 	movi	r17,2047
1000b67c:	003e9206 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b680:	2c20b03a 	or	r16,r5,r16
1000b684:	8020c03a 	cmpne	r16,r16,zero
1000b688:	000b883a 	mov	r5,zero
1000b68c:	003f9106 	br	1000b4d4 <__alt_data_end+0xf800b4d4>
1000b690:	2023883a 	mov	r17,r4
1000b694:	000b883a 	mov	r5,zero
1000b698:	0021883a 	mov	r16,zero
1000b69c:	003ee906 	br	1000b244 <__alt_data_end+0xf800b244>
1000b6a0:	0201ffc4 	movi	r8,2047
1000b6a4:	22003b26 	beq	r4,r8,1000b794 <__adddf3+0x748>
1000b6a8:	01cfc83a 	sub	r7,zero,r7
1000b6ac:	29402034 	orhi	r5,r5,128
1000b6b0:	02000e04 	movi	r8,56
1000b6b4:	41c06216 	blt	r8,r7,1000b840 <__adddf3+0x7f4>
1000b6b8:	020007c4 	movi	r8,31
1000b6bc:	41c07016 	blt	r8,r7,1000b880 <__adddf3+0x834>
1000b6c0:	02000804 	movi	r8,32
1000b6c4:	41d1c83a 	sub	r8,r8,r7
1000b6c8:	2a14983a 	sll	r10,r5,r8
1000b6cc:	81d2d83a 	srl	r9,r16,r7
1000b6d0:	8210983a 	sll	r8,r16,r8
1000b6d4:	29cad83a 	srl	r5,r5,r7
1000b6d8:	5252b03a 	or	r9,r10,r9
1000b6dc:	400ec03a 	cmpne	r7,r8,zero
1000b6e0:	49e0b03a 	or	r16,r9,r7
1000b6e4:	81a1883a 	add	r16,r16,r6
1000b6e8:	2885883a 	add	r2,r5,r2
1000b6ec:	818d803a 	cmpltu	r6,r16,r6
1000b6f0:	118b883a 	add	r5,r2,r6
1000b6f4:	2023883a 	mov	r17,r4
1000b6f8:	003eef06 	br	1000b2b8 <__alt_data_end+0xf800b2b8>
1000b6fc:	1186b03a 	or	r3,r2,r6
1000b700:	183e7126 	beq	r3,zero,1000b0c8 <__alt_data_end+0xf800b0c8>
1000b704:	8187c83a 	sub	r3,r16,r6
1000b708:	80d1803a 	cmpltu	r8,r16,r3
1000b70c:	2889c83a 	sub	r4,r5,r2
1000b710:	2209c83a 	sub	r4,r4,r8
1000b714:	2200202c 	andhi	r8,r4,128
1000b718:	40005426 	beq	r8,zero,1000b86c <__adddf3+0x820>
1000b71c:	3421c83a 	sub	r16,r6,r16
1000b720:	114bc83a 	sub	r5,r2,r5
1000b724:	340d803a 	cmpltu	r6,r6,r16
1000b728:	298bc83a 	sub	r5,r5,r6
1000b72c:	3825883a 	mov	r18,r7
1000b730:	003e6506 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b734:	1186b03a 	or	r3,r2,r6
1000b738:	18002b26 	beq	r3,zero,1000b7e8 <__adddf3+0x79c>
1000b73c:	2806d0fa 	srli	r3,r5,3
1000b740:	8020d0fa 	srli	r16,r16,3
1000b744:	280a977a 	slli	r5,r5,29
1000b748:	1900022c 	andhi	r4,r3,8
1000b74c:	2c20b03a 	or	r16,r5,r16
1000b750:	20000826 	beq	r4,zero,1000b774 <__adddf3+0x728>
1000b754:	1008d0fa 	srli	r4,r2,3
1000b758:	2140022c 	andhi	r5,r4,8
1000b75c:	2800051e 	bne	r5,zero,1000b774 <__adddf3+0x728>
1000b760:	300cd0fa 	srli	r6,r6,3
1000b764:	1004977a 	slli	r2,r2,29
1000b768:	2007883a 	mov	r3,r4
1000b76c:	3825883a 	mov	r18,r7
1000b770:	11a0b03a 	or	r16,r2,r6
1000b774:	800ad77a 	srli	r5,r16,29
1000b778:	180690fa 	slli	r3,r3,3
1000b77c:	802090fa 	slli	r16,r16,3
1000b780:	0441ffc4 	movi	r17,2047
1000b784:	28cab03a 	or	r5,r5,r3
1000b788:	003e4f06 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b78c:	0201ffc4 	movi	r8,2047
1000b790:	223fc71e 	bne	r4,r8,1000b6b0 <__alt_data_end+0xf800b6b0>
1000b794:	100b883a 	mov	r5,r2
1000b798:	3021883a 	mov	r16,r6
1000b79c:	2023883a 	mov	r17,r4
1000b7a0:	003e4906 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b7a4:	18002a26 	beq	r3,zero,1000b850 <__adddf3+0x804>
1000b7a8:	1186b03a 	or	r3,r2,r6
1000b7ac:	18000e26 	beq	r3,zero,1000b7e8 <__adddf3+0x79c>
1000b7b0:	2806d0fa 	srli	r3,r5,3
1000b7b4:	8020d0fa 	srli	r16,r16,3
1000b7b8:	280a977a 	slli	r5,r5,29
1000b7bc:	1900022c 	andhi	r4,r3,8
1000b7c0:	2c20b03a 	or	r16,r5,r16
1000b7c4:	203feb26 	beq	r4,zero,1000b774 <__alt_data_end+0xf800b774>
1000b7c8:	1008d0fa 	srli	r4,r2,3
1000b7cc:	2140022c 	andhi	r5,r4,8
1000b7d0:	283fe81e 	bne	r5,zero,1000b774 <__alt_data_end+0xf800b774>
1000b7d4:	300cd0fa 	srli	r6,r6,3
1000b7d8:	1004977a 	slli	r2,r2,29
1000b7dc:	2007883a 	mov	r3,r4
1000b7e0:	11a0b03a 	or	r16,r2,r6
1000b7e4:	003fe306 	br	1000b774 <__alt_data_end+0xf800b774>
1000b7e8:	0441ffc4 	movi	r17,2047
1000b7ec:	003e3606 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b7f0:	0005883a 	mov	r2,zero
1000b7f4:	003f8a06 	br	1000b620 <__alt_data_end+0xf800b620>
1000b7f8:	1a3ff804 	addi	r8,r3,-32
1000b7fc:	02400804 	movi	r9,32
1000b800:	2a10d83a 	srl	r8,r5,r8
1000b804:	1a402a26 	beq	r3,r9,1000b8b0 <__adddf3+0x864>
1000b808:	02401004 	movi	r9,64
1000b80c:	48c7c83a 	sub	r3,r9,r3
1000b810:	28ca983a 	sll	r5,r5,r3
1000b814:	2c20b03a 	or	r16,r5,r16
1000b818:	8020c03a 	cmpne	r16,r16,zero
1000b81c:	8220b03a 	or	r16,r16,r8
1000b820:	000b883a 	mov	r5,zero
1000b824:	003f2b06 	br	1000b4d4 <__alt_data_end+0xf800b4d4>
1000b828:	0007883a 	mov	r3,zero
1000b82c:	01402034 	movhi	r5,128
1000b830:	297fffc4 	addi	r5,r5,-1
1000b834:	043ffe04 	movi	r16,-8
1000b838:	0441ffc4 	movi	r17,2047
1000b83c:	003e8106 	br	1000b244 <__alt_data_end+0xf800b244>
1000b840:	2c20b03a 	or	r16,r5,r16
1000b844:	8020c03a 	cmpne	r16,r16,zero
1000b848:	000b883a 	mov	r5,zero
1000b84c:	003fa506 	br	1000b6e4 <__alt_data_end+0xf800b6e4>
1000b850:	100b883a 	mov	r5,r2
1000b854:	3021883a 	mov	r16,r6
1000b858:	0441ffc4 	movi	r17,2047
1000b85c:	003e1a06 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b860:	100b883a 	mov	r5,r2
1000b864:	3021883a 	mov	r16,r6
1000b868:	003e1706 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b86c:	20c4b03a 	or	r2,r4,r3
1000b870:	103f6026 	beq	r2,zero,1000b5f4 <__alt_data_end+0xf800b5f4>
1000b874:	200b883a 	mov	r5,r4
1000b878:	1821883a 	mov	r16,r3
1000b87c:	003e1206 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b880:	3a3ff804 	addi	r8,r7,-32
1000b884:	02400804 	movi	r9,32
1000b888:	2a10d83a 	srl	r8,r5,r8
1000b88c:	3a400c26 	beq	r7,r9,1000b8c0 <__adddf3+0x874>
1000b890:	02401004 	movi	r9,64
1000b894:	49cfc83a 	sub	r7,r9,r7
1000b898:	29ca983a 	sll	r5,r5,r7
1000b89c:	2c20b03a 	or	r16,r5,r16
1000b8a0:	8020c03a 	cmpne	r16,r16,zero
1000b8a4:	8220b03a 	or	r16,r16,r8
1000b8a8:	000b883a 	mov	r5,zero
1000b8ac:	003f8d06 	br	1000b6e4 <__alt_data_end+0xf800b6e4>
1000b8b0:	000b883a 	mov	r5,zero
1000b8b4:	003fd706 	br	1000b814 <__alt_data_end+0xf800b814>
1000b8b8:	3021883a 	mov	r16,r6
1000b8bc:	003e0206 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b8c0:	000b883a 	mov	r5,zero
1000b8c4:	003ff506 	br	1000b89c <__alt_data_end+0xf800b89c>

1000b8c8 <__divdf3>:
1000b8c8:	defff004 	addi	sp,sp,-64
1000b8cc:	dd000a15 	stw	r20,40(sp)
1000b8d0:	2828d53a 	srli	r20,r5,20
1000b8d4:	dd800c15 	stw	r22,48(sp)
1000b8d8:	282cd7fa 	srli	r22,r5,31
1000b8dc:	df000e15 	stw	fp,56(sp)
1000b8e0:	dcc00915 	stw	r19,36(sp)
1000b8e4:	dc800815 	stw	r18,32(sp)
1000b8e8:	04c00434 	movhi	r19,16
1000b8ec:	9cffffc4 	addi	r19,r19,-1
1000b8f0:	dfc00f15 	stw	ra,60(sp)
1000b8f4:	ddc00d15 	stw	r23,52(sp)
1000b8f8:	dd400b15 	stw	r21,44(sp)
1000b8fc:	dc400715 	stw	r17,28(sp)
1000b900:	dc000615 	stw	r16,24(sp)
1000b904:	a501ffcc 	andi	r20,r20,2047
1000b908:	2025883a 	mov	r18,r4
1000b90c:	2ce6703a 	and	r19,r5,r19
1000b910:	b7003fcc 	andi	fp,r22,255
1000b914:	a0006a26 	beq	r20,zero,1000bac0 <__divdf3+0x1f8>
1000b918:	0081ffc4 	movi	r2,2047
1000b91c:	2021883a 	mov	r16,r4
1000b920:	a0803726 	beq	r20,r2,1000ba00 <__divdf3+0x138>
1000b924:	98800434 	orhi	r2,r19,16
1000b928:	100490fa 	slli	r2,r2,3
1000b92c:	2026d77a 	srli	r19,r4,29
1000b930:	202090fa 	slli	r16,r4,3
1000b934:	a53f0044 	addi	r20,r20,-1023
1000b938:	14e6b03a 	or	r19,r2,r19
1000b93c:	002b883a 	mov	r21,zero
1000b940:	0013883a 	mov	r9,zero
1000b944:	3804d53a 	srli	r2,r7,20
1000b948:	382ed7fa 	srli	r23,r7,31
1000b94c:	04400434 	movhi	r17,16
1000b950:	8c7fffc4 	addi	r17,r17,-1
1000b954:	1081ffcc 	andi	r2,r2,2047
1000b958:	3025883a 	mov	r18,r6
1000b95c:	3c62703a 	and	r17,r7,r17
1000b960:	ba803fcc 	andi	r10,r23,255
1000b964:	10007326 	beq	r2,zero,1000bb34 <__divdf3+0x26c>
1000b968:	0101ffc4 	movi	r4,2047
1000b96c:	11006b26 	beq	r2,r4,1000bb1c <__divdf3+0x254>
1000b970:	89000434 	orhi	r4,r17,16
1000b974:	200890fa 	slli	r4,r4,3
1000b978:	3022d77a 	srli	r17,r6,29
1000b97c:	302490fa 	slli	r18,r6,3
1000b980:	10bf0044 	addi	r2,r2,-1023
1000b984:	2462b03a 	or	r17,r4,r17
1000b988:	000f883a 	mov	r7,zero
1000b98c:	b5caf03a 	xor	r5,r22,r23
1000b990:	3d48b03a 	or	r4,r7,r21
1000b994:	00c003c4 	movi	r3,15
1000b998:	2811883a 	mov	r8,r5
1000b99c:	2d403fcc 	andi	r21,r5,255
1000b9a0:	19009436 	bltu	r3,r4,1000bbf4 <__divdf3+0x32c>
1000b9a4:	2109883a 	add	r4,r4,r4
1000b9a8:	00c40074 	movhi	r3,4097
1000b9ac:	18ee7004 	addi	r3,r3,-17984
1000b9b0:	2109883a 	add	r4,r4,r4
1000b9b4:	20c9883a 	add	r4,r4,r3
1000b9b8:	20c00017 	ldw	r3,0(r4)
1000b9bc:	1800683a 	jmp	r3
1000b9c0:	1000bbf4 	orhi	zero,r2,751
1000b9c4:	1000ba5c 	xori	zero,r2,745
1000b9c8:	1000bbe4 	muli	zero,r2,751
1000b9cc:	1000ba2c 	andhi	zero,r2,744
1000b9d0:	1000bbe4 	muli	zero,r2,751
1000b9d4:	1000bbcc 	andi	zero,r2,751
1000b9d8:	1000bbe4 	muli	zero,r2,751
1000b9dc:	1000ba2c 	andhi	zero,r2,744
1000b9e0:	1000ba5c 	xori	zero,r2,745
1000b9e4:	1000ba5c 	xori	zero,r2,745
1000b9e8:	1000bbcc 	andi	zero,r2,751
1000b9ec:	1000ba2c 	andhi	zero,r2,744
1000b9f0:	1000ba1c 	xori	zero,r2,744
1000b9f4:	1000ba1c 	xori	zero,r2,744
1000b9f8:	1000ba1c 	xori	zero,r2,744
1000b9fc:	1000bf84 	addi	zero,r2,766
1000ba00:	9904b03a 	or	r2,r19,r4
1000ba04:	10006e1e 	bne	r2,zero,1000bbc0 <__divdf3+0x2f8>
1000ba08:	05400204 	movi	r21,8
1000ba0c:	0027883a 	mov	r19,zero
1000ba10:	0021883a 	mov	r16,zero
1000ba14:	02400084 	movi	r9,2
1000ba18:	003fca06 	br	1000b944 <__alt_data_end+0xf800b944>
1000ba1c:	9823883a 	mov	r17,r19
1000ba20:	8025883a 	mov	r18,r16
1000ba24:	e015883a 	mov	r10,fp
1000ba28:	480f883a 	mov	r7,r9
1000ba2c:	00800084 	movi	r2,2
1000ba30:	38800926 	beq	r7,r2,1000ba58 <__divdf3+0x190>
1000ba34:	008000c4 	movi	r2,3
1000ba38:	38820226 	beq	r7,r2,1000c244 <__divdf3+0x97c>
1000ba3c:	00800044 	movi	r2,1
1000ba40:	3881b81e 	bne	r7,r2,1000c124 <__divdf3+0x85c>
1000ba44:	5011883a 	mov	r8,r10
1000ba48:	0005883a 	mov	r2,zero
1000ba4c:	0027883a 	mov	r19,zero
1000ba50:	0021883a 	mov	r16,zero
1000ba54:	00000506 	br	1000ba6c <__divdf3+0x1a4>
1000ba58:	502b883a 	mov	r21,r10
1000ba5c:	aa00004c 	andi	r8,r21,1
1000ba60:	0081ffc4 	movi	r2,2047
1000ba64:	0027883a 	mov	r19,zero
1000ba68:	0021883a 	mov	r16,zero
1000ba6c:	1004953a 	slli	r2,r2,20
1000ba70:	42003fcc 	andi	r8,r8,255
1000ba74:	401097fa 	slli	r8,r8,31
1000ba78:	00c00434 	movhi	r3,16
1000ba7c:	18ffffc4 	addi	r3,r3,-1
1000ba80:	98e6703a 	and	r19,r19,r3
1000ba84:	9886b03a 	or	r3,r19,r2
1000ba88:	1a06b03a 	or	r3,r3,r8
1000ba8c:	8005883a 	mov	r2,r16
1000ba90:	dfc00f17 	ldw	ra,60(sp)
1000ba94:	df000e17 	ldw	fp,56(sp)
1000ba98:	ddc00d17 	ldw	r23,52(sp)
1000ba9c:	dd800c17 	ldw	r22,48(sp)
1000baa0:	dd400b17 	ldw	r21,44(sp)
1000baa4:	dd000a17 	ldw	r20,40(sp)
1000baa8:	dcc00917 	ldw	r19,36(sp)
1000baac:	dc800817 	ldw	r18,32(sp)
1000bab0:	dc400717 	ldw	r17,28(sp)
1000bab4:	dc000617 	ldw	r16,24(sp)
1000bab8:	dec01004 	addi	sp,sp,64
1000babc:	f800283a 	ret
1000bac0:	9904b03a 	or	r2,r19,r4
1000bac4:	10003926 	beq	r2,zero,1000bbac <__divdf3+0x2e4>
1000bac8:	98015326 	beq	r19,zero,1000c018 <__divdf3+0x750>
1000bacc:	9809883a 	mov	r4,r19
1000bad0:	d9800215 	stw	r6,8(sp)
1000bad4:	d9c00515 	stw	r7,20(sp)
1000bad8:	000d7240 	call	1000d724 <__clzsi2>
1000badc:	d9800217 	ldw	r6,8(sp)
1000bae0:	d9c00517 	ldw	r7,20(sp)
1000bae4:	00c009c4 	movi	r3,39
1000bae8:	18814716 	blt	r3,r2,1000c008 <__divdf3+0x740>
1000baec:	01400a04 	movi	r5,40
1000baf0:	143ffe04 	addi	r16,r2,-8
1000baf4:	288bc83a 	sub	r5,r5,r2
1000baf8:	9c26983a 	sll	r19,r19,r16
1000bafc:	914ad83a 	srl	r5,r18,r5
1000bb00:	9420983a 	sll	r16,r18,r16
1000bb04:	2ce6b03a 	or	r19,r5,r19
1000bb08:	053f0344 	movi	r20,-1011
1000bb0c:	a0a9c83a 	sub	r20,r20,r2
1000bb10:	002b883a 	mov	r21,zero
1000bb14:	0013883a 	mov	r9,zero
1000bb18:	003f8a06 	br	1000b944 <__alt_data_end+0xf800b944>
1000bb1c:	8988b03a 	or	r4,r17,r6
1000bb20:	2000201e 	bne	r4,zero,1000bba4 <__divdf3+0x2dc>
1000bb24:	0023883a 	mov	r17,zero
1000bb28:	0025883a 	mov	r18,zero
1000bb2c:	01c00084 	movi	r7,2
1000bb30:	003f9606 	br	1000b98c <__alt_data_end+0xf800b98c>
1000bb34:	8988b03a 	or	r4,r17,r6
1000bb38:	20001626 	beq	r4,zero,1000bb94 <__divdf3+0x2cc>
1000bb3c:	88012826 	beq	r17,zero,1000bfe0 <__divdf3+0x718>
1000bb40:	8809883a 	mov	r4,r17
1000bb44:	d9800215 	stw	r6,8(sp)
1000bb48:	da400315 	stw	r9,12(sp)
1000bb4c:	da800415 	stw	r10,16(sp)
1000bb50:	000d7240 	call	1000d724 <__clzsi2>
1000bb54:	d9800217 	ldw	r6,8(sp)
1000bb58:	da400317 	ldw	r9,12(sp)
1000bb5c:	da800417 	ldw	r10,16(sp)
1000bb60:	010009c4 	movi	r4,39
1000bb64:	20811a16 	blt	r4,r2,1000bfd0 <__divdf3+0x708>
1000bb68:	01000a04 	movi	r4,40
1000bb6c:	14bffe04 	addi	r18,r2,-8
1000bb70:	2089c83a 	sub	r4,r4,r2
1000bb74:	8ca2983a 	sll	r17,r17,r18
1000bb78:	3108d83a 	srl	r4,r6,r4
1000bb7c:	34a4983a 	sll	r18,r6,r18
1000bb80:	2462b03a 	or	r17,r4,r17
1000bb84:	013f0344 	movi	r4,-1011
1000bb88:	2085c83a 	sub	r2,r4,r2
1000bb8c:	000f883a 	mov	r7,zero
1000bb90:	003f7e06 	br	1000b98c <__alt_data_end+0xf800b98c>
1000bb94:	0023883a 	mov	r17,zero
1000bb98:	0025883a 	mov	r18,zero
1000bb9c:	01c00044 	movi	r7,1
1000bba0:	003f7a06 	br	1000b98c <__alt_data_end+0xf800b98c>
1000bba4:	01c000c4 	movi	r7,3
1000bba8:	003f7806 	br	1000b98c <__alt_data_end+0xf800b98c>
1000bbac:	05400104 	movi	r21,4
1000bbb0:	0027883a 	mov	r19,zero
1000bbb4:	0021883a 	mov	r16,zero
1000bbb8:	02400044 	movi	r9,1
1000bbbc:	003f6106 	br	1000b944 <__alt_data_end+0xf800b944>
1000bbc0:	05400304 	movi	r21,12
1000bbc4:	024000c4 	movi	r9,3
1000bbc8:	003f5e06 	br	1000b944 <__alt_data_end+0xf800b944>
1000bbcc:	0011883a 	mov	r8,zero
1000bbd0:	04c00434 	movhi	r19,16
1000bbd4:	9cffffc4 	addi	r19,r19,-1
1000bbd8:	043fffc4 	movi	r16,-1
1000bbdc:	0081ffc4 	movi	r2,2047
1000bbe0:	003fa206 	br	1000ba6c <__alt_data_end+0xf800ba6c>
1000bbe4:	0005883a 	mov	r2,zero
1000bbe8:	0027883a 	mov	r19,zero
1000bbec:	0021883a 	mov	r16,zero
1000bbf0:	003f9e06 	br	1000ba6c <__alt_data_end+0xf800ba6c>
1000bbf4:	a085c83a 	sub	r2,r20,r2
1000bbf8:	d8800115 	stw	r2,4(sp)
1000bbfc:	8cc11b36 	bltu	r17,r19,1000c06c <__divdf3+0x7a4>
1000bc00:	9c411926 	beq	r19,r17,1000c068 <__divdf3+0x7a0>
1000bc04:	d8c00117 	ldw	r3,4(sp)
1000bc08:	002d883a 	mov	r22,zero
1000bc0c:	18ffffc4 	addi	r3,r3,-1
1000bc10:	d8c00115 	stw	r3,4(sp)
1000bc14:	9006d63a 	srli	r3,r18,24
1000bc18:	8822923a 	slli	r17,r17,8
1000bc1c:	9024923a 	slli	r18,r18,8
1000bc20:	9809883a 	mov	r4,r19
1000bc24:	1c6eb03a 	or	r23,r3,r17
1000bc28:	b828d43a 	srli	r20,r23,16
1000bc2c:	dc800015 	stw	r18,0(sp)
1000bc30:	bcbfffcc 	andi	r18,r23,65535
1000bc34:	a00b883a 	mov	r5,r20
1000bc38:	000b0140 	call	1000b014 <__udivsi3>
1000bc3c:	1009883a 	mov	r4,r2
1000bc40:	900b883a 	mov	r5,r18
1000bc44:	1039883a 	mov	fp,r2
1000bc48:	000b0240 	call	1000b024 <__mulsi3>
1000bc4c:	9809883a 	mov	r4,r19
1000bc50:	a00b883a 	mov	r5,r20
1000bc54:	1023883a 	mov	r17,r2
1000bc58:	000b01c0 	call	1000b01c <__umodsi3>
1000bc5c:	1004943a 	slli	r2,r2,16
1000bc60:	8008d43a 	srli	r4,r16,16
1000bc64:	110ab03a 	or	r5,r2,r4
1000bc68:	2c40062e 	bgeu	r5,r17,1000bc84 <__divdf3+0x3bc>
1000bc6c:	2dcb883a 	add	r5,r5,r23
1000bc70:	e0bfffc4 	addi	r2,fp,-1
1000bc74:	2dc11136 	bltu	r5,r23,1000c0bc <__divdf3+0x7f4>
1000bc78:	2c41102e 	bgeu	r5,r17,1000c0bc <__divdf3+0x7f4>
1000bc7c:	e73fff84 	addi	fp,fp,-2
1000bc80:	2dcb883a 	add	r5,r5,r23
1000bc84:	2c67c83a 	sub	r19,r5,r17
1000bc88:	9809883a 	mov	r4,r19
1000bc8c:	a00b883a 	mov	r5,r20
1000bc90:	000b0140 	call	1000b014 <__udivsi3>
1000bc94:	1009883a 	mov	r4,r2
1000bc98:	900b883a 	mov	r5,r18
1000bc9c:	1023883a 	mov	r17,r2
1000bca0:	000b0240 	call	1000b024 <__mulsi3>
1000bca4:	9809883a 	mov	r4,r19
1000bca8:	a00b883a 	mov	r5,r20
1000bcac:	d8800215 	stw	r2,8(sp)
1000bcb0:	000b01c0 	call	1000b01c <__umodsi3>
1000bcb4:	1004943a 	slli	r2,r2,16
1000bcb8:	da000217 	ldw	r8,8(sp)
1000bcbc:	843fffcc 	andi	r16,r16,65535
1000bcc0:	140eb03a 	or	r7,r2,r16
1000bcc4:	3a00062e 	bgeu	r7,r8,1000bce0 <__divdf3+0x418>
1000bcc8:	3dcf883a 	add	r7,r7,r23
1000bccc:	88bfffc4 	addi	r2,r17,-1
1000bcd0:	3dc0f836 	bltu	r7,r23,1000c0b4 <__divdf3+0x7ec>
1000bcd4:	3a00f72e 	bgeu	r7,r8,1000c0b4 <__divdf3+0x7ec>
1000bcd8:	8c7fff84 	addi	r17,r17,-2
1000bcdc:	3dcf883a 	add	r7,r7,r23
1000bce0:	e004943a 	slli	r2,fp,16
1000bce4:	d8c00017 	ldw	r3,0(sp)
1000bce8:	3a0fc83a 	sub	r7,r7,r8
1000bcec:	88a2b03a 	or	r17,r17,r2
1000bcf0:	1f3fffcc 	andi	fp,r3,65535
1000bcf4:	8a7fffcc 	andi	r9,r17,65535
1000bcf8:	4809883a 	mov	r4,r9
1000bcfc:	e00b883a 	mov	r5,fp
1000bd00:	1826d43a 	srli	r19,r3,16
1000bd04:	d9c00515 	stw	r7,20(sp)
1000bd08:	da400315 	stw	r9,12(sp)
1000bd0c:	000b0240 	call	1000b024 <__mulsi3>
1000bd10:	da400317 	ldw	r9,12(sp)
1000bd14:	8820d43a 	srli	r16,r17,16
1000bd18:	980b883a 	mov	r5,r19
1000bd1c:	4809883a 	mov	r4,r9
1000bd20:	d8800215 	stw	r2,8(sp)
1000bd24:	000b0240 	call	1000b024 <__mulsi3>
1000bd28:	8009883a 	mov	r4,r16
1000bd2c:	e00b883a 	mov	r5,fp
1000bd30:	d8800415 	stw	r2,16(sp)
1000bd34:	000b0240 	call	1000b024 <__mulsi3>
1000bd38:	8009883a 	mov	r4,r16
1000bd3c:	980b883a 	mov	r5,r19
1000bd40:	d8800315 	stw	r2,12(sp)
1000bd44:	000b0240 	call	1000b024 <__mulsi3>
1000bd48:	da000217 	ldw	r8,8(sp)
1000bd4c:	da400317 	ldw	r9,12(sp)
1000bd50:	da800417 	ldw	r10,16(sp)
1000bd54:	100b883a 	mov	r5,r2
1000bd58:	4004d43a 	srli	r2,r8,16
1000bd5c:	4a89883a 	add	r4,r9,r10
1000bd60:	d9c00517 	ldw	r7,20(sp)
1000bd64:	2089883a 	add	r4,r4,r2
1000bd68:	2240022e 	bgeu	r4,r9,1000bd74 <__divdf3+0x4ac>
1000bd6c:	00800074 	movhi	r2,1
1000bd70:	288b883a 	add	r5,r5,r2
1000bd74:	2004d43a 	srli	r2,r4,16
1000bd78:	2020943a 	slli	r16,r4,16
1000bd7c:	423fffcc 	andi	r8,r8,65535
1000bd80:	288b883a 	add	r5,r5,r2
1000bd84:	8221883a 	add	r16,r16,r8
1000bd88:	3940ab36 	bltu	r7,r5,1000c038 <__divdf3+0x770>
1000bd8c:	3940a926 	beq	r7,r5,1000c034 <__divdf3+0x76c>
1000bd90:	394bc83a 	sub	r5,r7,r5
1000bd94:	b421c83a 	sub	r16,r22,r16
1000bd98:	b42d803a 	cmpltu	r22,r22,r16
1000bd9c:	2dadc83a 	sub	r22,r5,r22
1000bda0:	b5c0da26 	beq	r22,r23,1000c10c <__divdf3+0x844>
1000bda4:	b009883a 	mov	r4,r22
1000bda8:	a00b883a 	mov	r5,r20
1000bdac:	000b0140 	call	1000b014 <__udivsi3>
1000bdb0:	1009883a 	mov	r4,r2
1000bdb4:	900b883a 	mov	r5,r18
1000bdb8:	d8800215 	stw	r2,8(sp)
1000bdbc:	000b0240 	call	1000b024 <__mulsi3>
1000bdc0:	b009883a 	mov	r4,r22
1000bdc4:	a00b883a 	mov	r5,r20
1000bdc8:	d8800515 	stw	r2,20(sp)
1000bdcc:	000b01c0 	call	1000b01c <__umodsi3>
1000bdd0:	1004943a 	slli	r2,r2,16
1000bdd4:	8008d43a 	srli	r4,r16,16
1000bdd8:	d9c00517 	ldw	r7,20(sp)
1000bddc:	da000217 	ldw	r8,8(sp)
1000bde0:	110ab03a 	or	r5,r2,r4
1000bde4:	29c0062e 	bgeu	r5,r7,1000be00 <__divdf3+0x538>
1000bde8:	2dcb883a 	add	r5,r5,r23
1000bdec:	40bfffc4 	addi	r2,r8,-1
1000bdf0:	2dc0ca36 	bltu	r5,r23,1000c11c <__divdf3+0x854>
1000bdf4:	29c0c92e 	bgeu	r5,r7,1000c11c <__divdf3+0x854>
1000bdf8:	423fff84 	addi	r8,r8,-2
1000bdfc:	2dcb883a 	add	r5,r5,r23
1000be00:	29cfc83a 	sub	r7,r5,r7
1000be04:	3809883a 	mov	r4,r7
1000be08:	a00b883a 	mov	r5,r20
1000be0c:	da000215 	stw	r8,8(sp)
1000be10:	d9c00515 	stw	r7,20(sp)
1000be14:	000b0140 	call	1000b014 <__udivsi3>
1000be18:	900b883a 	mov	r5,r18
1000be1c:	1009883a 	mov	r4,r2
1000be20:	102d883a 	mov	r22,r2
1000be24:	000b0240 	call	1000b024 <__mulsi3>
1000be28:	d9c00517 	ldw	r7,20(sp)
1000be2c:	a00b883a 	mov	r5,r20
1000be30:	1025883a 	mov	r18,r2
1000be34:	3809883a 	mov	r4,r7
1000be38:	000b01c0 	call	1000b01c <__umodsi3>
1000be3c:	1004943a 	slli	r2,r2,16
1000be40:	843fffcc 	andi	r16,r16,65535
1000be44:	da000217 	ldw	r8,8(sp)
1000be48:	140eb03a 	or	r7,r2,r16
1000be4c:	3c80062e 	bgeu	r7,r18,1000be68 <__divdf3+0x5a0>
1000be50:	3dcf883a 	add	r7,r7,r23
1000be54:	b0bfffc4 	addi	r2,r22,-1
1000be58:	3dc0ae36 	bltu	r7,r23,1000c114 <__divdf3+0x84c>
1000be5c:	3c80ad2e 	bgeu	r7,r18,1000c114 <__divdf3+0x84c>
1000be60:	b5bfff84 	addi	r22,r22,-2
1000be64:	3dcf883a 	add	r7,r7,r23
1000be68:	4010943a 	slli	r8,r8,16
1000be6c:	3ca9c83a 	sub	r20,r7,r18
1000be70:	e00b883a 	mov	r5,fp
1000be74:	b224b03a 	or	r18,r22,r8
1000be78:	91ffffcc 	andi	r7,r18,65535
1000be7c:	3809883a 	mov	r4,r7
1000be80:	d9c00515 	stw	r7,20(sp)
1000be84:	000b0240 	call	1000b024 <__mulsi3>
1000be88:	d9c00517 	ldw	r7,20(sp)
1000be8c:	9020d43a 	srli	r16,r18,16
1000be90:	980b883a 	mov	r5,r19
1000be94:	3809883a 	mov	r4,r7
1000be98:	102d883a 	mov	r22,r2
1000be9c:	000b0240 	call	1000b024 <__mulsi3>
1000bea0:	e00b883a 	mov	r5,fp
1000bea4:	8009883a 	mov	r4,r16
1000bea8:	d8800515 	stw	r2,20(sp)
1000beac:	000b0240 	call	1000b024 <__mulsi3>
1000beb0:	8009883a 	mov	r4,r16
1000beb4:	980b883a 	mov	r5,r19
1000beb8:	1039883a 	mov	fp,r2
1000bebc:	000b0240 	call	1000b024 <__mulsi3>
1000bec0:	d9c00517 	ldw	r7,20(sp)
1000bec4:	100b883a 	mov	r5,r2
1000bec8:	b004d43a 	srli	r2,r22,16
1000becc:	e1c9883a 	add	r4,fp,r7
1000bed0:	2089883a 	add	r4,r4,r2
1000bed4:	2700022e 	bgeu	r4,fp,1000bee0 <__divdf3+0x618>
1000bed8:	00800074 	movhi	r2,1
1000bedc:	288b883a 	add	r5,r5,r2
1000bee0:	2004d43a 	srli	r2,r4,16
1000bee4:	2008943a 	slli	r4,r4,16
1000bee8:	b5bfffcc 	andi	r22,r22,65535
1000beec:	288b883a 	add	r5,r5,r2
1000bef0:	25ad883a 	add	r22,r4,r22
1000bef4:	a140632e 	bgeu	r20,r5,1000c084 <__divdf3+0x7bc>
1000bef8:	a5e9883a 	add	r20,r20,r23
1000befc:	90bfffc4 	addi	r2,r18,-1
1000bf00:	a5c0702e 	bgeu	r20,r23,1000c0c4 <__divdf3+0x7fc>
1000bf04:	1025883a 	mov	r18,r2
1000bf08:	a1406126 	beq	r20,r5,1000c090 <__divdf3+0x7c8>
1000bf0c:	94800054 	ori	r18,r18,1
1000bf10:	d8c00117 	ldw	r3,4(sp)
1000bf14:	1880ffc4 	addi	r2,r3,1023
1000bf18:	0080720e 	bge	zero,r2,1000c0e4 <__divdf3+0x81c>
1000bf1c:	90c001cc 	andi	r3,r18,7
1000bf20:	18000726 	beq	r3,zero,1000bf40 <__divdf3+0x678>
1000bf24:	910003cc 	andi	r4,r18,15
1000bf28:	00c00104 	movi	r3,4
1000bf2c:	20c00426 	beq	r4,r3,1000bf40 <__divdf3+0x678>
1000bf30:	90c7883a 	add	r3,r18,r3
1000bf34:	1ca5803a 	cmpltu	r18,r3,r18
1000bf38:	8ca3883a 	add	r17,r17,r18
1000bf3c:	1825883a 	mov	r18,r3
1000bf40:	88c0402c 	andhi	r3,r17,256
1000bf44:	18000526 	beq	r3,zero,1000bf5c <__divdf3+0x694>
1000bf48:	d8c00117 	ldw	r3,4(sp)
1000bf4c:	00bfc034 	movhi	r2,65280
1000bf50:	10bfffc4 	addi	r2,r2,-1
1000bf54:	88a2703a 	and	r17,r17,r2
1000bf58:	18810004 	addi	r2,r3,1024
1000bf5c:	00c1ff84 	movi	r3,2046
1000bf60:	18bebe16 	blt	r3,r2,1000ba5c <__alt_data_end+0xf800ba5c>
1000bf64:	8820977a 	slli	r16,r17,29
1000bf68:	9024d0fa 	srli	r18,r18,3
1000bf6c:	8822927a 	slli	r17,r17,9
1000bf70:	1081ffcc 	andi	r2,r2,2047
1000bf74:	84a0b03a 	or	r16,r16,r18
1000bf78:	8826d33a 	srli	r19,r17,12
1000bf7c:	aa00004c 	andi	r8,r21,1
1000bf80:	003eba06 	br	1000ba6c <__alt_data_end+0xf800ba6c>
1000bf84:	9880022c 	andhi	r2,r19,8
1000bf88:	10000a26 	beq	r2,zero,1000bfb4 <__divdf3+0x6ec>
1000bf8c:	8880022c 	andhi	r2,r17,8
1000bf90:	1000081e 	bne	r2,zero,1000bfb4 <__divdf3+0x6ec>
1000bf94:	00800434 	movhi	r2,16
1000bf98:	10bfffc4 	addi	r2,r2,-1
1000bf9c:	8cc00234 	orhi	r19,r17,8
1000bfa0:	98a6703a 	and	r19,r19,r2
1000bfa4:	b811883a 	mov	r8,r23
1000bfa8:	9021883a 	mov	r16,r18
1000bfac:	0081ffc4 	movi	r2,2047
1000bfb0:	003eae06 	br	1000ba6c <__alt_data_end+0xf800ba6c>
1000bfb4:	00800434 	movhi	r2,16
1000bfb8:	10bfffc4 	addi	r2,r2,-1
1000bfbc:	9cc00234 	orhi	r19,r19,8
1000bfc0:	98a6703a 	and	r19,r19,r2
1000bfc4:	b011883a 	mov	r8,r22
1000bfc8:	0081ffc4 	movi	r2,2047
1000bfcc:	003ea706 	br	1000ba6c <__alt_data_end+0xf800ba6c>
1000bfd0:	147ff604 	addi	r17,r2,-40
1000bfd4:	3462983a 	sll	r17,r6,r17
1000bfd8:	0025883a 	mov	r18,zero
1000bfdc:	003ee906 	br	1000bb84 <__alt_data_end+0xf800bb84>
1000bfe0:	3009883a 	mov	r4,r6
1000bfe4:	d9800215 	stw	r6,8(sp)
1000bfe8:	da400315 	stw	r9,12(sp)
1000bfec:	da800415 	stw	r10,16(sp)
1000bff0:	000d7240 	call	1000d724 <__clzsi2>
1000bff4:	10800804 	addi	r2,r2,32
1000bff8:	da800417 	ldw	r10,16(sp)
1000bffc:	da400317 	ldw	r9,12(sp)
1000c000:	d9800217 	ldw	r6,8(sp)
1000c004:	003ed606 	br	1000bb60 <__alt_data_end+0xf800bb60>
1000c008:	14fff604 	addi	r19,r2,-40
1000c00c:	94e6983a 	sll	r19,r18,r19
1000c010:	0021883a 	mov	r16,zero
1000c014:	003ebc06 	br	1000bb08 <__alt_data_end+0xf800bb08>
1000c018:	d9800215 	stw	r6,8(sp)
1000c01c:	d9c00515 	stw	r7,20(sp)
1000c020:	000d7240 	call	1000d724 <__clzsi2>
1000c024:	10800804 	addi	r2,r2,32
1000c028:	d9c00517 	ldw	r7,20(sp)
1000c02c:	d9800217 	ldw	r6,8(sp)
1000c030:	003eac06 	br	1000bae4 <__alt_data_end+0xf800bae4>
1000c034:	b400292e 	bgeu	r22,r16,1000c0dc <__divdf3+0x814>
1000c038:	d8c00017 	ldw	r3,0(sp)
1000c03c:	b0ed883a 	add	r22,r22,r3
1000c040:	b0c5803a 	cmpltu	r2,r22,r3
1000c044:	15c5883a 	add	r2,r2,r23
1000c048:	11cf883a 	add	r7,r2,r7
1000c04c:	88bfffc4 	addi	r2,r17,-1
1000c050:	b9c0122e 	bgeu	r23,r7,1000c09c <__divdf3+0x7d4>
1000c054:	39405036 	bltu	r7,r5,1000c198 <__divdf3+0x8d0>
1000c058:	29c01e26 	beq	r5,r7,1000c0d4 <__divdf3+0x80c>
1000c05c:	394bc83a 	sub	r5,r7,r5
1000c060:	1023883a 	mov	r17,r2
1000c064:	003f4b06 	br	1000bd94 <__alt_data_end+0xf800bd94>
1000c068:	943ee62e 	bgeu	r18,r16,1000bc04 <__alt_data_end+0xf800bc04>
1000c06c:	980497fa 	slli	r2,r19,31
1000c070:	8006d07a 	srli	r3,r16,1
1000c074:	802c97fa 	slli	r22,r16,31
1000c078:	9826d07a 	srli	r19,r19,1
1000c07c:	18a0b03a 	or	r16,r3,r2
1000c080:	003ee406 	br	1000bc14 <__alt_data_end+0xf800bc14>
1000c084:	a17fa11e 	bne	r20,r5,1000bf0c <__alt_data_end+0xf800bf0c>
1000c088:	b03f9b1e 	bne	r22,zero,1000bef8 <__alt_data_end+0xf800bef8>
1000c08c:	d8000015 	stw	zero,0(sp)
1000c090:	d8c00017 	ldw	r3,0(sp)
1000c094:	1dbf9d1e 	bne	r3,r22,1000bf0c <__alt_data_end+0xf800bf0c>
1000c098:	003f9d06 	br	1000bf10 <__alt_data_end+0xf800bf10>
1000c09c:	3dffef1e 	bne	r7,r23,1000c05c <__alt_data_end+0xf800c05c>
1000c0a0:	d8c00017 	ldw	r3,0(sp)
1000c0a4:	b0ffeb2e 	bgeu	r22,r3,1000c054 <__alt_data_end+0xf800c054>
1000c0a8:	b94bc83a 	sub	r5,r23,r5
1000c0ac:	1023883a 	mov	r17,r2
1000c0b0:	003f3806 	br	1000bd94 <__alt_data_end+0xf800bd94>
1000c0b4:	1023883a 	mov	r17,r2
1000c0b8:	003f0906 	br	1000bce0 <__alt_data_end+0xf800bce0>
1000c0bc:	1039883a 	mov	fp,r2
1000c0c0:	003ef006 	br	1000bc84 <__alt_data_end+0xf800bc84>
1000c0c4:	a1403b36 	bltu	r20,r5,1000c1b4 <__divdf3+0x8ec>
1000c0c8:	2d005826 	beq	r5,r20,1000c22c <__divdf3+0x964>
1000c0cc:	1025883a 	mov	r18,r2
1000c0d0:	003f8e06 	br	1000bf0c <__alt_data_end+0xf800bf0c>
1000c0d4:	b4003036 	bltu	r22,r16,1000c198 <__divdf3+0x8d0>
1000c0d8:	1023883a 	mov	r17,r2
1000c0dc:	000b883a 	mov	r5,zero
1000c0e0:	003f2c06 	br	1000bd94 <__alt_data_end+0xf800bd94>
1000c0e4:	d8c00117 	ldw	r3,4(sp)
1000c0e8:	00bf0084 	movi	r2,-1022
1000c0ec:	10c5c83a 	sub	r2,r2,r3
1000c0f0:	00c00e04 	movi	r3,56
1000c0f4:	18800d0e 	bge	r3,r2,1000c12c <__divdf3+0x864>
1000c0f8:	aa00004c 	andi	r8,r21,1
1000c0fc:	0005883a 	mov	r2,zero
1000c100:	0027883a 	mov	r19,zero
1000c104:	0021883a 	mov	r16,zero
1000c108:	003e5806 	br	1000ba6c <__alt_data_end+0xf800ba6c>
1000c10c:	04bfffc4 	movi	r18,-1
1000c110:	003f7f06 	br	1000bf10 <__alt_data_end+0xf800bf10>
1000c114:	102d883a 	mov	r22,r2
1000c118:	003f5306 	br	1000be68 <__alt_data_end+0xf800be68>
1000c11c:	1011883a 	mov	r8,r2
1000c120:	003f3706 	br	1000be00 <__alt_data_end+0xf800be00>
1000c124:	502b883a 	mov	r21,r10
1000c128:	003f7906 	br	1000bf10 <__alt_data_end+0xf800bf10>
1000c12c:	00c007c4 	movi	r3,31
1000c130:	18802816 	blt	r3,r2,1000c1d4 <__divdf3+0x90c>
1000c134:	d9000117 	ldw	r4,4(sp)
1000c138:	908ad83a 	srl	r5,r18,r2
1000c13c:	8884d83a 	srl	r2,r17,r2
1000c140:	20c10784 	addi	r3,r4,1054
1000c144:	88c8983a 	sll	r4,r17,r3
1000c148:	90c6983a 	sll	r3,r18,r3
1000c14c:	2908b03a 	or	r4,r5,r4
1000c150:	1806c03a 	cmpne	r3,r3,zero
1000c154:	20c6b03a 	or	r3,r4,r3
1000c158:	190001cc 	andi	r4,r3,7
1000c15c:	20000726 	beq	r4,zero,1000c17c <__divdf3+0x8b4>
1000c160:	194003cc 	andi	r5,r3,15
1000c164:	01000104 	movi	r4,4
1000c168:	29000426 	beq	r5,r4,1000c17c <__divdf3+0x8b4>
1000c16c:	1909883a 	add	r4,r3,r4
1000c170:	20c7803a 	cmpltu	r3,r4,r3
1000c174:	10c5883a 	add	r2,r2,r3
1000c178:	2007883a 	mov	r3,r4
1000c17c:	1100202c 	andhi	r4,r2,128
1000c180:	20002226 	beq	r4,zero,1000c20c <__divdf3+0x944>
1000c184:	aa00004c 	andi	r8,r21,1
1000c188:	00800044 	movi	r2,1
1000c18c:	0027883a 	mov	r19,zero
1000c190:	0021883a 	mov	r16,zero
1000c194:	003e3506 	br	1000ba6c <__alt_data_end+0xf800ba6c>
1000c198:	d8c00017 	ldw	r3,0(sp)
1000c19c:	8c7fff84 	addi	r17,r17,-2
1000c1a0:	b0ed883a 	add	r22,r22,r3
1000c1a4:	b0c5803a 	cmpltu	r2,r22,r3
1000c1a8:	15c5883a 	add	r2,r2,r23
1000c1ac:	11cf883a 	add	r7,r2,r7
1000c1b0:	003ef706 	br	1000bd90 <__alt_data_end+0xf800bd90>
1000c1b4:	d8c00017 	ldw	r3,0(sp)
1000c1b8:	18c9883a 	add	r4,r3,r3
1000c1bc:	20c5803a 	cmpltu	r2,r4,r3
1000c1c0:	15c7883a 	add	r3,r2,r23
1000c1c4:	a0e9883a 	add	r20,r20,r3
1000c1c8:	90bfff84 	addi	r2,r18,-2
1000c1cc:	d9000015 	stw	r4,0(sp)
1000c1d0:	003f4c06 	br	1000bf04 <__alt_data_end+0xf800bf04>
1000c1d4:	d9000117 	ldw	r4,4(sp)
1000c1d8:	00fef884 	movi	r3,-1054
1000c1dc:	1907c83a 	sub	r3,r3,r4
1000c1e0:	01000804 	movi	r4,32
1000c1e4:	88c6d83a 	srl	r3,r17,r3
1000c1e8:	11001426 	beq	r2,r4,1000c23c <__divdf3+0x974>
1000c1ec:	d9000117 	ldw	r4,4(sp)
1000c1f0:	20810f84 	addi	r2,r4,1086
1000c1f4:	8884983a 	sll	r2,r17,r2
1000c1f8:	1484b03a 	or	r2,r2,r18
1000c1fc:	1004c03a 	cmpne	r2,r2,zero
1000c200:	10c6b03a 	or	r3,r2,r3
1000c204:	0005883a 	mov	r2,zero
1000c208:	003fd306 	br	1000c158 <__alt_data_end+0xf800c158>
1000c20c:	1020977a 	slli	r16,r2,29
1000c210:	1806d0fa 	srli	r3,r3,3
1000c214:	1004927a 	slli	r2,r2,9
1000c218:	aa00004c 	andi	r8,r21,1
1000c21c:	80e0b03a 	or	r16,r16,r3
1000c220:	1026d33a 	srli	r19,r2,12
1000c224:	0005883a 	mov	r2,zero
1000c228:	003e1006 	br	1000ba6c <__alt_data_end+0xf800ba6c>
1000c22c:	d8c00017 	ldw	r3,0(sp)
1000c230:	1dbfe036 	bltu	r3,r22,1000c1b4 <__alt_data_end+0xf800c1b4>
1000c234:	1025883a 	mov	r18,r2
1000c238:	003f9506 	br	1000c090 <__alt_data_end+0xf800c090>
1000c23c:	0005883a 	mov	r2,zero
1000c240:	003fed06 	br	1000c1f8 <__alt_data_end+0xf800c1f8>
1000c244:	00800434 	movhi	r2,16
1000c248:	10bfffc4 	addi	r2,r2,-1
1000c24c:	8cc00234 	orhi	r19,r17,8
1000c250:	98a6703a 	and	r19,r19,r2
1000c254:	5011883a 	mov	r8,r10
1000c258:	9021883a 	mov	r16,r18
1000c25c:	0081ffc4 	movi	r2,2047
1000c260:	003e0206 	br	1000ba6c <__alt_data_end+0xf800ba6c>

1000c264 <__eqdf2>:
1000c264:	2806d53a 	srli	r3,r5,20
1000c268:	3810d53a 	srli	r8,r7,20
1000c26c:	00800434 	movhi	r2,16
1000c270:	10bfffc4 	addi	r2,r2,-1
1000c274:	18c1ffcc 	andi	r3,r3,2047
1000c278:	0241ffc4 	movi	r9,2047
1000c27c:	2894703a 	and	r10,r5,r2
1000c280:	4201ffcc 	andi	r8,r8,2047
1000c284:	3884703a 	and	r2,r7,r2
1000c288:	280ad7fa 	srli	r5,r5,31
1000c28c:	380ed7fa 	srli	r7,r7,31
1000c290:	1a400f26 	beq	r3,r9,1000c2d0 <__eqdf2+0x6c>
1000c294:	0241ffc4 	movi	r9,2047
1000c298:	42400326 	beq	r8,r9,1000c2a8 <__eqdf2+0x44>
1000c29c:	1a000526 	beq	r3,r8,1000c2b4 <__eqdf2+0x50>
1000c2a0:	00800044 	movi	r2,1
1000c2a4:	f800283a 	ret
1000c2a8:	1192b03a 	or	r9,r2,r6
1000c2ac:	483ffc1e 	bne	r9,zero,1000c2a0 <__alt_data_end+0xf800c2a0>
1000c2b0:	1a3ffb1e 	bne	r3,r8,1000c2a0 <__alt_data_end+0xf800c2a0>
1000c2b4:	50bffa1e 	bne	r10,r2,1000c2a0 <__alt_data_end+0xf800c2a0>
1000c2b8:	21bff91e 	bne	r4,r6,1000c2a0 <__alt_data_end+0xf800c2a0>
1000c2bc:	29c00826 	beq	r5,r7,1000c2e0 <__eqdf2+0x7c>
1000c2c0:	183ff71e 	bne	r3,zero,1000c2a0 <__alt_data_end+0xf800c2a0>
1000c2c4:	5104b03a 	or	r2,r10,r4
1000c2c8:	1004c03a 	cmpne	r2,r2,zero
1000c2cc:	f800283a 	ret
1000c2d0:	5112b03a 	or	r9,r10,r4
1000c2d4:	483fef26 	beq	r9,zero,1000c294 <__alt_data_end+0xf800c294>
1000c2d8:	00800044 	movi	r2,1
1000c2dc:	f800283a 	ret
1000c2e0:	0005883a 	mov	r2,zero
1000c2e4:	f800283a 	ret

1000c2e8 <__gedf2>:
1000c2e8:	2804d53a 	srli	r2,r5,20
1000c2ec:	3810d53a 	srli	r8,r7,20
1000c2f0:	00c00434 	movhi	r3,16
1000c2f4:	18ffffc4 	addi	r3,r3,-1
1000c2f8:	1081ffcc 	andi	r2,r2,2047
1000c2fc:	0241ffc4 	movi	r9,2047
1000c300:	28d4703a 	and	r10,r5,r3
1000c304:	4201ffcc 	andi	r8,r8,2047
1000c308:	38c6703a 	and	r3,r7,r3
1000c30c:	280ad7fa 	srli	r5,r5,31
1000c310:	380ed7fa 	srli	r7,r7,31
1000c314:	12401b26 	beq	r2,r9,1000c384 <__gedf2+0x9c>
1000c318:	0241ffc4 	movi	r9,2047
1000c31c:	42400926 	beq	r8,r9,1000c344 <__gedf2+0x5c>
1000c320:	10000c1e 	bne	r2,zero,1000c354 <__gedf2+0x6c>
1000c324:	5112b03a 	or	r9,r10,r4
1000c328:	4813003a 	cmpeq	r9,r9,zero
1000c32c:	4817883a 	mov	r11,r9
1000c330:	40000a26 	beq	r8,zero,1000c35c <__gedf2+0x74>
1000c334:	48001626 	beq	r9,zero,1000c390 <__gedf2+0xa8>
1000c338:	38000d1e 	bne	r7,zero,1000c370 <__gedf2+0x88>
1000c33c:	00bfffc4 	movi	r2,-1
1000c340:	f800283a 	ret
1000c344:	1992b03a 	or	r9,r3,r6
1000c348:	483ff526 	beq	r9,zero,1000c320 <__alt_data_end+0xf800c320>
1000c34c:	00bfff84 	movi	r2,-2
1000c350:	f800283a 	ret
1000c354:	40000e1e 	bne	r8,zero,1000c390 <__gedf2+0xa8>
1000c358:	0017883a 	mov	r11,zero
1000c35c:	1992b03a 	or	r9,r3,r6
1000c360:	4813003a 	cmpeq	r9,r9,zero
1000c364:	5800041e 	bne	r11,zero,1000c378 <__gedf2+0x90>
1000c368:	48000926 	beq	r9,zero,1000c390 <__gedf2+0xa8>
1000c36c:	283ff31e 	bne	r5,zero,1000c33c <__alt_data_end+0xf800c33c>
1000c370:	00800044 	movi	r2,1
1000c374:	f800283a 	ret
1000c378:	483fef26 	beq	r9,zero,1000c338 <__alt_data_end+0xf800c338>
1000c37c:	0005883a 	mov	r2,zero
1000c380:	f800283a 	ret
1000c384:	5112b03a 	or	r9,r10,r4
1000c388:	483fe326 	beq	r9,zero,1000c318 <__alt_data_end+0xf800c318>
1000c38c:	003fef06 	br	1000c34c <__alt_data_end+0xf800c34c>
1000c390:	29fff61e 	bne	r5,r7,1000c36c <__alt_data_end+0xf800c36c>
1000c394:	40bff516 	blt	r8,r2,1000c36c <__alt_data_end+0xf800c36c>
1000c398:	12000316 	blt	r2,r8,1000c3a8 <__gedf2+0xc0>
1000c39c:	1abff336 	bltu	r3,r10,1000c36c <__alt_data_end+0xf800c36c>
1000c3a0:	50c00326 	beq	r10,r3,1000c3b0 <__gedf2+0xc8>
1000c3a4:	50fff52e 	bgeu	r10,r3,1000c37c <__alt_data_end+0xf800c37c>
1000c3a8:	283fe426 	beq	r5,zero,1000c33c <__alt_data_end+0xf800c33c>
1000c3ac:	003ff006 	br	1000c370 <__alt_data_end+0xf800c370>
1000c3b0:	313fee36 	bltu	r6,r4,1000c36c <__alt_data_end+0xf800c36c>
1000c3b4:	21bff12e 	bgeu	r4,r6,1000c37c <__alt_data_end+0xf800c37c>
1000c3b8:	283fe026 	beq	r5,zero,1000c33c <__alt_data_end+0xf800c33c>
1000c3bc:	003fec06 	br	1000c370 <__alt_data_end+0xf800c370>

1000c3c0 <__ledf2>:
1000c3c0:	2806d53a 	srli	r3,r5,20
1000c3c4:	3810d53a 	srli	r8,r7,20
1000c3c8:	00800434 	movhi	r2,16
1000c3cc:	10bfffc4 	addi	r2,r2,-1
1000c3d0:	18c1ffcc 	andi	r3,r3,2047
1000c3d4:	0241ffc4 	movi	r9,2047
1000c3d8:	2894703a 	and	r10,r5,r2
1000c3dc:	4201ffcc 	andi	r8,r8,2047
1000c3e0:	3884703a 	and	r2,r7,r2
1000c3e4:	280ad7fa 	srli	r5,r5,31
1000c3e8:	380ed7fa 	srli	r7,r7,31
1000c3ec:	1a402026 	beq	r3,r9,1000c470 <__ledf2+0xb0>
1000c3f0:	0241ffc4 	movi	r9,2047
1000c3f4:	42401726 	beq	r8,r9,1000c454 <__ledf2+0x94>
1000c3f8:	18000b26 	beq	r3,zero,1000c428 <__ledf2+0x68>
1000c3fc:	29403fcc 	andi	r5,r5,255
1000c400:	39c03fcc 	andi	r7,r7,255
1000c404:	40000f1e 	bne	r8,zero,1000c444 <__ledf2+0x84>
1000c408:	0017883a 	mov	r11,zero
1000c40c:	1192b03a 	or	r9,r2,r6
1000c410:	4813003a 	cmpeq	r9,r9,zero
1000c414:	58001326 	beq	r11,zero,1000c464 <__ledf2+0xa4>
1000c418:	48001e1e 	bne	r9,zero,1000c494 <__ledf2+0xd4>
1000c41c:	38000b1e 	bne	r7,zero,1000c44c <__ledf2+0x8c>
1000c420:	00bfffc4 	movi	r2,-1
1000c424:	f800283a 	ret
1000c428:	5112b03a 	or	r9,r10,r4
1000c42c:	4813003a 	cmpeq	r9,r9,zero
1000c430:	4817883a 	mov	r11,r9
1000c434:	29403fcc 	andi	r5,r5,255
1000c438:	39c03fcc 	andi	r7,r7,255
1000c43c:	403ff326 	beq	r8,zero,1000c40c <__alt_data_end+0xf800c40c>
1000c440:	483ff61e 	bne	r9,zero,1000c41c <__alt_data_end+0xf800c41c>
1000c444:	29c00e26 	beq	r5,r7,1000c480 <__ledf2+0xc0>
1000c448:	283ff51e 	bne	r5,zero,1000c420 <__alt_data_end+0xf800c420>
1000c44c:	00800044 	movi	r2,1
1000c450:	f800283a 	ret
1000c454:	1192b03a 	or	r9,r2,r6
1000c458:	483fe726 	beq	r9,zero,1000c3f8 <__alt_data_end+0xf800c3f8>
1000c45c:	00800084 	movi	r2,2
1000c460:	f800283a 	ret
1000c464:	483ff726 	beq	r9,zero,1000c444 <__alt_data_end+0xf800c444>
1000c468:	283ff826 	beq	r5,zero,1000c44c <__alt_data_end+0xf800c44c>
1000c46c:	003fec06 	br	1000c420 <__alt_data_end+0xf800c420>
1000c470:	5112b03a 	or	r9,r10,r4
1000c474:	483fde26 	beq	r9,zero,1000c3f0 <__alt_data_end+0xf800c3f0>
1000c478:	00800084 	movi	r2,2
1000c47c:	f800283a 	ret
1000c480:	40fff116 	blt	r8,r3,1000c448 <__alt_data_end+0xf800c448>
1000c484:	1a000716 	blt	r3,r8,1000c4a4 <__ledf2+0xe4>
1000c488:	12bfef36 	bltu	r2,r10,1000c448 <__alt_data_end+0xf800c448>
1000c48c:	50800326 	beq	r10,r2,1000c49c <__ledf2+0xdc>
1000c490:	50800436 	bltu	r10,r2,1000c4a4 <__ledf2+0xe4>
1000c494:	0005883a 	mov	r2,zero
1000c498:	f800283a 	ret
1000c49c:	313fea36 	bltu	r6,r4,1000c448 <__alt_data_end+0xf800c448>
1000c4a0:	21bffc2e 	bgeu	r4,r6,1000c494 <__alt_data_end+0xf800c494>
1000c4a4:	283fde26 	beq	r5,zero,1000c420 <__alt_data_end+0xf800c420>
1000c4a8:	003fe806 	br	1000c44c <__alt_data_end+0xf800c44c>

1000c4ac <__muldf3>:
1000c4ac:	deffee04 	addi	sp,sp,-72
1000c4b0:	dc400915 	stw	r17,36(sp)
1000c4b4:	2822d53a 	srli	r17,r5,20
1000c4b8:	dc000815 	stw	r16,32(sp)
1000c4bc:	2820d7fa 	srli	r16,r5,31
1000c4c0:	df001015 	stw	fp,64(sp)
1000c4c4:	dd000c15 	stw	r20,48(sp)
1000c4c8:	dcc00b15 	stw	r19,44(sp)
1000c4cc:	dfc01115 	stw	ra,68(sp)
1000c4d0:	04c00434 	movhi	r19,16
1000c4d4:	9cffffc4 	addi	r19,r19,-1
1000c4d8:	ddc00f15 	stw	r23,60(sp)
1000c4dc:	dd800e15 	stw	r22,56(sp)
1000c4e0:	dd400d15 	stw	r21,52(sp)
1000c4e4:	dc800a15 	stw	r18,40(sp)
1000c4e8:	8c41ffcc 	andi	r17,r17,2047
1000c4ec:	2029883a 	mov	r20,r4
1000c4f0:	2ce6703a 	and	r19,r5,r19
1000c4f4:	8039883a 	mov	fp,r16
1000c4f8:	82003fcc 	andi	r8,r16,255
1000c4fc:	88005d26 	beq	r17,zero,1000c674 <__muldf3+0x1c8>
1000c500:	0081ffc4 	movi	r2,2047
1000c504:	202f883a 	mov	r23,r4
1000c508:	88803326 	beq	r17,r2,1000c5d8 <__muldf3+0x12c>
1000c50c:	98800434 	orhi	r2,r19,16
1000c510:	100490fa 	slli	r2,r2,3
1000c514:	2026d77a 	srli	r19,r4,29
1000c518:	202e90fa 	slli	r23,r4,3
1000c51c:	8c7f0044 	addi	r17,r17,-1023
1000c520:	14e6b03a 	or	r19,r2,r19
1000c524:	002d883a 	mov	r22,zero
1000c528:	000b883a 	mov	r5,zero
1000c52c:	3804d53a 	srli	r2,r7,20
1000c530:	3828d7fa 	srli	r20,r7,31
1000c534:	04800434 	movhi	r18,16
1000c538:	94bfffc4 	addi	r18,r18,-1
1000c53c:	1081ffcc 	andi	r2,r2,2047
1000c540:	302b883a 	mov	r21,r6
1000c544:	3ca4703a 	and	r18,r7,r18
1000c548:	a2403fcc 	andi	r9,r20,255
1000c54c:	10006826 	beq	r2,zero,1000c6f0 <__muldf3+0x244>
1000c550:	00c1ffc4 	movi	r3,2047
1000c554:	10c06026 	beq	r2,r3,1000c6d8 <__muldf3+0x22c>
1000c558:	90c00434 	orhi	r3,r18,16
1000c55c:	180690fa 	slli	r3,r3,3
1000c560:	3024d77a 	srli	r18,r6,29
1000c564:	302a90fa 	slli	r21,r6,3
1000c568:	10bf0044 	addi	r2,r2,-1023
1000c56c:	1ca4b03a 	or	r18,r3,r18
1000c570:	0007883a 	mov	r3,zero
1000c574:	1d88b03a 	or	r4,r3,r22
1000c578:	2109883a 	add	r4,r4,r4
1000c57c:	2109883a 	add	r4,r4,r4
1000c580:	01840074 	movhi	r6,4097
1000c584:	31b16604 	addi	r6,r6,-14952
1000c588:	2189883a 	add	r4,r4,r6
1000c58c:	21000017 	ldw	r4,0(r4)
1000c590:	852cf03a 	xor	r22,r16,r20
1000c594:	2000683a 	jmp	r4
1000c598:	1000c7e0 	cmpeqi	zero,r2,799
1000c59c:	1000c7d0 	cmplti	zero,r2,799
1000c5a0:	1000c7d0 	cmplti	zero,r2,799
1000c5a4:	1000c7bc 	xorhi	zero,r2,798
1000c5a8:	1000c5f8 	rdprs	zero,r2,791
1000c5ac:	1000c5f8 	rdprs	zero,r2,791
1000c5b0:	1000c7a4 	muli	zero,r2,798
1000c5b4:	1000c7bc 	xorhi	zero,r2,798
1000c5b8:	1000c5f8 	rdprs	zero,r2,791
1000c5bc:	1000c7a4 	muli	zero,r2,798
1000c5c0:	1000c5f8 	rdprs	zero,r2,791
1000c5c4:	1000c7bc 	xorhi	zero,r2,798
1000c5c8:	1000c5f4 	orhi	zero,r2,791
1000c5cc:	1000c5f4 	orhi	zero,r2,791
1000c5d0:	1000c5f4 	orhi	zero,r2,791
1000c5d4:	1000caf8 	rdprs	zero,r2,811
1000c5d8:	9904b03a 	or	r2,r19,r4
1000c5dc:	10006e1e 	bne	r2,zero,1000c798 <__muldf3+0x2ec>
1000c5e0:	05800204 	movi	r22,8
1000c5e4:	0027883a 	mov	r19,zero
1000c5e8:	002f883a 	mov	r23,zero
1000c5ec:	01400084 	movi	r5,2
1000c5f0:	003fce06 	br	1000c52c <__alt_data_end+0xf800c52c>
1000c5f4:	402d883a 	mov	r22,r8
1000c5f8:	00800084 	movi	r2,2
1000c5fc:	28805626 	beq	r5,r2,1000c758 <__muldf3+0x2ac>
1000c600:	008000c4 	movi	r2,3
1000c604:	2881a226 	beq	r5,r2,1000cc90 <__muldf3+0x7e4>
1000c608:	00800044 	movi	r2,1
1000c60c:	28811d1e 	bne	r5,r2,1000ca84 <__muldf3+0x5d8>
1000c610:	b039883a 	mov	fp,r22
1000c614:	0005883a 	mov	r2,zero
1000c618:	0027883a 	mov	r19,zero
1000c61c:	002f883a 	mov	r23,zero
1000c620:	1004953a 	slli	r2,r2,20
1000c624:	e7003fcc 	andi	fp,fp,255
1000c628:	e03897fa 	slli	fp,fp,31
1000c62c:	00c00434 	movhi	r3,16
1000c630:	18ffffc4 	addi	r3,r3,-1
1000c634:	98e6703a 	and	r19,r19,r3
1000c638:	9886b03a 	or	r3,r19,r2
1000c63c:	1f06b03a 	or	r3,r3,fp
1000c640:	b805883a 	mov	r2,r23
1000c644:	dfc01117 	ldw	ra,68(sp)
1000c648:	df001017 	ldw	fp,64(sp)
1000c64c:	ddc00f17 	ldw	r23,60(sp)
1000c650:	dd800e17 	ldw	r22,56(sp)
1000c654:	dd400d17 	ldw	r21,52(sp)
1000c658:	dd000c17 	ldw	r20,48(sp)
1000c65c:	dcc00b17 	ldw	r19,44(sp)
1000c660:	dc800a17 	ldw	r18,40(sp)
1000c664:	dc400917 	ldw	r17,36(sp)
1000c668:	dc000817 	ldw	r16,32(sp)
1000c66c:	dec01204 	addi	sp,sp,72
1000c670:	f800283a 	ret
1000c674:	9904b03a 	or	r2,r19,r4
1000c678:	10004226 	beq	r2,zero,1000c784 <__muldf3+0x2d8>
1000c67c:	98013426 	beq	r19,zero,1000cb50 <__muldf3+0x6a4>
1000c680:	9809883a 	mov	r4,r19
1000c684:	d9800515 	stw	r6,20(sp)
1000c688:	d9c00415 	stw	r7,16(sp)
1000c68c:	da000615 	stw	r8,24(sp)
1000c690:	000d7240 	call	1000d724 <__clzsi2>
1000c694:	d9800517 	ldw	r6,20(sp)
1000c698:	d9c00417 	ldw	r7,16(sp)
1000c69c:	da000617 	ldw	r8,24(sp)
1000c6a0:	00c009c4 	movi	r3,39
1000c6a4:	18812616 	blt	r3,r2,1000cb40 <__muldf3+0x694>
1000c6a8:	00c00a04 	movi	r3,40
1000c6ac:	15fffe04 	addi	r23,r2,-8
1000c6b0:	1887c83a 	sub	r3,r3,r2
1000c6b4:	9de6983a 	sll	r19,r19,r23
1000c6b8:	a0c6d83a 	srl	r3,r20,r3
1000c6bc:	a5ee983a 	sll	r23,r20,r23
1000c6c0:	1ce6b03a 	or	r19,r3,r19
1000c6c4:	047f0344 	movi	r17,-1011
1000c6c8:	88a3c83a 	sub	r17,r17,r2
1000c6cc:	002d883a 	mov	r22,zero
1000c6d0:	000b883a 	mov	r5,zero
1000c6d4:	003f9506 	br	1000c52c <__alt_data_end+0xf800c52c>
1000c6d8:	9186b03a 	or	r3,r18,r6
1000c6dc:	1800271e 	bne	r3,zero,1000c77c <__muldf3+0x2d0>
1000c6e0:	0025883a 	mov	r18,zero
1000c6e4:	002b883a 	mov	r21,zero
1000c6e8:	00c00084 	movi	r3,2
1000c6ec:	003fa106 	br	1000c574 <__alt_data_end+0xf800c574>
1000c6f0:	9186b03a 	or	r3,r18,r6
1000c6f4:	18001d26 	beq	r3,zero,1000c76c <__muldf3+0x2c0>
1000c6f8:	90012226 	beq	r18,zero,1000cb84 <__muldf3+0x6d8>
1000c6fc:	9009883a 	mov	r4,r18
1000c700:	d9400415 	stw	r5,16(sp)
1000c704:	d9800515 	stw	r6,20(sp)
1000c708:	da000615 	stw	r8,24(sp)
1000c70c:	da400715 	stw	r9,28(sp)
1000c710:	000d7240 	call	1000d724 <__clzsi2>
1000c714:	d9400417 	ldw	r5,16(sp)
1000c718:	d9800517 	ldw	r6,20(sp)
1000c71c:	da000617 	ldw	r8,24(sp)
1000c720:	da400717 	ldw	r9,28(sp)
1000c724:	00c009c4 	movi	r3,39
1000c728:	18811216 	blt	r3,r2,1000cb74 <__muldf3+0x6c8>
1000c72c:	01c00a04 	movi	r7,40
1000c730:	157ffe04 	addi	r21,r2,-8
1000c734:	388fc83a 	sub	r7,r7,r2
1000c738:	9564983a 	sll	r18,r18,r21
1000c73c:	31ced83a 	srl	r7,r6,r7
1000c740:	356a983a 	sll	r21,r6,r21
1000c744:	3ca4b03a 	or	r18,r7,r18
1000c748:	00ff0344 	movi	r3,-1011
1000c74c:	1885c83a 	sub	r2,r3,r2
1000c750:	0007883a 	mov	r3,zero
1000c754:	003f8706 	br	1000c574 <__alt_data_end+0xf800c574>
1000c758:	b039883a 	mov	fp,r22
1000c75c:	0081ffc4 	movi	r2,2047
1000c760:	0027883a 	mov	r19,zero
1000c764:	002f883a 	mov	r23,zero
1000c768:	003fad06 	br	1000c620 <__alt_data_end+0xf800c620>
1000c76c:	0025883a 	mov	r18,zero
1000c770:	002b883a 	mov	r21,zero
1000c774:	00c00044 	movi	r3,1
1000c778:	003f7e06 	br	1000c574 <__alt_data_end+0xf800c574>
1000c77c:	00c000c4 	movi	r3,3
1000c780:	003f7c06 	br	1000c574 <__alt_data_end+0xf800c574>
1000c784:	05800104 	movi	r22,4
1000c788:	0027883a 	mov	r19,zero
1000c78c:	002f883a 	mov	r23,zero
1000c790:	01400044 	movi	r5,1
1000c794:	003f6506 	br	1000c52c <__alt_data_end+0xf800c52c>
1000c798:	05800304 	movi	r22,12
1000c79c:	014000c4 	movi	r5,3
1000c7a0:	003f6206 	br	1000c52c <__alt_data_end+0xf800c52c>
1000c7a4:	0039883a 	mov	fp,zero
1000c7a8:	04c00434 	movhi	r19,16
1000c7ac:	9cffffc4 	addi	r19,r19,-1
1000c7b0:	05ffffc4 	movi	r23,-1
1000c7b4:	0081ffc4 	movi	r2,2047
1000c7b8:	003f9906 	br	1000c620 <__alt_data_end+0xf800c620>
1000c7bc:	9027883a 	mov	r19,r18
1000c7c0:	a82f883a 	mov	r23,r21
1000c7c4:	482d883a 	mov	r22,r9
1000c7c8:	180b883a 	mov	r5,r3
1000c7cc:	003f8a06 	br	1000c5f8 <__alt_data_end+0xf800c5f8>
1000c7d0:	9027883a 	mov	r19,r18
1000c7d4:	a82f883a 	mov	r23,r21
1000c7d8:	180b883a 	mov	r5,r3
1000c7dc:	003f8606 	br	1000c5f8 <__alt_data_end+0xf800c5f8>
1000c7e0:	a828d43a 	srli	r20,r21,16
1000c7e4:	b820d43a 	srli	r16,r23,16
1000c7e8:	ad7fffcc 	andi	r21,r21,65535
1000c7ec:	bdffffcc 	andi	r23,r23,65535
1000c7f0:	8885883a 	add	r2,r17,r2
1000c7f4:	a809883a 	mov	r4,r21
1000c7f8:	b80b883a 	mov	r5,r23
1000c7fc:	d8800015 	stw	r2,0(sp)
1000c800:	000b0240 	call	1000b024 <__mulsi3>
1000c804:	a009883a 	mov	r4,r20
1000c808:	b80b883a 	mov	r5,r23
1000c80c:	d8800415 	stw	r2,16(sp)
1000c810:	000b0240 	call	1000b024 <__mulsi3>
1000c814:	a809883a 	mov	r4,r21
1000c818:	800b883a 	mov	r5,r16
1000c81c:	d8800615 	stw	r2,24(sp)
1000c820:	000b0240 	call	1000b024 <__mulsi3>
1000c824:	a009883a 	mov	r4,r20
1000c828:	800b883a 	mov	r5,r16
1000c82c:	1023883a 	mov	r17,r2
1000c830:	000b0240 	call	1000b024 <__mulsi3>
1000c834:	d9c00417 	ldw	r7,16(sp)
1000c838:	da000617 	ldw	r8,24(sp)
1000c83c:	1039883a 	mov	fp,r2
1000c840:	3804d43a 	srli	r2,r7,16
1000c844:	8a07883a 	add	r3,r17,r8
1000c848:	1887883a 	add	r3,r3,r2
1000c84c:	1c40022e 	bgeu	r3,r17,1000c858 <__muldf3+0x3ac>
1000c850:	00800074 	movhi	r2,1
1000c854:	e0b9883a 	add	fp,fp,r2
1000c858:	1804943a 	slli	r2,r3,16
1000c85c:	1806d43a 	srli	r3,r3,16
1000c860:	9022d43a 	srli	r17,r18,16
1000c864:	39ffffcc 	andi	r7,r7,65535
1000c868:	94bfffcc 	andi	r18,r18,65535
1000c86c:	11cf883a 	add	r7,r2,r7
1000c870:	b80b883a 	mov	r5,r23
1000c874:	9009883a 	mov	r4,r18
1000c878:	d8c00215 	stw	r3,8(sp)
1000c87c:	d9c00315 	stw	r7,12(sp)
1000c880:	000b0240 	call	1000b024 <__mulsi3>
1000c884:	b80b883a 	mov	r5,r23
1000c888:	8809883a 	mov	r4,r17
1000c88c:	d8800415 	stw	r2,16(sp)
1000c890:	000b0240 	call	1000b024 <__mulsi3>
1000c894:	9009883a 	mov	r4,r18
1000c898:	800b883a 	mov	r5,r16
1000c89c:	d8800715 	stw	r2,28(sp)
1000c8a0:	000b0240 	call	1000b024 <__mulsi3>
1000c8a4:	8809883a 	mov	r4,r17
1000c8a8:	800b883a 	mov	r5,r16
1000c8ac:	102f883a 	mov	r23,r2
1000c8b0:	000b0240 	call	1000b024 <__mulsi3>
1000c8b4:	d9c00417 	ldw	r7,16(sp)
1000c8b8:	da400717 	ldw	r9,28(sp)
1000c8bc:	1011883a 	mov	r8,r2
1000c8c0:	3804d43a 	srli	r2,r7,16
1000c8c4:	ba47883a 	add	r3,r23,r9
1000c8c8:	1887883a 	add	r3,r3,r2
1000c8cc:	1dc0022e 	bgeu	r3,r23,1000c8d8 <__muldf3+0x42c>
1000c8d0:	00800074 	movhi	r2,1
1000c8d4:	4091883a 	add	r8,r8,r2
1000c8d8:	1804d43a 	srli	r2,r3,16
1000c8dc:	182e943a 	slli	r23,r3,16
1000c8e0:	9820d43a 	srli	r16,r19,16
1000c8e4:	9cffffcc 	andi	r19,r19,65535
1000c8e8:	39ffffcc 	andi	r7,r7,65535
1000c8ec:	4085883a 	add	r2,r8,r2
1000c8f0:	a809883a 	mov	r4,r21
1000c8f4:	980b883a 	mov	r5,r19
1000c8f8:	b9ef883a 	add	r23,r23,r7
1000c8fc:	d8800115 	stw	r2,4(sp)
1000c900:	000b0240 	call	1000b024 <__mulsi3>
1000c904:	a009883a 	mov	r4,r20
1000c908:	980b883a 	mov	r5,r19
1000c90c:	d8800415 	stw	r2,16(sp)
1000c910:	000b0240 	call	1000b024 <__mulsi3>
1000c914:	a809883a 	mov	r4,r21
1000c918:	800b883a 	mov	r5,r16
1000c91c:	d8800715 	stw	r2,28(sp)
1000c920:	000b0240 	call	1000b024 <__mulsi3>
1000c924:	a009883a 	mov	r4,r20
1000c928:	800b883a 	mov	r5,r16
1000c92c:	102b883a 	mov	r21,r2
1000c930:	000b0240 	call	1000b024 <__mulsi3>
1000c934:	d9c00417 	ldw	r7,16(sp)
1000c938:	da400717 	ldw	r9,28(sp)
1000c93c:	1011883a 	mov	r8,r2
1000c940:	3804d43a 	srli	r2,r7,16
1000c944:	aa47883a 	add	r3,r21,r9
1000c948:	1887883a 	add	r3,r3,r2
1000c94c:	1d40022e 	bgeu	r3,r21,1000c958 <__muldf3+0x4ac>
1000c950:	00800074 	movhi	r2,1
1000c954:	4091883a 	add	r8,r8,r2
1000c958:	1828d43a 	srli	r20,r3,16
1000c95c:	1806943a 	slli	r3,r3,16
1000c960:	39ffffcc 	andi	r7,r7,65535
1000c964:	9009883a 	mov	r4,r18
1000c968:	980b883a 	mov	r5,r19
1000c96c:	19eb883a 	add	r21,r3,r7
1000c970:	4529883a 	add	r20,r8,r20
1000c974:	000b0240 	call	1000b024 <__mulsi3>
1000c978:	980b883a 	mov	r5,r19
1000c97c:	8809883a 	mov	r4,r17
1000c980:	d8800415 	stw	r2,16(sp)
1000c984:	000b0240 	call	1000b024 <__mulsi3>
1000c988:	9009883a 	mov	r4,r18
1000c98c:	800b883a 	mov	r5,r16
1000c990:	1027883a 	mov	r19,r2
1000c994:	000b0240 	call	1000b024 <__mulsi3>
1000c998:	8809883a 	mov	r4,r17
1000c99c:	800b883a 	mov	r5,r16
1000c9a0:	1025883a 	mov	r18,r2
1000c9a4:	000b0240 	call	1000b024 <__mulsi3>
1000c9a8:	d9c00417 	ldw	r7,16(sp)
1000c9ac:	1011883a 	mov	r8,r2
1000c9b0:	94c7883a 	add	r3,r18,r19
1000c9b4:	3804d43a 	srli	r2,r7,16
1000c9b8:	1887883a 	add	r3,r3,r2
1000c9bc:	1c80022e 	bgeu	r3,r18,1000c9c8 <__muldf3+0x51c>
1000c9c0:	00800074 	movhi	r2,1
1000c9c4:	4091883a 	add	r8,r8,r2
1000c9c8:	1804943a 	slli	r2,r3,16
1000c9cc:	d9400217 	ldw	r5,8(sp)
1000c9d0:	39ffffcc 	andi	r7,r7,65535
1000c9d4:	11cf883a 	add	r7,r2,r7
1000c9d8:	d8800117 	ldw	r2,4(sp)
1000c9dc:	b949883a 	add	r4,r23,r5
1000c9e0:	2739883a 	add	fp,r4,fp
1000c9e4:	e5ef803a 	cmpltu	r23,fp,r23
1000c9e8:	388f883a 	add	r7,r7,r2
1000c9ec:	3dcb883a 	add	r5,r7,r23
1000c9f0:	a149883a 	add	r4,r20,r5
1000c9f4:	2def803a 	cmpltu	r23,r5,r23
1000c9f8:	d9400117 	ldw	r5,4(sp)
1000c9fc:	e579883a 	add	fp,fp,r21
1000ca00:	e56b803a 	cmpltu	r21,fp,r21
1000ca04:	1804d43a 	srli	r2,r3,16
1000ca08:	394f803a 	cmpltu	r7,r7,r5
1000ca0c:	2547883a 	add	r3,r4,r21
1000ca10:	b9e6b03a 	or	r19,r23,r7
1000ca14:	1d6b803a 	cmpltu	r21,r3,r21
1000ca18:	2529803a 	cmpltu	r20,r4,r20
1000ca1c:	98a7883a 	add	r19,r19,r2
1000ca20:	ad2ab03a 	or	r21,r21,r20
1000ca24:	9d67883a 	add	r19,r19,r21
1000ca28:	e02e927a 	slli	r23,fp,9
1000ca2c:	9a27883a 	add	r19,r19,r8
1000ca30:	d9000317 	ldw	r4,12(sp)
1000ca34:	1804d5fa 	srli	r2,r3,23
1000ca38:	9826927a 	slli	r19,r19,9
1000ca3c:	e038d5fa 	srli	fp,fp,23
1000ca40:	b92eb03a 	or	r23,r23,r4
1000ca44:	1806927a 	slli	r3,r3,9
1000ca48:	98a6b03a 	or	r19,r19,r2
1000ca4c:	b82ec03a 	cmpne	r23,r23,zero
1000ca50:	bf2eb03a 	or	r23,r23,fp
1000ca54:	9880402c 	andhi	r2,r19,256
1000ca58:	b8eeb03a 	or	r23,r23,r3
1000ca5c:	10000926 	beq	r2,zero,1000ca84 <__muldf3+0x5d8>
1000ca60:	b806d07a 	srli	r3,r23,1
1000ca64:	bdc0004c 	andi	r23,r23,1
1000ca68:	980497fa 	slli	r2,r19,31
1000ca6c:	b8eeb03a 	or	r23,r23,r3
1000ca70:	d8c00017 	ldw	r3,0(sp)
1000ca74:	9826d07a 	srli	r19,r19,1
1000ca78:	b8aeb03a 	or	r23,r23,r2
1000ca7c:	18c00044 	addi	r3,r3,1
1000ca80:	d8c00015 	stw	r3,0(sp)
1000ca84:	d8c00017 	ldw	r3,0(sp)
1000ca88:	1880ffc4 	addi	r2,r3,1023
1000ca8c:	0080490e 	bge	zero,r2,1000cbb4 <__muldf3+0x708>
1000ca90:	b8c001cc 	andi	r3,r23,7
1000ca94:	18000726 	beq	r3,zero,1000cab4 <__muldf3+0x608>
1000ca98:	b90003cc 	andi	r4,r23,15
1000ca9c:	00c00104 	movi	r3,4
1000caa0:	20c00426 	beq	r4,r3,1000cab4 <__muldf3+0x608>
1000caa4:	b8c7883a 	add	r3,r23,r3
1000caa8:	1def803a 	cmpltu	r23,r3,r23
1000caac:	9de7883a 	add	r19,r19,r23
1000cab0:	182f883a 	mov	r23,r3
1000cab4:	98c0402c 	andhi	r3,r19,256
1000cab8:	18000526 	beq	r3,zero,1000cad0 <__muldf3+0x624>
1000cabc:	d8c00017 	ldw	r3,0(sp)
1000cac0:	00bfc034 	movhi	r2,65280
1000cac4:	10bfffc4 	addi	r2,r2,-1
1000cac8:	98a6703a 	and	r19,r19,r2
1000cacc:	18810004 	addi	r2,r3,1024
1000cad0:	00c1ff84 	movi	r3,2046
1000cad4:	18bf2016 	blt	r3,r2,1000c758 <__alt_data_end+0xf800c758>
1000cad8:	9806977a 	slli	r3,r19,29
1000cadc:	b82ed0fa 	srli	r23,r23,3
1000cae0:	9826927a 	slli	r19,r19,9
1000cae4:	1081ffcc 	andi	r2,r2,2047
1000cae8:	1deeb03a 	or	r23,r3,r23
1000caec:	9826d33a 	srli	r19,r19,12
1000caf0:	b039883a 	mov	fp,r22
1000caf4:	003eca06 	br	1000c620 <__alt_data_end+0xf800c620>
1000caf8:	9880022c 	andhi	r2,r19,8
1000cafc:	10000a26 	beq	r2,zero,1000cb28 <__muldf3+0x67c>
1000cb00:	9080022c 	andhi	r2,r18,8
1000cb04:	1000081e 	bne	r2,zero,1000cb28 <__muldf3+0x67c>
1000cb08:	00800434 	movhi	r2,16
1000cb0c:	10bfffc4 	addi	r2,r2,-1
1000cb10:	94c00234 	orhi	r19,r18,8
1000cb14:	98a6703a 	and	r19,r19,r2
1000cb18:	a039883a 	mov	fp,r20
1000cb1c:	a82f883a 	mov	r23,r21
1000cb20:	0081ffc4 	movi	r2,2047
1000cb24:	003ebe06 	br	1000c620 <__alt_data_end+0xf800c620>
1000cb28:	00800434 	movhi	r2,16
1000cb2c:	10bfffc4 	addi	r2,r2,-1
1000cb30:	9cc00234 	orhi	r19,r19,8
1000cb34:	98a6703a 	and	r19,r19,r2
1000cb38:	0081ffc4 	movi	r2,2047
1000cb3c:	003eb806 	br	1000c620 <__alt_data_end+0xf800c620>
1000cb40:	14fff604 	addi	r19,r2,-40
1000cb44:	a4e6983a 	sll	r19,r20,r19
1000cb48:	002f883a 	mov	r23,zero
1000cb4c:	003edd06 	br	1000c6c4 <__alt_data_end+0xf800c6c4>
1000cb50:	d9800515 	stw	r6,20(sp)
1000cb54:	d9c00415 	stw	r7,16(sp)
1000cb58:	da000615 	stw	r8,24(sp)
1000cb5c:	000d7240 	call	1000d724 <__clzsi2>
1000cb60:	10800804 	addi	r2,r2,32
1000cb64:	da000617 	ldw	r8,24(sp)
1000cb68:	d9c00417 	ldw	r7,16(sp)
1000cb6c:	d9800517 	ldw	r6,20(sp)
1000cb70:	003ecb06 	br	1000c6a0 <__alt_data_end+0xf800c6a0>
1000cb74:	14bff604 	addi	r18,r2,-40
1000cb78:	34a4983a 	sll	r18,r6,r18
1000cb7c:	002b883a 	mov	r21,zero
1000cb80:	003ef106 	br	1000c748 <__alt_data_end+0xf800c748>
1000cb84:	3009883a 	mov	r4,r6
1000cb88:	d9400415 	stw	r5,16(sp)
1000cb8c:	d9800515 	stw	r6,20(sp)
1000cb90:	da000615 	stw	r8,24(sp)
1000cb94:	da400715 	stw	r9,28(sp)
1000cb98:	000d7240 	call	1000d724 <__clzsi2>
1000cb9c:	10800804 	addi	r2,r2,32
1000cba0:	da400717 	ldw	r9,28(sp)
1000cba4:	da000617 	ldw	r8,24(sp)
1000cba8:	d9800517 	ldw	r6,20(sp)
1000cbac:	d9400417 	ldw	r5,16(sp)
1000cbb0:	003edc06 	br	1000c724 <__alt_data_end+0xf800c724>
1000cbb4:	d8c00017 	ldw	r3,0(sp)
1000cbb8:	00bf0084 	movi	r2,-1022
1000cbbc:	10c5c83a 	sub	r2,r2,r3
1000cbc0:	00c00e04 	movi	r3,56
1000cbc4:	18be9216 	blt	r3,r2,1000c610 <__alt_data_end+0xf800c610>
1000cbc8:	00c007c4 	movi	r3,31
1000cbcc:	18801916 	blt	r3,r2,1000cc34 <__muldf3+0x788>
1000cbd0:	d9000017 	ldw	r4,0(sp)
1000cbd4:	b88ad83a 	srl	r5,r23,r2
1000cbd8:	9884d83a 	srl	r2,r19,r2
1000cbdc:	20c10784 	addi	r3,r4,1054
1000cbe0:	98c8983a 	sll	r4,r19,r3
1000cbe4:	b8c6983a 	sll	r3,r23,r3
1000cbe8:	2908b03a 	or	r4,r5,r4
1000cbec:	1806c03a 	cmpne	r3,r3,zero
1000cbf0:	20c6b03a 	or	r3,r4,r3
1000cbf4:	190001cc 	andi	r4,r3,7
1000cbf8:	20000726 	beq	r4,zero,1000cc18 <__muldf3+0x76c>
1000cbfc:	194003cc 	andi	r5,r3,15
1000cc00:	01000104 	movi	r4,4
1000cc04:	29000426 	beq	r5,r4,1000cc18 <__muldf3+0x76c>
1000cc08:	1909883a 	add	r4,r3,r4
1000cc0c:	20c7803a 	cmpltu	r3,r4,r3
1000cc10:	10c5883a 	add	r2,r2,r3
1000cc14:	2007883a 	mov	r3,r4
1000cc18:	1100202c 	andhi	r4,r2,128
1000cc1c:	20001226 	beq	r4,zero,1000cc68 <__muldf3+0x7bc>
1000cc20:	b039883a 	mov	fp,r22
1000cc24:	00800044 	movi	r2,1
1000cc28:	0027883a 	mov	r19,zero
1000cc2c:	002f883a 	mov	r23,zero
1000cc30:	003e7b06 	br	1000c620 <__alt_data_end+0xf800c620>
1000cc34:	d9400017 	ldw	r5,0(sp)
1000cc38:	00fef884 	movi	r3,-1054
1000cc3c:	01000804 	movi	r4,32
1000cc40:	1947c83a 	sub	r3,r3,r5
1000cc44:	98c6d83a 	srl	r3,r19,r3
1000cc48:	11000f26 	beq	r2,r4,1000cc88 <__muldf3+0x7dc>
1000cc4c:	28810f84 	addi	r2,r5,1086
1000cc50:	9884983a 	sll	r2,r19,r2
1000cc54:	15c4b03a 	or	r2,r2,r23
1000cc58:	1004c03a 	cmpne	r2,r2,zero
1000cc5c:	10c6b03a 	or	r3,r2,r3
1000cc60:	0005883a 	mov	r2,zero
1000cc64:	003fe306 	br	1000cbf4 <__alt_data_end+0xf800cbf4>
1000cc68:	102e977a 	slli	r23,r2,29
1000cc6c:	1806d0fa 	srli	r3,r3,3
1000cc70:	1004927a 	slli	r2,r2,9
1000cc74:	b039883a 	mov	fp,r22
1000cc78:	b8eeb03a 	or	r23,r23,r3
1000cc7c:	1026d33a 	srli	r19,r2,12
1000cc80:	0005883a 	mov	r2,zero
1000cc84:	003e6606 	br	1000c620 <__alt_data_end+0xf800c620>
1000cc88:	0005883a 	mov	r2,zero
1000cc8c:	003ff106 	br	1000cc54 <__alt_data_end+0xf800cc54>
1000cc90:	00800434 	movhi	r2,16
1000cc94:	10bfffc4 	addi	r2,r2,-1
1000cc98:	9cc00234 	orhi	r19,r19,8
1000cc9c:	98a6703a 	and	r19,r19,r2
1000cca0:	b039883a 	mov	fp,r22
1000cca4:	0081ffc4 	movi	r2,2047
1000cca8:	003e5d06 	br	1000c620 <__alt_data_end+0xf800c620>

1000ccac <__subdf3>:
1000ccac:	02000434 	movhi	r8,16
1000ccb0:	423fffc4 	addi	r8,r8,-1
1000ccb4:	defffb04 	addi	sp,sp,-20
1000ccb8:	2a06703a 	and	r3,r5,r8
1000ccbc:	3a10703a 	and	r8,r7,r8
1000ccc0:	3804d53a 	srli	r2,r7,20
1000ccc4:	dc800215 	stw	r18,8(sp)
1000ccc8:	dc400115 	stw	r17,4(sp)
1000cccc:	2824d7fa 	srli	r18,r5,31
1000ccd0:	2822d53a 	srli	r17,r5,20
1000ccd4:	401090fa 	slli	r8,r8,3
1000ccd8:	180a90fa 	slli	r5,r3,3
1000ccdc:	3006d77a 	srli	r3,r6,29
1000cce0:	2014d77a 	srli	r10,r4,29
1000cce4:	dc000015 	stw	r16,0(sp)
1000cce8:	40d0b03a 	or	r8,r8,r3
1000ccec:	dfc00415 	stw	ra,16(sp)
1000ccf0:	dcc00315 	stw	r19,12(sp)
1000ccf4:	1081ffcc 	andi	r2,r2,2047
1000ccf8:	00c1ffc4 	movi	r3,2047
1000ccfc:	9013883a 	mov	r9,r18
1000cd00:	8c41ffcc 	andi	r17,r17,2047
1000cd04:	94803fcc 	andi	r18,r18,255
1000cd08:	2a8ab03a 	or	r5,r5,r10
1000cd0c:	202090fa 	slli	r16,r4,3
1000cd10:	380ed7fa 	srli	r7,r7,31
1000cd14:	300c90fa 	slli	r6,r6,3
1000cd18:	10c02e26 	beq	r2,r3,1000cdd4 <__subdf3+0x128>
1000cd1c:	39c0005c 	xori	r7,r7,1
1000cd20:	8887c83a 	sub	r3,r17,r2
1000cd24:	91c03026 	beq	r18,r7,1000cde8 <__subdf3+0x13c>
1000cd28:	00c0a40e 	bge	zero,r3,1000cfbc <__subdf3+0x310>
1000cd2c:	10004c1e 	bne	r2,zero,1000ce60 <__subdf3+0x1b4>
1000cd30:	4184b03a 	or	r2,r8,r6
1000cd34:	10008f1e 	bne	r2,zero,1000cf74 <__subdf3+0x2c8>
1000cd38:	808001cc 	andi	r2,r16,7
1000cd3c:	10007d26 	beq	r2,zero,1000cf34 <__subdf3+0x288>
1000cd40:	80c003cc 	andi	r3,r16,15
1000cd44:	00800104 	movi	r2,4
1000cd48:	18807a26 	beq	r3,r2,1000cf34 <__subdf3+0x288>
1000cd4c:	80c00104 	addi	r3,r16,4
1000cd50:	1c21803a 	cmpltu	r16,r3,r16
1000cd54:	2c0b883a 	add	r5,r5,r16
1000cd58:	2880202c 	andhi	r2,r5,128
1000cd5c:	9240004c 	andi	r9,r18,1
1000cd60:	1821883a 	mov	r16,r3
1000cd64:	10007626 	beq	r2,zero,1000cf40 <__subdf3+0x294>
1000cd68:	8c400044 	addi	r17,r17,1
1000cd6c:	0081ffc4 	movi	r2,2047
1000cd70:	8880b226 	beq	r17,r2,1000d03c <__subdf3+0x390>
1000cd74:	00bfe034 	movhi	r2,65408
1000cd78:	10bfffc4 	addi	r2,r2,-1
1000cd7c:	288a703a 	and	r5,r5,r2
1000cd80:	2804977a 	slli	r2,r5,29
1000cd84:	280a927a 	slli	r5,r5,9
1000cd88:	8020d0fa 	srli	r16,r16,3
1000cd8c:	280ad33a 	srli	r5,r5,12
1000cd90:	1404b03a 	or	r2,r2,r16
1000cd94:	8c41ffcc 	andi	r17,r17,2047
1000cd98:	8822953a 	slli	r17,r17,20
1000cd9c:	4a403fcc 	andi	r9,r9,255
1000cda0:	481297fa 	slli	r9,r9,31
1000cda4:	00c00434 	movhi	r3,16
1000cda8:	18ffffc4 	addi	r3,r3,-1
1000cdac:	28c6703a 	and	r3,r5,r3
1000cdb0:	1c46b03a 	or	r3,r3,r17
1000cdb4:	1a46b03a 	or	r3,r3,r9
1000cdb8:	dfc00417 	ldw	ra,16(sp)
1000cdbc:	dcc00317 	ldw	r19,12(sp)
1000cdc0:	dc800217 	ldw	r18,8(sp)
1000cdc4:	dc400117 	ldw	r17,4(sp)
1000cdc8:	dc000017 	ldw	r16,0(sp)
1000cdcc:	dec00504 	addi	sp,sp,20
1000cdd0:	f800283a 	ret
1000cdd4:	4186b03a 	or	r3,r8,r6
1000cdd8:	183fd026 	beq	r3,zero,1000cd1c <__alt_data_end+0xf800cd1c>
1000cddc:	39c03fcc 	andi	r7,r7,255
1000cde0:	8887c83a 	sub	r3,r17,r2
1000cde4:	91ffd01e 	bne	r18,r7,1000cd28 <__alt_data_end+0xf800cd28>
1000cde8:	00c09b0e 	bge	zero,r3,1000d058 <__subdf3+0x3ac>
1000cdec:	10006926 	beq	r2,zero,1000cf94 <__subdf3+0x2e8>
1000cdf0:	0081ffc4 	movi	r2,2047
1000cdf4:	88bfd026 	beq	r17,r2,1000cd38 <__alt_data_end+0xf800cd38>
1000cdf8:	42002034 	orhi	r8,r8,128
1000cdfc:	00800e04 	movi	r2,56
1000ce00:	10c0e20e 	bge	r2,r3,1000d18c <__subdf3+0x4e0>
1000ce04:	418cb03a 	or	r6,r8,r6
1000ce08:	300cc03a 	cmpne	r6,r6,zero
1000ce0c:	0007883a 	mov	r3,zero
1000ce10:	340d883a 	add	r6,r6,r16
1000ce14:	3421803a 	cmpltu	r16,r6,r16
1000ce18:	194b883a 	add	r5,r3,r5
1000ce1c:	2c0b883a 	add	r5,r5,r16
1000ce20:	3021883a 	mov	r16,r6
1000ce24:	2880202c 	andhi	r2,r5,128
1000ce28:	103fc326 	beq	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000ce2c:	8c400044 	addi	r17,r17,1
1000ce30:	0081ffc4 	movi	r2,2047
1000ce34:	88811026 	beq	r17,r2,1000d278 <__subdf3+0x5cc>
1000ce38:	00bfe034 	movhi	r2,65408
1000ce3c:	10bfffc4 	addi	r2,r2,-1
1000ce40:	288a703a 	and	r5,r5,r2
1000ce44:	8006d07a 	srli	r3,r16,1
1000ce48:	280497fa 	slli	r2,r5,31
1000ce4c:	8400004c 	andi	r16,r16,1
1000ce50:	80e0b03a 	or	r16,r16,r3
1000ce54:	80a0b03a 	or	r16,r16,r2
1000ce58:	280ad07a 	srli	r5,r5,1
1000ce5c:	003fb606 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000ce60:	0081ffc4 	movi	r2,2047
1000ce64:	88bfb426 	beq	r17,r2,1000cd38 <__alt_data_end+0xf800cd38>
1000ce68:	42002034 	orhi	r8,r8,128
1000ce6c:	00800e04 	movi	r2,56
1000ce70:	10c07516 	blt	r2,r3,1000d048 <__subdf3+0x39c>
1000ce74:	008007c4 	movi	r2,31
1000ce78:	10c09816 	blt	r2,r3,1000d0dc <__subdf3+0x430>
1000ce7c:	00800804 	movi	r2,32
1000ce80:	10c5c83a 	sub	r2,r2,r3
1000ce84:	30c8d83a 	srl	r4,r6,r3
1000ce88:	408e983a 	sll	r7,r8,r2
1000ce8c:	3084983a 	sll	r2,r6,r2
1000ce90:	40c6d83a 	srl	r3,r8,r3
1000ce94:	3908b03a 	or	r4,r7,r4
1000ce98:	1004c03a 	cmpne	r2,r2,zero
1000ce9c:	208cb03a 	or	r6,r4,r2
1000cea0:	818dc83a 	sub	r6,r16,r6
1000cea4:	81a1803a 	cmpltu	r16,r16,r6
1000cea8:	28cbc83a 	sub	r5,r5,r3
1000ceac:	2c0bc83a 	sub	r5,r5,r16
1000ceb0:	3021883a 	mov	r16,r6
1000ceb4:	2880202c 	andhi	r2,r5,128
1000ceb8:	103f9f26 	beq	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000cebc:	04c02034 	movhi	r19,128
1000cec0:	9cffffc4 	addi	r19,r19,-1
1000cec4:	2ce6703a 	and	r19,r5,r19
1000cec8:	98004d26 	beq	r19,zero,1000d000 <__subdf3+0x354>
1000cecc:	9809883a 	mov	r4,r19
1000ced0:	000d7240 	call	1000d724 <__clzsi2>
1000ced4:	10fffe04 	addi	r3,r2,-8
1000ced8:	010007c4 	movi	r4,31
1000cedc:	20c04e16 	blt	r4,r3,1000d018 <__subdf3+0x36c>
1000cee0:	01000a04 	movi	r4,40
1000cee4:	2085c83a 	sub	r2,r4,r2
1000cee8:	8084d83a 	srl	r2,r16,r2
1000ceec:	98e6983a 	sll	r19,r19,r3
1000cef0:	80e0983a 	sll	r16,r16,r3
1000cef4:	14c4b03a 	or	r2,r2,r19
1000cef8:	1c404b16 	blt	r3,r17,1000d028 <__subdf3+0x37c>
1000cefc:	1c63c83a 	sub	r17,r3,r17
1000cf00:	89400044 	addi	r5,r17,1
1000cf04:	00c007c4 	movi	r3,31
1000cf08:	19406716 	blt	r3,r5,1000d0a8 <__subdf3+0x3fc>
1000cf0c:	1c47c83a 	sub	r3,r3,r17
1000cf10:	8148d83a 	srl	r4,r16,r5
1000cf14:	80e0983a 	sll	r16,r16,r3
1000cf18:	10c6983a 	sll	r3,r2,r3
1000cf1c:	114ad83a 	srl	r5,r2,r5
1000cf20:	8004c03a 	cmpne	r2,r16,zero
1000cf24:	20e0b03a 	or	r16,r4,r3
1000cf28:	80a0b03a 	or	r16,r16,r2
1000cf2c:	0023883a 	mov	r17,zero
1000cf30:	003f8106 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000cf34:	2880202c 	andhi	r2,r5,128
1000cf38:	9240004c 	andi	r9,r18,1
1000cf3c:	103f8a1e 	bne	r2,zero,1000cd68 <__alt_data_end+0xf800cd68>
1000cf40:	2804977a 	slli	r2,r5,29
1000cf44:	8020d0fa 	srli	r16,r16,3
1000cf48:	00c1ffc4 	movi	r3,2047
1000cf4c:	280ad0fa 	srli	r5,r5,3
1000cf50:	1404b03a 	or	r2,r2,r16
1000cf54:	88c0031e 	bne	r17,r3,1000cf64 <__subdf3+0x2b8>
1000cf58:	1146b03a 	or	r3,r2,r5
1000cf5c:	18003726 	beq	r3,zero,1000d03c <__subdf3+0x390>
1000cf60:	29400234 	orhi	r5,r5,8
1000cf64:	00c00434 	movhi	r3,16
1000cf68:	18ffffc4 	addi	r3,r3,-1
1000cf6c:	28ca703a 	and	r5,r5,r3
1000cf70:	003f8806 	br	1000cd94 <__alt_data_end+0xf800cd94>
1000cf74:	18ffffc4 	addi	r3,r3,-1
1000cf78:	1800481e 	bne	r3,zero,1000d09c <__subdf3+0x3f0>
1000cf7c:	818dc83a 	sub	r6,r16,r6
1000cf80:	81a1803a 	cmpltu	r16,r16,r6
1000cf84:	2a0bc83a 	sub	r5,r5,r8
1000cf88:	2c0bc83a 	sub	r5,r5,r16
1000cf8c:	3021883a 	mov	r16,r6
1000cf90:	003fc806 	br	1000ceb4 <__alt_data_end+0xf800ceb4>
1000cf94:	4184b03a 	or	r2,r8,r6
1000cf98:	103f6726 	beq	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000cf9c:	18ffffc4 	addi	r3,r3,-1
1000cfa0:	1800931e 	bne	r3,zero,1000d1f0 <__subdf3+0x544>
1000cfa4:	340d883a 	add	r6,r6,r16
1000cfa8:	3421803a 	cmpltu	r16,r6,r16
1000cfac:	414b883a 	add	r5,r8,r5
1000cfb0:	2c0b883a 	add	r5,r5,r16
1000cfb4:	3021883a 	mov	r16,r6
1000cfb8:	003f9a06 	br	1000ce24 <__alt_data_end+0xf800ce24>
1000cfbc:	1800531e 	bne	r3,zero,1000d10c <__subdf3+0x460>
1000cfc0:	88800044 	addi	r2,r17,1
1000cfc4:	1081ffcc 	andi	r2,r2,2047
1000cfc8:	00c00044 	movi	r3,1
1000cfcc:	1880a00e 	bge	r3,r2,1000d250 <__subdf3+0x5a4>
1000cfd0:	8185c83a 	sub	r2,r16,r6
1000cfd4:	8087803a 	cmpltu	r3,r16,r2
1000cfd8:	2a27c83a 	sub	r19,r5,r8
1000cfdc:	98e7c83a 	sub	r19,r19,r3
1000cfe0:	98c0202c 	andhi	r3,r19,128
1000cfe4:	18006226 	beq	r3,zero,1000d170 <__subdf3+0x4c4>
1000cfe8:	3421c83a 	sub	r16,r6,r16
1000cfec:	414bc83a 	sub	r5,r8,r5
1000cff0:	340d803a 	cmpltu	r6,r6,r16
1000cff4:	29a7c83a 	sub	r19,r5,r6
1000cff8:	3825883a 	mov	r18,r7
1000cffc:	983fb31e 	bne	r19,zero,1000cecc <__alt_data_end+0xf800cecc>
1000d000:	8009883a 	mov	r4,r16
1000d004:	000d7240 	call	1000d724 <__clzsi2>
1000d008:	10800804 	addi	r2,r2,32
1000d00c:	10fffe04 	addi	r3,r2,-8
1000d010:	010007c4 	movi	r4,31
1000d014:	20ffb20e 	bge	r4,r3,1000cee0 <__alt_data_end+0xf800cee0>
1000d018:	10bff604 	addi	r2,r2,-40
1000d01c:	8084983a 	sll	r2,r16,r2
1000d020:	0021883a 	mov	r16,zero
1000d024:	1c7fb50e 	bge	r3,r17,1000cefc <__alt_data_end+0xf800cefc>
1000d028:	017fe034 	movhi	r5,65408
1000d02c:	297fffc4 	addi	r5,r5,-1
1000d030:	88e3c83a 	sub	r17,r17,r3
1000d034:	114a703a 	and	r5,r2,r5
1000d038:	003f3f06 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d03c:	000b883a 	mov	r5,zero
1000d040:	0005883a 	mov	r2,zero
1000d044:	003f5306 	br	1000cd94 <__alt_data_end+0xf800cd94>
1000d048:	418cb03a 	or	r6,r8,r6
1000d04c:	300cc03a 	cmpne	r6,r6,zero
1000d050:	0007883a 	mov	r3,zero
1000d054:	003f9206 	br	1000cea0 <__alt_data_end+0xf800cea0>
1000d058:	1800961e 	bne	r3,zero,1000d2b4 <__subdf3+0x608>
1000d05c:	88800044 	addi	r2,r17,1
1000d060:	1101ffcc 	andi	r4,r2,2047
1000d064:	00c00044 	movi	r3,1
1000d068:	1900680e 	bge	r3,r4,1000d20c <__subdf3+0x560>
1000d06c:	00c1ffc4 	movi	r3,2047
1000d070:	10c0b626 	beq	r2,r3,1000d34c <__subdf3+0x6a0>
1000d074:	340d883a 	add	r6,r6,r16
1000d078:	3421803a 	cmpltu	r16,r6,r16
1000d07c:	414b883a 	add	r5,r8,r5
1000d080:	2c0b883a 	add	r5,r5,r16
1000d084:	282097fa 	slli	r16,r5,31
1000d088:	300cd07a 	srli	r6,r6,1
1000d08c:	280ad07a 	srli	r5,r5,1
1000d090:	1023883a 	mov	r17,r2
1000d094:	81a0b03a 	or	r16,r16,r6
1000d098:	003f2706 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d09c:	0081ffc4 	movi	r2,2047
1000d0a0:	88bf721e 	bne	r17,r2,1000ce6c <__alt_data_end+0xf800ce6c>
1000d0a4:	003f2406 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d0a8:	893ff844 	addi	r4,r17,-31
1000d0ac:	00c00804 	movi	r3,32
1000d0b0:	1108d83a 	srl	r4,r2,r4
1000d0b4:	28c05126 	beq	r5,r3,1000d1fc <__subdf3+0x550>
1000d0b8:	00c00fc4 	movi	r3,63
1000d0bc:	1c63c83a 	sub	r17,r3,r17
1000d0c0:	1444983a 	sll	r2,r2,r17
1000d0c4:	1420b03a 	or	r16,r2,r16
1000d0c8:	8020c03a 	cmpne	r16,r16,zero
1000d0cc:	8120b03a 	or	r16,r16,r4
1000d0d0:	000b883a 	mov	r5,zero
1000d0d4:	0023883a 	mov	r17,zero
1000d0d8:	003f1706 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d0dc:	18bff804 	addi	r2,r3,-32
1000d0e0:	01000804 	movi	r4,32
1000d0e4:	4084d83a 	srl	r2,r8,r2
1000d0e8:	19004626 	beq	r3,r4,1000d204 <__subdf3+0x558>
1000d0ec:	01001004 	movi	r4,64
1000d0f0:	20c7c83a 	sub	r3,r4,r3
1000d0f4:	40d0983a 	sll	r8,r8,r3
1000d0f8:	418cb03a 	or	r6,r8,r6
1000d0fc:	300cc03a 	cmpne	r6,r6,zero
1000d100:	308cb03a 	or	r6,r6,r2
1000d104:	0007883a 	mov	r3,zero
1000d108:	003f6506 	br	1000cea0 <__alt_data_end+0xf800cea0>
1000d10c:	88002b26 	beq	r17,zero,1000d1bc <__subdf3+0x510>
1000d110:	0101ffc4 	movi	r4,2047
1000d114:	11002f26 	beq	r2,r4,1000d1d4 <__subdf3+0x528>
1000d118:	00c7c83a 	sub	r3,zero,r3
1000d11c:	29402034 	orhi	r5,r5,128
1000d120:	01000e04 	movi	r4,56
1000d124:	20c08516 	blt	r4,r3,1000d33c <__subdf3+0x690>
1000d128:	010007c4 	movi	r4,31
1000d12c:	20c0cd16 	blt	r4,r3,1000d464 <__subdf3+0x7b8>
1000d130:	01000804 	movi	r4,32
1000d134:	20c9c83a 	sub	r4,r4,r3
1000d138:	2914983a 	sll	r10,r5,r4
1000d13c:	80d2d83a 	srl	r9,r16,r3
1000d140:	8108983a 	sll	r4,r16,r4
1000d144:	28cad83a 	srl	r5,r5,r3
1000d148:	5252b03a 	or	r9,r10,r9
1000d14c:	2006c03a 	cmpne	r3,r4,zero
1000d150:	48e0b03a 	or	r16,r9,r3
1000d154:	3421c83a 	sub	r16,r6,r16
1000d158:	414bc83a 	sub	r5,r8,r5
1000d15c:	340d803a 	cmpltu	r6,r6,r16
1000d160:	298bc83a 	sub	r5,r5,r6
1000d164:	1023883a 	mov	r17,r2
1000d168:	3825883a 	mov	r18,r7
1000d16c:	003f5106 	br	1000ceb4 <__alt_data_end+0xf800ceb4>
1000d170:	9886b03a 	or	r3,r19,r2
1000d174:	18001c1e 	bne	r3,zero,1000d1e8 <__subdf3+0x53c>
1000d178:	0013883a 	mov	r9,zero
1000d17c:	000b883a 	mov	r5,zero
1000d180:	0021883a 	mov	r16,zero
1000d184:	0023883a 	mov	r17,zero
1000d188:	003f6d06 	br	1000cf40 <__alt_data_end+0xf800cf40>
1000d18c:	008007c4 	movi	r2,31
1000d190:	10c03c16 	blt	r2,r3,1000d284 <__subdf3+0x5d8>
1000d194:	00800804 	movi	r2,32
1000d198:	10c5c83a 	sub	r2,r2,r3
1000d19c:	30c8d83a 	srl	r4,r6,r3
1000d1a0:	408e983a 	sll	r7,r8,r2
1000d1a4:	3084983a 	sll	r2,r6,r2
1000d1a8:	40c6d83a 	srl	r3,r8,r3
1000d1ac:	3908b03a 	or	r4,r7,r4
1000d1b0:	1004c03a 	cmpne	r2,r2,zero
1000d1b4:	208cb03a 	or	r6,r4,r2
1000d1b8:	003f1506 	br	1000ce10 <__alt_data_end+0xf800ce10>
1000d1bc:	2c08b03a 	or	r4,r5,r16
1000d1c0:	20000426 	beq	r4,zero,1000d1d4 <__subdf3+0x528>
1000d1c4:	00c6303a 	nor	r3,zero,r3
1000d1c8:	183fe226 	beq	r3,zero,1000d154 <__alt_data_end+0xf800d154>
1000d1cc:	0101ffc4 	movi	r4,2047
1000d1d0:	113fd31e 	bne	r2,r4,1000d120 <__alt_data_end+0xf800d120>
1000d1d4:	400b883a 	mov	r5,r8
1000d1d8:	3021883a 	mov	r16,r6
1000d1dc:	1023883a 	mov	r17,r2
1000d1e0:	3825883a 	mov	r18,r7
1000d1e4:	003ed406 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d1e8:	1021883a 	mov	r16,r2
1000d1ec:	003f3606 	br	1000cec8 <__alt_data_end+0xf800cec8>
1000d1f0:	0081ffc4 	movi	r2,2047
1000d1f4:	88bf011e 	bne	r17,r2,1000cdfc <__alt_data_end+0xf800cdfc>
1000d1f8:	003ecf06 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d1fc:	0005883a 	mov	r2,zero
1000d200:	003fb006 	br	1000d0c4 <__alt_data_end+0xf800d0c4>
1000d204:	0011883a 	mov	r8,zero
1000d208:	003fbb06 	br	1000d0f8 <__alt_data_end+0xf800d0f8>
1000d20c:	2c04b03a 	or	r2,r5,r16
1000d210:	88007f1e 	bne	r17,zero,1000d410 <__subdf3+0x764>
1000d214:	1000a926 	beq	r2,zero,1000d4bc <__subdf3+0x810>
1000d218:	4184b03a 	or	r2,r8,r6
1000d21c:	103ec626 	beq	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000d220:	340d883a 	add	r6,r6,r16
1000d224:	414b883a 	add	r5,r8,r5
1000d228:	3421803a 	cmpltu	r16,r6,r16
1000d22c:	2c0b883a 	add	r5,r5,r16
1000d230:	2880202c 	andhi	r2,r5,128
1000d234:	1000bb26 	beq	r2,zero,1000d524 <__subdf3+0x878>
1000d238:	00bfe034 	movhi	r2,65408
1000d23c:	10bfffc4 	addi	r2,r2,-1
1000d240:	288a703a 	and	r5,r5,r2
1000d244:	3021883a 	mov	r16,r6
1000d248:	1823883a 	mov	r17,r3
1000d24c:	003eba06 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d250:	2c04b03a 	or	r2,r5,r16
1000d254:	8800311e 	bne	r17,zero,1000d31c <__subdf3+0x670>
1000d258:	1000451e 	bne	r2,zero,1000d370 <__subdf3+0x6c4>
1000d25c:	4184b03a 	or	r2,r8,r6
1000d260:	10000426 	beq	r2,zero,1000d274 <__subdf3+0x5c8>
1000d264:	400b883a 	mov	r5,r8
1000d268:	3021883a 	mov	r16,r6
1000d26c:	3825883a 	mov	r18,r7
1000d270:	003eb106 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d274:	0013883a 	mov	r9,zero
1000d278:	000b883a 	mov	r5,zero
1000d27c:	0021883a 	mov	r16,zero
1000d280:	003f2f06 	br	1000cf40 <__alt_data_end+0xf800cf40>
1000d284:	18bff804 	addi	r2,r3,-32
1000d288:	01000804 	movi	r4,32
1000d28c:	4084d83a 	srl	r2,r8,r2
1000d290:	19007226 	beq	r3,r4,1000d45c <__subdf3+0x7b0>
1000d294:	01001004 	movi	r4,64
1000d298:	20c7c83a 	sub	r3,r4,r3
1000d29c:	40d0983a 	sll	r8,r8,r3
1000d2a0:	418cb03a 	or	r6,r8,r6
1000d2a4:	300cc03a 	cmpne	r6,r6,zero
1000d2a8:	308cb03a 	or	r6,r6,r2
1000d2ac:	0007883a 	mov	r3,zero
1000d2b0:	003ed706 	br	1000ce10 <__alt_data_end+0xf800ce10>
1000d2b4:	8800291e 	bne	r17,zero,1000d35c <__subdf3+0x6b0>
1000d2b8:	2c08b03a 	or	r4,r5,r16
1000d2bc:	20005026 	beq	r4,zero,1000d400 <__subdf3+0x754>
1000d2c0:	00c6303a 	nor	r3,zero,r3
1000d2c4:	18000f26 	beq	r3,zero,1000d304 <__subdf3+0x658>
1000d2c8:	0101ffc4 	movi	r4,2047
1000d2cc:	11004c26 	beq	r2,r4,1000d400 <__subdf3+0x754>
1000d2d0:	01000e04 	movi	r4,56
1000d2d4:	20c07516 	blt	r4,r3,1000d4ac <__subdf3+0x800>
1000d2d8:	010007c4 	movi	r4,31
1000d2dc:	20c08316 	blt	r4,r3,1000d4ec <__subdf3+0x840>
1000d2e0:	01000804 	movi	r4,32
1000d2e4:	20c9c83a 	sub	r4,r4,r3
1000d2e8:	2914983a 	sll	r10,r5,r4
1000d2ec:	80ced83a 	srl	r7,r16,r3
1000d2f0:	8108983a 	sll	r4,r16,r4
1000d2f4:	28cad83a 	srl	r5,r5,r3
1000d2f8:	51ceb03a 	or	r7,r10,r7
1000d2fc:	2006c03a 	cmpne	r3,r4,zero
1000d300:	38e0b03a 	or	r16,r7,r3
1000d304:	81a1883a 	add	r16,r16,r6
1000d308:	2a0b883a 	add	r5,r5,r8
1000d30c:	818d803a 	cmpltu	r6,r16,r6
1000d310:	298b883a 	add	r5,r5,r6
1000d314:	1023883a 	mov	r17,r2
1000d318:	003ec206 	br	1000ce24 <__alt_data_end+0xf800ce24>
1000d31c:	1000221e 	bne	r2,zero,1000d3a8 <__subdf3+0x6fc>
1000d320:	4184b03a 	or	r2,r8,r6
1000d324:	10005b26 	beq	r2,zero,1000d494 <__subdf3+0x7e8>
1000d328:	400b883a 	mov	r5,r8
1000d32c:	3021883a 	mov	r16,r6
1000d330:	3825883a 	mov	r18,r7
1000d334:	0441ffc4 	movi	r17,2047
1000d338:	003e7f06 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d33c:	2c20b03a 	or	r16,r5,r16
1000d340:	8020c03a 	cmpne	r16,r16,zero
1000d344:	000b883a 	mov	r5,zero
1000d348:	003f8206 	br	1000d154 <__alt_data_end+0xf800d154>
1000d34c:	1023883a 	mov	r17,r2
1000d350:	000b883a 	mov	r5,zero
1000d354:	0021883a 	mov	r16,zero
1000d358:	003ef906 	br	1000cf40 <__alt_data_end+0xf800cf40>
1000d35c:	0101ffc4 	movi	r4,2047
1000d360:	11002726 	beq	r2,r4,1000d400 <__subdf3+0x754>
1000d364:	00c7c83a 	sub	r3,zero,r3
1000d368:	29402034 	orhi	r5,r5,128
1000d36c:	003fd806 	br	1000d2d0 <__alt_data_end+0xf800d2d0>
1000d370:	4184b03a 	or	r2,r8,r6
1000d374:	103e7026 	beq	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000d378:	8185c83a 	sub	r2,r16,r6
1000d37c:	8089803a 	cmpltu	r4,r16,r2
1000d380:	2a07c83a 	sub	r3,r5,r8
1000d384:	1907c83a 	sub	r3,r3,r4
1000d388:	1900202c 	andhi	r4,r3,128
1000d38c:	20005226 	beq	r4,zero,1000d4d8 <__subdf3+0x82c>
1000d390:	3421c83a 	sub	r16,r6,r16
1000d394:	414bc83a 	sub	r5,r8,r5
1000d398:	340d803a 	cmpltu	r6,r6,r16
1000d39c:	298bc83a 	sub	r5,r5,r6
1000d3a0:	3825883a 	mov	r18,r7
1000d3a4:	003e6406 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d3a8:	4184b03a 	or	r2,r8,r6
1000d3ac:	10002926 	beq	r2,zero,1000d454 <__subdf3+0x7a8>
1000d3b0:	2804d0fa 	srli	r2,r5,3
1000d3b4:	8020d0fa 	srli	r16,r16,3
1000d3b8:	280a977a 	slli	r5,r5,29
1000d3bc:	10c0022c 	andhi	r3,r2,8
1000d3c0:	2c20b03a 	or	r16,r5,r16
1000d3c4:	18000826 	beq	r3,zero,1000d3e8 <__subdf3+0x73c>
1000d3c8:	4006d0fa 	srli	r3,r8,3
1000d3cc:	1900022c 	andhi	r4,r3,8
1000d3d0:	2000051e 	bne	r4,zero,1000d3e8 <__subdf3+0x73c>
1000d3d4:	300cd0fa 	srli	r6,r6,3
1000d3d8:	4010977a 	slli	r8,r8,29
1000d3dc:	1805883a 	mov	r2,r3
1000d3e0:	3825883a 	mov	r18,r7
1000d3e4:	41a0b03a 	or	r16,r8,r6
1000d3e8:	800ad77a 	srli	r5,r16,29
1000d3ec:	100490fa 	slli	r2,r2,3
1000d3f0:	802090fa 	slli	r16,r16,3
1000d3f4:	0441ffc4 	movi	r17,2047
1000d3f8:	288ab03a 	or	r5,r5,r2
1000d3fc:	003e4e06 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d400:	400b883a 	mov	r5,r8
1000d404:	3021883a 	mov	r16,r6
1000d408:	1023883a 	mov	r17,r2
1000d40c:	003e4a06 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d410:	10002d26 	beq	r2,zero,1000d4c8 <__subdf3+0x81c>
1000d414:	4184b03a 	or	r2,r8,r6
1000d418:	10000e26 	beq	r2,zero,1000d454 <__subdf3+0x7a8>
1000d41c:	2804d0fa 	srli	r2,r5,3
1000d420:	8020d0fa 	srli	r16,r16,3
1000d424:	280a977a 	slli	r5,r5,29
1000d428:	10c0022c 	andhi	r3,r2,8
1000d42c:	2c20b03a 	or	r16,r5,r16
1000d430:	183fed26 	beq	r3,zero,1000d3e8 <__alt_data_end+0xf800d3e8>
1000d434:	4006d0fa 	srli	r3,r8,3
1000d438:	1900022c 	andhi	r4,r3,8
1000d43c:	203fea1e 	bne	r4,zero,1000d3e8 <__alt_data_end+0xf800d3e8>
1000d440:	300cd0fa 	srli	r6,r6,3
1000d444:	4010977a 	slli	r8,r8,29
1000d448:	1805883a 	mov	r2,r3
1000d44c:	41a0b03a 	or	r16,r8,r6
1000d450:	003fe506 	br	1000d3e8 <__alt_data_end+0xf800d3e8>
1000d454:	0441ffc4 	movi	r17,2047
1000d458:	003e3706 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d45c:	0011883a 	mov	r8,zero
1000d460:	003f8f06 	br	1000d2a0 <__alt_data_end+0xf800d2a0>
1000d464:	193ff804 	addi	r4,r3,-32
1000d468:	02400804 	movi	r9,32
1000d46c:	2908d83a 	srl	r4,r5,r4
1000d470:	1a402a26 	beq	r3,r9,1000d51c <__subdf3+0x870>
1000d474:	02401004 	movi	r9,64
1000d478:	48c7c83a 	sub	r3,r9,r3
1000d47c:	28ca983a 	sll	r5,r5,r3
1000d480:	2c20b03a 	or	r16,r5,r16
1000d484:	8020c03a 	cmpne	r16,r16,zero
1000d488:	8120b03a 	or	r16,r16,r4
1000d48c:	000b883a 	mov	r5,zero
1000d490:	003f3006 	br	1000d154 <__alt_data_end+0xf800d154>
1000d494:	0013883a 	mov	r9,zero
1000d498:	01402034 	movhi	r5,128
1000d49c:	297fffc4 	addi	r5,r5,-1
1000d4a0:	043ffe04 	movi	r16,-8
1000d4a4:	0441ffc4 	movi	r17,2047
1000d4a8:	003ea506 	br	1000cf40 <__alt_data_end+0xf800cf40>
1000d4ac:	2c20b03a 	or	r16,r5,r16
1000d4b0:	8020c03a 	cmpne	r16,r16,zero
1000d4b4:	000b883a 	mov	r5,zero
1000d4b8:	003f9206 	br	1000d304 <__alt_data_end+0xf800d304>
1000d4bc:	400b883a 	mov	r5,r8
1000d4c0:	3021883a 	mov	r16,r6
1000d4c4:	003e1c06 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d4c8:	400b883a 	mov	r5,r8
1000d4cc:	3021883a 	mov	r16,r6
1000d4d0:	0441ffc4 	movi	r17,2047
1000d4d4:	003e1806 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d4d8:	1888b03a 	or	r4,r3,r2
1000d4dc:	203f6526 	beq	r4,zero,1000d274 <__alt_data_end+0xf800d274>
1000d4e0:	180b883a 	mov	r5,r3
1000d4e4:	1021883a 	mov	r16,r2
1000d4e8:	003e1306 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d4ec:	193ff804 	addi	r4,r3,-32
1000d4f0:	01c00804 	movi	r7,32
1000d4f4:	2908d83a 	srl	r4,r5,r4
1000d4f8:	19c00c26 	beq	r3,r7,1000d52c <__subdf3+0x880>
1000d4fc:	01c01004 	movi	r7,64
1000d500:	38c7c83a 	sub	r3,r7,r3
1000d504:	28ca983a 	sll	r5,r5,r3
1000d508:	2c20b03a 	or	r16,r5,r16
1000d50c:	8020c03a 	cmpne	r16,r16,zero
1000d510:	8120b03a 	or	r16,r16,r4
1000d514:	000b883a 	mov	r5,zero
1000d518:	003f7a06 	br	1000d304 <__alt_data_end+0xf800d304>
1000d51c:	000b883a 	mov	r5,zero
1000d520:	003fd706 	br	1000d480 <__alt_data_end+0xf800d480>
1000d524:	3021883a 	mov	r16,r6
1000d528:	003e0306 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000d52c:	000b883a 	mov	r5,zero
1000d530:	003ff506 	br	1000d508 <__alt_data_end+0xf800d508>

1000d534 <__fixdfsi>:
1000d534:	2806d53a 	srli	r3,r5,20
1000d538:	00800434 	movhi	r2,16
1000d53c:	10bfffc4 	addi	r2,r2,-1
1000d540:	0180ff84 	movi	r6,1022
1000d544:	18c1ffcc 	andi	r3,r3,2047
1000d548:	2884703a 	and	r2,r5,r2
1000d54c:	280ad7fa 	srli	r5,r5,31
1000d550:	30c0120e 	bge	r6,r3,1000d59c <__fixdfsi+0x68>
1000d554:	01810744 	movi	r6,1053
1000d558:	30c00c16 	blt	r6,r3,1000d58c <__fixdfsi+0x58>
1000d55c:	01810cc4 	movi	r6,1075
1000d560:	30cdc83a 	sub	r6,r6,r3
1000d564:	01c007c4 	movi	r7,31
1000d568:	10800434 	orhi	r2,r2,16
1000d56c:	39800d16 	blt	r7,r6,1000d5a4 <__fixdfsi+0x70>
1000d570:	18fefb44 	addi	r3,r3,-1043
1000d574:	2188d83a 	srl	r4,r4,r6
1000d578:	10c4983a 	sll	r2,r2,r3
1000d57c:	2084b03a 	or	r2,r4,r2
1000d580:	28000726 	beq	r5,zero,1000d5a0 <__fixdfsi+0x6c>
1000d584:	0085c83a 	sub	r2,zero,r2
1000d588:	f800283a 	ret
1000d58c:	00a00034 	movhi	r2,32768
1000d590:	10bfffc4 	addi	r2,r2,-1
1000d594:	2885883a 	add	r2,r5,r2
1000d598:	f800283a 	ret
1000d59c:	0005883a 	mov	r2,zero
1000d5a0:	f800283a 	ret
1000d5a4:	010104c4 	movi	r4,1043
1000d5a8:	20c7c83a 	sub	r3,r4,r3
1000d5ac:	10c4d83a 	srl	r2,r2,r3
1000d5b0:	003ff306 	br	1000d580 <__alt_data_end+0xf800d580>

1000d5b4 <__floatsidf>:
1000d5b4:	defffd04 	addi	sp,sp,-12
1000d5b8:	dc000015 	stw	r16,0(sp)
1000d5bc:	dfc00215 	stw	ra,8(sp)
1000d5c0:	dc400115 	stw	r17,4(sp)
1000d5c4:	2021883a 	mov	r16,r4
1000d5c8:	20002926 	beq	r4,zero,1000d670 <__floatsidf+0xbc>
1000d5cc:	2022d7fa 	srli	r17,r4,31
1000d5d0:	88000126 	beq	r17,zero,1000d5d8 <__floatsidf+0x24>
1000d5d4:	0121c83a 	sub	r16,zero,r4
1000d5d8:	8009883a 	mov	r4,r16
1000d5dc:	000d7240 	call	1000d724 <__clzsi2>
1000d5e0:	01810784 	movi	r6,1054
1000d5e4:	00c00284 	movi	r3,10
1000d5e8:	308dc83a 	sub	r6,r6,r2
1000d5ec:	1880150e 	bge	r3,r2,1000d644 <__floatsidf+0x90>
1000d5f0:	113ffd44 	addi	r4,r2,-11
1000d5f4:	8108983a 	sll	r4,r16,r4
1000d5f8:	00800434 	movhi	r2,16
1000d5fc:	10bfffc4 	addi	r2,r2,-1
1000d600:	3181ffcc 	andi	r6,r6,2047
1000d604:	2088703a 	and	r4,r4,r2
1000d608:	880b883a 	mov	r5,r17
1000d60c:	0005883a 	mov	r2,zero
1000d610:	300c953a 	slli	r6,r6,20
1000d614:	29403fcc 	andi	r5,r5,255
1000d618:	280a97fa 	slli	r5,r5,31
1000d61c:	00c00434 	movhi	r3,16
1000d620:	18ffffc4 	addi	r3,r3,-1
1000d624:	20c8703a 	and	r4,r4,r3
1000d628:	2186b03a 	or	r3,r4,r6
1000d62c:	1946b03a 	or	r3,r3,r5
1000d630:	dfc00217 	ldw	ra,8(sp)
1000d634:	dc400117 	ldw	r17,4(sp)
1000d638:	dc000017 	ldw	r16,0(sp)
1000d63c:	dec00304 	addi	sp,sp,12
1000d640:	f800283a 	ret
1000d644:	010002c4 	movi	r4,11
1000d648:	2089c83a 	sub	r4,r4,r2
1000d64c:	8108d83a 	srl	r4,r16,r4
1000d650:	10800544 	addi	r2,r2,21
1000d654:	00c00434 	movhi	r3,16
1000d658:	18ffffc4 	addi	r3,r3,-1
1000d65c:	8084983a 	sll	r2,r16,r2
1000d660:	20c8703a 	and	r4,r4,r3
1000d664:	3181ffcc 	andi	r6,r6,2047
1000d668:	880b883a 	mov	r5,r17
1000d66c:	003fe806 	br	1000d610 <__alt_data_end+0xf800d610>
1000d670:	000b883a 	mov	r5,zero
1000d674:	000d883a 	mov	r6,zero
1000d678:	0009883a 	mov	r4,zero
1000d67c:	0005883a 	mov	r2,zero
1000d680:	003fe306 	br	1000d610 <__alt_data_end+0xf800d610>

1000d684 <__floatunsidf>:
1000d684:	defffe04 	addi	sp,sp,-8
1000d688:	dc000015 	stw	r16,0(sp)
1000d68c:	dfc00115 	stw	ra,4(sp)
1000d690:	2021883a 	mov	r16,r4
1000d694:	20001f26 	beq	r4,zero,1000d714 <__floatunsidf+0x90>
1000d698:	000d7240 	call	1000d724 <__clzsi2>
1000d69c:	01010784 	movi	r4,1054
1000d6a0:	00c00284 	movi	r3,10
1000d6a4:	2089c83a 	sub	r4,r4,r2
1000d6a8:	1880100e 	bge	r3,r2,1000d6ec <__floatunsidf+0x68>
1000d6ac:	117ffd44 	addi	r5,r2,-11
1000d6b0:	814a983a 	sll	r5,r16,r5
1000d6b4:	00800434 	movhi	r2,16
1000d6b8:	10bfffc4 	addi	r2,r2,-1
1000d6bc:	2101ffcc 	andi	r4,r4,2047
1000d6c0:	288a703a 	and	r5,r5,r2
1000d6c4:	0005883a 	mov	r2,zero
1000d6c8:	2008953a 	slli	r4,r4,20
1000d6cc:	00c00434 	movhi	r3,16
1000d6d0:	18ffffc4 	addi	r3,r3,-1
1000d6d4:	28c6703a 	and	r3,r5,r3
1000d6d8:	1906b03a 	or	r3,r3,r4
1000d6dc:	dfc00117 	ldw	ra,4(sp)
1000d6e0:	dc000017 	ldw	r16,0(sp)
1000d6e4:	dec00204 	addi	sp,sp,8
1000d6e8:	f800283a 	ret
1000d6ec:	014002c4 	movi	r5,11
1000d6f0:	288bc83a 	sub	r5,r5,r2
1000d6f4:	814ad83a 	srl	r5,r16,r5
1000d6f8:	10800544 	addi	r2,r2,21
1000d6fc:	00c00434 	movhi	r3,16
1000d700:	18ffffc4 	addi	r3,r3,-1
1000d704:	8084983a 	sll	r2,r16,r2
1000d708:	28ca703a 	and	r5,r5,r3
1000d70c:	2101ffcc 	andi	r4,r4,2047
1000d710:	003fed06 	br	1000d6c8 <__alt_data_end+0xf800d6c8>
1000d714:	0009883a 	mov	r4,zero
1000d718:	000b883a 	mov	r5,zero
1000d71c:	0005883a 	mov	r2,zero
1000d720:	003fe906 	br	1000d6c8 <__alt_data_end+0xf800d6c8>

1000d724 <__clzsi2>:
1000d724:	00bfffd4 	movui	r2,65535
1000d728:	11000b36 	bltu	r2,r4,1000d758 <__clzsi2+0x34>
1000d72c:	00803fc4 	movi	r2,255
1000d730:	11001e2e 	bgeu	r2,r4,1000d7ac <__clzsi2+0x88>
1000d734:	00c00204 	movi	r3,8
1000d738:	20c8d83a 	srl	r4,r4,r3
1000d73c:	00c40074 	movhi	r3,4097
1000d740:	18c01204 	addi	r3,r3,72
1000d744:	00800604 	movi	r2,24
1000d748:	1909883a 	add	r4,r3,r4
1000d74c:	20c00003 	ldbu	r3,0(r4)
1000d750:	10c5c83a 	sub	r2,r2,r3
1000d754:	f800283a 	ret
1000d758:	00804034 	movhi	r2,256
1000d75c:	10bfffc4 	addi	r2,r2,-1
1000d760:	11000936 	bltu	r2,r4,1000d788 <__clzsi2+0x64>
1000d764:	00800404 	movi	r2,16
1000d768:	1007883a 	mov	r3,r2
1000d76c:	20c8d83a 	srl	r4,r4,r3
1000d770:	00c40074 	movhi	r3,4097
1000d774:	18c01204 	addi	r3,r3,72
1000d778:	1909883a 	add	r4,r3,r4
1000d77c:	20c00003 	ldbu	r3,0(r4)
1000d780:	10c5c83a 	sub	r2,r2,r3
1000d784:	f800283a 	ret
1000d788:	00c00604 	movi	r3,24
1000d78c:	20c8d83a 	srl	r4,r4,r3
1000d790:	00c40074 	movhi	r3,4097
1000d794:	18c01204 	addi	r3,r3,72
1000d798:	00800204 	movi	r2,8
1000d79c:	1909883a 	add	r4,r3,r4
1000d7a0:	20c00003 	ldbu	r3,0(r4)
1000d7a4:	10c5c83a 	sub	r2,r2,r3
1000d7a8:	f800283a 	ret
1000d7ac:	0007883a 	mov	r3,zero
1000d7b0:	20c8d83a 	srl	r4,r4,r3
1000d7b4:	00c40074 	movhi	r3,4097
1000d7b8:	18c01204 	addi	r3,r3,72
1000d7bc:	00800804 	movi	r2,32
1000d7c0:	1909883a 	add	r4,r3,r4
1000d7c4:	20c00003 	ldbu	r3,0(r4)
1000d7c8:	10c5c83a 	sub	r2,r2,r3
1000d7cc:	f800283a 	ret

1000d7d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d7d0:	defffe04 	addi	sp,sp,-8
1000d7d4:	dfc00115 	stw	ra,4(sp)
1000d7d8:	df000015 	stw	fp,0(sp)
1000d7dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d7e0:	00840074 	movhi	r2,4097
1000d7e4:	10871704 	addi	r2,r2,7260
1000d7e8:	10800017 	ldw	r2,0(r2)
1000d7ec:	10000526 	beq	r2,zero,1000d804 <alt_get_errno+0x34>
1000d7f0:	00840074 	movhi	r2,4097
1000d7f4:	10871704 	addi	r2,r2,7260
1000d7f8:	10800017 	ldw	r2,0(r2)
1000d7fc:	103ee83a 	callr	r2
1000d800:	00000206 	br	1000d80c <alt_get_errno+0x3c>
1000d804:	00840074 	movhi	r2,4097
1000d808:	108ddf04 	addi	r2,r2,14204
}
1000d80c:	e037883a 	mov	sp,fp
1000d810:	dfc00117 	ldw	ra,4(sp)
1000d814:	df000017 	ldw	fp,0(sp)
1000d818:	dec00204 	addi	sp,sp,8
1000d81c:	f800283a 	ret

1000d820 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000d820:	defffb04 	addi	sp,sp,-20
1000d824:	dfc00415 	stw	ra,16(sp)
1000d828:	df000315 	stw	fp,12(sp)
1000d82c:	df000304 	addi	fp,sp,12
1000d830:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000d834:	e0bfff17 	ldw	r2,-4(fp)
1000d838:	10000816 	blt	r2,zero,1000d85c <close+0x3c>
1000d83c:	e13fff17 	ldw	r4,-4(fp)
1000d840:	01400304 	movi	r5,12
1000d844:	000b0240 	call	1000b024 <__mulsi3>
1000d848:	1007883a 	mov	r3,r2
1000d84c:	00840074 	movhi	r2,4097
1000d850:	10829204 	addi	r2,r2,2632
1000d854:	1885883a 	add	r2,r3,r2
1000d858:	00000106 	br	1000d860 <close+0x40>
1000d85c:	0005883a 	mov	r2,zero
1000d860:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000d864:	e0bffd17 	ldw	r2,-12(fp)
1000d868:	10001826 	beq	r2,zero,1000d8cc <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000d86c:	e0bffd17 	ldw	r2,-12(fp)
1000d870:	10800017 	ldw	r2,0(r2)
1000d874:	10800417 	ldw	r2,16(r2)
1000d878:	10000626 	beq	r2,zero,1000d894 <close+0x74>
1000d87c:	e0bffd17 	ldw	r2,-12(fp)
1000d880:	10800017 	ldw	r2,0(r2)
1000d884:	10800417 	ldw	r2,16(r2)
1000d888:	e13ffd17 	ldw	r4,-12(fp)
1000d88c:	103ee83a 	callr	r2
1000d890:	00000106 	br	1000d898 <close+0x78>
1000d894:	0005883a 	mov	r2,zero
1000d898:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000d89c:	e13fff17 	ldw	r4,-4(fp)
1000d8a0:	000dfb40 	call	1000dfb4 <alt_release_fd>
    if (rval < 0)
1000d8a4:	e0bffe17 	ldw	r2,-8(fp)
1000d8a8:	1000060e 	bge	r2,zero,1000d8c4 <close+0xa4>
    {
      ALT_ERRNO = -rval;
1000d8ac:	000d7d00 	call	1000d7d0 <alt_get_errno>
1000d8b0:	e0fffe17 	ldw	r3,-8(fp)
1000d8b4:	00c7c83a 	sub	r3,zero,r3
1000d8b8:	10c00015 	stw	r3,0(r2)
      return -1;
1000d8bc:	00bfffc4 	movi	r2,-1
1000d8c0:	00000606 	br	1000d8dc <close+0xbc>
    }
    return 0;
1000d8c4:	0005883a 	mov	r2,zero
1000d8c8:	00000406 	br	1000d8dc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d8cc:	000d7d00 	call	1000d7d0 <alt_get_errno>
1000d8d0:	00c01444 	movi	r3,81
1000d8d4:	10c00015 	stw	r3,0(r2)
    return -1;
1000d8d8:	00bfffc4 	movi	r2,-1
  }
}
1000d8dc:	e037883a 	mov	sp,fp
1000d8e0:	dfc00117 	ldw	ra,4(sp)
1000d8e4:	df000017 	ldw	fp,0(sp)
1000d8e8:	dec00204 	addi	sp,sp,8
1000d8ec:	f800283a 	ret

1000d8f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000d8f0:	defffc04 	addi	sp,sp,-16
1000d8f4:	df000315 	stw	fp,12(sp)
1000d8f8:	df000304 	addi	fp,sp,12
1000d8fc:	e13ffd15 	stw	r4,-12(fp)
1000d900:	e17ffe15 	stw	r5,-8(fp)
1000d904:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000d908:	e0bfff17 	ldw	r2,-4(fp)
}
1000d90c:	e037883a 	mov	sp,fp
1000d910:	df000017 	ldw	fp,0(sp)
1000d914:	dec00104 	addi	sp,sp,4
1000d918:	f800283a 	ret

1000d91c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000d91c:	defffa04 	addi	sp,sp,-24
1000d920:	dfc00515 	stw	ra,20(sp)
1000d924:	df000415 	stw	fp,16(sp)
1000d928:	df000404 	addi	fp,sp,16
1000d92c:	e13ffe15 	stw	r4,-8(fp)
1000d930:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000d934:	e0bfff17 	ldw	r2,-4(fp)
1000d938:	10800017 	ldw	r2,0(r2)
1000d93c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000d940:	e13ffe17 	ldw	r4,-8(fp)
1000d944:	00077100 	call	10007710 <strlen>
1000d948:	10800044 	addi	r2,r2,1
1000d94c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000d950:	00000d06 	br	1000d988 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000d954:	e0bffc17 	ldw	r2,-16(fp)
1000d958:	10c00217 	ldw	r3,8(r2)
1000d95c:	e0bffd17 	ldw	r2,-12(fp)
1000d960:	1809883a 	mov	r4,r3
1000d964:	e17ffe17 	ldw	r5,-8(fp)
1000d968:	100d883a 	mov	r6,r2
1000d96c:	000fae40 	call	1000fae4 <memcmp>
1000d970:	1000021e 	bne	r2,zero,1000d97c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000d974:	e0bffc17 	ldw	r2,-16(fp)
1000d978:	00000706 	br	1000d998 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000d97c:	e0bffc17 	ldw	r2,-16(fp)
1000d980:	10800017 	ldw	r2,0(r2)
1000d984:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000d988:	e0fffc17 	ldw	r3,-16(fp)
1000d98c:	e0bfff17 	ldw	r2,-4(fp)
1000d990:	18bff01e 	bne	r3,r2,1000d954 <__alt_data_end+0xf800d954>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000d994:	0005883a 	mov	r2,zero
}
1000d998:	e037883a 	mov	sp,fp
1000d99c:	dfc00117 	ldw	ra,4(sp)
1000d9a0:	df000017 	ldw	fp,0(sp)
1000d9a4:	dec00204 	addi	sp,sp,8
1000d9a8:	f800283a 	ret

1000d9ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d9ac:	defffe04 	addi	sp,sp,-8
1000d9b0:	dfc00115 	stw	ra,4(sp)
1000d9b4:	df000015 	stw	fp,0(sp)
1000d9b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d9bc:	00840074 	movhi	r2,4097
1000d9c0:	10871704 	addi	r2,r2,7260
1000d9c4:	10800017 	ldw	r2,0(r2)
1000d9c8:	10000526 	beq	r2,zero,1000d9e0 <alt_get_errno+0x34>
1000d9cc:	00840074 	movhi	r2,4097
1000d9d0:	10871704 	addi	r2,r2,7260
1000d9d4:	10800017 	ldw	r2,0(r2)
1000d9d8:	103ee83a 	callr	r2
1000d9dc:	00000206 	br	1000d9e8 <alt_get_errno+0x3c>
1000d9e0:	00840074 	movhi	r2,4097
1000d9e4:	108ddf04 	addi	r2,r2,14204
}
1000d9e8:	e037883a 	mov	sp,fp
1000d9ec:	dfc00117 	ldw	ra,4(sp)
1000d9f0:	df000017 	ldw	fp,0(sp)
1000d9f4:	dec00204 	addi	sp,sp,8
1000d9f8:	f800283a 	ret

1000d9fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000d9fc:	defffb04 	addi	sp,sp,-20
1000da00:	dfc00415 	stw	ra,16(sp)
1000da04:	df000315 	stw	fp,12(sp)
1000da08:	df000304 	addi	fp,sp,12
1000da0c:	e13ffe15 	stw	r4,-8(fp)
1000da10:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000da14:	e0bffe17 	ldw	r2,-8(fp)
1000da18:	10000816 	blt	r2,zero,1000da3c <fstat+0x40>
1000da1c:	e13ffe17 	ldw	r4,-8(fp)
1000da20:	01400304 	movi	r5,12
1000da24:	000b0240 	call	1000b024 <__mulsi3>
1000da28:	1007883a 	mov	r3,r2
1000da2c:	00840074 	movhi	r2,4097
1000da30:	10829204 	addi	r2,r2,2632
1000da34:	1885883a 	add	r2,r3,r2
1000da38:	00000106 	br	1000da40 <fstat+0x44>
1000da3c:	0005883a 	mov	r2,zero
1000da40:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000da44:	e0bffd17 	ldw	r2,-12(fp)
1000da48:	10001026 	beq	r2,zero,1000da8c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000da4c:	e0bffd17 	ldw	r2,-12(fp)
1000da50:	10800017 	ldw	r2,0(r2)
1000da54:	10800817 	ldw	r2,32(r2)
1000da58:	10000726 	beq	r2,zero,1000da78 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000da5c:	e0bffd17 	ldw	r2,-12(fp)
1000da60:	10800017 	ldw	r2,0(r2)
1000da64:	10800817 	ldw	r2,32(r2)
1000da68:	e13ffd17 	ldw	r4,-12(fp)
1000da6c:	e17fff17 	ldw	r5,-4(fp)
1000da70:	103ee83a 	callr	r2
1000da74:	00000906 	br	1000da9c <fstat+0xa0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000da78:	e0bfff17 	ldw	r2,-4(fp)
1000da7c:	00c80004 	movi	r3,8192
1000da80:	10c00115 	stw	r3,4(r2)
      return 0;
1000da84:	0005883a 	mov	r2,zero
1000da88:	00000406 	br	1000da9c <fstat+0xa0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000da8c:	000d9ac0 	call	1000d9ac <alt_get_errno>
1000da90:	00c01444 	movi	r3,81
1000da94:	10c00015 	stw	r3,0(r2)
    return -1;
1000da98:	00bfffc4 	movi	r2,-1
  }
}
1000da9c:	e037883a 	mov	sp,fp
1000daa0:	dfc00117 	ldw	ra,4(sp)
1000daa4:	df000017 	ldw	fp,0(sp)
1000daa8:	dec00204 	addi	sp,sp,8
1000daac:	f800283a 	ret

1000dab0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dab0:	defffe04 	addi	sp,sp,-8
1000dab4:	dfc00115 	stw	ra,4(sp)
1000dab8:	df000015 	stw	fp,0(sp)
1000dabc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dac0:	00840074 	movhi	r2,4097
1000dac4:	10871704 	addi	r2,r2,7260
1000dac8:	10800017 	ldw	r2,0(r2)
1000dacc:	10000526 	beq	r2,zero,1000dae4 <alt_get_errno+0x34>
1000dad0:	00840074 	movhi	r2,4097
1000dad4:	10871704 	addi	r2,r2,7260
1000dad8:	10800017 	ldw	r2,0(r2)
1000dadc:	103ee83a 	callr	r2
1000dae0:	00000206 	br	1000daec <alt_get_errno+0x3c>
1000dae4:	00840074 	movhi	r2,4097
1000dae8:	108ddf04 	addi	r2,r2,14204
}
1000daec:	e037883a 	mov	sp,fp
1000daf0:	dfc00117 	ldw	ra,4(sp)
1000daf4:	df000017 	ldw	fp,0(sp)
1000daf8:	dec00204 	addi	sp,sp,8
1000dafc:	f800283a 	ret

1000db00 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000db00:	deffed04 	addi	sp,sp,-76
1000db04:	dfc01215 	stw	ra,72(sp)
1000db08:	df001115 	stw	fp,68(sp)
1000db0c:	df001104 	addi	fp,sp,68
1000db10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000db14:	e0bfff17 	ldw	r2,-4(fp)
1000db18:	10000816 	blt	r2,zero,1000db3c <isatty+0x3c>
1000db1c:	e13fff17 	ldw	r4,-4(fp)
1000db20:	01400304 	movi	r5,12
1000db24:	000b0240 	call	1000b024 <__mulsi3>
1000db28:	1007883a 	mov	r3,r2
1000db2c:	00840074 	movhi	r2,4097
1000db30:	10829204 	addi	r2,r2,2632
1000db34:	1885883a 	add	r2,r3,r2
1000db38:	00000106 	br	1000db40 <isatty+0x40>
1000db3c:	0005883a 	mov	r2,zero
1000db40:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000db44:	e0bfef17 	ldw	r2,-68(fp)
1000db48:	10000e26 	beq	r2,zero,1000db84 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000db4c:	e0bfef17 	ldw	r2,-68(fp)
1000db50:	10800017 	ldw	r2,0(r2)
1000db54:	10800817 	ldw	r2,32(r2)
1000db58:	1000021e 	bne	r2,zero,1000db64 <isatty+0x64>
    {
      return 1;
1000db5c:	00800044 	movi	r2,1
1000db60:	00000c06 	br	1000db94 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000db64:	e0bff004 	addi	r2,fp,-64
1000db68:	e13fff17 	ldw	r4,-4(fp)
1000db6c:	100b883a 	mov	r5,r2
1000db70:	000d9fc0 	call	1000d9fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000db74:	e0bff117 	ldw	r2,-60(fp)
1000db78:	10880020 	cmpeqi	r2,r2,8192
1000db7c:	10803fcc 	andi	r2,r2,255
1000db80:	00000406 	br	1000db94 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000db84:	000dab00 	call	1000dab0 <alt_get_errno>
1000db88:	00c01444 	movi	r3,81
1000db8c:	10c00015 	stw	r3,0(r2)
    return 0;
1000db90:	0005883a 	mov	r2,zero
  }
}
1000db94:	e037883a 	mov	sp,fp
1000db98:	dfc00117 	ldw	ra,4(sp)
1000db9c:	df000017 	ldw	fp,0(sp)
1000dba0:	dec00204 	addi	sp,sp,8
1000dba4:	f800283a 	ret

1000dba8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000dba8:	defffc04 	addi	sp,sp,-16
1000dbac:	df000315 	stw	fp,12(sp)
1000dbb0:	df000304 	addi	fp,sp,12
1000dbb4:	e13ffd15 	stw	r4,-12(fp)
1000dbb8:	e17ffe15 	stw	r5,-8(fp)
1000dbbc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000dbc0:	e0fffe17 	ldw	r3,-8(fp)
1000dbc4:	e0bffd17 	ldw	r2,-12(fp)
1000dbc8:	18800c26 	beq	r3,r2,1000dbfc <alt_load_section+0x54>
  {
    while( to != end )
1000dbcc:	00000806 	br	1000dbf0 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000dbd0:	e0bffe17 	ldw	r2,-8(fp)
1000dbd4:	10c00104 	addi	r3,r2,4
1000dbd8:	e0fffe15 	stw	r3,-8(fp)
1000dbdc:	e0fffd17 	ldw	r3,-12(fp)
1000dbe0:	19000104 	addi	r4,r3,4
1000dbe4:	e13ffd15 	stw	r4,-12(fp)
1000dbe8:	18c00017 	ldw	r3,0(r3)
1000dbec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000dbf0:	e0fffe17 	ldw	r3,-8(fp)
1000dbf4:	e0bfff17 	ldw	r2,-4(fp)
1000dbf8:	18bff51e 	bne	r3,r2,1000dbd0 <__alt_data_end+0xf800dbd0>
    {
      *to++ = *from++;
    }
  }
}
1000dbfc:	e037883a 	mov	sp,fp
1000dc00:	df000017 	ldw	fp,0(sp)
1000dc04:	dec00104 	addi	sp,sp,4
1000dc08:	f800283a 	ret

1000dc0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000dc0c:	defffe04 	addi	sp,sp,-8
1000dc10:	dfc00115 	stw	ra,4(sp)
1000dc14:	df000015 	stw	fp,0(sp)
1000dc18:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000dc1c:	01040074 	movhi	r4,4097
1000dc20:	21071c04 	addi	r4,r4,7280
1000dc24:	01440074 	movhi	r5,4097
1000dc28:	29405f04 	addi	r5,r5,380
1000dc2c:	01840074 	movhi	r6,4097
1000dc30:	31871c04 	addi	r6,r6,7280
1000dc34:	000dba80 	call	1000dba8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000dc38:	01040034 	movhi	r4,4096
1000dc3c:	21000804 	addi	r4,r4,32
1000dc40:	01440034 	movhi	r5,4096
1000dc44:	29400804 	addi	r5,r5,32
1000dc48:	01840034 	movhi	r6,4096
1000dc4c:	31806f04 	addi	r6,r6,444
1000dc50:	000dba80 	call	1000dba8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000dc54:	01040074 	movhi	r4,4097
1000dc58:	213f9504 	addi	r4,r4,-428
1000dc5c:	01440074 	movhi	r5,4097
1000dc60:	297f9504 	addi	r5,r5,-428
1000dc64:	01840074 	movhi	r6,4097
1000dc68:	31805f04 	addi	r6,r6,380
1000dc6c:	000dba80 	call	1000dba8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000dc70:	000ee540 	call	1000ee54 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000dc74:	000f0180 	call	1000f018 <alt_icache_flush_all>
}
1000dc78:	e037883a 	mov	sp,fp
1000dc7c:	dfc00117 	ldw	ra,4(sp)
1000dc80:	df000017 	ldw	fp,0(sp)
1000dc84:	dec00204 	addi	sp,sp,8
1000dc88:	f800283a 	ret

1000dc8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dc8c:	defffe04 	addi	sp,sp,-8
1000dc90:	dfc00115 	stw	ra,4(sp)
1000dc94:	df000015 	stw	fp,0(sp)
1000dc98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dc9c:	00840074 	movhi	r2,4097
1000dca0:	10871704 	addi	r2,r2,7260
1000dca4:	10800017 	ldw	r2,0(r2)
1000dca8:	10000526 	beq	r2,zero,1000dcc0 <alt_get_errno+0x34>
1000dcac:	00840074 	movhi	r2,4097
1000dcb0:	10871704 	addi	r2,r2,7260
1000dcb4:	10800017 	ldw	r2,0(r2)
1000dcb8:	103ee83a 	callr	r2
1000dcbc:	00000206 	br	1000dcc8 <alt_get_errno+0x3c>
1000dcc0:	00840074 	movhi	r2,4097
1000dcc4:	108ddf04 	addi	r2,r2,14204
}
1000dcc8:	e037883a 	mov	sp,fp
1000dccc:	dfc00117 	ldw	ra,4(sp)
1000dcd0:	df000017 	ldw	fp,0(sp)
1000dcd4:	dec00204 	addi	sp,sp,8
1000dcd8:	f800283a 	ret

1000dcdc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000dcdc:	defff904 	addi	sp,sp,-28
1000dce0:	dfc00615 	stw	ra,24(sp)
1000dce4:	df000515 	stw	fp,20(sp)
1000dce8:	df000504 	addi	fp,sp,20
1000dcec:	e13ffd15 	stw	r4,-12(fp)
1000dcf0:	e17ffe15 	stw	r5,-8(fp)
1000dcf4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000dcf8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dcfc:	e0bffd17 	ldw	r2,-12(fp)
1000dd00:	10000816 	blt	r2,zero,1000dd24 <lseek+0x48>
1000dd04:	e13ffd17 	ldw	r4,-12(fp)
1000dd08:	01400304 	movi	r5,12
1000dd0c:	000b0240 	call	1000b024 <__mulsi3>
1000dd10:	1007883a 	mov	r3,r2
1000dd14:	00840074 	movhi	r2,4097
1000dd18:	10829204 	addi	r2,r2,2632
1000dd1c:	1885883a 	add	r2,r3,r2
1000dd20:	00000106 	br	1000dd28 <lseek+0x4c>
1000dd24:	0005883a 	mov	r2,zero
1000dd28:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000dd2c:	e0bffc17 	ldw	r2,-16(fp)
1000dd30:	10001026 	beq	r2,zero,1000dd74 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000dd34:	e0bffc17 	ldw	r2,-16(fp)
1000dd38:	10800017 	ldw	r2,0(r2)
1000dd3c:	10800717 	ldw	r2,28(r2)
1000dd40:	10000926 	beq	r2,zero,1000dd68 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000dd44:	e0bffc17 	ldw	r2,-16(fp)
1000dd48:	10800017 	ldw	r2,0(r2)
1000dd4c:	10800717 	ldw	r2,28(r2)
1000dd50:	e13ffc17 	ldw	r4,-16(fp)
1000dd54:	e17ffe17 	ldw	r5,-8(fp)
1000dd58:	e1bfff17 	ldw	r6,-4(fp)
1000dd5c:	103ee83a 	callr	r2
1000dd60:	e0bffb15 	stw	r2,-20(fp)
1000dd64:	00000506 	br	1000dd7c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000dd68:	00bfde84 	movi	r2,-134
1000dd6c:	e0bffb15 	stw	r2,-20(fp)
1000dd70:	00000206 	br	1000dd7c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000dd74:	00bfebc4 	movi	r2,-81
1000dd78:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000dd7c:	e0bffb17 	ldw	r2,-20(fp)
1000dd80:	1000060e 	bge	r2,zero,1000dd9c <lseek+0xc0>
  {
    ALT_ERRNO = -rc;
1000dd84:	000dc8c0 	call	1000dc8c <alt_get_errno>
1000dd88:	e0fffb17 	ldw	r3,-20(fp)
1000dd8c:	00c7c83a 	sub	r3,zero,r3
1000dd90:	10c00015 	stw	r3,0(r2)
    rc = -1;
1000dd94:	00bfffc4 	movi	r2,-1
1000dd98:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000dd9c:	e0bffb17 	ldw	r2,-20(fp)
}
1000dda0:	e037883a 	mov	sp,fp
1000dda4:	dfc00117 	ldw	ra,4(sp)
1000dda8:	df000017 	ldw	fp,0(sp)
1000ddac:	dec00204 	addi	sp,sp,8
1000ddb0:	f800283a 	ret

1000ddb4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000ddb4:	defffd04 	addi	sp,sp,-12
1000ddb8:	dfc00215 	stw	ra,8(sp)
1000ddbc:	df000115 	stw	fp,4(sp)
1000ddc0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000ddc4:	0009883a 	mov	r4,zero
1000ddc8:	000e2600 	call	1000e260 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000ddcc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000ddd0:	000e2940 	call	1000e294 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000ddd4:	01040074 	movhi	r4,4097
1000ddd8:	21005504 	addi	r4,r4,340
1000dddc:	01440074 	movhi	r5,4097
1000dde0:	29405504 	addi	r5,r5,340
1000dde4:	01840074 	movhi	r6,4097
1000dde8:	31805504 	addi	r6,r6,340
1000ddec:	000f3dc0 	call	1000f3dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000ddf0:	000ef600 	call	1000ef60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000ddf4:	01040074 	movhi	r4,4097
1000ddf8:	213bef04 	addi	r4,r4,-4164
1000ddfc:	000fa980 	call	1000fa98 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000de00:	d126d617 	ldw	r4,-25768(gp)
1000de04:	d0e6d717 	ldw	r3,-25764(gp)
1000de08:	d0a6d817 	ldw	r2,-25760(gp)
1000de0c:	180b883a 	mov	r5,r3
1000de10:	100d883a 	mov	r6,r2
1000de14:	0000f6c0 	call	10000f6c <main>
1000de18:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000de1c:	01000044 	movi	r4,1
1000de20:	000d8200 	call	1000d820 <close>
  exit (result);
1000de24:	e13fff17 	ldw	r4,-4(fp)
1000de28:	000faac0 	call	1000faac <exit>

1000de2c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000de2c:	defffe04 	addi	sp,sp,-8
1000de30:	df000115 	stw	fp,4(sp)
1000de34:	df000104 	addi	fp,sp,4
1000de38:	e13fff15 	stw	r4,-4(fp)
}
1000de3c:	e037883a 	mov	sp,fp
1000de40:	df000017 	ldw	fp,0(sp)
1000de44:	dec00104 	addi	sp,sp,4
1000de48:	f800283a 	ret

1000de4c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000de4c:	defffe04 	addi	sp,sp,-8
1000de50:	df000115 	stw	fp,4(sp)
1000de54:	df000104 	addi	fp,sp,4
1000de58:	e13fff15 	stw	r4,-4(fp)
}
1000de5c:	e037883a 	mov	sp,fp
1000de60:	df000017 	ldw	fp,0(sp)
1000de64:	dec00104 	addi	sp,sp,4
1000de68:	f800283a 	ret

1000de6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000de6c:	defffe04 	addi	sp,sp,-8
1000de70:	dfc00115 	stw	ra,4(sp)
1000de74:	df000015 	stw	fp,0(sp)
1000de78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000de7c:	00840074 	movhi	r2,4097
1000de80:	10871704 	addi	r2,r2,7260
1000de84:	10800017 	ldw	r2,0(r2)
1000de88:	10000526 	beq	r2,zero,1000dea0 <alt_get_errno+0x34>
1000de8c:	00840074 	movhi	r2,4097
1000de90:	10871704 	addi	r2,r2,7260
1000de94:	10800017 	ldw	r2,0(r2)
1000de98:	103ee83a 	callr	r2
1000de9c:	00000206 	br	1000dea8 <alt_get_errno+0x3c>
1000dea0:	00840074 	movhi	r2,4097
1000dea4:	108ddf04 	addi	r2,r2,14204
}
1000dea8:	e037883a 	mov	sp,fp
1000deac:	dfc00117 	ldw	ra,4(sp)
1000deb0:	df000017 	ldw	fp,0(sp)
1000deb4:	dec00204 	addi	sp,sp,8
1000deb8:	f800283a 	ret

1000debc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000debc:	defff904 	addi	sp,sp,-28
1000dec0:	dfc00615 	stw	ra,24(sp)
1000dec4:	df000515 	stw	fp,20(sp)
1000dec8:	df000504 	addi	fp,sp,20
1000decc:	e13ffd15 	stw	r4,-12(fp)
1000ded0:	e17ffe15 	stw	r5,-8(fp)
1000ded4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ded8:	e0bffd17 	ldw	r2,-12(fp)
1000dedc:	10000816 	blt	r2,zero,1000df00 <read+0x44>
1000dee0:	e13ffd17 	ldw	r4,-12(fp)
1000dee4:	01400304 	movi	r5,12
1000dee8:	000b0240 	call	1000b024 <__mulsi3>
1000deec:	1007883a 	mov	r3,r2
1000def0:	00840074 	movhi	r2,4097
1000def4:	10829204 	addi	r2,r2,2632
1000def8:	1885883a 	add	r2,r3,r2
1000defc:	00000106 	br	1000df04 <read+0x48>
1000df00:	0005883a 	mov	r2,zero
1000df04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000df08:	e0bffb17 	ldw	r2,-20(fp)
1000df0c:	10002026 	beq	r2,zero,1000df90 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000df10:	e0bffb17 	ldw	r2,-20(fp)
1000df14:	10800217 	ldw	r2,8(r2)
1000df18:	108000cc 	andi	r2,r2,3
1000df1c:	10800060 	cmpeqi	r2,r2,1
1000df20:	1000171e 	bne	r2,zero,1000df80 <read+0xc4>
        (fd->dev->read))
1000df24:	e0bffb17 	ldw	r2,-20(fp)
1000df28:	10800017 	ldw	r2,0(r2)
1000df2c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000df30:	10001326 	beq	r2,zero,1000df80 <read+0xc4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000df34:	e0bffb17 	ldw	r2,-20(fp)
1000df38:	10800017 	ldw	r2,0(r2)
1000df3c:	10800517 	ldw	r2,20(r2)
1000df40:	e0ffff17 	ldw	r3,-4(fp)
1000df44:	e13ffb17 	ldw	r4,-20(fp)
1000df48:	e17ffe17 	ldw	r5,-8(fp)
1000df4c:	180d883a 	mov	r6,r3
1000df50:	103ee83a 	callr	r2
1000df54:	e0bffc15 	stw	r2,-16(fp)
1000df58:	e0bffc17 	ldw	r2,-16(fp)
1000df5c:	1000060e 	bge	r2,zero,1000df78 <read+0xbc>
        {
          ALT_ERRNO = -rval;
1000df60:	000de6c0 	call	1000de6c <alt_get_errno>
1000df64:	e0fffc17 	ldw	r3,-16(fp)
1000df68:	00c7c83a 	sub	r3,zero,r3
1000df6c:	10c00015 	stw	r3,0(r2)
          return -1;
1000df70:	00bfffc4 	movi	r2,-1
1000df74:	00000a06 	br	1000dfa0 <read+0xe4>
        }
        return rval;
1000df78:	e0bffc17 	ldw	r2,-16(fp)
1000df7c:	00000806 	br	1000dfa0 <read+0xe4>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000df80:	000de6c0 	call	1000de6c <alt_get_errno>
1000df84:	00c00344 	movi	r3,13
1000df88:	10c00015 	stw	r3,0(r2)
1000df8c:	00000306 	br	1000df9c <read+0xe0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000df90:	000de6c0 	call	1000de6c <alt_get_errno>
1000df94:	00c01444 	movi	r3,81
1000df98:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000df9c:	00bfffc4 	movi	r2,-1
}
1000dfa0:	e037883a 	mov	sp,fp
1000dfa4:	dfc00117 	ldw	ra,4(sp)
1000dfa8:	df000017 	ldw	fp,0(sp)
1000dfac:	dec00204 	addi	sp,sp,8
1000dfb0:	f800283a 	ret

1000dfb4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000dfb4:	defffc04 	addi	sp,sp,-16
1000dfb8:	dfc00315 	stw	ra,12(sp)
1000dfbc:	df000215 	stw	fp,8(sp)
1000dfc0:	dc000115 	stw	r16,4(sp)
1000dfc4:	df000204 	addi	fp,sp,8
1000dfc8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000dfcc:	e0bffe17 	ldw	r2,-8(fp)
1000dfd0:	108000d0 	cmplti	r2,r2,3
1000dfd4:	1000111e 	bne	r2,zero,1000e01c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000dfd8:	04040074 	movhi	r16,4097
1000dfdc:	84029204 	addi	r16,r16,2632
1000dfe0:	e0bffe17 	ldw	r2,-8(fp)
1000dfe4:	1009883a 	mov	r4,r2
1000dfe8:	01400304 	movi	r5,12
1000dfec:	000b0240 	call	1000b024 <__mulsi3>
1000dff0:	8085883a 	add	r2,r16,r2
1000dff4:	10800204 	addi	r2,r2,8
1000dff8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000dffc:	04040074 	movhi	r16,4097
1000e000:	84029204 	addi	r16,r16,2632
1000e004:	e0bffe17 	ldw	r2,-8(fp)
1000e008:	1009883a 	mov	r4,r2
1000e00c:	01400304 	movi	r5,12
1000e010:	000b0240 	call	1000b024 <__mulsi3>
1000e014:	8085883a 	add	r2,r16,r2
1000e018:	10000015 	stw	zero,0(r2)
  }
}
1000e01c:	e6ffff04 	addi	sp,fp,-4
1000e020:	dfc00217 	ldw	ra,8(sp)
1000e024:	df000117 	ldw	fp,4(sp)
1000e028:	dc000017 	ldw	r16,0(sp)
1000e02c:	dec00304 	addi	sp,sp,12
1000e030:	f800283a 	ret

1000e034 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000e034:	defff904 	addi	sp,sp,-28
1000e038:	df000615 	stw	fp,24(sp)
1000e03c:	df000604 	addi	fp,sp,24
1000e040:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e044:	0005303a 	rdctl	r2,status
1000e048:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e04c:	e0fffc17 	ldw	r3,-16(fp)
1000e050:	00bfff84 	movi	r2,-2
1000e054:	1884703a 	and	r2,r3,r2
1000e058:	1001703a 	wrctl	status,r2
  
  return context;
1000e05c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000e060:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000e064:	d0a00e17 	ldw	r2,-32712(gp)
1000e068:	10c000c4 	addi	r3,r2,3
1000e06c:	00bfff04 	movi	r2,-4
1000e070:	1884703a 	and	r2,r3,r2
1000e074:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000e078:	d0e00e17 	ldw	r3,-32712(gp)
1000e07c:	e0bfff17 	ldw	r2,-4(fp)
1000e080:	1885883a 	add	r2,r3,r2
1000e084:	00c60034 	movhi	r3,6144
1000e088:	18c00004 	addi	r3,r3,0
1000e08c:	1880062e 	bgeu	r3,r2,1000e0a8 <sbrk+0x74>
1000e090:	e0bffa17 	ldw	r2,-24(fp)
1000e094:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e098:	e0bffd17 	ldw	r2,-12(fp)
1000e09c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000e0a0:	00bfffc4 	movi	r2,-1
1000e0a4:	00000b06 	br	1000e0d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000e0a8:	d0a00e17 	ldw	r2,-32712(gp)
1000e0ac:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000e0b0:	d0e00e17 	ldw	r3,-32712(gp)
1000e0b4:	e0bfff17 	ldw	r2,-4(fp)
1000e0b8:	1885883a 	add	r2,r3,r2
1000e0bc:	d0a00e15 	stw	r2,-32712(gp)
1000e0c0:	e0bffa17 	ldw	r2,-24(fp)
1000e0c4:	e0bffe15 	stw	r2,-8(fp)
1000e0c8:	e0bffe17 	ldw	r2,-8(fp)
1000e0cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000e0d0:	e0bffb17 	ldw	r2,-20(fp)
} 
1000e0d4:	e037883a 	mov	sp,fp
1000e0d8:	df000017 	ldw	fp,0(sp)
1000e0dc:	dec00104 	addi	sp,sp,4
1000e0e0:	f800283a 	ret

1000e0e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e0e4:	defffe04 	addi	sp,sp,-8
1000e0e8:	dfc00115 	stw	ra,4(sp)
1000e0ec:	df000015 	stw	fp,0(sp)
1000e0f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e0f4:	00840074 	movhi	r2,4097
1000e0f8:	10871704 	addi	r2,r2,7260
1000e0fc:	10800017 	ldw	r2,0(r2)
1000e100:	10000526 	beq	r2,zero,1000e118 <alt_get_errno+0x34>
1000e104:	00840074 	movhi	r2,4097
1000e108:	10871704 	addi	r2,r2,7260
1000e10c:	10800017 	ldw	r2,0(r2)
1000e110:	103ee83a 	callr	r2
1000e114:	00000206 	br	1000e120 <alt_get_errno+0x3c>
1000e118:	00840074 	movhi	r2,4097
1000e11c:	108ddf04 	addi	r2,r2,14204
}
1000e120:	e037883a 	mov	sp,fp
1000e124:	dfc00117 	ldw	ra,4(sp)
1000e128:	df000017 	ldw	fp,0(sp)
1000e12c:	dec00204 	addi	sp,sp,8
1000e130:	f800283a 	ret

1000e134 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000e134:	defff904 	addi	sp,sp,-28
1000e138:	dfc00615 	stw	ra,24(sp)
1000e13c:	df000515 	stw	fp,20(sp)
1000e140:	df000504 	addi	fp,sp,20
1000e144:	e13ffd15 	stw	r4,-12(fp)
1000e148:	e17ffe15 	stw	r5,-8(fp)
1000e14c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e150:	e0bffd17 	ldw	r2,-12(fp)
1000e154:	10000816 	blt	r2,zero,1000e178 <write+0x44>
1000e158:	e13ffd17 	ldw	r4,-12(fp)
1000e15c:	01400304 	movi	r5,12
1000e160:	000b0240 	call	1000b024 <__mulsi3>
1000e164:	1007883a 	mov	r3,r2
1000e168:	00840074 	movhi	r2,4097
1000e16c:	10829204 	addi	r2,r2,2632
1000e170:	1885883a 	add	r2,r3,r2
1000e174:	00000106 	br	1000e17c <write+0x48>
1000e178:	0005883a 	mov	r2,zero
1000e17c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e180:	e0bffb17 	ldw	r2,-20(fp)
1000e184:	10001f26 	beq	r2,zero,1000e204 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000e188:	e0bffb17 	ldw	r2,-20(fp)
1000e18c:	10800217 	ldw	r2,8(r2)
1000e190:	108000cc 	andi	r2,r2,3
1000e194:	10001726 	beq	r2,zero,1000e1f4 <write+0xc0>
1000e198:	e0bffb17 	ldw	r2,-20(fp)
1000e19c:	10800017 	ldw	r2,0(r2)
1000e1a0:	10800617 	ldw	r2,24(r2)
1000e1a4:	10001326 	beq	r2,zero,1000e1f4 <write+0xc0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000e1a8:	e0bffb17 	ldw	r2,-20(fp)
1000e1ac:	10800017 	ldw	r2,0(r2)
1000e1b0:	10800617 	ldw	r2,24(r2)
1000e1b4:	e0ffff17 	ldw	r3,-4(fp)
1000e1b8:	e13ffb17 	ldw	r4,-20(fp)
1000e1bc:	e17ffe17 	ldw	r5,-8(fp)
1000e1c0:	180d883a 	mov	r6,r3
1000e1c4:	103ee83a 	callr	r2
1000e1c8:	e0bffc15 	stw	r2,-16(fp)
1000e1cc:	e0bffc17 	ldw	r2,-16(fp)
1000e1d0:	1000060e 	bge	r2,zero,1000e1ec <write+0xb8>
      {
        ALT_ERRNO = -rval;
1000e1d4:	000e0e40 	call	1000e0e4 <alt_get_errno>
1000e1d8:	e0fffc17 	ldw	r3,-16(fp)
1000e1dc:	00c7c83a 	sub	r3,zero,r3
1000e1e0:	10c00015 	stw	r3,0(r2)
        return -1;
1000e1e4:	00bfffc4 	movi	r2,-1
1000e1e8:	00000a06 	br	1000e214 <write+0xe0>
      }
      return rval;
1000e1ec:	e0bffc17 	ldw	r2,-16(fp)
1000e1f0:	00000806 	br	1000e214 <write+0xe0>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000e1f4:	000e0e40 	call	1000e0e4 <alt_get_errno>
1000e1f8:	00c00344 	movi	r3,13
1000e1fc:	10c00015 	stw	r3,0(r2)
1000e200:	00000306 	br	1000e210 <write+0xdc>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000e204:	000e0e40 	call	1000e0e4 <alt_get_errno>
1000e208:	00c01444 	movi	r3,81
1000e20c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000e210:	00bfffc4 	movi	r2,-1
}
1000e214:	e037883a 	mov	sp,fp
1000e218:	dfc00117 	ldw	ra,4(sp)
1000e21c:	df000017 	ldw	fp,0(sp)
1000e220:	dec00204 	addi	sp,sp,8
1000e224:	f800283a 	ret

1000e228 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000e228:	defffd04 	addi	sp,sp,-12
1000e22c:	dfc00215 	stw	ra,8(sp)
1000e230:	df000115 	stw	fp,4(sp)
1000e234:	df000104 	addi	fp,sp,4
1000e238:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000e23c:	e13fff17 	ldw	r4,-4(fp)
1000e240:	01440074 	movhi	r5,4097
1000e244:	29471404 	addi	r5,r5,7248
1000e248:	000eec00 	call	1000eec0 <alt_dev_llist_insert>
}
1000e24c:	e037883a 	mov	sp,fp
1000e250:	dfc00117 	ldw	ra,4(sp)
1000e254:	df000017 	ldw	fp,0(sp)
1000e258:	dec00204 	addi	sp,sp,8
1000e25c:	f800283a 	ret

1000e260 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000e260:	defffd04 	addi	sp,sp,-12
1000e264:	dfc00215 	stw	ra,8(sp)
1000e268:	df000115 	stw	fp,4(sp)
1000e26c:	df000104 	addi	fp,sp,4
1000e270:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000e274:	000f8900 	call	1000f890 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000e278:	00800044 	movi	r2,1
1000e27c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000e280:	e037883a 	mov	sp,fp
1000e284:	dfc00117 	ldw	ra,4(sp)
1000e288:	df000017 	ldw	fp,0(sp)
1000e28c:	dec00204 	addi	sp,sp,8
1000e290:	f800283a 	ret

1000e294 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000e294:	defffe04 	addi	sp,sp,-8
1000e298:	dfc00115 	stw	ra,4(sp)
1000e29c:	df000015 	stw	fp,0(sp)
1000e2a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000e2a4:	01040074 	movhi	r4,4097
1000e2a8:	2102fc04 	addi	r4,r4,3056
1000e2ac:	000b883a 	mov	r5,zero
1000e2b0:	01800044 	movi	r6,1
1000e2b4:	000e4400 	call	1000e440 <altera_avalon_jtag_uart_init>
1000e2b8:	01040074 	movhi	r4,4097
1000e2bc:	2102f204 	addi	r4,r4,3016
1000e2c0:	000e2280 	call	1000e228 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000e2c4:	0001883a 	nop
}
1000e2c8:	e037883a 	mov	sp,fp
1000e2cc:	dfc00117 	ldw	ra,4(sp)
1000e2d0:	df000017 	ldw	fp,0(sp)
1000e2d4:	dec00204 	addi	sp,sp,8
1000e2d8:	f800283a 	ret

1000e2dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000e2dc:	defffa04 	addi	sp,sp,-24
1000e2e0:	dfc00515 	stw	ra,20(sp)
1000e2e4:	df000415 	stw	fp,16(sp)
1000e2e8:	df000404 	addi	fp,sp,16
1000e2ec:	e13ffd15 	stw	r4,-12(fp)
1000e2f0:	e17ffe15 	stw	r5,-8(fp)
1000e2f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e2f8:	e0bffd17 	ldw	r2,-12(fp)
1000e2fc:	10800017 	ldw	r2,0(r2)
1000e300:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000e304:	e0bffc17 	ldw	r2,-16(fp)
1000e308:	10c00a04 	addi	r3,r2,40
1000e30c:	e0bffd17 	ldw	r2,-12(fp)
1000e310:	10800217 	ldw	r2,8(r2)
1000e314:	1809883a 	mov	r4,r3
1000e318:	e17ffe17 	ldw	r5,-8(fp)
1000e31c:	e1bfff17 	ldw	r6,-4(fp)
1000e320:	100f883a 	mov	r7,r2
1000e324:	000e8f40 	call	1000e8f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000e328:	e037883a 	mov	sp,fp
1000e32c:	dfc00117 	ldw	ra,4(sp)
1000e330:	df000017 	ldw	fp,0(sp)
1000e334:	dec00204 	addi	sp,sp,8
1000e338:	f800283a 	ret

1000e33c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000e33c:	defffa04 	addi	sp,sp,-24
1000e340:	dfc00515 	stw	ra,20(sp)
1000e344:	df000415 	stw	fp,16(sp)
1000e348:	df000404 	addi	fp,sp,16
1000e34c:	e13ffd15 	stw	r4,-12(fp)
1000e350:	e17ffe15 	stw	r5,-8(fp)
1000e354:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e358:	e0bffd17 	ldw	r2,-12(fp)
1000e35c:	10800017 	ldw	r2,0(r2)
1000e360:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000e364:	e0bffc17 	ldw	r2,-16(fp)
1000e368:	10c00a04 	addi	r3,r2,40
1000e36c:	e0bffd17 	ldw	r2,-12(fp)
1000e370:	10800217 	ldw	r2,8(r2)
1000e374:	1809883a 	mov	r4,r3
1000e378:	e17ffe17 	ldw	r5,-8(fp)
1000e37c:	e1bfff17 	ldw	r6,-4(fp)
1000e380:	100f883a 	mov	r7,r2
1000e384:	000eafc0 	call	1000eafc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000e388:	e037883a 	mov	sp,fp
1000e38c:	dfc00117 	ldw	ra,4(sp)
1000e390:	df000017 	ldw	fp,0(sp)
1000e394:	dec00204 	addi	sp,sp,8
1000e398:	f800283a 	ret

1000e39c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000e39c:	defffc04 	addi	sp,sp,-16
1000e3a0:	dfc00315 	stw	ra,12(sp)
1000e3a4:	df000215 	stw	fp,8(sp)
1000e3a8:	df000204 	addi	fp,sp,8
1000e3ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e3b0:	e0bfff17 	ldw	r2,-4(fp)
1000e3b4:	10800017 	ldw	r2,0(r2)
1000e3b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000e3bc:	e0bffe17 	ldw	r2,-8(fp)
1000e3c0:	10c00a04 	addi	r3,r2,40
1000e3c4:	e0bfff17 	ldw	r2,-4(fp)
1000e3c8:	10800217 	ldw	r2,8(r2)
1000e3cc:	1809883a 	mov	r4,r3
1000e3d0:	100b883a 	mov	r5,r2
1000e3d4:	000e7a00 	call	1000e7a0 <altera_avalon_jtag_uart_close>
}
1000e3d8:	e037883a 	mov	sp,fp
1000e3dc:	dfc00117 	ldw	ra,4(sp)
1000e3e0:	df000017 	ldw	fp,0(sp)
1000e3e4:	dec00204 	addi	sp,sp,8
1000e3e8:	f800283a 	ret

1000e3ec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000e3ec:	defffa04 	addi	sp,sp,-24
1000e3f0:	dfc00515 	stw	ra,20(sp)
1000e3f4:	df000415 	stw	fp,16(sp)
1000e3f8:	df000404 	addi	fp,sp,16
1000e3fc:	e13ffd15 	stw	r4,-12(fp)
1000e400:	e17ffe15 	stw	r5,-8(fp)
1000e404:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000e408:	e0bffd17 	ldw	r2,-12(fp)
1000e40c:	10800017 	ldw	r2,0(r2)
1000e410:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000e414:	e0bffc17 	ldw	r2,-16(fp)
1000e418:	10800a04 	addi	r2,r2,40
1000e41c:	1009883a 	mov	r4,r2
1000e420:	e17ffe17 	ldw	r5,-8(fp)
1000e424:	e1bfff17 	ldw	r6,-4(fp)
1000e428:	000e8080 	call	1000e808 <altera_avalon_jtag_uart_ioctl>
}
1000e42c:	e037883a 	mov	sp,fp
1000e430:	dfc00117 	ldw	ra,4(sp)
1000e434:	df000017 	ldw	fp,0(sp)
1000e438:	dec00204 	addi	sp,sp,8
1000e43c:	f800283a 	ret

1000e440 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000e440:	defffa04 	addi	sp,sp,-24
1000e444:	dfc00515 	stw	ra,20(sp)
1000e448:	df000415 	stw	fp,16(sp)
1000e44c:	df000404 	addi	fp,sp,16
1000e450:	e13ffd15 	stw	r4,-12(fp)
1000e454:	e17ffe15 	stw	r5,-8(fp)
1000e458:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e45c:	e0bffd17 	ldw	r2,-12(fp)
1000e460:	00c00044 	movi	r3,1
1000e464:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000e468:	e0bffd17 	ldw	r2,-12(fp)
1000e46c:	10800017 	ldw	r2,0(r2)
1000e470:	10800104 	addi	r2,r2,4
1000e474:	e0fffd17 	ldw	r3,-12(fp)
1000e478:	18c00817 	ldw	r3,32(r3)
1000e47c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000e480:	e0fffe17 	ldw	r3,-8(fp)
1000e484:	e0bfff17 	ldw	r2,-4(fp)
1000e488:	d8000015 	stw	zero,0(sp)
1000e48c:	1809883a 	mov	r4,r3
1000e490:	100b883a 	mov	r5,r2
1000e494:	01840074 	movhi	r6,4097
1000e498:	31b94004 	addi	r6,r6,-6912
1000e49c:	e1fffd17 	ldw	r7,-12(fp)
1000e4a0:	000f0340 	call	1000f034 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000e4a4:	e0bffd17 	ldw	r2,-12(fp)
1000e4a8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000e4ac:	e0bffd17 	ldw	r2,-12(fp)
1000e4b0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000e4b4:	00840074 	movhi	r2,4097
1000e4b8:	108de404 	addi	r2,r2,14224
1000e4bc:	10800017 	ldw	r2,0(r2)
1000e4c0:	1809883a 	mov	r4,r3
1000e4c4:	100b883a 	mov	r5,r2
1000e4c8:	01840074 	movhi	r6,4097
1000e4cc:	31b9bf04 	addi	r6,r6,-6404
1000e4d0:	e1fffd17 	ldw	r7,-12(fp)
1000e4d4:	000ed140 	call	1000ed14 <alt_alarm_start>
1000e4d8:	1000040e 	bge	r2,zero,1000e4ec <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000e4dc:	e0bffd17 	ldw	r2,-12(fp)
1000e4e0:	00e00034 	movhi	r3,32768
1000e4e4:	18ffffc4 	addi	r3,r3,-1
1000e4e8:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000e4ec:	e037883a 	mov	sp,fp
1000e4f0:	dfc00117 	ldw	ra,4(sp)
1000e4f4:	df000017 	ldw	fp,0(sp)
1000e4f8:	dec00204 	addi	sp,sp,8
1000e4fc:	f800283a 	ret

1000e500 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000e500:	defff804 	addi	sp,sp,-32
1000e504:	df000715 	stw	fp,28(sp)
1000e508:	df000704 	addi	fp,sp,28
1000e50c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000e510:	e0bfff17 	ldw	r2,-4(fp)
1000e514:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000e518:	e0bffb17 	ldw	r2,-20(fp)
1000e51c:	10800017 	ldw	r2,0(r2)
1000e520:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e524:	e0bffc17 	ldw	r2,-16(fp)
1000e528:	10800104 	addi	r2,r2,4
1000e52c:	10800037 	ldwio	r2,0(r2)
1000e530:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000e534:	e0bffd17 	ldw	r2,-12(fp)
1000e538:	1080c00c 	andi	r2,r2,768
1000e53c:	1000011e 	bne	r2,zero,1000e544 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000e540:	00006a06 	br	1000e6ec <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000e544:	e0bffd17 	ldw	r2,-12(fp)
1000e548:	1080400c 	andi	r2,r2,256
1000e54c:	10003226 	beq	r2,zero,1000e618 <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000e550:	00800074 	movhi	r2,1
1000e554:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e558:	e0bffb17 	ldw	r2,-20(fp)
1000e55c:	10800a17 	ldw	r2,40(r2)
1000e560:	10800044 	addi	r2,r2,1
1000e564:	1081ffcc 	andi	r2,r2,2047
1000e568:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000e56c:	e0bffb17 	ldw	r2,-20(fp)
1000e570:	10c00b17 	ldw	r3,44(r2)
1000e574:	e0bffe17 	ldw	r2,-8(fp)
1000e578:	1880011e 	bne	r3,r2,1000e580 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000e57c:	00001506 	br	1000e5d4 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000e580:	e0bffc17 	ldw	r2,-16(fp)
1000e584:	10800037 	ldwio	r2,0(r2)
1000e588:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000e58c:	e0bff917 	ldw	r2,-28(fp)
1000e590:	10a0000c 	andi	r2,r2,32768
1000e594:	1000011e 	bne	r2,zero,1000e59c <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000e598:	00000e06 	br	1000e5d4 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000e59c:	e0bffb17 	ldw	r2,-20(fp)
1000e5a0:	10800a17 	ldw	r2,40(r2)
1000e5a4:	e0fff917 	ldw	r3,-28(fp)
1000e5a8:	e13ffb17 	ldw	r4,-20(fp)
1000e5ac:	2085883a 	add	r2,r4,r2
1000e5b0:	10800e04 	addi	r2,r2,56
1000e5b4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e5b8:	e0bffb17 	ldw	r2,-20(fp)
1000e5bc:	10800a17 	ldw	r2,40(r2)
1000e5c0:	10800044 	addi	r2,r2,1
1000e5c4:	10c1ffcc 	andi	r3,r2,2047
1000e5c8:	e0bffb17 	ldw	r2,-20(fp)
1000e5cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000e5d0:	003fe106 	br	1000e558 <__alt_data_end+0xf800e558>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000e5d4:	e0bff917 	ldw	r2,-28(fp)
1000e5d8:	10bfffec 	andhi	r2,r2,65535
1000e5dc:	10000e26 	beq	r2,zero,1000e618 <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e5e0:	e0bffb17 	ldw	r2,-20(fp)
1000e5e4:	10c00817 	ldw	r3,32(r2)
1000e5e8:	00bfff84 	movi	r2,-2
1000e5ec:	1886703a 	and	r3,r3,r2
1000e5f0:	e0bffb17 	ldw	r2,-20(fp)
1000e5f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000e5f8:	e0bffc17 	ldw	r2,-16(fp)
1000e5fc:	10800104 	addi	r2,r2,4
1000e600:	e0fffb17 	ldw	r3,-20(fp)
1000e604:	18c00817 	ldw	r3,32(r3)
1000e608:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e60c:	e0bffc17 	ldw	r2,-16(fp)
1000e610:	10800104 	addi	r2,r2,4
1000e614:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000e618:	e0bffd17 	ldw	r2,-12(fp)
1000e61c:	1080800c 	andi	r2,r2,512
1000e620:	10003126 	beq	r2,zero,1000e6e8 <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000e624:	e0bffd17 	ldw	r2,-12(fp)
1000e628:	1004d43a 	srli	r2,r2,16
1000e62c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e630:	00001406 	br	1000e684 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000e634:	e0bffc17 	ldw	r2,-16(fp)
1000e638:	e0fffb17 	ldw	r3,-20(fp)
1000e63c:	18c00d17 	ldw	r3,52(r3)
1000e640:	e13ffb17 	ldw	r4,-20(fp)
1000e644:	20c7883a 	add	r3,r4,r3
1000e648:	18c20e04 	addi	r3,r3,2104
1000e64c:	18c00003 	ldbu	r3,0(r3)
1000e650:	18c03fcc 	andi	r3,r3,255
1000e654:	18c0201c 	xori	r3,r3,128
1000e658:	18ffe004 	addi	r3,r3,-128
1000e65c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e660:	e0bffb17 	ldw	r2,-20(fp)
1000e664:	10800d17 	ldw	r2,52(r2)
1000e668:	10800044 	addi	r2,r2,1
1000e66c:	10c1ffcc 	andi	r3,r2,2047
1000e670:	e0bffb17 	ldw	r2,-20(fp)
1000e674:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000e678:	e0bffa17 	ldw	r2,-24(fp)
1000e67c:	10bfffc4 	addi	r2,r2,-1
1000e680:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e684:	e0bffa17 	ldw	r2,-24(fp)
1000e688:	10000526 	beq	r2,zero,1000e6a0 <altera_avalon_jtag_uart_irq+0x1a0>
1000e68c:	e0bffb17 	ldw	r2,-20(fp)
1000e690:	10c00d17 	ldw	r3,52(r2)
1000e694:	e0bffb17 	ldw	r2,-20(fp)
1000e698:	10800c17 	ldw	r2,48(r2)
1000e69c:	18bfe51e 	bne	r3,r2,1000e634 <__alt_data_end+0xf800e634>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000e6a0:	e0bffa17 	ldw	r2,-24(fp)
1000e6a4:	10001026 	beq	r2,zero,1000e6e8 <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e6a8:	e0bffb17 	ldw	r2,-20(fp)
1000e6ac:	10c00817 	ldw	r3,32(r2)
1000e6b0:	00bfff44 	movi	r2,-3
1000e6b4:	1886703a 	and	r3,r3,r2
1000e6b8:	e0bffb17 	ldw	r2,-20(fp)
1000e6bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e6c0:	e0bffb17 	ldw	r2,-20(fp)
1000e6c4:	10800017 	ldw	r2,0(r2)
1000e6c8:	10800104 	addi	r2,r2,4
1000e6cc:	e0fffb17 	ldw	r3,-20(fp)
1000e6d0:	18c00817 	ldw	r3,32(r3)
1000e6d4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e6d8:	e0bffc17 	ldw	r2,-16(fp)
1000e6dc:	10800104 	addi	r2,r2,4
1000e6e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000e6e4:	003f8f06 	br	1000e524 <__alt_data_end+0xf800e524>
1000e6e8:	003f8e06 	br	1000e524 <__alt_data_end+0xf800e524>
}
1000e6ec:	e037883a 	mov	sp,fp
1000e6f0:	df000017 	ldw	fp,0(sp)
1000e6f4:	dec00104 	addi	sp,sp,4
1000e6f8:	f800283a 	ret

1000e6fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000e6fc:	defff804 	addi	sp,sp,-32
1000e700:	df000715 	stw	fp,28(sp)
1000e704:	df000704 	addi	fp,sp,28
1000e708:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000e70c:	e0bffb17 	ldw	r2,-20(fp)
1000e710:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000e714:	e0bff917 	ldw	r2,-28(fp)
1000e718:	10800017 	ldw	r2,0(r2)
1000e71c:	10800104 	addi	r2,r2,4
1000e720:	10800037 	ldwio	r2,0(r2)
1000e724:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000e728:	e0bffa17 	ldw	r2,-24(fp)
1000e72c:	1081000c 	andi	r2,r2,1024
1000e730:	10000a26 	beq	r2,zero,1000e75c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000e734:	e0bff917 	ldw	r2,-28(fp)
1000e738:	10800017 	ldw	r2,0(r2)
1000e73c:	10800104 	addi	r2,r2,4
1000e740:	e0fff917 	ldw	r3,-28(fp)
1000e744:	18c00817 	ldw	r3,32(r3)
1000e748:	18c10014 	ori	r3,r3,1024
1000e74c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
1000e750:	e0bff917 	ldw	r2,-28(fp)
1000e754:	10000915 	stw	zero,36(r2)
1000e758:	00000a06 	br	1000e784 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000e75c:	e0bff917 	ldw	r2,-28(fp)
1000e760:	10800917 	ldw	r2,36(r2)
1000e764:	00e00034 	movhi	r3,32768
1000e768:	18ffff04 	addi	r3,r3,-4
1000e76c:	18800536 	bltu	r3,r2,1000e784 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
1000e770:	e0bff917 	ldw	r2,-28(fp)
1000e774:	10800917 	ldw	r2,36(r2)
1000e778:	10c00044 	addi	r3,r2,1
1000e77c:	e0bff917 	ldw	r2,-28(fp)
1000e780:	10c00915 	stw	r3,36(r2)
1000e784:	00840074 	movhi	r2,4097
1000e788:	108de404 	addi	r2,r2,14224
1000e78c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000e790:	e037883a 	mov	sp,fp
1000e794:	df000017 	ldw	fp,0(sp)
1000e798:	dec00104 	addi	sp,sp,4
1000e79c:	f800283a 	ret

1000e7a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000e7a0:	defffd04 	addi	sp,sp,-12
1000e7a4:	df000215 	stw	fp,8(sp)
1000e7a8:	df000204 	addi	fp,sp,8
1000e7ac:	e13ffe15 	stw	r4,-8(fp)
1000e7b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e7b4:	00000506 	br	1000e7cc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000e7b8:	e0bfff17 	ldw	r2,-4(fp)
1000e7bc:	1090000c 	andi	r2,r2,16384
1000e7c0:	10000226 	beq	r2,zero,1000e7cc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000e7c4:	00bffd44 	movi	r2,-11
1000e7c8:	00000b06 	br	1000e7f8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e7cc:	e0bffe17 	ldw	r2,-8(fp)
1000e7d0:	10c00d17 	ldw	r3,52(r2)
1000e7d4:	e0bffe17 	ldw	r2,-8(fp)
1000e7d8:	10800c17 	ldw	r2,48(r2)
1000e7dc:	18800526 	beq	r3,r2,1000e7f4 <altera_avalon_jtag_uart_close+0x54>
1000e7e0:	e0bffe17 	ldw	r2,-8(fp)
1000e7e4:	10c00917 	ldw	r3,36(r2)
1000e7e8:	e0bffe17 	ldw	r2,-8(fp)
1000e7ec:	10800117 	ldw	r2,4(r2)
1000e7f0:	18bff136 	bltu	r3,r2,1000e7b8 <__alt_data_end+0xf800e7b8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000e7f4:	0005883a 	mov	r2,zero
}
1000e7f8:	e037883a 	mov	sp,fp
1000e7fc:	df000017 	ldw	fp,0(sp)
1000e800:	dec00104 	addi	sp,sp,4
1000e804:	f800283a 	ret

1000e808 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000e808:	defffa04 	addi	sp,sp,-24
1000e80c:	df000515 	stw	fp,20(sp)
1000e810:	df000504 	addi	fp,sp,20
1000e814:	e13ffd15 	stw	r4,-12(fp)
1000e818:	e17ffe15 	stw	r5,-8(fp)
1000e81c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000e820:	00bff9c4 	movi	r2,-25
1000e824:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000e828:	e0bffe17 	ldw	r2,-8(fp)
1000e82c:	10da8060 	cmpeqi	r3,r2,27137
1000e830:	1800031e 	bne	r3,zero,1000e840 <altera_avalon_jtag_uart_ioctl+0x38>
1000e834:	109a80a0 	cmpeqi	r2,r2,27138
1000e838:	1000191e 	bne	r2,zero,1000e8a0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000e83c:	00002806 	br	1000e8e0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000e840:	e0bffd17 	ldw	r2,-12(fp)
1000e844:	10c00117 	ldw	r3,4(r2)
1000e848:	00a00034 	movhi	r2,32768
1000e84c:	10bfffc4 	addi	r2,r2,-1
1000e850:	18801226 	beq	r3,r2,1000e89c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000e854:	e0bfff17 	ldw	r2,-4(fp)
1000e858:	10800017 	ldw	r2,0(r2)
1000e85c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000e860:	e0bffc17 	ldw	r2,-16(fp)
1000e864:	10800090 	cmplti	r2,r2,2
1000e868:	1000061e 	bne	r2,zero,1000e884 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e86c:	e0fffc17 	ldw	r3,-16(fp)
1000e870:	00a00034 	movhi	r2,32768
1000e874:	10bfffc4 	addi	r2,r2,-1
1000e878:	18800226 	beq	r3,r2,1000e884 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e87c:	e0bffc17 	ldw	r2,-16(fp)
1000e880:	00000206 	br	1000e88c <altera_avalon_jtag_uart_ioctl+0x84>
1000e884:	00a00034 	movhi	r2,32768
1000e888:	10bfff84 	addi	r2,r2,-2
1000e88c:	e0fffd17 	ldw	r3,-12(fp)
1000e890:	18800115 	stw	r2,4(r3)
      rc = 0;
1000e894:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e898:	00001106 	br	1000e8e0 <altera_avalon_jtag_uart_ioctl+0xd8>
1000e89c:	00001006 	br	1000e8e0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000e8a0:	e0bffd17 	ldw	r2,-12(fp)
1000e8a4:	10c00117 	ldw	r3,4(r2)
1000e8a8:	00a00034 	movhi	r2,32768
1000e8ac:	10bfffc4 	addi	r2,r2,-1
1000e8b0:	18800a26 	beq	r3,r2,1000e8dc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000e8b4:	e0bffd17 	ldw	r2,-12(fp)
1000e8b8:	10c00917 	ldw	r3,36(r2)
1000e8bc:	e0bffd17 	ldw	r2,-12(fp)
1000e8c0:	10800117 	ldw	r2,4(r2)
1000e8c4:	1885803a 	cmpltu	r2,r3,r2
1000e8c8:	10c03fcc 	andi	r3,r2,255
1000e8cc:	e0bfff17 	ldw	r2,-4(fp)
1000e8d0:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000e8d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e8d8:	00000006 	br	1000e8dc <altera_avalon_jtag_uart_ioctl+0xd4>
1000e8dc:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000e8e0:	e0bffb17 	ldw	r2,-20(fp)
}
1000e8e4:	e037883a 	mov	sp,fp
1000e8e8:	df000017 	ldw	fp,0(sp)
1000e8ec:	dec00104 	addi	sp,sp,4
1000e8f0:	f800283a 	ret

1000e8f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000e8f4:	defff304 	addi	sp,sp,-52
1000e8f8:	dfc00c15 	stw	ra,48(sp)
1000e8fc:	df000b15 	stw	fp,44(sp)
1000e900:	df000b04 	addi	fp,sp,44
1000e904:	e13ffc15 	stw	r4,-16(fp)
1000e908:	e17ffd15 	stw	r5,-12(fp)
1000e90c:	e1bffe15 	stw	r6,-8(fp)
1000e910:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000e914:	e0bffd17 	ldw	r2,-12(fp)
1000e918:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e91c:	00004906 	br	1000ea44 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000e920:	e0bffc17 	ldw	r2,-16(fp)
1000e924:	10800a17 	ldw	r2,40(r2)
1000e928:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000e92c:	e0bffc17 	ldw	r2,-16(fp)
1000e930:	10800b17 	ldw	r2,44(r2)
1000e934:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000e938:	e0fff717 	ldw	r3,-36(fp)
1000e93c:	e0bff817 	ldw	r2,-32(fp)
1000e940:	18800536 	bltu	r3,r2,1000e958 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000e944:	e0fff717 	ldw	r3,-36(fp)
1000e948:	e0bff817 	ldw	r2,-32(fp)
1000e94c:	1885c83a 	sub	r2,r3,r2
1000e950:	e0bff615 	stw	r2,-40(fp)
1000e954:	00000406 	br	1000e968 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000e958:	00c20004 	movi	r3,2048
1000e95c:	e0bff817 	ldw	r2,-32(fp)
1000e960:	1885c83a 	sub	r2,r3,r2
1000e964:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e968:	e0bff617 	ldw	r2,-40(fp)
1000e96c:	1000011e 	bne	r2,zero,1000e974 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000e970:	00001d06 	br	1000e9e8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000e974:	e0fffe17 	ldw	r3,-8(fp)
1000e978:	e0bff617 	ldw	r2,-40(fp)
1000e97c:	1880022e 	bgeu	r3,r2,1000e988 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000e980:	e0bffe17 	ldw	r2,-8(fp)
1000e984:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000e988:	e0bff817 	ldw	r2,-32(fp)
1000e98c:	10800e04 	addi	r2,r2,56
1000e990:	e0fffc17 	ldw	r3,-16(fp)
1000e994:	1885883a 	add	r2,r3,r2
1000e998:	e13ff517 	ldw	r4,-44(fp)
1000e99c:	100b883a 	mov	r5,r2
1000e9a0:	e1bff617 	ldw	r6,-40(fp)
1000e9a4:	000621c0 	call	1000621c <memcpy>
      ptr   += n;
1000e9a8:	e0fff517 	ldw	r3,-44(fp)
1000e9ac:	e0bff617 	ldw	r2,-40(fp)
1000e9b0:	1885883a 	add	r2,r3,r2
1000e9b4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000e9b8:	e0fffe17 	ldw	r3,-8(fp)
1000e9bc:	e0bff617 	ldw	r2,-40(fp)
1000e9c0:	1885c83a 	sub	r2,r3,r2
1000e9c4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e9c8:	e0fff817 	ldw	r3,-32(fp)
1000e9cc:	e0bff617 	ldw	r2,-40(fp)
1000e9d0:	1885883a 	add	r2,r3,r2
1000e9d4:	10c1ffcc 	andi	r3,r2,2047
1000e9d8:	e0bffc17 	ldw	r2,-16(fp)
1000e9dc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000e9e0:	e0bffe17 	ldw	r2,-8(fp)
1000e9e4:	00bfce16 	blt	zero,r2,1000e920 <__alt_data_end+0xf800e920>

    /* If we read any data then return it */
    if (ptr != buffer)
1000e9e8:	e0fff517 	ldw	r3,-44(fp)
1000e9ec:	e0bffd17 	ldw	r2,-12(fp)
1000e9f0:	18800126 	beq	r3,r2,1000e9f8 <altera_avalon_jtag_uart_read+0x104>
      break;
1000e9f4:	00001506 	br	1000ea4c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000e9f8:	e0bfff17 	ldw	r2,-4(fp)
1000e9fc:	1090000c 	andi	r2,r2,16384
1000ea00:	10000126 	beq	r2,zero,1000ea08 <altera_avalon_jtag_uart_read+0x114>
      break;
1000ea04:	00001106 	br	1000ea4c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000ea08:	0001883a 	nop
1000ea0c:	e0bffc17 	ldw	r2,-16(fp)
1000ea10:	10c00a17 	ldw	r3,40(r2)
1000ea14:	e0bff717 	ldw	r2,-36(fp)
1000ea18:	1880051e 	bne	r3,r2,1000ea30 <altera_avalon_jtag_uart_read+0x13c>
1000ea1c:	e0bffc17 	ldw	r2,-16(fp)
1000ea20:	10c00917 	ldw	r3,36(r2)
1000ea24:	e0bffc17 	ldw	r2,-16(fp)
1000ea28:	10800117 	ldw	r2,4(r2)
1000ea2c:	18bff736 	bltu	r3,r2,1000ea0c <__alt_data_end+0xf800ea0c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000ea30:	e0bffc17 	ldw	r2,-16(fp)
1000ea34:	10c00a17 	ldw	r3,40(r2)
1000ea38:	e0bff717 	ldw	r2,-36(fp)
1000ea3c:	1880011e 	bne	r3,r2,1000ea44 <altera_avalon_jtag_uart_read+0x150>
      break;
1000ea40:	00000206 	br	1000ea4c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000ea44:	e0bffe17 	ldw	r2,-8(fp)
1000ea48:	00bfb516 	blt	zero,r2,1000e920 <__alt_data_end+0xf800e920>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000ea4c:	e0fff517 	ldw	r3,-44(fp)
1000ea50:	e0bffd17 	ldw	r2,-12(fp)
1000ea54:	18801726 	beq	r3,r2,1000eab4 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ea58:	0005303a 	rdctl	r2,status
1000ea5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ea60:	e0fffa17 	ldw	r3,-24(fp)
1000ea64:	00bfff84 	movi	r2,-2
1000ea68:	1884703a 	and	r2,r3,r2
1000ea6c:	1001703a 	wrctl	status,r2
  
  return context;
1000ea70:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000ea74:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000ea78:	e0bffc17 	ldw	r2,-16(fp)
1000ea7c:	10800817 	ldw	r2,32(r2)
1000ea80:	10c00054 	ori	r3,r2,1
1000ea84:	e0bffc17 	ldw	r2,-16(fp)
1000ea88:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ea8c:	e0bffc17 	ldw	r2,-16(fp)
1000ea90:	10800017 	ldw	r2,0(r2)
1000ea94:	10800104 	addi	r2,r2,4
1000ea98:	e0fffc17 	ldw	r3,-16(fp)
1000ea9c:	18c00817 	ldw	r3,32(r3)
1000eaa0:	10c00035 	stwio	r3,0(r2)
1000eaa4:	e0bff917 	ldw	r2,-28(fp)
1000eaa8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000eaac:	e0bffb17 	ldw	r2,-20(fp)
1000eab0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000eab4:	e0fff517 	ldw	r3,-44(fp)
1000eab8:	e0bffd17 	ldw	r2,-12(fp)
1000eabc:	18800426 	beq	r3,r2,1000ead0 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
1000eac0:	e0fff517 	ldw	r3,-44(fp)
1000eac4:	e0bffd17 	ldw	r2,-12(fp)
1000eac8:	1885c83a 	sub	r2,r3,r2
1000eacc:	00000606 	br	1000eae8 <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
1000ead0:	e0bfff17 	ldw	r2,-4(fp)
1000ead4:	1090000c 	andi	r2,r2,16384
1000ead8:	10000226 	beq	r2,zero,1000eae4 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
1000eadc:	00bffd44 	movi	r2,-11
1000eae0:	00000106 	br	1000eae8 <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
1000eae4:	00bffec4 	movi	r2,-5
}
1000eae8:	e037883a 	mov	sp,fp
1000eaec:	dfc00117 	ldw	ra,4(sp)
1000eaf0:	df000017 	ldw	fp,0(sp)
1000eaf4:	dec00204 	addi	sp,sp,8
1000eaf8:	f800283a 	ret

1000eafc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000eafc:	defff304 	addi	sp,sp,-52
1000eb00:	dfc00c15 	stw	ra,48(sp)
1000eb04:	df000b15 	stw	fp,44(sp)
1000eb08:	df000b04 	addi	fp,sp,44
1000eb0c:	e13ffc15 	stw	r4,-16(fp)
1000eb10:	e17ffd15 	stw	r5,-12(fp)
1000eb14:	e1bffe15 	stw	r6,-8(fp)
1000eb18:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000eb1c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000eb20:	e0bffd17 	ldw	r2,-12(fp)
1000eb24:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000eb28:	00003906 	br	1000ec10 <altera_avalon_jtag_uart_write+0x114>
1000eb2c:	00003806 	br	1000ec10 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000eb30:	e0bffc17 	ldw	r2,-16(fp)
1000eb34:	10800c17 	ldw	r2,48(r2)
1000eb38:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000eb3c:	e0bffc17 	ldw	r2,-16(fp)
1000eb40:	10800d17 	ldw	r2,52(r2)
1000eb44:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000eb48:	e0fff817 	ldw	r3,-32(fp)
1000eb4c:	e0bff517 	ldw	r2,-44(fp)
1000eb50:	1880062e 	bgeu	r3,r2,1000eb6c <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
1000eb54:	e0fff517 	ldw	r3,-44(fp)
1000eb58:	e0bff817 	ldw	r2,-32(fp)
1000eb5c:	1885c83a 	sub	r2,r3,r2
1000eb60:	10bfffc4 	addi	r2,r2,-1
1000eb64:	e0bff615 	stw	r2,-40(fp)
1000eb68:	00000b06 	br	1000eb98 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
1000eb6c:	e0bff517 	ldw	r2,-44(fp)
1000eb70:	10000526 	beq	r2,zero,1000eb88 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000eb74:	00c20004 	movi	r3,2048
1000eb78:	e0bff817 	ldw	r2,-32(fp)
1000eb7c:	1885c83a 	sub	r2,r3,r2
1000eb80:	e0bff615 	stw	r2,-40(fp)
1000eb84:	00000406 	br	1000eb98 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000eb88:	00c1ffc4 	movi	r3,2047
1000eb8c:	e0bff817 	ldw	r2,-32(fp)
1000eb90:	1885c83a 	sub	r2,r3,r2
1000eb94:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000eb98:	e0bff617 	ldw	r2,-40(fp)
1000eb9c:	1000011e 	bne	r2,zero,1000eba4 <altera_avalon_jtag_uart_write+0xa8>
        break;
1000eba0:	00001d06 	br	1000ec18 <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
1000eba4:	e0fffe17 	ldw	r3,-8(fp)
1000eba8:	e0bff617 	ldw	r2,-40(fp)
1000ebac:	1880022e 	bgeu	r3,r2,1000ebb8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
1000ebb0:	e0bffe17 	ldw	r2,-8(fp)
1000ebb4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000ebb8:	e0bff817 	ldw	r2,-32(fp)
1000ebbc:	10820e04 	addi	r2,r2,2104
1000ebc0:	e0fffc17 	ldw	r3,-16(fp)
1000ebc4:	1885883a 	add	r2,r3,r2
1000ebc8:	1009883a 	mov	r4,r2
1000ebcc:	e17ffd17 	ldw	r5,-12(fp)
1000ebd0:	e1bff617 	ldw	r6,-40(fp)
1000ebd4:	000621c0 	call	1000621c <memcpy>
      ptr   += n;
1000ebd8:	e0fffd17 	ldw	r3,-12(fp)
1000ebdc:	e0bff617 	ldw	r2,-40(fp)
1000ebe0:	1885883a 	add	r2,r3,r2
1000ebe4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000ebe8:	e0fffe17 	ldw	r3,-8(fp)
1000ebec:	e0bff617 	ldw	r2,-40(fp)
1000ebf0:	1885c83a 	sub	r2,r3,r2
1000ebf4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ebf8:	e0fff817 	ldw	r3,-32(fp)
1000ebfc:	e0bff617 	ldw	r2,-40(fp)
1000ec00:	1885883a 	add	r2,r3,r2
1000ec04:	10c1ffcc 	andi	r3,r2,2047
1000ec08:	e0bffc17 	ldw	r2,-16(fp)
1000ec0c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000ec10:	e0bffe17 	ldw	r2,-8(fp)
1000ec14:	00bfc616 	blt	zero,r2,1000eb30 <__alt_data_end+0xf800eb30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ec18:	0005303a 	rdctl	r2,status
1000ec1c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ec20:	e0fffa17 	ldw	r3,-24(fp)
1000ec24:	00bfff84 	movi	r2,-2
1000ec28:	1884703a 	and	r2,r3,r2
1000ec2c:	1001703a 	wrctl	status,r2
  
  return context;
1000ec30:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000ec34:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000ec38:	e0bffc17 	ldw	r2,-16(fp)
1000ec3c:	10800817 	ldw	r2,32(r2)
1000ec40:	10c00094 	ori	r3,r2,2
1000ec44:	e0bffc17 	ldw	r2,-16(fp)
1000ec48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ec4c:	e0bffc17 	ldw	r2,-16(fp)
1000ec50:	10800017 	ldw	r2,0(r2)
1000ec54:	10800104 	addi	r2,r2,4
1000ec58:	e0fffc17 	ldw	r3,-16(fp)
1000ec5c:	18c00817 	ldw	r3,32(r3)
1000ec60:	10c00035 	stwio	r3,0(r2)
1000ec64:	e0bff917 	ldw	r2,-28(fp)
1000ec68:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ec6c:	e0bffb17 	ldw	r2,-20(fp)
1000ec70:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000ec74:	e0bffe17 	ldw	r2,-8(fp)
1000ec78:	0080120e 	bge	zero,r2,1000ecc4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000ec7c:	e0bfff17 	ldw	r2,-4(fp)
1000ec80:	1090000c 	andi	r2,r2,16384
1000ec84:	10000126 	beq	r2,zero,1000ec8c <altera_avalon_jtag_uart_write+0x190>
        break;
1000ec88:	00001006 	br	1000eccc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000ec8c:	0001883a 	nop
1000ec90:	e0bffc17 	ldw	r2,-16(fp)
1000ec94:	10c00d17 	ldw	r3,52(r2)
1000ec98:	e0bff517 	ldw	r2,-44(fp)
1000ec9c:	1880051e 	bne	r3,r2,1000ecb4 <altera_avalon_jtag_uart_write+0x1b8>
1000eca0:	e0bffc17 	ldw	r2,-16(fp)
1000eca4:	10c00917 	ldw	r3,36(r2)
1000eca8:	e0bffc17 	ldw	r2,-16(fp)
1000ecac:	10800117 	ldw	r2,4(r2)
1000ecb0:	18bff736 	bltu	r3,r2,1000ec90 <__alt_data_end+0xf800ec90>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000ecb4:	e0bffc17 	ldw	r2,-16(fp)
1000ecb8:	10800917 	ldw	r2,36(r2)
1000ecbc:	10000126 	beq	r2,zero,1000ecc4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000ecc0:	00000206 	br	1000eccc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000ecc4:	e0bffe17 	ldw	r2,-8(fp)
1000ecc8:	00bf9816 	blt	zero,r2,1000eb2c <__alt_data_end+0xf800eb2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000eccc:	e0fffd17 	ldw	r3,-12(fp)
1000ecd0:	e0bff717 	ldw	r2,-36(fp)
1000ecd4:	18800426 	beq	r3,r2,1000ece8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000ecd8:	e0fffd17 	ldw	r3,-12(fp)
1000ecdc:	e0bff717 	ldw	r2,-36(fp)
1000ece0:	1885c83a 	sub	r2,r3,r2
1000ece4:	00000606 	br	1000ed00 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000ece8:	e0bfff17 	ldw	r2,-4(fp)
1000ecec:	1090000c 	andi	r2,r2,16384
1000ecf0:	10000226 	beq	r2,zero,1000ecfc <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000ecf4:	00bffd44 	movi	r2,-11
1000ecf8:	00000106 	br	1000ed00 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000ecfc:	00bffec4 	movi	r2,-5
}
1000ed00:	e037883a 	mov	sp,fp
1000ed04:	dfc00117 	ldw	ra,4(sp)
1000ed08:	df000017 	ldw	fp,0(sp)
1000ed0c:	dec00204 	addi	sp,sp,8
1000ed10:	f800283a 	ret

1000ed14 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000ed14:	defff504 	addi	sp,sp,-44
1000ed18:	df000a15 	stw	fp,40(sp)
1000ed1c:	df000a04 	addi	fp,sp,40
1000ed20:	e13ffc15 	stw	r4,-16(fp)
1000ed24:	e17ffd15 	stw	r5,-12(fp)
1000ed28:	e1bffe15 	stw	r6,-8(fp)
1000ed2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000ed30:	e03ff615 	stw	zero,-40(fp)
1000ed34:	00840074 	movhi	r2,4097
1000ed38:	108de404 	addi	r2,r2,14224
1000ed3c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000ed40:	10003f26 	beq	r2,zero,1000ee40 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000ed44:	e0bffc17 	ldw	r2,-16(fp)
1000ed48:	10003b26 	beq	r2,zero,1000ee38 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000ed4c:	e0bffc17 	ldw	r2,-16(fp)
1000ed50:	e0fffe17 	ldw	r3,-8(fp)
1000ed54:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000ed58:	e0bffc17 	ldw	r2,-16(fp)
1000ed5c:	e0ffff17 	ldw	r3,-4(fp)
1000ed60:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ed64:	0005303a 	rdctl	r2,status
1000ed68:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ed6c:	e0fff817 	ldw	r3,-32(fp)
1000ed70:	00bfff84 	movi	r2,-2
1000ed74:	1884703a 	and	r2,r3,r2
1000ed78:	1001703a 	wrctl	status,r2
  
  return context;
1000ed7c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000ed80:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000ed84:	00840074 	movhi	r2,4097
1000ed88:	108de504 	addi	r2,r2,14228
1000ed8c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000ed90:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000ed94:	e0fffd17 	ldw	r3,-12(fp)
1000ed98:	e0bff617 	ldw	r2,-40(fp)
1000ed9c:	1885883a 	add	r2,r3,r2
1000eda0:	10c00044 	addi	r3,r2,1
1000eda4:	e0bffc17 	ldw	r2,-16(fp)
1000eda8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000edac:	e0bffc17 	ldw	r2,-16(fp)
1000edb0:	10c00217 	ldw	r3,8(r2)
1000edb4:	e0bff617 	ldw	r2,-40(fp)
1000edb8:	1880042e 	bgeu	r3,r2,1000edcc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000edbc:	e0bffc17 	ldw	r2,-16(fp)
1000edc0:	00c00044 	movi	r3,1
1000edc4:	10c00405 	stb	r3,16(r2)
1000edc8:	00000206 	br	1000edd4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000edcc:	e0bffc17 	ldw	r2,-16(fp)
1000edd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000edd4:	e0bffc17 	ldw	r2,-16(fp)
1000edd8:	00c40074 	movhi	r3,4097
1000eddc:	18c71a04 	addi	r3,r3,7272
1000ede0:	e0fff915 	stw	r3,-28(fp)
1000ede4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ede8:	e0bffa17 	ldw	r2,-24(fp)
1000edec:	e0fff917 	ldw	r3,-28(fp)
1000edf0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000edf4:	e0bff917 	ldw	r2,-28(fp)
1000edf8:	10c00017 	ldw	r3,0(r2)
1000edfc:	e0bffa17 	ldw	r2,-24(fp)
1000ee00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ee04:	e0bff917 	ldw	r2,-28(fp)
1000ee08:	10800017 	ldw	r2,0(r2)
1000ee0c:	e0fffa17 	ldw	r3,-24(fp)
1000ee10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ee14:	e0bff917 	ldw	r2,-28(fp)
1000ee18:	e0fffa17 	ldw	r3,-24(fp)
1000ee1c:	10c00015 	stw	r3,0(r2)
1000ee20:	e0bff717 	ldw	r2,-36(fp)
1000ee24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ee28:	e0bffb17 	ldw	r2,-20(fp)
1000ee2c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000ee30:	0005883a 	mov	r2,zero
1000ee34:	00000306 	br	1000ee44 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000ee38:	00bffa84 	movi	r2,-22
1000ee3c:	00000106 	br	1000ee44 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000ee40:	00bfde84 	movi	r2,-134
  }
}
1000ee44:	e037883a 	mov	sp,fp
1000ee48:	df000017 	ldw	fp,0(sp)
1000ee4c:	dec00104 	addi	sp,sp,4
1000ee50:	f800283a 	ret

1000ee54 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000ee54:	deffff04 	addi	sp,sp,-4
1000ee58:	df000015 	stw	fp,0(sp)
1000ee5c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000ee60:	e037883a 	mov	sp,fp
1000ee64:	df000017 	ldw	fp,0(sp)
1000ee68:	dec00104 	addi	sp,sp,4
1000ee6c:	f800283a 	ret

1000ee70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ee70:	defffe04 	addi	sp,sp,-8
1000ee74:	dfc00115 	stw	ra,4(sp)
1000ee78:	df000015 	stw	fp,0(sp)
1000ee7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ee80:	00840074 	movhi	r2,4097
1000ee84:	10871704 	addi	r2,r2,7260
1000ee88:	10800017 	ldw	r2,0(r2)
1000ee8c:	10000526 	beq	r2,zero,1000eea4 <alt_get_errno+0x34>
1000ee90:	00840074 	movhi	r2,4097
1000ee94:	10871704 	addi	r2,r2,7260
1000ee98:	10800017 	ldw	r2,0(r2)
1000ee9c:	103ee83a 	callr	r2
1000eea0:	00000206 	br	1000eeac <alt_get_errno+0x3c>
1000eea4:	00840074 	movhi	r2,4097
1000eea8:	108ddf04 	addi	r2,r2,14204
}
1000eeac:	e037883a 	mov	sp,fp
1000eeb0:	dfc00117 	ldw	ra,4(sp)
1000eeb4:	df000017 	ldw	fp,0(sp)
1000eeb8:	dec00204 	addi	sp,sp,8
1000eebc:	f800283a 	ret

1000eec0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000eec0:	defffa04 	addi	sp,sp,-24
1000eec4:	dfc00515 	stw	ra,20(sp)
1000eec8:	df000415 	stw	fp,16(sp)
1000eecc:	df000404 	addi	fp,sp,16
1000eed0:	e13ffe15 	stw	r4,-8(fp)
1000eed4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000eed8:	e0bffe17 	ldw	r2,-8(fp)
1000eedc:	10000326 	beq	r2,zero,1000eeec <alt_dev_llist_insert+0x2c>
1000eee0:	e0bffe17 	ldw	r2,-8(fp)
1000eee4:	10800217 	ldw	r2,8(r2)
1000eee8:	1000051e 	bne	r2,zero,1000ef00 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
1000eeec:	000ee700 	call	1000ee70 <alt_get_errno>
1000eef0:	00c00584 	movi	r3,22
1000eef4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
1000eef8:	00bffa84 	movi	r2,-22
1000eefc:	00001306 	br	1000ef4c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000ef00:	e0bffe17 	ldw	r2,-8(fp)
1000ef04:	e0ffff17 	ldw	r3,-4(fp)
1000ef08:	e0fffc15 	stw	r3,-16(fp)
1000ef0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ef10:	e0bffd17 	ldw	r2,-12(fp)
1000ef14:	e0fffc17 	ldw	r3,-16(fp)
1000ef18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ef1c:	e0bffc17 	ldw	r2,-16(fp)
1000ef20:	10c00017 	ldw	r3,0(r2)
1000ef24:	e0bffd17 	ldw	r2,-12(fp)
1000ef28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ef2c:	e0bffc17 	ldw	r2,-16(fp)
1000ef30:	10800017 	ldw	r2,0(r2)
1000ef34:	e0fffd17 	ldw	r3,-12(fp)
1000ef38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ef3c:	e0bffc17 	ldw	r2,-16(fp)
1000ef40:	e0fffd17 	ldw	r3,-12(fp)
1000ef44:	10c00015 	stw	r3,0(r2)

  return 0;  
1000ef48:	0005883a 	mov	r2,zero
}
1000ef4c:	e037883a 	mov	sp,fp
1000ef50:	dfc00117 	ldw	ra,4(sp)
1000ef54:	df000017 	ldw	fp,0(sp)
1000ef58:	dec00204 	addi	sp,sp,8
1000ef5c:	f800283a 	ret

1000ef60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000ef60:	defffd04 	addi	sp,sp,-12
1000ef64:	dfc00215 	stw	ra,8(sp)
1000ef68:	df000115 	stw	fp,4(sp)
1000ef6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ef70:	00840074 	movhi	r2,4097
1000ef74:	10bf9404 	addi	r2,r2,-432
1000ef78:	e0bfff15 	stw	r2,-4(fp)
1000ef7c:	00000606 	br	1000ef98 <_do_ctors+0x38>
        (*ctor) (); 
1000ef80:	e0bfff17 	ldw	r2,-4(fp)
1000ef84:	10800017 	ldw	r2,0(r2)
1000ef88:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ef8c:	e0bfff17 	ldw	r2,-4(fp)
1000ef90:	10bfff04 	addi	r2,r2,-4
1000ef94:	e0bfff15 	stw	r2,-4(fp)
1000ef98:	e0ffff17 	ldw	r3,-4(fp)
1000ef9c:	00840074 	movhi	r2,4097
1000efa0:	10bf9504 	addi	r2,r2,-428
1000efa4:	18bff62e 	bgeu	r3,r2,1000ef80 <__alt_data_end+0xf800ef80>
        (*ctor) (); 
}
1000efa8:	e037883a 	mov	sp,fp
1000efac:	dfc00117 	ldw	ra,4(sp)
1000efb0:	df000017 	ldw	fp,0(sp)
1000efb4:	dec00204 	addi	sp,sp,8
1000efb8:	f800283a 	ret

1000efbc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000efbc:	defffd04 	addi	sp,sp,-12
1000efc0:	dfc00215 	stw	ra,8(sp)
1000efc4:	df000115 	stw	fp,4(sp)
1000efc8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000efcc:	00840074 	movhi	r2,4097
1000efd0:	10bf9404 	addi	r2,r2,-432
1000efd4:	e0bfff15 	stw	r2,-4(fp)
1000efd8:	00000606 	br	1000eff4 <_do_dtors+0x38>
        (*dtor) (); 
1000efdc:	e0bfff17 	ldw	r2,-4(fp)
1000efe0:	10800017 	ldw	r2,0(r2)
1000efe4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000efe8:	e0bfff17 	ldw	r2,-4(fp)
1000efec:	10bfff04 	addi	r2,r2,-4
1000eff0:	e0bfff15 	stw	r2,-4(fp)
1000eff4:	e0ffff17 	ldw	r3,-4(fp)
1000eff8:	00840074 	movhi	r2,4097
1000effc:	10bf9504 	addi	r2,r2,-428
1000f000:	18bff62e 	bgeu	r3,r2,1000efdc <__alt_data_end+0xf800efdc>
        (*dtor) (); 
}
1000f004:	e037883a 	mov	sp,fp
1000f008:	dfc00117 	ldw	ra,4(sp)
1000f00c:	df000017 	ldw	fp,0(sp)
1000f010:	dec00204 	addi	sp,sp,8
1000f014:	f800283a 	ret

1000f018 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000f018:	deffff04 	addi	sp,sp,-4
1000f01c:	df000015 	stw	fp,0(sp)
1000f020:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000f024:	e037883a 	mov	sp,fp
1000f028:	df000017 	ldw	fp,0(sp)
1000f02c:	dec00104 	addi	sp,sp,4
1000f030:	f800283a 	ret

1000f034 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f034:	defff904 	addi	sp,sp,-28
1000f038:	dfc00615 	stw	ra,24(sp)
1000f03c:	df000515 	stw	fp,20(sp)
1000f040:	df000504 	addi	fp,sp,20
1000f044:	e13ffc15 	stw	r4,-16(fp)
1000f048:	e17ffd15 	stw	r5,-12(fp)
1000f04c:	e1bffe15 	stw	r6,-8(fp)
1000f050:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000f054:	e0800217 	ldw	r2,8(fp)
1000f058:	d8800015 	stw	r2,0(sp)
1000f05c:	e13ffc17 	ldw	r4,-16(fp)
1000f060:	e17ffd17 	ldw	r5,-12(fp)
1000f064:	e1bffe17 	ldw	r6,-8(fp)
1000f068:	e1ffff17 	ldw	r7,-4(fp)
1000f06c:	000f20c0 	call	1000f20c <alt_iic_isr_register>
}  
1000f070:	e037883a 	mov	sp,fp
1000f074:	dfc00117 	ldw	ra,4(sp)
1000f078:	df000017 	ldw	fp,0(sp)
1000f07c:	dec00204 	addi	sp,sp,8
1000f080:	f800283a 	ret

1000f084 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000f084:	defff904 	addi	sp,sp,-28
1000f088:	df000615 	stw	fp,24(sp)
1000f08c:	df000604 	addi	fp,sp,24
1000f090:	e13ffe15 	stw	r4,-8(fp)
1000f094:	e17fff15 	stw	r5,-4(fp)
1000f098:	e0bfff17 	ldw	r2,-4(fp)
1000f09c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f0a0:	0005303a 	rdctl	r2,status
1000f0a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f0a8:	e0fffb17 	ldw	r3,-20(fp)
1000f0ac:	00bfff84 	movi	r2,-2
1000f0b0:	1884703a 	and	r2,r3,r2
1000f0b4:	1001703a 	wrctl	status,r2
  
  return context;
1000f0b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f0bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000f0c0:	e0bffa17 	ldw	r2,-24(fp)
1000f0c4:	00c00044 	movi	r3,1
1000f0c8:	1884983a 	sll	r2,r3,r2
1000f0cc:	1007883a 	mov	r3,r2
1000f0d0:	00840074 	movhi	r2,4097
1000f0d4:	108de304 	addi	r2,r2,14220
1000f0d8:	10800017 	ldw	r2,0(r2)
1000f0dc:	1886b03a 	or	r3,r3,r2
1000f0e0:	00840074 	movhi	r2,4097
1000f0e4:	108de304 	addi	r2,r2,14220
1000f0e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f0ec:	00840074 	movhi	r2,4097
1000f0f0:	108de304 	addi	r2,r2,14220
1000f0f4:	10800017 	ldw	r2,0(r2)
1000f0f8:	100170fa 	wrctl	ienable,r2
1000f0fc:	e0bffc17 	ldw	r2,-16(fp)
1000f100:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f104:	e0bffd17 	ldw	r2,-12(fp)
1000f108:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f10c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
1000f110:	e037883a 	mov	sp,fp
1000f114:	df000017 	ldw	fp,0(sp)
1000f118:	dec00104 	addi	sp,sp,4
1000f11c:	f800283a 	ret

1000f120 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000f120:	defff904 	addi	sp,sp,-28
1000f124:	df000615 	stw	fp,24(sp)
1000f128:	df000604 	addi	fp,sp,24
1000f12c:	e13ffe15 	stw	r4,-8(fp)
1000f130:	e17fff15 	stw	r5,-4(fp)
1000f134:	e0bfff17 	ldw	r2,-4(fp)
1000f138:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f13c:	0005303a 	rdctl	r2,status
1000f140:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f144:	e0fffb17 	ldw	r3,-20(fp)
1000f148:	00bfff84 	movi	r2,-2
1000f14c:	1884703a 	and	r2,r3,r2
1000f150:	1001703a 	wrctl	status,r2
  
  return context;
1000f154:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f158:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000f15c:	e0bffa17 	ldw	r2,-24(fp)
1000f160:	00c00044 	movi	r3,1
1000f164:	1884983a 	sll	r2,r3,r2
1000f168:	0084303a 	nor	r2,zero,r2
1000f16c:	1007883a 	mov	r3,r2
1000f170:	00840074 	movhi	r2,4097
1000f174:	108de304 	addi	r2,r2,14220
1000f178:	10800017 	ldw	r2,0(r2)
1000f17c:	1886703a 	and	r3,r3,r2
1000f180:	00840074 	movhi	r2,4097
1000f184:	108de304 	addi	r2,r2,14220
1000f188:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f18c:	00840074 	movhi	r2,4097
1000f190:	108de304 	addi	r2,r2,14220
1000f194:	10800017 	ldw	r2,0(r2)
1000f198:	100170fa 	wrctl	ienable,r2
1000f19c:	e0bffc17 	ldw	r2,-16(fp)
1000f1a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f1a4:	e0bffd17 	ldw	r2,-12(fp)
1000f1a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f1ac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
1000f1b0:	e037883a 	mov	sp,fp
1000f1b4:	df000017 	ldw	fp,0(sp)
1000f1b8:	dec00104 	addi	sp,sp,4
1000f1bc:	f800283a 	ret

1000f1c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000f1c0:	defffc04 	addi	sp,sp,-16
1000f1c4:	df000315 	stw	fp,12(sp)
1000f1c8:	df000304 	addi	fp,sp,12
1000f1cc:	e13ffe15 	stw	r4,-8(fp)
1000f1d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000f1d4:	000530fa 	rdctl	r2,ienable
1000f1d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000f1dc:	e0bfff17 	ldw	r2,-4(fp)
1000f1e0:	00c00044 	movi	r3,1
1000f1e4:	1884983a 	sll	r2,r3,r2
1000f1e8:	1007883a 	mov	r3,r2
1000f1ec:	e0bffd17 	ldw	r2,-12(fp)
1000f1f0:	1884703a 	and	r2,r3,r2
1000f1f4:	1004c03a 	cmpne	r2,r2,zero
1000f1f8:	10803fcc 	andi	r2,r2,255
}
1000f1fc:	e037883a 	mov	sp,fp
1000f200:	df000017 	ldw	fp,0(sp)
1000f204:	dec00104 	addi	sp,sp,4
1000f208:	f800283a 	ret

1000f20c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f20c:	defff504 	addi	sp,sp,-44
1000f210:	dfc00a15 	stw	ra,40(sp)
1000f214:	df000915 	stw	fp,36(sp)
1000f218:	df000904 	addi	fp,sp,36
1000f21c:	e13ffc15 	stw	r4,-16(fp)
1000f220:	e17ffd15 	stw	r5,-12(fp)
1000f224:	e1bffe15 	stw	r6,-8(fp)
1000f228:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000f22c:	00bffa84 	movi	r2,-22
1000f230:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000f234:	e0bffd17 	ldw	r2,-12(fp)
1000f238:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000f23c:	e0bff817 	ldw	r2,-32(fp)
1000f240:	10800808 	cmpgei	r2,r2,32
1000f244:	1000271e 	bne	r2,zero,1000f2e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f248:	0005303a 	rdctl	r2,status
1000f24c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f250:	e0fffa17 	ldw	r3,-24(fp)
1000f254:	00bfff84 	movi	r2,-2
1000f258:	1884703a 	and	r2,r3,r2
1000f25c:	1001703a 	wrctl	status,r2
  
  return context;
1000f260:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000f264:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000f268:	00c40074 	movhi	r3,4097
1000f26c:	18cdf004 	addi	r3,r3,14272
1000f270:	e0bff817 	ldw	r2,-32(fp)
1000f274:	100490fa 	slli	r2,r2,3
1000f278:	1885883a 	add	r2,r3,r2
1000f27c:	e0fffe17 	ldw	r3,-8(fp)
1000f280:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000f284:	00c40074 	movhi	r3,4097
1000f288:	18cdf004 	addi	r3,r3,14272
1000f28c:	e0bff817 	ldw	r2,-32(fp)
1000f290:	100490fa 	slli	r2,r2,3
1000f294:	1885883a 	add	r2,r3,r2
1000f298:	10800104 	addi	r2,r2,4
1000f29c:	e0ffff17 	ldw	r3,-4(fp)
1000f2a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000f2a4:	e0bffe17 	ldw	r2,-8(fp)
1000f2a8:	10000526 	beq	r2,zero,1000f2c0 <alt_iic_isr_register+0xb4>
1000f2ac:	e0bff817 	ldw	r2,-32(fp)
1000f2b0:	e13ffc17 	ldw	r4,-16(fp)
1000f2b4:	100b883a 	mov	r5,r2
1000f2b8:	000f0840 	call	1000f084 <alt_ic_irq_enable>
1000f2bc:	00000406 	br	1000f2d0 <alt_iic_isr_register+0xc4>
1000f2c0:	e0bff817 	ldw	r2,-32(fp)
1000f2c4:	e13ffc17 	ldw	r4,-16(fp)
1000f2c8:	100b883a 	mov	r5,r2
1000f2cc:	000f1200 	call	1000f120 <alt_ic_irq_disable>
1000f2d0:	e0bff715 	stw	r2,-36(fp)
1000f2d4:	e0bff917 	ldw	r2,-28(fp)
1000f2d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f2dc:	e0bffb17 	ldw	r2,-20(fp)
1000f2e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000f2e4:	e0bff717 	ldw	r2,-36(fp)
}
1000f2e8:	e037883a 	mov	sp,fp
1000f2ec:	dfc00117 	ldw	ra,4(sp)
1000f2f0:	df000017 	ldw	fp,0(sp)
1000f2f4:	dec00204 	addi	sp,sp,8
1000f2f8:	f800283a 	ret

1000f2fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000f2fc:	defff804 	addi	sp,sp,-32
1000f300:	dfc00715 	stw	ra,28(sp)
1000f304:	df000615 	stw	fp,24(sp)
1000f308:	dc000515 	stw	r16,20(sp)
1000f30c:	df000604 	addi	fp,sp,24
1000f310:	e13ffb15 	stw	r4,-20(fp)
1000f314:	e17ffc15 	stw	r5,-16(fp)
1000f318:	e1bffd15 	stw	r6,-12(fp)
1000f31c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000f320:	e13ffc17 	ldw	r4,-16(fp)
1000f324:	e17ffd17 	ldw	r5,-12(fp)
1000f328:	e1bffe17 	ldw	r6,-8(fp)
1000f32c:	000f5980 	call	1000f598 <open>
1000f330:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000f334:	e0bffa17 	ldw	r2,-24(fp)
1000f338:	10002216 	blt	r2,zero,1000f3c4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000f33c:	04040074 	movhi	r16,4097
1000f340:	84029204 	addi	r16,r16,2632
1000f344:	e0bffa17 	ldw	r2,-24(fp)
1000f348:	1009883a 	mov	r4,r2
1000f34c:	01400304 	movi	r5,12
1000f350:	000b0240 	call	1000b024 <__mulsi3>
1000f354:	8085883a 	add	r2,r16,r2
1000f358:	10c00017 	ldw	r3,0(r2)
1000f35c:	e0bffb17 	ldw	r2,-20(fp)
1000f360:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000f364:	04040074 	movhi	r16,4097
1000f368:	84029204 	addi	r16,r16,2632
1000f36c:	e0bffa17 	ldw	r2,-24(fp)
1000f370:	1009883a 	mov	r4,r2
1000f374:	01400304 	movi	r5,12
1000f378:	000b0240 	call	1000b024 <__mulsi3>
1000f37c:	8085883a 	add	r2,r16,r2
1000f380:	10800104 	addi	r2,r2,4
1000f384:	10c00017 	ldw	r3,0(r2)
1000f388:	e0bffb17 	ldw	r2,-20(fp)
1000f38c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000f390:	04040074 	movhi	r16,4097
1000f394:	84029204 	addi	r16,r16,2632
1000f398:	e0bffa17 	ldw	r2,-24(fp)
1000f39c:	1009883a 	mov	r4,r2
1000f3a0:	01400304 	movi	r5,12
1000f3a4:	000b0240 	call	1000b024 <__mulsi3>
1000f3a8:	8085883a 	add	r2,r16,r2
1000f3ac:	10800204 	addi	r2,r2,8
1000f3b0:	10c00017 	ldw	r3,0(r2)
1000f3b4:	e0bffb17 	ldw	r2,-20(fp)
1000f3b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000f3bc:	e13ffa17 	ldw	r4,-24(fp)
1000f3c0:	000dfb40 	call	1000dfb4 <alt_release_fd>
  }
} 
1000f3c4:	e6ffff04 	addi	sp,fp,-4
1000f3c8:	dfc00217 	ldw	ra,8(sp)
1000f3cc:	df000117 	ldw	fp,4(sp)
1000f3d0:	dc000017 	ldw	r16,0(sp)
1000f3d4:	dec00304 	addi	sp,sp,12
1000f3d8:	f800283a 	ret

1000f3dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000f3dc:	defffb04 	addi	sp,sp,-20
1000f3e0:	dfc00415 	stw	ra,16(sp)
1000f3e4:	df000315 	stw	fp,12(sp)
1000f3e8:	df000304 	addi	fp,sp,12
1000f3ec:	e13ffd15 	stw	r4,-12(fp)
1000f3f0:	e17ffe15 	stw	r5,-8(fp)
1000f3f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000f3f8:	01040074 	movhi	r4,4097
1000f3fc:	21029504 	addi	r4,r4,2644
1000f400:	e17ffd17 	ldw	r5,-12(fp)
1000f404:	01800044 	movi	r6,1
1000f408:	01c07fc4 	movi	r7,511
1000f40c:	000f2fc0 	call	1000f2fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000f410:	01040074 	movhi	r4,4097
1000f414:	21029204 	addi	r4,r4,2632
1000f418:	e17ffe17 	ldw	r5,-8(fp)
1000f41c:	000d883a 	mov	r6,zero
1000f420:	01c07fc4 	movi	r7,511
1000f424:	000f2fc0 	call	1000f2fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000f428:	01040074 	movhi	r4,4097
1000f42c:	21029804 	addi	r4,r4,2656
1000f430:	e17fff17 	ldw	r5,-4(fp)
1000f434:	01800044 	movi	r6,1
1000f438:	01c07fc4 	movi	r7,511
1000f43c:	000f2fc0 	call	1000f2fc <alt_open_fd>
}  
1000f440:	e037883a 	mov	sp,fp
1000f444:	dfc00117 	ldw	ra,4(sp)
1000f448:	df000017 	ldw	fp,0(sp)
1000f44c:	dec00204 	addi	sp,sp,8
1000f450:	f800283a 	ret

1000f454 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f454:	defffe04 	addi	sp,sp,-8
1000f458:	dfc00115 	stw	ra,4(sp)
1000f45c:	df000015 	stw	fp,0(sp)
1000f460:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f464:	00840074 	movhi	r2,4097
1000f468:	10871704 	addi	r2,r2,7260
1000f46c:	10800017 	ldw	r2,0(r2)
1000f470:	10000526 	beq	r2,zero,1000f488 <alt_get_errno+0x34>
1000f474:	00840074 	movhi	r2,4097
1000f478:	10871704 	addi	r2,r2,7260
1000f47c:	10800017 	ldw	r2,0(r2)
1000f480:	103ee83a 	callr	r2
1000f484:	00000206 	br	1000f490 <alt_get_errno+0x3c>
1000f488:	00840074 	movhi	r2,4097
1000f48c:	108ddf04 	addi	r2,r2,14204
}
1000f490:	e037883a 	mov	sp,fp
1000f494:	dfc00117 	ldw	ra,4(sp)
1000f498:	df000017 	ldw	fp,0(sp)
1000f49c:	dec00204 	addi	sp,sp,8
1000f4a0:	f800283a 	ret

1000f4a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000f4a4:	defffb04 	addi	sp,sp,-20
1000f4a8:	dfc00415 	stw	ra,16(sp)
1000f4ac:	df000315 	stw	fp,12(sp)
1000f4b0:	dc000215 	stw	r16,8(sp)
1000f4b4:	df000304 	addi	fp,sp,12
1000f4b8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000f4bc:	e0bffe17 	ldw	r2,-8(fp)
1000f4c0:	10800217 	ldw	r2,8(r2)
1000f4c4:	10d00034 	orhi	r3,r2,16384
1000f4c8:	e0bffe17 	ldw	r2,-8(fp)
1000f4cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f4d0:	e03ffd15 	stw	zero,-12(fp)
1000f4d4:	00002306 	br	1000f564 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f4d8:	04040074 	movhi	r16,4097
1000f4dc:	84029204 	addi	r16,r16,2632
1000f4e0:	e0bffd17 	ldw	r2,-12(fp)
1000f4e4:	1009883a 	mov	r4,r2
1000f4e8:	01400304 	movi	r5,12
1000f4ec:	000b0240 	call	1000b024 <__mulsi3>
1000f4f0:	8085883a 	add	r2,r16,r2
1000f4f4:	10c00017 	ldw	r3,0(r2)
1000f4f8:	e0bffe17 	ldw	r2,-8(fp)
1000f4fc:	10800017 	ldw	r2,0(r2)
1000f500:	1880151e 	bne	r3,r2,1000f558 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f504:	04040074 	movhi	r16,4097
1000f508:	84029204 	addi	r16,r16,2632
1000f50c:	e0bffd17 	ldw	r2,-12(fp)
1000f510:	1009883a 	mov	r4,r2
1000f514:	01400304 	movi	r5,12
1000f518:	000b0240 	call	1000b024 <__mulsi3>
1000f51c:	8085883a 	add	r2,r16,r2
1000f520:	10800204 	addi	r2,r2,8
1000f524:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f528:	10000b0e 	bge	r2,zero,1000f558 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000f52c:	e13ffd17 	ldw	r4,-12(fp)
1000f530:	01400304 	movi	r5,12
1000f534:	000b0240 	call	1000b024 <__mulsi3>
1000f538:	1007883a 	mov	r3,r2
1000f53c:	00840074 	movhi	r2,4097
1000f540:	10829204 	addi	r2,r2,2632
1000f544:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f548:	e0bffe17 	ldw	r2,-8(fp)
1000f54c:	18800226 	beq	r3,r2,1000f558 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000f550:	00bffcc4 	movi	r2,-13
1000f554:	00000a06 	br	1000f580 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f558:	e0bffd17 	ldw	r2,-12(fp)
1000f55c:	10800044 	addi	r2,r2,1
1000f560:	e0bffd15 	stw	r2,-12(fp)
1000f564:	00840074 	movhi	r2,4097
1000f568:	10871604 	addi	r2,r2,7256
1000f56c:	10800017 	ldw	r2,0(r2)
1000f570:	1007883a 	mov	r3,r2
1000f574:	e0bffd17 	ldw	r2,-12(fp)
1000f578:	18bfd72e 	bgeu	r3,r2,1000f4d8 <__alt_data_end+0xf800f4d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000f57c:	0005883a 	mov	r2,zero
}
1000f580:	e6ffff04 	addi	sp,fp,-4
1000f584:	dfc00217 	ldw	ra,8(sp)
1000f588:	df000117 	ldw	fp,4(sp)
1000f58c:	dc000017 	ldw	r16,0(sp)
1000f590:	dec00304 	addi	sp,sp,12
1000f594:	f800283a 	ret

1000f598 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000f598:	defff604 	addi	sp,sp,-40
1000f59c:	dfc00915 	stw	ra,36(sp)
1000f5a0:	df000815 	stw	fp,32(sp)
1000f5a4:	df000804 	addi	fp,sp,32
1000f5a8:	e13ffd15 	stw	r4,-12(fp)
1000f5ac:	e17ffe15 	stw	r5,-8(fp)
1000f5b0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000f5b4:	00bfffc4 	movi	r2,-1
1000f5b8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000f5bc:	00bffb44 	movi	r2,-19
1000f5c0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000f5c4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000f5c8:	e13ffd17 	ldw	r4,-12(fp)
1000f5cc:	01440074 	movhi	r5,4097
1000f5d0:	29471404 	addi	r5,r5,7248
1000f5d4:	000d91c0 	call	1000d91c <alt_find_dev>
1000f5d8:	e0bff815 	stw	r2,-32(fp)
1000f5dc:	e0bff817 	ldw	r2,-32(fp)
1000f5e0:	1000051e 	bne	r2,zero,1000f5f8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000f5e4:	e13ffd17 	ldw	r4,-12(fp)
1000f5e8:	000f8b00 	call	1000f8b0 <alt_find_file>
1000f5ec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000f5f0:	00800044 	movi	r2,1
1000f5f4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000f5f8:	e0bff817 	ldw	r2,-32(fp)
1000f5fc:	10002b26 	beq	r2,zero,1000f6ac <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000f600:	e13ff817 	ldw	r4,-32(fp)
1000f604:	000f9c40 	call	1000f9c4 <alt_get_fd>
1000f608:	e0bff915 	stw	r2,-28(fp)
1000f60c:	e0bff917 	ldw	r2,-28(fp)
1000f610:	1000030e 	bge	r2,zero,1000f620 <open+0x88>
    {
      status = index;
1000f614:	e0bff917 	ldw	r2,-28(fp)
1000f618:	e0bffa15 	stw	r2,-24(fp)
1000f61c:	00002506 	br	1000f6b4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000f620:	e13ff917 	ldw	r4,-28(fp)
1000f624:	01400304 	movi	r5,12
1000f628:	000b0240 	call	1000b024 <__mulsi3>
1000f62c:	1007883a 	mov	r3,r2
1000f630:	00840074 	movhi	r2,4097
1000f634:	10829204 	addi	r2,r2,2632
1000f638:	1885883a 	add	r2,r3,r2
1000f63c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000f640:	e0fffe17 	ldw	r3,-8(fp)
1000f644:	00900034 	movhi	r2,16384
1000f648:	10bfffc4 	addi	r2,r2,-1
1000f64c:	1886703a 	and	r3,r3,r2
1000f650:	e0bffc17 	ldw	r2,-16(fp)
1000f654:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000f658:	e0bffb17 	ldw	r2,-20(fp)
1000f65c:	1000051e 	bne	r2,zero,1000f674 <open+0xdc>
1000f660:	e13ffc17 	ldw	r4,-16(fp)
1000f664:	000f4a40 	call	1000f4a4 <alt_file_locked>
1000f668:	e0bffa15 	stw	r2,-24(fp)
1000f66c:	e0bffa17 	ldw	r2,-24(fp)
1000f670:	10001016 	blt	r2,zero,1000f6b4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000f674:	e0bff817 	ldw	r2,-32(fp)
1000f678:	10800317 	ldw	r2,12(r2)
1000f67c:	10000826 	beq	r2,zero,1000f6a0 <open+0x108>
1000f680:	e0bff817 	ldw	r2,-32(fp)
1000f684:	10800317 	ldw	r2,12(r2)
1000f688:	e13ffc17 	ldw	r4,-16(fp)
1000f68c:	e17ffd17 	ldw	r5,-12(fp)
1000f690:	e1bffe17 	ldw	r6,-8(fp)
1000f694:	e1ffff17 	ldw	r7,-4(fp)
1000f698:	103ee83a 	callr	r2
1000f69c:	00000106 	br	1000f6a4 <open+0x10c>
1000f6a0:	0005883a 	mov	r2,zero
1000f6a4:	e0bffa15 	stw	r2,-24(fp)
1000f6a8:	00000206 	br	1000f6b4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000f6ac:	00bffb44 	movi	r2,-19
1000f6b0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000f6b4:	e0bffa17 	ldw	r2,-24(fp)
1000f6b8:	1000080e 	bge	r2,zero,1000f6dc <open+0x144>
  {
    alt_release_fd (index);  
1000f6bc:	e13ff917 	ldw	r4,-28(fp)
1000f6c0:	000dfb40 	call	1000dfb4 <alt_release_fd>
    ALT_ERRNO = -status;
1000f6c4:	000f4540 	call	1000f454 <alt_get_errno>
1000f6c8:	e0fffa17 	ldw	r3,-24(fp)
1000f6cc:	00c7c83a 	sub	r3,zero,r3
1000f6d0:	10c00015 	stw	r3,0(r2)
    return -1;
1000f6d4:	00bfffc4 	movi	r2,-1
1000f6d8:	00000106 	br	1000f6e0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1000f6dc:	e0bff917 	ldw	r2,-28(fp)
}
1000f6e0:	e037883a 	mov	sp,fp
1000f6e4:	dfc00117 	ldw	ra,4(sp)
1000f6e8:	df000017 	ldw	fp,0(sp)
1000f6ec:	dec00204 	addi	sp,sp,8
1000f6f0:	f800283a 	ret

1000f6f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000f6f4:	defffa04 	addi	sp,sp,-24
1000f6f8:	df000515 	stw	fp,20(sp)
1000f6fc:	df000504 	addi	fp,sp,20
1000f700:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f704:	0005303a 	rdctl	r2,status
1000f708:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f70c:	e0fffc17 	ldw	r3,-16(fp)
1000f710:	00bfff84 	movi	r2,-2
1000f714:	1884703a 	and	r2,r3,r2
1000f718:	1001703a 	wrctl	status,r2
  
  return context;
1000f71c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000f720:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000f724:	e0bfff17 	ldw	r2,-4(fp)
1000f728:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000f72c:	e0bffd17 	ldw	r2,-12(fp)
1000f730:	10800017 	ldw	r2,0(r2)
1000f734:	e0fffd17 	ldw	r3,-12(fp)
1000f738:	18c00117 	ldw	r3,4(r3)
1000f73c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000f740:	e0bffd17 	ldw	r2,-12(fp)
1000f744:	10800117 	ldw	r2,4(r2)
1000f748:	e0fffd17 	ldw	r3,-12(fp)
1000f74c:	18c00017 	ldw	r3,0(r3)
1000f750:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000f754:	e0bffd17 	ldw	r2,-12(fp)
1000f758:	e0fffd17 	ldw	r3,-12(fp)
1000f75c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000f760:	e0bffd17 	ldw	r2,-12(fp)
1000f764:	e0fffd17 	ldw	r3,-12(fp)
1000f768:	10c00015 	stw	r3,0(r2)
1000f76c:	e0bffb17 	ldw	r2,-20(fp)
1000f770:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f774:	e0bffe17 	ldw	r2,-8(fp)
1000f778:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000f77c:	e037883a 	mov	sp,fp
1000f780:	df000017 	ldw	fp,0(sp)
1000f784:	dec00104 	addi	sp,sp,4
1000f788:	f800283a 	ret

1000f78c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000f78c:	defffb04 	addi	sp,sp,-20
1000f790:	dfc00415 	stw	ra,16(sp)
1000f794:	df000315 	stw	fp,12(sp)
1000f798:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000f79c:	d0a01017 	ldw	r2,-32704(gp)
1000f7a0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000f7a4:	d0a6db17 	ldw	r2,-25748(gp)
1000f7a8:	10800044 	addi	r2,r2,1
1000f7ac:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f7b0:	00002e06 	br	1000f86c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000f7b4:	e0bffd17 	ldw	r2,-12(fp)
1000f7b8:	10800017 	ldw	r2,0(r2)
1000f7bc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000f7c0:	e0bffd17 	ldw	r2,-12(fp)
1000f7c4:	10800403 	ldbu	r2,16(r2)
1000f7c8:	10803fcc 	andi	r2,r2,255
1000f7cc:	10000426 	beq	r2,zero,1000f7e0 <alt_tick+0x54>
1000f7d0:	d0a6db17 	ldw	r2,-25748(gp)
1000f7d4:	1000021e 	bne	r2,zero,1000f7e0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000f7d8:	e0bffd17 	ldw	r2,-12(fp)
1000f7dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000f7e0:	e0bffd17 	ldw	r2,-12(fp)
1000f7e4:	10800217 	ldw	r2,8(r2)
1000f7e8:	d0e6db17 	ldw	r3,-25748(gp)
1000f7ec:	18801d36 	bltu	r3,r2,1000f864 <alt_tick+0xd8>
1000f7f0:	e0bffd17 	ldw	r2,-12(fp)
1000f7f4:	10800403 	ldbu	r2,16(r2)
1000f7f8:	10803fcc 	andi	r2,r2,255
1000f7fc:	1000191e 	bne	r2,zero,1000f864 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000f800:	e0bffd17 	ldw	r2,-12(fp)
1000f804:	10800317 	ldw	r2,12(r2)
1000f808:	e0fffd17 	ldw	r3,-12(fp)
1000f80c:	18c00517 	ldw	r3,20(r3)
1000f810:	1809883a 	mov	r4,r3
1000f814:	103ee83a 	callr	r2
1000f818:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000f81c:	e0bfff17 	ldw	r2,-4(fp)
1000f820:	1000031e 	bne	r2,zero,1000f830 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000f824:	e13ffd17 	ldw	r4,-12(fp)
1000f828:	000f6f40 	call	1000f6f4 <alt_alarm_stop>
1000f82c:	00000d06 	br	1000f864 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000f830:	e0bffd17 	ldw	r2,-12(fp)
1000f834:	10c00217 	ldw	r3,8(r2)
1000f838:	e0bfff17 	ldw	r2,-4(fp)
1000f83c:	1887883a 	add	r3,r3,r2
1000f840:	e0bffd17 	ldw	r2,-12(fp)
1000f844:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000f848:	e0bffd17 	ldw	r2,-12(fp)
1000f84c:	10c00217 	ldw	r3,8(r2)
1000f850:	d0a6db17 	ldw	r2,-25748(gp)
1000f854:	1880032e 	bgeu	r3,r2,1000f864 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000f858:	e0bffd17 	ldw	r2,-12(fp)
1000f85c:	00c00044 	movi	r3,1
1000f860:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000f864:	e0bffe17 	ldw	r2,-8(fp)
1000f868:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f86c:	e0fffd17 	ldw	r3,-12(fp)
1000f870:	d0a01004 	addi	r2,gp,-32704
1000f874:	18bfcf1e 	bne	r3,r2,1000f7b4 <__alt_data_end+0xf800f7b4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000f878:	0001883a 	nop
}
1000f87c:	e037883a 	mov	sp,fp
1000f880:	dfc00117 	ldw	ra,4(sp)
1000f884:	df000017 	ldw	fp,0(sp)
1000f888:	dec00204 	addi	sp,sp,8
1000f88c:	f800283a 	ret

1000f890 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000f890:	deffff04 	addi	sp,sp,-4
1000f894:	df000015 	stw	fp,0(sp)
1000f898:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000f89c:	000170fa 	wrctl	ienable,zero
}
1000f8a0:	e037883a 	mov	sp,fp
1000f8a4:	df000017 	ldw	fp,0(sp)
1000f8a8:	dec00104 	addi	sp,sp,4
1000f8ac:	f800283a 	ret

1000f8b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000f8b0:	defffb04 	addi	sp,sp,-20
1000f8b4:	dfc00415 	stw	ra,16(sp)
1000f8b8:	df000315 	stw	fp,12(sp)
1000f8bc:	df000304 	addi	fp,sp,12
1000f8c0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000f8c4:	00840074 	movhi	r2,4097
1000f8c8:	10871204 	addi	r2,r2,7240
1000f8cc:	10800017 	ldw	r2,0(r2)
1000f8d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f8d4:	00003106 	br	1000f99c <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000f8d8:	e0bffd17 	ldw	r2,-12(fp)
1000f8dc:	10800217 	ldw	r2,8(r2)
1000f8e0:	1009883a 	mov	r4,r2
1000f8e4:	00077100 	call	10007710 <strlen>
1000f8e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000f8ec:	e0bffd17 	ldw	r2,-12(fp)
1000f8f0:	10c00217 	ldw	r3,8(r2)
1000f8f4:	e0bffe17 	ldw	r2,-8(fp)
1000f8f8:	10bfffc4 	addi	r2,r2,-1
1000f8fc:	1885883a 	add	r2,r3,r2
1000f900:	10800003 	ldbu	r2,0(r2)
1000f904:	10803fcc 	andi	r2,r2,255
1000f908:	1080201c 	xori	r2,r2,128
1000f90c:	10bfe004 	addi	r2,r2,-128
1000f910:	10800bd8 	cmpnei	r2,r2,47
1000f914:	1000031e 	bne	r2,zero,1000f924 <alt_find_file+0x74>
    {
      len -= 1;
1000f918:	e0bffe17 	ldw	r2,-8(fp)
1000f91c:	10bfffc4 	addi	r2,r2,-1
1000f920:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f924:	e0bffe17 	ldw	r2,-8(fp)
1000f928:	e0ffff17 	ldw	r3,-4(fp)
1000f92c:	1885883a 	add	r2,r3,r2
1000f930:	10800003 	ldbu	r2,0(r2)
1000f934:	10803fcc 	andi	r2,r2,255
1000f938:	1080201c 	xori	r2,r2,128
1000f93c:	10bfe004 	addi	r2,r2,-128
1000f940:	10800be0 	cmpeqi	r2,r2,47
1000f944:	1000081e 	bne	r2,zero,1000f968 <alt_find_file+0xb8>
1000f948:	e0bffe17 	ldw	r2,-8(fp)
1000f94c:	e0ffff17 	ldw	r3,-4(fp)
1000f950:	1885883a 	add	r2,r3,r2
1000f954:	10800003 	ldbu	r2,0(r2)
1000f958:	10803fcc 	andi	r2,r2,255
1000f95c:	1080201c 	xori	r2,r2,128
1000f960:	10bfe004 	addi	r2,r2,-128
1000f964:	10000a1e 	bne	r2,zero,1000f990 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000f968:	e0bffd17 	ldw	r2,-12(fp)
1000f96c:	10c00217 	ldw	r3,8(r2)
1000f970:	e0bffe17 	ldw	r2,-8(fp)
1000f974:	1809883a 	mov	r4,r3
1000f978:	e17fff17 	ldw	r5,-4(fp)
1000f97c:	100d883a 	mov	r6,r2
1000f980:	000fae40 	call	1000fae4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f984:	1000021e 	bne	r2,zero,1000f990 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000f988:	e0bffd17 	ldw	r2,-12(fp)
1000f98c:	00000806 	br	1000f9b0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000f990:	e0bffd17 	ldw	r2,-12(fp)
1000f994:	10800017 	ldw	r2,0(r2)
1000f998:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f99c:	e0fffd17 	ldw	r3,-12(fp)
1000f9a0:	00840074 	movhi	r2,4097
1000f9a4:	10871204 	addi	r2,r2,7240
1000f9a8:	18bfcb1e 	bne	r3,r2,1000f8d8 <__alt_data_end+0xf800f8d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000f9ac:	0005883a 	mov	r2,zero
}
1000f9b0:	e037883a 	mov	sp,fp
1000f9b4:	dfc00117 	ldw	ra,4(sp)
1000f9b8:	df000017 	ldw	fp,0(sp)
1000f9bc:	dec00204 	addi	sp,sp,8
1000f9c0:	f800283a 	ret

1000f9c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000f9c4:	defffa04 	addi	sp,sp,-24
1000f9c8:	dfc00515 	stw	ra,20(sp)
1000f9cc:	df000415 	stw	fp,16(sp)
1000f9d0:	dc000315 	stw	r16,12(sp)
1000f9d4:	df000404 	addi	fp,sp,16
1000f9d8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000f9dc:	00bffa04 	movi	r2,-24
1000f9e0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f9e4:	e03ffc15 	stw	zero,-16(fp)
1000f9e8:	00002106 	br	1000fa70 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000f9ec:	04040074 	movhi	r16,4097
1000f9f0:	84029204 	addi	r16,r16,2632
1000f9f4:	e0bffc17 	ldw	r2,-16(fp)
1000f9f8:	1009883a 	mov	r4,r2
1000f9fc:	01400304 	movi	r5,12
1000fa00:	000b0240 	call	1000b024 <__mulsi3>
1000fa04:	8085883a 	add	r2,r16,r2
1000fa08:	10800017 	ldw	r2,0(r2)
1000fa0c:	1000151e 	bne	r2,zero,1000fa64 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000fa10:	04040074 	movhi	r16,4097
1000fa14:	84029204 	addi	r16,r16,2632
1000fa18:	e0bffc17 	ldw	r2,-16(fp)
1000fa1c:	1009883a 	mov	r4,r2
1000fa20:	01400304 	movi	r5,12
1000fa24:	000b0240 	call	1000b024 <__mulsi3>
1000fa28:	8085883a 	add	r2,r16,r2
1000fa2c:	e0fffe17 	ldw	r3,-8(fp)
1000fa30:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000fa34:	00840074 	movhi	r2,4097
1000fa38:	10871604 	addi	r2,r2,7256
1000fa3c:	10c00017 	ldw	r3,0(r2)
1000fa40:	e0bffc17 	ldw	r2,-16(fp)
1000fa44:	1880040e 	bge	r3,r2,1000fa58 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000fa48:	00840074 	movhi	r2,4097
1000fa4c:	10871604 	addi	r2,r2,7256
1000fa50:	e0fffc17 	ldw	r3,-16(fp)
1000fa54:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000fa58:	e0bffc17 	ldw	r2,-16(fp)
1000fa5c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000fa60:	00000606 	br	1000fa7c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000fa64:	e0bffc17 	ldw	r2,-16(fp)
1000fa68:	10800044 	addi	r2,r2,1
1000fa6c:	e0bffc15 	stw	r2,-16(fp)
1000fa70:	e0bffc17 	ldw	r2,-16(fp)
1000fa74:	10800810 	cmplti	r2,r2,32
1000fa78:	103fdc1e 	bne	r2,zero,1000f9ec <__alt_data_end+0xf800f9ec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000fa7c:	e0bffd17 	ldw	r2,-12(fp)
}
1000fa80:	e6ffff04 	addi	sp,fp,-4
1000fa84:	dfc00217 	ldw	ra,8(sp)
1000fa88:	df000117 	ldw	fp,4(sp)
1000fa8c:	dc000017 	ldw	r16,0(sp)
1000fa90:	dec00304 	addi	sp,sp,12
1000fa94:	f800283a 	ret

1000fa98 <atexit>:
1000fa98:	200b883a 	mov	r5,r4
1000fa9c:	000d883a 	mov	r6,zero
1000faa0:	0009883a 	mov	r4,zero
1000faa4:	000f883a 	mov	r7,zero
1000faa8:	000fb601 	jmpi	1000fb60 <__register_exitproc>

1000faac <exit>:
1000faac:	defffe04 	addi	sp,sp,-8
1000fab0:	000b883a 	mov	r5,zero
1000fab4:	dc000015 	stw	r16,0(sp)
1000fab8:	dfc00115 	stw	ra,4(sp)
1000fabc:	2021883a 	mov	r16,r4
1000fac0:	000fc7c0 	call	1000fc7c <__call_exitprocs>
1000fac4:	00840074 	movhi	r2,4097
1000fac8:	10870c04 	addi	r2,r2,7216
1000facc:	11000017 	ldw	r4,0(r2)
1000fad0:	20800f17 	ldw	r2,60(r4)
1000fad4:	10000126 	beq	r2,zero,1000fadc <exit+0x30>
1000fad8:	103ee83a 	callr	r2
1000fadc:	8009883a 	mov	r4,r16
1000fae0:	000fe200 	call	1000fe20 <_exit>

1000fae4 <memcmp>:
1000fae4:	01c000c4 	movi	r7,3
1000fae8:	3980192e 	bgeu	r7,r6,1000fb50 <memcmp+0x6c>
1000faec:	2144b03a 	or	r2,r4,r5
1000faf0:	11c4703a 	and	r2,r2,r7
1000faf4:	10000f26 	beq	r2,zero,1000fb34 <memcmp+0x50>
1000faf8:	21c00003 	ldbu	r7,0(r4)
1000fafc:	28800003 	ldbu	r2,0(r5)
1000fb00:	3880151e 	bne	r7,r2,1000fb58 <memcmp+0x74>
1000fb04:	30ffff84 	addi	r3,r6,-2
1000fb08:	01bfffc4 	movi	r6,-1
1000fb0c:	00000406 	br	1000fb20 <memcmp+0x3c>
1000fb10:	21c00003 	ldbu	r7,0(r4)
1000fb14:	28800003 	ldbu	r2,0(r5)
1000fb18:	18ffffc4 	addi	r3,r3,-1
1000fb1c:	38800e1e 	bne	r7,r2,1000fb58 <memcmp+0x74>
1000fb20:	21000044 	addi	r4,r4,1
1000fb24:	29400044 	addi	r5,r5,1
1000fb28:	19bff91e 	bne	r3,r6,1000fb10 <__alt_data_end+0xf800fb10>
1000fb2c:	0005883a 	mov	r2,zero
1000fb30:	f800283a 	ret
1000fb34:	20c00017 	ldw	r3,0(r4)
1000fb38:	28800017 	ldw	r2,0(r5)
1000fb3c:	1880041e 	bne	r3,r2,1000fb50 <memcmp+0x6c>
1000fb40:	31bfff04 	addi	r6,r6,-4
1000fb44:	21000104 	addi	r4,r4,4
1000fb48:	29400104 	addi	r5,r5,4
1000fb4c:	39bff936 	bltu	r7,r6,1000fb34 <__alt_data_end+0xf800fb34>
1000fb50:	303fe91e 	bne	r6,zero,1000faf8 <__alt_data_end+0xf800faf8>
1000fb54:	003ff506 	br	1000fb2c <__alt_data_end+0xf800fb2c>
1000fb58:	3885c83a 	sub	r2,r7,r2
1000fb5c:	f800283a 	ret

1000fb60 <__register_exitproc>:
1000fb60:	defffa04 	addi	sp,sp,-24
1000fb64:	00840074 	movhi	r2,4097
1000fb68:	10870c04 	addi	r2,r2,7216
1000fb6c:	dc000315 	stw	r16,12(sp)
1000fb70:	14000017 	ldw	r16,0(r2)
1000fb74:	dc400415 	stw	r17,16(sp)
1000fb78:	dfc00515 	stw	ra,20(sp)
1000fb7c:	80805217 	ldw	r2,328(r16)
1000fb80:	2023883a 	mov	r17,r4
1000fb84:	10003a26 	beq	r2,zero,1000fc70 <__register_exitproc+0x110>
1000fb88:	10c00117 	ldw	r3,4(r2)
1000fb8c:	020007c4 	movi	r8,31
1000fb90:	40c0190e 	bge	r8,r3,1000fbf8 <__register_exitproc+0x98>
1000fb94:	00800034 	movhi	r2,0
1000fb98:	10800004 	addi	r2,r2,0
1000fb9c:	1000061e 	bne	r2,zero,1000fbb8 <__register_exitproc+0x58>
1000fba0:	00bfffc4 	movi	r2,-1
1000fba4:	dfc00517 	ldw	ra,20(sp)
1000fba8:	dc400417 	ldw	r17,16(sp)
1000fbac:	dc000317 	ldw	r16,12(sp)
1000fbb0:	dec00604 	addi	sp,sp,24
1000fbb4:	f800283a 	ret
1000fbb8:	01006404 	movi	r4,400
1000fbbc:	d9400015 	stw	r5,0(sp)
1000fbc0:	d9800115 	stw	r6,4(sp)
1000fbc4:	d9c00215 	stw	r7,8(sp)
1000fbc8:	00000000 	call	10000000 <__reset>
1000fbcc:	d9400017 	ldw	r5,0(sp)
1000fbd0:	d9800117 	ldw	r6,4(sp)
1000fbd4:	d9c00217 	ldw	r7,8(sp)
1000fbd8:	103ff126 	beq	r2,zero,1000fba0 <__alt_data_end+0xf800fba0>
1000fbdc:	81005217 	ldw	r4,328(r16)
1000fbe0:	10000115 	stw	zero,4(r2)
1000fbe4:	0007883a 	mov	r3,zero
1000fbe8:	11000015 	stw	r4,0(r2)
1000fbec:	80805215 	stw	r2,328(r16)
1000fbf0:	10006215 	stw	zero,392(r2)
1000fbf4:	10006315 	stw	zero,396(r2)
1000fbf8:	88000d1e 	bne	r17,zero,1000fc30 <__register_exitproc+0xd0>
1000fbfc:	19000084 	addi	r4,r3,2
1000fc00:	2109883a 	add	r4,r4,r4
1000fc04:	18c00044 	addi	r3,r3,1
1000fc08:	2109883a 	add	r4,r4,r4
1000fc0c:	10c00115 	stw	r3,4(r2)
1000fc10:	1105883a 	add	r2,r2,r4
1000fc14:	11400015 	stw	r5,0(r2)
1000fc18:	0005883a 	mov	r2,zero
1000fc1c:	dfc00517 	ldw	ra,20(sp)
1000fc20:	dc400417 	ldw	r17,16(sp)
1000fc24:	dc000317 	ldw	r16,12(sp)
1000fc28:	dec00604 	addi	sp,sp,24
1000fc2c:	f800283a 	ret
1000fc30:	18c9883a 	add	r4,r3,r3
1000fc34:	2109883a 	add	r4,r4,r4
1000fc38:	1109883a 	add	r4,r2,r4
1000fc3c:	21802215 	stw	r6,136(r4)
1000fc40:	01800044 	movi	r6,1
1000fc44:	12006217 	ldw	r8,392(r2)
1000fc48:	30cc983a 	sll	r6,r6,r3
1000fc4c:	4190b03a 	or	r8,r8,r6
1000fc50:	12006215 	stw	r8,392(r2)
1000fc54:	21c04215 	stw	r7,264(r4)
1000fc58:	01000084 	movi	r4,2
1000fc5c:	893fe71e 	bne	r17,r4,1000fbfc <__alt_data_end+0xf800fbfc>
1000fc60:	11006317 	ldw	r4,396(r2)
1000fc64:	218cb03a 	or	r6,r4,r6
1000fc68:	11806315 	stw	r6,396(r2)
1000fc6c:	003fe306 	br	1000fbfc <__alt_data_end+0xf800fbfc>
1000fc70:	80805304 	addi	r2,r16,332
1000fc74:	80805215 	stw	r2,328(r16)
1000fc78:	003fc306 	br	1000fb88 <__alt_data_end+0xf800fb88>

1000fc7c <__call_exitprocs>:
1000fc7c:	00840074 	movhi	r2,4097
1000fc80:	10870c04 	addi	r2,r2,7216
1000fc84:	10800017 	ldw	r2,0(r2)
1000fc88:	defff304 	addi	sp,sp,-52
1000fc8c:	df000b15 	stw	fp,44(sp)
1000fc90:	d8800015 	stw	r2,0(sp)
1000fc94:	10805204 	addi	r2,r2,328
1000fc98:	dd400815 	stw	r21,32(sp)
1000fc9c:	dfc00c15 	stw	ra,48(sp)
1000fca0:	ddc00a15 	stw	r23,40(sp)
1000fca4:	dd800915 	stw	r22,36(sp)
1000fca8:	dd000715 	stw	r20,28(sp)
1000fcac:	dcc00615 	stw	r19,24(sp)
1000fcb0:	dc800515 	stw	r18,20(sp)
1000fcb4:	dc400415 	stw	r17,16(sp)
1000fcb8:	dc000315 	stw	r16,12(sp)
1000fcbc:	d9000115 	stw	r4,4(sp)
1000fcc0:	2839883a 	mov	fp,r5
1000fcc4:	d8800215 	stw	r2,8(sp)
1000fcc8:	057fffc4 	movi	r21,-1
1000fccc:	d8800017 	ldw	r2,0(sp)
1000fcd0:	14805217 	ldw	r18,328(r2)
1000fcd4:	90001826 	beq	r18,zero,1000fd38 <__call_exitprocs+0xbc>
1000fcd8:	ddc00217 	ldw	r23,8(sp)
1000fcdc:	90c00117 	ldw	r3,4(r18)
1000fce0:	1c3fffc4 	addi	r16,r3,-1
1000fce4:	80001116 	blt	r16,zero,1000fd2c <__call_exitprocs+0xb0>
1000fce8:	18c00044 	addi	r3,r3,1
1000fcec:	8427883a 	add	r19,r16,r16
1000fcf0:	18c7883a 	add	r3,r3,r3
1000fcf4:	95802204 	addi	r22,r18,136
1000fcf8:	9ce7883a 	add	r19,r19,r19
1000fcfc:	18c7883a 	add	r3,r3,r3
1000fd00:	b4e7883a 	add	r19,r22,r19
1000fd04:	90e3883a 	add	r17,r18,r3
1000fd08:	e0001726 	beq	fp,zero,1000fd68 <__call_exitprocs+0xec>
1000fd0c:	8c87c83a 	sub	r3,r17,r18
1000fd10:	b0c7883a 	add	r3,r22,r3
1000fd14:	18c01e17 	ldw	r3,120(r3)
1000fd18:	1f001326 	beq	r3,fp,1000fd68 <__call_exitprocs+0xec>
1000fd1c:	843fffc4 	addi	r16,r16,-1
1000fd20:	9cffff04 	addi	r19,r19,-4
1000fd24:	8c7fff04 	addi	r17,r17,-4
1000fd28:	857ff71e 	bne	r16,r21,1000fd08 <__alt_data_end+0xf800fd08>
1000fd2c:	00800034 	movhi	r2,0
1000fd30:	10800004 	addi	r2,r2,0
1000fd34:	10002a1e 	bne	r2,zero,1000fde0 <__call_exitprocs+0x164>
1000fd38:	dfc00c17 	ldw	ra,48(sp)
1000fd3c:	df000b17 	ldw	fp,44(sp)
1000fd40:	ddc00a17 	ldw	r23,40(sp)
1000fd44:	dd800917 	ldw	r22,36(sp)
1000fd48:	dd400817 	ldw	r21,32(sp)
1000fd4c:	dd000717 	ldw	r20,28(sp)
1000fd50:	dcc00617 	ldw	r19,24(sp)
1000fd54:	dc800517 	ldw	r18,20(sp)
1000fd58:	dc400417 	ldw	r17,16(sp)
1000fd5c:	dc000317 	ldw	r16,12(sp)
1000fd60:	dec00d04 	addi	sp,sp,52
1000fd64:	f800283a 	ret
1000fd68:	91000117 	ldw	r4,4(r18)
1000fd6c:	88c00017 	ldw	r3,0(r17)
1000fd70:	213fffc4 	addi	r4,r4,-1
1000fd74:	24001526 	beq	r4,r16,1000fdcc <__call_exitprocs+0x150>
1000fd78:	88000015 	stw	zero,0(r17)
1000fd7c:	183fe726 	beq	r3,zero,1000fd1c <__alt_data_end+0xf800fd1c>
1000fd80:	00800044 	movi	r2,1
1000fd84:	1408983a 	sll	r4,r2,r16
1000fd88:	91406217 	ldw	r5,392(r18)
1000fd8c:	95000117 	ldw	r20,4(r18)
1000fd90:	214a703a 	and	r5,r4,r5
1000fd94:	28000b26 	beq	r5,zero,1000fdc4 <__call_exitprocs+0x148>
1000fd98:	91406317 	ldw	r5,396(r18)
1000fd9c:	2148703a 	and	r4,r4,r5
1000fda0:	20000c1e 	bne	r4,zero,1000fdd4 <__call_exitprocs+0x158>
1000fda4:	99400017 	ldw	r5,0(r19)
1000fda8:	d9000117 	ldw	r4,4(sp)
1000fdac:	183ee83a 	callr	r3
1000fdb0:	90c00117 	ldw	r3,4(r18)
1000fdb4:	1d3fc51e 	bne	r3,r20,1000fccc <__alt_data_end+0xf800fccc>
1000fdb8:	b8c00017 	ldw	r3,0(r23)
1000fdbc:	1cbfd726 	beq	r3,r18,1000fd1c <__alt_data_end+0xf800fd1c>
1000fdc0:	003fc206 	br	1000fccc <__alt_data_end+0xf800fccc>
1000fdc4:	183ee83a 	callr	r3
1000fdc8:	003ff906 	br	1000fdb0 <__alt_data_end+0xf800fdb0>
1000fdcc:	94000115 	stw	r16,4(r18)
1000fdd0:	003fea06 	br	1000fd7c <__alt_data_end+0xf800fd7c>
1000fdd4:	99000017 	ldw	r4,0(r19)
1000fdd8:	183ee83a 	callr	r3
1000fddc:	003ff406 	br	1000fdb0 <__alt_data_end+0xf800fdb0>
1000fde0:	90c00117 	ldw	r3,4(r18)
1000fde4:	1800081e 	bne	r3,zero,1000fe08 <__call_exitprocs+0x18c>
1000fde8:	90c00017 	ldw	r3,0(r18)
1000fdec:	18000a26 	beq	r3,zero,1000fe18 <__call_exitprocs+0x19c>
1000fdf0:	9009883a 	mov	r4,r18
1000fdf4:	b8c00015 	stw	r3,0(r23)
1000fdf8:	00000000 	call	10000000 <__reset>
1000fdfc:	bc800017 	ldw	r18,0(r23)
1000fe00:	903fb61e 	bne	r18,zero,1000fcdc <__alt_data_end+0xf800fcdc>
1000fe04:	003fcc06 	br	1000fd38 <__alt_data_end+0xf800fd38>
1000fe08:	90c00017 	ldw	r3,0(r18)
1000fe0c:	902f883a 	mov	r23,r18
1000fe10:	1825883a 	mov	r18,r3
1000fe14:	003ffa06 	br	1000fe00 <__alt_data_end+0xf800fe00>
1000fe18:	0007883a 	mov	r3,zero
1000fe1c:	003ffb06 	br	1000fe0c <__alt_data_end+0xf800fe0c>

1000fe20 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000fe20:	defffd04 	addi	sp,sp,-12
1000fe24:	df000215 	stw	fp,8(sp)
1000fe28:	df000204 	addi	fp,sp,8
1000fe2c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000fe30:	0001883a 	nop
1000fe34:	e0bfff17 	ldw	r2,-4(fp)
1000fe38:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000fe3c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000fe40:	10000226 	beq	r2,zero,1000fe4c <_exit+0x2c>
    ALT_SIM_FAIL();
1000fe44:	002af070 	cmpltui	zero,zero,43969
1000fe48:	00000106 	br	1000fe50 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000fe4c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000fe50:	003fff06 	br	1000fe50 <__alt_data_end+0xf800fe50>
