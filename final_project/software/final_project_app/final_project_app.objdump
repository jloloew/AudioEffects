
final_project_app.elf:     file format elf32-littlenios2
final_project_app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00010048 memsz 0x00010048 flags r-x
    LOAD off    0x00011068 vaddr 0x10010068 paddr 0x10011b5c align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013650 vaddr 0x10013650 paddr 0x10013650 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fb90  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000031c  1000fd4c  1000fd4c  00010d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  10010068  10011b5c  00011068  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  10013650  10013650  00013650  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00012b5c  2**0
                  CONTENTS
  7 .sdram        00000000  100137ac  100137ac  00012b5c  2**0
                  CONTENTS
  8 .comment      00000039  00000000  00000000  00012b5c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ce8  00000000  00000000  00012b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023bd0  00000000  00000000  00013880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008ec8  00000000  00000000  00037450  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000af57  00000000  00000000  00040318  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000023c4  00000000  00000000  0004b270  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000345c  00000000  00000000  0004d634  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001704e  00000000  00000000  00050a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00067ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001338  00000000  00000000  00067af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006c3a1  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006c3a4  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006c3b0  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006c3b1  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006c3b2  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006c3b6  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006c3ba  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006c3be  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006c3c9  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006c3d4  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0006c3df  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003c  00000000  00000000  0006c3f0  2**0
                  CONTENTS, READONLY
 30 .jdi          000047d7  00000000  00000000  0006c42c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00063454  00000000  00000000  00070c03  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
1000fd4c l    d  .rodata	00000000 .rodata
10010068 l    d  .rwdata	00000000 .rwdata
10013650 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100137ac l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_app_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 audIO.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000fdae l     O .rodata	00000010 zeroes.4155
1000fdbe l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10003284 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10004d5c l     F .text	00000008 __fp_lock
10004d64 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10010068 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100104ac l     O .rwdata	00000020 lc_ctype_charset
1001048c l     O .rwdata	00000020 lc_message_charset
100104cc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1000fdf0 l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
100081e0 l     F .text	000000fc __sprint_r.part.0
1000ff24 l     O .rodata	00000010 blanks.4099
1000ff14 l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000ae08 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000d6c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000d7e8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000d8a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000d9a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000daa0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000db84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000dd64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10011b4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000dfdc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000e120 l     F .text	00000038 alt_dev_reg
10010ab4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000e3f8 l     F .text	000001fc altera_avalon_jtag_uart_irq
1000e5f4 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000ed68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000f1f4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000f34c l     F .text	00000050 alt_get_errno
1000f39c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000785c g     F .text	00000074 _mprec_log10
10007948 g     F .text	00000088 __any_on
10009ca8 g     F .text	00000064 _isatty_r
1000fdfc g     O .rodata	00000028 __mprec_tinytens
1000dcac g     F .text	00000078 alt_main
10000e7c g     F .text	000000b8 _puts_r
100136ac g     O .bss	00000100 alt_irq
10009d0c g     F .text	0000006c _lseek_r
10011b5c g       *ABS*	00000000 __flash_rwdata_start
1000c15c g     F .text	00000084 .hidden __eqdf2
10000478 g     F .text	00000060 alt_up_audio_read_fifo_avail
100137ac g       *ABS*	00000000 __alt_heap_start
10000e40 g     F .text	0000003c printf
100004d8 g     F .text	00000068 alt_up_audio_record_r
10009f80 g     F .text	0000009c _wcrtomb_r
100080d8 g     F .text	0000005c __sseek
10004e08 g     F .text	0000019c __sinit
10009de4 g     F .text	00000180 __swbuf_r
10005b18 g     F .text	00000070 _setlocale_r
10004d78 g     F .text	00000078 __sfmoreglue
1000dd44 g     F .text	00000020 __malloc_unlock
100003f0 g     F .text	00000088 alt_up_audio_reset_audio_core
10000b6c g     F .text	00000044 audio_read_fifo_head
10000bb0 g     F .text	00000050 audio_write_fifo_head
10006758 g     F .text	0000013c memmove
10004df0 g     F .text	00000018 _cleanup
10000d10 g     F .text	0000005c audio_play_r
100069a8 g     F .text	000000a8 _Balloc
10000c00 g     F .text	0000005c audio_record_r
1000c1e0 g     F .text	000000d8 .hidden __gtdf2
1000f788 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10009c40 g     F .text	00000068 _fstat_r
10013668 g     O .bss	00000004 errno
10008054 g     F .text	00000008 __seofread
100003b0 g     F .text	00000040 alt_up_audio_write_interrupt_pending
10013670 g     O .bss	00000004 alt_argv
10019b14 g       *ABS*	00000000 _gp
10000a84 g     F .text	000000e8 audio_write_fifo
10010934 g     O .rwdata	00000180 alt_fd_list
1000d814 g     F .text	00000090 alt_find_dev
1000664c g     F .text	0000010c memcpy
10004d6c g     F .text	0000000c _cleanup_r
1000d4ac g     F .text	000000d0 .hidden __floatsidf
1000f2d4 g     F .text	00000078 alt_io_redirect
1000c2b8 g     F .text	000000ec .hidden __ltdf2
1000fd4c g       *ABS*	00000000 __DTOR_END__
10011b18 g     O .rwdata	00000004 AUDIO_CONFIG
10000f34 g     F .text	00000014 puts
10007f34 g     F .text	00000068 __fpclassifyd
100077bc g     F .text	000000a0 __ratio
1000973c g     F .text	00000024 __vfiprintf_internal
100008b4 g     F .text	00000050 alt_up_audio_read_fifo_head
1000e7ec g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10000e14 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000af0c g     F .text	00000008 .hidden __udivsi3
1000d9f8 g     F .text	000000a8 isatty
1000fe4c g     O .rodata	000000c8 __mprec_tens
10005b88 g     F .text	0000000c __locale_charset
10013664 g     O .bss	00000004 __malloc_top_pad
10011b24 g     O .rwdata	00000004 __mb_cur_max
10005bb8 g     F .text	0000000c _localeconv_r
10006dd8 g     F .text	0000003c __i2b
1000550c g     F .text	000004ac __sfvwrite_r
10007f9c g     F .text	00000064 _sbrk_r
10009d78 g     F .text	0000006c _read_r
10011b44 g     O .rwdata	00000004 alt_max_fd
10000904 g     F .text	0000005c alt_up_audio_write_fifo_head
10009908 g     F .text	00000128 _fclose_r
10004d2c g     F .text	00000030 fflush
10013660 g     O .bss	00000004 __malloc_max_sbrked_mem
1000af44 g     F .text	0000087c .hidden __adddf3
10007588 g     F .text	000000f0 __b2d
1000a7d4 g     F .text	00000634 .hidden __umoddi3
1000dbd4 g     F .text	000000d8 lseek
10011b1c g     O .rwdata	00000004 _global_impure_ptr
100079d0 g     F .text	00000564 _realloc_r
100137ac g       *ABS*	00000000 __bss_end
1000f104 g     F .text	000000f0 alt_iic_isr_register
1000f684 g     F .text	00000104 alt_tick
1000a180 g     F .text	00000654 .hidden __udivdi3
10009a44 g     F .text	00000184 _fputwc_r
1000fe24 g     O .rodata	00000028 __mprec_bigtens
10006bbc g     F .text	00000104 __s2b
1000d57c g     F .text	000000a0 .hidden __floatunsidf
10007318 g     F .text	00000060 __mcmp
100001f8 g     F .text	00000040 alt_up_audio_open_dev
100050d0 g     F .text	00000018 __fp_lock_all
1000f0b8 g     F .text	0000004c alt_ic_irq_enabled
10000608 g     F .text	00000068 alt_up_audio_play_r
1000f5ec g     F .text	00000098 alt_alarm_stop
10013678 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
1001090c g     O .rwdata	00000028 alt_dev_null
1000ed4c g     F .text	0000001c alt_dcache_flush_all
10006cc0 g     F .text	00000068 __hi0bits
10011b14 g     O .rwdata	00000004 AUDIO_DEVICE
1000d42c g     F .text	00000080 .hidden __fixdfsi
10011b5c g       *ABS*	00000000 __ram_rwdata_end
10011b3c g     O .rwdata	00000008 alt_dev_list
1000e02c g     F .text	000000f4 write
10010068 g       *ABS*	00000000 __ram_rodata_end
1000d8f4 g     F .text	000000b4 fstat
1000c2b8 g     F .text	000000ec .hidden __ledf2
10007080 g     F .text	00000148 __pow5mult
100082f4 g     F .text	00001448 ___vfiprintf_internal_r
10013658 g     O .bss	00000004 __nlocale_changed
1000af14 g     F .text	00000008 .hidden __umodsi3
100137ac g       *ABS*	00000000 end
1000e338 g     F .text	000000c0 altera_avalon_jtag_uart_init
1000fd4c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000d61c g     F .text	000000ac .hidden __clzsi2
1000e9f4 g     F .text	00000218 altera_avalon_jtag_uart_write
100050c0 g     F .text	00000004 __sfp_lock_acquire
10006564 g     F .text	000000e8 memchr
10000fd4 g     F .text	00002154 ___vfprintf_internal_r
1000523c g     F .text	000002d0 _free_r
10005b94 g     F .text	00000010 __locale_mb_cur_max
1000fb74 g     F .text	000001a4 __call_exitprocs
10013654 g     O .bss	00000004 __mlocale_changed
10011b28 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
1001367c g     O .bss	00000004 _alt_tick_rate
10000960 g     F .text	00000058 audio_read_fifo_avail
100007b4 g     F .text	00000100 alt_up_audio_write_fifo
100071c8 g     F .text	00000150 __lshift
10013680 g     O .bss	00000004 _alt_nticks
1000ddb4 g     F .text	000000f8 read
1000e18c g     F .text	00000048 alt_sys_init
100006d8 g     F .text	000000dc alt_up_audio_read_fifo
1000fa58 g     F .text	0000011c __register_exitproc
10000320 g     F .text	00000050 alt_up_audio_disable_write_interrupt
10006e14 g     F .text	0000026c __multiply
1000e698 g     F .text	00000068 altera_avalon_jtag_uart_close
1000af1c g     F .text	00000028 .hidden __mulsi3
10010068 g       *ABS*	00000000 __ram_rwdata_start
1000fd4c g       *ABS*	00000000 __ram_rodata_start
10013684 g     O .bss	00000028 __malloc_current_mallinfo
10007678 g     F .text	00000144 __d2b
1000e1d4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000f8bc g     F .text	000000d4 alt_get_fd
100097cc g     F .text	00000064 _close_r
100002d4 g     F .text	0000004c alt_up_audio_enable_write_interrupt
1000f9dc g     F .text	0000007c memcmp
1000e294 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100137ac g       *ABS*	00000000 __alt_stack_base
1000e2e4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000314c g     F .text	00000138 __swsetup_r
1000b7c0 g     F .text	0000099c .hidden __divdf3
10000284 g     F .text	00000050 alt_up_audio_disable_read_interrupt
10004fa4 g     F .text	0000011c __sfp
100078d0 g     F .text	00000078 __copybits
10010504 g     O .rwdata	00000408 __malloc_av_
100050cc g     F .text	00000004 __sinit_lock_release
1000c3a4 g     F .text	00000800 .hidden __muldf3
10008000 g     F .text	00000054 __sread
1000f7a8 g     F .text	00000114 alt_find_file
1000edb8 g     F .text	000000a0 alt_dev_llist_insert
1000dd24 g     F .text	00000020 __malloc_lock
1000df2c g     F .text	000000b0 sbrk
10004ae8 g     F .text	00000244 _fflush_r
10009830 g     F .text	000000d8 _calloc_r
10013650 g       *ABS*	00000000 __bss_start
10006894 g     F .text	00000114 memset
10000dc8 g     F .text	0000004c main
100005a8 g     F .text	00000060 alt_up_audio_write_fifo_space
10013674 g     O .bss	00000004 alt_envp
1001365c g     O .bss	00000004 __malloc_max_total_mem
1000e234 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10009f64 g     F .text	0000001c __swbuf
10008134 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10009a30 g     F .text	00000014 fclose
100034ac g     F .text	0000163c _dtoa_r
10005da0 g     F .text	000007c4 _malloc_r
1000a0f4 g     F .text	00000030 __ascii_wctomb
10011b48 g     O .rwdata	00000004 alt_errno
100059b8 g     F .text	000000a8 _fwalk
1000ae78 g     F .text	00000048 .hidden __divsi3
10005100 g     F .text	0000013c _malloc_trim_r
1000fd4c g       *ABS*	00000000 __CTOR_END__
1000813c g     F .text	000000a4 strcmp
1000fd4c g       *ABS*	00000000 __flash_rodata_start
1000fd4c g       *ABS*	00000000 __DTOR_LIST__
1000c15c g     F .text	00000084 .hidden __nedf2
1000e158 g     F .text	00000034 alt_irq_init
1000deac g     F .text	00000080 alt_release_fd
1000ff34 g     O .rodata	00000100 .hidden __clz_tab
10013650 g     O .bss	00000004 _PathLocale
1000f990 g     F .text	00000014 atexit
10009760 g     F .text	0000006c _write_r
10005bc4 g     F .text	0000001c setlocale
10011b20 g     O .rwdata	00000004 _impure_ptr
1001366c g     O .bss	00000004 alt_argc
1000eeb4 g     F .text	0000005c _do_dtors
10005bb0 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10007528 g     F .text	00000060 __ulp
100050e8 g     F .text	00000018 __fp_unlock_all
10011b34 g     O .rwdata	00000008 alt_fs_list
10000540 g     F .text	00000068 alt_up_audio_record_l
10000c5c g     F .text	0000005c audio_record_l
10000020 g       *ABS*	00000000 __ram_exceptions_start
10005be0 g     F .text	0000000c localeconv
1000ef2c g     F .text	00000050 alt_ic_isr_register
100009b8 g     F .text	000000cc audio_read_fifo
10011b5c g       *ABS*	00000000 _edata
100137ac g       *ABS*	00000000 _end
100001bc g       *ABS*	00000000 __ram_exceptions_end
1000e700 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10000670 g     F .text	00000068 alt_up_audio_play_l
1000f018 g     F .text	000000a0 alt_ic_irq_disable
1000805c g     F .text	0000007c __swrite
10011b2c g     O .rwdata	00000004 __malloc_trim_threshold
10005ba4 g     F .text	0000000c __locale_msgcharset
1000f9a4 g     F .text	00000038 exit
10005a60 g     F .text	000000b8 _fwalk_reent
10007378 g     F .text	000001b0 __mdiff
1000aec0 g     F .text	0000004c .hidden __modsi3
10000cb8 g     F .text	00000058 audio_write_fifo_space
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100050c4 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000fd18 g     F .text	00000034 _exit
1000ec0c g     F .text	00000140 alt_alarm_start
10005bec g     F .text	000001b4 __smakebuf_r
10000f48 g     F .text	0000008c strlen
1000f490 g     F .text	0000015c open
1000c1e0 g     F .text	000000d8 .hidden __gedf2
10011b30 g     O .rwdata	00000004 __wctomb
100082dc g     F .text	00000018 __sprint_r
1000ef10 g     F .text	0000001c alt_icache_flush_all
10011b50 g     O .rwdata	00000004 alt_priority_mask
1000ef7c g     F .text	0000009c alt_ic_irq_enable
10003128 g     F .text	00000024 __vfprintf_internal
10000d6c g     F .text	0000005c audio_play_l
1000a124 g     F .text	0000005c _wctomb_r
1000cba4 g     F .text	00000888 .hidden __subdf3
10006d28 g     F .text	000000b0 __lo0bits
10011b54 g     O .rwdata	00000008 alt_alarm_list
1000ee58 g     F .text	0000005c _do_ctors
1000a01c g     F .text	000000d8 wcrtomb
1000d718 g     F .text	000000d0 close
1000db04 g     F .text	00000080 alt_load
10000238 g     F .text	0000004c alt_up_audio_enable_read_interrupt
10009bc8 g     F .text	00000078 fputwc
00000000  w      *UND*	00000000 free
100050c8 g     F .text	00000004 __sinit_lock_acquire
10006a78 g     F .text	00000144 __multadd
10006a50 g     F .text	00000028 _Bfree
10000370 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40074 	movhi	r3,4097
10000130:	18cdab04 	addi	r3,r3,13996
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10800017 	ldw	r2,0(r2)
10000144:	01040074 	movhi	r4,4097
10000148:	210dab04 	addi	r4,r4,13996
1000014c:	e0fffd17 	ldw	r3,-12(fp)
10000150:	180690fa 	slli	r3,r3,3
10000154:	20c7883a 	add	r3,r4,r3
10000158:	18c00104 	addi	r3,r3,4
1000015c:	18c00017 	ldw	r3,0(r3)
10000160:	1809883a 	mov	r4,r3
10000164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6a6c514 	ori	gp,gp,39700
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	108d9414 	ori	r2,r2,13904

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18cdeb14 	ori	r3,r3,14252

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	000db040 	call	1000db04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	000dcac0 	call	1000dcac <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
100001f8:	defffc04 	addi	sp,sp,-16
100001fc:	dfc00315 	stw	ra,12(sp)
10000200:	df000215 	stw	fp,8(sp)
10000204:	df000204 	addi	fp,sp,8
10000208:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
1000020c:	e13fff17 	ldw	r4,-4(fp)
10000210:	01440074 	movhi	r5,4097
10000214:	2946cf04 	addi	r5,r5,6972
10000218:	000d8140 	call	1000d814 <alt_find_dev>
1000021c:	e0bffe15 	stw	r2,-8(fp)
  return dev;
10000220:	e0bffe17 	ldw	r2,-8(fp)
}
10000224:	e037883a 	mov	sp,fp
10000228:	dfc00117 	ldw	ra,4(sp)
1000022c:	df000017 	ldw	fp,0(sp)
10000230:	dec00204 	addi	sp,sp,8
10000234:	f800283a 	ret

10000238 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
10000238:	defffd04 	addi	sp,sp,-12
1000023c:	df000215 	stw	fp,8(sp)
10000240:	df000204 	addi	fp,sp,8
10000244:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000248:	e0bfff17 	ldw	r2,-4(fp)
1000024c:	10800a17 	ldw	r2,40(r2)
10000250:	10800037 	ldwio	r2,0(r2)
10000254:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
10000258:	e0bffe17 	ldw	r2,-8(fp)
1000025c:	10800054 	ori	r2,r2,1
10000260:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000264:	e0bfff17 	ldw	r2,-4(fp)
10000268:	10800a17 	ldw	r2,40(r2)
1000026c:	e0fffe17 	ldw	r3,-8(fp)
10000270:	10c00035 	stwio	r3,0(r2)
}
10000274:	e037883a 	mov	sp,fp
10000278:	df000017 	ldw	fp,0(sp)
1000027c:	dec00104 	addi	sp,sp,4
10000280:	f800283a 	ret

10000284 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
10000284:	defffd04 	addi	sp,sp,-12
10000288:	df000215 	stw	fp,8(sp)
1000028c:	df000204 	addi	fp,sp,8
10000290:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000294:	e0bfff17 	ldw	r2,-4(fp)
10000298:	10800a17 	ldw	r2,40(r2)
1000029c:	10800037 	ldwio	r2,0(r2)
100002a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
100002a4:	e0fffe17 	ldw	r3,-8(fp)
100002a8:	00bfff84 	movi	r2,-2
100002ac:	1884703a 	and	r2,r3,r2
100002b0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
100002b4:	e0bfff17 	ldw	r2,-4(fp)
100002b8:	10800a17 	ldw	r2,40(r2)
100002bc:	e0fffe17 	ldw	r3,-8(fp)
100002c0:	10c00035 	stwio	r3,0(r2)
}
100002c4:	e037883a 	mov	sp,fp
100002c8:	df000017 	ldw	fp,0(sp)
100002cc:	dec00104 	addi	sp,sp,4
100002d0:	f800283a 	ret

100002d4 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
100002d4:	defffd04 	addi	sp,sp,-12
100002d8:	df000215 	stw	fp,8(sp)
100002dc:	df000204 	addi	fp,sp,8
100002e0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
100002e4:	e0bfff17 	ldw	r2,-4(fp)
100002e8:	10800a17 	ldw	r2,40(r2)
100002ec:	10800037 	ldwio	r2,0(r2)
100002f0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
100002f4:	e0bffe17 	ldw	r2,-8(fp)
100002f8:	10800094 	ori	r2,r2,2
100002fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000300:	e0bfff17 	ldw	r2,-4(fp)
10000304:	10800a17 	ldw	r2,40(r2)
10000308:	e0fffe17 	ldw	r3,-8(fp)
1000030c:	10c00035 	stwio	r3,0(r2)
}
10000310:	e037883a 	mov	sp,fp
10000314:	df000017 	ldw	fp,0(sp)
10000318:	dec00104 	addi	sp,sp,4
1000031c:	f800283a 	ret

10000320 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
10000320:	defffd04 	addi	sp,sp,-12
10000324:	df000215 	stw	fp,8(sp)
10000328:	df000204 	addi	fp,sp,8
1000032c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000330:	e0bfff17 	ldw	r2,-4(fp)
10000334:	10800a17 	ldw	r2,40(r2)
10000338:	10800037 	ldwio	r2,0(r2)
1000033c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
10000340:	e0fffe17 	ldw	r3,-8(fp)
10000344:	00bfff44 	movi	r2,-3
10000348:	1884703a 	and	r2,r3,r2
1000034c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000350:	e0bfff17 	ldw	r2,-4(fp)
10000354:	10800a17 	ldw	r2,40(r2)
10000358:	e0fffe17 	ldw	r3,-8(fp)
1000035c:	10c00035 	stwio	r3,0(r2)
}
10000360:	e037883a 	mov	sp,fp
10000364:	df000017 	ldw	fp,0(sp)
10000368:	dec00104 	addi	sp,sp,4
1000036c:	f800283a 	ret

10000370 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
10000370:	defffd04 	addi	sp,sp,-12
10000374:	df000215 	stw	fp,8(sp)
10000378:	df000204 	addi	fp,sp,8
1000037c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000380:	e0bfff17 	ldw	r2,-4(fp)
10000384:	10800a17 	ldw	r2,40(r2)
10000388:	10800037 	ldwio	r2,0(r2)
1000038c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
10000390:	e0bffe17 	ldw	r2,-8(fp)
10000394:	1080400c 	andi	r2,r2,256
10000398:	1004c03a 	cmpne	r2,r2,zero
1000039c:	10803fcc 	andi	r2,r2,255
}
100003a0:	e037883a 	mov	sp,fp
100003a4:	df000017 	ldw	fp,0(sp)
100003a8:	dec00104 	addi	sp,sp,4
100003ac:	f800283a 	ret

100003b0 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
100003b0:	defffd04 	addi	sp,sp,-12
100003b4:	df000215 	stw	fp,8(sp)
100003b8:	df000204 	addi	fp,sp,8
100003bc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
100003c0:	e0bfff17 	ldw	r2,-4(fp)
100003c4:	10800a17 	ldw	r2,40(r2)
100003c8:	10800037 	ldwio	r2,0(r2)
100003cc:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
100003d0:	e0bffe17 	ldw	r2,-8(fp)
100003d4:	1080800c 	andi	r2,r2,512
100003d8:	1004c03a 	cmpne	r2,r2,zero
100003dc:	10803fcc 	andi	r2,r2,255
}
100003e0:	e037883a 	mov	sp,fp
100003e4:	df000017 	ldw	fp,0(sp)
100003e8:	dec00104 	addi	sp,sp,4
100003ec:	f800283a 	ret

100003f0 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
100003f0:	defffd04 	addi	sp,sp,-12
100003f4:	df000215 	stw	fp,8(sp)
100003f8:	df000204 	addi	fp,sp,8
100003fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000400:	e0bfff17 	ldw	r2,-4(fp)
10000404:	10800a17 	ldw	r2,40(r2)
10000408:	10800037 	ldwio	r2,0(r2)
1000040c:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
10000410:	e0bffe17 	ldw	r2,-8(fp)
10000414:	10800114 	ori	r2,r2,4
10000418:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
1000041c:	e0bffe17 	ldw	r2,-8(fp)
10000420:	10800214 	ori	r2,r2,8
10000424:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000428:	e0bfff17 	ldw	r2,-4(fp)
1000042c:	10800a17 	ldw	r2,40(r2)
10000430:	e0fffe17 	ldw	r3,-8(fp)
10000434:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
10000438:	e0fffe17 	ldw	r3,-8(fp)
1000043c:	00bffec4 	movi	r2,-5
10000440:	1884703a 	and	r2,r3,r2
10000444:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
10000448:	e0fffe17 	ldw	r3,-8(fp)
1000044c:	00bffdc4 	movi	r2,-9
10000450:	1884703a 	and	r2,r3,r2
10000454:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000458:	e0bfff17 	ldw	r2,-4(fp)
1000045c:	10800a17 	ldw	r2,40(r2)
10000460:	e0fffe17 	ldw	r3,-8(fp)
10000464:	10c00035 	stwio	r3,0(r2)
}
10000468:	e037883a 	mov	sp,fp
1000046c:	df000017 	ldw	fp,0(sp)
10000470:	dec00104 	addi	sp,sp,4
10000474:	f800283a 	ret

10000478 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
10000478:	defffc04 	addi	sp,sp,-16
1000047c:	df000315 	stw	fp,12(sp)
10000480:	df000304 	addi	fp,sp,12
10000484:	e13ffe15 	stw	r4,-8(fp)
10000488:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
1000048c:	e0bffe17 	ldw	r2,-8(fp)
10000490:	10800a17 	ldw	r2,40(r2)
10000494:	10800104 	addi	r2,r2,4
10000498:	10800037 	ldwio	r2,0(r2)
1000049c:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
100004a0:	e0bfff17 	ldw	r2,-4(fp)
100004a4:	1000041e 	bne	r2,zero,100004b8 <alt_up_audio_read_fifo_avail+0x40>
100004a8:	e0bffd17 	ldw	r2,-12(fp)
100004ac:	10bfc00c 	andi	r2,r2,65280
100004b0:	1004d23a 	srli	r2,r2,8
100004b4:	00000206 	br	100004c0 <alt_up_audio_read_fifo_avail+0x48>
100004b8:	e0bffd17 	ldw	r2,-12(fp)
100004bc:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
100004c0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
100004c4:	e0bffd17 	ldw	r2,-12(fp)
}
100004c8:	e037883a 	mov	sp,fp
100004cc:	df000017 	ldw	fp,0(sp)
100004d0:	dec00104 	addi	sp,sp,4
100004d4:	f800283a 	ret

100004d8 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
100004d8:	defffa04 	addi	sp,sp,-24
100004dc:	dfc00515 	stw	ra,20(sp)
100004e0:	df000415 	stw	fp,16(sp)
100004e4:	df000404 	addi	fp,sp,16
100004e8:	e13ffd15 	stw	r4,-12(fp)
100004ec:	e17ffe15 	stw	r5,-8(fp)
100004f0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
100004f4:	e13ffd17 	ldw	r4,-12(fp)
100004f8:	01400044 	movi	r5,1
100004fc:	00004780 	call	10000478 <alt_up_audio_read_fifo_avail>
10000500:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
10000504:	e0bffc17 	ldw	r2,-16(fp)
10000508:	10801868 	cmpgeui	r2,r2,97
1000050c:	1000021e 	bne	r2,zero,10000518 <alt_up_audio_record_r+0x40>
		return 0;
10000510:	0005883a 	mov	r2,zero
10000514:	00000506 	br	1000052c <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
10000518:	e13ffd17 	ldw	r4,-12(fp)
1000051c:	e17ffe17 	ldw	r5,-8(fp)
10000520:	e1bfff17 	ldw	r6,-4(fp)
10000524:	01c00044 	movi	r7,1
10000528:	00006d80 	call	100006d8 <alt_up_audio_read_fifo>
}
1000052c:	e037883a 	mov	sp,fp
10000530:	dfc00117 	ldw	ra,4(sp)
10000534:	df000017 	ldw	fp,0(sp)
10000538:	dec00204 	addi	sp,sp,8
1000053c:	f800283a 	ret

10000540 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000540:	defffa04 	addi	sp,sp,-24
10000544:	dfc00515 	stw	ra,20(sp)
10000548:	df000415 	stw	fp,16(sp)
1000054c:	df000404 	addi	fp,sp,16
10000550:	e13ffd15 	stw	r4,-12(fp)
10000554:	e17ffe15 	stw	r5,-8(fp)
10000558:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
1000055c:	e13ffd17 	ldw	r4,-12(fp)
10000560:	000b883a 	mov	r5,zero
10000564:	00004780 	call	10000478 <alt_up_audio_read_fifo_avail>
10000568:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
1000056c:	e0bffc17 	ldw	r2,-16(fp)
10000570:	10801868 	cmpgeui	r2,r2,97
10000574:	1000021e 	bne	r2,zero,10000580 <alt_up_audio_record_l+0x40>
		return 0;
10000578:	0005883a 	mov	r2,zero
1000057c:	00000506 	br	10000594 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
10000580:	e13ffd17 	ldw	r4,-12(fp)
10000584:	e17ffe17 	ldw	r5,-8(fp)
10000588:	e1bfff17 	ldw	r6,-4(fp)
1000058c:	000f883a 	mov	r7,zero
10000590:	00006d80 	call	100006d8 <alt_up_audio_read_fifo>
}
10000594:	e037883a 	mov	sp,fp
10000598:	dfc00117 	ldw	ra,4(sp)
1000059c:	df000017 	ldw	fp,0(sp)
100005a0:	dec00204 	addi	sp,sp,8
100005a4:	f800283a 	ret

100005a8 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
100005a8:	defffc04 	addi	sp,sp,-16
100005ac:	df000315 	stw	fp,12(sp)
100005b0:	df000304 	addi	fp,sp,12
100005b4:	e13ffe15 	stw	r4,-8(fp)
100005b8:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100005bc:	e0bffe17 	ldw	r2,-8(fp)
100005c0:	10800a17 	ldw	r2,40(r2)
100005c4:	10800104 	addi	r2,r2,4
100005c8:	10800037 	ldwio	r2,0(r2)
100005cc:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100005d0:	e0bfff17 	ldw	r2,-4(fp)
100005d4:	1000031e 	bne	r2,zero,100005e4 <alt_up_audio_write_fifo_space+0x3c>
100005d8:	e0bffd17 	ldw	r2,-12(fp)
100005dc:	1004d63a 	srli	r2,r2,24
100005e0:	00000306 	br	100005f0 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
100005e4:	e0bffd17 	ldw	r2,-12(fp)
100005e8:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100005ec:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
100005f0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
100005f4:	e0bffd17 	ldw	r2,-12(fp)
}
100005f8:	e037883a 	mov	sp,fp
100005fc:	df000017 	ldw	fp,0(sp)
10000600:	dec00104 	addi	sp,sp,4
10000604:	f800283a 	ret

10000608 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000608:	defffa04 	addi	sp,sp,-24
1000060c:	dfc00515 	stw	ra,20(sp)
10000610:	df000415 	stw	fp,16(sp)
10000614:	df000404 	addi	fp,sp,16
10000618:	e13ffd15 	stw	r4,-12(fp)
1000061c:	e17ffe15 	stw	r5,-8(fp)
10000620:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
10000624:	e13ffd17 	ldw	r4,-12(fp)
10000628:	01400044 	movi	r5,1
1000062c:	00005a80 	call	100005a8 <alt_up_audio_write_fifo_space>
10000630:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
10000634:	e0bffc17 	ldw	r2,-16(fp)
10000638:	10801868 	cmpgeui	r2,r2,97
1000063c:	1000021e 	bne	r2,zero,10000648 <alt_up_audio_play_r+0x40>
		return 0;
10000640:	0005883a 	mov	r2,zero
10000644:	00000506 	br	1000065c <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
10000648:	e13ffd17 	ldw	r4,-12(fp)
1000064c:	e17ffe17 	ldw	r5,-8(fp)
10000650:	e1bfff17 	ldw	r6,-4(fp)
10000654:	01c00044 	movi	r7,1
10000658:	00007b40 	call	100007b4 <alt_up_audio_write_fifo>
}
1000065c:	e037883a 	mov	sp,fp
10000660:	dfc00117 	ldw	ra,4(sp)
10000664:	df000017 	ldw	fp,0(sp)
10000668:	dec00204 	addi	sp,sp,8
1000066c:	f800283a 	ret

10000670 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000670:	defffa04 	addi	sp,sp,-24
10000674:	dfc00515 	stw	ra,20(sp)
10000678:	df000415 	stw	fp,16(sp)
1000067c:	df000404 	addi	fp,sp,16
10000680:	e13ffd15 	stw	r4,-12(fp)
10000684:	e17ffe15 	stw	r5,-8(fp)
10000688:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
1000068c:	e13ffd17 	ldw	r4,-12(fp)
10000690:	000b883a 	mov	r5,zero
10000694:	00005a80 	call	100005a8 <alt_up_audio_write_fifo_space>
10000698:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
1000069c:	e0bffc17 	ldw	r2,-16(fp)
100006a0:	10801868 	cmpgeui	r2,r2,97
100006a4:	1000021e 	bne	r2,zero,100006b0 <alt_up_audio_play_l+0x40>
		return 0;
100006a8:	0005883a 	mov	r2,zero
100006ac:	00000506 	br	100006c4 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
100006b0:	e13ffd17 	ldw	r4,-12(fp)
100006b4:	e17ffe17 	ldw	r5,-8(fp)
100006b8:	e1bfff17 	ldw	r6,-4(fp)
100006bc:	000f883a 	mov	r7,zero
100006c0:	00007b40 	call	100007b4 <alt_up_audio_write_fifo>
}
100006c4:	e037883a 	mov	sp,fp
100006c8:	dfc00117 	ldw	ra,4(sp)
100006cc:	df000017 	ldw	fp,0(sp)
100006d0:	dec00204 	addi	sp,sp,8
100006d4:	f800283a 	ret

100006d8 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
100006d8:	defff904 	addi	sp,sp,-28
100006dc:	df000615 	stw	fp,24(sp)
100006e0:	df000604 	addi	fp,sp,24
100006e4:	e13ffc15 	stw	r4,-16(fp)
100006e8:	e17ffd15 	stw	r5,-12(fp)
100006ec:	e1bffe15 	stw	r6,-8(fp)
100006f0:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
100006f4:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
100006f8:	00002606 	br	10000794 <alt_up_audio_read_fifo+0xbc>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100006fc:	e0bffc17 	ldw	r2,-16(fp)
10000700:	10800a17 	ldw	r2,40(r2)
10000704:	10800104 	addi	r2,r2,4
10000708:	10800037 	ldwio	r2,0(r2)
1000070c:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
10000710:	e0bfff17 	ldw	r2,-4(fp)
10000714:	1000041e 	bne	r2,zero,10000728 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
10000718:	e0bffb17 	ldw	r2,-20(fp)
1000071c:	10bfc00c 	andi	r2,r2,65280
			:
10000720:	1004d23a 	srli	r2,r2,8
10000724:	00000206 	br	10000730 <alt_up_audio_read_fifo+0x58>
10000728:	e0bffb17 	ldw	r2,-20(fp)
1000072c:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
10000730:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
10000734:	e0bffb17 	ldw	r2,-20(fp)
10000738:	10001526 	beq	r2,zero,10000790 <alt_up_audio_read_fifo+0xb8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
1000073c:	e0bffa17 	ldw	r2,-24(fp)
10000740:	1085883a 	add	r2,r2,r2
10000744:	1085883a 	add	r2,r2,r2
10000748:	e0fffd17 	ldw	r3,-12(fp)
1000074c:	1887883a 	add	r3,r3,r2
10000750:	e0bfff17 	ldw	r2,-4(fp)
10000754:	1000051e 	bne	r2,zero,1000076c <alt_up_audio_read_fifo+0x94>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
10000758:	e0bffc17 	ldw	r2,-16(fp)
1000075c:	10800a17 	ldw	r2,40(r2)
10000760:	10800204 	addi	r2,r2,8
10000764:	10800037 	ldwio	r2,0(r2)
10000768:	00000406 	br	1000077c <alt_up_audio_read_fifo+0xa4>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
1000076c:	e0bffc17 	ldw	r2,-16(fp)
10000770:	10800a17 	ldw	r2,40(r2)
10000774:	10800304 	addi	r2,r2,12
10000778:	10800037 	ldwio	r2,0(r2)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
1000077c:	18800015 	stw	r2,0(r3)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
10000780:	e0bffa17 	ldw	r2,-24(fp)
10000784:	10800044 	addi	r2,r2,1
10000788:	e0bffa15 	stw	r2,-24(fp)
1000078c:	00000106 	br	10000794 <alt_up_audio_read_fifo+0xbc>
		}
		else
		{
			// no more data to read
			break;
10000790:	00000306 	br	100007a0 <alt_up_audio_read_fifo+0xc8>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
10000794:	e0fffa17 	ldw	r3,-24(fp)
10000798:	e0bffe17 	ldw	r2,-8(fp)
1000079c:	18bfd716 	blt	r3,r2,100006fc <__alt_data_end+0xf80006fc>
		{
			// no more data to read
			break;
		}
	}
	return count;
100007a0:	e0bffa17 	ldw	r2,-24(fp)
}
100007a4:	e037883a 	mov	sp,fp
100007a8:	df000017 	ldw	fp,0(sp)
100007ac:	dec00104 	addi	sp,sp,4
100007b0:	f800283a 	ret

100007b4 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
100007b4:	defff904 	addi	sp,sp,-28
100007b8:	df000615 	stw	fp,24(sp)
100007bc:	df000604 	addi	fp,sp,24
100007c0:	e13ffc15 	stw	r4,-16(fp)
100007c4:	e17ffd15 	stw	r5,-12(fp)
100007c8:	e1bffe15 	stw	r6,-8(fp)
100007cc:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
100007d0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
100007d4:	00002f06 	br	10000894 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100007d8:	e0bffc17 	ldw	r2,-16(fp)
100007dc:	10800a17 	ldw	r2,40(r2)
100007e0:	10800104 	addi	r2,r2,4
100007e4:	10800037 	ldwio	r2,0(r2)
100007e8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100007ec:	e0bfff17 	ldw	r2,-4(fp)
100007f0:	1000031e 	bne	r2,zero,10000800 <alt_up_audio_write_fifo+0x4c>
100007f4:	e0bffb17 	ldw	r2,-20(fp)
100007f8:	1004d63a 	srli	r2,r2,24
100007fc:	00000306 	br	1000080c <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
10000800:	e0bffb17 	ldw	r2,-20(fp)
10000804:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
10000808:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
1000080c:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
10000810:	e0bffb17 	ldw	r2,-20(fp)
10000814:	10001e26 	beq	r2,zero,10000890 <alt_up_audio_write_fifo+0xdc>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
10000818:	e0bfff17 	ldw	r2,-4(fp)
1000081c:	10000e1e 	bne	r2,zero,10000858 <alt_up_audio_write_fifo+0xa4>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
10000820:	e0bffc17 	ldw	r2,-16(fp)
10000824:	10800a17 	ldw	r2,40(r2)
10000828:	10800204 	addi	r2,r2,8
1000082c:	1007883a 	mov	r3,r2
10000830:	e0bffa17 	ldw	r2,-24(fp)
10000834:	11000044 	addi	r4,r2,1
10000838:	e13ffa15 	stw	r4,-24(fp)
1000083c:	1085883a 	add	r2,r2,r2
10000840:	1085883a 	add	r2,r2,r2
10000844:	e13ffd17 	ldw	r4,-12(fp)
10000848:	2085883a 	add	r2,r4,r2
1000084c:	10800017 	ldw	r2,0(r2)
10000850:	18800035 	stwio	r2,0(r3)
10000854:	00000f06 	br	10000894 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
10000858:	e0bffc17 	ldw	r2,-16(fp)
1000085c:	10800a17 	ldw	r2,40(r2)
10000860:	10800304 	addi	r2,r2,12
10000864:	1007883a 	mov	r3,r2
10000868:	e0bffa17 	ldw	r2,-24(fp)
1000086c:	11000044 	addi	r4,r2,1
10000870:	e13ffa15 	stw	r4,-24(fp)
10000874:	1085883a 	add	r2,r2,r2
10000878:	1085883a 	add	r2,r2,r2
1000087c:	e13ffd17 	ldw	r4,-12(fp)
10000880:	2085883a 	add	r2,r4,r2
10000884:	10800017 	ldw	r2,0(r2)
10000888:	18800035 	stwio	r2,0(r3)
1000088c:	00000106 	br	10000894 <alt_up_audio_write_fifo+0xe0>
		}
		else
		{
			// no more space to write
			break;
10000890:	00000306 	br	100008a0 <alt_up_audio_write_fifo+0xec>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
10000894:	e0fffa17 	ldw	r3,-24(fp)
10000898:	e0bffe17 	ldw	r2,-8(fp)
1000089c:	18bfce16 	blt	r3,r2,100007d8 <__alt_data_end+0xf80007d8>
		{
			// no more space to write
			break;
		}
	}
	return count;
100008a0:	e0bffa17 	ldw	r2,-24(fp)
}
100008a4:	e037883a 	mov	sp,fp
100008a8:	df000017 	ldw	fp,0(sp)
100008ac:	dec00104 	addi	sp,sp,4
100008b0:	f800283a 	ret

100008b4 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
100008b4:	defffd04 	addi	sp,sp,-12
100008b8:	df000215 	stw	fp,8(sp)
100008bc:	df000204 	addi	fp,sp,8
100008c0:	e13ffe15 	stw	r4,-8(fp)
100008c4:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
100008c8:	e0bfff17 	ldw	r2,-4(fp)
100008cc:	1000051e 	bne	r2,zero,100008e4 <alt_up_audio_read_fifo_head+0x30>
100008d0:	e0bffe17 	ldw	r2,-8(fp)
100008d4:	10800a17 	ldw	r2,40(r2)
100008d8:	10800204 	addi	r2,r2,8
100008dc:	10800037 	ldwio	r2,0(r2)
100008e0:	00000406 	br	100008f4 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
100008e4:	e0bffe17 	ldw	r2,-8(fp)
100008e8:	10800a17 	ldw	r2,40(r2)
100008ec:	10800304 	addi	r2,r2,12
100008f0:	10800037 	ldwio	r2,0(r2)
}
100008f4:	e037883a 	mov	sp,fp
100008f8:	df000017 	ldw	fp,0(sp)
100008fc:	dec00104 	addi	sp,sp,4
10000900:	f800283a 	ret

10000904 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
10000904:	defffc04 	addi	sp,sp,-16
10000908:	df000315 	stw	fp,12(sp)
1000090c:	df000304 	addi	fp,sp,12
10000910:	e13ffd15 	stw	r4,-12(fp)
10000914:	e17ffe15 	stw	r5,-8(fp)
10000918:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
1000091c:	e0bfff17 	ldw	r2,-4(fp)
10000920:	1000061e 	bne	r2,zero,1000093c <alt_up_audio_write_fifo_head+0x38>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
10000924:	e0bffd17 	ldw	r2,-12(fp)
10000928:	10800a17 	ldw	r2,40(r2)
1000092c:	10800204 	addi	r2,r2,8
10000930:	e0fffe17 	ldw	r3,-8(fp)
10000934:	10c00035 	stwio	r3,0(r2)
10000938:	00000506 	br	10000950 <alt_up_audio_write_fifo_head+0x4c>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
1000093c:	e0bffd17 	ldw	r2,-12(fp)
10000940:	10800a17 	ldw	r2,40(r2)
10000944:	10800304 	addi	r2,r2,12
10000948:	e0fffe17 	ldw	r3,-8(fp)
1000094c:	10c00035 	stwio	r3,0(r2)
}
10000950:	e037883a 	mov	sp,fp
10000954:	df000017 	ldw	fp,0(sp)
10000958:	dec00104 	addi	sp,sp,4
1000095c:	f800283a 	ret

10000960 <audio_read_fifo_avail>:
#define LEFT_DATA	((volatile unsigned int *const)(AUDIO_DEVICE + 2));
#define RIGHT_DATA	((volatile unsigned int *const)(AUDIO_DEVICE + 3));

// provides number of words of data available in the incoming FIFO: RALC or RARC
unsigned int audio_read_fifo_avail(int channel)
{
10000960:	defffd04 	addi	sp,sp,-12
10000964:	df000215 	stw	fp,8(sp)
10000968:	df000204 	addi	fp,sp,8
1000096c:	e13fff15 	stw	r4,-4(fp)
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
10000970:	00801004 	movi	r2,64
10000974:	10800104 	addi	r2,r2,4
10000978:	10800037 	ldwio	r2,0(r2)
1000097c:	e0bffe15 	stw	r2,-8(fp)
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
10000980:	e0bfff17 	ldw	r2,-4(fp)
10000984:	1000041e 	bne	r2,zero,10000998 <audio_read_fifo_avail+0x38>
{
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
10000988:	e0bffe17 	ldw	r2,-8(fp)
1000098c:	10bfc00c 	andi	r2,r2,65280
			:
10000990:	1004d23a 	srli	r2,r2,8
10000994:	00000206 	br	100009a0 <audio_read_fifo_avail+0x40>
10000998:	e0bffe17 	ldw	r2,-8(fp)
1000099c:	10803fcc 	andi	r2,r2,255
unsigned int audio_read_fifo_avail(int channel)
{
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
100009a0:	e0bffe15 	stw	r2,-8(fp)
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
	return fifospace;
100009a4:	e0bffe17 	ldw	r2,-8(fp)
}
100009a8:	e037883a 	mov	sp,fp
100009ac:	df000017 	ldw	fp,0(sp)
100009b0:	dec00104 	addi	sp,sp,4
100009b4:	f800283a 	ret

100009b8 <audio_read_fifo>:

int audio_read_fifo(unsigned int *buf, int len, int channel) {
100009b8:	defffa04 	addi	sp,sp,-24
100009bc:	df000515 	stw	fp,20(sp)
100009c0:	df000504 	addi	fp,sp,20
100009c4:	e13ffd15 	stw	r4,-12(fp)
100009c8:	e17ffe15 	stw	r5,-8(fp)
100009cc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int fifospace;
	int count = 0;
100009d0:	e03ffb15 	stw	zero,-20(fp)
	while (count < len) {
100009d4:	00002306 	br	10000a64 <audio_read_fifo+0xac>
		// read the whole fifospcae register
		fifospace = IORD_AUDIO_FIFOSPACE();
100009d8:	00801004 	movi	r2,64
100009dc:	10800104 	addi	r2,r2,4
100009e0:	10800037 	ldwio	r2,0(r2)
100009e4:	e0bffc15 	stw	r2,-16(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
100009e8:	e0bfff17 	ldw	r2,-4(fp)
100009ec:	1000041e 	bne	r2,zero,10000a00 <audio_read_fifo+0x48>
	while (count < len) {
		// read the whole fifospcae register
		fifospace = IORD_AUDIO_FIFOSPACE();
		// extract the part for proper Channel Read Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
100009f0:	e0bffc17 	ldw	r2,-16(fp)
100009f4:	10bfc00c 	andi	r2,r2,65280
			:
100009f8:	1004d23a 	srli	r2,r2,8
100009fc:	00000206 	br	10000a08 <audio_read_fifo+0x50>
10000a00:	e0bffc17 	ldw	r2,-16(fp)
10000a04:	10803fcc 	andi	r2,r2,255
	int count = 0;
	while (count < len) {
		// read the whole fifospcae register
		fifospace = IORD_AUDIO_FIFOSPACE();
		// extract the part for proper Channel Read Space
		fifospace = (channel == AUDIO_LEFT) ?
10000a08:	e0bffc15 	stw	r2,-16(fp)
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
		if (fifospace > 0) {
10000a0c:	e0bffc17 	ldw	r2,-16(fp)
10000a10:	10001326 	beq	r2,zero,10000a60 <audio_read_fifo+0xa8>
			buf[count] = (channel == AUDIO_LEFT) ?
10000a14:	e0bffb17 	ldw	r2,-20(fp)
10000a18:	1085883a 	add	r2,r2,r2
10000a1c:	1085883a 	add	r2,r2,r2
10000a20:	e0fffd17 	ldw	r3,-12(fp)
10000a24:	1887883a 	add	r3,r3,r2
10000a28:	e0bfff17 	ldw	r2,-4(fp)
10000a2c:	1000041e 	bne	r2,zero,10000a40 <audio_read_fifo+0x88>
				IORD_AUDIO_LEFTDATA():
10000a30:	00801004 	movi	r2,64
10000a34:	10800204 	addi	r2,r2,8
10000a38:	10800037 	ldwio	r2,0(r2)
10000a3c:	00000306 	br	10000a4c <audio_read_fifo+0x94>
				IORD_AUDIO_RIGHTDATA();
10000a40:	00801004 	movi	r2,64
10000a44:	10800304 	addi	r2,r2,12
10000a48:	10800037 	ldwio	r2,0(r2)
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
		if (fifospace > 0) {
			buf[count] = (channel == AUDIO_LEFT) ?
10000a4c:	18800015 	stw	r2,0(r3)
				IORD_AUDIO_LEFTDATA():
				IORD_AUDIO_RIGHTDATA();
			count ++;
10000a50:	e0bffb17 	ldw	r2,-20(fp)
10000a54:	10800044 	addi	r2,r2,1
10000a58:	e0bffb15 	stw	r2,-20(fp)
10000a5c:	00000106 	br	10000a64 <audio_read_fifo+0xac>
		}
		else {
			//no more data to read
			break;
10000a60:	00000306 	br	10000a70 <audio_read_fifo+0xb8>
}

int audio_read_fifo(unsigned int *buf, int len, int channel) {
	unsigned int fifospace;
	int count = 0;
	while (count < len) {
10000a64:	e0fffb17 	ldw	r3,-20(fp)
10000a68:	e0bffe17 	ldw	r2,-8(fp)
10000a6c:	18bfda16 	blt	r3,r2,100009d8 <__alt_data_end+0xf80009d8>
		else {
			//no more data to read
			break;
		}
	}
	return count;
10000a70:	e0bffb17 	ldw	r2,-20(fp)
}
10000a74:	e037883a 	mov	sp,fp
10000a78:	df000017 	ldw	fp,0(sp)
10000a7c:	dec00104 	addi	sp,sp,4
10000a80:	f800283a 	ret

10000a84 <audio_write_fifo>:

int audio_write_fifo(unsigned int *buf, int len, int channel) {
10000a84:	defffa04 	addi	sp,sp,-24
10000a88:	df000515 	stw	fp,20(sp)
10000a8c:	df000504 	addi	fp,sp,20
10000a90:	e13ffd15 	stw	r4,-12(fp)
10000a94:	e17ffe15 	stw	r5,-8(fp)
10000a98:	e1bfff15 	stw	r6,-4(fp)
	unsigned int fifospace;
	int count = 0;
10000a9c:	e03ffb15 	stw	zero,-20(fp)
	while (count < len) {
10000aa0:	00002a06 	br	10000b4c <audio_write_fifo+0xc8>
		//read the whole fifospace register
		fifospace = IORD_AUDIO_FIFOSPACE();
10000aa4:	00801004 	movi	r2,64
10000aa8:	10800104 	addi	r2,r2,4
10000aac:	10800037 	ldwio	r2,0(r2)
10000ab0:	e0bffc15 	stw	r2,-16(fp)
		//extract the part for left Channel Write Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET :
10000ab4:	e0bfff17 	ldw	r2,-4(fp)
10000ab8:	1000031e 	bne	r2,zero,10000ac8 <audio_write_fifo+0x44>
10000abc:	e0bffc17 	ldw	r2,-16(fp)
10000ac0:	1004d63a 	srli	r2,r2,24
10000ac4:	00000306 	br	10000ad4 <audio_write_fifo+0x50>
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
10000ac8:	e0bffc17 	ldw	r2,-16(fp)
10000acc:	10803fec 	andhi	r2,r2,255
	while (count < len) {
		//read the whole fifospace register
		fifospace = IORD_AUDIO_FIFOSPACE();
		//extract the part for left Channel Write Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET :
10000ad0:	1004d43a 	srli	r2,r2,16
	int count = 0;
	while (count < len) {
		//read the whole fifospace register
		fifospace = IORD_AUDIO_FIFOSPACE();
		//extract the part for left Channel Write Space
		fifospace = (channel == AUDIO_LEFT) ?
10000ad4:	e0bffc15 	stw	r2,-16(fp)
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET :
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
		if (fifospace > 0) {
10000ad8:	e0bffc17 	ldw	r2,-16(fp)
10000adc:	10001a26 	beq	r2,zero,10000b48 <audio_write_fifo+0xc4>
			if (channel == AUDIO_LEFT)
10000ae0:	e0bfff17 	ldw	r2,-4(fp)
10000ae4:	10000c1e 	bne	r2,zero,10000b18 <audio_write_fifo+0x94>
				IOWR_AUDIO_LEFTDATA(buf[count++]);
10000ae8:	00801004 	movi	r2,64
10000aec:	10c00204 	addi	r3,r2,8
10000af0:	e0bffb17 	ldw	r2,-20(fp)
10000af4:	11000044 	addi	r4,r2,1
10000af8:	e13ffb15 	stw	r4,-20(fp)
10000afc:	1085883a 	add	r2,r2,r2
10000b00:	1085883a 	add	r2,r2,r2
10000b04:	e13ffd17 	ldw	r4,-12(fp)
10000b08:	2085883a 	add	r2,r4,r2
10000b0c:	10800017 	ldw	r2,0(r2)
10000b10:	18800035 	stwio	r2,0(r3)
10000b14:	00000d06 	br	10000b4c <audio_write_fifo+0xc8>
			else 
				IOWR_AUDIO_RIGHTDATA(buf[count++]);
10000b18:	00801004 	movi	r2,64
10000b1c:	10c00304 	addi	r3,r2,12
10000b20:	e0bffb17 	ldw	r2,-20(fp)
10000b24:	11000044 	addi	r4,r2,1
10000b28:	e13ffb15 	stw	r4,-20(fp)
10000b2c:	1085883a 	add	r2,r2,r2
10000b30:	1085883a 	add	r2,r2,r2
10000b34:	e13ffd17 	ldw	r4,-12(fp)
10000b38:	2085883a 	add	r2,r4,r2
10000b3c:	10800017 	ldw	r2,0(r2)
10000b40:	18800035 	stwio	r2,0(r3)
10000b44:	00000106 	br	10000b4c <audio_write_fifo+0xc8>
		}
		else {
			//no more space to write
			break;
10000b48:	00000306 	br	10000b58 <audio_write_fifo+0xd4>
}

int audio_write_fifo(unsigned int *buf, int len, int channel) {
	unsigned int fifospace;
	int count = 0;
	while (count < len) {
10000b4c:	e0fffb17 	ldw	r3,-20(fp)
10000b50:	e0bffe17 	ldw	r2,-8(fp)
10000b54:	18bfd316 	blt	r3,r2,10000aa4 <__alt_data_end+0xf8000aa4>
		else {
			//no more space to write
			break;
		}
	}
	return count;
10000b58:	e0bffb17 	ldw	r2,-20(fp)
}
10000b5c:	e037883a 	mov	sp,fp
10000b60:	df000017 	ldw	fp,0(sp)
10000b64:	dec00104 	addi	sp,sp,4
10000b68:	f800283a 	ret

10000b6c <audio_read_fifo_head>:

unsigned int audio_read_fifo_head(int channel) {
10000b6c:	defffe04 	addi	sp,sp,-8
10000b70:	df000115 	stw	fp,4(sp)
10000b74:	df000104 	addi	fp,sp,4
10000b78:	e13fff15 	stw	r4,-4(fp)
	return ( (channel == AUDIO_LEFT) ? IORD_AUDIO_LEFTDATA() :
10000b7c:	e0bfff17 	ldw	r2,-4(fp)
10000b80:	1000041e 	bne	r2,zero,10000b94 <audio_read_fifo_head+0x28>
10000b84:	00801004 	movi	r2,64
10000b88:	10800204 	addi	r2,r2,8
10000b8c:	10800037 	ldwio	r2,0(r2)
10000b90:	00000306 	br	10000ba0 <audio_read_fifo_head+0x34>
					IORD_AUDIO_RIGHTDATA() );
10000b94:	00801004 	movi	r2,64
10000b98:	10800304 	addi	r2,r2,12
10000b9c:	10800037 	ldwio	r2,0(r2)
}
10000ba0:	e037883a 	mov	sp,fp
10000ba4:	df000017 	ldw	fp,0(sp)
10000ba8:	dec00104 	addi	sp,sp,4
10000bac:	f800283a 	ret

10000bb0 <audio_write_fifo_head>:

void audio_write_fifo_head(unsigned int data, int channel) {
10000bb0:	defffd04 	addi	sp,sp,-12
10000bb4:	df000215 	stw	fp,8(sp)
10000bb8:	df000204 	addi	fp,sp,8
10000bbc:	e13ffe15 	stw	r4,-8(fp)
10000bc0:	e17fff15 	stw	r5,-4(fp)
	if (channel == AUDIO_LEFT)
10000bc4:	e0bfff17 	ldw	r2,-4(fp)
10000bc8:	1000051e 	bne	r2,zero,10000be0 <audio_write_fifo_head+0x30>
		IOWR_AUDIO_LEFTDATA(data);
10000bcc:	00801004 	movi	r2,64
10000bd0:	10800204 	addi	r2,r2,8
10000bd4:	e0fffe17 	ldw	r3,-8(fp)
10000bd8:	10c00035 	stwio	r3,0(r2)
10000bdc:	00000406 	br	10000bf0 <audio_write_fifo_head+0x40>
	else
		IOWR_AUDIO_RIGHTDATA(data);
10000be0:	00801004 	movi	r2,64
10000be4:	10800304 	addi	r2,r2,12
10000be8:	e0fffe17 	ldw	r3,-8(fp)
10000bec:	10c00035 	stwio	r3,0(r2)
}
10000bf0:	e037883a 	mov	sp,fp
10000bf4:	df000017 	ldw	fp,0(sp)
10000bf8:	dec00104 	addi	sp,sp,4
10000bfc:	f800283a 	ret

10000c00 <audio_record_r>:
 * Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words
 * available. If it doesn't, then just returns 0. If it does, then data is read from
 * the FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int audio_record_r(unsigned int *buf, int len)
{
10000c00:	defffb04 	addi	sp,sp,-20
10000c04:	dfc00415 	stw	ra,16(sp)
10000c08:	df000315 	stw	fp,12(sp)
10000c0c:	df000304 	addi	fp,sp,12
10000c10:	e13ffe15 	stw	r4,-8(fp)
10000c14:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_words = audio_read_fifo_avail(AUDIO_RIGHT);
10000c18:	01000044 	movi	r4,1
10000c1c:	00009600 	call	10000960 <audio_read_fifo_avail>
10000c20:	e0bffd15 	stw	r2,-12(fp)
	if (data_words <= BUF_THRESHOLD)
10000c24:	e0bffd17 	ldw	r2,-12(fp)
10000c28:	10801868 	cmpgeui	r2,r2,97
10000c2c:	1000021e 	bne	r2,zero,10000c38 <audio_record_r+0x38>
		return 0;
10000c30:	0005883a 	mov	r2,zero
10000c34:	00000406 	br	10000c48 <audio_record_r+0x48>
	else
		return audio_read_fifo(buf, len, AUDIO_RIGHT);
10000c38:	e13ffe17 	ldw	r4,-8(fp)
10000c3c:	e17fff17 	ldw	r5,-4(fp)
10000c40:	01800044 	movi	r6,1
10000c44:	00009b80 	call	100009b8 <audio_read_fifo>
}
10000c48:	e037883a 	mov	sp,fp
10000c4c:	dfc00117 	ldw	ra,4(sp)
10000c50:	df000017 	ldw	fp,0(sp)
10000c54:	dec00204 	addi	sp,sp,8
10000c58:	f800283a 	ret

10000c5c <audio_record_l>:
 * Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words
 * available. If it doesn't, then just returns 0. If it does, then data is read from
 * the FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int audio_record_l(unsigned int *buf, int len)
{
10000c5c:	defffb04 	addi	sp,sp,-20
10000c60:	dfc00415 	stw	ra,16(sp)
10000c64:	df000315 	stw	fp,12(sp)
10000c68:	df000304 	addi	fp,sp,12
10000c6c:	e13ffe15 	stw	r4,-8(fp)
10000c70:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_words = audio_read_fifo_avail(AUDIO_LEFT);
10000c74:	0009883a 	mov	r4,zero
10000c78:	00009600 	call	10000960 <audio_read_fifo_avail>
10000c7c:	e0bffd15 	stw	r2,-12(fp)
	if (data_words <= BUF_THRESHOLD)
10000c80:	e0bffd17 	ldw	r2,-12(fp)
10000c84:	10801868 	cmpgeui	r2,r2,97
10000c88:	1000021e 	bne	r2,zero,10000c94 <audio_record_l+0x38>
		return 0;
10000c8c:	0005883a 	mov	r2,zero
10000c90:	00000406 	br	10000ca4 <audio_record_l+0x48>
	else
		return audio_read_fifo(buf, len, AUDIO_LEFT);
10000c94:	e13ffe17 	ldw	r4,-8(fp)
10000c98:	e17fff17 	ldw	r5,-4(fp)
10000c9c:	000d883a 	mov	r6,zero
10000ca0:	00009b80 	call	100009b8 <audio_read_fifo>
}
10000ca4:	e037883a 	mov	sp,fp
10000ca8:	dfc00117 	ldw	ra,4(sp)
10000cac:	df000017 	ldw	fp,0(sp)
10000cb0:	dec00204 	addi	sp,sp,8
10000cb4:	f800283a 	ret

10000cb8 <audio_write_fifo_space>:

/**
 * Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC
 */
unsigned int audio_write_fifo_space(int channel)
{
10000cb8:	defffd04 	addi	sp,sp,-12
10000cbc:	df000215 	stw	fp,8(sp)
10000cc0:	df000204 	addi	fp,sp,8
10000cc4:	e13fff15 	stw	r4,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_AUDIO_FIFOSPACE();
10000cc8:	00801004 	movi	r2,64
10000ccc:	10800104 	addi	r2,r2,4
10000cd0:	10800037 	ldwio	r2,0(r2)
10000cd4:	e0bffe15 	stw	r2,-8(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET
			:
10000cd8:	e0bfff17 	ldw	r2,-4(fp)
10000cdc:	1000031e 	bne	r2,zero,10000cec <audio_write_fifo_space+0x34>
10000ce0:	e0bffe17 	ldw	r2,-8(fp)
10000ce4:	1004d63a 	srli	r2,r2,24
10000ce8:	00000306 	br	10000cf8 <audio_write_fifo_space+0x40>
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
10000cec:	e0bffe17 	ldw	r2,-8(fp)
10000cf0:	10803fec 	andhi	r2,r2,255
	// read the whole fifospace register
	fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper Channel Read Space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET
			:
10000cf4:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper Channel Read Space
	fifospace = (channel == AUDIO_LEFT) ?
10000cf8:	e0bffe15 	stw	r2,-8(fp)
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
	return fifospace;
10000cfc:	e0bffe17 	ldw	r2,-8(fp)
}
10000d00:	e037883a 	mov	sp,fp
10000d04:	df000017 	ldw	fp,0(sp)
10000d08:	dec00104 	addi	sp,sp,4
10000d0c:	f800283a 	ret

10000d10 <audio_play_r>:
 * Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the
 * FIFO, up to a maximum of len words.
 */
unsigned int audio_play_r(unsigned int *buf, int len)
{
10000d10:	defffb04 	addi	sp,sp,-20
10000d14:	dfc00415 	stw	ra,16(sp)
10000d18:	df000315 	stw	fp,12(sp)
10000d1c:	df000304 	addi	fp,sp,12
10000d20:	e13ffe15 	stw	r4,-8(fp)
10000d24:	e17fff15 	stw	r5,-4(fp)
	unsigned int space = audio_write_fifo_space(AUDIO_RIGHT);
10000d28:	01000044 	movi	r4,1
10000d2c:	0000cb80 	call	10000cb8 <audio_write_fifo_space>
10000d30:	e0bffd15 	stw	r2,-12(fp)
		if (space <= BUF_THRESHOLD)
10000d34:	e0bffd17 	ldw	r2,-12(fp)
10000d38:	10801868 	cmpgeui	r2,r2,97
10000d3c:	1000021e 	bne	r2,zero,10000d48 <audio_play_r+0x38>
			return 0;
10000d40:	0005883a 	mov	r2,zero
10000d44:	00000406 	br	10000d58 <audio_play_r+0x48>
		else
			return audio_write_fifo(buf, len, AUDIO_RIGHT);
10000d48:	e13ffe17 	ldw	r4,-8(fp)
10000d4c:	e17fff17 	ldw	r5,-4(fp)
10000d50:	01800044 	movi	r6,1
10000d54:	0000a840 	call	10000a84 <audio_write_fifo>
}
10000d58:	e037883a 	mov	sp,fp
10000d5c:	dfc00117 	ldw	ra,4(sp)
10000d60:	df000017 	ldw	fp,0(sp)
10000d64:	dec00204 	addi	sp,sp,8
10000d68:	f800283a 	ret

10000d6c <audio_play_l>:
 * Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the
 * FIFO, up to a maximum of len words.
 */
unsigned int audio_play_l(unsigned int *buf, int len)
{
10000d6c:	defffb04 	addi	sp,sp,-20
10000d70:	dfc00415 	stw	ra,16(sp)
10000d74:	df000315 	stw	fp,12(sp)
10000d78:	df000304 	addi	fp,sp,12
10000d7c:	e13ffe15 	stw	r4,-8(fp)
10000d80:	e17fff15 	stw	r5,-4(fp)
	unsigned int space = audio_write_fifo_space(AUDIO_LEFT);
10000d84:	0009883a 	mov	r4,zero
10000d88:	0000cb80 	call	10000cb8 <audio_write_fifo_space>
10000d8c:	e0bffd15 	stw	r2,-12(fp)
	if (space <= BUF_THRESHOLD)
10000d90:	e0bffd17 	ldw	r2,-12(fp)
10000d94:	10801868 	cmpgeui	r2,r2,97
10000d98:	1000021e 	bne	r2,zero,10000da4 <audio_play_l+0x38>
		return 0;
10000d9c:	0005883a 	mov	r2,zero
10000da0:	00000406 	br	10000db4 <audio_play_l+0x48>
	else
		return audio_write_fifo(buf, len, AUDIO_LEFT);
10000da4:	e13ffe17 	ldw	r4,-8(fp)
10000da8:	e17fff17 	ldw	r5,-4(fp)
10000dac:	000d883a 	mov	r6,zero
10000db0:	0000a840 	call	10000a84 <audio_write_fifo>
}
10000db4:	e037883a 	mov	sp,fp
10000db8:	dfc00117 	ldw	ra,4(sp)
10000dbc:	df000017 	ldw	fp,0(sp)
10000dc0:	dec00204 	addi	sp,sp,8
10000dc4:	f800283a 	ret

10000dc8 <main>:
//#include "priv/alt_file.h"
#include "audIO.h"


int main()
{
10000dc8:	defc1604 	addi	sp,sp,-4008
10000dcc:	dfc3e915 	stw	ra,4004(sp)
10000dd0:	df03e815 	stw	fp,4000(sp)
10000dd4:	df03e804 	addi	fp,sp,4000
  
  // Check how many data words the read FIFO for the right channel has.
  
  
  unsigned int buf[1000];
  printf("Reading buffer...");
10000dd8:	01040074 	movhi	r4,4097
10000ddc:	213f5304 	addi	r4,r4,-692
10000de0:	0000e400 	call	10000e40 <printf>
  audio_record_r(buf, sizeof(buf));
10000de4:	e13c1804 	addi	r4,fp,-4000
10000de8:	0143e804 	movi	r5,4000
10000dec:	0000c000 	call	10000c00 <audio_record_r>
//  alt_up_audio_record_r(audio, buf, sizeof(buf));
  printf(" Done.\n");
10000df0:	01040074 	movhi	r4,4097
10000df4:	213f5804 	addi	r4,r4,-672
10000df8:	0000f340 	call	10000f34 <puts>
	  // delay
	  for (i = 0; i < 100; i++)
		  ;
  }
  //*/
  return 0;
10000dfc:	0005883a 	mov	r2,zero
}
10000e00:	e037883a 	mov	sp,fp
10000e04:	dfc00117 	ldw	ra,4(sp)
10000e08:	df000017 	ldw	fp,0(sp)
10000e0c:	dec00204 	addi	sp,sp,8
10000e10:	f800283a 	ret

10000e14 <_printf_r>:
10000e14:	defffd04 	addi	sp,sp,-12
10000e18:	dfc00015 	stw	ra,0(sp)
10000e1c:	d9800115 	stw	r6,4(sp)
10000e20:	d9c00215 	stw	r7,8(sp)
10000e24:	280d883a 	mov	r6,r5
10000e28:	21400217 	ldw	r5,8(r4)
10000e2c:	d9c00104 	addi	r7,sp,4
10000e30:	0000fd40 	call	10000fd4 <___vfprintf_internal_r>
10000e34:	dfc00017 	ldw	ra,0(sp)
10000e38:	dec00304 	addi	sp,sp,12
10000e3c:	f800283a 	ret

10000e40 <printf>:
10000e40:	defffc04 	addi	sp,sp,-16
10000e44:	dfc00015 	stw	ra,0(sp)
10000e48:	d9400115 	stw	r5,4(sp)
10000e4c:	d9800215 	stw	r6,8(sp)
10000e50:	d9c00315 	stw	r7,12(sp)
10000e54:	00840074 	movhi	r2,4097
10000e58:	1086c804 	addi	r2,r2,6944
10000e5c:	10800017 	ldw	r2,0(r2)
10000e60:	200b883a 	mov	r5,r4
10000e64:	d9800104 	addi	r6,sp,4
10000e68:	11000217 	ldw	r4,8(r2)
10000e6c:	00031280 	call	10003128 <__vfprintf_internal>
10000e70:	dfc00017 	ldw	ra,0(sp)
10000e74:	dec00404 	addi	sp,sp,16
10000e78:	f800283a 	ret

10000e7c <_puts_r>:
10000e7c:	defff604 	addi	sp,sp,-40
10000e80:	dc400815 	stw	r17,32(sp)
10000e84:	2023883a 	mov	r17,r4
10000e88:	2809883a 	mov	r4,r5
10000e8c:	dc000715 	stw	r16,28(sp)
10000e90:	dfc00915 	stw	ra,36(sp)
10000e94:	2821883a 	mov	r16,r5
10000e98:	0000f480 	call	10000f48 <strlen>
10000e9c:	00c40074 	movhi	r3,4097
10000ea0:	18c6c804 	addi	r3,r3,6944
10000ea4:	18c00017 	ldw	r3,0(r3)
10000ea8:	11000044 	addi	r4,r2,1
10000eac:	d8800115 	stw	r2,4(sp)
10000eb0:	18c00217 	ldw	r3,8(r3)
10000eb4:	00840074 	movhi	r2,4097
10000eb8:	10bf5a04 	addi	r2,r2,-664
10000ebc:	d8800215 	stw	r2,8(sp)
10000ec0:	1940030b 	ldhu	r5,12(r3)
10000ec4:	00800044 	movi	r2,1
10000ec8:	d8800315 	stw	r2,12(sp)
10000ecc:	00800084 	movi	r2,2
10000ed0:	d8800515 	stw	r2,20(sp)
10000ed4:	dc000015 	stw	r16,0(sp)
10000ed8:	d9000615 	stw	r4,24(sp)
10000edc:	dec00415 	stw	sp,16(sp)
10000ee0:	2888000c 	andi	r2,r5,8192
10000ee4:	1000061e 	bne	r2,zero,10000f00 <_puts_r+0x84>
10000ee8:	19001917 	ldw	r4,100(r3)
10000eec:	00b7ffc4 	movi	r2,-8193
10000ef0:	29480014 	ori	r5,r5,8192
10000ef4:	2084703a 	and	r2,r4,r2
10000ef8:	1940030d 	sth	r5,12(r3)
10000efc:	18801915 	stw	r2,100(r3)
10000f00:	89400217 	ldw	r5,8(r17)
10000f04:	8809883a 	mov	r4,r17
10000f08:	d9800404 	addi	r6,sp,16
10000f0c:	000550c0 	call	1000550c <__sfvwrite_r>
10000f10:	1000061e 	bne	r2,zero,10000f2c <_puts_r+0xb0>
10000f14:	00800284 	movi	r2,10
10000f18:	dfc00917 	ldw	ra,36(sp)
10000f1c:	dc400817 	ldw	r17,32(sp)
10000f20:	dc000717 	ldw	r16,28(sp)
10000f24:	dec00a04 	addi	sp,sp,40
10000f28:	f800283a 	ret
10000f2c:	00bfffc4 	movi	r2,-1
10000f30:	003ff906 	br	10000f18 <__alt_data_end+0xf8000f18>

10000f34 <puts>:
10000f34:	00840074 	movhi	r2,4097
10000f38:	1086c804 	addi	r2,r2,6944
10000f3c:	200b883a 	mov	r5,r4
10000f40:	11000017 	ldw	r4,0(r2)
10000f44:	0000e7c1 	jmpi	10000e7c <_puts_r>

10000f48 <strlen>:
10000f48:	208000cc 	andi	r2,r4,3
10000f4c:	10001d26 	beq	r2,zero,10000fc4 <strlen+0x7c>
10000f50:	20800007 	ldb	r2,0(r4)
10000f54:	10001d26 	beq	r2,zero,10000fcc <strlen+0x84>
10000f58:	2005883a 	mov	r2,r4
10000f5c:	00000206 	br	10000f68 <strlen+0x20>
10000f60:	10c00007 	ldb	r3,0(r2)
10000f64:	18001526 	beq	r3,zero,10000fbc <strlen+0x74>
10000f68:	10800044 	addi	r2,r2,1
10000f6c:	10c000cc 	andi	r3,r2,3
10000f70:	183ffb1e 	bne	r3,zero,10000f60 <__alt_data_end+0xf8000f60>
10000f74:	10c00017 	ldw	r3,0(r2)
10000f78:	01ffbff4 	movhi	r7,65279
10000f7c:	39ffbfc4 	addi	r7,r7,-257
10000f80:	01a02074 	movhi	r6,32897
10000f84:	31a02004 	addi	r6,r6,-32640
10000f88:	00000206 	br	10000f94 <strlen+0x4c>
10000f8c:	10800104 	addi	r2,r2,4
10000f90:	10c00017 	ldw	r3,0(r2)
10000f94:	19cb883a 	add	r5,r3,r7
10000f98:	00c6303a 	nor	r3,zero,r3
10000f9c:	28c6703a 	and	r3,r5,r3
10000fa0:	1986703a 	and	r3,r3,r6
10000fa4:	183ff926 	beq	r3,zero,10000f8c <__alt_data_end+0xf8000f8c>
10000fa8:	10c00007 	ldb	r3,0(r2)
10000fac:	18000326 	beq	r3,zero,10000fbc <strlen+0x74>
10000fb0:	10800044 	addi	r2,r2,1
10000fb4:	10c00007 	ldb	r3,0(r2)
10000fb8:	183ffd1e 	bne	r3,zero,10000fb0 <__alt_data_end+0xf8000fb0>
10000fbc:	1105c83a 	sub	r2,r2,r4
10000fc0:	f800283a 	ret
10000fc4:	2005883a 	mov	r2,r4
10000fc8:	003fea06 	br	10000f74 <__alt_data_end+0xf8000f74>
10000fcc:	0005883a 	mov	r2,zero
10000fd0:	f800283a 	ret

10000fd4 <___vfprintf_internal_r>:
10000fd4:	defeb604 	addi	sp,sp,-1320
10000fd8:	dfc14915 	stw	ra,1316(sp)
10000fdc:	dcc14315 	stw	r19,1292(sp)
10000fe0:	dc414115 	stw	r17,1284(sp)
10000fe4:	d9012c15 	stw	r4,1200(sp)
10000fe8:	2827883a 	mov	r19,r5
10000fec:	3023883a 	mov	r17,r6
10000ff0:	d9c12f15 	stw	r7,1212(sp)
10000ff4:	df014815 	stw	fp,1312(sp)
10000ff8:	ddc14715 	stw	r23,1308(sp)
10000ffc:	dd814615 	stw	r22,1304(sp)
10001000:	dd414515 	stw	r21,1300(sp)
10001004:	dd014415 	stw	r20,1296(sp)
10001008:	dc814215 	stw	r18,1288(sp)
1000100c:	dc014015 	stw	r16,1280(sp)
10001010:	0005bb80 	call	10005bb8 <_localeconv_r>
10001014:	10800017 	ldw	r2,0(r2)
10001018:	1009883a 	mov	r4,r2
1000101c:	d8813415 	stw	r2,1232(sp)
10001020:	0000f480 	call	10000f48 <strlen>
10001024:	d8813815 	stw	r2,1248(sp)
10001028:	d8812c17 	ldw	r2,1200(sp)
1000102c:	10000226 	beq	r2,zero,10001038 <___vfprintf_internal_r+0x64>
10001030:	10800e17 	ldw	r2,56(r2)
10001034:	10010826 	beq	r2,zero,10001458 <___vfprintf_internal_r+0x484>
10001038:	9880030b 	ldhu	r2,12(r19)
1000103c:	1108000c 	andi	r4,r2,8192
10001040:	1007883a 	mov	r3,r2
10001044:	2000071e 	bne	r4,zero,10001064 <___vfprintf_internal_r+0x90>
10001048:	99001917 	ldw	r4,100(r19)
1000104c:	10c80014 	ori	r3,r2,8192
10001050:	00b7ffc4 	movi	r2,-8193
10001054:	2088703a 	and	r4,r4,r2
10001058:	98c0030d 	sth	r3,12(r19)
1000105c:	1805883a 	mov	r2,r3
10001060:	99001915 	stw	r4,100(r19)
10001064:	1900020c 	andi	r4,r3,8
10001068:	2000ab26 	beq	r4,zero,10001318 <___vfprintf_internal_r+0x344>
1000106c:	99000417 	ldw	r4,16(r19)
10001070:	2000a926 	beq	r4,zero,10001318 <___vfprintf_internal_r+0x344>
10001074:	18c0068c 	andi	r3,r3,26
10001078:	01000284 	movi	r4,10
1000107c:	1900af26 	beq	r3,r4,1000133c <___vfprintf_internal_r+0x368>
10001080:	d9010dc4 	addi	r4,sp,1079
10001084:	d9410e04 	addi	r5,sp,1080
10001088:	d8800404 	addi	r2,sp,16
1000108c:	2907c83a 	sub	r3,r5,r4
10001090:	d9012815 	stw	r4,1184(sp)
10001094:	d9412915 	stw	r5,1188(sp)
10001098:	d8811e15 	stw	r2,1144(sp)
1000109c:	d8012015 	stw	zero,1152(sp)
100010a0:	d8011f15 	stw	zero,1148(sp)
100010a4:	d8013515 	stw	zero,1236(sp)
100010a8:	d8013715 	stw	zero,1244(sp)
100010ac:	d8013915 	stw	zero,1252(sp)
100010b0:	d8013b15 	stw	zero,1260(sp)
100010b4:	d8013a15 	stw	zero,1256(sp)
100010b8:	d8013115 	stw	zero,1220(sp)
100010bc:	1011883a 	mov	r8,r2
100010c0:	05c40074 	movhi	r23,4097
100010c4:	bdff6b84 	addi	r23,r23,-594
100010c8:	d8c13d15 	stw	r3,1268(sp)
100010cc:	88800007 	ldb	r2,0(r17)
100010d0:	10021126 	beq	r2,zero,10001918 <___vfprintf_internal_r+0x944>
100010d4:	00c00944 	movi	r3,37
100010d8:	8821883a 	mov	r16,r17
100010dc:	10c0021e 	bne	r2,r3,100010e8 <___vfprintf_internal_r+0x114>
100010e0:	00001406 	br	10001134 <___vfprintf_internal_r+0x160>
100010e4:	10c00326 	beq	r2,r3,100010f4 <___vfprintf_internal_r+0x120>
100010e8:	84000044 	addi	r16,r16,1
100010ec:	80800007 	ldb	r2,0(r16)
100010f0:	103ffc1e 	bne	r2,zero,100010e4 <__alt_data_end+0xf80010e4>
100010f4:	8465c83a 	sub	r18,r16,r17
100010f8:	90000e26 	beq	r18,zero,10001134 <___vfprintf_internal_r+0x160>
100010fc:	d8c12017 	ldw	r3,1152(sp)
10001100:	d8811f17 	ldw	r2,1148(sp)
10001104:	44400015 	stw	r17,0(r8)
10001108:	1c87883a 	add	r3,r3,r18
1000110c:	10800044 	addi	r2,r2,1
10001110:	d8c12015 	stw	r3,1152(sp)
10001114:	44800115 	stw	r18,4(r8)
10001118:	d8811f15 	stw	r2,1148(sp)
1000111c:	00c001c4 	movi	r3,7
10001120:	1880bb16 	blt	r3,r2,10001410 <___vfprintf_internal_r+0x43c>
10001124:	42000204 	addi	r8,r8,8
10001128:	d9013117 	ldw	r4,1220(sp)
1000112c:	2489883a 	add	r4,r4,r18
10001130:	d9013115 	stw	r4,1220(sp)
10001134:	80800007 	ldb	r2,0(r16)
10001138:	1000bc26 	beq	r2,zero,1000142c <___vfprintf_internal_r+0x458>
1000113c:	053fffc4 	movi	r20,-1
10001140:	84400044 	addi	r17,r16,1
10001144:	84800047 	ldb	r18,1(r16)
10001148:	d8012785 	stb	zero,1182(sp)
1000114c:	002d883a 	mov	r22,zero
10001150:	d8013015 	stw	zero,1216(sp)
10001154:	d8012a15 	stw	zero,1192(sp)
10001158:	04001604 	movi	r16,88
1000115c:	05400244 	movi	r21,9
10001160:	4039883a 	mov	fp,r8
10001164:	a007883a 	mov	r3,r20
10001168:	8c400044 	addi	r17,r17,1
1000116c:	90bff804 	addi	r2,r18,-32
10001170:	80832036 	bltu	r16,r2,10001df4 <___vfprintf_internal_r+0xe20>
10001174:	1085883a 	add	r2,r2,r2
10001178:	1085883a 	add	r2,r2,r2
1000117c:	01440034 	movhi	r5,4096
10001180:	29446404 	addi	r5,r5,4496
10001184:	1145883a 	add	r2,r2,r5
10001188:	10800017 	ldw	r2,0(r2)
1000118c:	1000683a 	jmp	r2
10001190:	10001b94 	ori	zero,r2,110
10001194:	10001df4 	orhi	zero,r2,119
10001198:	10001df4 	orhi	zero,r2,119
1000119c:	10001bb0 	cmpltui	zero,r2,110
100011a0:	10001df4 	orhi	zero,r2,119
100011a4:	10001df4 	orhi	zero,r2,119
100011a8:	10001df4 	orhi	zero,r2,119
100011ac:	10001df4 	orhi	zero,r2,119
100011b0:	10001df4 	orhi	zero,r2,119
100011b4:	10001df4 	orhi	zero,r2,119
100011b8:	10001bc4 	addi	zero,r2,111
100011bc:	10001464 	muli	zero,r2,81
100011c0:	10001df4 	orhi	zero,r2,119
100011c4:	10001304 	addi	zero,r2,76
100011c8:	10001470 	cmpltui	zero,r2,81
100011cc:	10001df4 	orhi	zero,r2,119
100011d0:	100014c0 	call	1100014c <_gp+0xfe6638>
100011d4:	100019d0 	cmplti	zero,r2,103
100011d8:	100019d0 	cmplti	zero,r2,103
100011dc:	100019d0 	cmplti	zero,r2,103
100011e0:	100019d0 	cmplti	zero,r2,103
100011e4:	100019d0 	cmplti	zero,r2,103
100011e8:	100019d0 	cmplti	zero,r2,103
100011ec:	100019d0 	cmplti	zero,r2,103
100011f0:	100019d0 	cmplti	zero,r2,103
100011f4:	100019d0 	cmplti	zero,r2,103
100011f8:	10001df4 	orhi	zero,r2,119
100011fc:	10001df4 	orhi	zero,r2,119
10001200:	10001df4 	orhi	zero,r2,119
10001204:	10001df4 	orhi	zero,r2,119
10001208:	10001df4 	orhi	zero,r2,119
1000120c:	10001df4 	orhi	zero,r2,119
10001210:	10001df4 	orhi	zero,r2,119
10001214:	10001df4 	orhi	zero,r2,119
10001218:	10001df4 	orhi	zero,r2,119
1000121c:	10001df4 	orhi	zero,r2,119
10001220:	100014d4 	ori	zero,r2,83
10001224:	10001920 	cmpeqi	zero,r2,100
10001228:	10001df4 	orhi	zero,r2,119
1000122c:	10001920 	cmpeqi	zero,r2,100
10001230:	10001df4 	orhi	zero,r2,119
10001234:	10001df4 	orhi	zero,r2,119
10001238:	10001df4 	orhi	zero,r2,119
1000123c:	10001df4 	orhi	zero,r2,119
10001240:	10001a18 	cmpnei	zero,r2,104
10001244:	10001df4 	orhi	zero,r2,119
10001248:	10001df4 	orhi	zero,r2,119
1000124c:	10001a2c 	andhi	zero,r2,104
10001250:	10001df4 	orhi	zero,r2,119
10001254:	10001df4 	orhi	zero,r2,119
10001258:	10001df4 	orhi	zero,r2,119
1000125c:	10001df4 	orhi	zero,r2,119
10001260:	10001df4 	orhi	zero,r2,119
10001264:	10001a74 	orhi	zero,r2,105
10001268:	10001df4 	orhi	zero,r2,119
1000126c:	10001df4 	orhi	zero,r2,119
10001270:	10001be8 	cmpgeui	zero,r2,111
10001274:	10001df4 	orhi	zero,r2,119
10001278:	10001df4 	orhi	zero,r2,119
1000127c:	10001df4 	orhi	zero,r2,119
10001280:	10001df4 	orhi	zero,r2,119
10001284:	10001df4 	orhi	zero,r2,119
10001288:	10001df4 	orhi	zero,r2,119
1000128c:	10001df4 	orhi	zero,r2,119
10001290:	10001df4 	orhi	zero,r2,119
10001294:	10001df4 	orhi	zero,r2,119
10001298:	10001df4 	orhi	zero,r2,119
1000129c:	10001aec 	andhi	zero,r2,107
100012a0:	10001c64 	muli	zero,r2,113
100012a4:	10001920 	cmpeqi	zero,r2,100
100012a8:	10001920 	cmpeqi	zero,r2,100
100012ac:	10001920 	cmpeqi	zero,r2,100
100012b0:	10001c30 	cmpltui	zero,r2,112
100012b4:	10001c64 	muli	zero,r2,113
100012b8:	10001df4 	orhi	zero,r2,119
100012bc:	10001df4 	orhi	zero,r2,119
100012c0:	10001c44 	addi	zero,r2,113
100012c4:	10001df4 	orhi	zero,r2,119
100012c8:	10001ab4 	orhi	zero,r2,106
100012cc:	10001d74 	orhi	zero,r2,117
100012d0:	10001d20 	cmpeqi	zero,r2,116
100012d4:	10001ca4 	muli	zero,r2,114
100012d8:	10001df4 	orhi	zero,r2,119
100012dc:	10001cb8 	rdprs	zero,r2,114
100012e0:	10001df4 	orhi	zero,r2,119
100012e4:	10001db4 	orhi	zero,r2,118
100012e8:	10001df4 	orhi	zero,r2,119
100012ec:	10001df4 	orhi	zero,r2,119
100012f0:	10001b2c 	andhi	zero,r2,108
100012f4:	d9413017 	ldw	r5,1216(sp)
100012f8:	d8812f15 	stw	r2,1212(sp)
100012fc:	014bc83a 	sub	r5,zero,r5
10001300:	d9413015 	stw	r5,1216(sp)
10001304:	d8812a17 	ldw	r2,1192(sp)
10001308:	10800114 	ori	r2,r2,4
1000130c:	d8812a15 	stw	r2,1192(sp)
10001310:	8c800007 	ldb	r18,0(r17)
10001314:	003f9406 	br	10001168 <__alt_data_end+0xf8001168>
10001318:	d9012c17 	ldw	r4,1200(sp)
1000131c:	980b883a 	mov	r5,r19
10001320:	000314c0 	call	1000314c <__swsetup_r>
10001324:	10002d1e 	bne	r2,zero,100013dc <___vfprintf_internal_r+0x408>
10001328:	9880030b 	ldhu	r2,12(r19)
1000132c:	01000284 	movi	r4,10
10001330:	1007883a 	mov	r3,r2
10001334:	18c0068c 	andi	r3,r3,26
10001338:	193f511e 	bne	r3,r4,10001080 <__alt_data_end+0xf8001080>
1000133c:	98c0038b 	ldhu	r3,14(r19)
10001340:	193fffcc 	andi	r4,r3,65535
10001344:	2120001c 	xori	r4,r4,32768
10001348:	21200004 	addi	r4,r4,-32768
1000134c:	203f4c16 	blt	r4,zero,10001080 <__alt_data_end+0xf8001080>
10001350:	9ac01917 	ldw	r11,100(r19)
10001354:	9a800717 	ldw	r10,28(r19)
10001358:	9a400917 	ldw	r9,36(r19)
1000135c:	d9012c17 	ldw	r4,1200(sp)
10001360:	d9c12f17 	ldw	r7,1212(sp)
10001364:	02010004 	movi	r8,1024
10001368:	10bfff4c 	andi	r2,r2,65533
1000136c:	d8c1078d 	sth	r3,1054(sp)
10001370:	d9410404 	addi	r5,sp,1040
10001374:	d8c00404 	addi	r3,sp,16
10001378:	880d883a 	mov	r6,r17
1000137c:	d881070d 	sth	r2,1052(sp)
10001380:	dac11d15 	stw	r11,1140(sp)
10001384:	da810b15 	stw	r10,1068(sp)
10001388:	da410d15 	stw	r9,1076(sp)
1000138c:	d8c10415 	stw	r3,1040(sp)
10001390:	d8c10815 	stw	r3,1056(sp)
10001394:	da010615 	stw	r8,1048(sp)
10001398:	da010915 	stw	r8,1060(sp)
1000139c:	d8010a15 	stw	zero,1064(sp)
100013a0:	0000fd40 	call	10000fd4 <___vfprintf_internal_r>
100013a4:	1021883a 	mov	r16,r2
100013a8:	10000416 	blt	r2,zero,100013bc <___vfprintf_internal_r+0x3e8>
100013ac:	d9012c17 	ldw	r4,1200(sp)
100013b0:	d9410404 	addi	r5,sp,1040
100013b4:	0004ae80 	call	10004ae8 <_fflush_r>
100013b8:	10072a1e 	bne	r2,zero,10003064 <___vfprintf_internal_r+0x2090>
100013bc:	d881070b 	ldhu	r2,1052(sp)
100013c0:	1080100c 	andi	r2,r2,64
100013c4:	10000326 	beq	r2,zero,100013d4 <___vfprintf_internal_r+0x400>
100013c8:	9880030b 	ldhu	r2,12(r19)
100013cc:	10801014 	ori	r2,r2,64
100013d0:	9880030d 	sth	r2,12(r19)
100013d4:	8005883a 	mov	r2,r16
100013d8:	00000106 	br	100013e0 <___vfprintf_internal_r+0x40c>
100013dc:	00bfffc4 	movi	r2,-1
100013e0:	dfc14917 	ldw	ra,1316(sp)
100013e4:	df014817 	ldw	fp,1312(sp)
100013e8:	ddc14717 	ldw	r23,1308(sp)
100013ec:	dd814617 	ldw	r22,1304(sp)
100013f0:	dd414517 	ldw	r21,1300(sp)
100013f4:	dd014417 	ldw	r20,1296(sp)
100013f8:	dcc14317 	ldw	r19,1292(sp)
100013fc:	dc814217 	ldw	r18,1288(sp)
10001400:	dc414117 	ldw	r17,1284(sp)
10001404:	dc014017 	ldw	r16,1280(sp)
10001408:	dec14a04 	addi	sp,sp,1320
1000140c:	f800283a 	ret
10001410:	d9012c17 	ldw	r4,1200(sp)
10001414:	980b883a 	mov	r5,r19
10001418:	d9811e04 	addi	r6,sp,1144
1000141c:	00082dc0 	call	100082dc <__sprint_r>
10001420:	1000081e 	bne	r2,zero,10001444 <___vfprintf_internal_r+0x470>
10001424:	da000404 	addi	r8,sp,16
10001428:	003f3f06 	br	10001128 <__alt_data_end+0xf8001128>
1000142c:	d8812017 	ldw	r2,1152(sp)
10001430:	10000426 	beq	r2,zero,10001444 <___vfprintf_internal_r+0x470>
10001434:	d9012c17 	ldw	r4,1200(sp)
10001438:	980b883a 	mov	r5,r19
1000143c:	d9811e04 	addi	r6,sp,1144
10001440:	00082dc0 	call	100082dc <__sprint_r>
10001444:	9880030b 	ldhu	r2,12(r19)
10001448:	1080100c 	andi	r2,r2,64
1000144c:	103fe31e 	bne	r2,zero,100013dc <__alt_data_end+0xf80013dc>
10001450:	d8813117 	ldw	r2,1220(sp)
10001454:	003fe206 	br	100013e0 <__alt_data_end+0xf80013e0>
10001458:	d9012c17 	ldw	r4,1200(sp)
1000145c:	0004e080 	call	10004e08 <__sinit>
10001460:	003ef506 	br	10001038 <__alt_data_end+0xf8001038>
10001464:	05800ac4 	movi	r22,43
10001468:	8c800007 	ldb	r18,0(r17)
1000146c:	003f3e06 	br	10001168 <__alt_data_end+0xf8001168>
10001470:	8c800007 	ldb	r18,0(r17)
10001474:	00c00a84 	movi	r3,42
10001478:	88800044 	addi	r2,r17,1
1000147c:	90c6fb26 	beq	r18,r3,1000306c <___vfprintf_internal_r+0x2098>
10001480:	953ff404 	addi	r20,r18,-48
10001484:	1023883a 	mov	r17,r2
10001488:	0007883a 	mov	r3,zero
1000148c:	ad3f3736 	bltu	r21,r20,1000116c <__alt_data_end+0xf800116c>
10001490:	0009883a 	mov	r4,zero
10001494:	01400284 	movi	r5,10
10001498:	000af1c0 	call	1000af1c <__mulsi3>
1000149c:	8c800007 	ldb	r18,0(r17)
100014a0:	a089883a 	add	r4,r20,r2
100014a4:	8c400044 	addi	r17,r17,1
100014a8:	953ff404 	addi	r20,r18,-48
100014ac:	ad3ff92e 	bgeu	r21,r20,10001494 <__alt_data_end+0xf8001494>
100014b0:	2007883a 	mov	r3,r4
100014b4:	203f2d0e 	bge	r4,zero,1000116c <__alt_data_end+0xf800116c>
100014b8:	00ffffc4 	movi	r3,-1
100014bc:	003f2b06 	br	1000116c <__alt_data_end+0xf800116c>
100014c0:	d9412a17 	ldw	r5,1192(sp)
100014c4:	29402014 	ori	r5,r5,128
100014c8:	d9412a15 	stw	r5,1192(sp)
100014cc:	8c800007 	ldb	r18,0(r17)
100014d0:	003f2506 	br	10001168 <__alt_data_end+0xf8001168>
100014d4:	d9412a17 	ldw	r5,1192(sp)
100014d8:	1829883a 	mov	r20,r3
100014dc:	dd812785 	stb	r22,1182(sp)
100014e0:	29400414 	ori	r5,r5,16
100014e4:	d9412a15 	stw	r5,1192(sp)
100014e8:	d8c12a17 	ldw	r3,1192(sp)
100014ec:	e011883a 	mov	r8,fp
100014f0:	1880080c 	andi	r2,r3,32
100014f4:	1001e126 	beq	r2,zero,10001c7c <___vfprintf_internal_r+0xca8>
100014f8:	d9012f17 	ldw	r4,1212(sp)
100014fc:	20800117 	ldw	r2,4(r4)
10001500:	25400017 	ldw	r21,0(r4)
10001504:	21000204 	addi	r4,r4,8
10001508:	d9012f15 	stw	r4,1212(sp)
1000150c:	102d883a 	mov	r22,r2
10001510:	10046916 	blt	r2,zero,100026b8 <___vfprintf_internal_r+0x16e4>
10001514:	df012783 	ldbu	fp,1182(sp)
10001518:	00c00044 	movi	r3,1
1000151c:	ad84b03a 	or	r2,r21,r22
10001520:	a0000416 	blt	r20,zero,10001534 <___vfprintf_internal_r+0x560>
10001524:	d9412a17 	ldw	r5,1192(sp)
10001528:	013fdfc4 	movi	r4,-129
1000152c:	290a703a 	and	r5,r5,r4
10001530:	d9412a15 	stw	r5,1192(sp)
10001534:	1002491e 	bne	r2,zero,10001e5c <___vfprintf_internal_r+0xe88>
10001538:	a002481e 	bne	r20,zero,10001e5c <___vfprintf_internal_r+0xe88>
1000153c:	18c03fcc 	andi	r3,r3,255
10001540:	1803871e 	bne	r3,zero,10002360 <___vfprintf_internal_r+0x138c>
10001544:	d9012a17 	ldw	r4,1192(sp)
10001548:	2080004c 	andi	r2,r4,1
1000154c:	10038426 	beq	r2,zero,10002360 <___vfprintf_internal_r+0x138c>
10001550:	d9413d17 	ldw	r5,1268(sp)
10001554:	00800c04 	movi	r2,48
10001558:	d8810dc5 	stb	r2,1079(sp)
1000155c:	d9412e15 	stw	r5,1208(sp)
10001560:	dc010dc4 	addi	r16,sp,1079
10001564:	d8812e17 	ldw	r2,1208(sp)
10001568:	1500010e 	bge	r2,r20,10001570 <___vfprintf_internal_r+0x59c>
1000156c:	a005883a 	mov	r2,r20
10001570:	d8812b15 	stw	r2,1196(sp)
10001574:	d8013315 	stw	zero,1228(sp)
10001578:	e0803fcc 	andi	r2,fp,255
1000157c:	1080201c 	xori	r2,r2,128
10001580:	10bfe004 	addi	r2,r2,-128
10001584:	10000326 	beq	r2,zero,10001594 <___vfprintf_internal_r+0x5c0>
10001588:	d8c12b17 	ldw	r3,1196(sp)
1000158c:	18c00044 	addi	r3,r3,1
10001590:	d8c12b15 	stw	r3,1196(sp)
10001594:	d8c12a17 	ldw	r3,1192(sp)
10001598:	18c0008c 	andi	r3,r3,2
1000159c:	d8c12d15 	stw	r3,1204(sp)
100015a0:	18000326 	beq	r3,zero,100015b0 <___vfprintf_internal_r+0x5dc>
100015a4:	d8c12b17 	ldw	r3,1196(sp)
100015a8:	18c00084 	addi	r3,r3,2
100015ac:	d8c12b15 	stw	r3,1196(sp)
100015b0:	d8c12a17 	ldw	r3,1192(sp)
100015b4:	18c0210c 	andi	r3,r3,132
100015b8:	d8c13215 	stw	r3,1224(sp)
100015bc:	1802151e 	bne	r3,zero,10001e14 <___vfprintf_internal_r+0xe40>
100015c0:	d9013017 	ldw	r4,1216(sp)
100015c4:	d8c12b17 	ldw	r3,1196(sp)
100015c8:	20f9c83a 	sub	fp,r4,r3
100015cc:	0702110e 	bge	zero,fp,10001e14 <___vfprintf_internal_r+0xe40>
100015d0:	02400404 	movi	r9,16
100015d4:	d8c12017 	ldw	r3,1152(sp)
100015d8:	d8811f17 	ldw	r2,1148(sp)
100015dc:	4f059a0e 	bge	r9,fp,10002c48 <___vfprintf_internal_r+0x1c74>
100015e0:	8809883a 	mov	r4,r17
100015e4:	01440074 	movhi	r5,4097
100015e8:	297f6f84 	addi	r5,r5,-578
100015ec:	dc013c15 	stw	r16,1264(sp)
100015f0:	e023883a 	mov	r17,fp
100015f4:	d9413615 	stw	r5,1240(sp)
100015f8:	482d883a 	mov	r22,r9
100015fc:	054001c4 	movi	r21,7
10001600:	dc012c17 	ldw	r16,1200(sp)
10001604:	2039883a 	mov	fp,r4
10001608:	00000306 	br	10001618 <___vfprintf_internal_r+0x644>
1000160c:	8c7ffc04 	addi	r17,r17,-16
10001610:	42000204 	addi	r8,r8,8
10001614:	b440130e 	bge	r22,r17,10001664 <___vfprintf_internal_r+0x690>
10001618:	18c00404 	addi	r3,r3,16
1000161c:	10800044 	addi	r2,r2,1
10001620:	01040074 	movhi	r4,4097
10001624:	213f6f84 	addi	r4,r4,-578
10001628:	41000015 	stw	r4,0(r8)
1000162c:	45800115 	stw	r22,4(r8)
10001630:	d8c12015 	stw	r3,1152(sp)
10001634:	d8811f15 	stw	r2,1148(sp)
10001638:	a8bff40e 	bge	r21,r2,1000160c <__alt_data_end+0xf800160c>
1000163c:	8009883a 	mov	r4,r16
10001640:	980b883a 	mov	r5,r19
10001644:	d9811e04 	addi	r6,sp,1144
10001648:	00082dc0 	call	100082dc <__sprint_r>
1000164c:	103f7d1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10001650:	8c7ffc04 	addi	r17,r17,-16
10001654:	d8c12017 	ldw	r3,1152(sp)
10001658:	d8811f17 	ldw	r2,1148(sp)
1000165c:	da000404 	addi	r8,sp,16
10001660:	b47fed16 	blt	r22,r17,10001618 <__alt_data_end+0xf8001618>
10001664:	dc013c17 	ldw	r16,1264(sp)
10001668:	e009883a 	mov	r4,fp
1000166c:	8839883a 	mov	fp,r17
10001670:	2023883a 	mov	r17,r4
10001674:	d9413617 	ldw	r5,1240(sp)
10001678:	e0c7883a 	add	r3,fp,r3
1000167c:	10800044 	addi	r2,r2,1
10001680:	41400015 	stw	r5,0(r8)
10001684:	47000115 	stw	fp,4(r8)
10001688:	d8c12015 	stw	r3,1152(sp)
1000168c:	d8811f15 	stw	r2,1148(sp)
10001690:	010001c4 	movi	r4,7
10001694:	20836b16 	blt	r4,r2,10002444 <___vfprintf_internal_r+0x1470>
10001698:	d8812787 	ldb	r2,1182(sp)
1000169c:	42000204 	addi	r8,r8,8
100016a0:	10000c26 	beq	r2,zero,100016d4 <___vfprintf_internal_r+0x700>
100016a4:	d8811f17 	ldw	r2,1148(sp)
100016a8:	d9012784 	addi	r4,sp,1182
100016ac:	18c00044 	addi	r3,r3,1
100016b0:	10800044 	addi	r2,r2,1
100016b4:	41000015 	stw	r4,0(r8)
100016b8:	01000044 	movi	r4,1
100016bc:	41000115 	stw	r4,4(r8)
100016c0:	d8c12015 	stw	r3,1152(sp)
100016c4:	d8811f15 	stw	r2,1148(sp)
100016c8:	010001c4 	movi	r4,7
100016cc:	2082ef16 	blt	r4,r2,1000228c <___vfprintf_internal_r+0x12b8>
100016d0:	42000204 	addi	r8,r8,8
100016d4:	d8812d17 	ldw	r2,1204(sp)
100016d8:	10000c26 	beq	r2,zero,1000170c <___vfprintf_internal_r+0x738>
100016dc:	d8811f17 	ldw	r2,1148(sp)
100016e0:	d9012704 	addi	r4,sp,1180
100016e4:	18c00084 	addi	r3,r3,2
100016e8:	10800044 	addi	r2,r2,1
100016ec:	41000015 	stw	r4,0(r8)
100016f0:	01000084 	movi	r4,2
100016f4:	41000115 	stw	r4,4(r8)
100016f8:	d8c12015 	stw	r3,1152(sp)
100016fc:	d8811f15 	stw	r2,1148(sp)
10001700:	010001c4 	movi	r4,7
10001704:	2082e916 	blt	r4,r2,100022ac <___vfprintf_internal_r+0x12d8>
10001708:	42000204 	addi	r8,r8,8
1000170c:	d9013217 	ldw	r4,1224(sp)
10001710:	00802004 	movi	r2,128
10001714:	20823226 	beq	r4,r2,10001fe0 <___vfprintf_internal_r+0x100c>
10001718:	d9012e17 	ldw	r4,1208(sp)
1000171c:	a129c83a 	sub	r20,r20,r4
10001720:	05002d0e 	bge	zero,r20,100017d8 <___vfprintf_internal_r+0x804>
10001724:	05800404 	movi	r22,16
10001728:	d8811f17 	ldw	r2,1148(sp)
1000172c:	05440074 	movhi	r21,4097
10001730:	ad7f6b84 	addi	r21,r21,-594
10001734:	b5001f0e 	bge	r22,r20,100017b4 <___vfprintf_internal_r+0x7e0>
10001738:	8809883a 	mov	r4,r17
1000173c:	dc012d15 	stw	r16,1204(sp)
10001740:	a023883a 	mov	r17,r20
10001744:	070001c4 	movi	fp,7
10001748:	dc012c17 	ldw	r16,1200(sp)
1000174c:	2029883a 	mov	r20,r4
10001750:	00000306 	br	10001760 <___vfprintf_internal_r+0x78c>
10001754:	8c7ffc04 	addi	r17,r17,-16
10001758:	42000204 	addi	r8,r8,8
1000175c:	b440110e 	bge	r22,r17,100017a4 <___vfprintf_internal_r+0x7d0>
10001760:	18c00404 	addi	r3,r3,16
10001764:	10800044 	addi	r2,r2,1
10001768:	45c00015 	stw	r23,0(r8)
1000176c:	45800115 	stw	r22,4(r8)
10001770:	d8c12015 	stw	r3,1152(sp)
10001774:	d8811f15 	stw	r2,1148(sp)
10001778:	e0bff60e 	bge	fp,r2,10001754 <__alt_data_end+0xf8001754>
1000177c:	8009883a 	mov	r4,r16
10001780:	980b883a 	mov	r5,r19
10001784:	d9811e04 	addi	r6,sp,1144
10001788:	00082dc0 	call	100082dc <__sprint_r>
1000178c:	103f2d1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10001790:	8c7ffc04 	addi	r17,r17,-16
10001794:	d8c12017 	ldw	r3,1152(sp)
10001798:	d8811f17 	ldw	r2,1148(sp)
1000179c:	da000404 	addi	r8,sp,16
100017a0:	b47fef16 	blt	r22,r17,10001760 <__alt_data_end+0xf8001760>
100017a4:	dc012d17 	ldw	r16,1204(sp)
100017a8:	a009883a 	mov	r4,r20
100017ac:	8829883a 	mov	r20,r17
100017b0:	2023883a 	mov	r17,r4
100017b4:	1d07883a 	add	r3,r3,r20
100017b8:	10800044 	addi	r2,r2,1
100017bc:	45400015 	stw	r21,0(r8)
100017c0:	45000115 	stw	r20,4(r8)
100017c4:	d8c12015 	stw	r3,1152(sp)
100017c8:	d8811f15 	stw	r2,1148(sp)
100017cc:	010001c4 	movi	r4,7
100017d0:	2082a616 	blt	r4,r2,1000226c <___vfprintf_internal_r+0x1298>
100017d4:	42000204 	addi	r8,r8,8
100017d8:	d9412a17 	ldw	r5,1192(sp)
100017dc:	2880400c 	andi	r2,r5,256
100017e0:	1001b51e 	bne	r2,zero,10001eb8 <___vfprintf_internal_r+0xee4>
100017e4:	d8812e17 	ldw	r2,1208(sp)
100017e8:	d9012e17 	ldw	r4,1208(sp)
100017ec:	44000015 	stw	r16,0(r8)
100017f0:	1887883a 	add	r3,r3,r2
100017f4:	d8811f17 	ldw	r2,1148(sp)
100017f8:	10800044 	addi	r2,r2,1
100017fc:	41000115 	stw	r4,4(r8)
10001800:	d8c12015 	stw	r3,1152(sp)
10001804:	d8811f15 	stw	r2,1148(sp)
10001808:	010001c4 	movi	r4,7
1000180c:	20818b16 	blt	r4,r2,10001e3c <___vfprintf_internal_r+0xe68>
10001810:	42000204 	addi	r8,r8,8
10001814:	d9412a17 	ldw	r5,1192(sp)
10001818:	2880010c 	andi	r2,r5,4
1000181c:	10003226 	beq	r2,zero,100018e8 <___vfprintf_internal_r+0x914>
10001820:	d8813017 	ldw	r2,1216(sp)
10001824:	d9012b17 	ldw	r4,1196(sp)
10001828:	1121c83a 	sub	r16,r2,r4
1000182c:	04002e0e 	bge	zero,r16,100018e8 <___vfprintf_internal_r+0x914>
10001830:	04800404 	movi	r18,16
10001834:	d8811f17 	ldw	r2,1148(sp)
10001838:	9405240e 	bge	r18,r16,10002ccc <___vfprintf_internal_r+0x1cf8>
1000183c:	01040074 	movhi	r4,4097
10001840:	213f6f84 	addi	r4,r4,-578
10001844:	d9013615 	stw	r4,1240(sp)
10001848:	050001c4 	movi	r20,7
1000184c:	dd412c17 	ldw	r21,1200(sp)
10001850:	00000306 	br	10001860 <___vfprintf_internal_r+0x88c>
10001854:	843ffc04 	addi	r16,r16,-16
10001858:	42000204 	addi	r8,r8,8
1000185c:	9400130e 	bge	r18,r16,100018ac <___vfprintf_internal_r+0x8d8>
10001860:	18c00404 	addi	r3,r3,16
10001864:	10800044 	addi	r2,r2,1
10001868:	01440074 	movhi	r5,4097
1000186c:	297f6f84 	addi	r5,r5,-578
10001870:	41400015 	stw	r5,0(r8)
10001874:	44800115 	stw	r18,4(r8)
10001878:	d8c12015 	stw	r3,1152(sp)
1000187c:	d8811f15 	stw	r2,1148(sp)
10001880:	a0bff40e 	bge	r20,r2,10001854 <__alt_data_end+0xf8001854>
10001884:	a809883a 	mov	r4,r21
10001888:	980b883a 	mov	r5,r19
1000188c:	d9811e04 	addi	r6,sp,1144
10001890:	00082dc0 	call	100082dc <__sprint_r>
10001894:	103eeb1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10001898:	843ffc04 	addi	r16,r16,-16
1000189c:	d8c12017 	ldw	r3,1152(sp)
100018a0:	d8811f17 	ldw	r2,1148(sp)
100018a4:	da000404 	addi	r8,sp,16
100018a8:	943fed16 	blt	r18,r16,10001860 <__alt_data_end+0xf8001860>
100018ac:	d9013617 	ldw	r4,1240(sp)
100018b0:	1c07883a 	add	r3,r3,r16
100018b4:	10800044 	addi	r2,r2,1
100018b8:	41000015 	stw	r4,0(r8)
100018bc:	44000115 	stw	r16,4(r8)
100018c0:	d8c12015 	stw	r3,1152(sp)
100018c4:	d8811f15 	stw	r2,1148(sp)
100018c8:	010001c4 	movi	r4,7
100018cc:	2080060e 	bge	r4,r2,100018e8 <___vfprintf_internal_r+0x914>
100018d0:	d9012c17 	ldw	r4,1200(sp)
100018d4:	980b883a 	mov	r5,r19
100018d8:	d9811e04 	addi	r6,sp,1144
100018dc:	00082dc0 	call	100082dc <__sprint_r>
100018e0:	103ed81e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
100018e4:	d8c12017 	ldw	r3,1152(sp)
100018e8:	d8812b17 	ldw	r2,1196(sp)
100018ec:	d9413017 	ldw	r5,1216(sp)
100018f0:	1140010e 	bge	r2,r5,100018f8 <___vfprintf_internal_r+0x924>
100018f4:	2805883a 	mov	r2,r5
100018f8:	d9013117 	ldw	r4,1220(sp)
100018fc:	2089883a 	add	r4,r4,r2
10001900:	d9013115 	stw	r4,1220(sp)
10001904:	1802381e 	bne	r3,zero,100021e8 <___vfprintf_internal_r+0x1214>
10001908:	88800007 	ldb	r2,0(r17)
1000190c:	d8011f15 	stw	zero,1148(sp)
10001910:	da000404 	addi	r8,sp,16
10001914:	103def1e 	bne	r2,zero,100010d4 <__alt_data_end+0xf80010d4>
10001918:	8821883a 	mov	r16,r17
1000191c:	003e0506 	br	10001134 <__alt_data_end+0xf8001134>
10001920:	1829883a 	mov	r20,r3
10001924:	d8c12a17 	ldw	r3,1192(sp)
10001928:	dd812785 	stb	r22,1182(sp)
1000192c:	e011883a 	mov	r8,fp
10001930:	1880020c 	andi	r2,r3,8
10001934:	1003c926 	beq	r2,zero,1000285c <___vfprintf_internal_r+0x1888>
10001938:	d9012f17 	ldw	r4,1212(sp)
1000193c:	d9412f17 	ldw	r5,1212(sp)
10001940:	d8812f17 	ldw	r2,1212(sp)
10001944:	21000017 	ldw	r4,0(r4)
10001948:	29400117 	ldw	r5,4(r5)
1000194c:	10800204 	addi	r2,r2,8
10001950:	d9013715 	stw	r4,1244(sp)
10001954:	d9413915 	stw	r5,1252(sp)
10001958:	d8812f15 	stw	r2,1212(sp)
1000195c:	d9013717 	ldw	r4,1244(sp)
10001960:	d9413917 	ldw	r5,1252(sp)
10001964:	da013f15 	stw	r8,1276(sp)
10001968:	04000044 	movi	r16,1
1000196c:	0007f340 	call	10007f34 <__fpclassifyd>
10001970:	da013f17 	ldw	r8,1276(sp)
10001974:	d9013717 	ldw	r4,1244(sp)
10001978:	d9413917 	ldw	r5,1252(sp)
1000197c:	1403571e 	bne	r2,r16,100026dc <___vfprintf_internal_r+0x1708>
10001980:	000d883a 	mov	r6,zero
10001984:	000f883a 	mov	r7,zero
10001988:	000c2b80 	call	1000c2b8 <__ledf2>
1000198c:	da013f17 	ldw	r8,1276(sp)
10001990:	1004f416 	blt	r2,zero,10002d64 <___vfprintf_internal_r+0x1d90>
10001994:	df012783 	ldbu	fp,1182(sp)
10001998:	008011c4 	movi	r2,71
1000199c:	14847a0e 	bge	r2,r18,10002b88 <___vfprintf_internal_r+0x1bb4>
100019a0:	04040074 	movhi	r16,4097
100019a4:	843f5c04 	addi	r16,r16,-656
100019a8:	d9012a17 	ldw	r4,1192(sp)
100019ac:	00bfdfc4 	movi	r2,-129
100019b0:	00c000c4 	movi	r3,3
100019b4:	2088703a 	and	r4,r4,r2
100019b8:	d8c12b15 	stw	r3,1196(sp)
100019bc:	d9012a15 	stw	r4,1192(sp)
100019c0:	d8c12e15 	stw	r3,1208(sp)
100019c4:	0029883a 	mov	r20,zero
100019c8:	d8013315 	stw	zero,1228(sp)
100019cc:	003eea06 	br	10001578 <__alt_data_end+0xf8001578>
100019d0:	953ff404 	addi	r20,r18,-48
100019d4:	d8013015 	stw	zero,1216(sp)
100019d8:	0009883a 	mov	r4,zero
100019dc:	1825883a 	mov	r18,r3
100019e0:	01400284 	movi	r5,10
100019e4:	000af1c0 	call	1000af1c <__mulsi3>
100019e8:	88c00007 	ldb	r3,0(r17)
100019ec:	1509883a 	add	r4,r2,r20
100019f0:	8c400044 	addi	r17,r17,1
100019f4:	1d3ff404 	addi	r20,r3,-48
100019f8:	8805883a 	mov	r2,r17
100019fc:	ad3ff82e 	bgeu	r21,r20,100019e0 <__alt_data_end+0xf80019e0>
10001a00:	d9013015 	stw	r4,1216(sp)
10001a04:	9009883a 	mov	r4,r18
10001a08:	1023883a 	mov	r17,r2
10001a0c:	1825883a 	mov	r18,r3
10001a10:	2007883a 	mov	r3,r4
10001a14:	003dd506 	br	1000116c <__alt_data_end+0xf800116c>
10001a18:	d8812a17 	ldw	r2,1192(sp)
10001a1c:	10800214 	ori	r2,r2,8
10001a20:	d8812a15 	stw	r2,1192(sp)
10001a24:	8c800007 	ldb	r18,0(r17)
10001a28:	003dcf06 	br	10001168 <__alt_data_end+0xf8001168>
10001a2c:	d9012a17 	ldw	r4,1192(sp)
10001a30:	e011883a 	mov	r8,fp
10001a34:	1829883a 	mov	r20,r3
10001a38:	21000414 	ori	r4,r4,16
10001a3c:	d9012a15 	stw	r4,1192(sp)
10001a40:	d9412a17 	ldw	r5,1192(sp)
10001a44:	2880080c 	andi	r2,r5,32
10001a48:	1000cf26 	beq	r2,zero,10001d88 <___vfprintf_internal_r+0xdb4>
10001a4c:	d8812f17 	ldw	r2,1212(sp)
10001a50:	0007883a 	mov	r3,zero
10001a54:	15400017 	ldw	r21,0(r2)
10001a58:	15800117 	ldw	r22,4(r2)
10001a5c:	10800204 	addi	r2,r2,8
10001a60:	d8812f15 	stw	r2,1212(sp)
10001a64:	ad84b03a 	or	r2,r21,r22
10001a68:	d8012785 	stb	zero,1182(sp)
10001a6c:	0039883a 	mov	fp,zero
10001a70:	003eab06 	br	10001520 <__alt_data_end+0xf8001520>
10001a74:	d9012a17 	ldw	r4,1192(sp)
10001a78:	e011883a 	mov	r8,fp
10001a7c:	1829883a 	mov	r20,r3
10001a80:	21000414 	ori	r4,r4,16
10001a84:	d9012a15 	stw	r4,1192(sp)
10001a88:	d9412a17 	ldw	r5,1192(sp)
10001a8c:	2880080c 	andi	r2,r5,32
10001a90:	1000cd26 	beq	r2,zero,10001dc8 <___vfprintf_internal_r+0xdf4>
10001a94:	d8812f17 	ldw	r2,1212(sp)
10001a98:	00c00044 	movi	r3,1
10001a9c:	15400017 	ldw	r21,0(r2)
10001aa0:	15800117 	ldw	r22,4(r2)
10001aa4:	10800204 	addi	r2,r2,8
10001aa8:	d8812f15 	stw	r2,1212(sp)
10001aac:	ad84b03a 	or	r2,r21,r22
10001ab0:	003fed06 	br	10001a68 <__alt_data_end+0xf8001a68>
10001ab4:	d9012a17 	ldw	r4,1192(sp)
10001ab8:	dd812785 	stb	r22,1182(sp)
10001abc:	e011883a 	mov	r8,fp
10001ac0:	2080080c 	andi	r2,r4,32
10001ac4:	10039226 	beq	r2,zero,10002910 <___vfprintf_internal_r+0x193c>
10001ac8:	d9412f17 	ldw	r5,1212(sp)
10001acc:	d9013117 	ldw	r4,1220(sp)
10001ad0:	28800017 	ldw	r2,0(r5)
10001ad4:	2007d7fa 	srai	r3,r4,31
10001ad8:	29400104 	addi	r5,r5,4
10001adc:	d9412f15 	stw	r5,1212(sp)
10001ae0:	11000015 	stw	r4,0(r2)
10001ae4:	10c00115 	stw	r3,4(r2)
10001ae8:	003d7806 	br	100010cc <__alt_data_end+0xf80010cc>
10001aec:	d8c12f17 	ldw	r3,1212(sp)
10001af0:	d9012f17 	ldw	r4,1212(sp)
10001af4:	e011883a 	mov	r8,fp
10001af8:	18800017 	ldw	r2,0(r3)
10001afc:	21000104 	addi	r4,r4,4
10001b00:	00c00044 	movi	r3,1
10001b04:	d8c12b15 	stw	r3,1196(sp)
10001b08:	d8012785 	stb	zero,1182(sp)
10001b0c:	d8810405 	stb	r2,1040(sp)
10001b10:	d9012f15 	stw	r4,1212(sp)
10001b14:	d8c12e15 	stw	r3,1208(sp)
10001b18:	0029883a 	mov	r20,zero
10001b1c:	d8013315 	stw	zero,1228(sp)
10001b20:	dc010404 	addi	r16,sp,1040
10001b24:	0005883a 	mov	r2,zero
10001b28:	003e9a06 	br	10001594 <__alt_data_end+0xf8001594>
10001b2c:	d9412a17 	ldw	r5,1192(sp)
10001b30:	01040074 	movhi	r4,4097
10001b34:	213f6404 	addi	r4,r4,-624
10001b38:	dd812785 	stb	r22,1182(sp)
10001b3c:	d9013b15 	stw	r4,1260(sp)
10001b40:	2880080c 	andi	r2,r5,32
10001b44:	e011883a 	mov	r8,fp
10001b48:	1829883a 	mov	r20,r3
10001b4c:	10002f26 	beq	r2,zero,10001c0c <___vfprintf_internal_r+0xc38>
10001b50:	d8812f17 	ldw	r2,1212(sp)
10001b54:	15400017 	ldw	r21,0(r2)
10001b58:	15800117 	ldw	r22,4(r2)
10001b5c:	10800204 	addi	r2,r2,8
10001b60:	d8812f15 	stw	r2,1212(sp)
10001b64:	d9012a17 	ldw	r4,1192(sp)
10001b68:	2080004c 	andi	r2,r4,1
10001b6c:	10025f26 	beq	r2,zero,100024ec <___vfprintf_internal_r+0x1518>
10001b70:	ad84b03a 	or	r2,r21,r22
10001b74:	10034e26 	beq	r2,zero,100028b0 <___vfprintf_internal_r+0x18dc>
10001b78:	00c00c04 	movi	r3,48
10001b7c:	21000094 	ori	r4,r4,2
10001b80:	d8c12705 	stb	r3,1180(sp)
10001b84:	dc812745 	stb	r18,1181(sp)
10001b88:	d9012a15 	stw	r4,1192(sp)
10001b8c:	00c00084 	movi	r3,2
10001b90:	003fb506 	br	10001a68 <__alt_data_end+0xf8001a68>
10001b94:	b0803fcc 	andi	r2,r22,255
10001b98:	1080201c 	xori	r2,r2,128
10001b9c:	10bfe004 	addi	r2,r2,-128
10001ba0:	1003501e 	bne	r2,zero,100028e4 <___vfprintf_internal_r+0x1910>
10001ba4:	05800804 	movi	r22,32
10001ba8:	8c800007 	ldb	r18,0(r17)
10001bac:	003d6e06 	br	10001168 <__alt_data_end+0xf8001168>
10001bb0:	d9012a17 	ldw	r4,1192(sp)
10001bb4:	21000054 	ori	r4,r4,1
10001bb8:	d9012a15 	stw	r4,1192(sp)
10001bbc:	8c800007 	ldb	r18,0(r17)
10001bc0:	003d6906 	br	10001168 <__alt_data_end+0xf8001168>
10001bc4:	d9412f17 	ldw	r5,1212(sp)
10001bc8:	d9012f17 	ldw	r4,1212(sp)
10001bcc:	29400017 	ldw	r5,0(r5)
10001bd0:	20800104 	addi	r2,r4,4
10001bd4:	d9413015 	stw	r5,1216(sp)
10001bd8:	283dc616 	blt	r5,zero,100012f4 <__alt_data_end+0xf80012f4>
10001bdc:	d8812f15 	stw	r2,1212(sp)
10001be0:	8c800007 	ldb	r18,0(r17)
10001be4:	003d6006 	br	10001168 <__alt_data_end+0xf8001168>
10001be8:	d9412a17 	ldw	r5,1192(sp)
10001bec:	00840074 	movhi	r2,4097
10001bf0:	10bf5f04 	addi	r2,r2,-644
10001bf4:	d8813b15 	stw	r2,1260(sp)
10001bf8:	dd812785 	stb	r22,1182(sp)
10001bfc:	2880080c 	andi	r2,r5,32
10001c00:	e011883a 	mov	r8,fp
10001c04:	1829883a 	mov	r20,r3
10001c08:	103fd11e 	bne	r2,zero,10001b50 <__alt_data_end+0xf8001b50>
10001c0c:	d8c12a17 	ldw	r3,1192(sp)
10001c10:	1880040c 	andi	r2,r3,16
10001c14:	10033526 	beq	r2,zero,100028ec <___vfprintf_internal_r+0x1918>
10001c18:	d9012f17 	ldw	r4,1212(sp)
10001c1c:	002d883a 	mov	r22,zero
10001c20:	25400017 	ldw	r21,0(r4)
10001c24:	21000104 	addi	r4,r4,4
10001c28:	d9012f15 	stw	r4,1212(sp)
10001c2c:	003fcd06 	br	10001b64 <__alt_data_end+0xf8001b64>
10001c30:	d9012a17 	ldw	r4,1192(sp)
10001c34:	21001014 	ori	r4,r4,64
10001c38:	d9012a15 	stw	r4,1192(sp)
10001c3c:	8c800007 	ldb	r18,0(r17)
10001c40:	003d4906 	br	10001168 <__alt_data_end+0xf8001168>
10001c44:	8c800007 	ldb	r18,0(r17)
10001c48:	01401b04 	movi	r5,108
10001c4c:	8805883a 	mov	r2,r17
10001c50:	9143db26 	beq	r18,r5,10002bc0 <___vfprintf_internal_r+0x1bec>
10001c54:	d9412a17 	ldw	r5,1192(sp)
10001c58:	29400414 	ori	r5,r5,16
10001c5c:	d9412a15 	stw	r5,1192(sp)
10001c60:	003d4106 	br	10001168 <__alt_data_end+0xf8001168>
10001c64:	1829883a 	mov	r20,r3
10001c68:	d8c12a17 	ldw	r3,1192(sp)
10001c6c:	dd812785 	stb	r22,1182(sp)
10001c70:	e011883a 	mov	r8,fp
10001c74:	1880080c 	andi	r2,r3,32
10001c78:	103e1f1e 	bne	r2,zero,100014f8 <__alt_data_end+0xf80014f8>
10001c7c:	d9412a17 	ldw	r5,1192(sp)
10001c80:	2880040c 	andi	r2,r5,16
10001c84:	10032f26 	beq	r2,zero,10002944 <___vfprintf_internal_r+0x1970>
10001c88:	d8812f17 	ldw	r2,1212(sp)
10001c8c:	15400017 	ldw	r21,0(r2)
10001c90:	10800104 	addi	r2,r2,4
10001c94:	d8812f15 	stw	r2,1212(sp)
10001c98:	a82dd7fa 	srai	r22,r21,31
10001c9c:	b005883a 	mov	r2,r22
10001ca0:	003e1b06 	br	10001510 <__alt_data_end+0xf8001510>
10001ca4:	d8812a17 	ldw	r2,1192(sp)
10001ca8:	10800814 	ori	r2,r2,32
10001cac:	d8812a15 	stw	r2,1192(sp)
10001cb0:	8c800007 	ldb	r18,0(r17)
10001cb4:	003d2c06 	br	10001168 <__alt_data_end+0xf8001168>
10001cb8:	1829883a 	mov	r20,r3
10001cbc:	d8c12f17 	ldw	r3,1212(sp)
10001cc0:	d8012785 	stb	zero,1182(sp)
10001cc4:	e011883a 	mov	r8,fp
10001cc8:	1c000017 	ldw	r16,0(r3)
10001ccc:	1d400104 	addi	r21,r3,4
10001cd0:	80040226 	beq	r16,zero,10002cdc <___vfprintf_internal_r+0x1d08>
10001cd4:	8009883a 	mov	r4,r16
10001cd8:	a003c716 	blt	r20,zero,10002bf8 <___vfprintf_internal_r+0x1c24>
10001cdc:	000b883a 	mov	r5,zero
10001ce0:	a00d883a 	mov	r6,r20
10001ce4:	df013f15 	stw	fp,1276(sp)
10001ce8:	00065640 	call	10006564 <memchr>
10001cec:	da013f17 	ldw	r8,1276(sp)
10001cf0:	10044326 	beq	r2,zero,10002e00 <___vfprintf_internal_r+0x1e2c>
10001cf4:	1405c83a 	sub	r2,r2,r16
10001cf8:	d8812e15 	stw	r2,1208(sp)
10001cfc:	a0837c16 	blt	r20,r2,10002af0 <___vfprintf_internal_r+0x1b1c>
10001d00:	d8812e17 	ldw	r2,1208(sp)
10001d04:	1003c116 	blt	r2,zero,10002c0c <___vfprintf_internal_r+0x1c38>
10001d08:	df012783 	ldbu	fp,1182(sp)
10001d0c:	d8812b15 	stw	r2,1196(sp)
10001d10:	dd412f15 	stw	r21,1212(sp)
10001d14:	0029883a 	mov	r20,zero
10001d18:	d8013315 	stw	zero,1228(sp)
10001d1c:	003e1606 	br	10001578 <__alt_data_end+0xf8001578>
10001d20:	d9012f17 	ldw	r4,1212(sp)
10001d24:	d9412a17 	ldw	r5,1192(sp)
10001d28:	00800c04 	movi	r2,48
10001d2c:	25400017 	ldw	r21,0(r4)
10001d30:	d8812705 	stb	r2,1180(sp)
10001d34:	00801e04 	movi	r2,120
10001d38:	29400094 	ori	r5,r5,2
10001d3c:	d8812745 	stb	r2,1181(sp)
10001d40:	21000104 	addi	r4,r4,4
10001d44:	00840074 	movhi	r2,4097
10001d48:	10bf6404 	addi	r2,r2,-624
10001d4c:	1829883a 	mov	r20,r3
10001d50:	d8813b15 	stw	r2,1260(sp)
10001d54:	e011883a 	mov	r8,fp
10001d58:	002d883a 	mov	r22,zero
10001d5c:	d9412a15 	stw	r5,1192(sp)
10001d60:	d9012f15 	stw	r4,1212(sp)
10001d64:	00c00084 	movi	r3,2
10001d68:	04801e04 	movi	r18,120
10001d6c:	a805883a 	mov	r2,r21
10001d70:	003f3d06 	br	10001a68 <__alt_data_end+0xf8001a68>
10001d74:	d9412a17 	ldw	r5,1192(sp)
10001d78:	e011883a 	mov	r8,fp
10001d7c:	1829883a 	mov	r20,r3
10001d80:	2880080c 	andi	r2,r5,32
10001d84:	103f311e 	bne	r2,zero,10001a4c <__alt_data_end+0xf8001a4c>
10001d88:	d8c12a17 	ldw	r3,1192(sp)
10001d8c:	1880040c 	andi	r2,r3,16
10001d90:	1002c926 	beq	r2,zero,100028b8 <___vfprintf_internal_r+0x18e4>
10001d94:	d9012f17 	ldw	r4,1212(sp)
10001d98:	002d883a 	mov	r22,zero
10001d9c:	0007883a 	mov	r3,zero
10001da0:	25400017 	ldw	r21,0(r4)
10001da4:	21000104 	addi	r4,r4,4
10001da8:	d9012f15 	stw	r4,1212(sp)
10001dac:	a805883a 	mov	r2,r21
10001db0:	003f2d06 	br	10001a68 <__alt_data_end+0xf8001a68>
10001db4:	d9412a17 	ldw	r5,1192(sp)
10001db8:	e011883a 	mov	r8,fp
10001dbc:	1829883a 	mov	r20,r3
10001dc0:	2880080c 	andi	r2,r5,32
10001dc4:	103f331e 	bne	r2,zero,10001a94 <__alt_data_end+0xf8001a94>
10001dc8:	d8c12a17 	ldw	r3,1192(sp)
10001dcc:	1880040c 	andi	r2,r3,16
10001dd0:	1002ac26 	beq	r2,zero,10002884 <___vfprintf_internal_r+0x18b0>
10001dd4:	d9012f17 	ldw	r4,1212(sp)
10001dd8:	002d883a 	mov	r22,zero
10001ddc:	00c00044 	movi	r3,1
10001de0:	25400017 	ldw	r21,0(r4)
10001de4:	21000104 	addi	r4,r4,4
10001de8:	d9012f15 	stw	r4,1212(sp)
10001dec:	a805883a 	mov	r2,r21
10001df0:	003f1d06 	br	10001a68 <__alt_data_end+0xf8001a68>
10001df4:	dd812785 	stb	r22,1182(sp)
10001df8:	e011883a 	mov	r8,fp
10001dfc:	903d8b26 	beq	r18,zero,1000142c <__alt_data_end+0xf800142c>
10001e00:	00c00044 	movi	r3,1
10001e04:	d8c12b15 	stw	r3,1196(sp)
10001e08:	dc810405 	stb	r18,1040(sp)
10001e0c:	d8012785 	stb	zero,1182(sp)
10001e10:	003f4006 	br	10001b14 <__alt_data_end+0xf8001b14>
10001e14:	d8c12017 	ldw	r3,1152(sp)
10001e18:	003e2106 	br	100016a0 <__alt_data_end+0xf80016a0>
10001e1c:	45400015 	stw	r21,0(r8)
10001e20:	44000115 	stw	r16,4(r8)
10001e24:	1c07883a 	add	r3,r3,r16
10001e28:	10800044 	addi	r2,r2,1
10001e2c:	d8c12015 	stw	r3,1152(sp)
10001e30:	d8811f15 	stw	r2,1148(sp)
10001e34:	010001c4 	movi	r4,7
10001e38:	20be750e 	bge	r4,r2,10001810 <__alt_data_end+0xf8001810>
10001e3c:	d9012c17 	ldw	r4,1200(sp)
10001e40:	980b883a 	mov	r5,r19
10001e44:	d9811e04 	addi	r6,sp,1144
10001e48:	00082dc0 	call	100082dc <__sprint_r>
10001e4c:	103d7d1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10001e50:	d8c12017 	ldw	r3,1152(sp)
10001e54:	da000404 	addi	r8,sp,16
10001e58:	003e6e06 	br	10001814 <__alt_data_end+0xf8001814>
10001e5c:	18803fcc 	andi	r2,r3,255
10001e60:	00c00044 	movi	r3,1
10001e64:	10c11926 	beq	r2,r3,100022cc <___vfprintf_internal_r+0x12f8>
10001e68:	00c00084 	movi	r3,2
10001e6c:	10c0e41e 	bne	r2,r3,10002200 <___vfprintf_internal_r+0x122c>
10001e70:	d9413b17 	ldw	r5,1260(sp)
10001e74:	d8c10dc4 	addi	r3,sp,1079
10001e78:	a88003cc 	andi	r2,r21,15
10001e7c:	b008973a 	slli	r4,r22,28
10001e80:	2885883a 	add	r2,r5,r2
10001e84:	a82ad13a 	srli	r21,r21,4
10001e88:	10800003 	ldbu	r2,0(r2)
10001e8c:	b02cd13a 	srli	r22,r22,4
10001e90:	256ab03a 	or	r21,r4,r21
10001e94:	18800005 	stb	r2,0(r3)
10001e98:	ad84b03a 	or	r2,r21,r22
10001e9c:	1821883a 	mov	r16,r3
10001ea0:	18ffffc4 	addi	r3,r3,-1
10001ea4:	103ff41e 	bne	r2,zero,10001e78 <__alt_data_end+0xf8001e78>
10001ea8:	d8c12917 	ldw	r3,1188(sp)
10001eac:	1c07c83a 	sub	r3,r3,r16
10001eb0:	d8c12e15 	stw	r3,1208(sp)
10001eb4:	003dab06 	br	10001564 <__alt_data_end+0xf8001564>
10001eb8:	00801944 	movi	r2,101
10001ebc:	14807e0e 	bge	r2,r18,100020b8 <___vfprintf_internal_r+0x10e4>
10001ec0:	d9013717 	ldw	r4,1244(sp)
10001ec4:	d9413917 	ldw	r5,1252(sp)
10001ec8:	000d883a 	mov	r6,zero
10001ecc:	000f883a 	mov	r7,zero
10001ed0:	d8c13e15 	stw	r3,1272(sp)
10001ed4:	da013f15 	stw	r8,1276(sp)
10001ed8:	000c15c0 	call	1000c15c <__eqdf2>
10001edc:	d8c13e17 	ldw	r3,1272(sp)
10001ee0:	da013f17 	ldw	r8,1276(sp)
10001ee4:	1001211e 	bne	r2,zero,1000236c <___vfprintf_internal_r+0x1398>
10001ee8:	d8811f17 	ldw	r2,1148(sp)
10001eec:	01000044 	movi	r4,1
10001ef0:	18c00044 	addi	r3,r3,1
10001ef4:	10800044 	addi	r2,r2,1
10001ef8:	01440074 	movhi	r5,4097
10001efc:	297f6b04 	addi	r5,r5,-596
10001f00:	41000115 	stw	r4,4(r8)
10001f04:	41400015 	stw	r5,0(r8)
10001f08:	d8c12015 	stw	r3,1152(sp)
10001f0c:	d8811f15 	stw	r2,1148(sp)
10001f10:	010001c4 	movi	r4,7
10001f14:	2082a316 	blt	r4,r2,100029a4 <___vfprintf_internal_r+0x19d0>
10001f18:	42000204 	addi	r8,r8,8
10001f1c:	d8812617 	ldw	r2,1176(sp)
10001f20:	d9013517 	ldw	r4,1236(sp)
10001f24:	11000316 	blt	r2,r4,10001f34 <___vfprintf_internal_r+0xf60>
10001f28:	d9412a17 	ldw	r5,1192(sp)
10001f2c:	2880004c 	andi	r2,r5,1
10001f30:	103e3826 	beq	r2,zero,10001814 <__alt_data_end+0xf8001814>
10001f34:	d8813817 	ldw	r2,1248(sp)
10001f38:	d9013417 	ldw	r4,1232(sp)
10001f3c:	d9413817 	ldw	r5,1248(sp)
10001f40:	1887883a 	add	r3,r3,r2
10001f44:	d8811f17 	ldw	r2,1148(sp)
10001f48:	41000015 	stw	r4,0(r8)
10001f4c:	41400115 	stw	r5,4(r8)
10001f50:	10800044 	addi	r2,r2,1
10001f54:	d8c12015 	stw	r3,1152(sp)
10001f58:	d8811f15 	stw	r2,1148(sp)
10001f5c:	010001c4 	movi	r4,7
10001f60:	20831d16 	blt	r4,r2,10002bd8 <___vfprintf_internal_r+0x1c04>
10001f64:	42000204 	addi	r8,r8,8
10001f68:	d8813517 	ldw	r2,1236(sp)
10001f6c:	143fffc4 	addi	r16,r2,-1
10001f70:	043e280e 	bge	zero,r16,10001814 <__alt_data_end+0xf8001814>
10001f74:	04800404 	movi	r18,16
10001f78:	d8811f17 	ldw	r2,1148(sp)
10001f7c:	05440074 	movhi	r21,4097
10001f80:	ad7f6b84 	addi	r21,r21,-594
10001f84:	943fa50e 	bge	r18,r16,10001e1c <__alt_data_end+0xf8001e1c>
10001f88:	050001c4 	movi	r20,7
10001f8c:	dd812c17 	ldw	r22,1200(sp)
10001f90:	00000306 	br	10001fa0 <___vfprintf_internal_r+0xfcc>
10001f94:	42000204 	addi	r8,r8,8
10001f98:	843ffc04 	addi	r16,r16,-16
10001f9c:	943f9f0e 	bge	r18,r16,10001e1c <__alt_data_end+0xf8001e1c>
10001fa0:	18c00404 	addi	r3,r3,16
10001fa4:	10800044 	addi	r2,r2,1
10001fa8:	45c00015 	stw	r23,0(r8)
10001fac:	44800115 	stw	r18,4(r8)
10001fb0:	d8c12015 	stw	r3,1152(sp)
10001fb4:	d8811f15 	stw	r2,1148(sp)
10001fb8:	a0bff60e 	bge	r20,r2,10001f94 <__alt_data_end+0xf8001f94>
10001fbc:	b009883a 	mov	r4,r22
10001fc0:	980b883a 	mov	r5,r19
10001fc4:	d9811e04 	addi	r6,sp,1144
10001fc8:	00082dc0 	call	100082dc <__sprint_r>
10001fcc:	103d1d1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10001fd0:	d8c12017 	ldw	r3,1152(sp)
10001fd4:	d8811f17 	ldw	r2,1148(sp)
10001fd8:	da000404 	addi	r8,sp,16
10001fdc:	003fee06 	br	10001f98 <__alt_data_end+0xf8001f98>
10001fe0:	d9413017 	ldw	r5,1216(sp)
10001fe4:	d8812b17 	ldw	r2,1196(sp)
10001fe8:	28adc83a 	sub	r22,r5,r2
10001fec:	05bdca0e 	bge	zero,r22,10001718 <__alt_data_end+0xf8001718>
10001ff0:	07000404 	movi	fp,16
10001ff4:	d8811f17 	ldw	r2,1148(sp)
10001ff8:	05440074 	movhi	r21,4097
10001ffc:	ad7f6b84 	addi	r21,r21,-594
10002000:	e580230e 	bge	fp,r22,10002090 <___vfprintf_internal_r+0x10bc>
10002004:	a809883a 	mov	r4,r21
10002008:	dc012d15 	stw	r16,1204(sp)
1000200c:	882b883a 	mov	r21,r17
10002010:	01c001c4 	movi	r7,7
10002014:	b023883a 	mov	r17,r22
10002018:	dc012c17 	ldw	r16,1200(sp)
1000201c:	202d883a 	mov	r22,r4
10002020:	00000306 	br	10002030 <___vfprintf_internal_r+0x105c>
10002024:	8c7ffc04 	addi	r17,r17,-16
10002028:	42000204 	addi	r8,r8,8
1000202c:	e440130e 	bge	fp,r17,1000207c <___vfprintf_internal_r+0x10a8>
10002030:	18c00404 	addi	r3,r3,16
10002034:	10800044 	addi	r2,r2,1
10002038:	45c00015 	stw	r23,0(r8)
1000203c:	47000115 	stw	fp,4(r8)
10002040:	d8c12015 	stw	r3,1152(sp)
10002044:	d8811f15 	stw	r2,1148(sp)
10002048:	38bff60e 	bge	r7,r2,10002024 <__alt_data_end+0xf8002024>
1000204c:	8009883a 	mov	r4,r16
10002050:	980b883a 	mov	r5,r19
10002054:	d9811e04 	addi	r6,sp,1144
10002058:	d9c13e15 	stw	r7,1272(sp)
1000205c:	00082dc0 	call	100082dc <__sprint_r>
10002060:	d9c13e17 	ldw	r7,1272(sp)
10002064:	103cf71e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002068:	8c7ffc04 	addi	r17,r17,-16
1000206c:	d8c12017 	ldw	r3,1152(sp)
10002070:	d8811f17 	ldw	r2,1148(sp)
10002074:	da000404 	addi	r8,sp,16
10002078:	e47fed16 	blt	fp,r17,10002030 <__alt_data_end+0xf8002030>
1000207c:	dc012d17 	ldw	r16,1204(sp)
10002080:	b009883a 	mov	r4,r22
10002084:	882d883a 	mov	r22,r17
10002088:	a823883a 	mov	r17,r21
1000208c:	202b883a 	mov	r21,r4
10002090:	1d87883a 	add	r3,r3,r22
10002094:	10800044 	addi	r2,r2,1
10002098:	45400015 	stw	r21,0(r8)
1000209c:	45800115 	stw	r22,4(r8)
100020a0:	d8c12015 	stw	r3,1152(sp)
100020a4:	d8811f15 	stw	r2,1148(sp)
100020a8:	010001c4 	movi	r4,7
100020ac:	20817a16 	blt	r4,r2,10002698 <___vfprintf_internal_r+0x16c4>
100020b0:	42000204 	addi	r8,r8,8
100020b4:	003d9806 	br	10001718 <__alt_data_end+0xf8001718>
100020b8:	d9013517 	ldw	r4,1236(sp)
100020bc:	00800044 	movi	r2,1
100020c0:	1100340e 	bge	r2,r4,10002194 <___vfprintf_internal_r+0x11c0>
100020c4:	dc811f17 	ldw	r18,1148(sp)
100020c8:	00800044 	movi	r2,1
100020cc:	18c00044 	addi	r3,r3,1
100020d0:	94800044 	addi	r18,r18,1
100020d4:	40800115 	stw	r2,4(r8)
100020d8:	44000015 	stw	r16,0(r8)
100020dc:	d8c12015 	stw	r3,1152(sp)
100020e0:	dc811f15 	stw	r18,1148(sp)
100020e4:	008001c4 	movi	r2,7
100020e8:	14814e16 	blt	r2,r18,10002624 <___vfprintf_internal_r+0x1650>
100020ec:	42000204 	addi	r8,r8,8
100020f0:	d8813817 	ldw	r2,1248(sp)
100020f4:	94800044 	addi	r18,r18,1
100020f8:	dc811f15 	stw	r18,1148(sp)
100020fc:	18ad883a 	add	r22,r3,r2
10002100:	d8c13417 	ldw	r3,1232(sp)
10002104:	40800115 	stw	r2,4(r8)
10002108:	dd812015 	stw	r22,1152(sp)
1000210c:	40c00015 	stw	r3,0(r8)
10002110:	008001c4 	movi	r2,7
10002114:	14814c16 	blt	r2,r18,10002648 <___vfprintf_internal_r+0x1674>
10002118:	45000204 	addi	r20,r8,8
1000211c:	d9013717 	ldw	r4,1244(sp)
10002120:	d9413917 	ldw	r5,1252(sp)
10002124:	000d883a 	mov	r6,zero
10002128:	000f883a 	mov	r7,zero
1000212c:	000c15c0 	call	1000c15c <__eqdf2>
10002130:	1000cd26 	beq	r2,zero,10002468 <___vfprintf_internal_r+0x1494>
10002134:	d9013517 	ldw	r4,1236(sp)
10002138:	84000044 	addi	r16,r16,1
1000213c:	94800044 	addi	r18,r18,1
10002140:	20bfffc4 	addi	r2,r4,-1
10002144:	b0ad883a 	add	r22,r22,r2
10002148:	a0800115 	stw	r2,4(r20)
1000214c:	a4000015 	stw	r16,0(r20)
10002150:	dd812015 	stw	r22,1152(sp)
10002154:	dc811f15 	stw	r18,1148(sp)
10002158:	008001c4 	movi	r2,7
1000215c:	14801916 	blt	r2,r18,100021c4 <___vfprintf_internal_r+0x11f0>
10002160:	a5000204 	addi	r20,r20,8
10002164:	d9013a17 	ldw	r4,1256(sp)
10002168:	d88122c4 	addi	r2,sp,1163
1000216c:	94800044 	addi	r18,r18,1
10002170:	2587883a 	add	r3,r4,r22
10002174:	a0800015 	stw	r2,0(r20)
10002178:	a1000115 	stw	r4,4(r20)
1000217c:	d8c12015 	stw	r3,1152(sp)
10002180:	dc811f15 	stw	r18,1148(sp)
10002184:	008001c4 	movi	r2,7
10002188:	14bf2c16 	blt	r2,r18,10001e3c <__alt_data_end+0xf8001e3c>
1000218c:	a2000204 	addi	r8,r20,8
10002190:	003da006 	br	10001814 <__alt_data_end+0xf8001814>
10002194:	d9412a17 	ldw	r5,1192(sp)
10002198:	2888703a 	and	r4,r5,r2
1000219c:	203fc91e 	bne	r4,zero,100020c4 <__alt_data_end+0xf80020c4>
100021a0:	dc811f17 	ldw	r18,1148(sp)
100021a4:	1d800044 	addi	r22,r3,1
100021a8:	40800115 	stw	r2,4(r8)
100021ac:	94800044 	addi	r18,r18,1
100021b0:	44000015 	stw	r16,0(r8)
100021b4:	dd812015 	stw	r22,1152(sp)
100021b8:	dc811f15 	stw	r18,1148(sp)
100021bc:	008001c4 	movi	r2,7
100021c0:	1482740e 	bge	r2,r18,10002b94 <___vfprintf_internal_r+0x1bc0>
100021c4:	d9012c17 	ldw	r4,1200(sp)
100021c8:	980b883a 	mov	r5,r19
100021cc:	d9811e04 	addi	r6,sp,1144
100021d0:	00082dc0 	call	100082dc <__sprint_r>
100021d4:	103c9b1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
100021d8:	dd812017 	ldw	r22,1152(sp)
100021dc:	dc811f17 	ldw	r18,1148(sp)
100021e0:	dd000404 	addi	r20,sp,16
100021e4:	003fdf06 	br	10002164 <__alt_data_end+0xf8002164>
100021e8:	d9012c17 	ldw	r4,1200(sp)
100021ec:	980b883a 	mov	r5,r19
100021f0:	d9811e04 	addi	r6,sp,1144
100021f4:	00082dc0 	call	100082dc <__sprint_r>
100021f8:	103dc326 	beq	r2,zero,10001908 <__alt_data_end+0xf8001908>
100021fc:	003c9106 	br	10001444 <__alt_data_end+0xf8001444>
10002200:	d8c10dc4 	addi	r3,sp,1079
10002204:	a808d0fa 	srli	r4,r21,3
10002208:	b00a977a 	slli	r5,r22,29
1000220c:	b02cd0fa 	srli	r22,r22,3
10002210:	ad4001cc 	andi	r21,r21,7
10002214:	a8800c04 	addi	r2,r21,48
10002218:	292ab03a 	or	r21,r5,r4
1000221c:	18800005 	stb	r2,0(r3)
10002220:	ad88b03a 	or	r4,r21,r22
10002224:	1821883a 	mov	r16,r3
10002228:	18ffffc4 	addi	r3,r3,-1
1000222c:	203ff51e 	bne	r4,zero,10002204 <__alt_data_end+0xf8002204>
10002230:	d9412a17 	ldw	r5,1192(sp)
10002234:	2900004c 	andi	r4,r5,1
10002238:	800b883a 	mov	r5,r16
1000223c:	203f1a26 	beq	r4,zero,10001ea8 <__alt_data_end+0xf8001ea8>
10002240:	10803fcc 	andi	r2,r2,255
10002244:	1080201c 	xori	r2,r2,128
10002248:	10bfe004 	addi	r2,r2,-128
1000224c:	01000c04 	movi	r4,48
10002250:	113f1526 	beq	r2,r4,10001ea8 <__alt_data_end+0xf8001ea8>
10002254:	1821883a 	mov	r16,r3
10002258:	d8c12917 	ldw	r3,1188(sp)
1000225c:	293fffc5 	stb	r4,-1(r5)
10002260:	1c07c83a 	sub	r3,r3,r16
10002264:	d8c12e15 	stw	r3,1208(sp)
10002268:	003cbe06 	br	10001564 <__alt_data_end+0xf8001564>
1000226c:	d9012c17 	ldw	r4,1200(sp)
10002270:	980b883a 	mov	r5,r19
10002274:	d9811e04 	addi	r6,sp,1144
10002278:	00082dc0 	call	100082dc <__sprint_r>
1000227c:	103c711e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002280:	d8c12017 	ldw	r3,1152(sp)
10002284:	da000404 	addi	r8,sp,16
10002288:	003d5306 	br	100017d8 <__alt_data_end+0xf80017d8>
1000228c:	d9012c17 	ldw	r4,1200(sp)
10002290:	980b883a 	mov	r5,r19
10002294:	d9811e04 	addi	r6,sp,1144
10002298:	00082dc0 	call	100082dc <__sprint_r>
1000229c:	103c691e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
100022a0:	d8c12017 	ldw	r3,1152(sp)
100022a4:	da000404 	addi	r8,sp,16
100022a8:	003d0a06 	br	100016d4 <__alt_data_end+0xf80016d4>
100022ac:	d9012c17 	ldw	r4,1200(sp)
100022b0:	980b883a 	mov	r5,r19
100022b4:	d9811e04 	addi	r6,sp,1144
100022b8:	00082dc0 	call	100082dc <__sprint_r>
100022bc:	103c611e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
100022c0:	d8c12017 	ldw	r3,1152(sp)
100022c4:	da000404 	addi	r8,sp,16
100022c8:	003d1006 	br	1000170c <__alt_data_end+0xf800170c>
100022cc:	b000021e 	bne	r22,zero,100022d8 <___vfprintf_internal_r+0x1304>
100022d0:	00800244 	movi	r2,9
100022d4:	15401c2e 	bgeu	r2,r21,10002348 <___vfprintf_internal_r+0x1374>
100022d8:	dc412b15 	stw	r17,1196(sp)
100022dc:	d8810dc4 	addi	r2,sp,1079
100022e0:	b023883a 	mov	r17,r22
100022e4:	402d883a 	mov	r22,r8
100022e8:	a809883a 	mov	r4,r21
100022ec:	880b883a 	mov	r5,r17
100022f0:	01800284 	movi	r6,10
100022f4:	000f883a 	mov	r7,zero
100022f8:	1021883a 	mov	r16,r2
100022fc:	000a7d40 	call	1000a7d4 <__umoddi3>
10002300:	10800c04 	addi	r2,r2,48
10002304:	a809883a 	mov	r4,r21
10002308:	880b883a 	mov	r5,r17
1000230c:	80800005 	stb	r2,0(r16)
10002310:	01800284 	movi	r6,10
10002314:	000f883a 	mov	r7,zero
10002318:	000a1800 	call	1000a180 <__udivdi3>
1000231c:	1823883a 	mov	r17,r3
10002320:	10c6b03a 	or	r3,r2,r3
10002324:	102b883a 	mov	r21,r2
10002328:	80bfffc4 	addi	r2,r16,-1
1000232c:	183fee1e 	bne	r3,zero,100022e8 <__alt_data_end+0xf80022e8>
10002330:	d8c12917 	ldw	r3,1188(sp)
10002334:	b011883a 	mov	r8,r22
10002338:	dc412b17 	ldw	r17,1196(sp)
1000233c:	1c07c83a 	sub	r3,r3,r16
10002340:	d8c12e15 	stw	r3,1208(sp)
10002344:	003c8706 	br	10001564 <__alt_data_end+0xf8001564>
10002348:	d9013d17 	ldw	r4,1268(sp)
1000234c:	ad400c04 	addi	r21,r21,48
10002350:	dd410dc5 	stb	r21,1079(sp)
10002354:	d9012e15 	stw	r4,1208(sp)
10002358:	dc010dc4 	addi	r16,sp,1079
1000235c:	003c8106 	br	10001564 <__alt_data_end+0xf8001564>
10002360:	d8012e15 	stw	zero,1208(sp)
10002364:	dc010e04 	addi	r16,sp,1080
10002368:	003c7e06 	br	10001564 <__alt_data_end+0xf8001564>
1000236c:	d8812617 	ldw	r2,1176(sp)
10002370:	0081940e 	bge	zero,r2,100029c4 <___vfprintf_internal_r+0x19f0>
10002374:	d9413517 	ldw	r5,1236(sp)
10002378:	d8813317 	ldw	r2,1228(sp)
1000237c:	8165883a 	add	r18,r16,r5
10002380:	9429c83a 	sub	r20,r18,r16
10002384:	1500010e 	bge	r2,r20,1000238c <___vfprintf_internal_r+0x13b8>
10002388:	1029883a 	mov	r20,r2
1000238c:	05000a0e 	bge	zero,r20,100023b8 <___vfprintf_internal_r+0x13e4>
10002390:	d8811f17 	ldw	r2,1148(sp)
10002394:	1d07883a 	add	r3,r3,r20
10002398:	44000015 	stw	r16,0(r8)
1000239c:	10800044 	addi	r2,r2,1
100023a0:	45000115 	stw	r20,4(r8)
100023a4:	d8c12015 	stw	r3,1152(sp)
100023a8:	d8811f15 	stw	r2,1148(sp)
100023ac:	010001c4 	movi	r4,7
100023b0:	20822b16 	blt	r4,r2,10002c60 <___vfprintf_internal_r+0x1c8c>
100023b4:	42000204 	addi	r8,r8,8
100023b8:	a0022716 	blt	r20,zero,10002c58 <___vfprintf_internal_r+0x1c84>
100023bc:	d9013317 	ldw	r4,1228(sp)
100023c0:	2529c83a 	sub	r20,r4,r20
100023c4:	0500530e 	bge	zero,r20,10002514 <___vfprintf_internal_r+0x1540>
100023c8:	05800404 	movi	r22,16
100023cc:	d8811f17 	ldw	r2,1148(sp)
100023d0:	05440074 	movhi	r21,4097
100023d4:	ad7f6b84 	addi	r21,r21,-594
100023d8:	b501680e 	bge	r22,r20,1000297c <___vfprintf_internal_r+0x19a8>
100023dc:	8809883a 	mov	r4,r17
100023e0:	dc012e15 	stw	r16,1208(sp)
100023e4:	a023883a 	mov	r17,r20
100023e8:	070001c4 	movi	fp,7
100023ec:	dc012c17 	ldw	r16,1200(sp)
100023f0:	2029883a 	mov	r20,r4
100023f4:	00000306 	br	10002404 <___vfprintf_internal_r+0x1430>
100023f8:	42000204 	addi	r8,r8,8
100023fc:	8c7ffc04 	addi	r17,r17,-16
10002400:	b4415a0e 	bge	r22,r17,1000296c <___vfprintf_internal_r+0x1998>
10002404:	18c00404 	addi	r3,r3,16
10002408:	10800044 	addi	r2,r2,1
1000240c:	45c00015 	stw	r23,0(r8)
10002410:	45800115 	stw	r22,4(r8)
10002414:	d8c12015 	stw	r3,1152(sp)
10002418:	d8811f15 	stw	r2,1148(sp)
1000241c:	e0bff60e 	bge	fp,r2,100023f8 <__alt_data_end+0xf80023f8>
10002420:	8009883a 	mov	r4,r16
10002424:	980b883a 	mov	r5,r19
10002428:	d9811e04 	addi	r6,sp,1144
1000242c:	00082dc0 	call	100082dc <__sprint_r>
10002430:	103c041e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002434:	d8c12017 	ldw	r3,1152(sp)
10002438:	d8811f17 	ldw	r2,1148(sp)
1000243c:	da000404 	addi	r8,sp,16
10002440:	003fee06 	br	100023fc <__alt_data_end+0xf80023fc>
10002444:	d9012c17 	ldw	r4,1200(sp)
10002448:	980b883a 	mov	r5,r19
1000244c:	d9811e04 	addi	r6,sp,1144
10002450:	00082dc0 	call	100082dc <__sprint_r>
10002454:	103bfb1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002458:	d8c12017 	ldw	r3,1152(sp)
1000245c:	d8812787 	ldb	r2,1182(sp)
10002460:	da000404 	addi	r8,sp,16
10002464:	003c8e06 	br	100016a0 <__alt_data_end+0xf80016a0>
10002468:	d9413517 	ldw	r5,1236(sp)
1000246c:	2c3fffc4 	addi	r16,r5,-1
10002470:	043f3c0e 	bge	zero,r16,10002164 <__alt_data_end+0xf8002164>
10002474:	07000404 	movi	fp,16
10002478:	05440074 	movhi	r21,4097
1000247c:	ad7f6b84 	addi	r21,r21,-594
10002480:	e4007c0e 	bge	fp,r16,10002674 <___vfprintf_internal_r+0x16a0>
10002484:	dc412e15 	stw	r17,1208(sp)
10002488:	00c001c4 	movi	r3,7
1000248c:	8023883a 	mov	r17,r16
10002490:	dc012c17 	ldw	r16,1200(sp)
10002494:	00000306 	br	100024a4 <___vfprintf_internal_r+0x14d0>
10002498:	a5000204 	addi	r20,r20,8
1000249c:	8c7ffc04 	addi	r17,r17,-16
100024a0:	e440720e 	bge	fp,r17,1000266c <___vfprintf_internal_r+0x1698>
100024a4:	b5800404 	addi	r22,r22,16
100024a8:	94800044 	addi	r18,r18,1
100024ac:	a5c00015 	stw	r23,0(r20)
100024b0:	a7000115 	stw	fp,4(r20)
100024b4:	dd812015 	stw	r22,1152(sp)
100024b8:	dc811f15 	stw	r18,1148(sp)
100024bc:	1cbff60e 	bge	r3,r18,10002498 <__alt_data_end+0xf8002498>
100024c0:	8009883a 	mov	r4,r16
100024c4:	980b883a 	mov	r5,r19
100024c8:	d9811e04 	addi	r6,sp,1144
100024cc:	d8c13e15 	stw	r3,1272(sp)
100024d0:	00082dc0 	call	100082dc <__sprint_r>
100024d4:	d8c13e17 	ldw	r3,1272(sp)
100024d8:	103bda1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
100024dc:	dd812017 	ldw	r22,1152(sp)
100024e0:	dc811f17 	ldw	r18,1148(sp)
100024e4:	dd000404 	addi	r20,sp,16
100024e8:	003fec06 	br	1000249c <__alt_data_end+0xf800249c>
100024ec:	00c00084 	movi	r3,2
100024f0:	ad84b03a 	or	r2,r21,r22
100024f4:	003d5c06 	br	10001a68 <__alt_data_end+0xf8001a68>
100024f8:	d9012c17 	ldw	r4,1200(sp)
100024fc:	980b883a 	mov	r5,r19
10002500:	d9811e04 	addi	r6,sp,1144
10002504:	00082dc0 	call	100082dc <__sprint_r>
10002508:	103bce1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
1000250c:	d8c12017 	ldw	r3,1152(sp)
10002510:	da000404 	addi	r8,sp,16
10002514:	d9413317 	ldw	r5,1228(sp)
10002518:	d8812617 	ldw	r2,1176(sp)
1000251c:	d9013517 	ldw	r4,1236(sp)
10002520:	8161883a 	add	r16,r16,r5
10002524:	11000316 	blt	r2,r4,10002534 <___vfprintf_internal_r+0x1560>
10002528:	d9412a17 	ldw	r5,1192(sp)
1000252c:	2900004c 	andi	r4,r5,1
10002530:	20000d26 	beq	r4,zero,10002568 <___vfprintf_internal_r+0x1594>
10002534:	d9013817 	ldw	r4,1248(sp)
10002538:	d9413417 	ldw	r5,1232(sp)
1000253c:	1907883a 	add	r3,r3,r4
10002540:	d9011f17 	ldw	r4,1148(sp)
10002544:	41400015 	stw	r5,0(r8)
10002548:	d9413817 	ldw	r5,1248(sp)
1000254c:	21000044 	addi	r4,r4,1
10002550:	d8c12015 	stw	r3,1152(sp)
10002554:	41400115 	stw	r5,4(r8)
10002558:	d9011f15 	stw	r4,1148(sp)
1000255c:	014001c4 	movi	r5,7
10002560:	2901c716 	blt	r5,r4,10002c80 <___vfprintf_internal_r+0x1cac>
10002564:	42000204 	addi	r8,r8,8
10002568:	d9013517 	ldw	r4,1236(sp)
1000256c:	9425c83a 	sub	r18,r18,r16
10002570:	2085c83a 	sub	r2,r4,r2
10002574:	1029883a 	mov	r20,r2
10002578:	9080010e 	bge	r18,r2,10002580 <___vfprintf_internal_r+0x15ac>
1000257c:	9029883a 	mov	r20,r18
10002580:	05000a0e 	bge	zero,r20,100025ac <___vfprintf_internal_r+0x15d8>
10002584:	d9011f17 	ldw	r4,1148(sp)
10002588:	1d07883a 	add	r3,r3,r20
1000258c:	44000015 	stw	r16,0(r8)
10002590:	21000044 	addi	r4,r4,1
10002594:	45000115 	stw	r20,4(r8)
10002598:	d8c12015 	stw	r3,1152(sp)
1000259c:	d9011f15 	stw	r4,1148(sp)
100025a0:	014001c4 	movi	r5,7
100025a4:	2901dd16 	blt	r5,r4,10002d1c <___vfprintf_internal_r+0x1d48>
100025a8:	42000204 	addi	r8,r8,8
100025ac:	a001d916 	blt	r20,zero,10002d14 <___vfprintf_internal_r+0x1d40>
100025b0:	1521c83a 	sub	r16,r2,r20
100025b4:	043c970e 	bge	zero,r16,10001814 <__alt_data_end+0xf8001814>
100025b8:	04800404 	movi	r18,16
100025bc:	d8811f17 	ldw	r2,1148(sp)
100025c0:	05440074 	movhi	r21,4097
100025c4:	ad7f6b84 	addi	r21,r21,-594
100025c8:	943e140e 	bge	r18,r16,10001e1c <__alt_data_end+0xf8001e1c>
100025cc:	050001c4 	movi	r20,7
100025d0:	dd812c17 	ldw	r22,1200(sp)
100025d4:	00000306 	br	100025e4 <___vfprintf_internal_r+0x1610>
100025d8:	42000204 	addi	r8,r8,8
100025dc:	843ffc04 	addi	r16,r16,-16
100025e0:	943e0e0e 	bge	r18,r16,10001e1c <__alt_data_end+0xf8001e1c>
100025e4:	18c00404 	addi	r3,r3,16
100025e8:	10800044 	addi	r2,r2,1
100025ec:	45c00015 	stw	r23,0(r8)
100025f0:	44800115 	stw	r18,4(r8)
100025f4:	d8c12015 	stw	r3,1152(sp)
100025f8:	d8811f15 	stw	r2,1148(sp)
100025fc:	a0bff60e 	bge	r20,r2,100025d8 <__alt_data_end+0xf80025d8>
10002600:	b009883a 	mov	r4,r22
10002604:	980b883a 	mov	r5,r19
10002608:	d9811e04 	addi	r6,sp,1144
1000260c:	00082dc0 	call	100082dc <__sprint_r>
10002610:	103b8c1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002614:	d8c12017 	ldw	r3,1152(sp)
10002618:	d8811f17 	ldw	r2,1148(sp)
1000261c:	da000404 	addi	r8,sp,16
10002620:	003fee06 	br	100025dc <__alt_data_end+0xf80025dc>
10002624:	d9012c17 	ldw	r4,1200(sp)
10002628:	980b883a 	mov	r5,r19
1000262c:	d9811e04 	addi	r6,sp,1144
10002630:	00082dc0 	call	100082dc <__sprint_r>
10002634:	103b831e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002638:	d8c12017 	ldw	r3,1152(sp)
1000263c:	dc811f17 	ldw	r18,1148(sp)
10002640:	da000404 	addi	r8,sp,16
10002644:	003eaa06 	br	100020f0 <__alt_data_end+0xf80020f0>
10002648:	d9012c17 	ldw	r4,1200(sp)
1000264c:	980b883a 	mov	r5,r19
10002650:	d9811e04 	addi	r6,sp,1144
10002654:	00082dc0 	call	100082dc <__sprint_r>
10002658:	103b7a1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
1000265c:	dd812017 	ldw	r22,1152(sp)
10002660:	dc811f17 	ldw	r18,1148(sp)
10002664:	dd000404 	addi	r20,sp,16
10002668:	003eac06 	br	1000211c <__alt_data_end+0xf800211c>
1000266c:	8821883a 	mov	r16,r17
10002670:	dc412e17 	ldw	r17,1208(sp)
10002674:	b42d883a 	add	r22,r22,r16
10002678:	94800044 	addi	r18,r18,1
1000267c:	a5400015 	stw	r21,0(r20)
10002680:	a4000115 	stw	r16,4(r20)
10002684:	dd812015 	stw	r22,1152(sp)
10002688:	dc811f15 	stw	r18,1148(sp)
1000268c:	008001c4 	movi	r2,7
10002690:	14beb30e 	bge	r2,r18,10002160 <__alt_data_end+0xf8002160>
10002694:	003ecb06 	br	100021c4 <__alt_data_end+0xf80021c4>
10002698:	d9012c17 	ldw	r4,1200(sp)
1000269c:	980b883a 	mov	r5,r19
100026a0:	d9811e04 	addi	r6,sp,1144
100026a4:	00082dc0 	call	100082dc <__sprint_r>
100026a8:	103b661e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
100026ac:	d8c12017 	ldw	r3,1152(sp)
100026b0:	da000404 	addi	r8,sp,16
100026b4:	003c1806 	br	10001718 <__alt_data_end+0xf8001718>
100026b8:	056bc83a 	sub	r21,zero,r21
100026bc:	a804c03a 	cmpne	r2,r21,zero
100026c0:	05adc83a 	sub	r22,zero,r22
100026c4:	07000b44 	movi	fp,45
100026c8:	b0adc83a 	sub	r22,r22,r2
100026cc:	df012785 	stb	fp,1182(sp)
100026d0:	00c00044 	movi	r3,1
100026d4:	ad84b03a 	or	r2,r21,r22
100026d8:	003b9106 	br	10001520 <__alt_data_end+0xf8001520>
100026dc:	da013f15 	stw	r8,1276(sp)
100026e0:	0007f340 	call	10007f34 <__fpclassifyd>
100026e4:	da013f17 	ldw	r8,1276(sp)
100026e8:	1000f226 	beq	r2,zero,10002ab4 <___vfprintf_internal_r+0x1ae0>
100026ec:	05bff7c4 	movi	r22,-33
100026f0:	00bfffc4 	movi	r2,-1
100026f4:	95ac703a 	and	r22,r18,r22
100026f8:	a0820b26 	beq	r20,r2,10002f28 <___vfprintf_internal_r+0x1f54>
100026fc:	008011c4 	movi	r2,71
10002700:	b081fc26 	beq	r22,r2,10002ef4 <___vfprintf_internal_r+0x1f20>
10002704:	d8c12a17 	ldw	r3,1192(sp)
10002708:	d9013917 	ldw	r4,1252(sp)
1000270c:	18c04014 	ori	r3,r3,256
10002710:	d8c12d15 	stw	r3,1204(sp)
10002714:	20020616 	blt	r4,zero,10002f30 <___vfprintf_internal_r+0x1f5c>
10002718:	dd413917 	ldw	r21,1252(sp)
1000271c:	d8012b05 	stb	zero,1196(sp)
10002720:	00801984 	movi	r2,102
10002724:	9081a526 	beq	r18,r2,10002dbc <___vfprintf_internal_r+0x1de8>
10002728:	00801184 	movi	r2,70
1000272c:	9081a326 	beq	r18,r2,10002dbc <___vfprintf_internal_r+0x1de8>
10002730:	00801144 	movi	r2,69
10002734:	b0820226 	beq	r22,r2,10002f40 <___vfprintf_internal_r+0x1f6c>
10002738:	a039883a 	mov	fp,r20
1000273c:	d8812604 	addi	r2,sp,1176
10002740:	d8800115 	stw	r2,4(sp)
10002744:	d9012c17 	ldw	r4,1200(sp)
10002748:	d8812504 	addi	r2,sp,1172
1000274c:	d9413717 	ldw	r5,1244(sp)
10002750:	d8800215 	stw	r2,8(sp)
10002754:	d8812104 	addi	r2,sp,1156
10002758:	df000015 	stw	fp,0(sp)
1000275c:	d8800315 	stw	r2,12(sp)
10002760:	a80d883a 	mov	r6,r21
10002764:	01c00084 	movi	r7,2
10002768:	da013f15 	stw	r8,1276(sp)
1000276c:	00034ac0 	call	100034ac <_dtoa_r>
10002770:	1021883a 	mov	r16,r2
10002774:	008019c4 	movi	r2,103
10002778:	da013f17 	ldw	r8,1276(sp)
1000277c:	90800226 	beq	r18,r2,10002788 <___vfprintf_internal_r+0x17b4>
10002780:	008011c4 	movi	r2,71
10002784:	9080031e 	bne	r18,r2,10002794 <___vfprintf_internal_r+0x17c0>
10002788:	d9012a17 	ldw	r4,1192(sp)
1000278c:	2080004c 	andi	r2,r4,1
10002790:	1001fe26 	beq	r2,zero,10002f8c <___vfprintf_internal_r+0x1fb8>
10002794:	00801184 	movi	r2,70
10002798:	8713883a 	add	r9,r16,fp
1000279c:	b0819f26 	beq	r22,r2,10002e1c <___vfprintf_internal_r+0x1e48>
100027a0:	d9013717 	ldw	r4,1244(sp)
100027a4:	a80b883a 	mov	r5,r21
100027a8:	000d883a 	mov	r6,zero
100027ac:	000f883a 	mov	r7,zero
100027b0:	da013f15 	stw	r8,1276(sp)
100027b4:	da413e15 	stw	r9,1272(sp)
100027b8:	000c15c0 	call	1000c15c <__eqdf2>
100027bc:	da013f17 	ldw	r8,1276(sp)
100027c0:	da413e17 	ldw	r9,1272(sp)
100027c4:	10017b26 	beq	r2,zero,10002db4 <___vfprintf_internal_r+0x1de0>
100027c8:	d8812117 	ldw	r2,1156(sp)
100027cc:	1240062e 	bgeu	r2,r9,100027e8 <___vfprintf_internal_r+0x1814>
100027d0:	01000c04 	movi	r4,48
100027d4:	10c00044 	addi	r3,r2,1
100027d8:	d8c12115 	stw	r3,1156(sp)
100027dc:	11000005 	stb	r4,0(r2)
100027e0:	d8812117 	ldw	r2,1156(sp)
100027e4:	127ffb36 	bltu	r2,r9,100027d4 <__alt_data_end+0xf80027d4>
100027e8:	1405c83a 	sub	r2,r2,r16
100027ec:	d8813515 	stw	r2,1236(sp)
100027f0:	008011c4 	movi	r2,71
100027f4:	b0816926 	beq	r22,r2,10002d9c <___vfprintf_internal_r+0x1dc8>
100027f8:	00801944 	movi	r2,101
100027fc:	14823f0e 	bge	r2,r18,100030fc <___vfprintf_internal_r+0x2128>
10002800:	d8c12617 	ldw	r3,1176(sp)
10002804:	00801984 	movi	r2,102
10002808:	d8c13315 	stw	r3,1228(sp)
1000280c:	9081e126 	beq	r18,r2,10002f94 <___vfprintf_internal_r+0x1fc0>
10002810:	d8c13317 	ldw	r3,1228(sp)
10002814:	d9013517 	ldw	r4,1236(sp)
10002818:	1901cb16 	blt	r3,r4,10002f48 <___vfprintf_internal_r+0x1f74>
1000281c:	d9412a17 	ldw	r5,1192(sp)
10002820:	2880004c 	andi	r2,r5,1
10002824:	1001d11e 	bne	r2,zero,10002f6c <___vfprintf_internal_r+0x1f98>
10002828:	1805883a 	mov	r2,r3
1000282c:	18023116 	blt	r3,zero,100030f4 <___vfprintf_internal_r+0x2120>
10002830:	d8c13317 	ldw	r3,1228(sp)
10002834:	048019c4 	movi	r18,103
10002838:	d8c12e15 	stw	r3,1208(sp)
1000283c:	df012b07 	ldb	fp,1196(sp)
10002840:	e0014e1e 	bne	fp,zero,10002d7c <___vfprintf_internal_r+0x1da8>
10002844:	d8c12d17 	ldw	r3,1204(sp)
10002848:	df012783 	ldbu	fp,1182(sp)
1000284c:	d8812b15 	stw	r2,1196(sp)
10002850:	d8c12a15 	stw	r3,1192(sp)
10002854:	0029883a 	mov	r20,zero
10002858:	003b4706 	br	10001578 <__alt_data_end+0xf8001578>
1000285c:	d8c12f17 	ldw	r3,1212(sp)
10002860:	d9012f17 	ldw	r4,1212(sp)
10002864:	d9412f17 	ldw	r5,1212(sp)
10002868:	18c00017 	ldw	r3,0(r3)
1000286c:	21000117 	ldw	r4,4(r4)
10002870:	29400204 	addi	r5,r5,8
10002874:	d8c13715 	stw	r3,1244(sp)
10002878:	d9013915 	stw	r4,1252(sp)
1000287c:	d9412f15 	stw	r5,1212(sp)
10002880:	003c3606 	br	1000195c <__alt_data_end+0xf800195c>
10002884:	d9412a17 	ldw	r5,1192(sp)
10002888:	2880100c 	andi	r2,r5,64
1000288c:	1000b026 	beq	r2,zero,10002b50 <___vfprintf_internal_r+0x1b7c>
10002890:	d8812f17 	ldw	r2,1212(sp)
10002894:	002d883a 	mov	r22,zero
10002898:	00c00044 	movi	r3,1
1000289c:	1540000b 	ldhu	r21,0(r2)
100028a0:	10800104 	addi	r2,r2,4
100028a4:	d8812f15 	stw	r2,1212(sp)
100028a8:	a805883a 	mov	r2,r21
100028ac:	003c6e06 	br	10001a68 <__alt_data_end+0xf8001a68>
100028b0:	00c00084 	movi	r3,2
100028b4:	003c6c06 	br	10001a68 <__alt_data_end+0xf8001a68>
100028b8:	d9412a17 	ldw	r5,1192(sp)
100028bc:	2880100c 	andi	r2,r5,64
100028c0:	10009b26 	beq	r2,zero,10002b30 <___vfprintf_internal_r+0x1b5c>
100028c4:	d8812f17 	ldw	r2,1212(sp)
100028c8:	002d883a 	mov	r22,zero
100028cc:	0007883a 	mov	r3,zero
100028d0:	1540000b 	ldhu	r21,0(r2)
100028d4:	10800104 	addi	r2,r2,4
100028d8:	d8812f15 	stw	r2,1212(sp)
100028dc:	a805883a 	mov	r2,r21
100028e0:	003c6106 	br	10001a68 <__alt_data_end+0xf8001a68>
100028e4:	8c800007 	ldb	r18,0(r17)
100028e8:	003a1f06 	br	10001168 <__alt_data_end+0xf8001168>
100028ec:	d9412a17 	ldw	r5,1192(sp)
100028f0:	2880100c 	andi	r2,r5,64
100028f4:	10009e26 	beq	r2,zero,10002b70 <___vfprintf_internal_r+0x1b9c>
100028f8:	d8812f17 	ldw	r2,1212(sp)
100028fc:	002d883a 	mov	r22,zero
10002900:	1540000b 	ldhu	r21,0(r2)
10002904:	10800104 	addi	r2,r2,4
10002908:	d8812f15 	stw	r2,1212(sp)
1000290c:	003c9506 	br	10001b64 <__alt_data_end+0xf8001b64>
10002910:	d9412a17 	ldw	r5,1192(sp)
10002914:	2880040c 	andi	r2,r5,16
10002918:	10007e1e 	bne	r2,zero,10002b14 <___vfprintf_internal_r+0x1b40>
1000291c:	d9412a17 	ldw	r5,1192(sp)
10002920:	2880100c 	andi	r2,r5,64
10002924:	10010826 	beq	r2,zero,10002d48 <___vfprintf_internal_r+0x1d74>
10002928:	d8c12f17 	ldw	r3,1212(sp)
1000292c:	d9013117 	ldw	r4,1220(sp)
10002930:	18800017 	ldw	r2,0(r3)
10002934:	18c00104 	addi	r3,r3,4
10002938:	d8c12f15 	stw	r3,1212(sp)
1000293c:	1100000d 	sth	r4,0(r2)
10002940:	0039e206 	br	100010cc <__alt_data_end+0xf80010cc>
10002944:	d8c12a17 	ldw	r3,1192(sp)
10002948:	1880100c 	andi	r2,r3,64
1000294c:	10006a26 	beq	r2,zero,10002af8 <___vfprintf_internal_r+0x1b24>
10002950:	d9012f17 	ldw	r4,1212(sp)
10002954:	2540000f 	ldh	r21,0(r4)
10002958:	21000104 	addi	r4,r4,4
1000295c:	d9012f15 	stw	r4,1212(sp)
10002960:	a82dd7fa 	srai	r22,r21,31
10002964:	b005883a 	mov	r2,r22
10002968:	003ae906 	br	10001510 <__alt_data_end+0xf8001510>
1000296c:	dc012e17 	ldw	r16,1208(sp)
10002970:	a009883a 	mov	r4,r20
10002974:	8829883a 	mov	r20,r17
10002978:	2023883a 	mov	r17,r4
1000297c:	1d07883a 	add	r3,r3,r20
10002980:	10800044 	addi	r2,r2,1
10002984:	45400015 	stw	r21,0(r8)
10002988:	45000115 	stw	r20,4(r8)
1000298c:	d8c12015 	stw	r3,1152(sp)
10002990:	d8811f15 	stw	r2,1148(sp)
10002994:	010001c4 	movi	r4,7
10002998:	20bed716 	blt	r4,r2,100024f8 <__alt_data_end+0xf80024f8>
1000299c:	42000204 	addi	r8,r8,8
100029a0:	003edc06 	br	10002514 <__alt_data_end+0xf8002514>
100029a4:	d9012c17 	ldw	r4,1200(sp)
100029a8:	980b883a 	mov	r5,r19
100029ac:	d9811e04 	addi	r6,sp,1144
100029b0:	00082dc0 	call	100082dc <__sprint_r>
100029b4:	103aa31e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
100029b8:	d8c12017 	ldw	r3,1152(sp)
100029bc:	da000404 	addi	r8,sp,16
100029c0:	003d5606 	br	10001f1c <__alt_data_end+0xf8001f1c>
100029c4:	d9011f17 	ldw	r4,1148(sp)
100029c8:	01440074 	movhi	r5,4097
100029cc:	297f6b04 	addi	r5,r5,-596
100029d0:	18c00044 	addi	r3,r3,1
100029d4:	21000044 	addi	r4,r4,1
100029d8:	41400015 	stw	r5,0(r8)
100029dc:	01400044 	movi	r5,1
100029e0:	41400115 	stw	r5,4(r8)
100029e4:	d8c12015 	stw	r3,1152(sp)
100029e8:	d9011f15 	stw	r4,1148(sp)
100029ec:	014001c4 	movi	r5,7
100029f0:	29006a16 	blt	r5,r4,10002b9c <___vfprintf_internal_r+0x1bc8>
100029f4:	42000204 	addi	r8,r8,8
100029f8:	1025883a 	mov	r18,r2
100029fc:	9000051e 	bne	r18,zero,10002a14 <___vfprintf_internal_r+0x1a40>
10002a00:	d8813517 	ldw	r2,1236(sp)
10002a04:	1000031e 	bne	r2,zero,10002a14 <___vfprintf_internal_r+0x1a40>
10002a08:	d9012a17 	ldw	r4,1192(sp)
10002a0c:	2080004c 	andi	r2,r4,1
10002a10:	103b8026 	beq	r2,zero,10001814 <__alt_data_end+0xf8001814>
10002a14:	d8813417 	ldw	r2,1232(sp)
10002a18:	d9413817 	ldw	r5,1248(sp)
10002a1c:	010001c4 	movi	r4,7
10002a20:	40800015 	stw	r2,0(r8)
10002a24:	d8811f17 	ldw	r2,1148(sp)
10002a28:	1947883a 	add	r3,r3,r5
10002a2c:	41400115 	stw	r5,4(r8)
10002a30:	10800044 	addi	r2,r2,1
10002a34:	d8c12015 	stw	r3,1152(sp)
10002a38:	d8811f15 	stw	r2,1148(sp)
10002a3c:	20813016 	blt	r4,r2,10002f00 <___vfprintf_internal_r+0x1f2c>
10002a40:	42000204 	addi	r8,r8,8
10002a44:	04a5c83a 	sub	r18,zero,r18
10002a48:	04807a0e 	bge	zero,r18,10002c34 <___vfprintf_internal_r+0x1c60>
10002a4c:	05000404 	movi	r20,16
10002a50:	05440074 	movhi	r21,4097
10002a54:	ad7f6b84 	addi	r21,r21,-594
10002a58:	a480920e 	bge	r20,r18,10002ca4 <___vfprintf_internal_r+0x1cd0>
10002a5c:	058001c4 	movi	r22,7
10002a60:	df012c17 	ldw	fp,1200(sp)
10002a64:	00000306 	br	10002a74 <___vfprintf_internal_r+0x1aa0>
10002a68:	42000204 	addi	r8,r8,8
10002a6c:	94bffc04 	addi	r18,r18,-16
10002a70:	a4808c0e 	bge	r20,r18,10002ca4 <___vfprintf_internal_r+0x1cd0>
10002a74:	18c00404 	addi	r3,r3,16
10002a78:	10800044 	addi	r2,r2,1
10002a7c:	45c00015 	stw	r23,0(r8)
10002a80:	45000115 	stw	r20,4(r8)
10002a84:	d8c12015 	stw	r3,1152(sp)
10002a88:	d8811f15 	stw	r2,1148(sp)
10002a8c:	b0bff60e 	bge	r22,r2,10002a68 <__alt_data_end+0xf8002a68>
10002a90:	e009883a 	mov	r4,fp
10002a94:	980b883a 	mov	r5,r19
10002a98:	d9811e04 	addi	r6,sp,1144
10002a9c:	00082dc0 	call	100082dc <__sprint_r>
10002aa0:	103a681e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002aa4:	d8c12017 	ldw	r3,1152(sp)
10002aa8:	d8811f17 	ldw	r2,1148(sp)
10002aac:	da000404 	addi	r8,sp,16
10002ab0:	003fee06 	br	10002a6c <__alt_data_end+0xf8002a6c>
10002ab4:	008011c4 	movi	r2,71
10002ab8:	1480ad16 	blt	r2,r18,10002d70 <___vfprintf_internal_r+0x1d9c>
10002abc:	04040074 	movhi	r16,4097
10002ac0:	843f5d04 	addi	r16,r16,-652
10002ac4:	d9012a17 	ldw	r4,1192(sp)
10002ac8:	00bfdfc4 	movi	r2,-129
10002acc:	00c000c4 	movi	r3,3
10002ad0:	2088703a 	and	r4,r4,r2
10002ad4:	d8c12b15 	stw	r3,1196(sp)
10002ad8:	d9012a15 	stw	r4,1192(sp)
10002adc:	df012783 	ldbu	fp,1182(sp)
10002ae0:	d8c12e15 	stw	r3,1208(sp)
10002ae4:	0029883a 	mov	r20,zero
10002ae8:	d8013315 	stw	zero,1228(sp)
10002aec:	003aa206 	br	10001578 <__alt_data_end+0xf8001578>
10002af0:	dd012e15 	stw	r20,1208(sp)
10002af4:	003c8206 	br	10001d00 <__alt_data_end+0xf8001d00>
10002af8:	d9412f17 	ldw	r5,1212(sp)
10002afc:	2d400017 	ldw	r21,0(r5)
10002b00:	29400104 	addi	r5,r5,4
10002b04:	d9412f15 	stw	r5,1212(sp)
10002b08:	a82dd7fa 	srai	r22,r21,31
10002b0c:	b005883a 	mov	r2,r22
10002b10:	003a7f06 	br	10001510 <__alt_data_end+0xf8001510>
10002b14:	d8c12f17 	ldw	r3,1212(sp)
10002b18:	d9013117 	ldw	r4,1220(sp)
10002b1c:	18800017 	ldw	r2,0(r3)
10002b20:	18c00104 	addi	r3,r3,4
10002b24:	d8c12f15 	stw	r3,1212(sp)
10002b28:	11000015 	stw	r4,0(r2)
10002b2c:	00396706 	br	100010cc <__alt_data_end+0xf80010cc>
10002b30:	d8c12f17 	ldw	r3,1212(sp)
10002b34:	002d883a 	mov	r22,zero
10002b38:	1d400017 	ldw	r21,0(r3)
10002b3c:	18c00104 	addi	r3,r3,4
10002b40:	d8c12f15 	stw	r3,1212(sp)
10002b44:	a805883a 	mov	r2,r21
10002b48:	0007883a 	mov	r3,zero
10002b4c:	003bc606 	br	10001a68 <__alt_data_end+0xf8001a68>
10002b50:	d8c12f17 	ldw	r3,1212(sp)
10002b54:	002d883a 	mov	r22,zero
10002b58:	1d400017 	ldw	r21,0(r3)
10002b5c:	18c00104 	addi	r3,r3,4
10002b60:	d8c12f15 	stw	r3,1212(sp)
10002b64:	a805883a 	mov	r2,r21
10002b68:	00c00044 	movi	r3,1
10002b6c:	003bbe06 	br	10001a68 <__alt_data_end+0xf8001a68>
10002b70:	d8c12f17 	ldw	r3,1212(sp)
10002b74:	002d883a 	mov	r22,zero
10002b78:	1d400017 	ldw	r21,0(r3)
10002b7c:	18c00104 	addi	r3,r3,4
10002b80:	d8c12f15 	stw	r3,1212(sp)
10002b84:	003bf706 	br	10001b64 <__alt_data_end+0xf8001b64>
10002b88:	04040074 	movhi	r16,4097
10002b8c:	843f5b04 	addi	r16,r16,-660
10002b90:	003b8506 	br	100019a8 <__alt_data_end+0xf80019a8>
10002b94:	45000204 	addi	r20,r8,8
10002b98:	003d7206 	br	10002164 <__alt_data_end+0xf8002164>
10002b9c:	d9012c17 	ldw	r4,1200(sp)
10002ba0:	980b883a 	mov	r5,r19
10002ba4:	d9811e04 	addi	r6,sp,1144
10002ba8:	00082dc0 	call	100082dc <__sprint_r>
10002bac:	103a251e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002bb0:	dc812617 	ldw	r18,1176(sp)
10002bb4:	d8c12017 	ldw	r3,1152(sp)
10002bb8:	da000404 	addi	r8,sp,16
10002bbc:	003f8f06 	br	100029fc <__alt_data_end+0xf80029fc>
10002bc0:	d9012a17 	ldw	r4,1192(sp)
10002bc4:	8c400044 	addi	r17,r17,1
10002bc8:	14800047 	ldb	r18,1(r2)
10002bcc:	21000814 	ori	r4,r4,32
10002bd0:	d9012a15 	stw	r4,1192(sp)
10002bd4:	00396406 	br	10001168 <__alt_data_end+0xf8001168>
10002bd8:	d9012c17 	ldw	r4,1200(sp)
10002bdc:	980b883a 	mov	r5,r19
10002be0:	d9811e04 	addi	r6,sp,1144
10002be4:	00082dc0 	call	100082dc <__sprint_r>
10002be8:	103a161e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002bec:	d8c12017 	ldw	r3,1152(sp)
10002bf0:	da000404 	addi	r8,sp,16
10002bf4:	003cdc06 	br	10001f68 <__alt_data_end+0xf8001f68>
10002bf8:	df013f15 	stw	fp,1276(sp)
10002bfc:	0000f480 	call	10000f48 <strlen>
10002c00:	d8812e15 	stw	r2,1208(sp)
10002c04:	da013f17 	ldw	r8,1276(sp)
10002c08:	103c3f0e 	bge	r2,zero,10001d08 <__alt_data_end+0xf8001d08>
10002c0c:	0005883a 	mov	r2,zero
10002c10:	003c3d06 	br	10001d08 <__alt_data_end+0xf8001d08>
10002c14:	d9012c17 	ldw	r4,1200(sp)
10002c18:	980b883a 	mov	r5,r19
10002c1c:	d9811e04 	addi	r6,sp,1144
10002c20:	00082dc0 	call	100082dc <__sprint_r>
10002c24:	103a071e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002c28:	d8c12017 	ldw	r3,1152(sp)
10002c2c:	d8811f17 	ldw	r2,1148(sp)
10002c30:	da000404 	addi	r8,sp,16
10002c34:	d9013517 	ldw	r4,1236(sp)
10002c38:	10800044 	addi	r2,r2,1
10002c3c:	44000015 	stw	r16,0(r8)
10002c40:	20c7883a 	add	r3,r4,r3
10002c44:	003aed06 	br	100017fc <__alt_data_end+0xf80017fc>
10002c48:	01040074 	movhi	r4,4097
10002c4c:	213f6f84 	addi	r4,r4,-578
10002c50:	d9013615 	stw	r4,1240(sp)
10002c54:	003a8706 	br	10001674 <__alt_data_end+0xf8001674>
10002c58:	0029883a 	mov	r20,zero
10002c5c:	003dd706 	br	100023bc <__alt_data_end+0xf80023bc>
10002c60:	d9012c17 	ldw	r4,1200(sp)
10002c64:	980b883a 	mov	r5,r19
10002c68:	d9811e04 	addi	r6,sp,1144
10002c6c:	00082dc0 	call	100082dc <__sprint_r>
10002c70:	1039f41e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002c74:	d8c12017 	ldw	r3,1152(sp)
10002c78:	da000404 	addi	r8,sp,16
10002c7c:	003dce06 	br	100023b8 <__alt_data_end+0xf80023b8>
10002c80:	d9012c17 	ldw	r4,1200(sp)
10002c84:	980b883a 	mov	r5,r19
10002c88:	d9811e04 	addi	r6,sp,1144
10002c8c:	00082dc0 	call	100082dc <__sprint_r>
10002c90:	1039ec1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002c94:	d8812617 	ldw	r2,1176(sp)
10002c98:	d8c12017 	ldw	r3,1152(sp)
10002c9c:	da000404 	addi	r8,sp,16
10002ca0:	003e3106 	br	10002568 <__alt_data_end+0xf8002568>
10002ca4:	1c87883a 	add	r3,r3,r18
10002ca8:	10800044 	addi	r2,r2,1
10002cac:	45400015 	stw	r21,0(r8)
10002cb0:	44800115 	stw	r18,4(r8)
10002cb4:	d8c12015 	stw	r3,1152(sp)
10002cb8:	d8811f15 	stw	r2,1148(sp)
10002cbc:	010001c4 	movi	r4,7
10002cc0:	20bfd416 	blt	r4,r2,10002c14 <__alt_data_end+0xf8002c14>
10002cc4:	42000204 	addi	r8,r8,8
10002cc8:	003fda06 	br	10002c34 <__alt_data_end+0xf8002c34>
10002ccc:	01440074 	movhi	r5,4097
10002cd0:	297f6f84 	addi	r5,r5,-578
10002cd4:	d9413615 	stw	r5,1240(sp)
10002cd8:	003af406 	br	100018ac <__alt_data_end+0xf80018ac>
10002cdc:	00800184 	movi	r2,6
10002ce0:	1500012e 	bgeu	r2,r20,10002ce8 <___vfprintf_internal_r+0x1d14>
10002ce4:	1029883a 	mov	r20,r2
10002ce8:	dd012e15 	stw	r20,1208(sp)
10002cec:	a005883a 	mov	r2,r20
10002cf0:	a000d216 	blt	r20,zero,1000303c <___vfprintf_internal_r+0x2068>
10002cf4:	d8812b15 	stw	r2,1196(sp)
10002cf8:	dd412f15 	stw	r21,1212(sp)
10002cfc:	0029883a 	mov	r20,zero
10002d00:	d8013315 	stw	zero,1228(sp)
10002d04:	04040074 	movhi	r16,4097
10002d08:	843f6904 	addi	r16,r16,-604
10002d0c:	0005883a 	mov	r2,zero
10002d10:	003a2006 	br	10001594 <__alt_data_end+0xf8001594>
10002d14:	0029883a 	mov	r20,zero
10002d18:	003e2506 	br	100025b0 <__alt_data_end+0xf80025b0>
10002d1c:	d9012c17 	ldw	r4,1200(sp)
10002d20:	980b883a 	mov	r5,r19
10002d24:	d9811e04 	addi	r6,sp,1144
10002d28:	00082dc0 	call	100082dc <__sprint_r>
10002d2c:	1039c51e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002d30:	d8812617 	ldw	r2,1176(sp)
10002d34:	d9413517 	ldw	r5,1236(sp)
10002d38:	d8c12017 	ldw	r3,1152(sp)
10002d3c:	da000404 	addi	r8,sp,16
10002d40:	2885c83a 	sub	r2,r5,r2
10002d44:	003e1906 	br	100025ac <__alt_data_end+0xf80025ac>
10002d48:	d9412f17 	ldw	r5,1212(sp)
10002d4c:	d8c13117 	ldw	r3,1220(sp)
10002d50:	28800017 	ldw	r2,0(r5)
10002d54:	29400104 	addi	r5,r5,4
10002d58:	d9412f15 	stw	r5,1212(sp)
10002d5c:	10c00015 	stw	r3,0(r2)
10002d60:	0038da06 	br	100010cc <__alt_data_end+0xf80010cc>
10002d64:	07000b44 	movi	fp,45
10002d68:	df012785 	stb	fp,1182(sp)
10002d6c:	003b0a06 	br	10001998 <__alt_data_end+0xf8001998>
10002d70:	04040074 	movhi	r16,4097
10002d74:	843f5e04 	addi	r16,r16,-648
10002d78:	003f5206 	br	10002ac4 <__alt_data_end+0xf8002ac4>
10002d7c:	00c00b44 	movi	r3,45
10002d80:	d8c12785 	stb	r3,1182(sp)
10002d84:	d8c12d17 	ldw	r3,1204(sp)
10002d88:	d8812b15 	stw	r2,1196(sp)
10002d8c:	0029883a 	mov	r20,zero
10002d90:	d8c12a15 	stw	r3,1192(sp)
10002d94:	00800b44 	movi	r2,45
10002d98:	0039fb06 	br	10001588 <__alt_data_end+0xf8001588>
10002d9c:	d8812617 	ldw	r2,1176(sp)
10002da0:	00ffff44 	movi	r3,-3
10002da4:	10c03216 	blt	r2,r3,10002e70 <___vfprintf_internal_r+0x1e9c>
10002da8:	a0803116 	blt	r20,r2,10002e70 <___vfprintf_internal_r+0x1e9c>
10002dac:	d8813315 	stw	r2,1228(sp)
10002db0:	003e9706 	br	10002810 <__alt_data_end+0xf8002810>
10002db4:	4805883a 	mov	r2,r9
10002db8:	003e8b06 	br	100027e8 <__alt_data_end+0xf80027e8>
10002dbc:	d8812604 	addi	r2,sp,1176
10002dc0:	d8800115 	stw	r2,4(sp)
10002dc4:	d9012c17 	ldw	r4,1200(sp)
10002dc8:	d8812504 	addi	r2,sp,1172
10002dcc:	d9413717 	ldw	r5,1244(sp)
10002dd0:	d8800215 	stw	r2,8(sp)
10002dd4:	d8812104 	addi	r2,sp,1156
10002dd8:	dd000015 	stw	r20,0(sp)
10002ddc:	d8800315 	stw	r2,12(sp)
10002de0:	a80d883a 	mov	r6,r21
10002de4:	01c000c4 	movi	r7,3
10002de8:	da013f15 	stw	r8,1276(sp)
10002dec:	00034ac0 	call	100034ac <_dtoa_r>
10002df0:	1021883a 	mov	r16,r2
10002df4:	a039883a 	mov	fp,r20
10002df8:	da013f17 	ldw	r8,1276(sp)
10002dfc:	003e6506 	br	10002794 <__alt_data_end+0xf8002794>
10002e00:	dd012b15 	stw	r20,1196(sp)
10002e04:	dd012e15 	stw	r20,1208(sp)
10002e08:	df012783 	ldbu	fp,1182(sp)
10002e0c:	dd412f15 	stw	r21,1212(sp)
10002e10:	0029883a 	mov	r20,zero
10002e14:	d8013315 	stw	zero,1228(sp)
10002e18:	0039d706 	br	10001578 <__alt_data_end+0xf8001578>
10002e1c:	81000007 	ldb	r4,0(r16)
10002e20:	00800c04 	movi	r2,48
10002e24:	20800326 	beq	r4,r2,10002e34 <___vfprintf_internal_r+0x1e60>
10002e28:	d8c12617 	ldw	r3,1176(sp)
10002e2c:	48d3883a 	add	r9,r9,r3
10002e30:	003e5b06 	br	100027a0 <__alt_data_end+0xf80027a0>
10002e34:	d9013717 	ldw	r4,1244(sp)
10002e38:	a80b883a 	mov	r5,r21
10002e3c:	000d883a 	mov	r6,zero
10002e40:	000f883a 	mov	r7,zero
10002e44:	da013f15 	stw	r8,1276(sp)
10002e48:	da413e15 	stw	r9,1272(sp)
10002e4c:	000c15c0 	call	1000c15c <__eqdf2>
10002e50:	da013f17 	ldw	r8,1276(sp)
10002e54:	da413e17 	ldw	r9,1272(sp)
10002e58:	103ff326 	beq	r2,zero,10002e28 <__alt_data_end+0xf8002e28>
10002e5c:	00800044 	movi	r2,1
10002e60:	1707c83a 	sub	r3,r2,fp
10002e64:	d8c12615 	stw	r3,1176(sp)
10002e68:	48d3883a 	add	r9,r9,r3
10002e6c:	003e4c06 	br	100027a0 <__alt_data_end+0xf80027a0>
10002e70:	94bfff84 	addi	r18,r18,-2
10002e74:	157fffc4 	addi	r21,r2,-1
10002e78:	dd412615 	stw	r21,1176(sp)
10002e7c:	dc8122c5 	stb	r18,1163(sp)
10002e80:	a8009016 	blt	r21,zero,100030c4 <___vfprintf_internal_r+0x20f0>
10002e84:	00800ac4 	movi	r2,43
10002e88:	d8812305 	stb	r2,1164(sp)
10002e8c:	05000244 	movi	r20,9
10002e90:	a5404a16 	blt	r20,r21,10002fbc <___vfprintf_internal_r+0x1fe8>
10002e94:	00800c04 	movi	r2,48
10002e98:	ad400c04 	addi	r21,r21,48
10002e9c:	d8812345 	stb	r2,1165(sp)
10002ea0:	dd412385 	stb	r21,1166(sp)
10002ea4:	d8c123c4 	addi	r3,sp,1167
10002ea8:	d88122c4 	addi	r2,sp,1163
10002eac:	1885c83a 	sub	r2,r3,r2
10002eb0:	d8c13517 	ldw	r3,1236(sp)
10002eb4:	d9013517 	ldw	r4,1236(sp)
10002eb8:	d8813a15 	stw	r2,1256(sp)
10002ebc:	1887883a 	add	r3,r3,r2
10002ec0:	d8c12e15 	stw	r3,1208(sp)
10002ec4:	00800044 	movi	r2,1
10002ec8:	11007a0e 	bge	r2,r4,100030b4 <___vfprintf_internal_r+0x20e0>
10002ecc:	d8c12e17 	ldw	r3,1208(sp)
10002ed0:	18c00044 	addi	r3,r3,1
10002ed4:	d8c12e15 	stw	r3,1208(sp)
10002ed8:	1805883a 	mov	r2,r3
10002edc:	18000216 	blt	r3,zero,10002ee8 <___vfprintf_internal_r+0x1f14>
10002ee0:	d8013315 	stw	zero,1228(sp)
10002ee4:	003e5506 	br	1000283c <__alt_data_end+0xf800283c>
10002ee8:	0005883a 	mov	r2,zero
10002eec:	d8013315 	stw	zero,1228(sp)
10002ef0:	003e5206 	br	1000283c <__alt_data_end+0xf800283c>
10002ef4:	a03e031e 	bne	r20,zero,10002704 <__alt_data_end+0xf8002704>
10002ef8:	8029883a 	mov	r20,r16
10002efc:	003e0106 	br	10002704 <__alt_data_end+0xf8002704>
10002f00:	d9012c17 	ldw	r4,1200(sp)
10002f04:	980b883a 	mov	r5,r19
10002f08:	d9811e04 	addi	r6,sp,1144
10002f0c:	00082dc0 	call	100082dc <__sprint_r>
10002f10:	10394c1e 	bne	r2,zero,10001444 <__alt_data_end+0xf8001444>
10002f14:	dc812617 	ldw	r18,1176(sp)
10002f18:	d8c12017 	ldw	r3,1152(sp)
10002f1c:	d8811f17 	ldw	r2,1148(sp)
10002f20:	da000404 	addi	r8,sp,16
10002f24:	003ec706 	br	10002a44 <__alt_data_end+0xf8002a44>
10002f28:	05000184 	movi	r20,6
10002f2c:	003df506 	br	10002704 <__alt_data_end+0xf8002704>
10002f30:	00c00b44 	movi	r3,45
10002f34:	2560003c 	xorhi	r21,r4,32768
10002f38:	d8c12b05 	stb	r3,1196(sp)
10002f3c:	003df806 	br	10002720 <__alt_data_end+0xf8002720>
10002f40:	a7000044 	addi	fp,r20,1
10002f44:	003dfd06 	br	1000273c <__alt_data_end+0xf800273c>
10002f48:	d8c13317 	ldw	r3,1228(sp)
10002f4c:	00c0610e 	bge	zero,r3,100030d4 <___vfprintf_internal_r+0x2100>
10002f50:	00800044 	movi	r2,1
10002f54:	d9013517 	ldw	r4,1236(sp)
10002f58:	1105883a 	add	r2,r2,r4
10002f5c:	d8812e15 	stw	r2,1208(sp)
10002f60:	10000716 	blt	r2,zero,10002f80 <___vfprintf_internal_r+0x1fac>
10002f64:	048019c4 	movi	r18,103
10002f68:	003e3406 	br	1000283c <__alt_data_end+0xf800283c>
10002f6c:	d8c13317 	ldw	r3,1228(sp)
10002f70:	18c00044 	addi	r3,r3,1
10002f74:	d8c12e15 	stw	r3,1208(sp)
10002f78:	1805883a 	mov	r2,r3
10002f7c:	183ff90e 	bge	r3,zero,10002f64 <__alt_data_end+0xf8002f64>
10002f80:	0005883a 	mov	r2,zero
10002f84:	048019c4 	movi	r18,103
10002f88:	003e2c06 	br	1000283c <__alt_data_end+0xf800283c>
10002f8c:	d8812117 	ldw	r2,1156(sp)
10002f90:	003e1506 	br	100027e8 <__alt_data_end+0xf80027e8>
10002f94:	00c0400e 	bge	zero,r3,10003098 <___vfprintf_internal_r+0x20c4>
10002f98:	a0002a1e 	bne	r20,zero,10003044 <___vfprintf_internal_r+0x2070>
10002f9c:	d9012a17 	ldw	r4,1192(sp)
10002fa0:	2080004c 	andi	r2,r4,1
10002fa4:	1000271e 	bne	r2,zero,10003044 <___vfprintf_internal_r+0x2070>
10002fa8:	1805883a 	mov	r2,r3
10002fac:	18005a16 	blt	r3,zero,10003118 <___vfprintf_internal_r+0x2144>
10002fb0:	d8c13317 	ldw	r3,1228(sp)
10002fb4:	d8c12e15 	stw	r3,1208(sp)
10002fb8:	003e2006 	br	1000283c <__alt_data_end+0xf800283c>
10002fbc:	d8c12284 	addi	r3,sp,1162
10002fc0:	4039883a 	mov	fp,r8
10002fc4:	a809883a 	mov	r4,r21
10002fc8:	01400284 	movi	r5,10
10002fcc:	182d883a 	mov	r22,r3
10002fd0:	000aec00 	call	1000aec0 <__modsi3>
10002fd4:	10800c04 	addi	r2,r2,48
10002fd8:	a809883a 	mov	r4,r21
10002fdc:	b0800005 	stb	r2,0(r22)
10002fe0:	01400284 	movi	r5,10
10002fe4:	000ae780 	call	1000ae78 <__divsi3>
10002fe8:	102b883a 	mov	r21,r2
10002fec:	b0ffffc4 	addi	r3,r22,-1
10002ff0:	a0bff416 	blt	r20,r2,10002fc4 <__alt_data_end+0xf8002fc4>
10002ff4:	11400c04 	addi	r5,r2,48
10002ff8:	b17fffc5 	stb	r5,-1(r22)
10002ffc:	d88122c4 	addi	r2,sp,1163
10003000:	e011883a 	mov	r8,fp
10003004:	1880462e 	bgeu	r3,r2,10003120 <___vfprintf_internal_r+0x214c>
10003008:	d9012344 	addi	r4,sp,1165
1000300c:	b007883a 	mov	r3,r22
10003010:	00000206 	br	1000301c <___vfprintf_internal_r+0x2048>
10003014:	19400003 	ldbu	r5,0(r3)
10003018:	18c00044 	addi	r3,r3,1
1000301c:	21400005 	stb	r5,0(r4)
10003020:	21000044 	addi	r4,r4,1
10003024:	10fffb1e 	bne	r2,r3,10003014 <__alt_data_end+0xf8003014>
10003028:	d8c12304 	addi	r3,sp,1164
1000302c:	1d87c83a 	sub	r3,r3,r22
10003030:	d9412344 	addi	r5,sp,1165
10003034:	28c7883a 	add	r3,r5,r3
10003038:	003f9c06 	br	10002eac <__alt_data_end+0xf8002eac>
1000303c:	0005883a 	mov	r2,zero
10003040:	003f2c06 	br	10002cf4 <__alt_data_end+0xf8002cf4>
10003044:	d8c13317 	ldw	r3,1228(sp)
10003048:	a5000044 	addi	r20,r20,1
1000304c:	1d29883a 	add	r20,r3,r20
10003050:	dd012e15 	stw	r20,1208(sp)
10003054:	a005883a 	mov	r2,r20
10003058:	a03df80e 	bge	r20,zero,1000283c <__alt_data_end+0xf800283c>
1000305c:	0005883a 	mov	r2,zero
10003060:	003df606 	br	1000283c <__alt_data_end+0xf800283c>
10003064:	043fffc4 	movi	r16,-1
10003068:	0038d406 	br	100013bc <__alt_data_end+0xf80013bc>
1000306c:	d9012f17 	ldw	r4,1212(sp)
10003070:	8c800043 	ldbu	r18,1(r17)
10003074:	1023883a 	mov	r17,r2
10003078:	20c00017 	ldw	r3,0(r4)
1000307c:	21000104 	addi	r4,r4,4
10003080:	d9012f15 	stw	r4,1212(sp)
10003084:	18001f16 	blt	r3,zero,10003104 <___vfprintf_internal_r+0x2130>
10003088:	94803fcc 	andi	r18,r18,255
1000308c:	9480201c 	xori	r18,r18,128
10003090:	94bfe004 	addi	r18,r18,-128
10003094:	00383406 	br	10001168 <__alt_data_end+0xf8001168>
10003098:	a000111e 	bne	r20,zero,100030e0 <___vfprintf_internal_r+0x210c>
1000309c:	d9012a17 	ldw	r4,1192(sp)
100030a0:	2080004c 	andi	r2,r4,1
100030a4:	10000e1e 	bne	r2,zero,100030e0 <___vfprintf_internal_r+0x210c>
100030a8:	00800044 	movi	r2,1
100030ac:	d8812e15 	stw	r2,1208(sp)
100030b0:	003de206 	br	1000283c <__alt_data_end+0xf800283c>
100030b4:	d9412a17 	ldw	r5,1192(sp)
100030b8:	2884703a 	and	r2,r5,r2
100030bc:	103f831e 	bne	r2,zero,10002ecc <__alt_data_end+0xf8002ecc>
100030c0:	003f8506 	br	10002ed8 <__alt_data_end+0xf8002ed8>
100030c4:	00800b44 	movi	r2,45
100030c8:	056bc83a 	sub	r21,zero,r21
100030cc:	d8812305 	stb	r2,1164(sp)
100030d0:	003f6e06 	br	10002e8c <__alt_data_end+0xf8002e8c>
100030d4:	00800084 	movi	r2,2
100030d8:	10c5c83a 	sub	r2,r2,r3
100030dc:	003f9d06 	br	10002f54 <__alt_data_end+0xf8002f54>
100030e0:	a5000084 	addi	r20,r20,2
100030e4:	dd012e15 	stw	r20,1208(sp)
100030e8:	a005883a 	mov	r2,r20
100030ec:	a03dd30e 	bge	r20,zero,1000283c <__alt_data_end+0xf800283c>
100030f0:	003fda06 	br	1000305c <__alt_data_end+0xf800305c>
100030f4:	0005883a 	mov	r2,zero
100030f8:	003dcd06 	br	10002830 <__alt_data_end+0xf8002830>
100030fc:	d8812617 	ldw	r2,1176(sp)
10003100:	003f5c06 	br	10002e74 <__alt_data_end+0xf8002e74>
10003104:	94803fcc 	andi	r18,r18,255
10003108:	9480201c 	xori	r18,r18,128
1000310c:	00ffffc4 	movi	r3,-1
10003110:	94bfe004 	addi	r18,r18,-128
10003114:	00381406 	br	10001168 <__alt_data_end+0xf8001168>
10003118:	0005883a 	mov	r2,zero
1000311c:	003fa406 	br	10002fb0 <__alt_data_end+0xf8002fb0>
10003120:	d8c12344 	addi	r3,sp,1165
10003124:	003f6106 	br	10002eac <__alt_data_end+0xf8002eac>

10003128 <__vfprintf_internal>:
10003128:	00840074 	movhi	r2,4097
1000312c:	1086c804 	addi	r2,r2,6944
10003130:	2007883a 	mov	r3,r4
10003134:	11000017 	ldw	r4,0(r2)
10003138:	2805883a 	mov	r2,r5
1000313c:	300f883a 	mov	r7,r6
10003140:	180b883a 	mov	r5,r3
10003144:	100d883a 	mov	r6,r2
10003148:	0000fd41 	jmpi	10000fd4 <___vfprintf_internal_r>

1000314c <__swsetup_r>:
1000314c:	00840074 	movhi	r2,4097
10003150:	1086c804 	addi	r2,r2,6944
10003154:	10800017 	ldw	r2,0(r2)
10003158:	defffd04 	addi	sp,sp,-12
1000315c:	dc400115 	stw	r17,4(sp)
10003160:	dc000015 	stw	r16,0(sp)
10003164:	dfc00215 	stw	ra,8(sp)
10003168:	2023883a 	mov	r17,r4
1000316c:	2821883a 	mov	r16,r5
10003170:	10000226 	beq	r2,zero,1000317c <__swsetup_r+0x30>
10003174:	10c00e17 	ldw	r3,56(r2)
10003178:	18002e26 	beq	r3,zero,10003234 <__swsetup_r+0xe8>
1000317c:	8080030b 	ldhu	r2,12(r16)
10003180:	10c0020c 	andi	r3,r2,8
10003184:	100d883a 	mov	r6,r2
10003188:	18000f26 	beq	r3,zero,100031c8 <__swsetup_r+0x7c>
1000318c:	80c00417 	ldw	r3,16(r16)
10003190:	18001526 	beq	r3,zero,100031e8 <__swsetup_r+0x9c>
10003194:	1100004c 	andi	r4,r2,1
10003198:	20001c1e 	bne	r4,zero,1000320c <__swsetup_r+0xc0>
1000319c:	1080008c 	andi	r2,r2,2
100031a0:	1000271e 	bne	r2,zero,10003240 <__swsetup_r+0xf4>
100031a4:	80800517 	ldw	r2,20(r16)
100031a8:	80800215 	stw	r2,8(r16)
100031ac:	18001c26 	beq	r3,zero,10003220 <__swsetup_r+0xd4>
100031b0:	0005883a 	mov	r2,zero
100031b4:	dfc00217 	ldw	ra,8(sp)
100031b8:	dc400117 	ldw	r17,4(sp)
100031bc:	dc000017 	ldw	r16,0(sp)
100031c0:	dec00304 	addi	sp,sp,12
100031c4:	f800283a 	ret
100031c8:	3080040c 	andi	r2,r6,16
100031cc:	10001726 	beq	r2,zero,1000322c <__swsetup_r+0xe0>
100031d0:	3080010c 	andi	r2,r6,4
100031d4:	10001d1e 	bne	r2,zero,1000324c <__swsetup_r+0x100>
100031d8:	80c00417 	ldw	r3,16(r16)
100031dc:	30800214 	ori	r2,r6,8
100031e0:	8080030d 	sth	r2,12(r16)
100031e4:	183feb1e 	bne	r3,zero,10003194 <__alt_data_end+0xf8003194>
100031e8:	1140a00c 	andi	r5,r2,640
100031ec:	01008004 	movi	r4,512
100031f0:	293fe826 	beq	r5,r4,10003194 <__alt_data_end+0xf8003194>
100031f4:	8809883a 	mov	r4,r17
100031f8:	800b883a 	mov	r5,r16
100031fc:	0005bec0 	call	10005bec <__smakebuf_r>
10003200:	8080030b 	ldhu	r2,12(r16)
10003204:	80c00417 	ldw	r3,16(r16)
10003208:	003fe206 	br	10003194 <__alt_data_end+0xf8003194>
1000320c:	80800517 	ldw	r2,20(r16)
10003210:	80000215 	stw	zero,8(r16)
10003214:	0085c83a 	sub	r2,zero,r2
10003218:	80800615 	stw	r2,24(r16)
1000321c:	183fe41e 	bne	r3,zero,100031b0 <__alt_data_end+0xf80031b0>
10003220:	8080030b 	ldhu	r2,12(r16)
10003224:	1080200c 	andi	r2,r2,128
10003228:	103fe226 	beq	r2,zero,100031b4 <__alt_data_end+0xf80031b4>
1000322c:	00bfffc4 	movi	r2,-1
10003230:	003fe006 	br	100031b4 <__alt_data_end+0xf80031b4>
10003234:	1009883a 	mov	r4,r2
10003238:	0004e080 	call	10004e08 <__sinit>
1000323c:	003fcf06 	br	1000317c <__alt_data_end+0xf800317c>
10003240:	0005883a 	mov	r2,zero
10003244:	80800215 	stw	r2,8(r16)
10003248:	003fd806 	br	100031ac <__alt_data_end+0xf80031ac>
1000324c:	81400c17 	ldw	r5,48(r16)
10003250:	28000626 	beq	r5,zero,1000326c <__swsetup_r+0x120>
10003254:	80801004 	addi	r2,r16,64
10003258:	28800326 	beq	r5,r2,10003268 <__swsetup_r+0x11c>
1000325c:	8809883a 	mov	r4,r17
10003260:	000523c0 	call	1000523c <_free_r>
10003264:	8180030b 	ldhu	r6,12(r16)
10003268:	80000c15 	stw	zero,48(r16)
1000326c:	80c00417 	ldw	r3,16(r16)
10003270:	00bff6c4 	movi	r2,-37
10003274:	118c703a 	and	r6,r2,r6
10003278:	80000115 	stw	zero,4(r16)
1000327c:	80c00015 	stw	r3,0(r16)
10003280:	003fd606 	br	100031dc <__alt_data_end+0xf80031dc>

10003284 <quorem>:
10003284:	defff204 	addi	sp,sp,-56
10003288:	dd400915 	stw	r21,36(sp)
1000328c:	20800417 	ldw	r2,16(r4)
10003290:	2d400417 	ldw	r21,16(r5)
10003294:	dfc00d15 	stw	ra,52(sp)
10003298:	df000c15 	stw	fp,48(sp)
1000329c:	ddc00b15 	stw	r23,44(sp)
100032a0:	dd800a15 	stw	r22,40(sp)
100032a4:	dd000815 	stw	r20,32(sp)
100032a8:	dcc00715 	stw	r19,28(sp)
100032ac:	dc800615 	stw	r18,24(sp)
100032b0:	dc400515 	stw	r17,20(sp)
100032b4:	dc000415 	stw	r16,16(sp)
100032b8:	d9000015 	stw	r4,0(sp)
100032bc:	d9400115 	stw	r5,4(sp)
100032c0:	15407816 	blt	r2,r21,100034a4 <quorem+0x220>
100032c4:	ad7fffc4 	addi	r21,r21,-1
100032c8:	ad79883a 	add	fp,r21,r21
100032cc:	28c00504 	addi	r3,r5,20
100032d0:	e739883a 	add	fp,fp,fp
100032d4:	1f2f883a 	add	r23,r3,fp
100032d8:	24400504 	addi	r17,r4,20
100032dc:	8f39883a 	add	fp,r17,fp
100032e0:	b9400017 	ldw	r5,0(r23)
100032e4:	e1000017 	ldw	r4,0(fp)
100032e8:	d8c00215 	stw	r3,8(sp)
100032ec:	29400044 	addi	r5,r5,1
100032f0:	df000315 	stw	fp,12(sp)
100032f4:	000af0c0 	call	1000af0c <__udivsi3>
100032f8:	1021883a 	mov	r16,r2
100032fc:	10003026 	beq	r2,zero,100033c0 <quorem+0x13c>
10003300:	dcc00217 	ldw	r19,8(sp)
10003304:	8829883a 	mov	r20,r17
10003308:	002d883a 	mov	r22,zero
1000330c:	0039883a 	mov	fp,zero
10003310:	9c800017 	ldw	r18,0(r19)
10003314:	800b883a 	mov	r5,r16
10003318:	9cc00104 	addi	r19,r19,4
1000331c:	913fffcc 	andi	r4,r18,65535
10003320:	000af1c0 	call	1000af1c <__mulsi3>
10003324:	9008d43a 	srli	r4,r18,16
10003328:	800b883a 	mov	r5,r16
1000332c:	b0ad883a 	add	r22,r22,r2
10003330:	000af1c0 	call	1000af1c <__mulsi3>
10003334:	a1400017 	ldw	r5,0(r20)
10003338:	b010d43a 	srli	r8,r22,16
1000333c:	b0ffffcc 	andi	r3,r22,65535
10003340:	293fffcc 	andi	r4,r5,65535
10003344:	2709883a 	add	r4,r4,fp
10003348:	280cd43a 	srli	r6,r5,16
1000334c:	20c9c83a 	sub	r4,r4,r3
10003350:	4085883a 	add	r2,r8,r2
10003354:	2007d43a 	srai	r3,r4,16
10003358:	117fffcc 	andi	r5,r2,65535
1000335c:	314bc83a 	sub	r5,r6,r5
10003360:	28cb883a 	add	r5,r5,r3
10003364:	280c943a 	slli	r6,r5,16
10003368:	213fffcc 	andi	r4,r4,65535
1000336c:	102cd43a 	srli	r22,r2,16
10003370:	3108b03a 	or	r4,r6,r4
10003374:	a1000015 	stw	r4,0(r20)
10003378:	2839d43a 	srai	fp,r5,16
1000337c:	a5000104 	addi	r20,r20,4
10003380:	bcffe32e 	bgeu	r23,r19,10003310 <__alt_data_end+0xf8003310>
10003384:	d8c00317 	ldw	r3,12(sp)
10003388:	18800017 	ldw	r2,0(r3)
1000338c:	10000c1e 	bne	r2,zero,100033c0 <quorem+0x13c>
10003390:	18bfff04 	addi	r2,r3,-4
10003394:	8880082e 	bgeu	r17,r2,100033b8 <quorem+0x134>
10003398:	18ffff17 	ldw	r3,-4(r3)
1000339c:	18000326 	beq	r3,zero,100033ac <quorem+0x128>
100033a0:	00000506 	br	100033b8 <quorem+0x134>
100033a4:	10c00017 	ldw	r3,0(r2)
100033a8:	1800031e 	bne	r3,zero,100033b8 <quorem+0x134>
100033ac:	10bfff04 	addi	r2,r2,-4
100033b0:	ad7fffc4 	addi	r21,r21,-1
100033b4:	88bffb36 	bltu	r17,r2,100033a4 <__alt_data_end+0xf80033a4>
100033b8:	d8c00017 	ldw	r3,0(sp)
100033bc:	1d400415 	stw	r21,16(r3)
100033c0:	d9000017 	ldw	r4,0(sp)
100033c4:	d9400117 	ldw	r5,4(sp)
100033c8:	00073180 	call	10007318 <__mcmp>
100033cc:	10002816 	blt	r2,zero,10003470 <quorem+0x1ec>
100033d0:	d8c00217 	ldw	r3,8(sp)
100033d4:	84000044 	addi	r16,r16,1
100033d8:	880d883a 	mov	r6,r17
100033dc:	000f883a 	mov	r7,zero
100033e0:	32800017 	ldw	r10,0(r6)
100033e4:	1a400017 	ldw	r9,0(r3)
100033e8:	31800104 	addi	r6,r6,4
100033ec:	523fffcc 	andi	r8,r10,65535
100033f0:	48bfffcc 	andi	r2,r9,65535
100033f4:	41cf883a 	add	r7,r8,r7
100033f8:	3891c83a 	sub	r8,r7,r2
100033fc:	4812d43a 	srli	r9,r9,16
10003400:	500ed43a 	srli	r7,r10,16
10003404:	4005d43a 	srai	r2,r8,16
10003408:	423fffcc 	andi	r8,r8,65535
1000340c:	3a4fc83a 	sub	r7,r7,r9
10003410:	388f883a 	add	r7,r7,r2
10003414:	3804943a 	slli	r2,r7,16
10003418:	18c00104 	addi	r3,r3,4
1000341c:	380fd43a 	srai	r7,r7,16
10003420:	1210b03a 	or	r8,r2,r8
10003424:	323fff15 	stw	r8,-4(r6)
10003428:	b8ffed2e 	bgeu	r23,r3,100033e0 <__alt_data_end+0xf80033e0>
1000342c:	ad45883a 	add	r2,r21,r21
10003430:	1085883a 	add	r2,r2,r2
10003434:	8887883a 	add	r3,r17,r2
10003438:	18800017 	ldw	r2,0(r3)
1000343c:	10000c1e 	bne	r2,zero,10003470 <quorem+0x1ec>
10003440:	18bfff04 	addi	r2,r3,-4
10003444:	8880082e 	bgeu	r17,r2,10003468 <quorem+0x1e4>
10003448:	18ffff17 	ldw	r3,-4(r3)
1000344c:	18000326 	beq	r3,zero,1000345c <quorem+0x1d8>
10003450:	00000506 	br	10003468 <quorem+0x1e4>
10003454:	10c00017 	ldw	r3,0(r2)
10003458:	1800031e 	bne	r3,zero,10003468 <quorem+0x1e4>
1000345c:	10bfff04 	addi	r2,r2,-4
10003460:	ad7fffc4 	addi	r21,r21,-1
10003464:	88bffb36 	bltu	r17,r2,10003454 <__alt_data_end+0xf8003454>
10003468:	d8c00017 	ldw	r3,0(sp)
1000346c:	1d400415 	stw	r21,16(r3)
10003470:	8005883a 	mov	r2,r16
10003474:	dfc00d17 	ldw	ra,52(sp)
10003478:	df000c17 	ldw	fp,48(sp)
1000347c:	ddc00b17 	ldw	r23,44(sp)
10003480:	dd800a17 	ldw	r22,40(sp)
10003484:	dd400917 	ldw	r21,36(sp)
10003488:	dd000817 	ldw	r20,32(sp)
1000348c:	dcc00717 	ldw	r19,28(sp)
10003490:	dc800617 	ldw	r18,24(sp)
10003494:	dc400517 	ldw	r17,20(sp)
10003498:	dc000417 	ldw	r16,16(sp)
1000349c:	dec00e04 	addi	sp,sp,56
100034a0:	f800283a 	ret
100034a4:	0005883a 	mov	r2,zero
100034a8:	003ff206 	br	10003474 <__alt_data_end+0xf8003474>

100034ac <_dtoa_r>:
100034ac:	20801017 	ldw	r2,64(r4)
100034b0:	deffdf04 	addi	sp,sp,-132
100034b4:	dcc01a15 	stw	r19,104(sp)
100034b8:	dc801915 	stw	r18,100(sp)
100034bc:	dc401815 	stw	r17,96(sp)
100034c0:	dc001715 	stw	r16,92(sp)
100034c4:	dfc02015 	stw	ra,128(sp)
100034c8:	df001f15 	stw	fp,124(sp)
100034cc:	ddc01e15 	stw	r23,120(sp)
100034d0:	dd801d15 	stw	r22,116(sp)
100034d4:	dd401c15 	stw	r21,112(sp)
100034d8:	dd001b15 	stw	r20,108(sp)
100034dc:	d9400315 	stw	r5,12(sp)
100034e0:	d9c00415 	stw	r7,16(sp)
100034e4:	2021883a 	mov	r16,r4
100034e8:	3023883a 	mov	r17,r6
100034ec:	dcc02317 	ldw	r19,140(sp)
100034f0:	3025883a 	mov	r18,r6
100034f4:	10000826 	beq	r2,zero,10003518 <_dtoa_r+0x6c>
100034f8:	20c01117 	ldw	r3,68(r4)
100034fc:	01800044 	movi	r6,1
10003500:	100b883a 	mov	r5,r2
10003504:	30cc983a 	sll	r6,r6,r3
10003508:	10c00115 	stw	r3,4(r2)
1000350c:	11800215 	stw	r6,8(r2)
10003510:	0006a500 	call	10006a50 <_Bfree>
10003514:	80001015 	stw	zero,64(r16)
10003518:	88002e16 	blt	r17,zero,100035d4 <_dtoa_r+0x128>
1000351c:	98000015 	stw	zero,0(r19)
10003520:	88dffc2c 	andhi	r3,r17,32752
10003524:	009ffc34 	movhi	r2,32752
10003528:	18801b26 	beq	r3,r2,10003598 <_dtoa_r+0xec>
1000352c:	d9000317 	ldw	r4,12(sp)
10003530:	900b883a 	mov	r5,r18
10003534:	000d883a 	mov	r6,zero
10003538:	000f883a 	mov	r7,zero
1000353c:	000c15c0 	call	1000c15c <__eqdf2>
10003540:	10002b1e 	bne	r2,zero,100035f0 <_dtoa_r+0x144>
10003544:	d8c02217 	ldw	r3,136(sp)
10003548:	d9002417 	ldw	r4,144(sp)
1000354c:	00800044 	movi	r2,1
10003550:	18800015 	stw	r2,0(r3)
10003554:	2001a026 	beq	r4,zero,10003bd8 <_dtoa_r+0x72c>
10003558:	00840074 	movhi	r2,4097
1000355c:	10bf6b44 	addi	r2,r2,-595
10003560:	20800015 	stw	r2,0(r4)
10003564:	10bfffc4 	addi	r2,r2,-1
10003568:	dfc02017 	ldw	ra,128(sp)
1000356c:	df001f17 	ldw	fp,124(sp)
10003570:	ddc01e17 	ldw	r23,120(sp)
10003574:	dd801d17 	ldw	r22,116(sp)
10003578:	dd401c17 	ldw	r21,112(sp)
1000357c:	dd001b17 	ldw	r20,108(sp)
10003580:	dcc01a17 	ldw	r19,104(sp)
10003584:	dc801917 	ldw	r18,100(sp)
10003588:	dc401817 	ldw	r17,96(sp)
1000358c:	dc001717 	ldw	r16,92(sp)
10003590:	dec02104 	addi	sp,sp,132
10003594:	f800283a 	ret
10003598:	d8c02217 	ldw	r3,136(sp)
1000359c:	d9000317 	ldw	r4,12(sp)
100035a0:	0089c3c4 	movi	r2,9999
100035a4:	18800015 	stw	r2,0(r3)
100035a8:	20017926 	beq	r4,zero,10003b90 <_dtoa_r+0x6e4>
100035ac:	00840074 	movhi	r2,4097
100035b0:	10bf7704 	addi	r2,r2,-548
100035b4:	d9802417 	ldw	r6,144(sp)
100035b8:	303feb26 	beq	r6,zero,10003568 <__alt_data_end+0xf8003568>
100035bc:	10c000c7 	ldb	r3,3(r2)
100035c0:	18017a1e 	bne	r3,zero,10003bac <_dtoa_r+0x700>
100035c4:	10c000c4 	addi	r3,r2,3
100035c8:	d9c02417 	ldw	r7,144(sp)
100035cc:	38c00015 	stw	r3,0(r7)
100035d0:	003fe506 	br	10003568 <__alt_data_end+0xf8003568>
100035d4:	04a00034 	movhi	r18,32768
100035d8:	94bfffc4 	addi	r18,r18,-1
100035dc:	8ca4703a 	and	r18,r17,r18
100035e0:	00800044 	movi	r2,1
100035e4:	98800015 	stw	r2,0(r19)
100035e8:	9023883a 	mov	r17,r18
100035ec:	003fcc06 	br	10003520 <__alt_data_end+0xf8003520>
100035f0:	d9400317 	ldw	r5,12(sp)
100035f4:	d8800204 	addi	r2,sp,8
100035f8:	8828d53a 	srli	r20,r17,20
100035fc:	d8800015 	stw	r2,0(sp)
10003600:	8009883a 	mov	r4,r16
10003604:	900d883a 	mov	r6,r18
10003608:	d9c00104 	addi	r7,sp,4
1000360c:	00076780 	call	10007678 <__d2b>
10003610:	1039883a 	mov	fp,r2
10003614:	a001671e 	bne	r20,zero,10003bb4 <_dtoa_r+0x708>
10003618:	dd400217 	ldw	r21,8(sp)
1000361c:	dd000117 	ldw	r20,4(sp)
10003620:	00befbc4 	movi	r2,-1041
10003624:	ad29883a 	add	r20,r21,r20
10003628:	a082d616 	blt	r20,r2,10004184 <_dtoa_r+0xcd8>
1000362c:	d9800317 	ldw	r6,12(sp)
10003630:	013f0384 	movi	r4,-1010
10003634:	2509c83a 	sub	r4,r4,r20
10003638:	a0810484 	addi	r2,r20,1042
1000363c:	8922983a 	sll	r17,r17,r4
10003640:	3084d83a 	srl	r2,r6,r2
10003644:	8888b03a 	or	r4,r17,r2
10003648:	000d57c0 	call	1000d57c <__floatunsidf>
1000364c:	1009883a 	mov	r4,r2
10003650:	017f8434 	movhi	r5,65040
10003654:	00800044 	movi	r2,1
10003658:	194b883a 	add	r5,r3,r5
1000365c:	a53fffc4 	addi	r20,r20,-1
10003660:	d8800f15 	stw	r2,60(sp)
10003664:	000d883a 	mov	r6,zero
10003668:	01cffe34 	movhi	r7,16376
1000366c:	000cba40 	call	1000cba4 <__subdf3>
10003670:	1009883a 	mov	r4,r2
10003674:	180b883a 	mov	r5,r3
10003678:	0198dbf4 	movhi	r6,25455
1000367c:	3190d844 	addi	r6,r6,17249
10003680:	01cff4f4 	movhi	r7,16339
10003684:	39e1e9c4 	addi	r7,r7,-30809
10003688:	000c3a40 	call	1000c3a4 <__muldf3>
1000368c:	180b883a 	mov	r5,r3
10003690:	01a2d874 	movhi	r6,35681
10003694:	31b22cc4 	addi	r6,r6,-14157
10003698:	01cff1f4 	movhi	r7,16327
1000369c:	39e28a04 	addi	r7,r7,-30168
100036a0:	1009883a 	mov	r4,r2
100036a4:	000af440 	call	1000af44 <__adddf3>
100036a8:	a009883a 	mov	r4,r20
100036ac:	1027883a 	mov	r19,r2
100036b0:	1823883a 	mov	r17,r3
100036b4:	000d4ac0 	call	1000d4ac <__floatsidf>
100036b8:	1009883a 	mov	r4,r2
100036bc:	180b883a 	mov	r5,r3
100036c0:	019427f4 	movhi	r6,20639
100036c4:	319e7ec4 	addi	r6,r6,31227
100036c8:	01cff4f4 	movhi	r7,16339
100036cc:	39d104c4 	addi	r7,r7,17427
100036d0:	000c3a40 	call	1000c3a4 <__muldf3>
100036d4:	9809883a 	mov	r4,r19
100036d8:	880b883a 	mov	r5,r17
100036dc:	100d883a 	mov	r6,r2
100036e0:	180f883a 	mov	r7,r3
100036e4:	000af440 	call	1000af44 <__adddf3>
100036e8:	1009883a 	mov	r4,r2
100036ec:	180b883a 	mov	r5,r3
100036f0:	1027883a 	mov	r19,r2
100036f4:	1823883a 	mov	r17,r3
100036f8:	000d42c0 	call	1000d42c <__fixdfsi>
100036fc:	9809883a 	mov	r4,r19
10003700:	880b883a 	mov	r5,r17
10003704:	000d883a 	mov	r6,zero
10003708:	000f883a 	mov	r7,zero
1000370c:	d8800615 	stw	r2,24(sp)
10003710:	000c2b80 	call	1000c2b8 <__ledf2>
10003714:	10028416 	blt	r2,zero,10004128 <_dtoa_r+0xc7c>
10003718:	d9000617 	ldw	r4,24(sp)
1000371c:	00800584 	movi	r2,22
10003720:	11027236 	bltu	r2,r4,100040ec <_dtoa_r+0xc40>
10003724:	200490fa 	slli	r2,r4,3
10003728:	00c40074 	movhi	r3,4097
1000372c:	18ff9304 	addi	r3,r3,-436
10003730:	d9800317 	ldw	r6,12(sp)
10003734:	1885883a 	add	r2,r3,r2
10003738:	11000017 	ldw	r4,0(r2)
1000373c:	11400117 	ldw	r5,4(r2)
10003740:	900f883a 	mov	r7,r18
10003744:	000c1e00 	call	1000c1e0 <__gedf2>
10003748:	0082930e 	bge	zero,r2,10004198 <_dtoa_r+0xcec>
1000374c:	d9800617 	ldw	r6,24(sp)
10003750:	d8000e15 	stw	zero,56(sp)
10003754:	31bfffc4 	addi	r6,r6,-1
10003758:	d9800615 	stw	r6,24(sp)
1000375c:	ad2bc83a 	sub	r21,r21,r20
10003760:	ad7fffc4 	addi	r21,r21,-1
10003764:	a8026c16 	blt	r21,zero,10004118 <_dtoa_r+0xc6c>
10003768:	d8000815 	stw	zero,32(sp)
1000376c:	d8800617 	ldw	r2,24(sp)
10003770:	10026116 	blt	r2,zero,100040f8 <_dtoa_r+0xc4c>
10003774:	a8ab883a 	add	r21,r21,r2
10003778:	d8800b15 	stw	r2,44(sp)
1000377c:	d8000a15 	stw	zero,40(sp)
10003780:	d9c00417 	ldw	r7,16(sp)
10003784:	00800244 	movi	r2,9
10003788:	11c11636 	bltu	r2,r7,10003be4 <_dtoa_r+0x738>
1000378c:	00800144 	movi	r2,5
10003790:	11c4cc0e 	bge	r2,r7,10004ac4 <_dtoa_r+0x1618>
10003794:	39ffff04 	addi	r7,r7,-4
10003798:	d9c00415 	stw	r7,16(sp)
1000379c:	0027883a 	mov	r19,zero
100037a0:	d8c00417 	ldw	r3,16(sp)
100037a4:	008000c4 	movi	r2,3
100037a8:	1883aa26 	beq	r3,r2,10004654 <_dtoa_r+0x11a8>
100037ac:	10c35b0e 	bge	r2,r3,1000451c <_dtoa_r+0x1070>
100037b0:	d9000417 	ldw	r4,16(sp)
100037b4:	00800104 	movi	r2,4
100037b8:	2082da26 	beq	r4,r2,10004324 <_dtoa_r+0xe78>
100037bc:	00800144 	movi	r2,5
100037c0:	2081091e 	bne	r4,r2,10003be8 <_dtoa_r+0x73c>
100037c4:	01c00044 	movi	r7,1
100037c8:	d9c00c15 	stw	r7,48(sp)
100037cc:	d8c02117 	ldw	r3,132(sp)
100037d0:	d9000617 	ldw	r4,24(sp)
100037d4:	1907883a 	add	r3,r3,r4
100037d8:	19800044 	addi	r6,r3,1
100037dc:	d8c00d15 	stw	r3,52(sp)
100037e0:	d9800915 	stw	r6,36(sp)
100037e4:	0183a90e 	bge	zero,r6,1000468c <_dtoa_r+0x11e0>
100037e8:	d9800917 	ldw	r6,36(sp)
100037ec:	80001115 	stw	zero,68(r16)
100037f0:	008005c4 	movi	r2,23
100037f4:	1184b52e 	bgeu	r2,r6,10004acc <_dtoa_r+0x1620>
100037f8:	00c00044 	movi	r3,1
100037fc:	00800104 	movi	r2,4
10003800:	1085883a 	add	r2,r2,r2
10003804:	11000504 	addi	r4,r2,20
10003808:	180b883a 	mov	r5,r3
1000380c:	18c00044 	addi	r3,r3,1
10003810:	313ffb2e 	bgeu	r6,r4,10003800 <__alt_data_end+0xf8003800>
10003814:	81401115 	stw	r5,68(r16)
10003818:	3023883a 	mov	r17,r6
1000381c:	8009883a 	mov	r4,r16
10003820:	00069a80 	call	100069a8 <_Balloc>
10003824:	d8800715 	stw	r2,28(sp)
10003828:	80801015 	stw	r2,64(r16)
1000382c:	00800384 	movi	r2,14
10003830:	1440f936 	bltu	r2,r17,10003c18 <_dtoa_r+0x76c>
10003834:	9800f826 	beq	r19,zero,10003c18 <_dtoa_r+0x76c>
10003838:	d9c00617 	ldw	r7,24(sp)
1000383c:	01c39c0e 	bge	zero,r7,100046b0 <_dtoa_r+0x1204>
10003840:	388003cc 	andi	r2,r7,15
10003844:	100490fa 	slli	r2,r2,3
10003848:	382dd13a 	srai	r22,r7,4
1000384c:	00c40074 	movhi	r3,4097
10003850:	18ff9304 	addi	r3,r3,-436
10003854:	1885883a 	add	r2,r3,r2
10003858:	b0c0040c 	andi	r3,r22,16
1000385c:	12800017 	ldw	r10,0(r2)
10003860:	12400117 	ldw	r9,4(r2)
10003864:	18038526 	beq	r3,zero,1000467c <_dtoa_r+0x11d0>
10003868:	00840074 	movhi	r2,4097
1000386c:	10bf8904 	addi	r2,r2,-476
10003870:	11800817 	ldw	r6,32(r2)
10003874:	11c00917 	ldw	r7,36(r2)
10003878:	d9000317 	ldw	r4,12(sp)
1000387c:	900b883a 	mov	r5,r18
10003880:	da401515 	stw	r9,84(sp)
10003884:	da801615 	stw	r10,88(sp)
10003888:	000b7c00 	call	1000b7c0 <__divdf3>
1000388c:	da401517 	ldw	r9,84(sp)
10003890:	da801617 	ldw	r10,88(sp)
10003894:	1027883a 	mov	r19,r2
10003898:	1829883a 	mov	r20,r3
1000389c:	b58003cc 	andi	r22,r22,15
100038a0:	044000c4 	movi	r17,3
100038a4:	b0001126 	beq	r22,zero,100038ec <_dtoa_r+0x440>
100038a8:	05c40074 	movhi	r23,4097
100038ac:	bdff8904 	addi	r23,r23,-476
100038b0:	5005883a 	mov	r2,r10
100038b4:	4807883a 	mov	r3,r9
100038b8:	b180004c 	andi	r6,r22,1
100038bc:	1009883a 	mov	r4,r2
100038c0:	b02dd07a 	srai	r22,r22,1
100038c4:	180b883a 	mov	r5,r3
100038c8:	30000426 	beq	r6,zero,100038dc <_dtoa_r+0x430>
100038cc:	b9800017 	ldw	r6,0(r23)
100038d0:	b9c00117 	ldw	r7,4(r23)
100038d4:	8c400044 	addi	r17,r17,1
100038d8:	000c3a40 	call	1000c3a4 <__muldf3>
100038dc:	bdc00204 	addi	r23,r23,8
100038e0:	b03ff51e 	bne	r22,zero,100038b8 <__alt_data_end+0xf80038b8>
100038e4:	1015883a 	mov	r10,r2
100038e8:	1813883a 	mov	r9,r3
100038ec:	9809883a 	mov	r4,r19
100038f0:	a00b883a 	mov	r5,r20
100038f4:	500d883a 	mov	r6,r10
100038f8:	480f883a 	mov	r7,r9
100038fc:	000b7c00 	call	1000b7c0 <__divdf3>
10003900:	1027883a 	mov	r19,r2
10003904:	1829883a 	mov	r20,r3
10003908:	d8c00e17 	ldw	r3,56(sp)
1000390c:	18000626 	beq	r3,zero,10003928 <_dtoa_r+0x47c>
10003910:	9809883a 	mov	r4,r19
10003914:	a00b883a 	mov	r5,r20
10003918:	000d883a 	mov	r6,zero
1000391c:	01cffc34 	movhi	r7,16368
10003920:	000c2b80 	call	1000c2b8 <__ledf2>
10003924:	10041516 	blt	r2,zero,1000497c <_dtoa_r+0x14d0>
10003928:	8809883a 	mov	r4,r17
1000392c:	000d4ac0 	call	1000d4ac <__floatsidf>
10003930:	1009883a 	mov	r4,r2
10003934:	180b883a 	mov	r5,r3
10003938:	980d883a 	mov	r6,r19
1000393c:	a00f883a 	mov	r7,r20
10003940:	000c3a40 	call	1000c3a4 <__muldf3>
10003944:	1009883a 	mov	r4,r2
10003948:	180b883a 	mov	r5,r3
1000394c:	000d883a 	mov	r6,zero
10003950:	01d00734 	movhi	r7,16412
10003954:	000af440 	call	1000af44 <__adddf3>
10003958:	1023883a 	mov	r17,r2
1000395c:	d8800917 	ldw	r2,36(sp)
10003960:	05bf3034 	movhi	r22,64704
10003964:	1daf883a 	add	r23,r3,r22
10003968:	10031e26 	beq	r2,zero,100045e4 <_dtoa_r+0x1138>
1000396c:	d8c00617 	ldw	r3,24(sp)
10003970:	dac00917 	ldw	r11,36(sp)
10003974:	d8c01315 	stw	r3,76(sp)
10003978:	d9000c17 	ldw	r4,48(sp)
1000397c:	20039626 	beq	r4,zero,100047d8 <_dtoa_r+0x132c>
10003980:	58bfffc4 	addi	r2,r11,-1
10003984:	100490fa 	slli	r2,r2,3
10003988:	00c40074 	movhi	r3,4097
1000398c:	18ff9304 	addi	r3,r3,-436
10003990:	0009883a 	mov	r4,zero
10003994:	1885883a 	add	r2,r3,r2
10003998:	11800017 	ldw	r6,0(r2)
1000399c:	11c00117 	ldw	r7,4(r2)
100039a0:	d8800717 	ldw	r2,28(sp)
100039a4:	014ff834 	movhi	r5,16352
100039a8:	dac01615 	stw	r11,88(sp)
100039ac:	15800044 	addi	r22,r2,1
100039b0:	000b7c00 	call	1000b7c0 <__divdf3>
100039b4:	880d883a 	mov	r6,r17
100039b8:	b80f883a 	mov	r7,r23
100039bc:	1009883a 	mov	r4,r2
100039c0:	180b883a 	mov	r5,r3
100039c4:	000cba40 	call	1000cba4 <__subdf3>
100039c8:	a00b883a 	mov	r5,r20
100039cc:	9809883a 	mov	r4,r19
100039d0:	102f883a 	mov	r23,r2
100039d4:	d8c01015 	stw	r3,64(sp)
100039d8:	000d42c0 	call	1000d42c <__fixdfsi>
100039dc:	1009883a 	mov	r4,r2
100039e0:	d8801515 	stw	r2,84(sp)
100039e4:	000d4ac0 	call	1000d4ac <__floatsidf>
100039e8:	9809883a 	mov	r4,r19
100039ec:	a00b883a 	mov	r5,r20
100039f0:	100d883a 	mov	r6,r2
100039f4:	180f883a 	mov	r7,r3
100039f8:	000cba40 	call	1000cba4 <__subdf3>
100039fc:	da401517 	ldw	r9,84(sp)
10003a00:	1827883a 	mov	r19,r3
10003a04:	d8c00717 	ldw	r3,28(sp)
10003a08:	d9401017 	ldw	r5,64(sp)
10003a0c:	4a400c04 	addi	r9,r9,48
10003a10:	1023883a 	mov	r17,r2
10003a14:	1a400005 	stb	r9,0(r3)
10003a18:	b809883a 	mov	r4,r23
10003a1c:	880d883a 	mov	r6,r17
10003a20:	980f883a 	mov	r7,r19
10003a24:	4829883a 	mov	r20,r9
10003a28:	000c1e00 	call	1000c1e0 <__gedf2>
10003a2c:	00842216 	blt	zero,r2,10004ab8 <_dtoa_r+0x160c>
10003a30:	0009883a 	mov	r4,zero
10003a34:	014ffc34 	movhi	r5,16368
10003a38:	880d883a 	mov	r6,r17
10003a3c:	980f883a 	mov	r7,r19
10003a40:	000cba40 	call	1000cba4 <__subdf3>
10003a44:	d9401017 	ldw	r5,64(sp)
10003a48:	b809883a 	mov	r4,r23
10003a4c:	100d883a 	mov	r6,r2
10003a50:	180f883a 	mov	r7,r3
10003a54:	000c1e00 	call	1000c1e0 <__gedf2>
10003a58:	dac01617 	ldw	r11,88(sp)
10003a5c:	00841316 	blt	zero,r2,10004aac <_dtoa_r+0x1600>
10003a60:	00800044 	movi	r2,1
10003a64:	12c06c0e 	bge	r2,r11,10003c18 <_dtoa_r+0x76c>
10003a68:	d9000717 	ldw	r4,28(sp)
10003a6c:	dd401215 	stw	r21,72(sp)
10003a70:	dc001115 	stw	r16,68(sp)
10003a74:	22d7883a 	add	r11,r4,r11
10003a78:	dc801415 	stw	r18,80(sp)
10003a7c:	582b883a 	mov	r21,r11
10003a80:	b021883a 	mov	r16,r22
10003a84:	dc801017 	ldw	r18,64(sp)
10003a88:	00000906 	br	10003ab0 <_dtoa_r+0x604>
10003a8c:	000cba40 	call	1000cba4 <__subdf3>
10003a90:	1009883a 	mov	r4,r2
10003a94:	180b883a 	mov	r5,r3
10003a98:	b80d883a 	mov	r6,r23
10003a9c:	900f883a 	mov	r7,r18
10003aa0:	000c2b80 	call	1000c2b8 <__ledf2>
10003aa4:	1003ea16 	blt	r2,zero,10004a50 <_dtoa_r+0x15a4>
10003aa8:	b543ed26 	beq	r22,r21,10004a60 <_dtoa_r+0x15b4>
10003aac:	b021883a 	mov	r16,r22
10003ab0:	b809883a 	mov	r4,r23
10003ab4:	900b883a 	mov	r5,r18
10003ab8:	000d883a 	mov	r6,zero
10003abc:	01d00934 	movhi	r7,16420
10003ac0:	000c3a40 	call	1000c3a4 <__muldf3>
10003ac4:	000d883a 	mov	r6,zero
10003ac8:	01d00934 	movhi	r7,16420
10003acc:	8809883a 	mov	r4,r17
10003ad0:	980b883a 	mov	r5,r19
10003ad4:	102f883a 	mov	r23,r2
10003ad8:	1825883a 	mov	r18,r3
10003adc:	000c3a40 	call	1000c3a4 <__muldf3>
10003ae0:	180b883a 	mov	r5,r3
10003ae4:	1009883a 	mov	r4,r2
10003ae8:	1823883a 	mov	r17,r3
10003aec:	1027883a 	mov	r19,r2
10003af0:	000d42c0 	call	1000d42c <__fixdfsi>
10003af4:	1009883a 	mov	r4,r2
10003af8:	1029883a 	mov	r20,r2
10003afc:	000d4ac0 	call	1000d4ac <__floatsidf>
10003b00:	9809883a 	mov	r4,r19
10003b04:	880b883a 	mov	r5,r17
10003b08:	100d883a 	mov	r6,r2
10003b0c:	180f883a 	mov	r7,r3
10003b10:	000cba40 	call	1000cba4 <__subdf3>
10003b14:	a5000c04 	addi	r20,r20,48
10003b18:	1009883a 	mov	r4,r2
10003b1c:	180b883a 	mov	r5,r3
10003b20:	b80d883a 	mov	r6,r23
10003b24:	900f883a 	mov	r7,r18
10003b28:	85000005 	stb	r20,0(r16)
10003b2c:	1023883a 	mov	r17,r2
10003b30:	1827883a 	mov	r19,r3
10003b34:	000c2b80 	call	1000c2b8 <__ledf2>
10003b38:	b5800044 	addi	r22,r22,1
10003b3c:	0009883a 	mov	r4,zero
10003b40:	014ffc34 	movhi	r5,16368
10003b44:	880d883a 	mov	r6,r17
10003b48:	980f883a 	mov	r7,r19
10003b4c:	103fcf0e 	bge	r2,zero,10003a8c <__alt_data_end+0xf8003a8c>
10003b50:	d8c01317 	ldw	r3,76(sp)
10003b54:	dc001117 	ldw	r16,68(sp)
10003b58:	d8c00615 	stw	r3,24(sp)
10003b5c:	8009883a 	mov	r4,r16
10003b60:	e00b883a 	mov	r5,fp
10003b64:	0006a500 	call	10006a50 <_Bfree>
10003b68:	d9800617 	ldw	r6,24(sp)
10003b6c:	d9c02217 	ldw	r7,136(sp)
10003b70:	b0000005 	stb	zero,0(r22)
10003b74:	30800044 	addi	r2,r6,1
10003b78:	38800015 	stw	r2,0(r7)
10003b7c:	d8802417 	ldw	r2,144(sp)
10003b80:	10026426 	beq	r2,zero,10004514 <_dtoa_r+0x1068>
10003b84:	15800015 	stw	r22,0(r2)
10003b88:	d8800717 	ldw	r2,28(sp)
10003b8c:	003e7606 	br	10003568 <__alt_data_end+0xf8003568>
10003b90:	00800434 	movhi	r2,16
10003b94:	10bfffc4 	addi	r2,r2,-1
10003b98:	88a2703a 	and	r17,r17,r2
10003b9c:	883e831e 	bne	r17,zero,100035ac <__alt_data_end+0xf80035ac>
10003ba0:	00840074 	movhi	r2,4097
10003ba4:	10bf7404 	addi	r2,r2,-560
10003ba8:	003e8206 	br	100035b4 <__alt_data_end+0xf80035b4>
10003bac:	10c00204 	addi	r3,r2,8
10003bb0:	003e8506 	br	100035c8 <__alt_data_end+0xf80035c8>
10003bb4:	01400434 	movhi	r5,16
10003bb8:	297fffc4 	addi	r5,r5,-1
10003bbc:	914a703a 	and	r5,r18,r5
10003bc0:	d9000317 	ldw	r4,12(sp)
10003bc4:	294ffc34 	orhi	r5,r5,16368
10003bc8:	a53f0044 	addi	r20,r20,-1023
10003bcc:	dd400217 	ldw	r21,8(sp)
10003bd0:	d8000f15 	stw	zero,60(sp)
10003bd4:	003ea306 	br	10003664 <__alt_data_end+0xf8003664>
10003bd8:	00840074 	movhi	r2,4097
10003bdc:	10bf6b04 	addi	r2,r2,-596
10003be0:	003e6106 	br	10003568 <__alt_data_end+0xf8003568>
10003be4:	d8000415 	stw	zero,16(sp)
10003be8:	8009883a 	mov	r4,r16
10003bec:	80001115 	stw	zero,68(r16)
10003bf0:	000b883a 	mov	r5,zero
10003bf4:	00069a80 	call	100069a8 <_Balloc>
10003bf8:	00ffffc4 	movi	r3,-1
10003bfc:	01000044 	movi	r4,1
10003c00:	d8800715 	stw	r2,28(sp)
10003c04:	d8c00d15 	stw	r3,52(sp)
10003c08:	80801015 	stw	r2,64(r16)
10003c0c:	d8002115 	stw	zero,132(sp)
10003c10:	d8c00915 	stw	r3,36(sp)
10003c14:	d9000c15 	stw	r4,48(sp)
10003c18:	d8800117 	ldw	r2,4(sp)
10003c1c:	10008e16 	blt	r2,zero,10003e58 <_dtoa_r+0x9ac>
10003c20:	d9000617 	ldw	r4,24(sp)
10003c24:	00c00384 	movi	r3,14
10003c28:	19008b16 	blt	r3,r4,10003e58 <_dtoa_r+0x9ac>
10003c2c:	200490fa 	slli	r2,r4,3
10003c30:	d9802117 	ldw	r6,132(sp)
10003c34:	00c40074 	movhi	r3,4097
10003c38:	18ff9304 	addi	r3,r3,-436
10003c3c:	1885883a 	add	r2,r3,r2
10003c40:	14400017 	ldw	r17,0(r2)
10003c44:	14c00117 	ldw	r19,4(r2)
10003c48:	3001be16 	blt	r6,zero,10004344 <_dtoa_r+0xe98>
10003c4c:	d9000317 	ldw	r4,12(sp)
10003c50:	880d883a 	mov	r6,r17
10003c54:	980f883a 	mov	r7,r19
10003c58:	900b883a 	mov	r5,r18
10003c5c:	000b7c00 	call	1000b7c0 <__divdf3>
10003c60:	180b883a 	mov	r5,r3
10003c64:	1009883a 	mov	r4,r2
10003c68:	000d42c0 	call	1000d42c <__fixdfsi>
10003c6c:	1009883a 	mov	r4,r2
10003c70:	102f883a 	mov	r23,r2
10003c74:	000d4ac0 	call	1000d4ac <__floatsidf>
10003c78:	1009883a 	mov	r4,r2
10003c7c:	180b883a 	mov	r5,r3
10003c80:	880d883a 	mov	r6,r17
10003c84:	980f883a 	mov	r7,r19
10003c88:	000c3a40 	call	1000c3a4 <__muldf3>
10003c8c:	d9000317 	ldw	r4,12(sp)
10003c90:	900b883a 	mov	r5,r18
10003c94:	100d883a 	mov	r6,r2
10003c98:	180f883a 	mov	r7,r3
10003c9c:	000cba40 	call	1000cba4 <__subdf3>
10003ca0:	d9c00717 	ldw	r7,28(sp)
10003ca4:	1009883a 	mov	r4,r2
10003ca8:	b8800c04 	addi	r2,r23,48
10003cac:	38800005 	stb	r2,0(r7)
10003cb0:	3d800044 	addi	r22,r7,1
10003cb4:	d9c00917 	ldw	r7,36(sp)
10003cb8:	01800044 	movi	r6,1
10003cbc:	180b883a 	mov	r5,r3
10003cc0:	2005883a 	mov	r2,r4
10003cc4:	39803e26 	beq	r7,r6,10003dc0 <_dtoa_r+0x914>
10003cc8:	000d883a 	mov	r6,zero
10003ccc:	01d00934 	movhi	r7,16420
10003cd0:	000c3a40 	call	1000c3a4 <__muldf3>
10003cd4:	1009883a 	mov	r4,r2
10003cd8:	180b883a 	mov	r5,r3
10003cdc:	000d883a 	mov	r6,zero
10003ce0:	000f883a 	mov	r7,zero
10003ce4:	1029883a 	mov	r20,r2
10003ce8:	182b883a 	mov	r21,r3
10003cec:	000c15c0 	call	1000c15c <__eqdf2>
10003cf0:	103f9a26 	beq	r2,zero,10003b5c <__alt_data_end+0xf8003b5c>
10003cf4:	d8c00717 	ldw	r3,28(sp)
10003cf8:	d9000917 	ldw	r4,36(sp)
10003cfc:	b025883a 	mov	r18,r22
10003d00:	df000415 	stw	fp,16(sp)
10003d04:	1905883a 	add	r2,r3,r4
10003d08:	15ffffc4 	addi	r23,r2,-1
10003d0c:	dc000315 	stw	r16,12(sp)
10003d10:	00000a06 	br	10003d3c <_dtoa_r+0x890>
10003d14:	000c3a40 	call	1000c3a4 <__muldf3>
10003d18:	1009883a 	mov	r4,r2
10003d1c:	180b883a 	mov	r5,r3
10003d20:	000d883a 	mov	r6,zero
10003d24:	000f883a 	mov	r7,zero
10003d28:	1029883a 	mov	r20,r2
10003d2c:	182b883a 	mov	r21,r3
10003d30:	000c15c0 	call	1000c15c <__eqdf2>
10003d34:	10021926 	beq	r2,zero,1000459c <_dtoa_r+0x10f0>
10003d38:	e025883a 	mov	r18,fp
10003d3c:	880d883a 	mov	r6,r17
10003d40:	980f883a 	mov	r7,r19
10003d44:	a009883a 	mov	r4,r20
10003d48:	a80b883a 	mov	r5,r21
10003d4c:	000b7c00 	call	1000b7c0 <__divdf3>
10003d50:	180b883a 	mov	r5,r3
10003d54:	1009883a 	mov	r4,r2
10003d58:	000d42c0 	call	1000d42c <__fixdfsi>
10003d5c:	1009883a 	mov	r4,r2
10003d60:	1021883a 	mov	r16,r2
10003d64:	000d4ac0 	call	1000d4ac <__floatsidf>
10003d68:	1009883a 	mov	r4,r2
10003d6c:	180b883a 	mov	r5,r3
10003d70:	880d883a 	mov	r6,r17
10003d74:	980f883a 	mov	r7,r19
10003d78:	000c3a40 	call	1000c3a4 <__muldf3>
10003d7c:	a009883a 	mov	r4,r20
10003d80:	a80b883a 	mov	r5,r21
10003d84:	100d883a 	mov	r6,r2
10003d88:	180f883a 	mov	r7,r3
10003d8c:	000cba40 	call	1000cba4 <__subdf3>
10003d90:	82800c04 	addi	r10,r16,48
10003d94:	97000044 	addi	fp,r18,1
10003d98:	92800005 	stb	r10,0(r18)
10003d9c:	000d883a 	mov	r6,zero
10003da0:	01d00934 	movhi	r7,16420
10003da4:	1009883a 	mov	r4,r2
10003da8:	180b883a 	mov	r5,r3
10003dac:	e02d883a 	mov	r22,fp
10003db0:	95ffd81e 	bne	r18,r23,10003d14 <__alt_data_end+0xf8003d14>
10003db4:	802f883a 	mov	r23,r16
10003db8:	df000417 	ldw	fp,16(sp)
10003dbc:	dc000317 	ldw	r16,12(sp)
10003dc0:	1009883a 	mov	r4,r2
10003dc4:	180b883a 	mov	r5,r3
10003dc8:	100d883a 	mov	r6,r2
10003dcc:	180f883a 	mov	r7,r3
10003dd0:	000af440 	call	1000af44 <__adddf3>
10003dd4:	8809883a 	mov	r4,r17
10003dd8:	980b883a 	mov	r5,r19
10003ddc:	100d883a 	mov	r6,r2
10003de0:	180f883a 	mov	r7,r3
10003de4:	1025883a 	mov	r18,r2
10003de8:	1829883a 	mov	r20,r3
10003dec:	000c2b80 	call	1000c2b8 <__ledf2>
10003df0:	10000816 	blt	r2,zero,10003e14 <_dtoa_r+0x968>
10003df4:	8809883a 	mov	r4,r17
10003df8:	980b883a 	mov	r5,r19
10003dfc:	900d883a 	mov	r6,r18
10003e00:	a00f883a 	mov	r7,r20
10003e04:	000c15c0 	call	1000c15c <__eqdf2>
10003e08:	103f541e 	bne	r2,zero,10003b5c <__alt_data_end+0xf8003b5c>
10003e0c:	bdc0004c 	andi	r23,r23,1
10003e10:	b83f5226 	beq	r23,zero,10003b5c <__alt_data_end+0xf8003b5c>
10003e14:	b53fffc3 	ldbu	r20,-1(r22)
10003e18:	b0ffff84 	addi	r3,r22,-2
10003e1c:	01400e44 	movi	r5,57
10003e20:	d9800717 	ldw	r6,28(sp)
10003e24:	00000406 	br	10003e38 <_dtoa_r+0x98c>
10003e28:	30824326 	beq	r6,r2,10004738 <_dtoa_r+0x128c>
10003e2c:	1d000003 	ldbu	r20,0(r3)
10003e30:	102d883a 	mov	r22,r2
10003e34:	18ffffc4 	addi	r3,r3,-1
10003e38:	a1003fcc 	andi	r4,r20,255
10003e3c:	2100201c 	xori	r4,r4,128
10003e40:	213fe004 	addi	r4,r4,-128
10003e44:	b0bfffc4 	addi	r2,r22,-1
10003e48:	217ff726 	beq	r4,r5,10003e28 <__alt_data_end+0xf8003e28>
10003e4c:	a2400044 	addi	r9,r20,1
10003e50:	12400005 	stb	r9,0(r2)
10003e54:	003f4106 	br	10003b5c <__alt_data_end+0xf8003b5c>
10003e58:	d9000c17 	ldw	r4,48(sp)
10003e5c:	2000be26 	beq	r4,zero,10004158 <_dtoa_r+0xcac>
10003e60:	d9800417 	ldw	r6,16(sp)
10003e64:	00c00044 	movi	r3,1
10003e68:	19815e0e 	bge	r3,r6,100043e4 <_dtoa_r+0xf38>
10003e6c:	d8800917 	ldw	r2,36(sp)
10003e70:	d8c00a17 	ldw	r3,40(sp)
10003e74:	153fffc4 	addi	r20,r2,-1
10003e78:	1d01f816 	blt	r3,r20,1000465c <_dtoa_r+0x11b0>
10003e7c:	1d29c83a 	sub	r20,r3,r20
10003e80:	d9c00917 	ldw	r7,36(sp)
10003e84:	3802ad16 	blt	r7,zero,1000493c <_dtoa_r+0x1490>
10003e88:	dcc00817 	ldw	r19,32(sp)
10003e8c:	d8800917 	ldw	r2,36(sp)
10003e90:	d8c00817 	ldw	r3,32(sp)
10003e94:	8009883a 	mov	r4,r16
10003e98:	01400044 	movi	r5,1
10003e9c:	1887883a 	add	r3,r3,r2
10003ea0:	d8c00815 	stw	r3,32(sp)
10003ea4:	a8ab883a 	add	r21,r21,r2
10003ea8:	0006dd80 	call	10006dd8 <__i2b>
10003eac:	1023883a 	mov	r17,r2
10003eb0:	98000826 	beq	r19,zero,10003ed4 <_dtoa_r+0xa28>
10003eb4:	0540070e 	bge	zero,r21,10003ed4 <_dtoa_r+0xa28>
10003eb8:	a805883a 	mov	r2,r21
10003ebc:	9d411716 	blt	r19,r21,1000431c <_dtoa_r+0xe70>
10003ec0:	d9000817 	ldw	r4,32(sp)
10003ec4:	98a7c83a 	sub	r19,r19,r2
10003ec8:	a8abc83a 	sub	r21,r21,r2
10003ecc:	2089c83a 	sub	r4,r4,r2
10003ed0:	d9000815 	stw	r4,32(sp)
10003ed4:	d9800a17 	ldw	r6,40(sp)
10003ed8:	0180140e 	bge	zero,r6,10003f2c <_dtoa_r+0xa80>
10003edc:	d9c00c17 	ldw	r7,48(sp)
10003ee0:	3801d626 	beq	r7,zero,1000463c <_dtoa_r+0x1190>
10003ee4:	05000e0e 	bge	zero,r20,10003f20 <_dtoa_r+0xa74>
10003ee8:	880b883a 	mov	r5,r17
10003eec:	8009883a 	mov	r4,r16
10003ef0:	a00d883a 	mov	r6,r20
10003ef4:	00070800 	call	10007080 <__pow5mult>
10003ef8:	e00d883a 	mov	r6,fp
10003efc:	8009883a 	mov	r4,r16
10003f00:	100b883a 	mov	r5,r2
10003f04:	1023883a 	mov	r17,r2
10003f08:	0006e140 	call	10006e14 <__multiply>
10003f0c:	102d883a 	mov	r22,r2
10003f10:	e00b883a 	mov	r5,fp
10003f14:	8009883a 	mov	r4,r16
10003f18:	0006a500 	call	10006a50 <_Bfree>
10003f1c:	b039883a 	mov	fp,r22
10003f20:	d8800a17 	ldw	r2,40(sp)
10003f24:	150dc83a 	sub	r6,r2,r20
10003f28:	30011f1e 	bne	r6,zero,100043a8 <_dtoa_r+0xefc>
10003f2c:	8009883a 	mov	r4,r16
10003f30:	01400044 	movi	r5,1
10003f34:	0006dd80 	call	10006dd8 <__i2b>
10003f38:	d8c00b17 	ldw	r3,44(sp)
10003f3c:	1029883a 	mov	r20,r2
10003f40:	00c0050e 	bge	zero,r3,10003f58 <_dtoa_r+0xaac>
10003f44:	8009883a 	mov	r4,r16
10003f48:	100b883a 	mov	r5,r2
10003f4c:	180d883a 	mov	r6,r3
10003f50:	00070800 	call	10007080 <__pow5mult>
10003f54:	1029883a 	mov	r20,r2
10003f58:	d9000417 	ldw	r4,16(sp)
10003f5c:	00800044 	movi	r2,1
10003f60:	1100e00e 	bge	r2,r4,100042e4 <_dtoa_r+0xe38>
10003f64:	0025883a 	mov	r18,zero
10003f68:	d8800b17 	ldw	r2,44(sp)
10003f6c:	10015f1e 	bne	r2,zero,100044ec <_dtoa_r+0x1040>
10003f70:	00800044 	movi	r2,1
10003f74:	1545883a 	add	r2,r2,r21
10003f78:	108007cc 	andi	r2,r2,31
10003f7c:	10007a26 	beq	r2,zero,10004168 <_dtoa_r+0xcbc>
10003f80:	01000804 	movi	r4,32
10003f84:	2089c83a 	sub	r4,r4,r2
10003f88:	00c00104 	movi	r3,4
10003f8c:	1902d20e 	bge	r3,r4,10004ad8 <_dtoa_r+0x162c>
10003f90:	00c00704 	movi	r3,28
10003f94:	1885c83a 	sub	r2,r3,r2
10003f98:	d8c00817 	ldw	r3,32(sp)
10003f9c:	98a7883a 	add	r19,r19,r2
10003fa0:	a8ab883a 	add	r21,r21,r2
10003fa4:	1887883a 	add	r3,r3,r2
10003fa8:	d8c00815 	stw	r3,32(sp)
10003fac:	d9800817 	ldw	r6,32(sp)
10003fb0:	0180040e 	bge	zero,r6,10003fc4 <_dtoa_r+0xb18>
10003fb4:	e00b883a 	mov	r5,fp
10003fb8:	8009883a 	mov	r4,r16
10003fbc:	00071c80 	call	100071c8 <__lshift>
10003fc0:	1039883a 	mov	fp,r2
10003fc4:	0540050e 	bge	zero,r21,10003fdc <_dtoa_r+0xb30>
10003fc8:	a00b883a 	mov	r5,r20
10003fcc:	8009883a 	mov	r4,r16
10003fd0:	a80d883a 	mov	r6,r21
10003fd4:	00071c80 	call	100071c8 <__lshift>
10003fd8:	1029883a 	mov	r20,r2
10003fdc:	d9c00e17 	ldw	r7,56(sp)
10003fe0:	3801301e 	bne	r7,zero,100044a4 <_dtoa_r+0xff8>
10003fe4:	d9c00917 	ldw	r7,36(sp)
10003fe8:	01c1500e 	bge	zero,r7,1000452c <_dtoa_r+0x1080>
10003fec:	d8800c17 	ldw	r2,48(sp)
10003ff0:	10006b1e 	bne	r2,zero,100041a0 <_dtoa_r+0xcf4>
10003ff4:	dc800717 	ldw	r18,28(sp)
10003ff8:	dcc00917 	ldw	r19,36(sp)
10003ffc:	902b883a 	mov	r21,r18
10004000:	00000206 	br	1000400c <_dtoa_r+0xb60>
10004004:	0006a780 	call	10006a78 <__multadd>
10004008:	1039883a 	mov	fp,r2
1000400c:	e009883a 	mov	r4,fp
10004010:	a00b883a 	mov	r5,r20
10004014:	00032840 	call	10003284 <quorem>
10004018:	10800c04 	addi	r2,r2,48
1000401c:	90800005 	stb	r2,0(r18)
10004020:	94800044 	addi	r18,r18,1
10004024:	9547c83a 	sub	r3,r18,r21
10004028:	8009883a 	mov	r4,r16
1000402c:	e00b883a 	mov	r5,fp
10004030:	01800284 	movi	r6,10
10004034:	000f883a 	mov	r7,zero
10004038:	1cfff216 	blt	r3,r19,10004004 <__alt_data_end+0xf8004004>
1000403c:	102f883a 	mov	r23,r2
10004040:	d8800917 	ldw	r2,36(sp)
10004044:	0082410e 	bge	zero,r2,1000494c <_dtoa_r+0x14a0>
10004048:	d9000717 	ldw	r4,28(sp)
1000404c:	002b883a 	mov	r21,zero
10004050:	20ad883a 	add	r22,r4,r2
10004054:	e00b883a 	mov	r5,fp
10004058:	8009883a 	mov	r4,r16
1000405c:	01800044 	movi	r6,1
10004060:	00071c80 	call	100071c8 <__lshift>
10004064:	1009883a 	mov	r4,r2
10004068:	a00b883a 	mov	r5,r20
1000406c:	1039883a 	mov	fp,r2
10004070:	00073180 	call	10007318 <__mcmp>
10004074:	0080d10e 	bge	zero,r2,100043bc <_dtoa_r+0xf10>
10004078:	b13fffc3 	ldbu	r4,-1(r22)
1000407c:	b0ffff84 	addi	r3,r22,-2
10004080:	01800e44 	movi	r6,57
10004084:	d9c00717 	ldw	r7,28(sp)
10004088:	00000406 	br	1000409c <_dtoa_r+0xbf0>
1000408c:	38813c26 	beq	r7,r2,10004580 <_dtoa_r+0x10d4>
10004090:	19000003 	ldbu	r4,0(r3)
10004094:	102d883a 	mov	r22,r2
10004098:	18ffffc4 	addi	r3,r3,-1
1000409c:	21403fcc 	andi	r5,r4,255
100040a0:	2940201c 	xori	r5,r5,128
100040a4:	297fe004 	addi	r5,r5,-128
100040a8:	b0bfffc4 	addi	r2,r22,-1
100040ac:	29bff726 	beq	r5,r6,1000408c <__alt_data_end+0xf800408c>
100040b0:	21000044 	addi	r4,r4,1
100040b4:	11000005 	stb	r4,0(r2)
100040b8:	8009883a 	mov	r4,r16
100040bc:	a00b883a 	mov	r5,r20
100040c0:	0006a500 	call	10006a50 <_Bfree>
100040c4:	883ea526 	beq	r17,zero,10003b5c <__alt_data_end+0xf8003b5c>
100040c8:	a8000426 	beq	r21,zero,100040dc <_dtoa_r+0xc30>
100040cc:	ac400326 	beq	r21,r17,100040dc <_dtoa_r+0xc30>
100040d0:	8009883a 	mov	r4,r16
100040d4:	a80b883a 	mov	r5,r21
100040d8:	0006a500 	call	10006a50 <_Bfree>
100040dc:	8009883a 	mov	r4,r16
100040e0:	880b883a 	mov	r5,r17
100040e4:	0006a500 	call	10006a50 <_Bfree>
100040e8:	003e9c06 	br	10003b5c <__alt_data_end+0xf8003b5c>
100040ec:	01c00044 	movi	r7,1
100040f0:	d9c00e15 	stw	r7,56(sp)
100040f4:	003d9906 	br	1000375c <__alt_data_end+0xf800375c>
100040f8:	d8c00817 	ldw	r3,32(sp)
100040fc:	d9000617 	ldw	r4,24(sp)
10004100:	d8000b15 	stw	zero,44(sp)
10004104:	1907c83a 	sub	r3,r3,r4
10004108:	010dc83a 	sub	r6,zero,r4
1000410c:	d8c00815 	stw	r3,32(sp)
10004110:	d9800a15 	stw	r6,40(sp)
10004114:	003d9a06 	br	10003780 <__alt_data_end+0xf8003780>
10004118:	056bc83a 	sub	r21,zero,r21
1000411c:	dd400815 	stw	r21,32(sp)
10004120:	002b883a 	mov	r21,zero
10004124:	003d9106 	br	1000376c <__alt_data_end+0xf800376c>
10004128:	d9000617 	ldw	r4,24(sp)
1000412c:	000d4ac0 	call	1000d4ac <__floatsidf>
10004130:	1009883a 	mov	r4,r2
10004134:	180b883a 	mov	r5,r3
10004138:	980d883a 	mov	r6,r19
1000413c:	880f883a 	mov	r7,r17
10004140:	000c15c0 	call	1000c15c <__eqdf2>
10004144:	103d7426 	beq	r2,zero,10003718 <__alt_data_end+0xf8003718>
10004148:	d8c00617 	ldw	r3,24(sp)
1000414c:	18ffffc4 	addi	r3,r3,-1
10004150:	d8c00615 	stw	r3,24(sp)
10004154:	003d7006 	br	10003718 <__alt_data_end+0xf8003718>
10004158:	dd000a17 	ldw	r20,40(sp)
1000415c:	dcc00817 	ldw	r19,32(sp)
10004160:	0023883a 	mov	r17,zero
10004164:	003f5206 	br	10003eb0 <__alt_data_end+0xf8003eb0>
10004168:	00800704 	movi	r2,28
1000416c:	d9000817 	ldw	r4,32(sp)
10004170:	98a7883a 	add	r19,r19,r2
10004174:	a8ab883a 	add	r21,r21,r2
10004178:	2089883a 	add	r4,r4,r2
1000417c:	d9000815 	stw	r4,32(sp)
10004180:	003f8a06 	br	10003fac <__alt_data_end+0xf8003fac>
10004184:	d9c00317 	ldw	r7,12(sp)
10004188:	013efb84 	movi	r4,-1042
1000418c:	2509c83a 	sub	r4,r4,r20
10004190:	3908983a 	sll	r4,r7,r4
10004194:	003d2c06 	br	10003648 <__alt_data_end+0xf8003648>
10004198:	d8000e15 	stw	zero,56(sp)
1000419c:	003d6f06 	br	1000375c <__alt_data_end+0xf800375c>
100041a0:	04c0050e 	bge	zero,r19,100041b8 <_dtoa_r+0xd0c>
100041a4:	880b883a 	mov	r5,r17
100041a8:	8009883a 	mov	r4,r16
100041ac:	980d883a 	mov	r6,r19
100041b0:	00071c80 	call	100071c8 <__lshift>
100041b4:	1023883a 	mov	r17,r2
100041b8:	9001681e 	bne	r18,zero,1000475c <_dtoa_r+0x12b0>
100041bc:	8827883a 	mov	r19,r17
100041c0:	d8c00717 	ldw	r3,28(sp)
100041c4:	d9000917 	ldw	r4,36(sp)
100041c8:	1dffffc4 	addi	r23,r3,-1
100041cc:	1825883a 	mov	r18,r3
100041d0:	d8c00317 	ldw	r3,12(sp)
100041d4:	b92f883a 	add	r23,r23,r4
100041d8:	ddc00515 	stw	r23,20(sp)
100041dc:	18c0004c 	andi	r3,r3,1
100041e0:	d8c00315 	stw	r3,12(sp)
100041e4:	e009883a 	mov	r4,fp
100041e8:	a00b883a 	mov	r5,r20
100041ec:	00032840 	call	10003284 <quorem>
100041f0:	e009883a 	mov	r4,fp
100041f4:	880b883a 	mov	r5,r17
100041f8:	102d883a 	mov	r22,r2
100041fc:	00073180 	call	10007318 <__mcmp>
10004200:	8009883a 	mov	r4,r16
10004204:	a00b883a 	mov	r5,r20
10004208:	980d883a 	mov	r6,r19
1000420c:	102b883a 	mov	r21,r2
10004210:	00073780 	call	10007378 <__mdiff>
10004214:	1007883a 	mov	r3,r2
10004218:	10800317 	ldw	r2,12(r2)
1000421c:	b5c00c04 	addi	r23,r22,48
10004220:	10009b1e 	bne	r2,zero,10004490 <_dtoa_r+0xfe4>
10004224:	180b883a 	mov	r5,r3
10004228:	e009883a 	mov	r4,fp
1000422c:	d8c01515 	stw	r3,84(sp)
10004230:	00073180 	call	10007318 <__mcmp>
10004234:	d8c01517 	ldw	r3,84(sp)
10004238:	8009883a 	mov	r4,r16
1000423c:	d8801515 	stw	r2,84(sp)
10004240:	180b883a 	mov	r5,r3
10004244:	0006a500 	call	10006a50 <_Bfree>
10004248:	d8801517 	ldw	r2,84(sp)
1000424c:	1000041e 	bne	r2,zero,10004260 <_dtoa_r+0xdb4>
10004250:	d9000417 	ldw	r4,16(sp)
10004254:	2000021e 	bne	r4,zero,10004260 <_dtoa_r+0xdb4>
10004258:	d8c00317 	ldw	r3,12(sp)
1000425c:	18007926 	beq	r3,zero,10004444 <_dtoa_r+0xf98>
10004260:	a8006616 	blt	r21,zero,100043fc <_dtoa_r+0xf50>
10004264:	a800041e 	bne	r21,zero,10004278 <_dtoa_r+0xdcc>
10004268:	d9000417 	ldw	r4,16(sp)
1000426c:	2000021e 	bne	r4,zero,10004278 <_dtoa_r+0xdcc>
10004270:	d8c00317 	ldw	r3,12(sp)
10004274:	18006126 	beq	r3,zero,100043fc <_dtoa_r+0xf50>
10004278:	00814916 	blt	zero,r2,100047a0 <_dtoa_r+0x12f4>
1000427c:	d8c00517 	ldw	r3,20(sp)
10004280:	95400044 	addi	r21,r18,1
10004284:	95c00005 	stb	r23,0(r18)
10004288:	a82d883a 	mov	r22,r21
1000428c:	90c14c26 	beq	r18,r3,100047c0 <_dtoa_r+0x1314>
10004290:	e00b883a 	mov	r5,fp
10004294:	8009883a 	mov	r4,r16
10004298:	01800284 	movi	r6,10
1000429c:	000f883a 	mov	r7,zero
100042a0:	0006a780 	call	10006a78 <__multadd>
100042a4:	1039883a 	mov	fp,r2
100042a8:	8cc07026 	beq	r17,r19,1000446c <_dtoa_r+0xfc0>
100042ac:	880b883a 	mov	r5,r17
100042b0:	01800284 	movi	r6,10
100042b4:	000f883a 	mov	r7,zero
100042b8:	8009883a 	mov	r4,r16
100042bc:	0006a780 	call	10006a78 <__multadd>
100042c0:	980b883a 	mov	r5,r19
100042c4:	8009883a 	mov	r4,r16
100042c8:	01800284 	movi	r6,10
100042cc:	000f883a 	mov	r7,zero
100042d0:	1023883a 	mov	r17,r2
100042d4:	0006a780 	call	10006a78 <__multadd>
100042d8:	1027883a 	mov	r19,r2
100042dc:	a825883a 	mov	r18,r21
100042e0:	003fc006 	br	100041e4 <__alt_data_end+0xf80041e4>
100042e4:	d9800317 	ldw	r6,12(sp)
100042e8:	303f1e1e 	bne	r6,zero,10003f64 <__alt_data_end+0xf8003f64>
100042ec:	00c00434 	movhi	r3,16
100042f0:	18ffffc4 	addi	r3,r3,-1
100042f4:	90c6703a 	and	r3,r18,r3
100042f8:	183f1a1e 	bne	r3,zero,10003f64 <__alt_data_end+0xf8003f64>
100042fc:	949ffc2c 	andhi	r18,r18,32752
10004300:	903f1826 	beq	r18,zero,10003f64 <__alt_data_end+0xf8003f64>
10004304:	d9c00817 	ldw	r7,32(sp)
10004308:	a8ab883a 	add	r21,r21,r2
1000430c:	1025883a 	mov	r18,r2
10004310:	388f883a 	add	r7,r7,r2
10004314:	d9c00815 	stw	r7,32(sp)
10004318:	003f1306 	br	10003f68 <__alt_data_end+0xf8003f68>
1000431c:	9805883a 	mov	r2,r19
10004320:	003ee706 	br	10003ec0 <__alt_data_end+0xf8003ec0>
10004324:	01800044 	movi	r6,1
10004328:	d9800c15 	stw	r6,48(sp)
1000432c:	d8802117 	ldw	r2,132(sp)
10004330:	0080da0e 	bge	zero,r2,1000469c <_dtoa_r+0x11f0>
10004334:	100d883a 	mov	r6,r2
10004338:	d8800d15 	stw	r2,52(sp)
1000433c:	d8800915 	stw	r2,36(sp)
10004340:	003d2a06 	br	100037ec <__alt_data_end+0xf80037ec>
10004344:	d8800917 	ldw	r2,36(sp)
10004348:	00be4016 	blt	zero,r2,10003c4c <__alt_data_end+0xf8003c4c>
1000434c:	1000b81e 	bne	r2,zero,10004630 <_dtoa_r+0x1184>
10004350:	8809883a 	mov	r4,r17
10004354:	980b883a 	mov	r5,r19
10004358:	000d883a 	mov	r6,zero
1000435c:	01d00534 	movhi	r7,16404
10004360:	000c3a40 	call	1000c3a4 <__muldf3>
10004364:	d9800317 	ldw	r6,12(sp)
10004368:	1009883a 	mov	r4,r2
1000436c:	180b883a 	mov	r5,r3
10004370:	900f883a 	mov	r7,r18
10004374:	000c1e00 	call	1000c1e0 <__gedf2>
10004378:	0029883a 	mov	r20,zero
1000437c:	0023883a 	mov	r17,zero
10004380:	10007716 	blt	r2,zero,10004560 <_dtoa_r+0x10b4>
10004384:	d9002117 	ldw	r4,132(sp)
10004388:	dd800717 	ldw	r22,28(sp)
1000438c:	0108303a 	nor	r4,zero,r4
10004390:	d9000615 	stw	r4,24(sp)
10004394:	8009883a 	mov	r4,r16
10004398:	a00b883a 	mov	r5,r20
1000439c:	0006a500 	call	10006a50 <_Bfree>
100043a0:	883f4e1e 	bne	r17,zero,100040dc <__alt_data_end+0xf80040dc>
100043a4:	003ded06 	br	10003b5c <__alt_data_end+0xf8003b5c>
100043a8:	e00b883a 	mov	r5,fp
100043ac:	8009883a 	mov	r4,r16
100043b0:	00070800 	call	10007080 <__pow5mult>
100043b4:	1039883a 	mov	fp,r2
100043b8:	003edc06 	br	10003f2c <__alt_data_end+0xf8003f2c>
100043bc:	1000021e 	bne	r2,zero,100043c8 <_dtoa_r+0xf1c>
100043c0:	ba40004c 	andi	r9,r23,1
100043c4:	483f2c1e 	bne	r9,zero,10004078 <__alt_data_end+0xf8004078>
100043c8:	01000c04 	movi	r4,48
100043cc:	00000106 	br	100043d4 <_dtoa_r+0xf28>
100043d0:	102d883a 	mov	r22,r2
100043d4:	b0bfffc4 	addi	r2,r22,-1
100043d8:	10c00007 	ldb	r3,0(r2)
100043dc:	193ffc26 	beq	r3,r4,100043d0 <__alt_data_end+0xf80043d0>
100043e0:	003f3506 	br	100040b8 <__alt_data_end+0xf80040b8>
100043e4:	d9c00f17 	ldw	r7,60(sp)
100043e8:	38015a26 	beq	r7,zero,10004954 <_dtoa_r+0x14a8>
100043ec:	10810cc4 	addi	r2,r2,1075
100043f0:	dd000a17 	ldw	r20,40(sp)
100043f4:	dcc00817 	ldw	r19,32(sp)
100043f8:	003ea506 	br	10003e90 <__alt_data_end+0xf8003e90>
100043fc:	00800c0e 	bge	zero,r2,10004430 <_dtoa_r+0xf84>
10004400:	e00b883a 	mov	r5,fp
10004404:	8009883a 	mov	r4,r16
10004408:	01800044 	movi	r6,1
1000440c:	00071c80 	call	100071c8 <__lshift>
10004410:	1009883a 	mov	r4,r2
10004414:	a00b883a 	mov	r5,r20
10004418:	1039883a 	mov	fp,r2
1000441c:	00073180 	call	10007318 <__mcmp>
10004420:	0081930e 	bge	zero,r2,10004a70 <_dtoa_r+0x15c4>
10004424:	00800e44 	movi	r2,57
10004428:	b8800a26 	beq	r23,r2,10004454 <_dtoa_r+0xfa8>
1000442c:	b5c00c44 	addi	r23,r22,49
10004430:	882b883a 	mov	r21,r17
10004434:	95800044 	addi	r22,r18,1
10004438:	95c00005 	stb	r23,0(r18)
1000443c:	9823883a 	mov	r17,r19
10004440:	003f1d06 	br	100040b8 <__alt_data_end+0xf80040b8>
10004444:	00800e44 	movi	r2,57
10004448:	b8800226 	beq	r23,r2,10004454 <_dtoa_r+0xfa8>
1000444c:	057ff716 	blt	zero,r21,1000442c <__alt_data_end+0xf800442c>
10004450:	003ff706 	br	10004430 <__alt_data_end+0xf8004430>
10004454:	01000e44 	movi	r4,57
10004458:	882b883a 	mov	r21,r17
1000445c:	95800044 	addi	r22,r18,1
10004460:	91000005 	stb	r4,0(r18)
10004464:	9823883a 	mov	r17,r19
10004468:	003f0406 	br	1000407c <__alt_data_end+0xf800407c>
1000446c:	880b883a 	mov	r5,r17
10004470:	8009883a 	mov	r4,r16
10004474:	01800284 	movi	r6,10
10004478:	000f883a 	mov	r7,zero
1000447c:	0006a780 	call	10006a78 <__multadd>
10004480:	1023883a 	mov	r17,r2
10004484:	1027883a 	mov	r19,r2
10004488:	a825883a 	mov	r18,r21
1000448c:	003f5506 	br	100041e4 <__alt_data_end+0xf80041e4>
10004490:	8009883a 	mov	r4,r16
10004494:	180b883a 	mov	r5,r3
10004498:	0006a500 	call	10006a50 <_Bfree>
1000449c:	00800044 	movi	r2,1
100044a0:	003f6f06 	br	10004260 <__alt_data_end+0xf8004260>
100044a4:	e009883a 	mov	r4,fp
100044a8:	a00b883a 	mov	r5,r20
100044ac:	00073180 	call	10007318 <__mcmp>
100044b0:	103ecc0e 	bge	r2,zero,10003fe4 <__alt_data_end+0xf8003fe4>
100044b4:	e00b883a 	mov	r5,fp
100044b8:	8009883a 	mov	r4,r16
100044bc:	01800284 	movi	r6,10
100044c0:	000f883a 	mov	r7,zero
100044c4:	0006a780 	call	10006a78 <__multadd>
100044c8:	1039883a 	mov	fp,r2
100044cc:	d8800617 	ldw	r2,24(sp)
100044d0:	d8c00c17 	ldw	r3,48(sp)
100044d4:	10bfffc4 	addi	r2,r2,-1
100044d8:	d8800615 	stw	r2,24(sp)
100044dc:	1801681e 	bne	r3,zero,10004a80 <_dtoa_r+0x15d4>
100044e0:	d9800d17 	ldw	r6,52(sp)
100044e4:	d9800915 	stw	r6,36(sp)
100044e8:	003ebe06 	br	10003fe4 <__alt_data_end+0xf8003fe4>
100044ec:	a0800417 	ldw	r2,16(r20)
100044f0:	10800104 	addi	r2,r2,4
100044f4:	1085883a 	add	r2,r2,r2
100044f8:	1085883a 	add	r2,r2,r2
100044fc:	a085883a 	add	r2,r20,r2
10004500:	11000017 	ldw	r4,0(r2)
10004504:	0006cc00 	call	10006cc0 <__hi0bits>
10004508:	00c00804 	movi	r3,32
1000450c:	1885c83a 	sub	r2,r3,r2
10004510:	003e9806 	br	10003f74 <__alt_data_end+0xf8003f74>
10004514:	d8800717 	ldw	r2,28(sp)
10004518:	003c1306 	br	10003568 <__alt_data_end+0xf8003568>
1000451c:	00800084 	movi	r2,2
10004520:	18bdb11e 	bne	r3,r2,10003be8 <__alt_data_end+0xf8003be8>
10004524:	d8000c15 	stw	zero,48(sp)
10004528:	003f8006 	br	1000432c <__alt_data_end+0xf800432c>
1000452c:	d8c00417 	ldw	r3,16(sp)
10004530:	00800084 	movi	r2,2
10004534:	10fead0e 	bge	r2,r3,10003fec <__alt_data_end+0xf8003fec>
10004538:	383f921e 	bne	r7,zero,10004384 <__alt_data_end+0xf8004384>
1000453c:	a00b883a 	mov	r5,r20
10004540:	8009883a 	mov	r4,r16
10004544:	01800144 	movi	r6,5
10004548:	0006a780 	call	10006a78 <__multadd>
1000454c:	e009883a 	mov	r4,fp
10004550:	100b883a 	mov	r5,r2
10004554:	1029883a 	mov	r20,r2
10004558:	00073180 	call	10007318 <__mcmp>
1000455c:	00bf890e 	bge	zero,r2,10004384 <__alt_data_end+0xf8004384>
10004560:	d9c00617 	ldw	r7,24(sp)
10004564:	d9800717 	ldw	r6,28(sp)
10004568:	00800c44 	movi	r2,49
1000456c:	39c00044 	addi	r7,r7,1
10004570:	35800044 	addi	r22,r6,1
10004574:	30800005 	stb	r2,0(r6)
10004578:	d9c00615 	stw	r7,24(sp)
1000457c:	003f8506 	br	10004394 <__alt_data_end+0xf8004394>
10004580:	d9800617 	ldw	r6,24(sp)
10004584:	d9c00717 	ldw	r7,28(sp)
10004588:	00800c44 	movi	r2,49
1000458c:	31800044 	addi	r6,r6,1
10004590:	d9800615 	stw	r6,24(sp)
10004594:	38800005 	stb	r2,0(r7)
10004598:	003ec706 	br	100040b8 <__alt_data_end+0xf80040b8>
1000459c:	df000417 	ldw	fp,16(sp)
100045a0:	dc000317 	ldw	r16,12(sp)
100045a4:	003d6d06 	br	10003b5c <__alt_data_end+0xf8003b5c>
100045a8:	8809883a 	mov	r4,r17
100045ac:	000d4ac0 	call	1000d4ac <__floatsidf>
100045b0:	9809883a 	mov	r4,r19
100045b4:	a00b883a 	mov	r5,r20
100045b8:	100d883a 	mov	r6,r2
100045bc:	180f883a 	mov	r7,r3
100045c0:	000c3a40 	call	1000c3a4 <__muldf3>
100045c4:	1009883a 	mov	r4,r2
100045c8:	180b883a 	mov	r5,r3
100045cc:	000d883a 	mov	r6,zero
100045d0:	01d00734 	movhi	r7,16412
100045d4:	000af440 	call	1000af44 <__adddf3>
100045d8:	05bf3034 	movhi	r22,64704
100045dc:	1023883a 	mov	r17,r2
100045e0:	1daf883a 	add	r23,r3,r22
100045e4:	9809883a 	mov	r4,r19
100045e8:	a00b883a 	mov	r5,r20
100045ec:	000d883a 	mov	r6,zero
100045f0:	01d00534 	movhi	r7,16404
100045f4:	000cba40 	call	1000cba4 <__subdf3>
100045f8:	1009883a 	mov	r4,r2
100045fc:	180b883a 	mov	r5,r3
10004600:	880d883a 	mov	r6,r17
10004604:	b80f883a 	mov	r7,r23
10004608:	1027883a 	mov	r19,r2
1000460c:	1829883a 	mov	r20,r3
10004610:	000c1e00 	call	1000c1e0 <__gedf2>
10004614:	00806d16 	blt	zero,r2,100047cc <_dtoa_r+0x1320>
10004618:	b9e0003c 	xorhi	r7,r23,32768
1000461c:	9809883a 	mov	r4,r19
10004620:	a00b883a 	mov	r5,r20
10004624:	880d883a 	mov	r6,r17
10004628:	000c2b80 	call	1000c2b8 <__ledf2>
1000462c:	103d7a0e 	bge	r2,zero,10003c18 <__alt_data_end+0xf8003c18>
10004630:	0029883a 	mov	r20,zero
10004634:	0023883a 	mov	r17,zero
10004638:	003f5206 	br	10004384 <__alt_data_end+0xf8004384>
1000463c:	d9800a17 	ldw	r6,40(sp)
10004640:	e00b883a 	mov	r5,fp
10004644:	8009883a 	mov	r4,r16
10004648:	00070800 	call	10007080 <__pow5mult>
1000464c:	1039883a 	mov	fp,r2
10004650:	003e3606 	br	10003f2c <__alt_data_end+0xf8003f2c>
10004654:	d8000c15 	stw	zero,48(sp)
10004658:	003c5c06 	br	100037cc <__alt_data_end+0xf80037cc>
1000465c:	d9000a17 	ldw	r4,40(sp)
10004660:	d9800b17 	ldw	r6,44(sp)
10004664:	dd000a15 	stw	r20,40(sp)
10004668:	a105c83a 	sub	r2,r20,r4
1000466c:	308d883a 	add	r6,r6,r2
10004670:	d9800b15 	stw	r6,44(sp)
10004674:	0029883a 	mov	r20,zero
10004678:	003e0106 	br	10003e80 <__alt_data_end+0xf8003e80>
1000467c:	dcc00317 	ldw	r19,12(sp)
10004680:	9029883a 	mov	r20,r18
10004684:	04400084 	movi	r17,2
10004688:	003c8606 	br	100038a4 <__alt_data_end+0xf80038a4>
1000468c:	3023883a 	mov	r17,r6
10004690:	80001115 	stw	zero,68(r16)
10004694:	000b883a 	mov	r5,zero
10004698:	003c6006 	br	1000381c <__alt_data_end+0xf800381c>
1000469c:	04400044 	movi	r17,1
100046a0:	dc400d15 	stw	r17,52(sp)
100046a4:	dc400915 	stw	r17,36(sp)
100046a8:	dc402115 	stw	r17,132(sp)
100046ac:	003ff806 	br	10004690 <__alt_data_end+0xf8004690>
100046b0:	d8800617 	ldw	r2,24(sp)
100046b4:	00adc83a 	sub	r22,zero,r2
100046b8:	b000ac26 	beq	r22,zero,1000496c <_dtoa_r+0x14c0>
100046bc:	b08003cc 	andi	r2,r22,15
100046c0:	100490fa 	slli	r2,r2,3
100046c4:	00c40074 	movhi	r3,4097
100046c8:	18ff9304 	addi	r3,r3,-436
100046cc:	d9000317 	ldw	r4,12(sp)
100046d0:	1885883a 	add	r2,r3,r2
100046d4:	11800017 	ldw	r6,0(r2)
100046d8:	11c00117 	ldw	r7,4(r2)
100046dc:	b02dd13a 	srai	r22,r22,4
100046e0:	900b883a 	mov	r5,r18
100046e4:	000c3a40 	call	1000c3a4 <__muldf3>
100046e8:	1027883a 	mov	r19,r2
100046ec:	1829883a 	mov	r20,r3
100046f0:	b000ec26 	beq	r22,zero,10004aa4 <_dtoa_r+0x15f8>
100046f4:	05c40074 	movhi	r23,4097
100046f8:	bdff8904 	addi	r23,r23,-476
100046fc:	04400084 	movi	r17,2
10004700:	b180004c 	andi	r6,r22,1
10004704:	1009883a 	mov	r4,r2
10004708:	b02dd07a 	srai	r22,r22,1
1000470c:	180b883a 	mov	r5,r3
10004710:	30000426 	beq	r6,zero,10004724 <_dtoa_r+0x1278>
10004714:	b9800017 	ldw	r6,0(r23)
10004718:	b9c00117 	ldw	r7,4(r23)
1000471c:	8c400044 	addi	r17,r17,1
10004720:	000c3a40 	call	1000c3a4 <__muldf3>
10004724:	bdc00204 	addi	r23,r23,8
10004728:	b03ff51e 	bne	r22,zero,10004700 <__alt_data_end+0xf8004700>
1000472c:	1027883a 	mov	r19,r2
10004730:	1829883a 	mov	r20,r3
10004734:	003c7406 	br	10003908 <__alt_data_end+0xf8003908>
10004738:	d9800617 	ldw	r6,24(sp)
1000473c:	d9c00717 	ldw	r7,28(sp)
10004740:	00c00c04 	movi	r3,48
10004744:	31800044 	addi	r6,r6,1
10004748:	38c00005 	stb	r3,0(r7)
1000474c:	02400c44 	movi	r9,49
10004750:	d9800615 	stw	r6,24(sp)
10004754:	12400005 	stb	r9,0(r2)
10004758:	003d0006 	br	10003b5c <__alt_data_end+0xf8003b5c>
1000475c:	89400117 	ldw	r5,4(r17)
10004760:	8009883a 	mov	r4,r16
10004764:	00069a80 	call	100069a8 <_Balloc>
10004768:	89800417 	ldw	r6,16(r17)
1000476c:	11000304 	addi	r4,r2,12
10004770:	89400304 	addi	r5,r17,12
10004774:	31800084 	addi	r6,r6,2
10004778:	318d883a 	add	r6,r6,r6
1000477c:	318d883a 	add	r6,r6,r6
10004780:	1025883a 	mov	r18,r2
10004784:	000664c0 	call	1000664c <memcpy>
10004788:	8009883a 	mov	r4,r16
1000478c:	900b883a 	mov	r5,r18
10004790:	01800044 	movi	r6,1
10004794:	00071c80 	call	100071c8 <__lshift>
10004798:	1027883a 	mov	r19,r2
1000479c:	003e8806 	br	100041c0 <__alt_data_end+0xf80041c0>
100047a0:	00800e44 	movi	r2,57
100047a4:	b8bf2b26 	beq	r23,r2,10004454 <__alt_data_end+0xf8004454>
100047a8:	ba400044 	addi	r9,r23,1
100047ac:	882b883a 	mov	r21,r17
100047b0:	95800044 	addi	r22,r18,1
100047b4:	92400005 	stb	r9,0(r18)
100047b8:	9823883a 	mov	r17,r19
100047bc:	003e3e06 	br	100040b8 <__alt_data_end+0xf80040b8>
100047c0:	882b883a 	mov	r21,r17
100047c4:	9823883a 	mov	r17,r19
100047c8:	003e2206 	br	10004054 <__alt_data_end+0xf8004054>
100047cc:	0029883a 	mov	r20,zero
100047d0:	0023883a 	mov	r17,zero
100047d4:	003f6206 	br	10004560 <__alt_data_end+0xf8004560>
100047d8:	59bfffc4 	addi	r6,r11,-1
100047dc:	300490fa 	slli	r2,r6,3
100047e0:	00c40074 	movhi	r3,4097
100047e4:	18ff9304 	addi	r3,r3,-436
100047e8:	b80f883a 	mov	r7,r23
100047ec:	1885883a 	add	r2,r3,r2
100047f0:	11000017 	ldw	r4,0(r2)
100047f4:	11400117 	ldw	r5,4(r2)
100047f8:	d8800717 	ldw	r2,28(sp)
100047fc:	d9801015 	stw	r6,64(sp)
10004800:	880d883a 	mov	r6,r17
10004804:	dac01615 	stw	r11,88(sp)
10004808:	15800044 	addi	r22,r2,1
1000480c:	000c3a40 	call	1000c3a4 <__muldf3>
10004810:	a00b883a 	mov	r5,r20
10004814:	9809883a 	mov	r4,r19
10004818:	d8c01215 	stw	r3,72(sp)
1000481c:	d8801115 	stw	r2,68(sp)
10004820:	000d42c0 	call	1000d42c <__fixdfsi>
10004824:	1009883a 	mov	r4,r2
10004828:	1023883a 	mov	r17,r2
1000482c:	000d4ac0 	call	1000d4ac <__floatsidf>
10004830:	9809883a 	mov	r4,r19
10004834:	a00b883a 	mov	r5,r20
10004838:	100d883a 	mov	r6,r2
1000483c:	180f883a 	mov	r7,r3
10004840:	000cba40 	call	1000cba4 <__subdf3>
10004844:	1815883a 	mov	r10,r3
10004848:	d8c00717 	ldw	r3,28(sp)
1000484c:	8c400c04 	addi	r17,r17,48
10004850:	102f883a 	mov	r23,r2
10004854:	1c400005 	stb	r17,0(r3)
10004858:	dac01617 	ldw	r11,88(sp)
1000485c:	00800044 	movi	r2,1
10004860:	58802426 	beq	r11,r2,100048f4 <_dtoa_r+0x1448>
10004864:	d9800717 	ldw	r6,28(sp)
10004868:	dc001415 	stw	r16,80(sp)
1000486c:	b805883a 	mov	r2,r23
10004870:	32d7883a 	add	r11,r6,r11
10004874:	b027883a 	mov	r19,r22
10004878:	5821883a 	mov	r16,r11
1000487c:	5007883a 	mov	r3,r10
10004880:	902f883a 	mov	r23,r18
10004884:	000d883a 	mov	r6,zero
10004888:	01d00934 	movhi	r7,16420
1000488c:	1009883a 	mov	r4,r2
10004890:	180b883a 	mov	r5,r3
10004894:	000c3a40 	call	1000c3a4 <__muldf3>
10004898:	180b883a 	mov	r5,r3
1000489c:	1009883a 	mov	r4,r2
100048a0:	1829883a 	mov	r20,r3
100048a4:	1025883a 	mov	r18,r2
100048a8:	000d42c0 	call	1000d42c <__fixdfsi>
100048ac:	1009883a 	mov	r4,r2
100048b0:	1023883a 	mov	r17,r2
100048b4:	000d4ac0 	call	1000d4ac <__floatsidf>
100048b8:	9009883a 	mov	r4,r18
100048bc:	a00b883a 	mov	r5,r20
100048c0:	100d883a 	mov	r6,r2
100048c4:	180f883a 	mov	r7,r3
100048c8:	8c400c04 	addi	r17,r17,48
100048cc:	000cba40 	call	1000cba4 <__subdf3>
100048d0:	9cc00044 	addi	r19,r19,1
100048d4:	9c7fffc5 	stb	r17,-1(r19)
100048d8:	9c3fea1e 	bne	r19,r16,10004884 <__alt_data_end+0xf8004884>
100048dc:	d9c01017 	ldw	r7,64(sp)
100048e0:	dc001417 	ldw	r16,80(sp)
100048e4:	b825883a 	mov	r18,r23
100048e8:	1815883a 	mov	r10,r3
100048ec:	102f883a 	mov	r23,r2
100048f0:	b1ed883a 	add	r22,r22,r7
100048f4:	d9001117 	ldw	r4,68(sp)
100048f8:	d9401217 	ldw	r5,72(sp)
100048fc:	000d883a 	mov	r6,zero
10004900:	01cff834 	movhi	r7,16352
10004904:	da801615 	stw	r10,88(sp)
10004908:	000af440 	call	1000af44 <__adddf3>
1000490c:	da801617 	ldw	r10,88(sp)
10004910:	1009883a 	mov	r4,r2
10004914:	180b883a 	mov	r5,r3
10004918:	500f883a 	mov	r7,r10
1000491c:	b80d883a 	mov	r6,r23
10004920:	000c2b80 	call	1000c2b8 <__ledf2>
10004924:	da801617 	ldw	r10,88(sp)
10004928:	1000330e 	bge	r2,zero,100049f8 <_dtoa_r+0x154c>
1000492c:	d9001317 	ldw	r4,76(sp)
10004930:	b53fffc3 	ldbu	r20,-1(r22)
10004934:	d9000615 	stw	r4,24(sp)
10004938:	003d3706 	br	10003e18 <__alt_data_end+0xf8003e18>
1000493c:	d8800817 	ldw	r2,32(sp)
10004940:	11e7c83a 	sub	r19,r2,r7
10004944:	0005883a 	mov	r2,zero
10004948:	003d5106 	br	10003e90 <__alt_data_end+0xf8003e90>
1000494c:	00800044 	movi	r2,1
10004950:	003dbd06 	br	10004048 <__alt_data_end+0xf8004048>
10004954:	d8800217 	ldw	r2,8(sp)
10004958:	00c00d84 	movi	r3,54
1000495c:	dd000a17 	ldw	r20,40(sp)
10004960:	1885c83a 	sub	r2,r3,r2
10004964:	dcc00817 	ldw	r19,32(sp)
10004968:	003d4906 	br	10003e90 <__alt_data_end+0xf8003e90>
1000496c:	dcc00317 	ldw	r19,12(sp)
10004970:	9029883a 	mov	r20,r18
10004974:	04400084 	movi	r17,2
10004978:	003be306 	br	10003908 <__alt_data_end+0xf8003908>
1000497c:	d9000917 	ldw	r4,36(sp)
10004980:	203f0926 	beq	r4,zero,100045a8 <__alt_data_end+0xf80045a8>
10004984:	d9800d17 	ldw	r6,52(sp)
10004988:	01bca30e 	bge	zero,r6,10003c18 <__alt_data_end+0xf8003c18>
1000498c:	a00b883a 	mov	r5,r20
10004990:	9809883a 	mov	r4,r19
10004994:	000d883a 	mov	r6,zero
10004998:	01d00934 	movhi	r7,16420
1000499c:	000c3a40 	call	1000c3a4 <__muldf3>
100049a0:	89000044 	addi	r4,r17,1
100049a4:	1027883a 	mov	r19,r2
100049a8:	1829883a 	mov	r20,r3
100049ac:	000d4ac0 	call	1000d4ac <__floatsidf>
100049b0:	9809883a 	mov	r4,r19
100049b4:	a00b883a 	mov	r5,r20
100049b8:	100d883a 	mov	r6,r2
100049bc:	180f883a 	mov	r7,r3
100049c0:	000c3a40 	call	1000c3a4 <__muldf3>
100049c4:	01d00734 	movhi	r7,16412
100049c8:	1009883a 	mov	r4,r2
100049cc:	180b883a 	mov	r5,r3
100049d0:	000d883a 	mov	r6,zero
100049d4:	000af440 	call	1000af44 <__adddf3>
100049d8:	d9c00617 	ldw	r7,24(sp)
100049dc:	05bf3034 	movhi	r22,64704
100049e0:	1023883a 	mov	r17,r2
100049e4:	39ffffc4 	addi	r7,r7,-1
100049e8:	d9c01315 	stw	r7,76(sp)
100049ec:	1daf883a 	add	r23,r3,r22
100049f0:	dac00d17 	ldw	r11,52(sp)
100049f4:	003be006 	br	10003978 <__alt_data_end+0xf8003978>
100049f8:	d9801117 	ldw	r6,68(sp)
100049fc:	d9c01217 	ldw	r7,72(sp)
10004a00:	0009883a 	mov	r4,zero
10004a04:	014ff834 	movhi	r5,16352
10004a08:	da801615 	stw	r10,88(sp)
10004a0c:	000cba40 	call	1000cba4 <__subdf3>
10004a10:	da801617 	ldw	r10,88(sp)
10004a14:	1009883a 	mov	r4,r2
10004a18:	180b883a 	mov	r5,r3
10004a1c:	b80d883a 	mov	r6,r23
10004a20:	500f883a 	mov	r7,r10
10004a24:	000c1e00 	call	1000c1e0 <__gedf2>
10004a28:	00bc7b0e 	bge	zero,r2,10003c18 <__alt_data_end+0xf8003c18>
10004a2c:	01000c04 	movi	r4,48
10004a30:	00000106 	br	10004a38 <_dtoa_r+0x158c>
10004a34:	102d883a 	mov	r22,r2
10004a38:	b0bfffc4 	addi	r2,r22,-1
10004a3c:	10c00007 	ldb	r3,0(r2)
10004a40:	193ffc26 	beq	r3,r4,10004a34 <__alt_data_end+0xf8004a34>
10004a44:	d9001317 	ldw	r4,76(sp)
10004a48:	d9000615 	stw	r4,24(sp)
10004a4c:	003c4306 	br	10003b5c <__alt_data_end+0xf8003b5c>
10004a50:	d8c01317 	ldw	r3,76(sp)
10004a54:	dc001117 	ldw	r16,68(sp)
10004a58:	d8c00615 	stw	r3,24(sp)
10004a5c:	003cee06 	br	10003e18 <__alt_data_end+0xf8003e18>
10004a60:	dd401217 	ldw	r21,72(sp)
10004a64:	dc001117 	ldw	r16,68(sp)
10004a68:	dc801417 	ldw	r18,80(sp)
10004a6c:	003c6a06 	br	10003c18 <__alt_data_end+0xf8003c18>
10004a70:	103e6f1e 	bne	r2,zero,10004430 <__alt_data_end+0xf8004430>
10004a74:	b880004c 	andi	r2,r23,1
10004a78:	103e6d26 	beq	r2,zero,10004430 <__alt_data_end+0xf8004430>
10004a7c:	003e6906 	br	10004424 <__alt_data_end+0xf8004424>
10004a80:	8009883a 	mov	r4,r16
10004a84:	880b883a 	mov	r5,r17
10004a88:	01800284 	movi	r6,10
10004a8c:	000f883a 	mov	r7,zero
10004a90:	0006a780 	call	10006a78 <__multadd>
10004a94:	d9000d17 	ldw	r4,52(sp)
10004a98:	1023883a 	mov	r17,r2
10004a9c:	d9000915 	stw	r4,36(sp)
10004aa0:	003d5006 	br	10003fe4 <__alt_data_end+0xf8003fe4>
10004aa4:	04400084 	movi	r17,2
10004aa8:	003b9706 	br	10003908 <__alt_data_end+0xf8003908>
10004aac:	d8801317 	ldw	r2,76(sp)
10004ab0:	d8800615 	stw	r2,24(sp)
10004ab4:	003cd806 	br	10003e18 <__alt_data_end+0xf8003e18>
10004ab8:	d8801317 	ldw	r2,76(sp)
10004abc:	d8800615 	stw	r2,24(sp)
10004ac0:	003c2606 	br	10003b5c <__alt_data_end+0xf8003b5c>
10004ac4:	04c00044 	movi	r19,1
10004ac8:	003b3506 	br	100037a0 <__alt_data_end+0xf80037a0>
10004acc:	3023883a 	mov	r17,r6
10004ad0:	000b883a 	mov	r5,zero
10004ad4:	003b5106 	br	1000381c <__alt_data_end+0xf800381c>
10004ad8:	20fd3426 	beq	r4,r3,10003fac <__alt_data_end+0xf8003fac>
10004adc:	00c00f04 	movi	r3,60
10004ae0:	1885c83a 	sub	r2,r3,r2
10004ae4:	003da106 	br	1000416c <__alt_data_end+0xf800416c>

10004ae8 <_fflush_r>:
10004ae8:	defffb04 	addi	sp,sp,-20
10004aec:	dcc00315 	stw	r19,12(sp)
10004af0:	dc400115 	stw	r17,4(sp)
10004af4:	dfc00415 	stw	ra,16(sp)
10004af8:	dc800215 	stw	r18,8(sp)
10004afc:	dc000015 	stw	r16,0(sp)
10004b00:	2027883a 	mov	r19,r4
10004b04:	2823883a 	mov	r17,r5
10004b08:	20000226 	beq	r4,zero,10004b14 <_fflush_r+0x2c>
10004b0c:	20800e17 	ldw	r2,56(r4)
10004b10:	10005826 	beq	r2,zero,10004c74 <_fflush_r+0x18c>
10004b14:	8880030b 	ldhu	r2,12(r17)
10004b18:	10ffffcc 	andi	r3,r2,65535
10004b1c:	18e0001c 	xori	r3,r3,32768
10004b20:	18e00004 	addi	r3,r3,-32768
10004b24:	18002b26 	beq	r3,zero,10004bd4 <_fflush_r+0xec>
10004b28:	10c0020c 	andi	r3,r2,8
10004b2c:	1800311e 	bne	r3,zero,10004bf4 <_fflush_r+0x10c>
10004b30:	88c00117 	ldw	r3,4(r17)
10004b34:	10820014 	ori	r2,r2,2048
10004b38:	8880030d 	sth	r2,12(r17)
10004b3c:	00c05c0e 	bge	zero,r3,10004cb0 <_fflush_r+0x1c8>
10004b40:	88c00a17 	ldw	r3,40(r17)
10004b44:	18002326 	beq	r3,zero,10004bd4 <_fflush_r+0xec>
10004b48:	9c000017 	ldw	r16,0(r19)
10004b4c:	1104000c 	andi	r4,r2,4096
10004b50:	98000015 	stw	zero,0(r19)
10004b54:	20004b26 	beq	r4,zero,10004c84 <_fflush_r+0x19c>
10004b58:	89801417 	ldw	r6,80(r17)
10004b5c:	1080010c 	andi	r2,r2,4
10004b60:	10000626 	beq	r2,zero,10004b7c <_fflush_r+0x94>
10004b64:	89000117 	ldw	r4,4(r17)
10004b68:	88800c17 	ldw	r2,48(r17)
10004b6c:	310dc83a 	sub	r6,r6,r4
10004b70:	10000226 	beq	r2,zero,10004b7c <_fflush_r+0x94>
10004b74:	88800f17 	ldw	r2,60(r17)
10004b78:	308dc83a 	sub	r6,r6,r2
10004b7c:	89400717 	ldw	r5,28(r17)
10004b80:	9809883a 	mov	r4,r19
10004b84:	000f883a 	mov	r7,zero
10004b88:	183ee83a 	callr	r3
10004b8c:	00ffffc4 	movi	r3,-1
10004b90:	10c04a26 	beq	r2,r3,10004cbc <_fflush_r+0x1d4>
10004b94:	88c0030b 	ldhu	r3,12(r17)
10004b98:	89000417 	ldw	r4,16(r17)
10004b9c:	88000115 	stw	zero,4(r17)
10004ba0:	197dffcc 	andi	r5,r3,63487
10004ba4:	8940030d 	sth	r5,12(r17)
10004ba8:	89000015 	stw	r4,0(r17)
10004bac:	18c4000c 	andi	r3,r3,4096
10004bb0:	1800581e 	bne	r3,zero,10004d14 <_fflush_r+0x22c>
10004bb4:	89400c17 	ldw	r5,48(r17)
10004bb8:	9c000015 	stw	r16,0(r19)
10004bbc:	28000526 	beq	r5,zero,10004bd4 <_fflush_r+0xec>
10004bc0:	88801004 	addi	r2,r17,64
10004bc4:	28800226 	beq	r5,r2,10004bd0 <_fflush_r+0xe8>
10004bc8:	9809883a 	mov	r4,r19
10004bcc:	000523c0 	call	1000523c <_free_r>
10004bd0:	88000c15 	stw	zero,48(r17)
10004bd4:	0005883a 	mov	r2,zero
10004bd8:	dfc00417 	ldw	ra,16(sp)
10004bdc:	dcc00317 	ldw	r19,12(sp)
10004be0:	dc800217 	ldw	r18,8(sp)
10004be4:	dc400117 	ldw	r17,4(sp)
10004be8:	dc000017 	ldw	r16,0(sp)
10004bec:	dec00504 	addi	sp,sp,20
10004bf0:	f800283a 	ret
10004bf4:	8c800417 	ldw	r18,16(r17)
10004bf8:	903ff626 	beq	r18,zero,10004bd4 <__alt_data_end+0xf8004bd4>
10004bfc:	8c000017 	ldw	r16,0(r17)
10004c00:	108000cc 	andi	r2,r2,3
10004c04:	8c800015 	stw	r18,0(r17)
10004c08:	84a1c83a 	sub	r16,r16,r18
10004c0c:	10001b26 	beq	r2,zero,10004c7c <_fflush_r+0x194>
10004c10:	0005883a 	mov	r2,zero
10004c14:	88800215 	stw	r2,8(r17)
10004c18:	04000316 	blt	zero,r16,10004c28 <_fflush_r+0x140>
10004c1c:	003fed06 	br	10004bd4 <__alt_data_end+0xf8004bd4>
10004c20:	90a5883a 	add	r18,r18,r2
10004c24:	043feb0e 	bge	zero,r16,10004bd4 <__alt_data_end+0xf8004bd4>
10004c28:	88800917 	ldw	r2,36(r17)
10004c2c:	89400717 	ldw	r5,28(r17)
10004c30:	800f883a 	mov	r7,r16
10004c34:	900d883a 	mov	r6,r18
10004c38:	9809883a 	mov	r4,r19
10004c3c:	103ee83a 	callr	r2
10004c40:	80a1c83a 	sub	r16,r16,r2
10004c44:	00bff616 	blt	zero,r2,10004c20 <__alt_data_end+0xf8004c20>
10004c48:	88c0030b 	ldhu	r3,12(r17)
10004c4c:	00bfffc4 	movi	r2,-1
10004c50:	18c01014 	ori	r3,r3,64
10004c54:	88c0030d 	sth	r3,12(r17)
10004c58:	dfc00417 	ldw	ra,16(sp)
10004c5c:	dcc00317 	ldw	r19,12(sp)
10004c60:	dc800217 	ldw	r18,8(sp)
10004c64:	dc400117 	ldw	r17,4(sp)
10004c68:	dc000017 	ldw	r16,0(sp)
10004c6c:	dec00504 	addi	sp,sp,20
10004c70:	f800283a 	ret
10004c74:	0004e080 	call	10004e08 <__sinit>
10004c78:	003fa606 	br	10004b14 <__alt_data_end+0xf8004b14>
10004c7c:	88800517 	ldw	r2,20(r17)
10004c80:	003fe406 	br	10004c14 <__alt_data_end+0xf8004c14>
10004c84:	89400717 	ldw	r5,28(r17)
10004c88:	000d883a 	mov	r6,zero
10004c8c:	9809883a 	mov	r4,r19
10004c90:	01c00044 	movi	r7,1
10004c94:	183ee83a 	callr	r3
10004c98:	100d883a 	mov	r6,r2
10004c9c:	00bfffc4 	movi	r2,-1
10004ca0:	30801326 	beq	r6,r2,10004cf0 <_fflush_r+0x208>
10004ca4:	8880030b 	ldhu	r2,12(r17)
10004ca8:	88c00a17 	ldw	r3,40(r17)
10004cac:	003fab06 	br	10004b5c <__alt_data_end+0xf8004b5c>
10004cb0:	88c00f17 	ldw	r3,60(r17)
10004cb4:	00ffa216 	blt	zero,r3,10004b40 <__alt_data_end+0xf8004b40>
10004cb8:	003fc606 	br	10004bd4 <__alt_data_end+0xf8004bd4>
10004cbc:	98c00017 	ldw	r3,0(r19)
10004cc0:	183fb426 	beq	r3,zero,10004b94 <__alt_data_end+0xf8004b94>
10004cc4:	01000744 	movi	r4,29
10004cc8:	19000226 	beq	r3,r4,10004cd4 <_fflush_r+0x1ec>
10004ccc:	01000584 	movi	r4,22
10004cd0:	1900121e 	bne	r3,r4,10004d1c <_fflush_r+0x234>
10004cd4:	88c0030b 	ldhu	r3,12(r17)
10004cd8:	88800417 	ldw	r2,16(r17)
10004cdc:	88000115 	stw	zero,4(r17)
10004ce0:	18fdffcc 	andi	r3,r3,63487
10004ce4:	88c0030d 	sth	r3,12(r17)
10004ce8:	88800015 	stw	r2,0(r17)
10004cec:	003fb106 	br	10004bb4 <__alt_data_end+0xf8004bb4>
10004cf0:	98800017 	ldw	r2,0(r19)
10004cf4:	103feb26 	beq	r2,zero,10004ca4 <__alt_data_end+0xf8004ca4>
10004cf8:	00c00744 	movi	r3,29
10004cfc:	10c00226 	beq	r2,r3,10004d08 <_fflush_r+0x220>
10004d00:	00c00584 	movi	r3,22
10004d04:	10ffd01e 	bne	r2,r3,10004c48 <__alt_data_end+0xf8004c48>
10004d08:	9c000015 	stw	r16,0(r19)
10004d0c:	0005883a 	mov	r2,zero
10004d10:	003fb106 	br	10004bd8 <__alt_data_end+0xf8004bd8>
10004d14:	88801415 	stw	r2,80(r17)
10004d18:	003fa606 	br	10004bb4 <__alt_data_end+0xf8004bb4>
10004d1c:	88c0030b 	ldhu	r3,12(r17)
10004d20:	18c01014 	ori	r3,r3,64
10004d24:	88c0030d 	sth	r3,12(r17)
10004d28:	003fab06 	br	10004bd8 <__alt_data_end+0xf8004bd8>

10004d2c <fflush>:
10004d2c:	200b883a 	mov	r5,r4
10004d30:	20000426 	beq	r4,zero,10004d44 <fflush+0x18>
10004d34:	00840074 	movhi	r2,4097
10004d38:	1086c804 	addi	r2,r2,6944
10004d3c:	11000017 	ldw	r4,0(r2)
10004d40:	0004ae81 	jmpi	10004ae8 <_fflush_r>
10004d44:	00840074 	movhi	r2,4097
10004d48:	1086c704 	addi	r2,r2,6940
10004d4c:	11000017 	ldw	r4,0(r2)
10004d50:	01440034 	movhi	r5,4096
10004d54:	2952ba04 	addi	r5,r5,19176
10004d58:	0005a601 	jmpi	10005a60 <_fwalk_reent>

10004d5c <__fp_lock>:
10004d5c:	0005883a 	mov	r2,zero
10004d60:	f800283a 	ret

10004d64 <__fp_unlock>:
10004d64:	0005883a 	mov	r2,zero
10004d68:	f800283a 	ret

10004d6c <_cleanup_r>:
10004d6c:	01440074 	movhi	r5,4097
10004d70:	29668c04 	addi	r5,r5,-26064
10004d74:	00059b81 	jmpi	100059b8 <_fwalk>

10004d78 <__sfmoreglue>:
10004d78:	defffc04 	addi	sp,sp,-16
10004d7c:	dc800215 	stw	r18,8(sp)
10004d80:	2825883a 	mov	r18,r5
10004d84:	dc000015 	stw	r16,0(sp)
10004d88:	01401a04 	movi	r5,104
10004d8c:	2021883a 	mov	r16,r4
10004d90:	9009883a 	mov	r4,r18
10004d94:	dfc00315 	stw	ra,12(sp)
10004d98:	dc400115 	stw	r17,4(sp)
10004d9c:	000af1c0 	call	1000af1c <__mulsi3>
10004da0:	8009883a 	mov	r4,r16
10004da4:	11400304 	addi	r5,r2,12
10004da8:	1023883a 	mov	r17,r2
10004dac:	0005da00 	call	10005da0 <_malloc_r>
10004db0:	1021883a 	mov	r16,r2
10004db4:	10000726 	beq	r2,zero,10004dd4 <__sfmoreglue+0x5c>
10004db8:	11000304 	addi	r4,r2,12
10004dbc:	10000015 	stw	zero,0(r2)
10004dc0:	14800115 	stw	r18,4(r2)
10004dc4:	11000215 	stw	r4,8(r2)
10004dc8:	000b883a 	mov	r5,zero
10004dcc:	880d883a 	mov	r6,r17
10004dd0:	00068940 	call	10006894 <memset>
10004dd4:	8005883a 	mov	r2,r16
10004dd8:	dfc00317 	ldw	ra,12(sp)
10004ddc:	dc800217 	ldw	r18,8(sp)
10004de0:	dc400117 	ldw	r17,4(sp)
10004de4:	dc000017 	ldw	r16,0(sp)
10004de8:	dec00404 	addi	sp,sp,16
10004dec:	f800283a 	ret

10004df0 <_cleanup>:
10004df0:	00840074 	movhi	r2,4097
10004df4:	1086c704 	addi	r2,r2,6940
10004df8:	11000017 	ldw	r4,0(r2)
10004dfc:	01440074 	movhi	r5,4097
10004e00:	29668c04 	addi	r5,r5,-26064
10004e04:	00059b81 	jmpi	100059b8 <_fwalk>

10004e08 <__sinit>:
10004e08:	20800e17 	ldw	r2,56(r4)
10004e0c:	defff704 	addi	sp,sp,-36
10004e10:	dc800215 	stw	r18,8(sp)
10004e14:	dfc00815 	stw	ra,32(sp)
10004e18:	ddc00715 	stw	r23,28(sp)
10004e1c:	dd800615 	stw	r22,24(sp)
10004e20:	dd400515 	stw	r21,20(sp)
10004e24:	dd000415 	stw	r20,16(sp)
10004e28:	dcc00315 	stw	r19,12(sp)
10004e2c:	dc400115 	stw	r17,4(sp)
10004e30:	dc000015 	stw	r16,0(sp)
10004e34:	2025883a 	mov	r18,r4
10004e38:	10004f1e 	bne	r2,zero,10004f78 <__sinit+0x170>
10004e3c:	24000117 	ldw	r16,4(r4)
10004e40:	00c40034 	movhi	r3,4096
10004e44:	18d35b04 	addi	r3,r3,19820
10004e48:	20c00f15 	stw	r3,60(r4)
10004e4c:	2080bb04 	addi	r2,r4,748
10004e50:	00c000c4 	movi	r3,3
10004e54:	05c00044 	movi	r23,1
10004e58:	20c0b915 	stw	r3,740(r4)
10004e5c:	2080ba15 	stw	r2,744(r4)
10004e60:	25c00e15 	stw	r23,56(r4)
10004e64:	2000b815 	stw	zero,736(r4)
10004e68:	00800104 	movi	r2,4
10004e6c:	81001704 	addi	r4,r16,92
10004e70:	000b883a 	mov	r5,zero
10004e74:	01800204 	movi	r6,8
10004e78:	80000015 	stw	zero,0(r16)
10004e7c:	80000115 	stw	zero,4(r16)
10004e80:	80000215 	stw	zero,8(r16)
10004e84:	8080030d 	sth	r2,12(r16)
10004e88:	80001915 	stw	zero,100(r16)
10004e8c:	8000038d 	sth	zero,14(r16)
10004e90:	80000415 	stw	zero,16(r16)
10004e94:	80000515 	stw	zero,20(r16)
10004e98:	80000615 	stw	zero,24(r16)
10004e9c:	00068940 	call	10006894 <memset>
10004ea0:	94400217 	ldw	r17,8(r18)
10004ea4:	05840074 	movhi	r22,4097
10004ea8:	b5a00004 	addi	r22,r22,-32768
10004eac:	05440074 	movhi	r21,4097
10004eb0:	ad601704 	addi	r21,r21,-32676
10004eb4:	05040074 	movhi	r20,4097
10004eb8:	a5203604 	addi	r20,r20,-32552
10004ebc:	04c40074 	movhi	r19,4097
10004ec0:	9ce04d04 	addi	r19,r19,-32460
10004ec4:	84000715 	stw	r16,28(r16)
10004ec8:	85800815 	stw	r22,32(r16)
10004ecc:	85400915 	stw	r21,36(r16)
10004ed0:	85000a15 	stw	r20,40(r16)
10004ed4:	84c00b15 	stw	r19,44(r16)
10004ed8:	00800284 	movi	r2,10
10004edc:	89001704 	addi	r4,r17,92
10004ee0:	000b883a 	mov	r5,zero
10004ee4:	01800204 	movi	r6,8
10004ee8:	88000015 	stw	zero,0(r17)
10004eec:	88000115 	stw	zero,4(r17)
10004ef0:	88000215 	stw	zero,8(r17)
10004ef4:	8880030d 	sth	r2,12(r17)
10004ef8:	88001915 	stw	zero,100(r17)
10004efc:	8dc0038d 	sth	r23,14(r17)
10004f00:	88000415 	stw	zero,16(r17)
10004f04:	88000515 	stw	zero,20(r17)
10004f08:	88000615 	stw	zero,24(r17)
10004f0c:	00068940 	call	10006894 <memset>
10004f10:	94000317 	ldw	r16,12(r18)
10004f14:	00800484 	movi	r2,18
10004f18:	8c400715 	stw	r17,28(r17)
10004f1c:	8d800815 	stw	r22,32(r17)
10004f20:	8d400915 	stw	r21,36(r17)
10004f24:	8d000a15 	stw	r20,40(r17)
10004f28:	8cc00b15 	stw	r19,44(r17)
10004f2c:	8080030d 	sth	r2,12(r16)
10004f30:	00800084 	movi	r2,2
10004f34:	80000015 	stw	zero,0(r16)
10004f38:	80000115 	stw	zero,4(r16)
10004f3c:	80000215 	stw	zero,8(r16)
10004f40:	80001915 	stw	zero,100(r16)
10004f44:	8080038d 	sth	r2,14(r16)
10004f48:	80000415 	stw	zero,16(r16)
10004f4c:	80000515 	stw	zero,20(r16)
10004f50:	80000615 	stw	zero,24(r16)
10004f54:	81001704 	addi	r4,r16,92
10004f58:	000b883a 	mov	r5,zero
10004f5c:	01800204 	movi	r6,8
10004f60:	00068940 	call	10006894 <memset>
10004f64:	84000715 	stw	r16,28(r16)
10004f68:	85800815 	stw	r22,32(r16)
10004f6c:	85400915 	stw	r21,36(r16)
10004f70:	85000a15 	stw	r20,40(r16)
10004f74:	84c00b15 	stw	r19,44(r16)
10004f78:	dfc00817 	ldw	ra,32(sp)
10004f7c:	ddc00717 	ldw	r23,28(sp)
10004f80:	dd800617 	ldw	r22,24(sp)
10004f84:	dd400517 	ldw	r21,20(sp)
10004f88:	dd000417 	ldw	r20,16(sp)
10004f8c:	dcc00317 	ldw	r19,12(sp)
10004f90:	dc800217 	ldw	r18,8(sp)
10004f94:	dc400117 	ldw	r17,4(sp)
10004f98:	dc000017 	ldw	r16,0(sp)
10004f9c:	dec00904 	addi	sp,sp,36
10004fa0:	f800283a 	ret

10004fa4 <__sfp>:
10004fa4:	defffb04 	addi	sp,sp,-20
10004fa8:	00840074 	movhi	r2,4097
10004fac:	1086c704 	addi	r2,r2,6940
10004fb0:	dc800215 	stw	r18,8(sp)
10004fb4:	14800017 	ldw	r18,0(r2)
10004fb8:	dcc00315 	stw	r19,12(sp)
10004fbc:	dfc00415 	stw	ra,16(sp)
10004fc0:	90800e17 	ldw	r2,56(r18)
10004fc4:	dc400115 	stw	r17,4(sp)
10004fc8:	dc000015 	stw	r16,0(sp)
10004fcc:	2027883a 	mov	r19,r4
10004fd0:	10002f26 	beq	r2,zero,10005090 <__sfp+0xec>
10004fd4:	9480b804 	addi	r18,r18,736
10004fd8:	047fffc4 	movi	r17,-1
10004fdc:	91400117 	ldw	r5,4(r18)
10004fe0:	94000217 	ldw	r16,8(r18)
10004fe4:	297fffc4 	addi	r5,r5,-1
10004fe8:	28000a16 	blt	r5,zero,10005014 <__sfp+0x70>
10004fec:	8080030f 	ldh	r2,12(r16)
10004ff0:	10000c26 	beq	r2,zero,10005024 <__sfp+0x80>
10004ff4:	80c01d04 	addi	r3,r16,116
10004ff8:	00000206 	br	10005004 <__sfp+0x60>
10004ffc:	18bfe60f 	ldh	r2,-104(r3)
10005000:	10000826 	beq	r2,zero,10005024 <__sfp+0x80>
10005004:	297fffc4 	addi	r5,r5,-1
10005008:	1c3ffd04 	addi	r16,r3,-12
1000500c:	18c01a04 	addi	r3,r3,104
10005010:	2c7ffa1e 	bne	r5,r17,10004ffc <__alt_data_end+0xf8004ffc>
10005014:	90800017 	ldw	r2,0(r18)
10005018:	10002026 	beq	r2,zero,1000509c <__sfp+0xf8>
1000501c:	1025883a 	mov	r18,r2
10005020:	003fee06 	br	10004fdc <__alt_data_end+0xf8004fdc>
10005024:	00bfffc4 	movi	r2,-1
10005028:	8080038d 	sth	r2,14(r16)
1000502c:	00800044 	movi	r2,1
10005030:	8080030d 	sth	r2,12(r16)
10005034:	80001915 	stw	zero,100(r16)
10005038:	80000015 	stw	zero,0(r16)
1000503c:	80000215 	stw	zero,8(r16)
10005040:	80000115 	stw	zero,4(r16)
10005044:	80000415 	stw	zero,16(r16)
10005048:	80000515 	stw	zero,20(r16)
1000504c:	80000615 	stw	zero,24(r16)
10005050:	81001704 	addi	r4,r16,92
10005054:	000b883a 	mov	r5,zero
10005058:	01800204 	movi	r6,8
1000505c:	00068940 	call	10006894 <memset>
10005060:	8005883a 	mov	r2,r16
10005064:	80000c15 	stw	zero,48(r16)
10005068:	80000d15 	stw	zero,52(r16)
1000506c:	80001115 	stw	zero,68(r16)
10005070:	80001215 	stw	zero,72(r16)
10005074:	dfc00417 	ldw	ra,16(sp)
10005078:	dcc00317 	ldw	r19,12(sp)
1000507c:	dc800217 	ldw	r18,8(sp)
10005080:	dc400117 	ldw	r17,4(sp)
10005084:	dc000017 	ldw	r16,0(sp)
10005088:	dec00504 	addi	sp,sp,20
1000508c:	f800283a 	ret
10005090:	9009883a 	mov	r4,r18
10005094:	0004e080 	call	10004e08 <__sinit>
10005098:	003fce06 	br	10004fd4 <__alt_data_end+0xf8004fd4>
1000509c:	9809883a 	mov	r4,r19
100050a0:	01400104 	movi	r5,4
100050a4:	0004d780 	call	10004d78 <__sfmoreglue>
100050a8:	90800015 	stw	r2,0(r18)
100050ac:	103fdb1e 	bne	r2,zero,1000501c <__alt_data_end+0xf800501c>
100050b0:	00800304 	movi	r2,12
100050b4:	98800015 	stw	r2,0(r19)
100050b8:	0005883a 	mov	r2,zero
100050bc:	003fed06 	br	10005074 <__alt_data_end+0xf8005074>

100050c0 <__sfp_lock_acquire>:
100050c0:	f800283a 	ret

100050c4 <__sfp_lock_release>:
100050c4:	f800283a 	ret

100050c8 <__sinit_lock_acquire>:
100050c8:	f800283a 	ret

100050cc <__sinit_lock_release>:
100050cc:	f800283a 	ret

100050d0 <__fp_lock_all>:
100050d0:	00840074 	movhi	r2,4097
100050d4:	1086c804 	addi	r2,r2,6944
100050d8:	11000017 	ldw	r4,0(r2)
100050dc:	01440034 	movhi	r5,4096
100050e0:	29535704 	addi	r5,r5,19804
100050e4:	00059b81 	jmpi	100059b8 <_fwalk>

100050e8 <__fp_unlock_all>:
100050e8:	00840074 	movhi	r2,4097
100050ec:	1086c804 	addi	r2,r2,6944
100050f0:	11000017 	ldw	r4,0(r2)
100050f4:	01440034 	movhi	r5,4096
100050f8:	29535904 	addi	r5,r5,19812
100050fc:	00059b81 	jmpi	100059b8 <_fwalk>

10005100 <_malloc_trim_r>:
10005100:	defffb04 	addi	sp,sp,-20
10005104:	dcc00315 	stw	r19,12(sp)
10005108:	dc800215 	stw	r18,8(sp)
1000510c:	dc400115 	stw	r17,4(sp)
10005110:	dc000015 	stw	r16,0(sp)
10005114:	2827883a 	mov	r19,r5
10005118:	dfc00415 	stw	ra,16(sp)
1000511c:	04440074 	movhi	r17,4097
10005120:	8c414104 	addi	r17,r17,1284
10005124:	2021883a 	mov	r16,r4
10005128:	000dd240 	call	1000dd24 <__malloc_lock>
1000512c:	88800217 	ldw	r2,8(r17)
10005130:	14800117 	ldw	r18,4(r2)
10005134:	00bfff04 	movi	r2,-4
10005138:	90a4703a 	and	r18,r18,r2
1000513c:	94e7c83a 	sub	r19,r18,r19
10005140:	9cc3fbc4 	addi	r19,r19,4079
10005144:	9826d33a 	srli	r19,r19,12
10005148:	0083ffc4 	movi	r2,4095
1000514c:	9cffffc4 	addi	r19,r19,-1
10005150:	9826933a 	slli	r19,r19,12
10005154:	14c0060e 	bge	r2,r19,10005170 <_malloc_trim_r+0x70>
10005158:	8009883a 	mov	r4,r16
1000515c:	000b883a 	mov	r5,zero
10005160:	0007f9c0 	call	10007f9c <_sbrk_r>
10005164:	88c00217 	ldw	r3,8(r17)
10005168:	1c87883a 	add	r3,r3,r18
1000516c:	10c00a26 	beq	r2,r3,10005198 <_malloc_trim_r+0x98>
10005170:	8009883a 	mov	r4,r16
10005174:	000dd440 	call	1000dd44 <__malloc_unlock>
10005178:	0005883a 	mov	r2,zero
1000517c:	dfc00417 	ldw	ra,16(sp)
10005180:	dcc00317 	ldw	r19,12(sp)
10005184:	dc800217 	ldw	r18,8(sp)
10005188:	dc400117 	ldw	r17,4(sp)
1000518c:	dc000017 	ldw	r16,0(sp)
10005190:	dec00504 	addi	sp,sp,20
10005194:	f800283a 	ret
10005198:	8009883a 	mov	r4,r16
1000519c:	04cbc83a 	sub	r5,zero,r19
100051a0:	0007f9c0 	call	10007f9c <_sbrk_r>
100051a4:	00ffffc4 	movi	r3,-1
100051a8:	10c01326 	beq	r2,r3,100051f8 <_malloc_trim_r+0xf8>
100051ac:	00840074 	movhi	r2,4097
100051b0:	108da104 	addi	r2,r2,13956
100051b4:	11000017 	ldw	r4,0(r2)
100051b8:	88c00217 	ldw	r3,8(r17)
100051bc:	94e5c83a 	sub	r18,r18,r19
100051c0:	94800054 	ori	r18,r18,1
100051c4:	24e7c83a 	sub	r19,r4,r19
100051c8:	1c800115 	stw	r18,4(r3)
100051cc:	8009883a 	mov	r4,r16
100051d0:	14c00015 	stw	r19,0(r2)
100051d4:	000dd440 	call	1000dd44 <__malloc_unlock>
100051d8:	00800044 	movi	r2,1
100051dc:	dfc00417 	ldw	ra,16(sp)
100051e0:	dcc00317 	ldw	r19,12(sp)
100051e4:	dc800217 	ldw	r18,8(sp)
100051e8:	dc400117 	ldw	r17,4(sp)
100051ec:	dc000017 	ldw	r16,0(sp)
100051f0:	dec00504 	addi	sp,sp,20
100051f4:	f800283a 	ret
100051f8:	8009883a 	mov	r4,r16
100051fc:	000b883a 	mov	r5,zero
10005200:	0007f9c0 	call	10007f9c <_sbrk_r>
10005204:	88c00217 	ldw	r3,8(r17)
10005208:	014003c4 	movi	r5,15
1000520c:	10c9c83a 	sub	r4,r2,r3
10005210:	293fd70e 	bge	r5,r4,10005170 <__alt_data_end+0xf8005170>
10005214:	01440074 	movhi	r5,4097
10005218:	2946ca04 	addi	r5,r5,6952
1000521c:	29400017 	ldw	r5,0(r5)
10005220:	21000054 	ori	r4,r4,1
10005224:	19000115 	stw	r4,4(r3)
10005228:	1145c83a 	sub	r2,r2,r5
1000522c:	01440074 	movhi	r5,4097
10005230:	294da104 	addi	r5,r5,13956
10005234:	28800015 	stw	r2,0(r5)
10005238:	003fcd06 	br	10005170 <__alt_data_end+0xf8005170>

1000523c <_free_r>:
1000523c:	defffd04 	addi	sp,sp,-12
10005240:	dc000015 	stw	r16,0(sp)
10005244:	dfc00215 	stw	ra,8(sp)
10005248:	dc400115 	stw	r17,4(sp)
1000524c:	2821883a 	mov	r16,r5
10005250:	28004c26 	beq	r5,zero,10005384 <_free_r+0x148>
10005254:	2023883a 	mov	r17,r4
10005258:	000dd240 	call	1000dd24 <__malloc_lock>
1000525c:	823fff17 	ldw	r8,-4(r16)
10005260:	00bfff84 	movi	r2,-2
10005264:	81bffe04 	addi	r6,r16,-8
10005268:	4084703a 	and	r2,r8,r2
1000526c:	3087883a 	add	r3,r6,r2
10005270:	01440074 	movhi	r5,4097
10005274:	29414104 	addi	r5,r5,1284
10005278:	1a400117 	ldw	r9,4(r3)
1000527c:	29000217 	ldw	r4,8(r5)
10005280:	01ffff04 	movi	r7,-4
10005284:	49ce703a 	and	r7,r9,r7
10005288:	20c06526 	beq	r4,r3,10005420 <_free_r+0x1e4>
1000528c:	19c00115 	stw	r7,4(r3)
10005290:	4200004c 	andi	r8,r8,1
10005294:	40003026 	beq	r8,zero,10005358 <_free_r+0x11c>
10005298:	0009883a 	mov	r4,zero
1000529c:	19d1883a 	add	r8,r3,r7
100052a0:	42000117 	ldw	r8,4(r8)
100052a4:	4200004c 	andi	r8,r8,1
100052a8:	4000061e 	bne	r8,zero,100052c4 <_free_r+0x88>
100052ac:	11c5883a 	add	r2,r2,r7
100052b0:	19c00217 	ldw	r7,8(r3)
100052b4:	20004e26 	beq	r4,zero,100053f0 <_free_r+0x1b4>
100052b8:	18c00317 	ldw	r3,12(r3)
100052bc:	38c00315 	stw	r3,12(r7)
100052c0:	19c00215 	stw	r7,8(r3)
100052c4:	10c00054 	ori	r3,r2,1
100052c8:	30c00115 	stw	r3,4(r6)
100052cc:	3087883a 	add	r3,r6,r2
100052d0:	18800015 	stw	r2,0(r3)
100052d4:	20001a1e 	bne	r4,zero,10005340 <_free_r+0x104>
100052d8:	00c07fc4 	movi	r3,511
100052dc:	18802e2e 	bgeu	r3,r2,10005398 <_free_r+0x15c>
100052e0:	1006d27a 	srli	r3,r2,9
100052e4:	01000104 	movi	r4,4
100052e8:	20c06636 	bltu	r4,r3,10005484 <_free_r+0x248>
100052ec:	1008d1ba 	srli	r4,r2,6
100052f0:	21000e04 	addi	r4,r4,56
100052f4:	210f883a 	add	r7,r4,r4
100052f8:	39cf883a 	add	r7,r7,r7
100052fc:	39cf883a 	add	r7,r7,r7
10005300:	29cf883a 	add	r7,r5,r7
10005304:	38c00217 	ldw	r3,8(r7)
10005308:	01440074 	movhi	r5,4097
1000530c:	29414104 	addi	r5,r5,1284
10005310:	19c06126 	beq	r3,r7,10005498 <_free_r+0x25c>
10005314:	013fff04 	movi	r4,-4
10005318:	19400117 	ldw	r5,4(r3)
1000531c:	290a703a 	and	r5,r5,r4
10005320:	1140022e 	bgeu	r2,r5,1000532c <_free_r+0xf0>
10005324:	18c00217 	ldw	r3,8(r3)
10005328:	38fffb1e 	bne	r7,r3,10005318 <__alt_data_end+0xf8005318>
1000532c:	18800317 	ldw	r2,12(r3)
10005330:	30800315 	stw	r2,12(r6)
10005334:	30c00215 	stw	r3,8(r6)
10005338:	11800215 	stw	r6,8(r2)
1000533c:	19800315 	stw	r6,12(r3)
10005340:	8809883a 	mov	r4,r17
10005344:	dfc00217 	ldw	ra,8(sp)
10005348:	dc400117 	ldw	r17,4(sp)
1000534c:	dc000017 	ldw	r16,0(sp)
10005350:	dec00304 	addi	sp,sp,12
10005354:	000dd441 	jmpi	1000dd44 <__malloc_unlock>
10005358:	813ffe17 	ldw	r4,-8(r16)
1000535c:	2a400204 	addi	r9,r5,8
10005360:	310dc83a 	sub	r6,r6,r4
10005364:	32000217 	ldw	r8,8(r6)
10005368:	1105883a 	add	r2,r2,r4
1000536c:	42404326 	beq	r8,r9,1000547c <_free_r+0x240>
10005370:	32400317 	ldw	r9,12(r6)
10005374:	0009883a 	mov	r4,zero
10005378:	42400315 	stw	r9,12(r8)
1000537c:	4a000215 	stw	r8,8(r9)
10005380:	003fc606 	br	1000529c <__alt_data_end+0xf800529c>
10005384:	dfc00217 	ldw	ra,8(sp)
10005388:	dc400117 	ldw	r17,4(sp)
1000538c:	dc000017 	ldw	r16,0(sp)
10005390:	dec00304 	addi	sp,sp,12
10005394:	f800283a 	ret
10005398:	1004d0fa 	srli	r2,r2,3
1000539c:	02000044 	movi	r8,1
100053a0:	29c00117 	ldw	r7,4(r5)
100053a4:	1087883a 	add	r3,r2,r2
100053a8:	18c7883a 	add	r3,r3,r3
100053ac:	18c7883a 	add	r3,r3,r3
100053b0:	28c7883a 	add	r3,r5,r3
100053b4:	1005d0ba 	srai	r2,r2,2
100053b8:	19000217 	ldw	r4,8(r3)
100053bc:	30c00315 	stw	r3,12(r6)
100053c0:	4084983a 	sll	r2,r8,r2
100053c4:	31000215 	stw	r4,8(r6)
100053c8:	19800215 	stw	r6,8(r3)
100053cc:	11c4b03a 	or	r2,r2,r7
100053d0:	21800315 	stw	r6,12(r4)
100053d4:	8809883a 	mov	r4,r17
100053d8:	28800115 	stw	r2,4(r5)
100053dc:	dfc00217 	ldw	ra,8(sp)
100053e0:	dc400117 	ldw	r17,4(sp)
100053e4:	dc000017 	ldw	r16,0(sp)
100053e8:	dec00304 	addi	sp,sp,12
100053ec:	000dd441 	jmpi	1000dd44 <__malloc_unlock>
100053f0:	02040074 	movhi	r8,4097
100053f4:	42014304 	addi	r8,r8,1292
100053f8:	3a3faf1e 	bne	r7,r8,100052b8 <__alt_data_end+0xf80052b8>
100053fc:	29800515 	stw	r6,20(r5)
10005400:	29800415 	stw	r6,16(r5)
10005404:	10c00054 	ori	r3,r2,1
10005408:	31c00315 	stw	r7,12(r6)
1000540c:	31c00215 	stw	r7,8(r6)
10005410:	30c00115 	stw	r3,4(r6)
10005414:	308d883a 	add	r6,r6,r2
10005418:	30800015 	stw	r2,0(r6)
1000541c:	003fc806 	br	10005340 <__alt_data_end+0xf8005340>
10005420:	4200004c 	andi	r8,r8,1
10005424:	3885883a 	add	r2,r7,r2
10005428:	4000071e 	bne	r8,zero,10005448 <_free_r+0x20c>
1000542c:	81fffe17 	ldw	r7,-8(r16)
10005430:	31cdc83a 	sub	r6,r6,r7
10005434:	30c00317 	ldw	r3,12(r6)
10005438:	31000217 	ldw	r4,8(r6)
1000543c:	11c5883a 	add	r2,r2,r7
10005440:	20c00315 	stw	r3,12(r4)
10005444:	19000215 	stw	r4,8(r3)
10005448:	00c40074 	movhi	r3,4097
1000544c:	18c6cb04 	addi	r3,r3,6956
10005450:	11000054 	ori	r4,r2,1
10005454:	18c00017 	ldw	r3,0(r3)
10005458:	31000115 	stw	r4,4(r6)
1000545c:	29800215 	stw	r6,8(r5)
10005460:	10ffb736 	bltu	r2,r3,10005340 <__alt_data_end+0xf8005340>
10005464:	00840074 	movhi	r2,4097
10005468:	108d9904 	addi	r2,r2,13924
1000546c:	11400017 	ldw	r5,0(r2)
10005470:	8809883a 	mov	r4,r17
10005474:	00051000 	call	10005100 <_malloc_trim_r>
10005478:	003fb106 	br	10005340 <__alt_data_end+0xf8005340>
1000547c:	01000044 	movi	r4,1
10005480:	003f8606 	br	1000529c <__alt_data_end+0xf800529c>
10005484:	01000504 	movi	r4,20
10005488:	20c00b36 	bltu	r4,r3,100054b8 <_free_r+0x27c>
1000548c:	190016c4 	addi	r4,r3,91
10005490:	210f883a 	add	r7,r4,r4
10005494:	003f9806 	br	100052f8 <__alt_data_end+0xf80052f8>
10005498:	2009d0ba 	srai	r4,r4,2
1000549c:	00800044 	movi	r2,1
100054a0:	29c00117 	ldw	r7,4(r5)
100054a4:	1108983a 	sll	r4,r2,r4
100054a8:	1805883a 	mov	r2,r3
100054ac:	21c8b03a 	or	r4,r4,r7
100054b0:	29000115 	stw	r4,4(r5)
100054b4:	003f9e06 	br	10005330 <__alt_data_end+0xf8005330>
100054b8:	01001504 	movi	r4,84
100054bc:	20c00436 	bltu	r4,r3,100054d0 <_free_r+0x294>
100054c0:	1008d33a 	srli	r4,r2,12
100054c4:	21001b84 	addi	r4,r4,110
100054c8:	210f883a 	add	r7,r4,r4
100054cc:	003f8a06 	br	100052f8 <__alt_data_end+0xf80052f8>
100054d0:	01005504 	movi	r4,340
100054d4:	20c00436 	bltu	r4,r3,100054e8 <_free_r+0x2ac>
100054d8:	1008d3fa 	srli	r4,r2,15
100054dc:	21001dc4 	addi	r4,r4,119
100054e0:	210f883a 	add	r7,r4,r4
100054e4:	003f8406 	br	100052f8 <__alt_data_end+0xf80052f8>
100054e8:	01015504 	movi	r4,1364
100054ec:	20c00436 	bltu	r4,r3,10005500 <_free_r+0x2c4>
100054f0:	1008d4ba 	srli	r4,r2,18
100054f4:	21001f04 	addi	r4,r4,124
100054f8:	210f883a 	add	r7,r4,r4
100054fc:	003f7e06 	br	100052f8 <__alt_data_end+0xf80052f8>
10005500:	01c03f04 	movi	r7,252
10005504:	01001f84 	movi	r4,126
10005508:	003f7b06 	br	100052f8 <__alt_data_end+0xf80052f8>

1000550c <__sfvwrite_r>:
1000550c:	30800217 	ldw	r2,8(r6)
10005510:	defff404 	addi	sp,sp,-48
10005514:	dcc00515 	stw	r19,20(sp)
10005518:	dfc00b15 	stw	ra,44(sp)
1000551c:	df000a15 	stw	fp,40(sp)
10005520:	ddc00915 	stw	r23,36(sp)
10005524:	dd800815 	stw	r22,32(sp)
10005528:	dd400715 	stw	r21,28(sp)
1000552c:	dd000615 	stw	r20,24(sp)
10005530:	dc800415 	stw	r18,16(sp)
10005534:	dc400315 	stw	r17,12(sp)
10005538:	dc000215 	stw	r16,8(sp)
1000553c:	3027883a 	mov	r19,r6
10005540:	10001d26 	beq	r2,zero,100055b8 <__sfvwrite_r+0xac>
10005544:	2880030b 	ldhu	r2,12(r5)
10005548:	202b883a 	mov	r21,r4
1000554c:	2821883a 	mov	r16,r5
10005550:	10c0020c 	andi	r3,r2,8
10005554:	18002526 	beq	r3,zero,100055ec <__sfvwrite_r+0xe0>
10005558:	28c00417 	ldw	r3,16(r5)
1000555c:	18002326 	beq	r3,zero,100055ec <__sfvwrite_r+0xe0>
10005560:	10c0008c 	andi	r3,r2,2
10005564:	9c400017 	ldw	r17,0(r19)
10005568:	18002826 	beq	r3,zero,1000560c <__sfvwrite_r+0x100>
1000556c:	0029883a 	mov	r20,zero
10005570:	0025883a 	mov	r18,zero
10005574:	05810004 	movi	r22,1024
10005578:	a00d883a 	mov	r6,r20
1000557c:	a809883a 	mov	r4,r21
10005580:	90004726 	beq	r18,zero,100056a0 <__sfvwrite_r+0x194>
10005584:	900f883a 	mov	r7,r18
10005588:	81400717 	ldw	r5,28(r16)
1000558c:	b480012e 	bgeu	r22,r18,10005594 <__sfvwrite_r+0x88>
10005590:	01c10004 	movi	r7,1024
10005594:	80800917 	ldw	r2,36(r16)
10005598:	103ee83a 	callr	r2
1000559c:	00804c0e 	bge	zero,r2,100056d0 <__sfvwrite_r+0x1c4>
100055a0:	98c00217 	ldw	r3,8(r19)
100055a4:	a0a9883a 	add	r20,r20,r2
100055a8:	90a5c83a 	sub	r18,r18,r2
100055ac:	1885c83a 	sub	r2,r3,r2
100055b0:	98800215 	stw	r2,8(r19)
100055b4:	103ff01e 	bne	r2,zero,10005578 <__alt_data_end+0xf8005578>
100055b8:	0005883a 	mov	r2,zero
100055bc:	dfc00b17 	ldw	ra,44(sp)
100055c0:	df000a17 	ldw	fp,40(sp)
100055c4:	ddc00917 	ldw	r23,36(sp)
100055c8:	dd800817 	ldw	r22,32(sp)
100055cc:	dd400717 	ldw	r21,28(sp)
100055d0:	dd000617 	ldw	r20,24(sp)
100055d4:	dcc00517 	ldw	r19,20(sp)
100055d8:	dc800417 	ldw	r18,16(sp)
100055dc:	dc400317 	ldw	r17,12(sp)
100055e0:	dc000217 	ldw	r16,8(sp)
100055e4:	dec00c04 	addi	sp,sp,48
100055e8:	f800283a 	ret
100055ec:	a809883a 	mov	r4,r21
100055f0:	800b883a 	mov	r5,r16
100055f4:	000314c0 	call	1000314c <__swsetup_r>
100055f8:	1000e81e 	bne	r2,zero,1000599c <__sfvwrite_r+0x490>
100055fc:	8080030b 	ldhu	r2,12(r16)
10005600:	9c400017 	ldw	r17,0(r19)
10005604:	10c0008c 	andi	r3,r2,2
10005608:	183fd81e 	bne	r3,zero,1000556c <__alt_data_end+0xf800556c>
1000560c:	10c0004c 	andi	r3,r2,1
10005610:	002d883a 	mov	r22,zero
10005614:	1800331e 	bne	r3,zero,100056e4 <__sfvwrite_r+0x1d8>
10005618:	0025883a 	mov	r18,zero
1000561c:	90001c26 	beq	r18,zero,10005690 <__sfvwrite_r+0x184>
10005620:	10c0800c 	andi	r3,r2,512
10005624:	85000217 	ldw	r20,8(r16)
10005628:	18006f26 	beq	r3,zero,100057e8 <__sfvwrite_r+0x2dc>
1000562c:	95008936 	bltu	r18,r20,10005854 <__sfvwrite_r+0x348>
10005630:	10c1200c 	andi	r3,r2,1152
10005634:	1800a11e 	bne	r3,zero,100058bc <__sfvwrite_r+0x3b0>
10005638:	81000017 	ldw	r4,0(r16)
1000563c:	a02f883a 	mov	r23,r20
10005640:	a039883a 	mov	fp,r20
10005644:	9029883a 	mov	r20,r18
10005648:	b00b883a 	mov	r5,r22
1000564c:	b80d883a 	mov	r6,r23
10005650:	00067580 	call	10006758 <memmove>
10005654:	81400217 	ldw	r5,8(r16)
10005658:	81000017 	ldw	r4,0(r16)
1000565c:	9005883a 	mov	r2,r18
10005660:	2f39c83a 	sub	fp,r5,fp
10005664:	25c7883a 	add	r3,r4,r23
10005668:	87000215 	stw	fp,8(r16)
1000566c:	80c00015 	stw	r3,0(r16)
10005670:	98c00217 	ldw	r3,8(r19)
10005674:	b0ad883a 	add	r22,r22,r2
10005678:	90a5c83a 	sub	r18,r18,r2
1000567c:	1d29c83a 	sub	r20,r3,r20
10005680:	9d000215 	stw	r20,8(r19)
10005684:	a03fcc26 	beq	r20,zero,100055b8 <__alt_data_end+0xf80055b8>
10005688:	8080030b 	ldhu	r2,12(r16)
1000568c:	903fe41e 	bne	r18,zero,10005620 <__alt_data_end+0xf8005620>
10005690:	8d800017 	ldw	r22,0(r17)
10005694:	8c800117 	ldw	r18,4(r17)
10005698:	8c400204 	addi	r17,r17,8
1000569c:	003fdf06 	br	1000561c <__alt_data_end+0xf800561c>
100056a0:	8d000017 	ldw	r20,0(r17)
100056a4:	8c800117 	ldw	r18,4(r17)
100056a8:	8c400204 	addi	r17,r17,8
100056ac:	003fb206 	br	10005578 <__alt_data_end+0xf8005578>
100056b0:	00079d00 	call	100079d0 <_realloc_r>
100056b4:	1039883a 	mov	fp,r2
100056b8:	10009d1e 	bne	r2,zero,10005930 <__sfvwrite_r+0x424>
100056bc:	81400417 	ldw	r5,16(r16)
100056c0:	a809883a 	mov	r4,r21
100056c4:	000523c0 	call	1000523c <_free_r>
100056c8:	00800304 	movi	r2,12
100056cc:	a8800015 	stw	r2,0(r21)
100056d0:	80c0030b 	ldhu	r3,12(r16)
100056d4:	00bfffc4 	movi	r2,-1
100056d8:	18c01014 	ori	r3,r3,64
100056dc:	80c0030d 	sth	r3,12(r16)
100056e0:	003fb606 	br	100055bc <__alt_data_end+0xf80055bc>
100056e4:	0007883a 	mov	r3,zero
100056e8:	0039883a 	mov	fp,zero
100056ec:	0025883a 	mov	r18,zero
100056f0:	90001f26 	beq	r18,zero,10005770 <__sfvwrite_r+0x264>
100056f4:	18006826 	beq	r3,zero,10005898 <__sfvwrite_r+0x38c>
100056f8:	b02f883a 	mov	r23,r22
100056fc:	9580012e 	bgeu	r18,r22,10005704 <__sfvwrite_r+0x1f8>
10005700:	902f883a 	mov	r23,r18
10005704:	81000017 	ldw	r4,0(r16)
10005708:	80800417 	ldw	r2,16(r16)
1000570c:	b829883a 	mov	r20,r23
10005710:	81800217 	ldw	r6,8(r16)
10005714:	81c00517 	ldw	r7,20(r16)
10005718:	1100022e 	bgeu	r2,r4,10005724 <__sfvwrite_r+0x218>
1000571c:	31d1883a 	add	r8,r6,r7
10005720:	45c01816 	blt	r8,r23,10005784 <__sfvwrite_r+0x278>
10005724:	b9c03f16 	blt	r23,r7,10005824 <__sfvwrite_r+0x318>
10005728:	80800917 	ldw	r2,36(r16)
1000572c:	81400717 	ldw	r5,28(r16)
10005730:	a809883a 	mov	r4,r21
10005734:	d8c00115 	stw	r3,4(sp)
10005738:	e00d883a 	mov	r6,fp
1000573c:	103ee83a 	callr	r2
10005740:	1029883a 	mov	r20,r2
10005744:	d8c00117 	ldw	r3,4(sp)
10005748:	00bfe10e 	bge	zero,r2,100056d0 <__alt_data_end+0xf80056d0>
1000574c:	b52dc83a 	sub	r22,r22,r20
10005750:	b0001f26 	beq	r22,zero,100057d0 <__sfvwrite_r+0x2c4>
10005754:	98800217 	ldw	r2,8(r19)
10005758:	e539883a 	add	fp,fp,r20
1000575c:	9525c83a 	sub	r18,r18,r20
10005760:	1529c83a 	sub	r20,r2,r20
10005764:	9d000215 	stw	r20,8(r19)
10005768:	a03f9326 	beq	r20,zero,100055b8 <__alt_data_end+0xf80055b8>
1000576c:	903fe11e 	bne	r18,zero,100056f4 <__alt_data_end+0xf80056f4>
10005770:	8f000017 	ldw	fp,0(r17)
10005774:	8c800117 	ldw	r18,4(r17)
10005778:	0007883a 	mov	r3,zero
1000577c:	8c400204 	addi	r17,r17,8
10005780:	003fdb06 	br	100056f0 <__alt_data_end+0xf80056f0>
10005784:	400d883a 	mov	r6,r8
10005788:	e00b883a 	mov	r5,fp
1000578c:	d8c00115 	stw	r3,4(sp)
10005790:	da000015 	stw	r8,0(sp)
10005794:	00067580 	call	10006758 <memmove>
10005798:	da000017 	ldw	r8,0(sp)
1000579c:	80800017 	ldw	r2,0(r16)
100057a0:	a809883a 	mov	r4,r21
100057a4:	800b883a 	mov	r5,r16
100057a8:	1205883a 	add	r2,r2,r8
100057ac:	80800015 	stw	r2,0(r16)
100057b0:	da000015 	stw	r8,0(sp)
100057b4:	0004ae80 	call	10004ae8 <_fflush_r>
100057b8:	d8c00117 	ldw	r3,4(sp)
100057bc:	da000017 	ldw	r8,0(sp)
100057c0:	103fc31e 	bne	r2,zero,100056d0 <__alt_data_end+0xf80056d0>
100057c4:	4029883a 	mov	r20,r8
100057c8:	b52dc83a 	sub	r22,r22,r20
100057cc:	b03fe11e 	bne	r22,zero,10005754 <__alt_data_end+0xf8005754>
100057d0:	a809883a 	mov	r4,r21
100057d4:	800b883a 	mov	r5,r16
100057d8:	0004ae80 	call	10004ae8 <_fflush_r>
100057dc:	103fbc1e 	bne	r2,zero,100056d0 <__alt_data_end+0xf80056d0>
100057e0:	0007883a 	mov	r3,zero
100057e4:	003fdb06 	br	10005754 <__alt_data_end+0xf8005754>
100057e8:	81000017 	ldw	r4,0(r16)
100057ec:	80800417 	ldw	r2,16(r16)
100057f0:	1100012e 	bgeu	r2,r4,100057f8 <__sfvwrite_r+0x2ec>
100057f4:	a4805836 	bltu	r20,r18,10005958 <__sfvwrite_r+0x44c>
100057f8:	81c00517 	ldw	r7,20(r16)
100057fc:	91c01a36 	bltu	r18,r7,10005868 <__sfvwrite_r+0x35c>
10005800:	80800917 	ldw	r2,36(r16)
10005804:	81400717 	ldw	r5,28(r16)
10005808:	a809883a 	mov	r4,r21
1000580c:	b00d883a 	mov	r6,r22
10005810:	103ee83a 	callr	r2
10005814:	1029883a 	mov	r20,r2
10005818:	00bfad0e 	bge	zero,r2,100056d0 <__alt_data_end+0xf80056d0>
1000581c:	a005883a 	mov	r2,r20
10005820:	003f9306 	br	10005670 <__alt_data_end+0xf8005670>
10005824:	b80d883a 	mov	r6,r23
10005828:	e00b883a 	mov	r5,fp
1000582c:	d8c00115 	stw	r3,4(sp)
10005830:	00067580 	call	10006758 <memmove>
10005834:	80800217 	ldw	r2,8(r16)
10005838:	81000017 	ldw	r4,0(r16)
1000583c:	d8c00117 	ldw	r3,4(sp)
10005840:	15c5c83a 	sub	r2,r2,r23
10005844:	25ef883a 	add	r23,r4,r23
10005848:	80800215 	stw	r2,8(r16)
1000584c:	85c00015 	stw	r23,0(r16)
10005850:	003fbe06 	br	1000574c <__alt_data_end+0xf800574c>
10005854:	81000017 	ldw	r4,0(r16)
10005858:	9039883a 	mov	fp,r18
1000585c:	9029883a 	mov	r20,r18
10005860:	902f883a 	mov	r23,r18
10005864:	003f7806 	br	10005648 <__alt_data_end+0xf8005648>
10005868:	b00b883a 	mov	r5,r22
1000586c:	900d883a 	mov	r6,r18
10005870:	00067580 	call	10006758 <memmove>
10005874:	80c00217 	ldw	r3,8(r16)
10005878:	80800017 	ldw	r2,0(r16)
1000587c:	9029883a 	mov	r20,r18
10005880:	1c87c83a 	sub	r3,r3,r18
10005884:	1485883a 	add	r2,r2,r18
10005888:	80800015 	stw	r2,0(r16)
1000588c:	80c00215 	stw	r3,8(r16)
10005890:	9005883a 	mov	r2,r18
10005894:	003f7606 	br	10005670 <__alt_data_end+0xf8005670>
10005898:	e009883a 	mov	r4,fp
1000589c:	01400284 	movi	r5,10
100058a0:	900d883a 	mov	r6,r18
100058a4:	00065640 	call	10006564 <memchr>
100058a8:	10003926 	beq	r2,zero,10005990 <__sfvwrite_r+0x484>
100058ac:	15800044 	addi	r22,r2,1
100058b0:	b72dc83a 	sub	r22,r22,fp
100058b4:	00c00044 	movi	r3,1
100058b8:	003f8f06 	br	100056f8 <__alt_data_end+0xf80056f8>
100058bc:	81000517 	ldw	r4,20(r16)
100058c0:	81400417 	ldw	r5,16(r16)
100058c4:	80c00017 	ldw	r3,0(r16)
100058c8:	210d883a 	add	r6,r4,r4
100058cc:	3109883a 	add	r4,r6,r4
100058d0:	2028d7fa 	srli	r20,r4,31
100058d4:	196fc83a 	sub	r23,r3,r5
100058d8:	b9800044 	addi	r6,r23,1
100058dc:	a109883a 	add	r4,r20,r4
100058e0:	2029d07a 	srai	r20,r4,1
100058e4:	348d883a 	add	r6,r6,r18
100058e8:	a180272e 	bgeu	r20,r6,10005988 <__sfvwrite_r+0x47c>
100058ec:	3029883a 	mov	r20,r6
100058f0:	1081000c 	andi	r2,r2,1024
100058f4:	a809883a 	mov	r4,r21
100058f8:	103f6d26 	beq	r2,zero,100056b0 <__alt_data_end+0xf80056b0>
100058fc:	300b883a 	mov	r5,r6
10005900:	0005da00 	call	10005da0 <_malloc_r>
10005904:	1039883a 	mov	fp,r2
10005908:	103f6f26 	beq	r2,zero,100056c8 <__alt_data_end+0xf80056c8>
1000590c:	81400417 	ldw	r5,16(r16)
10005910:	1009883a 	mov	r4,r2
10005914:	b80d883a 	mov	r6,r23
10005918:	000664c0 	call	1000664c <memcpy>
1000591c:	8080030b 	ldhu	r2,12(r16)
10005920:	00fedfc4 	movi	r3,-1153
10005924:	10c4703a 	and	r2,r2,r3
10005928:	10802014 	ori	r2,r2,128
1000592c:	8080030d 	sth	r2,12(r16)
10005930:	e5c9883a 	add	r4,fp,r23
10005934:	a5c7c83a 	sub	r3,r20,r23
10005938:	87000415 	stw	fp,16(r16)
1000593c:	85000515 	stw	r20,20(r16)
10005940:	81000015 	stw	r4,0(r16)
10005944:	9039883a 	mov	fp,r18
10005948:	80c00215 	stw	r3,8(r16)
1000594c:	9029883a 	mov	r20,r18
10005950:	902f883a 	mov	r23,r18
10005954:	003f3c06 	br	10005648 <__alt_data_end+0xf8005648>
10005958:	b00b883a 	mov	r5,r22
1000595c:	a00d883a 	mov	r6,r20
10005960:	00067580 	call	10006758 <memmove>
10005964:	80800017 	ldw	r2,0(r16)
10005968:	a809883a 	mov	r4,r21
1000596c:	800b883a 	mov	r5,r16
10005970:	1505883a 	add	r2,r2,r20
10005974:	80800015 	stw	r2,0(r16)
10005978:	0004ae80 	call	10004ae8 <_fflush_r>
1000597c:	103f541e 	bne	r2,zero,100056d0 <__alt_data_end+0xf80056d0>
10005980:	a005883a 	mov	r2,r20
10005984:	003f3a06 	br	10005670 <__alt_data_end+0xf8005670>
10005988:	a00d883a 	mov	r6,r20
1000598c:	003fd806 	br	100058f0 <__alt_data_end+0xf80058f0>
10005990:	95800044 	addi	r22,r18,1
10005994:	00c00044 	movi	r3,1
10005998:	003f5706 	br	100056f8 <__alt_data_end+0xf80056f8>
1000599c:	80c0030b 	ldhu	r3,12(r16)
100059a0:	00bfffc4 	movi	r2,-1
100059a4:	18c01014 	ori	r3,r3,64
100059a8:	80c0030d 	sth	r3,12(r16)
100059ac:	00c00244 	movi	r3,9
100059b0:	a8c00015 	stw	r3,0(r21)
100059b4:	003f0106 	br	100055bc <__alt_data_end+0xf80055bc>

100059b8 <_fwalk>:
100059b8:	defff904 	addi	sp,sp,-28
100059bc:	dcc00315 	stw	r19,12(sp)
100059c0:	24c0b804 	addi	r19,r4,736
100059c4:	dd400515 	stw	r21,20(sp)
100059c8:	dd000415 	stw	r20,16(sp)
100059cc:	dfc00615 	stw	ra,24(sp)
100059d0:	dc800215 	stw	r18,8(sp)
100059d4:	dc400115 	stw	r17,4(sp)
100059d8:	dc000015 	stw	r16,0(sp)
100059dc:	282b883a 	mov	r21,r5
100059e0:	0029883a 	mov	r20,zero
100059e4:	00050c00 	call	100050c0 <__sfp_lock_acquire>
100059e8:	98001226 	beq	r19,zero,10005a34 <_fwalk+0x7c>
100059ec:	04bfffc4 	movi	r18,-1
100059f0:	9c400117 	ldw	r17,4(r19)
100059f4:	9c000217 	ldw	r16,8(r19)
100059f8:	8c7fffc4 	addi	r17,r17,-1
100059fc:	88000b16 	blt	r17,zero,10005a2c <_fwalk+0x74>
10005a00:	84000304 	addi	r16,r16,12
10005a04:	80c0000f 	ldh	r3,0(r16)
10005a08:	8c7fffc4 	addi	r17,r17,-1
10005a0c:	813ffd04 	addi	r4,r16,-12
10005a10:	18000426 	beq	r3,zero,10005a24 <_fwalk+0x6c>
10005a14:	80c0008f 	ldh	r3,2(r16)
10005a18:	1c800226 	beq	r3,r18,10005a24 <_fwalk+0x6c>
10005a1c:	a83ee83a 	callr	r21
10005a20:	a0a8b03a 	or	r20,r20,r2
10005a24:	84001a04 	addi	r16,r16,104
10005a28:	8cbff61e 	bne	r17,r18,10005a04 <__alt_data_end+0xf8005a04>
10005a2c:	9cc00017 	ldw	r19,0(r19)
10005a30:	983fef1e 	bne	r19,zero,100059f0 <__alt_data_end+0xf80059f0>
10005a34:	00050c40 	call	100050c4 <__sfp_lock_release>
10005a38:	a005883a 	mov	r2,r20
10005a3c:	dfc00617 	ldw	ra,24(sp)
10005a40:	dd400517 	ldw	r21,20(sp)
10005a44:	dd000417 	ldw	r20,16(sp)
10005a48:	dcc00317 	ldw	r19,12(sp)
10005a4c:	dc800217 	ldw	r18,8(sp)
10005a50:	dc400117 	ldw	r17,4(sp)
10005a54:	dc000017 	ldw	r16,0(sp)
10005a58:	dec00704 	addi	sp,sp,28
10005a5c:	f800283a 	ret

10005a60 <_fwalk_reent>:
10005a60:	defff804 	addi	sp,sp,-32
10005a64:	dcc00315 	stw	r19,12(sp)
10005a68:	24c0b804 	addi	r19,r4,736
10005a6c:	dd800615 	stw	r22,24(sp)
10005a70:	dd400515 	stw	r21,20(sp)
10005a74:	dd000415 	stw	r20,16(sp)
10005a78:	dfc00715 	stw	ra,28(sp)
10005a7c:	dc800215 	stw	r18,8(sp)
10005a80:	dc400115 	stw	r17,4(sp)
10005a84:	dc000015 	stw	r16,0(sp)
10005a88:	2029883a 	mov	r20,r4
10005a8c:	282b883a 	mov	r21,r5
10005a90:	002d883a 	mov	r22,zero
10005a94:	00050c00 	call	100050c0 <__sfp_lock_acquire>
10005a98:	98001326 	beq	r19,zero,10005ae8 <_fwalk_reent+0x88>
10005a9c:	04bfffc4 	movi	r18,-1
10005aa0:	9c400117 	ldw	r17,4(r19)
10005aa4:	9c000217 	ldw	r16,8(r19)
10005aa8:	8c7fffc4 	addi	r17,r17,-1
10005aac:	88000c16 	blt	r17,zero,10005ae0 <_fwalk_reent+0x80>
10005ab0:	84000304 	addi	r16,r16,12
10005ab4:	80c0000f 	ldh	r3,0(r16)
10005ab8:	8c7fffc4 	addi	r17,r17,-1
10005abc:	817ffd04 	addi	r5,r16,-12
10005ac0:	18000526 	beq	r3,zero,10005ad8 <_fwalk_reent+0x78>
10005ac4:	80c0008f 	ldh	r3,2(r16)
10005ac8:	a009883a 	mov	r4,r20
10005acc:	1c800226 	beq	r3,r18,10005ad8 <_fwalk_reent+0x78>
10005ad0:	a83ee83a 	callr	r21
10005ad4:	b0acb03a 	or	r22,r22,r2
10005ad8:	84001a04 	addi	r16,r16,104
10005adc:	8cbff51e 	bne	r17,r18,10005ab4 <__alt_data_end+0xf8005ab4>
10005ae0:	9cc00017 	ldw	r19,0(r19)
10005ae4:	983fee1e 	bne	r19,zero,10005aa0 <__alt_data_end+0xf8005aa0>
10005ae8:	00050c40 	call	100050c4 <__sfp_lock_release>
10005aec:	b005883a 	mov	r2,r22
10005af0:	dfc00717 	ldw	ra,28(sp)
10005af4:	dd800617 	ldw	r22,24(sp)
10005af8:	dd400517 	ldw	r21,20(sp)
10005afc:	dd000417 	ldw	r20,16(sp)
10005b00:	dcc00317 	ldw	r19,12(sp)
10005b04:	dc800217 	ldw	r18,8(sp)
10005b08:	dc400117 	ldw	r17,4(sp)
10005b0c:	dc000017 	ldw	r16,0(sp)
10005b10:	dec00804 	addi	sp,sp,32
10005b14:	f800283a 	ret

10005b18 <_setlocale_r>:
10005b18:	defffe04 	addi	sp,sp,-8
10005b1c:	dc000015 	stw	r16,0(sp)
10005b20:	dfc00115 	stw	ra,4(sp)
10005b24:	3021883a 	mov	r16,r6
10005b28:	30000526 	beq	r6,zero,10005b40 <_setlocale_r+0x28>
10005b2c:	3009883a 	mov	r4,r6
10005b30:	01440074 	movhi	r5,4097
10005b34:	297f7904 	addi	r5,r5,-540
10005b38:	000813c0 	call	1000813c <strcmp>
10005b3c:	1000061e 	bne	r2,zero,10005b58 <_setlocale_r+0x40>
10005b40:	00840074 	movhi	r2,4097
10005b44:	10bf7804 	addi	r2,r2,-544
10005b48:	dfc00117 	ldw	ra,4(sp)
10005b4c:	dc000017 	ldw	r16,0(sp)
10005b50:	dec00204 	addi	sp,sp,8
10005b54:	f800283a 	ret
10005b58:	8009883a 	mov	r4,r16
10005b5c:	01440074 	movhi	r5,4097
10005b60:	297f7804 	addi	r5,r5,-544
10005b64:	000813c0 	call	1000813c <strcmp>
10005b68:	103ff526 	beq	r2,zero,10005b40 <__alt_data_end+0xf8005b40>
10005b6c:	8009883a 	mov	r4,r16
10005b70:	01440074 	movhi	r5,4097
10005b74:	297f6304 	addi	r5,r5,-628
10005b78:	000813c0 	call	1000813c <strcmp>
10005b7c:	103ff026 	beq	r2,zero,10005b40 <__alt_data_end+0xf8005b40>
10005b80:	0005883a 	mov	r2,zero
10005b84:	003ff006 	br	10005b48 <__alt_data_end+0xf8005b48>

10005b88 <__locale_charset>:
10005b88:	00840074 	movhi	r2,4097
10005b8c:	10812b04 	addi	r2,r2,1196
10005b90:	f800283a 	ret

10005b94 <__locale_mb_cur_max>:
10005b94:	00840074 	movhi	r2,4097
10005b98:	1086c904 	addi	r2,r2,6948
10005b9c:	10800017 	ldw	r2,0(r2)
10005ba0:	f800283a 	ret

10005ba4 <__locale_msgcharset>:
10005ba4:	00840074 	movhi	r2,4097
10005ba8:	10812304 	addi	r2,r2,1164
10005bac:	f800283a 	ret

10005bb0 <__locale_cjk_lang>:
10005bb0:	0005883a 	mov	r2,zero
10005bb4:	f800283a 	ret

10005bb8 <_localeconv_r>:
10005bb8:	00840074 	movhi	r2,4097
10005bbc:	10813304 	addi	r2,r2,1228
10005bc0:	f800283a 	ret

10005bc4 <setlocale>:
10005bc4:	00c40074 	movhi	r3,4097
10005bc8:	18c6c804 	addi	r3,r3,6944
10005bcc:	2005883a 	mov	r2,r4
10005bd0:	19000017 	ldw	r4,0(r3)
10005bd4:	280d883a 	mov	r6,r5
10005bd8:	100b883a 	mov	r5,r2
10005bdc:	0005b181 	jmpi	10005b18 <_setlocale_r>

10005be0 <localeconv>:
10005be0:	00840074 	movhi	r2,4097
10005be4:	10813304 	addi	r2,r2,1228
10005be8:	f800283a 	ret

10005bec <__smakebuf_r>:
10005bec:	2880030b 	ldhu	r2,12(r5)
10005bf0:	deffec04 	addi	sp,sp,-80
10005bf4:	dc000f15 	stw	r16,60(sp)
10005bf8:	dfc01315 	stw	ra,76(sp)
10005bfc:	dcc01215 	stw	r19,72(sp)
10005c00:	dc801115 	stw	r18,68(sp)
10005c04:	dc401015 	stw	r17,64(sp)
10005c08:	10c0008c 	andi	r3,r2,2
10005c0c:	2821883a 	mov	r16,r5
10005c10:	18003a1e 	bne	r3,zero,10005cfc <__smakebuf_r+0x110>
10005c14:	2940038f 	ldh	r5,14(r5)
10005c18:	2023883a 	mov	r17,r4
10005c1c:	28001b16 	blt	r5,zero,10005c8c <__smakebuf_r+0xa0>
10005c20:	d80d883a 	mov	r6,sp
10005c24:	0009c400 	call	10009c40 <_fstat_r>
10005c28:	10001716 	blt	r2,zero,10005c88 <__smakebuf_r+0x9c>
10005c2c:	d8800117 	ldw	r2,4(sp)
10005c30:	00e00014 	movui	r3,32768
10005c34:	10bc000c 	andi	r2,r2,61440
10005c38:	10c03e26 	beq	r2,r3,10005d34 <__smakebuf_r+0x148>
10005c3c:	80c0030b 	ldhu	r3,12(r16)
10005c40:	18c20014 	ori	r3,r3,2048
10005c44:	80c0030d 	sth	r3,12(r16)
10005c48:	00c80004 	movi	r3,8192
10005c4c:	10c0431e 	bne	r2,r3,10005d5c <__smakebuf_r+0x170>
10005c50:	8140038f 	ldh	r5,14(r16)
10005c54:	8809883a 	mov	r4,r17
10005c58:	0009ca80 	call	10009ca8 <_isatty_r>
10005c5c:	10004d26 	beq	r2,zero,10005d94 <__smakebuf_r+0x1a8>
10005c60:	80c0030b 	ldhu	r3,12(r16)
10005c64:	04c00044 	movi	r19,1
10005c68:	808010c4 	addi	r2,r16,67
10005c6c:	1cc6b03a 	or	r3,r3,r19
10005c70:	80c0030d 	sth	r3,12(r16)
10005c74:	80800015 	stw	r2,0(r16)
10005c78:	80800415 	stw	r2,16(r16)
10005c7c:	84c00515 	stw	r19,20(r16)
10005c80:	04810004 	movi	r18,1024
10005c84:	00000706 	br	10005ca4 <__smakebuf_r+0xb8>
10005c88:	8080030b 	ldhu	r2,12(r16)
10005c8c:	10c0200c 	andi	r3,r2,128
10005c90:	1800261e 	bne	r3,zero,10005d2c <__smakebuf_r+0x140>
10005c94:	04810004 	movi	r18,1024
10005c98:	10820014 	ori	r2,r2,2048
10005c9c:	8080030d 	sth	r2,12(r16)
10005ca0:	0027883a 	mov	r19,zero
10005ca4:	8809883a 	mov	r4,r17
10005ca8:	900b883a 	mov	r5,r18
10005cac:	0005da00 	call	10005da0 <_malloc_r>
10005cb0:	10002d26 	beq	r2,zero,10005d68 <__smakebuf_r+0x17c>
10005cb4:	80c0030b 	ldhu	r3,12(r16)
10005cb8:	01040034 	movhi	r4,4096
10005cbc:	21135b04 	addi	r4,r4,19820
10005cc0:	89000f15 	stw	r4,60(r17)
10005cc4:	18c02014 	ori	r3,r3,128
10005cc8:	80c0030d 	sth	r3,12(r16)
10005ccc:	80800015 	stw	r2,0(r16)
10005cd0:	80800415 	stw	r2,16(r16)
10005cd4:	84800515 	stw	r18,20(r16)
10005cd8:	98000d26 	beq	r19,zero,10005d10 <__smakebuf_r+0x124>
10005cdc:	8140038f 	ldh	r5,14(r16)
10005ce0:	8809883a 	mov	r4,r17
10005ce4:	0009ca80 	call	10009ca8 <_isatty_r>
10005ce8:	10000926 	beq	r2,zero,10005d10 <__smakebuf_r+0x124>
10005cec:	8080030b 	ldhu	r2,12(r16)
10005cf0:	10800054 	ori	r2,r2,1
10005cf4:	8080030d 	sth	r2,12(r16)
10005cf8:	00000506 	br	10005d10 <__smakebuf_r+0x124>
10005cfc:	288010c4 	addi	r2,r5,67
10005d00:	28800015 	stw	r2,0(r5)
10005d04:	28800415 	stw	r2,16(r5)
10005d08:	00800044 	movi	r2,1
10005d0c:	28800515 	stw	r2,20(r5)
10005d10:	dfc01317 	ldw	ra,76(sp)
10005d14:	dcc01217 	ldw	r19,72(sp)
10005d18:	dc801117 	ldw	r18,68(sp)
10005d1c:	dc401017 	ldw	r17,64(sp)
10005d20:	dc000f17 	ldw	r16,60(sp)
10005d24:	dec01404 	addi	sp,sp,80
10005d28:	f800283a 	ret
10005d2c:	04801004 	movi	r18,64
10005d30:	003fd906 	br	10005c98 <__alt_data_end+0xf8005c98>
10005d34:	81000a17 	ldw	r4,40(r16)
10005d38:	00c40074 	movhi	r3,4097
10005d3c:	18e03604 	addi	r3,r3,-32552
10005d40:	20ffbe1e 	bne	r4,r3,10005c3c <__alt_data_end+0xf8005c3c>
10005d44:	80c0030b 	ldhu	r3,12(r16)
10005d48:	01010004 	movi	r4,1024
10005d4c:	81001315 	stw	r4,76(r16)
10005d50:	1906b03a 	or	r3,r3,r4
10005d54:	80c0030d 	sth	r3,12(r16)
10005d58:	003fbb06 	br	10005c48 <__alt_data_end+0xf8005c48>
10005d5c:	0027883a 	mov	r19,zero
10005d60:	04810004 	movi	r18,1024
10005d64:	003fcf06 	br	10005ca4 <__alt_data_end+0xf8005ca4>
10005d68:	8080030b 	ldhu	r2,12(r16)
10005d6c:	10c0800c 	andi	r3,r2,512
10005d70:	183fe71e 	bne	r3,zero,10005d10 <__alt_data_end+0xf8005d10>
10005d74:	10800094 	ori	r2,r2,2
10005d78:	80c010c4 	addi	r3,r16,67
10005d7c:	8080030d 	sth	r2,12(r16)
10005d80:	00800044 	movi	r2,1
10005d84:	80c00015 	stw	r3,0(r16)
10005d88:	80c00415 	stw	r3,16(r16)
10005d8c:	80800515 	stw	r2,20(r16)
10005d90:	003fdf06 	br	10005d10 <__alt_data_end+0xf8005d10>
10005d94:	04c00044 	movi	r19,1
10005d98:	04810004 	movi	r18,1024
10005d9c:	003fc106 	br	10005ca4 <__alt_data_end+0xf8005ca4>

10005da0 <_malloc_r>:
10005da0:	defff504 	addi	sp,sp,-44
10005da4:	dc800315 	stw	r18,12(sp)
10005da8:	dfc00a15 	stw	ra,40(sp)
10005dac:	df000915 	stw	fp,36(sp)
10005db0:	ddc00815 	stw	r23,32(sp)
10005db4:	dd800715 	stw	r22,28(sp)
10005db8:	dd400615 	stw	r21,24(sp)
10005dbc:	dd000515 	stw	r20,20(sp)
10005dc0:	dcc00415 	stw	r19,16(sp)
10005dc4:	dc400215 	stw	r17,8(sp)
10005dc8:	dc000115 	stw	r16,4(sp)
10005dcc:	288002c4 	addi	r2,r5,11
10005dd0:	00c00584 	movi	r3,22
10005dd4:	2025883a 	mov	r18,r4
10005dd8:	18802b2e 	bgeu	r3,r2,10005e88 <_malloc_r+0xe8>
10005ddc:	047ffe04 	movi	r17,-8
10005de0:	1462703a 	and	r17,r2,r17
10005de4:	88002a16 	blt	r17,zero,10005e90 <_malloc_r+0xf0>
10005de8:	89402936 	bltu	r17,r5,10005e90 <_malloc_r+0xf0>
10005dec:	9009883a 	mov	r4,r18
10005df0:	000dd240 	call	1000dd24 <__malloc_lock>
10005df4:	00807dc4 	movi	r2,503
10005df8:	14402936 	bltu	r2,r17,10005ea0 <_malloc_r+0x100>
10005dfc:	8808d0fa 	srli	r4,r17,3
10005e00:	04c40074 	movhi	r19,4097
10005e04:	9cc14104 	addi	r19,r19,1284
10005e08:	2105883a 	add	r2,r4,r4
10005e0c:	1085883a 	add	r2,r2,r2
10005e10:	1085883a 	add	r2,r2,r2
10005e14:	9885883a 	add	r2,r19,r2
10005e18:	14000317 	ldw	r16,12(r2)
10005e1c:	80815226 	beq	r16,r2,10006368 <_malloc_r+0x5c8>
10005e20:	81000117 	ldw	r4,4(r16)
10005e24:	00bfff04 	movi	r2,-4
10005e28:	80c00317 	ldw	r3,12(r16)
10005e2c:	2084703a 	and	r2,r4,r2
10005e30:	8085883a 	add	r2,r16,r2
10005e34:	81000217 	ldw	r4,8(r16)
10005e38:	11400117 	ldw	r5,4(r2)
10005e3c:	20c00315 	stw	r3,12(r4)
10005e40:	19000215 	stw	r4,8(r3)
10005e44:	28c00054 	ori	r3,r5,1
10005e48:	10c00115 	stw	r3,4(r2)
10005e4c:	9009883a 	mov	r4,r18
10005e50:	000dd440 	call	1000dd44 <__malloc_unlock>
10005e54:	80800204 	addi	r2,r16,8
10005e58:	dfc00a17 	ldw	ra,40(sp)
10005e5c:	df000917 	ldw	fp,36(sp)
10005e60:	ddc00817 	ldw	r23,32(sp)
10005e64:	dd800717 	ldw	r22,28(sp)
10005e68:	dd400617 	ldw	r21,24(sp)
10005e6c:	dd000517 	ldw	r20,20(sp)
10005e70:	dcc00417 	ldw	r19,16(sp)
10005e74:	dc800317 	ldw	r18,12(sp)
10005e78:	dc400217 	ldw	r17,8(sp)
10005e7c:	dc000117 	ldw	r16,4(sp)
10005e80:	dec00b04 	addi	sp,sp,44
10005e84:	f800283a 	ret
10005e88:	04400404 	movi	r17,16
10005e8c:	897fd72e 	bgeu	r17,r5,10005dec <__alt_data_end+0xf8005dec>
10005e90:	00800304 	movi	r2,12
10005e94:	90800015 	stw	r2,0(r18)
10005e98:	0005883a 	mov	r2,zero
10005e9c:	003fee06 	br	10005e58 <__alt_data_end+0xf8005e58>
10005ea0:	8808d27a 	srli	r4,r17,9
10005ea4:	20007126 	beq	r4,zero,1000606c <_malloc_r+0x2cc>
10005ea8:	00800104 	movi	r2,4
10005eac:	1100f536 	bltu	r2,r4,10006284 <_malloc_r+0x4e4>
10005eb0:	8808d1ba 	srli	r4,r17,6
10005eb4:	21000e04 	addi	r4,r4,56
10005eb8:	210b883a 	add	r5,r4,r4
10005ebc:	294b883a 	add	r5,r5,r5
10005ec0:	294b883a 	add	r5,r5,r5
10005ec4:	04c40074 	movhi	r19,4097
10005ec8:	9cc14104 	addi	r19,r19,1284
10005ecc:	994b883a 	add	r5,r19,r5
10005ed0:	2c000317 	ldw	r16,12(r5)
10005ed4:	2c000e26 	beq	r5,r16,10005f10 <_malloc_r+0x170>
10005ed8:	80c00117 	ldw	r3,4(r16)
10005edc:	01ffff04 	movi	r7,-4
10005ee0:	018003c4 	movi	r6,15
10005ee4:	19c6703a 	and	r3,r3,r7
10005ee8:	1c45c83a 	sub	r2,r3,r17
10005eec:	30800716 	blt	r6,r2,10005f0c <_malloc_r+0x16c>
10005ef0:	1000610e 	bge	r2,zero,10006078 <_malloc_r+0x2d8>
10005ef4:	84000317 	ldw	r16,12(r16)
10005ef8:	2c000526 	beq	r5,r16,10005f10 <_malloc_r+0x170>
10005efc:	80c00117 	ldw	r3,4(r16)
10005f00:	19c6703a 	and	r3,r3,r7
10005f04:	1c45c83a 	sub	r2,r3,r17
10005f08:	30bff90e 	bge	r6,r2,10005ef0 <__alt_data_end+0xf8005ef0>
10005f0c:	213fffc4 	addi	r4,r4,-1
10005f10:	21000044 	addi	r4,r4,1
10005f14:	9c000417 	ldw	r16,16(r19)
10005f18:	00c40074 	movhi	r3,4097
10005f1c:	18c14104 	addi	r3,r3,1284
10005f20:	1a400204 	addi	r9,r3,8
10005f24:	82410926 	beq	r16,r9,1000634c <_malloc_r+0x5ac>
10005f28:	81400117 	ldw	r5,4(r16)
10005f2c:	00bfff04 	movi	r2,-4
10005f30:	018003c4 	movi	r6,15
10005f34:	2884703a 	and	r2,r5,r2
10005f38:	144bc83a 	sub	r5,r2,r17
10005f3c:	3140f416 	blt	r6,r5,10006310 <_malloc_r+0x570>
10005f40:	1a400515 	stw	r9,20(r3)
10005f44:	1a400415 	stw	r9,16(r3)
10005f48:	2800570e 	bge	r5,zero,100060a8 <_malloc_r+0x308>
10005f4c:	01407fc4 	movi	r5,511
10005f50:	2880d436 	bltu	r5,r2,100062a4 <_malloc_r+0x504>
10005f54:	1004d0fa 	srli	r2,r2,3
10005f58:	02000044 	movi	r8,1
10005f5c:	19c00117 	ldw	r7,4(r3)
10005f60:	108b883a 	add	r5,r2,r2
10005f64:	294b883a 	add	r5,r5,r5
10005f68:	1005d0ba 	srai	r2,r2,2
10005f6c:	294b883a 	add	r5,r5,r5
10005f70:	28cb883a 	add	r5,r5,r3
10005f74:	29800217 	ldw	r6,8(r5)
10005f78:	4084983a 	sll	r2,r8,r2
10005f7c:	81400315 	stw	r5,12(r16)
10005f80:	81800215 	stw	r6,8(r16)
10005f84:	11c4b03a 	or	r2,r2,r7
10005f88:	2c000215 	stw	r16,8(r5)
10005f8c:	18800115 	stw	r2,4(r3)
10005f90:	34000315 	stw	r16,12(r6)
10005f94:	2007d0ba 	srai	r3,r4,2
10005f98:	01400044 	movi	r5,1
10005f9c:	28ca983a 	sll	r5,r5,r3
10005fa0:	11404936 	bltu	r2,r5,100060c8 <_malloc_r+0x328>
10005fa4:	1146703a 	and	r3,r2,r5
10005fa8:	18000a1e 	bne	r3,zero,10005fd4 <_malloc_r+0x234>
10005fac:	00ffff04 	movi	r3,-4
10005fb0:	294b883a 	add	r5,r5,r5
10005fb4:	20c8703a 	and	r4,r4,r3
10005fb8:	1146703a 	and	r3,r2,r5
10005fbc:	21000104 	addi	r4,r4,4
10005fc0:	1800041e 	bne	r3,zero,10005fd4 <_malloc_r+0x234>
10005fc4:	294b883a 	add	r5,r5,r5
10005fc8:	1146703a 	and	r3,r2,r5
10005fcc:	21000104 	addi	r4,r4,4
10005fd0:	183ffc26 	beq	r3,zero,10005fc4 <__alt_data_end+0xf8005fc4>
10005fd4:	023fff04 	movi	r8,-4
10005fd8:	01c003c4 	movi	r7,15
10005fdc:	2105883a 	add	r2,r4,r4
10005fe0:	1085883a 	add	r2,r2,r2
10005fe4:	1085883a 	add	r2,r2,r2
10005fe8:	9897883a 	add	r11,r19,r2
10005fec:	5a800304 	addi	r10,r11,12
10005ff0:	2019883a 	mov	r12,r4
10005ff4:	54000017 	ldw	r16,0(r10)
10005ff8:	51bffd04 	addi	r6,r10,-12
10005ffc:	8180041e 	bne	r16,r6,10006010 <_malloc_r+0x270>
10006000:	0000d406 	br	10006354 <_malloc_r+0x5b4>
10006004:	1000dd0e 	bge	r2,zero,1000637c <_malloc_r+0x5dc>
10006008:	84000317 	ldw	r16,12(r16)
1000600c:	8180d126 	beq	r16,r6,10006354 <_malloc_r+0x5b4>
10006010:	80c00117 	ldw	r3,4(r16)
10006014:	1a06703a 	and	r3,r3,r8
10006018:	1c45c83a 	sub	r2,r3,r17
1000601c:	38bff90e 	bge	r7,r2,10006004 <__alt_data_end+0xf8006004>
10006020:	80c00317 	ldw	r3,12(r16)
10006024:	81000217 	ldw	r4,8(r16)
10006028:	89400054 	ori	r5,r17,1
1000602c:	81400115 	stw	r5,4(r16)
10006030:	20c00315 	stw	r3,12(r4)
10006034:	19000215 	stw	r4,8(r3)
10006038:	8463883a 	add	r17,r16,r17
1000603c:	9c400515 	stw	r17,20(r19)
10006040:	9c400415 	stw	r17,16(r19)
10006044:	10c00054 	ori	r3,r2,1
10006048:	8a400315 	stw	r9,12(r17)
1000604c:	8a400215 	stw	r9,8(r17)
10006050:	88c00115 	stw	r3,4(r17)
10006054:	88a3883a 	add	r17,r17,r2
10006058:	88800015 	stw	r2,0(r17)
1000605c:	9009883a 	mov	r4,r18
10006060:	000dd440 	call	1000dd44 <__malloc_unlock>
10006064:	80800204 	addi	r2,r16,8
10006068:	003f7b06 	br	10005e58 <__alt_data_end+0xf8005e58>
1000606c:	01401f84 	movi	r5,126
10006070:	01000fc4 	movi	r4,63
10006074:	003f9106 	br	10005ebc <__alt_data_end+0xf8005ebc>
10006078:	80800317 	ldw	r2,12(r16)
1000607c:	81000217 	ldw	r4,8(r16)
10006080:	80c7883a 	add	r3,r16,r3
10006084:	19400117 	ldw	r5,4(r3)
10006088:	20800315 	stw	r2,12(r4)
1000608c:	11000215 	stw	r4,8(r2)
10006090:	28800054 	ori	r2,r5,1
10006094:	18800115 	stw	r2,4(r3)
10006098:	9009883a 	mov	r4,r18
1000609c:	000dd440 	call	1000dd44 <__malloc_unlock>
100060a0:	80800204 	addi	r2,r16,8
100060a4:	003f6c06 	br	10005e58 <__alt_data_end+0xf8005e58>
100060a8:	8085883a 	add	r2,r16,r2
100060ac:	10c00117 	ldw	r3,4(r2)
100060b0:	9009883a 	mov	r4,r18
100060b4:	18c00054 	ori	r3,r3,1
100060b8:	10c00115 	stw	r3,4(r2)
100060bc:	000dd440 	call	1000dd44 <__malloc_unlock>
100060c0:	80800204 	addi	r2,r16,8
100060c4:	003f6406 	br	10005e58 <__alt_data_end+0xf8005e58>
100060c8:	9c000217 	ldw	r16,8(r19)
100060cc:	00bfff04 	movi	r2,-4
100060d0:	85400117 	ldw	r21,4(r16)
100060d4:	a8aa703a 	and	r21,r21,r2
100060d8:	ac400336 	bltu	r21,r17,100060e8 <_malloc_r+0x348>
100060dc:	ac45c83a 	sub	r2,r21,r17
100060e0:	00c003c4 	movi	r3,15
100060e4:	18805d16 	blt	r3,r2,1000625c <_malloc_r+0x4bc>
100060e8:	00840074 	movhi	r2,4097
100060ec:	108d9904 	addi	r2,r2,13924
100060f0:	00c40074 	movhi	r3,4097
100060f4:	18c6ca04 	addi	r3,r3,6952
100060f8:	15c00017 	ldw	r23,0(r2)
100060fc:	19000017 	ldw	r4,0(r3)
10006100:	00bfffc4 	movi	r2,-1
10006104:	8579883a 	add	fp,r16,r21
10006108:	8def883a 	add	r23,r17,r23
1000610c:	2080e426 	beq	r4,r2,100064a0 <_malloc_r+0x700>
10006110:	bdc403c4 	addi	r23,r23,4111
10006114:	00bc0004 	movi	r2,-4096
10006118:	b8ae703a 	and	r23,r23,r2
1000611c:	9009883a 	mov	r4,r18
10006120:	b80b883a 	mov	r5,r23
10006124:	d8c00015 	stw	r3,0(sp)
10006128:	0007f9c0 	call	10007f9c <_sbrk_r>
1000612c:	1029883a 	mov	r20,r2
10006130:	00bfffc4 	movi	r2,-1
10006134:	d8c00017 	ldw	r3,0(sp)
10006138:	a080a426 	beq	r20,r2,100063cc <_malloc_r+0x62c>
1000613c:	a700a236 	bltu	r20,fp,100063c8 <_malloc_r+0x628>
10006140:	05840074 	movhi	r22,4097
10006144:	b58da104 	addi	r22,r22,13956
10006148:	b0800017 	ldw	r2,0(r22)
1000614c:	b885883a 	add	r2,r23,r2
10006150:	b0800015 	stw	r2,0(r22)
10006154:	e500da26 	beq	fp,r20,100064c0 <_malloc_r+0x720>
10006158:	19000017 	ldw	r4,0(r3)
1000615c:	00ffffc4 	movi	r3,-1
10006160:	20c0e426 	beq	r4,r3,100064f4 <_malloc_r+0x754>
10006164:	a739c83a 	sub	fp,r20,fp
10006168:	1705883a 	add	r2,r2,fp
1000616c:	b0800015 	stw	r2,0(r22)
10006170:	a08001cc 	andi	r2,r20,7
10006174:	1000b526 	beq	r2,zero,1000644c <_malloc_r+0x6ac>
10006178:	a0a9c83a 	sub	r20,r20,r2
1000617c:	00c40204 	movi	r3,4104
10006180:	a5000204 	addi	r20,r20,8
10006184:	1885c83a 	sub	r2,r3,r2
10006188:	a5c7883a 	add	r3,r20,r23
1000618c:	18c3ffcc 	andi	r3,r3,4095
10006190:	10efc83a 	sub	r23,r2,r3
10006194:	9009883a 	mov	r4,r18
10006198:	b80b883a 	mov	r5,r23
1000619c:	0007f9c0 	call	10007f9c <_sbrk_r>
100061a0:	00ffffc4 	movi	r3,-1
100061a4:	10c0d026 	beq	r2,r3,100064e8 <_malloc_r+0x748>
100061a8:	1505c83a 	sub	r2,r2,r20
100061ac:	b887883a 	add	r3,r23,r2
100061b0:	18c00054 	ori	r3,r3,1
100061b4:	b0800017 	ldw	r2,0(r22)
100061b8:	9d000215 	stw	r20,8(r19)
100061bc:	a0c00115 	stw	r3,4(r20)
100061c0:	b885883a 	add	r2,r23,r2
100061c4:	b0800015 	stw	r2,0(r22)
100061c8:	84c00e26 	beq	r16,r19,10006204 <_malloc_r+0x464>
100061cc:	00c003c4 	movi	r3,15
100061d0:	1d40a02e 	bgeu	r3,r21,10006454 <_malloc_r+0x6b4>
100061d4:	81400117 	ldw	r5,4(r16)
100061d8:	ad7ffd04 	addi	r21,r21,-12
100061dc:	013ffe04 	movi	r4,-8
100061e0:	a908703a 	and	r4,r21,r4
100061e4:	2940004c 	andi	r5,r5,1
100061e8:	214ab03a 	or	r5,r4,r5
100061ec:	81400115 	stw	r5,4(r16)
100061f0:	01800144 	movi	r6,5
100061f4:	810b883a 	add	r5,r16,r4
100061f8:	29800115 	stw	r6,4(r5)
100061fc:	29800215 	stw	r6,8(r5)
10006200:	1900c036 	bltu	r3,r4,10006504 <_malloc_r+0x764>
10006204:	00c40074 	movhi	r3,4097
10006208:	18cd9804 	addi	r3,r3,13920
1000620c:	19000017 	ldw	r4,0(r3)
10006210:	2080012e 	bgeu	r4,r2,10006218 <_malloc_r+0x478>
10006214:	18800015 	stw	r2,0(r3)
10006218:	00c40074 	movhi	r3,4097
1000621c:	18cd9704 	addi	r3,r3,13916
10006220:	19000017 	ldw	r4,0(r3)
10006224:	9c000217 	ldw	r16,8(r19)
10006228:	2080012e 	bgeu	r4,r2,10006230 <_malloc_r+0x490>
1000622c:	18800015 	stw	r2,0(r3)
10006230:	80c00117 	ldw	r3,4(r16)
10006234:	00bfff04 	movi	r2,-4
10006238:	1886703a 	and	r3,r3,r2
1000623c:	1c45c83a 	sub	r2,r3,r17
10006240:	1c400236 	bltu	r3,r17,1000624c <_malloc_r+0x4ac>
10006244:	00c003c4 	movi	r3,15
10006248:	18800416 	blt	r3,r2,1000625c <_malloc_r+0x4bc>
1000624c:	9009883a 	mov	r4,r18
10006250:	000dd440 	call	1000dd44 <__malloc_unlock>
10006254:	0005883a 	mov	r2,zero
10006258:	003eff06 	br	10005e58 <__alt_data_end+0xf8005e58>
1000625c:	88c00054 	ori	r3,r17,1
10006260:	80c00115 	stw	r3,4(r16)
10006264:	8463883a 	add	r17,r16,r17
10006268:	10800054 	ori	r2,r2,1
1000626c:	9c400215 	stw	r17,8(r19)
10006270:	88800115 	stw	r2,4(r17)
10006274:	9009883a 	mov	r4,r18
10006278:	000dd440 	call	1000dd44 <__malloc_unlock>
1000627c:	80800204 	addi	r2,r16,8
10006280:	003ef506 	br	10005e58 <__alt_data_end+0xf8005e58>
10006284:	00800504 	movi	r2,20
10006288:	1100482e 	bgeu	r2,r4,100063ac <_malloc_r+0x60c>
1000628c:	00801504 	movi	r2,84
10006290:	11006836 	bltu	r2,r4,10006434 <_malloc_r+0x694>
10006294:	8808d33a 	srli	r4,r17,12
10006298:	21001b84 	addi	r4,r4,110
1000629c:	210b883a 	add	r5,r4,r4
100062a0:	003f0606 	br	10005ebc <__alt_data_end+0xf8005ebc>
100062a4:	1006d27a 	srli	r3,r2,9
100062a8:	01400104 	movi	r5,4
100062ac:	28c0422e 	bgeu	r5,r3,100063b8 <_malloc_r+0x618>
100062b0:	01400504 	movi	r5,20
100062b4:	28c07c36 	bltu	r5,r3,100064a8 <_malloc_r+0x708>
100062b8:	194016c4 	addi	r5,r3,91
100062bc:	294d883a 	add	r6,r5,r5
100062c0:	318d883a 	add	r6,r6,r6
100062c4:	318d883a 	add	r6,r6,r6
100062c8:	998d883a 	add	r6,r19,r6
100062cc:	30c00217 	ldw	r3,8(r6)
100062d0:	01c40074 	movhi	r7,4097
100062d4:	39c14104 	addi	r7,r7,1284
100062d8:	19806326 	beq	r3,r6,10006468 <_malloc_r+0x6c8>
100062dc:	01ffff04 	movi	r7,-4
100062e0:	19400117 	ldw	r5,4(r3)
100062e4:	29ca703a 	and	r5,r5,r7
100062e8:	1140022e 	bgeu	r2,r5,100062f4 <_malloc_r+0x554>
100062ec:	18c00217 	ldw	r3,8(r3)
100062f0:	30fffb1e 	bne	r6,r3,100062e0 <__alt_data_end+0xf80062e0>
100062f4:	19400317 	ldw	r5,12(r3)
100062f8:	98800117 	ldw	r2,4(r19)
100062fc:	81400315 	stw	r5,12(r16)
10006300:	80c00215 	stw	r3,8(r16)
10006304:	2c000215 	stw	r16,8(r5)
10006308:	1c000315 	stw	r16,12(r3)
1000630c:	003f2106 	br	10005f94 <__alt_data_end+0xf8005f94>
10006310:	88800054 	ori	r2,r17,1
10006314:	80800115 	stw	r2,4(r16)
10006318:	8463883a 	add	r17,r16,r17
1000631c:	1c400515 	stw	r17,20(r3)
10006320:	1c400415 	stw	r17,16(r3)
10006324:	28800054 	ori	r2,r5,1
10006328:	88800115 	stw	r2,4(r17)
1000632c:	8a400315 	stw	r9,12(r17)
10006330:	8a400215 	stw	r9,8(r17)
10006334:	8963883a 	add	r17,r17,r5
10006338:	89400015 	stw	r5,0(r17)
1000633c:	9009883a 	mov	r4,r18
10006340:	000dd440 	call	1000dd44 <__malloc_unlock>
10006344:	80800204 	addi	r2,r16,8
10006348:	003ec306 	br	10005e58 <__alt_data_end+0xf8005e58>
1000634c:	18800117 	ldw	r2,4(r3)
10006350:	003f1006 	br	10005f94 <__alt_data_end+0xf8005f94>
10006354:	63000044 	addi	r12,r12,1
10006358:	608000cc 	andi	r2,r12,3
1000635c:	52800204 	addi	r10,r10,8
10006360:	103f241e 	bne	r2,zero,10005ff4 <__alt_data_end+0xf8005ff4>
10006364:	00002106 	br	100063ec <_malloc_r+0x64c>
10006368:	80800204 	addi	r2,r16,8
1000636c:	84000517 	ldw	r16,20(r16)
10006370:	143eab1e 	bne	r2,r16,10005e20 <__alt_data_end+0xf8005e20>
10006374:	21000084 	addi	r4,r4,2
10006378:	003ee606 	br	10005f14 <__alt_data_end+0xf8005f14>
1000637c:	80c7883a 	add	r3,r16,r3
10006380:	19400117 	ldw	r5,4(r3)
10006384:	80800317 	ldw	r2,12(r16)
10006388:	81000217 	ldw	r4,8(r16)
1000638c:	29400054 	ori	r5,r5,1
10006390:	19400115 	stw	r5,4(r3)
10006394:	20800315 	stw	r2,12(r4)
10006398:	11000215 	stw	r4,8(r2)
1000639c:	9009883a 	mov	r4,r18
100063a0:	000dd440 	call	1000dd44 <__malloc_unlock>
100063a4:	80800204 	addi	r2,r16,8
100063a8:	003eab06 	br	10005e58 <__alt_data_end+0xf8005e58>
100063ac:	210016c4 	addi	r4,r4,91
100063b0:	210b883a 	add	r5,r4,r4
100063b4:	003ec106 	br	10005ebc <__alt_data_end+0xf8005ebc>
100063b8:	100ad1ba 	srli	r5,r2,6
100063bc:	29400e04 	addi	r5,r5,56
100063c0:	294d883a 	add	r6,r5,r5
100063c4:	003fbe06 	br	100062c0 <__alt_data_end+0xf80062c0>
100063c8:	84ff5d26 	beq	r16,r19,10006140 <__alt_data_end+0xf8006140>
100063cc:	9c000217 	ldw	r16,8(r19)
100063d0:	00bfff04 	movi	r2,-4
100063d4:	80c00117 	ldw	r3,4(r16)
100063d8:	1886703a 	and	r3,r3,r2
100063dc:	003f9706 	br	1000623c <__alt_data_end+0xf800623c>
100063e0:	5ac00017 	ldw	r11,0(r11)
100063e4:	213fffc4 	addi	r4,r4,-1
100063e8:	58805c1e 	bne	r11,r2,1000655c <_malloc_r+0x7bc>
100063ec:	20c000cc 	andi	r3,r4,3
100063f0:	58bffe04 	addi	r2,r11,-8
100063f4:	183ffa1e 	bne	r3,zero,100063e0 <__alt_data_end+0xf80063e0>
100063f8:	98800117 	ldw	r2,4(r19)
100063fc:	0146303a 	nor	r3,zero,r5
10006400:	1884703a 	and	r2,r3,r2
10006404:	98800115 	stw	r2,4(r19)
10006408:	294b883a 	add	r5,r5,r5
1000640c:	117f2e36 	bltu	r2,r5,100060c8 <__alt_data_end+0xf80060c8>
10006410:	283f2d26 	beq	r5,zero,100060c8 <__alt_data_end+0xf80060c8>
10006414:	1146703a 	and	r3,r2,r5
10006418:	6009883a 	mov	r4,r12
1000641c:	183eef1e 	bne	r3,zero,10005fdc <__alt_data_end+0xf8005fdc>
10006420:	294b883a 	add	r5,r5,r5
10006424:	1146703a 	and	r3,r2,r5
10006428:	21000104 	addi	r4,r4,4
1000642c:	183ffc26 	beq	r3,zero,10006420 <__alt_data_end+0xf8006420>
10006430:	003eea06 	br	10005fdc <__alt_data_end+0xf8005fdc>
10006434:	00805504 	movi	r2,340
10006438:	11001336 	bltu	r2,r4,10006488 <_malloc_r+0x6e8>
1000643c:	8808d3fa 	srli	r4,r17,15
10006440:	21001dc4 	addi	r4,r4,119
10006444:	210b883a 	add	r5,r4,r4
10006448:	003e9c06 	br	10005ebc <__alt_data_end+0xf8005ebc>
1000644c:	00840004 	movi	r2,4096
10006450:	003f4d06 	br	10006188 <__alt_data_end+0xf8006188>
10006454:	00800044 	movi	r2,1
10006458:	a0800115 	stw	r2,4(r20)
1000645c:	a021883a 	mov	r16,r20
10006460:	0007883a 	mov	r3,zero
10006464:	003f7506 	br	1000623c <__alt_data_end+0xf800623c>
10006468:	280bd0ba 	srai	r5,r5,2
1000646c:	01800044 	movi	r6,1
10006470:	38800117 	ldw	r2,4(r7)
10006474:	314c983a 	sll	r6,r6,r5
10006478:	180b883a 	mov	r5,r3
1000647c:	3084b03a 	or	r2,r6,r2
10006480:	38800115 	stw	r2,4(r7)
10006484:	003f9d06 	br	100062fc <__alt_data_end+0xf80062fc>
10006488:	00815504 	movi	r2,1364
1000648c:	11001336 	bltu	r2,r4,100064dc <_malloc_r+0x73c>
10006490:	8808d4ba 	srli	r4,r17,18
10006494:	21001f04 	addi	r4,r4,124
10006498:	210b883a 	add	r5,r4,r4
1000649c:	003e8706 	br	10005ebc <__alt_data_end+0xf8005ebc>
100064a0:	bdc00404 	addi	r23,r23,16
100064a4:	003f1d06 	br	1000611c <__alt_data_end+0xf800611c>
100064a8:	01401504 	movi	r5,84
100064ac:	28c01c36 	bltu	r5,r3,10006520 <_malloc_r+0x780>
100064b0:	100ad33a 	srli	r5,r2,12
100064b4:	29401b84 	addi	r5,r5,110
100064b8:	294d883a 	add	r6,r5,r5
100064bc:	003f8006 	br	100062c0 <__alt_data_end+0xf80062c0>
100064c0:	e103ffcc 	andi	r4,fp,4095
100064c4:	203f241e 	bne	r4,zero,10006158 <__alt_data_end+0xf8006158>
100064c8:	98c00217 	ldw	r3,8(r19)
100064cc:	bd49883a 	add	r4,r23,r21
100064d0:	21000054 	ori	r4,r4,1
100064d4:	19000115 	stw	r4,4(r3)
100064d8:	003f4a06 	br	10006204 <__alt_data_end+0xf8006204>
100064dc:	01403f04 	movi	r5,252
100064e0:	01001f84 	movi	r4,126
100064e4:	003e7506 	br	10005ebc <__alt_data_end+0xf8005ebc>
100064e8:	00c00044 	movi	r3,1
100064ec:	002f883a 	mov	r23,zero
100064f0:	003f3006 	br	100061b4 <__alt_data_end+0xf80061b4>
100064f4:	00840074 	movhi	r2,4097
100064f8:	1086ca04 	addi	r2,r2,6952
100064fc:	15000015 	stw	r20,0(r2)
10006500:	003f1b06 	br	10006170 <__alt_data_end+0xf8006170>
10006504:	9009883a 	mov	r4,r18
10006508:	81400204 	addi	r5,r16,8
1000650c:	000523c0 	call	1000523c <_free_r>
10006510:	00840074 	movhi	r2,4097
10006514:	108da104 	addi	r2,r2,13956
10006518:	10800017 	ldw	r2,0(r2)
1000651c:	003f3906 	br	10006204 <__alt_data_end+0xf8006204>
10006520:	01405504 	movi	r5,340
10006524:	28c00436 	bltu	r5,r3,10006538 <_malloc_r+0x798>
10006528:	100ad3fa 	srli	r5,r2,15
1000652c:	29401dc4 	addi	r5,r5,119
10006530:	294d883a 	add	r6,r5,r5
10006534:	003f6206 	br	100062c0 <__alt_data_end+0xf80062c0>
10006538:	01415504 	movi	r5,1364
1000653c:	28c00436 	bltu	r5,r3,10006550 <_malloc_r+0x7b0>
10006540:	100ad4ba 	srli	r5,r2,18
10006544:	29401f04 	addi	r5,r5,124
10006548:	294d883a 	add	r6,r5,r5
1000654c:	003f5c06 	br	100062c0 <__alt_data_end+0xf80062c0>
10006550:	01803f04 	movi	r6,252
10006554:	01401f84 	movi	r5,126
10006558:	003f5906 	br	100062c0 <__alt_data_end+0xf80062c0>
1000655c:	98800117 	ldw	r2,4(r19)
10006560:	003fa906 	br	10006408 <__alt_data_end+0xf8006408>

10006564 <memchr>:
10006564:	208000cc 	andi	r2,r4,3
10006568:	2811883a 	mov	r8,r5
1000656c:	10003526 	beq	r2,zero,10006644 <memchr+0xe0>
10006570:	30bfffc4 	addi	r2,r6,-1
10006574:	30001b26 	beq	r6,zero,100065e4 <memchr+0x80>
10006578:	21800003 	ldbu	r6,0(r4)
1000657c:	28c03fcc 	andi	r3,r5,255
10006580:	30c01a26 	beq	r6,r3,100065ec <memchr+0x88>
10006584:	180d883a 	mov	r6,r3
10006588:	00000406 	br	1000659c <memchr+0x38>
1000658c:	10001526 	beq	r2,zero,100065e4 <memchr+0x80>
10006590:	20c00003 	ldbu	r3,0(r4)
10006594:	10bfffc4 	addi	r2,r2,-1
10006598:	19801426 	beq	r3,r6,100065ec <memchr+0x88>
1000659c:	21000044 	addi	r4,r4,1
100065a0:	20c000cc 	andi	r3,r4,3
100065a4:	183ff91e 	bne	r3,zero,1000658c <__alt_data_end+0xf800658c>
100065a8:	02c000c4 	movi	r11,3
100065ac:	58801136 	bltu	r11,r2,100065f4 <memchr+0x90>
100065b0:	10000c26 	beq	r2,zero,100065e4 <memchr+0x80>
100065b4:	20c00003 	ldbu	r3,0(r4)
100065b8:	29403fcc 	andi	r5,r5,255
100065bc:	19400b26 	beq	r3,r5,100065ec <memchr+0x88>
100065c0:	20c00044 	addi	r3,r4,1
100065c4:	2085883a 	add	r2,r4,r2
100065c8:	41803fcc 	andi	r6,r8,255
100065cc:	00000306 	br	100065dc <memchr+0x78>
100065d0:	18c00044 	addi	r3,r3,1
100065d4:	197fffc3 	ldbu	r5,-1(r3)
100065d8:	29800426 	beq	r5,r6,100065ec <memchr+0x88>
100065dc:	1809883a 	mov	r4,r3
100065e0:	18bffb1e 	bne	r3,r2,100065d0 <__alt_data_end+0xf80065d0>
100065e4:	0005883a 	mov	r2,zero
100065e8:	f800283a 	ret
100065ec:	2005883a 	mov	r2,r4
100065f0:	f800283a 	ret
100065f4:	28c03fcc 	andi	r3,r5,255
100065f8:	180c923a 	slli	r6,r3,8
100065fc:	02bfbff4 	movhi	r10,65279
10006600:	52bfbfc4 	addi	r10,r10,-257
10006604:	02602074 	movhi	r9,32897
10006608:	4a602004 	addi	r9,r9,-32640
1000660c:	30c6b03a 	or	r3,r6,r3
10006610:	180c943a 	slli	r6,r3,16
10006614:	30ccb03a 	or	r6,r6,r3
10006618:	20c00017 	ldw	r3,0(r4)
1000661c:	30c6f03a 	xor	r3,r6,r3
10006620:	1a8f883a 	add	r7,r3,r10
10006624:	00c6303a 	nor	r3,zero,r3
10006628:	38c6703a 	and	r3,r7,r3
1000662c:	1a46703a 	and	r3,r3,r9
10006630:	183fdf1e 	bne	r3,zero,100065b0 <__alt_data_end+0xf80065b0>
10006634:	10bfff04 	addi	r2,r2,-4
10006638:	21000104 	addi	r4,r4,4
1000663c:	58bff636 	bltu	r11,r2,10006618 <__alt_data_end+0xf8006618>
10006640:	003fdb06 	br	100065b0 <__alt_data_end+0xf80065b0>
10006644:	3005883a 	mov	r2,r6
10006648:	003fd706 	br	100065a8 <__alt_data_end+0xf80065a8>

1000664c <memcpy>:
1000664c:	00c003c4 	movi	r3,15
10006650:	2005883a 	mov	r2,r4
10006654:	1980372e 	bgeu	r3,r6,10006734 <memcpy+0xe8>
10006658:	2146b03a 	or	r3,r4,r5
1000665c:	18c000cc 	andi	r3,r3,3
10006660:	1800371e 	bne	r3,zero,10006740 <memcpy+0xf4>
10006664:	327ffc04 	addi	r9,r6,-16
10006668:	4812d13a 	srli	r9,r9,4
1000666c:	2007883a 	mov	r3,r4
10006670:	280f883a 	mov	r7,r5
10006674:	4808913a 	slli	r4,r9,4
10006678:	1109883a 	add	r4,r2,r4
1000667c:	21000404 	addi	r4,r4,16
10006680:	3a000017 	ldw	r8,0(r7)
10006684:	18c00404 	addi	r3,r3,16
10006688:	39c00404 	addi	r7,r7,16
1000668c:	1a3ffc15 	stw	r8,-16(r3)
10006690:	3a3ffd17 	ldw	r8,-12(r7)
10006694:	1a3ffd15 	stw	r8,-12(r3)
10006698:	3a3ffe17 	ldw	r8,-8(r7)
1000669c:	1a3ffe15 	stw	r8,-8(r3)
100066a0:	3a3fff17 	ldw	r8,-4(r7)
100066a4:	1a3fff15 	stw	r8,-4(r3)
100066a8:	193ff51e 	bne	r3,r4,10006680 <__alt_data_end+0xf8006680>
100066ac:	49000044 	addi	r4,r9,1
100066b0:	2008913a 	slli	r4,r4,4
100066b4:	328003cc 	andi	r10,r6,15
100066b8:	1107883a 	add	r3,r2,r4
100066bc:	290b883a 	add	r5,r5,r4
100066c0:	010000c4 	movi	r4,3
100066c4:	2280212e 	bgeu	r4,r10,1000674c <memcpy+0x100>
100066c8:	52bfff04 	addi	r10,r10,-4
100066cc:	5014d0ba 	srli	r10,r10,2
100066d0:	180f883a 	mov	r7,r3
100066d4:	2811883a 	mov	r8,r5
100066d8:	5289883a 	add	r4,r10,r10
100066dc:	2109883a 	add	r4,r4,r4
100066e0:	21000104 	addi	r4,r4,4
100066e4:	1909883a 	add	r4,r3,r4
100066e8:	42400017 	ldw	r9,0(r8)
100066ec:	39c00104 	addi	r7,r7,4
100066f0:	42000104 	addi	r8,r8,4
100066f4:	3a7fff15 	stw	r9,-4(r7)
100066f8:	393ffb1e 	bne	r7,r4,100066e8 <__alt_data_end+0xf80066e8>
100066fc:	51000044 	addi	r4,r10,1
10006700:	2109883a 	add	r4,r4,r4
10006704:	2109883a 	add	r4,r4,r4
10006708:	318000cc 	andi	r6,r6,3
1000670c:	1907883a 	add	r3,r3,r4
10006710:	290b883a 	add	r5,r5,r4
10006714:	30000c26 	beq	r6,zero,10006748 <memcpy+0xfc>
10006718:	298d883a 	add	r6,r5,r6
1000671c:	29c00003 	ldbu	r7,0(r5)
10006720:	18c00044 	addi	r3,r3,1
10006724:	29400044 	addi	r5,r5,1
10006728:	19ffffc5 	stb	r7,-1(r3)
1000672c:	29bffb1e 	bne	r5,r6,1000671c <__alt_data_end+0xf800671c>
10006730:	f800283a 	ret
10006734:	2007883a 	mov	r3,r4
10006738:	303ff71e 	bne	r6,zero,10006718 <__alt_data_end+0xf8006718>
1000673c:	00000206 	br	10006748 <memcpy+0xfc>
10006740:	2007883a 	mov	r3,r4
10006744:	003ff406 	br	10006718 <__alt_data_end+0xf8006718>
10006748:	f800283a 	ret
1000674c:	500d883a 	mov	r6,r10
10006750:	303ff11e 	bne	r6,zero,10006718 <__alt_data_end+0xf8006718>
10006754:	003ffc06 	br	10006748 <__alt_data_end+0xf8006748>

10006758 <memmove>:
10006758:	2005883a 	mov	r2,r4
1000675c:	29000b2e 	bgeu	r5,r4,1000678c <memmove+0x34>
10006760:	298f883a 	add	r7,r5,r6
10006764:	21c0092e 	bgeu	r4,r7,1000678c <memmove+0x34>
10006768:	2187883a 	add	r3,r4,r6
1000676c:	198bc83a 	sub	r5,r3,r6
10006770:	30003e26 	beq	r6,zero,1000686c <memmove+0x114>
10006774:	39ffffc4 	addi	r7,r7,-1
10006778:	39000003 	ldbu	r4,0(r7)
1000677c:	18ffffc4 	addi	r3,r3,-1
10006780:	19000005 	stb	r4,0(r3)
10006784:	197ffb1e 	bne	r3,r5,10006774 <__alt_data_end+0xf8006774>
10006788:	f800283a 	ret
1000678c:	00c003c4 	movi	r3,15
10006790:	1980372e 	bgeu	r3,r6,10006870 <memmove+0x118>
10006794:	1146b03a 	or	r3,r2,r5
10006798:	18c000cc 	andi	r3,r3,3
1000679c:	1800371e 	bne	r3,zero,1000687c <memmove+0x124>
100067a0:	327ffc04 	addi	r9,r6,-16
100067a4:	4812d13a 	srli	r9,r9,4
100067a8:	280f883a 	mov	r7,r5
100067ac:	1007883a 	mov	r3,r2
100067b0:	4810913a 	slli	r8,r9,4
100067b4:	1211883a 	add	r8,r2,r8
100067b8:	42000404 	addi	r8,r8,16
100067bc:	39000017 	ldw	r4,0(r7)
100067c0:	18c00404 	addi	r3,r3,16
100067c4:	39c00404 	addi	r7,r7,16
100067c8:	193ffc15 	stw	r4,-16(r3)
100067cc:	393ffd17 	ldw	r4,-12(r7)
100067d0:	193ffd15 	stw	r4,-12(r3)
100067d4:	393ffe17 	ldw	r4,-8(r7)
100067d8:	193ffe15 	stw	r4,-8(r3)
100067dc:	393fff17 	ldw	r4,-4(r7)
100067e0:	193fff15 	stw	r4,-4(r3)
100067e4:	1a3ff51e 	bne	r3,r8,100067bc <__alt_data_end+0xf80067bc>
100067e8:	49000044 	addi	r4,r9,1
100067ec:	2008913a 	slli	r4,r4,4
100067f0:	328003cc 	andi	r10,r6,15
100067f4:	1107883a 	add	r3,r2,r4
100067f8:	290b883a 	add	r5,r5,r4
100067fc:	010000c4 	movi	r4,3
10006800:	2280212e 	bgeu	r4,r10,10006888 <memmove+0x130>
10006804:	52bfff04 	addi	r10,r10,-4
10006808:	5014d0ba 	srli	r10,r10,2
1000680c:	180f883a 	mov	r7,r3
10006810:	2809883a 	mov	r4,r5
10006814:	5291883a 	add	r8,r10,r10
10006818:	4211883a 	add	r8,r8,r8
1000681c:	42400104 	addi	r9,r8,4
10006820:	1a53883a 	add	r9,r3,r9
10006824:	22000017 	ldw	r8,0(r4)
10006828:	39c00104 	addi	r7,r7,4
1000682c:	21000104 	addi	r4,r4,4
10006830:	3a3fff15 	stw	r8,-4(r7)
10006834:	3a7ffb1e 	bne	r7,r9,10006824 <__alt_data_end+0xf8006824>
10006838:	51000044 	addi	r4,r10,1
1000683c:	2109883a 	add	r4,r4,r4
10006840:	2109883a 	add	r4,r4,r4
10006844:	318000cc 	andi	r6,r6,3
10006848:	1907883a 	add	r3,r3,r4
1000684c:	290b883a 	add	r5,r5,r4
10006850:	30000c26 	beq	r6,zero,10006884 <memmove+0x12c>
10006854:	198d883a 	add	r6,r3,r6
10006858:	29c00003 	ldbu	r7,0(r5)
1000685c:	18c00044 	addi	r3,r3,1
10006860:	29400044 	addi	r5,r5,1
10006864:	19ffffc5 	stb	r7,-1(r3)
10006868:	19bffb1e 	bne	r3,r6,10006858 <__alt_data_end+0xf8006858>
1000686c:	f800283a 	ret
10006870:	1007883a 	mov	r3,r2
10006874:	303ff71e 	bne	r6,zero,10006854 <__alt_data_end+0xf8006854>
10006878:	00000206 	br	10006884 <memmove+0x12c>
1000687c:	1007883a 	mov	r3,r2
10006880:	003ff406 	br	10006854 <__alt_data_end+0xf8006854>
10006884:	f800283a 	ret
10006888:	500d883a 	mov	r6,r10
1000688c:	303ff11e 	bne	r6,zero,10006854 <__alt_data_end+0xf8006854>
10006890:	003ffc06 	br	10006884 <__alt_data_end+0xf8006884>

10006894 <memset>:
10006894:	20c000cc 	andi	r3,r4,3
10006898:	2005883a 	mov	r2,r4
1000689c:	18003f26 	beq	r3,zero,1000699c <memset+0x108>
100068a0:	31ffffc4 	addi	r7,r6,-1
100068a4:	30003b26 	beq	r6,zero,10006994 <memset+0x100>
100068a8:	2813883a 	mov	r9,r5
100068ac:	200d883a 	mov	r6,r4
100068b0:	2007883a 	mov	r3,r4
100068b4:	00000406 	br	100068c8 <memset+0x34>
100068b8:	3a3fffc4 	addi	r8,r7,-1
100068bc:	31800044 	addi	r6,r6,1
100068c0:	38003426 	beq	r7,zero,10006994 <memset+0x100>
100068c4:	400f883a 	mov	r7,r8
100068c8:	18c00044 	addi	r3,r3,1
100068cc:	32400005 	stb	r9,0(r6)
100068d0:	1a0000cc 	andi	r8,r3,3
100068d4:	403ff81e 	bne	r8,zero,100068b8 <__alt_data_end+0xf80068b8>
100068d8:	010000c4 	movi	r4,3
100068dc:	21c0282e 	bgeu	r4,r7,10006980 <memset+0xec>
100068e0:	29003fcc 	andi	r4,r5,255
100068e4:	2010923a 	slli	r8,r4,8
100068e8:	4108b03a 	or	r4,r8,r4
100068ec:	2010943a 	slli	r8,r4,16
100068f0:	4110b03a 	or	r8,r8,r4
100068f4:	010003c4 	movi	r4,15
100068f8:	21c0122e 	bgeu	r4,r7,10006944 <memset+0xb0>
100068fc:	3a7ffc04 	addi	r9,r7,-16
10006900:	4812d13a 	srli	r9,r9,4
10006904:	19000404 	addi	r4,r3,16
10006908:	180d883a 	mov	r6,r3
1000690c:	4814913a 	slli	r10,r9,4
10006910:	2289883a 	add	r4,r4,r10
10006914:	32000015 	stw	r8,0(r6)
10006918:	32000115 	stw	r8,4(r6)
1000691c:	32000215 	stw	r8,8(r6)
10006920:	32000315 	stw	r8,12(r6)
10006924:	31800404 	addi	r6,r6,16
10006928:	313ffa1e 	bne	r6,r4,10006914 <__alt_data_end+0xf8006914>
1000692c:	4a400044 	addi	r9,r9,1
10006930:	4812913a 	slli	r9,r9,4
10006934:	39c003cc 	andi	r7,r7,15
10006938:	010000c4 	movi	r4,3
1000693c:	1a47883a 	add	r3,r3,r9
10006940:	21c00f2e 	bgeu	r4,r7,10006980 <memset+0xec>
10006944:	3a7fff04 	addi	r9,r7,-4
10006948:	4812d0ba 	srli	r9,r9,2
1000694c:	19000104 	addi	r4,r3,4
10006950:	180d883a 	mov	r6,r3
10006954:	4a55883a 	add	r10,r9,r9
10006958:	5295883a 	add	r10,r10,r10
1000695c:	2289883a 	add	r4,r4,r10
10006960:	32000015 	stw	r8,0(r6)
10006964:	31800104 	addi	r6,r6,4
10006968:	313ffd1e 	bne	r6,r4,10006960 <__alt_data_end+0xf8006960>
1000696c:	4a400044 	addi	r9,r9,1
10006970:	4a53883a 	add	r9,r9,r9
10006974:	4a53883a 	add	r9,r9,r9
10006978:	1a47883a 	add	r3,r3,r9
1000697c:	39c000cc 	andi	r7,r7,3
10006980:	38000526 	beq	r7,zero,10006998 <memset+0x104>
10006984:	19cf883a 	add	r7,r3,r7
10006988:	19400005 	stb	r5,0(r3)
1000698c:	18c00044 	addi	r3,r3,1
10006990:	19fffd1e 	bne	r3,r7,10006988 <__alt_data_end+0xf8006988>
10006994:	f800283a 	ret
10006998:	f800283a 	ret
1000699c:	2007883a 	mov	r3,r4
100069a0:	300f883a 	mov	r7,r6
100069a4:	003fcc06 	br	100068d8 <__alt_data_end+0xf80068d8>

100069a8 <_Balloc>:
100069a8:	20801317 	ldw	r2,76(r4)
100069ac:	defffc04 	addi	sp,sp,-16
100069b0:	dc400115 	stw	r17,4(sp)
100069b4:	dc000015 	stw	r16,0(sp)
100069b8:	dfc00315 	stw	ra,12(sp)
100069bc:	dc800215 	stw	r18,8(sp)
100069c0:	2023883a 	mov	r17,r4
100069c4:	2821883a 	mov	r16,r5
100069c8:	10000f26 	beq	r2,zero,10006a08 <_Balloc+0x60>
100069cc:	8407883a 	add	r3,r16,r16
100069d0:	18c7883a 	add	r3,r3,r3
100069d4:	10c7883a 	add	r3,r2,r3
100069d8:	18800017 	ldw	r2,0(r3)
100069dc:	10001126 	beq	r2,zero,10006a24 <_Balloc+0x7c>
100069e0:	11000017 	ldw	r4,0(r2)
100069e4:	19000015 	stw	r4,0(r3)
100069e8:	10000415 	stw	zero,16(r2)
100069ec:	10000315 	stw	zero,12(r2)
100069f0:	dfc00317 	ldw	ra,12(sp)
100069f4:	dc800217 	ldw	r18,8(sp)
100069f8:	dc400117 	ldw	r17,4(sp)
100069fc:	dc000017 	ldw	r16,0(sp)
10006a00:	dec00404 	addi	sp,sp,16
10006a04:	f800283a 	ret
10006a08:	01400104 	movi	r5,4
10006a0c:	01800844 	movi	r6,33
10006a10:	00098300 	call	10009830 <_calloc_r>
10006a14:	88801315 	stw	r2,76(r17)
10006a18:	103fec1e 	bne	r2,zero,100069cc <__alt_data_end+0xf80069cc>
10006a1c:	0005883a 	mov	r2,zero
10006a20:	003ff306 	br	100069f0 <__alt_data_end+0xf80069f0>
10006a24:	01400044 	movi	r5,1
10006a28:	2c24983a 	sll	r18,r5,r16
10006a2c:	8809883a 	mov	r4,r17
10006a30:	91800144 	addi	r6,r18,5
10006a34:	318d883a 	add	r6,r6,r6
10006a38:	318d883a 	add	r6,r6,r6
10006a3c:	00098300 	call	10009830 <_calloc_r>
10006a40:	103ff626 	beq	r2,zero,10006a1c <__alt_data_end+0xf8006a1c>
10006a44:	14000115 	stw	r16,4(r2)
10006a48:	14800215 	stw	r18,8(r2)
10006a4c:	003fe606 	br	100069e8 <__alt_data_end+0xf80069e8>

10006a50 <_Bfree>:
10006a50:	28000826 	beq	r5,zero,10006a74 <_Bfree+0x24>
10006a54:	28c00117 	ldw	r3,4(r5)
10006a58:	20801317 	ldw	r2,76(r4)
10006a5c:	18c7883a 	add	r3,r3,r3
10006a60:	18c7883a 	add	r3,r3,r3
10006a64:	10c5883a 	add	r2,r2,r3
10006a68:	10c00017 	ldw	r3,0(r2)
10006a6c:	28c00015 	stw	r3,0(r5)
10006a70:	11400015 	stw	r5,0(r2)
10006a74:	f800283a 	ret

10006a78 <__multadd>:
10006a78:	defff604 	addi	sp,sp,-40
10006a7c:	dd400515 	stw	r21,20(sp)
10006a80:	2d400417 	ldw	r21,16(r5)
10006a84:	df000815 	stw	fp,32(sp)
10006a88:	ddc00715 	stw	r23,28(sp)
10006a8c:	dd800615 	stw	r22,24(sp)
10006a90:	dd000415 	stw	r20,16(sp)
10006a94:	dc400115 	stw	r17,4(sp)
10006a98:	dc000015 	stw	r16,0(sp)
10006a9c:	dfc00915 	stw	ra,36(sp)
10006aa0:	dcc00315 	stw	r19,12(sp)
10006aa4:	dc800215 	stw	r18,8(sp)
10006aa8:	282d883a 	mov	r22,r5
10006aac:	202f883a 	mov	r23,r4
10006ab0:	3029883a 	mov	r20,r6
10006ab4:	3839883a 	mov	fp,r7
10006ab8:	2c000504 	addi	r16,r5,20
10006abc:	0023883a 	mov	r17,zero
10006ac0:	84c00017 	ldw	r19,0(r16)
10006ac4:	a00b883a 	mov	r5,r20
10006ac8:	8c400044 	addi	r17,r17,1
10006acc:	993fffcc 	andi	r4,r19,65535
10006ad0:	000af1c0 	call	1000af1c <__mulsi3>
10006ad4:	1725883a 	add	r18,r2,fp
10006ad8:	9808d43a 	srli	r4,r19,16
10006adc:	9026d43a 	srli	r19,r18,16
10006ae0:	a00b883a 	mov	r5,r20
10006ae4:	000af1c0 	call	1000af1c <__mulsi3>
10006ae8:	988f883a 	add	r7,r19,r2
10006aec:	3804943a 	slli	r2,r7,16
10006af0:	94bfffcc 	andi	r18,r18,65535
10006af4:	3838d43a 	srli	fp,r7,16
10006af8:	14a5883a 	add	r18,r2,r18
10006afc:	84800015 	stw	r18,0(r16)
10006b00:	84000104 	addi	r16,r16,4
10006b04:	8d7fee16 	blt	r17,r21,10006ac0 <__alt_data_end+0xf8006ac0>
10006b08:	e0000926 	beq	fp,zero,10006b30 <__multadd+0xb8>
10006b0c:	b0800217 	ldw	r2,8(r22)
10006b10:	a880140e 	bge	r21,r2,10006b64 <__multadd+0xec>
10006b14:	a8800144 	addi	r2,r21,5
10006b18:	1085883a 	add	r2,r2,r2
10006b1c:	1085883a 	add	r2,r2,r2
10006b20:	b085883a 	add	r2,r22,r2
10006b24:	17000015 	stw	fp,0(r2)
10006b28:	ad400044 	addi	r21,r21,1
10006b2c:	b5400415 	stw	r21,16(r22)
10006b30:	b005883a 	mov	r2,r22
10006b34:	dfc00917 	ldw	ra,36(sp)
10006b38:	df000817 	ldw	fp,32(sp)
10006b3c:	ddc00717 	ldw	r23,28(sp)
10006b40:	dd800617 	ldw	r22,24(sp)
10006b44:	dd400517 	ldw	r21,20(sp)
10006b48:	dd000417 	ldw	r20,16(sp)
10006b4c:	dcc00317 	ldw	r19,12(sp)
10006b50:	dc800217 	ldw	r18,8(sp)
10006b54:	dc400117 	ldw	r17,4(sp)
10006b58:	dc000017 	ldw	r16,0(sp)
10006b5c:	dec00a04 	addi	sp,sp,40
10006b60:	f800283a 	ret
10006b64:	b1400117 	ldw	r5,4(r22)
10006b68:	b809883a 	mov	r4,r23
10006b6c:	29400044 	addi	r5,r5,1
10006b70:	00069a80 	call	100069a8 <_Balloc>
10006b74:	b1800417 	ldw	r6,16(r22)
10006b78:	b1400304 	addi	r5,r22,12
10006b7c:	11000304 	addi	r4,r2,12
10006b80:	31800084 	addi	r6,r6,2
10006b84:	318d883a 	add	r6,r6,r6
10006b88:	318d883a 	add	r6,r6,r6
10006b8c:	1021883a 	mov	r16,r2
10006b90:	000664c0 	call	1000664c <memcpy>
10006b94:	b0c00117 	ldw	r3,4(r22)
10006b98:	b8801317 	ldw	r2,76(r23)
10006b9c:	18c7883a 	add	r3,r3,r3
10006ba0:	18c7883a 	add	r3,r3,r3
10006ba4:	10c5883a 	add	r2,r2,r3
10006ba8:	10c00017 	ldw	r3,0(r2)
10006bac:	b0c00015 	stw	r3,0(r22)
10006bb0:	15800015 	stw	r22,0(r2)
10006bb4:	802d883a 	mov	r22,r16
10006bb8:	003fd606 	br	10006b14 <__alt_data_end+0xf8006b14>

10006bbc <__s2b>:
10006bbc:	defff904 	addi	sp,sp,-28
10006bc0:	dd000415 	stw	r20,16(sp)
10006bc4:	dc400115 	stw	r17,4(sp)
10006bc8:	2829883a 	mov	r20,r5
10006bcc:	2023883a 	mov	r17,r4
10006bd0:	01400244 	movi	r5,9
10006bd4:	39000204 	addi	r4,r7,8
10006bd8:	dcc00315 	stw	r19,12(sp)
10006bdc:	dc800215 	stw	r18,8(sp)
10006be0:	dfc00615 	stw	ra,24(sp)
10006be4:	dd400515 	stw	r21,20(sp)
10006be8:	dc000015 	stw	r16,0(sp)
10006bec:	3827883a 	mov	r19,r7
10006bf0:	3025883a 	mov	r18,r6
10006bf4:	000ae780 	call	1000ae78 <__divsi3>
10006bf8:	00c00044 	movi	r3,1
10006bfc:	000b883a 	mov	r5,zero
10006c00:	1880030e 	bge	r3,r2,10006c10 <__s2b+0x54>
10006c04:	18c7883a 	add	r3,r3,r3
10006c08:	29400044 	addi	r5,r5,1
10006c0c:	18bffd16 	blt	r3,r2,10006c04 <__alt_data_end+0xf8006c04>
10006c10:	8809883a 	mov	r4,r17
10006c14:	00069a80 	call	100069a8 <_Balloc>
10006c18:	d8c00717 	ldw	r3,28(sp)
10006c1c:	10c00515 	stw	r3,20(r2)
10006c20:	00c00044 	movi	r3,1
10006c24:	10c00415 	stw	r3,16(r2)
10006c28:	00c00244 	movi	r3,9
10006c2c:	1c80210e 	bge	r3,r18,10006cb4 <__s2b+0xf8>
10006c30:	a0eb883a 	add	r21,r20,r3
10006c34:	a821883a 	mov	r16,r21
10006c38:	a4a9883a 	add	r20,r20,r18
10006c3c:	81c00007 	ldb	r7,0(r16)
10006c40:	8809883a 	mov	r4,r17
10006c44:	84000044 	addi	r16,r16,1
10006c48:	100b883a 	mov	r5,r2
10006c4c:	01800284 	movi	r6,10
10006c50:	39fff404 	addi	r7,r7,-48
10006c54:	0006a780 	call	10006a78 <__multadd>
10006c58:	853ff81e 	bne	r16,r20,10006c3c <__alt_data_end+0xf8006c3c>
10006c5c:	aca1883a 	add	r16,r21,r18
10006c60:	843ffe04 	addi	r16,r16,-8
10006c64:	94c00a0e 	bge	r18,r19,10006c90 <__s2b+0xd4>
10006c68:	84e7883a 	add	r19,r16,r19
10006c6c:	9ca5c83a 	sub	r18,r19,r18
10006c70:	81c00007 	ldb	r7,0(r16)
10006c74:	8809883a 	mov	r4,r17
10006c78:	84000044 	addi	r16,r16,1
10006c7c:	100b883a 	mov	r5,r2
10006c80:	01800284 	movi	r6,10
10006c84:	39fff404 	addi	r7,r7,-48
10006c88:	0006a780 	call	10006a78 <__multadd>
10006c8c:	84bff81e 	bne	r16,r18,10006c70 <__alt_data_end+0xf8006c70>
10006c90:	dfc00617 	ldw	ra,24(sp)
10006c94:	dd400517 	ldw	r21,20(sp)
10006c98:	dd000417 	ldw	r20,16(sp)
10006c9c:	dcc00317 	ldw	r19,12(sp)
10006ca0:	dc800217 	ldw	r18,8(sp)
10006ca4:	dc400117 	ldw	r17,4(sp)
10006ca8:	dc000017 	ldw	r16,0(sp)
10006cac:	dec00704 	addi	sp,sp,28
10006cb0:	f800283a 	ret
10006cb4:	a4000284 	addi	r16,r20,10
10006cb8:	1825883a 	mov	r18,r3
10006cbc:	003fe906 	br	10006c64 <__alt_data_end+0xf8006c64>

10006cc0 <__hi0bits>:
10006cc0:	20bfffec 	andhi	r2,r4,65535
10006cc4:	1000141e 	bne	r2,zero,10006d18 <__hi0bits+0x58>
10006cc8:	2008943a 	slli	r4,r4,16
10006ccc:	00800404 	movi	r2,16
10006cd0:	20ffc02c 	andhi	r3,r4,65280
10006cd4:	1800021e 	bne	r3,zero,10006ce0 <__hi0bits+0x20>
10006cd8:	2008923a 	slli	r4,r4,8
10006cdc:	10800204 	addi	r2,r2,8
10006ce0:	20fc002c 	andhi	r3,r4,61440
10006ce4:	1800021e 	bne	r3,zero,10006cf0 <__hi0bits+0x30>
10006ce8:	2008913a 	slli	r4,r4,4
10006cec:	10800104 	addi	r2,r2,4
10006cf0:	20f0002c 	andhi	r3,r4,49152
10006cf4:	1800031e 	bne	r3,zero,10006d04 <__hi0bits+0x44>
10006cf8:	2109883a 	add	r4,r4,r4
10006cfc:	10800084 	addi	r2,r2,2
10006d00:	2109883a 	add	r4,r4,r4
10006d04:	20000316 	blt	r4,zero,10006d14 <__hi0bits+0x54>
10006d08:	2110002c 	andhi	r4,r4,16384
10006d0c:	2000041e 	bne	r4,zero,10006d20 <__hi0bits+0x60>
10006d10:	00800804 	movi	r2,32
10006d14:	f800283a 	ret
10006d18:	0005883a 	mov	r2,zero
10006d1c:	003fec06 	br	10006cd0 <__alt_data_end+0xf8006cd0>
10006d20:	10800044 	addi	r2,r2,1
10006d24:	f800283a 	ret

10006d28 <__lo0bits>:
10006d28:	20c00017 	ldw	r3,0(r4)
10006d2c:	188001cc 	andi	r2,r3,7
10006d30:	10000826 	beq	r2,zero,10006d54 <__lo0bits+0x2c>
10006d34:	1880004c 	andi	r2,r3,1
10006d38:	1000211e 	bne	r2,zero,10006dc0 <__lo0bits+0x98>
10006d3c:	1880008c 	andi	r2,r3,2
10006d40:	1000211e 	bne	r2,zero,10006dc8 <__lo0bits+0xa0>
10006d44:	1806d0ba 	srli	r3,r3,2
10006d48:	00800084 	movi	r2,2
10006d4c:	20c00015 	stw	r3,0(r4)
10006d50:	f800283a 	ret
10006d54:	18bfffcc 	andi	r2,r3,65535
10006d58:	10001326 	beq	r2,zero,10006da8 <__lo0bits+0x80>
10006d5c:	0005883a 	mov	r2,zero
10006d60:	19403fcc 	andi	r5,r3,255
10006d64:	2800021e 	bne	r5,zero,10006d70 <__lo0bits+0x48>
10006d68:	1806d23a 	srli	r3,r3,8
10006d6c:	10800204 	addi	r2,r2,8
10006d70:	194003cc 	andi	r5,r3,15
10006d74:	2800021e 	bne	r5,zero,10006d80 <__lo0bits+0x58>
10006d78:	1806d13a 	srli	r3,r3,4
10006d7c:	10800104 	addi	r2,r2,4
10006d80:	194000cc 	andi	r5,r3,3
10006d84:	2800021e 	bne	r5,zero,10006d90 <__lo0bits+0x68>
10006d88:	1806d0ba 	srli	r3,r3,2
10006d8c:	10800084 	addi	r2,r2,2
10006d90:	1940004c 	andi	r5,r3,1
10006d94:	2800081e 	bne	r5,zero,10006db8 <__lo0bits+0x90>
10006d98:	1806d07a 	srli	r3,r3,1
10006d9c:	1800051e 	bne	r3,zero,10006db4 <__lo0bits+0x8c>
10006da0:	00800804 	movi	r2,32
10006da4:	f800283a 	ret
10006da8:	1806d43a 	srli	r3,r3,16
10006dac:	00800404 	movi	r2,16
10006db0:	003feb06 	br	10006d60 <__alt_data_end+0xf8006d60>
10006db4:	10800044 	addi	r2,r2,1
10006db8:	20c00015 	stw	r3,0(r4)
10006dbc:	f800283a 	ret
10006dc0:	0005883a 	mov	r2,zero
10006dc4:	f800283a 	ret
10006dc8:	1806d07a 	srli	r3,r3,1
10006dcc:	00800044 	movi	r2,1
10006dd0:	20c00015 	stw	r3,0(r4)
10006dd4:	f800283a 	ret

10006dd8 <__i2b>:
10006dd8:	defffd04 	addi	sp,sp,-12
10006ddc:	dc000015 	stw	r16,0(sp)
10006de0:	04000044 	movi	r16,1
10006de4:	dc400115 	stw	r17,4(sp)
10006de8:	2823883a 	mov	r17,r5
10006dec:	800b883a 	mov	r5,r16
10006df0:	dfc00215 	stw	ra,8(sp)
10006df4:	00069a80 	call	100069a8 <_Balloc>
10006df8:	14400515 	stw	r17,20(r2)
10006dfc:	14000415 	stw	r16,16(r2)
10006e00:	dfc00217 	ldw	ra,8(sp)
10006e04:	dc400117 	ldw	r17,4(sp)
10006e08:	dc000017 	ldw	r16,0(sp)
10006e0c:	dec00304 	addi	sp,sp,12
10006e10:	f800283a 	ret

10006e14 <__multiply>:
10006e14:	defff004 	addi	sp,sp,-64
10006e18:	dc400715 	stw	r17,28(sp)
10006e1c:	dc000615 	stw	r16,24(sp)
10006e20:	34400417 	ldw	r17,16(r6)
10006e24:	2c000417 	ldw	r16,16(r5)
10006e28:	df000e15 	stw	fp,56(sp)
10006e2c:	dd000a15 	stw	r20,40(sp)
10006e30:	dfc00f15 	stw	ra,60(sp)
10006e34:	ddc00d15 	stw	r23,52(sp)
10006e38:	dd800c15 	stw	r22,48(sp)
10006e3c:	dd400b15 	stw	r21,44(sp)
10006e40:	dcc00915 	stw	r19,36(sp)
10006e44:	dc800815 	stw	r18,32(sp)
10006e48:	2839883a 	mov	fp,r5
10006e4c:	3029883a 	mov	r20,r6
10006e50:	8440050e 	bge	r16,r17,10006e68 <__multiply+0x54>
10006e54:	8007883a 	mov	r3,r16
10006e58:	3039883a 	mov	fp,r6
10006e5c:	8821883a 	mov	r16,r17
10006e60:	2829883a 	mov	r20,r5
10006e64:	1823883a 	mov	r17,r3
10006e68:	e0800217 	ldw	r2,8(fp)
10006e6c:	8447883a 	add	r3,r16,r17
10006e70:	d8c00115 	stw	r3,4(sp)
10006e74:	e1400117 	ldw	r5,4(fp)
10006e78:	10c0010e 	bge	r2,r3,10006e80 <__multiply+0x6c>
10006e7c:	29400044 	addi	r5,r5,1
10006e80:	00069a80 	call	100069a8 <_Balloc>
10006e84:	d8c00117 	ldw	r3,4(sp)
10006e88:	d8800515 	stw	r2,20(sp)
10006e8c:	18ef883a 	add	r23,r3,r3
10006e90:	bdef883a 	add	r23,r23,r23
10006e94:	10c00504 	addi	r3,r2,20
10006e98:	1def883a 	add	r23,r3,r23
10006e9c:	d8c00015 	stw	r3,0(sp)
10006ea0:	ddc00215 	stw	r23,8(sp)
10006ea4:	1805883a 	mov	r2,r3
10006ea8:	1dc0042e 	bgeu	r3,r23,10006ebc <__multiply+0xa8>
10006eac:	d8c00217 	ldw	r3,8(sp)
10006eb0:	10000015 	stw	zero,0(r2)
10006eb4:	10800104 	addi	r2,r2,4
10006eb8:	10fffc36 	bltu	r2,r3,10006eac <__alt_data_end+0xf8006eac>
10006ebc:	8c63883a 	add	r17,r17,r17
10006ec0:	a5000504 	addi	r20,r20,20
10006ec4:	8c63883a 	add	r17,r17,r17
10006ec8:	e7000504 	addi	fp,fp,20
10006ecc:	8421883a 	add	r16,r16,r16
10006ed0:	a463883a 	add	r17,r20,r17
10006ed4:	8421883a 	add	r16,r16,r16
10006ed8:	df000315 	stw	fp,12(sp)
10006edc:	dc400415 	stw	r17,16(sp)
10006ee0:	e425883a 	add	r18,fp,r16
10006ee4:	a440482e 	bgeu	r20,r17,10007008 <__multiply+0x1f4>
10006ee8:	a4000017 	ldw	r16,0(r20)
10006eec:	847fffcc 	andi	r17,r16,65535
10006ef0:	88001d26 	beq	r17,zero,10006f68 <__multiply+0x154>
10006ef4:	dc000017 	ldw	r16,0(sp)
10006ef8:	dcc00317 	ldw	r19,12(sp)
10006efc:	002b883a 	mov	r21,zero
10006f00:	9dc00017 	ldw	r23,0(r19)
10006f04:	85800017 	ldw	r22,0(r16)
10006f08:	880b883a 	mov	r5,r17
10006f0c:	b93fffcc 	andi	r4,r23,65535
10006f10:	000af1c0 	call	1000af1c <__mulsi3>
10006f14:	b808d43a 	srli	r4,r23,16
10006f18:	b0ffffcc 	andi	r3,r22,65535
10006f1c:	1885883a 	add	r2,r3,r2
10006f20:	880b883a 	mov	r5,r17
10006f24:	156b883a 	add	r21,r2,r21
10006f28:	b02cd43a 	srli	r22,r22,16
10006f2c:	000af1c0 	call	1000af1c <__mulsi3>
10006f30:	a808d43a 	srli	r4,r21,16
10006f34:	b085883a 	add	r2,r22,r2
10006f38:	a8ffffcc 	andi	r3,r21,65535
10006f3c:	110d883a 	add	r6,r2,r4
10006f40:	3004943a 	slli	r2,r6,16
10006f44:	9cc00104 	addi	r19,r19,4
10006f48:	8009883a 	mov	r4,r16
10006f4c:	10c6b03a 	or	r3,r2,r3
10006f50:	80c00015 	stw	r3,0(r16)
10006f54:	302ad43a 	srli	r21,r6,16
10006f58:	84000104 	addi	r16,r16,4
10006f5c:	9cbfe836 	bltu	r19,r18,10006f00 <__alt_data_end+0xf8006f00>
10006f60:	25400115 	stw	r21,4(r4)
10006f64:	a4000017 	ldw	r16,0(r20)
10006f68:	8020d43a 	srli	r16,r16,16
10006f6c:	80002026 	beq	r16,zero,10006ff0 <__multiply+0x1dc>
10006f70:	d8c00017 	ldw	r3,0(sp)
10006f74:	dd400317 	ldw	r21,12(sp)
10006f78:	002f883a 	mov	r23,zero
10006f7c:	1f000017 	ldw	fp,0(r3)
10006f80:	182d883a 	mov	r22,r3
10006f84:	e023883a 	mov	r17,fp
10006f88:	a900000b 	ldhu	r4,0(r21)
10006f8c:	8822d43a 	srli	r17,r17,16
10006f90:	800b883a 	mov	r5,r16
10006f94:	000af1c0 	call	1000af1c <__mulsi3>
10006f98:	1445883a 	add	r2,r2,r17
10006f9c:	15ef883a 	add	r23,r2,r23
10006fa0:	b804943a 	slli	r2,r23,16
10006fa4:	e1ffffcc 	andi	r7,fp,65535
10006fa8:	ad400104 	addi	r21,r21,4
10006fac:	11ceb03a 	or	r7,r2,r7
10006fb0:	b1c00015 	stw	r7,0(r22)
10006fb4:	a93fff17 	ldw	r4,-4(r21)
10006fb8:	b7000117 	ldw	fp,4(r22)
10006fbc:	800b883a 	mov	r5,r16
10006fc0:	2008d43a 	srli	r4,r4,16
10006fc4:	e023883a 	mov	r17,fp
10006fc8:	b027883a 	mov	r19,r22
10006fcc:	000af1c0 	call	1000af1c <__mulsi3>
10006fd0:	b812d43a 	srli	r9,r23,16
10006fd4:	e23fffcc 	andi	r8,fp,65535
10006fd8:	1205883a 	add	r2,r2,r8
10006fdc:	1279883a 	add	fp,r2,r9
10006fe0:	b5800104 	addi	r22,r22,4
10006fe4:	e02ed43a 	srli	r23,fp,16
10006fe8:	acbfe736 	bltu	r21,r18,10006f88 <__alt_data_end+0xf8006f88>
10006fec:	9f000115 	stw	fp,4(r19)
10006ff0:	d8c00017 	ldw	r3,0(sp)
10006ff4:	a5000104 	addi	r20,r20,4
10006ff8:	18c00104 	addi	r3,r3,4
10006ffc:	d8c00015 	stw	r3,0(sp)
10007000:	d8c00417 	ldw	r3,16(sp)
10007004:	a0ffb836 	bltu	r20,r3,10006ee8 <__alt_data_end+0xf8006ee8>
10007008:	d8c00117 	ldw	r3,4(sp)
1000700c:	00c00c0e 	bge	zero,r3,10007040 <__multiply+0x22c>
10007010:	d8c00217 	ldw	r3,8(sp)
10007014:	18bfff17 	ldw	r2,-4(r3)
10007018:	1dffff04 	addi	r23,r3,-4
1000701c:	10000326 	beq	r2,zero,1000702c <__multiply+0x218>
10007020:	00000706 	br	10007040 <__multiply+0x22c>
10007024:	b8800017 	ldw	r2,0(r23)
10007028:	1000051e 	bne	r2,zero,10007040 <__multiply+0x22c>
1000702c:	d8c00117 	ldw	r3,4(sp)
10007030:	bdffff04 	addi	r23,r23,-4
10007034:	18ffffc4 	addi	r3,r3,-1
10007038:	d8c00115 	stw	r3,4(sp)
1000703c:	183ff91e 	bne	r3,zero,10007024 <__alt_data_end+0xf8007024>
10007040:	d8c00517 	ldw	r3,20(sp)
10007044:	d9000117 	ldw	r4,4(sp)
10007048:	1805883a 	mov	r2,r3
1000704c:	19000415 	stw	r4,16(r3)
10007050:	dfc00f17 	ldw	ra,60(sp)
10007054:	df000e17 	ldw	fp,56(sp)
10007058:	ddc00d17 	ldw	r23,52(sp)
1000705c:	dd800c17 	ldw	r22,48(sp)
10007060:	dd400b17 	ldw	r21,44(sp)
10007064:	dd000a17 	ldw	r20,40(sp)
10007068:	dcc00917 	ldw	r19,36(sp)
1000706c:	dc800817 	ldw	r18,32(sp)
10007070:	dc400717 	ldw	r17,28(sp)
10007074:	dc000617 	ldw	r16,24(sp)
10007078:	dec01004 	addi	sp,sp,64
1000707c:	f800283a 	ret

10007080 <__pow5mult>:
10007080:	defffa04 	addi	sp,sp,-24
10007084:	dcc00315 	stw	r19,12(sp)
10007088:	dc800215 	stw	r18,8(sp)
1000708c:	dc000015 	stw	r16,0(sp)
10007090:	dfc00515 	stw	ra,20(sp)
10007094:	dd000415 	stw	r20,16(sp)
10007098:	dc400115 	stw	r17,4(sp)
1000709c:	308000cc 	andi	r2,r6,3
100070a0:	3021883a 	mov	r16,r6
100070a4:	2027883a 	mov	r19,r4
100070a8:	2825883a 	mov	r18,r5
100070ac:	1000301e 	bne	r2,zero,10007170 <__pow5mult+0xf0>
100070b0:	8021d0ba 	srai	r16,r16,2
100070b4:	80001b26 	beq	r16,zero,10007124 <__pow5mult+0xa4>
100070b8:	9c401217 	ldw	r17,72(r19)
100070bc:	88003726 	beq	r17,zero,1000719c <__pow5mult+0x11c>
100070c0:	80c0004c 	andi	r3,r16,1
100070c4:	1800071e 	bne	r3,zero,100070e4 <__pow5mult+0x64>
100070c8:	8021d07a 	srai	r16,r16,1
100070cc:	80001526 	beq	r16,zero,10007124 <__pow5mult+0xa4>
100070d0:	88800017 	ldw	r2,0(r17)
100070d4:	10001c26 	beq	r2,zero,10007148 <__pow5mult+0xc8>
100070d8:	1023883a 	mov	r17,r2
100070dc:	80c0004c 	andi	r3,r16,1
100070e0:	183ff926 	beq	r3,zero,100070c8 <__alt_data_end+0xf80070c8>
100070e4:	900b883a 	mov	r5,r18
100070e8:	880d883a 	mov	r6,r17
100070ec:	9809883a 	mov	r4,r19
100070f0:	0006e140 	call	10006e14 <__multiply>
100070f4:	90001c26 	beq	r18,zero,10007168 <__pow5mult+0xe8>
100070f8:	91000117 	ldw	r4,4(r18)
100070fc:	98c01317 	ldw	r3,76(r19)
10007100:	8021d07a 	srai	r16,r16,1
10007104:	2109883a 	add	r4,r4,r4
10007108:	2109883a 	add	r4,r4,r4
1000710c:	1907883a 	add	r3,r3,r4
10007110:	19000017 	ldw	r4,0(r3)
10007114:	91000015 	stw	r4,0(r18)
10007118:	1c800015 	stw	r18,0(r3)
1000711c:	1025883a 	mov	r18,r2
10007120:	803feb1e 	bne	r16,zero,100070d0 <__alt_data_end+0xf80070d0>
10007124:	9005883a 	mov	r2,r18
10007128:	dfc00517 	ldw	ra,20(sp)
1000712c:	dd000417 	ldw	r20,16(sp)
10007130:	dcc00317 	ldw	r19,12(sp)
10007134:	dc800217 	ldw	r18,8(sp)
10007138:	dc400117 	ldw	r17,4(sp)
1000713c:	dc000017 	ldw	r16,0(sp)
10007140:	dec00604 	addi	sp,sp,24
10007144:	f800283a 	ret
10007148:	880b883a 	mov	r5,r17
1000714c:	880d883a 	mov	r6,r17
10007150:	9809883a 	mov	r4,r19
10007154:	0006e140 	call	10006e14 <__multiply>
10007158:	88800015 	stw	r2,0(r17)
1000715c:	10000015 	stw	zero,0(r2)
10007160:	1023883a 	mov	r17,r2
10007164:	003fdd06 	br	100070dc <__alt_data_end+0xf80070dc>
10007168:	1025883a 	mov	r18,r2
1000716c:	003fd606 	br	100070c8 <__alt_data_end+0xf80070c8>
10007170:	10bfffc4 	addi	r2,r2,-1
10007174:	1085883a 	add	r2,r2,r2
10007178:	00c40074 	movhi	r3,4097
1000717c:	18ff7c04 	addi	r3,r3,-528
10007180:	1085883a 	add	r2,r2,r2
10007184:	1885883a 	add	r2,r3,r2
10007188:	11800017 	ldw	r6,0(r2)
1000718c:	000f883a 	mov	r7,zero
10007190:	0006a780 	call	10006a78 <__multadd>
10007194:	1025883a 	mov	r18,r2
10007198:	003fc506 	br	100070b0 <__alt_data_end+0xf80070b0>
1000719c:	05000044 	movi	r20,1
100071a0:	9809883a 	mov	r4,r19
100071a4:	a00b883a 	mov	r5,r20
100071a8:	00069a80 	call	100069a8 <_Balloc>
100071ac:	1023883a 	mov	r17,r2
100071b0:	00809c44 	movi	r2,625
100071b4:	88800515 	stw	r2,20(r17)
100071b8:	8d000415 	stw	r20,16(r17)
100071bc:	9c401215 	stw	r17,72(r19)
100071c0:	88000015 	stw	zero,0(r17)
100071c4:	003fbe06 	br	100070c0 <__alt_data_end+0xf80070c0>

100071c8 <__lshift>:
100071c8:	defff904 	addi	sp,sp,-28
100071cc:	dd000415 	stw	r20,16(sp)
100071d0:	dc400115 	stw	r17,4(sp)
100071d4:	2d000417 	ldw	r20,16(r5)
100071d8:	3023d17a 	srai	r17,r6,5
100071dc:	28800217 	ldw	r2,8(r5)
100071e0:	dd400515 	stw	r21,20(sp)
100071e4:	8d29883a 	add	r20,r17,r20
100071e8:	dcc00315 	stw	r19,12(sp)
100071ec:	dc800215 	stw	r18,8(sp)
100071f0:	dc000015 	stw	r16,0(sp)
100071f4:	dfc00615 	stw	ra,24(sp)
100071f8:	a4000044 	addi	r16,r20,1
100071fc:	2825883a 	mov	r18,r5
10007200:	302b883a 	mov	r21,r6
10007204:	2027883a 	mov	r19,r4
10007208:	29400117 	ldw	r5,4(r5)
1000720c:	1400030e 	bge	r2,r16,1000721c <__lshift+0x54>
10007210:	1085883a 	add	r2,r2,r2
10007214:	29400044 	addi	r5,r5,1
10007218:	143ffd16 	blt	r2,r16,10007210 <__alt_data_end+0xf8007210>
1000721c:	9809883a 	mov	r4,r19
10007220:	00069a80 	call	100069a8 <_Balloc>
10007224:	11000504 	addi	r4,r2,20
10007228:	0440090e 	bge	zero,r17,10007250 <__lshift+0x88>
1000722c:	200f883a 	mov	r7,r4
10007230:	0007883a 	mov	r3,zero
10007234:	38000015 	stw	zero,0(r7)
10007238:	18c00044 	addi	r3,r3,1
1000723c:	39c00104 	addi	r7,r7,4
10007240:	1c7ffc1e 	bne	r3,r17,10007234 <__alt_data_end+0xf8007234>
10007244:	18c7883a 	add	r3,r3,r3
10007248:	18c7883a 	add	r3,r3,r3
1000724c:	20c9883a 	add	r4,r4,r3
10007250:	92400417 	ldw	r9,16(r18)
10007254:	90c00504 	addi	r3,r18,20
10007258:	a98007cc 	andi	r6,r21,31
1000725c:	4a53883a 	add	r9,r9,r9
10007260:	4a53883a 	add	r9,r9,r9
10007264:	1a53883a 	add	r9,r3,r9
10007268:	30002426 	beq	r6,zero,100072fc <__lshift+0x134>
1000726c:	01400804 	movi	r5,32
10007270:	298bc83a 	sub	r5,r5,r6
10007274:	200f883a 	mov	r7,r4
10007278:	0011883a 	mov	r8,zero
1000727c:	1a800017 	ldw	r10,0(r3)
10007280:	3809883a 	mov	r4,r7
10007284:	39c00104 	addi	r7,r7,4
10007288:	5194983a 	sll	r10,r10,r6
1000728c:	18c00104 	addi	r3,r3,4
10007290:	4290b03a 	or	r8,r8,r10
10007294:	3a3fff15 	stw	r8,-4(r7)
10007298:	1a3fff17 	ldw	r8,-4(r3)
1000729c:	4150d83a 	srl	r8,r8,r5
100072a0:	1a7ff636 	bltu	r3,r9,1000727c <__alt_data_end+0xf800727c>
100072a4:	22000115 	stw	r8,4(r4)
100072a8:	40000126 	beq	r8,zero,100072b0 <__lshift+0xe8>
100072ac:	a4000084 	addi	r16,r20,2
100072b0:	91000117 	ldw	r4,4(r18)
100072b4:	98c01317 	ldw	r3,76(r19)
100072b8:	843fffc4 	addi	r16,r16,-1
100072bc:	2109883a 	add	r4,r4,r4
100072c0:	2109883a 	add	r4,r4,r4
100072c4:	1907883a 	add	r3,r3,r4
100072c8:	19000017 	ldw	r4,0(r3)
100072cc:	14000415 	stw	r16,16(r2)
100072d0:	91000015 	stw	r4,0(r18)
100072d4:	1c800015 	stw	r18,0(r3)
100072d8:	dfc00617 	ldw	ra,24(sp)
100072dc:	dd400517 	ldw	r21,20(sp)
100072e0:	dd000417 	ldw	r20,16(sp)
100072e4:	dcc00317 	ldw	r19,12(sp)
100072e8:	dc800217 	ldw	r18,8(sp)
100072ec:	dc400117 	ldw	r17,4(sp)
100072f0:	dc000017 	ldw	r16,0(sp)
100072f4:	dec00704 	addi	sp,sp,28
100072f8:	f800283a 	ret
100072fc:	200f883a 	mov	r7,r4
10007300:	19800017 	ldw	r6,0(r3)
10007304:	39c00104 	addi	r7,r7,4
10007308:	18c00104 	addi	r3,r3,4
1000730c:	39bfff15 	stw	r6,-4(r7)
10007310:	1a7ffb36 	bltu	r3,r9,10007300 <__alt_data_end+0xf8007300>
10007314:	003fe606 	br	100072b0 <__alt_data_end+0xf80072b0>

10007318 <__mcmp>:
10007318:	20800417 	ldw	r2,16(r4)
1000731c:	28c00417 	ldw	r3,16(r5)
10007320:	10c5c83a 	sub	r2,r2,r3
10007324:	1000111e 	bne	r2,zero,1000736c <__mcmp+0x54>
10007328:	18c7883a 	add	r3,r3,r3
1000732c:	18c7883a 	add	r3,r3,r3
10007330:	21000504 	addi	r4,r4,20
10007334:	29400504 	addi	r5,r5,20
10007338:	20c5883a 	add	r2,r4,r3
1000733c:	28cb883a 	add	r5,r5,r3
10007340:	00000106 	br	10007348 <__mcmp+0x30>
10007344:	2080082e 	bgeu	r4,r2,10007368 <__mcmp+0x50>
10007348:	10bfff04 	addi	r2,r2,-4
1000734c:	297fff04 	addi	r5,r5,-4
10007350:	11800017 	ldw	r6,0(r2)
10007354:	28c00017 	ldw	r3,0(r5)
10007358:	30fffa26 	beq	r6,r3,10007344 <__alt_data_end+0xf8007344>
1000735c:	30c00436 	bltu	r6,r3,10007370 <__mcmp+0x58>
10007360:	00800044 	movi	r2,1
10007364:	f800283a 	ret
10007368:	0005883a 	mov	r2,zero
1000736c:	f800283a 	ret
10007370:	00bfffc4 	movi	r2,-1
10007374:	f800283a 	ret

10007378 <__mdiff>:
10007378:	defffc04 	addi	sp,sp,-16
1000737c:	dc000015 	stw	r16,0(sp)
10007380:	2821883a 	mov	r16,r5
10007384:	200f883a 	mov	r7,r4
10007388:	300b883a 	mov	r5,r6
1000738c:	8009883a 	mov	r4,r16
10007390:	dc400115 	stw	r17,4(sp)
10007394:	dfc00315 	stw	ra,12(sp)
10007398:	dc800215 	stw	r18,8(sp)
1000739c:	3023883a 	mov	r17,r6
100073a0:	00073180 	call	10007318 <__mcmp>
100073a4:	10005226 	beq	r2,zero,100074f0 <__mdiff+0x178>
100073a8:	10004c16 	blt	r2,zero,100074dc <__mdiff+0x164>
100073ac:	0025883a 	mov	r18,zero
100073b0:	81400117 	ldw	r5,4(r16)
100073b4:	3809883a 	mov	r4,r7
100073b8:	00069a80 	call	100069a8 <_Balloc>
100073bc:	82800417 	ldw	r10,16(r16)
100073c0:	8b400417 	ldw	r13,16(r17)
100073c4:	81000504 	addi	r4,r16,20
100073c8:	5299883a 	add	r12,r10,r10
100073cc:	6b5b883a 	add	r13,r13,r13
100073d0:	6319883a 	add	r12,r12,r12
100073d4:	89800504 	addi	r6,r17,20
100073d8:	6b5b883a 	add	r13,r13,r13
100073dc:	14800315 	stw	r18,12(r2)
100073e0:	2319883a 	add	r12,r4,r12
100073e4:	335b883a 	add	r13,r6,r13
100073e8:	11400504 	addi	r5,r2,20
100073ec:	0007883a 	mov	r3,zero
100073f0:	00000106 	br	100073f8 <__mdiff+0x80>
100073f4:	400b883a 	mov	r5,r8
100073f8:	22400017 	ldw	r9,0(r4)
100073fc:	32000017 	ldw	r8,0(r6)
10007400:	31800104 	addi	r6,r6,4
10007404:	49ffffcc 	andi	r7,r9,65535
10007408:	42ffffcc 	andi	r11,r8,65535
1000740c:	38c7883a 	add	r3,r7,r3
10007410:	1acfc83a 	sub	r7,r3,r11
10007414:	4010d43a 	srli	r8,r8,16
10007418:	4806d43a 	srli	r3,r9,16
1000741c:	3817d43a 	srai	r11,r7,16
10007420:	39ffffcc 	andi	r7,r7,65535
10007424:	1a07c83a 	sub	r3,r3,r8
10007428:	1ac7883a 	add	r3,r3,r11
1000742c:	1812943a 	slli	r9,r3,16
10007430:	2a000104 	addi	r8,r5,4
10007434:	21000104 	addi	r4,r4,4
10007438:	49ceb03a 	or	r7,r9,r7
1000743c:	29c00015 	stw	r7,0(r5)
10007440:	1807d43a 	srai	r3,r3,16
10007444:	337feb36 	bltu	r6,r13,100073f4 <__alt_data_end+0xf80073f4>
10007448:	2013883a 	mov	r9,r4
1000744c:	2300342e 	bgeu	r4,r12,10007520 <__mdiff+0x1a8>
10007450:	400b883a 	mov	r5,r8
10007454:	21c00017 	ldw	r7,0(r4)
10007458:	29400104 	addi	r5,r5,4
1000745c:	21000104 	addi	r4,r4,4
10007460:	39bfffcc 	andi	r6,r7,65535
10007464:	30cd883a 	add	r6,r6,r3
10007468:	3007d43a 	srai	r3,r6,16
1000746c:	380ed43a 	srli	r7,r7,16
10007470:	31bfffcc 	andi	r6,r6,65535
10007474:	19c7883a 	add	r3,r3,r7
10007478:	180e943a 	slli	r7,r3,16
1000747c:	1807d43a 	srai	r3,r3,16
10007480:	398cb03a 	or	r6,r7,r6
10007484:	29bfff15 	stw	r6,-4(r5)
10007488:	233ff236 	bltu	r4,r12,10007454 <__alt_data_end+0xf8007454>
1000748c:	0248303a 	nor	r4,zero,r9
10007490:	2309883a 	add	r4,r4,r12
10007494:	2008d0ba 	srli	r4,r4,2
10007498:	21000044 	addi	r4,r4,1
1000749c:	2109883a 	add	r4,r4,r4
100074a0:	2109883a 	add	r4,r4,r4
100074a4:	4111883a 	add	r8,r8,r4
100074a8:	413fff04 	addi	r4,r8,-4
100074ac:	3000041e 	bne	r6,zero,100074c0 <__mdiff+0x148>
100074b0:	213fff04 	addi	r4,r4,-4
100074b4:	20c00017 	ldw	r3,0(r4)
100074b8:	52bfffc4 	addi	r10,r10,-1
100074bc:	183ffc26 	beq	r3,zero,100074b0 <__alt_data_end+0xf80074b0>
100074c0:	12800415 	stw	r10,16(r2)
100074c4:	dfc00317 	ldw	ra,12(sp)
100074c8:	dc800217 	ldw	r18,8(sp)
100074cc:	dc400117 	ldw	r17,4(sp)
100074d0:	dc000017 	ldw	r16,0(sp)
100074d4:	dec00404 	addi	sp,sp,16
100074d8:	f800283a 	ret
100074dc:	8005883a 	mov	r2,r16
100074e0:	04800044 	movi	r18,1
100074e4:	8821883a 	mov	r16,r17
100074e8:	1023883a 	mov	r17,r2
100074ec:	003fb006 	br	100073b0 <__alt_data_end+0xf80073b0>
100074f0:	3809883a 	mov	r4,r7
100074f4:	000b883a 	mov	r5,zero
100074f8:	00069a80 	call	100069a8 <_Balloc>
100074fc:	00c00044 	movi	r3,1
10007500:	10c00415 	stw	r3,16(r2)
10007504:	10000515 	stw	zero,20(r2)
10007508:	dfc00317 	ldw	ra,12(sp)
1000750c:	dc800217 	ldw	r18,8(sp)
10007510:	dc400117 	ldw	r17,4(sp)
10007514:	dc000017 	ldw	r16,0(sp)
10007518:	dec00404 	addi	sp,sp,16
1000751c:	f800283a 	ret
10007520:	380d883a 	mov	r6,r7
10007524:	003fe006 	br	100074a8 <__alt_data_end+0xf80074a8>

10007528 <__ulp>:
10007528:	295ffc2c 	andhi	r5,r5,32752
1000752c:	00bf3034 	movhi	r2,64704
10007530:	2887883a 	add	r3,r5,r2
10007534:	00c0020e 	bge	zero,r3,10007540 <__ulp+0x18>
10007538:	0005883a 	mov	r2,zero
1000753c:	f800283a 	ret
10007540:	00c7c83a 	sub	r3,zero,r3
10007544:	1805d53a 	srai	r2,r3,20
10007548:	00c004c4 	movi	r3,19
1000754c:	18800a0e 	bge	r3,r2,10007578 <__ulp+0x50>
10007550:	01000c84 	movi	r4,50
10007554:	0007883a 	mov	r3,zero
10007558:	20800516 	blt	r4,r2,10007570 <__ulp+0x48>
1000755c:	01000cc4 	movi	r4,51
10007560:	2085c83a 	sub	r2,r4,r2
10007564:	01000044 	movi	r4,1
10007568:	2084983a 	sll	r2,r4,r2
1000756c:	f800283a 	ret
10007570:	00800044 	movi	r2,1
10007574:	f800283a 	ret
10007578:	00c00234 	movhi	r3,8
1000757c:	1887d83a 	sra	r3,r3,r2
10007580:	0005883a 	mov	r2,zero
10007584:	f800283a 	ret

10007588 <__b2d>:
10007588:	21800417 	ldw	r6,16(r4)
1000758c:	22000504 	addi	r8,r4,20
10007590:	deffff04 	addi	sp,sp,-4
10007594:	318d883a 	add	r6,r6,r6
10007598:	318d883a 	add	r6,r6,r6
1000759c:	418d883a 	add	r6,r8,r6
100075a0:	31ffff17 	ldw	r7,-4(r6)
100075a4:	327fff04 	addi	r9,r6,-4
100075a8:	dfc00015 	stw	ra,0(sp)
100075ac:	3809883a 	mov	r4,r7
100075b0:	0006cc00 	call	10006cc0 <__hi0bits>
100075b4:	00c00804 	movi	r3,32
100075b8:	1887c83a 	sub	r3,r3,r2
100075bc:	28c00015 	stw	r3,0(r5)
100075c0:	00c00284 	movi	r3,10
100075c4:	18800d16 	blt	r3,r2,100075fc <__b2d+0x74>
100075c8:	010002c4 	movi	r4,11
100075cc:	2089c83a 	sub	r4,r4,r2
100075d0:	3906d83a 	srl	r3,r7,r4
100075d4:	18cffc34 	orhi	r3,r3,16368
100075d8:	4240232e 	bgeu	r8,r9,10007668 <__b2d+0xe0>
100075dc:	317ffe17 	ldw	r5,-8(r6)
100075e0:	2908d83a 	srl	r4,r5,r4
100075e4:	10800544 	addi	r2,r2,21
100075e8:	388e983a 	sll	r7,r7,r2
100075ec:	21c4b03a 	or	r2,r4,r7
100075f0:	dfc00017 	ldw	ra,0(sp)
100075f4:	dec00104 	addi	sp,sp,4
100075f8:	f800283a 	ret
100075fc:	42401136 	bltu	r8,r9,10007644 <__b2d+0xbc>
10007600:	113ffd44 	addi	r4,r2,-11
10007604:	000b883a 	mov	r5,zero
10007608:	20001226 	beq	r4,zero,10007654 <__b2d+0xcc>
1000760c:	00c00ac4 	movi	r3,43
10007610:	1885c83a 	sub	r2,r3,r2
10007614:	3906983a 	sll	r3,r7,r4
10007618:	288cd83a 	srl	r6,r5,r2
1000761c:	18cffc34 	orhi	r3,r3,16368
10007620:	1986b03a 	or	r3,r3,r6
10007624:	4240122e 	bgeu	r8,r9,10007670 <__b2d+0xe8>
10007628:	49bfff17 	ldw	r6,-4(r9)
1000762c:	3084d83a 	srl	r2,r6,r2
10007630:	2908983a 	sll	r4,r5,r4
10007634:	1104b03a 	or	r2,r2,r4
10007638:	dfc00017 	ldw	ra,0(sp)
1000763c:	dec00104 	addi	sp,sp,4
10007640:	f800283a 	ret
10007644:	113ffd44 	addi	r4,r2,-11
10007648:	327ffe04 	addi	r9,r6,-8
1000764c:	317ffe17 	ldw	r5,-8(r6)
10007650:	203fee1e 	bne	r4,zero,1000760c <__alt_data_end+0xf800760c>
10007654:	38cffc34 	orhi	r3,r7,16368
10007658:	2805883a 	mov	r2,r5
1000765c:	dfc00017 	ldw	ra,0(sp)
10007660:	dec00104 	addi	sp,sp,4
10007664:	f800283a 	ret
10007668:	0009883a 	mov	r4,zero
1000766c:	003fdd06 	br	100075e4 <__alt_data_end+0xf80075e4>
10007670:	0005883a 	mov	r2,zero
10007674:	003fee06 	br	10007630 <__alt_data_end+0xf8007630>

10007678 <__d2b>:
10007678:	defffa04 	addi	sp,sp,-24
1000767c:	dc400315 	stw	r17,12(sp)
10007680:	2823883a 	mov	r17,r5
10007684:	01400044 	movi	r5,1
10007688:	dc800415 	stw	r18,16(sp)
1000768c:	dc000215 	stw	r16,8(sp)
10007690:	dfc00515 	stw	ra,20(sp)
10007694:	3021883a 	mov	r16,r6
10007698:	3825883a 	mov	r18,r7
1000769c:	00069a80 	call	100069a8 <_Balloc>
100076a0:	8012907a 	slli	r9,r16,1
100076a4:	1011883a 	mov	r8,r2
100076a8:	00800434 	movhi	r2,16
100076ac:	10bfffc4 	addi	r2,r2,-1
100076b0:	4812d57a 	srli	r9,r9,21
100076b4:	80a0703a 	and	r16,r16,r2
100076b8:	48000126 	beq	r9,zero,100076c0 <__d2b+0x48>
100076bc:	84000434 	orhi	r16,r16,16
100076c0:	dc000015 	stw	r16,0(sp)
100076c4:	88001e26 	beq	r17,zero,10007740 <__d2b+0xc8>
100076c8:	d9000104 	addi	r4,sp,4
100076cc:	dc400115 	stw	r17,4(sp)
100076d0:	0006d280 	call	10006d28 <__lo0bits>
100076d4:	d8c00017 	ldw	r3,0(sp)
100076d8:	10002f1e 	bne	r2,zero,10007798 <__d2b+0x120>
100076dc:	d9000117 	ldw	r4,4(sp)
100076e0:	41000515 	stw	r4,20(r8)
100076e4:	180b003a 	cmpeq	r5,r3,zero
100076e8:	01000084 	movi	r4,2
100076ec:	214bc83a 	sub	r5,r4,r5
100076f0:	40c00615 	stw	r3,24(r8)
100076f4:	41400415 	stw	r5,16(r8)
100076f8:	4800191e 	bne	r9,zero,10007760 <__d2b+0xe8>
100076fc:	280690ba 	slli	r3,r5,2
10007700:	10bef384 	addi	r2,r2,-1074
10007704:	90800015 	stw	r2,0(r18)
10007708:	40c5883a 	add	r2,r8,r3
1000770c:	11000417 	ldw	r4,16(r2)
10007710:	0006cc00 	call	10006cc0 <__hi0bits>
10007714:	280a917a 	slli	r5,r5,5
10007718:	d8c00617 	ldw	r3,24(sp)
1000771c:	2885c83a 	sub	r2,r5,r2
10007720:	18800015 	stw	r2,0(r3)
10007724:	4005883a 	mov	r2,r8
10007728:	dfc00517 	ldw	ra,20(sp)
1000772c:	dc800417 	ldw	r18,16(sp)
10007730:	dc400317 	ldw	r17,12(sp)
10007734:	dc000217 	ldw	r16,8(sp)
10007738:	dec00604 	addi	sp,sp,24
1000773c:	f800283a 	ret
10007740:	d809883a 	mov	r4,sp
10007744:	0006d280 	call	10006d28 <__lo0bits>
10007748:	d8c00017 	ldw	r3,0(sp)
1000774c:	01400044 	movi	r5,1
10007750:	41400415 	stw	r5,16(r8)
10007754:	40c00515 	stw	r3,20(r8)
10007758:	10800804 	addi	r2,r2,32
1000775c:	483fe726 	beq	r9,zero,100076fc <__alt_data_end+0xf80076fc>
10007760:	00c00d44 	movi	r3,53
10007764:	4a7ef344 	addi	r9,r9,-1075
10007768:	4893883a 	add	r9,r9,r2
1000776c:	1885c83a 	sub	r2,r3,r2
10007770:	d8c00617 	ldw	r3,24(sp)
10007774:	92400015 	stw	r9,0(r18)
10007778:	18800015 	stw	r2,0(r3)
1000777c:	4005883a 	mov	r2,r8
10007780:	dfc00517 	ldw	ra,20(sp)
10007784:	dc800417 	ldw	r18,16(sp)
10007788:	dc400317 	ldw	r17,12(sp)
1000778c:	dc000217 	ldw	r16,8(sp)
10007790:	dec00604 	addi	sp,sp,24
10007794:	f800283a 	ret
10007798:	01000804 	movi	r4,32
1000779c:	2089c83a 	sub	r4,r4,r2
100077a0:	1908983a 	sll	r4,r3,r4
100077a4:	d9400117 	ldw	r5,4(sp)
100077a8:	1886d83a 	srl	r3,r3,r2
100077ac:	2148b03a 	or	r4,r4,r5
100077b0:	41000515 	stw	r4,20(r8)
100077b4:	d8c00015 	stw	r3,0(sp)
100077b8:	003fca06 	br	100076e4 <__alt_data_end+0xf80076e4>

100077bc <__ratio>:
100077bc:	defffd04 	addi	sp,sp,-12
100077c0:	2817883a 	mov	r11,r5
100077c4:	201b883a 	mov	r13,r4
100077c8:	d9400104 	addi	r5,sp,4
100077cc:	dfc00215 	stw	ra,8(sp)
100077d0:	00075880 	call	10007588 <__b2d>
100077d4:	5809883a 	mov	r4,r11
100077d8:	d80b883a 	mov	r5,sp
100077dc:	1019883a 	mov	r12,r2
100077e0:	1815883a 	mov	r10,r3
100077e4:	00075880 	call	10007588 <__b2d>
100077e8:	69400417 	ldw	r5,16(r13)
100077ec:	59000417 	ldw	r4,16(r11)
100077f0:	d9800117 	ldw	r6,4(sp)
100077f4:	2909c83a 	sub	r4,r5,r4
100077f8:	d9400017 	ldw	r5,0(sp)
100077fc:	2008917a 	slli	r4,r4,5
10007800:	314bc83a 	sub	r5,r6,r5
10007804:	290b883a 	add	r5,r5,r4
10007808:	01400a0e 	bge	zero,r5,10007834 <__ratio+0x78>
1000780c:	280a953a 	slli	r5,r5,20
10007810:	6009883a 	mov	r4,r12
10007814:	100d883a 	mov	r6,r2
10007818:	2a95883a 	add	r10,r5,r10
1000781c:	500b883a 	mov	r5,r10
10007820:	180f883a 	mov	r7,r3
10007824:	000b7c00 	call	1000b7c0 <__divdf3>
10007828:	dfc00217 	ldw	ra,8(sp)
1000782c:	dec00304 	addi	sp,sp,12
10007830:	f800283a 	ret
10007834:	280a953a 	slli	r5,r5,20
10007838:	6009883a 	mov	r4,r12
1000783c:	100d883a 	mov	r6,r2
10007840:	1947c83a 	sub	r3,r3,r5
10007844:	180f883a 	mov	r7,r3
10007848:	500b883a 	mov	r5,r10
1000784c:	000b7c00 	call	1000b7c0 <__divdf3>
10007850:	dfc00217 	ldw	ra,8(sp)
10007854:	dec00304 	addi	sp,sp,12
10007858:	f800283a 	ret

1000785c <_mprec_log10>:
1000785c:	defffe04 	addi	sp,sp,-8
10007860:	dc000015 	stw	r16,0(sp)
10007864:	dfc00115 	stw	ra,4(sp)
10007868:	008005c4 	movi	r2,23
1000786c:	2021883a 	mov	r16,r4
10007870:	11000d0e 	bge	r2,r4,100078a8 <_mprec_log10+0x4c>
10007874:	0005883a 	mov	r2,zero
10007878:	00cffc34 	movhi	r3,16368
1000787c:	843fffc4 	addi	r16,r16,-1
10007880:	1009883a 	mov	r4,r2
10007884:	180b883a 	mov	r5,r3
10007888:	000d883a 	mov	r6,zero
1000788c:	01d00934 	movhi	r7,16420
10007890:	000c3a40 	call	1000c3a4 <__muldf3>
10007894:	803ff91e 	bne	r16,zero,1000787c <__alt_data_end+0xf800787c>
10007898:	dfc00117 	ldw	ra,4(sp)
1000789c:	dc000017 	ldw	r16,0(sp)
100078a0:	dec00204 	addi	sp,sp,8
100078a4:	f800283a 	ret
100078a8:	202090fa 	slli	r16,r4,3
100078ac:	00840074 	movhi	r2,4097
100078b0:	10bf9304 	addi	r2,r2,-436
100078b4:	1421883a 	add	r16,r2,r16
100078b8:	80800017 	ldw	r2,0(r16)
100078bc:	80c00117 	ldw	r3,4(r16)
100078c0:	dfc00117 	ldw	ra,4(sp)
100078c4:	dc000017 	ldw	r16,0(sp)
100078c8:	dec00204 	addi	sp,sp,8
100078cc:	f800283a 	ret

100078d0 <__copybits>:
100078d0:	297fffc4 	addi	r5,r5,-1
100078d4:	2811d17a 	srai	r8,r5,5
100078d8:	31c00417 	ldw	r7,16(r6)
100078dc:	30800504 	addi	r2,r6,20
100078e0:	42000044 	addi	r8,r8,1
100078e4:	39cf883a 	add	r7,r7,r7
100078e8:	4211883a 	add	r8,r8,r8
100078ec:	39cf883a 	add	r7,r7,r7
100078f0:	4211883a 	add	r8,r8,r8
100078f4:	11cf883a 	add	r7,r2,r7
100078f8:	2211883a 	add	r8,r4,r8
100078fc:	11c00d2e 	bgeu	r2,r7,10007934 <__copybits+0x64>
10007900:	2007883a 	mov	r3,r4
10007904:	11400017 	ldw	r5,0(r2)
10007908:	18c00104 	addi	r3,r3,4
1000790c:	10800104 	addi	r2,r2,4
10007910:	197fff15 	stw	r5,-4(r3)
10007914:	11fffb36 	bltu	r2,r7,10007904 <__alt_data_end+0xf8007904>
10007918:	3985c83a 	sub	r2,r7,r6
1000791c:	10bffac4 	addi	r2,r2,-21
10007920:	1004d0ba 	srli	r2,r2,2
10007924:	10800044 	addi	r2,r2,1
10007928:	1085883a 	add	r2,r2,r2
1000792c:	1085883a 	add	r2,r2,r2
10007930:	2089883a 	add	r4,r4,r2
10007934:	2200032e 	bgeu	r4,r8,10007944 <__copybits+0x74>
10007938:	20000015 	stw	zero,0(r4)
1000793c:	21000104 	addi	r4,r4,4
10007940:	223ffd36 	bltu	r4,r8,10007938 <__alt_data_end+0xf8007938>
10007944:	f800283a 	ret

10007948 <__any_on>:
10007948:	20800417 	ldw	r2,16(r4)
1000794c:	2807d17a 	srai	r3,r5,5
10007950:	21000504 	addi	r4,r4,20
10007954:	10c00d0e 	bge	r2,r3,1000798c <__any_on+0x44>
10007958:	1085883a 	add	r2,r2,r2
1000795c:	1085883a 	add	r2,r2,r2
10007960:	2085883a 	add	r2,r4,r2
10007964:	2080182e 	bgeu	r4,r2,100079c8 <__any_on+0x80>
10007968:	10ffff17 	ldw	r3,-4(r2)
1000796c:	10bfff04 	addi	r2,r2,-4
10007970:	1800041e 	bne	r3,zero,10007984 <__any_on+0x3c>
10007974:	2080142e 	bgeu	r4,r2,100079c8 <__any_on+0x80>
10007978:	10bfff04 	addi	r2,r2,-4
1000797c:	10c00017 	ldw	r3,0(r2)
10007980:	183ffc26 	beq	r3,zero,10007974 <__alt_data_end+0xf8007974>
10007984:	00800044 	movi	r2,1
10007988:	f800283a 	ret
1000798c:	18800a0e 	bge	r3,r2,100079b8 <__any_on+0x70>
10007990:	18c7883a 	add	r3,r3,r3
10007994:	18c7883a 	add	r3,r3,r3
10007998:	294007cc 	andi	r5,r5,31
1000799c:	20c5883a 	add	r2,r4,r3
100079a0:	283ff026 	beq	r5,zero,10007964 <__alt_data_end+0xf8007964>
100079a4:	10c00017 	ldw	r3,0(r2)
100079a8:	194cd83a 	srl	r6,r3,r5
100079ac:	314a983a 	sll	r5,r6,r5
100079b0:	28fff41e 	bne	r5,r3,10007984 <__alt_data_end+0xf8007984>
100079b4:	003feb06 	br	10007964 <__alt_data_end+0xf8007964>
100079b8:	18c7883a 	add	r3,r3,r3
100079bc:	18c7883a 	add	r3,r3,r3
100079c0:	20c5883a 	add	r2,r4,r3
100079c4:	003fe706 	br	10007964 <__alt_data_end+0xf8007964>
100079c8:	0005883a 	mov	r2,zero
100079cc:	f800283a 	ret

100079d0 <_realloc_r>:
100079d0:	defff604 	addi	sp,sp,-40
100079d4:	dd000415 	stw	r20,16(sp)
100079d8:	dc000015 	stw	r16,0(sp)
100079dc:	dfc00915 	stw	ra,36(sp)
100079e0:	df000815 	stw	fp,32(sp)
100079e4:	ddc00715 	stw	r23,28(sp)
100079e8:	dd800615 	stw	r22,24(sp)
100079ec:	dd400515 	stw	r21,20(sp)
100079f0:	dcc00315 	stw	r19,12(sp)
100079f4:	dc800215 	stw	r18,8(sp)
100079f8:	dc400115 	stw	r17,4(sp)
100079fc:	2821883a 	mov	r16,r5
10007a00:	3029883a 	mov	r20,r6
10007a04:	28009a26 	beq	r5,zero,10007c70 <_realloc_r+0x2a0>
10007a08:	202b883a 	mov	r21,r4
10007a0c:	000dd240 	call	1000dd24 <__malloc_lock>
10007a10:	80ffff17 	ldw	r3,-4(r16)
10007a14:	047fff04 	movi	r17,-4
10007a18:	a08002c4 	addi	r2,r20,11
10007a1c:	01000584 	movi	r4,22
10007a20:	84fffe04 	addi	r19,r16,-8
10007a24:	1c62703a 	and	r17,r3,r17
10007a28:	2080372e 	bgeu	r4,r2,10007b08 <_realloc_r+0x138>
10007a2c:	04bffe04 	movi	r18,-8
10007a30:	14a4703a 	and	r18,r2,r18
10007a34:	9005883a 	mov	r2,r18
10007a38:	90005b16 	blt	r18,zero,10007ba8 <_realloc_r+0x1d8>
10007a3c:	95005a36 	bltu	r18,r20,10007ba8 <_realloc_r+0x1d8>
10007a40:	8880340e 	bge	r17,r2,10007b14 <_realloc_r+0x144>
10007a44:	05c40074 	movhi	r23,4097
10007a48:	bdc14104 	addi	r23,r23,1284
10007a4c:	b9000217 	ldw	r4,8(r23)
10007a50:	9c4b883a 	add	r5,r19,r17
10007a54:	21409626 	beq	r4,r5,10007cb0 <_realloc_r+0x2e0>
10007a58:	29800117 	ldw	r6,4(r5)
10007a5c:	01ffff84 	movi	r7,-2
10007a60:	31ce703a 	and	r7,r6,r7
10007a64:	29cf883a 	add	r7,r5,r7
10007a68:	39c00117 	ldw	r7,4(r7)
10007a6c:	39c0004c 	andi	r7,r7,1
10007a70:	38004226 	beq	r7,zero,10007b7c <_realloc_r+0x1ac>
10007a74:	000d883a 	mov	r6,zero
10007a78:	000b883a 	mov	r5,zero
10007a7c:	18c0004c 	andi	r3,r3,1
10007a80:	18005c1e 	bne	r3,zero,10007bf4 <_realloc_r+0x224>
10007a84:	85bffe17 	ldw	r22,-8(r16)
10007a88:	00ffff04 	movi	r3,-4
10007a8c:	9dadc83a 	sub	r22,r19,r22
10007a90:	b1c00117 	ldw	r7,4(r22)
10007a94:	38c6703a 	and	r3,r7,r3
10007a98:	28005426 	beq	r5,zero,10007bec <_realloc_r+0x21c>
10007a9c:	1c47883a 	add	r3,r3,r17
10007aa0:	2900bf26 	beq	r5,r4,10007da0 <_realloc_r+0x3d0>
10007aa4:	30ef883a 	add	r23,r6,r3
10007aa8:	b8807e16 	blt	r23,r2,10007ca4 <_realloc_r+0x2d4>
10007aac:	28800317 	ldw	r2,12(r5)
10007ab0:	28c00217 	ldw	r3,8(r5)
10007ab4:	89bfff04 	addi	r6,r17,-4
10007ab8:	01000904 	movi	r4,36
10007abc:	18800315 	stw	r2,12(r3)
10007ac0:	10c00215 	stw	r3,8(r2)
10007ac4:	b1400217 	ldw	r5,8(r22)
10007ac8:	b0c00317 	ldw	r3,12(r22)
10007acc:	b5000204 	addi	r20,r22,8
10007ad0:	28c00315 	stw	r3,12(r5)
10007ad4:	19400215 	stw	r5,8(r3)
10007ad8:	21808536 	bltu	r4,r6,10007cf0 <_realloc_r+0x320>
10007adc:	008004c4 	movi	r2,19
10007ae0:	1180932e 	bgeu	r2,r6,10007d30 <_realloc_r+0x360>
10007ae4:	80800017 	ldw	r2,0(r16)
10007ae8:	b0800215 	stw	r2,8(r22)
10007aec:	80800117 	ldw	r2,4(r16)
10007af0:	b0800315 	stw	r2,12(r22)
10007af4:	008006c4 	movi	r2,27
10007af8:	1180df36 	bltu	r2,r6,10007e78 <_realloc_r+0x4a8>
10007afc:	b0c00404 	addi	r3,r22,16
10007b00:	84000204 	addi	r16,r16,8
10007b04:	00008b06 	br	10007d34 <_realloc_r+0x364>
10007b08:	00800404 	movi	r2,16
10007b0c:	1025883a 	mov	r18,r2
10007b10:	003fca06 	br	10007a3c <__alt_data_end+0xf8007a3c>
10007b14:	8029883a 	mov	r20,r16
10007b18:	8c8dc83a 	sub	r6,r17,r18
10007b1c:	008003c4 	movi	r2,15
10007b20:	18c0004c 	andi	r3,r3,1
10007b24:	11802436 	bltu	r2,r6,10007bb8 <_realloc_r+0x1e8>
10007b28:	1c46b03a 	or	r3,r3,r17
10007b2c:	98c00115 	stw	r3,4(r19)
10007b30:	9c63883a 	add	r17,r19,r17
10007b34:	88800117 	ldw	r2,4(r17)
10007b38:	10800054 	ori	r2,r2,1
10007b3c:	88800115 	stw	r2,4(r17)
10007b40:	a809883a 	mov	r4,r21
10007b44:	000dd440 	call	1000dd44 <__malloc_unlock>
10007b48:	a005883a 	mov	r2,r20
10007b4c:	dfc00917 	ldw	ra,36(sp)
10007b50:	df000817 	ldw	fp,32(sp)
10007b54:	ddc00717 	ldw	r23,28(sp)
10007b58:	dd800617 	ldw	r22,24(sp)
10007b5c:	dd400517 	ldw	r21,20(sp)
10007b60:	dd000417 	ldw	r20,16(sp)
10007b64:	dcc00317 	ldw	r19,12(sp)
10007b68:	dc800217 	ldw	r18,8(sp)
10007b6c:	dc400117 	ldw	r17,4(sp)
10007b70:	dc000017 	ldw	r16,0(sp)
10007b74:	dec00a04 	addi	sp,sp,40
10007b78:	f800283a 	ret
10007b7c:	01ffff04 	movi	r7,-4
10007b80:	31cc703a 	and	r6,r6,r7
10007b84:	344f883a 	add	r7,r6,r17
10007b88:	38bfbc16 	blt	r7,r2,10007a7c <__alt_data_end+0xf8007a7c>
10007b8c:	28800317 	ldw	r2,12(r5)
10007b90:	29000217 	ldw	r4,8(r5)
10007b94:	8029883a 	mov	r20,r16
10007b98:	3823883a 	mov	r17,r7
10007b9c:	20800315 	stw	r2,12(r4)
10007ba0:	11000215 	stw	r4,8(r2)
10007ba4:	003fdc06 	br	10007b18 <__alt_data_end+0xf8007b18>
10007ba8:	00800304 	movi	r2,12
10007bac:	a8800015 	stw	r2,0(r21)
10007bb0:	0005883a 	mov	r2,zero
10007bb4:	003fe506 	br	10007b4c <__alt_data_end+0xf8007b4c>
10007bb8:	1c86b03a 	or	r3,r3,r18
10007bbc:	9c8b883a 	add	r5,r19,r18
10007bc0:	98c00115 	stw	r3,4(r19)
10007bc4:	30800054 	ori	r2,r6,1
10007bc8:	28800115 	stw	r2,4(r5)
10007bcc:	298d883a 	add	r6,r5,r6
10007bd0:	30800117 	ldw	r2,4(r6)
10007bd4:	a809883a 	mov	r4,r21
10007bd8:	29400204 	addi	r5,r5,8
10007bdc:	10800054 	ori	r2,r2,1
10007be0:	30800115 	stw	r2,4(r6)
10007be4:	000523c0 	call	1000523c <_free_r>
10007be8:	003fd506 	br	10007b40 <__alt_data_end+0xf8007b40>
10007bec:	1c6f883a 	add	r23,r3,r17
10007bf0:	b880370e 	bge	r23,r2,10007cd0 <_realloc_r+0x300>
10007bf4:	a00b883a 	mov	r5,r20
10007bf8:	a809883a 	mov	r4,r21
10007bfc:	0005da00 	call	10005da0 <_malloc_r>
10007c00:	1029883a 	mov	r20,r2
10007c04:	1000c026 	beq	r2,zero,10007f08 <_realloc_r+0x538>
10007c08:	80ffff17 	ldw	r3,-4(r16)
10007c0c:	113ffe04 	addi	r4,r2,-8
10007c10:	00bfff84 	movi	r2,-2
10007c14:	1884703a 	and	r2,r3,r2
10007c18:	9885883a 	add	r2,r19,r2
10007c1c:	20809026 	beq	r4,r2,10007e60 <_realloc_r+0x490>
10007c20:	89bfff04 	addi	r6,r17,-4
10007c24:	00800904 	movi	r2,36
10007c28:	11805936 	bltu	r2,r6,10007d90 <_realloc_r+0x3c0>
10007c2c:	00c004c4 	movi	r3,19
10007c30:	19803636 	bltu	r3,r6,10007d0c <_realloc_r+0x33c>
10007c34:	a005883a 	mov	r2,r20
10007c38:	8007883a 	mov	r3,r16
10007c3c:	19000017 	ldw	r4,0(r3)
10007c40:	11000015 	stw	r4,0(r2)
10007c44:	19000117 	ldw	r4,4(r3)
10007c48:	11000115 	stw	r4,4(r2)
10007c4c:	18c00217 	ldw	r3,8(r3)
10007c50:	10c00215 	stw	r3,8(r2)
10007c54:	800b883a 	mov	r5,r16
10007c58:	a809883a 	mov	r4,r21
10007c5c:	000523c0 	call	1000523c <_free_r>
10007c60:	a809883a 	mov	r4,r21
10007c64:	000dd440 	call	1000dd44 <__malloc_unlock>
10007c68:	a005883a 	mov	r2,r20
10007c6c:	003fb706 	br	10007b4c <__alt_data_end+0xf8007b4c>
10007c70:	300b883a 	mov	r5,r6
10007c74:	dfc00917 	ldw	ra,36(sp)
10007c78:	df000817 	ldw	fp,32(sp)
10007c7c:	ddc00717 	ldw	r23,28(sp)
10007c80:	dd800617 	ldw	r22,24(sp)
10007c84:	dd400517 	ldw	r21,20(sp)
10007c88:	dd000417 	ldw	r20,16(sp)
10007c8c:	dcc00317 	ldw	r19,12(sp)
10007c90:	dc800217 	ldw	r18,8(sp)
10007c94:	dc400117 	ldw	r17,4(sp)
10007c98:	dc000017 	ldw	r16,0(sp)
10007c9c:	dec00a04 	addi	sp,sp,40
10007ca0:	0005da01 	jmpi	10005da0 <_malloc_r>
10007ca4:	182f883a 	mov	r23,r3
10007ca8:	b8bfd216 	blt	r23,r2,10007bf4 <__alt_data_end+0xf8007bf4>
10007cac:	00000806 	br	10007cd0 <_realloc_r+0x300>
10007cb0:	21800117 	ldw	r6,4(r4)
10007cb4:	017fff04 	movi	r5,-4
10007cb8:	91c00404 	addi	r7,r18,16
10007cbc:	314c703a 	and	r6,r6,r5
10007cc0:	344b883a 	add	r5,r6,r17
10007cc4:	29c0250e 	bge	r5,r7,10007d5c <_realloc_r+0x38c>
10007cc8:	200b883a 	mov	r5,r4
10007ccc:	003f6b06 	br	10007a7c <__alt_data_end+0xf8007a7c>
10007cd0:	b0800317 	ldw	r2,12(r22)
10007cd4:	b0c00217 	ldw	r3,8(r22)
10007cd8:	89bfff04 	addi	r6,r17,-4
10007cdc:	01000904 	movi	r4,36
10007ce0:	18800315 	stw	r2,12(r3)
10007ce4:	10c00215 	stw	r3,8(r2)
10007ce8:	b5000204 	addi	r20,r22,8
10007cec:	21bf7b2e 	bgeu	r4,r6,10007adc <__alt_data_end+0xf8007adc>
10007cf0:	a009883a 	mov	r4,r20
10007cf4:	800b883a 	mov	r5,r16
10007cf8:	00067580 	call	10006758 <memmove>
10007cfc:	b0c00117 	ldw	r3,4(r22)
10007d00:	b823883a 	mov	r17,r23
10007d04:	b027883a 	mov	r19,r22
10007d08:	003f8306 	br	10007b18 <__alt_data_end+0xf8007b18>
10007d0c:	80c00017 	ldw	r3,0(r16)
10007d10:	a0c00015 	stw	r3,0(r20)
10007d14:	80c00117 	ldw	r3,4(r16)
10007d18:	a0c00115 	stw	r3,4(r20)
10007d1c:	00c006c4 	movi	r3,27
10007d20:	19804736 	bltu	r3,r6,10007e40 <_realloc_r+0x470>
10007d24:	a0800204 	addi	r2,r20,8
10007d28:	80c00204 	addi	r3,r16,8
10007d2c:	003fc306 	br	10007c3c <__alt_data_end+0xf8007c3c>
10007d30:	a007883a 	mov	r3,r20
10007d34:	80800017 	ldw	r2,0(r16)
10007d38:	b823883a 	mov	r17,r23
10007d3c:	b027883a 	mov	r19,r22
10007d40:	18800015 	stw	r2,0(r3)
10007d44:	80800117 	ldw	r2,4(r16)
10007d48:	18800115 	stw	r2,4(r3)
10007d4c:	80800217 	ldw	r2,8(r16)
10007d50:	18800215 	stw	r2,8(r3)
10007d54:	b0c00117 	ldw	r3,4(r22)
10007d58:	003f6f06 	br	10007b18 <__alt_data_end+0xf8007b18>
10007d5c:	9ca7883a 	add	r19,r19,r18
10007d60:	2c85c83a 	sub	r2,r5,r18
10007d64:	bcc00215 	stw	r19,8(r23)
10007d68:	10800054 	ori	r2,r2,1
10007d6c:	98800115 	stw	r2,4(r19)
10007d70:	80bfff17 	ldw	r2,-4(r16)
10007d74:	a809883a 	mov	r4,r21
10007d78:	1080004c 	andi	r2,r2,1
10007d7c:	90a4b03a 	or	r18,r18,r2
10007d80:	84bfff15 	stw	r18,-4(r16)
10007d84:	000dd440 	call	1000dd44 <__malloc_unlock>
10007d88:	8005883a 	mov	r2,r16
10007d8c:	003f6f06 	br	10007b4c <__alt_data_end+0xf8007b4c>
10007d90:	a009883a 	mov	r4,r20
10007d94:	800b883a 	mov	r5,r16
10007d98:	00067580 	call	10006758 <memmove>
10007d9c:	003fad06 	br	10007c54 <__alt_data_end+0xf8007c54>
10007da0:	30f9883a 	add	fp,r6,r3
10007da4:	91000404 	addi	r4,r18,16
10007da8:	e13fbe16 	blt	fp,r4,10007ca4 <__alt_data_end+0xf8007ca4>
10007dac:	b0800317 	ldw	r2,12(r22)
10007db0:	b0c00217 	ldw	r3,8(r22)
10007db4:	89bfff04 	addi	r6,r17,-4
10007db8:	01000904 	movi	r4,36
10007dbc:	18800315 	stw	r2,12(r3)
10007dc0:	10c00215 	stw	r3,8(r2)
10007dc4:	b4400204 	addi	r17,r22,8
10007dc8:	21804336 	bltu	r4,r6,10007ed8 <_realloc_r+0x508>
10007dcc:	008004c4 	movi	r2,19
10007dd0:	11803f2e 	bgeu	r2,r6,10007ed0 <_realloc_r+0x500>
10007dd4:	80800017 	ldw	r2,0(r16)
10007dd8:	b0800215 	stw	r2,8(r22)
10007ddc:	80800117 	ldw	r2,4(r16)
10007de0:	b0800315 	stw	r2,12(r22)
10007de4:	008006c4 	movi	r2,27
10007de8:	11803f36 	bltu	r2,r6,10007ee8 <_realloc_r+0x518>
10007dec:	b0c00404 	addi	r3,r22,16
10007df0:	84000204 	addi	r16,r16,8
10007df4:	80800017 	ldw	r2,0(r16)
10007df8:	18800015 	stw	r2,0(r3)
10007dfc:	80800117 	ldw	r2,4(r16)
10007e00:	18800115 	stw	r2,4(r3)
10007e04:	80800217 	ldw	r2,8(r16)
10007e08:	18800215 	stw	r2,8(r3)
10007e0c:	b487883a 	add	r3,r22,r18
10007e10:	e485c83a 	sub	r2,fp,r18
10007e14:	b8c00215 	stw	r3,8(r23)
10007e18:	10800054 	ori	r2,r2,1
10007e1c:	18800115 	stw	r2,4(r3)
10007e20:	b0800117 	ldw	r2,4(r22)
10007e24:	a809883a 	mov	r4,r21
10007e28:	1080004c 	andi	r2,r2,1
10007e2c:	90a4b03a 	or	r18,r18,r2
10007e30:	b4800115 	stw	r18,4(r22)
10007e34:	000dd440 	call	1000dd44 <__malloc_unlock>
10007e38:	8805883a 	mov	r2,r17
10007e3c:	003f4306 	br	10007b4c <__alt_data_end+0xf8007b4c>
10007e40:	80c00217 	ldw	r3,8(r16)
10007e44:	a0c00215 	stw	r3,8(r20)
10007e48:	80c00317 	ldw	r3,12(r16)
10007e4c:	a0c00315 	stw	r3,12(r20)
10007e50:	30801126 	beq	r6,r2,10007e98 <_realloc_r+0x4c8>
10007e54:	a0800404 	addi	r2,r20,16
10007e58:	80c00404 	addi	r3,r16,16
10007e5c:	003f7706 	br	10007c3c <__alt_data_end+0xf8007c3c>
10007e60:	a13fff17 	ldw	r4,-4(r20)
10007e64:	00bfff04 	movi	r2,-4
10007e68:	8029883a 	mov	r20,r16
10007e6c:	2084703a 	and	r2,r4,r2
10007e70:	88a3883a 	add	r17,r17,r2
10007e74:	003f2806 	br	10007b18 <__alt_data_end+0xf8007b18>
10007e78:	80800217 	ldw	r2,8(r16)
10007e7c:	b0800415 	stw	r2,16(r22)
10007e80:	80800317 	ldw	r2,12(r16)
10007e84:	b0800515 	stw	r2,20(r22)
10007e88:	31000a26 	beq	r6,r4,10007eb4 <_realloc_r+0x4e4>
10007e8c:	b0c00604 	addi	r3,r22,24
10007e90:	84000404 	addi	r16,r16,16
10007e94:	003fa706 	br	10007d34 <__alt_data_end+0xf8007d34>
10007e98:	81000417 	ldw	r4,16(r16)
10007e9c:	a0800604 	addi	r2,r20,24
10007ea0:	80c00604 	addi	r3,r16,24
10007ea4:	a1000415 	stw	r4,16(r20)
10007ea8:	81000517 	ldw	r4,20(r16)
10007eac:	a1000515 	stw	r4,20(r20)
10007eb0:	003f6206 	br	10007c3c <__alt_data_end+0xf8007c3c>
10007eb4:	80800417 	ldw	r2,16(r16)
10007eb8:	84000604 	addi	r16,r16,24
10007ebc:	b0c00804 	addi	r3,r22,32
10007ec0:	b0800615 	stw	r2,24(r22)
10007ec4:	80bfff17 	ldw	r2,-4(r16)
10007ec8:	b0800715 	stw	r2,28(r22)
10007ecc:	003f9906 	br	10007d34 <__alt_data_end+0xf8007d34>
10007ed0:	8807883a 	mov	r3,r17
10007ed4:	003fc706 	br	10007df4 <__alt_data_end+0xf8007df4>
10007ed8:	8809883a 	mov	r4,r17
10007edc:	800b883a 	mov	r5,r16
10007ee0:	00067580 	call	10006758 <memmove>
10007ee4:	003fc906 	br	10007e0c <__alt_data_end+0xf8007e0c>
10007ee8:	80800217 	ldw	r2,8(r16)
10007eec:	b0800415 	stw	r2,16(r22)
10007ef0:	80800317 	ldw	r2,12(r16)
10007ef4:	b0800515 	stw	r2,20(r22)
10007ef8:	31000726 	beq	r6,r4,10007f18 <_realloc_r+0x548>
10007efc:	b0c00604 	addi	r3,r22,24
10007f00:	84000404 	addi	r16,r16,16
10007f04:	003fbb06 	br	10007df4 <__alt_data_end+0xf8007df4>
10007f08:	a809883a 	mov	r4,r21
10007f0c:	000dd440 	call	1000dd44 <__malloc_unlock>
10007f10:	0005883a 	mov	r2,zero
10007f14:	003f0d06 	br	10007b4c <__alt_data_end+0xf8007b4c>
10007f18:	80800417 	ldw	r2,16(r16)
10007f1c:	84000604 	addi	r16,r16,24
10007f20:	b0c00804 	addi	r3,r22,32
10007f24:	b0800615 	stw	r2,24(r22)
10007f28:	80bfff17 	ldw	r2,-4(r16)
10007f2c:	b0800715 	stw	r2,28(r22)
10007f30:	003fb006 	br	10007df4 <__alt_data_end+0xf8007df4>

10007f34 <__fpclassifyd>:
10007f34:	00a00034 	movhi	r2,32768
10007f38:	10bfffc4 	addi	r2,r2,-1
10007f3c:	288a703a 	and	r5,r5,r2
10007f40:	28000726 	beq	r5,zero,10007f60 <__fpclassifyd+0x2c>
10007f44:	00bffc34 	movhi	r2,65520
10007f48:	2885883a 	add	r2,r5,r2
10007f4c:	00dff834 	movhi	r3,32736
10007f50:	18ffffc4 	addi	r3,r3,-1
10007f54:	18800636 	bltu	r3,r2,10007f70 <__fpclassifyd+0x3c>
10007f58:	00800104 	movi	r2,4
10007f5c:	f800283a 	ret
10007f60:	2005003a 	cmpeq	r2,r4,zero
10007f64:	00c000c4 	movi	r3,3
10007f68:	1885c83a 	sub	r2,r3,r2
10007f6c:	f800283a 	ret
10007f70:	00800434 	movhi	r2,16
10007f74:	10bfffc4 	addi	r2,r2,-1
10007f78:	11400236 	bltu	r2,r5,10007f84 <__fpclassifyd+0x50>
10007f7c:	008000c4 	movi	r2,3
10007f80:	f800283a 	ret
10007f84:	009ffc34 	movhi	r2,32752
10007f88:	28800226 	beq	r5,r2,10007f94 <__fpclassifyd+0x60>
10007f8c:	0005883a 	mov	r2,zero
10007f90:	f800283a 	ret
10007f94:	2005003a 	cmpeq	r2,r4,zero
10007f98:	f800283a 	ret

10007f9c <_sbrk_r>:
10007f9c:	defffd04 	addi	sp,sp,-12
10007fa0:	dc400115 	stw	r17,4(sp)
10007fa4:	dc000015 	stw	r16,0(sp)
10007fa8:	2023883a 	mov	r17,r4
10007fac:	04040074 	movhi	r16,4097
10007fb0:	840d9a04 	addi	r16,r16,13928
10007fb4:	2809883a 	mov	r4,r5
10007fb8:	dfc00215 	stw	ra,8(sp)
10007fbc:	80000015 	stw	zero,0(r16)
10007fc0:	000df2c0 	call	1000df2c <sbrk>
10007fc4:	00ffffc4 	movi	r3,-1
10007fc8:	10c00526 	beq	r2,r3,10007fe0 <_sbrk_r+0x44>
10007fcc:	dfc00217 	ldw	ra,8(sp)
10007fd0:	dc400117 	ldw	r17,4(sp)
10007fd4:	dc000017 	ldw	r16,0(sp)
10007fd8:	dec00304 	addi	sp,sp,12
10007fdc:	f800283a 	ret
10007fe0:	80c00017 	ldw	r3,0(r16)
10007fe4:	183ff926 	beq	r3,zero,10007fcc <__alt_data_end+0xf8007fcc>
10007fe8:	88c00015 	stw	r3,0(r17)
10007fec:	dfc00217 	ldw	ra,8(sp)
10007ff0:	dc400117 	ldw	r17,4(sp)
10007ff4:	dc000017 	ldw	r16,0(sp)
10007ff8:	dec00304 	addi	sp,sp,12
10007ffc:	f800283a 	ret

10008000 <__sread>:
10008000:	defffe04 	addi	sp,sp,-8
10008004:	dc000015 	stw	r16,0(sp)
10008008:	2821883a 	mov	r16,r5
1000800c:	2940038f 	ldh	r5,14(r5)
10008010:	dfc00115 	stw	ra,4(sp)
10008014:	0009d780 	call	10009d78 <_read_r>
10008018:	10000716 	blt	r2,zero,10008038 <__sread+0x38>
1000801c:	80c01417 	ldw	r3,80(r16)
10008020:	1887883a 	add	r3,r3,r2
10008024:	80c01415 	stw	r3,80(r16)
10008028:	dfc00117 	ldw	ra,4(sp)
1000802c:	dc000017 	ldw	r16,0(sp)
10008030:	dec00204 	addi	sp,sp,8
10008034:	f800283a 	ret
10008038:	80c0030b 	ldhu	r3,12(r16)
1000803c:	18fbffcc 	andi	r3,r3,61439
10008040:	80c0030d 	sth	r3,12(r16)
10008044:	dfc00117 	ldw	ra,4(sp)
10008048:	dc000017 	ldw	r16,0(sp)
1000804c:	dec00204 	addi	sp,sp,8
10008050:	f800283a 	ret

10008054 <__seofread>:
10008054:	0005883a 	mov	r2,zero
10008058:	f800283a 	ret

1000805c <__swrite>:
1000805c:	2880030b 	ldhu	r2,12(r5)
10008060:	defffb04 	addi	sp,sp,-20
10008064:	dcc00315 	stw	r19,12(sp)
10008068:	dc800215 	stw	r18,8(sp)
1000806c:	dc400115 	stw	r17,4(sp)
10008070:	dc000015 	stw	r16,0(sp)
10008074:	dfc00415 	stw	ra,16(sp)
10008078:	10c0400c 	andi	r3,r2,256
1000807c:	2821883a 	mov	r16,r5
10008080:	2027883a 	mov	r19,r4
10008084:	3025883a 	mov	r18,r6
10008088:	3823883a 	mov	r17,r7
1000808c:	18000526 	beq	r3,zero,100080a4 <__swrite+0x48>
10008090:	2940038f 	ldh	r5,14(r5)
10008094:	000d883a 	mov	r6,zero
10008098:	01c00084 	movi	r7,2
1000809c:	0009d0c0 	call	10009d0c <_lseek_r>
100080a0:	8080030b 	ldhu	r2,12(r16)
100080a4:	8140038f 	ldh	r5,14(r16)
100080a8:	10bbffcc 	andi	r2,r2,61439
100080ac:	9809883a 	mov	r4,r19
100080b0:	900d883a 	mov	r6,r18
100080b4:	880f883a 	mov	r7,r17
100080b8:	8080030d 	sth	r2,12(r16)
100080bc:	dfc00417 	ldw	ra,16(sp)
100080c0:	dcc00317 	ldw	r19,12(sp)
100080c4:	dc800217 	ldw	r18,8(sp)
100080c8:	dc400117 	ldw	r17,4(sp)
100080cc:	dc000017 	ldw	r16,0(sp)
100080d0:	dec00504 	addi	sp,sp,20
100080d4:	00097601 	jmpi	10009760 <_write_r>

100080d8 <__sseek>:
100080d8:	defffe04 	addi	sp,sp,-8
100080dc:	dc000015 	stw	r16,0(sp)
100080e0:	2821883a 	mov	r16,r5
100080e4:	2940038f 	ldh	r5,14(r5)
100080e8:	dfc00115 	stw	ra,4(sp)
100080ec:	0009d0c0 	call	10009d0c <_lseek_r>
100080f0:	00ffffc4 	movi	r3,-1
100080f4:	10c00826 	beq	r2,r3,10008118 <__sseek+0x40>
100080f8:	80c0030b 	ldhu	r3,12(r16)
100080fc:	80801415 	stw	r2,80(r16)
10008100:	18c40014 	ori	r3,r3,4096
10008104:	80c0030d 	sth	r3,12(r16)
10008108:	dfc00117 	ldw	ra,4(sp)
1000810c:	dc000017 	ldw	r16,0(sp)
10008110:	dec00204 	addi	sp,sp,8
10008114:	f800283a 	ret
10008118:	80c0030b 	ldhu	r3,12(r16)
1000811c:	18fbffcc 	andi	r3,r3,61439
10008120:	80c0030d 	sth	r3,12(r16)
10008124:	dfc00117 	ldw	ra,4(sp)
10008128:	dc000017 	ldw	r16,0(sp)
1000812c:	dec00204 	addi	sp,sp,8
10008130:	f800283a 	ret

10008134 <__sclose>:
10008134:	2940038f 	ldh	r5,14(r5)
10008138:	00097cc1 	jmpi	100097cc <_close_r>

1000813c <strcmp>:
1000813c:	2144b03a 	or	r2,r4,r5
10008140:	108000cc 	andi	r2,r2,3
10008144:	1000171e 	bne	r2,zero,100081a4 <strcmp+0x68>
10008148:	20800017 	ldw	r2,0(r4)
1000814c:	28c00017 	ldw	r3,0(r5)
10008150:	10c0141e 	bne	r2,r3,100081a4 <strcmp+0x68>
10008154:	027fbff4 	movhi	r9,65279
10008158:	4a7fbfc4 	addi	r9,r9,-257
1000815c:	1247883a 	add	r3,r2,r9
10008160:	0084303a 	nor	r2,zero,r2
10008164:	1884703a 	and	r2,r3,r2
10008168:	02202074 	movhi	r8,32897
1000816c:	42202004 	addi	r8,r8,-32640
10008170:	1204703a 	and	r2,r2,r8
10008174:	10000226 	beq	r2,zero,10008180 <strcmp+0x44>
10008178:	00001706 	br	100081d8 <strcmp+0x9c>
1000817c:	3000161e 	bne	r6,zero,100081d8 <strcmp+0x9c>
10008180:	21000104 	addi	r4,r4,4
10008184:	20800017 	ldw	r2,0(r4)
10008188:	29400104 	addi	r5,r5,4
1000818c:	28c00017 	ldw	r3,0(r5)
10008190:	124f883a 	add	r7,r2,r9
10008194:	008c303a 	nor	r6,zero,r2
10008198:	398c703a 	and	r6,r7,r6
1000819c:	320c703a 	and	r6,r6,r8
100081a0:	10fff626 	beq	r2,r3,1000817c <__alt_data_end+0xf800817c>
100081a4:	20800007 	ldb	r2,0(r4)
100081a8:	1000051e 	bne	r2,zero,100081c0 <strcmp+0x84>
100081ac:	00000606 	br	100081c8 <strcmp+0x8c>
100081b0:	21000044 	addi	r4,r4,1
100081b4:	20800007 	ldb	r2,0(r4)
100081b8:	29400044 	addi	r5,r5,1
100081bc:	10000226 	beq	r2,zero,100081c8 <strcmp+0x8c>
100081c0:	28c00007 	ldb	r3,0(r5)
100081c4:	10fffa26 	beq	r2,r3,100081b0 <__alt_data_end+0xf80081b0>
100081c8:	20c00003 	ldbu	r3,0(r4)
100081cc:	28800003 	ldbu	r2,0(r5)
100081d0:	1885c83a 	sub	r2,r3,r2
100081d4:	f800283a 	ret
100081d8:	0005883a 	mov	r2,zero
100081dc:	f800283a 	ret

100081e0 <__sprint_r.part.0>:
100081e0:	28801917 	ldw	r2,100(r5)
100081e4:	defff604 	addi	sp,sp,-40
100081e8:	dd800615 	stw	r22,24(sp)
100081ec:	dcc00315 	stw	r19,12(sp)
100081f0:	dfc00915 	stw	ra,36(sp)
100081f4:	df000815 	stw	fp,32(sp)
100081f8:	ddc00715 	stw	r23,28(sp)
100081fc:	dd400515 	stw	r21,20(sp)
10008200:	dd000415 	stw	r20,16(sp)
10008204:	dc800215 	stw	r18,8(sp)
10008208:	dc400115 	stw	r17,4(sp)
1000820c:	dc000015 	stw	r16,0(sp)
10008210:	1088000c 	andi	r2,r2,8192
10008214:	2827883a 	mov	r19,r5
10008218:	302d883a 	mov	r22,r6
1000821c:	10002d26 	beq	r2,zero,100082d4 <__sprint_r.part.0+0xf4>
10008220:	30800217 	ldw	r2,8(r6)
10008224:	35c00017 	ldw	r23,0(r6)
10008228:	10002826 	beq	r2,zero,100082cc <__sprint_r.part.0+0xec>
1000822c:	202b883a 	mov	r21,r4
10008230:	bf000104 	addi	fp,r23,4
10008234:	053fffc4 	movi	r20,-1
10008238:	e4800017 	ldw	r18,0(fp)
1000823c:	bc400017 	ldw	r17,0(r23)
10008240:	0021883a 	mov	r16,zero
10008244:	9024d0ba 	srli	r18,r18,2
10008248:	04800316 	blt	zero,r18,10008258 <__sprint_r.part.0+0x78>
1000824c:	00001806 	br	100082b0 <__sprint_r.part.0+0xd0>
10008250:	8c400104 	addi	r17,r17,4
10008254:	94001526 	beq	r18,r16,100082ac <__sprint_r.part.0+0xcc>
10008258:	89400017 	ldw	r5,0(r17)
1000825c:	a809883a 	mov	r4,r21
10008260:	980d883a 	mov	r6,r19
10008264:	0009a440 	call	10009a44 <_fputwc_r>
10008268:	84000044 	addi	r16,r16,1
1000826c:	153ff81e 	bne	r2,r20,10008250 <__alt_data_end+0xf8008250>
10008270:	a005883a 	mov	r2,r20
10008274:	b0000215 	stw	zero,8(r22)
10008278:	b0000115 	stw	zero,4(r22)
1000827c:	dfc00917 	ldw	ra,36(sp)
10008280:	df000817 	ldw	fp,32(sp)
10008284:	ddc00717 	ldw	r23,28(sp)
10008288:	dd800617 	ldw	r22,24(sp)
1000828c:	dd400517 	ldw	r21,20(sp)
10008290:	dd000417 	ldw	r20,16(sp)
10008294:	dcc00317 	ldw	r19,12(sp)
10008298:	dc800217 	ldw	r18,8(sp)
1000829c:	dc400117 	ldw	r17,4(sp)
100082a0:	dc000017 	ldw	r16,0(sp)
100082a4:	dec00a04 	addi	sp,sp,40
100082a8:	f800283a 	ret
100082ac:	b0800217 	ldw	r2,8(r22)
100082b0:	94a5883a 	add	r18,r18,r18
100082b4:	94a5883a 	add	r18,r18,r18
100082b8:	1485c83a 	sub	r2,r2,r18
100082bc:	b0800215 	stw	r2,8(r22)
100082c0:	bdc00204 	addi	r23,r23,8
100082c4:	e7000204 	addi	fp,fp,8
100082c8:	103fdb1e 	bne	r2,zero,10008238 <__alt_data_end+0xf8008238>
100082cc:	0005883a 	mov	r2,zero
100082d0:	003fe806 	br	10008274 <__alt_data_end+0xf8008274>
100082d4:	000550c0 	call	1000550c <__sfvwrite_r>
100082d8:	003fe606 	br	10008274 <__alt_data_end+0xf8008274>

100082dc <__sprint_r>:
100082dc:	30c00217 	ldw	r3,8(r6)
100082e0:	18000126 	beq	r3,zero,100082e8 <__sprint_r+0xc>
100082e4:	00081e01 	jmpi	100081e0 <__sprint_r.part.0>
100082e8:	30000115 	stw	zero,4(r6)
100082ec:	0005883a 	mov	r2,zero
100082f0:	f800283a 	ret

100082f4 <___vfiprintf_internal_r>:
100082f4:	defec804 	addi	sp,sp,-1248
100082f8:	dfc13715 	stw	ra,1244(sp)
100082fc:	df013615 	stw	fp,1240(sp)
10008300:	ddc13515 	stw	r23,1236(sp)
10008304:	dd813415 	stw	r22,1232(sp)
10008308:	dd413315 	stw	r21,1228(sp)
1000830c:	dd013215 	stw	r20,1224(sp)
10008310:	dcc13115 	stw	r19,1220(sp)
10008314:	dc813015 	stw	r18,1216(sp)
10008318:	dc412f15 	stw	r17,1212(sp)
1000831c:	dc012e15 	stw	r16,1208(sp)
10008320:	d9012215 	stw	r4,1160(sp)
10008324:	d9412015 	stw	r5,1152(sp)
10008328:	d9c12315 	stw	r7,1164(sp)
1000832c:	3013883a 	mov	r9,r6
10008330:	20000226 	beq	r4,zero,1000833c <___vfiprintf_internal_r+0x48>
10008334:	20800e17 	ldw	r2,56(r4)
10008338:	1000f926 	beq	r2,zero,10008720 <___vfiprintf_internal_r+0x42c>
1000833c:	d8c12017 	ldw	r3,1152(sp)
10008340:	1880030b 	ldhu	r2,12(r3)
10008344:	1108000c 	andi	r4,r2,8192
10008348:	1007883a 	mov	r3,r2
1000834c:	2000081e 	bne	r4,zero,10008370 <___vfiprintf_internal_r+0x7c>
10008350:	d9412017 	ldw	r5,1152(sp)
10008354:	10c80014 	ori	r3,r2,8192
10008358:	00b7ffc4 	movi	r2,-8193
1000835c:	29001917 	ldw	r4,100(r5)
10008360:	28c0030d 	sth	r3,12(r5)
10008364:	2088703a 	and	r4,r4,r2
10008368:	29001915 	stw	r4,100(r5)
1000836c:	1805883a 	mov	r2,r3
10008370:	1900020c 	andi	r4,r3,8
10008374:	2000a726 	beq	r4,zero,10008614 <___vfiprintf_internal_r+0x320>
10008378:	d9412017 	ldw	r5,1152(sp)
1000837c:	29000417 	ldw	r4,16(r5)
10008380:	2000a426 	beq	r4,zero,10008614 <___vfiprintf_internal_r+0x320>
10008384:	18c0068c 	andi	r3,r3,26
10008388:	01000284 	movi	r4,10
1000838c:	1900ad26 	beq	r3,r4,10008644 <___vfiprintf_internal_r+0x350>
10008390:	d90109c4 	addi	r4,sp,1063
10008394:	d9410a04 	addi	r5,sp,1064
10008398:	2905c83a 	sub	r2,r5,r4
1000839c:	d9011e15 	stw	r4,1144(sp)
100083a0:	d9411f15 	stw	r5,1148(sp)
100083a4:	dec11a15 	stw	sp,1128(sp)
100083a8:	d8011c15 	stw	zero,1136(sp)
100083ac:	d8011b15 	stw	zero,1132(sp)
100083b0:	d8012715 	stw	zero,1180(sp)
100083b4:	d8012415 	stw	zero,1168(sp)
100083b8:	d811883a 	mov	r8,sp
100083bc:	04c40074 	movhi	r19,4097
100083c0:	9cffc904 	addi	r19,r19,-220
100083c4:	04040074 	movhi	r16,4097
100083c8:	843fc504 	addi	r16,r16,-236
100083cc:	d8812815 	stw	r2,1184(sp)
100083d0:	48800007 	ldb	r2,0(r9)
100083d4:	10040126 	beq	r2,zero,100093dc <___vfiprintf_internal_r+0x10e8>
100083d8:	00c00944 	movi	r3,37
100083dc:	4829883a 	mov	r20,r9
100083e0:	10c0021e 	bne	r2,r3,100083ec <___vfiprintf_internal_r+0xf8>
100083e4:	00001606 	br	10008440 <___vfiprintf_internal_r+0x14c>
100083e8:	10c00326 	beq	r2,r3,100083f8 <___vfiprintf_internal_r+0x104>
100083ec:	a5000044 	addi	r20,r20,1
100083f0:	a0800007 	ldb	r2,0(r20)
100083f4:	103ffc1e 	bne	r2,zero,100083e8 <__alt_data_end+0xf80083e8>
100083f8:	a263c83a 	sub	r17,r20,r9
100083fc:	88001026 	beq	r17,zero,10008440 <___vfiprintf_internal_r+0x14c>
10008400:	d8c11c17 	ldw	r3,1136(sp)
10008404:	d8811b17 	ldw	r2,1132(sp)
10008408:	42400015 	stw	r9,0(r8)
1000840c:	88c7883a 	add	r3,r17,r3
10008410:	10800044 	addi	r2,r2,1
10008414:	44400115 	stw	r17,4(r8)
10008418:	d8c11c15 	stw	r3,1136(sp)
1000841c:	d8811b15 	stw	r2,1132(sp)
10008420:	010001c4 	movi	r4,7
10008424:	2080760e 	bge	r4,r2,10008600 <___vfiprintf_internal_r+0x30c>
10008428:	1803b41e 	bne	r3,zero,100092fc <___vfiprintf_internal_r+0x1008>
1000842c:	d8c12417 	ldw	r3,1168(sp)
10008430:	d8011b15 	stw	zero,1132(sp)
10008434:	d811883a 	mov	r8,sp
10008438:	1c47883a 	add	r3,r3,r17
1000843c:	d8c12415 	stw	r3,1168(sp)
10008440:	a0800007 	ldb	r2,0(r20)
10008444:	1002dc26 	beq	r2,zero,10008fb8 <___vfiprintf_internal_r+0xcc4>
10008448:	04bfffc4 	movi	r18,-1
1000844c:	a2400044 	addi	r9,r20,1
10008450:	a0c00047 	ldb	r3,1(r20)
10008454:	d8011d85 	stb	zero,1142(sp)
10008458:	002d883a 	mov	r22,zero
1000845c:	d8012115 	stw	zero,1156(sp)
10008460:	0023883a 	mov	r17,zero
10008464:	05001604 	movi	r20,88
10008468:	05400244 	movi	r21,9
1000846c:	402f883a 	mov	r23,r8
10008470:	900d883a 	mov	r6,r18
10008474:	4a400044 	addi	r9,r9,1
10008478:	18bff804 	addi	r2,r3,-32
1000847c:	a0828736 	bltu	r20,r2,10008e9c <___vfiprintf_internal_r+0xba8>
10008480:	1085883a 	add	r2,r2,r2
10008484:	1085883a 	add	r2,r2,r2
10008488:	01040074 	movhi	r4,4097
1000848c:	21212704 	addi	r4,r4,-31588
10008490:	1105883a 	add	r2,r2,r4
10008494:	10800017 	ldw	r2,0(r2)
10008498:	1000683a 	jmp	r2
1000849c:	10008bfc 	xorhi	zero,r2,559
100084a0:	10008e9c 	xori	zero,r2,570
100084a4:	10008e9c 	xori	zero,r2,570
100084a8:	10008c18 	cmpnei	zero,r2,560
100084ac:	10008e9c 	xori	zero,r2,570
100084b0:	10008e9c 	xori	zero,r2,570
100084b4:	10008e9c 	xori	zero,r2,570
100084b8:	10008e9c 	xori	zero,r2,570
100084bc:	10008e9c 	xori	zero,r2,570
100084c0:	10008e9c 	xori	zero,r2,570
100084c4:	10008cac 	andhi	zero,r2,562
100084c8:	10008cd4 	ori	zero,r2,563
100084cc:	10008e9c 	xori	zero,r2,570
100084d0:	10008740 	call	11000874 <_gp+0xfe6d60>
100084d4:	10008ce0 	cmpeqi	zero,r2,563
100084d8:	10008e9c 	xori	zero,r2,570
100084dc:	1000874c 	andi	zero,r2,541
100084e0:	10008758 	cmpnei	zero,r2,541
100084e4:	10008758 	cmpnei	zero,r2,541
100084e8:	10008758 	cmpnei	zero,r2,541
100084ec:	10008758 	cmpnei	zero,r2,541
100084f0:	10008758 	cmpnei	zero,r2,541
100084f4:	10008758 	cmpnei	zero,r2,541
100084f8:	10008758 	cmpnei	zero,r2,541
100084fc:	10008758 	cmpnei	zero,r2,541
10008500:	10008758 	cmpnei	zero,r2,541
10008504:	10008e9c 	xori	zero,r2,570
10008508:	10008e9c 	xori	zero,r2,570
1000850c:	10008e9c 	xori	zero,r2,570
10008510:	10008e9c 	xori	zero,r2,570
10008514:	10008e9c 	xori	zero,r2,570
10008518:	10008e9c 	xori	zero,r2,570
1000851c:	10008e9c 	xori	zero,r2,570
10008520:	10008e9c 	xori	zero,r2,570
10008524:	10008e9c 	xori	zero,r2,570
10008528:	10008e9c 	xori	zero,r2,570
1000852c:	100087a0 	cmpeqi	zero,r2,542
10008530:	10008e9c 	xori	zero,r2,570
10008534:	10008e9c 	xori	zero,r2,570
10008538:	10008e9c 	xori	zero,r2,570
1000853c:	10008e9c 	xori	zero,r2,570
10008540:	10008e9c 	xori	zero,r2,570
10008544:	10008e9c 	xori	zero,r2,570
10008548:	10008e9c 	xori	zero,r2,570
1000854c:	10008e9c 	xori	zero,r2,570
10008550:	10008e9c 	xori	zero,r2,570
10008554:	10008e9c 	xori	zero,r2,570
10008558:	10008af4 	orhi	zero,r2,555
1000855c:	10008e9c 	xori	zero,r2,570
10008560:	10008e9c 	xori	zero,r2,570
10008564:	10008e9c 	xori	zero,r2,570
10008568:	10008e9c 	xori	zero,r2,570
1000856c:	10008e9c 	xori	zero,r2,570
10008570:	10008b38 	rdprs	zero,r2,556
10008574:	10008e9c 	xori	zero,r2,570
10008578:	10008e9c 	xori	zero,r2,570
1000857c:	10008b70 	cmpltui	zero,r2,557
10008580:	10008e9c 	xori	zero,r2,570
10008584:	10008e9c 	xori	zero,r2,570
10008588:	10008e9c 	xori	zero,r2,570
1000858c:	10008e9c 	xori	zero,r2,570
10008590:	10008e9c 	xori	zero,r2,570
10008594:	10008e9c 	xori	zero,r2,570
10008598:	10008e9c 	xori	zero,r2,570
1000859c:	10008e9c 	xori	zero,r2,570
100085a0:	10008e9c 	xori	zero,r2,570
100085a4:	10008e9c 	xori	zero,r2,570
100085a8:	10008bcc 	andi	zero,r2,559
100085ac:	10008d40 	call	110008d4 <_gp+0xfe6dc0>
100085b0:	10008e9c 	xori	zero,r2,570
100085b4:	10008e9c 	xori	zero,r2,570
100085b8:	10008e9c 	xori	zero,r2,570
100085bc:	10008d34 	orhi	zero,r2,564
100085c0:	10008d40 	call	110008d4 <_gp+0xfe6dc0>
100085c4:	10008e9c 	xori	zero,r2,570
100085c8:	10008e9c 	xori	zero,r2,570
100085cc:	10008c24 	muli	zero,r2,560
100085d0:	10008e9c 	xori	zero,r2,570
100085d4:	10008c3c 	xorhi	zero,r2,560
100085d8:	10008c74 	orhi	zero,r2,561
100085dc:	10008e54 	ori	zero,r2,569
100085e0:	10008d78 	rdprs	zero,r2,565
100085e4:	10008e9c 	xori	zero,r2,570
100085e8:	10008d84 	addi	zero,r2,566
100085ec:	10008e9c 	xori	zero,r2,570
100085f0:	10008ddc 	xori	zero,r2,567
100085f4:	10008e9c 	xori	zero,r2,570
100085f8:	10008e9c 	xori	zero,r2,570
100085fc:	10008e14 	ori	zero,r2,568
10008600:	42000204 	addi	r8,r8,8
10008604:	d8c12417 	ldw	r3,1168(sp)
10008608:	1c47883a 	add	r3,r3,r17
1000860c:	d8c12415 	stw	r3,1168(sp)
10008610:	003f8b06 	br	10008440 <__alt_data_end+0xf8008440>
10008614:	d9012217 	ldw	r4,1160(sp)
10008618:	d9412017 	ldw	r5,1152(sp)
1000861c:	da412d15 	stw	r9,1204(sp)
10008620:	000314c0 	call	1000314c <__swsetup_r>
10008624:	da412d17 	ldw	r9,1204(sp)
10008628:	1000301e 	bne	r2,zero,100086ec <___vfiprintf_internal_r+0x3f8>
1000862c:	d8c12017 	ldw	r3,1152(sp)
10008630:	01000284 	movi	r4,10
10008634:	1880030b 	ldhu	r2,12(r3)
10008638:	1007883a 	mov	r3,r2
1000863c:	18c0068c 	andi	r3,r3,26
10008640:	193f531e 	bne	r3,r4,10008390 <__alt_data_end+0xf8008390>
10008644:	d9012017 	ldw	r4,1152(sp)
10008648:	20c0038b 	ldhu	r3,14(r4)
1000864c:	193fffcc 	andi	r4,r3,65535
10008650:	2120001c 	xori	r4,r4,32768
10008654:	21200004 	addi	r4,r4,-32768
10008658:	203f4d16 	blt	r4,zero,10008390 <__alt_data_end+0xf8008390>
1000865c:	d9412017 	ldw	r5,1152(sp)
10008660:	d9012217 	ldw	r4,1160(sp)
10008664:	d9c12317 	ldw	r7,1164(sp)
10008668:	2b001917 	ldw	r12,100(r5)
1000866c:	2ac00717 	ldw	r11,28(r5)
10008670:	2a800917 	ldw	r10,36(r5)
10008674:	02010004 	movi	r8,1024
10008678:	10bfff4c 	andi	r2,r2,65533
1000867c:	da0b883a 	add	r5,sp,r8
10008680:	480d883a 	mov	r6,r9
10008684:	d881030d 	sth	r2,1036(sp)
10008688:	db011915 	stw	r12,1124(sp)
1000868c:	d8c1038d 	sth	r3,1038(sp)
10008690:	dac10715 	stw	r11,1052(sp)
10008694:	da810915 	stw	r10,1060(sp)
10008698:	dec10015 	stw	sp,1024(sp)
1000869c:	dec10415 	stw	sp,1040(sp)
100086a0:	da010215 	stw	r8,1032(sp)
100086a4:	da010515 	stw	r8,1044(sp)
100086a8:	d8010615 	stw	zero,1048(sp)
100086ac:	00082f40 	call	100082f4 <___vfiprintf_internal_r>
100086b0:	1021883a 	mov	r16,r2
100086b4:	10000416 	blt	r2,zero,100086c8 <___vfiprintf_internal_r+0x3d4>
100086b8:	d9012217 	ldw	r4,1160(sp)
100086bc:	d9410004 	addi	r5,sp,1024
100086c0:	0004ae80 	call	10004ae8 <_fflush_r>
100086c4:	10040b1e 	bne	r2,zero,100096f4 <___vfiprintf_internal_r+0x1400>
100086c8:	d881030b 	ldhu	r2,1036(sp)
100086cc:	1080100c 	andi	r2,r2,64
100086d0:	10000426 	beq	r2,zero,100086e4 <___vfiprintf_internal_r+0x3f0>
100086d4:	d8c12017 	ldw	r3,1152(sp)
100086d8:	1880030b 	ldhu	r2,12(r3)
100086dc:	10801014 	ori	r2,r2,64
100086e0:	1880030d 	sth	r2,12(r3)
100086e4:	8005883a 	mov	r2,r16
100086e8:	00000106 	br	100086f0 <___vfiprintf_internal_r+0x3fc>
100086ec:	00bfffc4 	movi	r2,-1
100086f0:	dfc13717 	ldw	ra,1244(sp)
100086f4:	df013617 	ldw	fp,1240(sp)
100086f8:	ddc13517 	ldw	r23,1236(sp)
100086fc:	dd813417 	ldw	r22,1232(sp)
10008700:	dd413317 	ldw	r21,1228(sp)
10008704:	dd013217 	ldw	r20,1224(sp)
10008708:	dcc13117 	ldw	r19,1220(sp)
1000870c:	dc813017 	ldw	r18,1216(sp)
10008710:	dc412f17 	ldw	r17,1212(sp)
10008714:	dc012e17 	ldw	r16,1208(sp)
10008718:	dec13804 	addi	sp,sp,1248
1000871c:	f800283a 	ret
10008720:	d9812d15 	stw	r6,1204(sp)
10008724:	0004e080 	call	10004e08 <__sinit>
10008728:	da412d17 	ldw	r9,1204(sp)
1000872c:	003f0306 	br	1000833c <__alt_data_end+0xf800833c>
10008730:	d9412117 	ldw	r5,1156(sp)
10008734:	d8812315 	stw	r2,1164(sp)
10008738:	014bc83a 	sub	r5,zero,r5
1000873c:	d9412115 	stw	r5,1156(sp)
10008740:	8c400114 	ori	r17,r17,4
10008744:	48c00007 	ldb	r3,0(r9)
10008748:	003f4a06 	br	10008474 <__alt_data_end+0xf8008474>
1000874c:	8c402014 	ori	r17,r17,128
10008750:	48c00007 	ldb	r3,0(r9)
10008754:	003f4706 	br	10008474 <__alt_data_end+0xf8008474>
10008758:	4825883a 	mov	r18,r9
1000875c:	d8012115 	stw	zero,1156(sp)
10008760:	1f3ff404 	addi	fp,r3,-48
10008764:	00000106 	br	1000876c <___vfiprintf_internal_r+0x478>
10008768:	1025883a 	mov	r18,r2
1000876c:	d9012117 	ldw	r4,1156(sp)
10008770:	01400284 	movi	r5,10
10008774:	d9812b15 	stw	r6,1196(sp)
10008778:	000af1c0 	call	1000af1c <__mulsi3>
1000877c:	90c00007 	ldb	r3,0(r18)
10008780:	1739883a 	add	fp,r2,fp
10008784:	df012115 	stw	fp,1156(sp)
10008788:	90800044 	addi	r2,r18,1
1000878c:	1f3ff404 	addi	fp,r3,-48
10008790:	1013883a 	mov	r9,r2
10008794:	d9812b17 	ldw	r6,1196(sp)
10008798:	af3ff32e 	bgeu	r21,fp,10008768 <__alt_data_end+0xf8008768>
1000879c:	003f3606 	br	10008478 <__alt_data_end+0xf8008478>
100087a0:	8c400414 	ori	r17,r17,16
100087a4:	dd811d85 	stb	r22,1142(sp)
100087a8:	8880080c 	andi	r2,r17,32
100087ac:	b811883a 	mov	r8,r23
100087b0:	3025883a 	mov	r18,r6
100087b4:	10016726 	beq	r2,zero,10008d54 <___vfiprintf_internal_r+0xa60>
100087b8:	d8c12317 	ldw	r3,1164(sp)
100087bc:	18800117 	ldw	r2,4(r3)
100087c0:	1d000017 	ldw	r20,0(r3)
100087c4:	18c00204 	addi	r3,r3,8
100087c8:	d8c12315 	stw	r3,1164(sp)
100087cc:	102b883a 	mov	r21,r2
100087d0:	10030416 	blt	r2,zero,100093e4 <___vfiprintf_internal_r+0x10f0>
100087d4:	dd811d83 	ldbu	r22,1142(sp)
100087d8:	900f883a 	mov	r7,r18
100087dc:	00800044 	movi	r2,1
100087e0:	a548b03a 	or	r4,r20,r21
100087e4:	90000216 	blt	r18,zero,100087f0 <___vfiprintf_internal_r+0x4fc>
100087e8:	00ffdfc4 	movi	r3,-129
100087ec:	88e2703a 	and	r17,r17,r3
100087f0:	10803fcc 	andi	r2,r2,255
100087f4:	2001db1e 	bne	r4,zero,10008f64 <___vfiprintf_internal_r+0xc70>
100087f8:	9001da1e 	bne	r18,zero,10008f64 <___vfiprintf_internal_r+0xc70>
100087fc:	1002ab1e 	bne	r2,zero,100092ac <___vfiprintf_internal_r+0xfb8>
10008800:	8880004c 	andi	r2,r17,1
10008804:	1002a926 	beq	r2,zero,100092ac <___vfiprintf_internal_r+0xfb8>
10008808:	d9c12817 	ldw	r7,1184(sp)
1000880c:	00800c04 	movi	r2,48
10008810:	d88109c5 	stb	r2,1063(sp)
10008814:	ddc109c4 	addi	r23,sp,1063
10008818:	3829883a 	mov	r20,r7
1000881c:	3c80010e 	bge	r7,r18,10008824 <___vfiprintf_internal_r+0x530>
10008820:	9029883a 	mov	r20,r18
10008824:	b5803fcc 	andi	r22,r22,255
10008828:	b580201c 	xori	r22,r22,128
1000882c:	b5bfe004 	addi	r22,r22,-128
10008830:	b0000126 	beq	r22,zero,10008838 <___vfiprintf_internal_r+0x544>
10008834:	a5000044 	addi	r20,r20,1
10008838:	8a80008c 	andi	r10,r17,2
1000883c:	50000126 	beq	r10,zero,10008844 <___vfiprintf_internal_r+0x550>
10008840:	a5000084 	addi	r20,r20,2
10008844:	8d40210c 	andi	r21,r17,132
10008848:	a801aa1e 	bne	r21,zero,10008ef4 <___vfiprintf_internal_r+0xc00>
1000884c:	d8c12117 	ldw	r3,1156(sp)
10008850:	1d2dc83a 	sub	r22,r3,r20
10008854:	0581a70e 	bge	zero,r22,10008ef4 <___vfiprintf_internal_r+0xc00>
10008858:	07000404 	movi	fp,16
1000885c:	d8c11c17 	ldw	r3,1136(sp)
10008860:	e583780e 	bge	fp,r22,10009644 <___vfiprintf_internal_r+0x1350>
10008864:	01440074 	movhi	r5,4097
10008868:	297fc904 	addi	r5,r5,-220
1000886c:	dc412615 	stw	r17,1176(sp)
10008870:	d9011b17 	ldw	r4,1132(sp)
10008874:	b023883a 	mov	r17,r22
10008878:	d9412515 	stw	r5,1172(sp)
1000887c:	030001c4 	movi	r12,7
10008880:	d9c12915 	stw	r7,1188(sp)
10008884:	da812a15 	stw	r10,1192(sp)
10008888:	482d883a 	mov	r22,r9
1000888c:	00000506 	br	100088a4 <___vfiprintf_internal_r+0x5b0>
10008890:	21400084 	addi	r5,r4,2
10008894:	42000204 	addi	r8,r8,8
10008898:	1009883a 	mov	r4,r2
1000889c:	8c7ffc04 	addi	r17,r17,-16
100088a0:	e4400d0e 	bge	fp,r17,100088d8 <___vfiprintf_internal_r+0x5e4>
100088a4:	18c00404 	addi	r3,r3,16
100088a8:	20800044 	addi	r2,r4,1
100088ac:	44c00015 	stw	r19,0(r8)
100088b0:	47000115 	stw	fp,4(r8)
100088b4:	d8c11c15 	stw	r3,1136(sp)
100088b8:	d8811b15 	stw	r2,1132(sp)
100088bc:	60bff40e 	bge	r12,r2,10008890 <__alt_data_end+0xf8008890>
100088c0:	1801801e 	bne	r3,zero,10008ec4 <___vfiprintf_internal_r+0xbd0>
100088c4:	8c7ffc04 	addi	r17,r17,-16
100088c8:	0009883a 	mov	r4,zero
100088cc:	01400044 	movi	r5,1
100088d0:	d811883a 	mov	r8,sp
100088d4:	e47ff316 	blt	fp,r17,100088a4 <__alt_data_end+0xf80088a4>
100088d8:	b013883a 	mov	r9,r22
100088dc:	d9c12917 	ldw	r7,1188(sp)
100088e0:	882d883a 	mov	r22,r17
100088e4:	da812a17 	ldw	r10,1192(sp)
100088e8:	dc412617 	ldw	r17,1176(sp)
100088ec:	d8812517 	ldw	r2,1172(sp)
100088f0:	b0c7883a 	add	r3,r22,r3
100088f4:	45800115 	stw	r22,4(r8)
100088f8:	40800015 	stw	r2,0(r8)
100088fc:	d8c11c15 	stw	r3,1136(sp)
10008900:	d9411b15 	stw	r5,1132(sp)
10008904:	008001c4 	movi	r2,7
10008908:	11426a16 	blt	r2,r5,100092b4 <___vfiprintf_internal_r+0xfc0>
1000890c:	d9011d87 	ldb	r4,1142(sp)
10008910:	42000204 	addi	r8,r8,8
10008914:	28800044 	addi	r2,r5,1
10008918:	20017b1e 	bne	r4,zero,10008f08 <___vfiprintf_internal_r+0xc14>
1000891c:	50000c26 	beq	r10,zero,10008950 <___vfiprintf_internal_r+0x65c>
10008920:	d9011d04 	addi	r4,sp,1140
10008924:	18c00084 	addi	r3,r3,2
10008928:	41000015 	stw	r4,0(r8)
1000892c:	01000084 	movi	r4,2
10008930:	41000115 	stw	r4,4(r8)
10008934:	d8c11c15 	stw	r3,1136(sp)
10008938:	d8811b15 	stw	r2,1132(sp)
1000893c:	010001c4 	movi	r4,7
10008940:	20821716 	blt	r4,r2,100091a0 <___vfiprintf_internal_r+0xeac>
10008944:	100b883a 	mov	r5,r2
10008948:	42000204 	addi	r8,r8,8
1000894c:	10800044 	addi	r2,r2,1
10008950:	01002004 	movi	r4,128
10008954:	a901d126 	beq	r21,r4,1000909c <___vfiprintf_internal_r+0xda8>
10008958:	91e5c83a 	sub	r18,r18,r7
1000895c:	0480290e 	bge	zero,r18,10008a04 <___vfiprintf_internal_r+0x710>
10008960:	05800404 	movi	r22,16
10008964:	05440074 	movhi	r21,4097
10008968:	ad7fc504 	addi	r21,r21,-236
1000896c:	b4801c0e 	bge	r22,r18,100089e0 <___vfiprintf_internal_r+0x6ec>
10008970:	dc412515 	stw	r17,1172(sp)
10008974:	070001c4 	movi	fp,7
10008978:	9023883a 	mov	r17,r18
1000897c:	d9c12615 	stw	r7,1176(sp)
10008980:	4825883a 	mov	r18,r9
10008984:	00000506 	br	1000899c <___vfiprintf_internal_r+0x6a8>
10008988:	28800084 	addi	r2,r5,2
1000898c:	42000204 	addi	r8,r8,8
10008990:	200b883a 	mov	r5,r4
10008994:	8c7ffc04 	addi	r17,r17,-16
10008998:	b4400d0e 	bge	r22,r17,100089d0 <___vfiprintf_internal_r+0x6dc>
1000899c:	18c00404 	addi	r3,r3,16
100089a0:	29000044 	addi	r4,r5,1
100089a4:	44000015 	stw	r16,0(r8)
100089a8:	45800115 	stw	r22,4(r8)
100089ac:	d8c11c15 	stw	r3,1136(sp)
100089b0:	d9011b15 	stw	r4,1132(sp)
100089b4:	e13ff40e 	bge	fp,r4,10008988 <__alt_data_end+0xf8008988>
100089b8:	1801601e 	bne	r3,zero,10008f3c <___vfiprintf_internal_r+0xc48>
100089bc:	8c7ffc04 	addi	r17,r17,-16
100089c0:	000b883a 	mov	r5,zero
100089c4:	00800044 	movi	r2,1
100089c8:	d811883a 	mov	r8,sp
100089cc:	b47ff316 	blt	r22,r17,1000899c <__alt_data_end+0xf800899c>
100089d0:	9013883a 	mov	r9,r18
100089d4:	d9c12617 	ldw	r7,1176(sp)
100089d8:	8825883a 	mov	r18,r17
100089dc:	dc412517 	ldw	r17,1172(sp)
100089e0:	1c87883a 	add	r3,r3,r18
100089e4:	45400015 	stw	r21,0(r8)
100089e8:	44800115 	stw	r18,4(r8)
100089ec:	d8c11c15 	stw	r3,1136(sp)
100089f0:	d8811b15 	stw	r2,1132(sp)
100089f4:	010001c4 	movi	r4,7
100089f8:	20819e16 	blt	r4,r2,10009074 <___vfiprintf_internal_r+0xd80>
100089fc:	42000204 	addi	r8,r8,8
10008a00:	10800044 	addi	r2,r2,1
10008a04:	38c7883a 	add	r3,r7,r3
10008a08:	45c00015 	stw	r23,0(r8)
10008a0c:	41c00115 	stw	r7,4(r8)
10008a10:	d8c11c15 	stw	r3,1136(sp)
10008a14:	d8811b15 	stw	r2,1132(sp)
10008a18:	010001c4 	movi	r4,7
10008a1c:	20819d0e 	bge	r4,r2,10009094 <___vfiprintf_internal_r+0xda0>
10008a20:	1802291e 	bne	r3,zero,100092c8 <___vfiprintf_internal_r+0xfd4>
10008a24:	d8011b15 	stw	zero,1132(sp)
10008a28:	d811883a 	mov	r8,sp
10008a2c:	8c40010c 	andi	r17,r17,4
10008a30:	88017526 	beq	r17,zero,10009008 <___vfiprintf_internal_r+0xd14>
10008a34:	d9412117 	ldw	r5,1156(sp)
10008a38:	2d23c83a 	sub	r17,r5,r20
10008a3c:	0441720e 	bge	zero,r17,10009008 <___vfiprintf_internal_r+0xd14>
10008a40:	04800404 	movi	r18,16
10008a44:	9443170e 	bge	r18,r17,100096a4 <___vfiprintf_internal_r+0x13b0>
10008a48:	01440074 	movhi	r5,4097
10008a4c:	297fc904 	addi	r5,r5,-220
10008a50:	d9011b17 	ldw	r4,1132(sp)
10008a54:	d9412515 	stw	r5,1172(sp)
10008a58:	058001c4 	movi	r22,7
10008a5c:	dd412217 	ldw	r21,1160(sp)
10008a60:	ddc12017 	ldw	r23,1152(sp)
10008a64:	4839883a 	mov	fp,r9
10008a68:	00000506 	br	10008a80 <___vfiprintf_internal_r+0x78c>
10008a6c:	21400084 	addi	r5,r4,2
10008a70:	42000204 	addi	r8,r8,8
10008a74:	1009883a 	mov	r4,r2
10008a78:	8c7ffc04 	addi	r17,r17,-16
10008a7c:	94400d0e 	bge	r18,r17,10008ab4 <___vfiprintf_internal_r+0x7c0>
10008a80:	18c00404 	addi	r3,r3,16
10008a84:	20800044 	addi	r2,r4,1
10008a88:	44c00015 	stw	r19,0(r8)
10008a8c:	44800115 	stw	r18,4(r8)
10008a90:	d8c11c15 	stw	r3,1136(sp)
10008a94:	d8811b15 	stw	r2,1132(sp)
10008a98:	b0bff40e 	bge	r22,r2,10008a6c <__alt_data_end+0xf8008a6c>
10008a9c:	18016b1e 	bne	r3,zero,1000904c <___vfiprintf_internal_r+0xd58>
10008aa0:	8c7ffc04 	addi	r17,r17,-16
10008aa4:	0009883a 	mov	r4,zero
10008aa8:	01400044 	movi	r5,1
10008aac:	d811883a 	mov	r8,sp
10008ab0:	947ff316 	blt	r18,r17,10008a80 <__alt_data_end+0xf8008a80>
10008ab4:	e013883a 	mov	r9,fp
10008ab8:	d8812517 	ldw	r2,1172(sp)
10008abc:	1c47883a 	add	r3,r3,r17
10008ac0:	44400115 	stw	r17,4(r8)
10008ac4:	40800015 	stw	r2,0(r8)
10008ac8:	d8c11c15 	stw	r3,1136(sp)
10008acc:	d9411b15 	stw	r5,1132(sp)
10008ad0:	008001c4 	movi	r2,7
10008ad4:	11414c0e 	bge	r2,r5,10009008 <___vfiprintf_internal_r+0xd14>
10008ad8:	1801431e 	bne	r3,zero,10008fe8 <___vfiprintf_internal_r+0xcf4>
10008adc:	d8c12117 	ldw	r3,1156(sp)
10008ae0:	a0c28e16 	blt	r20,r3,1000951c <___vfiprintf_internal_r+0x1228>
10008ae4:	d9012417 	ldw	r4,1168(sp)
10008ae8:	2509883a 	add	r4,r4,r20
10008aec:	d9012415 	stw	r4,1168(sp)
10008af0:	00015306 	br	10009040 <___vfiprintf_internal_r+0xd4c>
10008af4:	8c400414 	ori	r17,r17,16
10008af8:	8880080c 	andi	r2,r17,32
10008afc:	b811883a 	mov	r8,r23
10008b00:	3025883a 	mov	r18,r6
10008b04:	10005f26 	beq	r2,zero,10008c84 <___vfiprintf_internal_r+0x990>
10008b08:	d8812317 	ldw	r2,1164(sp)
10008b0c:	d8c12317 	ldw	r3,1164(sp)
10008b10:	15000017 	ldw	r20,0(r2)
10008b14:	15400117 	ldw	r21,4(r2)
10008b18:	18c00204 	addi	r3,r3,8
10008b1c:	0005883a 	mov	r2,zero
10008b20:	d8c12315 	stw	r3,1164(sp)
10008b24:	a548b03a 	or	r4,r20,r21
10008b28:	d8011d85 	stb	zero,1142(sp)
10008b2c:	900f883a 	mov	r7,r18
10008b30:	002d883a 	mov	r22,zero
10008b34:	003f2b06 	br	100087e4 <__alt_data_end+0xf80087e4>
10008b38:	8c400414 	ori	r17,r17,16
10008b3c:	8880080c 	andi	r2,r17,32
10008b40:	b811883a 	mov	r8,r23
10008b44:	3025883a 	mov	r18,r6
10008b48:	1000a826 	beq	r2,zero,10008dec <___vfiprintf_internal_r+0xaf8>
10008b4c:	d8812317 	ldw	r2,1164(sp)
10008b50:	d8c12317 	ldw	r3,1164(sp)
10008b54:	15000017 	ldw	r20,0(r2)
10008b58:	15400117 	ldw	r21,4(r2)
10008b5c:	18c00204 	addi	r3,r3,8
10008b60:	00800044 	movi	r2,1
10008b64:	d8c12315 	stw	r3,1164(sp)
10008b68:	a548b03a 	or	r4,r20,r21
10008b6c:	003fee06 	br	10008b28 <__alt_data_end+0xf8008b28>
10008b70:	01440074 	movhi	r5,4097
10008b74:	297f5f04 	addi	r5,r5,-644
10008b78:	dd811d85 	stb	r22,1142(sp)
10008b7c:	d9412715 	stw	r5,1180(sp)
10008b80:	8880080c 	andi	r2,r17,32
10008b84:	b811883a 	mov	r8,r23
10008b88:	3025883a 	mov	r18,r6
10008b8c:	1000a926 	beq	r2,zero,10008e34 <___vfiprintf_internal_r+0xb40>
10008b90:	d9412317 	ldw	r5,1164(sp)
10008b94:	2d000017 	ldw	r20,0(r5)
10008b98:	2d400117 	ldw	r21,4(r5)
10008b9c:	29400204 	addi	r5,r5,8
10008ba0:	d9412315 	stw	r5,1164(sp)
10008ba4:	8880004c 	andi	r2,r17,1
10008ba8:	1001d126 	beq	r2,zero,100092f0 <___vfiprintf_internal_r+0xffc>
10008bac:	a548b03a 	or	r4,r20,r21
10008bb0:	20021626 	beq	r4,zero,1000940c <___vfiprintf_internal_r+0x1118>
10008bb4:	00800c04 	movi	r2,48
10008bb8:	d8811d05 	stb	r2,1140(sp)
10008bbc:	d8c11d45 	stb	r3,1141(sp)
10008bc0:	8c400094 	ori	r17,r17,2
10008bc4:	00800084 	movi	r2,2
10008bc8:	003fd706 	br	10008b28 <__alt_data_end+0xf8008b28>
10008bcc:	d9412317 	ldw	r5,1164(sp)
10008bd0:	05000044 	movi	r20,1
10008bd4:	b811883a 	mov	r8,r23
10008bd8:	28800017 	ldw	r2,0(r5)
10008bdc:	29400104 	addi	r5,r5,4
10008be0:	d8011d85 	stb	zero,1142(sp)
10008be4:	d8810005 	stb	r2,1024(sp)
10008be8:	d9412315 	stw	r5,1164(sp)
10008bec:	a00f883a 	mov	r7,r20
10008bf0:	ddc10004 	addi	r23,sp,1024
10008bf4:	0025883a 	mov	r18,zero
10008bf8:	003f0f06 	br	10008838 <__alt_data_end+0xf8008838>
10008bfc:	b0803fcc 	andi	r2,r22,255
10008c00:	1080201c 	xori	r2,r2,128
10008c04:	10bfe004 	addi	r2,r2,-128
10008c08:	10021f1e 	bne	r2,zero,10009488 <___vfiprintf_internal_r+0x1194>
10008c0c:	05800804 	movi	r22,32
10008c10:	48c00007 	ldb	r3,0(r9)
10008c14:	003e1706 	br	10008474 <__alt_data_end+0xf8008474>
10008c18:	8c400054 	ori	r17,r17,1
10008c1c:	48c00007 	ldb	r3,0(r9)
10008c20:	003e1406 	br	10008474 <__alt_data_end+0xf8008474>
10008c24:	48c00007 	ldb	r3,0(r9)
10008c28:	01001b04 	movi	r4,108
10008c2c:	4805883a 	mov	r2,r9
10008c30:	19026526 	beq	r3,r4,100095c8 <___vfiprintf_internal_r+0x12d4>
10008c34:	8c400414 	ori	r17,r17,16
10008c38:	003e0e06 	br	10008474 <__alt_data_end+0xf8008474>
10008c3c:	dd811d85 	stb	r22,1142(sp)
10008c40:	8880080c 	andi	r2,r17,32
10008c44:	b811883a 	mov	r8,r23
10008c48:	10020426 	beq	r2,zero,1000945c <___vfiprintf_internal_r+0x1168>
10008c4c:	d8c12317 	ldw	r3,1164(sp)
10008c50:	d9012417 	ldw	r4,1168(sp)
10008c54:	d9412317 	ldw	r5,1164(sp)
10008c58:	18800017 	ldw	r2,0(r3)
10008c5c:	2007d7fa 	srai	r3,r4,31
10008c60:	29400104 	addi	r5,r5,4
10008c64:	d9412315 	stw	r5,1164(sp)
10008c68:	11000015 	stw	r4,0(r2)
10008c6c:	10c00115 	stw	r3,4(r2)
10008c70:	003dd706 	br	100083d0 <__alt_data_end+0xf80083d0>
10008c74:	8880080c 	andi	r2,r17,32
10008c78:	b811883a 	mov	r8,r23
10008c7c:	3025883a 	mov	r18,r6
10008c80:	103fa11e 	bne	r2,zero,10008b08 <__alt_data_end+0xf8008b08>
10008c84:	8880040c 	andi	r2,r17,16
10008c88:	1001ea26 	beq	r2,zero,10009434 <___vfiprintf_internal_r+0x1140>
10008c8c:	d9012317 	ldw	r4,1164(sp)
10008c90:	002b883a 	mov	r21,zero
10008c94:	0005883a 	mov	r2,zero
10008c98:	25000017 	ldw	r20,0(r4)
10008c9c:	21000104 	addi	r4,r4,4
10008ca0:	d9012315 	stw	r4,1164(sp)
10008ca4:	a009883a 	mov	r4,r20
10008ca8:	003f9f06 	br	10008b28 <__alt_data_end+0xf8008b28>
10008cac:	d8812317 	ldw	r2,1164(sp)
10008cb0:	d8c12317 	ldw	r3,1164(sp)
10008cb4:	10800017 	ldw	r2,0(r2)
10008cb8:	d8812115 	stw	r2,1156(sp)
10008cbc:	d9012117 	ldw	r4,1156(sp)
10008cc0:	18800104 	addi	r2,r3,4
10008cc4:	203e9a16 	blt	r4,zero,10008730 <__alt_data_end+0xf8008730>
10008cc8:	d8812315 	stw	r2,1164(sp)
10008ccc:	48c00007 	ldb	r3,0(r9)
10008cd0:	003de806 	br	10008474 <__alt_data_end+0xf8008474>
10008cd4:	05800ac4 	movi	r22,43
10008cd8:	48c00007 	ldb	r3,0(r9)
10008cdc:	003de506 	br	10008474 <__alt_data_end+0xf8008474>
10008ce0:	48c00007 	ldb	r3,0(r9)
10008ce4:	01000a84 	movi	r4,42
10008ce8:	48800044 	addi	r2,r9,1
10008cec:	19028326 	beq	r3,r4,100096fc <___vfiprintf_internal_r+0x1408>
10008cf0:	1f3ff404 	addi	fp,r3,-48
10008cf4:	af027a36 	bltu	r21,fp,100096e0 <___vfiprintf_internal_r+0x13ec>
10008cf8:	1025883a 	mov	r18,r2
10008cfc:	0009883a 	mov	r4,zero
10008d00:	00000106 	br	10008d08 <___vfiprintf_internal_r+0xa14>
10008d04:	4825883a 	mov	r18,r9
10008d08:	01400284 	movi	r5,10
10008d0c:	000af1c0 	call	1000af1c <__mulsi3>
10008d10:	90c00007 	ldb	r3,0(r18)
10008d14:	e089883a 	add	r4,fp,r2
10008d18:	92400044 	addi	r9,r18,1
10008d1c:	1f3ff404 	addi	fp,r3,-48
10008d20:	af3ff82e 	bgeu	r21,fp,10008d04 <__alt_data_end+0xf8008d04>
10008d24:	2025883a 	mov	r18,r4
10008d28:	20022416 	blt	r4,zero,100095bc <___vfiprintf_internal_r+0x12c8>
10008d2c:	900d883a 	mov	r6,r18
10008d30:	003dd106 	br	10008478 <__alt_data_end+0xf8008478>
10008d34:	8c401014 	ori	r17,r17,64
10008d38:	48c00007 	ldb	r3,0(r9)
10008d3c:	003dcd06 	br	10008474 <__alt_data_end+0xf8008474>
10008d40:	dd811d85 	stb	r22,1142(sp)
10008d44:	8880080c 	andi	r2,r17,32
10008d48:	b811883a 	mov	r8,r23
10008d4c:	3025883a 	mov	r18,r6
10008d50:	103e991e 	bne	r2,zero,100087b8 <__alt_data_end+0xf80087b8>
10008d54:	8880040c 	andi	r2,r17,16
10008d58:	1001d726 	beq	r2,zero,100094b8 <___vfiprintf_internal_r+0x11c4>
10008d5c:	d9012317 	ldw	r4,1164(sp)
10008d60:	25000017 	ldw	r20,0(r4)
10008d64:	21000104 	addi	r4,r4,4
10008d68:	d9012315 	stw	r4,1164(sp)
10008d6c:	a02bd7fa 	srai	r21,r20,31
10008d70:	a805883a 	mov	r2,r21
10008d74:	003e9606 	br	100087d0 <__alt_data_end+0xf80087d0>
10008d78:	8c400814 	ori	r17,r17,32
10008d7c:	48c00007 	ldb	r3,0(r9)
10008d80:	003dbc06 	br	10008474 <__alt_data_end+0xf8008474>
10008d84:	d9412317 	ldw	r5,1164(sp)
10008d88:	b811883a 	mov	r8,r23
10008d8c:	d8011d85 	stb	zero,1142(sp)
10008d90:	2dc00017 	ldw	r23,0(r5)
10008d94:	3025883a 	mov	r18,r6
10008d98:	2d400104 	addi	r21,r5,4
10008d9c:	b8022f26 	beq	r23,zero,1000965c <___vfiprintf_internal_r+0x1368>
10008da0:	b809883a 	mov	r4,r23
10008da4:	30020f16 	blt	r6,zero,100095e4 <___vfiprintf_internal_r+0x12f0>
10008da8:	000b883a 	mov	r5,zero
10008dac:	da012b15 	stw	r8,1196(sp)
10008db0:	da412d15 	stw	r9,1204(sp)
10008db4:	00065640 	call	10006564 <memchr>
10008db8:	da012b17 	ldw	r8,1196(sp)
10008dbc:	da412d17 	ldw	r9,1204(sp)
10008dc0:	10024226 	beq	r2,zero,100096cc <___vfiprintf_internal_r+0x13d8>
10008dc4:	15cfc83a 	sub	r7,r2,r23
10008dc8:	91c1d616 	blt	r18,r7,10009524 <___vfiprintf_internal_r+0x1230>
10008dcc:	dd811d83 	ldbu	r22,1142(sp)
10008dd0:	dd412315 	stw	r21,1164(sp)
10008dd4:	0025883a 	mov	r18,zero
10008dd8:	003e8f06 	br	10008818 <__alt_data_end+0xf8008818>
10008ddc:	8880080c 	andi	r2,r17,32
10008de0:	b811883a 	mov	r8,r23
10008de4:	3025883a 	mov	r18,r6
10008de8:	103f581e 	bne	r2,zero,10008b4c <__alt_data_end+0xf8008b4c>
10008dec:	8880040c 	andi	r2,r17,16
10008df0:	1001a726 	beq	r2,zero,10009490 <___vfiprintf_internal_r+0x119c>
10008df4:	d9012317 	ldw	r4,1164(sp)
10008df8:	002b883a 	mov	r21,zero
10008dfc:	00800044 	movi	r2,1
10008e00:	25000017 	ldw	r20,0(r4)
10008e04:	21000104 	addi	r4,r4,4
10008e08:	d9012315 	stw	r4,1164(sp)
10008e0c:	a009883a 	mov	r4,r20
10008e10:	003f4506 	br	10008b28 <__alt_data_end+0xf8008b28>
10008e14:	01040074 	movhi	r4,4097
10008e18:	213f6404 	addi	r4,r4,-624
10008e1c:	dd811d85 	stb	r22,1142(sp)
10008e20:	d9012715 	stw	r4,1180(sp)
10008e24:	8880080c 	andi	r2,r17,32
10008e28:	b811883a 	mov	r8,r23
10008e2c:	3025883a 	mov	r18,r6
10008e30:	103f571e 	bne	r2,zero,10008b90 <__alt_data_end+0xf8008b90>
10008e34:	8880040c 	andi	r2,r17,16
10008e38:	10017626 	beq	r2,zero,10009414 <___vfiprintf_internal_r+0x1120>
10008e3c:	d8812317 	ldw	r2,1164(sp)
10008e40:	002b883a 	mov	r21,zero
10008e44:	15000017 	ldw	r20,0(r2)
10008e48:	10800104 	addi	r2,r2,4
10008e4c:	d8812315 	stw	r2,1164(sp)
10008e50:	003f5406 	br	10008ba4 <__alt_data_end+0xf8008ba4>
10008e54:	d8c12317 	ldw	r3,1164(sp)
10008e58:	00800c04 	movi	r2,48
10008e5c:	01040074 	movhi	r4,4097
10008e60:	213f6404 	addi	r4,r4,-624
10008e64:	1d000017 	ldw	r20,0(r3)
10008e68:	d8811d05 	stb	r2,1140(sp)
10008e6c:	18c00104 	addi	r3,r3,4
10008e70:	00801e04 	movi	r2,120
10008e74:	d8811d45 	stb	r2,1141(sp)
10008e78:	d9012715 	stw	r4,1180(sp)
10008e7c:	b811883a 	mov	r8,r23
10008e80:	3025883a 	mov	r18,r6
10008e84:	002b883a 	mov	r21,zero
10008e88:	8c400094 	ori	r17,r17,2
10008e8c:	d8c12315 	stw	r3,1164(sp)
10008e90:	00800084 	movi	r2,2
10008e94:	a009883a 	mov	r4,r20
10008e98:	003f2306 	br	10008b28 <__alt_data_end+0xf8008b28>
10008e9c:	dd811d85 	stb	r22,1142(sp)
10008ea0:	b811883a 	mov	r8,r23
10008ea4:	18004426 	beq	r3,zero,10008fb8 <___vfiprintf_internal_r+0xcc4>
10008ea8:	05000044 	movi	r20,1
10008eac:	d8c10005 	stb	r3,1024(sp)
10008eb0:	d8011d85 	stb	zero,1142(sp)
10008eb4:	a00f883a 	mov	r7,r20
10008eb8:	ddc10004 	addi	r23,sp,1024
10008ebc:	0025883a 	mov	r18,zero
10008ec0:	003e5d06 	br	10008838 <__alt_data_end+0xf8008838>
10008ec4:	d9012217 	ldw	r4,1160(sp)
10008ec8:	d9412017 	ldw	r5,1152(sp)
10008ecc:	d9811a04 	addi	r6,sp,1128
10008ed0:	db012b15 	stw	r12,1196(sp)
10008ed4:	00081e00 	call	100081e0 <__sprint_r.part.0>
10008ed8:	db012b17 	ldw	r12,1196(sp)
10008edc:	10003c1e 	bne	r2,zero,10008fd0 <___vfiprintf_internal_r+0xcdc>
10008ee0:	d9011b17 	ldw	r4,1132(sp)
10008ee4:	d8c11c17 	ldw	r3,1136(sp)
10008ee8:	d811883a 	mov	r8,sp
10008eec:	21400044 	addi	r5,r4,1
10008ef0:	003e6a06 	br	1000889c <__alt_data_end+0xf800889c>
10008ef4:	d9411b17 	ldw	r5,1132(sp)
10008ef8:	d8c11c17 	ldw	r3,1136(sp)
10008efc:	28800044 	addi	r2,r5,1
10008f00:	d9011d87 	ldb	r4,1142(sp)
10008f04:	203e8526 	beq	r4,zero,1000891c <__alt_data_end+0xf800891c>
10008f08:	01000044 	movi	r4,1
10008f0c:	d9411d84 	addi	r5,sp,1142
10008f10:	1907883a 	add	r3,r3,r4
10008f14:	41400015 	stw	r5,0(r8)
10008f18:	41000115 	stw	r4,4(r8)
10008f1c:	d8c11c15 	stw	r3,1136(sp)
10008f20:	d8811b15 	stw	r2,1132(sp)
10008f24:	014001c4 	movi	r5,7
10008f28:	28809816 	blt	r5,r2,1000918c <___vfiprintf_internal_r+0xe98>
10008f2c:	100b883a 	mov	r5,r2
10008f30:	42000204 	addi	r8,r8,8
10008f34:	1105883a 	add	r2,r2,r4
10008f38:	003e7806 	br	1000891c <__alt_data_end+0xf800891c>
10008f3c:	d9012217 	ldw	r4,1160(sp)
10008f40:	d9412017 	ldw	r5,1152(sp)
10008f44:	d9811a04 	addi	r6,sp,1128
10008f48:	00081e00 	call	100081e0 <__sprint_r.part.0>
10008f4c:	1000201e 	bne	r2,zero,10008fd0 <___vfiprintf_internal_r+0xcdc>
10008f50:	d9411b17 	ldw	r5,1132(sp)
10008f54:	d8c11c17 	ldw	r3,1136(sp)
10008f58:	d811883a 	mov	r8,sp
10008f5c:	28800044 	addi	r2,r5,1
10008f60:	003e8c06 	br	10008994 <__alt_data_end+0xf8008994>
10008f64:	00c00044 	movi	r3,1
10008f68:	10c0ab26 	beq	r2,r3,10009218 <___vfiprintf_internal_r+0xf24>
10008f6c:	00c00084 	movi	r3,2
10008f70:	10c0901e 	bne	r2,r3,100091b4 <___vfiprintf_internal_r+0xec0>
10008f74:	d9412717 	ldw	r5,1180(sp)
10008f78:	d88109c4 	addi	r2,sp,1063
10008f7c:	a0c003cc 	andi	r3,r20,15
10008f80:	a808973a 	slli	r4,r21,28
10008f84:	28c7883a 	add	r3,r5,r3
10008f88:	a028d13a 	srli	r20,r20,4
10008f8c:	18c00003 	ldbu	r3,0(r3)
10008f90:	a82ad13a 	srli	r21,r21,4
10008f94:	2528b03a 	or	r20,r4,r20
10008f98:	10c00005 	stb	r3,0(r2)
10008f9c:	a546b03a 	or	r3,r20,r21
10008fa0:	102f883a 	mov	r23,r2
10008fa4:	10bfffc4 	addi	r2,r2,-1
10008fa8:	183ff41e 	bne	r3,zero,10008f7c <__alt_data_end+0xf8008f7c>
10008fac:	d8811f17 	ldw	r2,1148(sp)
10008fb0:	15cfc83a 	sub	r7,r2,r23
10008fb4:	003e1806 	br	10008818 <__alt_data_end+0xf8008818>
10008fb8:	d8811c17 	ldw	r2,1136(sp)
10008fbc:	10000426 	beq	r2,zero,10008fd0 <___vfiprintf_internal_r+0xcdc>
10008fc0:	d9012217 	ldw	r4,1160(sp)
10008fc4:	d9412017 	ldw	r5,1152(sp)
10008fc8:	d9811a04 	addi	r6,sp,1128
10008fcc:	00081e00 	call	100081e0 <__sprint_r.part.0>
10008fd0:	d8c12017 	ldw	r3,1152(sp)
10008fd4:	1880030b 	ldhu	r2,12(r3)
10008fd8:	1080100c 	andi	r2,r2,64
10008fdc:	103dc31e 	bne	r2,zero,100086ec <__alt_data_end+0xf80086ec>
10008fe0:	d8812417 	ldw	r2,1168(sp)
10008fe4:	003dc206 	br	100086f0 <__alt_data_end+0xf80086f0>
10008fe8:	d9012217 	ldw	r4,1160(sp)
10008fec:	d9412017 	ldw	r5,1152(sp)
10008ff0:	d9811a04 	addi	r6,sp,1128
10008ff4:	da412d15 	stw	r9,1204(sp)
10008ff8:	00081e00 	call	100081e0 <__sprint_r.part.0>
10008ffc:	da412d17 	ldw	r9,1204(sp)
10009000:	103ff31e 	bne	r2,zero,10008fd0 <__alt_data_end+0xf8008fd0>
10009004:	d8c11c17 	ldw	r3,1136(sp)
10009008:	d9412117 	ldw	r5,1156(sp)
1000900c:	a140010e 	bge	r20,r5,10009014 <___vfiprintf_internal_r+0xd20>
10009010:	2829883a 	mov	r20,r5
10009014:	d8812417 	ldw	r2,1168(sp)
10009018:	1505883a 	add	r2,r2,r20
1000901c:	d8812415 	stw	r2,1168(sp)
10009020:	18000726 	beq	r3,zero,10009040 <___vfiprintf_internal_r+0xd4c>
10009024:	d9012217 	ldw	r4,1160(sp)
10009028:	d9412017 	ldw	r5,1152(sp)
1000902c:	d9811a04 	addi	r6,sp,1128
10009030:	da412d15 	stw	r9,1204(sp)
10009034:	00081e00 	call	100081e0 <__sprint_r.part.0>
10009038:	da412d17 	ldw	r9,1204(sp)
1000903c:	103fe41e 	bne	r2,zero,10008fd0 <__alt_data_end+0xf8008fd0>
10009040:	d8011b15 	stw	zero,1132(sp)
10009044:	d811883a 	mov	r8,sp
10009048:	003ce106 	br	100083d0 <__alt_data_end+0xf80083d0>
1000904c:	a809883a 	mov	r4,r21
10009050:	b80b883a 	mov	r5,r23
10009054:	d9811a04 	addi	r6,sp,1128
10009058:	00081e00 	call	100081e0 <__sprint_r.part.0>
1000905c:	103fdc1e 	bne	r2,zero,10008fd0 <__alt_data_end+0xf8008fd0>
10009060:	d9011b17 	ldw	r4,1132(sp)
10009064:	d8c11c17 	ldw	r3,1136(sp)
10009068:	d811883a 	mov	r8,sp
1000906c:	21400044 	addi	r5,r4,1
10009070:	003e8106 	br	10008a78 <__alt_data_end+0xf8008a78>
10009074:	1800cb1e 	bne	r3,zero,100093a4 <___vfiprintf_internal_r+0x10b0>
10009078:	00800044 	movi	r2,1
1000907c:	ddc00015 	stw	r23,0(sp)
10009080:	d9c00115 	stw	r7,4(sp)
10009084:	d9c11c15 	stw	r7,1136(sp)
10009088:	d8811b15 	stw	r2,1132(sp)
1000908c:	3807883a 	mov	r3,r7
10009090:	d811883a 	mov	r8,sp
10009094:	42000204 	addi	r8,r8,8
10009098:	003e6406 	br	10008a2c <__alt_data_end+0xf8008a2c>
1000909c:	d9012117 	ldw	r4,1156(sp)
100090a0:	252dc83a 	sub	r22,r4,r20
100090a4:	05be2c0e 	bge	zero,r22,10008958 <__alt_data_end+0xf8008958>
100090a8:	07000404 	movi	fp,16
100090ac:	e581830e 	bge	fp,r22,100096bc <___vfiprintf_internal_r+0x13c8>
100090b0:	05440074 	movhi	r21,4097
100090b4:	ad7fc504 	addi	r21,r21,-236
100090b8:	dc412515 	stw	r17,1172(sp)
100090bc:	028001c4 	movi	r10,7
100090c0:	b023883a 	mov	r17,r22
100090c4:	d9c12615 	stw	r7,1176(sp)
100090c8:	a82d883a 	mov	r22,r21
100090cc:	482b883a 	mov	r21,r9
100090d0:	00000506 	br	100090e8 <___vfiprintf_internal_r+0xdf4>
100090d4:	29000084 	addi	r4,r5,2
100090d8:	42000204 	addi	r8,r8,8
100090dc:	100b883a 	mov	r5,r2
100090e0:	8c7ffc04 	addi	r17,r17,-16
100090e4:	e4400d0e 	bge	fp,r17,1000911c <___vfiprintf_internal_r+0xe28>
100090e8:	18c00404 	addi	r3,r3,16
100090ec:	28800044 	addi	r2,r5,1
100090f0:	44000015 	stw	r16,0(r8)
100090f4:	47000115 	stw	fp,4(r8)
100090f8:	d8c11c15 	stw	r3,1136(sp)
100090fc:	d8811b15 	stw	r2,1132(sp)
10009100:	50bff40e 	bge	r10,r2,100090d4 <__alt_data_end+0xf80090d4>
10009104:	1800151e 	bne	r3,zero,1000915c <___vfiprintf_internal_r+0xe68>
10009108:	8c7ffc04 	addi	r17,r17,-16
1000910c:	000b883a 	mov	r5,zero
10009110:	01000044 	movi	r4,1
10009114:	d811883a 	mov	r8,sp
10009118:	e47ff316 	blt	fp,r17,100090e8 <__alt_data_end+0xf80090e8>
1000911c:	a813883a 	mov	r9,r21
10009120:	d9c12617 	ldw	r7,1176(sp)
10009124:	b02b883a 	mov	r21,r22
10009128:	882d883a 	mov	r22,r17
1000912c:	dc412517 	ldw	r17,1172(sp)
10009130:	1d87883a 	add	r3,r3,r22
10009134:	45400015 	stw	r21,0(r8)
10009138:	45800115 	stw	r22,4(r8)
1000913c:	d8c11c15 	stw	r3,1136(sp)
10009140:	d9011b15 	stw	r4,1132(sp)
10009144:	008001c4 	movi	r2,7
10009148:	11009116 	blt	r2,r4,10009390 <___vfiprintf_internal_r+0x109c>
1000914c:	42000204 	addi	r8,r8,8
10009150:	20800044 	addi	r2,r4,1
10009154:	200b883a 	mov	r5,r4
10009158:	003dff06 	br	10008958 <__alt_data_end+0xf8008958>
1000915c:	d9012217 	ldw	r4,1160(sp)
10009160:	d9412017 	ldw	r5,1152(sp)
10009164:	d9811a04 	addi	r6,sp,1128
10009168:	da812c15 	stw	r10,1200(sp)
1000916c:	00081e00 	call	100081e0 <__sprint_r.part.0>
10009170:	da812c17 	ldw	r10,1200(sp)
10009174:	103f961e 	bne	r2,zero,10008fd0 <__alt_data_end+0xf8008fd0>
10009178:	d9411b17 	ldw	r5,1132(sp)
1000917c:	d8c11c17 	ldw	r3,1136(sp)
10009180:	d811883a 	mov	r8,sp
10009184:	29000044 	addi	r4,r5,1
10009188:	003fd506 	br	100090e0 <__alt_data_end+0xf80090e0>
1000918c:	1800701e 	bne	r3,zero,10009350 <___vfiprintf_internal_r+0x105c>
10009190:	000b883a 	mov	r5,zero
10009194:	2005883a 	mov	r2,r4
10009198:	d811883a 	mov	r8,sp
1000919c:	003ddf06 	br	1000891c <__alt_data_end+0xf800891c>
100091a0:	18005d1e 	bne	r3,zero,10009318 <___vfiprintf_internal_r+0x1024>
100091a4:	000b883a 	mov	r5,zero
100091a8:	00800044 	movi	r2,1
100091ac:	d811883a 	mov	r8,sp
100091b0:	003de706 	br	10008950 <__alt_data_end+0xf8008950>
100091b4:	d8c109c4 	addi	r3,sp,1063
100091b8:	a008d0fa 	srli	r4,r20,3
100091bc:	a80a977a 	slli	r5,r21,29
100091c0:	a82ad0fa 	srli	r21,r21,3
100091c4:	a50001cc 	andi	r20,r20,7
100091c8:	a0800c04 	addi	r2,r20,48
100091cc:	2928b03a 	or	r20,r5,r4
100091d0:	18800005 	stb	r2,0(r3)
100091d4:	a548b03a 	or	r4,r20,r21
100091d8:	182f883a 	mov	r23,r3
100091dc:	18ffffc4 	addi	r3,r3,-1
100091e0:	203ff51e 	bne	r4,zero,100091b8 <__alt_data_end+0xf80091b8>
100091e4:	8900004c 	andi	r4,r17,1
100091e8:	b80b883a 	mov	r5,r23
100091ec:	203f6f26 	beq	r4,zero,10008fac <__alt_data_end+0xf8008fac>
100091f0:	10803fcc 	andi	r2,r2,255
100091f4:	1080201c 	xori	r2,r2,128
100091f8:	10bfe004 	addi	r2,r2,-128
100091fc:	01000c04 	movi	r4,48
10009200:	1100f526 	beq	r2,r4,100095d8 <___vfiprintf_internal_r+0x12e4>
10009204:	293fffc5 	stb	r4,-1(r5)
10009208:	d9011f17 	ldw	r4,1148(sp)
1000920c:	182f883a 	mov	r23,r3
10009210:	20cfc83a 	sub	r7,r4,r3
10009214:	003d8006 	br	10008818 <__alt_data_end+0xf8008818>
10009218:	a800021e 	bne	r21,zero,10009224 <___vfiprintf_internal_r+0xf30>
1000921c:	00800244 	movi	r2,9
10009220:	15001d2e 	bgeu	r2,r20,10009298 <___vfiprintf_internal_r+0xfa4>
10009224:	dc412515 	stw	r17,1172(sp)
10009228:	d88109c4 	addi	r2,sp,1063
1000922c:	a823883a 	mov	r17,r21
10009230:	4039883a 	mov	fp,r8
10009234:	482b883a 	mov	r21,r9
10009238:	a009883a 	mov	r4,r20
1000923c:	880b883a 	mov	r5,r17
10009240:	01800284 	movi	r6,10
10009244:	000f883a 	mov	r7,zero
10009248:	102f883a 	mov	r23,r2
1000924c:	000a7d40 	call	1000a7d4 <__umoddi3>
10009250:	10800c04 	addi	r2,r2,48
10009254:	a009883a 	mov	r4,r20
10009258:	880b883a 	mov	r5,r17
1000925c:	b8800005 	stb	r2,0(r23)
10009260:	01800284 	movi	r6,10
10009264:	000f883a 	mov	r7,zero
10009268:	000a1800 	call	1000a180 <__udivdi3>
1000926c:	1823883a 	mov	r17,r3
10009270:	10c6b03a 	or	r3,r2,r3
10009274:	1029883a 	mov	r20,r2
10009278:	b8bfffc4 	addi	r2,r23,-1
1000927c:	183fee1e 	bne	r3,zero,10009238 <__alt_data_end+0xf8009238>
10009280:	d9411f17 	ldw	r5,1148(sp)
10009284:	e011883a 	mov	r8,fp
10009288:	dc412517 	ldw	r17,1172(sp)
1000928c:	a813883a 	mov	r9,r21
10009290:	2dcfc83a 	sub	r7,r5,r23
10009294:	003d6006 	br	10008818 <__alt_data_end+0xf8008818>
10009298:	a5000c04 	addi	r20,r20,48
1000929c:	dd0109c5 	stb	r20,1063(sp)
100092a0:	d9c12817 	ldw	r7,1184(sp)
100092a4:	ddc109c4 	addi	r23,sp,1063
100092a8:	003d5b06 	br	10008818 <__alt_data_end+0xf8008818>
100092ac:	ddc10a04 	addi	r23,sp,1064
100092b0:	003d5906 	br	10008818 <__alt_data_end+0xf8008818>
100092b4:	1800891e 	bne	r3,zero,100094dc <___vfiprintf_internal_r+0x11e8>
100092b8:	000b883a 	mov	r5,zero
100092bc:	00800044 	movi	r2,1
100092c0:	d811883a 	mov	r8,sp
100092c4:	003f0e06 	br	10008f00 <__alt_data_end+0xf8008f00>
100092c8:	d9012217 	ldw	r4,1160(sp)
100092cc:	d9412017 	ldw	r5,1152(sp)
100092d0:	d9811a04 	addi	r6,sp,1128
100092d4:	da412d15 	stw	r9,1204(sp)
100092d8:	00081e00 	call	100081e0 <__sprint_r.part.0>
100092dc:	da412d17 	ldw	r9,1204(sp)
100092e0:	103f3b1e 	bne	r2,zero,10008fd0 <__alt_data_end+0xf8008fd0>
100092e4:	d8c11c17 	ldw	r3,1136(sp)
100092e8:	d811883a 	mov	r8,sp
100092ec:	003dcf06 	br	10008a2c <__alt_data_end+0xf8008a2c>
100092f0:	00800084 	movi	r2,2
100092f4:	a548b03a 	or	r4,r20,r21
100092f8:	003e0b06 	br	10008b28 <__alt_data_end+0xf8008b28>
100092fc:	d9012217 	ldw	r4,1160(sp)
10009300:	d9412017 	ldw	r5,1152(sp)
10009304:	d9811a04 	addi	r6,sp,1128
10009308:	00081e00 	call	100081e0 <__sprint_r.part.0>
1000930c:	103f301e 	bne	r2,zero,10008fd0 <__alt_data_end+0xf8008fd0>
10009310:	d811883a 	mov	r8,sp
10009314:	003cbb06 	br	10008604 <__alt_data_end+0xf8008604>
10009318:	d9012217 	ldw	r4,1160(sp)
1000931c:	d9412017 	ldw	r5,1152(sp)
10009320:	d9811a04 	addi	r6,sp,1128
10009324:	d9c12b15 	stw	r7,1196(sp)
10009328:	da412d15 	stw	r9,1204(sp)
1000932c:	00081e00 	call	100081e0 <__sprint_r.part.0>
10009330:	d9c12b17 	ldw	r7,1196(sp)
10009334:	da412d17 	ldw	r9,1204(sp)
10009338:	103f251e 	bne	r2,zero,10008fd0 <__alt_data_end+0xf8008fd0>
1000933c:	d9411b17 	ldw	r5,1132(sp)
10009340:	d8c11c17 	ldw	r3,1136(sp)
10009344:	d811883a 	mov	r8,sp
10009348:	28800044 	addi	r2,r5,1
1000934c:	003d8006 	br	10008950 <__alt_data_end+0xf8008950>
10009350:	d9012217 	ldw	r4,1160(sp)
10009354:	d9412017 	ldw	r5,1152(sp)
10009358:	d9811a04 	addi	r6,sp,1128
1000935c:	d9c12b15 	stw	r7,1196(sp)
10009360:	da412d15 	stw	r9,1204(sp)
10009364:	da812c15 	stw	r10,1200(sp)
10009368:	00081e00 	call	100081e0 <__sprint_r.part.0>
1000936c:	d9c12b17 	ldw	r7,1196(sp)
10009370:	da412d17 	ldw	r9,1204(sp)
10009374:	da812c17 	ldw	r10,1200(sp)
10009378:	103f151e 	bne	r2,zero,10008fd0 <__alt_data_end+0xf8008fd0>
1000937c:	d9411b17 	ldw	r5,1132(sp)
10009380:	d8c11c17 	ldw	r3,1136(sp)
10009384:	d811883a 	mov	r8,sp
10009388:	28800044 	addi	r2,r5,1
1000938c:	003d6306 	br	1000891c <__alt_data_end+0xf800891c>
10009390:	18009e1e 	bne	r3,zero,1000960c <___vfiprintf_internal_r+0x1318>
10009394:	000b883a 	mov	r5,zero
10009398:	00800044 	movi	r2,1
1000939c:	d811883a 	mov	r8,sp
100093a0:	003d6d06 	br	10008958 <__alt_data_end+0xf8008958>
100093a4:	d9012217 	ldw	r4,1160(sp)
100093a8:	d9412017 	ldw	r5,1152(sp)
100093ac:	d9811a04 	addi	r6,sp,1128
100093b0:	d9c12b15 	stw	r7,1196(sp)
100093b4:	da412d15 	stw	r9,1204(sp)
100093b8:	00081e00 	call	100081e0 <__sprint_r.part.0>
100093bc:	d9c12b17 	ldw	r7,1196(sp)
100093c0:	da412d17 	ldw	r9,1204(sp)
100093c4:	103f021e 	bne	r2,zero,10008fd0 <__alt_data_end+0xf8008fd0>
100093c8:	d8811b17 	ldw	r2,1132(sp)
100093cc:	d8c11c17 	ldw	r3,1136(sp)
100093d0:	d811883a 	mov	r8,sp
100093d4:	10800044 	addi	r2,r2,1
100093d8:	003d8a06 	br	10008a04 <__alt_data_end+0xf8008a04>
100093dc:	4829883a 	mov	r20,r9
100093e0:	003c1706 	br	10008440 <__alt_data_end+0xf8008440>
100093e4:	0529c83a 	sub	r20,zero,r20
100093e8:	a004c03a 	cmpne	r2,r20,zero
100093ec:	056bc83a 	sub	r21,zero,r21
100093f0:	a8abc83a 	sub	r21,r21,r2
100093f4:	05800b44 	movi	r22,45
100093f8:	dd811d85 	stb	r22,1142(sp)
100093fc:	900f883a 	mov	r7,r18
10009400:	00800044 	movi	r2,1
10009404:	a548b03a 	or	r4,r20,r21
10009408:	003cf606 	br	100087e4 <__alt_data_end+0xf80087e4>
1000940c:	00800084 	movi	r2,2
10009410:	003dc506 	br	10008b28 <__alt_data_end+0xf8008b28>
10009414:	8880100c 	andi	r2,r17,64
10009418:	10005a26 	beq	r2,zero,10009584 <___vfiprintf_internal_r+0x1290>
1000941c:	d9012317 	ldw	r4,1164(sp)
10009420:	002b883a 	mov	r21,zero
10009424:	2500000b 	ldhu	r20,0(r4)
10009428:	21000104 	addi	r4,r4,4
1000942c:	d9012315 	stw	r4,1164(sp)
10009430:	003ddc06 	br	10008ba4 <__alt_data_end+0xf8008ba4>
10009434:	8880100c 	andi	r2,r17,64
10009438:	10005826 	beq	r2,zero,1000959c <___vfiprintf_internal_r+0x12a8>
1000943c:	d9412317 	ldw	r5,1164(sp)
10009440:	002b883a 	mov	r21,zero
10009444:	0005883a 	mov	r2,zero
10009448:	2d00000b 	ldhu	r20,0(r5)
1000944c:	29400104 	addi	r5,r5,4
10009450:	d9412315 	stw	r5,1164(sp)
10009454:	a009883a 	mov	r4,r20
10009458:	003db306 	br	10008b28 <__alt_data_end+0xf8008b28>
1000945c:	8880040c 	andi	r2,r17,16
10009460:	1000411e 	bne	r2,zero,10009568 <___vfiprintf_internal_r+0x1274>
10009464:	8c40100c 	andi	r17,r17,64
10009468:	88008726 	beq	r17,zero,10009688 <___vfiprintf_internal_r+0x1394>
1000946c:	d9412317 	ldw	r5,1164(sp)
10009470:	d8c12417 	ldw	r3,1168(sp)
10009474:	28800017 	ldw	r2,0(r5)
10009478:	29400104 	addi	r5,r5,4
1000947c:	d9412315 	stw	r5,1164(sp)
10009480:	10c0000d 	sth	r3,0(r2)
10009484:	003bd206 	br	100083d0 <__alt_data_end+0xf80083d0>
10009488:	48c00007 	ldb	r3,0(r9)
1000948c:	003bf906 	br	10008474 <__alt_data_end+0xf8008474>
10009490:	8880100c 	andi	r2,r17,64
10009494:	10002c26 	beq	r2,zero,10009548 <___vfiprintf_internal_r+0x1254>
10009498:	d9412317 	ldw	r5,1164(sp)
1000949c:	002b883a 	mov	r21,zero
100094a0:	00800044 	movi	r2,1
100094a4:	2d00000b 	ldhu	r20,0(r5)
100094a8:	29400104 	addi	r5,r5,4
100094ac:	d9412315 	stw	r5,1164(sp)
100094b0:	a009883a 	mov	r4,r20
100094b4:	003d9c06 	br	10008b28 <__alt_data_end+0xf8008b28>
100094b8:	8880100c 	andi	r2,r17,64
100094bc:	10001b26 	beq	r2,zero,1000952c <___vfiprintf_internal_r+0x1238>
100094c0:	d9412317 	ldw	r5,1164(sp)
100094c4:	2d00000f 	ldh	r20,0(r5)
100094c8:	29400104 	addi	r5,r5,4
100094cc:	d9412315 	stw	r5,1164(sp)
100094d0:	a02bd7fa 	srai	r21,r20,31
100094d4:	a805883a 	mov	r2,r21
100094d8:	003cbd06 	br	100087d0 <__alt_data_end+0xf80087d0>
100094dc:	d9012217 	ldw	r4,1160(sp)
100094e0:	d9412017 	ldw	r5,1152(sp)
100094e4:	d9811a04 	addi	r6,sp,1128
100094e8:	d9c12b15 	stw	r7,1196(sp)
100094ec:	da412d15 	stw	r9,1204(sp)
100094f0:	da812c15 	stw	r10,1200(sp)
100094f4:	00081e00 	call	100081e0 <__sprint_r.part.0>
100094f8:	d9c12b17 	ldw	r7,1196(sp)
100094fc:	da412d17 	ldw	r9,1204(sp)
10009500:	da812c17 	ldw	r10,1200(sp)
10009504:	103eb21e 	bne	r2,zero,10008fd0 <__alt_data_end+0xf8008fd0>
10009508:	d9411b17 	ldw	r5,1132(sp)
1000950c:	d8c11c17 	ldw	r3,1136(sp)
10009510:	d811883a 	mov	r8,sp
10009514:	28800044 	addi	r2,r5,1
10009518:	003e7906 	br	10008f00 <__alt_data_end+0xf8008f00>
1000951c:	1829883a 	mov	r20,r3
10009520:	003d7006 	br	10008ae4 <__alt_data_end+0xf8008ae4>
10009524:	900f883a 	mov	r7,r18
10009528:	003e2806 	br	10008dcc <__alt_data_end+0xf8008dcc>
1000952c:	d8812317 	ldw	r2,1164(sp)
10009530:	15000017 	ldw	r20,0(r2)
10009534:	10800104 	addi	r2,r2,4
10009538:	d8812315 	stw	r2,1164(sp)
1000953c:	a02bd7fa 	srai	r21,r20,31
10009540:	a805883a 	mov	r2,r21
10009544:	003ca206 	br	100087d0 <__alt_data_end+0xf80087d0>
10009548:	d8812317 	ldw	r2,1164(sp)
1000954c:	002b883a 	mov	r21,zero
10009550:	15000017 	ldw	r20,0(r2)
10009554:	10800104 	addi	r2,r2,4
10009558:	d8812315 	stw	r2,1164(sp)
1000955c:	a009883a 	mov	r4,r20
10009560:	00800044 	movi	r2,1
10009564:	003d7006 	br	10008b28 <__alt_data_end+0xf8008b28>
10009568:	d8c12317 	ldw	r3,1164(sp)
1000956c:	d9012417 	ldw	r4,1168(sp)
10009570:	18800017 	ldw	r2,0(r3)
10009574:	18c00104 	addi	r3,r3,4
10009578:	d8c12315 	stw	r3,1164(sp)
1000957c:	11000015 	stw	r4,0(r2)
10009580:	003b9306 	br	100083d0 <__alt_data_end+0xf80083d0>
10009584:	d9412317 	ldw	r5,1164(sp)
10009588:	002b883a 	mov	r21,zero
1000958c:	2d000017 	ldw	r20,0(r5)
10009590:	29400104 	addi	r5,r5,4
10009594:	d9412315 	stw	r5,1164(sp)
10009598:	003d8206 	br	10008ba4 <__alt_data_end+0xf8008ba4>
1000959c:	d8812317 	ldw	r2,1164(sp)
100095a0:	002b883a 	mov	r21,zero
100095a4:	15000017 	ldw	r20,0(r2)
100095a8:	10800104 	addi	r2,r2,4
100095ac:	d8812315 	stw	r2,1164(sp)
100095b0:	a009883a 	mov	r4,r20
100095b4:	0005883a 	mov	r2,zero
100095b8:	003d5b06 	br	10008b28 <__alt_data_end+0xf8008b28>
100095bc:	04bfffc4 	movi	r18,-1
100095c0:	900d883a 	mov	r6,r18
100095c4:	003bac06 	br	10008478 <__alt_data_end+0xf8008478>
100095c8:	4a400044 	addi	r9,r9,1
100095cc:	8c400814 	ori	r17,r17,32
100095d0:	10c00047 	ldb	r3,1(r2)
100095d4:	003ba706 	br	10008474 <__alt_data_end+0xf8008474>
100095d8:	d8c11f17 	ldw	r3,1148(sp)
100095dc:	1dcfc83a 	sub	r7,r3,r23
100095e0:	003c8d06 	br	10008818 <__alt_data_end+0xf8008818>
100095e4:	da012b15 	stw	r8,1196(sp)
100095e8:	da412d15 	stw	r9,1204(sp)
100095ec:	0000f480 	call	10000f48 <strlen>
100095f0:	100f883a 	mov	r7,r2
100095f4:	dd811d83 	ldbu	r22,1142(sp)
100095f8:	dd412315 	stw	r21,1164(sp)
100095fc:	0025883a 	mov	r18,zero
10009600:	da012b17 	ldw	r8,1196(sp)
10009604:	da412d17 	ldw	r9,1204(sp)
10009608:	003c8306 	br	10008818 <__alt_data_end+0xf8008818>
1000960c:	d9012217 	ldw	r4,1160(sp)
10009610:	d9412017 	ldw	r5,1152(sp)
10009614:	d9811a04 	addi	r6,sp,1128
10009618:	d9c12b15 	stw	r7,1196(sp)
1000961c:	da412d15 	stw	r9,1204(sp)
10009620:	00081e00 	call	100081e0 <__sprint_r.part.0>
10009624:	d9c12b17 	ldw	r7,1196(sp)
10009628:	da412d17 	ldw	r9,1204(sp)
1000962c:	103e681e 	bne	r2,zero,10008fd0 <__alt_data_end+0xf8008fd0>
10009630:	d9411b17 	ldw	r5,1132(sp)
10009634:	d8c11c17 	ldw	r3,1136(sp)
10009638:	d811883a 	mov	r8,sp
1000963c:	28800044 	addi	r2,r5,1
10009640:	003cc506 	br	10008958 <__alt_data_end+0xf8008958>
10009644:	d9411b17 	ldw	r5,1132(sp)
10009648:	01040074 	movhi	r4,4097
1000964c:	213fc904 	addi	r4,r4,-220
10009650:	d9012515 	stw	r4,1172(sp)
10009654:	29400044 	addi	r5,r5,1
10009658:	003ca406 	br	100088ec <__alt_data_end+0xf80088ec>
1000965c:	00800184 	movi	r2,6
10009660:	300f883a 	mov	r7,r6
10009664:	1180012e 	bgeu	r2,r6,1000966c <___vfiprintf_internal_r+0x1378>
10009668:	100f883a 	mov	r7,r2
1000966c:	3829883a 	mov	r20,r7
10009670:	38001e16 	blt	r7,zero,100096ec <___vfiprintf_internal_r+0x13f8>
10009674:	dd412315 	stw	r21,1164(sp)
10009678:	05c40074 	movhi	r23,4097
1000967c:	bdff6904 	addi	r23,r23,-604
10009680:	0025883a 	mov	r18,zero
10009684:	003c6c06 	br	10008838 <__alt_data_end+0xf8008838>
10009688:	d9012317 	ldw	r4,1164(sp)
1000968c:	d9412417 	ldw	r5,1168(sp)
10009690:	20800017 	ldw	r2,0(r4)
10009694:	21000104 	addi	r4,r4,4
10009698:	d9012315 	stw	r4,1164(sp)
1000969c:	11400015 	stw	r5,0(r2)
100096a0:	003b4b06 	br	100083d0 <__alt_data_end+0xf80083d0>
100096a4:	d9411b17 	ldw	r5,1132(sp)
100096a8:	00840074 	movhi	r2,4097
100096ac:	10bfc904 	addi	r2,r2,-220
100096b0:	d8812515 	stw	r2,1172(sp)
100096b4:	29400044 	addi	r5,r5,1
100096b8:	003cff06 	br	10008ab8 <__alt_data_end+0xf8008ab8>
100096bc:	1009883a 	mov	r4,r2
100096c0:	05440074 	movhi	r21,4097
100096c4:	ad7fc504 	addi	r21,r21,-236
100096c8:	003e9906 	br	10009130 <__alt_data_end+0xf8009130>
100096cc:	900f883a 	mov	r7,r18
100096d0:	dd811d83 	ldbu	r22,1142(sp)
100096d4:	dd412315 	stw	r21,1164(sp)
100096d8:	0025883a 	mov	r18,zero
100096dc:	003c4e06 	br	10008818 <__alt_data_end+0xf8008818>
100096e0:	1013883a 	mov	r9,r2
100096e4:	000d883a 	mov	r6,zero
100096e8:	003b6306 	br	10008478 <__alt_data_end+0xf8008478>
100096ec:	0029883a 	mov	r20,zero
100096f0:	003fe006 	br	10009674 <__alt_data_end+0xf8009674>
100096f4:	043fffc4 	movi	r16,-1
100096f8:	003bf306 	br	100086c8 <__alt_data_end+0xf80086c8>
100096fc:	d9412317 	ldw	r5,1164(sp)
10009700:	48c00043 	ldbu	r3,1(r9)
10009704:	1013883a 	mov	r9,r2
10009708:	29800017 	ldw	r6,0(r5)
1000970c:	29000104 	addi	r4,r5,4
10009710:	d9012315 	stw	r4,1164(sp)
10009714:	30000416 	blt	r6,zero,10009728 <___vfiprintf_internal_r+0x1434>
10009718:	18c03fcc 	andi	r3,r3,255
1000971c:	18c0201c 	xori	r3,r3,128
10009720:	18ffe004 	addi	r3,r3,-128
10009724:	003b5306 	br	10008474 <__alt_data_end+0xf8008474>
10009728:	18c03fcc 	andi	r3,r3,255
1000972c:	18c0201c 	xori	r3,r3,128
10009730:	01bfffc4 	movi	r6,-1
10009734:	18ffe004 	addi	r3,r3,-128
10009738:	003b4e06 	br	10008474 <__alt_data_end+0xf8008474>

1000973c <__vfiprintf_internal>:
1000973c:	00840074 	movhi	r2,4097
10009740:	1086c804 	addi	r2,r2,6944
10009744:	2007883a 	mov	r3,r4
10009748:	11000017 	ldw	r4,0(r2)
1000974c:	2805883a 	mov	r2,r5
10009750:	300f883a 	mov	r7,r6
10009754:	180b883a 	mov	r5,r3
10009758:	100d883a 	mov	r6,r2
1000975c:	00082f41 	jmpi	100082f4 <___vfiprintf_internal_r>

10009760 <_write_r>:
10009760:	defffd04 	addi	sp,sp,-12
10009764:	dc400115 	stw	r17,4(sp)
10009768:	dc000015 	stw	r16,0(sp)
1000976c:	2023883a 	mov	r17,r4
10009770:	04040074 	movhi	r16,4097
10009774:	840d9a04 	addi	r16,r16,13928
10009778:	2809883a 	mov	r4,r5
1000977c:	300b883a 	mov	r5,r6
10009780:	380d883a 	mov	r6,r7
10009784:	dfc00215 	stw	ra,8(sp)
10009788:	80000015 	stw	zero,0(r16)
1000978c:	000e02c0 	call	1000e02c <write>
10009790:	00ffffc4 	movi	r3,-1
10009794:	10c00526 	beq	r2,r3,100097ac <_write_r+0x4c>
10009798:	dfc00217 	ldw	ra,8(sp)
1000979c:	dc400117 	ldw	r17,4(sp)
100097a0:	dc000017 	ldw	r16,0(sp)
100097a4:	dec00304 	addi	sp,sp,12
100097a8:	f800283a 	ret
100097ac:	80c00017 	ldw	r3,0(r16)
100097b0:	183ff926 	beq	r3,zero,10009798 <__alt_data_end+0xf8009798>
100097b4:	88c00015 	stw	r3,0(r17)
100097b8:	dfc00217 	ldw	ra,8(sp)
100097bc:	dc400117 	ldw	r17,4(sp)
100097c0:	dc000017 	ldw	r16,0(sp)
100097c4:	dec00304 	addi	sp,sp,12
100097c8:	f800283a 	ret

100097cc <_close_r>:
100097cc:	defffd04 	addi	sp,sp,-12
100097d0:	dc400115 	stw	r17,4(sp)
100097d4:	dc000015 	stw	r16,0(sp)
100097d8:	2023883a 	mov	r17,r4
100097dc:	04040074 	movhi	r16,4097
100097e0:	840d9a04 	addi	r16,r16,13928
100097e4:	2809883a 	mov	r4,r5
100097e8:	dfc00215 	stw	ra,8(sp)
100097ec:	80000015 	stw	zero,0(r16)
100097f0:	000d7180 	call	1000d718 <close>
100097f4:	00ffffc4 	movi	r3,-1
100097f8:	10c00526 	beq	r2,r3,10009810 <_close_r+0x44>
100097fc:	dfc00217 	ldw	ra,8(sp)
10009800:	dc400117 	ldw	r17,4(sp)
10009804:	dc000017 	ldw	r16,0(sp)
10009808:	dec00304 	addi	sp,sp,12
1000980c:	f800283a 	ret
10009810:	80c00017 	ldw	r3,0(r16)
10009814:	183ff926 	beq	r3,zero,100097fc <__alt_data_end+0xf80097fc>
10009818:	88c00015 	stw	r3,0(r17)
1000981c:	dfc00217 	ldw	ra,8(sp)
10009820:	dc400117 	ldw	r17,4(sp)
10009824:	dc000017 	ldw	r16,0(sp)
10009828:	dec00304 	addi	sp,sp,12
1000982c:	f800283a 	ret

10009830 <_calloc_r>:
10009830:	defffe04 	addi	sp,sp,-8
10009834:	dc000015 	stw	r16,0(sp)
10009838:	2021883a 	mov	r16,r4
1000983c:	2809883a 	mov	r4,r5
10009840:	300b883a 	mov	r5,r6
10009844:	dfc00115 	stw	ra,4(sp)
10009848:	000af1c0 	call	1000af1c <__mulsi3>
1000984c:	8009883a 	mov	r4,r16
10009850:	100b883a 	mov	r5,r2
10009854:	0005da00 	call	10005da0 <_malloc_r>
10009858:	1021883a 	mov	r16,r2
1000985c:	10002826 	beq	r2,zero,10009900 <_calloc_r+0xd0>
10009860:	11bfff17 	ldw	r6,-4(r2)
10009864:	00ffff04 	movi	r3,-4
10009868:	00800904 	movi	r2,36
1000986c:	30cc703a 	and	r6,r6,r3
10009870:	30cd883a 	add	r6,r6,r3
10009874:	11801436 	bltu	r2,r6,100098c8 <_calloc_r+0x98>
10009878:	00c004c4 	movi	r3,19
1000987c:	19800936 	bltu	r3,r6,100098a4 <_calloc_r+0x74>
10009880:	8005883a 	mov	r2,r16
10009884:	10000015 	stw	zero,0(r2)
10009888:	10000115 	stw	zero,4(r2)
1000988c:	10000215 	stw	zero,8(r2)
10009890:	8005883a 	mov	r2,r16
10009894:	dfc00117 	ldw	ra,4(sp)
10009898:	dc000017 	ldw	r16,0(sp)
1000989c:	dec00204 	addi	sp,sp,8
100098a0:	f800283a 	ret
100098a4:	80000015 	stw	zero,0(r16)
100098a8:	80000115 	stw	zero,4(r16)
100098ac:	00c006c4 	movi	r3,27
100098b0:	19800d2e 	bgeu	r3,r6,100098e8 <_calloc_r+0xb8>
100098b4:	80000215 	stw	zero,8(r16)
100098b8:	80000315 	stw	zero,12(r16)
100098bc:	30800c26 	beq	r6,r2,100098f0 <_calloc_r+0xc0>
100098c0:	80800404 	addi	r2,r16,16
100098c4:	003fef06 	br	10009884 <__alt_data_end+0xf8009884>
100098c8:	8009883a 	mov	r4,r16
100098cc:	000b883a 	mov	r5,zero
100098d0:	00068940 	call	10006894 <memset>
100098d4:	8005883a 	mov	r2,r16
100098d8:	dfc00117 	ldw	ra,4(sp)
100098dc:	dc000017 	ldw	r16,0(sp)
100098e0:	dec00204 	addi	sp,sp,8
100098e4:	f800283a 	ret
100098e8:	80800204 	addi	r2,r16,8
100098ec:	003fe506 	br	10009884 <__alt_data_end+0xf8009884>
100098f0:	80000415 	stw	zero,16(r16)
100098f4:	80800604 	addi	r2,r16,24
100098f8:	80000515 	stw	zero,20(r16)
100098fc:	003fe106 	br	10009884 <__alt_data_end+0xf8009884>
10009900:	0005883a 	mov	r2,zero
10009904:	003fe306 	br	10009894 <__alt_data_end+0xf8009894>

10009908 <_fclose_r>:
10009908:	defffc04 	addi	sp,sp,-16
1000990c:	dc000015 	stw	r16,0(sp)
10009910:	dfc00315 	stw	ra,12(sp)
10009914:	dc800215 	stw	r18,8(sp)
10009918:	dc400115 	stw	r17,4(sp)
1000991c:	2821883a 	mov	r16,r5
10009920:	28003126 	beq	r5,zero,100099e8 <_fclose_r+0xe0>
10009924:	2023883a 	mov	r17,r4
10009928:	00050c00 	call	100050c0 <__sfp_lock_acquire>
1000992c:	88000226 	beq	r17,zero,10009938 <_fclose_r+0x30>
10009930:	88800e17 	ldw	r2,56(r17)
10009934:	10003326 	beq	r2,zero,10009a04 <_fclose_r+0xfc>
10009938:	8080030f 	ldh	r2,12(r16)
1000993c:	10002226 	beq	r2,zero,100099c8 <_fclose_r+0xc0>
10009940:	8809883a 	mov	r4,r17
10009944:	800b883a 	mov	r5,r16
10009948:	0004ae80 	call	10004ae8 <_fflush_r>
1000994c:	80c00b17 	ldw	r3,44(r16)
10009950:	1025883a 	mov	r18,r2
10009954:	18000426 	beq	r3,zero,10009968 <_fclose_r+0x60>
10009958:	81400717 	ldw	r5,28(r16)
1000995c:	8809883a 	mov	r4,r17
10009960:	183ee83a 	callr	r3
10009964:	10003016 	blt	r2,zero,10009a28 <_fclose_r+0x120>
10009968:	8080030b 	ldhu	r2,12(r16)
1000996c:	1080200c 	andi	r2,r2,128
10009970:	1000291e 	bne	r2,zero,10009a18 <_fclose_r+0x110>
10009974:	81400c17 	ldw	r5,48(r16)
10009978:	28000526 	beq	r5,zero,10009990 <_fclose_r+0x88>
1000997c:	80801004 	addi	r2,r16,64
10009980:	28800226 	beq	r5,r2,1000998c <_fclose_r+0x84>
10009984:	8809883a 	mov	r4,r17
10009988:	000523c0 	call	1000523c <_free_r>
1000998c:	80000c15 	stw	zero,48(r16)
10009990:	81401117 	ldw	r5,68(r16)
10009994:	28000326 	beq	r5,zero,100099a4 <_fclose_r+0x9c>
10009998:	8809883a 	mov	r4,r17
1000999c:	000523c0 	call	1000523c <_free_r>
100099a0:	80001115 	stw	zero,68(r16)
100099a4:	8000030d 	sth	zero,12(r16)
100099a8:	00050c40 	call	100050c4 <__sfp_lock_release>
100099ac:	9005883a 	mov	r2,r18
100099b0:	dfc00317 	ldw	ra,12(sp)
100099b4:	dc800217 	ldw	r18,8(sp)
100099b8:	dc400117 	ldw	r17,4(sp)
100099bc:	dc000017 	ldw	r16,0(sp)
100099c0:	dec00404 	addi	sp,sp,16
100099c4:	f800283a 	ret
100099c8:	00050c40 	call	100050c4 <__sfp_lock_release>
100099cc:	0005883a 	mov	r2,zero
100099d0:	dfc00317 	ldw	ra,12(sp)
100099d4:	dc800217 	ldw	r18,8(sp)
100099d8:	dc400117 	ldw	r17,4(sp)
100099dc:	dc000017 	ldw	r16,0(sp)
100099e0:	dec00404 	addi	sp,sp,16
100099e4:	f800283a 	ret
100099e8:	0005883a 	mov	r2,zero
100099ec:	dfc00317 	ldw	ra,12(sp)
100099f0:	dc800217 	ldw	r18,8(sp)
100099f4:	dc400117 	ldw	r17,4(sp)
100099f8:	dc000017 	ldw	r16,0(sp)
100099fc:	dec00404 	addi	sp,sp,16
10009a00:	f800283a 	ret
10009a04:	8809883a 	mov	r4,r17
10009a08:	0004e080 	call	10004e08 <__sinit>
10009a0c:	8080030f 	ldh	r2,12(r16)
10009a10:	103fcb1e 	bne	r2,zero,10009940 <__alt_data_end+0xf8009940>
10009a14:	003fec06 	br	100099c8 <__alt_data_end+0xf80099c8>
10009a18:	81400417 	ldw	r5,16(r16)
10009a1c:	8809883a 	mov	r4,r17
10009a20:	000523c0 	call	1000523c <_free_r>
10009a24:	003fd306 	br	10009974 <__alt_data_end+0xf8009974>
10009a28:	04bfffc4 	movi	r18,-1
10009a2c:	003fce06 	br	10009968 <__alt_data_end+0xf8009968>

10009a30 <fclose>:
10009a30:	00840074 	movhi	r2,4097
10009a34:	1086c804 	addi	r2,r2,6944
10009a38:	200b883a 	mov	r5,r4
10009a3c:	11000017 	ldw	r4,0(r2)
10009a40:	00099081 	jmpi	10009908 <_fclose_r>

10009a44 <_fputwc_r>:
10009a44:	3080030b 	ldhu	r2,12(r6)
10009a48:	defff804 	addi	sp,sp,-32
10009a4c:	dcc00415 	stw	r19,16(sp)
10009a50:	dc800315 	stw	r18,12(sp)
10009a54:	dc000115 	stw	r16,4(sp)
10009a58:	dfc00715 	stw	ra,28(sp)
10009a5c:	dd400615 	stw	r21,24(sp)
10009a60:	dd000515 	stw	r20,20(sp)
10009a64:	dc400215 	stw	r17,8(sp)
10009a68:	10c8000c 	andi	r3,r2,8192
10009a6c:	3021883a 	mov	r16,r6
10009a70:	2027883a 	mov	r19,r4
10009a74:	2825883a 	mov	r18,r5
10009a78:	1800051e 	bne	r3,zero,10009a90 <_fputwc_r+0x4c>
10009a7c:	30c01917 	ldw	r3,100(r6)
10009a80:	10880014 	ori	r2,r2,8192
10009a84:	3080030d 	sth	r2,12(r6)
10009a88:	18880014 	ori	r2,r3,8192
10009a8c:	30801915 	stw	r2,100(r6)
10009a90:	0005b940 	call	10005b94 <__locale_mb_cur_max>
10009a94:	00c00044 	movi	r3,1
10009a98:	10c03e26 	beq	r2,r3,10009b94 <_fputwc_r+0x150>
10009a9c:	9809883a 	mov	r4,r19
10009aa0:	d80b883a 	mov	r5,sp
10009aa4:	900d883a 	mov	r6,r18
10009aa8:	81c01704 	addi	r7,r16,92
10009aac:	0009f800 	call	10009f80 <_wcrtomb_r>
10009ab0:	1029883a 	mov	r20,r2
10009ab4:	00bfffc4 	movi	r2,-1
10009ab8:	a0802026 	beq	r20,r2,10009b3c <_fputwc_r+0xf8>
10009abc:	d9400003 	ldbu	r5,0(sp)
10009ac0:	a0001c26 	beq	r20,zero,10009b34 <_fputwc_r+0xf0>
10009ac4:	0023883a 	mov	r17,zero
10009ac8:	05400284 	movi	r21,10
10009acc:	00000906 	br	10009af4 <_fputwc_r+0xb0>
10009ad0:	80c00017 	ldw	r3,0(r16)
10009ad4:	19400005 	stb	r5,0(r3)
10009ad8:	80c00017 	ldw	r3,0(r16)
10009adc:	18c00044 	addi	r3,r3,1
10009ae0:	80c00015 	stw	r3,0(r16)
10009ae4:	8c400044 	addi	r17,r17,1
10009ae8:	dc47883a 	add	r3,sp,r17
10009aec:	8d00112e 	bgeu	r17,r20,10009b34 <_fputwc_r+0xf0>
10009af0:	19400003 	ldbu	r5,0(r3)
10009af4:	80c00217 	ldw	r3,8(r16)
10009af8:	18ffffc4 	addi	r3,r3,-1
10009afc:	80c00215 	stw	r3,8(r16)
10009b00:	183ff30e 	bge	r3,zero,10009ad0 <__alt_data_end+0xf8009ad0>
10009b04:	80800617 	ldw	r2,24(r16)
10009b08:	18801916 	blt	r3,r2,10009b70 <_fputwc_r+0x12c>
10009b0c:	80800017 	ldw	r2,0(r16)
10009b10:	11400005 	stb	r5,0(r2)
10009b14:	80800017 	ldw	r2,0(r16)
10009b18:	10c00003 	ldbu	r3,0(r2)
10009b1c:	10800044 	addi	r2,r2,1
10009b20:	1d402326 	beq	r3,r21,10009bb0 <_fputwc_r+0x16c>
10009b24:	8c400044 	addi	r17,r17,1
10009b28:	80800015 	stw	r2,0(r16)
10009b2c:	dc47883a 	add	r3,sp,r17
10009b30:	8d3fef36 	bltu	r17,r20,10009af0 <__alt_data_end+0xf8009af0>
10009b34:	9005883a 	mov	r2,r18
10009b38:	00000406 	br	10009b4c <_fputwc_r+0x108>
10009b3c:	80c0030b 	ldhu	r3,12(r16)
10009b40:	a005883a 	mov	r2,r20
10009b44:	18c01014 	ori	r3,r3,64
10009b48:	80c0030d 	sth	r3,12(r16)
10009b4c:	dfc00717 	ldw	ra,28(sp)
10009b50:	dd400617 	ldw	r21,24(sp)
10009b54:	dd000517 	ldw	r20,20(sp)
10009b58:	dcc00417 	ldw	r19,16(sp)
10009b5c:	dc800317 	ldw	r18,12(sp)
10009b60:	dc400217 	ldw	r17,8(sp)
10009b64:	dc000117 	ldw	r16,4(sp)
10009b68:	dec00804 	addi	sp,sp,32
10009b6c:	f800283a 	ret
10009b70:	9809883a 	mov	r4,r19
10009b74:	29403fcc 	andi	r5,r5,255
10009b78:	800d883a 	mov	r6,r16
10009b7c:	0009de40 	call	10009de4 <__swbuf_r>
10009b80:	10bfffe0 	cmpeqi	r2,r2,-1
10009b84:	10803fcc 	andi	r2,r2,255
10009b88:	103fd626 	beq	r2,zero,10009ae4 <__alt_data_end+0xf8009ae4>
10009b8c:	00bfffc4 	movi	r2,-1
10009b90:	003fee06 	br	10009b4c <__alt_data_end+0xf8009b4c>
10009b94:	90ffffc4 	addi	r3,r18,-1
10009b98:	01003f84 	movi	r4,254
10009b9c:	20ffbf36 	bltu	r4,r3,10009a9c <__alt_data_end+0xf8009a9c>
10009ba0:	900b883a 	mov	r5,r18
10009ba4:	dc800005 	stb	r18,0(sp)
10009ba8:	1029883a 	mov	r20,r2
10009bac:	003fc506 	br	10009ac4 <__alt_data_end+0xf8009ac4>
10009bb0:	9809883a 	mov	r4,r19
10009bb4:	a80b883a 	mov	r5,r21
10009bb8:	800d883a 	mov	r6,r16
10009bbc:	0009de40 	call	10009de4 <__swbuf_r>
10009bc0:	10bfffe0 	cmpeqi	r2,r2,-1
10009bc4:	003fef06 	br	10009b84 <__alt_data_end+0xf8009b84>

10009bc8 <fputwc>:
10009bc8:	defffc04 	addi	sp,sp,-16
10009bcc:	dc000115 	stw	r16,4(sp)
10009bd0:	04040074 	movhi	r16,4097
10009bd4:	8406c804 	addi	r16,r16,6944
10009bd8:	80800017 	ldw	r2,0(r16)
10009bdc:	dc400215 	stw	r17,8(sp)
10009be0:	dfc00315 	stw	ra,12(sp)
10009be4:	2023883a 	mov	r17,r4
10009be8:	280d883a 	mov	r6,r5
10009bec:	10000d26 	beq	r2,zero,10009c24 <fputwc+0x5c>
10009bf0:	10c00e17 	ldw	r3,56(r2)
10009bf4:	1009883a 	mov	r4,r2
10009bf8:	1800041e 	bne	r3,zero,10009c0c <fputwc+0x44>
10009bfc:	d9400015 	stw	r5,0(sp)
10009c00:	0004e080 	call	10004e08 <__sinit>
10009c04:	81000017 	ldw	r4,0(r16)
10009c08:	d9800017 	ldw	r6,0(sp)
10009c0c:	880b883a 	mov	r5,r17
10009c10:	dfc00317 	ldw	ra,12(sp)
10009c14:	dc400217 	ldw	r17,8(sp)
10009c18:	dc000117 	ldw	r16,4(sp)
10009c1c:	dec00404 	addi	sp,sp,16
10009c20:	0009a441 	jmpi	10009a44 <_fputwc_r>
10009c24:	0009883a 	mov	r4,zero
10009c28:	880b883a 	mov	r5,r17
10009c2c:	dfc00317 	ldw	ra,12(sp)
10009c30:	dc400217 	ldw	r17,8(sp)
10009c34:	dc000117 	ldw	r16,4(sp)
10009c38:	dec00404 	addi	sp,sp,16
10009c3c:	0009a441 	jmpi	10009a44 <_fputwc_r>

10009c40 <_fstat_r>:
10009c40:	defffd04 	addi	sp,sp,-12
10009c44:	dc400115 	stw	r17,4(sp)
10009c48:	dc000015 	stw	r16,0(sp)
10009c4c:	2023883a 	mov	r17,r4
10009c50:	04040074 	movhi	r16,4097
10009c54:	840d9a04 	addi	r16,r16,13928
10009c58:	2809883a 	mov	r4,r5
10009c5c:	300b883a 	mov	r5,r6
10009c60:	dfc00215 	stw	ra,8(sp)
10009c64:	80000015 	stw	zero,0(r16)
10009c68:	000d8f40 	call	1000d8f4 <fstat>
10009c6c:	00ffffc4 	movi	r3,-1
10009c70:	10c00526 	beq	r2,r3,10009c88 <_fstat_r+0x48>
10009c74:	dfc00217 	ldw	ra,8(sp)
10009c78:	dc400117 	ldw	r17,4(sp)
10009c7c:	dc000017 	ldw	r16,0(sp)
10009c80:	dec00304 	addi	sp,sp,12
10009c84:	f800283a 	ret
10009c88:	80c00017 	ldw	r3,0(r16)
10009c8c:	183ff926 	beq	r3,zero,10009c74 <__alt_data_end+0xf8009c74>
10009c90:	88c00015 	stw	r3,0(r17)
10009c94:	dfc00217 	ldw	ra,8(sp)
10009c98:	dc400117 	ldw	r17,4(sp)
10009c9c:	dc000017 	ldw	r16,0(sp)
10009ca0:	dec00304 	addi	sp,sp,12
10009ca4:	f800283a 	ret

10009ca8 <_isatty_r>:
10009ca8:	defffd04 	addi	sp,sp,-12
10009cac:	dc400115 	stw	r17,4(sp)
10009cb0:	dc000015 	stw	r16,0(sp)
10009cb4:	2023883a 	mov	r17,r4
10009cb8:	04040074 	movhi	r16,4097
10009cbc:	840d9a04 	addi	r16,r16,13928
10009cc0:	2809883a 	mov	r4,r5
10009cc4:	dfc00215 	stw	ra,8(sp)
10009cc8:	80000015 	stw	zero,0(r16)
10009ccc:	000d9f80 	call	1000d9f8 <isatty>
10009cd0:	00ffffc4 	movi	r3,-1
10009cd4:	10c00526 	beq	r2,r3,10009cec <_isatty_r+0x44>
10009cd8:	dfc00217 	ldw	ra,8(sp)
10009cdc:	dc400117 	ldw	r17,4(sp)
10009ce0:	dc000017 	ldw	r16,0(sp)
10009ce4:	dec00304 	addi	sp,sp,12
10009ce8:	f800283a 	ret
10009cec:	80c00017 	ldw	r3,0(r16)
10009cf0:	183ff926 	beq	r3,zero,10009cd8 <__alt_data_end+0xf8009cd8>
10009cf4:	88c00015 	stw	r3,0(r17)
10009cf8:	dfc00217 	ldw	ra,8(sp)
10009cfc:	dc400117 	ldw	r17,4(sp)
10009d00:	dc000017 	ldw	r16,0(sp)
10009d04:	dec00304 	addi	sp,sp,12
10009d08:	f800283a 	ret

10009d0c <_lseek_r>:
10009d0c:	defffd04 	addi	sp,sp,-12
10009d10:	dc400115 	stw	r17,4(sp)
10009d14:	dc000015 	stw	r16,0(sp)
10009d18:	2023883a 	mov	r17,r4
10009d1c:	04040074 	movhi	r16,4097
10009d20:	840d9a04 	addi	r16,r16,13928
10009d24:	2809883a 	mov	r4,r5
10009d28:	300b883a 	mov	r5,r6
10009d2c:	380d883a 	mov	r6,r7
10009d30:	dfc00215 	stw	ra,8(sp)
10009d34:	80000015 	stw	zero,0(r16)
10009d38:	000dbd40 	call	1000dbd4 <lseek>
10009d3c:	00ffffc4 	movi	r3,-1
10009d40:	10c00526 	beq	r2,r3,10009d58 <_lseek_r+0x4c>
10009d44:	dfc00217 	ldw	ra,8(sp)
10009d48:	dc400117 	ldw	r17,4(sp)
10009d4c:	dc000017 	ldw	r16,0(sp)
10009d50:	dec00304 	addi	sp,sp,12
10009d54:	f800283a 	ret
10009d58:	80c00017 	ldw	r3,0(r16)
10009d5c:	183ff926 	beq	r3,zero,10009d44 <__alt_data_end+0xf8009d44>
10009d60:	88c00015 	stw	r3,0(r17)
10009d64:	dfc00217 	ldw	ra,8(sp)
10009d68:	dc400117 	ldw	r17,4(sp)
10009d6c:	dc000017 	ldw	r16,0(sp)
10009d70:	dec00304 	addi	sp,sp,12
10009d74:	f800283a 	ret

10009d78 <_read_r>:
10009d78:	defffd04 	addi	sp,sp,-12
10009d7c:	dc400115 	stw	r17,4(sp)
10009d80:	dc000015 	stw	r16,0(sp)
10009d84:	2023883a 	mov	r17,r4
10009d88:	04040074 	movhi	r16,4097
10009d8c:	840d9a04 	addi	r16,r16,13928
10009d90:	2809883a 	mov	r4,r5
10009d94:	300b883a 	mov	r5,r6
10009d98:	380d883a 	mov	r6,r7
10009d9c:	dfc00215 	stw	ra,8(sp)
10009da0:	80000015 	stw	zero,0(r16)
10009da4:	000ddb40 	call	1000ddb4 <read>
10009da8:	00ffffc4 	movi	r3,-1
10009dac:	10c00526 	beq	r2,r3,10009dc4 <_read_r+0x4c>
10009db0:	dfc00217 	ldw	ra,8(sp)
10009db4:	dc400117 	ldw	r17,4(sp)
10009db8:	dc000017 	ldw	r16,0(sp)
10009dbc:	dec00304 	addi	sp,sp,12
10009dc0:	f800283a 	ret
10009dc4:	80c00017 	ldw	r3,0(r16)
10009dc8:	183ff926 	beq	r3,zero,10009db0 <__alt_data_end+0xf8009db0>
10009dcc:	88c00015 	stw	r3,0(r17)
10009dd0:	dfc00217 	ldw	ra,8(sp)
10009dd4:	dc400117 	ldw	r17,4(sp)
10009dd8:	dc000017 	ldw	r16,0(sp)
10009ddc:	dec00304 	addi	sp,sp,12
10009de0:	f800283a 	ret

10009de4 <__swbuf_r>:
10009de4:	defffc04 	addi	sp,sp,-16
10009de8:	dc800215 	stw	r18,8(sp)
10009dec:	dc400115 	stw	r17,4(sp)
10009df0:	dc000015 	stw	r16,0(sp)
10009df4:	dfc00315 	stw	ra,12(sp)
10009df8:	2023883a 	mov	r17,r4
10009dfc:	2825883a 	mov	r18,r5
10009e00:	3021883a 	mov	r16,r6
10009e04:	20000226 	beq	r4,zero,10009e10 <__swbuf_r+0x2c>
10009e08:	20800e17 	ldw	r2,56(r4)
10009e0c:	10004d26 	beq	r2,zero,10009f44 <__swbuf_r+0x160>
10009e10:	80800617 	ldw	r2,24(r16)
10009e14:	80c0030b 	ldhu	r3,12(r16)
10009e18:	80800215 	stw	r2,8(r16)
10009e1c:	1880020c 	andi	r2,r3,8
10009e20:	10004126 	beq	r2,zero,10009f28 <__swbuf_r+0x144>
10009e24:	80800417 	ldw	r2,16(r16)
10009e28:	10003f26 	beq	r2,zero,10009f28 <__swbuf_r+0x144>
10009e2c:	1908000c 	andi	r4,r3,8192
10009e30:	94803fcc 	andi	r18,r18,255
10009e34:	20001726 	beq	r4,zero,10009e94 <__swbuf_r+0xb0>
10009e38:	80c00017 	ldw	r3,0(r16)
10009e3c:	81000517 	ldw	r4,20(r16)
10009e40:	1885c83a 	sub	r2,r3,r2
10009e44:	11001d0e 	bge	r2,r4,10009ebc <__swbuf_r+0xd8>
10009e48:	81000217 	ldw	r4,8(r16)
10009e4c:	19400044 	addi	r5,r3,1
10009e50:	81400015 	stw	r5,0(r16)
10009e54:	213fffc4 	addi	r4,r4,-1
10009e58:	81000215 	stw	r4,8(r16)
10009e5c:	1c800005 	stb	r18,0(r3)
10009e60:	80c00517 	ldw	r3,20(r16)
10009e64:	10800044 	addi	r2,r2,1
10009e68:	18802226 	beq	r3,r2,10009ef4 <__swbuf_r+0x110>
10009e6c:	8080030b 	ldhu	r2,12(r16)
10009e70:	1080004c 	andi	r2,r2,1
10009e74:	1000251e 	bne	r2,zero,10009f0c <__swbuf_r+0x128>
10009e78:	9005883a 	mov	r2,r18
10009e7c:	dfc00317 	ldw	ra,12(sp)
10009e80:	dc800217 	ldw	r18,8(sp)
10009e84:	dc400117 	ldw	r17,4(sp)
10009e88:	dc000017 	ldw	r16,0(sp)
10009e8c:	dec00404 	addi	sp,sp,16
10009e90:	f800283a 	ret
10009e94:	81401917 	ldw	r5,100(r16)
10009e98:	18c80014 	ori	r3,r3,8192
10009e9c:	0137ffc4 	movi	r4,-8193
10009ea0:	2908703a 	and	r4,r5,r4
10009ea4:	80c0030d 	sth	r3,12(r16)
10009ea8:	80c00017 	ldw	r3,0(r16)
10009eac:	81001915 	stw	r4,100(r16)
10009eb0:	81000517 	ldw	r4,20(r16)
10009eb4:	1885c83a 	sub	r2,r3,r2
10009eb8:	113fe316 	blt	r2,r4,10009e48 <__alt_data_end+0xf8009e48>
10009ebc:	8809883a 	mov	r4,r17
10009ec0:	800b883a 	mov	r5,r16
10009ec4:	0004ae80 	call	10004ae8 <_fflush_r>
10009ec8:	10000e1e 	bne	r2,zero,10009f04 <__swbuf_r+0x120>
10009ecc:	80c00017 	ldw	r3,0(r16)
10009ed0:	81000217 	ldw	r4,8(r16)
10009ed4:	00800044 	movi	r2,1
10009ed8:	19400044 	addi	r5,r3,1
10009edc:	213fffc4 	addi	r4,r4,-1
10009ee0:	81400015 	stw	r5,0(r16)
10009ee4:	81000215 	stw	r4,8(r16)
10009ee8:	1c800005 	stb	r18,0(r3)
10009eec:	80c00517 	ldw	r3,20(r16)
10009ef0:	18bfde1e 	bne	r3,r2,10009e6c <__alt_data_end+0xf8009e6c>
10009ef4:	8809883a 	mov	r4,r17
10009ef8:	800b883a 	mov	r5,r16
10009efc:	0004ae80 	call	10004ae8 <_fflush_r>
10009f00:	103fdd26 	beq	r2,zero,10009e78 <__alt_data_end+0xf8009e78>
10009f04:	00bfffc4 	movi	r2,-1
10009f08:	003fdc06 	br	10009e7c <__alt_data_end+0xf8009e7c>
10009f0c:	00800284 	movi	r2,10
10009f10:	90bfd91e 	bne	r18,r2,10009e78 <__alt_data_end+0xf8009e78>
10009f14:	8809883a 	mov	r4,r17
10009f18:	800b883a 	mov	r5,r16
10009f1c:	0004ae80 	call	10004ae8 <_fflush_r>
10009f20:	103fd526 	beq	r2,zero,10009e78 <__alt_data_end+0xf8009e78>
10009f24:	003ff706 	br	10009f04 <__alt_data_end+0xf8009f04>
10009f28:	8809883a 	mov	r4,r17
10009f2c:	800b883a 	mov	r5,r16
10009f30:	000314c0 	call	1000314c <__swsetup_r>
10009f34:	80c0030b 	ldhu	r3,12(r16)
10009f38:	1000041e 	bne	r2,zero,10009f4c <__swbuf_r+0x168>
10009f3c:	80800417 	ldw	r2,16(r16)
10009f40:	003fba06 	br	10009e2c <__alt_data_end+0xf8009e2c>
10009f44:	0004e080 	call	10004e08 <__sinit>
10009f48:	003fb106 	br	10009e10 <__alt_data_end+0xf8009e10>
10009f4c:	18c01014 	ori	r3,r3,64
10009f50:	80c0030d 	sth	r3,12(r16)
10009f54:	00c00244 	movi	r3,9
10009f58:	00bfffc4 	movi	r2,-1
10009f5c:	88c00015 	stw	r3,0(r17)
10009f60:	003fc606 	br	10009e7c <__alt_data_end+0xf8009e7c>

10009f64 <__swbuf>:
10009f64:	00c40074 	movhi	r3,4097
10009f68:	18c6c804 	addi	r3,r3,6944
10009f6c:	2005883a 	mov	r2,r4
10009f70:	19000017 	ldw	r4,0(r3)
10009f74:	280d883a 	mov	r6,r5
10009f78:	100b883a 	mov	r5,r2
10009f7c:	0009de41 	jmpi	10009de4 <__swbuf_r>

10009f80 <_wcrtomb_r>:
10009f80:	defff604 	addi	sp,sp,-40
10009f84:	dc800815 	stw	r18,32(sp)
10009f88:	dc400715 	stw	r17,28(sp)
10009f8c:	dc000615 	stw	r16,24(sp)
10009f90:	00840074 	movhi	r2,4097
10009f94:	1086cc04 	addi	r2,r2,6960
10009f98:	dfc00915 	stw	ra,36(sp)
10009f9c:	2021883a 	mov	r16,r4
10009fa0:	3823883a 	mov	r17,r7
10009fa4:	14800017 	ldw	r18,0(r2)
10009fa8:	28001426 	beq	r5,zero,10009ffc <_wcrtomb_r+0x7c>
10009fac:	d9400415 	stw	r5,16(sp)
10009fb0:	d9800515 	stw	r6,20(sp)
10009fb4:	0005b880 	call	10005b88 <__locale_charset>
10009fb8:	d9400417 	ldw	r5,16(sp)
10009fbc:	d9800517 	ldw	r6,20(sp)
10009fc0:	8009883a 	mov	r4,r16
10009fc4:	dc400015 	stw	r17,0(sp)
10009fc8:	100f883a 	mov	r7,r2
10009fcc:	903ee83a 	callr	r18
10009fd0:	00ffffc4 	movi	r3,-1
10009fd4:	10c0031e 	bne	r2,r3,10009fe4 <_wcrtomb_r+0x64>
10009fd8:	88000015 	stw	zero,0(r17)
10009fdc:	00c02284 	movi	r3,138
10009fe0:	80c00015 	stw	r3,0(r16)
10009fe4:	dfc00917 	ldw	ra,36(sp)
10009fe8:	dc800817 	ldw	r18,32(sp)
10009fec:	dc400717 	ldw	r17,28(sp)
10009ff0:	dc000617 	ldw	r16,24(sp)
10009ff4:	dec00a04 	addi	sp,sp,40
10009ff8:	f800283a 	ret
10009ffc:	0005b880 	call	10005b88 <__locale_charset>
1000a000:	8009883a 	mov	r4,r16
1000a004:	dc400015 	stw	r17,0(sp)
1000a008:	d9400104 	addi	r5,sp,4
1000a00c:	000d883a 	mov	r6,zero
1000a010:	100f883a 	mov	r7,r2
1000a014:	903ee83a 	callr	r18
1000a018:	003fed06 	br	10009fd0 <__alt_data_end+0xf8009fd0>

1000a01c <wcrtomb>:
1000a01c:	defff504 	addi	sp,sp,-44
1000a020:	dc400515 	stw	r17,20(sp)
1000a024:	dc000415 	stw	r16,16(sp)
1000a028:	dfc00a15 	stw	ra,40(sp)
1000a02c:	dd400915 	stw	r21,36(sp)
1000a030:	dd000815 	stw	r20,32(sp)
1000a034:	dcc00715 	stw	r19,28(sp)
1000a038:	dc800615 	stw	r18,24(sp)
1000a03c:	2021883a 	mov	r16,r4
1000a040:	3023883a 	mov	r17,r6
1000a044:	20001d26 	beq	r4,zero,1000a0bc <wcrtomb+0xa0>
1000a048:	04840074 	movhi	r18,4097
1000a04c:	9486c804 	addi	r18,r18,6944
1000a050:	95400017 	ldw	r21,0(r18)
1000a054:	00840074 	movhi	r2,4097
1000a058:	1086cc04 	addi	r2,r2,6960
1000a05c:	15000017 	ldw	r20,0(r2)
1000a060:	2827883a 	mov	r19,r5
1000a064:	0005b880 	call	10005b88 <__locale_charset>
1000a068:	a809883a 	mov	r4,r21
1000a06c:	dc400015 	stw	r17,0(sp)
1000a070:	800b883a 	mov	r5,r16
1000a074:	980d883a 	mov	r6,r19
1000a078:	100f883a 	mov	r7,r2
1000a07c:	a03ee83a 	callr	r20
1000a080:	00ffffc4 	movi	r3,-1
1000a084:	10c0041e 	bne	r2,r3,1000a098 <wcrtomb+0x7c>
1000a088:	90c00017 	ldw	r3,0(r18)
1000a08c:	01002284 	movi	r4,138
1000a090:	88000015 	stw	zero,0(r17)
1000a094:	19000015 	stw	r4,0(r3)
1000a098:	dfc00a17 	ldw	ra,40(sp)
1000a09c:	dd400917 	ldw	r21,36(sp)
1000a0a0:	dd000817 	ldw	r20,32(sp)
1000a0a4:	dcc00717 	ldw	r19,28(sp)
1000a0a8:	dc800617 	ldw	r18,24(sp)
1000a0ac:	dc400517 	ldw	r17,20(sp)
1000a0b0:	dc000417 	ldw	r16,16(sp)
1000a0b4:	dec00b04 	addi	sp,sp,44
1000a0b8:	f800283a 	ret
1000a0bc:	04840074 	movhi	r18,4097
1000a0c0:	9486c804 	addi	r18,r18,6944
1000a0c4:	94c00017 	ldw	r19,0(r18)
1000a0c8:	00840074 	movhi	r2,4097
1000a0cc:	1086cc04 	addi	r2,r2,6960
1000a0d0:	14000017 	ldw	r16,0(r2)
1000a0d4:	0005b880 	call	10005b88 <__locale_charset>
1000a0d8:	9809883a 	mov	r4,r19
1000a0dc:	dc400015 	stw	r17,0(sp)
1000a0e0:	d9400104 	addi	r5,sp,4
1000a0e4:	000d883a 	mov	r6,zero
1000a0e8:	100f883a 	mov	r7,r2
1000a0ec:	803ee83a 	callr	r16
1000a0f0:	003fe306 	br	1000a080 <__alt_data_end+0xf800a080>

1000a0f4 <__ascii_wctomb>:
1000a0f4:	28000526 	beq	r5,zero,1000a10c <__ascii_wctomb+0x18>
1000a0f8:	00803fc4 	movi	r2,255
1000a0fc:	11800536 	bltu	r2,r6,1000a114 <__ascii_wctomb+0x20>
1000a100:	29800005 	stb	r6,0(r5)
1000a104:	00800044 	movi	r2,1
1000a108:	f800283a 	ret
1000a10c:	0005883a 	mov	r2,zero
1000a110:	f800283a 	ret
1000a114:	00802284 	movi	r2,138
1000a118:	20800015 	stw	r2,0(r4)
1000a11c:	00bfffc4 	movi	r2,-1
1000a120:	f800283a 	ret

1000a124 <_wctomb_r>:
1000a124:	defff904 	addi	sp,sp,-28
1000a128:	00840074 	movhi	r2,4097
1000a12c:	1086cc04 	addi	r2,r2,6960
1000a130:	dfc00615 	stw	ra,24(sp)
1000a134:	dc400515 	stw	r17,20(sp)
1000a138:	dc000415 	stw	r16,16(sp)
1000a13c:	3823883a 	mov	r17,r7
1000a140:	14000017 	ldw	r16,0(r2)
1000a144:	d9000115 	stw	r4,4(sp)
1000a148:	d9400215 	stw	r5,8(sp)
1000a14c:	d9800315 	stw	r6,12(sp)
1000a150:	0005b880 	call	10005b88 <__locale_charset>
1000a154:	d9000117 	ldw	r4,4(sp)
1000a158:	d9400217 	ldw	r5,8(sp)
1000a15c:	d9800317 	ldw	r6,12(sp)
1000a160:	dc400015 	stw	r17,0(sp)
1000a164:	100f883a 	mov	r7,r2
1000a168:	803ee83a 	callr	r16
1000a16c:	dfc00617 	ldw	ra,24(sp)
1000a170:	dc400517 	ldw	r17,20(sp)
1000a174:	dc000417 	ldw	r16,16(sp)
1000a178:	dec00704 	addi	sp,sp,28
1000a17c:	f800283a 	ret

1000a180 <__udivdi3>:
1000a180:	defff504 	addi	sp,sp,-44
1000a184:	dc800315 	stw	r18,12(sp)
1000a188:	dc400215 	stw	r17,8(sp)
1000a18c:	dfc00a15 	stw	ra,40(sp)
1000a190:	df000915 	stw	fp,36(sp)
1000a194:	ddc00815 	stw	r23,32(sp)
1000a198:	dd800715 	stw	r22,28(sp)
1000a19c:	dd400615 	stw	r21,24(sp)
1000a1a0:	dd000515 	stw	r20,20(sp)
1000a1a4:	dcc00415 	stw	r19,16(sp)
1000a1a8:	dc000115 	stw	r16,4(sp)
1000a1ac:	2025883a 	mov	r18,r4
1000a1b0:	2823883a 	mov	r17,r5
1000a1b4:	3800481e 	bne	r7,zero,1000a2d8 <__udivdi3+0x158>
1000a1b8:	3021883a 	mov	r16,r6
1000a1bc:	2027883a 	mov	r19,r4
1000a1c0:	29805a2e 	bgeu	r5,r6,1000a32c <__udivdi3+0x1ac>
1000a1c4:	00bfffd4 	movui	r2,65535
1000a1c8:	2829883a 	mov	r20,r5
1000a1cc:	1180b436 	bltu	r2,r6,1000a4a0 <__udivdi3+0x320>
1000a1d0:	00803fc4 	movi	r2,255
1000a1d4:	11816736 	bltu	r2,r6,1000a774 <__udivdi3+0x5f4>
1000a1d8:	0005883a 	mov	r2,zero
1000a1dc:	0007883a 	mov	r3,zero
1000a1e0:	3084d83a 	srl	r2,r6,r2
1000a1e4:	01040074 	movhi	r4,4097
1000a1e8:	213fcd04 	addi	r4,r4,-204
1000a1ec:	2085883a 	add	r2,r4,r2
1000a1f0:	10800003 	ldbu	r2,0(r2)
1000a1f4:	10c7883a 	add	r3,r2,r3
1000a1f8:	00800804 	movi	r2,32
1000a1fc:	10c5c83a 	sub	r2,r2,r3
1000a200:	10000526 	beq	r2,zero,1000a218 <__udivdi3+0x98>
1000a204:	88a2983a 	sll	r17,r17,r2
1000a208:	90c6d83a 	srl	r3,r18,r3
1000a20c:	30a0983a 	sll	r16,r6,r2
1000a210:	90a6983a 	sll	r19,r18,r2
1000a214:	88e8b03a 	or	r20,r17,r3
1000a218:	8022d43a 	srli	r17,r16,16
1000a21c:	a009883a 	mov	r4,r20
1000a220:	857fffcc 	andi	r21,r16,65535
1000a224:	880b883a 	mov	r5,r17
1000a228:	000af140 	call	1000af14 <__umodsi3>
1000a22c:	a009883a 	mov	r4,r20
1000a230:	880b883a 	mov	r5,r17
1000a234:	102d883a 	mov	r22,r2
1000a238:	000af0c0 	call	1000af0c <__udivsi3>
1000a23c:	1009883a 	mov	r4,r2
1000a240:	a80b883a 	mov	r5,r21
1000a244:	1025883a 	mov	r18,r2
1000a248:	000af1c0 	call	1000af1c <__mulsi3>
1000a24c:	1009883a 	mov	r4,r2
1000a250:	b006943a 	slli	r3,r22,16
1000a254:	9804d43a 	srli	r2,r19,16
1000a258:	1886b03a 	or	r3,r3,r2
1000a25c:	1900052e 	bgeu	r3,r4,1000a274 <__udivdi3+0xf4>
1000a260:	1c07883a 	add	r3,r3,r16
1000a264:	90bfffc4 	addi	r2,r18,-1
1000a268:	1c000136 	bltu	r3,r16,1000a270 <__udivdi3+0xf0>
1000a26c:	19015636 	bltu	r3,r4,1000a7c8 <__udivdi3+0x648>
1000a270:	1025883a 	mov	r18,r2
1000a274:	1929c83a 	sub	r20,r3,r4
1000a278:	880b883a 	mov	r5,r17
1000a27c:	a009883a 	mov	r4,r20
1000a280:	000af140 	call	1000af14 <__umodsi3>
1000a284:	102d883a 	mov	r22,r2
1000a288:	880b883a 	mov	r5,r17
1000a28c:	a009883a 	mov	r4,r20
1000a290:	b02c943a 	slli	r22,r22,16
1000a294:	000af0c0 	call	1000af0c <__udivsi3>
1000a298:	1009883a 	mov	r4,r2
1000a29c:	a80b883a 	mov	r5,r21
1000a2a0:	9cffffcc 	andi	r19,r19,65535
1000a2a4:	1023883a 	mov	r17,r2
1000a2a8:	b4e6b03a 	or	r19,r22,r19
1000a2ac:	000af1c0 	call	1000af1c <__mulsi3>
1000a2b0:	9880052e 	bgeu	r19,r2,1000a2c8 <__udivdi3+0x148>
1000a2b4:	9c27883a 	add	r19,r19,r16
1000a2b8:	88ffffc4 	addi	r3,r17,-1
1000a2bc:	9c011436 	bltu	r19,r16,1000a710 <__udivdi3+0x590>
1000a2c0:	9881132e 	bgeu	r19,r2,1000a710 <__udivdi3+0x590>
1000a2c4:	8c7fff84 	addi	r17,r17,-2
1000a2c8:	9024943a 	slli	r18,r18,16
1000a2cc:	0007883a 	mov	r3,zero
1000a2d0:	8c84b03a 	or	r2,r17,r18
1000a2d4:	00006106 	br	1000a45c <__udivdi3+0x2dc>
1000a2d8:	29c05e36 	bltu	r5,r7,1000a454 <__udivdi3+0x2d4>
1000a2dc:	00bfffd4 	movui	r2,65535
1000a2e0:	11c06a2e 	bgeu	r2,r7,1000a48c <__udivdi3+0x30c>
1000a2e4:	00804034 	movhi	r2,256
1000a2e8:	10bfffc4 	addi	r2,r2,-1
1000a2ec:	11c11236 	bltu	r2,r7,1000a738 <__udivdi3+0x5b8>
1000a2f0:	00c00404 	movi	r3,16
1000a2f4:	180b883a 	mov	r5,r3
1000a2f8:	38c6d83a 	srl	r3,r7,r3
1000a2fc:	01040074 	movhi	r4,4097
1000a300:	213fcd04 	addi	r4,r4,-204
1000a304:	04000804 	movi	r16,32
1000a308:	20c7883a 	add	r3,r4,r3
1000a30c:	18800003 	ldbu	r2,0(r3)
1000a310:	1145883a 	add	r2,r2,r5
1000a314:	80a1c83a 	sub	r16,r16,r2
1000a318:	80006c1e 	bne	r16,zero,1000a4cc <__udivdi3+0x34c>
1000a31c:	3c411836 	bltu	r7,r17,1000a780 <__udivdi3+0x600>
1000a320:	9185403a 	cmpgeu	r2,r18,r6
1000a324:	0007883a 	mov	r3,zero
1000a328:	00004c06 	br	1000a45c <__udivdi3+0x2dc>
1000a32c:	3000041e 	bne	r6,zero,1000a340 <__udivdi3+0x1c0>
1000a330:	01000044 	movi	r4,1
1000a334:	000b883a 	mov	r5,zero
1000a338:	000af0c0 	call	1000af0c <__udivsi3>
1000a33c:	1021883a 	mov	r16,r2
1000a340:	00bfffd4 	movui	r2,65535
1000a344:	14005c2e 	bgeu	r2,r16,1000a4b8 <__udivdi3+0x338>
1000a348:	00804034 	movhi	r2,256
1000a34c:	10bfffc4 	addi	r2,r2,-1
1000a350:	14010236 	bltu	r2,r16,1000a75c <__udivdi3+0x5dc>
1000a354:	00800404 	movi	r2,16
1000a358:	1007883a 	mov	r3,r2
1000a35c:	8084d83a 	srl	r2,r16,r2
1000a360:	01040074 	movhi	r4,4097
1000a364:	213fcd04 	addi	r4,r4,-204
1000a368:	2085883a 	add	r2,r4,r2
1000a36c:	10800003 	ldbu	r2,0(r2)
1000a370:	10c7883a 	add	r3,r2,r3
1000a374:	00800804 	movi	r2,32
1000a378:	10c5c83a 	sub	r2,r2,r3
1000a37c:	1000aa1e 	bne	r2,zero,1000a628 <__udivdi3+0x4a8>
1000a380:	8028d43a 	srli	r20,r16,16
1000a384:	8c23c83a 	sub	r17,r17,r16
1000a388:	857fffcc 	andi	r21,r16,65535
1000a38c:	00c00044 	movi	r3,1
1000a390:	8809883a 	mov	r4,r17
1000a394:	a00b883a 	mov	r5,r20
1000a398:	d8c00015 	stw	r3,0(sp)
1000a39c:	000af140 	call	1000af14 <__umodsi3>
1000a3a0:	8809883a 	mov	r4,r17
1000a3a4:	a00b883a 	mov	r5,r20
1000a3a8:	102d883a 	mov	r22,r2
1000a3ac:	000af0c0 	call	1000af0c <__udivsi3>
1000a3b0:	1009883a 	mov	r4,r2
1000a3b4:	a80b883a 	mov	r5,r21
1000a3b8:	1025883a 	mov	r18,r2
1000a3bc:	000af1c0 	call	1000af1c <__mulsi3>
1000a3c0:	1009883a 	mov	r4,r2
1000a3c4:	b00e943a 	slli	r7,r22,16
1000a3c8:	9804d43a 	srli	r2,r19,16
1000a3cc:	d8c00017 	ldw	r3,0(sp)
1000a3d0:	388eb03a 	or	r7,r7,r2
1000a3d4:	3900052e 	bgeu	r7,r4,1000a3ec <__udivdi3+0x26c>
1000a3d8:	3c0f883a 	add	r7,r7,r16
1000a3dc:	90bfffc4 	addi	r2,r18,-1
1000a3e0:	3c000136 	bltu	r7,r16,1000a3e8 <__udivdi3+0x268>
1000a3e4:	3900f536 	bltu	r7,r4,1000a7bc <__udivdi3+0x63c>
1000a3e8:	1025883a 	mov	r18,r2
1000a3ec:	3923c83a 	sub	r17,r7,r4
1000a3f0:	8809883a 	mov	r4,r17
1000a3f4:	a00b883a 	mov	r5,r20
1000a3f8:	d8c00015 	stw	r3,0(sp)
1000a3fc:	000af140 	call	1000af14 <__umodsi3>
1000a400:	102d883a 	mov	r22,r2
1000a404:	8809883a 	mov	r4,r17
1000a408:	a00b883a 	mov	r5,r20
1000a40c:	b02c943a 	slli	r22,r22,16
1000a410:	000af0c0 	call	1000af0c <__udivsi3>
1000a414:	1009883a 	mov	r4,r2
1000a418:	a80b883a 	mov	r5,r21
1000a41c:	9cffffcc 	andi	r19,r19,65535
1000a420:	1023883a 	mov	r17,r2
1000a424:	b4e6b03a 	or	r19,r22,r19
1000a428:	000af1c0 	call	1000af1c <__mulsi3>
1000a42c:	d8c00017 	ldw	r3,0(sp)
1000a430:	9880052e 	bgeu	r19,r2,1000a448 <__udivdi3+0x2c8>
1000a434:	9c27883a 	add	r19,r19,r16
1000a438:	893fffc4 	addi	r4,r17,-1
1000a43c:	9c00b236 	bltu	r19,r16,1000a708 <__udivdi3+0x588>
1000a440:	9880b12e 	bgeu	r19,r2,1000a708 <__udivdi3+0x588>
1000a444:	8c7fff84 	addi	r17,r17,-2
1000a448:	9024943a 	slli	r18,r18,16
1000a44c:	8c84b03a 	or	r2,r17,r18
1000a450:	00000206 	br	1000a45c <__udivdi3+0x2dc>
1000a454:	0007883a 	mov	r3,zero
1000a458:	0005883a 	mov	r2,zero
1000a45c:	dfc00a17 	ldw	ra,40(sp)
1000a460:	df000917 	ldw	fp,36(sp)
1000a464:	ddc00817 	ldw	r23,32(sp)
1000a468:	dd800717 	ldw	r22,28(sp)
1000a46c:	dd400617 	ldw	r21,24(sp)
1000a470:	dd000517 	ldw	r20,20(sp)
1000a474:	dcc00417 	ldw	r19,16(sp)
1000a478:	dc800317 	ldw	r18,12(sp)
1000a47c:	dc400217 	ldw	r17,8(sp)
1000a480:	dc000117 	ldw	r16,4(sp)
1000a484:	dec00b04 	addi	sp,sp,44
1000a488:	f800283a 	ret
1000a48c:	00803fc4 	movi	r2,255
1000a490:	11c0ac36 	bltu	r2,r7,1000a744 <__udivdi3+0x5c4>
1000a494:	0007883a 	mov	r3,zero
1000a498:	000b883a 	mov	r5,zero
1000a49c:	003f9606 	br	1000a2f8 <__alt_data_end+0xf800a2f8>
1000a4a0:	00804034 	movhi	r2,256
1000a4a4:	10bfffc4 	addi	r2,r2,-1
1000a4a8:	1180a936 	bltu	r2,r6,1000a750 <__udivdi3+0x5d0>
1000a4ac:	00800404 	movi	r2,16
1000a4b0:	1007883a 	mov	r3,r2
1000a4b4:	003f4a06 	br	1000a1e0 <__alt_data_end+0xf800a1e0>
1000a4b8:	00803fc4 	movi	r2,255
1000a4bc:	1400aa36 	bltu	r2,r16,1000a768 <__udivdi3+0x5e8>
1000a4c0:	0005883a 	mov	r2,zero
1000a4c4:	0007883a 	mov	r3,zero
1000a4c8:	003fa406 	br	1000a35c <__alt_data_end+0xf800a35c>
1000a4cc:	3c0e983a 	sll	r7,r7,r16
1000a4d0:	3086d83a 	srl	r3,r6,r2
1000a4d4:	88aed83a 	srl	r23,r17,r2
1000a4d8:	9084d83a 	srl	r2,r18,r2
1000a4dc:	38e6b03a 	or	r19,r7,r3
1000a4e0:	9828d43a 	srli	r20,r19,16
1000a4e4:	8c22983a 	sll	r17,r17,r16
1000a4e8:	b809883a 	mov	r4,r23
1000a4ec:	a00b883a 	mov	r5,r20
1000a4f0:	342a983a 	sll	r21,r6,r16
1000a4f4:	88a2b03a 	or	r17,r17,r2
1000a4f8:	000af140 	call	1000af14 <__umodsi3>
1000a4fc:	b809883a 	mov	r4,r23
1000a500:	a00b883a 	mov	r5,r20
1000a504:	1039883a 	mov	fp,r2
1000a508:	9dbfffcc 	andi	r22,r19,65535
1000a50c:	000af0c0 	call	1000af0c <__udivsi3>
1000a510:	1009883a 	mov	r4,r2
1000a514:	b00b883a 	mov	r5,r22
1000a518:	102f883a 	mov	r23,r2
1000a51c:	000af1c0 	call	1000af1c <__mulsi3>
1000a520:	1009883a 	mov	r4,r2
1000a524:	e00e943a 	slli	r7,fp,16
1000a528:	8804d43a 	srli	r2,r17,16
1000a52c:	388eb03a 	or	r7,r7,r2
1000a530:	3900042e 	bgeu	r7,r4,1000a544 <__udivdi3+0x3c4>
1000a534:	3ccf883a 	add	r7,r7,r19
1000a538:	b8bfffc4 	addi	r2,r23,-1
1000a53c:	3cc0972e 	bgeu	r7,r19,1000a79c <__udivdi3+0x61c>
1000a540:	102f883a 	mov	r23,r2
1000a544:	3939c83a 	sub	fp,r7,r4
1000a548:	a00b883a 	mov	r5,r20
1000a54c:	e009883a 	mov	r4,fp
1000a550:	000af140 	call	1000af14 <__umodsi3>
1000a554:	a00b883a 	mov	r5,r20
1000a558:	e009883a 	mov	r4,fp
1000a55c:	d8800015 	stw	r2,0(sp)
1000a560:	000af0c0 	call	1000af0c <__udivsi3>
1000a564:	1009883a 	mov	r4,r2
1000a568:	b00b883a 	mov	r5,r22
1000a56c:	1029883a 	mov	r20,r2
1000a570:	000af1c0 	call	1000af1c <__mulsi3>
1000a574:	d8c00017 	ldw	r3,0(sp)
1000a578:	8c7fffcc 	andi	r17,r17,65535
1000a57c:	1806943a 	slli	r3,r3,16
1000a580:	1c46b03a 	or	r3,r3,r17
1000a584:	1880042e 	bgeu	r3,r2,1000a598 <__udivdi3+0x418>
1000a588:	1cc7883a 	add	r3,r3,r19
1000a58c:	a13fffc4 	addi	r4,r20,-1
1000a590:	1cc07e2e 	bgeu	r3,r19,1000a78c <__udivdi3+0x60c>
1000a594:	2029883a 	mov	r20,r4
1000a598:	b82e943a 	slli	r23,r23,16
1000a59c:	a822d43a 	srli	r17,r21,16
1000a5a0:	ad7fffcc 	andi	r21,r21,65535
1000a5a4:	a5e8b03a 	or	r20,r20,r23
1000a5a8:	a5bfffcc 	andi	r22,r20,65535
1000a5ac:	b009883a 	mov	r4,r22
1000a5b0:	a80b883a 	mov	r5,r21
1000a5b4:	18afc83a 	sub	r23,r3,r2
1000a5b8:	a026d43a 	srli	r19,r20,16
1000a5bc:	000af1c0 	call	1000af1c <__mulsi3>
1000a5c0:	b009883a 	mov	r4,r22
1000a5c4:	880b883a 	mov	r5,r17
1000a5c8:	1039883a 	mov	fp,r2
1000a5cc:	000af1c0 	call	1000af1c <__mulsi3>
1000a5d0:	a80b883a 	mov	r5,r21
1000a5d4:	9809883a 	mov	r4,r19
1000a5d8:	102d883a 	mov	r22,r2
1000a5dc:	000af1c0 	call	1000af1c <__mulsi3>
1000a5e0:	9809883a 	mov	r4,r19
1000a5e4:	880b883a 	mov	r5,r17
1000a5e8:	102b883a 	mov	r21,r2
1000a5ec:	000af1c0 	call	1000af1c <__mulsi3>
1000a5f0:	100b883a 	mov	r5,r2
1000a5f4:	e004d43a 	srli	r2,fp,16
1000a5f8:	ad89883a 	add	r4,r21,r22
1000a5fc:	2089883a 	add	r4,r4,r2
1000a600:	2540022e 	bgeu	r4,r21,1000a60c <__udivdi3+0x48c>
1000a604:	00800074 	movhi	r2,1
1000a608:	288b883a 	add	r5,r5,r2
1000a60c:	2004d43a 	srli	r2,r4,16
1000a610:	288b883a 	add	r5,r5,r2
1000a614:	b9404536 	bltu	r23,r5,1000a72c <__udivdi3+0x5ac>
1000a618:	b9403f26 	beq	r23,r5,1000a718 <__udivdi3+0x598>
1000a61c:	a005883a 	mov	r2,r20
1000a620:	0007883a 	mov	r3,zero
1000a624:	003f8d06 	br	1000a45c <__alt_data_end+0xf800a45c>
1000a628:	80a0983a 	sll	r16,r16,r2
1000a62c:	88eed83a 	srl	r23,r17,r3
1000a630:	90c6d83a 	srl	r3,r18,r3
1000a634:	8028d43a 	srli	r20,r16,16
1000a638:	88a2983a 	sll	r17,r17,r2
1000a63c:	b809883a 	mov	r4,r23
1000a640:	a00b883a 	mov	r5,r20
1000a644:	88ecb03a 	or	r22,r17,r3
1000a648:	90a6983a 	sll	r19,r18,r2
1000a64c:	000af140 	call	1000af14 <__umodsi3>
1000a650:	b809883a 	mov	r4,r23
1000a654:	a00b883a 	mov	r5,r20
1000a658:	1023883a 	mov	r17,r2
1000a65c:	857fffcc 	andi	r21,r16,65535
1000a660:	000af0c0 	call	1000af0c <__udivsi3>
1000a664:	1009883a 	mov	r4,r2
1000a668:	a80b883a 	mov	r5,r21
1000a66c:	102f883a 	mov	r23,r2
1000a670:	000af1c0 	call	1000af1c <__mulsi3>
1000a674:	1009883a 	mov	r4,r2
1000a678:	880c943a 	slli	r6,r17,16
1000a67c:	b004d43a 	srli	r2,r22,16
1000a680:	308cb03a 	or	r6,r6,r2
1000a684:	3100062e 	bgeu	r6,r4,1000a6a0 <__udivdi3+0x520>
1000a688:	340d883a 	add	r6,r6,r16
1000a68c:	b8bfffc4 	addi	r2,r23,-1
1000a690:	34004836 	bltu	r6,r16,1000a7b4 <__udivdi3+0x634>
1000a694:	3100472e 	bgeu	r6,r4,1000a7b4 <__udivdi3+0x634>
1000a698:	bdffff84 	addi	r23,r23,-2
1000a69c:	340d883a 	add	r6,r6,r16
1000a6a0:	3125c83a 	sub	r18,r6,r4
1000a6a4:	9009883a 	mov	r4,r18
1000a6a8:	a00b883a 	mov	r5,r20
1000a6ac:	000af140 	call	1000af14 <__umodsi3>
1000a6b0:	1023883a 	mov	r17,r2
1000a6b4:	9009883a 	mov	r4,r18
1000a6b8:	a00b883a 	mov	r5,r20
1000a6bc:	8822943a 	slli	r17,r17,16
1000a6c0:	000af0c0 	call	1000af0c <__udivsi3>
1000a6c4:	1009883a 	mov	r4,r2
1000a6c8:	a80b883a 	mov	r5,r21
1000a6cc:	b5bfffcc 	andi	r22,r22,65535
1000a6d0:	1025883a 	mov	r18,r2
1000a6d4:	8da2b03a 	or	r17,r17,r22
1000a6d8:	000af1c0 	call	1000af1c <__mulsi3>
1000a6dc:	8880062e 	bgeu	r17,r2,1000a6f8 <__udivdi3+0x578>
1000a6e0:	8c23883a 	add	r17,r17,r16
1000a6e4:	90ffffc4 	addi	r3,r18,-1
1000a6e8:	8c003036 	bltu	r17,r16,1000a7ac <__udivdi3+0x62c>
1000a6ec:	88802f2e 	bgeu	r17,r2,1000a7ac <__udivdi3+0x62c>
1000a6f0:	94bfff84 	addi	r18,r18,-2
1000a6f4:	8c23883a 	add	r17,r17,r16
1000a6f8:	b806943a 	slli	r3,r23,16
1000a6fc:	88a3c83a 	sub	r17,r17,r2
1000a700:	90c6b03a 	or	r3,r18,r3
1000a704:	003f2206 	br	1000a390 <__alt_data_end+0xf800a390>
1000a708:	2023883a 	mov	r17,r4
1000a70c:	003f4e06 	br	1000a448 <__alt_data_end+0xf800a448>
1000a710:	1823883a 	mov	r17,r3
1000a714:	003eec06 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000a718:	2008943a 	slli	r4,r4,16
1000a71c:	9420983a 	sll	r16,r18,r16
1000a720:	e73fffcc 	andi	fp,fp,65535
1000a724:	2709883a 	add	r4,r4,fp
1000a728:	813fbc2e 	bgeu	r16,r4,1000a61c <__alt_data_end+0xf800a61c>
1000a72c:	a0bfffc4 	addi	r2,r20,-1
1000a730:	0007883a 	mov	r3,zero
1000a734:	003f4906 	br	1000a45c <__alt_data_end+0xf800a45c>
1000a738:	00c00604 	movi	r3,24
1000a73c:	180b883a 	mov	r5,r3
1000a740:	003eed06 	br	1000a2f8 <__alt_data_end+0xf800a2f8>
1000a744:	00c00204 	movi	r3,8
1000a748:	180b883a 	mov	r5,r3
1000a74c:	003eea06 	br	1000a2f8 <__alt_data_end+0xf800a2f8>
1000a750:	00800604 	movi	r2,24
1000a754:	1007883a 	mov	r3,r2
1000a758:	003ea106 	br	1000a1e0 <__alt_data_end+0xf800a1e0>
1000a75c:	00800604 	movi	r2,24
1000a760:	1007883a 	mov	r3,r2
1000a764:	003efd06 	br	1000a35c <__alt_data_end+0xf800a35c>
1000a768:	00800204 	movi	r2,8
1000a76c:	1007883a 	mov	r3,r2
1000a770:	003efa06 	br	1000a35c <__alt_data_end+0xf800a35c>
1000a774:	00800204 	movi	r2,8
1000a778:	1007883a 	mov	r3,r2
1000a77c:	003e9806 	br	1000a1e0 <__alt_data_end+0xf800a1e0>
1000a780:	0007883a 	mov	r3,zero
1000a784:	00800044 	movi	r2,1
1000a788:	003f3406 	br	1000a45c <__alt_data_end+0xf800a45c>
1000a78c:	18bf812e 	bgeu	r3,r2,1000a594 <__alt_data_end+0xf800a594>
1000a790:	a53fff84 	addi	r20,r20,-2
1000a794:	1cc7883a 	add	r3,r3,r19
1000a798:	003f7f06 	br	1000a598 <__alt_data_end+0xf800a598>
1000a79c:	393f682e 	bgeu	r7,r4,1000a540 <__alt_data_end+0xf800a540>
1000a7a0:	bdffff84 	addi	r23,r23,-2
1000a7a4:	3ccf883a 	add	r7,r7,r19
1000a7a8:	003f6606 	br	1000a544 <__alt_data_end+0xf800a544>
1000a7ac:	1825883a 	mov	r18,r3
1000a7b0:	003fd106 	br	1000a6f8 <__alt_data_end+0xf800a6f8>
1000a7b4:	102f883a 	mov	r23,r2
1000a7b8:	003fb906 	br	1000a6a0 <__alt_data_end+0xf800a6a0>
1000a7bc:	94bfff84 	addi	r18,r18,-2
1000a7c0:	3c0f883a 	add	r7,r7,r16
1000a7c4:	003f0906 	br	1000a3ec <__alt_data_end+0xf800a3ec>
1000a7c8:	94bfff84 	addi	r18,r18,-2
1000a7cc:	1c07883a 	add	r3,r3,r16
1000a7d0:	003ea806 	br	1000a274 <__alt_data_end+0xf800a274>

1000a7d4 <__umoddi3>:
1000a7d4:	defff304 	addi	sp,sp,-52
1000a7d8:	dd000715 	stw	r20,28(sp)
1000a7dc:	dc800515 	stw	r18,20(sp)
1000a7e0:	dc400415 	stw	r17,16(sp)
1000a7e4:	dfc00c15 	stw	ra,48(sp)
1000a7e8:	df000b15 	stw	fp,44(sp)
1000a7ec:	ddc00a15 	stw	r23,40(sp)
1000a7f0:	dd800915 	stw	r22,36(sp)
1000a7f4:	dd400815 	stw	r21,32(sp)
1000a7f8:	dcc00615 	stw	r19,24(sp)
1000a7fc:	dc000315 	stw	r16,12(sp)
1000a800:	2025883a 	mov	r18,r4
1000a804:	2823883a 	mov	r17,r5
1000a808:	2829883a 	mov	r20,r5
1000a80c:	38003d1e 	bne	r7,zero,1000a904 <__umoddi3+0x130>
1000a810:	3021883a 	mov	r16,r6
1000a814:	2027883a 	mov	r19,r4
1000a818:	2980532e 	bgeu	r5,r6,1000a968 <__umoddi3+0x194>
1000a81c:	00bfffd4 	movui	r2,65535
1000a820:	1180a636 	bltu	r2,r6,1000aabc <__umoddi3+0x2e8>
1000a824:	00803fc4 	movi	r2,255
1000a828:	11816336 	bltu	r2,r6,1000adb8 <__umoddi3+0x5e4>
1000a82c:	0005883a 	mov	r2,zero
1000a830:	0009883a 	mov	r4,zero
1000a834:	3084d83a 	srl	r2,r6,r2
1000a838:	00c40074 	movhi	r3,4097
1000a83c:	18ffcd04 	addi	r3,r3,-204
1000a840:	1885883a 	add	r2,r3,r2
1000a844:	10800003 	ldbu	r2,0(r2)
1000a848:	1109883a 	add	r4,r2,r4
1000a84c:	00800804 	movi	r2,32
1000a850:	1105c83a 	sub	r2,r2,r4
1000a854:	10011026 	beq	r2,zero,1000ac98 <__umoddi3+0x4c4>
1000a858:	9108d83a 	srl	r4,r18,r4
1000a85c:	88a2983a 	sll	r17,r17,r2
1000a860:	30a0983a 	sll	r16,r6,r2
1000a864:	90a6983a 	sll	r19,r18,r2
1000a868:	8928b03a 	or	r20,r17,r4
1000a86c:	1025883a 	mov	r18,r2
1000a870:	8022d43a 	srli	r17,r16,16
1000a874:	a009883a 	mov	r4,r20
1000a878:	857fffcc 	andi	r21,r16,65535
1000a87c:	880b883a 	mov	r5,r17
1000a880:	000af140 	call	1000af14 <__umodsi3>
1000a884:	a009883a 	mov	r4,r20
1000a888:	880b883a 	mov	r5,r17
1000a88c:	102d883a 	mov	r22,r2
1000a890:	000af0c0 	call	1000af0c <__udivsi3>
1000a894:	1009883a 	mov	r4,r2
1000a898:	a80b883a 	mov	r5,r21
1000a89c:	000af1c0 	call	1000af1c <__mulsi3>
1000a8a0:	1009883a 	mov	r4,r2
1000a8a4:	b006943a 	slli	r3,r22,16
1000a8a8:	9804d43a 	srli	r2,r19,16
1000a8ac:	1886b03a 	or	r3,r3,r2
1000a8b0:	1900042e 	bgeu	r3,r4,1000a8c4 <__umoddi3+0xf0>
1000a8b4:	1c07883a 	add	r3,r3,r16
1000a8b8:	1c000236 	bltu	r3,r16,1000a8c4 <__umoddi3+0xf0>
1000a8bc:	1900012e 	bgeu	r3,r4,1000a8c4 <__umoddi3+0xf0>
1000a8c0:	1c07883a 	add	r3,r3,r16
1000a8c4:	1929c83a 	sub	r20,r3,r4
1000a8c8:	a009883a 	mov	r4,r20
1000a8cc:	880b883a 	mov	r5,r17
1000a8d0:	000af140 	call	1000af14 <__umodsi3>
1000a8d4:	102d883a 	mov	r22,r2
1000a8d8:	a009883a 	mov	r4,r20
1000a8dc:	880b883a 	mov	r5,r17
1000a8e0:	b02c943a 	slli	r22,r22,16
1000a8e4:	000af0c0 	call	1000af0c <__udivsi3>
1000a8e8:	1009883a 	mov	r4,r2
1000a8ec:	a80b883a 	mov	r5,r21
1000a8f0:	9cffffcc 	andi	r19,r19,65535
1000a8f4:	000af1c0 	call	1000af1c <__mulsi3>
1000a8f8:	b4e6b03a 	or	r19,r22,r19
1000a8fc:	9880582e 	bgeu	r19,r2,1000aa60 <__umoddi3+0x28c>
1000a900:	00005306 	br	1000aa50 <__umoddi3+0x27c>
1000a904:	29c05a36 	bltu	r5,r7,1000aa70 <__umoddi3+0x29c>
1000a908:	00bfffd4 	movui	r2,65535
1000a90c:	11c0662e 	bgeu	r2,r7,1000aaa8 <__umoddi3+0x2d4>
1000a910:	00804034 	movhi	r2,256
1000a914:	10bfffc4 	addi	r2,r2,-1
1000a918:	11c11b36 	bltu	r2,r7,1000ad88 <__umoddi3+0x5b4>
1000a91c:	00c00404 	movi	r3,16
1000a920:	1827883a 	mov	r19,r3
1000a924:	38c6d83a 	srl	r3,r7,r3
1000a928:	01040074 	movhi	r4,4097
1000a92c:	213fcd04 	addi	r4,r4,-204
1000a930:	04000804 	movi	r16,32
1000a934:	20c7883a 	add	r3,r4,r3
1000a938:	18800003 	ldbu	r2,0(r3)
1000a93c:	14e7883a 	add	r19,r2,r19
1000a940:	84e1c83a 	sub	r16,r16,r19
1000a944:	8000681e 	bne	r16,zero,1000aae8 <__umoddi3+0x314>
1000a948:	3c400136 	bltu	r7,r17,1000a950 <__umoddi3+0x17c>
1000a94c:	91812736 	bltu	r18,r6,1000adec <__umoddi3+0x618>
1000a950:	9185c83a 	sub	r2,r18,r6
1000a954:	89e3c83a 	sub	r17,r17,r7
1000a958:	90a5803a 	cmpltu	r18,r18,r2
1000a95c:	8ca9c83a 	sub	r20,r17,r18
1000a960:	a007883a 	mov	r3,r20
1000a964:	00004406 	br	1000aa78 <__umoddi3+0x2a4>
1000a968:	3000041e 	bne	r6,zero,1000a97c <__umoddi3+0x1a8>
1000a96c:	01000044 	movi	r4,1
1000a970:	000b883a 	mov	r5,zero
1000a974:	000af0c0 	call	1000af0c <__udivsi3>
1000a978:	1021883a 	mov	r16,r2
1000a97c:	00bfffd4 	movui	r2,65535
1000a980:	1400542e 	bgeu	r2,r16,1000aad4 <__umoddi3+0x300>
1000a984:	00804034 	movhi	r2,256
1000a988:	10bfffc4 	addi	r2,r2,-1
1000a98c:	14010736 	bltu	r2,r16,1000adac <__umoddi3+0x5d8>
1000a990:	00800404 	movi	r2,16
1000a994:	1007883a 	mov	r3,r2
1000a998:	8084d83a 	srl	r2,r16,r2
1000a99c:	01040074 	movhi	r4,4097
1000a9a0:	213fcd04 	addi	r4,r4,-204
1000a9a4:	05400804 	movi	r21,32
1000a9a8:	2085883a 	add	r2,r4,r2
1000a9ac:	10800003 	ldbu	r2,0(r2)
1000a9b0:	10c7883a 	add	r3,r2,r3
1000a9b4:	a8ebc83a 	sub	r21,r21,r3
1000a9b8:	a800b91e 	bne	r21,zero,1000aca0 <__umoddi3+0x4cc>
1000a9bc:	8028d43a 	srli	r20,r16,16
1000a9c0:	8c23c83a 	sub	r17,r17,r16
1000a9c4:	85bfffcc 	andi	r22,r16,65535
1000a9c8:	0025883a 	mov	r18,zero
1000a9cc:	8809883a 	mov	r4,r17
1000a9d0:	a00b883a 	mov	r5,r20
1000a9d4:	000af140 	call	1000af14 <__umodsi3>
1000a9d8:	8809883a 	mov	r4,r17
1000a9dc:	a00b883a 	mov	r5,r20
1000a9e0:	102b883a 	mov	r21,r2
1000a9e4:	000af0c0 	call	1000af0c <__udivsi3>
1000a9e8:	1009883a 	mov	r4,r2
1000a9ec:	b00b883a 	mov	r5,r22
1000a9f0:	000af1c0 	call	1000af1c <__mulsi3>
1000a9f4:	1009883a 	mov	r4,r2
1000a9f8:	a806943a 	slli	r3,r21,16
1000a9fc:	9804d43a 	srli	r2,r19,16
1000aa00:	1886b03a 	or	r3,r3,r2
1000aa04:	1900032e 	bgeu	r3,r4,1000aa14 <__umoddi3+0x240>
1000aa08:	1c07883a 	add	r3,r3,r16
1000aa0c:	1c000136 	bltu	r3,r16,1000aa14 <__umoddi3+0x240>
1000aa10:	1900f436 	bltu	r3,r4,1000ade4 <__umoddi3+0x610>
1000aa14:	1923c83a 	sub	r17,r3,r4
1000aa18:	8809883a 	mov	r4,r17
1000aa1c:	a00b883a 	mov	r5,r20
1000aa20:	000af140 	call	1000af14 <__umodsi3>
1000aa24:	102b883a 	mov	r21,r2
1000aa28:	8809883a 	mov	r4,r17
1000aa2c:	a00b883a 	mov	r5,r20
1000aa30:	a82a943a 	slli	r21,r21,16
1000aa34:	000af0c0 	call	1000af0c <__udivsi3>
1000aa38:	1009883a 	mov	r4,r2
1000aa3c:	b00b883a 	mov	r5,r22
1000aa40:	9cffffcc 	andi	r19,r19,65535
1000aa44:	000af1c0 	call	1000af1c <__mulsi3>
1000aa48:	ace6b03a 	or	r19,r21,r19
1000aa4c:	9880042e 	bgeu	r19,r2,1000aa60 <__umoddi3+0x28c>
1000aa50:	9c27883a 	add	r19,r19,r16
1000aa54:	9c000236 	bltu	r19,r16,1000aa60 <__umoddi3+0x28c>
1000aa58:	9880012e 	bgeu	r19,r2,1000aa60 <__umoddi3+0x28c>
1000aa5c:	9c27883a 	add	r19,r19,r16
1000aa60:	9885c83a 	sub	r2,r19,r2
1000aa64:	1484d83a 	srl	r2,r2,r18
1000aa68:	0007883a 	mov	r3,zero
1000aa6c:	00000206 	br	1000aa78 <__umoddi3+0x2a4>
1000aa70:	2005883a 	mov	r2,r4
1000aa74:	2807883a 	mov	r3,r5
1000aa78:	dfc00c17 	ldw	ra,48(sp)
1000aa7c:	df000b17 	ldw	fp,44(sp)
1000aa80:	ddc00a17 	ldw	r23,40(sp)
1000aa84:	dd800917 	ldw	r22,36(sp)
1000aa88:	dd400817 	ldw	r21,32(sp)
1000aa8c:	dd000717 	ldw	r20,28(sp)
1000aa90:	dcc00617 	ldw	r19,24(sp)
1000aa94:	dc800517 	ldw	r18,20(sp)
1000aa98:	dc400417 	ldw	r17,16(sp)
1000aa9c:	dc000317 	ldw	r16,12(sp)
1000aaa0:	dec00d04 	addi	sp,sp,52
1000aaa4:	f800283a 	ret
1000aaa8:	00803fc4 	movi	r2,255
1000aaac:	11c0b336 	bltu	r2,r7,1000ad7c <__umoddi3+0x5a8>
1000aab0:	0007883a 	mov	r3,zero
1000aab4:	0027883a 	mov	r19,zero
1000aab8:	003f9a06 	br	1000a924 <__alt_data_end+0xf800a924>
1000aabc:	00804034 	movhi	r2,256
1000aac0:	10bfffc4 	addi	r2,r2,-1
1000aac4:	1180b336 	bltu	r2,r6,1000ad94 <__umoddi3+0x5c0>
1000aac8:	00800404 	movi	r2,16
1000aacc:	1009883a 	mov	r4,r2
1000aad0:	003f5806 	br	1000a834 <__alt_data_end+0xf800a834>
1000aad4:	00803fc4 	movi	r2,255
1000aad8:	1400b136 	bltu	r2,r16,1000ada0 <__umoddi3+0x5cc>
1000aadc:	0005883a 	mov	r2,zero
1000aae0:	0007883a 	mov	r3,zero
1000aae4:	003fac06 	br	1000a998 <__alt_data_end+0xf800a998>
1000aae8:	34c4d83a 	srl	r2,r6,r19
1000aaec:	3c0e983a 	sll	r7,r7,r16
1000aaf0:	8cf8d83a 	srl	fp,r17,r19
1000aaf4:	8c22983a 	sll	r17,r17,r16
1000aaf8:	38a8b03a 	or	r20,r7,r2
1000aafc:	a02ad43a 	srli	r21,r20,16
1000ab00:	94c4d83a 	srl	r2,r18,r19
1000ab04:	e009883a 	mov	r4,fp
1000ab08:	a80b883a 	mov	r5,r21
1000ab0c:	342c983a 	sll	r22,r6,r16
1000ab10:	88a2b03a 	or	r17,r17,r2
1000ab14:	000af140 	call	1000af14 <__umodsi3>
1000ab18:	e009883a 	mov	r4,fp
1000ab1c:	a80b883a 	mov	r5,r21
1000ab20:	a5ffffcc 	andi	r23,r20,65535
1000ab24:	d8800215 	stw	r2,8(sp)
1000ab28:	000af0c0 	call	1000af0c <__udivsi3>
1000ab2c:	1009883a 	mov	r4,r2
1000ab30:	b80b883a 	mov	r5,r23
1000ab34:	1039883a 	mov	fp,r2
1000ab38:	000af1c0 	call	1000af1c <__mulsi3>
1000ab3c:	d8c00217 	ldw	r3,8(sp)
1000ab40:	1009883a 	mov	r4,r2
1000ab44:	8804d43a 	srli	r2,r17,16
1000ab48:	1806943a 	slli	r3,r3,16
1000ab4c:	9424983a 	sll	r18,r18,r16
1000ab50:	1886b03a 	or	r3,r3,r2
1000ab54:	1900042e 	bgeu	r3,r4,1000ab68 <__umoddi3+0x394>
1000ab58:	1d07883a 	add	r3,r3,r20
1000ab5c:	e0bfffc4 	addi	r2,fp,-1
1000ab60:	1d009c2e 	bgeu	r3,r20,1000add4 <__umoddi3+0x600>
1000ab64:	1039883a 	mov	fp,r2
1000ab68:	1907c83a 	sub	r3,r3,r4
1000ab6c:	1809883a 	mov	r4,r3
1000ab70:	a80b883a 	mov	r5,r21
1000ab74:	d8c00215 	stw	r3,8(sp)
1000ab78:	000af140 	call	1000af14 <__umodsi3>
1000ab7c:	d8c00217 	ldw	r3,8(sp)
1000ab80:	a80b883a 	mov	r5,r21
1000ab84:	d8800015 	stw	r2,0(sp)
1000ab88:	1809883a 	mov	r4,r3
1000ab8c:	000af0c0 	call	1000af0c <__udivsi3>
1000ab90:	1009883a 	mov	r4,r2
1000ab94:	b80b883a 	mov	r5,r23
1000ab98:	102b883a 	mov	r21,r2
1000ab9c:	000af1c0 	call	1000af1c <__mulsi3>
1000aba0:	d9c00017 	ldw	r7,0(sp)
1000aba4:	8c7fffcc 	andi	r17,r17,65535
1000aba8:	380e943a 	slli	r7,r7,16
1000abac:	3c4eb03a 	or	r7,r7,r17
1000abb0:	3880042e 	bgeu	r7,r2,1000abc4 <__umoddi3+0x3f0>
1000abb4:	3d0f883a 	add	r7,r7,r20
1000abb8:	a8ffffc4 	addi	r3,r21,-1
1000abbc:	3d00812e 	bgeu	r7,r20,1000adc4 <__umoddi3+0x5f0>
1000abc0:	182b883a 	mov	r21,r3
1000abc4:	e038943a 	slli	fp,fp,16
1000abc8:	b010d43a 	srli	r8,r22,16
1000abcc:	b1bfffcc 	andi	r6,r22,65535
1000abd0:	af2ab03a 	or	r21,r21,fp
1000abd4:	a82ed43a 	srli	r23,r21,16
1000abd8:	ad7fffcc 	andi	r21,r21,65535
1000abdc:	300b883a 	mov	r5,r6
1000abe0:	a809883a 	mov	r4,r21
1000abe4:	38a3c83a 	sub	r17,r7,r2
1000abe8:	d9800115 	stw	r6,4(sp)
1000abec:	da000015 	stw	r8,0(sp)
1000abf0:	000af1c0 	call	1000af1c <__mulsi3>
1000abf4:	da000017 	ldw	r8,0(sp)
1000abf8:	a809883a 	mov	r4,r21
1000abfc:	1039883a 	mov	fp,r2
1000ac00:	400b883a 	mov	r5,r8
1000ac04:	da000215 	stw	r8,8(sp)
1000ac08:	000af1c0 	call	1000af1c <__mulsi3>
1000ac0c:	d9800117 	ldw	r6,4(sp)
1000ac10:	b809883a 	mov	r4,r23
1000ac14:	d8800015 	stw	r2,0(sp)
1000ac18:	300b883a 	mov	r5,r6
1000ac1c:	000af1c0 	call	1000af1c <__mulsi3>
1000ac20:	d8c00217 	ldw	r3,8(sp)
1000ac24:	b809883a 	mov	r4,r23
1000ac28:	102b883a 	mov	r21,r2
1000ac2c:	180b883a 	mov	r5,r3
1000ac30:	000af1c0 	call	1000af1c <__mulsi3>
1000ac34:	d9c00017 	ldw	r7,0(sp)
1000ac38:	1007883a 	mov	r3,r2
1000ac3c:	e004d43a 	srli	r2,fp,16
1000ac40:	a9c9883a 	add	r4,r21,r7
1000ac44:	2089883a 	add	r4,r4,r2
1000ac48:	2540022e 	bgeu	r4,r21,1000ac54 <__umoddi3+0x480>
1000ac4c:	00800074 	movhi	r2,1
1000ac50:	1887883a 	add	r3,r3,r2
1000ac54:	2004d43a 	srli	r2,r4,16
1000ac58:	2008943a 	slli	r4,r4,16
1000ac5c:	e73fffcc 	andi	fp,fp,65535
1000ac60:	1887883a 	add	r3,r3,r2
1000ac64:	2709883a 	add	r4,r4,fp
1000ac68:	88c03e36 	bltu	r17,r3,1000ad64 <__umoddi3+0x590>
1000ac6c:	88c06226 	beq	r17,r3,1000adf8 <__umoddi3+0x624>
1000ac70:	88c7c83a 	sub	r3,r17,r3
1000ac74:	202d883a 	mov	r22,r4
1000ac78:	95adc83a 	sub	r22,r18,r22
1000ac7c:	95a5803a 	cmpltu	r18,r18,r22
1000ac80:	1c87c83a 	sub	r3,r3,r18
1000ac84:	1cc4983a 	sll	r2,r3,r19
1000ac88:	b42cd83a 	srl	r22,r22,r16
1000ac8c:	1c06d83a 	srl	r3,r3,r16
1000ac90:	1584b03a 	or	r2,r2,r22
1000ac94:	003f7806 	br	1000aa78 <__alt_data_end+0xf800aa78>
1000ac98:	0025883a 	mov	r18,zero
1000ac9c:	003ef406 	br	1000a870 <__alt_data_end+0xf800a870>
1000aca0:	8560983a 	sll	r16,r16,r21
1000aca4:	88e6d83a 	srl	r19,r17,r3
1000aca8:	90c6d83a 	srl	r3,r18,r3
1000acac:	8028d43a 	srli	r20,r16,16
1000acb0:	8d62983a 	sll	r17,r17,r21
1000acb4:	9809883a 	mov	r4,r19
1000acb8:	a00b883a 	mov	r5,r20
1000acbc:	88eeb03a 	or	r23,r17,r3
1000acc0:	000af140 	call	1000af14 <__umodsi3>
1000acc4:	9809883a 	mov	r4,r19
1000acc8:	a00b883a 	mov	r5,r20
1000accc:	1023883a 	mov	r17,r2
1000acd0:	85bfffcc 	andi	r22,r16,65535
1000acd4:	000af0c0 	call	1000af0c <__udivsi3>
1000acd8:	1009883a 	mov	r4,r2
1000acdc:	b00b883a 	mov	r5,r22
1000ace0:	000af1c0 	call	1000af1c <__mulsi3>
1000ace4:	1007883a 	mov	r3,r2
1000ace8:	8808943a 	slli	r4,r17,16
1000acec:	b804d43a 	srli	r2,r23,16
1000acf0:	9566983a 	sll	r19,r18,r21
1000acf4:	2088b03a 	or	r4,r4,r2
1000acf8:	20c0042e 	bgeu	r4,r3,1000ad0c <__umoddi3+0x538>
1000acfc:	2409883a 	add	r4,r4,r16
1000ad00:	24000236 	bltu	r4,r16,1000ad0c <__umoddi3+0x538>
1000ad04:	20c0012e 	bgeu	r4,r3,1000ad0c <__umoddi3+0x538>
1000ad08:	2409883a 	add	r4,r4,r16
1000ad0c:	20e5c83a 	sub	r18,r4,r3
1000ad10:	9009883a 	mov	r4,r18
1000ad14:	a00b883a 	mov	r5,r20
1000ad18:	000af140 	call	1000af14 <__umodsi3>
1000ad1c:	1023883a 	mov	r17,r2
1000ad20:	9009883a 	mov	r4,r18
1000ad24:	a00b883a 	mov	r5,r20
1000ad28:	8822943a 	slli	r17,r17,16
1000ad2c:	000af0c0 	call	1000af0c <__udivsi3>
1000ad30:	1009883a 	mov	r4,r2
1000ad34:	b00b883a 	mov	r5,r22
1000ad38:	bdffffcc 	andi	r23,r23,65535
1000ad3c:	000af1c0 	call	1000af1c <__mulsi3>
1000ad40:	8de2b03a 	or	r17,r17,r23
1000ad44:	8880042e 	bgeu	r17,r2,1000ad58 <__umoddi3+0x584>
1000ad48:	8c23883a 	add	r17,r17,r16
1000ad4c:	8c000236 	bltu	r17,r16,1000ad58 <__umoddi3+0x584>
1000ad50:	8880012e 	bgeu	r17,r2,1000ad58 <__umoddi3+0x584>
1000ad54:	8c23883a 	add	r17,r17,r16
1000ad58:	88a3c83a 	sub	r17,r17,r2
1000ad5c:	a825883a 	mov	r18,r21
1000ad60:	003f1a06 	br	1000a9cc <__alt_data_end+0xf800a9cc>
1000ad64:	25adc83a 	sub	r22,r4,r22
1000ad68:	1d07c83a 	sub	r3,r3,r20
1000ad6c:	2589803a 	cmpltu	r4,r4,r22
1000ad70:	1907c83a 	sub	r3,r3,r4
1000ad74:	88c7c83a 	sub	r3,r17,r3
1000ad78:	003fbf06 	br	1000ac78 <__alt_data_end+0xf800ac78>
1000ad7c:	00c00204 	movi	r3,8
1000ad80:	1827883a 	mov	r19,r3
1000ad84:	003ee706 	br	1000a924 <__alt_data_end+0xf800a924>
1000ad88:	00c00604 	movi	r3,24
1000ad8c:	1827883a 	mov	r19,r3
1000ad90:	003ee406 	br	1000a924 <__alt_data_end+0xf800a924>
1000ad94:	00800604 	movi	r2,24
1000ad98:	1009883a 	mov	r4,r2
1000ad9c:	003ea506 	br	1000a834 <__alt_data_end+0xf800a834>
1000ada0:	00800204 	movi	r2,8
1000ada4:	1007883a 	mov	r3,r2
1000ada8:	003efb06 	br	1000a998 <__alt_data_end+0xf800a998>
1000adac:	00800604 	movi	r2,24
1000adb0:	1007883a 	mov	r3,r2
1000adb4:	003ef806 	br	1000a998 <__alt_data_end+0xf800a998>
1000adb8:	00800204 	movi	r2,8
1000adbc:	1009883a 	mov	r4,r2
1000adc0:	003e9c06 	br	1000a834 <__alt_data_end+0xf800a834>
1000adc4:	38bf7e2e 	bgeu	r7,r2,1000abc0 <__alt_data_end+0xf800abc0>
1000adc8:	ad7fff84 	addi	r21,r21,-2
1000adcc:	3d0f883a 	add	r7,r7,r20
1000add0:	003f7c06 	br	1000abc4 <__alt_data_end+0xf800abc4>
1000add4:	193f632e 	bgeu	r3,r4,1000ab64 <__alt_data_end+0xf800ab64>
1000add8:	e73fff84 	addi	fp,fp,-2
1000addc:	1d07883a 	add	r3,r3,r20
1000ade0:	003f6106 	br	1000ab68 <__alt_data_end+0xf800ab68>
1000ade4:	1c07883a 	add	r3,r3,r16
1000ade8:	003f0a06 	br	1000aa14 <__alt_data_end+0xf800aa14>
1000adec:	9005883a 	mov	r2,r18
1000adf0:	a007883a 	mov	r3,r20
1000adf4:	003f2006 	br	1000aa78 <__alt_data_end+0xf800aa78>
1000adf8:	913fda36 	bltu	r18,r4,1000ad64 <__alt_data_end+0xf800ad64>
1000adfc:	202d883a 	mov	r22,r4
1000ae00:	0007883a 	mov	r3,zero
1000ae04:	003f9c06 	br	1000ac78 <__alt_data_end+0xf800ac78>

1000ae08 <udivmodsi4>:
1000ae08:	2900182e 	bgeu	r5,r4,1000ae6c <udivmodsi4+0x64>
1000ae0c:	28001716 	blt	r5,zero,1000ae6c <udivmodsi4+0x64>
1000ae10:	00800804 	movi	r2,32
1000ae14:	00c00044 	movi	r3,1
1000ae18:	00000206 	br	1000ae24 <udivmodsi4+0x1c>
1000ae1c:	10001126 	beq	r2,zero,1000ae64 <udivmodsi4+0x5c>
1000ae20:	28000516 	blt	r5,zero,1000ae38 <udivmodsi4+0x30>
1000ae24:	294b883a 	add	r5,r5,r5
1000ae28:	10bfffc4 	addi	r2,r2,-1
1000ae2c:	18c7883a 	add	r3,r3,r3
1000ae30:	293ffa36 	bltu	r5,r4,1000ae1c <__alt_data_end+0xf800ae1c>
1000ae34:	18000b26 	beq	r3,zero,1000ae64 <udivmodsi4+0x5c>
1000ae38:	0005883a 	mov	r2,zero
1000ae3c:	21400236 	bltu	r4,r5,1000ae48 <udivmodsi4+0x40>
1000ae40:	2149c83a 	sub	r4,r4,r5
1000ae44:	10c4b03a 	or	r2,r2,r3
1000ae48:	1806d07a 	srli	r3,r3,1
1000ae4c:	280ad07a 	srli	r5,r5,1
1000ae50:	183ffa1e 	bne	r3,zero,1000ae3c <__alt_data_end+0xf800ae3c>
1000ae54:	3000011e 	bne	r6,zero,1000ae5c <udivmodsi4+0x54>
1000ae58:	f800283a 	ret
1000ae5c:	2005883a 	mov	r2,r4
1000ae60:	f800283a 	ret
1000ae64:	0005883a 	mov	r2,zero
1000ae68:	003ffa06 	br	1000ae54 <__alt_data_end+0xf800ae54>
1000ae6c:	00c00044 	movi	r3,1
1000ae70:	0005883a 	mov	r2,zero
1000ae74:	003ff106 	br	1000ae3c <__alt_data_end+0xf800ae3c>

1000ae78 <__divsi3>:
1000ae78:	deffff04 	addi	sp,sp,-4
1000ae7c:	dfc00015 	stw	ra,0(sp)
1000ae80:	20000916 	blt	r4,zero,1000aea8 <__divsi3+0x30>
1000ae84:	000f883a 	mov	r7,zero
1000ae88:	28000a16 	blt	r5,zero,1000aeb4 <__divsi3+0x3c>
1000ae8c:	000d883a 	mov	r6,zero
1000ae90:	000ae080 	call	1000ae08 <udivmodsi4>
1000ae94:	38000126 	beq	r7,zero,1000ae9c <__divsi3+0x24>
1000ae98:	0085c83a 	sub	r2,zero,r2
1000ae9c:	dfc00017 	ldw	ra,0(sp)
1000aea0:	dec00104 	addi	sp,sp,4
1000aea4:	f800283a 	ret
1000aea8:	0109c83a 	sub	r4,zero,r4
1000aeac:	01c00044 	movi	r7,1
1000aeb0:	283ff60e 	bge	r5,zero,1000ae8c <__alt_data_end+0xf800ae8c>
1000aeb4:	014bc83a 	sub	r5,zero,r5
1000aeb8:	39c0005c 	xori	r7,r7,1
1000aebc:	003ff306 	br	1000ae8c <__alt_data_end+0xf800ae8c>

1000aec0 <__modsi3>:
1000aec0:	20000316 	blt	r4,zero,1000aed0 <__modsi3+0x10>
1000aec4:	28000c16 	blt	r5,zero,1000aef8 <__modsi3+0x38>
1000aec8:	01800044 	movi	r6,1
1000aecc:	000ae081 	jmpi	1000ae08 <udivmodsi4>
1000aed0:	deffff04 	addi	sp,sp,-4
1000aed4:	dfc00015 	stw	ra,0(sp)
1000aed8:	0109c83a 	sub	r4,zero,r4
1000aedc:	28000916 	blt	r5,zero,1000af04 <__modsi3+0x44>
1000aee0:	01800044 	movi	r6,1
1000aee4:	000ae080 	call	1000ae08 <udivmodsi4>
1000aee8:	0085c83a 	sub	r2,zero,r2
1000aeec:	dfc00017 	ldw	ra,0(sp)
1000aef0:	dec00104 	addi	sp,sp,4
1000aef4:	f800283a 	ret
1000aef8:	014bc83a 	sub	r5,zero,r5
1000aefc:	01800044 	movi	r6,1
1000af00:	000ae081 	jmpi	1000ae08 <udivmodsi4>
1000af04:	014bc83a 	sub	r5,zero,r5
1000af08:	003ff506 	br	1000aee0 <__alt_data_end+0xf800aee0>

1000af0c <__udivsi3>:
1000af0c:	000d883a 	mov	r6,zero
1000af10:	000ae081 	jmpi	1000ae08 <udivmodsi4>

1000af14 <__umodsi3>:
1000af14:	01800044 	movi	r6,1
1000af18:	000ae081 	jmpi	1000ae08 <udivmodsi4>

1000af1c <__mulsi3>:
1000af1c:	0005883a 	mov	r2,zero
1000af20:	20000726 	beq	r4,zero,1000af40 <__mulsi3+0x24>
1000af24:	20c0004c 	andi	r3,r4,1
1000af28:	2008d07a 	srli	r4,r4,1
1000af2c:	18000126 	beq	r3,zero,1000af34 <__mulsi3+0x18>
1000af30:	1145883a 	add	r2,r2,r5
1000af34:	294b883a 	add	r5,r5,r5
1000af38:	203ffa1e 	bne	r4,zero,1000af24 <__alt_data_end+0xf800af24>
1000af3c:	f800283a 	ret
1000af40:	f800283a 	ret

1000af44 <__adddf3>:
1000af44:	00800434 	movhi	r2,16
1000af48:	10bfffc4 	addi	r2,r2,-1
1000af4c:	defffb04 	addi	sp,sp,-20
1000af50:	2890703a 	and	r8,r5,r2
1000af54:	2806d7fa 	srli	r3,r5,31
1000af58:	3884703a 	and	r2,r7,r2
1000af5c:	2014d77a 	srli	r10,r4,29
1000af60:	3812d53a 	srli	r9,r7,20
1000af64:	dc400115 	stw	r17,4(sp)
1000af68:	100490fa 	slli	r2,r2,3
1000af6c:	2822d53a 	srli	r17,r5,20
1000af70:	380ed7fa 	srli	r7,r7,31
1000af74:	400a90fa 	slli	r5,r8,3
1000af78:	3010d77a 	srli	r8,r6,29
1000af7c:	dc800215 	stw	r18,8(sp)
1000af80:	dc000015 	stw	r16,0(sp)
1000af84:	dfc00415 	stw	ra,16(sp)
1000af88:	dcc00315 	stw	r19,12(sp)
1000af8c:	1c803fcc 	andi	r18,r3,255
1000af90:	202090fa 	slli	r16,r4,3
1000af94:	8c41ffcc 	andi	r17,r17,2047
1000af98:	2a8ab03a 	or	r5,r5,r10
1000af9c:	4901ffcc 	andi	r4,r9,2047
1000afa0:	1204b03a 	or	r2,r2,r8
1000afa4:	300c90fa 	slli	r6,r6,3
1000afa8:	91c07126 	beq	r18,r7,1000b170 <__adddf3+0x22c>
1000afac:	8907c83a 	sub	r3,r17,r4
1000afb0:	00c0a00e 	bge	zero,r3,1000b234 <__adddf3+0x2f0>
1000afb4:	2000291e 	bne	r4,zero,1000b05c <__adddf3+0x118>
1000afb8:	1188b03a 	or	r4,r2,r6
1000afbc:	20008b1e 	bne	r4,zero,1000b1ec <__adddf3+0x2a8>
1000afc0:	808001cc 	andi	r2,r16,7
1000afc4:	10005a26 	beq	r2,zero,1000b130 <__adddf3+0x1ec>
1000afc8:	80c003cc 	andi	r3,r16,15
1000afcc:	00800104 	movi	r2,4
1000afd0:	18805726 	beq	r3,r2,1000b130 <__adddf3+0x1ec>
1000afd4:	81000104 	addi	r4,r16,4
1000afd8:	2421803a 	cmpltu	r16,r4,r16
1000afdc:	2c0b883a 	add	r5,r5,r16
1000afe0:	2880202c 	andhi	r2,r5,128
1000afe4:	9007883a 	mov	r3,r18
1000afe8:	2021883a 	mov	r16,r4
1000afec:	10005326 	beq	r2,zero,1000b13c <__adddf3+0x1f8>
1000aff0:	8c400044 	addi	r17,r17,1
1000aff4:	0081ffc4 	movi	r2,2047
1000aff8:	8880ae26 	beq	r17,r2,1000b2b4 <__adddf3+0x370>
1000affc:	00bfe034 	movhi	r2,65408
1000b000:	10bfffc4 	addi	r2,r2,-1
1000b004:	288a703a 	and	r5,r5,r2
1000b008:	2804977a 	slli	r2,r5,29
1000b00c:	280a927a 	slli	r5,r5,9
1000b010:	8020d0fa 	srli	r16,r16,3
1000b014:	280ad33a 	srli	r5,r5,12
1000b018:	1404b03a 	or	r2,r2,r16
1000b01c:	8c41ffcc 	andi	r17,r17,2047
1000b020:	8822953a 	slli	r17,r17,20
1000b024:	18c03fcc 	andi	r3,r3,255
1000b028:	180897fa 	slli	r4,r3,31
1000b02c:	00c00434 	movhi	r3,16
1000b030:	18ffffc4 	addi	r3,r3,-1
1000b034:	28c6703a 	and	r3,r5,r3
1000b038:	1c46b03a 	or	r3,r3,r17
1000b03c:	1906b03a 	or	r3,r3,r4
1000b040:	dfc00417 	ldw	ra,16(sp)
1000b044:	dcc00317 	ldw	r19,12(sp)
1000b048:	dc800217 	ldw	r18,8(sp)
1000b04c:	dc400117 	ldw	r17,4(sp)
1000b050:	dc000017 	ldw	r16,0(sp)
1000b054:	dec00504 	addi	sp,sp,20
1000b058:	f800283a 	ret
1000b05c:	0101ffc4 	movi	r4,2047
1000b060:	893fd726 	beq	r17,r4,1000afc0 <__alt_data_end+0xf800afc0>
1000b064:	10802034 	orhi	r2,r2,128
1000b068:	01000e04 	movi	r4,56
1000b06c:	20c09416 	blt	r4,r3,1000b2c0 <__adddf3+0x37c>
1000b070:	010007c4 	movi	r4,31
1000b074:	20c0b716 	blt	r4,r3,1000b354 <__adddf3+0x410>
1000b078:	01000804 	movi	r4,32
1000b07c:	20c9c83a 	sub	r4,r4,r3
1000b080:	30ced83a 	srl	r7,r6,r3
1000b084:	1110983a 	sll	r8,r2,r4
1000b088:	3108983a 	sll	r4,r6,r4
1000b08c:	10c6d83a 	srl	r3,r2,r3
1000b090:	41c4b03a 	or	r2,r8,r7
1000b094:	2008c03a 	cmpne	r4,r4,zero
1000b098:	110cb03a 	or	r6,r2,r4
1000b09c:	818dc83a 	sub	r6,r16,r6
1000b0a0:	81a1803a 	cmpltu	r16,r16,r6
1000b0a4:	28cbc83a 	sub	r5,r5,r3
1000b0a8:	2c0bc83a 	sub	r5,r5,r16
1000b0ac:	3021883a 	mov	r16,r6
1000b0b0:	2880202c 	andhi	r2,r5,128
1000b0b4:	103fc226 	beq	r2,zero,1000afc0 <__alt_data_end+0xf800afc0>
1000b0b8:	04c02034 	movhi	r19,128
1000b0bc:	9cffffc4 	addi	r19,r19,-1
1000b0c0:	2ce6703a 	and	r19,r5,r19
1000b0c4:	98006c26 	beq	r19,zero,1000b278 <__adddf3+0x334>
1000b0c8:	9809883a 	mov	r4,r19
1000b0cc:	000d61c0 	call	1000d61c <__clzsi2>
1000b0d0:	10fffe04 	addi	r3,r2,-8
1000b0d4:	010007c4 	movi	r4,31
1000b0d8:	20c06d16 	blt	r4,r3,1000b290 <__adddf3+0x34c>
1000b0dc:	01000a04 	movi	r4,40
1000b0e0:	2085c83a 	sub	r2,r4,r2
1000b0e4:	8084d83a 	srl	r2,r16,r2
1000b0e8:	98e6983a 	sll	r19,r19,r3
1000b0ec:	80e0983a 	sll	r16,r16,r3
1000b0f0:	14c4b03a 	or	r2,r2,r19
1000b0f4:	1c406a16 	blt	r3,r17,1000b2a0 <__adddf3+0x35c>
1000b0f8:	1c63c83a 	sub	r17,r3,r17
1000b0fc:	89400044 	addi	r5,r17,1
1000b100:	00c007c4 	movi	r3,31
1000b104:	19408616 	blt	r3,r5,1000b320 <__adddf3+0x3dc>
1000b108:	1c47c83a 	sub	r3,r3,r17
1000b10c:	8148d83a 	srl	r4,r16,r5
1000b110:	80e0983a 	sll	r16,r16,r3
1000b114:	10c6983a 	sll	r3,r2,r3
1000b118:	114ad83a 	srl	r5,r2,r5
1000b11c:	8004c03a 	cmpne	r2,r16,zero
1000b120:	20e0b03a 	or	r16,r4,r3
1000b124:	80a0b03a 	or	r16,r16,r2
1000b128:	0023883a 	mov	r17,zero
1000b12c:	003fa406 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b130:	2880202c 	andhi	r2,r5,128
1000b134:	9007883a 	mov	r3,r18
1000b138:	103fad1e 	bne	r2,zero,1000aff0 <__alt_data_end+0xf800aff0>
1000b13c:	2804977a 	slli	r2,r5,29
1000b140:	8020d0fa 	srli	r16,r16,3
1000b144:	0101ffc4 	movi	r4,2047
1000b148:	280ad0fa 	srli	r5,r5,3
1000b14c:	1404b03a 	or	r2,r2,r16
1000b150:	8900031e 	bne	r17,r4,1000b160 <__adddf3+0x21c>
1000b154:	1148b03a 	or	r4,r2,r5
1000b158:	20005626 	beq	r4,zero,1000b2b4 <__adddf3+0x370>
1000b15c:	29400234 	orhi	r5,r5,8
1000b160:	01000434 	movhi	r4,16
1000b164:	213fffc4 	addi	r4,r4,-1
1000b168:	290a703a 	and	r5,r5,r4
1000b16c:	003fab06 	br	1000b01c <__alt_data_end+0xf800b01c>
1000b170:	890fc83a 	sub	r7,r17,r4
1000b174:	01c0560e 	bge	zero,r7,1000b2d0 <__adddf3+0x38c>
1000b178:	20002426 	beq	r4,zero,1000b20c <__adddf3+0x2c8>
1000b17c:	0101ffc4 	movi	r4,2047
1000b180:	893f8f26 	beq	r17,r4,1000afc0 <__alt_data_end+0xf800afc0>
1000b184:	10802034 	orhi	r2,r2,128
1000b188:	01000e04 	movi	r4,56
1000b18c:	21c09d0e 	bge	r4,r7,1000b404 <__adddf3+0x4c0>
1000b190:	118cb03a 	or	r6,r2,r6
1000b194:	300cc03a 	cmpne	r6,r6,zero
1000b198:	000f883a 	mov	r7,zero
1000b19c:	340d883a 	add	r6,r6,r16
1000b1a0:	3421803a 	cmpltu	r16,r6,r16
1000b1a4:	394b883a 	add	r5,r7,r5
1000b1a8:	2c0b883a 	add	r5,r5,r16
1000b1ac:	3021883a 	mov	r16,r6
1000b1b0:	2880202c 	andhi	r2,r5,128
1000b1b4:	103f8226 	beq	r2,zero,1000afc0 <__alt_data_end+0xf800afc0>
1000b1b8:	8c400044 	addi	r17,r17,1
1000b1bc:	0081ffc4 	movi	r2,2047
1000b1c0:	8880cb26 	beq	r17,r2,1000b4f0 <__adddf3+0x5ac>
1000b1c4:	00bfe034 	movhi	r2,65408
1000b1c8:	10bfffc4 	addi	r2,r2,-1
1000b1cc:	288a703a 	and	r5,r5,r2
1000b1d0:	8006d07a 	srli	r3,r16,1
1000b1d4:	280497fa 	slli	r2,r5,31
1000b1d8:	8400004c 	andi	r16,r16,1
1000b1dc:	80e0b03a 	or	r16,r16,r3
1000b1e0:	80a0b03a 	or	r16,r16,r2
1000b1e4:	280ad07a 	srli	r5,r5,1
1000b1e8:	003f7506 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b1ec:	18ffffc4 	addi	r3,r3,-1
1000b1f0:	1800481e 	bne	r3,zero,1000b314 <__adddf3+0x3d0>
1000b1f4:	818dc83a 	sub	r6,r16,r6
1000b1f8:	81a1803a 	cmpltu	r16,r16,r6
1000b1fc:	288bc83a 	sub	r5,r5,r2
1000b200:	2c0bc83a 	sub	r5,r5,r16
1000b204:	3021883a 	mov	r16,r6
1000b208:	003fa906 	br	1000b0b0 <__alt_data_end+0xf800b0b0>
1000b20c:	1188b03a 	or	r4,r2,r6
1000b210:	203f6b26 	beq	r4,zero,1000afc0 <__alt_data_end+0xf800afc0>
1000b214:	39ffffc4 	addi	r7,r7,-1
1000b218:	3800931e 	bne	r7,zero,1000b468 <__adddf3+0x524>
1000b21c:	340d883a 	add	r6,r6,r16
1000b220:	3421803a 	cmpltu	r16,r6,r16
1000b224:	114b883a 	add	r5,r2,r5
1000b228:	2c0b883a 	add	r5,r5,r16
1000b22c:	3021883a 	mov	r16,r6
1000b230:	003fdf06 	br	1000b1b0 <__alt_data_end+0xf800b1b0>
1000b234:	1800531e 	bne	r3,zero,1000b384 <__adddf3+0x440>
1000b238:	88c00044 	addi	r3,r17,1
1000b23c:	18c1ffcc 	andi	r3,r3,2047
1000b240:	01000044 	movi	r4,1
1000b244:	20c0a00e 	bge	r4,r3,1000b4c8 <__adddf3+0x584>
1000b248:	8187c83a 	sub	r3,r16,r6
1000b24c:	80c9803a 	cmpltu	r4,r16,r3
1000b250:	28a7c83a 	sub	r19,r5,r2
1000b254:	9927c83a 	sub	r19,r19,r4
1000b258:	9900202c 	andhi	r4,r19,128
1000b25c:	20006226 	beq	r4,zero,1000b3e8 <__adddf3+0x4a4>
1000b260:	3421c83a 	sub	r16,r6,r16
1000b264:	1145c83a 	sub	r2,r2,r5
1000b268:	340d803a 	cmpltu	r6,r6,r16
1000b26c:	11a7c83a 	sub	r19,r2,r6
1000b270:	3825883a 	mov	r18,r7
1000b274:	983f941e 	bne	r19,zero,1000b0c8 <__alt_data_end+0xf800b0c8>
1000b278:	8009883a 	mov	r4,r16
1000b27c:	000d61c0 	call	1000d61c <__clzsi2>
1000b280:	10800804 	addi	r2,r2,32
1000b284:	10fffe04 	addi	r3,r2,-8
1000b288:	010007c4 	movi	r4,31
1000b28c:	20ff930e 	bge	r4,r3,1000b0dc <__alt_data_end+0xf800b0dc>
1000b290:	10bff604 	addi	r2,r2,-40
1000b294:	8084983a 	sll	r2,r16,r2
1000b298:	0021883a 	mov	r16,zero
1000b29c:	1c7f960e 	bge	r3,r17,1000b0f8 <__alt_data_end+0xf800b0f8>
1000b2a0:	017fe034 	movhi	r5,65408
1000b2a4:	297fffc4 	addi	r5,r5,-1
1000b2a8:	88e3c83a 	sub	r17,r17,r3
1000b2ac:	114a703a 	and	r5,r2,r5
1000b2b0:	003f4306 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b2b4:	000b883a 	mov	r5,zero
1000b2b8:	0005883a 	mov	r2,zero
1000b2bc:	003f5706 	br	1000b01c <__alt_data_end+0xf800b01c>
1000b2c0:	118cb03a 	or	r6,r2,r6
1000b2c4:	300cc03a 	cmpne	r6,r6,zero
1000b2c8:	0007883a 	mov	r3,zero
1000b2cc:	003f7306 	br	1000b09c <__alt_data_end+0xf800b09c>
1000b2d0:	3800961e 	bne	r7,zero,1000b52c <__adddf3+0x5e8>
1000b2d4:	89000044 	addi	r4,r17,1
1000b2d8:	2201ffcc 	andi	r8,r4,2047
1000b2dc:	01c00044 	movi	r7,1
1000b2e0:	3a00680e 	bge	r7,r8,1000b484 <__adddf3+0x540>
1000b2e4:	01c1ffc4 	movi	r7,2047
1000b2e8:	21c0a726 	beq	r4,r7,1000b588 <__adddf3+0x644>
1000b2ec:	340d883a 	add	r6,r6,r16
1000b2f0:	3421803a 	cmpltu	r16,r6,r16
1000b2f4:	114b883a 	add	r5,r2,r5
1000b2f8:	2c0b883a 	add	r5,r5,r16
1000b2fc:	282097fa 	slli	r16,r5,31
1000b300:	300cd07a 	srli	r6,r6,1
1000b304:	280ad07a 	srli	r5,r5,1
1000b308:	2023883a 	mov	r17,r4
1000b30c:	81a0b03a 	or	r16,r16,r6
1000b310:	003f2b06 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b314:	0101ffc4 	movi	r4,2047
1000b318:	893f531e 	bne	r17,r4,1000b068 <__alt_data_end+0xf800b068>
1000b31c:	003f2806 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b320:	893ff844 	addi	r4,r17,-31
1000b324:	00c00804 	movi	r3,32
1000b328:	1108d83a 	srl	r4,r2,r4
1000b32c:	28c05126 	beq	r5,r3,1000b474 <__adddf3+0x530>
1000b330:	00c00fc4 	movi	r3,63
1000b334:	1c63c83a 	sub	r17,r3,r17
1000b338:	1444983a 	sll	r2,r2,r17
1000b33c:	1420b03a 	or	r16,r2,r16
1000b340:	8020c03a 	cmpne	r16,r16,zero
1000b344:	8120b03a 	or	r16,r16,r4
1000b348:	000b883a 	mov	r5,zero
1000b34c:	0023883a 	mov	r17,zero
1000b350:	003f1b06 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b354:	193ff804 	addi	r4,r3,-32
1000b358:	01c00804 	movi	r7,32
1000b35c:	1108d83a 	srl	r4,r2,r4
1000b360:	19c04626 	beq	r3,r7,1000b47c <__adddf3+0x538>
1000b364:	01c01004 	movi	r7,64
1000b368:	38c7c83a 	sub	r3,r7,r3
1000b36c:	10c4983a 	sll	r2,r2,r3
1000b370:	118cb03a 	or	r6,r2,r6
1000b374:	300cc03a 	cmpne	r6,r6,zero
1000b378:	310cb03a 	or	r6,r6,r4
1000b37c:	0007883a 	mov	r3,zero
1000b380:	003f4606 	br	1000b09c <__alt_data_end+0xf800b09c>
1000b384:	88002b26 	beq	r17,zero,1000b434 <__adddf3+0x4f0>
1000b388:	0201ffc4 	movi	r8,2047
1000b38c:	22002f26 	beq	r4,r8,1000b44c <__adddf3+0x508>
1000b390:	00c7c83a 	sub	r3,zero,r3
1000b394:	29402034 	orhi	r5,r5,128
1000b398:	02000e04 	movi	r8,56
1000b39c:	40c07616 	blt	r8,r3,1000b578 <__adddf3+0x634>
1000b3a0:	020007c4 	movi	r8,31
1000b3a4:	40c0d216 	blt	r8,r3,1000b6f0 <__adddf3+0x7ac>
1000b3a8:	02000804 	movi	r8,32
1000b3ac:	40d1c83a 	sub	r8,r8,r3
1000b3b0:	2a14983a 	sll	r10,r5,r8
1000b3b4:	80d2d83a 	srl	r9,r16,r3
1000b3b8:	8210983a 	sll	r8,r16,r8
1000b3bc:	28cad83a 	srl	r5,r5,r3
1000b3c0:	5252b03a 	or	r9,r10,r9
1000b3c4:	4006c03a 	cmpne	r3,r8,zero
1000b3c8:	48e0b03a 	or	r16,r9,r3
1000b3cc:	3421c83a 	sub	r16,r6,r16
1000b3d0:	114bc83a 	sub	r5,r2,r5
1000b3d4:	340d803a 	cmpltu	r6,r6,r16
1000b3d8:	298bc83a 	sub	r5,r5,r6
1000b3dc:	2023883a 	mov	r17,r4
1000b3e0:	3825883a 	mov	r18,r7
1000b3e4:	003f3206 	br	1000b0b0 <__alt_data_end+0xf800b0b0>
1000b3e8:	98c4b03a 	or	r2,r19,r3
1000b3ec:	10001c1e 	bne	r2,zero,1000b460 <__adddf3+0x51c>
1000b3f0:	0007883a 	mov	r3,zero
1000b3f4:	000b883a 	mov	r5,zero
1000b3f8:	0021883a 	mov	r16,zero
1000b3fc:	0023883a 	mov	r17,zero
1000b400:	003f4e06 	br	1000b13c <__alt_data_end+0xf800b13c>
1000b404:	010007c4 	movi	r4,31
1000b408:	21c03c16 	blt	r4,r7,1000b4fc <__adddf3+0x5b8>
1000b40c:	01000804 	movi	r4,32
1000b410:	21c9c83a 	sub	r4,r4,r7
1000b414:	31d0d83a 	srl	r8,r6,r7
1000b418:	1112983a 	sll	r9,r2,r4
1000b41c:	3108983a 	sll	r4,r6,r4
1000b420:	11ced83a 	srl	r7,r2,r7
1000b424:	4a04b03a 	or	r2,r9,r8
1000b428:	2008c03a 	cmpne	r4,r4,zero
1000b42c:	110cb03a 	or	r6,r2,r4
1000b430:	003f5a06 	br	1000b19c <__alt_data_end+0xf800b19c>
1000b434:	2c10b03a 	or	r8,r5,r16
1000b438:	40000426 	beq	r8,zero,1000b44c <__adddf3+0x508>
1000b43c:	00c6303a 	nor	r3,zero,r3
1000b440:	183fe226 	beq	r3,zero,1000b3cc <__alt_data_end+0xf800b3cc>
1000b444:	0201ffc4 	movi	r8,2047
1000b448:	223fd31e 	bne	r4,r8,1000b398 <__alt_data_end+0xf800b398>
1000b44c:	100b883a 	mov	r5,r2
1000b450:	3021883a 	mov	r16,r6
1000b454:	2023883a 	mov	r17,r4
1000b458:	3825883a 	mov	r18,r7
1000b45c:	003ed806 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b460:	1821883a 	mov	r16,r3
1000b464:	003f1706 	br	1000b0c4 <__alt_data_end+0xf800b0c4>
1000b468:	0101ffc4 	movi	r4,2047
1000b46c:	893f461e 	bne	r17,r4,1000b188 <__alt_data_end+0xf800b188>
1000b470:	003ed306 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b474:	0005883a 	mov	r2,zero
1000b478:	003fb006 	br	1000b33c <__alt_data_end+0xf800b33c>
1000b47c:	0005883a 	mov	r2,zero
1000b480:	003fbb06 	br	1000b370 <__alt_data_end+0xf800b370>
1000b484:	2c06b03a 	or	r3,r5,r16
1000b488:	8800841e 	bne	r17,zero,1000b69c <__adddf3+0x758>
1000b48c:	1800b226 	beq	r3,zero,1000b758 <__adddf3+0x814>
1000b490:	1186b03a 	or	r3,r2,r6
1000b494:	183eca26 	beq	r3,zero,1000afc0 <__alt_data_end+0xf800afc0>
1000b498:	340d883a 	add	r6,r6,r16
1000b49c:	114b883a 	add	r5,r2,r5
1000b4a0:	3421803a 	cmpltu	r16,r6,r16
1000b4a4:	2c0b883a 	add	r5,r5,r16
1000b4a8:	2880202c 	andhi	r2,r5,128
1000b4ac:	1000c026 	beq	r2,zero,1000b7b0 <__adddf3+0x86c>
1000b4b0:	00bfe034 	movhi	r2,65408
1000b4b4:	10bfffc4 	addi	r2,r2,-1
1000b4b8:	288a703a 	and	r5,r5,r2
1000b4bc:	3021883a 	mov	r16,r6
1000b4c0:	3823883a 	mov	r17,r7
1000b4c4:	003ebe06 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b4c8:	2c06b03a 	or	r3,r5,r16
1000b4cc:	8800221e 	bne	r17,zero,1000b558 <__adddf3+0x614>
1000b4d0:	1800481e 	bne	r3,zero,1000b5f4 <__adddf3+0x6b0>
1000b4d4:	1186b03a 	or	r3,r2,r6
1000b4d8:	18000426 	beq	r3,zero,1000b4ec <__adddf3+0x5a8>
1000b4dc:	100b883a 	mov	r5,r2
1000b4e0:	3021883a 	mov	r16,r6
1000b4e4:	3825883a 	mov	r18,r7
1000b4e8:	003eb506 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b4ec:	0007883a 	mov	r3,zero
1000b4f0:	000b883a 	mov	r5,zero
1000b4f4:	0021883a 	mov	r16,zero
1000b4f8:	003f1006 	br	1000b13c <__alt_data_end+0xf800b13c>
1000b4fc:	393ff804 	addi	r4,r7,-32
1000b500:	02000804 	movi	r8,32
1000b504:	1108d83a 	srl	r4,r2,r4
1000b508:	3a007726 	beq	r7,r8,1000b6e8 <__adddf3+0x7a4>
1000b50c:	02001004 	movi	r8,64
1000b510:	41cfc83a 	sub	r7,r8,r7
1000b514:	11c4983a 	sll	r2,r2,r7
1000b518:	118cb03a 	or	r6,r2,r6
1000b51c:	300cc03a 	cmpne	r6,r6,zero
1000b520:	310cb03a 	or	r6,r6,r4
1000b524:	000f883a 	mov	r7,zero
1000b528:	003f1c06 	br	1000b19c <__alt_data_end+0xf800b19c>
1000b52c:	88001a1e 	bne	r17,zero,1000b598 <__adddf3+0x654>
1000b530:	2c10b03a 	or	r8,r5,r16
1000b534:	40005526 	beq	r8,zero,1000b68c <__adddf3+0x748>
1000b538:	01ce303a 	nor	r7,zero,r7
1000b53c:	3800511e 	bne	r7,zero,1000b684 <__adddf3+0x740>
1000b540:	81a1883a 	add	r16,r16,r6
1000b544:	114b883a 	add	r5,r2,r5
1000b548:	818d803a 	cmpltu	r6,r16,r6
1000b54c:	298b883a 	add	r5,r5,r6
1000b550:	2023883a 	mov	r17,r4
1000b554:	003f1606 	br	1000b1b0 <__alt_data_end+0xf800b1b0>
1000b558:	1800341e 	bne	r3,zero,1000b62c <__adddf3+0x6e8>
1000b55c:	1186b03a 	or	r3,r2,r6
1000b560:	18006f26 	beq	r3,zero,1000b720 <__adddf3+0x7dc>
1000b564:	100b883a 	mov	r5,r2
1000b568:	3021883a 	mov	r16,r6
1000b56c:	3825883a 	mov	r18,r7
1000b570:	0441ffc4 	movi	r17,2047
1000b574:	003e9206 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b578:	2c20b03a 	or	r16,r5,r16
1000b57c:	8020c03a 	cmpne	r16,r16,zero
1000b580:	000b883a 	mov	r5,zero
1000b584:	003f9106 	br	1000b3cc <__alt_data_end+0xf800b3cc>
1000b588:	2023883a 	mov	r17,r4
1000b58c:	000b883a 	mov	r5,zero
1000b590:	0021883a 	mov	r16,zero
1000b594:	003ee906 	br	1000b13c <__alt_data_end+0xf800b13c>
1000b598:	0201ffc4 	movi	r8,2047
1000b59c:	22003b26 	beq	r4,r8,1000b68c <__adddf3+0x748>
1000b5a0:	01cfc83a 	sub	r7,zero,r7
1000b5a4:	29402034 	orhi	r5,r5,128
1000b5a8:	02000e04 	movi	r8,56
1000b5ac:	41c06216 	blt	r8,r7,1000b738 <__adddf3+0x7f4>
1000b5b0:	020007c4 	movi	r8,31
1000b5b4:	41c07016 	blt	r8,r7,1000b778 <__adddf3+0x834>
1000b5b8:	02000804 	movi	r8,32
1000b5bc:	41d1c83a 	sub	r8,r8,r7
1000b5c0:	2a14983a 	sll	r10,r5,r8
1000b5c4:	81d2d83a 	srl	r9,r16,r7
1000b5c8:	8210983a 	sll	r8,r16,r8
1000b5cc:	29cad83a 	srl	r5,r5,r7
1000b5d0:	5252b03a 	or	r9,r10,r9
1000b5d4:	400ec03a 	cmpne	r7,r8,zero
1000b5d8:	49e0b03a 	or	r16,r9,r7
1000b5dc:	81a1883a 	add	r16,r16,r6
1000b5e0:	2885883a 	add	r2,r5,r2
1000b5e4:	818d803a 	cmpltu	r6,r16,r6
1000b5e8:	118b883a 	add	r5,r2,r6
1000b5ec:	2023883a 	mov	r17,r4
1000b5f0:	003eef06 	br	1000b1b0 <__alt_data_end+0xf800b1b0>
1000b5f4:	1186b03a 	or	r3,r2,r6
1000b5f8:	183e7126 	beq	r3,zero,1000afc0 <__alt_data_end+0xf800afc0>
1000b5fc:	8187c83a 	sub	r3,r16,r6
1000b600:	80d1803a 	cmpltu	r8,r16,r3
1000b604:	2889c83a 	sub	r4,r5,r2
1000b608:	2209c83a 	sub	r4,r4,r8
1000b60c:	2200202c 	andhi	r8,r4,128
1000b610:	40005426 	beq	r8,zero,1000b764 <__adddf3+0x820>
1000b614:	3421c83a 	sub	r16,r6,r16
1000b618:	114bc83a 	sub	r5,r2,r5
1000b61c:	340d803a 	cmpltu	r6,r6,r16
1000b620:	298bc83a 	sub	r5,r5,r6
1000b624:	3825883a 	mov	r18,r7
1000b628:	003e6506 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b62c:	1186b03a 	or	r3,r2,r6
1000b630:	18002b26 	beq	r3,zero,1000b6e0 <__adddf3+0x79c>
1000b634:	2806d0fa 	srli	r3,r5,3
1000b638:	8020d0fa 	srli	r16,r16,3
1000b63c:	280a977a 	slli	r5,r5,29
1000b640:	1900022c 	andhi	r4,r3,8
1000b644:	2c20b03a 	or	r16,r5,r16
1000b648:	20000826 	beq	r4,zero,1000b66c <__adddf3+0x728>
1000b64c:	1008d0fa 	srli	r4,r2,3
1000b650:	2140022c 	andhi	r5,r4,8
1000b654:	2800051e 	bne	r5,zero,1000b66c <__adddf3+0x728>
1000b658:	300cd0fa 	srli	r6,r6,3
1000b65c:	1004977a 	slli	r2,r2,29
1000b660:	2007883a 	mov	r3,r4
1000b664:	3825883a 	mov	r18,r7
1000b668:	11a0b03a 	or	r16,r2,r6
1000b66c:	800ad77a 	srli	r5,r16,29
1000b670:	180690fa 	slli	r3,r3,3
1000b674:	802090fa 	slli	r16,r16,3
1000b678:	0441ffc4 	movi	r17,2047
1000b67c:	28cab03a 	or	r5,r5,r3
1000b680:	003e4f06 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b684:	0201ffc4 	movi	r8,2047
1000b688:	223fc71e 	bne	r4,r8,1000b5a8 <__alt_data_end+0xf800b5a8>
1000b68c:	100b883a 	mov	r5,r2
1000b690:	3021883a 	mov	r16,r6
1000b694:	2023883a 	mov	r17,r4
1000b698:	003e4906 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b69c:	18002a26 	beq	r3,zero,1000b748 <__adddf3+0x804>
1000b6a0:	1186b03a 	or	r3,r2,r6
1000b6a4:	18000e26 	beq	r3,zero,1000b6e0 <__adddf3+0x79c>
1000b6a8:	2806d0fa 	srli	r3,r5,3
1000b6ac:	8020d0fa 	srli	r16,r16,3
1000b6b0:	280a977a 	slli	r5,r5,29
1000b6b4:	1900022c 	andhi	r4,r3,8
1000b6b8:	2c20b03a 	or	r16,r5,r16
1000b6bc:	203feb26 	beq	r4,zero,1000b66c <__alt_data_end+0xf800b66c>
1000b6c0:	1008d0fa 	srli	r4,r2,3
1000b6c4:	2140022c 	andhi	r5,r4,8
1000b6c8:	283fe81e 	bne	r5,zero,1000b66c <__alt_data_end+0xf800b66c>
1000b6cc:	300cd0fa 	srli	r6,r6,3
1000b6d0:	1004977a 	slli	r2,r2,29
1000b6d4:	2007883a 	mov	r3,r4
1000b6d8:	11a0b03a 	or	r16,r2,r6
1000b6dc:	003fe306 	br	1000b66c <__alt_data_end+0xf800b66c>
1000b6e0:	0441ffc4 	movi	r17,2047
1000b6e4:	003e3606 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b6e8:	0005883a 	mov	r2,zero
1000b6ec:	003f8a06 	br	1000b518 <__alt_data_end+0xf800b518>
1000b6f0:	1a3ff804 	addi	r8,r3,-32
1000b6f4:	02400804 	movi	r9,32
1000b6f8:	2a10d83a 	srl	r8,r5,r8
1000b6fc:	1a402a26 	beq	r3,r9,1000b7a8 <__adddf3+0x864>
1000b700:	02401004 	movi	r9,64
1000b704:	48c7c83a 	sub	r3,r9,r3
1000b708:	28ca983a 	sll	r5,r5,r3
1000b70c:	2c20b03a 	or	r16,r5,r16
1000b710:	8020c03a 	cmpne	r16,r16,zero
1000b714:	8220b03a 	or	r16,r16,r8
1000b718:	000b883a 	mov	r5,zero
1000b71c:	003f2b06 	br	1000b3cc <__alt_data_end+0xf800b3cc>
1000b720:	0007883a 	mov	r3,zero
1000b724:	01402034 	movhi	r5,128
1000b728:	297fffc4 	addi	r5,r5,-1
1000b72c:	043ffe04 	movi	r16,-8
1000b730:	0441ffc4 	movi	r17,2047
1000b734:	003e8106 	br	1000b13c <__alt_data_end+0xf800b13c>
1000b738:	2c20b03a 	or	r16,r5,r16
1000b73c:	8020c03a 	cmpne	r16,r16,zero
1000b740:	000b883a 	mov	r5,zero
1000b744:	003fa506 	br	1000b5dc <__alt_data_end+0xf800b5dc>
1000b748:	100b883a 	mov	r5,r2
1000b74c:	3021883a 	mov	r16,r6
1000b750:	0441ffc4 	movi	r17,2047
1000b754:	003e1a06 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b758:	100b883a 	mov	r5,r2
1000b75c:	3021883a 	mov	r16,r6
1000b760:	003e1706 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b764:	20c4b03a 	or	r2,r4,r3
1000b768:	103f6026 	beq	r2,zero,1000b4ec <__alt_data_end+0xf800b4ec>
1000b76c:	200b883a 	mov	r5,r4
1000b770:	1821883a 	mov	r16,r3
1000b774:	003e1206 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b778:	3a3ff804 	addi	r8,r7,-32
1000b77c:	02400804 	movi	r9,32
1000b780:	2a10d83a 	srl	r8,r5,r8
1000b784:	3a400c26 	beq	r7,r9,1000b7b8 <__adddf3+0x874>
1000b788:	02401004 	movi	r9,64
1000b78c:	49cfc83a 	sub	r7,r9,r7
1000b790:	29ca983a 	sll	r5,r5,r7
1000b794:	2c20b03a 	or	r16,r5,r16
1000b798:	8020c03a 	cmpne	r16,r16,zero
1000b79c:	8220b03a 	or	r16,r16,r8
1000b7a0:	000b883a 	mov	r5,zero
1000b7a4:	003f8d06 	br	1000b5dc <__alt_data_end+0xf800b5dc>
1000b7a8:	000b883a 	mov	r5,zero
1000b7ac:	003fd706 	br	1000b70c <__alt_data_end+0xf800b70c>
1000b7b0:	3021883a 	mov	r16,r6
1000b7b4:	003e0206 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b7b8:	000b883a 	mov	r5,zero
1000b7bc:	003ff506 	br	1000b794 <__alt_data_end+0xf800b794>

1000b7c0 <__divdf3>:
1000b7c0:	defff004 	addi	sp,sp,-64
1000b7c4:	dd000a15 	stw	r20,40(sp)
1000b7c8:	2828d53a 	srli	r20,r5,20
1000b7cc:	dd800c15 	stw	r22,48(sp)
1000b7d0:	282cd7fa 	srli	r22,r5,31
1000b7d4:	df000e15 	stw	fp,56(sp)
1000b7d8:	dcc00915 	stw	r19,36(sp)
1000b7dc:	dc800815 	stw	r18,32(sp)
1000b7e0:	04c00434 	movhi	r19,16
1000b7e4:	9cffffc4 	addi	r19,r19,-1
1000b7e8:	dfc00f15 	stw	ra,60(sp)
1000b7ec:	ddc00d15 	stw	r23,52(sp)
1000b7f0:	dd400b15 	stw	r21,44(sp)
1000b7f4:	dc400715 	stw	r17,28(sp)
1000b7f8:	dc000615 	stw	r16,24(sp)
1000b7fc:	a501ffcc 	andi	r20,r20,2047
1000b800:	2025883a 	mov	r18,r4
1000b804:	2ce6703a 	and	r19,r5,r19
1000b808:	b7003fcc 	andi	fp,r22,255
1000b80c:	a0006a26 	beq	r20,zero,1000b9b8 <__divdf3+0x1f8>
1000b810:	0081ffc4 	movi	r2,2047
1000b814:	2021883a 	mov	r16,r4
1000b818:	a0803726 	beq	r20,r2,1000b8f8 <__divdf3+0x138>
1000b81c:	98800434 	orhi	r2,r19,16
1000b820:	100490fa 	slli	r2,r2,3
1000b824:	2026d77a 	srli	r19,r4,29
1000b828:	202090fa 	slli	r16,r4,3
1000b82c:	a53f0044 	addi	r20,r20,-1023
1000b830:	14e6b03a 	or	r19,r2,r19
1000b834:	002b883a 	mov	r21,zero
1000b838:	0013883a 	mov	r9,zero
1000b83c:	3804d53a 	srli	r2,r7,20
1000b840:	382ed7fa 	srli	r23,r7,31
1000b844:	04400434 	movhi	r17,16
1000b848:	8c7fffc4 	addi	r17,r17,-1
1000b84c:	1081ffcc 	andi	r2,r2,2047
1000b850:	3025883a 	mov	r18,r6
1000b854:	3c62703a 	and	r17,r7,r17
1000b858:	ba803fcc 	andi	r10,r23,255
1000b85c:	10007326 	beq	r2,zero,1000ba2c <__divdf3+0x26c>
1000b860:	0101ffc4 	movi	r4,2047
1000b864:	11006b26 	beq	r2,r4,1000ba14 <__divdf3+0x254>
1000b868:	89000434 	orhi	r4,r17,16
1000b86c:	200890fa 	slli	r4,r4,3
1000b870:	3022d77a 	srli	r17,r6,29
1000b874:	302490fa 	slli	r18,r6,3
1000b878:	10bf0044 	addi	r2,r2,-1023
1000b87c:	2462b03a 	or	r17,r4,r17
1000b880:	000f883a 	mov	r7,zero
1000b884:	b5caf03a 	xor	r5,r22,r23
1000b888:	3d48b03a 	or	r4,r7,r21
1000b88c:	00c003c4 	movi	r3,15
1000b890:	2811883a 	mov	r8,r5
1000b894:	2d403fcc 	andi	r21,r5,255
1000b898:	19009436 	bltu	r3,r4,1000baec <__divdf3+0x32c>
1000b89c:	2109883a 	add	r4,r4,r4
1000b8a0:	00c40074 	movhi	r3,4097
1000b8a4:	18ee2e04 	addi	r3,r3,-18248
1000b8a8:	2109883a 	add	r4,r4,r4
1000b8ac:	20c9883a 	add	r4,r4,r3
1000b8b0:	20c00017 	ldw	r3,0(r4)
1000b8b4:	1800683a 	jmp	r3
1000b8b8:	1000baec 	andhi	zero,r2,747
1000b8bc:	1000b954 	ori	zero,r2,741
1000b8c0:	1000badc 	xori	zero,r2,747
1000b8c4:	1000b924 	muli	zero,r2,740
1000b8c8:	1000badc 	xori	zero,r2,747
1000b8cc:	1000bac4 	addi	zero,r2,747
1000b8d0:	1000badc 	xori	zero,r2,747
1000b8d4:	1000b924 	muli	zero,r2,740
1000b8d8:	1000b954 	ori	zero,r2,741
1000b8dc:	1000b954 	ori	zero,r2,741
1000b8e0:	1000bac4 	addi	zero,r2,747
1000b8e4:	1000b924 	muli	zero,r2,740
1000b8e8:	1000b914 	ori	zero,r2,740
1000b8ec:	1000b914 	ori	zero,r2,740
1000b8f0:	1000b914 	ori	zero,r2,740
1000b8f4:	1000be7c 	xorhi	zero,r2,761
1000b8f8:	9904b03a 	or	r2,r19,r4
1000b8fc:	10006e1e 	bne	r2,zero,1000bab8 <__divdf3+0x2f8>
1000b900:	05400204 	movi	r21,8
1000b904:	0027883a 	mov	r19,zero
1000b908:	0021883a 	mov	r16,zero
1000b90c:	02400084 	movi	r9,2
1000b910:	003fca06 	br	1000b83c <__alt_data_end+0xf800b83c>
1000b914:	9823883a 	mov	r17,r19
1000b918:	8025883a 	mov	r18,r16
1000b91c:	e015883a 	mov	r10,fp
1000b920:	480f883a 	mov	r7,r9
1000b924:	00800084 	movi	r2,2
1000b928:	38800926 	beq	r7,r2,1000b950 <__divdf3+0x190>
1000b92c:	008000c4 	movi	r2,3
1000b930:	38820226 	beq	r7,r2,1000c13c <__divdf3+0x97c>
1000b934:	00800044 	movi	r2,1
1000b938:	3881b81e 	bne	r7,r2,1000c01c <__divdf3+0x85c>
1000b93c:	5011883a 	mov	r8,r10
1000b940:	0005883a 	mov	r2,zero
1000b944:	0027883a 	mov	r19,zero
1000b948:	0021883a 	mov	r16,zero
1000b94c:	00000506 	br	1000b964 <__divdf3+0x1a4>
1000b950:	502b883a 	mov	r21,r10
1000b954:	aa00004c 	andi	r8,r21,1
1000b958:	0081ffc4 	movi	r2,2047
1000b95c:	0027883a 	mov	r19,zero
1000b960:	0021883a 	mov	r16,zero
1000b964:	1004953a 	slli	r2,r2,20
1000b968:	42003fcc 	andi	r8,r8,255
1000b96c:	401097fa 	slli	r8,r8,31
1000b970:	00c00434 	movhi	r3,16
1000b974:	18ffffc4 	addi	r3,r3,-1
1000b978:	98e6703a 	and	r19,r19,r3
1000b97c:	9886b03a 	or	r3,r19,r2
1000b980:	1a06b03a 	or	r3,r3,r8
1000b984:	8005883a 	mov	r2,r16
1000b988:	dfc00f17 	ldw	ra,60(sp)
1000b98c:	df000e17 	ldw	fp,56(sp)
1000b990:	ddc00d17 	ldw	r23,52(sp)
1000b994:	dd800c17 	ldw	r22,48(sp)
1000b998:	dd400b17 	ldw	r21,44(sp)
1000b99c:	dd000a17 	ldw	r20,40(sp)
1000b9a0:	dcc00917 	ldw	r19,36(sp)
1000b9a4:	dc800817 	ldw	r18,32(sp)
1000b9a8:	dc400717 	ldw	r17,28(sp)
1000b9ac:	dc000617 	ldw	r16,24(sp)
1000b9b0:	dec01004 	addi	sp,sp,64
1000b9b4:	f800283a 	ret
1000b9b8:	9904b03a 	or	r2,r19,r4
1000b9bc:	10003926 	beq	r2,zero,1000baa4 <__divdf3+0x2e4>
1000b9c0:	98015326 	beq	r19,zero,1000bf10 <__divdf3+0x750>
1000b9c4:	9809883a 	mov	r4,r19
1000b9c8:	d9800215 	stw	r6,8(sp)
1000b9cc:	d9c00515 	stw	r7,20(sp)
1000b9d0:	000d61c0 	call	1000d61c <__clzsi2>
1000b9d4:	d9800217 	ldw	r6,8(sp)
1000b9d8:	d9c00517 	ldw	r7,20(sp)
1000b9dc:	00c009c4 	movi	r3,39
1000b9e0:	18814716 	blt	r3,r2,1000bf00 <__divdf3+0x740>
1000b9e4:	01400a04 	movi	r5,40
1000b9e8:	143ffe04 	addi	r16,r2,-8
1000b9ec:	288bc83a 	sub	r5,r5,r2
1000b9f0:	9c26983a 	sll	r19,r19,r16
1000b9f4:	914ad83a 	srl	r5,r18,r5
1000b9f8:	9420983a 	sll	r16,r18,r16
1000b9fc:	2ce6b03a 	or	r19,r5,r19
1000ba00:	053f0344 	movi	r20,-1011
1000ba04:	a0a9c83a 	sub	r20,r20,r2
1000ba08:	002b883a 	mov	r21,zero
1000ba0c:	0013883a 	mov	r9,zero
1000ba10:	003f8a06 	br	1000b83c <__alt_data_end+0xf800b83c>
1000ba14:	8988b03a 	or	r4,r17,r6
1000ba18:	2000201e 	bne	r4,zero,1000ba9c <__divdf3+0x2dc>
1000ba1c:	0023883a 	mov	r17,zero
1000ba20:	0025883a 	mov	r18,zero
1000ba24:	01c00084 	movi	r7,2
1000ba28:	003f9606 	br	1000b884 <__alt_data_end+0xf800b884>
1000ba2c:	8988b03a 	or	r4,r17,r6
1000ba30:	20001626 	beq	r4,zero,1000ba8c <__divdf3+0x2cc>
1000ba34:	88012826 	beq	r17,zero,1000bed8 <__divdf3+0x718>
1000ba38:	8809883a 	mov	r4,r17
1000ba3c:	d9800215 	stw	r6,8(sp)
1000ba40:	da400315 	stw	r9,12(sp)
1000ba44:	da800415 	stw	r10,16(sp)
1000ba48:	000d61c0 	call	1000d61c <__clzsi2>
1000ba4c:	d9800217 	ldw	r6,8(sp)
1000ba50:	da400317 	ldw	r9,12(sp)
1000ba54:	da800417 	ldw	r10,16(sp)
1000ba58:	010009c4 	movi	r4,39
1000ba5c:	20811a16 	blt	r4,r2,1000bec8 <__divdf3+0x708>
1000ba60:	01000a04 	movi	r4,40
1000ba64:	14bffe04 	addi	r18,r2,-8
1000ba68:	2089c83a 	sub	r4,r4,r2
1000ba6c:	8ca2983a 	sll	r17,r17,r18
1000ba70:	3108d83a 	srl	r4,r6,r4
1000ba74:	34a4983a 	sll	r18,r6,r18
1000ba78:	2462b03a 	or	r17,r4,r17
1000ba7c:	013f0344 	movi	r4,-1011
1000ba80:	2085c83a 	sub	r2,r4,r2
1000ba84:	000f883a 	mov	r7,zero
1000ba88:	003f7e06 	br	1000b884 <__alt_data_end+0xf800b884>
1000ba8c:	0023883a 	mov	r17,zero
1000ba90:	0025883a 	mov	r18,zero
1000ba94:	01c00044 	movi	r7,1
1000ba98:	003f7a06 	br	1000b884 <__alt_data_end+0xf800b884>
1000ba9c:	01c000c4 	movi	r7,3
1000baa0:	003f7806 	br	1000b884 <__alt_data_end+0xf800b884>
1000baa4:	05400104 	movi	r21,4
1000baa8:	0027883a 	mov	r19,zero
1000baac:	0021883a 	mov	r16,zero
1000bab0:	02400044 	movi	r9,1
1000bab4:	003f6106 	br	1000b83c <__alt_data_end+0xf800b83c>
1000bab8:	05400304 	movi	r21,12
1000babc:	024000c4 	movi	r9,3
1000bac0:	003f5e06 	br	1000b83c <__alt_data_end+0xf800b83c>
1000bac4:	0011883a 	mov	r8,zero
1000bac8:	04c00434 	movhi	r19,16
1000bacc:	9cffffc4 	addi	r19,r19,-1
1000bad0:	043fffc4 	movi	r16,-1
1000bad4:	0081ffc4 	movi	r2,2047
1000bad8:	003fa206 	br	1000b964 <__alt_data_end+0xf800b964>
1000badc:	0005883a 	mov	r2,zero
1000bae0:	0027883a 	mov	r19,zero
1000bae4:	0021883a 	mov	r16,zero
1000bae8:	003f9e06 	br	1000b964 <__alt_data_end+0xf800b964>
1000baec:	a085c83a 	sub	r2,r20,r2
1000baf0:	d8800115 	stw	r2,4(sp)
1000baf4:	8cc11b36 	bltu	r17,r19,1000bf64 <__divdf3+0x7a4>
1000baf8:	9c411926 	beq	r19,r17,1000bf60 <__divdf3+0x7a0>
1000bafc:	d8c00117 	ldw	r3,4(sp)
1000bb00:	002d883a 	mov	r22,zero
1000bb04:	18ffffc4 	addi	r3,r3,-1
1000bb08:	d8c00115 	stw	r3,4(sp)
1000bb0c:	9006d63a 	srli	r3,r18,24
1000bb10:	8822923a 	slli	r17,r17,8
1000bb14:	9024923a 	slli	r18,r18,8
1000bb18:	9809883a 	mov	r4,r19
1000bb1c:	1c6eb03a 	or	r23,r3,r17
1000bb20:	b828d43a 	srli	r20,r23,16
1000bb24:	dc800015 	stw	r18,0(sp)
1000bb28:	bcbfffcc 	andi	r18,r23,65535
1000bb2c:	a00b883a 	mov	r5,r20
1000bb30:	000af0c0 	call	1000af0c <__udivsi3>
1000bb34:	1009883a 	mov	r4,r2
1000bb38:	900b883a 	mov	r5,r18
1000bb3c:	1039883a 	mov	fp,r2
1000bb40:	000af1c0 	call	1000af1c <__mulsi3>
1000bb44:	9809883a 	mov	r4,r19
1000bb48:	a00b883a 	mov	r5,r20
1000bb4c:	1023883a 	mov	r17,r2
1000bb50:	000af140 	call	1000af14 <__umodsi3>
1000bb54:	1004943a 	slli	r2,r2,16
1000bb58:	8008d43a 	srli	r4,r16,16
1000bb5c:	110ab03a 	or	r5,r2,r4
1000bb60:	2c40062e 	bgeu	r5,r17,1000bb7c <__divdf3+0x3bc>
1000bb64:	2dcb883a 	add	r5,r5,r23
1000bb68:	e0bfffc4 	addi	r2,fp,-1
1000bb6c:	2dc11136 	bltu	r5,r23,1000bfb4 <__divdf3+0x7f4>
1000bb70:	2c41102e 	bgeu	r5,r17,1000bfb4 <__divdf3+0x7f4>
1000bb74:	e73fff84 	addi	fp,fp,-2
1000bb78:	2dcb883a 	add	r5,r5,r23
1000bb7c:	2c67c83a 	sub	r19,r5,r17
1000bb80:	9809883a 	mov	r4,r19
1000bb84:	a00b883a 	mov	r5,r20
1000bb88:	000af0c0 	call	1000af0c <__udivsi3>
1000bb8c:	1009883a 	mov	r4,r2
1000bb90:	900b883a 	mov	r5,r18
1000bb94:	1023883a 	mov	r17,r2
1000bb98:	000af1c0 	call	1000af1c <__mulsi3>
1000bb9c:	9809883a 	mov	r4,r19
1000bba0:	a00b883a 	mov	r5,r20
1000bba4:	d8800215 	stw	r2,8(sp)
1000bba8:	000af140 	call	1000af14 <__umodsi3>
1000bbac:	1004943a 	slli	r2,r2,16
1000bbb0:	da000217 	ldw	r8,8(sp)
1000bbb4:	843fffcc 	andi	r16,r16,65535
1000bbb8:	140eb03a 	or	r7,r2,r16
1000bbbc:	3a00062e 	bgeu	r7,r8,1000bbd8 <__divdf3+0x418>
1000bbc0:	3dcf883a 	add	r7,r7,r23
1000bbc4:	88bfffc4 	addi	r2,r17,-1
1000bbc8:	3dc0f836 	bltu	r7,r23,1000bfac <__divdf3+0x7ec>
1000bbcc:	3a00f72e 	bgeu	r7,r8,1000bfac <__divdf3+0x7ec>
1000bbd0:	8c7fff84 	addi	r17,r17,-2
1000bbd4:	3dcf883a 	add	r7,r7,r23
1000bbd8:	e004943a 	slli	r2,fp,16
1000bbdc:	d8c00017 	ldw	r3,0(sp)
1000bbe0:	3a0fc83a 	sub	r7,r7,r8
1000bbe4:	88a2b03a 	or	r17,r17,r2
1000bbe8:	1f3fffcc 	andi	fp,r3,65535
1000bbec:	8a7fffcc 	andi	r9,r17,65535
1000bbf0:	4809883a 	mov	r4,r9
1000bbf4:	e00b883a 	mov	r5,fp
1000bbf8:	1826d43a 	srli	r19,r3,16
1000bbfc:	d9c00515 	stw	r7,20(sp)
1000bc00:	da400315 	stw	r9,12(sp)
1000bc04:	000af1c0 	call	1000af1c <__mulsi3>
1000bc08:	da400317 	ldw	r9,12(sp)
1000bc0c:	8820d43a 	srli	r16,r17,16
1000bc10:	980b883a 	mov	r5,r19
1000bc14:	4809883a 	mov	r4,r9
1000bc18:	d8800215 	stw	r2,8(sp)
1000bc1c:	000af1c0 	call	1000af1c <__mulsi3>
1000bc20:	8009883a 	mov	r4,r16
1000bc24:	e00b883a 	mov	r5,fp
1000bc28:	d8800415 	stw	r2,16(sp)
1000bc2c:	000af1c0 	call	1000af1c <__mulsi3>
1000bc30:	8009883a 	mov	r4,r16
1000bc34:	980b883a 	mov	r5,r19
1000bc38:	d8800315 	stw	r2,12(sp)
1000bc3c:	000af1c0 	call	1000af1c <__mulsi3>
1000bc40:	da000217 	ldw	r8,8(sp)
1000bc44:	da400317 	ldw	r9,12(sp)
1000bc48:	da800417 	ldw	r10,16(sp)
1000bc4c:	100b883a 	mov	r5,r2
1000bc50:	4004d43a 	srli	r2,r8,16
1000bc54:	4a89883a 	add	r4,r9,r10
1000bc58:	d9c00517 	ldw	r7,20(sp)
1000bc5c:	2089883a 	add	r4,r4,r2
1000bc60:	2240022e 	bgeu	r4,r9,1000bc6c <__divdf3+0x4ac>
1000bc64:	00800074 	movhi	r2,1
1000bc68:	288b883a 	add	r5,r5,r2
1000bc6c:	2004d43a 	srli	r2,r4,16
1000bc70:	2020943a 	slli	r16,r4,16
1000bc74:	423fffcc 	andi	r8,r8,65535
1000bc78:	288b883a 	add	r5,r5,r2
1000bc7c:	8221883a 	add	r16,r16,r8
1000bc80:	3940ab36 	bltu	r7,r5,1000bf30 <__divdf3+0x770>
1000bc84:	3940a926 	beq	r7,r5,1000bf2c <__divdf3+0x76c>
1000bc88:	394bc83a 	sub	r5,r7,r5
1000bc8c:	b421c83a 	sub	r16,r22,r16
1000bc90:	b42d803a 	cmpltu	r22,r22,r16
1000bc94:	2dadc83a 	sub	r22,r5,r22
1000bc98:	b5c0da26 	beq	r22,r23,1000c004 <__divdf3+0x844>
1000bc9c:	b009883a 	mov	r4,r22
1000bca0:	a00b883a 	mov	r5,r20
1000bca4:	000af0c0 	call	1000af0c <__udivsi3>
1000bca8:	1009883a 	mov	r4,r2
1000bcac:	900b883a 	mov	r5,r18
1000bcb0:	d8800215 	stw	r2,8(sp)
1000bcb4:	000af1c0 	call	1000af1c <__mulsi3>
1000bcb8:	b009883a 	mov	r4,r22
1000bcbc:	a00b883a 	mov	r5,r20
1000bcc0:	d8800515 	stw	r2,20(sp)
1000bcc4:	000af140 	call	1000af14 <__umodsi3>
1000bcc8:	1004943a 	slli	r2,r2,16
1000bccc:	8008d43a 	srli	r4,r16,16
1000bcd0:	d9c00517 	ldw	r7,20(sp)
1000bcd4:	da000217 	ldw	r8,8(sp)
1000bcd8:	110ab03a 	or	r5,r2,r4
1000bcdc:	29c0062e 	bgeu	r5,r7,1000bcf8 <__divdf3+0x538>
1000bce0:	2dcb883a 	add	r5,r5,r23
1000bce4:	40bfffc4 	addi	r2,r8,-1
1000bce8:	2dc0ca36 	bltu	r5,r23,1000c014 <__divdf3+0x854>
1000bcec:	29c0c92e 	bgeu	r5,r7,1000c014 <__divdf3+0x854>
1000bcf0:	423fff84 	addi	r8,r8,-2
1000bcf4:	2dcb883a 	add	r5,r5,r23
1000bcf8:	29cfc83a 	sub	r7,r5,r7
1000bcfc:	3809883a 	mov	r4,r7
1000bd00:	a00b883a 	mov	r5,r20
1000bd04:	da000215 	stw	r8,8(sp)
1000bd08:	d9c00515 	stw	r7,20(sp)
1000bd0c:	000af0c0 	call	1000af0c <__udivsi3>
1000bd10:	900b883a 	mov	r5,r18
1000bd14:	1009883a 	mov	r4,r2
1000bd18:	102d883a 	mov	r22,r2
1000bd1c:	000af1c0 	call	1000af1c <__mulsi3>
1000bd20:	d9c00517 	ldw	r7,20(sp)
1000bd24:	a00b883a 	mov	r5,r20
1000bd28:	1025883a 	mov	r18,r2
1000bd2c:	3809883a 	mov	r4,r7
1000bd30:	000af140 	call	1000af14 <__umodsi3>
1000bd34:	1004943a 	slli	r2,r2,16
1000bd38:	843fffcc 	andi	r16,r16,65535
1000bd3c:	da000217 	ldw	r8,8(sp)
1000bd40:	140eb03a 	or	r7,r2,r16
1000bd44:	3c80062e 	bgeu	r7,r18,1000bd60 <__divdf3+0x5a0>
1000bd48:	3dcf883a 	add	r7,r7,r23
1000bd4c:	b0bfffc4 	addi	r2,r22,-1
1000bd50:	3dc0ae36 	bltu	r7,r23,1000c00c <__divdf3+0x84c>
1000bd54:	3c80ad2e 	bgeu	r7,r18,1000c00c <__divdf3+0x84c>
1000bd58:	b5bfff84 	addi	r22,r22,-2
1000bd5c:	3dcf883a 	add	r7,r7,r23
1000bd60:	4010943a 	slli	r8,r8,16
1000bd64:	3ca9c83a 	sub	r20,r7,r18
1000bd68:	e00b883a 	mov	r5,fp
1000bd6c:	b224b03a 	or	r18,r22,r8
1000bd70:	91ffffcc 	andi	r7,r18,65535
1000bd74:	3809883a 	mov	r4,r7
1000bd78:	d9c00515 	stw	r7,20(sp)
1000bd7c:	000af1c0 	call	1000af1c <__mulsi3>
1000bd80:	d9c00517 	ldw	r7,20(sp)
1000bd84:	9020d43a 	srli	r16,r18,16
1000bd88:	980b883a 	mov	r5,r19
1000bd8c:	3809883a 	mov	r4,r7
1000bd90:	102d883a 	mov	r22,r2
1000bd94:	000af1c0 	call	1000af1c <__mulsi3>
1000bd98:	e00b883a 	mov	r5,fp
1000bd9c:	8009883a 	mov	r4,r16
1000bda0:	d8800515 	stw	r2,20(sp)
1000bda4:	000af1c0 	call	1000af1c <__mulsi3>
1000bda8:	8009883a 	mov	r4,r16
1000bdac:	980b883a 	mov	r5,r19
1000bdb0:	1039883a 	mov	fp,r2
1000bdb4:	000af1c0 	call	1000af1c <__mulsi3>
1000bdb8:	d9c00517 	ldw	r7,20(sp)
1000bdbc:	100b883a 	mov	r5,r2
1000bdc0:	b004d43a 	srli	r2,r22,16
1000bdc4:	e1c9883a 	add	r4,fp,r7
1000bdc8:	2089883a 	add	r4,r4,r2
1000bdcc:	2700022e 	bgeu	r4,fp,1000bdd8 <__divdf3+0x618>
1000bdd0:	00800074 	movhi	r2,1
1000bdd4:	288b883a 	add	r5,r5,r2
1000bdd8:	2004d43a 	srli	r2,r4,16
1000bddc:	2008943a 	slli	r4,r4,16
1000bde0:	b5bfffcc 	andi	r22,r22,65535
1000bde4:	288b883a 	add	r5,r5,r2
1000bde8:	25ad883a 	add	r22,r4,r22
1000bdec:	a140632e 	bgeu	r20,r5,1000bf7c <__divdf3+0x7bc>
1000bdf0:	a5e9883a 	add	r20,r20,r23
1000bdf4:	90bfffc4 	addi	r2,r18,-1
1000bdf8:	a5c0702e 	bgeu	r20,r23,1000bfbc <__divdf3+0x7fc>
1000bdfc:	1025883a 	mov	r18,r2
1000be00:	a1406126 	beq	r20,r5,1000bf88 <__divdf3+0x7c8>
1000be04:	94800054 	ori	r18,r18,1
1000be08:	d8c00117 	ldw	r3,4(sp)
1000be0c:	1880ffc4 	addi	r2,r3,1023
1000be10:	0080720e 	bge	zero,r2,1000bfdc <__divdf3+0x81c>
1000be14:	90c001cc 	andi	r3,r18,7
1000be18:	18000726 	beq	r3,zero,1000be38 <__divdf3+0x678>
1000be1c:	910003cc 	andi	r4,r18,15
1000be20:	00c00104 	movi	r3,4
1000be24:	20c00426 	beq	r4,r3,1000be38 <__divdf3+0x678>
1000be28:	90c7883a 	add	r3,r18,r3
1000be2c:	1ca5803a 	cmpltu	r18,r3,r18
1000be30:	8ca3883a 	add	r17,r17,r18
1000be34:	1825883a 	mov	r18,r3
1000be38:	88c0402c 	andhi	r3,r17,256
1000be3c:	18000526 	beq	r3,zero,1000be54 <__divdf3+0x694>
1000be40:	d8c00117 	ldw	r3,4(sp)
1000be44:	00bfc034 	movhi	r2,65280
1000be48:	10bfffc4 	addi	r2,r2,-1
1000be4c:	88a2703a 	and	r17,r17,r2
1000be50:	18810004 	addi	r2,r3,1024
1000be54:	00c1ff84 	movi	r3,2046
1000be58:	18bebe16 	blt	r3,r2,1000b954 <__alt_data_end+0xf800b954>
1000be5c:	8820977a 	slli	r16,r17,29
1000be60:	9024d0fa 	srli	r18,r18,3
1000be64:	8822927a 	slli	r17,r17,9
1000be68:	1081ffcc 	andi	r2,r2,2047
1000be6c:	84a0b03a 	or	r16,r16,r18
1000be70:	8826d33a 	srli	r19,r17,12
1000be74:	aa00004c 	andi	r8,r21,1
1000be78:	003eba06 	br	1000b964 <__alt_data_end+0xf800b964>
1000be7c:	9880022c 	andhi	r2,r19,8
1000be80:	10000a26 	beq	r2,zero,1000beac <__divdf3+0x6ec>
1000be84:	8880022c 	andhi	r2,r17,8
1000be88:	1000081e 	bne	r2,zero,1000beac <__divdf3+0x6ec>
1000be8c:	00800434 	movhi	r2,16
1000be90:	10bfffc4 	addi	r2,r2,-1
1000be94:	8cc00234 	orhi	r19,r17,8
1000be98:	98a6703a 	and	r19,r19,r2
1000be9c:	b811883a 	mov	r8,r23
1000bea0:	9021883a 	mov	r16,r18
1000bea4:	0081ffc4 	movi	r2,2047
1000bea8:	003eae06 	br	1000b964 <__alt_data_end+0xf800b964>
1000beac:	00800434 	movhi	r2,16
1000beb0:	10bfffc4 	addi	r2,r2,-1
1000beb4:	9cc00234 	orhi	r19,r19,8
1000beb8:	98a6703a 	and	r19,r19,r2
1000bebc:	b011883a 	mov	r8,r22
1000bec0:	0081ffc4 	movi	r2,2047
1000bec4:	003ea706 	br	1000b964 <__alt_data_end+0xf800b964>
1000bec8:	147ff604 	addi	r17,r2,-40
1000becc:	3462983a 	sll	r17,r6,r17
1000bed0:	0025883a 	mov	r18,zero
1000bed4:	003ee906 	br	1000ba7c <__alt_data_end+0xf800ba7c>
1000bed8:	3009883a 	mov	r4,r6
1000bedc:	d9800215 	stw	r6,8(sp)
1000bee0:	da400315 	stw	r9,12(sp)
1000bee4:	da800415 	stw	r10,16(sp)
1000bee8:	000d61c0 	call	1000d61c <__clzsi2>
1000beec:	10800804 	addi	r2,r2,32
1000bef0:	da800417 	ldw	r10,16(sp)
1000bef4:	da400317 	ldw	r9,12(sp)
1000bef8:	d9800217 	ldw	r6,8(sp)
1000befc:	003ed606 	br	1000ba58 <__alt_data_end+0xf800ba58>
1000bf00:	14fff604 	addi	r19,r2,-40
1000bf04:	94e6983a 	sll	r19,r18,r19
1000bf08:	0021883a 	mov	r16,zero
1000bf0c:	003ebc06 	br	1000ba00 <__alt_data_end+0xf800ba00>
1000bf10:	d9800215 	stw	r6,8(sp)
1000bf14:	d9c00515 	stw	r7,20(sp)
1000bf18:	000d61c0 	call	1000d61c <__clzsi2>
1000bf1c:	10800804 	addi	r2,r2,32
1000bf20:	d9c00517 	ldw	r7,20(sp)
1000bf24:	d9800217 	ldw	r6,8(sp)
1000bf28:	003eac06 	br	1000b9dc <__alt_data_end+0xf800b9dc>
1000bf2c:	b400292e 	bgeu	r22,r16,1000bfd4 <__divdf3+0x814>
1000bf30:	d8c00017 	ldw	r3,0(sp)
1000bf34:	b0ed883a 	add	r22,r22,r3
1000bf38:	b0c5803a 	cmpltu	r2,r22,r3
1000bf3c:	15c5883a 	add	r2,r2,r23
1000bf40:	11cf883a 	add	r7,r2,r7
1000bf44:	88bfffc4 	addi	r2,r17,-1
1000bf48:	b9c0122e 	bgeu	r23,r7,1000bf94 <__divdf3+0x7d4>
1000bf4c:	39405036 	bltu	r7,r5,1000c090 <__divdf3+0x8d0>
1000bf50:	29c01e26 	beq	r5,r7,1000bfcc <__divdf3+0x80c>
1000bf54:	394bc83a 	sub	r5,r7,r5
1000bf58:	1023883a 	mov	r17,r2
1000bf5c:	003f4b06 	br	1000bc8c <__alt_data_end+0xf800bc8c>
1000bf60:	943ee62e 	bgeu	r18,r16,1000bafc <__alt_data_end+0xf800bafc>
1000bf64:	980497fa 	slli	r2,r19,31
1000bf68:	8006d07a 	srli	r3,r16,1
1000bf6c:	802c97fa 	slli	r22,r16,31
1000bf70:	9826d07a 	srli	r19,r19,1
1000bf74:	18a0b03a 	or	r16,r3,r2
1000bf78:	003ee406 	br	1000bb0c <__alt_data_end+0xf800bb0c>
1000bf7c:	a17fa11e 	bne	r20,r5,1000be04 <__alt_data_end+0xf800be04>
1000bf80:	b03f9b1e 	bne	r22,zero,1000bdf0 <__alt_data_end+0xf800bdf0>
1000bf84:	d8000015 	stw	zero,0(sp)
1000bf88:	d8c00017 	ldw	r3,0(sp)
1000bf8c:	1dbf9d1e 	bne	r3,r22,1000be04 <__alt_data_end+0xf800be04>
1000bf90:	003f9d06 	br	1000be08 <__alt_data_end+0xf800be08>
1000bf94:	3dffef1e 	bne	r7,r23,1000bf54 <__alt_data_end+0xf800bf54>
1000bf98:	d8c00017 	ldw	r3,0(sp)
1000bf9c:	b0ffeb2e 	bgeu	r22,r3,1000bf4c <__alt_data_end+0xf800bf4c>
1000bfa0:	b94bc83a 	sub	r5,r23,r5
1000bfa4:	1023883a 	mov	r17,r2
1000bfa8:	003f3806 	br	1000bc8c <__alt_data_end+0xf800bc8c>
1000bfac:	1023883a 	mov	r17,r2
1000bfb0:	003f0906 	br	1000bbd8 <__alt_data_end+0xf800bbd8>
1000bfb4:	1039883a 	mov	fp,r2
1000bfb8:	003ef006 	br	1000bb7c <__alt_data_end+0xf800bb7c>
1000bfbc:	a1403b36 	bltu	r20,r5,1000c0ac <__divdf3+0x8ec>
1000bfc0:	2d005826 	beq	r5,r20,1000c124 <__divdf3+0x964>
1000bfc4:	1025883a 	mov	r18,r2
1000bfc8:	003f8e06 	br	1000be04 <__alt_data_end+0xf800be04>
1000bfcc:	b4003036 	bltu	r22,r16,1000c090 <__divdf3+0x8d0>
1000bfd0:	1023883a 	mov	r17,r2
1000bfd4:	000b883a 	mov	r5,zero
1000bfd8:	003f2c06 	br	1000bc8c <__alt_data_end+0xf800bc8c>
1000bfdc:	d8c00117 	ldw	r3,4(sp)
1000bfe0:	00bf0084 	movi	r2,-1022
1000bfe4:	10c5c83a 	sub	r2,r2,r3
1000bfe8:	00c00e04 	movi	r3,56
1000bfec:	18800d0e 	bge	r3,r2,1000c024 <__divdf3+0x864>
1000bff0:	aa00004c 	andi	r8,r21,1
1000bff4:	0005883a 	mov	r2,zero
1000bff8:	0027883a 	mov	r19,zero
1000bffc:	0021883a 	mov	r16,zero
1000c000:	003e5806 	br	1000b964 <__alt_data_end+0xf800b964>
1000c004:	04bfffc4 	movi	r18,-1
1000c008:	003f7f06 	br	1000be08 <__alt_data_end+0xf800be08>
1000c00c:	102d883a 	mov	r22,r2
1000c010:	003f5306 	br	1000bd60 <__alt_data_end+0xf800bd60>
1000c014:	1011883a 	mov	r8,r2
1000c018:	003f3706 	br	1000bcf8 <__alt_data_end+0xf800bcf8>
1000c01c:	502b883a 	mov	r21,r10
1000c020:	003f7906 	br	1000be08 <__alt_data_end+0xf800be08>
1000c024:	00c007c4 	movi	r3,31
1000c028:	18802816 	blt	r3,r2,1000c0cc <__divdf3+0x90c>
1000c02c:	d9000117 	ldw	r4,4(sp)
1000c030:	908ad83a 	srl	r5,r18,r2
1000c034:	8884d83a 	srl	r2,r17,r2
1000c038:	20c10784 	addi	r3,r4,1054
1000c03c:	88c8983a 	sll	r4,r17,r3
1000c040:	90c6983a 	sll	r3,r18,r3
1000c044:	2908b03a 	or	r4,r5,r4
1000c048:	1806c03a 	cmpne	r3,r3,zero
1000c04c:	20c6b03a 	or	r3,r4,r3
1000c050:	190001cc 	andi	r4,r3,7
1000c054:	20000726 	beq	r4,zero,1000c074 <__divdf3+0x8b4>
1000c058:	194003cc 	andi	r5,r3,15
1000c05c:	01000104 	movi	r4,4
1000c060:	29000426 	beq	r5,r4,1000c074 <__divdf3+0x8b4>
1000c064:	1909883a 	add	r4,r3,r4
1000c068:	20c7803a 	cmpltu	r3,r4,r3
1000c06c:	10c5883a 	add	r2,r2,r3
1000c070:	2007883a 	mov	r3,r4
1000c074:	1100202c 	andhi	r4,r2,128
1000c078:	20002226 	beq	r4,zero,1000c104 <__divdf3+0x944>
1000c07c:	aa00004c 	andi	r8,r21,1
1000c080:	00800044 	movi	r2,1
1000c084:	0027883a 	mov	r19,zero
1000c088:	0021883a 	mov	r16,zero
1000c08c:	003e3506 	br	1000b964 <__alt_data_end+0xf800b964>
1000c090:	d8c00017 	ldw	r3,0(sp)
1000c094:	8c7fff84 	addi	r17,r17,-2
1000c098:	b0ed883a 	add	r22,r22,r3
1000c09c:	b0c5803a 	cmpltu	r2,r22,r3
1000c0a0:	15c5883a 	add	r2,r2,r23
1000c0a4:	11cf883a 	add	r7,r2,r7
1000c0a8:	003ef706 	br	1000bc88 <__alt_data_end+0xf800bc88>
1000c0ac:	d8c00017 	ldw	r3,0(sp)
1000c0b0:	18c9883a 	add	r4,r3,r3
1000c0b4:	20c5803a 	cmpltu	r2,r4,r3
1000c0b8:	15c7883a 	add	r3,r2,r23
1000c0bc:	a0e9883a 	add	r20,r20,r3
1000c0c0:	90bfff84 	addi	r2,r18,-2
1000c0c4:	d9000015 	stw	r4,0(sp)
1000c0c8:	003f4c06 	br	1000bdfc <__alt_data_end+0xf800bdfc>
1000c0cc:	d9000117 	ldw	r4,4(sp)
1000c0d0:	00fef884 	movi	r3,-1054
1000c0d4:	1907c83a 	sub	r3,r3,r4
1000c0d8:	01000804 	movi	r4,32
1000c0dc:	88c6d83a 	srl	r3,r17,r3
1000c0e0:	11001426 	beq	r2,r4,1000c134 <__divdf3+0x974>
1000c0e4:	d9000117 	ldw	r4,4(sp)
1000c0e8:	20810f84 	addi	r2,r4,1086
1000c0ec:	8884983a 	sll	r2,r17,r2
1000c0f0:	1484b03a 	or	r2,r2,r18
1000c0f4:	1004c03a 	cmpne	r2,r2,zero
1000c0f8:	10c6b03a 	or	r3,r2,r3
1000c0fc:	0005883a 	mov	r2,zero
1000c100:	003fd306 	br	1000c050 <__alt_data_end+0xf800c050>
1000c104:	1020977a 	slli	r16,r2,29
1000c108:	1806d0fa 	srli	r3,r3,3
1000c10c:	1004927a 	slli	r2,r2,9
1000c110:	aa00004c 	andi	r8,r21,1
1000c114:	80e0b03a 	or	r16,r16,r3
1000c118:	1026d33a 	srli	r19,r2,12
1000c11c:	0005883a 	mov	r2,zero
1000c120:	003e1006 	br	1000b964 <__alt_data_end+0xf800b964>
1000c124:	d8c00017 	ldw	r3,0(sp)
1000c128:	1dbfe036 	bltu	r3,r22,1000c0ac <__alt_data_end+0xf800c0ac>
1000c12c:	1025883a 	mov	r18,r2
1000c130:	003f9506 	br	1000bf88 <__alt_data_end+0xf800bf88>
1000c134:	0005883a 	mov	r2,zero
1000c138:	003fed06 	br	1000c0f0 <__alt_data_end+0xf800c0f0>
1000c13c:	00800434 	movhi	r2,16
1000c140:	10bfffc4 	addi	r2,r2,-1
1000c144:	8cc00234 	orhi	r19,r17,8
1000c148:	98a6703a 	and	r19,r19,r2
1000c14c:	5011883a 	mov	r8,r10
1000c150:	9021883a 	mov	r16,r18
1000c154:	0081ffc4 	movi	r2,2047
1000c158:	003e0206 	br	1000b964 <__alt_data_end+0xf800b964>

1000c15c <__eqdf2>:
1000c15c:	2806d53a 	srli	r3,r5,20
1000c160:	3810d53a 	srli	r8,r7,20
1000c164:	00800434 	movhi	r2,16
1000c168:	10bfffc4 	addi	r2,r2,-1
1000c16c:	18c1ffcc 	andi	r3,r3,2047
1000c170:	0241ffc4 	movi	r9,2047
1000c174:	2894703a 	and	r10,r5,r2
1000c178:	4201ffcc 	andi	r8,r8,2047
1000c17c:	3884703a 	and	r2,r7,r2
1000c180:	280ad7fa 	srli	r5,r5,31
1000c184:	380ed7fa 	srli	r7,r7,31
1000c188:	1a400f26 	beq	r3,r9,1000c1c8 <__eqdf2+0x6c>
1000c18c:	0241ffc4 	movi	r9,2047
1000c190:	42400326 	beq	r8,r9,1000c1a0 <__eqdf2+0x44>
1000c194:	1a000526 	beq	r3,r8,1000c1ac <__eqdf2+0x50>
1000c198:	00800044 	movi	r2,1
1000c19c:	f800283a 	ret
1000c1a0:	1192b03a 	or	r9,r2,r6
1000c1a4:	483ffc1e 	bne	r9,zero,1000c198 <__alt_data_end+0xf800c198>
1000c1a8:	1a3ffb1e 	bne	r3,r8,1000c198 <__alt_data_end+0xf800c198>
1000c1ac:	50bffa1e 	bne	r10,r2,1000c198 <__alt_data_end+0xf800c198>
1000c1b0:	21bff91e 	bne	r4,r6,1000c198 <__alt_data_end+0xf800c198>
1000c1b4:	29c00826 	beq	r5,r7,1000c1d8 <__eqdf2+0x7c>
1000c1b8:	183ff71e 	bne	r3,zero,1000c198 <__alt_data_end+0xf800c198>
1000c1bc:	5104b03a 	or	r2,r10,r4
1000c1c0:	1004c03a 	cmpne	r2,r2,zero
1000c1c4:	f800283a 	ret
1000c1c8:	5112b03a 	or	r9,r10,r4
1000c1cc:	483fef26 	beq	r9,zero,1000c18c <__alt_data_end+0xf800c18c>
1000c1d0:	00800044 	movi	r2,1
1000c1d4:	f800283a 	ret
1000c1d8:	0005883a 	mov	r2,zero
1000c1dc:	f800283a 	ret

1000c1e0 <__gedf2>:
1000c1e0:	2804d53a 	srli	r2,r5,20
1000c1e4:	3810d53a 	srli	r8,r7,20
1000c1e8:	00c00434 	movhi	r3,16
1000c1ec:	18ffffc4 	addi	r3,r3,-1
1000c1f0:	1081ffcc 	andi	r2,r2,2047
1000c1f4:	0241ffc4 	movi	r9,2047
1000c1f8:	28d4703a 	and	r10,r5,r3
1000c1fc:	4201ffcc 	andi	r8,r8,2047
1000c200:	38c6703a 	and	r3,r7,r3
1000c204:	280ad7fa 	srli	r5,r5,31
1000c208:	380ed7fa 	srli	r7,r7,31
1000c20c:	12401b26 	beq	r2,r9,1000c27c <__gedf2+0x9c>
1000c210:	0241ffc4 	movi	r9,2047
1000c214:	42400926 	beq	r8,r9,1000c23c <__gedf2+0x5c>
1000c218:	10000c1e 	bne	r2,zero,1000c24c <__gedf2+0x6c>
1000c21c:	5112b03a 	or	r9,r10,r4
1000c220:	4813003a 	cmpeq	r9,r9,zero
1000c224:	4817883a 	mov	r11,r9
1000c228:	40000a26 	beq	r8,zero,1000c254 <__gedf2+0x74>
1000c22c:	48001626 	beq	r9,zero,1000c288 <__gedf2+0xa8>
1000c230:	38000d1e 	bne	r7,zero,1000c268 <__gedf2+0x88>
1000c234:	00bfffc4 	movi	r2,-1
1000c238:	f800283a 	ret
1000c23c:	1992b03a 	or	r9,r3,r6
1000c240:	483ff526 	beq	r9,zero,1000c218 <__alt_data_end+0xf800c218>
1000c244:	00bfff84 	movi	r2,-2
1000c248:	f800283a 	ret
1000c24c:	40000e1e 	bne	r8,zero,1000c288 <__gedf2+0xa8>
1000c250:	0017883a 	mov	r11,zero
1000c254:	1992b03a 	or	r9,r3,r6
1000c258:	4813003a 	cmpeq	r9,r9,zero
1000c25c:	5800041e 	bne	r11,zero,1000c270 <__gedf2+0x90>
1000c260:	48000926 	beq	r9,zero,1000c288 <__gedf2+0xa8>
1000c264:	283ff31e 	bne	r5,zero,1000c234 <__alt_data_end+0xf800c234>
1000c268:	00800044 	movi	r2,1
1000c26c:	f800283a 	ret
1000c270:	483fef26 	beq	r9,zero,1000c230 <__alt_data_end+0xf800c230>
1000c274:	0005883a 	mov	r2,zero
1000c278:	f800283a 	ret
1000c27c:	5112b03a 	or	r9,r10,r4
1000c280:	483fe326 	beq	r9,zero,1000c210 <__alt_data_end+0xf800c210>
1000c284:	003fef06 	br	1000c244 <__alt_data_end+0xf800c244>
1000c288:	29fff61e 	bne	r5,r7,1000c264 <__alt_data_end+0xf800c264>
1000c28c:	40bff516 	blt	r8,r2,1000c264 <__alt_data_end+0xf800c264>
1000c290:	12000316 	blt	r2,r8,1000c2a0 <__gedf2+0xc0>
1000c294:	1abff336 	bltu	r3,r10,1000c264 <__alt_data_end+0xf800c264>
1000c298:	50c00326 	beq	r10,r3,1000c2a8 <__gedf2+0xc8>
1000c29c:	50fff52e 	bgeu	r10,r3,1000c274 <__alt_data_end+0xf800c274>
1000c2a0:	283fe426 	beq	r5,zero,1000c234 <__alt_data_end+0xf800c234>
1000c2a4:	003ff006 	br	1000c268 <__alt_data_end+0xf800c268>
1000c2a8:	313fee36 	bltu	r6,r4,1000c264 <__alt_data_end+0xf800c264>
1000c2ac:	21bff12e 	bgeu	r4,r6,1000c274 <__alt_data_end+0xf800c274>
1000c2b0:	283fe026 	beq	r5,zero,1000c234 <__alt_data_end+0xf800c234>
1000c2b4:	003fec06 	br	1000c268 <__alt_data_end+0xf800c268>

1000c2b8 <__ledf2>:
1000c2b8:	2806d53a 	srli	r3,r5,20
1000c2bc:	3810d53a 	srli	r8,r7,20
1000c2c0:	00800434 	movhi	r2,16
1000c2c4:	10bfffc4 	addi	r2,r2,-1
1000c2c8:	18c1ffcc 	andi	r3,r3,2047
1000c2cc:	0241ffc4 	movi	r9,2047
1000c2d0:	2894703a 	and	r10,r5,r2
1000c2d4:	4201ffcc 	andi	r8,r8,2047
1000c2d8:	3884703a 	and	r2,r7,r2
1000c2dc:	280ad7fa 	srli	r5,r5,31
1000c2e0:	380ed7fa 	srli	r7,r7,31
1000c2e4:	1a402026 	beq	r3,r9,1000c368 <__ledf2+0xb0>
1000c2e8:	0241ffc4 	movi	r9,2047
1000c2ec:	42401726 	beq	r8,r9,1000c34c <__ledf2+0x94>
1000c2f0:	18000b26 	beq	r3,zero,1000c320 <__ledf2+0x68>
1000c2f4:	29403fcc 	andi	r5,r5,255
1000c2f8:	39c03fcc 	andi	r7,r7,255
1000c2fc:	40000f1e 	bne	r8,zero,1000c33c <__ledf2+0x84>
1000c300:	0017883a 	mov	r11,zero
1000c304:	1192b03a 	or	r9,r2,r6
1000c308:	4813003a 	cmpeq	r9,r9,zero
1000c30c:	58001326 	beq	r11,zero,1000c35c <__ledf2+0xa4>
1000c310:	48001e1e 	bne	r9,zero,1000c38c <__ledf2+0xd4>
1000c314:	38000b1e 	bne	r7,zero,1000c344 <__ledf2+0x8c>
1000c318:	00bfffc4 	movi	r2,-1
1000c31c:	f800283a 	ret
1000c320:	5112b03a 	or	r9,r10,r4
1000c324:	4813003a 	cmpeq	r9,r9,zero
1000c328:	4817883a 	mov	r11,r9
1000c32c:	29403fcc 	andi	r5,r5,255
1000c330:	39c03fcc 	andi	r7,r7,255
1000c334:	403ff326 	beq	r8,zero,1000c304 <__alt_data_end+0xf800c304>
1000c338:	483ff61e 	bne	r9,zero,1000c314 <__alt_data_end+0xf800c314>
1000c33c:	29c00e26 	beq	r5,r7,1000c378 <__ledf2+0xc0>
1000c340:	283ff51e 	bne	r5,zero,1000c318 <__alt_data_end+0xf800c318>
1000c344:	00800044 	movi	r2,1
1000c348:	f800283a 	ret
1000c34c:	1192b03a 	or	r9,r2,r6
1000c350:	483fe726 	beq	r9,zero,1000c2f0 <__alt_data_end+0xf800c2f0>
1000c354:	00800084 	movi	r2,2
1000c358:	f800283a 	ret
1000c35c:	483ff726 	beq	r9,zero,1000c33c <__alt_data_end+0xf800c33c>
1000c360:	283ff826 	beq	r5,zero,1000c344 <__alt_data_end+0xf800c344>
1000c364:	003fec06 	br	1000c318 <__alt_data_end+0xf800c318>
1000c368:	5112b03a 	or	r9,r10,r4
1000c36c:	483fde26 	beq	r9,zero,1000c2e8 <__alt_data_end+0xf800c2e8>
1000c370:	00800084 	movi	r2,2
1000c374:	f800283a 	ret
1000c378:	40fff116 	blt	r8,r3,1000c340 <__alt_data_end+0xf800c340>
1000c37c:	1a000716 	blt	r3,r8,1000c39c <__ledf2+0xe4>
1000c380:	12bfef36 	bltu	r2,r10,1000c340 <__alt_data_end+0xf800c340>
1000c384:	50800326 	beq	r10,r2,1000c394 <__ledf2+0xdc>
1000c388:	50800436 	bltu	r10,r2,1000c39c <__ledf2+0xe4>
1000c38c:	0005883a 	mov	r2,zero
1000c390:	f800283a 	ret
1000c394:	313fea36 	bltu	r6,r4,1000c340 <__alt_data_end+0xf800c340>
1000c398:	21bffc2e 	bgeu	r4,r6,1000c38c <__alt_data_end+0xf800c38c>
1000c39c:	283fde26 	beq	r5,zero,1000c318 <__alt_data_end+0xf800c318>
1000c3a0:	003fe806 	br	1000c344 <__alt_data_end+0xf800c344>

1000c3a4 <__muldf3>:
1000c3a4:	deffee04 	addi	sp,sp,-72
1000c3a8:	dc400915 	stw	r17,36(sp)
1000c3ac:	2822d53a 	srli	r17,r5,20
1000c3b0:	dc000815 	stw	r16,32(sp)
1000c3b4:	2820d7fa 	srli	r16,r5,31
1000c3b8:	df001015 	stw	fp,64(sp)
1000c3bc:	dd000c15 	stw	r20,48(sp)
1000c3c0:	dcc00b15 	stw	r19,44(sp)
1000c3c4:	dfc01115 	stw	ra,68(sp)
1000c3c8:	04c00434 	movhi	r19,16
1000c3cc:	9cffffc4 	addi	r19,r19,-1
1000c3d0:	ddc00f15 	stw	r23,60(sp)
1000c3d4:	dd800e15 	stw	r22,56(sp)
1000c3d8:	dd400d15 	stw	r21,52(sp)
1000c3dc:	dc800a15 	stw	r18,40(sp)
1000c3e0:	8c41ffcc 	andi	r17,r17,2047
1000c3e4:	2029883a 	mov	r20,r4
1000c3e8:	2ce6703a 	and	r19,r5,r19
1000c3ec:	8039883a 	mov	fp,r16
1000c3f0:	82003fcc 	andi	r8,r16,255
1000c3f4:	88005d26 	beq	r17,zero,1000c56c <__muldf3+0x1c8>
1000c3f8:	0081ffc4 	movi	r2,2047
1000c3fc:	202f883a 	mov	r23,r4
1000c400:	88803326 	beq	r17,r2,1000c4d0 <__muldf3+0x12c>
1000c404:	98800434 	orhi	r2,r19,16
1000c408:	100490fa 	slli	r2,r2,3
1000c40c:	2026d77a 	srli	r19,r4,29
1000c410:	202e90fa 	slli	r23,r4,3
1000c414:	8c7f0044 	addi	r17,r17,-1023
1000c418:	14e6b03a 	or	r19,r2,r19
1000c41c:	002d883a 	mov	r22,zero
1000c420:	000b883a 	mov	r5,zero
1000c424:	3804d53a 	srli	r2,r7,20
1000c428:	3828d7fa 	srli	r20,r7,31
1000c42c:	04800434 	movhi	r18,16
1000c430:	94bfffc4 	addi	r18,r18,-1
1000c434:	1081ffcc 	andi	r2,r2,2047
1000c438:	302b883a 	mov	r21,r6
1000c43c:	3ca4703a 	and	r18,r7,r18
1000c440:	a2403fcc 	andi	r9,r20,255
1000c444:	10006826 	beq	r2,zero,1000c5e8 <__muldf3+0x244>
1000c448:	00c1ffc4 	movi	r3,2047
1000c44c:	10c06026 	beq	r2,r3,1000c5d0 <__muldf3+0x22c>
1000c450:	90c00434 	orhi	r3,r18,16
1000c454:	180690fa 	slli	r3,r3,3
1000c458:	3024d77a 	srli	r18,r6,29
1000c45c:	302a90fa 	slli	r21,r6,3
1000c460:	10bf0044 	addi	r2,r2,-1023
1000c464:	1ca4b03a 	or	r18,r3,r18
1000c468:	0007883a 	mov	r3,zero
1000c46c:	1d88b03a 	or	r4,r3,r22
1000c470:	2109883a 	add	r4,r4,r4
1000c474:	2109883a 	add	r4,r4,r4
1000c478:	01840074 	movhi	r6,4097
1000c47c:	31b12404 	addi	r6,r6,-15216
1000c480:	2189883a 	add	r4,r4,r6
1000c484:	21000017 	ldw	r4,0(r4)
1000c488:	852cf03a 	xor	r22,r16,r20
1000c48c:	2000683a 	jmp	r4
1000c490:	1000c6d8 	cmpnei	zero,r2,795
1000c494:	1000c6c8 	cmpgei	zero,r2,795
1000c498:	1000c6c8 	cmpgei	zero,r2,795
1000c49c:	1000c6b4 	orhi	zero,r2,794
1000c4a0:	1000c4f0 	cmpltui	zero,r2,787
1000c4a4:	1000c4f0 	cmpltui	zero,r2,787
1000c4a8:	1000c69c 	xori	zero,r2,794
1000c4ac:	1000c6b4 	orhi	zero,r2,794
1000c4b0:	1000c4f0 	cmpltui	zero,r2,787
1000c4b4:	1000c69c 	xori	zero,r2,794
1000c4b8:	1000c4f0 	cmpltui	zero,r2,787
1000c4bc:	1000c6b4 	orhi	zero,r2,794
1000c4c0:	1000c4ec 	andhi	zero,r2,787
1000c4c4:	1000c4ec 	andhi	zero,r2,787
1000c4c8:	1000c4ec 	andhi	zero,r2,787
1000c4cc:	1000c9f0 	cmpltui	zero,r2,807
1000c4d0:	9904b03a 	or	r2,r19,r4
1000c4d4:	10006e1e 	bne	r2,zero,1000c690 <__muldf3+0x2ec>
1000c4d8:	05800204 	movi	r22,8
1000c4dc:	0027883a 	mov	r19,zero
1000c4e0:	002f883a 	mov	r23,zero
1000c4e4:	01400084 	movi	r5,2
1000c4e8:	003fce06 	br	1000c424 <__alt_data_end+0xf800c424>
1000c4ec:	402d883a 	mov	r22,r8
1000c4f0:	00800084 	movi	r2,2
1000c4f4:	28805626 	beq	r5,r2,1000c650 <__muldf3+0x2ac>
1000c4f8:	008000c4 	movi	r2,3
1000c4fc:	2881a226 	beq	r5,r2,1000cb88 <__muldf3+0x7e4>
1000c500:	00800044 	movi	r2,1
1000c504:	28811d1e 	bne	r5,r2,1000c97c <__muldf3+0x5d8>
1000c508:	b039883a 	mov	fp,r22
1000c50c:	0005883a 	mov	r2,zero
1000c510:	0027883a 	mov	r19,zero
1000c514:	002f883a 	mov	r23,zero
1000c518:	1004953a 	slli	r2,r2,20
1000c51c:	e7003fcc 	andi	fp,fp,255
1000c520:	e03897fa 	slli	fp,fp,31
1000c524:	00c00434 	movhi	r3,16
1000c528:	18ffffc4 	addi	r3,r3,-1
1000c52c:	98e6703a 	and	r19,r19,r3
1000c530:	9886b03a 	or	r3,r19,r2
1000c534:	1f06b03a 	or	r3,r3,fp
1000c538:	b805883a 	mov	r2,r23
1000c53c:	dfc01117 	ldw	ra,68(sp)
1000c540:	df001017 	ldw	fp,64(sp)
1000c544:	ddc00f17 	ldw	r23,60(sp)
1000c548:	dd800e17 	ldw	r22,56(sp)
1000c54c:	dd400d17 	ldw	r21,52(sp)
1000c550:	dd000c17 	ldw	r20,48(sp)
1000c554:	dcc00b17 	ldw	r19,44(sp)
1000c558:	dc800a17 	ldw	r18,40(sp)
1000c55c:	dc400917 	ldw	r17,36(sp)
1000c560:	dc000817 	ldw	r16,32(sp)
1000c564:	dec01204 	addi	sp,sp,72
1000c568:	f800283a 	ret
1000c56c:	9904b03a 	or	r2,r19,r4
1000c570:	10004226 	beq	r2,zero,1000c67c <__muldf3+0x2d8>
1000c574:	98013426 	beq	r19,zero,1000ca48 <__muldf3+0x6a4>
1000c578:	9809883a 	mov	r4,r19
1000c57c:	d9800515 	stw	r6,20(sp)
1000c580:	d9c00415 	stw	r7,16(sp)
1000c584:	da000615 	stw	r8,24(sp)
1000c588:	000d61c0 	call	1000d61c <__clzsi2>
1000c58c:	d9800517 	ldw	r6,20(sp)
1000c590:	d9c00417 	ldw	r7,16(sp)
1000c594:	da000617 	ldw	r8,24(sp)
1000c598:	00c009c4 	movi	r3,39
1000c59c:	18812616 	blt	r3,r2,1000ca38 <__muldf3+0x694>
1000c5a0:	00c00a04 	movi	r3,40
1000c5a4:	15fffe04 	addi	r23,r2,-8
1000c5a8:	1887c83a 	sub	r3,r3,r2
1000c5ac:	9de6983a 	sll	r19,r19,r23
1000c5b0:	a0c6d83a 	srl	r3,r20,r3
1000c5b4:	a5ee983a 	sll	r23,r20,r23
1000c5b8:	1ce6b03a 	or	r19,r3,r19
1000c5bc:	047f0344 	movi	r17,-1011
1000c5c0:	88a3c83a 	sub	r17,r17,r2
1000c5c4:	002d883a 	mov	r22,zero
1000c5c8:	000b883a 	mov	r5,zero
1000c5cc:	003f9506 	br	1000c424 <__alt_data_end+0xf800c424>
1000c5d0:	9186b03a 	or	r3,r18,r6
1000c5d4:	1800271e 	bne	r3,zero,1000c674 <__muldf3+0x2d0>
1000c5d8:	0025883a 	mov	r18,zero
1000c5dc:	002b883a 	mov	r21,zero
1000c5e0:	00c00084 	movi	r3,2
1000c5e4:	003fa106 	br	1000c46c <__alt_data_end+0xf800c46c>
1000c5e8:	9186b03a 	or	r3,r18,r6
1000c5ec:	18001d26 	beq	r3,zero,1000c664 <__muldf3+0x2c0>
1000c5f0:	90012226 	beq	r18,zero,1000ca7c <__muldf3+0x6d8>
1000c5f4:	9009883a 	mov	r4,r18
1000c5f8:	d9400415 	stw	r5,16(sp)
1000c5fc:	d9800515 	stw	r6,20(sp)
1000c600:	da000615 	stw	r8,24(sp)
1000c604:	da400715 	stw	r9,28(sp)
1000c608:	000d61c0 	call	1000d61c <__clzsi2>
1000c60c:	d9400417 	ldw	r5,16(sp)
1000c610:	d9800517 	ldw	r6,20(sp)
1000c614:	da000617 	ldw	r8,24(sp)
1000c618:	da400717 	ldw	r9,28(sp)
1000c61c:	00c009c4 	movi	r3,39
1000c620:	18811216 	blt	r3,r2,1000ca6c <__muldf3+0x6c8>
1000c624:	01c00a04 	movi	r7,40
1000c628:	157ffe04 	addi	r21,r2,-8
1000c62c:	388fc83a 	sub	r7,r7,r2
1000c630:	9564983a 	sll	r18,r18,r21
1000c634:	31ced83a 	srl	r7,r6,r7
1000c638:	356a983a 	sll	r21,r6,r21
1000c63c:	3ca4b03a 	or	r18,r7,r18
1000c640:	00ff0344 	movi	r3,-1011
1000c644:	1885c83a 	sub	r2,r3,r2
1000c648:	0007883a 	mov	r3,zero
1000c64c:	003f8706 	br	1000c46c <__alt_data_end+0xf800c46c>
1000c650:	b039883a 	mov	fp,r22
1000c654:	0081ffc4 	movi	r2,2047
1000c658:	0027883a 	mov	r19,zero
1000c65c:	002f883a 	mov	r23,zero
1000c660:	003fad06 	br	1000c518 <__alt_data_end+0xf800c518>
1000c664:	0025883a 	mov	r18,zero
1000c668:	002b883a 	mov	r21,zero
1000c66c:	00c00044 	movi	r3,1
1000c670:	003f7e06 	br	1000c46c <__alt_data_end+0xf800c46c>
1000c674:	00c000c4 	movi	r3,3
1000c678:	003f7c06 	br	1000c46c <__alt_data_end+0xf800c46c>
1000c67c:	05800104 	movi	r22,4
1000c680:	0027883a 	mov	r19,zero
1000c684:	002f883a 	mov	r23,zero
1000c688:	01400044 	movi	r5,1
1000c68c:	003f6506 	br	1000c424 <__alt_data_end+0xf800c424>
1000c690:	05800304 	movi	r22,12
1000c694:	014000c4 	movi	r5,3
1000c698:	003f6206 	br	1000c424 <__alt_data_end+0xf800c424>
1000c69c:	0039883a 	mov	fp,zero
1000c6a0:	04c00434 	movhi	r19,16
1000c6a4:	9cffffc4 	addi	r19,r19,-1
1000c6a8:	05ffffc4 	movi	r23,-1
1000c6ac:	0081ffc4 	movi	r2,2047
1000c6b0:	003f9906 	br	1000c518 <__alt_data_end+0xf800c518>
1000c6b4:	9027883a 	mov	r19,r18
1000c6b8:	a82f883a 	mov	r23,r21
1000c6bc:	482d883a 	mov	r22,r9
1000c6c0:	180b883a 	mov	r5,r3
1000c6c4:	003f8a06 	br	1000c4f0 <__alt_data_end+0xf800c4f0>
1000c6c8:	9027883a 	mov	r19,r18
1000c6cc:	a82f883a 	mov	r23,r21
1000c6d0:	180b883a 	mov	r5,r3
1000c6d4:	003f8606 	br	1000c4f0 <__alt_data_end+0xf800c4f0>
1000c6d8:	a828d43a 	srli	r20,r21,16
1000c6dc:	b820d43a 	srli	r16,r23,16
1000c6e0:	ad7fffcc 	andi	r21,r21,65535
1000c6e4:	bdffffcc 	andi	r23,r23,65535
1000c6e8:	8885883a 	add	r2,r17,r2
1000c6ec:	a809883a 	mov	r4,r21
1000c6f0:	b80b883a 	mov	r5,r23
1000c6f4:	d8800015 	stw	r2,0(sp)
1000c6f8:	000af1c0 	call	1000af1c <__mulsi3>
1000c6fc:	a009883a 	mov	r4,r20
1000c700:	b80b883a 	mov	r5,r23
1000c704:	d8800415 	stw	r2,16(sp)
1000c708:	000af1c0 	call	1000af1c <__mulsi3>
1000c70c:	a809883a 	mov	r4,r21
1000c710:	800b883a 	mov	r5,r16
1000c714:	d8800615 	stw	r2,24(sp)
1000c718:	000af1c0 	call	1000af1c <__mulsi3>
1000c71c:	a009883a 	mov	r4,r20
1000c720:	800b883a 	mov	r5,r16
1000c724:	1023883a 	mov	r17,r2
1000c728:	000af1c0 	call	1000af1c <__mulsi3>
1000c72c:	d9c00417 	ldw	r7,16(sp)
1000c730:	da000617 	ldw	r8,24(sp)
1000c734:	1039883a 	mov	fp,r2
1000c738:	3804d43a 	srli	r2,r7,16
1000c73c:	8a07883a 	add	r3,r17,r8
1000c740:	1887883a 	add	r3,r3,r2
1000c744:	1c40022e 	bgeu	r3,r17,1000c750 <__muldf3+0x3ac>
1000c748:	00800074 	movhi	r2,1
1000c74c:	e0b9883a 	add	fp,fp,r2
1000c750:	1804943a 	slli	r2,r3,16
1000c754:	1806d43a 	srli	r3,r3,16
1000c758:	9022d43a 	srli	r17,r18,16
1000c75c:	39ffffcc 	andi	r7,r7,65535
1000c760:	94bfffcc 	andi	r18,r18,65535
1000c764:	11cf883a 	add	r7,r2,r7
1000c768:	b80b883a 	mov	r5,r23
1000c76c:	9009883a 	mov	r4,r18
1000c770:	d8c00215 	stw	r3,8(sp)
1000c774:	d9c00315 	stw	r7,12(sp)
1000c778:	000af1c0 	call	1000af1c <__mulsi3>
1000c77c:	b80b883a 	mov	r5,r23
1000c780:	8809883a 	mov	r4,r17
1000c784:	d8800415 	stw	r2,16(sp)
1000c788:	000af1c0 	call	1000af1c <__mulsi3>
1000c78c:	9009883a 	mov	r4,r18
1000c790:	800b883a 	mov	r5,r16
1000c794:	d8800715 	stw	r2,28(sp)
1000c798:	000af1c0 	call	1000af1c <__mulsi3>
1000c79c:	8809883a 	mov	r4,r17
1000c7a0:	800b883a 	mov	r5,r16
1000c7a4:	102f883a 	mov	r23,r2
1000c7a8:	000af1c0 	call	1000af1c <__mulsi3>
1000c7ac:	d9c00417 	ldw	r7,16(sp)
1000c7b0:	da400717 	ldw	r9,28(sp)
1000c7b4:	1011883a 	mov	r8,r2
1000c7b8:	3804d43a 	srli	r2,r7,16
1000c7bc:	ba47883a 	add	r3,r23,r9
1000c7c0:	1887883a 	add	r3,r3,r2
1000c7c4:	1dc0022e 	bgeu	r3,r23,1000c7d0 <__muldf3+0x42c>
1000c7c8:	00800074 	movhi	r2,1
1000c7cc:	4091883a 	add	r8,r8,r2
1000c7d0:	1804d43a 	srli	r2,r3,16
1000c7d4:	182e943a 	slli	r23,r3,16
1000c7d8:	9820d43a 	srli	r16,r19,16
1000c7dc:	9cffffcc 	andi	r19,r19,65535
1000c7e0:	39ffffcc 	andi	r7,r7,65535
1000c7e4:	4085883a 	add	r2,r8,r2
1000c7e8:	a809883a 	mov	r4,r21
1000c7ec:	980b883a 	mov	r5,r19
1000c7f0:	b9ef883a 	add	r23,r23,r7
1000c7f4:	d8800115 	stw	r2,4(sp)
1000c7f8:	000af1c0 	call	1000af1c <__mulsi3>
1000c7fc:	a009883a 	mov	r4,r20
1000c800:	980b883a 	mov	r5,r19
1000c804:	d8800415 	stw	r2,16(sp)
1000c808:	000af1c0 	call	1000af1c <__mulsi3>
1000c80c:	a809883a 	mov	r4,r21
1000c810:	800b883a 	mov	r5,r16
1000c814:	d8800715 	stw	r2,28(sp)
1000c818:	000af1c0 	call	1000af1c <__mulsi3>
1000c81c:	a009883a 	mov	r4,r20
1000c820:	800b883a 	mov	r5,r16
1000c824:	102b883a 	mov	r21,r2
1000c828:	000af1c0 	call	1000af1c <__mulsi3>
1000c82c:	d9c00417 	ldw	r7,16(sp)
1000c830:	da400717 	ldw	r9,28(sp)
1000c834:	1011883a 	mov	r8,r2
1000c838:	3804d43a 	srli	r2,r7,16
1000c83c:	aa47883a 	add	r3,r21,r9
1000c840:	1887883a 	add	r3,r3,r2
1000c844:	1d40022e 	bgeu	r3,r21,1000c850 <__muldf3+0x4ac>
1000c848:	00800074 	movhi	r2,1
1000c84c:	4091883a 	add	r8,r8,r2
1000c850:	1828d43a 	srli	r20,r3,16
1000c854:	1806943a 	slli	r3,r3,16
1000c858:	39ffffcc 	andi	r7,r7,65535
1000c85c:	9009883a 	mov	r4,r18
1000c860:	980b883a 	mov	r5,r19
1000c864:	19eb883a 	add	r21,r3,r7
1000c868:	4529883a 	add	r20,r8,r20
1000c86c:	000af1c0 	call	1000af1c <__mulsi3>
1000c870:	980b883a 	mov	r5,r19
1000c874:	8809883a 	mov	r4,r17
1000c878:	d8800415 	stw	r2,16(sp)
1000c87c:	000af1c0 	call	1000af1c <__mulsi3>
1000c880:	9009883a 	mov	r4,r18
1000c884:	800b883a 	mov	r5,r16
1000c888:	1027883a 	mov	r19,r2
1000c88c:	000af1c0 	call	1000af1c <__mulsi3>
1000c890:	8809883a 	mov	r4,r17
1000c894:	800b883a 	mov	r5,r16
1000c898:	1025883a 	mov	r18,r2
1000c89c:	000af1c0 	call	1000af1c <__mulsi3>
1000c8a0:	d9c00417 	ldw	r7,16(sp)
1000c8a4:	1011883a 	mov	r8,r2
1000c8a8:	94c7883a 	add	r3,r18,r19
1000c8ac:	3804d43a 	srli	r2,r7,16
1000c8b0:	1887883a 	add	r3,r3,r2
1000c8b4:	1c80022e 	bgeu	r3,r18,1000c8c0 <__muldf3+0x51c>
1000c8b8:	00800074 	movhi	r2,1
1000c8bc:	4091883a 	add	r8,r8,r2
1000c8c0:	1804943a 	slli	r2,r3,16
1000c8c4:	d9400217 	ldw	r5,8(sp)
1000c8c8:	39ffffcc 	andi	r7,r7,65535
1000c8cc:	11cf883a 	add	r7,r2,r7
1000c8d0:	d8800117 	ldw	r2,4(sp)
1000c8d4:	b949883a 	add	r4,r23,r5
1000c8d8:	2739883a 	add	fp,r4,fp
1000c8dc:	e5ef803a 	cmpltu	r23,fp,r23
1000c8e0:	388f883a 	add	r7,r7,r2
1000c8e4:	3dcb883a 	add	r5,r7,r23
1000c8e8:	a149883a 	add	r4,r20,r5
1000c8ec:	2def803a 	cmpltu	r23,r5,r23
1000c8f0:	d9400117 	ldw	r5,4(sp)
1000c8f4:	e579883a 	add	fp,fp,r21
1000c8f8:	e56b803a 	cmpltu	r21,fp,r21
1000c8fc:	1804d43a 	srli	r2,r3,16
1000c900:	394f803a 	cmpltu	r7,r7,r5
1000c904:	2547883a 	add	r3,r4,r21
1000c908:	b9e6b03a 	or	r19,r23,r7
1000c90c:	1d6b803a 	cmpltu	r21,r3,r21
1000c910:	2529803a 	cmpltu	r20,r4,r20
1000c914:	98a7883a 	add	r19,r19,r2
1000c918:	ad2ab03a 	or	r21,r21,r20
1000c91c:	9d67883a 	add	r19,r19,r21
1000c920:	e02e927a 	slli	r23,fp,9
1000c924:	9a27883a 	add	r19,r19,r8
1000c928:	d9000317 	ldw	r4,12(sp)
1000c92c:	1804d5fa 	srli	r2,r3,23
1000c930:	9826927a 	slli	r19,r19,9
1000c934:	e038d5fa 	srli	fp,fp,23
1000c938:	b92eb03a 	or	r23,r23,r4
1000c93c:	1806927a 	slli	r3,r3,9
1000c940:	98a6b03a 	or	r19,r19,r2
1000c944:	b82ec03a 	cmpne	r23,r23,zero
1000c948:	bf2eb03a 	or	r23,r23,fp
1000c94c:	9880402c 	andhi	r2,r19,256
1000c950:	b8eeb03a 	or	r23,r23,r3
1000c954:	10000926 	beq	r2,zero,1000c97c <__muldf3+0x5d8>
1000c958:	b806d07a 	srli	r3,r23,1
1000c95c:	bdc0004c 	andi	r23,r23,1
1000c960:	980497fa 	slli	r2,r19,31
1000c964:	b8eeb03a 	or	r23,r23,r3
1000c968:	d8c00017 	ldw	r3,0(sp)
1000c96c:	9826d07a 	srli	r19,r19,1
1000c970:	b8aeb03a 	or	r23,r23,r2
1000c974:	18c00044 	addi	r3,r3,1
1000c978:	d8c00015 	stw	r3,0(sp)
1000c97c:	d8c00017 	ldw	r3,0(sp)
1000c980:	1880ffc4 	addi	r2,r3,1023
1000c984:	0080490e 	bge	zero,r2,1000caac <__muldf3+0x708>
1000c988:	b8c001cc 	andi	r3,r23,7
1000c98c:	18000726 	beq	r3,zero,1000c9ac <__muldf3+0x608>
1000c990:	b90003cc 	andi	r4,r23,15
1000c994:	00c00104 	movi	r3,4
1000c998:	20c00426 	beq	r4,r3,1000c9ac <__muldf3+0x608>
1000c99c:	b8c7883a 	add	r3,r23,r3
1000c9a0:	1def803a 	cmpltu	r23,r3,r23
1000c9a4:	9de7883a 	add	r19,r19,r23
1000c9a8:	182f883a 	mov	r23,r3
1000c9ac:	98c0402c 	andhi	r3,r19,256
1000c9b0:	18000526 	beq	r3,zero,1000c9c8 <__muldf3+0x624>
1000c9b4:	d8c00017 	ldw	r3,0(sp)
1000c9b8:	00bfc034 	movhi	r2,65280
1000c9bc:	10bfffc4 	addi	r2,r2,-1
1000c9c0:	98a6703a 	and	r19,r19,r2
1000c9c4:	18810004 	addi	r2,r3,1024
1000c9c8:	00c1ff84 	movi	r3,2046
1000c9cc:	18bf2016 	blt	r3,r2,1000c650 <__alt_data_end+0xf800c650>
1000c9d0:	9806977a 	slli	r3,r19,29
1000c9d4:	b82ed0fa 	srli	r23,r23,3
1000c9d8:	9826927a 	slli	r19,r19,9
1000c9dc:	1081ffcc 	andi	r2,r2,2047
1000c9e0:	1deeb03a 	or	r23,r3,r23
1000c9e4:	9826d33a 	srli	r19,r19,12
1000c9e8:	b039883a 	mov	fp,r22
1000c9ec:	003eca06 	br	1000c518 <__alt_data_end+0xf800c518>
1000c9f0:	9880022c 	andhi	r2,r19,8
1000c9f4:	10000a26 	beq	r2,zero,1000ca20 <__muldf3+0x67c>
1000c9f8:	9080022c 	andhi	r2,r18,8
1000c9fc:	1000081e 	bne	r2,zero,1000ca20 <__muldf3+0x67c>
1000ca00:	00800434 	movhi	r2,16
1000ca04:	10bfffc4 	addi	r2,r2,-1
1000ca08:	94c00234 	orhi	r19,r18,8
1000ca0c:	98a6703a 	and	r19,r19,r2
1000ca10:	a039883a 	mov	fp,r20
1000ca14:	a82f883a 	mov	r23,r21
1000ca18:	0081ffc4 	movi	r2,2047
1000ca1c:	003ebe06 	br	1000c518 <__alt_data_end+0xf800c518>
1000ca20:	00800434 	movhi	r2,16
1000ca24:	10bfffc4 	addi	r2,r2,-1
1000ca28:	9cc00234 	orhi	r19,r19,8
1000ca2c:	98a6703a 	and	r19,r19,r2
1000ca30:	0081ffc4 	movi	r2,2047
1000ca34:	003eb806 	br	1000c518 <__alt_data_end+0xf800c518>
1000ca38:	14fff604 	addi	r19,r2,-40
1000ca3c:	a4e6983a 	sll	r19,r20,r19
1000ca40:	002f883a 	mov	r23,zero
1000ca44:	003edd06 	br	1000c5bc <__alt_data_end+0xf800c5bc>
1000ca48:	d9800515 	stw	r6,20(sp)
1000ca4c:	d9c00415 	stw	r7,16(sp)
1000ca50:	da000615 	stw	r8,24(sp)
1000ca54:	000d61c0 	call	1000d61c <__clzsi2>
1000ca58:	10800804 	addi	r2,r2,32
1000ca5c:	da000617 	ldw	r8,24(sp)
1000ca60:	d9c00417 	ldw	r7,16(sp)
1000ca64:	d9800517 	ldw	r6,20(sp)
1000ca68:	003ecb06 	br	1000c598 <__alt_data_end+0xf800c598>
1000ca6c:	14bff604 	addi	r18,r2,-40
1000ca70:	34a4983a 	sll	r18,r6,r18
1000ca74:	002b883a 	mov	r21,zero
1000ca78:	003ef106 	br	1000c640 <__alt_data_end+0xf800c640>
1000ca7c:	3009883a 	mov	r4,r6
1000ca80:	d9400415 	stw	r5,16(sp)
1000ca84:	d9800515 	stw	r6,20(sp)
1000ca88:	da000615 	stw	r8,24(sp)
1000ca8c:	da400715 	stw	r9,28(sp)
1000ca90:	000d61c0 	call	1000d61c <__clzsi2>
1000ca94:	10800804 	addi	r2,r2,32
1000ca98:	da400717 	ldw	r9,28(sp)
1000ca9c:	da000617 	ldw	r8,24(sp)
1000caa0:	d9800517 	ldw	r6,20(sp)
1000caa4:	d9400417 	ldw	r5,16(sp)
1000caa8:	003edc06 	br	1000c61c <__alt_data_end+0xf800c61c>
1000caac:	d8c00017 	ldw	r3,0(sp)
1000cab0:	00bf0084 	movi	r2,-1022
1000cab4:	10c5c83a 	sub	r2,r2,r3
1000cab8:	00c00e04 	movi	r3,56
1000cabc:	18be9216 	blt	r3,r2,1000c508 <__alt_data_end+0xf800c508>
1000cac0:	00c007c4 	movi	r3,31
1000cac4:	18801916 	blt	r3,r2,1000cb2c <__muldf3+0x788>
1000cac8:	d9000017 	ldw	r4,0(sp)
1000cacc:	b88ad83a 	srl	r5,r23,r2
1000cad0:	9884d83a 	srl	r2,r19,r2
1000cad4:	20c10784 	addi	r3,r4,1054
1000cad8:	98c8983a 	sll	r4,r19,r3
1000cadc:	b8c6983a 	sll	r3,r23,r3
1000cae0:	2908b03a 	or	r4,r5,r4
1000cae4:	1806c03a 	cmpne	r3,r3,zero
1000cae8:	20c6b03a 	or	r3,r4,r3
1000caec:	190001cc 	andi	r4,r3,7
1000caf0:	20000726 	beq	r4,zero,1000cb10 <__muldf3+0x76c>
1000caf4:	194003cc 	andi	r5,r3,15
1000caf8:	01000104 	movi	r4,4
1000cafc:	29000426 	beq	r5,r4,1000cb10 <__muldf3+0x76c>
1000cb00:	1909883a 	add	r4,r3,r4
1000cb04:	20c7803a 	cmpltu	r3,r4,r3
1000cb08:	10c5883a 	add	r2,r2,r3
1000cb0c:	2007883a 	mov	r3,r4
1000cb10:	1100202c 	andhi	r4,r2,128
1000cb14:	20001226 	beq	r4,zero,1000cb60 <__muldf3+0x7bc>
1000cb18:	b039883a 	mov	fp,r22
1000cb1c:	00800044 	movi	r2,1
1000cb20:	0027883a 	mov	r19,zero
1000cb24:	002f883a 	mov	r23,zero
1000cb28:	003e7b06 	br	1000c518 <__alt_data_end+0xf800c518>
1000cb2c:	d9400017 	ldw	r5,0(sp)
1000cb30:	00fef884 	movi	r3,-1054
1000cb34:	01000804 	movi	r4,32
1000cb38:	1947c83a 	sub	r3,r3,r5
1000cb3c:	98c6d83a 	srl	r3,r19,r3
1000cb40:	11000f26 	beq	r2,r4,1000cb80 <__muldf3+0x7dc>
1000cb44:	28810f84 	addi	r2,r5,1086
1000cb48:	9884983a 	sll	r2,r19,r2
1000cb4c:	15c4b03a 	or	r2,r2,r23
1000cb50:	1004c03a 	cmpne	r2,r2,zero
1000cb54:	10c6b03a 	or	r3,r2,r3
1000cb58:	0005883a 	mov	r2,zero
1000cb5c:	003fe306 	br	1000caec <__alt_data_end+0xf800caec>
1000cb60:	102e977a 	slli	r23,r2,29
1000cb64:	1806d0fa 	srli	r3,r3,3
1000cb68:	1004927a 	slli	r2,r2,9
1000cb6c:	b039883a 	mov	fp,r22
1000cb70:	b8eeb03a 	or	r23,r23,r3
1000cb74:	1026d33a 	srli	r19,r2,12
1000cb78:	0005883a 	mov	r2,zero
1000cb7c:	003e6606 	br	1000c518 <__alt_data_end+0xf800c518>
1000cb80:	0005883a 	mov	r2,zero
1000cb84:	003ff106 	br	1000cb4c <__alt_data_end+0xf800cb4c>
1000cb88:	00800434 	movhi	r2,16
1000cb8c:	10bfffc4 	addi	r2,r2,-1
1000cb90:	9cc00234 	orhi	r19,r19,8
1000cb94:	98a6703a 	and	r19,r19,r2
1000cb98:	b039883a 	mov	fp,r22
1000cb9c:	0081ffc4 	movi	r2,2047
1000cba0:	003e5d06 	br	1000c518 <__alt_data_end+0xf800c518>

1000cba4 <__subdf3>:
1000cba4:	02000434 	movhi	r8,16
1000cba8:	423fffc4 	addi	r8,r8,-1
1000cbac:	defffb04 	addi	sp,sp,-20
1000cbb0:	2a06703a 	and	r3,r5,r8
1000cbb4:	3a10703a 	and	r8,r7,r8
1000cbb8:	3804d53a 	srli	r2,r7,20
1000cbbc:	dc800215 	stw	r18,8(sp)
1000cbc0:	dc400115 	stw	r17,4(sp)
1000cbc4:	2824d7fa 	srli	r18,r5,31
1000cbc8:	2822d53a 	srli	r17,r5,20
1000cbcc:	401090fa 	slli	r8,r8,3
1000cbd0:	180a90fa 	slli	r5,r3,3
1000cbd4:	3006d77a 	srli	r3,r6,29
1000cbd8:	2014d77a 	srli	r10,r4,29
1000cbdc:	dc000015 	stw	r16,0(sp)
1000cbe0:	40d0b03a 	or	r8,r8,r3
1000cbe4:	dfc00415 	stw	ra,16(sp)
1000cbe8:	dcc00315 	stw	r19,12(sp)
1000cbec:	1081ffcc 	andi	r2,r2,2047
1000cbf0:	00c1ffc4 	movi	r3,2047
1000cbf4:	9013883a 	mov	r9,r18
1000cbf8:	8c41ffcc 	andi	r17,r17,2047
1000cbfc:	94803fcc 	andi	r18,r18,255
1000cc00:	2a8ab03a 	or	r5,r5,r10
1000cc04:	202090fa 	slli	r16,r4,3
1000cc08:	380ed7fa 	srli	r7,r7,31
1000cc0c:	300c90fa 	slli	r6,r6,3
1000cc10:	10c02e26 	beq	r2,r3,1000cccc <__subdf3+0x128>
1000cc14:	39c0005c 	xori	r7,r7,1
1000cc18:	8887c83a 	sub	r3,r17,r2
1000cc1c:	91c03026 	beq	r18,r7,1000cce0 <__subdf3+0x13c>
1000cc20:	00c0a40e 	bge	zero,r3,1000ceb4 <__subdf3+0x310>
1000cc24:	10004c1e 	bne	r2,zero,1000cd58 <__subdf3+0x1b4>
1000cc28:	4184b03a 	or	r2,r8,r6
1000cc2c:	10008f1e 	bne	r2,zero,1000ce6c <__subdf3+0x2c8>
1000cc30:	808001cc 	andi	r2,r16,7
1000cc34:	10007d26 	beq	r2,zero,1000ce2c <__subdf3+0x288>
1000cc38:	80c003cc 	andi	r3,r16,15
1000cc3c:	00800104 	movi	r2,4
1000cc40:	18807a26 	beq	r3,r2,1000ce2c <__subdf3+0x288>
1000cc44:	80c00104 	addi	r3,r16,4
1000cc48:	1c21803a 	cmpltu	r16,r3,r16
1000cc4c:	2c0b883a 	add	r5,r5,r16
1000cc50:	2880202c 	andhi	r2,r5,128
1000cc54:	9240004c 	andi	r9,r18,1
1000cc58:	1821883a 	mov	r16,r3
1000cc5c:	10007626 	beq	r2,zero,1000ce38 <__subdf3+0x294>
1000cc60:	8c400044 	addi	r17,r17,1
1000cc64:	0081ffc4 	movi	r2,2047
1000cc68:	8880b226 	beq	r17,r2,1000cf34 <__subdf3+0x390>
1000cc6c:	00bfe034 	movhi	r2,65408
1000cc70:	10bfffc4 	addi	r2,r2,-1
1000cc74:	288a703a 	and	r5,r5,r2
1000cc78:	2804977a 	slli	r2,r5,29
1000cc7c:	280a927a 	slli	r5,r5,9
1000cc80:	8020d0fa 	srli	r16,r16,3
1000cc84:	280ad33a 	srli	r5,r5,12
1000cc88:	1404b03a 	or	r2,r2,r16
1000cc8c:	8c41ffcc 	andi	r17,r17,2047
1000cc90:	8822953a 	slli	r17,r17,20
1000cc94:	4a403fcc 	andi	r9,r9,255
1000cc98:	481297fa 	slli	r9,r9,31
1000cc9c:	00c00434 	movhi	r3,16
1000cca0:	18ffffc4 	addi	r3,r3,-1
1000cca4:	28c6703a 	and	r3,r5,r3
1000cca8:	1c46b03a 	or	r3,r3,r17
1000ccac:	1a46b03a 	or	r3,r3,r9
1000ccb0:	dfc00417 	ldw	ra,16(sp)
1000ccb4:	dcc00317 	ldw	r19,12(sp)
1000ccb8:	dc800217 	ldw	r18,8(sp)
1000ccbc:	dc400117 	ldw	r17,4(sp)
1000ccc0:	dc000017 	ldw	r16,0(sp)
1000ccc4:	dec00504 	addi	sp,sp,20
1000ccc8:	f800283a 	ret
1000cccc:	4186b03a 	or	r3,r8,r6
1000ccd0:	183fd026 	beq	r3,zero,1000cc14 <__alt_data_end+0xf800cc14>
1000ccd4:	39c03fcc 	andi	r7,r7,255
1000ccd8:	8887c83a 	sub	r3,r17,r2
1000ccdc:	91ffd01e 	bne	r18,r7,1000cc20 <__alt_data_end+0xf800cc20>
1000cce0:	00c09b0e 	bge	zero,r3,1000cf50 <__subdf3+0x3ac>
1000cce4:	10006926 	beq	r2,zero,1000ce8c <__subdf3+0x2e8>
1000cce8:	0081ffc4 	movi	r2,2047
1000ccec:	88bfd026 	beq	r17,r2,1000cc30 <__alt_data_end+0xf800cc30>
1000ccf0:	42002034 	orhi	r8,r8,128
1000ccf4:	00800e04 	movi	r2,56
1000ccf8:	10c0e20e 	bge	r2,r3,1000d084 <__subdf3+0x4e0>
1000ccfc:	418cb03a 	or	r6,r8,r6
1000cd00:	300cc03a 	cmpne	r6,r6,zero
1000cd04:	0007883a 	mov	r3,zero
1000cd08:	340d883a 	add	r6,r6,r16
1000cd0c:	3421803a 	cmpltu	r16,r6,r16
1000cd10:	194b883a 	add	r5,r3,r5
1000cd14:	2c0b883a 	add	r5,r5,r16
1000cd18:	3021883a 	mov	r16,r6
1000cd1c:	2880202c 	andhi	r2,r5,128
1000cd20:	103fc326 	beq	r2,zero,1000cc30 <__alt_data_end+0xf800cc30>
1000cd24:	8c400044 	addi	r17,r17,1
1000cd28:	0081ffc4 	movi	r2,2047
1000cd2c:	88811026 	beq	r17,r2,1000d170 <__subdf3+0x5cc>
1000cd30:	00bfe034 	movhi	r2,65408
1000cd34:	10bfffc4 	addi	r2,r2,-1
1000cd38:	288a703a 	and	r5,r5,r2
1000cd3c:	8006d07a 	srli	r3,r16,1
1000cd40:	280497fa 	slli	r2,r5,31
1000cd44:	8400004c 	andi	r16,r16,1
1000cd48:	80e0b03a 	or	r16,r16,r3
1000cd4c:	80a0b03a 	or	r16,r16,r2
1000cd50:	280ad07a 	srli	r5,r5,1
1000cd54:	003fb606 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000cd58:	0081ffc4 	movi	r2,2047
1000cd5c:	88bfb426 	beq	r17,r2,1000cc30 <__alt_data_end+0xf800cc30>
1000cd60:	42002034 	orhi	r8,r8,128
1000cd64:	00800e04 	movi	r2,56
1000cd68:	10c07516 	blt	r2,r3,1000cf40 <__subdf3+0x39c>
1000cd6c:	008007c4 	movi	r2,31
1000cd70:	10c09816 	blt	r2,r3,1000cfd4 <__subdf3+0x430>
1000cd74:	00800804 	movi	r2,32
1000cd78:	10c5c83a 	sub	r2,r2,r3
1000cd7c:	30c8d83a 	srl	r4,r6,r3
1000cd80:	408e983a 	sll	r7,r8,r2
1000cd84:	3084983a 	sll	r2,r6,r2
1000cd88:	40c6d83a 	srl	r3,r8,r3
1000cd8c:	3908b03a 	or	r4,r7,r4
1000cd90:	1004c03a 	cmpne	r2,r2,zero
1000cd94:	208cb03a 	or	r6,r4,r2
1000cd98:	818dc83a 	sub	r6,r16,r6
1000cd9c:	81a1803a 	cmpltu	r16,r16,r6
1000cda0:	28cbc83a 	sub	r5,r5,r3
1000cda4:	2c0bc83a 	sub	r5,r5,r16
1000cda8:	3021883a 	mov	r16,r6
1000cdac:	2880202c 	andhi	r2,r5,128
1000cdb0:	103f9f26 	beq	r2,zero,1000cc30 <__alt_data_end+0xf800cc30>
1000cdb4:	04c02034 	movhi	r19,128
1000cdb8:	9cffffc4 	addi	r19,r19,-1
1000cdbc:	2ce6703a 	and	r19,r5,r19
1000cdc0:	98004d26 	beq	r19,zero,1000cef8 <__subdf3+0x354>
1000cdc4:	9809883a 	mov	r4,r19
1000cdc8:	000d61c0 	call	1000d61c <__clzsi2>
1000cdcc:	10fffe04 	addi	r3,r2,-8
1000cdd0:	010007c4 	movi	r4,31
1000cdd4:	20c04e16 	blt	r4,r3,1000cf10 <__subdf3+0x36c>
1000cdd8:	01000a04 	movi	r4,40
1000cddc:	2085c83a 	sub	r2,r4,r2
1000cde0:	8084d83a 	srl	r2,r16,r2
1000cde4:	98e6983a 	sll	r19,r19,r3
1000cde8:	80e0983a 	sll	r16,r16,r3
1000cdec:	14c4b03a 	or	r2,r2,r19
1000cdf0:	1c404b16 	blt	r3,r17,1000cf20 <__subdf3+0x37c>
1000cdf4:	1c63c83a 	sub	r17,r3,r17
1000cdf8:	89400044 	addi	r5,r17,1
1000cdfc:	00c007c4 	movi	r3,31
1000ce00:	19406716 	blt	r3,r5,1000cfa0 <__subdf3+0x3fc>
1000ce04:	1c47c83a 	sub	r3,r3,r17
1000ce08:	8148d83a 	srl	r4,r16,r5
1000ce0c:	80e0983a 	sll	r16,r16,r3
1000ce10:	10c6983a 	sll	r3,r2,r3
1000ce14:	114ad83a 	srl	r5,r2,r5
1000ce18:	8004c03a 	cmpne	r2,r16,zero
1000ce1c:	20e0b03a 	or	r16,r4,r3
1000ce20:	80a0b03a 	or	r16,r16,r2
1000ce24:	0023883a 	mov	r17,zero
1000ce28:	003f8106 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000ce2c:	2880202c 	andhi	r2,r5,128
1000ce30:	9240004c 	andi	r9,r18,1
1000ce34:	103f8a1e 	bne	r2,zero,1000cc60 <__alt_data_end+0xf800cc60>
1000ce38:	2804977a 	slli	r2,r5,29
1000ce3c:	8020d0fa 	srli	r16,r16,3
1000ce40:	00c1ffc4 	movi	r3,2047
1000ce44:	280ad0fa 	srli	r5,r5,3
1000ce48:	1404b03a 	or	r2,r2,r16
1000ce4c:	88c0031e 	bne	r17,r3,1000ce5c <__subdf3+0x2b8>
1000ce50:	1146b03a 	or	r3,r2,r5
1000ce54:	18003726 	beq	r3,zero,1000cf34 <__subdf3+0x390>
1000ce58:	29400234 	orhi	r5,r5,8
1000ce5c:	00c00434 	movhi	r3,16
1000ce60:	18ffffc4 	addi	r3,r3,-1
1000ce64:	28ca703a 	and	r5,r5,r3
1000ce68:	003f8806 	br	1000cc8c <__alt_data_end+0xf800cc8c>
1000ce6c:	18ffffc4 	addi	r3,r3,-1
1000ce70:	1800481e 	bne	r3,zero,1000cf94 <__subdf3+0x3f0>
1000ce74:	818dc83a 	sub	r6,r16,r6
1000ce78:	81a1803a 	cmpltu	r16,r16,r6
1000ce7c:	2a0bc83a 	sub	r5,r5,r8
1000ce80:	2c0bc83a 	sub	r5,r5,r16
1000ce84:	3021883a 	mov	r16,r6
1000ce88:	003fc806 	br	1000cdac <__alt_data_end+0xf800cdac>
1000ce8c:	4184b03a 	or	r2,r8,r6
1000ce90:	103f6726 	beq	r2,zero,1000cc30 <__alt_data_end+0xf800cc30>
1000ce94:	18ffffc4 	addi	r3,r3,-1
1000ce98:	1800931e 	bne	r3,zero,1000d0e8 <__subdf3+0x544>
1000ce9c:	340d883a 	add	r6,r6,r16
1000cea0:	3421803a 	cmpltu	r16,r6,r16
1000cea4:	414b883a 	add	r5,r8,r5
1000cea8:	2c0b883a 	add	r5,r5,r16
1000ceac:	3021883a 	mov	r16,r6
1000ceb0:	003f9a06 	br	1000cd1c <__alt_data_end+0xf800cd1c>
1000ceb4:	1800531e 	bne	r3,zero,1000d004 <__subdf3+0x460>
1000ceb8:	88800044 	addi	r2,r17,1
1000cebc:	1081ffcc 	andi	r2,r2,2047
1000cec0:	00c00044 	movi	r3,1
1000cec4:	1880a00e 	bge	r3,r2,1000d148 <__subdf3+0x5a4>
1000cec8:	8185c83a 	sub	r2,r16,r6
1000cecc:	8087803a 	cmpltu	r3,r16,r2
1000ced0:	2a27c83a 	sub	r19,r5,r8
1000ced4:	98e7c83a 	sub	r19,r19,r3
1000ced8:	98c0202c 	andhi	r3,r19,128
1000cedc:	18006226 	beq	r3,zero,1000d068 <__subdf3+0x4c4>
1000cee0:	3421c83a 	sub	r16,r6,r16
1000cee4:	414bc83a 	sub	r5,r8,r5
1000cee8:	340d803a 	cmpltu	r6,r6,r16
1000ceec:	29a7c83a 	sub	r19,r5,r6
1000cef0:	3825883a 	mov	r18,r7
1000cef4:	983fb31e 	bne	r19,zero,1000cdc4 <__alt_data_end+0xf800cdc4>
1000cef8:	8009883a 	mov	r4,r16
1000cefc:	000d61c0 	call	1000d61c <__clzsi2>
1000cf00:	10800804 	addi	r2,r2,32
1000cf04:	10fffe04 	addi	r3,r2,-8
1000cf08:	010007c4 	movi	r4,31
1000cf0c:	20ffb20e 	bge	r4,r3,1000cdd8 <__alt_data_end+0xf800cdd8>
1000cf10:	10bff604 	addi	r2,r2,-40
1000cf14:	8084983a 	sll	r2,r16,r2
1000cf18:	0021883a 	mov	r16,zero
1000cf1c:	1c7fb50e 	bge	r3,r17,1000cdf4 <__alt_data_end+0xf800cdf4>
1000cf20:	017fe034 	movhi	r5,65408
1000cf24:	297fffc4 	addi	r5,r5,-1
1000cf28:	88e3c83a 	sub	r17,r17,r3
1000cf2c:	114a703a 	and	r5,r2,r5
1000cf30:	003f3f06 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000cf34:	000b883a 	mov	r5,zero
1000cf38:	0005883a 	mov	r2,zero
1000cf3c:	003f5306 	br	1000cc8c <__alt_data_end+0xf800cc8c>
1000cf40:	418cb03a 	or	r6,r8,r6
1000cf44:	300cc03a 	cmpne	r6,r6,zero
1000cf48:	0007883a 	mov	r3,zero
1000cf4c:	003f9206 	br	1000cd98 <__alt_data_end+0xf800cd98>
1000cf50:	1800961e 	bne	r3,zero,1000d1ac <__subdf3+0x608>
1000cf54:	88800044 	addi	r2,r17,1
1000cf58:	1101ffcc 	andi	r4,r2,2047
1000cf5c:	00c00044 	movi	r3,1
1000cf60:	1900680e 	bge	r3,r4,1000d104 <__subdf3+0x560>
1000cf64:	00c1ffc4 	movi	r3,2047
1000cf68:	10c0b626 	beq	r2,r3,1000d244 <__subdf3+0x6a0>
1000cf6c:	340d883a 	add	r6,r6,r16
1000cf70:	3421803a 	cmpltu	r16,r6,r16
1000cf74:	414b883a 	add	r5,r8,r5
1000cf78:	2c0b883a 	add	r5,r5,r16
1000cf7c:	282097fa 	slli	r16,r5,31
1000cf80:	300cd07a 	srli	r6,r6,1
1000cf84:	280ad07a 	srli	r5,r5,1
1000cf88:	1023883a 	mov	r17,r2
1000cf8c:	81a0b03a 	or	r16,r16,r6
1000cf90:	003f2706 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000cf94:	0081ffc4 	movi	r2,2047
1000cf98:	88bf721e 	bne	r17,r2,1000cd64 <__alt_data_end+0xf800cd64>
1000cf9c:	003f2406 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000cfa0:	893ff844 	addi	r4,r17,-31
1000cfa4:	00c00804 	movi	r3,32
1000cfa8:	1108d83a 	srl	r4,r2,r4
1000cfac:	28c05126 	beq	r5,r3,1000d0f4 <__subdf3+0x550>
1000cfb0:	00c00fc4 	movi	r3,63
1000cfb4:	1c63c83a 	sub	r17,r3,r17
1000cfb8:	1444983a 	sll	r2,r2,r17
1000cfbc:	1420b03a 	or	r16,r2,r16
1000cfc0:	8020c03a 	cmpne	r16,r16,zero
1000cfc4:	8120b03a 	or	r16,r16,r4
1000cfc8:	000b883a 	mov	r5,zero
1000cfcc:	0023883a 	mov	r17,zero
1000cfd0:	003f1706 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000cfd4:	18bff804 	addi	r2,r3,-32
1000cfd8:	01000804 	movi	r4,32
1000cfdc:	4084d83a 	srl	r2,r8,r2
1000cfe0:	19004626 	beq	r3,r4,1000d0fc <__subdf3+0x558>
1000cfe4:	01001004 	movi	r4,64
1000cfe8:	20c7c83a 	sub	r3,r4,r3
1000cfec:	40d0983a 	sll	r8,r8,r3
1000cff0:	418cb03a 	or	r6,r8,r6
1000cff4:	300cc03a 	cmpne	r6,r6,zero
1000cff8:	308cb03a 	or	r6,r6,r2
1000cffc:	0007883a 	mov	r3,zero
1000d000:	003f6506 	br	1000cd98 <__alt_data_end+0xf800cd98>
1000d004:	88002b26 	beq	r17,zero,1000d0b4 <__subdf3+0x510>
1000d008:	0101ffc4 	movi	r4,2047
1000d00c:	11002f26 	beq	r2,r4,1000d0cc <__subdf3+0x528>
1000d010:	00c7c83a 	sub	r3,zero,r3
1000d014:	29402034 	orhi	r5,r5,128
1000d018:	01000e04 	movi	r4,56
1000d01c:	20c08516 	blt	r4,r3,1000d234 <__subdf3+0x690>
1000d020:	010007c4 	movi	r4,31
1000d024:	20c0cd16 	blt	r4,r3,1000d35c <__subdf3+0x7b8>
1000d028:	01000804 	movi	r4,32
1000d02c:	20c9c83a 	sub	r4,r4,r3
1000d030:	2914983a 	sll	r10,r5,r4
1000d034:	80d2d83a 	srl	r9,r16,r3
1000d038:	8108983a 	sll	r4,r16,r4
1000d03c:	28cad83a 	srl	r5,r5,r3
1000d040:	5252b03a 	or	r9,r10,r9
1000d044:	2006c03a 	cmpne	r3,r4,zero
1000d048:	48e0b03a 	or	r16,r9,r3
1000d04c:	3421c83a 	sub	r16,r6,r16
1000d050:	414bc83a 	sub	r5,r8,r5
1000d054:	340d803a 	cmpltu	r6,r6,r16
1000d058:	298bc83a 	sub	r5,r5,r6
1000d05c:	1023883a 	mov	r17,r2
1000d060:	3825883a 	mov	r18,r7
1000d064:	003f5106 	br	1000cdac <__alt_data_end+0xf800cdac>
1000d068:	9886b03a 	or	r3,r19,r2
1000d06c:	18001c1e 	bne	r3,zero,1000d0e0 <__subdf3+0x53c>
1000d070:	0013883a 	mov	r9,zero
1000d074:	000b883a 	mov	r5,zero
1000d078:	0021883a 	mov	r16,zero
1000d07c:	0023883a 	mov	r17,zero
1000d080:	003f6d06 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000d084:	008007c4 	movi	r2,31
1000d088:	10c03c16 	blt	r2,r3,1000d17c <__subdf3+0x5d8>
1000d08c:	00800804 	movi	r2,32
1000d090:	10c5c83a 	sub	r2,r2,r3
1000d094:	30c8d83a 	srl	r4,r6,r3
1000d098:	408e983a 	sll	r7,r8,r2
1000d09c:	3084983a 	sll	r2,r6,r2
1000d0a0:	40c6d83a 	srl	r3,r8,r3
1000d0a4:	3908b03a 	or	r4,r7,r4
1000d0a8:	1004c03a 	cmpne	r2,r2,zero
1000d0ac:	208cb03a 	or	r6,r4,r2
1000d0b0:	003f1506 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d0b4:	2c08b03a 	or	r4,r5,r16
1000d0b8:	20000426 	beq	r4,zero,1000d0cc <__subdf3+0x528>
1000d0bc:	00c6303a 	nor	r3,zero,r3
1000d0c0:	183fe226 	beq	r3,zero,1000d04c <__alt_data_end+0xf800d04c>
1000d0c4:	0101ffc4 	movi	r4,2047
1000d0c8:	113fd31e 	bne	r2,r4,1000d018 <__alt_data_end+0xf800d018>
1000d0cc:	400b883a 	mov	r5,r8
1000d0d0:	3021883a 	mov	r16,r6
1000d0d4:	1023883a 	mov	r17,r2
1000d0d8:	3825883a 	mov	r18,r7
1000d0dc:	003ed406 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d0e0:	1021883a 	mov	r16,r2
1000d0e4:	003f3606 	br	1000cdc0 <__alt_data_end+0xf800cdc0>
1000d0e8:	0081ffc4 	movi	r2,2047
1000d0ec:	88bf011e 	bne	r17,r2,1000ccf4 <__alt_data_end+0xf800ccf4>
1000d0f0:	003ecf06 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d0f4:	0005883a 	mov	r2,zero
1000d0f8:	003fb006 	br	1000cfbc <__alt_data_end+0xf800cfbc>
1000d0fc:	0011883a 	mov	r8,zero
1000d100:	003fbb06 	br	1000cff0 <__alt_data_end+0xf800cff0>
1000d104:	2c04b03a 	or	r2,r5,r16
1000d108:	88007f1e 	bne	r17,zero,1000d308 <__subdf3+0x764>
1000d10c:	1000a926 	beq	r2,zero,1000d3b4 <__subdf3+0x810>
1000d110:	4184b03a 	or	r2,r8,r6
1000d114:	103ec626 	beq	r2,zero,1000cc30 <__alt_data_end+0xf800cc30>
1000d118:	340d883a 	add	r6,r6,r16
1000d11c:	414b883a 	add	r5,r8,r5
1000d120:	3421803a 	cmpltu	r16,r6,r16
1000d124:	2c0b883a 	add	r5,r5,r16
1000d128:	2880202c 	andhi	r2,r5,128
1000d12c:	1000bb26 	beq	r2,zero,1000d41c <__subdf3+0x878>
1000d130:	00bfe034 	movhi	r2,65408
1000d134:	10bfffc4 	addi	r2,r2,-1
1000d138:	288a703a 	and	r5,r5,r2
1000d13c:	3021883a 	mov	r16,r6
1000d140:	1823883a 	mov	r17,r3
1000d144:	003eba06 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d148:	2c04b03a 	or	r2,r5,r16
1000d14c:	8800311e 	bne	r17,zero,1000d214 <__subdf3+0x670>
1000d150:	1000451e 	bne	r2,zero,1000d268 <__subdf3+0x6c4>
1000d154:	4184b03a 	or	r2,r8,r6
1000d158:	10000426 	beq	r2,zero,1000d16c <__subdf3+0x5c8>
1000d15c:	400b883a 	mov	r5,r8
1000d160:	3021883a 	mov	r16,r6
1000d164:	3825883a 	mov	r18,r7
1000d168:	003eb106 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d16c:	0013883a 	mov	r9,zero
1000d170:	000b883a 	mov	r5,zero
1000d174:	0021883a 	mov	r16,zero
1000d178:	003f2f06 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000d17c:	18bff804 	addi	r2,r3,-32
1000d180:	01000804 	movi	r4,32
1000d184:	4084d83a 	srl	r2,r8,r2
1000d188:	19007226 	beq	r3,r4,1000d354 <__subdf3+0x7b0>
1000d18c:	01001004 	movi	r4,64
1000d190:	20c7c83a 	sub	r3,r4,r3
1000d194:	40d0983a 	sll	r8,r8,r3
1000d198:	418cb03a 	or	r6,r8,r6
1000d19c:	300cc03a 	cmpne	r6,r6,zero
1000d1a0:	308cb03a 	or	r6,r6,r2
1000d1a4:	0007883a 	mov	r3,zero
1000d1a8:	003ed706 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d1ac:	8800291e 	bne	r17,zero,1000d254 <__subdf3+0x6b0>
1000d1b0:	2c08b03a 	or	r4,r5,r16
1000d1b4:	20005026 	beq	r4,zero,1000d2f8 <__subdf3+0x754>
1000d1b8:	00c6303a 	nor	r3,zero,r3
1000d1bc:	18000f26 	beq	r3,zero,1000d1fc <__subdf3+0x658>
1000d1c0:	0101ffc4 	movi	r4,2047
1000d1c4:	11004c26 	beq	r2,r4,1000d2f8 <__subdf3+0x754>
1000d1c8:	01000e04 	movi	r4,56
1000d1cc:	20c07516 	blt	r4,r3,1000d3a4 <__subdf3+0x800>
1000d1d0:	010007c4 	movi	r4,31
1000d1d4:	20c08316 	blt	r4,r3,1000d3e4 <__subdf3+0x840>
1000d1d8:	01000804 	movi	r4,32
1000d1dc:	20c9c83a 	sub	r4,r4,r3
1000d1e0:	2914983a 	sll	r10,r5,r4
1000d1e4:	80ced83a 	srl	r7,r16,r3
1000d1e8:	8108983a 	sll	r4,r16,r4
1000d1ec:	28cad83a 	srl	r5,r5,r3
1000d1f0:	51ceb03a 	or	r7,r10,r7
1000d1f4:	2006c03a 	cmpne	r3,r4,zero
1000d1f8:	38e0b03a 	or	r16,r7,r3
1000d1fc:	81a1883a 	add	r16,r16,r6
1000d200:	2a0b883a 	add	r5,r5,r8
1000d204:	818d803a 	cmpltu	r6,r16,r6
1000d208:	298b883a 	add	r5,r5,r6
1000d20c:	1023883a 	mov	r17,r2
1000d210:	003ec206 	br	1000cd1c <__alt_data_end+0xf800cd1c>
1000d214:	1000221e 	bne	r2,zero,1000d2a0 <__subdf3+0x6fc>
1000d218:	4184b03a 	or	r2,r8,r6
1000d21c:	10005b26 	beq	r2,zero,1000d38c <__subdf3+0x7e8>
1000d220:	400b883a 	mov	r5,r8
1000d224:	3021883a 	mov	r16,r6
1000d228:	3825883a 	mov	r18,r7
1000d22c:	0441ffc4 	movi	r17,2047
1000d230:	003e7f06 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d234:	2c20b03a 	or	r16,r5,r16
1000d238:	8020c03a 	cmpne	r16,r16,zero
1000d23c:	000b883a 	mov	r5,zero
1000d240:	003f8206 	br	1000d04c <__alt_data_end+0xf800d04c>
1000d244:	1023883a 	mov	r17,r2
1000d248:	000b883a 	mov	r5,zero
1000d24c:	0021883a 	mov	r16,zero
1000d250:	003ef906 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000d254:	0101ffc4 	movi	r4,2047
1000d258:	11002726 	beq	r2,r4,1000d2f8 <__subdf3+0x754>
1000d25c:	00c7c83a 	sub	r3,zero,r3
1000d260:	29402034 	orhi	r5,r5,128
1000d264:	003fd806 	br	1000d1c8 <__alt_data_end+0xf800d1c8>
1000d268:	4184b03a 	or	r2,r8,r6
1000d26c:	103e7026 	beq	r2,zero,1000cc30 <__alt_data_end+0xf800cc30>
1000d270:	8185c83a 	sub	r2,r16,r6
1000d274:	8089803a 	cmpltu	r4,r16,r2
1000d278:	2a07c83a 	sub	r3,r5,r8
1000d27c:	1907c83a 	sub	r3,r3,r4
1000d280:	1900202c 	andhi	r4,r3,128
1000d284:	20005226 	beq	r4,zero,1000d3d0 <__subdf3+0x82c>
1000d288:	3421c83a 	sub	r16,r6,r16
1000d28c:	414bc83a 	sub	r5,r8,r5
1000d290:	340d803a 	cmpltu	r6,r6,r16
1000d294:	298bc83a 	sub	r5,r5,r6
1000d298:	3825883a 	mov	r18,r7
1000d29c:	003e6406 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d2a0:	4184b03a 	or	r2,r8,r6
1000d2a4:	10002926 	beq	r2,zero,1000d34c <__subdf3+0x7a8>
1000d2a8:	2804d0fa 	srli	r2,r5,3
1000d2ac:	8020d0fa 	srli	r16,r16,3
1000d2b0:	280a977a 	slli	r5,r5,29
1000d2b4:	10c0022c 	andhi	r3,r2,8
1000d2b8:	2c20b03a 	or	r16,r5,r16
1000d2bc:	18000826 	beq	r3,zero,1000d2e0 <__subdf3+0x73c>
1000d2c0:	4006d0fa 	srli	r3,r8,3
1000d2c4:	1900022c 	andhi	r4,r3,8
1000d2c8:	2000051e 	bne	r4,zero,1000d2e0 <__subdf3+0x73c>
1000d2cc:	300cd0fa 	srli	r6,r6,3
1000d2d0:	4010977a 	slli	r8,r8,29
1000d2d4:	1805883a 	mov	r2,r3
1000d2d8:	3825883a 	mov	r18,r7
1000d2dc:	41a0b03a 	or	r16,r8,r6
1000d2e0:	800ad77a 	srli	r5,r16,29
1000d2e4:	100490fa 	slli	r2,r2,3
1000d2e8:	802090fa 	slli	r16,r16,3
1000d2ec:	0441ffc4 	movi	r17,2047
1000d2f0:	288ab03a 	or	r5,r5,r2
1000d2f4:	003e4e06 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d2f8:	400b883a 	mov	r5,r8
1000d2fc:	3021883a 	mov	r16,r6
1000d300:	1023883a 	mov	r17,r2
1000d304:	003e4a06 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d308:	10002d26 	beq	r2,zero,1000d3c0 <__subdf3+0x81c>
1000d30c:	4184b03a 	or	r2,r8,r6
1000d310:	10000e26 	beq	r2,zero,1000d34c <__subdf3+0x7a8>
1000d314:	2804d0fa 	srli	r2,r5,3
1000d318:	8020d0fa 	srli	r16,r16,3
1000d31c:	280a977a 	slli	r5,r5,29
1000d320:	10c0022c 	andhi	r3,r2,8
1000d324:	2c20b03a 	or	r16,r5,r16
1000d328:	183fed26 	beq	r3,zero,1000d2e0 <__alt_data_end+0xf800d2e0>
1000d32c:	4006d0fa 	srli	r3,r8,3
1000d330:	1900022c 	andhi	r4,r3,8
1000d334:	203fea1e 	bne	r4,zero,1000d2e0 <__alt_data_end+0xf800d2e0>
1000d338:	300cd0fa 	srli	r6,r6,3
1000d33c:	4010977a 	slli	r8,r8,29
1000d340:	1805883a 	mov	r2,r3
1000d344:	41a0b03a 	or	r16,r8,r6
1000d348:	003fe506 	br	1000d2e0 <__alt_data_end+0xf800d2e0>
1000d34c:	0441ffc4 	movi	r17,2047
1000d350:	003e3706 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d354:	0011883a 	mov	r8,zero
1000d358:	003f8f06 	br	1000d198 <__alt_data_end+0xf800d198>
1000d35c:	193ff804 	addi	r4,r3,-32
1000d360:	02400804 	movi	r9,32
1000d364:	2908d83a 	srl	r4,r5,r4
1000d368:	1a402a26 	beq	r3,r9,1000d414 <__subdf3+0x870>
1000d36c:	02401004 	movi	r9,64
1000d370:	48c7c83a 	sub	r3,r9,r3
1000d374:	28ca983a 	sll	r5,r5,r3
1000d378:	2c20b03a 	or	r16,r5,r16
1000d37c:	8020c03a 	cmpne	r16,r16,zero
1000d380:	8120b03a 	or	r16,r16,r4
1000d384:	000b883a 	mov	r5,zero
1000d388:	003f3006 	br	1000d04c <__alt_data_end+0xf800d04c>
1000d38c:	0013883a 	mov	r9,zero
1000d390:	01402034 	movhi	r5,128
1000d394:	297fffc4 	addi	r5,r5,-1
1000d398:	043ffe04 	movi	r16,-8
1000d39c:	0441ffc4 	movi	r17,2047
1000d3a0:	003ea506 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000d3a4:	2c20b03a 	or	r16,r5,r16
1000d3a8:	8020c03a 	cmpne	r16,r16,zero
1000d3ac:	000b883a 	mov	r5,zero
1000d3b0:	003f9206 	br	1000d1fc <__alt_data_end+0xf800d1fc>
1000d3b4:	400b883a 	mov	r5,r8
1000d3b8:	3021883a 	mov	r16,r6
1000d3bc:	003e1c06 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d3c0:	400b883a 	mov	r5,r8
1000d3c4:	3021883a 	mov	r16,r6
1000d3c8:	0441ffc4 	movi	r17,2047
1000d3cc:	003e1806 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d3d0:	1888b03a 	or	r4,r3,r2
1000d3d4:	203f6526 	beq	r4,zero,1000d16c <__alt_data_end+0xf800d16c>
1000d3d8:	180b883a 	mov	r5,r3
1000d3dc:	1021883a 	mov	r16,r2
1000d3e0:	003e1306 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d3e4:	193ff804 	addi	r4,r3,-32
1000d3e8:	01c00804 	movi	r7,32
1000d3ec:	2908d83a 	srl	r4,r5,r4
1000d3f0:	19c00c26 	beq	r3,r7,1000d424 <__subdf3+0x880>
1000d3f4:	01c01004 	movi	r7,64
1000d3f8:	38c7c83a 	sub	r3,r7,r3
1000d3fc:	28ca983a 	sll	r5,r5,r3
1000d400:	2c20b03a 	or	r16,r5,r16
1000d404:	8020c03a 	cmpne	r16,r16,zero
1000d408:	8120b03a 	or	r16,r16,r4
1000d40c:	000b883a 	mov	r5,zero
1000d410:	003f7a06 	br	1000d1fc <__alt_data_end+0xf800d1fc>
1000d414:	000b883a 	mov	r5,zero
1000d418:	003fd706 	br	1000d378 <__alt_data_end+0xf800d378>
1000d41c:	3021883a 	mov	r16,r6
1000d420:	003e0306 	br	1000cc30 <__alt_data_end+0xf800cc30>
1000d424:	000b883a 	mov	r5,zero
1000d428:	003ff506 	br	1000d400 <__alt_data_end+0xf800d400>

1000d42c <__fixdfsi>:
1000d42c:	2806d53a 	srli	r3,r5,20
1000d430:	00800434 	movhi	r2,16
1000d434:	10bfffc4 	addi	r2,r2,-1
1000d438:	0180ff84 	movi	r6,1022
1000d43c:	18c1ffcc 	andi	r3,r3,2047
1000d440:	2884703a 	and	r2,r5,r2
1000d444:	280ad7fa 	srli	r5,r5,31
1000d448:	30c0120e 	bge	r6,r3,1000d494 <__fixdfsi+0x68>
1000d44c:	01810744 	movi	r6,1053
1000d450:	30c00c16 	blt	r6,r3,1000d484 <__fixdfsi+0x58>
1000d454:	01810cc4 	movi	r6,1075
1000d458:	30cdc83a 	sub	r6,r6,r3
1000d45c:	01c007c4 	movi	r7,31
1000d460:	10800434 	orhi	r2,r2,16
1000d464:	39800d16 	blt	r7,r6,1000d49c <__fixdfsi+0x70>
1000d468:	18fefb44 	addi	r3,r3,-1043
1000d46c:	2188d83a 	srl	r4,r4,r6
1000d470:	10c4983a 	sll	r2,r2,r3
1000d474:	2084b03a 	or	r2,r4,r2
1000d478:	28000726 	beq	r5,zero,1000d498 <__fixdfsi+0x6c>
1000d47c:	0085c83a 	sub	r2,zero,r2
1000d480:	f800283a 	ret
1000d484:	00a00034 	movhi	r2,32768
1000d488:	10bfffc4 	addi	r2,r2,-1
1000d48c:	2885883a 	add	r2,r5,r2
1000d490:	f800283a 	ret
1000d494:	0005883a 	mov	r2,zero
1000d498:	f800283a 	ret
1000d49c:	010104c4 	movi	r4,1043
1000d4a0:	20c7c83a 	sub	r3,r4,r3
1000d4a4:	10c4d83a 	srl	r2,r2,r3
1000d4a8:	003ff306 	br	1000d478 <__alt_data_end+0xf800d478>

1000d4ac <__floatsidf>:
1000d4ac:	defffd04 	addi	sp,sp,-12
1000d4b0:	dc000015 	stw	r16,0(sp)
1000d4b4:	dfc00215 	stw	ra,8(sp)
1000d4b8:	dc400115 	stw	r17,4(sp)
1000d4bc:	2021883a 	mov	r16,r4
1000d4c0:	20002926 	beq	r4,zero,1000d568 <__floatsidf+0xbc>
1000d4c4:	2022d7fa 	srli	r17,r4,31
1000d4c8:	88000126 	beq	r17,zero,1000d4d0 <__floatsidf+0x24>
1000d4cc:	0121c83a 	sub	r16,zero,r4
1000d4d0:	8009883a 	mov	r4,r16
1000d4d4:	000d61c0 	call	1000d61c <__clzsi2>
1000d4d8:	01810784 	movi	r6,1054
1000d4dc:	00c00284 	movi	r3,10
1000d4e0:	308dc83a 	sub	r6,r6,r2
1000d4e4:	1880150e 	bge	r3,r2,1000d53c <__floatsidf+0x90>
1000d4e8:	113ffd44 	addi	r4,r2,-11
1000d4ec:	8108983a 	sll	r4,r16,r4
1000d4f0:	00800434 	movhi	r2,16
1000d4f4:	10bfffc4 	addi	r2,r2,-1
1000d4f8:	3181ffcc 	andi	r6,r6,2047
1000d4fc:	2088703a 	and	r4,r4,r2
1000d500:	880b883a 	mov	r5,r17
1000d504:	0005883a 	mov	r2,zero
1000d508:	300c953a 	slli	r6,r6,20
1000d50c:	29403fcc 	andi	r5,r5,255
1000d510:	280a97fa 	slli	r5,r5,31
1000d514:	00c00434 	movhi	r3,16
1000d518:	18ffffc4 	addi	r3,r3,-1
1000d51c:	20c8703a 	and	r4,r4,r3
1000d520:	2186b03a 	or	r3,r4,r6
1000d524:	1946b03a 	or	r3,r3,r5
1000d528:	dfc00217 	ldw	ra,8(sp)
1000d52c:	dc400117 	ldw	r17,4(sp)
1000d530:	dc000017 	ldw	r16,0(sp)
1000d534:	dec00304 	addi	sp,sp,12
1000d538:	f800283a 	ret
1000d53c:	010002c4 	movi	r4,11
1000d540:	2089c83a 	sub	r4,r4,r2
1000d544:	8108d83a 	srl	r4,r16,r4
1000d548:	10800544 	addi	r2,r2,21
1000d54c:	00c00434 	movhi	r3,16
1000d550:	18ffffc4 	addi	r3,r3,-1
1000d554:	8084983a 	sll	r2,r16,r2
1000d558:	20c8703a 	and	r4,r4,r3
1000d55c:	3181ffcc 	andi	r6,r6,2047
1000d560:	880b883a 	mov	r5,r17
1000d564:	003fe806 	br	1000d508 <__alt_data_end+0xf800d508>
1000d568:	000b883a 	mov	r5,zero
1000d56c:	000d883a 	mov	r6,zero
1000d570:	0009883a 	mov	r4,zero
1000d574:	0005883a 	mov	r2,zero
1000d578:	003fe306 	br	1000d508 <__alt_data_end+0xf800d508>

1000d57c <__floatunsidf>:
1000d57c:	defffe04 	addi	sp,sp,-8
1000d580:	dc000015 	stw	r16,0(sp)
1000d584:	dfc00115 	stw	ra,4(sp)
1000d588:	2021883a 	mov	r16,r4
1000d58c:	20001f26 	beq	r4,zero,1000d60c <__floatunsidf+0x90>
1000d590:	000d61c0 	call	1000d61c <__clzsi2>
1000d594:	01010784 	movi	r4,1054
1000d598:	00c00284 	movi	r3,10
1000d59c:	2089c83a 	sub	r4,r4,r2
1000d5a0:	1880100e 	bge	r3,r2,1000d5e4 <__floatunsidf+0x68>
1000d5a4:	117ffd44 	addi	r5,r2,-11
1000d5a8:	814a983a 	sll	r5,r16,r5
1000d5ac:	00800434 	movhi	r2,16
1000d5b0:	10bfffc4 	addi	r2,r2,-1
1000d5b4:	2101ffcc 	andi	r4,r4,2047
1000d5b8:	288a703a 	and	r5,r5,r2
1000d5bc:	0005883a 	mov	r2,zero
1000d5c0:	2008953a 	slli	r4,r4,20
1000d5c4:	00c00434 	movhi	r3,16
1000d5c8:	18ffffc4 	addi	r3,r3,-1
1000d5cc:	28c6703a 	and	r3,r5,r3
1000d5d0:	1906b03a 	or	r3,r3,r4
1000d5d4:	dfc00117 	ldw	ra,4(sp)
1000d5d8:	dc000017 	ldw	r16,0(sp)
1000d5dc:	dec00204 	addi	sp,sp,8
1000d5e0:	f800283a 	ret
1000d5e4:	014002c4 	movi	r5,11
1000d5e8:	288bc83a 	sub	r5,r5,r2
1000d5ec:	814ad83a 	srl	r5,r16,r5
1000d5f0:	10800544 	addi	r2,r2,21
1000d5f4:	00c00434 	movhi	r3,16
1000d5f8:	18ffffc4 	addi	r3,r3,-1
1000d5fc:	8084983a 	sll	r2,r16,r2
1000d600:	28ca703a 	and	r5,r5,r3
1000d604:	2101ffcc 	andi	r4,r4,2047
1000d608:	003fed06 	br	1000d5c0 <__alt_data_end+0xf800d5c0>
1000d60c:	0009883a 	mov	r4,zero
1000d610:	000b883a 	mov	r5,zero
1000d614:	0005883a 	mov	r2,zero
1000d618:	003fe906 	br	1000d5c0 <__alt_data_end+0xf800d5c0>

1000d61c <__clzsi2>:
1000d61c:	00bfffd4 	movui	r2,65535
1000d620:	11000b36 	bltu	r2,r4,1000d650 <__clzsi2+0x34>
1000d624:	00803fc4 	movi	r2,255
1000d628:	11001e2e 	bgeu	r2,r4,1000d6a4 <__clzsi2+0x88>
1000d62c:	00c00204 	movi	r3,8
1000d630:	20c8d83a 	srl	r4,r4,r3
1000d634:	00c40074 	movhi	r3,4097
1000d638:	18ffcd04 	addi	r3,r3,-204
1000d63c:	00800604 	movi	r2,24
1000d640:	1909883a 	add	r4,r3,r4
1000d644:	20c00003 	ldbu	r3,0(r4)
1000d648:	10c5c83a 	sub	r2,r2,r3
1000d64c:	f800283a 	ret
1000d650:	00804034 	movhi	r2,256
1000d654:	10bfffc4 	addi	r2,r2,-1
1000d658:	11000936 	bltu	r2,r4,1000d680 <__clzsi2+0x64>
1000d65c:	00800404 	movi	r2,16
1000d660:	1007883a 	mov	r3,r2
1000d664:	20c8d83a 	srl	r4,r4,r3
1000d668:	00c40074 	movhi	r3,4097
1000d66c:	18ffcd04 	addi	r3,r3,-204
1000d670:	1909883a 	add	r4,r3,r4
1000d674:	20c00003 	ldbu	r3,0(r4)
1000d678:	10c5c83a 	sub	r2,r2,r3
1000d67c:	f800283a 	ret
1000d680:	00c00604 	movi	r3,24
1000d684:	20c8d83a 	srl	r4,r4,r3
1000d688:	00c40074 	movhi	r3,4097
1000d68c:	18ffcd04 	addi	r3,r3,-204
1000d690:	00800204 	movi	r2,8
1000d694:	1909883a 	add	r4,r3,r4
1000d698:	20c00003 	ldbu	r3,0(r4)
1000d69c:	10c5c83a 	sub	r2,r2,r3
1000d6a0:	f800283a 	ret
1000d6a4:	0007883a 	mov	r3,zero
1000d6a8:	20c8d83a 	srl	r4,r4,r3
1000d6ac:	00c40074 	movhi	r3,4097
1000d6b0:	18ffcd04 	addi	r3,r3,-204
1000d6b4:	00800804 	movi	r2,32
1000d6b8:	1909883a 	add	r4,r3,r4
1000d6bc:	20c00003 	ldbu	r3,0(r4)
1000d6c0:	10c5c83a 	sub	r2,r2,r3
1000d6c4:	f800283a 	ret

1000d6c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d6c8:	defffe04 	addi	sp,sp,-8
1000d6cc:	dfc00115 	stw	ra,4(sp)
1000d6d0:	df000015 	stw	fp,0(sp)
1000d6d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d6d8:	00840074 	movhi	r2,4097
1000d6dc:	1086d204 	addi	r2,r2,6984
1000d6e0:	10800017 	ldw	r2,0(r2)
1000d6e4:	10000526 	beq	r2,zero,1000d6fc <alt_get_errno+0x34>
1000d6e8:	00840074 	movhi	r2,4097
1000d6ec:	1086d204 	addi	r2,r2,6984
1000d6f0:	10800017 	ldw	r2,0(r2)
1000d6f4:	103ee83a 	callr	r2
1000d6f8:	00000206 	br	1000d704 <alt_get_errno+0x3c>
1000d6fc:	00840074 	movhi	r2,4097
1000d700:	108d9a04 	addi	r2,r2,13928
}
1000d704:	e037883a 	mov	sp,fp
1000d708:	dfc00117 	ldw	ra,4(sp)
1000d70c:	df000017 	ldw	fp,0(sp)
1000d710:	dec00204 	addi	sp,sp,8
1000d714:	f800283a 	ret

1000d718 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000d718:	defffb04 	addi	sp,sp,-20
1000d71c:	dfc00415 	stw	ra,16(sp)
1000d720:	df000315 	stw	fp,12(sp)
1000d724:	df000304 	addi	fp,sp,12
1000d728:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000d72c:	e0bfff17 	ldw	r2,-4(fp)
1000d730:	10000816 	blt	r2,zero,1000d754 <close+0x3c>
1000d734:	e13fff17 	ldw	r4,-4(fp)
1000d738:	01400304 	movi	r5,12
1000d73c:	000af1c0 	call	1000af1c <__mulsi3>
1000d740:	1007883a 	mov	r3,r2
1000d744:	00840074 	movhi	r2,4097
1000d748:	10824d04 	addi	r2,r2,2356
1000d74c:	1885883a 	add	r2,r3,r2
1000d750:	00000106 	br	1000d758 <close+0x40>
1000d754:	0005883a 	mov	r2,zero
1000d758:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000d75c:	e0bffd17 	ldw	r2,-12(fp)
1000d760:	10001826 	beq	r2,zero,1000d7c4 <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000d764:	e0bffd17 	ldw	r2,-12(fp)
1000d768:	10800017 	ldw	r2,0(r2)
1000d76c:	10800417 	ldw	r2,16(r2)
1000d770:	10000626 	beq	r2,zero,1000d78c <close+0x74>
1000d774:	e0bffd17 	ldw	r2,-12(fp)
1000d778:	10800017 	ldw	r2,0(r2)
1000d77c:	10800417 	ldw	r2,16(r2)
1000d780:	e13ffd17 	ldw	r4,-12(fp)
1000d784:	103ee83a 	callr	r2
1000d788:	00000106 	br	1000d790 <close+0x78>
1000d78c:	0005883a 	mov	r2,zero
1000d790:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000d794:	e13fff17 	ldw	r4,-4(fp)
1000d798:	000deac0 	call	1000deac <alt_release_fd>
    if (rval < 0)
1000d79c:	e0bffe17 	ldw	r2,-8(fp)
1000d7a0:	1000060e 	bge	r2,zero,1000d7bc <close+0xa4>
    {
      ALT_ERRNO = -rval;
1000d7a4:	000d6c80 	call	1000d6c8 <alt_get_errno>
1000d7a8:	e0fffe17 	ldw	r3,-8(fp)
1000d7ac:	00c7c83a 	sub	r3,zero,r3
1000d7b0:	10c00015 	stw	r3,0(r2)
      return -1;
1000d7b4:	00bfffc4 	movi	r2,-1
1000d7b8:	00000606 	br	1000d7d4 <close+0xbc>
    }
    return 0;
1000d7bc:	0005883a 	mov	r2,zero
1000d7c0:	00000406 	br	1000d7d4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d7c4:	000d6c80 	call	1000d6c8 <alt_get_errno>
1000d7c8:	00c01444 	movi	r3,81
1000d7cc:	10c00015 	stw	r3,0(r2)
    return -1;
1000d7d0:	00bfffc4 	movi	r2,-1
  }
}
1000d7d4:	e037883a 	mov	sp,fp
1000d7d8:	dfc00117 	ldw	ra,4(sp)
1000d7dc:	df000017 	ldw	fp,0(sp)
1000d7e0:	dec00204 	addi	sp,sp,8
1000d7e4:	f800283a 	ret

1000d7e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000d7e8:	defffc04 	addi	sp,sp,-16
1000d7ec:	df000315 	stw	fp,12(sp)
1000d7f0:	df000304 	addi	fp,sp,12
1000d7f4:	e13ffd15 	stw	r4,-12(fp)
1000d7f8:	e17ffe15 	stw	r5,-8(fp)
1000d7fc:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000d800:	e0bfff17 	ldw	r2,-4(fp)
}
1000d804:	e037883a 	mov	sp,fp
1000d808:	df000017 	ldw	fp,0(sp)
1000d80c:	dec00104 	addi	sp,sp,4
1000d810:	f800283a 	ret

1000d814 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000d814:	defffa04 	addi	sp,sp,-24
1000d818:	dfc00515 	stw	ra,20(sp)
1000d81c:	df000415 	stw	fp,16(sp)
1000d820:	df000404 	addi	fp,sp,16
1000d824:	e13ffe15 	stw	r4,-8(fp)
1000d828:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000d82c:	e0bfff17 	ldw	r2,-4(fp)
1000d830:	10800017 	ldw	r2,0(r2)
1000d834:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000d838:	e13ffe17 	ldw	r4,-8(fp)
1000d83c:	0000f480 	call	10000f48 <strlen>
1000d840:	10800044 	addi	r2,r2,1
1000d844:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000d848:	00000d06 	br	1000d880 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000d84c:	e0bffc17 	ldw	r2,-16(fp)
1000d850:	10c00217 	ldw	r3,8(r2)
1000d854:	e0bffd17 	ldw	r2,-12(fp)
1000d858:	1809883a 	mov	r4,r3
1000d85c:	e17ffe17 	ldw	r5,-8(fp)
1000d860:	100d883a 	mov	r6,r2
1000d864:	000f9dc0 	call	1000f9dc <memcmp>
1000d868:	1000021e 	bne	r2,zero,1000d874 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000d86c:	e0bffc17 	ldw	r2,-16(fp)
1000d870:	00000706 	br	1000d890 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000d874:	e0bffc17 	ldw	r2,-16(fp)
1000d878:	10800017 	ldw	r2,0(r2)
1000d87c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000d880:	e0fffc17 	ldw	r3,-16(fp)
1000d884:	e0bfff17 	ldw	r2,-4(fp)
1000d888:	18bff01e 	bne	r3,r2,1000d84c <__alt_data_end+0xf800d84c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000d88c:	0005883a 	mov	r2,zero
}
1000d890:	e037883a 	mov	sp,fp
1000d894:	dfc00117 	ldw	ra,4(sp)
1000d898:	df000017 	ldw	fp,0(sp)
1000d89c:	dec00204 	addi	sp,sp,8
1000d8a0:	f800283a 	ret

1000d8a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d8a4:	defffe04 	addi	sp,sp,-8
1000d8a8:	dfc00115 	stw	ra,4(sp)
1000d8ac:	df000015 	stw	fp,0(sp)
1000d8b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d8b4:	00840074 	movhi	r2,4097
1000d8b8:	1086d204 	addi	r2,r2,6984
1000d8bc:	10800017 	ldw	r2,0(r2)
1000d8c0:	10000526 	beq	r2,zero,1000d8d8 <alt_get_errno+0x34>
1000d8c4:	00840074 	movhi	r2,4097
1000d8c8:	1086d204 	addi	r2,r2,6984
1000d8cc:	10800017 	ldw	r2,0(r2)
1000d8d0:	103ee83a 	callr	r2
1000d8d4:	00000206 	br	1000d8e0 <alt_get_errno+0x3c>
1000d8d8:	00840074 	movhi	r2,4097
1000d8dc:	108d9a04 	addi	r2,r2,13928
}
1000d8e0:	e037883a 	mov	sp,fp
1000d8e4:	dfc00117 	ldw	ra,4(sp)
1000d8e8:	df000017 	ldw	fp,0(sp)
1000d8ec:	dec00204 	addi	sp,sp,8
1000d8f0:	f800283a 	ret

1000d8f4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000d8f4:	defffb04 	addi	sp,sp,-20
1000d8f8:	dfc00415 	stw	ra,16(sp)
1000d8fc:	df000315 	stw	fp,12(sp)
1000d900:	df000304 	addi	fp,sp,12
1000d904:	e13ffe15 	stw	r4,-8(fp)
1000d908:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d90c:	e0bffe17 	ldw	r2,-8(fp)
1000d910:	10000816 	blt	r2,zero,1000d934 <fstat+0x40>
1000d914:	e13ffe17 	ldw	r4,-8(fp)
1000d918:	01400304 	movi	r5,12
1000d91c:	000af1c0 	call	1000af1c <__mulsi3>
1000d920:	1007883a 	mov	r3,r2
1000d924:	00840074 	movhi	r2,4097
1000d928:	10824d04 	addi	r2,r2,2356
1000d92c:	1885883a 	add	r2,r3,r2
1000d930:	00000106 	br	1000d938 <fstat+0x44>
1000d934:	0005883a 	mov	r2,zero
1000d938:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000d93c:	e0bffd17 	ldw	r2,-12(fp)
1000d940:	10001026 	beq	r2,zero,1000d984 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000d944:	e0bffd17 	ldw	r2,-12(fp)
1000d948:	10800017 	ldw	r2,0(r2)
1000d94c:	10800817 	ldw	r2,32(r2)
1000d950:	10000726 	beq	r2,zero,1000d970 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000d954:	e0bffd17 	ldw	r2,-12(fp)
1000d958:	10800017 	ldw	r2,0(r2)
1000d95c:	10800817 	ldw	r2,32(r2)
1000d960:	e13ffd17 	ldw	r4,-12(fp)
1000d964:	e17fff17 	ldw	r5,-4(fp)
1000d968:	103ee83a 	callr	r2
1000d96c:	00000906 	br	1000d994 <fstat+0xa0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000d970:	e0bfff17 	ldw	r2,-4(fp)
1000d974:	00c80004 	movi	r3,8192
1000d978:	10c00115 	stw	r3,4(r2)
      return 0;
1000d97c:	0005883a 	mov	r2,zero
1000d980:	00000406 	br	1000d994 <fstat+0xa0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d984:	000d8a40 	call	1000d8a4 <alt_get_errno>
1000d988:	00c01444 	movi	r3,81
1000d98c:	10c00015 	stw	r3,0(r2)
    return -1;
1000d990:	00bfffc4 	movi	r2,-1
  }
}
1000d994:	e037883a 	mov	sp,fp
1000d998:	dfc00117 	ldw	ra,4(sp)
1000d99c:	df000017 	ldw	fp,0(sp)
1000d9a0:	dec00204 	addi	sp,sp,8
1000d9a4:	f800283a 	ret

1000d9a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d9a8:	defffe04 	addi	sp,sp,-8
1000d9ac:	dfc00115 	stw	ra,4(sp)
1000d9b0:	df000015 	stw	fp,0(sp)
1000d9b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d9b8:	00840074 	movhi	r2,4097
1000d9bc:	1086d204 	addi	r2,r2,6984
1000d9c0:	10800017 	ldw	r2,0(r2)
1000d9c4:	10000526 	beq	r2,zero,1000d9dc <alt_get_errno+0x34>
1000d9c8:	00840074 	movhi	r2,4097
1000d9cc:	1086d204 	addi	r2,r2,6984
1000d9d0:	10800017 	ldw	r2,0(r2)
1000d9d4:	103ee83a 	callr	r2
1000d9d8:	00000206 	br	1000d9e4 <alt_get_errno+0x3c>
1000d9dc:	00840074 	movhi	r2,4097
1000d9e0:	108d9a04 	addi	r2,r2,13928
}
1000d9e4:	e037883a 	mov	sp,fp
1000d9e8:	dfc00117 	ldw	ra,4(sp)
1000d9ec:	df000017 	ldw	fp,0(sp)
1000d9f0:	dec00204 	addi	sp,sp,8
1000d9f4:	f800283a 	ret

1000d9f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000d9f8:	deffed04 	addi	sp,sp,-76
1000d9fc:	dfc01215 	stw	ra,72(sp)
1000da00:	df001115 	stw	fp,68(sp)
1000da04:	df001104 	addi	fp,sp,68
1000da08:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000da0c:	e0bfff17 	ldw	r2,-4(fp)
1000da10:	10000816 	blt	r2,zero,1000da34 <isatty+0x3c>
1000da14:	e13fff17 	ldw	r4,-4(fp)
1000da18:	01400304 	movi	r5,12
1000da1c:	000af1c0 	call	1000af1c <__mulsi3>
1000da20:	1007883a 	mov	r3,r2
1000da24:	00840074 	movhi	r2,4097
1000da28:	10824d04 	addi	r2,r2,2356
1000da2c:	1885883a 	add	r2,r3,r2
1000da30:	00000106 	br	1000da38 <isatty+0x40>
1000da34:	0005883a 	mov	r2,zero
1000da38:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000da3c:	e0bfef17 	ldw	r2,-68(fp)
1000da40:	10000e26 	beq	r2,zero,1000da7c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000da44:	e0bfef17 	ldw	r2,-68(fp)
1000da48:	10800017 	ldw	r2,0(r2)
1000da4c:	10800817 	ldw	r2,32(r2)
1000da50:	1000021e 	bne	r2,zero,1000da5c <isatty+0x64>
    {
      return 1;
1000da54:	00800044 	movi	r2,1
1000da58:	00000c06 	br	1000da8c <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000da5c:	e0bff004 	addi	r2,fp,-64
1000da60:	e13fff17 	ldw	r4,-4(fp)
1000da64:	100b883a 	mov	r5,r2
1000da68:	000d8f40 	call	1000d8f4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000da6c:	e0bff117 	ldw	r2,-60(fp)
1000da70:	10880020 	cmpeqi	r2,r2,8192
1000da74:	10803fcc 	andi	r2,r2,255
1000da78:	00000406 	br	1000da8c <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000da7c:	000d9a80 	call	1000d9a8 <alt_get_errno>
1000da80:	00c01444 	movi	r3,81
1000da84:	10c00015 	stw	r3,0(r2)
    return 0;
1000da88:	0005883a 	mov	r2,zero
  }
}
1000da8c:	e037883a 	mov	sp,fp
1000da90:	dfc00117 	ldw	ra,4(sp)
1000da94:	df000017 	ldw	fp,0(sp)
1000da98:	dec00204 	addi	sp,sp,8
1000da9c:	f800283a 	ret

1000daa0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000daa0:	defffc04 	addi	sp,sp,-16
1000daa4:	df000315 	stw	fp,12(sp)
1000daa8:	df000304 	addi	fp,sp,12
1000daac:	e13ffd15 	stw	r4,-12(fp)
1000dab0:	e17ffe15 	stw	r5,-8(fp)
1000dab4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000dab8:	e0fffe17 	ldw	r3,-8(fp)
1000dabc:	e0bffd17 	ldw	r2,-12(fp)
1000dac0:	18800c26 	beq	r3,r2,1000daf4 <alt_load_section+0x54>
  {
    while( to != end )
1000dac4:	00000806 	br	1000dae8 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000dac8:	e0bffe17 	ldw	r2,-8(fp)
1000dacc:	10c00104 	addi	r3,r2,4
1000dad0:	e0fffe15 	stw	r3,-8(fp)
1000dad4:	e0fffd17 	ldw	r3,-12(fp)
1000dad8:	19000104 	addi	r4,r3,4
1000dadc:	e13ffd15 	stw	r4,-12(fp)
1000dae0:	18c00017 	ldw	r3,0(r3)
1000dae4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000dae8:	e0fffe17 	ldw	r3,-8(fp)
1000daec:	e0bfff17 	ldw	r2,-4(fp)
1000daf0:	18bff51e 	bne	r3,r2,1000dac8 <__alt_data_end+0xf800dac8>
    {
      *to++ = *from++;
    }
  }
}
1000daf4:	e037883a 	mov	sp,fp
1000daf8:	df000017 	ldw	fp,0(sp)
1000dafc:	dec00104 	addi	sp,sp,4
1000db00:	f800283a 	ret

1000db04 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000db04:	defffe04 	addi	sp,sp,-8
1000db08:	dfc00115 	stw	ra,4(sp)
1000db0c:	df000015 	stw	fp,0(sp)
1000db10:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000db14:	01040074 	movhi	r4,4097
1000db18:	2106d704 	addi	r4,r4,7004
1000db1c:	01440074 	movhi	r5,4097
1000db20:	29401a04 	addi	r5,r5,104
1000db24:	01840074 	movhi	r6,4097
1000db28:	3186d704 	addi	r6,r6,7004
1000db2c:	000daa00 	call	1000daa0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000db30:	01040034 	movhi	r4,4096
1000db34:	21000804 	addi	r4,r4,32
1000db38:	01440034 	movhi	r5,4096
1000db3c:	29400804 	addi	r5,r5,32
1000db40:	01840034 	movhi	r6,4096
1000db44:	31806f04 	addi	r6,r6,444
1000db48:	000daa00 	call	1000daa0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000db4c:	01040074 	movhi	r4,4097
1000db50:	213f5304 	addi	r4,r4,-692
1000db54:	01440074 	movhi	r5,4097
1000db58:	297f5304 	addi	r5,r5,-692
1000db5c:	01840074 	movhi	r6,4097
1000db60:	31801a04 	addi	r6,r6,104
1000db64:	000daa00 	call	1000daa0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000db68:	000ed4c0 	call	1000ed4c <alt_dcache_flush_all>
  alt_icache_flush_all();
1000db6c:	000ef100 	call	1000ef10 <alt_icache_flush_all>
}
1000db70:	e037883a 	mov	sp,fp
1000db74:	dfc00117 	ldw	ra,4(sp)
1000db78:	df000017 	ldw	fp,0(sp)
1000db7c:	dec00204 	addi	sp,sp,8
1000db80:	f800283a 	ret

1000db84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000db84:	defffe04 	addi	sp,sp,-8
1000db88:	dfc00115 	stw	ra,4(sp)
1000db8c:	df000015 	stw	fp,0(sp)
1000db90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000db94:	00840074 	movhi	r2,4097
1000db98:	1086d204 	addi	r2,r2,6984
1000db9c:	10800017 	ldw	r2,0(r2)
1000dba0:	10000526 	beq	r2,zero,1000dbb8 <alt_get_errno+0x34>
1000dba4:	00840074 	movhi	r2,4097
1000dba8:	1086d204 	addi	r2,r2,6984
1000dbac:	10800017 	ldw	r2,0(r2)
1000dbb0:	103ee83a 	callr	r2
1000dbb4:	00000206 	br	1000dbc0 <alt_get_errno+0x3c>
1000dbb8:	00840074 	movhi	r2,4097
1000dbbc:	108d9a04 	addi	r2,r2,13928
}
1000dbc0:	e037883a 	mov	sp,fp
1000dbc4:	dfc00117 	ldw	ra,4(sp)
1000dbc8:	df000017 	ldw	fp,0(sp)
1000dbcc:	dec00204 	addi	sp,sp,8
1000dbd0:	f800283a 	ret

1000dbd4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000dbd4:	defff904 	addi	sp,sp,-28
1000dbd8:	dfc00615 	stw	ra,24(sp)
1000dbdc:	df000515 	stw	fp,20(sp)
1000dbe0:	df000504 	addi	fp,sp,20
1000dbe4:	e13ffd15 	stw	r4,-12(fp)
1000dbe8:	e17ffe15 	stw	r5,-8(fp)
1000dbec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000dbf0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dbf4:	e0bffd17 	ldw	r2,-12(fp)
1000dbf8:	10000816 	blt	r2,zero,1000dc1c <lseek+0x48>
1000dbfc:	e13ffd17 	ldw	r4,-12(fp)
1000dc00:	01400304 	movi	r5,12
1000dc04:	000af1c0 	call	1000af1c <__mulsi3>
1000dc08:	1007883a 	mov	r3,r2
1000dc0c:	00840074 	movhi	r2,4097
1000dc10:	10824d04 	addi	r2,r2,2356
1000dc14:	1885883a 	add	r2,r3,r2
1000dc18:	00000106 	br	1000dc20 <lseek+0x4c>
1000dc1c:	0005883a 	mov	r2,zero
1000dc20:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000dc24:	e0bffc17 	ldw	r2,-16(fp)
1000dc28:	10001026 	beq	r2,zero,1000dc6c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000dc2c:	e0bffc17 	ldw	r2,-16(fp)
1000dc30:	10800017 	ldw	r2,0(r2)
1000dc34:	10800717 	ldw	r2,28(r2)
1000dc38:	10000926 	beq	r2,zero,1000dc60 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000dc3c:	e0bffc17 	ldw	r2,-16(fp)
1000dc40:	10800017 	ldw	r2,0(r2)
1000dc44:	10800717 	ldw	r2,28(r2)
1000dc48:	e13ffc17 	ldw	r4,-16(fp)
1000dc4c:	e17ffe17 	ldw	r5,-8(fp)
1000dc50:	e1bfff17 	ldw	r6,-4(fp)
1000dc54:	103ee83a 	callr	r2
1000dc58:	e0bffb15 	stw	r2,-20(fp)
1000dc5c:	00000506 	br	1000dc74 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000dc60:	00bfde84 	movi	r2,-134
1000dc64:	e0bffb15 	stw	r2,-20(fp)
1000dc68:	00000206 	br	1000dc74 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000dc6c:	00bfebc4 	movi	r2,-81
1000dc70:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000dc74:	e0bffb17 	ldw	r2,-20(fp)
1000dc78:	1000060e 	bge	r2,zero,1000dc94 <lseek+0xc0>
  {
    ALT_ERRNO = -rc;
1000dc7c:	000db840 	call	1000db84 <alt_get_errno>
1000dc80:	e0fffb17 	ldw	r3,-20(fp)
1000dc84:	00c7c83a 	sub	r3,zero,r3
1000dc88:	10c00015 	stw	r3,0(r2)
    rc = -1;
1000dc8c:	00bfffc4 	movi	r2,-1
1000dc90:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000dc94:	e0bffb17 	ldw	r2,-20(fp)
}
1000dc98:	e037883a 	mov	sp,fp
1000dc9c:	dfc00117 	ldw	ra,4(sp)
1000dca0:	df000017 	ldw	fp,0(sp)
1000dca4:	dec00204 	addi	sp,sp,8
1000dca8:	f800283a 	ret

1000dcac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000dcac:	defffd04 	addi	sp,sp,-12
1000dcb0:	dfc00215 	stw	ra,8(sp)
1000dcb4:	df000115 	stw	fp,4(sp)
1000dcb8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000dcbc:	0009883a 	mov	r4,zero
1000dcc0:	000e1580 	call	1000e158 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000dcc4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000dcc8:	000e18c0 	call	1000e18c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000dccc:	01040074 	movhi	r4,4097
1000dcd0:	21001004 	addi	r4,r4,64
1000dcd4:	01440074 	movhi	r5,4097
1000dcd8:	29401004 	addi	r5,r5,64
1000dcdc:	01840074 	movhi	r6,4097
1000dce0:	31801004 	addi	r6,r6,64
1000dce4:	000f2d40 	call	1000f2d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000dce8:	000ee580 	call	1000ee58 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000dcec:	01040074 	movhi	r4,4097
1000dcf0:	213bad04 	addi	r4,r4,-4428
1000dcf4:	000f9900 	call	1000f990 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000dcf8:	d126d617 	ldw	r4,-25768(gp)
1000dcfc:	d0e6d717 	ldw	r3,-25764(gp)
1000dd00:	d0a6d817 	ldw	r2,-25760(gp)
1000dd04:	180b883a 	mov	r5,r3
1000dd08:	100d883a 	mov	r6,r2
1000dd0c:	0000dc80 	call	10000dc8 <main>
1000dd10:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000dd14:	01000044 	movi	r4,1
1000dd18:	000d7180 	call	1000d718 <close>
  exit (result);
1000dd1c:	e13fff17 	ldw	r4,-4(fp)
1000dd20:	000f9a40 	call	1000f9a4 <exit>

1000dd24 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000dd24:	defffe04 	addi	sp,sp,-8
1000dd28:	df000115 	stw	fp,4(sp)
1000dd2c:	df000104 	addi	fp,sp,4
1000dd30:	e13fff15 	stw	r4,-4(fp)
}
1000dd34:	e037883a 	mov	sp,fp
1000dd38:	df000017 	ldw	fp,0(sp)
1000dd3c:	dec00104 	addi	sp,sp,4
1000dd40:	f800283a 	ret

1000dd44 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000dd44:	defffe04 	addi	sp,sp,-8
1000dd48:	df000115 	stw	fp,4(sp)
1000dd4c:	df000104 	addi	fp,sp,4
1000dd50:	e13fff15 	stw	r4,-4(fp)
}
1000dd54:	e037883a 	mov	sp,fp
1000dd58:	df000017 	ldw	fp,0(sp)
1000dd5c:	dec00104 	addi	sp,sp,4
1000dd60:	f800283a 	ret

1000dd64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dd64:	defffe04 	addi	sp,sp,-8
1000dd68:	dfc00115 	stw	ra,4(sp)
1000dd6c:	df000015 	stw	fp,0(sp)
1000dd70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dd74:	00840074 	movhi	r2,4097
1000dd78:	1086d204 	addi	r2,r2,6984
1000dd7c:	10800017 	ldw	r2,0(r2)
1000dd80:	10000526 	beq	r2,zero,1000dd98 <alt_get_errno+0x34>
1000dd84:	00840074 	movhi	r2,4097
1000dd88:	1086d204 	addi	r2,r2,6984
1000dd8c:	10800017 	ldw	r2,0(r2)
1000dd90:	103ee83a 	callr	r2
1000dd94:	00000206 	br	1000dda0 <alt_get_errno+0x3c>
1000dd98:	00840074 	movhi	r2,4097
1000dd9c:	108d9a04 	addi	r2,r2,13928
}
1000dda0:	e037883a 	mov	sp,fp
1000dda4:	dfc00117 	ldw	ra,4(sp)
1000dda8:	df000017 	ldw	fp,0(sp)
1000ddac:	dec00204 	addi	sp,sp,8
1000ddb0:	f800283a 	ret

1000ddb4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000ddb4:	defff904 	addi	sp,sp,-28
1000ddb8:	dfc00615 	stw	ra,24(sp)
1000ddbc:	df000515 	stw	fp,20(sp)
1000ddc0:	df000504 	addi	fp,sp,20
1000ddc4:	e13ffd15 	stw	r4,-12(fp)
1000ddc8:	e17ffe15 	stw	r5,-8(fp)
1000ddcc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ddd0:	e0bffd17 	ldw	r2,-12(fp)
1000ddd4:	10000816 	blt	r2,zero,1000ddf8 <read+0x44>
1000ddd8:	e13ffd17 	ldw	r4,-12(fp)
1000dddc:	01400304 	movi	r5,12
1000dde0:	000af1c0 	call	1000af1c <__mulsi3>
1000dde4:	1007883a 	mov	r3,r2
1000dde8:	00840074 	movhi	r2,4097
1000ddec:	10824d04 	addi	r2,r2,2356
1000ddf0:	1885883a 	add	r2,r3,r2
1000ddf4:	00000106 	br	1000ddfc <read+0x48>
1000ddf8:	0005883a 	mov	r2,zero
1000ddfc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000de00:	e0bffb17 	ldw	r2,-20(fp)
1000de04:	10002026 	beq	r2,zero,1000de88 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000de08:	e0bffb17 	ldw	r2,-20(fp)
1000de0c:	10800217 	ldw	r2,8(r2)
1000de10:	108000cc 	andi	r2,r2,3
1000de14:	10800060 	cmpeqi	r2,r2,1
1000de18:	1000171e 	bne	r2,zero,1000de78 <read+0xc4>
        (fd->dev->read))
1000de1c:	e0bffb17 	ldw	r2,-20(fp)
1000de20:	10800017 	ldw	r2,0(r2)
1000de24:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000de28:	10001326 	beq	r2,zero,1000de78 <read+0xc4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000de2c:	e0bffb17 	ldw	r2,-20(fp)
1000de30:	10800017 	ldw	r2,0(r2)
1000de34:	10800517 	ldw	r2,20(r2)
1000de38:	e0ffff17 	ldw	r3,-4(fp)
1000de3c:	e13ffb17 	ldw	r4,-20(fp)
1000de40:	e17ffe17 	ldw	r5,-8(fp)
1000de44:	180d883a 	mov	r6,r3
1000de48:	103ee83a 	callr	r2
1000de4c:	e0bffc15 	stw	r2,-16(fp)
1000de50:	e0bffc17 	ldw	r2,-16(fp)
1000de54:	1000060e 	bge	r2,zero,1000de70 <read+0xbc>
        {
          ALT_ERRNO = -rval;
1000de58:	000dd640 	call	1000dd64 <alt_get_errno>
1000de5c:	e0fffc17 	ldw	r3,-16(fp)
1000de60:	00c7c83a 	sub	r3,zero,r3
1000de64:	10c00015 	stw	r3,0(r2)
          return -1;
1000de68:	00bfffc4 	movi	r2,-1
1000de6c:	00000a06 	br	1000de98 <read+0xe4>
        }
        return rval;
1000de70:	e0bffc17 	ldw	r2,-16(fp)
1000de74:	00000806 	br	1000de98 <read+0xe4>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000de78:	000dd640 	call	1000dd64 <alt_get_errno>
1000de7c:	00c00344 	movi	r3,13
1000de80:	10c00015 	stw	r3,0(r2)
1000de84:	00000306 	br	1000de94 <read+0xe0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000de88:	000dd640 	call	1000dd64 <alt_get_errno>
1000de8c:	00c01444 	movi	r3,81
1000de90:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000de94:	00bfffc4 	movi	r2,-1
}
1000de98:	e037883a 	mov	sp,fp
1000de9c:	dfc00117 	ldw	ra,4(sp)
1000dea0:	df000017 	ldw	fp,0(sp)
1000dea4:	dec00204 	addi	sp,sp,8
1000dea8:	f800283a 	ret

1000deac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000deac:	defffc04 	addi	sp,sp,-16
1000deb0:	dfc00315 	stw	ra,12(sp)
1000deb4:	df000215 	stw	fp,8(sp)
1000deb8:	dc000115 	stw	r16,4(sp)
1000debc:	df000204 	addi	fp,sp,8
1000dec0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000dec4:	e0bffe17 	ldw	r2,-8(fp)
1000dec8:	108000d0 	cmplti	r2,r2,3
1000decc:	1000111e 	bne	r2,zero,1000df14 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000ded0:	04040074 	movhi	r16,4097
1000ded4:	84024d04 	addi	r16,r16,2356
1000ded8:	e0bffe17 	ldw	r2,-8(fp)
1000dedc:	1009883a 	mov	r4,r2
1000dee0:	01400304 	movi	r5,12
1000dee4:	000af1c0 	call	1000af1c <__mulsi3>
1000dee8:	8085883a 	add	r2,r16,r2
1000deec:	10800204 	addi	r2,r2,8
1000def0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000def4:	04040074 	movhi	r16,4097
1000def8:	84024d04 	addi	r16,r16,2356
1000defc:	e0bffe17 	ldw	r2,-8(fp)
1000df00:	1009883a 	mov	r4,r2
1000df04:	01400304 	movi	r5,12
1000df08:	000af1c0 	call	1000af1c <__mulsi3>
1000df0c:	8085883a 	add	r2,r16,r2
1000df10:	10000015 	stw	zero,0(r2)
  }
}
1000df14:	e6ffff04 	addi	sp,fp,-4
1000df18:	dfc00217 	ldw	ra,8(sp)
1000df1c:	df000117 	ldw	fp,4(sp)
1000df20:	dc000017 	ldw	r16,0(sp)
1000df24:	dec00304 	addi	sp,sp,12
1000df28:	f800283a 	ret

1000df2c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000df2c:	defff904 	addi	sp,sp,-28
1000df30:	df000615 	stw	fp,24(sp)
1000df34:	df000604 	addi	fp,sp,24
1000df38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000df3c:	0005303a 	rdctl	r2,status
1000df40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000df44:	e0fffc17 	ldw	r3,-16(fp)
1000df48:	00bfff84 	movi	r2,-2
1000df4c:	1884703a 	and	r2,r3,r2
1000df50:	1001703a 	wrctl	status,r2
  
  return context;
1000df54:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000df58:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000df5c:	d0a00e17 	ldw	r2,-32712(gp)
1000df60:	10c000c4 	addi	r3,r2,3
1000df64:	00bfff04 	movi	r2,-4
1000df68:	1884703a 	and	r2,r3,r2
1000df6c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000df70:	d0e00e17 	ldw	r3,-32712(gp)
1000df74:	e0bfff17 	ldw	r2,-4(fp)
1000df78:	1885883a 	add	r2,r3,r2
1000df7c:	00c60034 	movhi	r3,6144
1000df80:	18c00004 	addi	r3,r3,0
1000df84:	1880062e 	bgeu	r3,r2,1000dfa0 <sbrk+0x74>
1000df88:	e0bffa17 	ldw	r2,-24(fp)
1000df8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000df90:	e0bffd17 	ldw	r2,-12(fp)
1000df94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000df98:	00bfffc4 	movi	r2,-1
1000df9c:	00000b06 	br	1000dfcc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000dfa0:	d0a00e17 	ldw	r2,-32712(gp)
1000dfa4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000dfa8:	d0e00e17 	ldw	r3,-32712(gp)
1000dfac:	e0bfff17 	ldw	r2,-4(fp)
1000dfb0:	1885883a 	add	r2,r3,r2
1000dfb4:	d0a00e15 	stw	r2,-32712(gp)
1000dfb8:	e0bffa17 	ldw	r2,-24(fp)
1000dfbc:	e0bffe15 	stw	r2,-8(fp)
1000dfc0:	e0bffe17 	ldw	r2,-8(fp)
1000dfc4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000dfc8:	e0bffb17 	ldw	r2,-20(fp)
} 
1000dfcc:	e037883a 	mov	sp,fp
1000dfd0:	df000017 	ldw	fp,0(sp)
1000dfd4:	dec00104 	addi	sp,sp,4
1000dfd8:	f800283a 	ret

1000dfdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dfdc:	defffe04 	addi	sp,sp,-8
1000dfe0:	dfc00115 	stw	ra,4(sp)
1000dfe4:	df000015 	stw	fp,0(sp)
1000dfe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dfec:	00840074 	movhi	r2,4097
1000dff0:	1086d204 	addi	r2,r2,6984
1000dff4:	10800017 	ldw	r2,0(r2)
1000dff8:	10000526 	beq	r2,zero,1000e010 <alt_get_errno+0x34>
1000dffc:	00840074 	movhi	r2,4097
1000e000:	1086d204 	addi	r2,r2,6984
1000e004:	10800017 	ldw	r2,0(r2)
1000e008:	103ee83a 	callr	r2
1000e00c:	00000206 	br	1000e018 <alt_get_errno+0x3c>
1000e010:	00840074 	movhi	r2,4097
1000e014:	108d9a04 	addi	r2,r2,13928
}
1000e018:	e037883a 	mov	sp,fp
1000e01c:	dfc00117 	ldw	ra,4(sp)
1000e020:	df000017 	ldw	fp,0(sp)
1000e024:	dec00204 	addi	sp,sp,8
1000e028:	f800283a 	ret

1000e02c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000e02c:	defff904 	addi	sp,sp,-28
1000e030:	dfc00615 	stw	ra,24(sp)
1000e034:	df000515 	stw	fp,20(sp)
1000e038:	df000504 	addi	fp,sp,20
1000e03c:	e13ffd15 	stw	r4,-12(fp)
1000e040:	e17ffe15 	stw	r5,-8(fp)
1000e044:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e048:	e0bffd17 	ldw	r2,-12(fp)
1000e04c:	10000816 	blt	r2,zero,1000e070 <write+0x44>
1000e050:	e13ffd17 	ldw	r4,-12(fp)
1000e054:	01400304 	movi	r5,12
1000e058:	000af1c0 	call	1000af1c <__mulsi3>
1000e05c:	1007883a 	mov	r3,r2
1000e060:	00840074 	movhi	r2,4097
1000e064:	10824d04 	addi	r2,r2,2356
1000e068:	1885883a 	add	r2,r3,r2
1000e06c:	00000106 	br	1000e074 <write+0x48>
1000e070:	0005883a 	mov	r2,zero
1000e074:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e078:	e0bffb17 	ldw	r2,-20(fp)
1000e07c:	10001f26 	beq	r2,zero,1000e0fc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000e080:	e0bffb17 	ldw	r2,-20(fp)
1000e084:	10800217 	ldw	r2,8(r2)
1000e088:	108000cc 	andi	r2,r2,3
1000e08c:	10001726 	beq	r2,zero,1000e0ec <write+0xc0>
1000e090:	e0bffb17 	ldw	r2,-20(fp)
1000e094:	10800017 	ldw	r2,0(r2)
1000e098:	10800617 	ldw	r2,24(r2)
1000e09c:	10001326 	beq	r2,zero,1000e0ec <write+0xc0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000e0a0:	e0bffb17 	ldw	r2,-20(fp)
1000e0a4:	10800017 	ldw	r2,0(r2)
1000e0a8:	10800617 	ldw	r2,24(r2)
1000e0ac:	e0ffff17 	ldw	r3,-4(fp)
1000e0b0:	e13ffb17 	ldw	r4,-20(fp)
1000e0b4:	e17ffe17 	ldw	r5,-8(fp)
1000e0b8:	180d883a 	mov	r6,r3
1000e0bc:	103ee83a 	callr	r2
1000e0c0:	e0bffc15 	stw	r2,-16(fp)
1000e0c4:	e0bffc17 	ldw	r2,-16(fp)
1000e0c8:	1000060e 	bge	r2,zero,1000e0e4 <write+0xb8>
      {
        ALT_ERRNO = -rval;
1000e0cc:	000dfdc0 	call	1000dfdc <alt_get_errno>
1000e0d0:	e0fffc17 	ldw	r3,-16(fp)
1000e0d4:	00c7c83a 	sub	r3,zero,r3
1000e0d8:	10c00015 	stw	r3,0(r2)
        return -1;
1000e0dc:	00bfffc4 	movi	r2,-1
1000e0e0:	00000a06 	br	1000e10c <write+0xe0>
      }
      return rval;
1000e0e4:	e0bffc17 	ldw	r2,-16(fp)
1000e0e8:	00000806 	br	1000e10c <write+0xe0>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000e0ec:	000dfdc0 	call	1000dfdc <alt_get_errno>
1000e0f0:	00c00344 	movi	r3,13
1000e0f4:	10c00015 	stw	r3,0(r2)
1000e0f8:	00000306 	br	1000e108 <write+0xdc>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000e0fc:	000dfdc0 	call	1000dfdc <alt_get_errno>
1000e100:	00c01444 	movi	r3,81
1000e104:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000e108:	00bfffc4 	movi	r2,-1
}
1000e10c:	e037883a 	mov	sp,fp
1000e110:	dfc00117 	ldw	ra,4(sp)
1000e114:	df000017 	ldw	fp,0(sp)
1000e118:	dec00204 	addi	sp,sp,8
1000e11c:	f800283a 	ret

1000e120 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000e120:	defffd04 	addi	sp,sp,-12
1000e124:	dfc00215 	stw	ra,8(sp)
1000e128:	df000115 	stw	fp,4(sp)
1000e12c:	df000104 	addi	fp,sp,4
1000e130:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000e134:	e13fff17 	ldw	r4,-4(fp)
1000e138:	01440074 	movhi	r5,4097
1000e13c:	2946cf04 	addi	r5,r5,6972
1000e140:	000edb80 	call	1000edb8 <alt_dev_llist_insert>
}
1000e144:	e037883a 	mov	sp,fp
1000e148:	dfc00117 	ldw	ra,4(sp)
1000e14c:	df000017 	ldw	fp,0(sp)
1000e150:	dec00204 	addi	sp,sp,8
1000e154:	f800283a 	ret

1000e158 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000e158:	defffd04 	addi	sp,sp,-12
1000e15c:	dfc00215 	stw	ra,8(sp)
1000e160:	df000115 	stw	fp,4(sp)
1000e164:	df000104 	addi	fp,sp,4
1000e168:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000e16c:	000f7880 	call	1000f788 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000e170:	00800044 	movi	r2,1
1000e174:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000e178:	e037883a 	mov	sp,fp
1000e17c:	dfc00117 	ldw	ra,4(sp)
1000e180:	df000017 	ldw	fp,0(sp)
1000e184:	dec00204 	addi	sp,sp,8
1000e188:	f800283a 	ret

1000e18c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000e18c:	defffe04 	addi	sp,sp,-8
1000e190:	dfc00115 	stw	ra,4(sp)
1000e194:	df000015 	stw	fp,0(sp)
1000e198:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000e19c:	01040074 	movhi	r4,4097
1000e1a0:	2102b704 	addi	r4,r4,2780
1000e1a4:	000b883a 	mov	r5,zero
1000e1a8:	01800044 	movi	r6,1
1000e1ac:	000e3380 	call	1000e338 <altera_avalon_jtag_uart_init>
1000e1b0:	01040074 	movhi	r4,4097
1000e1b4:	2102ad04 	addi	r4,r4,2740
1000e1b8:	000e1200 	call	1000e120 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000e1bc:	0001883a 	nop
}
1000e1c0:	e037883a 	mov	sp,fp
1000e1c4:	dfc00117 	ldw	ra,4(sp)
1000e1c8:	df000017 	ldw	fp,0(sp)
1000e1cc:	dec00204 	addi	sp,sp,8
1000e1d0:	f800283a 	ret

1000e1d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000e1d4:	defffa04 	addi	sp,sp,-24
1000e1d8:	dfc00515 	stw	ra,20(sp)
1000e1dc:	df000415 	stw	fp,16(sp)
1000e1e0:	df000404 	addi	fp,sp,16
1000e1e4:	e13ffd15 	stw	r4,-12(fp)
1000e1e8:	e17ffe15 	stw	r5,-8(fp)
1000e1ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e1f0:	e0bffd17 	ldw	r2,-12(fp)
1000e1f4:	10800017 	ldw	r2,0(r2)
1000e1f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000e1fc:	e0bffc17 	ldw	r2,-16(fp)
1000e200:	10c00a04 	addi	r3,r2,40
1000e204:	e0bffd17 	ldw	r2,-12(fp)
1000e208:	10800217 	ldw	r2,8(r2)
1000e20c:	1809883a 	mov	r4,r3
1000e210:	e17ffe17 	ldw	r5,-8(fp)
1000e214:	e1bfff17 	ldw	r6,-4(fp)
1000e218:	100f883a 	mov	r7,r2
1000e21c:	000e7ec0 	call	1000e7ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000e220:	e037883a 	mov	sp,fp
1000e224:	dfc00117 	ldw	ra,4(sp)
1000e228:	df000017 	ldw	fp,0(sp)
1000e22c:	dec00204 	addi	sp,sp,8
1000e230:	f800283a 	ret

1000e234 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000e234:	defffa04 	addi	sp,sp,-24
1000e238:	dfc00515 	stw	ra,20(sp)
1000e23c:	df000415 	stw	fp,16(sp)
1000e240:	df000404 	addi	fp,sp,16
1000e244:	e13ffd15 	stw	r4,-12(fp)
1000e248:	e17ffe15 	stw	r5,-8(fp)
1000e24c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e250:	e0bffd17 	ldw	r2,-12(fp)
1000e254:	10800017 	ldw	r2,0(r2)
1000e258:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000e25c:	e0bffc17 	ldw	r2,-16(fp)
1000e260:	10c00a04 	addi	r3,r2,40
1000e264:	e0bffd17 	ldw	r2,-12(fp)
1000e268:	10800217 	ldw	r2,8(r2)
1000e26c:	1809883a 	mov	r4,r3
1000e270:	e17ffe17 	ldw	r5,-8(fp)
1000e274:	e1bfff17 	ldw	r6,-4(fp)
1000e278:	100f883a 	mov	r7,r2
1000e27c:	000e9f40 	call	1000e9f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000e280:	e037883a 	mov	sp,fp
1000e284:	dfc00117 	ldw	ra,4(sp)
1000e288:	df000017 	ldw	fp,0(sp)
1000e28c:	dec00204 	addi	sp,sp,8
1000e290:	f800283a 	ret

1000e294 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000e294:	defffc04 	addi	sp,sp,-16
1000e298:	dfc00315 	stw	ra,12(sp)
1000e29c:	df000215 	stw	fp,8(sp)
1000e2a0:	df000204 	addi	fp,sp,8
1000e2a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e2a8:	e0bfff17 	ldw	r2,-4(fp)
1000e2ac:	10800017 	ldw	r2,0(r2)
1000e2b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000e2b4:	e0bffe17 	ldw	r2,-8(fp)
1000e2b8:	10c00a04 	addi	r3,r2,40
1000e2bc:	e0bfff17 	ldw	r2,-4(fp)
1000e2c0:	10800217 	ldw	r2,8(r2)
1000e2c4:	1809883a 	mov	r4,r3
1000e2c8:	100b883a 	mov	r5,r2
1000e2cc:	000e6980 	call	1000e698 <altera_avalon_jtag_uart_close>
}
1000e2d0:	e037883a 	mov	sp,fp
1000e2d4:	dfc00117 	ldw	ra,4(sp)
1000e2d8:	df000017 	ldw	fp,0(sp)
1000e2dc:	dec00204 	addi	sp,sp,8
1000e2e0:	f800283a 	ret

1000e2e4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000e2e4:	defffa04 	addi	sp,sp,-24
1000e2e8:	dfc00515 	stw	ra,20(sp)
1000e2ec:	df000415 	stw	fp,16(sp)
1000e2f0:	df000404 	addi	fp,sp,16
1000e2f4:	e13ffd15 	stw	r4,-12(fp)
1000e2f8:	e17ffe15 	stw	r5,-8(fp)
1000e2fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000e300:	e0bffd17 	ldw	r2,-12(fp)
1000e304:	10800017 	ldw	r2,0(r2)
1000e308:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000e30c:	e0bffc17 	ldw	r2,-16(fp)
1000e310:	10800a04 	addi	r2,r2,40
1000e314:	1009883a 	mov	r4,r2
1000e318:	e17ffe17 	ldw	r5,-8(fp)
1000e31c:	e1bfff17 	ldw	r6,-4(fp)
1000e320:	000e7000 	call	1000e700 <altera_avalon_jtag_uart_ioctl>
}
1000e324:	e037883a 	mov	sp,fp
1000e328:	dfc00117 	ldw	ra,4(sp)
1000e32c:	df000017 	ldw	fp,0(sp)
1000e330:	dec00204 	addi	sp,sp,8
1000e334:	f800283a 	ret

1000e338 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000e338:	defffa04 	addi	sp,sp,-24
1000e33c:	dfc00515 	stw	ra,20(sp)
1000e340:	df000415 	stw	fp,16(sp)
1000e344:	df000404 	addi	fp,sp,16
1000e348:	e13ffd15 	stw	r4,-12(fp)
1000e34c:	e17ffe15 	stw	r5,-8(fp)
1000e350:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e354:	e0bffd17 	ldw	r2,-12(fp)
1000e358:	00c00044 	movi	r3,1
1000e35c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000e360:	e0bffd17 	ldw	r2,-12(fp)
1000e364:	10800017 	ldw	r2,0(r2)
1000e368:	10800104 	addi	r2,r2,4
1000e36c:	e0fffd17 	ldw	r3,-12(fp)
1000e370:	18c00817 	ldw	r3,32(r3)
1000e374:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000e378:	e0fffe17 	ldw	r3,-8(fp)
1000e37c:	e0bfff17 	ldw	r2,-4(fp)
1000e380:	d8000015 	stw	zero,0(sp)
1000e384:	1809883a 	mov	r4,r3
1000e388:	100b883a 	mov	r5,r2
1000e38c:	01840074 	movhi	r6,4097
1000e390:	31b8fe04 	addi	r6,r6,-7176
1000e394:	e1fffd17 	ldw	r7,-12(fp)
1000e398:	000ef2c0 	call	1000ef2c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000e39c:	e0bffd17 	ldw	r2,-12(fp)
1000e3a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000e3a4:	e0bffd17 	ldw	r2,-12(fp)
1000e3a8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000e3ac:	00840074 	movhi	r2,4097
1000e3b0:	108d9f04 	addi	r2,r2,13948
1000e3b4:	10800017 	ldw	r2,0(r2)
1000e3b8:	1809883a 	mov	r4,r3
1000e3bc:	100b883a 	mov	r5,r2
1000e3c0:	01840074 	movhi	r6,4097
1000e3c4:	31b97d04 	addi	r6,r6,-6668
1000e3c8:	e1fffd17 	ldw	r7,-12(fp)
1000e3cc:	000ec0c0 	call	1000ec0c <alt_alarm_start>
1000e3d0:	1000040e 	bge	r2,zero,1000e3e4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000e3d4:	e0bffd17 	ldw	r2,-12(fp)
1000e3d8:	00e00034 	movhi	r3,32768
1000e3dc:	18ffffc4 	addi	r3,r3,-1
1000e3e0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000e3e4:	e037883a 	mov	sp,fp
1000e3e8:	dfc00117 	ldw	ra,4(sp)
1000e3ec:	df000017 	ldw	fp,0(sp)
1000e3f0:	dec00204 	addi	sp,sp,8
1000e3f4:	f800283a 	ret

1000e3f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000e3f8:	defff804 	addi	sp,sp,-32
1000e3fc:	df000715 	stw	fp,28(sp)
1000e400:	df000704 	addi	fp,sp,28
1000e404:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000e408:	e0bfff17 	ldw	r2,-4(fp)
1000e40c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000e410:	e0bffb17 	ldw	r2,-20(fp)
1000e414:	10800017 	ldw	r2,0(r2)
1000e418:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e41c:	e0bffc17 	ldw	r2,-16(fp)
1000e420:	10800104 	addi	r2,r2,4
1000e424:	10800037 	ldwio	r2,0(r2)
1000e428:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000e42c:	e0bffd17 	ldw	r2,-12(fp)
1000e430:	1080c00c 	andi	r2,r2,768
1000e434:	1000011e 	bne	r2,zero,1000e43c <altera_avalon_jtag_uart_irq+0x44>
      break;
1000e438:	00006a06 	br	1000e5e4 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000e43c:	e0bffd17 	ldw	r2,-12(fp)
1000e440:	1080400c 	andi	r2,r2,256
1000e444:	10003226 	beq	r2,zero,1000e510 <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000e448:	00800074 	movhi	r2,1
1000e44c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e450:	e0bffb17 	ldw	r2,-20(fp)
1000e454:	10800a17 	ldw	r2,40(r2)
1000e458:	10800044 	addi	r2,r2,1
1000e45c:	1081ffcc 	andi	r2,r2,2047
1000e460:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000e464:	e0bffb17 	ldw	r2,-20(fp)
1000e468:	10c00b17 	ldw	r3,44(r2)
1000e46c:	e0bffe17 	ldw	r2,-8(fp)
1000e470:	1880011e 	bne	r3,r2,1000e478 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000e474:	00001506 	br	1000e4cc <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000e478:	e0bffc17 	ldw	r2,-16(fp)
1000e47c:	10800037 	ldwio	r2,0(r2)
1000e480:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000e484:	e0bff917 	ldw	r2,-28(fp)
1000e488:	10a0000c 	andi	r2,r2,32768
1000e48c:	1000011e 	bne	r2,zero,1000e494 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000e490:	00000e06 	br	1000e4cc <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000e494:	e0bffb17 	ldw	r2,-20(fp)
1000e498:	10800a17 	ldw	r2,40(r2)
1000e49c:	e0fff917 	ldw	r3,-28(fp)
1000e4a0:	e13ffb17 	ldw	r4,-20(fp)
1000e4a4:	2085883a 	add	r2,r4,r2
1000e4a8:	10800e04 	addi	r2,r2,56
1000e4ac:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e4b0:	e0bffb17 	ldw	r2,-20(fp)
1000e4b4:	10800a17 	ldw	r2,40(r2)
1000e4b8:	10800044 	addi	r2,r2,1
1000e4bc:	10c1ffcc 	andi	r3,r2,2047
1000e4c0:	e0bffb17 	ldw	r2,-20(fp)
1000e4c4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000e4c8:	003fe106 	br	1000e450 <__alt_data_end+0xf800e450>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000e4cc:	e0bff917 	ldw	r2,-28(fp)
1000e4d0:	10bfffec 	andhi	r2,r2,65535
1000e4d4:	10000e26 	beq	r2,zero,1000e510 <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e4d8:	e0bffb17 	ldw	r2,-20(fp)
1000e4dc:	10c00817 	ldw	r3,32(r2)
1000e4e0:	00bfff84 	movi	r2,-2
1000e4e4:	1886703a 	and	r3,r3,r2
1000e4e8:	e0bffb17 	ldw	r2,-20(fp)
1000e4ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000e4f0:	e0bffc17 	ldw	r2,-16(fp)
1000e4f4:	10800104 	addi	r2,r2,4
1000e4f8:	e0fffb17 	ldw	r3,-20(fp)
1000e4fc:	18c00817 	ldw	r3,32(r3)
1000e500:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e504:	e0bffc17 	ldw	r2,-16(fp)
1000e508:	10800104 	addi	r2,r2,4
1000e50c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000e510:	e0bffd17 	ldw	r2,-12(fp)
1000e514:	1080800c 	andi	r2,r2,512
1000e518:	10003126 	beq	r2,zero,1000e5e0 <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000e51c:	e0bffd17 	ldw	r2,-12(fp)
1000e520:	1004d43a 	srli	r2,r2,16
1000e524:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e528:	00001406 	br	1000e57c <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000e52c:	e0bffc17 	ldw	r2,-16(fp)
1000e530:	e0fffb17 	ldw	r3,-20(fp)
1000e534:	18c00d17 	ldw	r3,52(r3)
1000e538:	e13ffb17 	ldw	r4,-20(fp)
1000e53c:	20c7883a 	add	r3,r4,r3
1000e540:	18c20e04 	addi	r3,r3,2104
1000e544:	18c00003 	ldbu	r3,0(r3)
1000e548:	18c03fcc 	andi	r3,r3,255
1000e54c:	18c0201c 	xori	r3,r3,128
1000e550:	18ffe004 	addi	r3,r3,-128
1000e554:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e558:	e0bffb17 	ldw	r2,-20(fp)
1000e55c:	10800d17 	ldw	r2,52(r2)
1000e560:	10800044 	addi	r2,r2,1
1000e564:	10c1ffcc 	andi	r3,r2,2047
1000e568:	e0bffb17 	ldw	r2,-20(fp)
1000e56c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000e570:	e0bffa17 	ldw	r2,-24(fp)
1000e574:	10bfffc4 	addi	r2,r2,-1
1000e578:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e57c:	e0bffa17 	ldw	r2,-24(fp)
1000e580:	10000526 	beq	r2,zero,1000e598 <altera_avalon_jtag_uart_irq+0x1a0>
1000e584:	e0bffb17 	ldw	r2,-20(fp)
1000e588:	10c00d17 	ldw	r3,52(r2)
1000e58c:	e0bffb17 	ldw	r2,-20(fp)
1000e590:	10800c17 	ldw	r2,48(r2)
1000e594:	18bfe51e 	bne	r3,r2,1000e52c <__alt_data_end+0xf800e52c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000e598:	e0bffa17 	ldw	r2,-24(fp)
1000e59c:	10001026 	beq	r2,zero,1000e5e0 <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e5a0:	e0bffb17 	ldw	r2,-20(fp)
1000e5a4:	10c00817 	ldw	r3,32(r2)
1000e5a8:	00bfff44 	movi	r2,-3
1000e5ac:	1886703a 	and	r3,r3,r2
1000e5b0:	e0bffb17 	ldw	r2,-20(fp)
1000e5b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e5b8:	e0bffb17 	ldw	r2,-20(fp)
1000e5bc:	10800017 	ldw	r2,0(r2)
1000e5c0:	10800104 	addi	r2,r2,4
1000e5c4:	e0fffb17 	ldw	r3,-20(fp)
1000e5c8:	18c00817 	ldw	r3,32(r3)
1000e5cc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e5d0:	e0bffc17 	ldw	r2,-16(fp)
1000e5d4:	10800104 	addi	r2,r2,4
1000e5d8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000e5dc:	003f8f06 	br	1000e41c <__alt_data_end+0xf800e41c>
1000e5e0:	003f8e06 	br	1000e41c <__alt_data_end+0xf800e41c>
}
1000e5e4:	e037883a 	mov	sp,fp
1000e5e8:	df000017 	ldw	fp,0(sp)
1000e5ec:	dec00104 	addi	sp,sp,4
1000e5f0:	f800283a 	ret

1000e5f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000e5f4:	defff804 	addi	sp,sp,-32
1000e5f8:	df000715 	stw	fp,28(sp)
1000e5fc:	df000704 	addi	fp,sp,28
1000e600:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000e604:	e0bffb17 	ldw	r2,-20(fp)
1000e608:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000e60c:	e0bff917 	ldw	r2,-28(fp)
1000e610:	10800017 	ldw	r2,0(r2)
1000e614:	10800104 	addi	r2,r2,4
1000e618:	10800037 	ldwio	r2,0(r2)
1000e61c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000e620:	e0bffa17 	ldw	r2,-24(fp)
1000e624:	1081000c 	andi	r2,r2,1024
1000e628:	10000a26 	beq	r2,zero,1000e654 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000e62c:	e0bff917 	ldw	r2,-28(fp)
1000e630:	10800017 	ldw	r2,0(r2)
1000e634:	10800104 	addi	r2,r2,4
1000e638:	e0fff917 	ldw	r3,-28(fp)
1000e63c:	18c00817 	ldw	r3,32(r3)
1000e640:	18c10014 	ori	r3,r3,1024
1000e644:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
1000e648:	e0bff917 	ldw	r2,-28(fp)
1000e64c:	10000915 	stw	zero,36(r2)
1000e650:	00000a06 	br	1000e67c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000e654:	e0bff917 	ldw	r2,-28(fp)
1000e658:	10800917 	ldw	r2,36(r2)
1000e65c:	00e00034 	movhi	r3,32768
1000e660:	18ffff04 	addi	r3,r3,-4
1000e664:	18800536 	bltu	r3,r2,1000e67c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
1000e668:	e0bff917 	ldw	r2,-28(fp)
1000e66c:	10800917 	ldw	r2,36(r2)
1000e670:	10c00044 	addi	r3,r2,1
1000e674:	e0bff917 	ldw	r2,-28(fp)
1000e678:	10c00915 	stw	r3,36(r2)
1000e67c:	00840074 	movhi	r2,4097
1000e680:	108d9f04 	addi	r2,r2,13948
1000e684:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000e688:	e037883a 	mov	sp,fp
1000e68c:	df000017 	ldw	fp,0(sp)
1000e690:	dec00104 	addi	sp,sp,4
1000e694:	f800283a 	ret

1000e698 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000e698:	defffd04 	addi	sp,sp,-12
1000e69c:	df000215 	stw	fp,8(sp)
1000e6a0:	df000204 	addi	fp,sp,8
1000e6a4:	e13ffe15 	stw	r4,-8(fp)
1000e6a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e6ac:	00000506 	br	1000e6c4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000e6b0:	e0bfff17 	ldw	r2,-4(fp)
1000e6b4:	1090000c 	andi	r2,r2,16384
1000e6b8:	10000226 	beq	r2,zero,1000e6c4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000e6bc:	00bffd44 	movi	r2,-11
1000e6c0:	00000b06 	br	1000e6f0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e6c4:	e0bffe17 	ldw	r2,-8(fp)
1000e6c8:	10c00d17 	ldw	r3,52(r2)
1000e6cc:	e0bffe17 	ldw	r2,-8(fp)
1000e6d0:	10800c17 	ldw	r2,48(r2)
1000e6d4:	18800526 	beq	r3,r2,1000e6ec <altera_avalon_jtag_uart_close+0x54>
1000e6d8:	e0bffe17 	ldw	r2,-8(fp)
1000e6dc:	10c00917 	ldw	r3,36(r2)
1000e6e0:	e0bffe17 	ldw	r2,-8(fp)
1000e6e4:	10800117 	ldw	r2,4(r2)
1000e6e8:	18bff136 	bltu	r3,r2,1000e6b0 <__alt_data_end+0xf800e6b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000e6ec:	0005883a 	mov	r2,zero
}
1000e6f0:	e037883a 	mov	sp,fp
1000e6f4:	df000017 	ldw	fp,0(sp)
1000e6f8:	dec00104 	addi	sp,sp,4
1000e6fc:	f800283a 	ret

1000e700 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000e700:	defffa04 	addi	sp,sp,-24
1000e704:	df000515 	stw	fp,20(sp)
1000e708:	df000504 	addi	fp,sp,20
1000e70c:	e13ffd15 	stw	r4,-12(fp)
1000e710:	e17ffe15 	stw	r5,-8(fp)
1000e714:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000e718:	00bff9c4 	movi	r2,-25
1000e71c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000e720:	e0bffe17 	ldw	r2,-8(fp)
1000e724:	10da8060 	cmpeqi	r3,r2,27137
1000e728:	1800031e 	bne	r3,zero,1000e738 <altera_avalon_jtag_uart_ioctl+0x38>
1000e72c:	109a80a0 	cmpeqi	r2,r2,27138
1000e730:	1000191e 	bne	r2,zero,1000e798 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000e734:	00002806 	br	1000e7d8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000e738:	e0bffd17 	ldw	r2,-12(fp)
1000e73c:	10c00117 	ldw	r3,4(r2)
1000e740:	00a00034 	movhi	r2,32768
1000e744:	10bfffc4 	addi	r2,r2,-1
1000e748:	18801226 	beq	r3,r2,1000e794 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000e74c:	e0bfff17 	ldw	r2,-4(fp)
1000e750:	10800017 	ldw	r2,0(r2)
1000e754:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000e758:	e0bffc17 	ldw	r2,-16(fp)
1000e75c:	10800090 	cmplti	r2,r2,2
1000e760:	1000061e 	bne	r2,zero,1000e77c <altera_avalon_jtag_uart_ioctl+0x7c>
1000e764:	e0fffc17 	ldw	r3,-16(fp)
1000e768:	00a00034 	movhi	r2,32768
1000e76c:	10bfffc4 	addi	r2,r2,-1
1000e770:	18800226 	beq	r3,r2,1000e77c <altera_avalon_jtag_uart_ioctl+0x7c>
1000e774:	e0bffc17 	ldw	r2,-16(fp)
1000e778:	00000206 	br	1000e784 <altera_avalon_jtag_uart_ioctl+0x84>
1000e77c:	00a00034 	movhi	r2,32768
1000e780:	10bfff84 	addi	r2,r2,-2
1000e784:	e0fffd17 	ldw	r3,-12(fp)
1000e788:	18800115 	stw	r2,4(r3)
      rc = 0;
1000e78c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e790:	00001106 	br	1000e7d8 <altera_avalon_jtag_uart_ioctl+0xd8>
1000e794:	00001006 	br	1000e7d8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000e798:	e0bffd17 	ldw	r2,-12(fp)
1000e79c:	10c00117 	ldw	r3,4(r2)
1000e7a0:	00a00034 	movhi	r2,32768
1000e7a4:	10bfffc4 	addi	r2,r2,-1
1000e7a8:	18800a26 	beq	r3,r2,1000e7d4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000e7ac:	e0bffd17 	ldw	r2,-12(fp)
1000e7b0:	10c00917 	ldw	r3,36(r2)
1000e7b4:	e0bffd17 	ldw	r2,-12(fp)
1000e7b8:	10800117 	ldw	r2,4(r2)
1000e7bc:	1885803a 	cmpltu	r2,r3,r2
1000e7c0:	10c03fcc 	andi	r3,r2,255
1000e7c4:	e0bfff17 	ldw	r2,-4(fp)
1000e7c8:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000e7cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e7d0:	00000006 	br	1000e7d4 <altera_avalon_jtag_uart_ioctl+0xd4>
1000e7d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000e7d8:	e0bffb17 	ldw	r2,-20(fp)
}
1000e7dc:	e037883a 	mov	sp,fp
1000e7e0:	df000017 	ldw	fp,0(sp)
1000e7e4:	dec00104 	addi	sp,sp,4
1000e7e8:	f800283a 	ret

1000e7ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000e7ec:	defff304 	addi	sp,sp,-52
1000e7f0:	dfc00c15 	stw	ra,48(sp)
1000e7f4:	df000b15 	stw	fp,44(sp)
1000e7f8:	df000b04 	addi	fp,sp,44
1000e7fc:	e13ffc15 	stw	r4,-16(fp)
1000e800:	e17ffd15 	stw	r5,-12(fp)
1000e804:	e1bffe15 	stw	r6,-8(fp)
1000e808:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000e80c:	e0bffd17 	ldw	r2,-12(fp)
1000e810:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e814:	00004906 	br	1000e93c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000e818:	e0bffc17 	ldw	r2,-16(fp)
1000e81c:	10800a17 	ldw	r2,40(r2)
1000e820:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000e824:	e0bffc17 	ldw	r2,-16(fp)
1000e828:	10800b17 	ldw	r2,44(r2)
1000e82c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000e830:	e0fff717 	ldw	r3,-36(fp)
1000e834:	e0bff817 	ldw	r2,-32(fp)
1000e838:	18800536 	bltu	r3,r2,1000e850 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000e83c:	e0fff717 	ldw	r3,-36(fp)
1000e840:	e0bff817 	ldw	r2,-32(fp)
1000e844:	1885c83a 	sub	r2,r3,r2
1000e848:	e0bff615 	stw	r2,-40(fp)
1000e84c:	00000406 	br	1000e860 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000e850:	00c20004 	movi	r3,2048
1000e854:	e0bff817 	ldw	r2,-32(fp)
1000e858:	1885c83a 	sub	r2,r3,r2
1000e85c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e860:	e0bff617 	ldw	r2,-40(fp)
1000e864:	1000011e 	bne	r2,zero,1000e86c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000e868:	00001d06 	br	1000e8e0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000e86c:	e0fffe17 	ldw	r3,-8(fp)
1000e870:	e0bff617 	ldw	r2,-40(fp)
1000e874:	1880022e 	bgeu	r3,r2,1000e880 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000e878:	e0bffe17 	ldw	r2,-8(fp)
1000e87c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000e880:	e0bff817 	ldw	r2,-32(fp)
1000e884:	10800e04 	addi	r2,r2,56
1000e888:	e0fffc17 	ldw	r3,-16(fp)
1000e88c:	1885883a 	add	r2,r3,r2
1000e890:	e13ff517 	ldw	r4,-44(fp)
1000e894:	100b883a 	mov	r5,r2
1000e898:	e1bff617 	ldw	r6,-40(fp)
1000e89c:	000664c0 	call	1000664c <memcpy>
      ptr   += n;
1000e8a0:	e0fff517 	ldw	r3,-44(fp)
1000e8a4:	e0bff617 	ldw	r2,-40(fp)
1000e8a8:	1885883a 	add	r2,r3,r2
1000e8ac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000e8b0:	e0fffe17 	ldw	r3,-8(fp)
1000e8b4:	e0bff617 	ldw	r2,-40(fp)
1000e8b8:	1885c83a 	sub	r2,r3,r2
1000e8bc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e8c0:	e0fff817 	ldw	r3,-32(fp)
1000e8c4:	e0bff617 	ldw	r2,-40(fp)
1000e8c8:	1885883a 	add	r2,r3,r2
1000e8cc:	10c1ffcc 	andi	r3,r2,2047
1000e8d0:	e0bffc17 	ldw	r2,-16(fp)
1000e8d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000e8d8:	e0bffe17 	ldw	r2,-8(fp)
1000e8dc:	00bfce16 	blt	zero,r2,1000e818 <__alt_data_end+0xf800e818>

    /* If we read any data then return it */
    if (ptr != buffer)
1000e8e0:	e0fff517 	ldw	r3,-44(fp)
1000e8e4:	e0bffd17 	ldw	r2,-12(fp)
1000e8e8:	18800126 	beq	r3,r2,1000e8f0 <altera_avalon_jtag_uart_read+0x104>
      break;
1000e8ec:	00001506 	br	1000e944 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000e8f0:	e0bfff17 	ldw	r2,-4(fp)
1000e8f4:	1090000c 	andi	r2,r2,16384
1000e8f8:	10000126 	beq	r2,zero,1000e900 <altera_avalon_jtag_uart_read+0x114>
      break;
1000e8fc:	00001106 	br	1000e944 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000e900:	0001883a 	nop
1000e904:	e0bffc17 	ldw	r2,-16(fp)
1000e908:	10c00a17 	ldw	r3,40(r2)
1000e90c:	e0bff717 	ldw	r2,-36(fp)
1000e910:	1880051e 	bne	r3,r2,1000e928 <altera_avalon_jtag_uart_read+0x13c>
1000e914:	e0bffc17 	ldw	r2,-16(fp)
1000e918:	10c00917 	ldw	r3,36(r2)
1000e91c:	e0bffc17 	ldw	r2,-16(fp)
1000e920:	10800117 	ldw	r2,4(r2)
1000e924:	18bff736 	bltu	r3,r2,1000e904 <__alt_data_end+0xf800e904>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000e928:	e0bffc17 	ldw	r2,-16(fp)
1000e92c:	10c00a17 	ldw	r3,40(r2)
1000e930:	e0bff717 	ldw	r2,-36(fp)
1000e934:	1880011e 	bne	r3,r2,1000e93c <altera_avalon_jtag_uart_read+0x150>
      break;
1000e938:	00000206 	br	1000e944 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e93c:	e0bffe17 	ldw	r2,-8(fp)
1000e940:	00bfb516 	blt	zero,r2,1000e818 <__alt_data_end+0xf800e818>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000e944:	e0fff517 	ldw	r3,-44(fp)
1000e948:	e0bffd17 	ldw	r2,-12(fp)
1000e94c:	18801726 	beq	r3,r2,1000e9ac <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e950:	0005303a 	rdctl	r2,status
1000e954:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e958:	e0fffa17 	ldw	r3,-24(fp)
1000e95c:	00bfff84 	movi	r2,-2
1000e960:	1884703a 	and	r2,r3,r2
1000e964:	1001703a 	wrctl	status,r2
  
  return context;
1000e968:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000e96c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e970:	e0bffc17 	ldw	r2,-16(fp)
1000e974:	10800817 	ldw	r2,32(r2)
1000e978:	10c00054 	ori	r3,r2,1
1000e97c:	e0bffc17 	ldw	r2,-16(fp)
1000e980:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e984:	e0bffc17 	ldw	r2,-16(fp)
1000e988:	10800017 	ldw	r2,0(r2)
1000e98c:	10800104 	addi	r2,r2,4
1000e990:	e0fffc17 	ldw	r3,-16(fp)
1000e994:	18c00817 	ldw	r3,32(r3)
1000e998:	10c00035 	stwio	r3,0(r2)
1000e99c:	e0bff917 	ldw	r2,-28(fp)
1000e9a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e9a4:	e0bffb17 	ldw	r2,-20(fp)
1000e9a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000e9ac:	e0fff517 	ldw	r3,-44(fp)
1000e9b0:	e0bffd17 	ldw	r2,-12(fp)
1000e9b4:	18800426 	beq	r3,r2,1000e9c8 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
1000e9b8:	e0fff517 	ldw	r3,-44(fp)
1000e9bc:	e0bffd17 	ldw	r2,-12(fp)
1000e9c0:	1885c83a 	sub	r2,r3,r2
1000e9c4:	00000606 	br	1000e9e0 <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
1000e9c8:	e0bfff17 	ldw	r2,-4(fp)
1000e9cc:	1090000c 	andi	r2,r2,16384
1000e9d0:	10000226 	beq	r2,zero,1000e9dc <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
1000e9d4:	00bffd44 	movi	r2,-11
1000e9d8:	00000106 	br	1000e9e0 <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
1000e9dc:	00bffec4 	movi	r2,-5
}
1000e9e0:	e037883a 	mov	sp,fp
1000e9e4:	dfc00117 	ldw	ra,4(sp)
1000e9e8:	df000017 	ldw	fp,0(sp)
1000e9ec:	dec00204 	addi	sp,sp,8
1000e9f0:	f800283a 	ret

1000e9f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000e9f4:	defff304 	addi	sp,sp,-52
1000e9f8:	dfc00c15 	stw	ra,48(sp)
1000e9fc:	df000b15 	stw	fp,44(sp)
1000ea00:	df000b04 	addi	fp,sp,44
1000ea04:	e13ffc15 	stw	r4,-16(fp)
1000ea08:	e17ffd15 	stw	r5,-12(fp)
1000ea0c:	e1bffe15 	stw	r6,-8(fp)
1000ea10:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000ea14:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000ea18:	e0bffd17 	ldw	r2,-12(fp)
1000ea1c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000ea20:	00003906 	br	1000eb08 <altera_avalon_jtag_uart_write+0x114>
1000ea24:	00003806 	br	1000eb08 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000ea28:	e0bffc17 	ldw	r2,-16(fp)
1000ea2c:	10800c17 	ldw	r2,48(r2)
1000ea30:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000ea34:	e0bffc17 	ldw	r2,-16(fp)
1000ea38:	10800d17 	ldw	r2,52(r2)
1000ea3c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000ea40:	e0fff817 	ldw	r3,-32(fp)
1000ea44:	e0bff517 	ldw	r2,-44(fp)
1000ea48:	1880062e 	bgeu	r3,r2,1000ea64 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
1000ea4c:	e0fff517 	ldw	r3,-44(fp)
1000ea50:	e0bff817 	ldw	r2,-32(fp)
1000ea54:	1885c83a 	sub	r2,r3,r2
1000ea58:	10bfffc4 	addi	r2,r2,-1
1000ea5c:	e0bff615 	stw	r2,-40(fp)
1000ea60:	00000b06 	br	1000ea90 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
1000ea64:	e0bff517 	ldw	r2,-44(fp)
1000ea68:	10000526 	beq	r2,zero,1000ea80 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000ea6c:	00c20004 	movi	r3,2048
1000ea70:	e0bff817 	ldw	r2,-32(fp)
1000ea74:	1885c83a 	sub	r2,r3,r2
1000ea78:	e0bff615 	stw	r2,-40(fp)
1000ea7c:	00000406 	br	1000ea90 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000ea80:	00c1ffc4 	movi	r3,2047
1000ea84:	e0bff817 	ldw	r2,-32(fp)
1000ea88:	1885c83a 	sub	r2,r3,r2
1000ea8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000ea90:	e0bff617 	ldw	r2,-40(fp)
1000ea94:	1000011e 	bne	r2,zero,1000ea9c <altera_avalon_jtag_uart_write+0xa8>
        break;
1000ea98:	00001d06 	br	1000eb10 <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
1000ea9c:	e0fffe17 	ldw	r3,-8(fp)
1000eaa0:	e0bff617 	ldw	r2,-40(fp)
1000eaa4:	1880022e 	bgeu	r3,r2,1000eab0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
1000eaa8:	e0bffe17 	ldw	r2,-8(fp)
1000eaac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000eab0:	e0bff817 	ldw	r2,-32(fp)
1000eab4:	10820e04 	addi	r2,r2,2104
1000eab8:	e0fffc17 	ldw	r3,-16(fp)
1000eabc:	1885883a 	add	r2,r3,r2
1000eac0:	1009883a 	mov	r4,r2
1000eac4:	e17ffd17 	ldw	r5,-12(fp)
1000eac8:	e1bff617 	ldw	r6,-40(fp)
1000eacc:	000664c0 	call	1000664c <memcpy>
      ptr   += n;
1000ead0:	e0fffd17 	ldw	r3,-12(fp)
1000ead4:	e0bff617 	ldw	r2,-40(fp)
1000ead8:	1885883a 	add	r2,r3,r2
1000eadc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000eae0:	e0fffe17 	ldw	r3,-8(fp)
1000eae4:	e0bff617 	ldw	r2,-40(fp)
1000eae8:	1885c83a 	sub	r2,r3,r2
1000eaec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000eaf0:	e0fff817 	ldw	r3,-32(fp)
1000eaf4:	e0bff617 	ldw	r2,-40(fp)
1000eaf8:	1885883a 	add	r2,r3,r2
1000eafc:	10c1ffcc 	andi	r3,r2,2047
1000eb00:	e0bffc17 	ldw	r2,-16(fp)
1000eb04:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000eb08:	e0bffe17 	ldw	r2,-8(fp)
1000eb0c:	00bfc616 	blt	zero,r2,1000ea28 <__alt_data_end+0xf800ea28>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000eb10:	0005303a 	rdctl	r2,status
1000eb14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000eb18:	e0fffa17 	ldw	r3,-24(fp)
1000eb1c:	00bfff84 	movi	r2,-2
1000eb20:	1884703a 	and	r2,r3,r2
1000eb24:	1001703a 	wrctl	status,r2
  
  return context;
1000eb28:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000eb2c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000eb30:	e0bffc17 	ldw	r2,-16(fp)
1000eb34:	10800817 	ldw	r2,32(r2)
1000eb38:	10c00094 	ori	r3,r2,2
1000eb3c:	e0bffc17 	ldw	r2,-16(fp)
1000eb40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000eb44:	e0bffc17 	ldw	r2,-16(fp)
1000eb48:	10800017 	ldw	r2,0(r2)
1000eb4c:	10800104 	addi	r2,r2,4
1000eb50:	e0fffc17 	ldw	r3,-16(fp)
1000eb54:	18c00817 	ldw	r3,32(r3)
1000eb58:	10c00035 	stwio	r3,0(r2)
1000eb5c:	e0bff917 	ldw	r2,-28(fp)
1000eb60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000eb64:	e0bffb17 	ldw	r2,-20(fp)
1000eb68:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000eb6c:	e0bffe17 	ldw	r2,-8(fp)
1000eb70:	0080120e 	bge	zero,r2,1000ebbc <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000eb74:	e0bfff17 	ldw	r2,-4(fp)
1000eb78:	1090000c 	andi	r2,r2,16384
1000eb7c:	10000126 	beq	r2,zero,1000eb84 <altera_avalon_jtag_uart_write+0x190>
        break;
1000eb80:	00001006 	br	1000ebc4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000eb84:	0001883a 	nop
1000eb88:	e0bffc17 	ldw	r2,-16(fp)
1000eb8c:	10c00d17 	ldw	r3,52(r2)
1000eb90:	e0bff517 	ldw	r2,-44(fp)
1000eb94:	1880051e 	bne	r3,r2,1000ebac <altera_avalon_jtag_uart_write+0x1b8>
1000eb98:	e0bffc17 	ldw	r2,-16(fp)
1000eb9c:	10c00917 	ldw	r3,36(r2)
1000eba0:	e0bffc17 	ldw	r2,-16(fp)
1000eba4:	10800117 	ldw	r2,4(r2)
1000eba8:	18bff736 	bltu	r3,r2,1000eb88 <__alt_data_end+0xf800eb88>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000ebac:	e0bffc17 	ldw	r2,-16(fp)
1000ebb0:	10800917 	ldw	r2,36(r2)
1000ebb4:	10000126 	beq	r2,zero,1000ebbc <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000ebb8:	00000206 	br	1000ebc4 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000ebbc:	e0bffe17 	ldw	r2,-8(fp)
1000ebc0:	00bf9816 	blt	zero,r2,1000ea24 <__alt_data_end+0xf800ea24>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000ebc4:	e0fffd17 	ldw	r3,-12(fp)
1000ebc8:	e0bff717 	ldw	r2,-36(fp)
1000ebcc:	18800426 	beq	r3,r2,1000ebe0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000ebd0:	e0fffd17 	ldw	r3,-12(fp)
1000ebd4:	e0bff717 	ldw	r2,-36(fp)
1000ebd8:	1885c83a 	sub	r2,r3,r2
1000ebdc:	00000606 	br	1000ebf8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000ebe0:	e0bfff17 	ldw	r2,-4(fp)
1000ebe4:	1090000c 	andi	r2,r2,16384
1000ebe8:	10000226 	beq	r2,zero,1000ebf4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000ebec:	00bffd44 	movi	r2,-11
1000ebf0:	00000106 	br	1000ebf8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000ebf4:	00bffec4 	movi	r2,-5
}
1000ebf8:	e037883a 	mov	sp,fp
1000ebfc:	dfc00117 	ldw	ra,4(sp)
1000ec00:	df000017 	ldw	fp,0(sp)
1000ec04:	dec00204 	addi	sp,sp,8
1000ec08:	f800283a 	ret

1000ec0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000ec0c:	defff504 	addi	sp,sp,-44
1000ec10:	df000a15 	stw	fp,40(sp)
1000ec14:	df000a04 	addi	fp,sp,40
1000ec18:	e13ffc15 	stw	r4,-16(fp)
1000ec1c:	e17ffd15 	stw	r5,-12(fp)
1000ec20:	e1bffe15 	stw	r6,-8(fp)
1000ec24:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000ec28:	e03ff615 	stw	zero,-40(fp)
1000ec2c:	00840074 	movhi	r2,4097
1000ec30:	108d9f04 	addi	r2,r2,13948
1000ec34:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000ec38:	10003f26 	beq	r2,zero,1000ed38 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000ec3c:	e0bffc17 	ldw	r2,-16(fp)
1000ec40:	10003b26 	beq	r2,zero,1000ed30 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000ec44:	e0bffc17 	ldw	r2,-16(fp)
1000ec48:	e0fffe17 	ldw	r3,-8(fp)
1000ec4c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000ec50:	e0bffc17 	ldw	r2,-16(fp)
1000ec54:	e0ffff17 	ldw	r3,-4(fp)
1000ec58:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ec5c:	0005303a 	rdctl	r2,status
1000ec60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ec64:	e0fff817 	ldw	r3,-32(fp)
1000ec68:	00bfff84 	movi	r2,-2
1000ec6c:	1884703a 	and	r2,r3,r2
1000ec70:	1001703a 	wrctl	status,r2
  
  return context;
1000ec74:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000ec78:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000ec7c:	00840074 	movhi	r2,4097
1000ec80:	108da004 	addi	r2,r2,13952
1000ec84:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000ec88:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000ec8c:	e0fffd17 	ldw	r3,-12(fp)
1000ec90:	e0bff617 	ldw	r2,-40(fp)
1000ec94:	1885883a 	add	r2,r3,r2
1000ec98:	10c00044 	addi	r3,r2,1
1000ec9c:	e0bffc17 	ldw	r2,-16(fp)
1000eca0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000eca4:	e0bffc17 	ldw	r2,-16(fp)
1000eca8:	10c00217 	ldw	r3,8(r2)
1000ecac:	e0bff617 	ldw	r2,-40(fp)
1000ecb0:	1880042e 	bgeu	r3,r2,1000ecc4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000ecb4:	e0bffc17 	ldw	r2,-16(fp)
1000ecb8:	00c00044 	movi	r3,1
1000ecbc:	10c00405 	stb	r3,16(r2)
1000ecc0:	00000206 	br	1000eccc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000ecc4:	e0bffc17 	ldw	r2,-16(fp)
1000ecc8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000eccc:	e0bffc17 	ldw	r2,-16(fp)
1000ecd0:	00c40074 	movhi	r3,4097
1000ecd4:	18c6d504 	addi	r3,r3,6996
1000ecd8:	e0fff915 	stw	r3,-28(fp)
1000ecdc:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ece0:	e0bffa17 	ldw	r2,-24(fp)
1000ece4:	e0fff917 	ldw	r3,-28(fp)
1000ece8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ecec:	e0bff917 	ldw	r2,-28(fp)
1000ecf0:	10c00017 	ldw	r3,0(r2)
1000ecf4:	e0bffa17 	ldw	r2,-24(fp)
1000ecf8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ecfc:	e0bff917 	ldw	r2,-28(fp)
1000ed00:	10800017 	ldw	r2,0(r2)
1000ed04:	e0fffa17 	ldw	r3,-24(fp)
1000ed08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ed0c:	e0bff917 	ldw	r2,-28(fp)
1000ed10:	e0fffa17 	ldw	r3,-24(fp)
1000ed14:	10c00015 	stw	r3,0(r2)
1000ed18:	e0bff717 	ldw	r2,-36(fp)
1000ed1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ed20:	e0bffb17 	ldw	r2,-20(fp)
1000ed24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000ed28:	0005883a 	mov	r2,zero
1000ed2c:	00000306 	br	1000ed3c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000ed30:	00bffa84 	movi	r2,-22
1000ed34:	00000106 	br	1000ed3c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000ed38:	00bfde84 	movi	r2,-134
  }
}
1000ed3c:	e037883a 	mov	sp,fp
1000ed40:	df000017 	ldw	fp,0(sp)
1000ed44:	dec00104 	addi	sp,sp,4
1000ed48:	f800283a 	ret

1000ed4c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000ed4c:	deffff04 	addi	sp,sp,-4
1000ed50:	df000015 	stw	fp,0(sp)
1000ed54:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000ed58:	e037883a 	mov	sp,fp
1000ed5c:	df000017 	ldw	fp,0(sp)
1000ed60:	dec00104 	addi	sp,sp,4
1000ed64:	f800283a 	ret

1000ed68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ed68:	defffe04 	addi	sp,sp,-8
1000ed6c:	dfc00115 	stw	ra,4(sp)
1000ed70:	df000015 	stw	fp,0(sp)
1000ed74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ed78:	00840074 	movhi	r2,4097
1000ed7c:	1086d204 	addi	r2,r2,6984
1000ed80:	10800017 	ldw	r2,0(r2)
1000ed84:	10000526 	beq	r2,zero,1000ed9c <alt_get_errno+0x34>
1000ed88:	00840074 	movhi	r2,4097
1000ed8c:	1086d204 	addi	r2,r2,6984
1000ed90:	10800017 	ldw	r2,0(r2)
1000ed94:	103ee83a 	callr	r2
1000ed98:	00000206 	br	1000eda4 <alt_get_errno+0x3c>
1000ed9c:	00840074 	movhi	r2,4097
1000eda0:	108d9a04 	addi	r2,r2,13928
}
1000eda4:	e037883a 	mov	sp,fp
1000eda8:	dfc00117 	ldw	ra,4(sp)
1000edac:	df000017 	ldw	fp,0(sp)
1000edb0:	dec00204 	addi	sp,sp,8
1000edb4:	f800283a 	ret

1000edb8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000edb8:	defffa04 	addi	sp,sp,-24
1000edbc:	dfc00515 	stw	ra,20(sp)
1000edc0:	df000415 	stw	fp,16(sp)
1000edc4:	df000404 	addi	fp,sp,16
1000edc8:	e13ffe15 	stw	r4,-8(fp)
1000edcc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000edd0:	e0bffe17 	ldw	r2,-8(fp)
1000edd4:	10000326 	beq	r2,zero,1000ede4 <alt_dev_llist_insert+0x2c>
1000edd8:	e0bffe17 	ldw	r2,-8(fp)
1000eddc:	10800217 	ldw	r2,8(r2)
1000ede0:	1000051e 	bne	r2,zero,1000edf8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
1000ede4:	000ed680 	call	1000ed68 <alt_get_errno>
1000ede8:	00c00584 	movi	r3,22
1000edec:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
1000edf0:	00bffa84 	movi	r2,-22
1000edf4:	00001306 	br	1000ee44 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000edf8:	e0bffe17 	ldw	r2,-8(fp)
1000edfc:	e0ffff17 	ldw	r3,-4(fp)
1000ee00:	e0fffc15 	stw	r3,-16(fp)
1000ee04:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ee08:	e0bffd17 	ldw	r2,-12(fp)
1000ee0c:	e0fffc17 	ldw	r3,-16(fp)
1000ee10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ee14:	e0bffc17 	ldw	r2,-16(fp)
1000ee18:	10c00017 	ldw	r3,0(r2)
1000ee1c:	e0bffd17 	ldw	r2,-12(fp)
1000ee20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ee24:	e0bffc17 	ldw	r2,-16(fp)
1000ee28:	10800017 	ldw	r2,0(r2)
1000ee2c:	e0fffd17 	ldw	r3,-12(fp)
1000ee30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ee34:	e0bffc17 	ldw	r2,-16(fp)
1000ee38:	e0fffd17 	ldw	r3,-12(fp)
1000ee3c:	10c00015 	stw	r3,0(r2)

  return 0;  
1000ee40:	0005883a 	mov	r2,zero
}
1000ee44:	e037883a 	mov	sp,fp
1000ee48:	dfc00117 	ldw	ra,4(sp)
1000ee4c:	df000017 	ldw	fp,0(sp)
1000ee50:	dec00204 	addi	sp,sp,8
1000ee54:	f800283a 	ret

1000ee58 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000ee58:	defffd04 	addi	sp,sp,-12
1000ee5c:	dfc00215 	stw	ra,8(sp)
1000ee60:	df000115 	stw	fp,4(sp)
1000ee64:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ee68:	00840074 	movhi	r2,4097
1000ee6c:	10bf5204 	addi	r2,r2,-696
1000ee70:	e0bfff15 	stw	r2,-4(fp)
1000ee74:	00000606 	br	1000ee90 <_do_ctors+0x38>
        (*ctor) (); 
1000ee78:	e0bfff17 	ldw	r2,-4(fp)
1000ee7c:	10800017 	ldw	r2,0(r2)
1000ee80:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ee84:	e0bfff17 	ldw	r2,-4(fp)
1000ee88:	10bfff04 	addi	r2,r2,-4
1000ee8c:	e0bfff15 	stw	r2,-4(fp)
1000ee90:	e0ffff17 	ldw	r3,-4(fp)
1000ee94:	00840074 	movhi	r2,4097
1000ee98:	10bf5304 	addi	r2,r2,-692
1000ee9c:	18bff62e 	bgeu	r3,r2,1000ee78 <__alt_data_end+0xf800ee78>
        (*ctor) (); 
}
1000eea0:	e037883a 	mov	sp,fp
1000eea4:	dfc00117 	ldw	ra,4(sp)
1000eea8:	df000017 	ldw	fp,0(sp)
1000eeac:	dec00204 	addi	sp,sp,8
1000eeb0:	f800283a 	ret

1000eeb4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000eeb4:	defffd04 	addi	sp,sp,-12
1000eeb8:	dfc00215 	stw	ra,8(sp)
1000eebc:	df000115 	stw	fp,4(sp)
1000eec0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000eec4:	00840074 	movhi	r2,4097
1000eec8:	10bf5204 	addi	r2,r2,-696
1000eecc:	e0bfff15 	stw	r2,-4(fp)
1000eed0:	00000606 	br	1000eeec <_do_dtors+0x38>
        (*dtor) (); 
1000eed4:	e0bfff17 	ldw	r2,-4(fp)
1000eed8:	10800017 	ldw	r2,0(r2)
1000eedc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000eee0:	e0bfff17 	ldw	r2,-4(fp)
1000eee4:	10bfff04 	addi	r2,r2,-4
1000eee8:	e0bfff15 	stw	r2,-4(fp)
1000eeec:	e0ffff17 	ldw	r3,-4(fp)
1000eef0:	00840074 	movhi	r2,4097
1000eef4:	10bf5304 	addi	r2,r2,-692
1000eef8:	18bff62e 	bgeu	r3,r2,1000eed4 <__alt_data_end+0xf800eed4>
        (*dtor) (); 
}
1000eefc:	e037883a 	mov	sp,fp
1000ef00:	dfc00117 	ldw	ra,4(sp)
1000ef04:	df000017 	ldw	fp,0(sp)
1000ef08:	dec00204 	addi	sp,sp,8
1000ef0c:	f800283a 	ret

1000ef10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000ef10:	deffff04 	addi	sp,sp,-4
1000ef14:	df000015 	stw	fp,0(sp)
1000ef18:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000ef1c:	e037883a 	mov	sp,fp
1000ef20:	df000017 	ldw	fp,0(sp)
1000ef24:	dec00104 	addi	sp,sp,4
1000ef28:	f800283a 	ret

1000ef2c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000ef2c:	defff904 	addi	sp,sp,-28
1000ef30:	dfc00615 	stw	ra,24(sp)
1000ef34:	df000515 	stw	fp,20(sp)
1000ef38:	df000504 	addi	fp,sp,20
1000ef3c:	e13ffc15 	stw	r4,-16(fp)
1000ef40:	e17ffd15 	stw	r5,-12(fp)
1000ef44:	e1bffe15 	stw	r6,-8(fp)
1000ef48:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000ef4c:	e0800217 	ldw	r2,8(fp)
1000ef50:	d8800015 	stw	r2,0(sp)
1000ef54:	e13ffc17 	ldw	r4,-16(fp)
1000ef58:	e17ffd17 	ldw	r5,-12(fp)
1000ef5c:	e1bffe17 	ldw	r6,-8(fp)
1000ef60:	e1ffff17 	ldw	r7,-4(fp)
1000ef64:	000f1040 	call	1000f104 <alt_iic_isr_register>
}  
1000ef68:	e037883a 	mov	sp,fp
1000ef6c:	dfc00117 	ldw	ra,4(sp)
1000ef70:	df000017 	ldw	fp,0(sp)
1000ef74:	dec00204 	addi	sp,sp,8
1000ef78:	f800283a 	ret

1000ef7c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000ef7c:	defff904 	addi	sp,sp,-28
1000ef80:	df000615 	stw	fp,24(sp)
1000ef84:	df000604 	addi	fp,sp,24
1000ef88:	e13ffe15 	stw	r4,-8(fp)
1000ef8c:	e17fff15 	stw	r5,-4(fp)
1000ef90:	e0bfff17 	ldw	r2,-4(fp)
1000ef94:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ef98:	0005303a 	rdctl	r2,status
1000ef9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000efa0:	e0fffb17 	ldw	r3,-20(fp)
1000efa4:	00bfff84 	movi	r2,-2
1000efa8:	1884703a 	and	r2,r3,r2
1000efac:	1001703a 	wrctl	status,r2
  
  return context;
1000efb0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000efb4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000efb8:	e0bffa17 	ldw	r2,-24(fp)
1000efbc:	00c00044 	movi	r3,1
1000efc0:	1884983a 	sll	r2,r3,r2
1000efc4:	1007883a 	mov	r3,r2
1000efc8:	00840074 	movhi	r2,4097
1000efcc:	108d9e04 	addi	r2,r2,13944
1000efd0:	10800017 	ldw	r2,0(r2)
1000efd4:	1886b03a 	or	r3,r3,r2
1000efd8:	00840074 	movhi	r2,4097
1000efdc:	108d9e04 	addi	r2,r2,13944
1000efe0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000efe4:	00840074 	movhi	r2,4097
1000efe8:	108d9e04 	addi	r2,r2,13944
1000efec:	10800017 	ldw	r2,0(r2)
1000eff0:	100170fa 	wrctl	ienable,r2
1000eff4:	e0bffc17 	ldw	r2,-16(fp)
1000eff8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000effc:	e0bffd17 	ldw	r2,-12(fp)
1000f000:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f004:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
1000f008:	e037883a 	mov	sp,fp
1000f00c:	df000017 	ldw	fp,0(sp)
1000f010:	dec00104 	addi	sp,sp,4
1000f014:	f800283a 	ret

1000f018 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000f018:	defff904 	addi	sp,sp,-28
1000f01c:	df000615 	stw	fp,24(sp)
1000f020:	df000604 	addi	fp,sp,24
1000f024:	e13ffe15 	stw	r4,-8(fp)
1000f028:	e17fff15 	stw	r5,-4(fp)
1000f02c:	e0bfff17 	ldw	r2,-4(fp)
1000f030:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f034:	0005303a 	rdctl	r2,status
1000f038:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f03c:	e0fffb17 	ldw	r3,-20(fp)
1000f040:	00bfff84 	movi	r2,-2
1000f044:	1884703a 	and	r2,r3,r2
1000f048:	1001703a 	wrctl	status,r2
  
  return context;
1000f04c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f050:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000f054:	e0bffa17 	ldw	r2,-24(fp)
1000f058:	00c00044 	movi	r3,1
1000f05c:	1884983a 	sll	r2,r3,r2
1000f060:	0084303a 	nor	r2,zero,r2
1000f064:	1007883a 	mov	r3,r2
1000f068:	00840074 	movhi	r2,4097
1000f06c:	108d9e04 	addi	r2,r2,13944
1000f070:	10800017 	ldw	r2,0(r2)
1000f074:	1886703a 	and	r3,r3,r2
1000f078:	00840074 	movhi	r2,4097
1000f07c:	108d9e04 	addi	r2,r2,13944
1000f080:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f084:	00840074 	movhi	r2,4097
1000f088:	108d9e04 	addi	r2,r2,13944
1000f08c:	10800017 	ldw	r2,0(r2)
1000f090:	100170fa 	wrctl	ienable,r2
1000f094:	e0bffc17 	ldw	r2,-16(fp)
1000f098:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f09c:	e0bffd17 	ldw	r2,-12(fp)
1000f0a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f0a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
1000f0a8:	e037883a 	mov	sp,fp
1000f0ac:	df000017 	ldw	fp,0(sp)
1000f0b0:	dec00104 	addi	sp,sp,4
1000f0b4:	f800283a 	ret

1000f0b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000f0b8:	defffc04 	addi	sp,sp,-16
1000f0bc:	df000315 	stw	fp,12(sp)
1000f0c0:	df000304 	addi	fp,sp,12
1000f0c4:	e13ffe15 	stw	r4,-8(fp)
1000f0c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000f0cc:	000530fa 	rdctl	r2,ienable
1000f0d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000f0d4:	e0bfff17 	ldw	r2,-4(fp)
1000f0d8:	00c00044 	movi	r3,1
1000f0dc:	1884983a 	sll	r2,r3,r2
1000f0e0:	1007883a 	mov	r3,r2
1000f0e4:	e0bffd17 	ldw	r2,-12(fp)
1000f0e8:	1884703a 	and	r2,r3,r2
1000f0ec:	1004c03a 	cmpne	r2,r2,zero
1000f0f0:	10803fcc 	andi	r2,r2,255
}
1000f0f4:	e037883a 	mov	sp,fp
1000f0f8:	df000017 	ldw	fp,0(sp)
1000f0fc:	dec00104 	addi	sp,sp,4
1000f100:	f800283a 	ret

1000f104 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f104:	defff504 	addi	sp,sp,-44
1000f108:	dfc00a15 	stw	ra,40(sp)
1000f10c:	df000915 	stw	fp,36(sp)
1000f110:	df000904 	addi	fp,sp,36
1000f114:	e13ffc15 	stw	r4,-16(fp)
1000f118:	e17ffd15 	stw	r5,-12(fp)
1000f11c:	e1bffe15 	stw	r6,-8(fp)
1000f120:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000f124:	00bffa84 	movi	r2,-22
1000f128:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000f12c:	e0bffd17 	ldw	r2,-12(fp)
1000f130:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000f134:	e0bff817 	ldw	r2,-32(fp)
1000f138:	10800808 	cmpgei	r2,r2,32
1000f13c:	1000271e 	bne	r2,zero,1000f1dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f140:	0005303a 	rdctl	r2,status
1000f144:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f148:	e0fffa17 	ldw	r3,-24(fp)
1000f14c:	00bfff84 	movi	r2,-2
1000f150:	1884703a 	and	r2,r3,r2
1000f154:	1001703a 	wrctl	status,r2
  
  return context;
1000f158:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000f15c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000f160:	00c40074 	movhi	r3,4097
1000f164:	18cdab04 	addi	r3,r3,13996
1000f168:	e0bff817 	ldw	r2,-32(fp)
1000f16c:	100490fa 	slli	r2,r2,3
1000f170:	1885883a 	add	r2,r3,r2
1000f174:	e0fffe17 	ldw	r3,-8(fp)
1000f178:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000f17c:	00c40074 	movhi	r3,4097
1000f180:	18cdab04 	addi	r3,r3,13996
1000f184:	e0bff817 	ldw	r2,-32(fp)
1000f188:	100490fa 	slli	r2,r2,3
1000f18c:	1885883a 	add	r2,r3,r2
1000f190:	10800104 	addi	r2,r2,4
1000f194:	e0ffff17 	ldw	r3,-4(fp)
1000f198:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000f19c:	e0bffe17 	ldw	r2,-8(fp)
1000f1a0:	10000526 	beq	r2,zero,1000f1b8 <alt_iic_isr_register+0xb4>
1000f1a4:	e0bff817 	ldw	r2,-32(fp)
1000f1a8:	e13ffc17 	ldw	r4,-16(fp)
1000f1ac:	100b883a 	mov	r5,r2
1000f1b0:	000ef7c0 	call	1000ef7c <alt_ic_irq_enable>
1000f1b4:	00000406 	br	1000f1c8 <alt_iic_isr_register+0xc4>
1000f1b8:	e0bff817 	ldw	r2,-32(fp)
1000f1bc:	e13ffc17 	ldw	r4,-16(fp)
1000f1c0:	100b883a 	mov	r5,r2
1000f1c4:	000f0180 	call	1000f018 <alt_ic_irq_disable>
1000f1c8:	e0bff715 	stw	r2,-36(fp)
1000f1cc:	e0bff917 	ldw	r2,-28(fp)
1000f1d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f1d4:	e0bffb17 	ldw	r2,-20(fp)
1000f1d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000f1dc:	e0bff717 	ldw	r2,-36(fp)
}
1000f1e0:	e037883a 	mov	sp,fp
1000f1e4:	dfc00117 	ldw	ra,4(sp)
1000f1e8:	df000017 	ldw	fp,0(sp)
1000f1ec:	dec00204 	addi	sp,sp,8
1000f1f0:	f800283a 	ret

1000f1f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000f1f4:	defff804 	addi	sp,sp,-32
1000f1f8:	dfc00715 	stw	ra,28(sp)
1000f1fc:	df000615 	stw	fp,24(sp)
1000f200:	dc000515 	stw	r16,20(sp)
1000f204:	df000604 	addi	fp,sp,24
1000f208:	e13ffb15 	stw	r4,-20(fp)
1000f20c:	e17ffc15 	stw	r5,-16(fp)
1000f210:	e1bffd15 	stw	r6,-12(fp)
1000f214:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000f218:	e13ffc17 	ldw	r4,-16(fp)
1000f21c:	e17ffd17 	ldw	r5,-12(fp)
1000f220:	e1bffe17 	ldw	r6,-8(fp)
1000f224:	000f4900 	call	1000f490 <open>
1000f228:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000f22c:	e0bffa17 	ldw	r2,-24(fp)
1000f230:	10002216 	blt	r2,zero,1000f2bc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000f234:	04040074 	movhi	r16,4097
1000f238:	84024d04 	addi	r16,r16,2356
1000f23c:	e0bffa17 	ldw	r2,-24(fp)
1000f240:	1009883a 	mov	r4,r2
1000f244:	01400304 	movi	r5,12
1000f248:	000af1c0 	call	1000af1c <__mulsi3>
1000f24c:	8085883a 	add	r2,r16,r2
1000f250:	10c00017 	ldw	r3,0(r2)
1000f254:	e0bffb17 	ldw	r2,-20(fp)
1000f258:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000f25c:	04040074 	movhi	r16,4097
1000f260:	84024d04 	addi	r16,r16,2356
1000f264:	e0bffa17 	ldw	r2,-24(fp)
1000f268:	1009883a 	mov	r4,r2
1000f26c:	01400304 	movi	r5,12
1000f270:	000af1c0 	call	1000af1c <__mulsi3>
1000f274:	8085883a 	add	r2,r16,r2
1000f278:	10800104 	addi	r2,r2,4
1000f27c:	10c00017 	ldw	r3,0(r2)
1000f280:	e0bffb17 	ldw	r2,-20(fp)
1000f284:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000f288:	04040074 	movhi	r16,4097
1000f28c:	84024d04 	addi	r16,r16,2356
1000f290:	e0bffa17 	ldw	r2,-24(fp)
1000f294:	1009883a 	mov	r4,r2
1000f298:	01400304 	movi	r5,12
1000f29c:	000af1c0 	call	1000af1c <__mulsi3>
1000f2a0:	8085883a 	add	r2,r16,r2
1000f2a4:	10800204 	addi	r2,r2,8
1000f2a8:	10c00017 	ldw	r3,0(r2)
1000f2ac:	e0bffb17 	ldw	r2,-20(fp)
1000f2b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000f2b4:	e13ffa17 	ldw	r4,-24(fp)
1000f2b8:	000deac0 	call	1000deac <alt_release_fd>
  }
} 
1000f2bc:	e6ffff04 	addi	sp,fp,-4
1000f2c0:	dfc00217 	ldw	ra,8(sp)
1000f2c4:	df000117 	ldw	fp,4(sp)
1000f2c8:	dc000017 	ldw	r16,0(sp)
1000f2cc:	dec00304 	addi	sp,sp,12
1000f2d0:	f800283a 	ret

1000f2d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000f2d4:	defffb04 	addi	sp,sp,-20
1000f2d8:	dfc00415 	stw	ra,16(sp)
1000f2dc:	df000315 	stw	fp,12(sp)
1000f2e0:	df000304 	addi	fp,sp,12
1000f2e4:	e13ffd15 	stw	r4,-12(fp)
1000f2e8:	e17ffe15 	stw	r5,-8(fp)
1000f2ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000f2f0:	01040074 	movhi	r4,4097
1000f2f4:	21025004 	addi	r4,r4,2368
1000f2f8:	e17ffd17 	ldw	r5,-12(fp)
1000f2fc:	01800044 	movi	r6,1
1000f300:	01c07fc4 	movi	r7,511
1000f304:	000f1f40 	call	1000f1f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000f308:	01040074 	movhi	r4,4097
1000f30c:	21024d04 	addi	r4,r4,2356
1000f310:	e17ffe17 	ldw	r5,-8(fp)
1000f314:	000d883a 	mov	r6,zero
1000f318:	01c07fc4 	movi	r7,511
1000f31c:	000f1f40 	call	1000f1f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000f320:	01040074 	movhi	r4,4097
1000f324:	21025304 	addi	r4,r4,2380
1000f328:	e17fff17 	ldw	r5,-4(fp)
1000f32c:	01800044 	movi	r6,1
1000f330:	01c07fc4 	movi	r7,511
1000f334:	000f1f40 	call	1000f1f4 <alt_open_fd>
}  
1000f338:	e037883a 	mov	sp,fp
1000f33c:	dfc00117 	ldw	ra,4(sp)
1000f340:	df000017 	ldw	fp,0(sp)
1000f344:	dec00204 	addi	sp,sp,8
1000f348:	f800283a 	ret

1000f34c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f34c:	defffe04 	addi	sp,sp,-8
1000f350:	dfc00115 	stw	ra,4(sp)
1000f354:	df000015 	stw	fp,0(sp)
1000f358:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f35c:	00840074 	movhi	r2,4097
1000f360:	1086d204 	addi	r2,r2,6984
1000f364:	10800017 	ldw	r2,0(r2)
1000f368:	10000526 	beq	r2,zero,1000f380 <alt_get_errno+0x34>
1000f36c:	00840074 	movhi	r2,4097
1000f370:	1086d204 	addi	r2,r2,6984
1000f374:	10800017 	ldw	r2,0(r2)
1000f378:	103ee83a 	callr	r2
1000f37c:	00000206 	br	1000f388 <alt_get_errno+0x3c>
1000f380:	00840074 	movhi	r2,4097
1000f384:	108d9a04 	addi	r2,r2,13928
}
1000f388:	e037883a 	mov	sp,fp
1000f38c:	dfc00117 	ldw	ra,4(sp)
1000f390:	df000017 	ldw	fp,0(sp)
1000f394:	dec00204 	addi	sp,sp,8
1000f398:	f800283a 	ret

1000f39c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000f39c:	defffb04 	addi	sp,sp,-20
1000f3a0:	dfc00415 	stw	ra,16(sp)
1000f3a4:	df000315 	stw	fp,12(sp)
1000f3a8:	dc000215 	stw	r16,8(sp)
1000f3ac:	df000304 	addi	fp,sp,12
1000f3b0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000f3b4:	e0bffe17 	ldw	r2,-8(fp)
1000f3b8:	10800217 	ldw	r2,8(r2)
1000f3bc:	10d00034 	orhi	r3,r2,16384
1000f3c0:	e0bffe17 	ldw	r2,-8(fp)
1000f3c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f3c8:	e03ffd15 	stw	zero,-12(fp)
1000f3cc:	00002306 	br	1000f45c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f3d0:	04040074 	movhi	r16,4097
1000f3d4:	84024d04 	addi	r16,r16,2356
1000f3d8:	e0bffd17 	ldw	r2,-12(fp)
1000f3dc:	1009883a 	mov	r4,r2
1000f3e0:	01400304 	movi	r5,12
1000f3e4:	000af1c0 	call	1000af1c <__mulsi3>
1000f3e8:	8085883a 	add	r2,r16,r2
1000f3ec:	10c00017 	ldw	r3,0(r2)
1000f3f0:	e0bffe17 	ldw	r2,-8(fp)
1000f3f4:	10800017 	ldw	r2,0(r2)
1000f3f8:	1880151e 	bne	r3,r2,1000f450 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f3fc:	04040074 	movhi	r16,4097
1000f400:	84024d04 	addi	r16,r16,2356
1000f404:	e0bffd17 	ldw	r2,-12(fp)
1000f408:	1009883a 	mov	r4,r2
1000f40c:	01400304 	movi	r5,12
1000f410:	000af1c0 	call	1000af1c <__mulsi3>
1000f414:	8085883a 	add	r2,r16,r2
1000f418:	10800204 	addi	r2,r2,8
1000f41c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f420:	10000b0e 	bge	r2,zero,1000f450 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000f424:	e13ffd17 	ldw	r4,-12(fp)
1000f428:	01400304 	movi	r5,12
1000f42c:	000af1c0 	call	1000af1c <__mulsi3>
1000f430:	1007883a 	mov	r3,r2
1000f434:	00840074 	movhi	r2,4097
1000f438:	10824d04 	addi	r2,r2,2356
1000f43c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f440:	e0bffe17 	ldw	r2,-8(fp)
1000f444:	18800226 	beq	r3,r2,1000f450 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000f448:	00bffcc4 	movi	r2,-13
1000f44c:	00000a06 	br	1000f478 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f450:	e0bffd17 	ldw	r2,-12(fp)
1000f454:	10800044 	addi	r2,r2,1
1000f458:	e0bffd15 	stw	r2,-12(fp)
1000f45c:	00840074 	movhi	r2,4097
1000f460:	1086d104 	addi	r2,r2,6980
1000f464:	10800017 	ldw	r2,0(r2)
1000f468:	1007883a 	mov	r3,r2
1000f46c:	e0bffd17 	ldw	r2,-12(fp)
1000f470:	18bfd72e 	bgeu	r3,r2,1000f3d0 <__alt_data_end+0xf800f3d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000f474:	0005883a 	mov	r2,zero
}
1000f478:	e6ffff04 	addi	sp,fp,-4
1000f47c:	dfc00217 	ldw	ra,8(sp)
1000f480:	df000117 	ldw	fp,4(sp)
1000f484:	dc000017 	ldw	r16,0(sp)
1000f488:	dec00304 	addi	sp,sp,12
1000f48c:	f800283a 	ret

1000f490 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000f490:	defff604 	addi	sp,sp,-40
1000f494:	dfc00915 	stw	ra,36(sp)
1000f498:	df000815 	stw	fp,32(sp)
1000f49c:	df000804 	addi	fp,sp,32
1000f4a0:	e13ffd15 	stw	r4,-12(fp)
1000f4a4:	e17ffe15 	stw	r5,-8(fp)
1000f4a8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000f4ac:	00bfffc4 	movi	r2,-1
1000f4b0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000f4b4:	00bffb44 	movi	r2,-19
1000f4b8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000f4bc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000f4c0:	e13ffd17 	ldw	r4,-12(fp)
1000f4c4:	01440074 	movhi	r5,4097
1000f4c8:	2946cf04 	addi	r5,r5,6972
1000f4cc:	000d8140 	call	1000d814 <alt_find_dev>
1000f4d0:	e0bff815 	stw	r2,-32(fp)
1000f4d4:	e0bff817 	ldw	r2,-32(fp)
1000f4d8:	1000051e 	bne	r2,zero,1000f4f0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000f4dc:	e13ffd17 	ldw	r4,-12(fp)
1000f4e0:	000f7a80 	call	1000f7a8 <alt_find_file>
1000f4e4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000f4e8:	00800044 	movi	r2,1
1000f4ec:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000f4f0:	e0bff817 	ldw	r2,-32(fp)
1000f4f4:	10002b26 	beq	r2,zero,1000f5a4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000f4f8:	e13ff817 	ldw	r4,-32(fp)
1000f4fc:	000f8bc0 	call	1000f8bc <alt_get_fd>
1000f500:	e0bff915 	stw	r2,-28(fp)
1000f504:	e0bff917 	ldw	r2,-28(fp)
1000f508:	1000030e 	bge	r2,zero,1000f518 <open+0x88>
    {
      status = index;
1000f50c:	e0bff917 	ldw	r2,-28(fp)
1000f510:	e0bffa15 	stw	r2,-24(fp)
1000f514:	00002506 	br	1000f5ac <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000f518:	e13ff917 	ldw	r4,-28(fp)
1000f51c:	01400304 	movi	r5,12
1000f520:	000af1c0 	call	1000af1c <__mulsi3>
1000f524:	1007883a 	mov	r3,r2
1000f528:	00840074 	movhi	r2,4097
1000f52c:	10824d04 	addi	r2,r2,2356
1000f530:	1885883a 	add	r2,r3,r2
1000f534:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000f538:	e0fffe17 	ldw	r3,-8(fp)
1000f53c:	00900034 	movhi	r2,16384
1000f540:	10bfffc4 	addi	r2,r2,-1
1000f544:	1886703a 	and	r3,r3,r2
1000f548:	e0bffc17 	ldw	r2,-16(fp)
1000f54c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000f550:	e0bffb17 	ldw	r2,-20(fp)
1000f554:	1000051e 	bne	r2,zero,1000f56c <open+0xdc>
1000f558:	e13ffc17 	ldw	r4,-16(fp)
1000f55c:	000f39c0 	call	1000f39c <alt_file_locked>
1000f560:	e0bffa15 	stw	r2,-24(fp)
1000f564:	e0bffa17 	ldw	r2,-24(fp)
1000f568:	10001016 	blt	r2,zero,1000f5ac <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000f56c:	e0bff817 	ldw	r2,-32(fp)
1000f570:	10800317 	ldw	r2,12(r2)
1000f574:	10000826 	beq	r2,zero,1000f598 <open+0x108>
1000f578:	e0bff817 	ldw	r2,-32(fp)
1000f57c:	10800317 	ldw	r2,12(r2)
1000f580:	e13ffc17 	ldw	r4,-16(fp)
1000f584:	e17ffd17 	ldw	r5,-12(fp)
1000f588:	e1bffe17 	ldw	r6,-8(fp)
1000f58c:	e1ffff17 	ldw	r7,-4(fp)
1000f590:	103ee83a 	callr	r2
1000f594:	00000106 	br	1000f59c <open+0x10c>
1000f598:	0005883a 	mov	r2,zero
1000f59c:	e0bffa15 	stw	r2,-24(fp)
1000f5a0:	00000206 	br	1000f5ac <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000f5a4:	00bffb44 	movi	r2,-19
1000f5a8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000f5ac:	e0bffa17 	ldw	r2,-24(fp)
1000f5b0:	1000080e 	bge	r2,zero,1000f5d4 <open+0x144>
  {
    alt_release_fd (index);  
1000f5b4:	e13ff917 	ldw	r4,-28(fp)
1000f5b8:	000deac0 	call	1000deac <alt_release_fd>
    ALT_ERRNO = -status;
1000f5bc:	000f34c0 	call	1000f34c <alt_get_errno>
1000f5c0:	e0fffa17 	ldw	r3,-24(fp)
1000f5c4:	00c7c83a 	sub	r3,zero,r3
1000f5c8:	10c00015 	stw	r3,0(r2)
    return -1;
1000f5cc:	00bfffc4 	movi	r2,-1
1000f5d0:	00000106 	br	1000f5d8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1000f5d4:	e0bff917 	ldw	r2,-28(fp)
}
1000f5d8:	e037883a 	mov	sp,fp
1000f5dc:	dfc00117 	ldw	ra,4(sp)
1000f5e0:	df000017 	ldw	fp,0(sp)
1000f5e4:	dec00204 	addi	sp,sp,8
1000f5e8:	f800283a 	ret

1000f5ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000f5ec:	defffa04 	addi	sp,sp,-24
1000f5f0:	df000515 	stw	fp,20(sp)
1000f5f4:	df000504 	addi	fp,sp,20
1000f5f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f5fc:	0005303a 	rdctl	r2,status
1000f600:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f604:	e0fffc17 	ldw	r3,-16(fp)
1000f608:	00bfff84 	movi	r2,-2
1000f60c:	1884703a 	and	r2,r3,r2
1000f610:	1001703a 	wrctl	status,r2
  
  return context;
1000f614:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000f618:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000f61c:	e0bfff17 	ldw	r2,-4(fp)
1000f620:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000f624:	e0bffd17 	ldw	r2,-12(fp)
1000f628:	10800017 	ldw	r2,0(r2)
1000f62c:	e0fffd17 	ldw	r3,-12(fp)
1000f630:	18c00117 	ldw	r3,4(r3)
1000f634:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000f638:	e0bffd17 	ldw	r2,-12(fp)
1000f63c:	10800117 	ldw	r2,4(r2)
1000f640:	e0fffd17 	ldw	r3,-12(fp)
1000f644:	18c00017 	ldw	r3,0(r3)
1000f648:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000f64c:	e0bffd17 	ldw	r2,-12(fp)
1000f650:	e0fffd17 	ldw	r3,-12(fp)
1000f654:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000f658:	e0bffd17 	ldw	r2,-12(fp)
1000f65c:	e0fffd17 	ldw	r3,-12(fp)
1000f660:	10c00015 	stw	r3,0(r2)
1000f664:	e0bffb17 	ldw	r2,-20(fp)
1000f668:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f66c:	e0bffe17 	ldw	r2,-8(fp)
1000f670:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000f674:	e037883a 	mov	sp,fp
1000f678:	df000017 	ldw	fp,0(sp)
1000f67c:	dec00104 	addi	sp,sp,4
1000f680:	f800283a 	ret

1000f684 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000f684:	defffb04 	addi	sp,sp,-20
1000f688:	dfc00415 	stw	ra,16(sp)
1000f68c:	df000315 	stw	fp,12(sp)
1000f690:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000f694:	d0a01017 	ldw	r2,-32704(gp)
1000f698:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000f69c:	d0a6db17 	ldw	r2,-25748(gp)
1000f6a0:	10800044 	addi	r2,r2,1
1000f6a4:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f6a8:	00002e06 	br	1000f764 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000f6ac:	e0bffd17 	ldw	r2,-12(fp)
1000f6b0:	10800017 	ldw	r2,0(r2)
1000f6b4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000f6b8:	e0bffd17 	ldw	r2,-12(fp)
1000f6bc:	10800403 	ldbu	r2,16(r2)
1000f6c0:	10803fcc 	andi	r2,r2,255
1000f6c4:	10000426 	beq	r2,zero,1000f6d8 <alt_tick+0x54>
1000f6c8:	d0a6db17 	ldw	r2,-25748(gp)
1000f6cc:	1000021e 	bne	r2,zero,1000f6d8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000f6d0:	e0bffd17 	ldw	r2,-12(fp)
1000f6d4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000f6d8:	e0bffd17 	ldw	r2,-12(fp)
1000f6dc:	10800217 	ldw	r2,8(r2)
1000f6e0:	d0e6db17 	ldw	r3,-25748(gp)
1000f6e4:	18801d36 	bltu	r3,r2,1000f75c <alt_tick+0xd8>
1000f6e8:	e0bffd17 	ldw	r2,-12(fp)
1000f6ec:	10800403 	ldbu	r2,16(r2)
1000f6f0:	10803fcc 	andi	r2,r2,255
1000f6f4:	1000191e 	bne	r2,zero,1000f75c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000f6f8:	e0bffd17 	ldw	r2,-12(fp)
1000f6fc:	10800317 	ldw	r2,12(r2)
1000f700:	e0fffd17 	ldw	r3,-12(fp)
1000f704:	18c00517 	ldw	r3,20(r3)
1000f708:	1809883a 	mov	r4,r3
1000f70c:	103ee83a 	callr	r2
1000f710:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000f714:	e0bfff17 	ldw	r2,-4(fp)
1000f718:	1000031e 	bne	r2,zero,1000f728 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000f71c:	e13ffd17 	ldw	r4,-12(fp)
1000f720:	000f5ec0 	call	1000f5ec <alt_alarm_stop>
1000f724:	00000d06 	br	1000f75c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000f728:	e0bffd17 	ldw	r2,-12(fp)
1000f72c:	10c00217 	ldw	r3,8(r2)
1000f730:	e0bfff17 	ldw	r2,-4(fp)
1000f734:	1887883a 	add	r3,r3,r2
1000f738:	e0bffd17 	ldw	r2,-12(fp)
1000f73c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000f740:	e0bffd17 	ldw	r2,-12(fp)
1000f744:	10c00217 	ldw	r3,8(r2)
1000f748:	d0a6db17 	ldw	r2,-25748(gp)
1000f74c:	1880032e 	bgeu	r3,r2,1000f75c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000f750:	e0bffd17 	ldw	r2,-12(fp)
1000f754:	00c00044 	movi	r3,1
1000f758:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000f75c:	e0bffe17 	ldw	r2,-8(fp)
1000f760:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f764:	e0fffd17 	ldw	r3,-12(fp)
1000f768:	d0a01004 	addi	r2,gp,-32704
1000f76c:	18bfcf1e 	bne	r3,r2,1000f6ac <__alt_data_end+0xf800f6ac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000f770:	0001883a 	nop
}
1000f774:	e037883a 	mov	sp,fp
1000f778:	dfc00117 	ldw	ra,4(sp)
1000f77c:	df000017 	ldw	fp,0(sp)
1000f780:	dec00204 	addi	sp,sp,8
1000f784:	f800283a 	ret

1000f788 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000f788:	deffff04 	addi	sp,sp,-4
1000f78c:	df000015 	stw	fp,0(sp)
1000f790:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000f794:	000170fa 	wrctl	ienable,zero
}
1000f798:	e037883a 	mov	sp,fp
1000f79c:	df000017 	ldw	fp,0(sp)
1000f7a0:	dec00104 	addi	sp,sp,4
1000f7a4:	f800283a 	ret

1000f7a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000f7a8:	defffb04 	addi	sp,sp,-20
1000f7ac:	dfc00415 	stw	ra,16(sp)
1000f7b0:	df000315 	stw	fp,12(sp)
1000f7b4:	df000304 	addi	fp,sp,12
1000f7b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000f7bc:	00840074 	movhi	r2,4097
1000f7c0:	1086cd04 	addi	r2,r2,6964
1000f7c4:	10800017 	ldw	r2,0(r2)
1000f7c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f7cc:	00003106 	br	1000f894 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000f7d0:	e0bffd17 	ldw	r2,-12(fp)
1000f7d4:	10800217 	ldw	r2,8(r2)
1000f7d8:	1009883a 	mov	r4,r2
1000f7dc:	0000f480 	call	10000f48 <strlen>
1000f7e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000f7e4:	e0bffd17 	ldw	r2,-12(fp)
1000f7e8:	10c00217 	ldw	r3,8(r2)
1000f7ec:	e0bffe17 	ldw	r2,-8(fp)
1000f7f0:	10bfffc4 	addi	r2,r2,-1
1000f7f4:	1885883a 	add	r2,r3,r2
1000f7f8:	10800003 	ldbu	r2,0(r2)
1000f7fc:	10803fcc 	andi	r2,r2,255
1000f800:	1080201c 	xori	r2,r2,128
1000f804:	10bfe004 	addi	r2,r2,-128
1000f808:	10800bd8 	cmpnei	r2,r2,47
1000f80c:	1000031e 	bne	r2,zero,1000f81c <alt_find_file+0x74>
    {
      len -= 1;
1000f810:	e0bffe17 	ldw	r2,-8(fp)
1000f814:	10bfffc4 	addi	r2,r2,-1
1000f818:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f81c:	e0bffe17 	ldw	r2,-8(fp)
1000f820:	e0ffff17 	ldw	r3,-4(fp)
1000f824:	1885883a 	add	r2,r3,r2
1000f828:	10800003 	ldbu	r2,0(r2)
1000f82c:	10803fcc 	andi	r2,r2,255
1000f830:	1080201c 	xori	r2,r2,128
1000f834:	10bfe004 	addi	r2,r2,-128
1000f838:	10800be0 	cmpeqi	r2,r2,47
1000f83c:	1000081e 	bne	r2,zero,1000f860 <alt_find_file+0xb8>
1000f840:	e0bffe17 	ldw	r2,-8(fp)
1000f844:	e0ffff17 	ldw	r3,-4(fp)
1000f848:	1885883a 	add	r2,r3,r2
1000f84c:	10800003 	ldbu	r2,0(r2)
1000f850:	10803fcc 	andi	r2,r2,255
1000f854:	1080201c 	xori	r2,r2,128
1000f858:	10bfe004 	addi	r2,r2,-128
1000f85c:	10000a1e 	bne	r2,zero,1000f888 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000f860:	e0bffd17 	ldw	r2,-12(fp)
1000f864:	10c00217 	ldw	r3,8(r2)
1000f868:	e0bffe17 	ldw	r2,-8(fp)
1000f86c:	1809883a 	mov	r4,r3
1000f870:	e17fff17 	ldw	r5,-4(fp)
1000f874:	100d883a 	mov	r6,r2
1000f878:	000f9dc0 	call	1000f9dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f87c:	1000021e 	bne	r2,zero,1000f888 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000f880:	e0bffd17 	ldw	r2,-12(fp)
1000f884:	00000806 	br	1000f8a8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000f888:	e0bffd17 	ldw	r2,-12(fp)
1000f88c:	10800017 	ldw	r2,0(r2)
1000f890:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f894:	e0fffd17 	ldw	r3,-12(fp)
1000f898:	00840074 	movhi	r2,4097
1000f89c:	1086cd04 	addi	r2,r2,6964
1000f8a0:	18bfcb1e 	bne	r3,r2,1000f7d0 <__alt_data_end+0xf800f7d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000f8a4:	0005883a 	mov	r2,zero
}
1000f8a8:	e037883a 	mov	sp,fp
1000f8ac:	dfc00117 	ldw	ra,4(sp)
1000f8b0:	df000017 	ldw	fp,0(sp)
1000f8b4:	dec00204 	addi	sp,sp,8
1000f8b8:	f800283a 	ret

1000f8bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000f8bc:	defffa04 	addi	sp,sp,-24
1000f8c0:	dfc00515 	stw	ra,20(sp)
1000f8c4:	df000415 	stw	fp,16(sp)
1000f8c8:	dc000315 	stw	r16,12(sp)
1000f8cc:	df000404 	addi	fp,sp,16
1000f8d0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000f8d4:	00bffa04 	movi	r2,-24
1000f8d8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f8dc:	e03ffc15 	stw	zero,-16(fp)
1000f8e0:	00002106 	br	1000f968 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000f8e4:	04040074 	movhi	r16,4097
1000f8e8:	84024d04 	addi	r16,r16,2356
1000f8ec:	e0bffc17 	ldw	r2,-16(fp)
1000f8f0:	1009883a 	mov	r4,r2
1000f8f4:	01400304 	movi	r5,12
1000f8f8:	000af1c0 	call	1000af1c <__mulsi3>
1000f8fc:	8085883a 	add	r2,r16,r2
1000f900:	10800017 	ldw	r2,0(r2)
1000f904:	1000151e 	bne	r2,zero,1000f95c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000f908:	04040074 	movhi	r16,4097
1000f90c:	84024d04 	addi	r16,r16,2356
1000f910:	e0bffc17 	ldw	r2,-16(fp)
1000f914:	1009883a 	mov	r4,r2
1000f918:	01400304 	movi	r5,12
1000f91c:	000af1c0 	call	1000af1c <__mulsi3>
1000f920:	8085883a 	add	r2,r16,r2
1000f924:	e0fffe17 	ldw	r3,-8(fp)
1000f928:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000f92c:	00840074 	movhi	r2,4097
1000f930:	1086d104 	addi	r2,r2,6980
1000f934:	10c00017 	ldw	r3,0(r2)
1000f938:	e0bffc17 	ldw	r2,-16(fp)
1000f93c:	1880040e 	bge	r3,r2,1000f950 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000f940:	00840074 	movhi	r2,4097
1000f944:	1086d104 	addi	r2,r2,6980
1000f948:	e0fffc17 	ldw	r3,-16(fp)
1000f94c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000f950:	e0bffc17 	ldw	r2,-16(fp)
1000f954:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000f958:	00000606 	br	1000f974 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f95c:	e0bffc17 	ldw	r2,-16(fp)
1000f960:	10800044 	addi	r2,r2,1
1000f964:	e0bffc15 	stw	r2,-16(fp)
1000f968:	e0bffc17 	ldw	r2,-16(fp)
1000f96c:	10800810 	cmplti	r2,r2,32
1000f970:	103fdc1e 	bne	r2,zero,1000f8e4 <__alt_data_end+0xf800f8e4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000f974:	e0bffd17 	ldw	r2,-12(fp)
}
1000f978:	e6ffff04 	addi	sp,fp,-4
1000f97c:	dfc00217 	ldw	ra,8(sp)
1000f980:	df000117 	ldw	fp,4(sp)
1000f984:	dc000017 	ldw	r16,0(sp)
1000f988:	dec00304 	addi	sp,sp,12
1000f98c:	f800283a 	ret

1000f990 <atexit>:
1000f990:	200b883a 	mov	r5,r4
1000f994:	000d883a 	mov	r6,zero
1000f998:	0009883a 	mov	r4,zero
1000f99c:	000f883a 	mov	r7,zero
1000f9a0:	000fa581 	jmpi	1000fa58 <__register_exitproc>

1000f9a4 <exit>:
1000f9a4:	defffe04 	addi	sp,sp,-8
1000f9a8:	000b883a 	mov	r5,zero
1000f9ac:	dc000015 	stw	r16,0(sp)
1000f9b0:	dfc00115 	stw	ra,4(sp)
1000f9b4:	2021883a 	mov	r16,r4
1000f9b8:	000fb740 	call	1000fb74 <__call_exitprocs>
1000f9bc:	00840074 	movhi	r2,4097
1000f9c0:	1086c704 	addi	r2,r2,6940
1000f9c4:	11000017 	ldw	r4,0(r2)
1000f9c8:	20800f17 	ldw	r2,60(r4)
1000f9cc:	10000126 	beq	r2,zero,1000f9d4 <exit+0x30>
1000f9d0:	103ee83a 	callr	r2
1000f9d4:	8009883a 	mov	r4,r16
1000f9d8:	000fd180 	call	1000fd18 <_exit>

1000f9dc <memcmp>:
1000f9dc:	01c000c4 	movi	r7,3
1000f9e0:	3980192e 	bgeu	r7,r6,1000fa48 <memcmp+0x6c>
1000f9e4:	2144b03a 	or	r2,r4,r5
1000f9e8:	11c4703a 	and	r2,r2,r7
1000f9ec:	10000f26 	beq	r2,zero,1000fa2c <memcmp+0x50>
1000f9f0:	21c00003 	ldbu	r7,0(r4)
1000f9f4:	28800003 	ldbu	r2,0(r5)
1000f9f8:	3880151e 	bne	r7,r2,1000fa50 <memcmp+0x74>
1000f9fc:	30ffff84 	addi	r3,r6,-2
1000fa00:	01bfffc4 	movi	r6,-1
1000fa04:	00000406 	br	1000fa18 <memcmp+0x3c>
1000fa08:	21c00003 	ldbu	r7,0(r4)
1000fa0c:	28800003 	ldbu	r2,0(r5)
1000fa10:	18ffffc4 	addi	r3,r3,-1
1000fa14:	38800e1e 	bne	r7,r2,1000fa50 <memcmp+0x74>
1000fa18:	21000044 	addi	r4,r4,1
1000fa1c:	29400044 	addi	r5,r5,1
1000fa20:	19bff91e 	bne	r3,r6,1000fa08 <__alt_data_end+0xf800fa08>
1000fa24:	0005883a 	mov	r2,zero
1000fa28:	f800283a 	ret
1000fa2c:	20c00017 	ldw	r3,0(r4)
1000fa30:	28800017 	ldw	r2,0(r5)
1000fa34:	1880041e 	bne	r3,r2,1000fa48 <memcmp+0x6c>
1000fa38:	31bfff04 	addi	r6,r6,-4
1000fa3c:	21000104 	addi	r4,r4,4
1000fa40:	29400104 	addi	r5,r5,4
1000fa44:	39bff936 	bltu	r7,r6,1000fa2c <__alt_data_end+0xf800fa2c>
1000fa48:	303fe91e 	bne	r6,zero,1000f9f0 <__alt_data_end+0xf800f9f0>
1000fa4c:	003ff506 	br	1000fa24 <__alt_data_end+0xf800fa24>
1000fa50:	3885c83a 	sub	r2,r7,r2
1000fa54:	f800283a 	ret

1000fa58 <__register_exitproc>:
1000fa58:	defffa04 	addi	sp,sp,-24
1000fa5c:	00840074 	movhi	r2,4097
1000fa60:	1086c704 	addi	r2,r2,6940
1000fa64:	dc000315 	stw	r16,12(sp)
1000fa68:	14000017 	ldw	r16,0(r2)
1000fa6c:	dc400415 	stw	r17,16(sp)
1000fa70:	dfc00515 	stw	ra,20(sp)
1000fa74:	80805217 	ldw	r2,328(r16)
1000fa78:	2023883a 	mov	r17,r4
1000fa7c:	10003a26 	beq	r2,zero,1000fb68 <__register_exitproc+0x110>
1000fa80:	10c00117 	ldw	r3,4(r2)
1000fa84:	020007c4 	movi	r8,31
1000fa88:	40c0190e 	bge	r8,r3,1000faf0 <__register_exitproc+0x98>
1000fa8c:	00800034 	movhi	r2,0
1000fa90:	10800004 	addi	r2,r2,0
1000fa94:	1000061e 	bne	r2,zero,1000fab0 <__register_exitproc+0x58>
1000fa98:	00bfffc4 	movi	r2,-1
1000fa9c:	dfc00517 	ldw	ra,20(sp)
1000faa0:	dc400417 	ldw	r17,16(sp)
1000faa4:	dc000317 	ldw	r16,12(sp)
1000faa8:	dec00604 	addi	sp,sp,24
1000faac:	f800283a 	ret
1000fab0:	01006404 	movi	r4,400
1000fab4:	d9400015 	stw	r5,0(sp)
1000fab8:	d9800115 	stw	r6,4(sp)
1000fabc:	d9c00215 	stw	r7,8(sp)
1000fac0:	00000000 	call	10000000 <__alt_mem_sdram>
1000fac4:	d9400017 	ldw	r5,0(sp)
1000fac8:	d9800117 	ldw	r6,4(sp)
1000facc:	d9c00217 	ldw	r7,8(sp)
1000fad0:	103ff126 	beq	r2,zero,1000fa98 <__alt_data_end+0xf800fa98>
1000fad4:	81005217 	ldw	r4,328(r16)
1000fad8:	10000115 	stw	zero,4(r2)
1000fadc:	0007883a 	mov	r3,zero
1000fae0:	11000015 	stw	r4,0(r2)
1000fae4:	80805215 	stw	r2,328(r16)
1000fae8:	10006215 	stw	zero,392(r2)
1000faec:	10006315 	stw	zero,396(r2)
1000faf0:	88000d1e 	bne	r17,zero,1000fb28 <__register_exitproc+0xd0>
1000faf4:	19000084 	addi	r4,r3,2
1000faf8:	2109883a 	add	r4,r4,r4
1000fafc:	18c00044 	addi	r3,r3,1
1000fb00:	2109883a 	add	r4,r4,r4
1000fb04:	10c00115 	stw	r3,4(r2)
1000fb08:	1105883a 	add	r2,r2,r4
1000fb0c:	11400015 	stw	r5,0(r2)
1000fb10:	0005883a 	mov	r2,zero
1000fb14:	dfc00517 	ldw	ra,20(sp)
1000fb18:	dc400417 	ldw	r17,16(sp)
1000fb1c:	dc000317 	ldw	r16,12(sp)
1000fb20:	dec00604 	addi	sp,sp,24
1000fb24:	f800283a 	ret
1000fb28:	18c9883a 	add	r4,r3,r3
1000fb2c:	2109883a 	add	r4,r4,r4
1000fb30:	1109883a 	add	r4,r2,r4
1000fb34:	21802215 	stw	r6,136(r4)
1000fb38:	01800044 	movi	r6,1
1000fb3c:	12006217 	ldw	r8,392(r2)
1000fb40:	30cc983a 	sll	r6,r6,r3
1000fb44:	4190b03a 	or	r8,r8,r6
1000fb48:	12006215 	stw	r8,392(r2)
1000fb4c:	21c04215 	stw	r7,264(r4)
1000fb50:	01000084 	movi	r4,2
1000fb54:	893fe71e 	bne	r17,r4,1000faf4 <__alt_data_end+0xf800faf4>
1000fb58:	11006317 	ldw	r4,396(r2)
1000fb5c:	218cb03a 	or	r6,r4,r6
1000fb60:	11806315 	stw	r6,396(r2)
1000fb64:	003fe306 	br	1000faf4 <__alt_data_end+0xf800faf4>
1000fb68:	80805304 	addi	r2,r16,332
1000fb6c:	80805215 	stw	r2,328(r16)
1000fb70:	003fc306 	br	1000fa80 <__alt_data_end+0xf800fa80>

1000fb74 <__call_exitprocs>:
1000fb74:	00840074 	movhi	r2,4097
1000fb78:	1086c704 	addi	r2,r2,6940
1000fb7c:	10800017 	ldw	r2,0(r2)
1000fb80:	defff304 	addi	sp,sp,-52
1000fb84:	df000b15 	stw	fp,44(sp)
1000fb88:	d8800015 	stw	r2,0(sp)
1000fb8c:	10805204 	addi	r2,r2,328
1000fb90:	dd400815 	stw	r21,32(sp)
1000fb94:	dfc00c15 	stw	ra,48(sp)
1000fb98:	ddc00a15 	stw	r23,40(sp)
1000fb9c:	dd800915 	stw	r22,36(sp)
1000fba0:	dd000715 	stw	r20,28(sp)
1000fba4:	dcc00615 	stw	r19,24(sp)
1000fba8:	dc800515 	stw	r18,20(sp)
1000fbac:	dc400415 	stw	r17,16(sp)
1000fbb0:	dc000315 	stw	r16,12(sp)
1000fbb4:	d9000115 	stw	r4,4(sp)
1000fbb8:	2839883a 	mov	fp,r5
1000fbbc:	d8800215 	stw	r2,8(sp)
1000fbc0:	057fffc4 	movi	r21,-1
1000fbc4:	d8800017 	ldw	r2,0(sp)
1000fbc8:	14805217 	ldw	r18,328(r2)
1000fbcc:	90001826 	beq	r18,zero,1000fc30 <__call_exitprocs+0xbc>
1000fbd0:	ddc00217 	ldw	r23,8(sp)
1000fbd4:	90c00117 	ldw	r3,4(r18)
1000fbd8:	1c3fffc4 	addi	r16,r3,-1
1000fbdc:	80001116 	blt	r16,zero,1000fc24 <__call_exitprocs+0xb0>
1000fbe0:	18c00044 	addi	r3,r3,1
1000fbe4:	8427883a 	add	r19,r16,r16
1000fbe8:	18c7883a 	add	r3,r3,r3
1000fbec:	95802204 	addi	r22,r18,136
1000fbf0:	9ce7883a 	add	r19,r19,r19
1000fbf4:	18c7883a 	add	r3,r3,r3
1000fbf8:	b4e7883a 	add	r19,r22,r19
1000fbfc:	90e3883a 	add	r17,r18,r3
1000fc00:	e0001726 	beq	fp,zero,1000fc60 <__call_exitprocs+0xec>
1000fc04:	8c87c83a 	sub	r3,r17,r18
1000fc08:	b0c7883a 	add	r3,r22,r3
1000fc0c:	18c01e17 	ldw	r3,120(r3)
1000fc10:	1f001326 	beq	r3,fp,1000fc60 <__call_exitprocs+0xec>
1000fc14:	843fffc4 	addi	r16,r16,-1
1000fc18:	9cffff04 	addi	r19,r19,-4
1000fc1c:	8c7fff04 	addi	r17,r17,-4
1000fc20:	857ff71e 	bne	r16,r21,1000fc00 <__alt_data_end+0xf800fc00>
1000fc24:	00800034 	movhi	r2,0
1000fc28:	10800004 	addi	r2,r2,0
1000fc2c:	10002a1e 	bne	r2,zero,1000fcd8 <__call_exitprocs+0x164>
1000fc30:	dfc00c17 	ldw	ra,48(sp)
1000fc34:	df000b17 	ldw	fp,44(sp)
1000fc38:	ddc00a17 	ldw	r23,40(sp)
1000fc3c:	dd800917 	ldw	r22,36(sp)
1000fc40:	dd400817 	ldw	r21,32(sp)
1000fc44:	dd000717 	ldw	r20,28(sp)
1000fc48:	dcc00617 	ldw	r19,24(sp)
1000fc4c:	dc800517 	ldw	r18,20(sp)
1000fc50:	dc400417 	ldw	r17,16(sp)
1000fc54:	dc000317 	ldw	r16,12(sp)
1000fc58:	dec00d04 	addi	sp,sp,52
1000fc5c:	f800283a 	ret
1000fc60:	91000117 	ldw	r4,4(r18)
1000fc64:	88c00017 	ldw	r3,0(r17)
1000fc68:	213fffc4 	addi	r4,r4,-1
1000fc6c:	24001526 	beq	r4,r16,1000fcc4 <__call_exitprocs+0x150>
1000fc70:	88000015 	stw	zero,0(r17)
1000fc74:	183fe726 	beq	r3,zero,1000fc14 <__alt_data_end+0xf800fc14>
1000fc78:	00800044 	movi	r2,1
1000fc7c:	1408983a 	sll	r4,r2,r16
1000fc80:	91406217 	ldw	r5,392(r18)
1000fc84:	95000117 	ldw	r20,4(r18)
1000fc88:	214a703a 	and	r5,r4,r5
1000fc8c:	28000b26 	beq	r5,zero,1000fcbc <__call_exitprocs+0x148>
1000fc90:	91406317 	ldw	r5,396(r18)
1000fc94:	2148703a 	and	r4,r4,r5
1000fc98:	20000c1e 	bne	r4,zero,1000fccc <__call_exitprocs+0x158>
1000fc9c:	99400017 	ldw	r5,0(r19)
1000fca0:	d9000117 	ldw	r4,4(sp)
1000fca4:	183ee83a 	callr	r3
1000fca8:	90c00117 	ldw	r3,4(r18)
1000fcac:	1d3fc51e 	bne	r3,r20,1000fbc4 <__alt_data_end+0xf800fbc4>
1000fcb0:	b8c00017 	ldw	r3,0(r23)
1000fcb4:	1cbfd726 	beq	r3,r18,1000fc14 <__alt_data_end+0xf800fc14>
1000fcb8:	003fc206 	br	1000fbc4 <__alt_data_end+0xf800fbc4>
1000fcbc:	183ee83a 	callr	r3
1000fcc0:	003ff906 	br	1000fca8 <__alt_data_end+0xf800fca8>
1000fcc4:	94000115 	stw	r16,4(r18)
1000fcc8:	003fea06 	br	1000fc74 <__alt_data_end+0xf800fc74>
1000fccc:	99000017 	ldw	r4,0(r19)
1000fcd0:	183ee83a 	callr	r3
1000fcd4:	003ff406 	br	1000fca8 <__alt_data_end+0xf800fca8>
1000fcd8:	90c00117 	ldw	r3,4(r18)
1000fcdc:	1800081e 	bne	r3,zero,1000fd00 <__call_exitprocs+0x18c>
1000fce0:	90c00017 	ldw	r3,0(r18)
1000fce4:	18000a26 	beq	r3,zero,1000fd10 <__call_exitprocs+0x19c>
1000fce8:	9009883a 	mov	r4,r18
1000fcec:	b8c00015 	stw	r3,0(r23)
1000fcf0:	00000000 	call	10000000 <__alt_mem_sdram>
1000fcf4:	bc800017 	ldw	r18,0(r23)
1000fcf8:	903fb61e 	bne	r18,zero,1000fbd4 <__alt_data_end+0xf800fbd4>
1000fcfc:	003fcc06 	br	1000fc30 <__alt_data_end+0xf800fc30>
1000fd00:	90c00017 	ldw	r3,0(r18)
1000fd04:	902f883a 	mov	r23,r18
1000fd08:	1825883a 	mov	r18,r3
1000fd0c:	003ffa06 	br	1000fcf8 <__alt_data_end+0xf800fcf8>
1000fd10:	0007883a 	mov	r3,zero
1000fd14:	003ffb06 	br	1000fd04 <__alt_data_end+0xf800fd04>

1000fd18 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000fd18:	defffd04 	addi	sp,sp,-12
1000fd1c:	df000215 	stw	fp,8(sp)
1000fd20:	df000204 	addi	fp,sp,8
1000fd24:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000fd28:	0001883a 	nop
1000fd2c:	e0bfff17 	ldw	r2,-4(fp)
1000fd30:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000fd34:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000fd38:	10000226 	beq	r2,zero,1000fd44 <_exit+0x2c>
    ALT_SIM_FAIL();
1000fd3c:	002af070 	cmpltui	zero,zero,43969
1000fd40:	00000106 	br	1000fd48 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000fd44:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000fd48:	003fff06 	br	1000fd48 <__alt_data_end+0xf800fd48>
