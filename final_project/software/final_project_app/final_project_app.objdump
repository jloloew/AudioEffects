
final_project_app.elf:     file format elf32-littlenios2
final_project_app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000101b0 memsz 0x000101b0 flags r-x
    LOAD off    0x000111d0 vaddr 0x100101d0 paddr 0x10011cc4 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x000137b8 vaddr 0x100137b8 paddr 0x100137b8 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fcec  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000328  1000fea8  1000fea8  00010ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  100101d0  10011cc4  000111d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  100137b8  100137b8  000137b8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00012cc4  2**0
                  CONTENTS
  7 .sdram        00000000  10013914  10013914  00012cc4  2**0
                  CONTENTS
  8 .comment      00000039  00000000  00000000  00012cc4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cc8  00000000  00000000  00012d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000232e4  00000000  00000000  000139c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008cc7  00000000  00000000  00036cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ad4e  00000000  00000000  0003f973  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002478  00000000  00000000  0004a6c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003414  00000000  00000000  0004cb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016f95  00000000  00000000  0004ff50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00066ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001338  00000000  00000000  00066ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006b89b  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006b89e  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006b8aa  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006b8ab  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006b8ac  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006b8b0  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006b8b4  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006b8b8  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006b8c3  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006b8ce  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0006b8d9  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003c  00000000  00000000  0006b8ea  2**0
                  CONTENTS, READONLY
 30 .jdi          000047d7  00000000  00000000  0006b926  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00062652  00000000  00000000  000700fd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
1000fea8 l    d  .rodata	00000000 .rodata
100101d0 l    d  .rwdata	00000000 .rwdata
100137b8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10013914 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_app_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 audIO.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000ff16 l     O .rodata	00000010 zeroes.4155
1000ff26 l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10003354 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10004e2c l     F .text	00000008 __fp_lock
10004e34 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
100101d0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10010614 l     O .rwdata	00000020 lc_ctype_charset
100105f4 l     O .rwdata	00000020 lc_message_charset
10010634 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1000ff58 l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100077f0 l     F .text	000000fc __sprint_r.part.0
1001008c l     O .rodata	00000010 blanks.4099
1001007c l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000af64 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000d824 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000d944 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000da00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000db04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000dbfc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000dce0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000dec0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10011cb4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000e138 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000e27c l     F .text	00000038 alt_dev_reg
10010c1c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000e554 l     F .text	000001fc altera_avalon_jtag_uart_irq
1000e750 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000eec4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000f350 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000f4a8 l     F .text	00000050 alt_get_errno
1000f4f8 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10007344 g     F .text	00000074 _mprec_log10
10007430 g     F .text	00000088 __any_on
10009764 g     F .text	00000064 _isatty_r
1000ff64 g     O .rodata	00000028 __mprec_tinytens
1000de08 g     F .text	00000078 alt_main
10013814 g     O .bss	00000100 alt_irq
100097c8 g     F .text	0000006c _lseek_r
10011cc4 g       *ABS*	00000000 __flash_rwdata_start
1000c2b8 g     F .text	00000084 .hidden __eqdf2
10000478 g     F .text	00000060 alt_up_audio_read_fifo_avail
10013914 g       *ABS*	00000000 __alt_heap_start
10001068 g     F .text	0000003c printf
100004d8 g     F .text	00000068 alt_up_audio_record_r
1000a0dc g     F .text	0000009c _wcrtomb_r
1000765c g     F .text	0000005c __sseek
10004ed8 g     F .text	0000019c __sinit
10009f40 g     F .text	00000180 __swbuf_r
1000573c g     F .text	00000070 _setlocale_r
10004e48 g     F .text	00000078 __sfmoreglue
100009a0 g     F .text	00000044 audio_disable_read_interrupt
1000dea0 g     F .text	00000020 __malloc_unlock
100003f0 g     F .text	00000088 alt_up_audio_reset_audio_core
10000d5c g     F .text	00000044 audio_read_fifo_head
10000da0 g     F .text	00000050 audio_write_fifo_head
10009834 g     F .text	0000013c memmove
10004ec0 g     F .text	00000018 _cleanup
10000f00 g     F .text	0000005c audio_play_r
10006490 g     F .text	000000a8 _Balloc
10000df0 g     F .text	0000005c audio_record_r
1000c33c g     F .text	000000d8 .hidden __gtdf2
1000f8e4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10009250 g     F .text	00000068 _fstat_r
100137d0 g     O .bss	00000004 errno
100075d8 g     F .text	00000008 __seofread
100003b0 g     F .text	00000040 alt_up_audio_write_interrupt_pending
100137d8 g     O .bss	00000004 alt_argv
10019c7c g       *ABS*	00000000 _gp
10000c74 g     F .text	000000e8 audio_write_fifo
10010a9c g     O .rwdata	00000180 alt_fd_list
1000d970 g     F .text	00000090 alt_find_dev
10006270 g     F .text	0000010c memcpy
10004e3c g     F .text	0000000c _cleanup_r
1000d608 g     F .text	000000d0 .hidden __floatsidf
1000f430 g     F .text	00000078 alt_io_redirect
1000c414 g     F .text	000000ec .hidden __ltdf2
1000fea8 g       *ABS*	00000000 __DTOR_END__
10011c80 g     O .rwdata	00000004 AUDIO_CONFIG
10000a68 g     F .text	00000038 audio_read_interrupt_pending
100074b8 g     F .text	00000068 __fpclassifyd
100072a4 g     F .text	000000a0 __ratio
10008d4c g     F .text	00000024 __vfiprintf_internal
100008b4 g     F .text	00000050 alt_up_audio_read_fifo_head
1000e948 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
1000103c g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000b068 g     F .text	00000008 .hidden __udivsi3
1000db54 g     F .text	000000a8 isatty
1000ffb4 g     O .rodata	000000c8 __mprec_tens
100057ac g     F .text	0000000c __locale_charset
100137cc g     O .bss	00000004 __malloc_top_pad
10011c8c g     O .rwdata	00000004 __mb_cur_max
100057dc g     F .text	0000000c _localeconv_r
100092b8 g     F .text	000004ac __sfvwrite_r
100068c0 g     F .text	0000003c __i2b
10007520 g     F .text	00000064 _sbrk_r
10009970 g     F .text	0000006c _read_r
10011cac g     O .rwdata	00000004 alt_max_fd
10000904 g     F .text	0000005c alt_up_audio_write_fifo_head
10008f18 g     F .text	00000128 _fclose_r
10004dfc g     F .text	00000030 fflush
100137c8 g     O .bss	00000004 __malloc_max_sbrked_mem
1000b0a0 g     F .text	0000087c .hidden __adddf3
10007070 g     F .text	000000f0 __b2d
1000a930 g     F .text	00000634 .hidden __umoddi3
1000dd30 g     F .text	000000d8 lseek
10011c84 g     O .rwdata	00000004 _global_impure_ptr
100099dc g     F .text	00000564 _realloc_r
10013914 g       *ABS*	00000000 __bss_end
1000f260 g     F .text	000000f0 alt_iic_isr_register
1000f7e0 g     F .text	00000104 alt_tick
1000a2dc g     F .text	00000654 .hidden __udivdi3
10009054 g     F .text	00000184 _fputwc_r
1000ff8c g     O .rodata	00000028 __mprec_bigtens
100066a4 g     F .text	00000104 __s2b
1000d6d8 g     F .text	000000a0 .hidden __floatunsidf
10006e00 g     F .text	00000060 __mcmp
100001f8 g     F .text	00000040 alt_up_audio_open_dev
100051a0 g     F .text	00000018 __fp_lock_all
1000f214 g     F .text	0000004c alt_ic_irq_enabled
10000608 g     F .text	00000068 alt_up_audio_play_r
1000f748 g     F .text	00000098 alt_alarm_stop
100137e0 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10010a74 g     O .rwdata	00000028 alt_dev_null
1000eea8 g     F .text	0000001c alt_dcache_flush_all
100067a8 g     F .text	00000068 __hi0bits
10011c7c g     O .rwdata	00000004 AUDIO_DEVICE
1000d588 g     F .text	00000080 .hidden __fixdfsi
10011cc4 g       *ABS*	00000000 __ram_rwdata_end
10011ca4 g     O .rwdata	00000008 alt_dev_list
1000e188 g     F .text	000000f4 write
100101d0 g       *ABS*	00000000 __ram_rodata_end
1000da50 g     F .text	000000b4 fstat
1000c414 g     F .text	000000ec .hidden __ledf2
10000960 g     F .text	00000040 audio_enable_read_interrupt
10006b68 g     F .text	00000148 __pow5mult
10007904 g     F .text	00001448 ___vfiprintf_internal_r
100137c0 g     O .bss	00000004 __nlocale_changed
1000b070 g     F .text	00000008 .hidden __umodsi3
10013914 g       *ABS*	00000000 end
1000e494 g     F .text	000000c0 altera_avalon_jtag_uart_init
1000fea8 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000d778 g     F .text	000000ac .hidden __clzsi2
1000eb50 g     F .text	00000218 altera_avalon_jtag_uart_write
10005190 g     F .text	00000004 __sfp_lock_acquire
10006188 g     F .text	000000e8 memchr
100010a4 g     F .text	00002154 ___vfprintf_internal_r
1000530c g     F .text	000002d0 _free_r
100057b8 g     F .text	00000010 __locale_mb_cur_max
1000fcd0 g     F .text	000001a4 __call_exitprocs
100137bc g     O .bss	00000004 __mlocale_changed
10011c90 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
100137e4 g     O .bss	00000004 _alt_tick_rate
10000b50 g     F .text	00000058 audio_read_fifo_avail
100007b4 g     F .text	00000100 alt_up_audio_write_fifo
10006cb0 g     F .text	00000150 __lshift
100137e8 g     O .bss	00000004 _alt_nticks
1000df10 g     F .text	000000f8 read
1000e2e8 g     F .text	00000048 alt_sys_init
100006d8 g     F .text	000000dc alt_up_audio_read_fifo
1000fbb4 g     F .text	0000011c __register_exitproc
10000320 g     F .text	00000050 alt_up_audio_disable_write_interrupt
100068fc g     F .text	0000026c __multiply
1000e7f4 g     F .text	00000068 altera_avalon_jtag_uart_close
1000b078 g     F .text	00000028 .hidden __mulsi3
100101d0 g       *ABS*	00000000 __ram_rwdata_start
1000fea8 g       *ABS*	00000000 __ram_rodata_start
100137ec g     O .bss	00000028 __malloc_current_mallinfo
10007160 g     F .text	00000144 __d2b
1000e330 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000fa18 g     F .text	000000d4 alt_get_fd
10008ddc g     F .text	00000064 _close_r
100002d4 g     F .text	0000004c alt_up_audio_enable_write_interrupt
1000fb38 g     F .text	0000007c memcmp
1000e3f0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10013914 g       *ABS*	00000000 __alt_stack_base
1000e440 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000321c g     F .text	00000138 __swsetup_r
1000b91c g     F .text	0000099c .hidden __divdf3
10000284 g     F .text	00000050 alt_up_audio_disable_read_interrupt
10005074 g     F .text	0000011c __sfp
100073b8 g     F .text	00000078 __copybits
1001066c g     O .rwdata	00000408 __malloc_av_
1000519c g     F .text	00000004 __sinit_lock_release
1000c500 g     F .text	00000800 .hidden __muldf3
10007584 g     F .text	00000054 __sread
1000f904 g     F .text	00000114 alt_find_file
1000ef14 g     F .text	000000a0 alt_dev_llist_insert
1000de80 g     F .text	00000020 __malloc_lock
1000e088 g     F .text	000000b0 sbrk
10000ad8 g     F .text	00000078 audio_reset_audio_core
10004bb8 g     F .text	00000244 _fflush_r
10008e40 g     F .text	000000d8 _calloc_r
100137b8 g       *ABS*	00000000 __bss_start
1000637c g     F .text	00000114 memset
10000fb8 g     F .text	00000084 main
100005a8 g     F .text	00000060 alt_up_audio_write_fifo_space
100137dc g     O .bss	00000004 alt_envp
100137c4 g     O .bss	00000004 __malloc_max_total_mem
1000e390 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000a0c0 g     F .text	0000001c __swbuf
100076b8 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10009040 g     F .text	00000014 fclose
1000357c g     F .text	0000163c _dtoa_r
100059c4 g     F .text	000007c4 _malloc_r
1000a250 g     F .text	00000030 __ascii_wctomb
10011cb0 g     O .rwdata	00000004 alt_errno
100055dc g     F .text	000000a8 _fwalk
10000aa0 g     F .text	00000038 audio_write_interrupt_pending
1000afd4 g     F .text	00000048 .hidden __divsi3
100051d0 g     F .text	0000013c _malloc_trim_r
1000fea8 g       *ABS*	00000000 __CTOR_END__
100076c0 g     F .text	000000a4 strcmp
1000fea8 g       *ABS*	00000000 __flash_rodata_start
1000fea8 g       *ABS*	00000000 __DTOR_LIST__
1000c2b8 g     F .text	00000084 .hidden __nedf2
1000e2b4 g     F .text	00000034 alt_irq_init
1000e008 g     F .text	00000080 alt_release_fd
1001009c g     O .rodata	00000100 .hidden __clz_tab
100137b8 g     O .bss	00000004 _PathLocale
1000faec g     F .text	00000014 atexit
10008d70 g     F .text	0000006c _write_r
100009e4 g     F .text	00000040 audio_enable_write_interrupt
100057e8 g     F .text	0000001c setlocale
10011c88 g     O .rwdata	00000004 _impure_ptr
100137d4 g     O .bss	00000004 alt_argc
1000f010 g     F .text	0000005c _do_dtors
100057d4 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10007010 g     F .text	00000060 __ulp
100051b8 g     F .text	00000018 __fp_unlock_all
10011c9c g     O .rwdata	00000008 alt_fs_list
10000540 g     F .text	00000068 alt_up_audio_record_l
10000e4c g     F .text	0000005c audio_record_l
10000020 g       *ABS*	00000000 __ram_exceptions_start
10005804 g     F .text	0000000c localeconv
1000f088 g     F .text	00000050 alt_ic_isr_register
10000ba8 g     F .text	000000cc audio_read_fifo
10011cc4 g       *ABS*	00000000 _edata
10013914 g       *ABS*	00000000 _end
100001bc g       *ABS*	00000000 __ram_exceptions_end
1000e85c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10000670 g     F .text	00000068 alt_up_audio_play_l
1000f174 g     F .text	000000a0 alt_ic_irq_disable
100075e0 g     F .text	0000007c __swrite
10011c94 g     O .rwdata	00000004 __malloc_trim_threshold
100057c8 g     F .text	0000000c __locale_msgcharset
1000fb00 g     F .text	00000038 exit
10005684 g     F .text	000000b8 _fwalk_reent
10006e60 g     F .text	000001b0 __mdiff
1000b01c g     F .text	0000004c .hidden __modsi3
10000ea8 g     F .text	00000058 audio_write_fifo_space
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10005194 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000fe74 g     F .text	00000034 _exit
1000ed68 g     F .text	00000140 alt_alarm_start
10005810 g     F .text	000001b4 __smakebuf_r
10007764 g     F .text	0000008c strlen
1000f5ec g     F .text	0000015c open
1000c33c g     F .text	000000d8 .hidden __gedf2
10011c98 g     O .rwdata	00000004 __wctomb
100078ec g     F .text	00000018 __sprint_r
1000f06c g     F .text	0000001c alt_icache_flush_all
10011cb8 g     O .rwdata	00000004 alt_priority_mask
10000a24 g     F .text	00000044 audio_disable_write_interrupt
1000f0d8 g     F .text	0000009c alt_ic_irq_enable
100031f8 g     F .text	00000024 __vfprintf_internal
10000f5c g     F .text	0000005c audio_play_l
1000a280 g     F .text	0000005c _wctomb_r
1000cd00 g     F .text	00000888 .hidden __subdf3
10006810 g     F .text	000000b0 __lo0bits
10011cbc g     O .rwdata	00000008 alt_alarm_list
1000efb4 g     F .text	0000005c _do_ctors
1000a178 g     F .text	000000d8 wcrtomb
1000d874 g     F .text	000000d0 close
1000dc60 g     F .text	00000080 alt_load
10000238 g     F .text	0000004c alt_up_audio_enable_read_interrupt
100091d8 g     F .text	00000078 fputwc
00000000  w      *UND*	00000000 free
10005198 g     F .text	00000004 __sinit_lock_acquire
10006560 g     F .text	00000144 __multadd
10006538 g     F .text	00000028 _Bfree
10000370 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40074 	movhi	r3,4097
10000130:	18ce0504 	addi	r3,r3,14356
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10800017 	ldw	r2,0(r2)
10000144:	01040074 	movhi	r4,4097
10000148:	210e0504 	addi	r4,r4,14356
1000014c:	e0fffd17 	ldw	r3,-12(fp)
10000150:	180690fa 	slli	r3,r3,3
10000154:	20c7883a 	add	r3,r4,r3
10000158:	18c00104 	addi	r3,r3,4
1000015c:	18c00017 	ldw	r3,0(r3)
10000160:	1809883a 	mov	r4,r3
10000164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6a71f14 	ori	gp,gp,40060
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	108dee14 	ori	r2,r2,14264

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18ce4514 	ori	r3,r3,14612

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	000dc600 	call	1000dc60 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	000de080 	call	1000de08 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
100001f8:	defffc04 	addi	sp,sp,-16
100001fc:	dfc00315 	stw	ra,12(sp)
10000200:	df000215 	stw	fp,8(sp)
10000204:	df000204 	addi	fp,sp,8
10000208:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
1000020c:	e13fff17 	ldw	r4,-4(fp)
10000210:	01440074 	movhi	r5,4097
10000214:	29472904 	addi	r5,r5,7332
10000218:	000d9700 	call	1000d970 <alt_find_dev>
1000021c:	e0bffe15 	stw	r2,-8(fp)
  return dev;
10000220:	e0bffe17 	ldw	r2,-8(fp)
}
10000224:	e037883a 	mov	sp,fp
10000228:	dfc00117 	ldw	ra,4(sp)
1000022c:	df000017 	ldw	fp,0(sp)
10000230:	dec00204 	addi	sp,sp,8
10000234:	f800283a 	ret

10000238 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
10000238:	defffd04 	addi	sp,sp,-12
1000023c:	df000215 	stw	fp,8(sp)
10000240:	df000204 	addi	fp,sp,8
10000244:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000248:	e0bfff17 	ldw	r2,-4(fp)
1000024c:	10800a17 	ldw	r2,40(r2)
10000250:	10800037 	ldwio	r2,0(r2)
10000254:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
10000258:	e0bffe17 	ldw	r2,-8(fp)
1000025c:	10800054 	ori	r2,r2,1
10000260:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000264:	e0bfff17 	ldw	r2,-4(fp)
10000268:	10800a17 	ldw	r2,40(r2)
1000026c:	e0fffe17 	ldw	r3,-8(fp)
10000270:	10c00035 	stwio	r3,0(r2)
}
10000274:	e037883a 	mov	sp,fp
10000278:	df000017 	ldw	fp,0(sp)
1000027c:	dec00104 	addi	sp,sp,4
10000280:	f800283a 	ret

10000284 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
10000284:	defffd04 	addi	sp,sp,-12
10000288:	df000215 	stw	fp,8(sp)
1000028c:	df000204 	addi	fp,sp,8
10000290:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000294:	e0bfff17 	ldw	r2,-4(fp)
10000298:	10800a17 	ldw	r2,40(r2)
1000029c:	10800037 	ldwio	r2,0(r2)
100002a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
100002a4:	e0fffe17 	ldw	r3,-8(fp)
100002a8:	00bfff84 	movi	r2,-2
100002ac:	1884703a 	and	r2,r3,r2
100002b0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
100002b4:	e0bfff17 	ldw	r2,-4(fp)
100002b8:	10800a17 	ldw	r2,40(r2)
100002bc:	e0fffe17 	ldw	r3,-8(fp)
100002c0:	10c00035 	stwio	r3,0(r2)
}
100002c4:	e037883a 	mov	sp,fp
100002c8:	df000017 	ldw	fp,0(sp)
100002cc:	dec00104 	addi	sp,sp,4
100002d0:	f800283a 	ret

100002d4 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
100002d4:	defffd04 	addi	sp,sp,-12
100002d8:	df000215 	stw	fp,8(sp)
100002dc:	df000204 	addi	fp,sp,8
100002e0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
100002e4:	e0bfff17 	ldw	r2,-4(fp)
100002e8:	10800a17 	ldw	r2,40(r2)
100002ec:	10800037 	ldwio	r2,0(r2)
100002f0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
100002f4:	e0bffe17 	ldw	r2,-8(fp)
100002f8:	10800094 	ori	r2,r2,2
100002fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000300:	e0bfff17 	ldw	r2,-4(fp)
10000304:	10800a17 	ldw	r2,40(r2)
10000308:	e0fffe17 	ldw	r3,-8(fp)
1000030c:	10c00035 	stwio	r3,0(r2)
}
10000310:	e037883a 	mov	sp,fp
10000314:	df000017 	ldw	fp,0(sp)
10000318:	dec00104 	addi	sp,sp,4
1000031c:	f800283a 	ret

10000320 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
10000320:	defffd04 	addi	sp,sp,-12
10000324:	df000215 	stw	fp,8(sp)
10000328:	df000204 	addi	fp,sp,8
1000032c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000330:	e0bfff17 	ldw	r2,-4(fp)
10000334:	10800a17 	ldw	r2,40(r2)
10000338:	10800037 	ldwio	r2,0(r2)
1000033c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
10000340:	e0fffe17 	ldw	r3,-8(fp)
10000344:	00bfff44 	movi	r2,-3
10000348:	1884703a 	and	r2,r3,r2
1000034c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000350:	e0bfff17 	ldw	r2,-4(fp)
10000354:	10800a17 	ldw	r2,40(r2)
10000358:	e0fffe17 	ldw	r3,-8(fp)
1000035c:	10c00035 	stwio	r3,0(r2)
}
10000360:	e037883a 	mov	sp,fp
10000364:	df000017 	ldw	fp,0(sp)
10000368:	dec00104 	addi	sp,sp,4
1000036c:	f800283a 	ret

10000370 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
10000370:	defffd04 	addi	sp,sp,-12
10000374:	df000215 	stw	fp,8(sp)
10000378:	df000204 	addi	fp,sp,8
1000037c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000380:	e0bfff17 	ldw	r2,-4(fp)
10000384:	10800a17 	ldw	r2,40(r2)
10000388:	10800037 	ldwio	r2,0(r2)
1000038c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
10000390:	e0bffe17 	ldw	r2,-8(fp)
10000394:	1080400c 	andi	r2,r2,256
10000398:	1004c03a 	cmpne	r2,r2,zero
1000039c:	10803fcc 	andi	r2,r2,255
}
100003a0:	e037883a 	mov	sp,fp
100003a4:	df000017 	ldw	fp,0(sp)
100003a8:	dec00104 	addi	sp,sp,4
100003ac:	f800283a 	ret

100003b0 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
100003b0:	defffd04 	addi	sp,sp,-12
100003b4:	df000215 	stw	fp,8(sp)
100003b8:	df000204 	addi	fp,sp,8
100003bc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
100003c0:	e0bfff17 	ldw	r2,-4(fp)
100003c4:	10800a17 	ldw	r2,40(r2)
100003c8:	10800037 	ldwio	r2,0(r2)
100003cc:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
100003d0:	e0bffe17 	ldw	r2,-8(fp)
100003d4:	1080800c 	andi	r2,r2,512
100003d8:	1004c03a 	cmpne	r2,r2,zero
100003dc:	10803fcc 	andi	r2,r2,255
}
100003e0:	e037883a 	mov	sp,fp
100003e4:	df000017 	ldw	fp,0(sp)
100003e8:	dec00104 	addi	sp,sp,4
100003ec:	f800283a 	ret

100003f0 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
100003f0:	defffd04 	addi	sp,sp,-12
100003f4:	df000215 	stw	fp,8(sp)
100003f8:	df000204 	addi	fp,sp,8
100003fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000400:	e0bfff17 	ldw	r2,-4(fp)
10000404:	10800a17 	ldw	r2,40(r2)
10000408:	10800037 	ldwio	r2,0(r2)
1000040c:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
10000410:	e0bffe17 	ldw	r2,-8(fp)
10000414:	10800114 	ori	r2,r2,4
10000418:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
1000041c:	e0bffe17 	ldw	r2,-8(fp)
10000420:	10800214 	ori	r2,r2,8
10000424:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000428:	e0bfff17 	ldw	r2,-4(fp)
1000042c:	10800a17 	ldw	r2,40(r2)
10000430:	e0fffe17 	ldw	r3,-8(fp)
10000434:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
10000438:	e0fffe17 	ldw	r3,-8(fp)
1000043c:	00bffec4 	movi	r2,-5
10000440:	1884703a 	and	r2,r3,r2
10000444:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
10000448:	e0fffe17 	ldw	r3,-8(fp)
1000044c:	00bffdc4 	movi	r2,-9
10000450:	1884703a 	and	r2,r3,r2
10000454:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000458:	e0bfff17 	ldw	r2,-4(fp)
1000045c:	10800a17 	ldw	r2,40(r2)
10000460:	e0fffe17 	ldw	r3,-8(fp)
10000464:	10c00035 	stwio	r3,0(r2)
}
10000468:	e037883a 	mov	sp,fp
1000046c:	df000017 	ldw	fp,0(sp)
10000470:	dec00104 	addi	sp,sp,4
10000474:	f800283a 	ret

10000478 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
10000478:	defffc04 	addi	sp,sp,-16
1000047c:	df000315 	stw	fp,12(sp)
10000480:	df000304 	addi	fp,sp,12
10000484:	e13ffe15 	stw	r4,-8(fp)
10000488:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
1000048c:	e0bffe17 	ldw	r2,-8(fp)
10000490:	10800a17 	ldw	r2,40(r2)
10000494:	10800104 	addi	r2,r2,4
10000498:	10800037 	ldwio	r2,0(r2)
1000049c:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
100004a0:	e0bfff17 	ldw	r2,-4(fp)
100004a4:	1000041e 	bne	r2,zero,100004b8 <alt_up_audio_read_fifo_avail+0x40>
100004a8:	e0bffd17 	ldw	r2,-12(fp)
100004ac:	10bfc00c 	andi	r2,r2,65280
100004b0:	1004d23a 	srli	r2,r2,8
100004b4:	00000206 	br	100004c0 <alt_up_audio_read_fifo_avail+0x48>
100004b8:	e0bffd17 	ldw	r2,-12(fp)
100004bc:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
100004c0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
100004c4:	e0bffd17 	ldw	r2,-12(fp)
}
100004c8:	e037883a 	mov	sp,fp
100004cc:	df000017 	ldw	fp,0(sp)
100004d0:	dec00104 	addi	sp,sp,4
100004d4:	f800283a 	ret

100004d8 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
100004d8:	defffa04 	addi	sp,sp,-24
100004dc:	dfc00515 	stw	ra,20(sp)
100004e0:	df000415 	stw	fp,16(sp)
100004e4:	df000404 	addi	fp,sp,16
100004e8:	e13ffd15 	stw	r4,-12(fp)
100004ec:	e17ffe15 	stw	r5,-8(fp)
100004f0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
100004f4:	e13ffd17 	ldw	r4,-12(fp)
100004f8:	01400044 	movi	r5,1
100004fc:	00004780 	call	10000478 <alt_up_audio_read_fifo_avail>
10000500:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
10000504:	e0bffc17 	ldw	r2,-16(fp)
10000508:	10801868 	cmpgeui	r2,r2,97
1000050c:	1000021e 	bne	r2,zero,10000518 <alt_up_audio_record_r+0x40>
		return 0;
10000510:	0005883a 	mov	r2,zero
10000514:	00000506 	br	1000052c <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
10000518:	e13ffd17 	ldw	r4,-12(fp)
1000051c:	e17ffe17 	ldw	r5,-8(fp)
10000520:	e1bfff17 	ldw	r6,-4(fp)
10000524:	01c00044 	movi	r7,1
10000528:	00006d80 	call	100006d8 <alt_up_audio_read_fifo>
}
1000052c:	e037883a 	mov	sp,fp
10000530:	dfc00117 	ldw	ra,4(sp)
10000534:	df000017 	ldw	fp,0(sp)
10000538:	dec00204 	addi	sp,sp,8
1000053c:	f800283a 	ret

10000540 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000540:	defffa04 	addi	sp,sp,-24
10000544:	dfc00515 	stw	ra,20(sp)
10000548:	df000415 	stw	fp,16(sp)
1000054c:	df000404 	addi	fp,sp,16
10000550:	e13ffd15 	stw	r4,-12(fp)
10000554:	e17ffe15 	stw	r5,-8(fp)
10000558:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
1000055c:	e13ffd17 	ldw	r4,-12(fp)
10000560:	000b883a 	mov	r5,zero
10000564:	00004780 	call	10000478 <alt_up_audio_read_fifo_avail>
10000568:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
1000056c:	e0bffc17 	ldw	r2,-16(fp)
10000570:	10801868 	cmpgeui	r2,r2,97
10000574:	1000021e 	bne	r2,zero,10000580 <alt_up_audio_record_l+0x40>
		return 0;
10000578:	0005883a 	mov	r2,zero
1000057c:	00000506 	br	10000594 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
10000580:	e13ffd17 	ldw	r4,-12(fp)
10000584:	e17ffe17 	ldw	r5,-8(fp)
10000588:	e1bfff17 	ldw	r6,-4(fp)
1000058c:	000f883a 	mov	r7,zero
10000590:	00006d80 	call	100006d8 <alt_up_audio_read_fifo>
}
10000594:	e037883a 	mov	sp,fp
10000598:	dfc00117 	ldw	ra,4(sp)
1000059c:	df000017 	ldw	fp,0(sp)
100005a0:	dec00204 	addi	sp,sp,8
100005a4:	f800283a 	ret

100005a8 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
100005a8:	defffc04 	addi	sp,sp,-16
100005ac:	df000315 	stw	fp,12(sp)
100005b0:	df000304 	addi	fp,sp,12
100005b4:	e13ffe15 	stw	r4,-8(fp)
100005b8:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100005bc:	e0bffe17 	ldw	r2,-8(fp)
100005c0:	10800a17 	ldw	r2,40(r2)
100005c4:	10800104 	addi	r2,r2,4
100005c8:	10800037 	ldwio	r2,0(r2)
100005cc:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100005d0:	e0bfff17 	ldw	r2,-4(fp)
100005d4:	1000031e 	bne	r2,zero,100005e4 <alt_up_audio_write_fifo_space+0x3c>
100005d8:	e0bffd17 	ldw	r2,-12(fp)
100005dc:	1004d63a 	srli	r2,r2,24
100005e0:	00000306 	br	100005f0 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
100005e4:	e0bffd17 	ldw	r2,-12(fp)
100005e8:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100005ec:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
100005f0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
100005f4:	e0bffd17 	ldw	r2,-12(fp)
}
100005f8:	e037883a 	mov	sp,fp
100005fc:	df000017 	ldw	fp,0(sp)
10000600:	dec00104 	addi	sp,sp,4
10000604:	f800283a 	ret

10000608 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000608:	defffa04 	addi	sp,sp,-24
1000060c:	dfc00515 	stw	ra,20(sp)
10000610:	df000415 	stw	fp,16(sp)
10000614:	df000404 	addi	fp,sp,16
10000618:	e13ffd15 	stw	r4,-12(fp)
1000061c:	e17ffe15 	stw	r5,-8(fp)
10000620:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
10000624:	e13ffd17 	ldw	r4,-12(fp)
10000628:	01400044 	movi	r5,1
1000062c:	00005a80 	call	100005a8 <alt_up_audio_write_fifo_space>
10000630:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
10000634:	e0bffc17 	ldw	r2,-16(fp)
10000638:	10801868 	cmpgeui	r2,r2,97
1000063c:	1000021e 	bne	r2,zero,10000648 <alt_up_audio_play_r+0x40>
		return 0;
10000640:	0005883a 	mov	r2,zero
10000644:	00000506 	br	1000065c <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
10000648:	e13ffd17 	ldw	r4,-12(fp)
1000064c:	e17ffe17 	ldw	r5,-8(fp)
10000650:	e1bfff17 	ldw	r6,-4(fp)
10000654:	01c00044 	movi	r7,1
10000658:	00007b40 	call	100007b4 <alt_up_audio_write_fifo>
}
1000065c:	e037883a 	mov	sp,fp
10000660:	dfc00117 	ldw	ra,4(sp)
10000664:	df000017 	ldw	fp,0(sp)
10000668:	dec00204 	addi	sp,sp,8
1000066c:	f800283a 	ret

10000670 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000670:	defffa04 	addi	sp,sp,-24
10000674:	dfc00515 	stw	ra,20(sp)
10000678:	df000415 	stw	fp,16(sp)
1000067c:	df000404 	addi	fp,sp,16
10000680:	e13ffd15 	stw	r4,-12(fp)
10000684:	e17ffe15 	stw	r5,-8(fp)
10000688:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
1000068c:	e13ffd17 	ldw	r4,-12(fp)
10000690:	000b883a 	mov	r5,zero
10000694:	00005a80 	call	100005a8 <alt_up_audio_write_fifo_space>
10000698:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
1000069c:	e0bffc17 	ldw	r2,-16(fp)
100006a0:	10801868 	cmpgeui	r2,r2,97
100006a4:	1000021e 	bne	r2,zero,100006b0 <alt_up_audio_play_l+0x40>
		return 0;
100006a8:	0005883a 	mov	r2,zero
100006ac:	00000506 	br	100006c4 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
100006b0:	e13ffd17 	ldw	r4,-12(fp)
100006b4:	e17ffe17 	ldw	r5,-8(fp)
100006b8:	e1bfff17 	ldw	r6,-4(fp)
100006bc:	000f883a 	mov	r7,zero
100006c0:	00007b40 	call	100007b4 <alt_up_audio_write_fifo>
}
100006c4:	e037883a 	mov	sp,fp
100006c8:	dfc00117 	ldw	ra,4(sp)
100006cc:	df000017 	ldw	fp,0(sp)
100006d0:	dec00204 	addi	sp,sp,8
100006d4:	f800283a 	ret

100006d8 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
100006d8:	defff904 	addi	sp,sp,-28
100006dc:	df000615 	stw	fp,24(sp)
100006e0:	df000604 	addi	fp,sp,24
100006e4:	e13ffc15 	stw	r4,-16(fp)
100006e8:	e17ffd15 	stw	r5,-12(fp)
100006ec:	e1bffe15 	stw	r6,-8(fp)
100006f0:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
100006f4:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
100006f8:	00002606 	br	10000794 <alt_up_audio_read_fifo+0xbc>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100006fc:	e0bffc17 	ldw	r2,-16(fp)
10000700:	10800a17 	ldw	r2,40(r2)
10000704:	10800104 	addi	r2,r2,4
10000708:	10800037 	ldwio	r2,0(r2)
1000070c:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
10000710:	e0bfff17 	ldw	r2,-4(fp)
10000714:	1000041e 	bne	r2,zero,10000728 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
10000718:	e0bffb17 	ldw	r2,-20(fp)
1000071c:	10bfc00c 	andi	r2,r2,65280
			:
10000720:	1004d23a 	srli	r2,r2,8
10000724:	00000206 	br	10000730 <alt_up_audio_read_fifo+0x58>
10000728:	e0bffb17 	ldw	r2,-20(fp)
1000072c:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
10000730:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
10000734:	e0bffb17 	ldw	r2,-20(fp)
10000738:	10001526 	beq	r2,zero,10000790 <alt_up_audio_read_fifo+0xb8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
1000073c:	e0bffa17 	ldw	r2,-24(fp)
10000740:	1085883a 	add	r2,r2,r2
10000744:	1085883a 	add	r2,r2,r2
10000748:	e0fffd17 	ldw	r3,-12(fp)
1000074c:	1887883a 	add	r3,r3,r2
10000750:	e0bfff17 	ldw	r2,-4(fp)
10000754:	1000051e 	bne	r2,zero,1000076c <alt_up_audio_read_fifo+0x94>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
10000758:	e0bffc17 	ldw	r2,-16(fp)
1000075c:	10800a17 	ldw	r2,40(r2)
10000760:	10800204 	addi	r2,r2,8
10000764:	10800037 	ldwio	r2,0(r2)
10000768:	00000406 	br	1000077c <alt_up_audio_read_fifo+0xa4>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
1000076c:	e0bffc17 	ldw	r2,-16(fp)
10000770:	10800a17 	ldw	r2,40(r2)
10000774:	10800304 	addi	r2,r2,12
10000778:	10800037 	ldwio	r2,0(r2)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
1000077c:	18800015 	stw	r2,0(r3)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
10000780:	e0bffa17 	ldw	r2,-24(fp)
10000784:	10800044 	addi	r2,r2,1
10000788:	e0bffa15 	stw	r2,-24(fp)
1000078c:	00000106 	br	10000794 <alt_up_audio_read_fifo+0xbc>
		}
		else
		{
			// no more data to read
			break;
10000790:	00000306 	br	100007a0 <alt_up_audio_read_fifo+0xc8>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
10000794:	e0fffa17 	ldw	r3,-24(fp)
10000798:	e0bffe17 	ldw	r2,-8(fp)
1000079c:	18bfd716 	blt	r3,r2,100006fc <__alt_data_end+0xf80006fc>
		{
			// no more data to read
			break;
		}
	}
	return count;
100007a0:	e0bffa17 	ldw	r2,-24(fp)
}
100007a4:	e037883a 	mov	sp,fp
100007a8:	df000017 	ldw	fp,0(sp)
100007ac:	dec00104 	addi	sp,sp,4
100007b0:	f800283a 	ret

100007b4 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
100007b4:	defff904 	addi	sp,sp,-28
100007b8:	df000615 	stw	fp,24(sp)
100007bc:	df000604 	addi	fp,sp,24
100007c0:	e13ffc15 	stw	r4,-16(fp)
100007c4:	e17ffd15 	stw	r5,-12(fp)
100007c8:	e1bffe15 	stw	r6,-8(fp)
100007cc:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
100007d0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
100007d4:	00002f06 	br	10000894 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100007d8:	e0bffc17 	ldw	r2,-16(fp)
100007dc:	10800a17 	ldw	r2,40(r2)
100007e0:	10800104 	addi	r2,r2,4
100007e4:	10800037 	ldwio	r2,0(r2)
100007e8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100007ec:	e0bfff17 	ldw	r2,-4(fp)
100007f0:	1000031e 	bne	r2,zero,10000800 <alt_up_audio_write_fifo+0x4c>
100007f4:	e0bffb17 	ldw	r2,-20(fp)
100007f8:	1004d63a 	srli	r2,r2,24
100007fc:	00000306 	br	1000080c <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
10000800:	e0bffb17 	ldw	r2,-20(fp)
10000804:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
10000808:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
1000080c:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
10000810:	e0bffb17 	ldw	r2,-20(fp)
10000814:	10001e26 	beq	r2,zero,10000890 <alt_up_audio_write_fifo+0xdc>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
10000818:	e0bfff17 	ldw	r2,-4(fp)
1000081c:	10000e1e 	bne	r2,zero,10000858 <alt_up_audio_write_fifo+0xa4>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
10000820:	e0bffc17 	ldw	r2,-16(fp)
10000824:	10800a17 	ldw	r2,40(r2)
10000828:	10800204 	addi	r2,r2,8
1000082c:	1007883a 	mov	r3,r2
10000830:	e0bffa17 	ldw	r2,-24(fp)
10000834:	11000044 	addi	r4,r2,1
10000838:	e13ffa15 	stw	r4,-24(fp)
1000083c:	1085883a 	add	r2,r2,r2
10000840:	1085883a 	add	r2,r2,r2
10000844:	e13ffd17 	ldw	r4,-12(fp)
10000848:	2085883a 	add	r2,r4,r2
1000084c:	10800017 	ldw	r2,0(r2)
10000850:	18800035 	stwio	r2,0(r3)
10000854:	00000f06 	br	10000894 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
10000858:	e0bffc17 	ldw	r2,-16(fp)
1000085c:	10800a17 	ldw	r2,40(r2)
10000860:	10800304 	addi	r2,r2,12
10000864:	1007883a 	mov	r3,r2
10000868:	e0bffa17 	ldw	r2,-24(fp)
1000086c:	11000044 	addi	r4,r2,1
10000870:	e13ffa15 	stw	r4,-24(fp)
10000874:	1085883a 	add	r2,r2,r2
10000878:	1085883a 	add	r2,r2,r2
1000087c:	e13ffd17 	ldw	r4,-12(fp)
10000880:	2085883a 	add	r2,r4,r2
10000884:	10800017 	ldw	r2,0(r2)
10000888:	18800035 	stwio	r2,0(r3)
1000088c:	00000106 	br	10000894 <alt_up_audio_write_fifo+0xe0>
		}
		else
		{
			// no more space to write
			break;
10000890:	00000306 	br	100008a0 <alt_up_audio_write_fifo+0xec>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
10000894:	e0fffa17 	ldw	r3,-24(fp)
10000898:	e0bffe17 	ldw	r2,-8(fp)
1000089c:	18bfce16 	blt	r3,r2,100007d8 <__alt_data_end+0xf80007d8>
		{
			// no more space to write
			break;
		}
	}
	return count;
100008a0:	e0bffa17 	ldw	r2,-24(fp)
}
100008a4:	e037883a 	mov	sp,fp
100008a8:	df000017 	ldw	fp,0(sp)
100008ac:	dec00104 	addi	sp,sp,4
100008b0:	f800283a 	ret

100008b4 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
100008b4:	defffd04 	addi	sp,sp,-12
100008b8:	df000215 	stw	fp,8(sp)
100008bc:	df000204 	addi	fp,sp,8
100008c0:	e13ffe15 	stw	r4,-8(fp)
100008c4:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
100008c8:	e0bfff17 	ldw	r2,-4(fp)
100008cc:	1000051e 	bne	r2,zero,100008e4 <alt_up_audio_read_fifo_head+0x30>
100008d0:	e0bffe17 	ldw	r2,-8(fp)
100008d4:	10800a17 	ldw	r2,40(r2)
100008d8:	10800204 	addi	r2,r2,8
100008dc:	10800037 	ldwio	r2,0(r2)
100008e0:	00000406 	br	100008f4 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
100008e4:	e0bffe17 	ldw	r2,-8(fp)
100008e8:	10800a17 	ldw	r2,40(r2)
100008ec:	10800304 	addi	r2,r2,12
100008f0:	10800037 	ldwio	r2,0(r2)
}
100008f4:	e037883a 	mov	sp,fp
100008f8:	df000017 	ldw	fp,0(sp)
100008fc:	dec00104 	addi	sp,sp,4
10000900:	f800283a 	ret

10000904 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
10000904:	defffc04 	addi	sp,sp,-16
10000908:	df000315 	stw	fp,12(sp)
1000090c:	df000304 	addi	fp,sp,12
10000910:	e13ffd15 	stw	r4,-12(fp)
10000914:	e17ffe15 	stw	r5,-8(fp)
10000918:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
1000091c:	e0bfff17 	ldw	r2,-4(fp)
10000920:	1000061e 	bne	r2,zero,1000093c <alt_up_audio_write_fifo_head+0x38>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
10000924:	e0bffd17 	ldw	r2,-12(fp)
10000928:	10800a17 	ldw	r2,40(r2)
1000092c:	10800204 	addi	r2,r2,8
10000930:	e0fffe17 	ldw	r3,-8(fp)
10000934:	10c00035 	stwio	r3,0(r2)
10000938:	00000506 	br	10000950 <alt_up_audio_write_fifo_head+0x4c>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
1000093c:	e0bffd17 	ldw	r2,-12(fp)
10000940:	10800a17 	ldw	r2,40(r2)
10000944:	10800304 	addi	r2,r2,12
10000948:	e0fffe17 	ldw	r3,-8(fp)
1000094c:	10c00035 	stwio	r3,0(r2)
}
10000950:	e037883a 	mov	sp,fp
10000954:	df000017 	ldw	fp,0(sp)
10000958:	dec00104 	addi	sp,sp,4
1000095c:	f800283a 	ret

10000960 <audio_enable_read_interrupt>:
#define LEFT_DATA	((volatile unsigned int *const)(AUDIO_DEVICE + 2));
#define RIGHT_DATA	((volatile unsigned int *const)(AUDIO_DEVICE + 3));


void audio_enable_read_interrupt()
{
10000960:	defffe04 	addi	sp,sp,-8
10000964:	df000115 	stw	fp,4(sp)
10000968:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg = IORD_AUDIO_CONTROL();
1000096c:	00801004 	movi	r2,64
10000970:	10800037 	ldwio	r2,0(r2)
10000974:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining the other bits
	ctrl_reg |= AUDIO_CONTROL_RE_MASK;
10000978:	e0bfff17 	ldw	r2,-4(fp)
1000097c:	10800054 	ori	r2,r2,1
10000980:	e0bfff15 	stw	r2,-4(fp)
	IOWR_AUDIO_CONTROL(ctrl_reg);
10000984:	00801004 	movi	r2,64
10000988:	e0ffff17 	ldw	r3,-4(fp)
1000098c:	10c00035 	stwio	r3,0(r2)
}
10000990:	e037883a 	mov	sp,fp
10000994:	df000017 	ldw	fp,0(sp)
10000998:	dec00104 	addi	sp,sp,4
1000099c:	f800283a 	ret

100009a0 <audio_disable_read_interrupt>:

void audio_disable_read_interrupt()
{
100009a0:	defffe04 	addi	sp,sp,-8
100009a4:	df000115 	stw	fp,4(sp)
100009a8:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg = IORD_AUDIO_CONTROL();
100009ac:	00801004 	movi	r2,64
100009b0:	10800037 	ldwio	r2,0(r2)
100009b4:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining the other bits
	ctrl_reg &= ~AUDIO_CONTROL_RE_MASK;
100009b8:	e0ffff17 	ldw	r3,-4(fp)
100009bc:	00bfff84 	movi	r2,-2
100009c0:	1884703a 	and	r2,r3,r2
100009c4:	e0bfff15 	stw	r2,-4(fp)
	IOWR_AUDIO_CONTROL(ctrl_reg);
100009c8:	00801004 	movi	r2,64
100009cc:	e0ffff17 	ldw	r3,-4(fp)
100009d0:	10c00035 	stwio	r3,0(r2)
}
100009d4:	e037883a 	mov	sp,fp
100009d8:	df000017 	ldw	fp,0(sp)
100009dc:	dec00104 	addi	sp,sp,4
100009e0:	f800283a 	ret

100009e4 <audio_enable_write_interrupt>:

void audio_enable_write_interrupt() {
100009e4:	defffe04 	addi	sp,sp,-8
100009e8:	df000115 	stw	fp,4(sp)
100009ec:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg;
	ctrl_reg = IORD_AUDIO_CONTROL(); 
100009f0:	00801004 	movi	r2,64
100009f4:	10800037 	ldwio	r2,0(r2)
100009f8:	e0bfff15 	stw	r2,-4(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= AUDIO_CONTROL_WE_MASK;
100009fc:	e0bfff17 	ldw	r2,-4(fp)
10000a00:	10800094 	ori	r2,r2,2
10000a04:	e0bfff15 	stw	r2,-4(fp)
	IOWR_AUDIO_CONTROL(ctrl_reg);
10000a08:	00801004 	movi	r2,64
10000a0c:	e0ffff17 	ldw	r3,-4(fp)
10000a10:	10c00035 	stwio	r3,0(r2)
}
10000a14:	e037883a 	mov	sp,fp
10000a18:	df000017 	ldw	fp,0(sp)
10000a1c:	dec00104 	addi	sp,sp,4
10000a20:	f800283a 	ret

10000a24 <audio_disable_write_interrupt>:

void audio_disable_write_interrupt() {
10000a24:	defffe04 	addi	sp,sp,-8
10000a28:	df000115 	stw	fp,4(sp)
10000a2c:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg;
	ctrl_reg = IORD_AUDIO_CONTROL(); 
10000a30:	00801004 	movi	r2,64
10000a34:	10800037 	ldwio	r2,0(r2)
10000a38:	e0bfff15 	stw	r2,-4(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~AUDIO_CONTROL_WE_MASK;
10000a3c:	e0ffff17 	ldw	r3,-4(fp)
10000a40:	00bfff44 	movi	r2,-3
10000a44:	1884703a 	and	r2,r3,r2
10000a48:	e0bfff15 	stw	r2,-4(fp)
	IOWR_AUDIO_CONTROL(ctrl_reg);
10000a4c:	00801004 	movi	r2,64
10000a50:	e0ffff17 	ldw	r3,-4(fp)
10000a54:	10c00035 	stwio	r3,0(r2)
}
10000a58:	e037883a 	mov	sp,fp
10000a5c:	df000017 	ldw	fp,0(sp)
10000a60:	dec00104 	addi	sp,sp,4
10000a64:	f800283a 	ret

10000a68 <audio_read_interrupt_pending>:

int audio_read_interrupt_pending()
{
10000a68:	defffe04 	addi	sp,sp,-8
10000a6c:	df000115 	stw	fp,4(sp)
10000a70:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg = IORD_AUDIO_CONTROL();
10000a74:	00801004 	movi	r2,64
10000a78:	10800037 	ldwio	r2,0(r2)
10000a7c:	e0bfff15 	stw	r2,-4(fp)
	// return RI
	return (ctrl_reg & AUDIO_CONTROL_RI_MASK) ? 1 : 0;
10000a80:	e0bfff17 	ldw	r2,-4(fp)
10000a84:	1080400c 	andi	r2,r2,256
10000a88:	1004c03a 	cmpne	r2,r2,zero
10000a8c:	10803fcc 	andi	r2,r2,255
}
10000a90:	e037883a 	mov	sp,fp
10000a94:	df000017 	ldw	fp,0(sp)
10000a98:	dec00104 	addi	sp,sp,4
10000a9c:	f800283a 	ret

10000aa0 <audio_write_interrupt_pending>:

int audio_write_interrupt_pending()
{
10000aa0:	defffe04 	addi	sp,sp,-8
10000aa4:	df000115 	stw	fp,4(sp)
10000aa8:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg = IORD_AUDIO_CONTROL();
10000aac:	00801004 	movi	r2,64
10000ab0:	10800037 	ldwio	r2,0(r2)
10000ab4:	e0bfff15 	stw	r2,-4(fp)
	// return WI
	return (ctrl_reg & AUDIO_CONTROL_WI_MASK) ? 1 : 0;
10000ab8:	e0bfff17 	ldw	r2,-4(fp)
10000abc:	1080800c 	andi	r2,r2,512
10000ac0:	1004c03a 	cmpne	r2,r2,zero
10000ac4:	10803fcc 	andi	r2,r2,255
}
10000ac8:	e037883a 	mov	sp,fp
10000acc:	df000017 	ldw	fp,0(sp)
10000ad0:	dec00104 	addi	sp,sp,4
10000ad4:	f800283a 	ret

10000ad8 <audio_reset_audio_core>:

void audio_reset_audio_core()
{
10000ad8:	defffe04 	addi	sp,sp,-8
10000adc:	df000115 	stw	fp,4(sp)
10000ae0:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg = IORD_AUDIO_CONTROL();
10000ae4:	00801004 	movi	r2,64
10000ae8:	10800037 	ldwio	r2,0(r2)
10000aec:	e0bfff15 	stw	r2,-4(fp)
	// set CR and CW to 1 while maintaining the other bits
	ctrl_reg |= AUDIO_CONTROL_CR_MASK;
10000af0:	e0bfff17 	ldw	r2,-4(fp)
10000af4:	10800114 	ori	r2,r2,4
10000af8:	e0bfff15 	stw	r2,-4(fp)
	ctrl_reg |= AUDIO_CONTROL_CW_MASK;
10000afc:	e0bfff17 	ldw	r2,-4(fp)
10000b00:	10800214 	ori	r2,r2,8
10000b04:	e0bfff15 	stw	r2,-4(fp)
	IOWR_AUDIO_CONTROL(ctrl_reg);
10000b08:	00801004 	movi	r2,64
10000b0c:	e0ffff17 	ldw	r3,-4(fp)
10000b10:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining the other bits
	ctrl_reg &= ~AUDIO_CONTROL_CR_MASK;
10000b14:	e0ffff17 	ldw	r3,-4(fp)
10000b18:	00bffec4 	movi	r2,-5
10000b1c:	1884703a 	and	r2,r3,r2
10000b20:	e0bfff15 	stw	r2,-4(fp)
	ctrl_reg &= ~AUDIO_CONTROL_CW_MASK;
10000b24:	e0ffff17 	ldw	r3,-4(fp)
10000b28:	00bffdc4 	movi	r2,-9
10000b2c:	1884703a 	and	r2,r3,r2
10000b30:	e0bfff15 	stw	r2,-4(fp)
	IOWR_AUDIO_CONTROL(ctrl_reg);
10000b34:	00801004 	movi	r2,64
10000b38:	e0ffff17 	ldw	r3,-4(fp)
10000b3c:	10c00035 	stwio	r3,0(r2)
}
10000b40:	e037883a 	mov	sp,fp
10000b44:	df000017 	ldw	fp,0(sp)
10000b48:	dec00104 	addi	sp,sp,4
10000b4c:	f800283a 	ret

10000b50 <audio_read_fifo_avail>:

// provides number of words of data available in the incoming FIFO: RALC or RARC
unsigned int audio_read_fifo_avail(int channel)
{
10000b50:	defffd04 	addi	sp,sp,-12
10000b54:	df000215 	stw	fp,8(sp)
10000b58:	df000204 	addi	fp,sp,8
10000b5c:	e13fff15 	stw	r4,-4(fp)
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
10000b60:	00801004 	movi	r2,64
10000b64:	10800104 	addi	r2,r2,4
10000b68:	10800037 	ldwio	r2,0(r2)
10000b6c:	e0bffe15 	stw	r2,-8(fp)
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
10000b70:	e0bfff17 	ldw	r2,-4(fp)
10000b74:	1000041e 	bne	r2,zero,10000b88 <audio_read_fifo_avail+0x38>
{
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
10000b78:	e0bffe17 	ldw	r2,-8(fp)
10000b7c:	10bfc00c 	andi	r2,r2,65280
			:
10000b80:	1004d23a 	srli	r2,r2,8
10000b84:	00000206 	br	10000b90 <audio_read_fifo_avail+0x40>
10000b88:	e0bffe17 	ldw	r2,-8(fp)
10000b8c:	10803fcc 	andi	r2,r2,255
unsigned int audio_read_fifo_avail(int channel)
{
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
10000b90:	e0bffe15 	stw	r2,-8(fp)
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
	return fifospace;
10000b94:	e0bffe17 	ldw	r2,-8(fp)
}
10000b98:	e037883a 	mov	sp,fp
10000b9c:	df000017 	ldw	fp,0(sp)
10000ba0:	dec00104 	addi	sp,sp,4
10000ba4:	f800283a 	ret

10000ba8 <audio_read_fifo>:

int audio_read_fifo(unsigned int *buf, int len, int channel) {
10000ba8:	defffa04 	addi	sp,sp,-24
10000bac:	df000515 	stw	fp,20(sp)
10000bb0:	df000504 	addi	fp,sp,20
10000bb4:	e13ffd15 	stw	r4,-12(fp)
10000bb8:	e17ffe15 	stw	r5,-8(fp)
10000bbc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int fifospace;
	int count = 0;
10000bc0:	e03ffb15 	stw	zero,-20(fp)
	while (count < len) {
10000bc4:	00002306 	br	10000c54 <audio_read_fifo+0xac>
		// read the whole fifospcae register
		fifospace = IORD_AUDIO_FIFOSPACE();
10000bc8:	00801004 	movi	r2,64
10000bcc:	10800104 	addi	r2,r2,4
10000bd0:	10800037 	ldwio	r2,0(r2)
10000bd4:	e0bffc15 	stw	r2,-16(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
10000bd8:	e0bfff17 	ldw	r2,-4(fp)
10000bdc:	1000041e 	bne	r2,zero,10000bf0 <audio_read_fifo+0x48>
	while (count < len) {
		// read the whole fifospcae register
		fifospace = IORD_AUDIO_FIFOSPACE();
		// extract the part for proper Channel Read Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
10000be0:	e0bffc17 	ldw	r2,-16(fp)
10000be4:	10bfc00c 	andi	r2,r2,65280
			:
10000be8:	1004d23a 	srli	r2,r2,8
10000bec:	00000206 	br	10000bf8 <audio_read_fifo+0x50>
10000bf0:	e0bffc17 	ldw	r2,-16(fp)
10000bf4:	10803fcc 	andi	r2,r2,255
	int count = 0;
	while (count < len) {
		// read the whole fifospcae register
		fifospace = IORD_AUDIO_FIFOSPACE();
		// extract the part for proper Channel Read Space
		fifospace = (channel == AUDIO_LEFT) ?
10000bf8:	e0bffc15 	stw	r2,-16(fp)
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
		if (fifospace > 0) {
10000bfc:	e0bffc17 	ldw	r2,-16(fp)
10000c00:	10001326 	beq	r2,zero,10000c50 <audio_read_fifo+0xa8>
			buf[count] = (channel == AUDIO_LEFT) ?
10000c04:	e0bffb17 	ldw	r2,-20(fp)
10000c08:	1085883a 	add	r2,r2,r2
10000c0c:	1085883a 	add	r2,r2,r2
10000c10:	e0fffd17 	ldw	r3,-12(fp)
10000c14:	1887883a 	add	r3,r3,r2
10000c18:	e0bfff17 	ldw	r2,-4(fp)
10000c1c:	1000041e 	bne	r2,zero,10000c30 <audio_read_fifo+0x88>
				IORD_AUDIO_LEFTDATA():
10000c20:	00801004 	movi	r2,64
10000c24:	10800204 	addi	r2,r2,8
10000c28:	10800037 	ldwio	r2,0(r2)
10000c2c:	00000306 	br	10000c3c <audio_read_fifo+0x94>
				IORD_AUDIO_RIGHTDATA();
10000c30:	00801004 	movi	r2,64
10000c34:	10800304 	addi	r2,r2,12
10000c38:	10800037 	ldwio	r2,0(r2)
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
		if (fifospace > 0) {
			buf[count] = (channel == AUDIO_LEFT) ?
10000c3c:	18800015 	stw	r2,0(r3)
				IORD_AUDIO_LEFTDATA():
				IORD_AUDIO_RIGHTDATA();
			count ++;
10000c40:	e0bffb17 	ldw	r2,-20(fp)
10000c44:	10800044 	addi	r2,r2,1
10000c48:	e0bffb15 	stw	r2,-20(fp)
10000c4c:	00000106 	br	10000c54 <audio_read_fifo+0xac>
		}
		else {
			//no more data to read
			break;
10000c50:	00000306 	br	10000c60 <audio_read_fifo+0xb8>
}

int audio_read_fifo(unsigned int *buf, int len, int channel) {
	unsigned int fifospace;
	int count = 0;
	while (count < len) {
10000c54:	e0fffb17 	ldw	r3,-20(fp)
10000c58:	e0bffe17 	ldw	r2,-8(fp)
10000c5c:	18bfda16 	blt	r3,r2,10000bc8 <__alt_data_end+0xf8000bc8>
		else {
			//no more data to read
			break;
		}
	}
	return count;
10000c60:	e0bffb17 	ldw	r2,-20(fp)
}
10000c64:	e037883a 	mov	sp,fp
10000c68:	df000017 	ldw	fp,0(sp)
10000c6c:	dec00104 	addi	sp,sp,4
10000c70:	f800283a 	ret

10000c74 <audio_write_fifo>:

int audio_write_fifo(unsigned int *buf, int len, int channel) {
10000c74:	defffa04 	addi	sp,sp,-24
10000c78:	df000515 	stw	fp,20(sp)
10000c7c:	df000504 	addi	fp,sp,20
10000c80:	e13ffd15 	stw	r4,-12(fp)
10000c84:	e17ffe15 	stw	r5,-8(fp)
10000c88:	e1bfff15 	stw	r6,-4(fp)
	unsigned int fifospace;
	int count = 0;
10000c8c:	e03ffb15 	stw	zero,-20(fp)
	while (count < len) {
10000c90:	00002a06 	br	10000d3c <audio_write_fifo+0xc8>
		//read the whole fifospace register
		fifospace = IORD_AUDIO_FIFOSPACE();
10000c94:	00801004 	movi	r2,64
10000c98:	10800104 	addi	r2,r2,4
10000c9c:	10800037 	ldwio	r2,0(r2)
10000ca0:	e0bffc15 	stw	r2,-16(fp)
		//extract the part for left Channel Write Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET :
10000ca4:	e0bfff17 	ldw	r2,-4(fp)
10000ca8:	1000031e 	bne	r2,zero,10000cb8 <audio_write_fifo+0x44>
10000cac:	e0bffc17 	ldw	r2,-16(fp)
10000cb0:	1004d63a 	srli	r2,r2,24
10000cb4:	00000306 	br	10000cc4 <audio_write_fifo+0x50>
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
10000cb8:	e0bffc17 	ldw	r2,-16(fp)
10000cbc:	10803fec 	andhi	r2,r2,255
	while (count < len) {
		//read the whole fifospace register
		fifospace = IORD_AUDIO_FIFOSPACE();
		//extract the part for left Channel Write Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET :
10000cc0:	1004d43a 	srli	r2,r2,16
	int count = 0;
	while (count < len) {
		//read the whole fifospace register
		fifospace = IORD_AUDIO_FIFOSPACE();
		//extract the part for left Channel Write Space
		fifospace = (channel == AUDIO_LEFT) ?
10000cc4:	e0bffc15 	stw	r2,-16(fp)
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET :
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
		if (fifospace > 0) {
10000cc8:	e0bffc17 	ldw	r2,-16(fp)
10000ccc:	10001a26 	beq	r2,zero,10000d38 <audio_write_fifo+0xc4>
			if (channel == AUDIO_LEFT)
10000cd0:	e0bfff17 	ldw	r2,-4(fp)
10000cd4:	10000c1e 	bne	r2,zero,10000d08 <audio_write_fifo+0x94>
				IOWR_AUDIO_LEFTDATA(buf[count++]);
10000cd8:	00801004 	movi	r2,64
10000cdc:	10c00204 	addi	r3,r2,8
10000ce0:	e0bffb17 	ldw	r2,-20(fp)
10000ce4:	11000044 	addi	r4,r2,1
10000ce8:	e13ffb15 	stw	r4,-20(fp)
10000cec:	1085883a 	add	r2,r2,r2
10000cf0:	1085883a 	add	r2,r2,r2
10000cf4:	e13ffd17 	ldw	r4,-12(fp)
10000cf8:	2085883a 	add	r2,r4,r2
10000cfc:	10800017 	ldw	r2,0(r2)
10000d00:	18800035 	stwio	r2,0(r3)
10000d04:	00000d06 	br	10000d3c <audio_write_fifo+0xc8>
			else 
				IOWR_AUDIO_RIGHTDATA(buf[count++]);
10000d08:	00801004 	movi	r2,64
10000d0c:	10c00304 	addi	r3,r2,12
10000d10:	e0bffb17 	ldw	r2,-20(fp)
10000d14:	11000044 	addi	r4,r2,1
10000d18:	e13ffb15 	stw	r4,-20(fp)
10000d1c:	1085883a 	add	r2,r2,r2
10000d20:	1085883a 	add	r2,r2,r2
10000d24:	e13ffd17 	ldw	r4,-12(fp)
10000d28:	2085883a 	add	r2,r4,r2
10000d2c:	10800017 	ldw	r2,0(r2)
10000d30:	18800035 	stwio	r2,0(r3)
10000d34:	00000106 	br	10000d3c <audio_write_fifo+0xc8>
		}
		else {
			//no more space to write
			break;
10000d38:	00000306 	br	10000d48 <audio_write_fifo+0xd4>
}

int audio_write_fifo(unsigned int *buf, int len, int channel) {
	unsigned int fifospace;
	int count = 0;
	while (count < len) {
10000d3c:	e0fffb17 	ldw	r3,-20(fp)
10000d40:	e0bffe17 	ldw	r2,-8(fp)
10000d44:	18bfd316 	blt	r3,r2,10000c94 <__alt_data_end+0xf8000c94>
		else {
			//no more space to write
			break;
		}
	}
	return count;
10000d48:	e0bffb17 	ldw	r2,-20(fp)
}
10000d4c:	e037883a 	mov	sp,fp
10000d50:	df000017 	ldw	fp,0(sp)
10000d54:	dec00104 	addi	sp,sp,4
10000d58:	f800283a 	ret

10000d5c <audio_read_fifo_head>:

unsigned int audio_read_fifo_head(int channel) {
10000d5c:	defffe04 	addi	sp,sp,-8
10000d60:	df000115 	stw	fp,4(sp)
10000d64:	df000104 	addi	fp,sp,4
10000d68:	e13fff15 	stw	r4,-4(fp)
	return (channel == AUDIO_LEFT) ?
10000d6c:	e0bfff17 	ldw	r2,-4(fp)
10000d70:	1000041e 	bne	r2,zero,10000d84 <audio_read_fifo_head+0x28>
			IORD_AUDIO_LEFTDATA() :
10000d74:	00801004 	movi	r2,64
10000d78:	10800204 	addi	r2,r2,8
10000d7c:	10800037 	ldwio	r2,0(r2)
10000d80:	00000306 	br	10000d90 <audio_read_fifo_head+0x34>
					IORD_AUDIO_RIGHTDATA();
10000d84:	00801004 	movi	r2,64
10000d88:	10800304 	addi	r2,r2,12
10000d8c:	10800037 	ldwio	r2,0(r2)
}
10000d90:	e037883a 	mov	sp,fp
10000d94:	df000017 	ldw	fp,0(sp)
10000d98:	dec00104 	addi	sp,sp,4
10000d9c:	f800283a 	ret

10000da0 <audio_write_fifo_head>:

void audio_write_fifo_head(unsigned int data, int channel) {
10000da0:	defffd04 	addi	sp,sp,-12
10000da4:	df000215 	stw	fp,8(sp)
10000da8:	df000204 	addi	fp,sp,8
10000dac:	e13ffe15 	stw	r4,-8(fp)
10000db0:	e17fff15 	stw	r5,-4(fp)
	if (channel == AUDIO_LEFT)
10000db4:	e0bfff17 	ldw	r2,-4(fp)
10000db8:	1000051e 	bne	r2,zero,10000dd0 <audio_write_fifo_head+0x30>
		IOWR_AUDIO_LEFTDATA(data);
10000dbc:	00801004 	movi	r2,64
10000dc0:	10800204 	addi	r2,r2,8
10000dc4:	e0fffe17 	ldw	r3,-8(fp)
10000dc8:	10c00035 	stwio	r3,0(r2)
10000dcc:	00000406 	br	10000de0 <audio_write_fifo_head+0x40>
	else
		IOWR_AUDIO_RIGHTDATA(data);
10000dd0:	00801004 	movi	r2,64
10000dd4:	10800304 	addi	r2,r2,12
10000dd8:	e0fffe17 	ldw	r3,-8(fp)
10000ddc:	10c00035 	stwio	r3,0(r2)
}
10000de0:	e037883a 	mov	sp,fp
10000de4:	df000017 	ldw	fp,0(sp)
10000de8:	dec00104 	addi	sp,sp,4
10000dec:	f800283a 	ret

10000df0 <audio_record_r>:
 * Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words
 * available. If it doesn't, then just returns 0. If it does, then data is read from
 * the FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int audio_record_r(unsigned int *buf, int len)
{
10000df0:	defffb04 	addi	sp,sp,-20
10000df4:	dfc00415 	stw	ra,16(sp)
10000df8:	df000315 	stw	fp,12(sp)
10000dfc:	df000304 	addi	fp,sp,12
10000e00:	e13ffe15 	stw	r4,-8(fp)
10000e04:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_words = audio_read_fifo_avail(AUDIO_RIGHT);
10000e08:	01000044 	movi	r4,1
10000e0c:	0000b500 	call	10000b50 <audio_read_fifo_avail>
10000e10:	e0bffd15 	stw	r2,-12(fp)
	if (data_words <= BUF_THRESHOLD)
10000e14:	e0bffd17 	ldw	r2,-12(fp)
10000e18:	10801868 	cmpgeui	r2,r2,97
10000e1c:	1000021e 	bne	r2,zero,10000e28 <audio_record_r+0x38>
		return 0;
10000e20:	0005883a 	mov	r2,zero
10000e24:	00000406 	br	10000e38 <audio_record_r+0x48>
	else
		return audio_read_fifo(buf, len, AUDIO_RIGHT);
10000e28:	e13ffe17 	ldw	r4,-8(fp)
10000e2c:	e17fff17 	ldw	r5,-4(fp)
10000e30:	01800044 	movi	r6,1
10000e34:	0000ba80 	call	10000ba8 <audio_read_fifo>
}
10000e38:	e037883a 	mov	sp,fp
10000e3c:	dfc00117 	ldw	ra,4(sp)
10000e40:	df000017 	ldw	fp,0(sp)
10000e44:	dec00204 	addi	sp,sp,8
10000e48:	f800283a 	ret

10000e4c <audio_record_l>:
 * Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words
 * available. If it doesn't, then just returns 0. If it does, then data is read from
 * the FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int audio_record_l(unsigned int *buf, int len)
{
10000e4c:	defffb04 	addi	sp,sp,-20
10000e50:	dfc00415 	stw	ra,16(sp)
10000e54:	df000315 	stw	fp,12(sp)
10000e58:	df000304 	addi	fp,sp,12
10000e5c:	e13ffe15 	stw	r4,-8(fp)
10000e60:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_words = audio_read_fifo_avail(AUDIO_LEFT);
10000e64:	0009883a 	mov	r4,zero
10000e68:	0000b500 	call	10000b50 <audio_read_fifo_avail>
10000e6c:	e0bffd15 	stw	r2,-12(fp)
	if (data_words <= BUF_THRESHOLD)
10000e70:	e0bffd17 	ldw	r2,-12(fp)
10000e74:	10801868 	cmpgeui	r2,r2,97
10000e78:	1000021e 	bne	r2,zero,10000e84 <audio_record_l+0x38>
		return 0;
10000e7c:	0005883a 	mov	r2,zero
10000e80:	00000406 	br	10000e94 <audio_record_l+0x48>
	else
		return audio_read_fifo(buf, len, AUDIO_LEFT);
10000e84:	e13ffe17 	ldw	r4,-8(fp)
10000e88:	e17fff17 	ldw	r5,-4(fp)
10000e8c:	000d883a 	mov	r6,zero
10000e90:	0000ba80 	call	10000ba8 <audio_read_fifo>
}
10000e94:	e037883a 	mov	sp,fp
10000e98:	dfc00117 	ldw	ra,4(sp)
10000e9c:	df000017 	ldw	fp,0(sp)
10000ea0:	dec00204 	addi	sp,sp,8
10000ea4:	f800283a 	ret

10000ea8 <audio_write_fifo_space>:

/**
 * Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC
 */
unsigned int audio_write_fifo_space(int channel)
{
10000ea8:	defffd04 	addi	sp,sp,-12
10000eac:	df000215 	stw	fp,8(sp)
10000eb0:	df000204 	addi	fp,sp,8
10000eb4:	e13fff15 	stw	r4,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_AUDIO_FIFOSPACE();
10000eb8:	00801004 	movi	r2,64
10000ebc:	10800104 	addi	r2,r2,4
10000ec0:	10800037 	ldwio	r2,0(r2)
10000ec4:	e0bffe15 	stw	r2,-8(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET
			:
10000ec8:	e0bfff17 	ldw	r2,-4(fp)
10000ecc:	1000031e 	bne	r2,zero,10000edc <audio_write_fifo_space+0x34>
10000ed0:	e0bffe17 	ldw	r2,-8(fp)
10000ed4:	1004d63a 	srli	r2,r2,24
10000ed8:	00000306 	br	10000ee8 <audio_write_fifo_space+0x40>
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
10000edc:	e0bffe17 	ldw	r2,-8(fp)
10000ee0:	10803fec 	andhi	r2,r2,255
	// read the whole fifospace register
	fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper Channel Read Space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET
			:
10000ee4:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper Channel Read Space
	fifospace = (channel == AUDIO_LEFT) ?
10000ee8:	e0bffe15 	stw	r2,-8(fp)
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
	return fifospace;
10000eec:	e0bffe17 	ldw	r2,-8(fp)
}
10000ef0:	e037883a 	mov	sp,fp
10000ef4:	df000017 	ldw	fp,0(sp)
10000ef8:	dec00104 	addi	sp,sp,4
10000efc:	f800283a 	ret

10000f00 <audio_play_r>:
 * Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the
 * FIFO, up to a maximum of len words.
 */
unsigned int audio_play_r(unsigned int *buf, int len)
{
10000f00:	defffb04 	addi	sp,sp,-20
10000f04:	dfc00415 	stw	ra,16(sp)
10000f08:	df000315 	stw	fp,12(sp)
10000f0c:	df000304 	addi	fp,sp,12
10000f10:	e13ffe15 	stw	r4,-8(fp)
10000f14:	e17fff15 	stw	r5,-4(fp)
	unsigned int space = audio_write_fifo_space(AUDIO_RIGHT);
10000f18:	01000044 	movi	r4,1
10000f1c:	0000ea80 	call	10000ea8 <audio_write_fifo_space>
10000f20:	e0bffd15 	stw	r2,-12(fp)
		if (space <= BUF_THRESHOLD)
10000f24:	e0bffd17 	ldw	r2,-12(fp)
10000f28:	10801868 	cmpgeui	r2,r2,97
10000f2c:	1000021e 	bne	r2,zero,10000f38 <audio_play_r+0x38>
			return 0;
10000f30:	0005883a 	mov	r2,zero
10000f34:	00000406 	br	10000f48 <audio_play_r+0x48>
		else
			return audio_write_fifo(buf, len, AUDIO_RIGHT);
10000f38:	e13ffe17 	ldw	r4,-8(fp)
10000f3c:	e17fff17 	ldw	r5,-4(fp)
10000f40:	01800044 	movi	r6,1
10000f44:	0000c740 	call	10000c74 <audio_write_fifo>
}
10000f48:	e037883a 	mov	sp,fp
10000f4c:	dfc00117 	ldw	ra,4(sp)
10000f50:	df000017 	ldw	fp,0(sp)
10000f54:	dec00204 	addi	sp,sp,8
10000f58:	f800283a 	ret

10000f5c <audio_play_l>:
 * Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the
 * FIFO, up to a maximum of len words.
 */
unsigned int audio_play_l(unsigned int *buf, int len)
{
10000f5c:	defffb04 	addi	sp,sp,-20
10000f60:	dfc00415 	stw	ra,16(sp)
10000f64:	df000315 	stw	fp,12(sp)
10000f68:	df000304 	addi	fp,sp,12
10000f6c:	e13ffe15 	stw	r4,-8(fp)
10000f70:	e17fff15 	stw	r5,-4(fp)
	unsigned int space = audio_write_fifo_space(AUDIO_LEFT);
10000f74:	0009883a 	mov	r4,zero
10000f78:	0000ea80 	call	10000ea8 <audio_write_fifo_space>
10000f7c:	e0bffd15 	stw	r2,-12(fp)
	if (space <= BUF_THRESHOLD)
10000f80:	e0bffd17 	ldw	r2,-12(fp)
10000f84:	10801868 	cmpgeui	r2,r2,97
10000f88:	1000021e 	bne	r2,zero,10000f94 <audio_play_l+0x38>
		return 0;
10000f8c:	0005883a 	mov	r2,zero
10000f90:	00000406 	br	10000fa4 <audio_play_l+0x48>
	else
		return audio_write_fifo(buf, len, AUDIO_LEFT);
10000f94:	e13ffe17 	ldw	r4,-8(fp)
10000f98:	e17fff17 	ldw	r5,-4(fp)
10000f9c:	000d883a 	mov	r6,zero
10000fa0:	0000c740 	call	10000c74 <audio_write_fifo>
}
10000fa4:	e037883a 	mov	sp,fp
10000fa8:	dfc00117 	ldw	ra,4(sp)
10000fac:	df000017 	ldw	fp,0(sp)
10000fb0:	dec00204 	addi	sp,sp,8
10000fb4:	f800283a 	ret

10000fb8 <main>:
//#include "priv/alt_file.h"
#include "audIO.h"


int main()
{
10000fb8:	defc1504 	addi	sp,sp,-4012
10000fbc:	dfc3ea15 	stw	ra,4008(sp)
10000fc0:	df03e915 	stw	fp,4004(sp)
10000fc4:	df03e904 	addi	fp,sp,4004
	  next = (alt_dev *)dev->llist.next;
	  printf("%d:\tList name: %s\n", i++, dev->name);
  } while ((alt_llist *)next != &alt_dev_list);
  */
  
  audio_reset_audio_core();
10000fc8:	0000ad80 	call	10000ad8 <audio_reset_audio_core>
  audio_enable_read_interrupt();
10000fcc:	00009600 	call	10000960 <audio_enable_read_interrupt>
  audio_enable_write_interrupt();
10000fd0:	00009e40 	call	100009e4 <audio_enable_write_interrupt>
  
  // Check how many data words the read FIFO for the right channel has.
  for (i = 0; i < 5; i++) {
10000fd4:	e03c1715 	stw	zero,-4004(fp)
10000fd8:	00000f06 	br	10001018 <main+0x60>
	  printf("Left available: %u\n", audio_read_fifo_avail(AUDIO_LEFT));
10000fdc:	0009883a 	mov	r4,zero
10000fe0:	0000b500 	call	10000b50 <audio_read_fifo_avail>
10000fe4:	01040074 	movhi	r4,4097
10000fe8:	213faa04 	addi	r4,r4,-344
10000fec:	100b883a 	mov	r5,r2
10000ff0:	00010680 	call	10001068 <printf>
	  printf("Right available: %u\n", audio_read_fifo_avail(AUDIO_RIGHT));
10000ff4:	01000044 	movi	r4,1
10000ff8:	0000b500 	call	10000b50 <audio_read_fifo_avail>
10000ffc:	01040074 	movhi	r4,4097
10001000:	213faf04 	addi	r4,r4,-324
10001004:	100b883a 	mov	r5,r2
10001008:	00010680 	call	10001068 <printf>
  audio_reset_audio_core();
  audio_enable_read_interrupt();
  audio_enable_write_interrupt();
  
  // Check how many data words the read FIFO for the right channel has.
  for (i = 0; i < 5; i++) {
1000100c:	e0bc1717 	ldw	r2,-4004(fp)
10001010:	10800044 	addi	r2,r2,1
10001014:	e0bc1715 	stw	r2,-4004(fp)
10001018:	e0bc1717 	ldw	r2,-4004(fp)
1000101c:	10800150 	cmplti	r2,r2,5
10001020:	103fee1e 	bne	r2,zero,10000fdc <__alt_data_end+0xf8000fdc>
	  printf("Left available: %u\n", audio_read_fifo_avail(AUDIO_LEFT));
	  printf("Right available: %u\n", audio_read_fifo_avail(AUDIO_RIGHT));
  }
  return 0;
10001024:	0005883a 	mov	r2,zero
  printf("Reading buffer...");
  audio_record_r(buf, sizeof(buf));
  printf(" Done.\n");
  
  return 0;
}
10001028:	e037883a 	mov	sp,fp
1000102c:	dfc00117 	ldw	ra,4(sp)
10001030:	df000017 	ldw	fp,0(sp)
10001034:	dec00204 	addi	sp,sp,8
10001038:	f800283a 	ret

1000103c <_printf_r>:
1000103c:	defffd04 	addi	sp,sp,-12
10001040:	dfc00015 	stw	ra,0(sp)
10001044:	d9800115 	stw	r6,4(sp)
10001048:	d9c00215 	stw	r7,8(sp)
1000104c:	280d883a 	mov	r6,r5
10001050:	21400217 	ldw	r5,8(r4)
10001054:	d9c00104 	addi	r7,sp,4
10001058:	00010a40 	call	100010a4 <___vfprintf_internal_r>
1000105c:	dfc00017 	ldw	ra,0(sp)
10001060:	dec00304 	addi	sp,sp,12
10001064:	f800283a 	ret

10001068 <printf>:
10001068:	defffc04 	addi	sp,sp,-16
1000106c:	dfc00015 	stw	ra,0(sp)
10001070:	d9400115 	stw	r5,4(sp)
10001074:	d9800215 	stw	r6,8(sp)
10001078:	d9c00315 	stw	r7,12(sp)
1000107c:	00840074 	movhi	r2,4097
10001080:	10872204 	addi	r2,r2,7304
10001084:	10800017 	ldw	r2,0(r2)
10001088:	200b883a 	mov	r5,r4
1000108c:	d9800104 	addi	r6,sp,4
10001090:	11000217 	ldw	r4,8(r2)
10001094:	00031f80 	call	100031f8 <__vfprintf_internal>
10001098:	dfc00017 	ldw	ra,0(sp)
1000109c:	dec00404 	addi	sp,sp,16
100010a0:	f800283a 	ret

100010a4 <___vfprintf_internal_r>:
100010a4:	defeb604 	addi	sp,sp,-1320
100010a8:	dfc14915 	stw	ra,1316(sp)
100010ac:	dcc14315 	stw	r19,1292(sp)
100010b0:	dc414115 	stw	r17,1284(sp)
100010b4:	d9012c15 	stw	r4,1200(sp)
100010b8:	2827883a 	mov	r19,r5
100010bc:	3023883a 	mov	r17,r6
100010c0:	d9c12f15 	stw	r7,1212(sp)
100010c4:	df014815 	stw	fp,1312(sp)
100010c8:	ddc14715 	stw	r23,1308(sp)
100010cc:	dd814615 	stw	r22,1304(sp)
100010d0:	dd414515 	stw	r21,1300(sp)
100010d4:	dd014415 	stw	r20,1296(sp)
100010d8:	dc814215 	stw	r18,1288(sp)
100010dc:	dc014015 	stw	r16,1280(sp)
100010e0:	00057dc0 	call	100057dc <_localeconv_r>
100010e4:	10800017 	ldw	r2,0(r2)
100010e8:	1009883a 	mov	r4,r2
100010ec:	d8813415 	stw	r2,1232(sp)
100010f0:	00077640 	call	10007764 <strlen>
100010f4:	d8813815 	stw	r2,1248(sp)
100010f8:	d8812c17 	ldw	r2,1200(sp)
100010fc:	10000226 	beq	r2,zero,10001108 <___vfprintf_internal_r+0x64>
10001100:	10800e17 	ldw	r2,56(r2)
10001104:	10010826 	beq	r2,zero,10001528 <___vfprintf_internal_r+0x484>
10001108:	9880030b 	ldhu	r2,12(r19)
1000110c:	1108000c 	andi	r4,r2,8192
10001110:	1007883a 	mov	r3,r2
10001114:	2000071e 	bne	r4,zero,10001134 <___vfprintf_internal_r+0x90>
10001118:	99001917 	ldw	r4,100(r19)
1000111c:	10c80014 	ori	r3,r2,8192
10001120:	00b7ffc4 	movi	r2,-8193
10001124:	2088703a 	and	r4,r4,r2
10001128:	98c0030d 	sth	r3,12(r19)
1000112c:	1805883a 	mov	r2,r3
10001130:	99001915 	stw	r4,100(r19)
10001134:	1900020c 	andi	r4,r3,8
10001138:	2000ab26 	beq	r4,zero,100013e8 <___vfprintf_internal_r+0x344>
1000113c:	99000417 	ldw	r4,16(r19)
10001140:	2000a926 	beq	r4,zero,100013e8 <___vfprintf_internal_r+0x344>
10001144:	18c0068c 	andi	r3,r3,26
10001148:	01000284 	movi	r4,10
1000114c:	1900af26 	beq	r3,r4,1000140c <___vfprintf_internal_r+0x368>
10001150:	d9010dc4 	addi	r4,sp,1079
10001154:	d9410e04 	addi	r5,sp,1080
10001158:	d8800404 	addi	r2,sp,16
1000115c:	2907c83a 	sub	r3,r5,r4
10001160:	d9012815 	stw	r4,1184(sp)
10001164:	d9412915 	stw	r5,1188(sp)
10001168:	d8811e15 	stw	r2,1144(sp)
1000116c:	d8012015 	stw	zero,1152(sp)
10001170:	d8011f15 	stw	zero,1148(sp)
10001174:	d8013515 	stw	zero,1236(sp)
10001178:	d8013715 	stw	zero,1244(sp)
1000117c:	d8013915 	stw	zero,1252(sp)
10001180:	d8013b15 	stw	zero,1260(sp)
10001184:	d8013a15 	stw	zero,1256(sp)
10001188:	d8013115 	stw	zero,1220(sp)
1000118c:	1011883a 	mov	r8,r2
10001190:	05c40074 	movhi	r23,4097
10001194:	bdffc584 	addi	r23,r23,-234
10001198:	d8c13d15 	stw	r3,1268(sp)
1000119c:	88800007 	ldb	r2,0(r17)
100011a0:	10021126 	beq	r2,zero,100019e8 <___vfprintf_internal_r+0x944>
100011a4:	00c00944 	movi	r3,37
100011a8:	8821883a 	mov	r16,r17
100011ac:	10c0021e 	bne	r2,r3,100011b8 <___vfprintf_internal_r+0x114>
100011b0:	00001406 	br	10001204 <___vfprintf_internal_r+0x160>
100011b4:	10c00326 	beq	r2,r3,100011c4 <___vfprintf_internal_r+0x120>
100011b8:	84000044 	addi	r16,r16,1
100011bc:	80800007 	ldb	r2,0(r16)
100011c0:	103ffc1e 	bne	r2,zero,100011b4 <__alt_data_end+0xf80011b4>
100011c4:	8465c83a 	sub	r18,r16,r17
100011c8:	90000e26 	beq	r18,zero,10001204 <___vfprintf_internal_r+0x160>
100011cc:	d8c12017 	ldw	r3,1152(sp)
100011d0:	d8811f17 	ldw	r2,1148(sp)
100011d4:	44400015 	stw	r17,0(r8)
100011d8:	1c87883a 	add	r3,r3,r18
100011dc:	10800044 	addi	r2,r2,1
100011e0:	d8c12015 	stw	r3,1152(sp)
100011e4:	44800115 	stw	r18,4(r8)
100011e8:	d8811f15 	stw	r2,1148(sp)
100011ec:	00c001c4 	movi	r3,7
100011f0:	1880bb16 	blt	r3,r2,100014e0 <___vfprintf_internal_r+0x43c>
100011f4:	42000204 	addi	r8,r8,8
100011f8:	d9013117 	ldw	r4,1220(sp)
100011fc:	2489883a 	add	r4,r4,r18
10001200:	d9013115 	stw	r4,1220(sp)
10001204:	80800007 	ldb	r2,0(r16)
10001208:	1000bc26 	beq	r2,zero,100014fc <___vfprintf_internal_r+0x458>
1000120c:	053fffc4 	movi	r20,-1
10001210:	84400044 	addi	r17,r16,1
10001214:	84800047 	ldb	r18,1(r16)
10001218:	d8012785 	stb	zero,1182(sp)
1000121c:	002d883a 	mov	r22,zero
10001220:	d8013015 	stw	zero,1216(sp)
10001224:	d8012a15 	stw	zero,1192(sp)
10001228:	04001604 	movi	r16,88
1000122c:	05400244 	movi	r21,9
10001230:	4039883a 	mov	fp,r8
10001234:	a007883a 	mov	r3,r20
10001238:	8c400044 	addi	r17,r17,1
1000123c:	90bff804 	addi	r2,r18,-32
10001240:	80832036 	bltu	r16,r2,10001ec4 <___vfprintf_internal_r+0xe20>
10001244:	1085883a 	add	r2,r2,r2
10001248:	1085883a 	add	r2,r2,r2
1000124c:	01440034 	movhi	r5,4096
10001250:	29449804 	addi	r5,r5,4704
10001254:	1145883a 	add	r2,r2,r5
10001258:	10800017 	ldw	r2,0(r2)
1000125c:	1000683a 	jmp	r2
10001260:	10001c64 	muli	zero,r2,113
10001264:	10001ec4 	addi	zero,r2,123
10001268:	10001ec4 	addi	zero,r2,123
1000126c:	10001c80 	call	110001c8 <_gp+0xfe654c>
10001270:	10001ec4 	addi	zero,r2,123
10001274:	10001ec4 	addi	zero,r2,123
10001278:	10001ec4 	addi	zero,r2,123
1000127c:	10001ec4 	addi	zero,r2,123
10001280:	10001ec4 	addi	zero,r2,123
10001284:	10001ec4 	addi	zero,r2,123
10001288:	10001c94 	ori	zero,r2,114
1000128c:	10001534 	orhi	zero,r2,84
10001290:	10001ec4 	addi	zero,r2,123
10001294:	100013d4 	ori	zero,r2,79
10001298:	10001540 	call	11000154 <_gp+0xfe64d8>
1000129c:	10001ec4 	addi	zero,r2,123
100012a0:	10001590 	cmplti	zero,r2,86
100012a4:	10001aa0 	cmpeqi	zero,r2,106
100012a8:	10001aa0 	cmpeqi	zero,r2,106
100012ac:	10001aa0 	cmpeqi	zero,r2,106
100012b0:	10001aa0 	cmpeqi	zero,r2,106
100012b4:	10001aa0 	cmpeqi	zero,r2,106
100012b8:	10001aa0 	cmpeqi	zero,r2,106
100012bc:	10001aa0 	cmpeqi	zero,r2,106
100012c0:	10001aa0 	cmpeqi	zero,r2,106
100012c4:	10001aa0 	cmpeqi	zero,r2,106
100012c8:	10001ec4 	addi	zero,r2,123
100012cc:	10001ec4 	addi	zero,r2,123
100012d0:	10001ec4 	addi	zero,r2,123
100012d4:	10001ec4 	addi	zero,r2,123
100012d8:	10001ec4 	addi	zero,r2,123
100012dc:	10001ec4 	addi	zero,r2,123
100012e0:	10001ec4 	addi	zero,r2,123
100012e4:	10001ec4 	addi	zero,r2,123
100012e8:	10001ec4 	addi	zero,r2,123
100012ec:	10001ec4 	addi	zero,r2,123
100012f0:	100015a4 	muli	zero,r2,86
100012f4:	100019f0 	cmpltui	zero,r2,103
100012f8:	10001ec4 	addi	zero,r2,123
100012fc:	100019f0 	cmpltui	zero,r2,103
10001300:	10001ec4 	addi	zero,r2,123
10001304:	10001ec4 	addi	zero,r2,123
10001308:	10001ec4 	addi	zero,r2,123
1000130c:	10001ec4 	addi	zero,r2,123
10001310:	10001ae8 	cmpgeui	zero,r2,107
10001314:	10001ec4 	addi	zero,r2,123
10001318:	10001ec4 	addi	zero,r2,123
1000131c:	10001afc 	xorhi	zero,r2,107
10001320:	10001ec4 	addi	zero,r2,123
10001324:	10001ec4 	addi	zero,r2,123
10001328:	10001ec4 	addi	zero,r2,123
1000132c:	10001ec4 	addi	zero,r2,123
10001330:	10001ec4 	addi	zero,r2,123
10001334:	10001b44 	addi	zero,r2,109
10001338:	10001ec4 	addi	zero,r2,123
1000133c:	10001ec4 	addi	zero,r2,123
10001340:	10001cb8 	rdprs	zero,r2,114
10001344:	10001ec4 	addi	zero,r2,123
10001348:	10001ec4 	addi	zero,r2,123
1000134c:	10001ec4 	addi	zero,r2,123
10001350:	10001ec4 	addi	zero,r2,123
10001354:	10001ec4 	addi	zero,r2,123
10001358:	10001ec4 	addi	zero,r2,123
1000135c:	10001ec4 	addi	zero,r2,123
10001360:	10001ec4 	addi	zero,r2,123
10001364:	10001ec4 	addi	zero,r2,123
10001368:	10001ec4 	addi	zero,r2,123
1000136c:	10001bbc 	xorhi	zero,r2,110
10001370:	10001d34 	orhi	zero,r2,116
10001374:	100019f0 	cmpltui	zero,r2,103
10001378:	100019f0 	cmpltui	zero,r2,103
1000137c:	100019f0 	cmpltui	zero,r2,103
10001380:	10001d00 	call	110001d0 <_gp+0xfe6554>
10001384:	10001d34 	orhi	zero,r2,116
10001388:	10001ec4 	addi	zero,r2,123
1000138c:	10001ec4 	addi	zero,r2,123
10001390:	10001d14 	ori	zero,r2,116
10001394:	10001ec4 	addi	zero,r2,123
10001398:	10001b84 	addi	zero,r2,110
1000139c:	10001e44 	addi	zero,r2,121
100013a0:	10001df0 	cmpltui	zero,r2,119
100013a4:	10001d74 	orhi	zero,r2,117
100013a8:	10001ec4 	addi	zero,r2,123
100013ac:	10001d88 	cmpgei	zero,r2,118
100013b0:	10001ec4 	addi	zero,r2,123
100013b4:	10001e84 	addi	zero,r2,122
100013b8:	10001ec4 	addi	zero,r2,123
100013bc:	10001ec4 	addi	zero,r2,123
100013c0:	10001bfc 	xorhi	zero,r2,111
100013c4:	d9413017 	ldw	r5,1216(sp)
100013c8:	d8812f15 	stw	r2,1212(sp)
100013cc:	014bc83a 	sub	r5,zero,r5
100013d0:	d9413015 	stw	r5,1216(sp)
100013d4:	d8812a17 	ldw	r2,1192(sp)
100013d8:	10800114 	ori	r2,r2,4
100013dc:	d8812a15 	stw	r2,1192(sp)
100013e0:	8c800007 	ldb	r18,0(r17)
100013e4:	003f9406 	br	10001238 <__alt_data_end+0xf8001238>
100013e8:	d9012c17 	ldw	r4,1200(sp)
100013ec:	980b883a 	mov	r5,r19
100013f0:	000321c0 	call	1000321c <__swsetup_r>
100013f4:	10002d1e 	bne	r2,zero,100014ac <___vfprintf_internal_r+0x408>
100013f8:	9880030b 	ldhu	r2,12(r19)
100013fc:	01000284 	movi	r4,10
10001400:	1007883a 	mov	r3,r2
10001404:	18c0068c 	andi	r3,r3,26
10001408:	193f511e 	bne	r3,r4,10001150 <__alt_data_end+0xf8001150>
1000140c:	98c0038b 	ldhu	r3,14(r19)
10001410:	193fffcc 	andi	r4,r3,65535
10001414:	2120001c 	xori	r4,r4,32768
10001418:	21200004 	addi	r4,r4,-32768
1000141c:	203f4c16 	blt	r4,zero,10001150 <__alt_data_end+0xf8001150>
10001420:	9ac01917 	ldw	r11,100(r19)
10001424:	9a800717 	ldw	r10,28(r19)
10001428:	9a400917 	ldw	r9,36(r19)
1000142c:	d9012c17 	ldw	r4,1200(sp)
10001430:	d9c12f17 	ldw	r7,1212(sp)
10001434:	02010004 	movi	r8,1024
10001438:	10bfff4c 	andi	r2,r2,65533
1000143c:	d8c1078d 	sth	r3,1054(sp)
10001440:	d9410404 	addi	r5,sp,1040
10001444:	d8c00404 	addi	r3,sp,16
10001448:	880d883a 	mov	r6,r17
1000144c:	d881070d 	sth	r2,1052(sp)
10001450:	dac11d15 	stw	r11,1140(sp)
10001454:	da810b15 	stw	r10,1068(sp)
10001458:	da410d15 	stw	r9,1076(sp)
1000145c:	d8c10415 	stw	r3,1040(sp)
10001460:	d8c10815 	stw	r3,1056(sp)
10001464:	da010615 	stw	r8,1048(sp)
10001468:	da010915 	stw	r8,1060(sp)
1000146c:	d8010a15 	stw	zero,1064(sp)
10001470:	00010a40 	call	100010a4 <___vfprintf_internal_r>
10001474:	1021883a 	mov	r16,r2
10001478:	10000416 	blt	r2,zero,1000148c <___vfprintf_internal_r+0x3e8>
1000147c:	d9012c17 	ldw	r4,1200(sp)
10001480:	d9410404 	addi	r5,sp,1040
10001484:	0004bb80 	call	10004bb8 <_fflush_r>
10001488:	10072a1e 	bne	r2,zero,10003134 <___vfprintf_internal_r+0x2090>
1000148c:	d881070b 	ldhu	r2,1052(sp)
10001490:	1080100c 	andi	r2,r2,64
10001494:	10000326 	beq	r2,zero,100014a4 <___vfprintf_internal_r+0x400>
10001498:	9880030b 	ldhu	r2,12(r19)
1000149c:	10801014 	ori	r2,r2,64
100014a0:	9880030d 	sth	r2,12(r19)
100014a4:	8005883a 	mov	r2,r16
100014a8:	00000106 	br	100014b0 <___vfprintf_internal_r+0x40c>
100014ac:	00bfffc4 	movi	r2,-1
100014b0:	dfc14917 	ldw	ra,1316(sp)
100014b4:	df014817 	ldw	fp,1312(sp)
100014b8:	ddc14717 	ldw	r23,1308(sp)
100014bc:	dd814617 	ldw	r22,1304(sp)
100014c0:	dd414517 	ldw	r21,1300(sp)
100014c4:	dd014417 	ldw	r20,1296(sp)
100014c8:	dcc14317 	ldw	r19,1292(sp)
100014cc:	dc814217 	ldw	r18,1288(sp)
100014d0:	dc414117 	ldw	r17,1284(sp)
100014d4:	dc014017 	ldw	r16,1280(sp)
100014d8:	dec14a04 	addi	sp,sp,1320
100014dc:	f800283a 	ret
100014e0:	d9012c17 	ldw	r4,1200(sp)
100014e4:	980b883a 	mov	r5,r19
100014e8:	d9811e04 	addi	r6,sp,1144
100014ec:	00078ec0 	call	100078ec <__sprint_r>
100014f0:	1000081e 	bne	r2,zero,10001514 <___vfprintf_internal_r+0x470>
100014f4:	da000404 	addi	r8,sp,16
100014f8:	003f3f06 	br	100011f8 <__alt_data_end+0xf80011f8>
100014fc:	d8812017 	ldw	r2,1152(sp)
10001500:	10000426 	beq	r2,zero,10001514 <___vfprintf_internal_r+0x470>
10001504:	d9012c17 	ldw	r4,1200(sp)
10001508:	980b883a 	mov	r5,r19
1000150c:	d9811e04 	addi	r6,sp,1144
10001510:	00078ec0 	call	100078ec <__sprint_r>
10001514:	9880030b 	ldhu	r2,12(r19)
10001518:	1080100c 	andi	r2,r2,64
1000151c:	103fe31e 	bne	r2,zero,100014ac <__alt_data_end+0xf80014ac>
10001520:	d8813117 	ldw	r2,1220(sp)
10001524:	003fe206 	br	100014b0 <__alt_data_end+0xf80014b0>
10001528:	d9012c17 	ldw	r4,1200(sp)
1000152c:	0004ed80 	call	10004ed8 <__sinit>
10001530:	003ef506 	br	10001108 <__alt_data_end+0xf8001108>
10001534:	05800ac4 	movi	r22,43
10001538:	8c800007 	ldb	r18,0(r17)
1000153c:	003f3e06 	br	10001238 <__alt_data_end+0xf8001238>
10001540:	8c800007 	ldb	r18,0(r17)
10001544:	00c00a84 	movi	r3,42
10001548:	88800044 	addi	r2,r17,1
1000154c:	90c6fb26 	beq	r18,r3,1000313c <___vfprintf_internal_r+0x2098>
10001550:	953ff404 	addi	r20,r18,-48
10001554:	1023883a 	mov	r17,r2
10001558:	0007883a 	mov	r3,zero
1000155c:	ad3f3736 	bltu	r21,r20,1000123c <__alt_data_end+0xf800123c>
10001560:	0009883a 	mov	r4,zero
10001564:	01400284 	movi	r5,10
10001568:	000b0780 	call	1000b078 <__mulsi3>
1000156c:	8c800007 	ldb	r18,0(r17)
10001570:	a089883a 	add	r4,r20,r2
10001574:	8c400044 	addi	r17,r17,1
10001578:	953ff404 	addi	r20,r18,-48
1000157c:	ad3ff92e 	bgeu	r21,r20,10001564 <__alt_data_end+0xf8001564>
10001580:	2007883a 	mov	r3,r4
10001584:	203f2d0e 	bge	r4,zero,1000123c <__alt_data_end+0xf800123c>
10001588:	00ffffc4 	movi	r3,-1
1000158c:	003f2b06 	br	1000123c <__alt_data_end+0xf800123c>
10001590:	d9412a17 	ldw	r5,1192(sp)
10001594:	29402014 	ori	r5,r5,128
10001598:	d9412a15 	stw	r5,1192(sp)
1000159c:	8c800007 	ldb	r18,0(r17)
100015a0:	003f2506 	br	10001238 <__alt_data_end+0xf8001238>
100015a4:	d9412a17 	ldw	r5,1192(sp)
100015a8:	1829883a 	mov	r20,r3
100015ac:	dd812785 	stb	r22,1182(sp)
100015b0:	29400414 	ori	r5,r5,16
100015b4:	d9412a15 	stw	r5,1192(sp)
100015b8:	d8c12a17 	ldw	r3,1192(sp)
100015bc:	e011883a 	mov	r8,fp
100015c0:	1880080c 	andi	r2,r3,32
100015c4:	1001e126 	beq	r2,zero,10001d4c <___vfprintf_internal_r+0xca8>
100015c8:	d9012f17 	ldw	r4,1212(sp)
100015cc:	20800117 	ldw	r2,4(r4)
100015d0:	25400017 	ldw	r21,0(r4)
100015d4:	21000204 	addi	r4,r4,8
100015d8:	d9012f15 	stw	r4,1212(sp)
100015dc:	102d883a 	mov	r22,r2
100015e0:	10046916 	blt	r2,zero,10002788 <___vfprintf_internal_r+0x16e4>
100015e4:	df012783 	ldbu	fp,1182(sp)
100015e8:	00c00044 	movi	r3,1
100015ec:	ad84b03a 	or	r2,r21,r22
100015f0:	a0000416 	blt	r20,zero,10001604 <___vfprintf_internal_r+0x560>
100015f4:	d9412a17 	ldw	r5,1192(sp)
100015f8:	013fdfc4 	movi	r4,-129
100015fc:	290a703a 	and	r5,r5,r4
10001600:	d9412a15 	stw	r5,1192(sp)
10001604:	1002491e 	bne	r2,zero,10001f2c <___vfprintf_internal_r+0xe88>
10001608:	a002481e 	bne	r20,zero,10001f2c <___vfprintf_internal_r+0xe88>
1000160c:	18c03fcc 	andi	r3,r3,255
10001610:	1803871e 	bne	r3,zero,10002430 <___vfprintf_internal_r+0x138c>
10001614:	d9012a17 	ldw	r4,1192(sp)
10001618:	2080004c 	andi	r2,r4,1
1000161c:	10038426 	beq	r2,zero,10002430 <___vfprintf_internal_r+0x138c>
10001620:	d9413d17 	ldw	r5,1268(sp)
10001624:	00800c04 	movi	r2,48
10001628:	d8810dc5 	stb	r2,1079(sp)
1000162c:	d9412e15 	stw	r5,1208(sp)
10001630:	dc010dc4 	addi	r16,sp,1079
10001634:	d8812e17 	ldw	r2,1208(sp)
10001638:	1500010e 	bge	r2,r20,10001640 <___vfprintf_internal_r+0x59c>
1000163c:	a005883a 	mov	r2,r20
10001640:	d8812b15 	stw	r2,1196(sp)
10001644:	d8013315 	stw	zero,1228(sp)
10001648:	e0803fcc 	andi	r2,fp,255
1000164c:	1080201c 	xori	r2,r2,128
10001650:	10bfe004 	addi	r2,r2,-128
10001654:	10000326 	beq	r2,zero,10001664 <___vfprintf_internal_r+0x5c0>
10001658:	d8c12b17 	ldw	r3,1196(sp)
1000165c:	18c00044 	addi	r3,r3,1
10001660:	d8c12b15 	stw	r3,1196(sp)
10001664:	d8c12a17 	ldw	r3,1192(sp)
10001668:	18c0008c 	andi	r3,r3,2
1000166c:	d8c12d15 	stw	r3,1204(sp)
10001670:	18000326 	beq	r3,zero,10001680 <___vfprintf_internal_r+0x5dc>
10001674:	d8c12b17 	ldw	r3,1196(sp)
10001678:	18c00084 	addi	r3,r3,2
1000167c:	d8c12b15 	stw	r3,1196(sp)
10001680:	d8c12a17 	ldw	r3,1192(sp)
10001684:	18c0210c 	andi	r3,r3,132
10001688:	d8c13215 	stw	r3,1224(sp)
1000168c:	1802151e 	bne	r3,zero,10001ee4 <___vfprintf_internal_r+0xe40>
10001690:	d9013017 	ldw	r4,1216(sp)
10001694:	d8c12b17 	ldw	r3,1196(sp)
10001698:	20f9c83a 	sub	fp,r4,r3
1000169c:	0702110e 	bge	zero,fp,10001ee4 <___vfprintf_internal_r+0xe40>
100016a0:	02400404 	movi	r9,16
100016a4:	d8c12017 	ldw	r3,1152(sp)
100016a8:	d8811f17 	ldw	r2,1148(sp)
100016ac:	4f059a0e 	bge	r9,fp,10002d18 <___vfprintf_internal_r+0x1c74>
100016b0:	8809883a 	mov	r4,r17
100016b4:	01440074 	movhi	r5,4097
100016b8:	297fc984 	addi	r5,r5,-218
100016bc:	dc013c15 	stw	r16,1264(sp)
100016c0:	e023883a 	mov	r17,fp
100016c4:	d9413615 	stw	r5,1240(sp)
100016c8:	482d883a 	mov	r22,r9
100016cc:	054001c4 	movi	r21,7
100016d0:	dc012c17 	ldw	r16,1200(sp)
100016d4:	2039883a 	mov	fp,r4
100016d8:	00000306 	br	100016e8 <___vfprintf_internal_r+0x644>
100016dc:	8c7ffc04 	addi	r17,r17,-16
100016e0:	42000204 	addi	r8,r8,8
100016e4:	b440130e 	bge	r22,r17,10001734 <___vfprintf_internal_r+0x690>
100016e8:	18c00404 	addi	r3,r3,16
100016ec:	10800044 	addi	r2,r2,1
100016f0:	01040074 	movhi	r4,4097
100016f4:	213fc984 	addi	r4,r4,-218
100016f8:	41000015 	stw	r4,0(r8)
100016fc:	45800115 	stw	r22,4(r8)
10001700:	d8c12015 	stw	r3,1152(sp)
10001704:	d8811f15 	stw	r2,1148(sp)
10001708:	a8bff40e 	bge	r21,r2,100016dc <__alt_data_end+0xf80016dc>
1000170c:	8009883a 	mov	r4,r16
10001710:	980b883a 	mov	r5,r19
10001714:	d9811e04 	addi	r6,sp,1144
10001718:	00078ec0 	call	100078ec <__sprint_r>
1000171c:	103f7d1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10001720:	8c7ffc04 	addi	r17,r17,-16
10001724:	d8c12017 	ldw	r3,1152(sp)
10001728:	d8811f17 	ldw	r2,1148(sp)
1000172c:	da000404 	addi	r8,sp,16
10001730:	b47fed16 	blt	r22,r17,100016e8 <__alt_data_end+0xf80016e8>
10001734:	dc013c17 	ldw	r16,1264(sp)
10001738:	e009883a 	mov	r4,fp
1000173c:	8839883a 	mov	fp,r17
10001740:	2023883a 	mov	r17,r4
10001744:	d9413617 	ldw	r5,1240(sp)
10001748:	e0c7883a 	add	r3,fp,r3
1000174c:	10800044 	addi	r2,r2,1
10001750:	41400015 	stw	r5,0(r8)
10001754:	47000115 	stw	fp,4(r8)
10001758:	d8c12015 	stw	r3,1152(sp)
1000175c:	d8811f15 	stw	r2,1148(sp)
10001760:	010001c4 	movi	r4,7
10001764:	20836b16 	blt	r4,r2,10002514 <___vfprintf_internal_r+0x1470>
10001768:	d8812787 	ldb	r2,1182(sp)
1000176c:	42000204 	addi	r8,r8,8
10001770:	10000c26 	beq	r2,zero,100017a4 <___vfprintf_internal_r+0x700>
10001774:	d8811f17 	ldw	r2,1148(sp)
10001778:	d9012784 	addi	r4,sp,1182
1000177c:	18c00044 	addi	r3,r3,1
10001780:	10800044 	addi	r2,r2,1
10001784:	41000015 	stw	r4,0(r8)
10001788:	01000044 	movi	r4,1
1000178c:	41000115 	stw	r4,4(r8)
10001790:	d8c12015 	stw	r3,1152(sp)
10001794:	d8811f15 	stw	r2,1148(sp)
10001798:	010001c4 	movi	r4,7
1000179c:	2082ef16 	blt	r4,r2,1000235c <___vfprintf_internal_r+0x12b8>
100017a0:	42000204 	addi	r8,r8,8
100017a4:	d8812d17 	ldw	r2,1204(sp)
100017a8:	10000c26 	beq	r2,zero,100017dc <___vfprintf_internal_r+0x738>
100017ac:	d8811f17 	ldw	r2,1148(sp)
100017b0:	d9012704 	addi	r4,sp,1180
100017b4:	18c00084 	addi	r3,r3,2
100017b8:	10800044 	addi	r2,r2,1
100017bc:	41000015 	stw	r4,0(r8)
100017c0:	01000084 	movi	r4,2
100017c4:	41000115 	stw	r4,4(r8)
100017c8:	d8c12015 	stw	r3,1152(sp)
100017cc:	d8811f15 	stw	r2,1148(sp)
100017d0:	010001c4 	movi	r4,7
100017d4:	2082e916 	blt	r4,r2,1000237c <___vfprintf_internal_r+0x12d8>
100017d8:	42000204 	addi	r8,r8,8
100017dc:	d9013217 	ldw	r4,1224(sp)
100017e0:	00802004 	movi	r2,128
100017e4:	20823226 	beq	r4,r2,100020b0 <___vfprintf_internal_r+0x100c>
100017e8:	d9012e17 	ldw	r4,1208(sp)
100017ec:	a129c83a 	sub	r20,r20,r4
100017f0:	05002d0e 	bge	zero,r20,100018a8 <___vfprintf_internal_r+0x804>
100017f4:	05800404 	movi	r22,16
100017f8:	d8811f17 	ldw	r2,1148(sp)
100017fc:	05440074 	movhi	r21,4097
10001800:	ad7fc584 	addi	r21,r21,-234
10001804:	b5001f0e 	bge	r22,r20,10001884 <___vfprintf_internal_r+0x7e0>
10001808:	8809883a 	mov	r4,r17
1000180c:	dc012d15 	stw	r16,1204(sp)
10001810:	a023883a 	mov	r17,r20
10001814:	070001c4 	movi	fp,7
10001818:	dc012c17 	ldw	r16,1200(sp)
1000181c:	2029883a 	mov	r20,r4
10001820:	00000306 	br	10001830 <___vfprintf_internal_r+0x78c>
10001824:	8c7ffc04 	addi	r17,r17,-16
10001828:	42000204 	addi	r8,r8,8
1000182c:	b440110e 	bge	r22,r17,10001874 <___vfprintf_internal_r+0x7d0>
10001830:	18c00404 	addi	r3,r3,16
10001834:	10800044 	addi	r2,r2,1
10001838:	45c00015 	stw	r23,0(r8)
1000183c:	45800115 	stw	r22,4(r8)
10001840:	d8c12015 	stw	r3,1152(sp)
10001844:	d8811f15 	stw	r2,1148(sp)
10001848:	e0bff60e 	bge	fp,r2,10001824 <__alt_data_end+0xf8001824>
1000184c:	8009883a 	mov	r4,r16
10001850:	980b883a 	mov	r5,r19
10001854:	d9811e04 	addi	r6,sp,1144
10001858:	00078ec0 	call	100078ec <__sprint_r>
1000185c:	103f2d1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10001860:	8c7ffc04 	addi	r17,r17,-16
10001864:	d8c12017 	ldw	r3,1152(sp)
10001868:	d8811f17 	ldw	r2,1148(sp)
1000186c:	da000404 	addi	r8,sp,16
10001870:	b47fef16 	blt	r22,r17,10001830 <__alt_data_end+0xf8001830>
10001874:	dc012d17 	ldw	r16,1204(sp)
10001878:	a009883a 	mov	r4,r20
1000187c:	8829883a 	mov	r20,r17
10001880:	2023883a 	mov	r17,r4
10001884:	1d07883a 	add	r3,r3,r20
10001888:	10800044 	addi	r2,r2,1
1000188c:	45400015 	stw	r21,0(r8)
10001890:	45000115 	stw	r20,4(r8)
10001894:	d8c12015 	stw	r3,1152(sp)
10001898:	d8811f15 	stw	r2,1148(sp)
1000189c:	010001c4 	movi	r4,7
100018a0:	2082a616 	blt	r4,r2,1000233c <___vfprintf_internal_r+0x1298>
100018a4:	42000204 	addi	r8,r8,8
100018a8:	d9412a17 	ldw	r5,1192(sp)
100018ac:	2880400c 	andi	r2,r5,256
100018b0:	1001b51e 	bne	r2,zero,10001f88 <___vfprintf_internal_r+0xee4>
100018b4:	d8812e17 	ldw	r2,1208(sp)
100018b8:	d9012e17 	ldw	r4,1208(sp)
100018bc:	44000015 	stw	r16,0(r8)
100018c0:	1887883a 	add	r3,r3,r2
100018c4:	d8811f17 	ldw	r2,1148(sp)
100018c8:	10800044 	addi	r2,r2,1
100018cc:	41000115 	stw	r4,4(r8)
100018d0:	d8c12015 	stw	r3,1152(sp)
100018d4:	d8811f15 	stw	r2,1148(sp)
100018d8:	010001c4 	movi	r4,7
100018dc:	20818b16 	blt	r4,r2,10001f0c <___vfprintf_internal_r+0xe68>
100018e0:	42000204 	addi	r8,r8,8
100018e4:	d9412a17 	ldw	r5,1192(sp)
100018e8:	2880010c 	andi	r2,r5,4
100018ec:	10003226 	beq	r2,zero,100019b8 <___vfprintf_internal_r+0x914>
100018f0:	d8813017 	ldw	r2,1216(sp)
100018f4:	d9012b17 	ldw	r4,1196(sp)
100018f8:	1121c83a 	sub	r16,r2,r4
100018fc:	04002e0e 	bge	zero,r16,100019b8 <___vfprintf_internal_r+0x914>
10001900:	04800404 	movi	r18,16
10001904:	d8811f17 	ldw	r2,1148(sp)
10001908:	9405240e 	bge	r18,r16,10002d9c <___vfprintf_internal_r+0x1cf8>
1000190c:	01040074 	movhi	r4,4097
10001910:	213fc984 	addi	r4,r4,-218
10001914:	d9013615 	stw	r4,1240(sp)
10001918:	050001c4 	movi	r20,7
1000191c:	dd412c17 	ldw	r21,1200(sp)
10001920:	00000306 	br	10001930 <___vfprintf_internal_r+0x88c>
10001924:	843ffc04 	addi	r16,r16,-16
10001928:	42000204 	addi	r8,r8,8
1000192c:	9400130e 	bge	r18,r16,1000197c <___vfprintf_internal_r+0x8d8>
10001930:	18c00404 	addi	r3,r3,16
10001934:	10800044 	addi	r2,r2,1
10001938:	01440074 	movhi	r5,4097
1000193c:	297fc984 	addi	r5,r5,-218
10001940:	41400015 	stw	r5,0(r8)
10001944:	44800115 	stw	r18,4(r8)
10001948:	d8c12015 	stw	r3,1152(sp)
1000194c:	d8811f15 	stw	r2,1148(sp)
10001950:	a0bff40e 	bge	r20,r2,10001924 <__alt_data_end+0xf8001924>
10001954:	a809883a 	mov	r4,r21
10001958:	980b883a 	mov	r5,r19
1000195c:	d9811e04 	addi	r6,sp,1144
10001960:	00078ec0 	call	100078ec <__sprint_r>
10001964:	103eeb1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10001968:	843ffc04 	addi	r16,r16,-16
1000196c:	d8c12017 	ldw	r3,1152(sp)
10001970:	d8811f17 	ldw	r2,1148(sp)
10001974:	da000404 	addi	r8,sp,16
10001978:	943fed16 	blt	r18,r16,10001930 <__alt_data_end+0xf8001930>
1000197c:	d9013617 	ldw	r4,1240(sp)
10001980:	1c07883a 	add	r3,r3,r16
10001984:	10800044 	addi	r2,r2,1
10001988:	41000015 	stw	r4,0(r8)
1000198c:	44000115 	stw	r16,4(r8)
10001990:	d8c12015 	stw	r3,1152(sp)
10001994:	d8811f15 	stw	r2,1148(sp)
10001998:	010001c4 	movi	r4,7
1000199c:	2080060e 	bge	r4,r2,100019b8 <___vfprintf_internal_r+0x914>
100019a0:	d9012c17 	ldw	r4,1200(sp)
100019a4:	980b883a 	mov	r5,r19
100019a8:	d9811e04 	addi	r6,sp,1144
100019ac:	00078ec0 	call	100078ec <__sprint_r>
100019b0:	103ed81e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
100019b4:	d8c12017 	ldw	r3,1152(sp)
100019b8:	d8812b17 	ldw	r2,1196(sp)
100019bc:	d9413017 	ldw	r5,1216(sp)
100019c0:	1140010e 	bge	r2,r5,100019c8 <___vfprintf_internal_r+0x924>
100019c4:	2805883a 	mov	r2,r5
100019c8:	d9013117 	ldw	r4,1220(sp)
100019cc:	2089883a 	add	r4,r4,r2
100019d0:	d9013115 	stw	r4,1220(sp)
100019d4:	1802381e 	bne	r3,zero,100022b8 <___vfprintf_internal_r+0x1214>
100019d8:	88800007 	ldb	r2,0(r17)
100019dc:	d8011f15 	stw	zero,1148(sp)
100019e0:	da000404 	addi	r8,sp,16
100019e4:	103def1e 	bne	r2,zero,100011a4 <__alt_data_end+0xf80011a4>
100019e8:	8821883a 	mov	r16,r17
100019ec:	003e0506 	br	10001204 <__alt_data_end+0xf8001204>
100019f0:	1829883a 	mov	r20,r3
100019f4:	d8c12a17 	ldw	r3,1192(sp)
100019f8:	dd812785 	stb	r22,1182(sp)
100019fc:	e011883a 	mov	r8,fp
10001a00:	1880020c 	andi	r2,r3,8
10001a04:	1003c926 	beq	r2,zero,1000292c <___vfprintf_internal_r+0x1888>
10001a08:	d9012f17 	ldw	r4,1212(sp)
10001a0c:	d9412f17 	ldw	r5,1212(sp)
10001a10:	d8812f17 	ldw	r2,1212(sp)
10001a14:	21000017 	ldw	r4,0(r4)
10001a18:	29400117 	ldw	r5,4(r5)
10001a1c:	10800204 	addi	r2,r2,8
10001a20:	d9013715 	stw	r4,1244(sp)
10001a24:	d9413915 	stw	r5,1252(sp)
10001a28:	d8812f15 	stw	r2,1212(sp)
10001a2c:	d9013717 	ldw	r4,1244(sp)
10001a30:	d9413917 	ldw	r5,1252(sp)
10001a34:	da013f15 	stw	r8,1276(sp)
10001a38:	04000044 	movi	r16,1
10001a3c:	00074b80 	call	100074b8 <__fpclassifyd>
10001a40:	da013f17 	ldw	r8,1276(sp)
10001a44:	d9013717 	ldw	r4,1244(sp)
10001a48:	d9413917 	ldw	r5,1252(sp)
10001a4c:	1403571e 	bne	r2,r16,100027ac <___vfprintf_internal_r+0x1708>
10001a50:	000d883a 	mov	r6,zero
10001a54:	000f883a 	mov	r7,zero
10001a58:	000c4140 	call	1000c414 <__ledf2>
10001a5c:	da013f17 	ldw	r8,1276(sp)
10001a60:	1004f416 	blt	r2,zero,10002e34 <___vfprintf_internal_r+0x1d90>
10001a64:	df012783 	ldbu	fp,1182(sp)
10001a68:	008011c4 	movi	r2,71
10001a6c:	14847a0e 	bge	r2,r18,10002c58 <___vfprintf_internal_r+0x1bb4>
10001a70:	04040074 	movhi	r16,4097
10001a74:	843fb604 	addi	r16,r16,-296
10001a78:	d9012a17 	ldw	r4,1192(sp)
10001a7c:	00bfdfc4 	movi	r2,-129
10001a80:	00c000c4 	movi	r3,3
10001a84:	2088703a 	and	r4,r4,r2
10001a88:	d8c12b15 	stw	r3,1196(sp)
10001a8c:	d9012a15 	stw	r4,1192(sp)
10001a90:	d8c12e15 	stw	r3,1208(sp)
10001a94:	0029883a 	mov	r20,zero
10001a98:	d8013315 	stw	zero,1228(sp)
10001a9c:	003eea06 	br	10001648 <__alt_data_end+0xf8001648>
10001aa0:	953ff404 	addi	r20,r18,-48
10001aa4:	d8013015 	stw	zero,1216(sp)
10001aa8:	0009883a 	mov	r4,zero
10001aac:	1825883a 	mov	r18,r3
10001ab0:	01400284 	movi	r5,10
10001ab4:	000b0780 	call	1000b078 <__mulsi3>
10001ab8:	88c00007 	ldb	r3,0(r17)
10001abc:	1509883a 	add	r4,r2,r20
10001ac0:	8c400044 	addi	r17,r17,1
10001ac4:	1d3ff404 	addi	r20,r3,-48
10001ac8:	8805883a 	mov	r2,r17
10001acc:	ad3ff82e 	bgeu	r21,r20,10001ab0 <__alt_data_end+0xf8001ab0>
10001ad0:	d9013015 	stw	r4,1216(sp)
10001ad4:	9009883a 	mov	r4,r18
10001ad8:	1023883a 	mov	r17,r2
10001adc:	1825883a 	mov	r18,r3
10001ae0:	2007883a 	mov	r3,r4
10001ae4:	003dd506 	br	1000123c <__alt_data_end+0xf800123c>
10001ae8:	d8812a17 	ldw	r2,1192(sp)
10001aec:	10800214 	ori	r2,r2,8
10001af0:	d8812a15 	stw	r2,1192(sp)
10001af4:	8c800007 	ldb	r18,0(r17)
10001af8:	003dcf06 	br	10001238 <__alt_data_end+0xf8001238>
10001afc:	d9012a17 	ldw	r4,1192(sp)
10001b00:	e011883a 	mov	r8,fp
10001b04:	1829883a 	mov	r20,r3
10001b08:	21000414 	ori	r4,r4,16
10001b0c:	d9012a15 	stw	r4,1192(sp)
10001b10:	d9412a17 	ldw	r5,1192(sp)
10001b14:	2880080c 	andi	r2,r5,32
10001b18:	1000cf26 	beq	r2,zero,10001e58 <___vfprintf_internal_r+0xdb4>
10001b1c:	d8812f17 	ldw	r2,1212(sp)
10001b20:	0007883a 	mov	r3,zero
10001b24:	15400017 	ldw	r21,0(r2)
10001b28:	15800117 	ldw	r22,4(r2)
10001b2c:	10800204 	addi	r2,r2,8
10001b30:	d8812f15 	stw	r2,1212(sp)
10001b34:	ad84b03a 	or	r2,r21,r22
10001b38:	d8012785 	stb	zero,1182(sp)
10001b3c:	0039883a 	mov	fp,zero
10001b40:	003eab06 	br	100015f0 <__alt_data_end+0xf80015f0>
10001b44:	d9012a17 	ldw	r4,1192(sp)
10001b48:	e011883a 	mov	r8,fp
10001b4c:	1829883a 	mov	r20,r3
10001b50:	21000414 	ori	r4,r4,16
10001b54:	d9012a15 	stw	r4,1192(sp)
10001b58:	d9412a17 	ldw	r5,1192(sp)
10001b5c:	2880080c 	andi	r2,r5,32
10001b60:	1000cd26 	beq	r2,zero,10001e98 <___vfprintf_internal_r+0xdf4>
10001b64:	d8812f17 	ldw	r2,1212(sp)
10001b68:	00c00044 	movi	r3,1
10001b6c:	15400017 	ldw	r21,0(r2)
10001b70:	15800117 	ldw	r22,4(r2)
10001b74:	10800204 	addi	r2,r2,8
10001b78:	d8812f15 	stw	r2,1212(sp)
10001b7c:	ad84b03a 	or	r2,r21,r22
10001b80:	003fed06 	br	10001b38 <__alt_data_end+0xf8001b38>
10001b84:	d9012a17 	ldw	r4,1192(sp)
10001b88:	dd812785 	stb	r22,1182(sp)
10001b8c:	e011883a 	mov	r8,fp
10001b90:	2080080c 	andi	r2,r4,32
10001b94:	10039226 	beq	r2,zero,100029e0 <___vfprintf_internal_r+0x193c>
10001b98:	d9412f17 	ldw	r5,1212(sp)
10001b9c:	d9013117 	ldw	r4,1220(sp)
10001ba0:	28800017 	ldw	r2,0(r5)
10001ba4:	2007d7fa 	srai	r3,r4,31
10001ba8:	29400104 	addi	r5,r5,4
10001bac:	d9412f15 	stw	r5,1212(sp)
10001bb0:	11000015 	stw	r4,0(r2)
10001bb4:	10c00115 	stw	r3,4(r2)
10001bb8:	003d7806 	br	1000119c <__alt_data_end+0xf800119c>
10001bbc:	d8c12f17 	ldw	r3,1212(sp)
10001bc0:	d9012f17 	ldw	r4,1212(sp)
10001bc4:	e011883a 	mov	r8,fp
10001bc8:	18800017 	ldw	r2,0(r3)
10001bcc:	21000104 	addi	r4,r4,4
10001bd0:	00c00044 	movi	r3,1
10001bd4:	d8c12b15 	stw	r3,1196(sp)
10001bd8:	d8012785 	stb	zero,1182(sp)
10001bdc:	d8810405 	stb	r2,1040(sp)
10001be0:	d9012f15 	stw	r4,1212(sp)
10001be4:	d8c12e15 	stw	r3,1208(sp)
10001be8:	0029883a 	mov	r20,zero
10001bec:	d8013315 	stw	zero,1228(sp)
10001bf0:	dc010404 	addi	r16,sp,1040
10001bf4:	0005883a 	mov	r2,zero
10001bf8:	003e9a06 	br	10001664 <__alt_data_end+0xf8001664>
10001bfc:	d9412a17 	ldw	r5,1192(sp)
10001c00:	01040074 	movhi	r4,4097
10001c04:	213fbe04 	addi	r4,r4,-264
10001c08:	dd812785 	stb	r22,1182(sp)
10001c0c:	d9013b15 	stw	r4,1260(sp)
10001c10:	2880080c 	andi	r2,r5,32
10001c14:	e011883a 	mov	r8,fp
10001c18:	1829883a 	mov	r20,r3
10001c1c:	10002f26 	beq	r2,zero,10001cdc <___vfprintf_internal_r+0xc38>
10001c20:	d8812f17 	ldw	r2,1212(sp)
10001c24:	15400017 	ldw	r21,0(r2)
10001c28:	15800117 	ldw	r22,4(r2)
10001c2c:	10800204 	addi	r2,r2,8
10001c30:	d8812f15 	stw	r2,1212(sp)
10001c34:	d9012a17 	ldw	r4,1192(sp)
10001c38:	2080004c 	andi	r2,r4,1
10001c3c:	10025f26 	beq	r2,zero,100025bc <___vfprintf_internal_r+0x1518>
10001c40:	ad84b03a 	or	r2,r21,r22
10001c44:	10034e26 	beq	r2,zero,10002980 <___vfprintf_internal_r+0x18dc>
10001c48:	00c00c04 	movi	r3,48
10001c4c:	21000094 	ori	r4,r4,2
10001c50:	d8c12705 	stb	r3,1180(sp)
10001c54:	dc812745 	stb	r18,1181(sp)
10001c58:	d9012a15 	stw	r4,1192(sp)
10001c5c:	00c00084 	movi	r3,2
10001c60:	003fb506 	br	10001b38 <__alt_data_end+0xf8001b38>
10001c64:	b0803fcc 	andi	r2,r22,255
10001c68:	1080201c 	xori	r2,r2,128
10001c6c:	10bfe004 	addi	r2,r2,-128
10001c70:	1003501e 	bne	r2,zero,100029b4 <___vfprintf_internal_r+0x1910>
10001c74:	05800804 	movi	r22,32
10001c78:	8c800007 	ldb	r18,0(r17)
10001c7c:	003d6e06 	br	10001238 <__alt_data_end+0xf8001238>
10001c80:	d9012a17 	ldw	r4,1192(sp)
10001c84:	21000054 	ori	r4,r4,1
10001c88:	d9012a15 	stw	r4,1192(sp)
10001c8c:	8c800007 	ldb	r18,0(r17)
10001c90:	003d6906 	br	10001238 <__alt_data_end+0xf8001238>
10001c94:	d9412f17 	ldw	r5,1212(sp)
10001c98:	d9012f17 	ldw	r4,1212(sp)
10001c9c:	29400017 	ldw	r5,0(r5)
10001ca0:	20800104 	addi	r2,r4,4
10001ca4:	d9413015 	stw	r5,1216(sp)
10001ca8:	283dc616 	blt	r5,zero,100013c4 <__alt_data_end+0xf80013c4>
10001cac:	d8812f15 	stw	r2,1212(sp)
10001cb0:	8c800007 	ldb	r18,0(r17)
10001cb4:	003d6006 	br	10001238 <__alt_data_end+0xf8001238>
10001cb8:	d9412a17 	ldw	r5,1192(sp)
10001cbc:	00840074 	movhi	r2,4097
10001cc0:	10bfb904 	addi	r2,r2,-284
10001cc4:	d8813b15 	stw	r2,1260(sp)
10001cc8:	dd812785 	stb	r22,1182(sp)
10001ccc:	2880080c 	andi	r2,r5,32
10001cd0:	e011883a 	mov	r8,fp
10001cd4:	1829883a 	mov	r20,r3
10001cd8:	103fd11e 	bne	r2,zero,10001c20 <__alt_data_end+0xf8001c20>
10001cdc:	d8c12a17 	ldw	r3,1192(sp)
10001ce0:	1880040c 	andi	r2,r3,16
10001ce4:	10033526 	beq	r2,zero,100029bc <___vfprintf_internal_r+0x1918>
10001ce8:	d9012f17 	ldw	r4,1212(sp)
10001cec:	002d883a 	mov	r22,zero
10001cf0:	25400017 	ldw	r21,0(r4)
10001cf4:	21000104 	addi	r4,r4,4
10001cf8:	d9012f15 	stw	r4,1212(sp)
10001cfc:	003fcd06 	br	10001c34 <__alt_data_end+0xf8001c34>
10001d00:	d9012a17 	ldw	r4,1192(sp)
10001d04:	21001014 	ori	r4,r4,64
10001d08:	d9012a15 	stw	r4,1192(sp)
10001d0c:	8c800007 	ldb	r18,0(r17)
10001d10:	003d4906 	br	10001238 <__alt_data_end+0xf8001238>
10001d14:	8c800007 	ldb	r18,0(r17)
10001d18:	01401b04 	movi	r5,108
10001d1c:	8805883a 	mov	r2,r17
10001d20:	9143db26 	beq	r18,r5,10002c90 <___vfprintf_internal_r+0x1bec>
10001d24:	d9412a17 	ldw	r5,1192(sp)
10001d28:	29400414 	ori	r5,r5,16
10001d2c:	d9412a15 	stw	r5,1192(sp)
10001d30:	003d4106 	br	10001238 <__alt_data_end+0xf8001238>
10001d34:	1829883a 	mov	r20,r3
10001d38:	d8c12a17 	ldw	r3,1192(sp)
10001d3c:	dd812785 	stb	r22,1182(sp)
10001d40:	e011883a 	mov	r8,fp
10001d44:	1880080c 	andi	r2,r3,32
10001d48:	103e1f1e 	bne	r2,zero,100015c8 <__alt_data_end+0xf80015c8>
10001d4c:	d9412a17 	ldw	r5,1192(sp)
10001d50:	2880040c 	andi	r2,r5,16
10001d54:	10032f26 	beq	r2,zero,10002a14 <___vfprintf_internal_r+0x1970>
10001d58:	d8812f17 	ldw	r2,1212(sp)
10001d5c:	15400017 	ldw	r21,0(r2)
10001d60:	10800104 	addi	r2,r2,4
10001d64:	d8812f15 	stw	r2,1212(sp)
10001d68:	a82dd7fa 	srai	r22,r21,31
10001d6c:	b005883a 	mov	r2,r22
10001d70:	003e1b06 	br	100015e0 <__alt_data_end+0xf80015e0>
10001d74:	d8812a17 	ldw	r2,1192(sp)
10001d78:	10800814 	ori	r2,r2,32
10001d7c:	d8812a15 	stw	r2,1192(sp)
10001d80:	8c800007 	ldb	r18,0(r17)
10001d84:	003d2c06 	br	10001238 <__alt_data_end+0xf8001238>
10001d88:	1829883a 	mov	r20,r3
10001d8c:	d8c12f17 	ldw	r3,1212(sp)
10001d90:	d8012785 	stb	zero,1182(sp)
10001d94:	e011883a 	mov	r8,fp
10001d98:	1c000017 	ldw	r16,0(r3)
10001d9c:	1d400104 	addi	r21,r3,4
10001da0:	80040226 	beq	r16,zero,10002dac <___vfprintf_internal_r+0x1d08>
10001da4:	8009883a 	mov	r4,r16
10001da8:	a003c716 	blt	r20,zero,10002cc8 <___vfprintf_internal_r+0x1c24>
10001dac:	000b883a 	mov	r5,zero
10001db0:	a00d883a 	mov	r6,r20
10001db4:	df013f15 	stw	fp,1276(sp)
10001db8:	00061880 	call	10006188 <memchr>
10001dbc:	da013f17 	ldw	r8,1276(sp)
10001dc0:	10044326 	beq	r2,zero,10002ed0 <___vfprintf_internal_r+0x1e2c>
10001dc4:	1405c83a 	sub	r2,r2,r16
10001dc8:	d8812e15 	stw	r2,1208(sp)
10001dcc:	a0837c16 	blt	r20,r2,10002bc0 <___vfprintf_internal_r+0x1b1c>
10001dd0:	d8812e17 	ldw	r2,1208(sp)
10001dd4:	1003c116 	blt	r2,zero,10002cdc <___vfprintf_internal_r+0x1c38>
10001dd8:	df012783 	ldbu	fp,1182(sp)
10001ddc:	d8812b15 	stw	r2,1196(sp)
10001de0:	dd412f15 	stw	r21,1212(sp)
10001de4:	0029883a 	mov	r20,zero
10001de8:	d8013315 	stw	zero,1228(sp)
10001dec:	003e1606 	br	10001648 <__alt_data_end+0xf8001648>
10001df0:	d9012f17 	ldw	r4,1212(sp)
10001df4:	d9412a17 	ldw	r5,1192(sp)
10001df8:	00800c04 	movi	r2,48
10001dfc:	25400017 	ldw	r21,0(r4)
10001e00:	d8812705 	stb	r2,1180(sp)
10001e04:	00801e04 	movi	r2,120
10001e08:	29400094 	ori	r5,r5,2
10001e0c:	d8812745 	stb	r2,1181(sp)
10001e10:	21000104 	addi	r4,r4,4
10001e14:	00840074 	movhi	r2,4097
10001e18:	10bfbe04 	addi	r2,r2,-264
10001e1c:	1829883a 	mov	r20,r3
10001e20:	d8813b15 	stw	r2,1260(sp)
10001e24:	e011883a 	mov	r8,fp
10001e28:	002d883a 	mov	r22,zero
10001e2c:	d9412a15 	stw	r5,1192(sp)
10001e30:	d9012f15 	stw	r4,1212(sp)
10001e34:	00c00084 	movi	r3,2
10001e38:	04801e04 	movi	r18,120
10001e3c:	a805883a 	mov	r2,r21
10001e40:	003f3d06 	br	10001b38 <__alt_data_end+0xf8001b38>
10001e44:	d9412a17 	ldw	r5,1192(sp)
10001e48:	e011883a 	mov	r8,fp
10001e4c:	1829883a 	mov	r20,r3
10001e50:	2880080c 	andi	r2,r5,32
10001e54:	103f311e 	bne	r2,zero,10001b1c <__alt_data_end+0xf8001b1c>
10001e58:	d8c12a17 	ldw	r3,1192(sp)
10001e5c:	1880040c 	andi	r2,r3,16
10001e60:	1002c926 	beq	r2,zero,10002988 <___vfprintf_internal_r+0x18e4>
10001e64:	d9012f17 	ldw	r4,1212(sp)
10001e68:	002d883a 	mov	r22,zero
10001e6c:	0007883a 	mov	r3,zero
10001e70:	25400017 	ldw	r21,0(r4)
10001e74:	21000104 	addi	r4,r4,4
10001e78:	d9012f15 	stw	r4,1212(sp)
10001e7c:	a805883a 	mov	r2,r21
10001e80:	003f2d06 	br	10001b38 <__alt_data_end+0xf8001b38>
10001e84:	d9412a17 	ldw	r5,1192(sp)
10001e88:	e011883a 	mov	r8,fp
10001e8c:	1829883a 	mov	r20,r3
10001e90:	2880080c 	andi	r2,r5,32
10001e94:	103f331e 	bne	r2,zero,10001b64 <__alt_data_end+0xf8001b64>
10001e98:	d8c12a17 	ldw	r3,1192(sp)
10001e9c:	1880040c 	andi	r2,r3,16
10001ea0:	1002ac26 	beq	r2,zero,10002954 <___vfprintf_internal_r+0x18b0>
10001ea4:	d9012f17 	ldw	r4,1212(sp)
10001ea8:	002d883a 	mov	r22,zero
10001eac:	00c00044 	movi	r3,1
10001eb0:	25400017 	ldw	r21,0(r4)
10001eb4:	21000104 	addi	r4,r4,4
10001eb8:	d9012f15 	stw	r4,1212(sp)
10001ebc:	a805883a 	mov	r2,r21
10001ec0:	003f1d06 	br	10001b38 <__alt_data_end+0xf8001b38>
10001ec4:	dd812785 	stb	r22,1182(sp)
10001ec8:	e011883a 	mov	r8,fp
10001ecc:	903d8b26 	beq	r18,zero,100014fc <__alt_data_end+0xf80014fc>
10001ed0:	00c00044 	movi	r3,1
10001ed4:	d8c12b15 	stw	r3,1196(sp)
10001ed8:	dc810405 	stb	r18,1040(sp)
10001edc:	d8012785 	stb	zero,1182(sp)
10001ee0:	003f4006 	br	10001be4 <__alt_data_end+0xf8001be4>
10001ee4:	d8c12017 	ldw	r3,1152(sp)
10001ee8:	003e2106 	br	10001770 <__alt_data_end+0xf8001770>
10001eec:	45400015 	stw	r21,0(r8)
10001ef0:	44000115 	stw	r16,4(r8)
10001ef4:	1c07883a 	add	r3,r3,r16
10001ef8:	10800044 	addi	r2,r2,1
10001efc:	d8c12015 	stw	r3,1152(sp)
10001f00:	d8811f15 	stw	r2,1148(sp)
10001f04:	010001c4 	movi	r4,7
10001f08:	20be750e 	bge	r4,r2,100018e0 <__alt_data_end+0xf80018e0>
10001f0c:	d9012c17 	ldw	r4,1200(sp)
10001f10:	980b883a 	mov	r5,r19
10001f14:	d9811e04 	addi	r6,sp,1144
10001f18:	00078ec0 	call	100078ec <__sprint_r>
10001f1c:	103d7d1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10001f20:	d8c12017 	ldw	r3,1152(sp)
10001f24:	da000404 	addi	r8,sp,16
10001f28:	003e6e06 	br	100018e4 <__alt_data_end+0xf80018e4>
10001f2c:	18803fcc 	andi	r2,r3,255
10001f30:	00c00044 	movi	r3,1
10001f34:	10c11926 	beq	r2,r3,1000239c <___vfprintf_internal_r+0x12f8>
10001f38:	00c00084 	movi	r3,2
10001f3c:	10c0e41e 	bne	r2,r3,100022d0 <___vfprintf_internal_r+0x122c>
10001f40:	d9413b17 	ldw	r5,1260(sp)
10001f44:	d8c10dc4 	addi	r3,sp,1079
10001f48:	a88003cc 	andi	r2,r21,15
10001f4c:	b008973a 	slli	r4,r22,28
10001f50:	2885883a 	add	r2,r5,r2
10001f54:	a82ad13a 	srli	r21,r21,4
10001f58:	10800003 	ldbu	r2,0(r2)
10001f5c:	b02cd13a 	srli	r22,r22,4
10001f60:	256ab03a 	or	r21,r4,r21
10001f64:	18800005 	stb	r2,0(r3)
10001f68:	ad84b03a 	or	r2,r21,r22
10001f6c:	1821883a 	mov	r16,r3
10001f70:	18ffffc4 	addi	r3,r3,-1
10001f74:	103ff41e 	bne	r2,zero,10001f48 <__alt_data_end+0xf8001f48>
10001f78:	d8c12917 	ldw	r3,1188(sp)
10001f7c:	1c07c83a 	sub	r3,r3,r16
10001f80:	d8c12e15 	stw	r3,1208(sp)
10001f84:	003dab06 	br	10001634 <__alt_data_end+0xf8001634>
10001f88:	00801944 	movi	r2,101
10001f8c:	14807e0e 	bge	r2,r18,10002188 <___vfprintf_internal_r+0x10e4>
10001f90:	d9013717 	ldw	r4,1244(sp)
10001f94:	d9413917 	ldw	r5,1252(sp)
10001f98:	000d883a 	mov	r6,zero
10001f9c:	000f883a 	mov	r7,zero
10001fa0:	d8c13e15 	stw	r3,1272(sp)
10001fa4:	da013f15 	stw	r8,1276(sp)
10001fa8:	000c2b80 	call	1000c2b8 <__eqdf2>
10001fac:	d8c13e17 	ldw	r3,1272(sp)
10001fb0:	da013f17 	ldw	r8,1276(sp)
10001fb4:	1001211e 	bne	r2,zero,1000243c <___vfprintf_internal_r+0x1398>
10001fb8:	d8811f17 	ldw	r2,1148(sp)
10001fbc:	01000044 	movi	r4,1
10001fc0:	18c00044 	addi	r3,r3,1
10001fc4:	10800044 	addi	r2,r2,1
10001fc8:	01440074 	movhi	r5,4097
10001fcc:	297fc504 	addi	r5,r5,-236
10001fd0:	41000115 	stw	r4,4(r8)
10001fd4:	41400015 	stw	r5,0(r8)
10001fd8:	d8c12015 	stw	r3,1152(sp)
10001fdc:	d8811f15 	stw	r2,1148(sp)
10001fe0:	010001c4 	movi	r4,7
10001fe4:	2082a316 	blt	r4,r2,10002a74 <___vfprintf_internal_r+0x19d0>
10001fe8:	42000204 	addi	r8,r8,8
10001fec:	d8812617 	ldw	r2,1176(sp)
10001ff0:	d9013517 	ldw	r4,1236(sp)
10001ff4:	11000316 	blt	r2,r4,10002004 <___vfprintf_internal_r+0xf60>
10001ff8:	d9412a17 	ldw	r5,1192(sp)
10001ffc:	2880004c 	andi	r2,r5,1
10002000:	103e3826 	beq	r2,zero,100018e4 <__alt_data_end+0xf80018e4>
10002004:	d8813817 	ldw	r2,1248(sp)
10002008:	d9013417 	ldw	r4,1232(sp)
1000200c:	d9413817 	ldw	r5,1248(sp)
10002010:	1887883a 	add	r3,r3,r2
10002014:	d8811f17 	ldw	r2,1148(sp)
10002018:	41000015 	stw	r4,0(r8)
1000201c:	41400115 	stw	r5,4(r8)
10002020:	10800044 	addi	r2,r2,1
10002024:	d8c12015 	stw	r3,1152(sp)
10002028:	d8811f15 	stw	r2,1148(sp)
1000202c:	010001c4 	movi	r4,7
10002030:	20831d16 	blt	r4,r2,10002ca8 <___vfprintf_internal_r+0x1c04>
10002034:	42000204 	addi	r8,r8,8
10002038:	d8813517 	ldw	r2,1236(sp)
1000203c:	143fffc4 	addi	r16,r2,-1
10002040:	043e280e 	bge	zero,r16,100018e4 <__alt_data_end+0xf80018e4>
10002044:	04800404 	movi	r18,16
10002048:	d8811f17 	ldw	r2,1148(sp)
1000204c:	05440074 	movhi	r21,4097
10002050:	ad7fc584 	addi	r21,r21,-234
10002054:	943fa50e 	bge	r18,r16,10001eec <__alt_data_end+0xf8001eec>
10002058:	050001c4 	movi	r20,7
1000205c:	dd812c17 	ldw	r22,1200(sp)
10002060:	00000306 	br	10002070 <___vfprintf_internal_r+0xfcc>
10002064:	42000204 	addi	r8,r8,8
10002068:	843ffc04 	addi	r16,r16,-16
1000206c:	943f9f0e 	bge	r18,r16,10001eec <__alt_data_end+0xf8001eec>
10002070:	18c00404 	addi	r3,r3,16
10002074:	10800044 	addi	r2,r2,1
10002078:	45c00015 	stw	r23,0(r8)
1000207c:	44800115 	stw	r18,4(r8)
10002080:	d8c12015 	stw	r3,1152(sp)
10002084:	d8811f15 	stw	r2,1148(sp)
10002088:	a0bff60e 	bge	r20,r2,10002064 <__alt_data_end+0xf8002064>
1000208c:	b009883a 	mov	r4,r22
10002090:	980b883a 	mov	r5,r19
10002094:	d9811e04 	addi	r6,sp,1144
10002098:	00078ec0 	call	100078ec <__sprint_r>
1000209c:	103d1d1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
100020a0:	d8c12017 	ldw	r3,1152(sp)
100020a4:	d8811f17 	ldw	r2,1148(sp)
100020a8:	da000404 	addi	r8,sp,16
100020ac:	003fee06 	br	10002068 <__alt_data_end+0xf8002068>
100020b0:	d9413017 	ldw	r5,1216(sp)
100020b4:	d8812b17 	ldw	r2,1196(sp)
100020b8:	28adc83a 	sub	r22,r5,r2
100020bc:	05bdca0e 	bge	zero,r22,100017e8 <__alt_data_end+0xf80017e8>
100020c0:	07000404 	movi	fp,16
100020c4:	d8811f17 	ldw	r2,1148(sp)
100020c8:	05440074 	movhi	r21,4097
100020cc:	ad7fc584 	addi	r21,r21,-234
100020d0:	e580230e 	bge	fp,r22,10002160 <___vfprintf_internal_r+0x10bc>
100020d4:	a809883a 	mov	r4,r21
100020d8:	dc012d15 	stw	r16,1204(sp)
100020dc:	882b883a 	mov	r21,r17
100020e0:	01c001c4 	movi	r7,7
100020e4:	b023883a 	mov	r17,r22
100020e8:	dc012c17 	ldw	r16,1200(sp)
100020ec:	202d883a 	mov	r22,r4
100020f0:	00000306 	br	10002100 <___vfprintf_internal_r+0x105c>
100020f4:	8c7ffc04 	addi	r17,r17,-16
100020f8:	42000204 	addi	r8,r8,8
100020fc:	e440130e 	bge	fp,r17,1000214c <___vfprintf_internal_r+0x10a8>
10002100:	18c00404 	addi	r3,r3,16
10002104:	10800044 	addi	r2,r2,1
10002108:	45c00015 	stw	r23,0(r8)
1000210c:	47000115 	stw	fp,4(r8)
10002110:	d8c12015 	stw	r3,1152(sp)
10002114:	d8811f15 	stw	r2,1148(sp)
10002118:	38bff60e 	bge	r7,r2,100020f4 <__alt_data_end+0xf80020f4>
1000211c:	8009883a 	mov	r4,r16
10002120:	980b883a 	mov	r5,r19
10002124:	d9811e04 	addi	r6,sp,1144
10002128:	d9c13e15 	stw	r7,1272(sp)
1000212c:	00078ec0 	call	100078ec <__sprint_r>
10002130:	d9c13e17 	ldw	r7,1272(sp)
10002134:	103cf71e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002138:	8c7ffc04 	addi	r17,r17,-16
1000213c:	d8c12017 	ldw	r3,1152(sp)
10002140:	d8811f17 	ldw	r2,1148(sp)
10002144:	da000404 	addi	r8,sp,16
10002148:	e47fed16 	blt	fp,r17,10002100 <__alt_data_end+0xf8002100>
1000214c:	dc012d17 	ldw	r16,1204(sp)
10002150:	b009883a 	mov	r4,r22
10002154:	882d883a 	mov	r22,r17
10002158:	a823883a 	mov	r17,r21
1000215c:	202b883a 	mov	r21,r4
10002160:	1d87883a 	add	r3,r3,r22
10002164:	10800044 	addi	r2,r2,1
10002168:	45400015 	stw	r21,0(r8)
1000216c:	45800115 	stw	r22,4(r8)
10002170:	d8c12015 	stw	r3,1152(sp)
10002174:	d8811f15 	stw	r2,1148(sp)
10002178:	010001c4 	movi	r4,7
1000217c:	20817a16 	blt	r4,r2,10002768 <___vfprintf_internal_r+0x16c4>
10002180:	42000204 	addi	r8,r8,8
10002184:	003d9806 	br	100017e8 <__alt_data_end+0xf80017e8>
10002188:	d9013517 	ldw	r4,1236(sp)
1000218c:	00800044 	movi	r2,1
10002190:	1100340e 	bge	r2,r4,10002264 <___vfprintf_internal_r+0x11c0>
10002194:	dc811f17 	ldw	r18,1148(sp)
10002198:	00800044 	movi	r2,1
1000219c:	18c00044 	addi	r3,r3,1
100021a0:	94800044 	addi	r18,r18,1
100021a4:	40800115 	stw	r2,4(r8)
100021a8:	44000015 	stw	r16,0(r8)
100021ac:	d8c12015 	stw	r3,1152(sp)
100021b0:	dc811f15 	stw	r18,1148(sp)
100021b4:	008001c4 	movi	r2,7
100021b8:	14814e16 	blt	r2,r18,100026f4 <___vfprintf_internal_r+0x1650>
100021bc:	42000204 	addi	r8,r8,8
100021c0:	d8813817 	ldw	r2,1248(sp)
100021c4:	94800044 	addi	r18,r18,1
100021c8:	dc811f15 	stw	r18,1148(sp)
100021cc:	18ad883a 	add	r22,r3,r2
100021d0:	d8c13417 	ldw	r3,1232(sp)
100021d4:	40800115 	stw	r2,4(r8)
100021d8:	dd812015 	stw	r22,1152(sp)
100021dc:	40c00015 	stw	r3,0(r8)
100021e0:	008001c4 	movi	r2,7
100021e4:	14814c16 	blt	r2,r18,10002718 <___vfprintf_internal_r+0x1674>
100021e8:	45000204 	addi	r20,r8,8
100021ec:	d9013717 	ldw	r4,1244(sp)
100021f0:	d9413917 	ldw	r5,1252(sp)
100021f4:	000d883a 	mov	r6,zero
100021f8:	000f883a 	mov	r7,zero
100021fc:	000c2b80 	call	1000c2b8 <__eqdf2>
10002200:	1000cd26 	beq	r2,zero,10002538 <___vfprintf_internal_r+0x1494>
10002204:	d9013517 	ldw	r4,1236(sp)
10002208:	84000044 	addi	r16,r16,1
1000220c:	94800044 	addi	r18,r18,1
10002210:	20bfffc4 	addi	r2,r4,-1
10002214:	b0ad883a 	add	r22,r22,r2
10002218:	a0800115 	stw	r2,4(r20)
1000221c:	a4000015 	stw	r16,0(r20)
10002220:	dd812015 	stw	r22,1152(sp)
10002224:	dc811f15 	stw	r18,1148(sp)
10002228:	008001c4 	movi	r2,7
1000222c:	14801916 	blt	r2,r18,10002294 <___vfprintf_internal_r+0x11f0>
10002230:	a5000204 	addi	r20,r20,8
10002234:	d9013a17 	ldw	r4,1256(sp)
10002238:	d88122c4 	addi	r2,sp,1163
1000223c:	94800044 	addi	r18,r18,1
10002240:	2587883a 	add	r3,r4,r22
10002244:	a0800015 	stw	r2,0(r20)
10002248:	a1000115 	stw	r4,4(r20)
1000224c:	d8c12015 	stw	r3,1152(sp)
10002250:	dc811f15 	stw	r18,1148(sp)
10002254:	008001c4 	movi	r2,7
10002258:	14bf2c16 	blt	r2,r18,10001f0c <__alt_data_end+0xf8001f0c>
1000225c:	a2000204 	addi	r8,r20,8
10002260:	003da006 	br	100018e4 <__alt_data_end+0xf80018e4>
10002264:	d9412a17 	ldw	r5,1192(sp)
10002268:	2888703a 	and	r4,r5,r2
1000226c:	203fc91e 	bne	r4,zero,10002194 <__alt_data_end+0xf8002194>
10002270:	dc811f17 	ldw	r18,1148(sp)
10002274:	1d800044 	addi	r22,r3,1
10002278:	40800115 	stw	r2,4(r8)
1000227c:	94800044 	addi	r18,r18,1
10002280:	44000015 	stw	r16,0(r8)
10002284:	dd812015 	stw	r22,1152(sp)
10002288:	dc811f15 	stw	r18,1148(sp)
1000228c:	008001c4 	movi	r2,7
10002290:	1482740e 	bge	r2,r18,10002c64 <___vfprintf_internal_r+0x1bc0>
10002294:	d9012c17 	ldw	r4,1200(sp)
10002298:	980b883a 	mov	r5,r19
1000229c:	d9811e04 	addi	r6,sp,1144
100022a0:	00078ec0 	call	100078ec <__sprint_r>
100022a4:	103c9b1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
100022a8:	dd812017 	ldw	r22,1152(sp)
100022ac:	dc811f17 	ldw	r18,1148(sp)
100022b0:	dd000404 	addi	r20,sp,16
100022b4:	003fdf06 	br	10002234 <__alt_data_end+0xf8002234>
100022b8:	d9012c17 	ldw	r4,1200(sp)
100022bc:	980b883a 	mov	r5,r19
100022c0:	d9811e04 	addi	r6,sp,1144
100022c4:	00078ec0 	call	100078ec <__sprint_r>
100022c8:	103dc326 	beq	r2,zero,100019d8 <__alt_data_end+0xf80019d8>
100022cc:	003c9106 	br	10001514 <__alt_data_end+0xf8001514>
100022d0:	d8c10dc4 	addi	r3,sp,1079
100022d4:	a808d0fa 	srli	r4,r21,3
100022d8:	b00a977a 	slli	r5,r22,29
100022dc:	b02cd0fa 	srli	r22,r22,3
100022e0:	ad4001cc 	andi	r21,r21,7
100022e4:	a8800c04 	addi	r2,r21,48
100022e8:	292ab03a 	or	r21,r5,r4
100022ec:	18800005 	stb	r2,0(r3)
100022f0:	ad88b03a 	or	r4,r21,r22
100022f4:	1821883a 	mov	r16,r3
100022f8:	18ffffc4 	addi	r3,r3,-1
100022fc:	203ff51e 	bne	r4,zero,100022d4 <__alt_data_end+0xf80022d4>
10002300:	d9412a17 	ldw	r5,1192(sp)
10002304:	2900004c 	andi	r4,r5,1
10002308:	800b883a 	mov	r5,r16
1000230c:	203f1a26 	beq	r4,zero,10001f78 <__alt_data_end+0xf8001f78>
10002310:	10803fcc 	andi	r2,r2,255
10002314:	1080201c 	xori	r2,r2,128
10002318:	10bfe004 	addi	r2,r2,-128
1000231c:	01000c04 	movi	r4,48
10002320:	113f1526 	beq	r2,r4,10001f78 <__alt_data_end+0xf8001f78>
10002324:	1821883a 	mov	r16,r3
10002328:	d8c12917 	ldw	r3,1188(sp)
1000232c:	293fffc5 	stb	r4,-1(r5)
10002330:	1c07c83a 	sub	r3,r3,r16
10002334:	d8c12e15 	stw	r3,1208(sp)
10002338:	003cbe06 	br	10001634 <__alt_data_end+0xf8001634>
1000233c:	d9012c17 	ldw	r4,1200(sp)
10002340:	980b883a 	mov	r5,r19
10002344:	d9811e04 	addi	r6,sp,1144
10002348:	00078ec0 	call	100078ec <__sprint_r>
1000234c:	103c711e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002350:	d8c12017 	ldw	r3,1152(sp)
10002354:	da000404 	addi	r8,sp,16
10002358:	003d5306 	br	100018a8 <__alt_data_end+0xf80018a8>
1000235c:	d9012c17 	ldw	r4,1200(sp)
10002360:	980b883a 	mov	r5,r19
10002364:	d9811e04 	addi	r6,sp,1144
10002368:	00078ec0 	call	100078ec <__sprint_r>
1000236c:	103c691e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002370:	d8c12017 	ldw	r3,1152(sp)
10002374:	da000404 	addi	r8,sp,16
10002378:	003d0a06 	br	100017a4 <__alt_data_end+0xf80017a4>
1000237c:	d9012c17 	ldw	r4,1200(sp)
10002380:	980b883a 	mov	r5,r19
10002384:	d9811e04 	addi	r6,sp,1144
10002388:	00078ec0 	call	100078ec <__sprint_r>
1000238c:	103c611e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002390:	d8c12017 	ldw	r3,1152(sp)
10002394:	da000404 	addi	r8,sp,16
10002398:	003d1006 	br	100017dc <__alt_data_end+0xf80017dc>
1000239c:	b000021e 	bne	r22,zero,100023a8 <___vfprintf_internal_r+0x1304>
100023a0:	00800244 	movi	r2,9
100023a4:	15401c2e 	bgeu	r2,r21,10002418 <___vfprintf_internal_r+0x1374>
100023a8:	dc412b15 	stw	r17,1196(sp)
100023ac:	d8810dc4 	addi	r2,sp,1079
100023b0:	b023883a 	mov	r17,r22
100023b4:	402d883a 	mov	r22,r8
100023b8:	a809883a 	mov	r4,r21
100023bc:	880b883a 	mov	r5,r17
100023c0:	01800284 	movi	r6,10
100023c4:	000f883a 	mov	r7,zero
100023c8:	1021883a 	mov	r16,r2
100023cc:	000a9300 	call	1000a930 <__umoddi3>
100023d0:	10800c04 	addi	r2,r2,48
100023d4:	a809883a 	mov	r4,r21
100023d8:	880b883a 	mov	r5,r17
100023dc:	80800005 	stb	r2,0(r16)
100023e0:	01800284 	movi	r6,10
100023e4:	000f883a 	mov	r7,zero
100023e8:	000a2dc0 	call	1000a2dc <__udivdi3>
100023ec:	1823883a 	mov	r17,r3
100023f0:	10c6b03a 	or	r3,r2,r3
100023f4:	102b883a 	mov	r21,r2
100023f8:	80bfffc4 	addi	r2,r16,-1
100023fc:	183fee1e 	bne	r3,zero,100023b8 <__alt_data_end+0xf80023b8>
10002400:	d8c12917 	ldw	r3,1188(sp)
10002404:	b011883a 	mov	r8,r22
10002408:	dc412b17 	ldw	r17,1196(sp)
1000240c:	1c07c83a 	sub	r3,r3,r16
10002410:	d8c12e15 	stw	r3,1208(sp)
10002414:	003c8706 	br	10001634 <__alt_data_end+0xf8001634>
10002418:	d9013d17 	ldw	r4,1268(sp)
1000241c:	ad400c04 	addi	r21,r21,48
10002420:	dd410dc5 	stb	r21,1079(sp)
10002424:	d9012e15 	stw	r4,1208(sp)
10002428:	dc010dc4 	addi	r16,sp,1079
1000242c:	003c8106 	br	10001634 <__alt_data_end+0xf8001634>
10002430:	d8012e15 	stw	zero,1208(sp)
10002434:	dc010e04 	addi	r16,sp,1080
10002438:	003c7e06 	br	10001634 <__alt_data_end+0xf8001634>
1000243c:	d8812617 	ldw	r2,1176(sp)
10002440:	0081940e 	bge	zero,r2,10002a94 <___vfprintf_internal_r+0x19f0>
10002444:	d9413517 	ldw	r5,1236(sp)
10002448:	d8813317 	ldw	r2,1228(sp)
1000244c:	8165883a 	add	r18,r16,r5
10002450:	9429c83a 	sub	r20,r18,r16
10002454:	1500010e 	bge	r2,r20,1000245c <___vfprintf_internal_r+0x13b8>
10002458:	1029883a 	mov	r20,r2
1000245c:	05000a0e 	bge	zero,r20,10002488 <___vfprintf_internal_r+0x13e4>
10002460:	d8811f17 	ldw	r2,1148(sp)
10002464:	1d07883a 	add	r3,r3,r20
10002468:	44000015 	stw	r16,0(r8)
1000246c:	10800044 	addi	r2,r2,1
10002470:	45000115 	stw	r20,4(r8)
10002474:	d8c12015 	stw	r3,1152(sp)
10002478:	d8811f15 	stw	r2,1148(sp)
1000247c:	010001c4 	movi	r4,7
10002480:	20822b16 	blt	r4,r2,10002d30 <___vfprintf_internal_r+0x1c8c>
10002484:	42000204 	addi	r8,r8,8
10002488:	a0022716 	blt	r20,zero,10002d28 <___vfprintf_internal_r+0x1c84>
1000248c:	d9013317 	ldw	r4,1228(sp)
10002490:	2529c83a 	sub	r20,r4,r20
10002494:	0500530e 	bge	zero,r20,100025e4 <___vfprintf_internal_r+0x1540>
10002498:	05800404 	movi	r22,16
1000249c:	d8811f17 	ldw	r2,1148(sp)
100024a0:	05440074 	movhi	r21,4097
100024a4:	ad7fc584 	addi	r21,r21,-234
100024a8:	b501680e 	bge	r22,r20,10002a4c <___vfprintf_internal_r+0x19a8>
100024ac:	8809883a 	mov	r4,r17
100024b0:	dc012e15 	stw	r16,1208(sp)
100024b4:	a023883a 	mov	r17,r20
100024b8:	070001c4 	movi	fp,7
100024bc:	dc012c17 	ldw	r16,1200(sp)
100024c0:	2029883a 	mov	r20,r4
100024c4:	00000306 	br	100024d4 <___vfprintf_internal_r+0x1430>
100024c8:	42000204 	addi	r8,r8,8
100024cc:	8c7ffc04 	addi	r17,r17,-16
100024d0:	b4415a0e 	bge	r22,r17,10002a3c <___vfprintf_internal_r+0x1998>
100024d4:	18c00404 	addi	r3,r3,16
100024d8:	10800044 	addi	r2,r2,1
100024dc:	45c00015 	stw	r23,0(r8)
100024e0:	45800115 	stw	r22,4(r8)
100024e4:	d8c12015 	stw	r3,1152(sp)
100024e8:	d8811f15 	stw	r2,1148(sp)
100024ec:	e0bff60e 	bge	fp,r2,100024c8 <__alt_data_end+0xf80024c8>
100024f0:	8009883a 	mov	r4,r16
100024f4:	980b883a 	mov	r5,r19
100024f8:	d9811e04 	addi	r6,sp,1144
100024fc:	00078ec0 	call	100078ec <__sprint_r>
10002500:	103c041e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002504:	d8c12017 	ldw	r3,1152(sp)
10002508:	d8811f17 	ldw	r2,1148(sp)
1000250c:	da000404 	addi	r8,sp,16
10002510:	003fee06 	br	100024cc <__alt_data_end+0xf80024cc>
10002514:	d9012c17 	ldw	r4,1200(sp)
10002518:	980b883a 	mov	r5,r19
1000251c:	d9811e04 	addi	r6,sp,1144
10002520:	00078ec0 	call	100078ec <__sprint_r>
10002524:	103bfb1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002528:	d8c12017 	ldw	r3,1152(sp)
1000252c:	d8812787 	ldb	r2,1182(sp)
10002530:	da000404 	addi	r8,sp,16
10002534:	003c8e06 	br	10001770 <__alt_data_end+0xf8001770>
10002538:	d9413517 	ldw	r5,1236(sp)
1000253c:	2c3fffc4 	addi	r16,r5,-1
10002540:	043f3c0e 	bge	zero,r16,10002234 <__alt_data_end+0xf8002234>
10002544:	07000404 	movi	fp,16
10002548:	05440074 	movhi	r21,4097
1000254c:	ad7fc584 	addi	r21,r21,-234
10002550:	e4007c0e 	bge	fp,r16,10002744 <___vfprintf_internal_r+0x16a0>
10002554:	dc412e15 	stw	r17,1208(sp)
10002558:	00c001c4 	movi	r3,7
1000255c:	8023883a 	mov	r17,r16
10002560:	dc012c17 	ldw	r16,1200(sp)
10002564:	00000306 	br	10002574 <___vfprintf_internal_r+0x14d0>
10002568:	a5000204 	addi	r20,r20,8
1000256c:	8c7ffc04 	addi	r17,r17,-16
10002570:	e440720e 	bge	fp,r17,1000273c <___vfprintf_internal_r+0x1698>
10002574:	b5800404 	addi	r22,r22,16
10002578:	94800044 	addi	r18,r18,1
1000257c:	a5c00015 	stw	r23,0(r20)
10002580:	a7000115 	stw	fp,4(r20)
10002584:	dd812015 	stw	r22,1152(sp)
10002588:	dc811f15 	stw	r18,1148(sp)
1000258c:	1cbff60e 	bge	r3,r18,10002568 <__alt_data_end+0xf8002568>
10002590:	8009883a 	mov	r4,r16
10002594:	980b883a 	mov	r5,r19
10002598:	d9811e04 	addi	r6,sp,1144
1000259c:	d8c13e15 	stw	r3,1272(sp)
100025a0:	00078ec0 	call	100078ec <__sprint_r>
100025a4:	d8c13e17 	ldw	r3,1272(sp)
100025a8:	103bda1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
100025ac:	dd812017 	ldw	r22,1152(sp)
100025b0:	dc811f17 	ldw	r18,1148(sp)
100025b4:	dd000404 	addi	r20,sp,16
100025b8:	003fec06 	br	1000256c <__alt_data_end+0xf800256c>
100025bc:	00c00084 	movi	r3,2
100025c0:	ad84b03a 	or	r2,r21,r22
100025c4:	003d5c06 	br	10001b38 <__alt_data_end+0xf8001b38>
100025c8:	d9012c17 	ldw	r4,1200(sp)
100025cc:	980b883a 	mov	r5,r19
100025d0:	d9811e04 	addi	r6,sp,1144
100025d4:	00078ec0 	call	100078ec <__sprint_r>
100025d8:	103bce1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
100025dc:	d8c12017 	ldw	r3,1152(sp)
100025e0:	da000404 	addi	r8,sp,16
100025e4:	d9413317 	ldw	r5,1228(sp)
100025e8:	d8812617 	ldw	r2,1176(sp)
100025ec:	d9013517 	ldw	r4,1236(sp)
100025f0:	8161883a 	add	r16,r16,r5
100025f4:	11000316 	blt	r2,r4,10002604 <___vfprintf_internal_r+0x1560>
100025f8:	d9412a17 	ldw	r5,1192(sp)
100025fc:	2900004c 	andi	r4,r5,1
10002600:	20000d26 	beq	r4,zero,10002638 <___vfprintf_internal_r+0x1594>
10002604:	d9013817 	ldw	r4,1248(sp)
10002608:	d9413417 	ldw	r5,1232(sp)
1000260c:	1907883a 	add	r3,r3,r4
10002610:	d9011f17 	ldw	r4,1148(sp)
10002614:	41400015 	stw	r5,0(r8)
10002618:	d9413817 	ldw	r5,1248(sp)
1000261c:	21000044 	addi	r4,r4,1
10002620:	d8c12015 	stw	r3,1152(sp)
10002624:	41400115 	stw	r5,4(r8)
10002628:	d9011f15 	stw	r4,1148(sp)
1000262c:	014001c4 	movi	r5,7
10002630:	2901c716 	blt	r5,r4,10002d50 <___vfprintf_internal_r+0x1cac>
10002634:	42000204 	addi	r8,r8,8
10002638:	d9013517 	ldw	r4,1236(sp)
1000263c:	9425c83a 	sub	r18,r18,r16
10002640:	2085c83a 	sub	r2,r4,r2
10002644:	1029883a 	mov	r20,r2
10002648:	9080010e 	bge	r18,r2,10002650 <___vfprintf_internal_r+0x15ac>
1000264c:	9029883a 	mov	r20,r18
10002650:	05000a0e 	bge	zero,r20,1000267c <___vfprintf_internal_r+0x15d8>
10002654:	d9011f17 	ldw	r4,1148(sp)
10002658:	1d07883a 	add	r3,r3,r20
1000265c:	44000015 	stw	r16,0(r8)
10002660:	21000044 	addi	r4,r4,1
10002664:	45000115 	stw	r20,4(r8)
10002668:	d8c12015 	stw	r3,1152(sp)
1000266c:	d9011f15 	stw	r4,1148(sp)
10002670:	014001c4 	movi	r5,7
10002674:	2901dd16 	blt	r5,r4,10002dec <___vfprintf_internal_r+0x1d48>
10002678:	42000204 	addi	r8,r8,8
1000267c:	a001d916 	blt	r20,zero,10002de4 <___vfprintf_internal_r+0x1d40>
10002680:	1521c83a 	sub	r16,r2,r20
10002684:	043c970e 	bge	zero,r16,100018e4 <__alt_data_end+0xf80018e4>
10002688:	04800404 	movi	r18,16
1000268c:	d8811f17 	ldw	r2,1148(sp)
10002690:	05440074 	movhi	r21,4097
10002694:	ad7fc584 	addi	r21,r21,-234
10002698:	943e140e 	bge	r18,r16,10001eec <__alt_data_end+0xf8001eec>
1000269c:	050001c4 	movi	r20,7
100026a0:	dd812c17 	ldw	r22,1200(sp)
100026a4:	00000306 	br	100026b4 <___vfprintf_internal_r+0x1610>
100026a8:	42000204 	addi	r8,r8,8
100026ac:	843ffc04 	addi	r16,r16,-16
100026b0:	943e0e0e 	bge	r18,r16,10001eec <__alt_data_end+0xf8001eec>
100026b4:	18c00404 	addi	r3,r3,16
100026b8:	10800044 	addi	r2,r2,1
100026bc:	45c00015 	stw	r23,0(r8)
100026c0:	44800115 	stw	r18,4(r8)
100026c4:	d8c12015 	stw	r3,1152(sp)
100026c8:	d8811f15 	stw	r2,1148(sp)
100026cc:	a0bff60e 	bge	r20,r2,100026a8 <__alt_data_end+0xf80026a8>
100026d0:	b009883a 	mov	r4,r22
100026d4:	980b883a 	mov	r5,r19
100026d8:	d9811e04 	addi	r6,sp,1144
100026dc:	00078ec0 	call	100078ec <__sprint_r>
100026e0:	103b8c1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
100026e4:	d8c12017 	ldw	r3,1152(sp)
100026e8:	d8811f17 	ldw	r2,1148(sp)
100026ec:	da000404 	addi	r8,sp,16
100026f0:	003fee06 	br	100026ac <__alt_data_end+0xf80026ac>
100026f4:	d9012c17 	ldw	r4,1200(sp)
100026f8:	980b883a 	mov	r5,r19
100026fc:	d9811e04 	addi	r6,sp,1144
10002700:	00078ec0 	call	100078ec <__sprint_r>
10002704:	103b831e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002708:	d8c12017 	ldw	r3,1152(sp)
1000270c:	dc811f17 	ldw	r18,1148(sp)
10002710:	da000404 	addi	r8,sp,16
10002714:	003eaa06 	br	100021c0 <__alt_data_end+0xf80021c0>
10002718:	d9012c17 	ldw	r4,1200(sp)
1000271c:	980b883a 	mov	r5,r19
10002720:	d9811e04 	addi	r6,sp,1144
10002724:	00078ec0 	call	100078ec <__sprint_r>
10002728:	103b7a1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
1000272c:	dd812017 	ldw	r22,1152(sp)
10002730:	dc811f17 	ldw	r18,1148(sp)
10002734:	dd000404 	addi	r20,sp,16
10002738:	003eac06 	br	100021ec <__alt_data_end+0xf80021ec>
1000273c:	8821883a 	mov	r16,r17
10002740:	dc412e17 	ldw	r17,1208(sp)
10002744:	b42d883a 	add	r22,r22,r16
10002748:	94800044 	addi	r18,r18,1
1000274c:	a5400015 	stw	r21,0(r20)
10002750:	a4000115 	stw	r16,4(r20)
10002754:	dd812015 	stw	r22,1152(sp)
10002758:	dc811f15 	stw	r18,1148(sp)
1000275c:	008001c4 	movi	r2,7
10002760:	14beb30e 	bge	r2,r18,10002230 <__alt_data_end+0xf8002230>
10002764:	003ecb06 	br	10002294 <__alt_data_end+0xf8002294>
10002768:	d9012c17 	ldw	r4,1200(sp)
1000276c:	980b883a 	mov	r5,r19
10002770:	d9811e04 	addi	r6,sp,1144
10002774:	00078ec0 	call	100078ec <__sprint_r>
10002778:	103b661e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
1000277c:	d8c12017 	ldw	r3,1152(sp)
10002780:	da000404 	addi	r8,sp,16
10002784:	003c1806 	br	100017e8 <__alt_data_end+0xf80017e8>
10002788:	056bc83a 	sub	r21,zero,r21
1000278c:	a804c03a 	cmpne	r2,r21,zero
10002790:	05adc83a 	sub	r22,zero,r22
10002794:	07000b44 	movi	fp,45
10002798:	b0adc83a 	sub	r22,r22,r2
1000279c:	df012785 	stb	fp,1182(sp)
100027a0:	00c00044 	movi	r3,1
100027a4:	ad84b03a 	or	r2,r21,r22
100027a8:	003b9106 	br	100015f0 <__alt_data_end+0xf80015f0>
100027ac:	da013f15 	stw	r8,1276(sp)
100027b0:	00074b80 	call	100074b8 <__fpclassifyd>
100027b4:	da013f17 	ldw	r8,1276(sp)
100027b8:	1000f226 	beq	r2,zero,10002b84 <___vfprintf_internal_r+0x1ae0>
100027bc:	05bff7c4 	movi	r22,-33
100027c0:	00bfffc4 	movi	r2,-1
100027c4:	95ac703a 	and	r22,r18,r22
100027c8:	a0820b26 	beq	r20,r2,10002ff8 <___vfprintf_internal_r+0x1f54>
100027cc:	008011c4 	movi	r2,71
100027d0:	b081fc26 	beq	r22,r2,10002fc4 <___vfprintf_internal_r+0x1f20>
100027d4:	d8c12a17 	ldw	r3,1192(sp)
100027d8:	d9013917 	ldw	r4,1252(sp)
100027dc:	18c04014 	ori	r3,r3,256
100027e0:	d8c12d15 	stw	r3,1204(sp)
100027e4:	20020616 	blt	r4,zero,10003000 <___vfprintf_internal_r+0x1f5c>
100027e8:	dd413917 	ldw	r21,1252(sp)
100027ec:	d8012b05 	stb	zero,1196(sp)
100027f0:	00801984 	movi	r2,102
100027f4:	9081a526 	beq	r18,r2,10002e8c <___vfprintf_internal_r+0x1de8>
100027f8:	00801184 	movi	r2,70
100027fc:	9081a326 	beq	r18,r2,10002e8c <___vfprintf_internal_r+0x1de8>
10002800:	00801144 	movi	r2,69
10002804:	b0820226 	beq	r22,r2,10003010 <___vfprintf_internal_r+0x1f6c>
10002808:	a039883a 	mov	fp,r20
1000280c:	d8812604 	addi	r2,sp,1176
10002810:	d8800115 	stw	r2,4(sp)
10002814:	d9012c17 	ldw	r4,1200(sp)
10002818:	d8812504 	addi	r2,sp,1172
1000281c:	d9413717 	ldw	r5,1244(sp)
10002820:	d8800215 	stw	r2,8(sp)
10002824:	d8812104 	addi	r2,sp,1156
10002828:	df000015 	stw	fp,0(sp)
1000282c:	d8800315 	stw	r2,12(sp)
10002830:	a80d883a 	mov	r6,r21
10002834:	01c00084 	movi	r7,2
10002838:	da013f15 	stw	r8,1276(sp)
1000283c:	000357c0 	call	1000357c <_dtoa_r>
10002840:	1021883a 	mov	r16,r2
10002844:	008019c4 	movi	r2,103
10002848:	da013f17 	ldw	r8,1276(sp)
1000284c:	90800226 	beq	r18,r2,10002858 <___vfprintf_internal_r+0x17b4>
10002850:	008011c4 	movi	r2,71
10002854:	9080031e 	bne	r18,r2,10002864 <___vfprintf_internal_r+0x17c0>
10002858:	d9012a17 	ldw	r4,1192(sp)
1000285c:	2080004c 	andi	r2,r4,1
10002860:	1001fe26 	beq	r2,zero,1000305c <___vfprintf_internal_r+0x1fb8>
10002864:	00801184 	movi	r2,70
10002868:	8713883a 	add	r9,r16,fp
1000286c:	b0819f26 	beq	r22,r2,10002eec <___vfprintf_internal_r+0x1e48>
10002870:	d9013717 	ldw	r4,1244(sp)
10002874:	a80b883a 	mov	r5,r21
10002878:	000d883a 	mov	r6,zero
1000287c:	000f883a 	mov	r7,zero
10002880:	da013f15 	stw	r8,1276(sp)
10002884:	da413e15 	stw	r9,1272(sp)
10002888:	000c2b80 	call	1000c2b8 <__eqdf2>
1000288c:	da013f17 	ldw	r8,1276(sp)
10002890:	da413e17 	ldw	r9,1272(sp)
10002894:	10017b26 	beq	r2,zero,10002e84 <___vfprintf_internal_r+0x1de0>
10002898:	d8812117 	ldw	r2,1156(sp)
1000289c:	1240062e 	bgeu	r2,r9,100028b8 <___vfprintf_internal_r+0x1814>
100028a0:	01000c04 	movi	r4,48
100028a4:	10c00044 	addi	r3,r2,1
100028a8:	d8c12115 	stw	r3,1156(sp)
100028ac:	11000005 	stb	r4,0(r2)
100028b0:	d8812117 	ldw	r2,1156(sp)
100028b4:	127ffb36 	bltu	r2,r9,100028a4 <__alt_data_end+0xf80028a4>
100028b8:	1405c83a 	sub	r2,r2,r16
100028bc:	d8813515 	stw	r2,1236(sp)
100028c0:	008011c4 	movi	r2,71
100028c4:	b0816926 	beq	r22,r2,10002e6c <___vfprintf_internal_r+0x1dc8>
100028c8:	00801944 	movi	r2,101
100028cc:	14823f0e 	bge	r2,r18,100031cc <___vfprintf_internal_r+0x2128>
100028d0:	d8c12617 	ldw	r3,1176(sp)
100028d4:	00801984 	movi	r2,102
100028d8:	d8c13315 	stw	r3,1228(sp)
100028dc:	9081e126 	beq	r18,r2,10003064 <___vfprintf_internal_r+0x1fc0>
100028e0:	d8c13317 	ldw	r3,1228(sp)
100028e4:	d9013517 	ldw	r4,1236(sp)
100028e8:	1901cb16 	blt	r3,r4,10003018 <___vfprintf_internal_r+0x1f74>
100028ec:	d9412a17 	ldw	r5,1192(sp)
100028f0:	2880004c 	andi	r2,r5,1
100028f4:	1001d11e 	bne	r2,zero,1000303c <___vfprintf_internal_r+0x1f98>
100028f8:	1805883a 	mov	r2,r3
100028fc:	18023116 	blt	r3,zero,100031c4 <___vfprintf_internal_r+0x2120>
10002900:	d8c13317 	ldw	r3,1228(sp)
10002904:	048019c4 	movi	r18,103
10002908:	d8c12e15 	stw	r3,1208(sp)
1000290c:	df012b07 	ldb	fp,1196(sp)
10002910:	e0014e1e 	bne	fp,zero,10002e4c <___vfprintf_internal_r+0x1da8>
10002914:	d8c12d17 	ldw	r3,1204(sp)
10002918:	df012783 	ldbu	fp,1182(sp)
1000291c:	d8812b15 	stw	r2,1196(sp)
10002920:	d8c12a15 	stw	r3,1192(sp)
10002924:	0029883a 	mov	r20,zero
10002928:	003b4706 	br	10001648 <__alt_data_end+0xf8001648>
1000292c:	d8c12f17 	ldw	r3,1212(sp)
10002930:	d9012f17 	ldw	r4,1212(sp)
10002934:	d9412f17 	ldw	r5,1212(sp)
10002938:	18c00017 	ldw	r3,0(r3)
1000293c:	21000117 	ldw	r4,4(r4)
10002940:	29400204 	addi	r5,r5,8
10002944:	d8c13715 	stw	r3,1244(sp)
10002948:	d9013915 	stw	r4,1252(sp)
1000294c:	d9412f15 	stw	r5,1212(sp)
10002950:	003c3606 	br	10001a2c <__alt_data_end+0xf8001a2c>
10002954:	d9412a17 	ldw	r5,1192(sp)
10002958:	2880100c 	andi	r2,r5,64
1000295c:	1000b026 	beq	r2,zero,10002c20 <___vfprintf_internal_r+0x1b7c>
10002960:	d8812f17 	ldw	r2,1212(sp)
10002964:	002d883a 	mov	r22,zero
10002968:	00c00044 	movi	r3,1
1000296c:	1540000b 	ldhu	r21,0(r2)
10002970:	10800104 	addi	r2,r2,4
10002974:	d8812f15 	stw	r2,1212(sp)
10002978:	a805883a 	mov	r2,r21
1000297c:	003c6e06 	br	10001b38 <__alt_data_end+0xf8001b38>
10002980:	00c00084 	movi	r3,2
10002984:	003c6c06 	br	10001b38 <__alt_data_end+0xf8001b38>
10002988:	d9412a17 	ldw	r5,1192(sp)
1000298c:	2880100c 	andi	r2,r5,64
10002990:	10009b26 	beq	r2,zero,10002c00 <___vfprintf_internal_r+0x1b5c>
10002994:	d8812f17 	ldw	r2,1212(sp)
10002998:	002d883a 	mov	r22,zero
1000299c:	0007883a 	mov	r3,zero
100029a0:	1540000b 	ldhu	r21,0(r2)
100029a4:	10800104 	addi	r2,r2,4
100029a8:	d8812f15 	stw	r2,1212(sp)
100029ac:	a805883a 	mov	r2,r21
100029b0:	003c6106 	br	10001b38 <__alt_data_end+0xf8001b38>
100029b4:	8c800007 	ldb	r18,0(r17)
100029b8:	003a1f06 	br	10001238 <__alt_data_end+0xf8001238>
100029bc:	d9412a17 	ldw	r5,1192(sp)
100029c0:	2880100c 	andi	r2,r5,64
100029c4:	10009e26 	beq	r2,zero,10002c40 <___vfprintf_internal_r+0x1b9c>
100029c8:	d8812f17 	ldw	r2,1212(sp)
100029cc:	002d883a 	mov	r22,zero
100029d0:	1540000b 	ldhu	r21,0(r2)
100029d4:	10800104 	addi	r2,r2,4
100029d8:	d8812f15 	stw	r2,1212(sp)
100029dc:	003c9506 	br	10001c34 <__alt_data_end+0xf8001c34>
100029e0:	d9412a17 	ldw	r5,1192(sp)
100029e4:	2880040c 	andi	r2,r5,16
100029e8:	10007e1e 	bne	r2,zero,10002be4 <___vfprintf_internal_r+0x1b40>
100029ec:	d9412a17 	ldw	r5,1192(sp)
100029f0:	2880100c 	andi	r2,r5,64
100029f4:	10010826 	beq	r2,zero,10002e18 <___vfprintf_internal_r+0x1d74>
100029f8:	d8c12f17 	ldw	r3,1212(sp)
100029fc:	d9013117 	ldw	r4,1220(sp)
10002a00:	18800017 	ldw	r2,0(r3)
10002a04:	18c00104 	addi	r3,r3,4
10002a08:	d8c12f15 	stw	r3,1212(sp)
10002a0c:	1100000d 	sth	r4,0(r2)
10002a10:	0039e206 	br	1000119c <__alt_data_end+0xf800119c>
10002a14:	d8c12a17 	ldw	r3,1192(sp)
10002a18:	1880100c 	andi	r2,r3,64
10002a1c:	10006a26 	beq	r2,zero,10002bc8 <___vfprintf_internal_r+0x1b24>
10002a20:	d9012f17 	ldw	r4,1212(sp)
10002a24:	2540000f 	ldh	r21,0(r4)
10002a28:	21000104 	addi	r4,r4,4
10002a2c:	d9012f15 	stw	r4,1212(sp)
10002a30:	a82dd7fa 	srai	r22,r21,31
10002a34:	b005883a 	mov	r2,r22
10002a38:	003ae906 	br	100015e0 <__alt_data_end+0xf80015e0>
10002a3c:	dc012e17 	ldw	r16,1208(sp)
10002a40:	a009883a 	mov	r4,r20
10002a44:	8829883a 	mov	r20,r17
10002a48:	2023883a 	mov	r17,r4
10002a4c:	1d07883a 	add	r3,r3,r20
10002a50:	10800044 	addi	r2,r2,1
10002a54:	45400015 	stw	r21,0(r8)
10002a58:	45000115 	stw	r20,4(r8)
10002a5c:	d8c12015 	stw	r3,1152(sp)
10002a60:	d8811f15 	stw	r2,1148(sp)
10002a64:	010001c4 	movi	r4,7
10002a68:	20bed716 	blt	r4,r2,100025c8 <__alt_data_end+0xf80025c8>
10002a6c:	42000204 	addi	r8,r8,8
10002a70:	003edc06 	br	100025e4 <__alt_data_end+0xf80025e4>
10002a74:	d9012c17 	ldw	r4,1200(sp)
10002a78:	980b883a 	mov	r5,r19
10002a7c:	d9811e04 	addi	r6,sp,1144
10002a80:	00078ec0 	call	100078ec <__sprint_r>
10002a84:	103aa31e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002a88:	d8c12017 	ldw	r3,1152(sp)
10002a8c:	da000404 	addi	r8,sp,16
10002a90:	003d5606 	br	10001fec <__alt_data_end+0xf8001fec>
10002a94:	d9011f17 	ldw	r4,1148(sp)
10002a98:	01440074 	movhi	r5,4097
10002a9c:	297fc504 	addi	r5,r5,-236
10002aa0:	18c00044 	addi	r3,r3,1
10002aa4:	21000044 	addi	r4,r4,1
10002aa8:	41400015 	stw	r5,0(r8)
10002aac:	01400044 	movi	r5,1
10002ab0:	41400115 	stw	r5,4(r8)
10002ab4:	d8c12015 	stw	r3,1152(sp)
10002ab8:	d9011f15 	stw	r4,1148(sp)
10002abc:	014001c4 	movi	r5,7
10002ac0:	29006a16 	blt	r5,r4,10002c6c <___vfprintf_internal_r+0x1bc8>
10002ac4:	42000204 	addi	r8,r8,8
10002ac8:	1025883a 	mov	r18,r2
10002acc:	9000051e 	bne	r18,zero,10002ae4 <___vfprintf_internal_r+0x1a40>
10002ad0:	d8813517 	ldw	r2,1236(sp)
10002ad4:	1000031e 	bne	r2,zero,10002ae4 <___vfprintf_internal_r+0x1a40>
10002ad8:	d9012a17 	ldw	r4,1192(sp)
10002adc:	2080004c 	andi	r2,r4,1
10002ae0:	103b8026 	beq	r2,zero,100018e4 <__alt_data_end+0xf80018e4>
10002ae4:	d8813417 	ldw	r2,1232(sp)
10002ae8:	d9413817 	ldw	r5,1248(sp)
10002aec:	010001c4 	movi	r4,7
10002af0:	40800015 	stw	r2,0(r8)
10002af4:	d8811f17 	ldw	r2,1148(sp)
10002af8:	1947883a 	add	r3,r3,r5
10002afc:	41400115 	stw	r5,4(r8)
10002b00:	10800044 	addi	r2,r2,1
10002b04:	d8c12015 	stw	r3,1152(sp)
10002b08:	d8811f15 	stw	r2,1148(sp)
10002b0c:	20813016 	blt	r4,r2,10002fd0 <___vfprintf_internal_r+0x1f2c>
10002b10:	42000204 	addi	r8,r8,8
10002b14:	04a5c83a 	sub	r18,zero,r18
10002b18:	04807a0e 	bge	zero,r18,10002d04 <___vfprintf_internal_r+0x1c60>
10002b1c:	05000404 	movi	r20,16
10002b20:	05440074 	movhi	r21,4097
10002b24:	ad7fc584 	addi	r21,r21,-234
10002b28:	a480920e 	bge	r20,r18,10002d74 <___vfprintf_internal_r+0x1cd0>
10002b2c:	058001c4 	movi	r22,7
10002b30:	df012c17 	ldw	fp,1200(sp)
10002b34:	00000306 	br	10002b44 <___vfprintf_internal_r+0x1aa0>
10002b38:	42000204 	addi	r8,r8,8
10002b3c:	94bffc04 	addi	r18,r18,-16
10002b40:	a4808c0e 	bge	r20,r18,10002d74 <___vfprintf_internal_r+0x1cd0>
10002b44:	18c00404 	addi	r3,r3,16
10002b48:	10800044 	addi	r2,r2,1
10002b4c:	45c00015 	stw	r23,0(r8)
10002b50:	45000115 	stw	r20,4(r8)
10002b54:	d8c12015 	stw	r3,1152(sp)
10002b58:	d8811f15 	stw	r2,1148(sp)
10002b5c:	b0bff60e 	bge	r22,r2,10002b38 <__alt_data_end+0xf8002b38>
10002b60:	e009883a 	mov	r4,fp
10002b64:	980b883a 	mov	r5,r19
10002b68:	d9811e04 	addi	r6,sp,1144
10002b6c:	00078ec0 	call	100078ec <__sprint_r>
10002b70:	103a681e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002b74:	d8c12017 	ldw	r3,1152(sp)
10002b78:	d8811f17 	ldw	r2,1148(sp)
10002b7c:	da000404 	addi	r8,sp,16
10002b80:	003fee06 	br	10002b3c <__alt_data_end+0xf8002b3c>
10002b84:	008011c4 	movi	r2,71
10002b88:	1480ad16 	blt	r2,r18,10002e40 <___vfprintf_internal_r+0x1d9c>
10002b8c:	04040074 	movhi	r16,4097
10002b90:	843fb704 	addi	r16,r16,-292
10002b94:	d9012a17 	ldw	r4,1192(sp)
10002b98:	00bfdfc4 	movi	r2,-129
10002b9c:	00c000c4 	movi	r3,3
10002ba0:	2088703a 	and	r4,r4,r2
10002ba4:	d8c12b15 	stw	r3,1196(sp)
10002ba8:	d9012a15 	stw	r4,1192(sp)
10002bac:	df012783 	ldbu	fp,1182(sp)
10002bb0:	d8c12e15 	stw	r3,1208(sp)
10002bb4:	0029883a 	mov	r20,zero
10002bb8:	d8013315 	stw	zero,1228(sp)
10002bbc:	003aa206 	br	10001648 <__alt_data_end+0xf8001648>
10002bc0:	dd012e15 	stw	r20,1208(sp)
10002bc4:	003c8206 	br	10001dd0 <__alt_data_end+0xf8001dd0>
10002bc8:	d9412f17 	ldw	r5,1212(sp)
10002bcc:	2d400017 	ldw	r21,0(r5)
10002bd0:	29400104 	addi	r5,r5,4
10002bd4:	d9412f15 	stw	r5,1212(sp)
10002bd8:	a82dd7fa 	srai	r22,r21,31
10002bdc:	b005883a 	mov	r2,r22
10002be0:	003a7f06 	br	100015e0 <__alt_data_end+0xf80015e0>
10002be4:	d8c12f17 	ldw	r3,1212(sp)
10002be8:	d9013117 	ldw	r4,1220(sp)
10002bec:	18800017 	ldw	r2,0(r3)
10002bf0:	18c00104 	addi	r3,r3,4
10002bf4:	d8c12f15 	stw	r3,1212(sp)
10002bf8:	11000015 	stw	r4,0(r2)
10002bfc:	00396706 	br	1000119c <__alt_data_end+0xf800119c>
10002c00:	d8c12f17 	ldw	r3,1212(sp)
10002c04:	002d883a 	mov	r22,zero
10002c08:	1d400017 	ldw	r21,0(r3)
10002c0c:	18c00104 	addi	r3,r3,4
10002c10:	d8c12f15 	stw	r3,1212(sp)
10002c14:	a805883a 	mov	r2,r21
10002c18:	0007883a 	mov	r3,zero
10002c1c:	003bc606 	br	10001b38 <__alt_data_end+0xf8001b38>
10002c20:	d8c12f17 	ldw	r3,1212(sp)
10002c24:	002d883a 	mov	r22,zero
10002c28:	1d400017 	ldw	r21,0(r3)
10002c2c:	18c00104 	addi	r3,r3,4
10002c30:	d8c12f15 	stw	r3,1212(sp)
10002c34:	a805883a 	mov	r2,r21
10002c38:	00c00044 	movi	r3,1
10002c3c:	003bbe06 	br	10001b38 <__alt_data_end+0xf8001b38>
10002c40:	d8c12f17 	ldw	r3,1212(sp)
10002c44:	002d883a 	mov	r22,zero
10002c48:	1d400017 	ldw	r21,0(r3)
10002c4c:	18c00104 	addi	r3,r3,4
10002c50:	d8c12f15 	stw	r3,1212(sp)
10002c54:	003bf706 	br	10001c34 <__alt_data_end+0xf8001c34>
10002c58:	04040074 	movhi	r16,4097
10002c5c:	843fb504 	addi	r16,r16,-300
10002c60:	003b8506 	br	10001a78 <__alt_data_end+0xf8001a78>
10002c64:	45000204 	addi	r20,r8,8
10002c68:	003d7206 	br	10002234 <__alt_data_end+0xf8002234>
10002c6c:	d9012c17 	ldw	r4,1200(sp)
10002c70:	980b883a 	mov	r5,r19
10002c74:	d9811e04 	addi	r6,sp,1144
10002c78:	00078ec0 	call	100078ec <__sprint_r>
10002c7c:	103a251e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002c80:	dc812617 	ldw	r18,1176(sp)
10002c84:	d8c12017 	ldw	r3,1152(sp)
10002c88:	da000404 	addi	r8,sp,16
10002c8c:	003f8f06 	br	10002acc <__alt_data_end+0xf8002acc>
10002c90:	d9012a17 	ldw	r4,1192(sp)
10002c94:	8c400044 	addi	r17,r17,1
10002c98:	14800047 	ldb	r18,1(r2)
10002c9c:	21000814 	ori	r4,r4,32
10002ca0:	d9012a15 	stw	r4,1192(sp)
10002ca4:	00396406 	br	10001238 <__alt_data_end+0xf8001238>
10002ca8:	d9012c17 	ldw	r4,1200(sp)
10002cac:	980b883a 	mov	r5,r19
10002cb0:	d9811e04 	addi	r6,sp,1144
10002cb4:	00078ec0 	call	100078ec <__sprint_r>
10002cb8:	103a161e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002cbc:	d8c12017 	ldw	r3,1152(sp)
10002cc0:	da000404 	addi	r8,sp,16
10002cc4:	003cdc06 	br	10002038 <__alt_data_end+0xf8002038>
10002cc8:	df013f15 	stw	fp,1276(sp)
10002ccc:	00077640 	call	10007764 <strlen>
10002cd0:	d8812e15 	stw	r2,1208(sp)
10002cd4:	da013f17 	ldw	r8,1276(sp)
10002cd8:	103c3f0e 	bge	r2,zero,10001dd8 <__alt_data_end+0xf8001dd8>
10002cdc:	0005883a 	mov	r2,zero
10002ce0:	003c3d06 	br	10001dd8 <__alt_data_end+0xf8001dd8>
10002ce4:	d9012c17 	ldw	r4,1200(sp)
10002ce8:	980b883a 	mov	r5,r19
10002cec:	d9811e04 	addi	r6,sp,1144
10002cf0:	00078ec0 	call	100078ec <__sprint_r>
10002cf4:	103a071e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002cf8:	d8c12017 	ldw	r3,1152(sp)
10002cfc:	d8811f17 	ldw	r2,1148(sp)
10002d00:	da000404 	addi	r8,sp,16
10002d04:	d9013517 	ldw	r4,1236(sp)
10002d08:	10800044 	addi	r2,r2,1
10002d0c:	44000015 	stw	r16,0(r8)
10002d10:	20c7883a 	add	r3,r4,r3
10002d14:	003aed06 	br	100018cc <__alt_data_end+0xf80018cc>
10002d18:	01040074 	movhi	r4,4097
10002d1c:	213fc984 	addi	r4,r4,-218
10002d20:	d9013615 	stw	r4,1240(sp)
10002d24:	003a8706 	br	10001744 <__alt_data_end+0xf8001744>
10002d28:	0029883a 	mov	r20,zero
10002d2c:	003dd706 	br	1000248c <__alt_data_end+0xf800248c>
10002d30:	d9012c17 	ldw	r4,1200(sp)
10002d34:	980b883a 	mov	r5,r19
10002d38:	d9811e04 	addi	r6,sp,1144
10002d3c:	00078ec0 	call	100078ec <__sprint_r>
10002d40:	1039f41e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002d44:	d8c12017 	ldw	r3,1152(sp)
10002d48:	da000404 	addi	r8,sp,16
10002d4c:	003dce06 	br	10002488 <__alt_data_end+0xf8002488>
10002d50:	d9012c17 	ldw	r4,1200(sp)
10002d54:	980b883a 	mov	r5,r19
10002d58:	d9811e04 	addi	r6,sp,1144
10002d5c:	00078ec0 	call	100078ec <__sprint_r>
10002d60:	1039ec1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002d64:	d8812617 	ldw	r2,1176(sp)
10002d68:	d8c12017 	ldw	r3,1152(sp)
10002d6c:	da000404 	addi	r8,sp,16
10002d70:	003e3106 	br	10002638 <__alt_data_end+0xf8002638>
10002d74:	1c87883a 	add	r3,r3,r18
10002d78:	10800044 	addi	r2,r2,1
10002d7c:	45400015 	stw	r21,0(r8)
10002d80:	44800115 	stw	r18,4(r8)
10002d84:	d8c12015 	stw	r3,1152(sp)
10002d88:	d8811f15 	stw	r2,1148(sp)
10002d8c:	010001c4 	movi	r4,7
10002d90:	20bfd416 	blt	r4,r2,10002ce4 <__alt_data_end+0xf8002ce4>
10002d94:	42000204 	addi	r8,r8,8
10002d98:	003fda06 	br	10002d04 <__alt_data_end+0xf8002d04>
10002d9c:	01440074 	movhi	r5,4097
10002da0:	297fc984 	addi	r5,r5,-218
10002da4:	d9413615 	stw	r5,1240(sp)
10002da8:	003af406 	br	1000197c <__alt_data_end+0xf800197c>
10002dac:	00800184 	movi	r2,6
10002db0:	1500012e 	bgeu	r2,r20,10002db8 <___vfprintf_internal_r+0x1d14>
10002db4:	1029883a 	mov	r20,r2
10002db8:	dd012e15 	stw	r20,1208(sp)
10002dbc:	a005883a 	mov	r2,r20
10002dc0:	a000d216 	blt	r20,zero,1000310c <___vfprintf_internal_r+0x2068>
10002dc4:	d8812b15 	stw	r2,1196(sp)
10002dc8:	dd412f15 	stw	r21,1212(sp)
10002dcc:	0029883a 	mov	r20,zero
10002dd0:	d8013315 	stw	zero,1228(sp)
10002dd4:	04040074 	movhi	r16,4097
10002dd8:	843fc304 	addi	r16,r16,-244
10002ddc:	0005883a 	mov	r2,zero
10002de0:	003a2006 	br	10001664 <__alt_data_end+0xf8001664>
10002de4:	0029883a 	mov	r20,zero
10002de8:	003e2506 	br	10002680 <__alt_data_end+0xf8002680>
10002dec:	d9012c17 	ldw	r4,1200(sp)
10002df0:	980b883a 	mov	r5,r19
10002df4:	d9811e04 	addi	r6,sp,1144
10002df8:	00078ec0 	call	100078ec <__sprint_r>
10002dfc:	1039c51e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002e00:	d8812617 	ldw	r2,1176(sp)
10002e04:	d9413517 	ldw	r5,1236(sp)
10002e08:	d8c12017 	ldw	r3,1152(sp)
10002e0c:	da000404 	addi	r8,sp,16
10002e10:	2885c83a 	sub	r2,r5,r2
10002e14:	003e1906 	br	1000267c <__alt_data_end+0xf800267c>
10002e18:	d9412f17 	ldw	r5,1212(sp)
10002e1c:	d8c13117 	ldw	r3,1220(sp)
10002e20:	28800017 	ldw	r2,0(r5)
10002e24:	29400104 	addi	r5,r5,4
10002e28:	d9412f15 	stw	r5,1212(sp)
10002e2c:	10c00015 	stw	r3,0(r2)
10002e30:	0038da06 	br	1000119c <__alt_data_end+0xf800119c>
10002e34:	07000b44 	movi	fp,45
10002e38:	df012785 	stb	fp,1182(sp)
10002e3c:	003b0a06 	br	10001a68 <__alt_data_end+0xf8001a68>
10002e40:	04040074 	movhi	r16,4097
10002e44:	843fb804 	addi	r16,r16,-288
10002e48:	003f5206 	br	10002b94 <__alt_data_end+0xf8002b94>
10002e4c:	00c00b44 	movi	r3,45
10002e50:	d8c12785 	stb	r3,1182(sp)
10002e54:	d8c12d17 	ldw	r3,1204(sp)
10002e58:	d8812b15 	stw	r2,1196(sp)
10002e5c:	0029883a 	mov	r20,zero
10002e60:	d8c12a15 	stw	r3,1192(sp)
10002e64:	00800b44 	movi	r2,45
10002e68:	0039fb06 	br	10001658 <__alt_data_end+0xf8001658>
10002e6c:	d8812617 	ldw	r2,1176(sp)
10002e70:	00ffff44 	movi	r3,-3
10002e74:	10c03216 	blt	r2,r3,10002f40 <___vfprintf_internal_r+0x1e9c>
10002e78:	a0803116 	blt	r20,r2,10002f40 <___vfprintf_internal_r+0x1e9c>
10002e7c:	d8813315 	stw	r2,1228(sp)
10002e80:	003e9706 	br	100028e0 <__alt_data_end+0xf80028e0>
10002e84:	4805883a 	mov	r2,r9
10002e88:	003e8b06 	br	100028b8 <__alt_data_end+0xf80028b8>
10002e8c:	d8812604 	addi	r2,sp,1176
10002e90:	d8800115 	stw	r2,4(sp)
10002e94:	d9012c17 	ldw	r4,1200(sp)
10002e98:	d8812504 	addi	r2,sp,1172
10002e9c:	d9413717 	ldw	r5,1244(sp)
10002ea0:	d8800215 	stw	r2,8(sp)
10002ea4:	d8812104 	addi	r2,sp,1156
10002ea8:	dd000015 	stw	r20,0(sp)
10002eac:	d8800315 	stw	r2,12(sp)
10002eb0:	a80d883a 	mov	r6,r21
10002eb4:	01c000c4 	movi	r7,3
10002eb8:	da013f15 	stw	r8,1276(sp)
10002ebc:	000357c0 	call	1000357c <_dtoa_r>
10002ec0:	1021883a 	mov	r16,r2
10002ec4:	a039883a 	mov	fp,r20
10002ec8:	da013f17 	ldw	r8,1276(sp)
10002ecc:	003e6506 	br	10002864 <__alt_data_end+0xf8002864>
10002ed0:	dd012b15 	stw	r20,1196(sp)
10002ed4:	dd012e15 	stw	r20,1208(sp)
10002ed8:	df012783 	ldbu	fp,1182(sp)
10002edc:	dd412f15 	stw	r21,1212(sp)
10002ee0:	0029883a 	mov	r20,zero
10002ee4:	d8013315 	stw	zero,1228(sp)
10002ee8:	0039d706 	br	10001648 <__alt_data_end+0xf8001648>
10002eec:	81000007 	ldb	r4,0(r16)
10002ef0:	00800c04 	movi	r2,48
10002ef4:	20800326 	beq	r4,r2,10002f04 <___vfprintf_internal_r+0x1e60>
10002ef8:	d8c12617 	ldw	r3,1176(sp)
10002efc:	48d3883a 	add	r9,r9,r3
10002f00:	003e5b06 	br	10002870 <__alt_data_end+0xf8002870>
10002f04:	d9013717 	ldw	r4,1244(sp)
10002f08:	a80b883a 	mov	r5,r21
10002f0c:	000d883a 	mov	r6,zero
10002f10:	000f883a 	mov	r7,zero
10002f14:	da013f15 	stw	r8,1276(sp)
10002f18:	da413e15 	stw	r9,1272(sp)
10002f1c:	000c2b80 	call	1000c2b8 <__eqdf2>
10002f20:	da013f17 	ldw	r8,1276(sp)
10002f24:	da413e17 	ldw	r9,1272(sp)
10002f28:	103ff326 	beq	r2,zero,10002ef8 <__alt_data_end+0xf8002ef8>
10002f2c:	00800044 	movi	r2,1
10002f30:	1707c83a 	sub	r3,r2,fp
10002f34:	d8c12615 	stw	r3,1176(sp)
10002f38:	48d3883a 	add	r9,r9,r3
10002f3c:	003e4c06 	br	10002870 <__alt_data_end+0xf8002870>
10002f40:	94bfff84 	addi	r18,r18,-2
10002f44:	157fffc4 	addi	r21,r2,-1
10002f48:	dd412615 	stw	r21,1176(sp)
10002f4c:	dc8122c5 	stb	r18,1163(sp)
10002f50:	a8009016 	blt	r21,zero,10003194 <___vfprintf_internal_r+0x20f0>
10002f54:	00800ac4 	movi	r2,43
10002f58:	d8812305 	stb	r2,1164(sp)
10002f5c:	05000244 	movi	r20,9
10002f60:	a5404a16 	blt	r20,r21,1000308c <___vfprintf_internal_r+0x1fe8>
10002f64:	00800c04 	movi	r2,48
10002f68:	ad400c04 	addi	r21,r21,48
10002f6c:	d8812345 	stb	r2,1165(sp)
10002f70:	dd412385 	stb	r21,1166(sp)
10002f74:	d8c123c4 	addi	r3,sp,1167
10002f78:	d88122c4 	addi	r2,sp,1163
10002f7c:	1885c83a 	sub	r2,r3,r2
10002f80:	d8c13517 	ldw	r3,1236(sp)
10002f84:	d9013517 	ldw	r4,1236(sp)
10002f88:	d8813a15 	stw	r2,1256(sp)
10002f8c:	1887883a 	add	r3,r3,r2
10002f90:	d8c12e15 	stw	r3,1208(sp)
10002f94:	00800044 	movi	r2,1
10002f98:	11007a0e 	bge	r2,r4,10003184 <___vfprintf_internal_r+0x20e0>
10002f9c:	d8c12e17 	ldw	r3,1208(sp)
10002fa0:	18c00044 	addi	r3,r3,1
10002fa4:	d8c12e15 	stw	r3,1208(sp)
10002fa8:	1805883a 	mov	r2,r3
10002fac:	18000216 	blt	r3,zero,10002fb8 <___vfprintf_internal_r+0x1f14>
10002fb0:	d8013315 	stw	zero,1228(sp)
10002fb4:	003e5506 	br	1000290c <__alt_data_end+0xf800290c>
10002fb8:	0005883a 	mov	r2,zero
10002fbc:	d8013315 	stw	zero,1228(sp)
10002fc0:	003e5206 	br	1000290c <__alt_data_end+0xf800290c>
10002fc4:	a03e031e 	bne	r20,zero,100027d4 <__alt_data_end+0xf80027d4>
10002fc8:	8029883a 	mov	r20,r16
10002fcc:	003e0106 	br	100027d4 <__alt_data_end+0xf80027d4>
10002fd0:	d9012c17 	ldw	r4,1200(sp)
10002fd4:	980b883a 	mov	r5,r19
10002fd8:	d9811e04 	addi	r6,sp,1144
10002fdc:	00078ec0 	call	100078ec <__sprint_r>
10002fe0:	10394c1e 	bne	r2,zero,10001514 <__alt_data_end+0xf8001514>
10002fe4:	dc812617 	ldw	r18,1176(sp)
10002fe8:	d8c12017 	ldw	r3,1152(sp)
10002fec:	d8811f17 	ldw	r2,1148(sp)
10002ff0:	da000404 	addi	r8,sp,16
10002ff4:	003ec706 	br	10002b14 <__alt_data_end+0xf8002b14>
10002ff8:	05000184 	movi	r20,6
10002ffc:	003df506 	br	100027d4 <__alt_data_end+0xf80027d4>
10003000:	00c00b44 	movi	r3,45
10003004:	2560003c 	xorhi	r21,r4,32768
10003008:	d8c12b05 	stb	r3,1196(sp)
1000300c:	003df806 	br	100027f0 <__alt_data_end+0xf80027f0>
10003010:	a7000044 	addi	fp,r20,1
10003014:	003dfd06 	br	1000280c <__alt_data_end+0xf800280c>
10003018:	d8c13317 	ldw	r3,1228(sp)
1000301c:	00c0610e 	bge	zero,r3,100031a4 <___vfprintf_internal_r+0x2100>
10003020:	00800044 	movi	r2,1
10003024:	d9013517 	ldw	r4,1236(sp)
10003028:	1105883a 	add	r2,r2,r4
1000302c:	d8812e15 	stw	r2,1208(sp)
10003030:	10000716 	blt	r2,zero,10003050 <___vfprintf_internal_r+0x1fac>
10003034:	048019c4 	movi	r18,103
10003038:	003e3406 	br	1000290c <__alt_data_end+0xf800290c>
1000303c:	d8c13317 	ldw	r3,1228(sp)
10003040:	18c00044 	addi	r3,r3,1
10003044:	d8c12e15 	stw	r3,1208(sp)
10003048:	1805883a 	mov	r2,r3
1000304c:	183ff90e 	bge	r3,zero,10003034 <__alt_data_end+0xf8003034>
10003050:	0005883a 	mov	r2,zero
10003054:	048019c4 	movi	r18,103
10003058:	003e2c06 	br	1000290c <__alt_data_end+0xf800290c>
1000305c:	d8812117 	ldw	r2,1156(sp)
10003060:	003e1506 	br	100028b8 <__alt_data_end+0xf80028b8>
10003064:	00c0400e 	bge	zero,r3,10003168 <___vfprintf_internal_r+0x20c4>
10003068:	a0002a1e 	bne	r20,zero,10003114 <___vfprintf_internal_r+0x2070>
1000306c:	d9012a17 	ldw	r4,1192(sp)
10003070:	2080004c 	andi	r2,r4,1
10003074:	1000271e 	bne	r2,zero,10003114 <___vfprintf_internal_r+0x2070>
10003078:	1805883a 	mov	r2,r3
1000307c:	18005a16 	blt	r3,zero,100031e8 <___vfprintf_internal_r+0x2144>
10003080:	d8c13317 	ldw	r3,1228(sp)
10003084:	d8c12e15 	stw	r3,1208(sp)
10003088:	003e2006 	br	1000290c <__alt_data_end+0xf800290c>
1000308c:	d8c12284 	addi	r3,sp,1162
10003090:	4039883a 	mov	fp,r8
10003094:	a809883a 	mov	r4,r21
10003098:	01400284 	movi	r5,10
1000309c:	182d883a 	mov	r22,r3
100030a0:	000b01c0 	call	1000b01c <__modsi3>
100030a4:	10800c04 	addi	r2,r2,48
100030a8:	a809883a 	mov	r4,r21
100030ac:	b0800005 	stb	r2,0(r22)
100030b0:	01400284 	movi	r5,10
100030b4:	000afd40 	call	1000afd4 <__divsi3>
100030b8:	102b883a 	mov	r21,r2
100030bc:	b0ffffc4 	addi	r3,r22,-1
100030c0:	a0bff416 	blt	r20,r2,10003094 <__alt_data_end+0xf8003094>
100030c4:	11400c04 	addi	r5,r2,48
100030c8:	b17fffc5 	stb	r5,-1(r22)
100030cc:	d88122c4 	addi	r2,sp,1163
100030d0:	e011883a 	mov	r8,fp
100030d4:	1880462e 	bgeu	r3,r2,100031f0 <___vfprintf_internal_r+0x214c>
100030d8:	d9012344 	addi	r4,sp,1165
100030dc:	b007883a 	mov	r3,r22
100030e0:	00000206 	br	100030ec <___vfprintf_internal_r+0x2048>
100030e4:	19400003 	ldbu	r5,0(r3)
100030e8:	18c00044 	addi	r3,r3,1
100030ec:	21400005 	stb	r5,0(r4)
100030f0:	21000044 	addi	r4,r4,1
100030f4:	10fffb1e 	bne	r2,r3,100030e4 <__alt_data_end+0xf80030e4>
100030f8:	d8c12304 	addi	r3,sp,1164
100030fc:	1d87c83a 	sub	r3,r3,r22
10003100:	d9412344 	addi	r5,sp,1165
10003104:	28c7883a 	add	r3,r5,r3
10003108:	003f9c06 	br	10002f7c <__alt_data_end+0xf8002f7c>
1000310c:	0005883a 	mov	r2,zero
10003110:	003f2c06 	br	10002dc4 <__alt_data_end+0xf8002dc4>
10003114:	d8c13317 	ldw	r3,1228(sp)
10003118:	a5000044 	addi	r20,r20,1
1000311c:	1d29883a 	add	r20,r3,r20
10003120:	dd012e15 	stw	r20,1208(sp)
10003124:	a005883a 	mov	r2,r20
10003128:	a03df80e 	bge	r20,zero,1000290c <__alt_data_end+0xf800290c>
1000312c:	0005883a 	mov	r2,zero
10003130:	003df606 	br	1000290c <__alt_data_end+0xf800290c>
10003134:	043fffc4 	movi	r16,-1
10003138:	0038d406 	br	1000148c <__alt_data_end+0xf800148c>
1000313c:	d9012f17 	ldw	r4,1212(sp)
10003140:	8c800043 	ldbu	r18,1(r17)
10003144:	1023883a 	mov	r17,r2
10003148:	20c00017 	ldw	r3,0(r4)
1000314c:	21000104 	addi	r4,r4,4
10003150:	d9012f15 	stw	r4,1212(sp)
10003154:	18001f16 	blt	r3,zero,100031d4 <___vfprintf_internal_r+0x2130>
10003158:	94803fcc 	andi	r18,r18,255
1000315c:	9480201c 	xori	r18,r18,128
10003160:	94bfe004 	addi	r18,r18,-128
10003164:	00383406 	br	10001238 <__alt_data_end+0xf8001238>
10003168:	a000111e 	bne	r20,zero,100031b0 <___vfprintf_internal_r+0x210c>
1000316c:	d9012a17 	ldw	r4,1192(sp)
10003170:	2080004c 	andi	r2,r4,1
10003174:	10000e1e 	bne	r2,zero,100031b0 <___vfprintf_internal_r+0x210c>
10003178:	00800044 	movi	r2,1
1000317c:	d8812e15 	stw	r2,1208(sp)
10003180:	003de206 	br	1000290c <__alt_data_end+0xf800290c>
10003184:	d9412a17 	ldw	r5,1192(sp)
10003188:	2884703a 	and	r2,r5,r2
1000318c:	103f831e 	bne	r2,zero,10002f9c <__alt_data_end+0xf8002f9c>
10003190:	003f8506 	br	10002fa8 <__alt_data_end+0xf8002fa8>
10003194:	00800b44 	movi	r2,45
10003198:	056bc83a 	sub	r21,zero,r21
1000319c:	d8812305 	stb	r2,1164(sp)
100031a0:	003f6e06 	br	10002f5c <__alt_data_end+0xf8002f5c>
100031a4:	00800084 	movi	r2,2
100031a8:	10c5c83a 	sub	r2,r2,r3
100031ac:	003f9d06 	br	10003024 <__alt_data_end+0xf8003024>
100031b0:	a5000084 	addi	r20,r20,2
100031b4:	dd012e15 	stw	r20,1208(sp)
100031b8:	a005883a 	mov	r2,r20
100031bc:	a03dd30e 	bge	r20,zero,1000290c <__alt_data_end+0xf800290c>
100031c0:	003fda06 	br	1000312c <__alt_data_end+0xf800312c>
100031c4:	0005883a 	mov	r2,zero
100031c8:	003dcd06 	br	10002900 <__alt_data_end+0xf8002900>
100031cc:	d8812617 	ldw	r2,1176(sp)
100031d0:	003f5c06 	br	10002f44 <__alt_data_end+0xf8002f44>
100031d4:	94803fcc 	andi	r18,r18,255
100031d8:	9480201c 	xori	r18,r18,128
100031dc:	00ffffc4 	movi	r3,-1
100031e0:	94bfe004 	addi	r18,r18,-128
100031e4:	00381406 	br	10001238 <__alt_data_end+0xf8001238>
100031e8:	0005883a 	mov	r2,zero
100031ec:	003fa406 	br	10003080 <__alt_data_end+0xf8003080>
100031f0:	d8c12344 	addi	r3,sp,1165
100031f4:	003f6106 	br	10002f7c <__alt_data_end+0xf8002f7c>

100031f8 <__vfprintf_internal>:
100031f8:	00840074 	movhi	r2,4097
100031fc:	10872204 	addi	r2,r2,7304
10003200:	2007883a 	mov	r3,r4
10003204:	11000017 	ldw	r4,0(r2)
10003208:	2805883a 	mov	r2,r5
1000320c:	300f883a 	mov	r7,r6
10003210:	180b883a 	mov	r5,r3
10003214:	100d883a 	mov	r6,r2
10003218:	00010a41 	jmpi	100010a4 <___vfprintf_internal_r>

1000321c <__swsetup_r>:
1000321c:	00840074 	movhi	r2,4097
10003220:	10872204 	addi	r2,r2,7304
10003224:	10800017 	ldw	r2,0(r2)
10003228:	defffd04 	addi	sp,sp,-12
1000322c:	dc400115 	stw	r17,4(sp)
10003230:	dc000015 	stw	r16,0(sp)
10003234:	dfc00215 	stw	ra,8(sp)
10003238:	2023883a 	mov	r17,r4
1000323c:	2821883a 	mov	r16,r5
10003240:	10000226 	beq	r2,zero,1000324c <__swsetup_r+0x30>
10003244:	10c00e17 	ldw	r3,56(r2)
10003248:	18002e26 	beq	r3,zero,10003304 <__swsetup_r+0xe8>
1000324c:	8080030b 	ldhu	r2,12(r16)
10003250:	10c0020c 	andi	r3,r2,8
10003254:	100d883a 	mov	r6,r2
10003258:	18000f26 	beq	r3,zero,10003298 <__swsetup_r+0x7c>
1000325c:	80c00417 	ldw	r3,16(r16)
10003260:	18001526 	beq	r3,zero,100032b8 <__swsetup_r+0x9c>
10003264:	1100004c 	andi	r4,r2,1
10003268:	20001c1e 	bne	r4,zero,100032dc <__swsetup_r+0xc0>
1000326c:	1080008c 	andi	r2,r2,2
10003270:	1000271e 	bne	r2,zero,10003310 <__swsetup_r+0xf4>
10003274:	80800517 	ldw	r2,20(r16)
10003278:	80800215 	stw	r2,8(r16)
1000327c:	18001c26 	beq	r3,zero,100032f0 <__swsetup_r+0xd4>
10003280:	0005883a 	mov	r2,zero
10003284:	dfc00217 	ldw	ra,8(sp)
10003288:	dc400117 	ldw	r17,4(sp)
1000328c:	dc000017 	ldw	r16,0(sp)
10003290:	dec00304 	addi	sp,sp,12
10003294:	f800283a 	ret
10003298:	3080040c 	andi	r2,r6,16
1000329c:	10001726 	beq	r2,zero,100032fc <__swsetup_r+0xe0>
100032a0:	3080010c 	andi	r2,r6,4
100032a4:	10001d1e 	bne	r2,zero,1000331c <__swsetup_r+0x100>
100032a8:	80c00417 	ldw	r3,16(r16)
100032ac:	30800214 	ori	r2,r6,8
100032b0:	8080030d 	sth	r2,12(r16)
100032b4:	183feb1e 	bne	r3,zero,10003264 <__alt_data_end+0xf8003264>
100032b8:	1140a00c 	andi	r5,r2,640
100032bc:	01008004 	movi	r4,512
100032c0:	293fe826 	beq	r5,r4,10003264 <__alt_data_end+0xf8003264>
100032c4:	8809883a 	mov	r4,r17
100032c8:	800b883a 	mov	r5,r16
100032cc:	00058100 	call	10005810 <__smakebuf_r>
100032d0:	8080030b 	ldhu	r2,12(r16)
100032d4:	80c00417 	ldw	r3,16(r16)
100032d8:	003fe206 	br	10003264 <__alt_data_end+0xf8003264>
100032dc:	80800517 	ldw	r2,20(r16)
100032e0:	80000215 	stw	zero,8(r16)
100032e4:	0085c83a 	sub	r2,zero,r2
100032e8:	80800615 	stw	r2,24(r16)
100032ec:	183fe41e 	bne	r3,zero,10003280 <__alt_data_end+0xf8003280>
100032f0:	8080030b 	ldhu	r2,12(r16)
100032f4:	1080200c 	andi	r2,r2,128
100032f8:	103fe226 	beq	r2,zero,10003284 <__alt_data_end+0xf8003284>
100032fc:	00bfffc4 	movi	r2,-1
10003300:	003fe006 	br	10003284 <__alt_data_end+0xf8003284>
10003304:	1009883a 	mov	r4,r2
10003308:	0004ed80 	call	10004ed8 <__sinit>
1000330c:	003fcf06 	br	1000324c <__alt_data_end+0xf800324c>
10003310:	0005883a 	mov	r2,zero
10003314:	80800215 	stw	r2,8(r16)
10003318:	003fd806 	br	1000327c <__alt_data_end+0xf800327c>
1000331c:	81400c17 	ldw	r5,48(r16)
10003320:	28000626 	beq	r5,zero,1000333c <__swsetup_r+0x120>
10003324:	80801004 	addi	r2,r16,64
10003328:	28800326 	beq	r5,r2,10003338 <__swsetup_r+0x11c>
1000332c:	8809883a 	mov	r4,r17
10003330:	000530c0 	call	1000530c <_free_r>
10003334:	8180030b 	ldhu	r6,12(r16)
10003338:	80000c15 	stw	zero,48(r16)
1000333c:	80c00417 	ldw	r3,16(r16)
10003340:	00bff6c4 	movi	r2,-37
10003344:	118c703a 	and	r6,r2,r6
10003348:	80000115 	stw	zero,4(r16)
1000334c:	80c00015 	stw	r3,0(r16)
10003350:	003fd606 	br	100032ac <__alt_data_end+0xf80032ac>

10003354 <quorem>:
10003354:	defff204 	addi	sp,sp,-56
10003358:	dd400915 	stw	r21,36(sp)
1000335c:	20800417 	ldw	r2,16(r4)
10003360:	2d400417 	ldw	r21,16(r5)
10003364:	dfc00d15 	stw	ra,52(sp)
10003368:	df000c15 	stw	fp,48(sp)
1000336c:	ddc00b15 	stw	r23,44(sp)
10003370:	dd800a15 	stw	r22,40(sp)
10003374:	dd000815 	stw	r20,32(sp)
10003378:	dcc00715 	stw	r19,28(sp)
1000337c:	dc800615 	stw	r18,24(sp)
10003380:	dc400515 	stw	r17,20(sp)
10003384:	dc000415 	stw	r16,16(sp)
10003388:	d9000015 	stw	r4,0(sp)
1000338c:	d9400115 	stw	r5,4(sp)
10003390:	15407816 	blt	r2,r21,10003574 <quorem+0x220>
10003394:	ad7fffc4 	addi	r21,r21,-1
10003398:	ad79883a 	add	fp,r21,r21
1000339c:	28c00504 	addi	r3,r5,20
100033a0:	e739883a 	add	fp,fp,fp
100033a4:	1f2f883a 	add	r23,r3,fp
100033a8:	24400504 	addi	r17,r4,20
100033ac:	8f39883a 	add	fp,r17,fp
100033b0:	b9400017 	ldw	r5,0(r23)
100033b4:	e1000017 	ldw	r4,0(fp)
100033b8:	d8c00215 	stw	r3,8(sp)
100033bc:	29400044 	addi	r5,r5,1
100033c0:	df000315 	stw	fp,12(sp)
100033c4:	000b0680 	call	1000b068 <__udivsi3>
100033c8:	1021883a 	mov	r16,r2
100033cc:	10003026 	beq	r2,zero,10003490 <quorem+0x13c>
100033d0:	dcc00217 	ldw	r19,8(sp)
100033d4:	8829883a 	mov	r20,r17
100033d8:	002d883a 	mov	r22,zero
100033dc:	0039883a 	mov	fp,zero
100033e0:	9c800017 	ldw	r18,0(r19)
100033e4:	800b883a 	mov	r5,r16
100033e8:	9cc00104 	addi	r19,r19,4
100033ec:	913fffcc 	andi	r4,r18,65535
100033f0:	000b0780 	call	1000b078 <__mulsi3>
100033f4:	9008d43a 	srli	r4,r18,16
100033f8:	800b883a 	mov	r5,r16
100033fc:	b0ad883a 	add	r22,r22,r2
10003400:	000b0780 	call	1000b078 <__mulsi3>
10003404:	a1400017 	ldw	r5,0(r20)
10003408:	b010d43a 	srli	r8,r22,16
1000340c:	b0ffffcc 	andi	r3,r22,65535
10003410:	293fffcc 	andi	r4,r5,65535
10003414:	2709883a 	add	r4,r4,fp
10003418:	280cd43a 	srli	r6,r5,16
1000341c:	20c9c83a 	sub	r4,r4,r3
10003420:	4085883a 	add	r2,r8,r2
10003424:	2007d43a 	srai	r3,r4,16
10003428:	117fffcc 	andi	r5,r2,65535
1000342c:	314bc83a 	sub	r5,r6,r5
10003430:	28cb883a 	add	r5,r5,r3
10003434:	280c943a 	slli	r6,r5,16
10003438:	213fffcc 	andi	r4,r4,65535
1000343c:	102cd43a 	srli	r22,r2,16
10003440:	3108b03a 	or	r4,r6,r4
10003444:	a1000015 	stw	r4,0(r20)
10003448:	2839d43a 	srai	fp,r5,16
1000344c:	a5000104 	addi	r20,r20,4
10003450:	bcffe32e 	bgeu	r23,r19,100033e0 <__alt_data_end+0xf80033e0>
10003454:	d8c00317 	ldw	r3,12(sp)
10003458:	18800017 	ldw	r2,0(r3)
1000345c:	10000c1e 	bne	r2,zero,10003490 <quorem+0x13c>
10003460:	18bfff04 	addi	r2,r3,-4
10003464:	8880082e 	bgeu	r17,r2,10003488 <quorem+0x134>
10003468:	18ffff17 	ldw	r3,-4(r3)
1000346c:	18000326 	beq	r3,zero,1000347c <quorem+0x128>
10003470:	00000506 	br	10003488 <quorem+0x134>
10003474:	10c00017 	ldw	r3,0(r2)
10003478:	1800031e 	bne	r3,zero,10003488 <quorem+0x134>
1000347c:	10bfff04 	addi	r2,r2,-4
10003480:	ad7fffc4 	addi	r21,r21,-1
10003484:	88bffb36 	bltu	r17,r2,10003474 <__alt_data_end+0xf8003474>
10003488:	d8c00017 	ldw	r3,0(sp)
1000348c:	1d400415 	stw	r21,16(r3)
10003490:	d9000017 	ldw	r4,0(sp)
10003494:	d9400117 	ldw	r5,4(sp)
10003498:	0006e000 	call	10006e00 <__mcmp>
1000349c:	10002816 	blt	r2,zero,10003540 <quorem+0x1ec>
100034a0:	d8c00217 	ldw	r3,8(sp)
100034a4:	84000044 	addi	r16,r16,1
100034a8:	880d883a 	mov	r6,r17
100034ac:	000f883a 	mov	r7,zero
100034b0:	32800017 	ldw	r10,0(r6)
100034b4:	1a400017 	ldw	r9,0(r3)
100034b8:	31800104 	addi	r6,r6,4
100034bc:	523fffcc 	andi	r8,r10,65535
100034c0:	48bfffcc 	andi	r2,r9,65535
100034c4:	41cf883a 	add	r7,r8,r7
100034c8:	3891c83a 	sub	r8,r7,r2
100034cc:	4812d43a 	srli	r9,r9,16
100034d0:	500ed43a 	srli	r7,r10,16
100034d4:	4005d43a 	srai	r2,r8,16
100034d8:	423fffcc 	andi	r8,r8,65535
100034dc:	3a4fc83a 	sub	r7,r7,r9
100034e0:	388f883a 	add	r7,r7,r2
100034e4:	3804943a 	slli	r2,r7,16
100034e8:	18c00104 	addi	r3,r3,4
100034ec:	380fd43a 	srai	r7,r7,16
100034f0:	1210b03a 	or	r8,r2,r8
100034f4:	323fff15 	stw	r8,-4(r6)
100034f8:	b8ffed2e 	bgeu	r23,r3,100034b0 <__alt_data_end+0xf80034b0>
100034fc:	ad45883a 	add	r2,r21,r21
10003500:	1085883a 	add	r2,r2,r2
10003504:	8887883a 	add	r3,r17,r2
10003508:	18800017 	ldw	r2,0(r3)
1000350c:	10000c1e 	bne	r2,zero,10003540 <quorem+0x1ec>
10003510:	18bfff04 	addi	r2,r3,-4
10003514:	8880082e 	bgeu	r17,r2,10003538 <quorem+0x1e4>
10003518:	18ffff17 	ldw	r3,-4(r3)
1000351c:	18000326 	beq	r3,zero,1000352c <quorem+0x1d8>
10003520:	00000506 	br	10003538 <quorem+0x1e4>
10003524:	10c00017 	ldw	r3,0(r2)
10003528:	1800031e 	bne	r3,zero,10003538 <quorem+0x1e4>
1000352c:	10bfff04 	addi	r2,r2,-4
10003530:	ad7fffc4 	addi	r21,r21,-1
10003534:	88bffb36 	bltu	r17,r2,10003524 <__alt_data_end+0xf8003524>
10003538:	d8c00017 	ldw	r3,0(sp)
1000353c:	1d400415 	stw	r21,16(r3)
10003540:	8005883a 	mov	r2,r16
10003544:	dfc00d17 	ldw	ra,52(sp)
10003548:	df000c17 	ldw	fp,48(sp)
1000354c:	ddc00b17 	ldw	r23,44(sp)
10003550:	dd800a17 	ldw	r22,40(sp)
10003554:	dd400917 	ldw	r21,36(sp)
10003558:	dd000817 	ldw	r20,32(sp)
1000355c:	dcc00717 	ldw	r19,28(sp)
10003560:	dc800617 	ldw	r18,24(sp)
10003564:	dc400517 	ldw	r17,20(sp)
10003568:	dc000417 	ldw	r16,16(sp)
1000356c:	dec00e04 	addi	sp,sp,56
10003570:	f800283a 	ret
10003574:	0005883a 	mov	r2,zero
10003578:	003ff206 	br	10003544 <__alt_data_end+0xf8003544>

1000357c <_dtoa_r>:
1000357c:	20801017 	ldw	r2,64(r4)
10003580:	deffdf04 	addi	sp,sp,-132
10003584:	dcc01a15 	stw	r19,104(sp)
10003588:	dc801915 	stw	r18,100(sp)
1000358c:	dc401815 	stw	r17,96(sp)
10003590:	dc001715 	stw	r16,92(sp)
10003594:	dfc02015 	stw	ra,128(sp)
10003598:	df001f15 	stw	fp,124(sp)
1000359c:	ddc01e15 	stw	r23,120(sp)
100035a0:	dd801d15 	stw	r22,116(sp)
100035a4:	dd401c15 	stw	r21,112(sp)
100035a8:	dd001b15 	stw	r20,108(sp)
100035ac:	d9400315 	stw	r5,12(sp)
100035b0:	d9c00415 	stw	r7,16(sp)
100035b4:	2021883a 	mov	r16,r4
100035b8:	3023883a 	mov	r17,r6
100035bc:	dcc02317 	ldw	r19,140(sp)
100035c0:	3025883a 	mov	r18,r6
100035c4:	10000826 	beq	r2,zero,100035e8 <_dtoa_r+0x6c>
100035c8:	20c01117 	ldw	r3,68(r4)
100035cc:	01800044 	movi	r6,1
100035d0:	100b883a 	mov	r5,r2
100035d4:	30cc983a 	sll	r6,r6,r3
100035d8:	10c00115 	stw	r3,4(r2)
100035dc:	11800215 	stw	r6,8(r2)
100035e0:	00065380 	call	10006538 <_Bfree>
100035e4:	80001015 	stw	zero,64(r16)
100035e8:	88002e16 	blt	r17,zero,100036a4 <_dtoa_r+0x128>
100035ec:	98000015 	stw	zero,0(r19)
100035f0:	88dffc2c 	andhi	r3,r17,32752
100035f4:	009ffc34 	movhi	r2,32752
100035f8:	18801b26 	beq	r3,r2,10003668 <_dtoa_r+0xec>
100035fc:	d9000317 	ldw	r4,12(sp)
10003600:	900b883a 	mov	r5,r18
10003604:	000d883a 	mov	r6,zero
10003608:	000f883a 	mov	r7,zero
1000360c:	000c2b80 	call	1000c2b8 <__eqdf2>
10003610:	10002b1e 	bne	r2,zero,100036c0 <_dtoa_r+0x144>
10003614:	d8c02217 	ldw	r3,136(sp)
10003618:	d9002417 	ldw	r4,144(sp)
1000361c:	00800044 	movi	r2,1
10003620:	18800015 	stw	r2,0(r3)
10003624:	2001a026 	beq	r4,zero,10003ca8 <_dtoa_r+0x72c>
10003628:	00840074 	movhi	r2,4097
1000362c:	10bfc544 	addi	r2,r2,-235
10003630:	20800015 	stw	r2,0(r4)
10003634:	10bfffc4 	addi	r2,r2,-1
10003638:	dfc02017 	ldw	ra,128(sp)
1000363c:	df001f17 	ldw	fp,124(sp)
10003640:	ddc01e17 	ldw	r23,120(sp)
10003644:	dd801d17 	ldw	r22,116(sp)
10003648:	dd401c17 	ldw	r21,112(sp)
1000364c:	dd001b17 	ldw	r20,108(sp)
10003650:	dcc01a17 	ldw	r19,104(sp)
10003654:	dc801917 	ldw	r18,100(sp)
10003658:	dc401817 	ldw	r17,96(sp)
1000365c:	dc001717 	ldw	r16,92(sp)
10003660:	dec02104 	addi	sp,sp,132
10003664:	f800283a 	ret
10003668:	d8c02217 	ldw	r3,136(sp)
1000366c:	d9000317 	ldw	r4,12(sp)
10003670:	0089c3c4 	movi	r2,9999
10003674:	18800015 	stw	r2,0(r3)
10003678:	20017926 	beq	r4,zero,10003c60 <_dtoa_r+0x6e4>
1000367c:	00840074 	movhi	r2,4097
10003680:	10bfd104 	addi	r2,r2,-188
10003684:	d9802417 	ldw	r6,144(sp)
10003688:	303feb26 	beq	r6,zero,10003638 <__alt_data_end+0xf8003638>
1000368c:	10c000c7 	ldb	r3,3(r2)
10003690:	18017a1e 	bne	r3,zero,10003c7c <_dtoa_r+0x700>
10003694:	10c000c4 	addi	r3,r2,3
10003698:	d9c02417 	ldw	r7,144(sp)
1000369c:	38c00015 	stw	r3,0(r7)
100036a0:	003fe506 	br	10003638 <__alt_data_end+0xf8003638>
100036a4:	04a00034 	movhi	r18,32768
100036a8:	94bfffc4 	addi	r18,r18,-1
100036ac:	8ca4703a 	and	r18,r17,r18
100036b0:	00800044 	movi	r2,1
100036b4:	98800015 	stw	r2,0(r19)
100036b8:	9023883a 	mov	r17,r18
100036bc:	003fcc06 	br	100035f0 <__alt_data_end+0xf80035f0>
100036c0:	d9400317 	ldw	r5,12(sp)
100036c4:	d8800204 	addi	r2,sp,8
100036c8:	8828d53a 	srli	r20,r17,20
100036cc:	d8800015 	stw	r2,0(sp)
100036d0:	8009883a 	mov	r4,r16
100036d4:	900d883a 	mov	r6,r18
100036d8:	d9c00104 	addi	r7,sp,4
100036dc:	00071600 	call	10007160 <__d2b>
100036e0:	1039883a 	mov	fp,r2
100036e4:	a001671e 	bne	r20,zero,10003c84 <_dtoa_r+0x708>
100036e8:	dd400217 	ldw	r21,8(sp)
100036ec:	dd000117 	ldw	r20,4(sp)
100036f0:	00befbc4 	movi	r2,-1041
100036f4:	ad29883a 	add	r20,r21,r20
100036f8:	a082d616 	blt	r20,r2,10004254 <_dtoa_r+0xcd8>
100036fc:	d9800317 	ldw	r6,12(sp)
10003700:	013f0384 	movi	r4,-1010
10003704:	2509c83a 	sub	r4,r4,r20
10003708:	a0810484 	addi	r2,r20,1042
1000370c:	8922983a 	sll	r17,r17,r4
10003710:	3084d83a 	srl	r2,r6,r2
10003714:	8888b03a 	or	r4,r17,r2
10003718:	000d6d80 	call	1000d6d8 <__floatunsidf>
1000371c:	1009883a 	mov	r4,r2
10003720:	017f8434 	movhi	r5,65040
10003724:	00800044 	movi	r2,1
10003728:	194b883a 	add	r5,r3,r5
1000372c:	a53fffc4 	addi	r20,r20,-1
10003730:	d8800f15 	stw	r2,60(sp)
10003734:	000d883a 	mov	r6,zero
10003738:	01cffe34 	movhi	r7,16376
1000373c:	000cd000 	call	1000cd00 <__subdf3>
10003740:	1009883a 	mov	r4,r2
10003744:	180b883a 	mov	r5,r3
10003748:	0198dbf4 	movhi	r6,25455
1000374c:	3190d844 	addi	r6,r6,17249
10003750:	01cff4f4 	movhi	r7,16339
10003754:	39e1e9c4 	addi	r7,r7,-30809
10003758:	000c5000 	call	1000c500 <__muldf3>
1000375c:	180b883a 	mov	r5,r3
10003760:	01a2d874 	movhi	r6,35681
10003764:	31b22cc4 	addi	r6,r6,-14157
10003768:	01cff1f4 	movhi	r7,16327
1000376c:	39e28a04 	addi	r7,r7,-30168
10003770:	1009883a 	mov	r4,r2
10003774:	000b0a00 	call	1000b0a0 <__adddf3>
10003778:	a009883a 	mov	r4,r20
1000377c:	1027883a 	mov	r19,r2
10003780:	1823883a 	mov	r17,r3
10003784:	000d6080 	call	1000d608 <__floatsidf>
10003788:	1009883a 	mov	r4,r2
1000378c:	180b883a 	mov	r5,r3
10003790:	019427f4 	movhi	r6,20639
10003794:	319e7ec4 	addi	r6,r6,31227
10003798:	01cff4f4 	movhi	r7,16339
1000379c:	39d104c4 	addi	r7,r7,17427
100037a0:	000c5000 	call	1000c500 <__muldf3>
100037a4:	9809883a 	mov	r4,r19
100037a8:	880b883a 	mov	r5,r17
100037ac:	100d883a 	mov	r6,r2
100037b0:	180f883a 	mov	r7,r3
100037b4:	000b0a00 	call	1000b0a0 <__adddf3>
100037b8:	1009883a 	mov	r4,r2
100037bc:	180b883a 	mov	r5,r3
100037c0:	1027883a 	mov	r19,r2
100037c4:	1823883a 	mov	r17,r3
100037c8:	000d5880 	call	1000d588 <__fixdfsi>
100037cc:	9809883a 	mov	r4,r19
100037d0:	880b883a 	mov	r5,r17
100037d4:	000d883a 	mov	r6,zero
100037d8:	000f883a 	mov	r7,zero
100037dc:	d8800615 	stw	r2,24(sp)
100037e0:	000c4140 	call	1000c414 <__ledf2>
100037e4:	10028416 	blt	r2,zero,100041f8 <_dtoa_r+0xc7c>
100037e8:	d9000617 	ldw	r4,24(sp)
100037ec:	00800584 	movi	r2,22
100037f0:	11027236 	bltu	r2,r4,100041bc <_dtoa_r+0xc40>
100037f4:	200490fa 	slli	r2,r4,3
100037f8:	00c40074 	movhi	r3,4097
100037fc:	18ffed04 	addi	r3,r3,-76
10003800:	d9800317 	ldw	r6,12(sp)
10003804:	1885883a 	add	r2,r3,r2
10003808:	11000017 	ldw	r4,0(r2)
1000380c:	11400117 	ldw	r5,4(r2)
10003810:	900f883a 	mov	r7,r18
10003814:	000c33c0 	call	1000c33c <__gedf2>
10003818:	0082930e 	bge	zero,r2,10004268 <_dtoa_r+0xcec>
1000381c:	d9800617 	ldw	r6,24(sp)
10003820:	d8000e15 	stw	zero,56(sp)
10003824:	31bfffc4 	addi	r6,r6,-1
10003828:	d9800615 	stw	r6,24(sp)
1000382c:	ad2bc83a 	sub	r21,r21,r20
10003830:	ad7fffc4 	addi	r21,r21,-1
10003834:	a8026c16 	blt	r21,zero,100041e8 <_dtoa_r+0xc6c>
10003838:	d8000815 	stw	zero,32(sp)
1000383c:	d8800617 	ldw	r2,24(sp)
10003840:	10026116 	blt	r2,zero,100041c8 <_dtoa_r+0xc4c>
10003844:	a8ab883a 	add	r21,r21,r2
10003848:	d8800b15 	stw	r2,44(sp)
1000384c:	d8000a15 	stw	zero,40(sp)
10003850:	d9c00417 	ldw	r7,16(sp)
10003854:	00800244 	movi	r2,9
10003858:	11c11636 	bltu	r2,r7,10003cb4 <_dtoa_r+0x738>
1000385c:	00800144 	movi	r2,5
10003860:	11c4cc0e 	bge	r2,r7,10004b94 <_dtoa_r+0x1618>
10003864:	39ffff04 	addi	r7,r7,-4
10003868:	d9c00415 	stw	r7,16(sp)
1000386c:	0027883a 	mov	r19,zero
10003870:	d8c00417 	ldw	r3,16(sp)
10003874:	008000c4 	movi	r2,3
10003878:	1883aa26 	beq	r3,r2,10004724 <_dtoa_r+0x11a8>
1000387c:	10c35b0e 	bge	r2,r3,100045ec <_dtoa_r+0x1070>
10003880:	d9000417 	ldw	r4,16(sp)
10003884:	00800104 	movi	r2,4
10003888:	2082da26 	beq	r4,r2,100043f4 <_dtoa_r+0xe78>
1000388c:	00800144 	movi	r2,5
10003890:	2081091e 	bne	r4,r2,10003cb8 <_dtoa_r+0x73c>
10003894:	01c00044 	movi	r7,1
10003898:	d9c00c15 	stw	r7,48(sp)
1000389c:	d8c02117 	ldw	r3,132(sp)
100038a0:	d9000617 	ldw	r4,24(sp)
100038a4:	1907883a 	add	r3,r3,r4
100038a8:	19800044 	addi	r6,r3,1
100038ac:	d8c00d15 	stw	r3,52(sp)
100038b0:	d9800915 	stw	r6,36(sp)
100038b4:	0183a90e 	bge	zero,r6,1000475c <_dtoa_r+0x11e0>
100038b8:	d9800917 	ldw	r6,36(sp)
100038bc:	80001115 	stw	zero,68(r16)
100038c0:	008005c4 	movi	r2,23
100038c4:	1184b52e 	bgeu	r2,r6,10004b9c <_dtoa_r+0x1620>
100038c8:	00c00044 	movi	r3,1
100038cc:	00800104 	movi	r2,4
100038d0:	1085883a 	add	r2,r2,r2
100038d4:	11000504 	addi	r4,r2,20
100038d8:	180b883a 	mov	r5,r3
100038dc:	18c00044 	addi	r3,r3,1
100038e0:	313ffb2e 	bgeu	r6,r4,100038d0 <__alt_data_end+0xf80038d0>
100038e4:	81401115 	stw	r5,68(r16)
100038e8:	3023883a 	mov	r17,r6
100038ec:	8009883a 	mov	r4,r16
100038f0:	00064900 	call	10006490 <_Balloc>
100038f4:	d8800715 	stw	r2,28(sp)
100038f8:	80801015 	stw	r2,64(r16)
100038fc:	00800384 	movi	r2,14
10003900:	1440f936 	bltu	r2,r17,10003ce8 <_dtoa_r+0x76c>
10003904:	9800f826 	beq	r19,zero,10003ce8 <_dtoa_r+0x76c>
10003908:	d9c00617 	ldw	r7,24(sp)
1000390c:	01c39c0e 	bge	zero,r7,10004780 <_dtoa_r+0x1204>
10003910:	388003cc 	andi	r2,r7,15
10003914:	100490fa 	slli	r2,r2,3
10003918:	382dd13a 	srai	r22,r7,4
1000391c:	00c40074 	movhi	r3,4097
10003920:	18ffed04 	addi	r3,r3,-76
10003924:	1885883a 	add	r2,r3,r2
10003928:	b0c0040c 	andi	r3,r22,16
1000392c:	12800017 	ldw	r10,0(r2)
10003930:	12400117 	ldw	r9,4(r2)
10003934:	18038526 	beq	r3,zero,1000474c <_dtoa_r+0x11d0>
10003938:	00840074 	movhi	r2,4097
1000393c:	10bfe304 	addi	r2,r2,-116
10003940:	11800817 	ldw	r6,32(r2)
10003944:	11c00917 	ldw	r7,36(r2)
10003948:	d9000317 	ldw	r4,12(sp)
1000394c:	900b883a 	mov	r5,r18
10003950:	da401515 	stw	r9,84(sp)
10003954:	da801615 	stw	r10,88(sp)
10003958:	000b91c0 	call	1000b91c <__divdf3>
1000395c:	da401517 	ldw	r9,84(sp)
10003960:	da801617 	ldw	r10,88(sp)
10003964:	1027883a 	mov	r19,r2
10003968:	1829883a 	mov	r20,r3
1000396c:	b58003cc 	andi	r22,r22,15
10003970:	044000c4 	movi	r17,3
10003974:	b0001126 	beq	r22,zero,100039bc <_dtoa_r+0x440>
10003978:	05c40074 	movhi	r23,4097
1000397c:	bdffe304 	addi	r23,r23,-116
10003980:	5005883a 	mov	r2,r10
10003984:	4807883a 	mov	r3,r9
10003988:	b180004c 	andi	r6,r22,1
1000398c:	1009883a 	mov	r4,r2
10003990:	b02dd07a 	srai	r22,r22,1
10003994:	180b883a 	mov	r5,r3
10003998:	30000426 	beq	r6,zero,100039ac <_dtoa_r+0x430>
1000399c:	b9800017 	ldw	r6,0(r23)
100039a0:	b9c00117 	ldw	r7,4(r23)
100039a4:	8c400044 	addi	r17,r17,1
100039a8:	000c5000 	call	1000c500 <__muldf3>
100039ac:	bdc00204 	addi	r23,r23,8
100039b0:	b03ff51e 	bne	r22,zero,10003988 <__alt_data_end+0xf8003988>
100039b4:	1015883a 	mov	r10,r2
100039b8:	1813883a 	mov	r9,r3
100039bc:	9809883a 	mov	r4,r19
100039c0:	a00b883a 	mov	r5,r20
100039c4:	500d883a 	mov	r6,r10
100039c8:	480f883a 	mov	r7,r9
100039cc:	000b91c0 	call	1000b91c <__divdf3>
100039d0:	1027883a 	mov	r19,r2
100039d4:	1829883a 	mov	r20,r3
100039d8:	d8c00e17 	ldw	r3,56(sp)
100039dc:	18000626 	beq	r3,zero,100039f8 <_dtoa_r+0x47c>
100039e0:	9809883a 	mov	r4,r19
100039e4:	a00b883a 	mov	r5,r20
100039e8:	000d883a 	mov	r6,zero
100039ec:	01cffc34 	movhi	r7,16368
100039f0:	000c4140 	call	1000c414 <__ledf2>
100039f4:	10041516 	blt	r2,zero,10004a4c <_dtoa_r+0x14d0>
100039f8:	8809883a 	mov	r4,r17
100039fc:	000d6080 	call	1000d608 <__floatsidf>
10003a00:	1009883a 	mov	r4,r2
10003a04:	180b883a 	mov	r5,r3
10003a08:	980d883a 	mov	r6,r19
10003a0c:	a00f883a 	mov	r7,r20
10003a10:	000c5000 	call	1000c500 <__muldf3>
10003a14:	1009883a 	mov	r4,r2
10003a18:	180b883a 	mov	r5,r3
10003a1c:	000d883a 	mov	r6,zero
10003a20:	01d00734 	movhi	r7,16412
10003a24:	000b0a00 	call	1000b0a0 <__adddf3>
10003a28:	1023883a 	mov	r17,r2
10003a2c:	d8800917 	ldw	r2,36(sp)
10003a30:	05bf3034 	movhi	r22,64704
10003a34:	1daf883a 	add	r23,r3,r22
10003a38:	10031e26 	beq	r2,zero,100046b4 <_dtoa_r+0x1138>
10003a3c:	d8c00617 	ldw	r3,24(sp)
10003a40:	dac00917 	ldw	r11,36(sp)
10003a44:	d8c01315 	stw	r3,76(sp)
10003a48:	d9000c17 	ldw	r4,48(sp)
10003a4c:	20039626 	beq	r4,zero,100048a8 <_dtoa_r+0x132c>
10003a50:	58bfffc4 	addi	r2,r11,-1
10003a54:	100490fa 	slli	r2,r2,3
10003a58:	00c40074 	movhi	r3,4097
10003a5c:	18ffed04 	addi	r3,r3,-76
10003a60:	0009883a 	mov	r4,zero
10003a64:	1885883a 	add	r2,r3,r2
10003a68:	11800017 	ldw	r6,0(r2)
10003a6c:	11c00117 	ldw	r7,4(r2)
10003a70:	d8800717 	ldw	r2,28(sp)
10003a74:	014ff834 	movhi	r5,16352
10003a78:	dac01615 	stw	r11,88(sp)
10003a7c:	15800044 	addi	r22,r2,1
10003a80:	000b91c0 	call	1000b91c <__divdf3>
10003a84:	880d883a 	mov	r6,r17
10003a88:	b80f883a 	mov	r7,r23
10003a8c:	1009883a 	mov	r4,r2
10003a90:	180b883a 	mov	r5,r3
10003a94:	000cd000 	call	1000cd00 <__subdf3>
10003a98:	a00b883a 	mov	r5,r20
10003a9c:	9809883a 	mov	r4,r19
10003aa0:	102f883a 	mov	r23,r2
10003aa4:	d8c01015 	stw	r3,64(sp)
10003aa8:	000d5880 	call	1000d588 <__fixdfsi>
10003aac:	1009883a 	mov	r4,r2
10003ab0:	d8801515 	stw	r2,84(sp)
10003ab4:	000d6080 	call	1000d608 <__floatsidf>
10003ab8:	9809883a 	mov	r4,r19
10003abc:	a00b883a 	mov	r5,r20
10003ac0:	100d883a 	mov	r6,r2
10003ac4:	180f883a 	mov	r7,r3
10003ac8:	000cd000 	call	1000cd00 <__subdf3>
10003acc:	da401517 	ldw	r9,84(sp)
10003ad0:	1827883a 	mov	r19,r3
10003ad4:	d8c00717 	ldw	r3,28(sp)
10003ad8:	d9401017 	ldw	r5,64(sp)
10003adc:	4a400c04 	addi	r9,r9,48
10003ae0:	1023883a 	mov	r17,r2
10003ae4:	1a400005 	stb	r9,0(r3)
10003ae8:	b809883a 	mov	r4,r23
10003aec:	880d883a 	mov	r6,r17
10003af0:	980f883a 	mov	r7,r19
10003af4:	4829883a 	mov	r20,r9
10003af8:	000c33c0 	call	1000c33c <__gedf2>
10003afc:	00842216 	blt	zero,r2,10004b88 <_dtoa_r+0x160c>
10003b00:	0009883a 	mov	r4,zero
10003b04:	014ffc34 	movhi	r5,16368
10003b08:	880d883a 	mov	r6,r17
10003b0c:	980f883a 	mov	r7,r19
10003b10:	000cd000 	call	1000cd00 <__subdf3>
10003b14:	d9401017 	ldw	r5,64(sp)
10003b18:	b809883a 	mov	r4,r23
10003b1c:	100d883a 	mov	r6,r2
10003b20:	180f883a 	mov	r7,r3
10003b24:	000c33c0 	call	1000c33c <__gedf2>
10003b28:	dac01617 	ldw	r11,88(sp)
10003b2c:	00841316 	blt	zero,r2,10004b7c <_dtoa_r+0x1600>
10003b30:	00800044 	movi	r2,1
10003b34:	12c06c0e 	bge	r2,r11,10003ce8 <_dtoa_r+0x76c>
10003b38:	d9000717 	ldw	r4,28(sp)
10003b3c:	dd401215 	stw	r21,72(sp)
10003b40:	dc001115 	stw	r16,68(sp)
10003b44:	22d7883a 	add	r11,r4,r11
10003b48:	dc801415 	stw	r18,80(sp)
10003b4c:	582b883a 	mov	r21,r11
10003b50:	b021883a 	mov	r16,r22
10003b54:	dc801017 	ldw	r18,64(sp)
10003b58:	00000906 	br	10003b80 <_dtoa_r+0x604>
10003b5c:	000cd000 	call	1000cd00 <__subdf3>
10003b60:	1009883a 	mov	r4,r2
10003b64:	180b883a 	mov	r5,r3
10003b68:	b80d883a 	mov	r6,r23
10003b6c:	900f883a 	mov	r7,r18
10003b70:	000c4140 	call	1000c414 <__ledf2>
10003b74:	1003ea16 	blt	r2,zero,10004b20 <_dtoa_r+0x15a4>
10003b78:	b543ed26 	beq	r22,r21,10004b30 <_dtoa_r+0x15b4>
10003b7c:	b021883a 	mov	r16,r22
10003b80:	b809883a 	mov	r4,r23
10003b84:	900b883a 	mov	r5,r18
10003b88:	000d883a 	mov	r6,zero
10003b8c:	01d00934 	movhi	r7,16420
10003b90:	000c5000 	call	1000c500 <__muldf3>
10003b94:	000d883a 	mov	r6,zero
10003b98:	01d00934 	movhi	r7,16420
10003b9c:	8809883a 	mov	r4,r17
10003ba0:	980b883a 	mov	r5,r19
10003ba4:	102f883a 	mov	r23,r2
10003ba8:	1825883a 	mov	r18,r3
10003bac:	000c5000 	call	1000c500 <__muldf3>
10003bb0:	180b883a 	mov	r5,r3
10003bb4:	1009883a 	mov	r4,r2
10003bb8:	1823883a 	mov	r17,r3
10003bbc:	1027883a 	mov	r19,r2
10003bc0:	000d5880 	call	1000d588 <__fixdfsi>
10003bc4:	1009883a 	mov	r4,r2
10003bc8:	1029883a 	mov	r20,r2
10003bcc:	000d6080 	call	1000d608 <__floatsidf>
10003bd0:	9809883a 	mov	r4,r19
10003bd4:	880b883a 	mov	r5,r17
10003bd8:	100d883a 	mov	r6,r2
10003bdc:	180f883a 	mov	r7,r3
10003be0:	000cd000 	call	1000cd00 <__subdf3>
10003be4:	a5000c04 	addi	r20,r20,48
10003be8:	1009883a 	mov	r4,r2
10003bec:	180b883a 	mov	r5,r3
10003bf0:	b80d883a 	mov	r6,r23
10003bf4:	900f883a 	mov	r7,r18
10003bf8:	85000005 	stb	r20,0(r16)
10003bfc:	1023883a 	mov	r17,r2
10003c00:	1827883a 	mov	r19,r3
10003c04:	000c4140 	call	1000c414 <__ledf2>
10003c08:	b5800044 	addi	r22,r22,1
10003c0c:	0009883a 	mov	r4,zero
10003c10:	014ffc34 	movhi	r5,16368
10003c14:	880d883a 	mov	r6,r17
10003c18:	980f883a 	mov	r7,r19
10003c1c:	103fcf0e 	bge	r2,zero,10003b5c <__alt_data_end+0xf8003b5c>
10003c20:	d8c01317 	ldw	r3,76(sp)
10003c24:	dc001117 	ldw	r16,68(sp)
10003c28:	d8c00615 	stw	r3,24(sp)
10003c2c:	8009883a 	mov	r4,r16
10003c30:	e00b883a 	mov	r5,fp
10003c34:	00065380 	call	10006538 <_Bfree>
10003c38:	d9800617 	ldw	r6,24(sp)
10003c3c:	d9c02217 	ldw	r7,136(sp)
10003c40:	b0000005 	stb	zero,0(r22)
10003c44:	30800044 	addi	r2,r6,1
10003c48:	38800015 	stw	r2,0(r7)
10003c4c:	d8802417 	ldw	r2,144(sp)
10003c50:	10026426 	beq	r2,zero,100045e4 <_dtoa_r+0x1068>
10003c54:	15800015 	stw	r22,0(r2)
10003c58:	d8800717 	ldw	r2,28(sp)
10003c5c:	003e7606 	br	10003638 <__alt_data_end+0xf8003638>
10003c60:	00800434 	movhi	r2,16
10003c64:	10bfffc4 	addi	r2,r2,-1
10003c68:	88a2703a 	and	r17,r17,r2
10003c6c:	883e831e 	bne	r17,zero,1000367c <__alt_data_end+0xf800367c>
10003c70:	00840074 	movhi	r2,4097
10003c74:	10bfce04 	addi	r2,r2,-200
10003c78:	003e8206 	br	10003684 <__alt_data_end+0xf8003684>
10003c7c:	10c00204 	addi	r3,r2,8
10003c80:	003e8506 	br	10003698 <__alt_data_end+0xf8003698>
10003c84:	01400434 	movhi	r5,16
10003c88:	297fffc4 	addi	r5,r5,-1
10003c8c:	914a703a 	and	r5,r18,r5
10003c90:	d9000317 	ldw	r4,12(sp)
10003c94:	294ffc34 	orhi	r5,r5,16368
10003c98:	a53f0044 	addi	r20,r20,-1023
10003c9c:	dd400217 	ldw	r21,8(sp)
10003ca0:	d8000f15 	stw	zero,60(sp)
10003ca4:	003ea306 	br	10003734 <__alt_data_end+0xf8003734>
10003ca8:	00840074 	movhi	r2,4097
10003cac:	10bfc504 	addi	r2,r2,-236
10003cb0:	003e6106 	br	10003638 <__alt_data_end+0xf8003638>
10003cb4:	d8000415 	stw	zero,16(sp)
10003cb8:	8009883a 	mov	r4,r16
10003cbc:	80001115 	stw	zero,68(r16)
10003cc0:	000b883a 	mov	r5,zero
10003cc4:	00064900 	call	10006490 <_Balloc>
10003cc8:	00ffffc4 	movi	r3,-1
10003ccc:	01000044 	movi	r4,1
10003cd0:	d8800715 	stw	r2,28(sp)
10003cd4:	d8c00d15 	stw	r3,52(sp)
10003cd8:	80801015 	stw	r2,64(r16)
10003cdc:	d8002115 	stw	zero,132(sp)
10003ce0:	d8c00915 	stw	r3,36(sp)
10003ce4:	d9000c15 	stw	r4,48(sp)
10003ce8:	d8800117 	ldw	r2,4(sp)
10003cec:	10008e16 	blt	r2,zero,10003f28 <_dtoa_r+0x9ac>
10003cf0:	d9000617 	ldw	r4,24(sp)
10003cf4:	00c00384 	movi	r3,14
10003cf8:	19008b16 	blt	r3,r4,10003f28 <_dtoa_r+0x9ac>
10003cfc:	200490fa 	slli	r2,r4,3
10003d00:	d9802117 	ldw	r6,132(sp)
10003d04:	00c40074 	movhi	r3,4097
10003d08:	18ffed04 	addi	r3,r3,-76
10003d0c:	1885883a 	add	r2,r3,r2
10003d10:	14400017 	ldw	r17,0(r2)
10003d14:	14c00117 	ldw	r19,4(r2)
10003d18:	3001be16 	blt	r6,zero,10004414 <_dtoa_r+0xe98>
10003d1c:	d9000317 	ldw	r4,12(sp)
10003d20:	880d883a 	mov	r6,r17
10003d24:	980f883a 	mov	r7,r19
10003d28:	900b883a 	mov	r5,r18
10003d2c:	000b91c0 	call	1000b91c <__divdf3>
10003d30:	180b883a 	mov	r5,r3
10003d34:	1009883a 	mov	r4,r2
10003d38:	000d5880 	call	1000d588 <__fixdfsi>
10003d3c:	1009883a 	mov	r4,r2
10003d40:	102f883a 	mov	r23,r2
10003d44:	000d6080 	call	1000d608 <__floatsidf>
10003d48:	1009883a 	mov	r4,r2
10003d4c:	180b883a 	mov	r5,r3
10003d50:	880d883a 	mov	r6,r17
10003d54:	980f883a 	mov	r7,r19
10003d58:	000c5000 	call	1000c500 <__muldf3>
10003d5c:	d9000317 	ldw	r4,12(sp)
10003d60:	900b883a 	mov	r5,r18
10003d64:	100d883a 	mov	r6,r2
10003d68:	180f883a 	mov	r7,r3
10003d6c:	000cd000 	call	1000cd00 <__subdf3>
10003d70:	d9c00717 	ldw	r7,28(sp)
10003d74:	1009883a 	mov	r4,r2
10003d78:	b8800c04 	addi	r2,r23,48
10003d7c:	38800005 	stb	r2,0(r7)
10003d80:	3d800044 	addi	r22,r7,1
10003d84:	d9c00917 	ldw	r7,36(sp)
10003d88:	01800044 	movi	r6,1
10003d8c:	180b883a 	mov	r5,r3
10003d90:	2005883a 	mov	r2,r4
10003d94:	39803e26 	beq	r7,r6,10003e90 <_dtoa_r+0x914>
10003d98:	000d883a 	mov	r6,zero
10003d9c:	01d00934 	movhi	r7,16420
10003da0:	000c5000 	call	1000c500 <__muldf3>
10003da4:	1009883a 	mov	r4,r2
10003da8:	180b883a 	mov	r5,r3
10003dac:	000d883a 	mov	r6,zero
10003db0:	000f883a 	mov	r7,zero
10003db4:	1029883a 	mov	r20,r2
10003db8:	182b883a 	mov	r21,r3
10003dbc:	000c2b80 	call	1000c2b8 <__eqdf2>
10003dc0:	103f9a26 	beq	r2,zero,10003c2c <__alt_data_end+0xf8003c2c>
10003dc4:	d8c00717 	ldw	r3,28(sp)
10003dc8:	d9000917 	ldw	r4,36(sp)
10003dcc:	b025883a 	mov	r18,r22
10003dd0:	df000415 	stw	fp,16(sp)
10003dd4:	1905883a 	add	r2,r3,r4
10003dd8:	15ffffc4 	addi	r23,r2,-1
10003ddc:	dc000315 	stw	r16,12(sp)
10003de0:	00000a06 	br	10003e0c <_dtoa_r+0x890>
10003de4:	000c5000 	call	1000c500 <__muldf3>
10003de8:	1009883a 	mov	r4,r2
10003dec:	180b883a 	mov	r5,r3
10003df0:	000d883a 	mov	r6,zero
10003df4:	000f883a 	mov	r7,zero
10003df8:	1029883a 	mov	r20,r2
10003dfc:	182b883a 	mov	r21,r3
10003e00:	000c2b80 	call	1000c2b8 <__eqdf2>
10003e04:	10021926 	beq	r2,zero,1000466c <_dtoa_r+0x10f0>
10003e08:	e025883a 	mov	r18,fp
10003e0c:	880d883a 	mov	r6,r17
10003e10:	980f883a 	mov	r7,r19
10003e14:	a009883a 	mov	r4,r20
10003e18:	a80b883a 	mov	r5,r21
10003e1c:	000b91c0 	call	1000b91c <__divdf3>
10003e20:	180b883a 	mov	r5,r3
10003e24:	1009883a 	mov	r4,r2
10003e28:	000d5880 	call	1000d588 <__fixdfsi>
10003e2c:	1009883a 	mov	r4,r2
10003e30:	1021883a 	mov	r16,r2
10003e34:	000d6080 	call	1000d608 <__floatsidf>
10003e38:	1009883a 	mov	r4,r2
10003e3c:	180b883a 	mov	r5,r3
10003e40:	880d883a 	mov	r6,r17
10003e44:	980f883a 	mov	r7,r19
10003e48:	000c5000 	call	1000c500 <__muldf3>
10003e4c:	a009883a 	mov	r4,r20
10003e50:	a80b883a 	mov	r5,r21
10003e54:	100d883a 	mov	r6,r2
10003e58:	180f883a 	mov	r7,r3
10003e5c:	000cd000 	call	1000cd00 <__subdf3>
10003e60:	82800c04 	addi	r10,r16,48
10003e64:	97000044 	addi	fp,r18,1
10003e68:	92800005 	stb	r10,0(r18)
10003e6c:	000d883a 	mov	r6,zero
10003e70:	01d00934 	movhi	r7,16420
10003e74:	1009883a 	mov	r4,r2
10003e78:	180b883a 	mov	r5,r3
10003e7c:	e02d883a 	mov	r22,fp
10003e80:	95ffd81e 	bne	r18,r23,10003de4 <__alt_data_end+0xf8003de4>
10003e84:	802f883a 	mov	r23,r16
10003e88:	df000417 	ldw	fp,16(sp)
10003e8c:	dc000317 	ldw	r16,12(sp)
10003e90:	1009883a 	mov	r4,r2
10003e94:	180b883a 	mov	r5,r3
10003e98:	100d883a 	mov	r6,r2
10003e9c:	180f883a 	mov	r7,r3
10003ea0:	000b0a00 	call	1000b0a0 <__adddf3>
10003ea4:	8809883a 	mov	r4,r17
10003ea8:	980b883a 	mov	r5,r19
10003eac:	100d883a 	mov	r6,r2
10003eb0:	180f883a 	mov	r7,r3
10003eb4:	1025883a 	mov	r18,r2
10003eb8:	1829883a 	mov	r20,r3
10003ebc:	000c4140 	call	1000c414 <__ledf2>
10003ec0:	10000816 	blt	r2,zero,10003ee4 <_dtoa_r+0x968>
10003ec4:	8809883a 	mov	r4,r17
10003ec8:	980b883a 	mov	r5,r19
10003ecc:	900d883a 	mov	r6,r18
10003ed0:	a00f883a 	mov	r7,r20
10003ed4:	000c2b80 	call	1000c2b8 <__eqdf2>
10003ed8:	103f541e 	bne	r2,zero,10003c2c <__alt_data_end+0xf8003c2c>
10003edc:	bdc0004c 	andi	r23,r23,1
10003ee0:	b83f5226 	beq	r23,zero,10003c2c <__alt_data_end+0xf8003c2c>
10003ee4:	b53fffc3 	ldbu	r20,-1(r22)
10003ee8:	b0ffff84 	addi	r3,r22,-2
10003eec:	01400e44 	movi	r5,57
10003ef0:	d9800717 	ldw	r6,28(sp)
10003ef4:	00000406 	br	10003f08 <_dtoa_r+0x98c>
10003ef8:	30824326 	beq	r6,r2,10004808 <_dtoa_r+0x128c>
10003efc:	1d000003 	ldbu	r20,0(r3)
10003f00:	102d883a 	mov	r22,r2
10003f04:	18ffffc4 	addi	r3,r3,-1
10003f08:	a1003fcc 	andi	r4,r20,255
10003f0c:	2100201c 	xori	r4,r4,128
10003f10:	213fe004 	addi	r4,r4,-128
10003f14:	b0bfffc4 	addi	r2,r22,-1
10003f18:	217ff726 	beq	r4,r5,10003ef8 <__alt_data_end+0xf8003ef8>
10003f1c:	a2400044 	addi	r9,r20,1
10003f20:	12400005 	stb	r9,0(r2)
10003f24:	003f4106 	br	10003c2c <__alt_data_end+0xf8003c2c>
10003f28:	d9000c17 	ldw	r4,48(sp)
10003f2c:	2000be26 	beq	r4,zero,10004228 <_dtoa_r+0xcac>
10003f30:	d9800417 	ldw	r6,16(sp)
10003f34:	00c00044 	movi	r3,1
10003f38:	19815e0e 	bge	r3,r6,100044b4 <_dtoa_r+0xf38>
10003f3c:	d8800917 	ldw	r2,36(sp)
10003f40:	d8c00a17 	ldw	r3,40(sp)
10003f44:	153fffc4 	addi	r20,r2,-1
10003f48:	1d01f816 	blt	r3,r20,1000472c <_dtoa_r+0x11b0>
10003f4c:	1d29c83a 	sub	r20,r3,r20
10003f50:	d9c00917 	ldw	r7,36(sp)
10003f54:	3802ad16 	blt	r7,zero,10004a0c <_dtoa_r+0x1490>
10003f58:	dcc00817 	ldw	r19,32(sp)
10003f5c:	d8800917 	ldw	r2,36(sp)
10003f60:	d8c00817 	ldw	r3,32(sp)
10003f64:	8009883a 	mov	r4,r16
10003f68:	01400044 	movi	r5,1
10003f6c:	1887883a 	add	r3,r3,r2
10003f70:	d8c00815 	stw	r3,32(sp)
10003f74:	a8ab883a 	add	r21,r21,r2
10003f78:	00068c00 	call	100068c0 <__i2b>
10003f7c:	1023883a 	mov	r17,r2
10003f80:	98000826 	beq	r19,zero,10003fa4 <_dtoa_r+0xa28>
10003f84:	0540070e 	bge	zero,r21,10003fa4 <_dtoa_r+0xa28>
10003f88:	a805883a 	mov	r2,r21
10003f8c:	9d411716 	blt	r19,r21,100043ec <_dtoa_r+0xe70>
10003f90:	d9000817 	ldw	r4,32(sp)
10003f94:	98a7c83a 	sub	r19,r19,r2
10003f98:	a8abc83a 	sub	r21,r21,r2
10003f9c:	2089c83a 	sub	r4,r4,r2
10003fa0:	d9000815 	stw	r4,32(sp)
10003fa4:	d9800a17 	ldw	r6,40(sp)
10003fa8:	0180140e 	bge	zero,r6,10003ffc <_dtoa_r+0xa80>
10003fac:	d9c00c17 	ldw	r7,48(sp)
10003fb0:	3801d626 	beq	r7,zero,1000470c <_dtoa_r+0x1190>
10003fb4:	05000e0e 	bge	zero,r20,10003ff0 <_dtoa_r+0xa74>
10003fb8:	880b883a 	mov	r5,r17
10003fbc:	8009883a 	mov	r4,r16
10003fc0:	a00d883a 	mov	r6,r20
10003fc4:	0006b680 	call	10006b68 <__pow5mult>
10003fc8:	e00d883a 	mov	r6,fp
10003fcc:	8009883a 	mov	r4,r16
10003fd0:	100b883a 	mov	r5,r2
10003fd4:	1023883a 	mov	r17,r2
10003fd8:	00068fc0 	call	100068fc <__multiply>
10003fdc:	102d883a 	mov	r22,r2
10003fe0:	e00b883a 	mov	r5,fp
10003fe4:	8009883a 	mov	r4,r16
10003fe8:	00065380 	call	10006538 <_Bfree>
10003fec:	b039883a 	mov	fp,r22
10003ff0:	d8800a17 	ldw	r2,40(sp)
10003ff4:	150dc83a 	sub	r6,r2,r20
10003ff8:	30011f1e 	bne	r6,zero,10004478 <_dtoa_r+0xefc>
10003ffc:	8009883a 	mov	r4,r16
10004000:	01400044 	movi	r5,1
10004004:	00068c00 	call	100068c0 <__i2b>
10004008:	d8c00b17 	ldw	r3,44(sp)
1000400c:	1029883a 	mov	r20,r2
10004010:	00c0050e 	bge	zero,r3,10004028 <_dtoa_r+0xaac>
10004014:	8009883a 	mov	r4,r16
10004018:	100b883a 	mov	r5,r2
1000401c:	180d883a 	mov	r6,r3
10004020:	0006b680 	call	10006b68 <__pow5mult>
10004024:	1029883a 	mov	r20,r2
10004028:	d9000417 	ldw	r4,16(sp)
1000402c:	00800044 	movi	r2,1
10004030:	1100e00e 	bge	r2,r4,100043b4 <_dtoa_r+0xe38>
10004034:	0025883a 	mov	r18,zero
10004038:	d8800b17 	ldw	r2,44(sp)
1000403c:	10015f1e 	bne	r2,zero,100045bc <_dtoa_r+0x1040>
10004040:	00800044 	movi	r2,1
10004044:	1545883a 	add	r2,r2,r21
10004048:	108007cc 	andi	r2,r2,31
1000404c:	10007a26 	beq	r2,zero,10004238 <_dtoa_r+0xcbc>
10004050:	01000804 	movi	r4,32
10004054:	2089c83a 	sub	r4,r4,r2
10004058:	00c00104 	movi	r3,4
1000405c:	1902d20e 	bge	r3,r4,10004ba8 <_dtoa_r+0x162c>
10004060:	00c00704 	movi	r3,28
10004064:	1885c83a 	sub	r2,r3,r2
10004068:	d8c00817 	ldw	r3,32(sp)
1000406c:	98a7883a 	add	r19,r19,r2
10004070:	a8ab883a 	add	r21,r21,r2
10004074:	1887883a 	add	r3,r3,r2
10004078:	d8c00815 	stw	r3,32(sp)
1000407c:	d9800817 	ldw	r6,32(sp)
10004080:	0180040e 	bge	zero,r6,10004094 <_dtoa_r+0xb18>
10004084:	e00b883a 	mov	r5,fp
10004088:	8009883a 	mov	r4,r16
1000408c:	0006cb00 	call	10006cb0 <__lshift>
10004090:	1039883a 	mov	fp,r2
10004094:	0540050e 	bge	zero,r21,100040ac <_dtoa_r+0xb30>
10004098:	a00b883a 	mov	r5,r20
1000409c:	8009883a 	mov	r4,r16
100040a0:	a80d883a 	mov	r6,r21
100040a4:	0006cb00 	call	10006cb0 <__lshift>
100040a8:	1029883a 	mov	r20,r2
100040ac:	d9c00e17 	ldw	r7,56(sp)
100040b0:	3801301e 	bne	r7,zero,10004574 <_dtoa_r+0xff8>
100040b4:	d9c00917 	ldw	r7,36(sp)
100040b8:	01c1500e 	bge	zero,r7,100045fc <_dtoa_r+0x1080>
100040bc:	d8800c17 	ldw	r2,48(sp)
100040c0:	10006b1e 	bne	r2,zero,10004270 <_dtoa_r+0xcf4>
100040c4:	dc800717 	ldw	r18,28(sp)
100040c8:	dcc00917 	ldw	r19,36(sp)
100040cc:	902b883a 	mov	r21,r18
100040d0:	00000206 	br	100040dc <_dtoa_r+0xb60>
100040d4:	00065600 	call	10006560 <__multadd>
100040d8:	1039883a 	mov	fp,r2
100040dc:	e009883a 	mov	r4,fp
100040e0:	a00b883a 	mov	r5,r20
100040e4:	00033540 	call	10003354 <quorem>
100040e8:	10800c04 	addi	r2,r2,48
100040ec:	90800005 	stb	r2,0(r18)
100040f0:	94800044 	addi	r18,r18,1
100040f4:	9547c83a 	sub	r3,r18,r21
100040f8:	8009883a 	mov	r4,r16
100040fc:	e00b883a 	mov	r5,fp
10004100:	01800284 	movi	r6,10
10004104:	000f883a 	mov	r7,zero
10004108:	1cfff216 	blt	r3,r19,100040d4 <__alt_data_end+0xf80040d4>
1000410c:	102f883a 	mov	r23,r2
10004110:	d8800917 	ldw	r2,36(sp)
10004114:	0082410e 	bge	zero,r2,10004a1c <_dtoa_r+0x14a0>
10004118:	d9000717 	ldw	r4,28(sp)
1000411c:	002b883a 	mov	r21,zero
10004120:	20ad883a 	add	r22,r4,r2
10004124:	e00b883a 	mov	r5,fp
10004128:	8009883a 	mov	r4,r16
1000412c:	01800044 	movi	r6,1
10004130:	0006cb00 	call	10006cb0 <__lshift>
10004134:	1009883a 	mov	r4,r2
10004138:	a00b883a 	mov	r5,r20
1000413c:	1039883a 	mov	fp,r2
10004140:	0006e000 	call	10006e00 <__mcmp>
10004144:	0080d10e 	bge	zero,r2,1000448c <_dtoa_r+0xf10>
10004148:	b13fffc3 	ldbu	r4,-1(r22)
1000414c:	b0ffff84 	addi	r3,r22,-2
10004150:	01800e44 	movi	r6,57
10004154:	d9c00717 	ldw	r7,28(sp)
10004158:	00000406 	br	1000416c <_dtoa_r+0xbf0>
1000415c:	38813c26 	beq	r7,r2,10004650 <_dtoa_r+0x10d4>
10004160:	19000003 	ldbu	r4,0(r3)
10004164:	102d883a 	mov	r22,r2
10004168:	18ffffc4 	addi	r3,r3,-1
1000416c:	21403fcc 	andi	r5,r4,255
10004170:	2940201c 	xori	r5,r5,128
10004174:	297fe004 	addi	r5,r5,-128
10004178:	b0bfffc4 	addi	r2,r22,-1
1000417c:	29bff726 	beq	r5,r6,1000415c <__alt_data_end+0xf800415c>
10004180:	21000044 	addi	r4,r4,1
10004184:	11000005 	stb	r4,0(r2)
10004188:	8009883a 	mov	r4,r16
1000418c:	a00b883a 	mov	r5,r20
10004190:	00065380 	call	10006538 <_Bfree>
10004194:	883ea526 	beq	r17,zero,10003c2c <__alt_data_end+0xf8003c2c>
10004198:	a8000426 	beq	r21,zero,100041ac <_dtoa_r+0xc30>
1000419c:	ac400326 	beq	r21,r17,100041ac <_dtoa_r+0xc30>
100041a0:	8009883a 	mov	r4,r16
100041a4:	a80b883a 	mov	r5,r21
100041a8:	00065380 	call	10006538 <_Bfree>
100041ac:	8009883a 	mov	r4,r16
100041b0:	880b883a 	mov	r5,r17
100041b4:	00065380 	call	10006538 <_Bfree>
100041b8:	003e9c06 	br	10003c2c <__alt_data_end+0xf8003c2c>
100041bc:	01c00044 	movi	r7,1
100041c0:	d9c00e15 	stw	r7,56(sp)
100041c4:	003d9906 	br	1000382c <__alt_data_end+0xf800382c>
100041c8:	d8c00817 	ldw	r3,32(sp)
100041cc:	d9000617 	ldw	r4,24(sp)
100041d0:	d8000b15 	stw	zero,44(sp)
100041d4:	1907c83a 	sub	r3,r3,r4
100041d8:	010dc83a 	sub	r6,zero,r4
100041dc:	d8c00815 	stw	r3,32(sp)
100041e0:	d9800a15 	stw	r6,40(sp)
100041e4:	003d9a06 	br	10003850 <__alt_data_end+0xf8003850>
100041e8:	056bc83a 	sub	r21,zero,r21
100041ec:	dd400815 	stw	r21,32(sp)
100041f0:	002b883a 	mov	r21,zero
100041f4:	003d9106 	br	1000383c <__alt_data_end+0xf800383c>
100041f8:	d9000617 	ldw	r4,24(sp)
100041fc:	000d6080 	call	1000d608 <__floatsidf>
10004200:	1009883a 	mov	r4,r2
10004204:	180b883a 	mov	r5,r3
10004208:	980d883a 	mov	r6,r19
1000420c:	880f883a 	mov	r7,r17
10004210:	000c2b80 	call	1000c2b8 <__eqdf2>
10004214:	103d7426 	beq	r2,zero,100037e8 <__alt_data_end+0xf80037e8>
10004218:	d8c00617 	ldw	r3,24(sp)
1000421c:	18ffffc4 	addi	r3,r3,-1
10004220:	d8c00615 	stw	r3,24(sp)
10004224:	003d7006 	br	100037e8 <__alt_data_end+0xf80037e8>
10004228:	dd000a17 	ldw	r20,40(sp)
1000422c:	dcc00817 	ldw	r19,32(sp)
10004230:	0023883a 	mov	r17,zero
10004234:	003f5206 	br	10003f80 <__alt_data_end+0xf8003f80>
10004238:	00800704 	movi	r2,28
1000423c:	d9000817 	ldw	r4,32(sp)
10004240:	98a7883a 	add	r19,r19,r2
10004244:	a8ab883a 	add	r21,r21,r2
10004248:	2089883a 	add	r4,r4,r2
1000424c:	d9000815 	stw	r4,32(sp)
10004250:	003f8a06 	br	1000407c <__alt_data_end+0xf800407c>
10004254:	d9c00317 	ldw	r7,12(sp)
10004258:	013efb84 	movi	r4,-1042
1000425c:	2509c83a 	sub	r4,r4,r20
10004260:	3908983a 	sll	r4,r7,r4
10004264:	003d2c06 	br	10003718 <__alt_data_end+0xf8003718>
10004268:	d8000e15 	stw	zero,56(sp)
1000426c:	003d6f06 	br	1000382c <__alt_data_end+0xf800382c>
10004270:	04c0050e 	bge	zero,r19,10004288 <_dtoa_r+0xd0c>
10004274:	880b883a 	mov	r5,r17
10004278:	8009883a 	mov	r4,r16
1000427c:	980d883a 	mov	r6,r19
10004280:	0006cb00 	call	10006cb0 <__lshift>
10004284:	1023883a 	mov	r17,r2
10004288:	9001681e 	bne	r18,zero,1000482c <_dtoa_r+0x12b0>
1000428c:	8827883a 	mov	r19,r17
10004290:	d8c00717 	ldw	r3,28(sp)
10004294:	d9000917 	ldw	r4,36(sp)
10004298:	1dffffc4 	addi	r23,r3,-1
1000429c:	1825883a 	mov	r18,r3
100042a0:	d8c00317 	ldw	r3,12(sp)
100042a4:	b92f883a 	add	r23,r23,r4
100042a8:	ddc00515 	stw	r23,20(sp)
100042ac:	18c0004c 	andi	r3,r3,1
100042b0:	d8c00315 	stw	r3,12(sp)
100042b4:	e009883a 	mov	r4,fp
100042b8:	a00b883a 	mov	r5,r20
100042bc:	00033540 	call	10003354 <quorem>
100042c0:	e009883a 	mov	r4,fp
100042c4:	880b883a 	mov	r5,r17
100042c8:	102d883a 	mov	r22,r2
100042cc:	0006e000 	call	10006e00 <__mcmp>
100042d0:	8009883a 	mov	r4,r16
100042d4:	a00b883a 	mov	r5,r20
100042d8:	980d883a 	mov	r6,r19
100042dc:	102b883a 	mov	r21,r2
100042e0:	0006e600 	call	10006e60 <__mdiff>
100042e4:	1007883a 	mov	r3,r2
100042e8:	10800317 	ldw	r2,12(r2)
100042ec:	b5c00c04 	addi	r23,r22,48
100042f0:	10009b1e 	bne	r2,zero,10004560 <_dtoa_r+0xfe4>
100042f4:	180b883a 	mov	r5,r3
100042f8:	e009883a 	mov	r4,fp
100042fc:	d8c01515 	stw	r3,84(sp)
10004300:	0006e000 	call	10006e00 <__mcmp>
10004304:	d8c01517 	ldw	r3,84(sp)
10004308:	8009883a 	mov	r4,r16
1000430c:	d8801515 	stw	r2,84(sp)
10004310:	180b883a 	mov	r5,r3
10004314:	00065380 	call	10006538 <_Bfree>
10004318:	d8801517 	ldw	r2,84(sp)
1000431c:	1000041e 	bne	r2,zero,10004330 <_dtoa_r+0xdb4>
10004320:	d9000417 	ldw	r4,16(sp)
10004324:	2000021e 	bne	r4,zero,10004330 <_dtoa_r+0xdb4>
10004328:	d8c00317 	ldw	r3,12(sp)
1000432c:	18007926 	beq	r3,zero,10004514 <_dtoa_r+0xf98>
10004330:	a8006616 	blt	r21,zero,100044cc <_dtoa_r+0xf50>
10004334:	a800041e 	bne	r21,zero,10004348 <_dtoa_r+0xdcc>
10004338:	d9000417 	ldw	r4,16(sp)
1000433c:	2000021e 	bne	r4,zero,10004348 <_dtoa_r+0xdcc>
10004340:	d8c00317 	ldw	r3,12(sp)
10004344:	18006126 	beq	r3,zero,100044cc <_dtoa_r+0xf50>
10004348:	00814916 	blt	zero,r2,10004870 <_dtoa_r+0x12f4>
1000434c:	d8c00517 	ldw	r3,20(sp)
10004350:	95400044 	addi	r21,r18,1
10004354:	95c00005 	stb	r23,0(r18)
10004358:	a82d883a 	mov	r22,r21
1000435c:	90c14c26 	beq	r18,r3,10004890 <_dtoa_r+0x1314>
10004360:	e00b883a 	mov	r5,fp
10004364:	8009883a 	mov	r4,r16
10004368:	01800284 	movi	r6,10
1000436c:	000f883a 	mov	r7,zero
10004370:	00065600 	call	10006560 <__multadd>
10004374:	1039883a 	mov	fp,r2
10004378:	8cc07026 	beq	r17,r19,1000453c <_dtoa_r+0xfc0>
1000437c:	880b883a 	mov	r5,r17
10004380:	01800284 	movi	r6,10
10004384:	000f883a 	mov	r7,zero
10004388:	8009883a 	mov	r4,r16
1000438c:	00065600 	call	10006560 <__multadd>
10004390:	980b883a 	mov	r5,r19
10004394:	8009883a 	mov	r4,r16
10004398:	01800284 	movi	r6,10
1000439c:	000f883a 	mov	r7,zero
100043a0:	1023883a 	mov	r17,r2
100043a4:	00065600 	call	10006560 <__multadd>
100043a8:	1027883a 	mov	r19,r2
100043ac:	a825883a 	mov	r18,r21
100043b0:	003fc006 	br	100042b4 <__alt_data_end+0xf80042b4>
100043b4:	d9800317 	ldw	r6,12(sp)
100043b8:	303f1e1e 	bne	r6,zero,10004034 <__alt_data_end+0xf8004034>
100043bc:	00c00434 	movhi	r3,16
100043c0:	18ffffc4 	addi	r3,r3,-1
100043c4:	90c6703a 	and	r3,r18,r3
100043c8:	183f1a1e 	bne	r3,zero,10004034 <__alt_data_end+0xf8004034>
100043cc:	949ffc2c 	andhi	r18,r18,32752
100043d0:	903f1826 	beq	r18,zero,10004034 <__alt_data_end+0xf8004034>
100043d4:	d9c00817 	ldw	r7,32(sp)
100043d8:	a8ab883a 	add	r21,r21,r2
100043dc:	1025883a 	mov	r18,r2
100043e0:	388f883a 	add	r7,r7,r2
100043e4:	d9c00815 	stw	r7,32(sp)
100043e8:	003f1306 	br	10004038 <__alt_data_end+0xf8004038>
100043ec:	9805883a 	mov	r2,r19
100043f0:	003ee706 	br	10003f90 <__alt_data_end+0xf8003f90>
100043f4:	01800044 	movi	r6,1
100043f8:	d9800c15 	stw	r6,48(sp)
100043fc:	d8802117 	ldw	r2,132(sp)
10004400:	0080da0e 	bge	zero,r2,1000476c <_dtoa_r+0x11f0>
10004404:	100d883a 	mov	r6,r2
10004408:	d8800d15 	stw	r2,52(sp)
1000440c:	d8800915 	stw	r2,36(sp)
10004410:	003d2a06 	br	100038bc <__alt_data_end+0xf80038bc>
10004414:	d8800917 	ldw	r2,36(sp)
10004418:	00be4016 	blt	zero,r2,10003d1c <__alt_data_end+0xf8003d1c>
1000441c:	1000b81e 	bne	r2,zero,10004700 <_dtoa_r+0x1184>
10004420:	8809883a 	mov	r4,r17
10004424:	980b883a 	mov	r5,r19
10004428:	000d883a 	mov	r6,zero
1000442c:	01d00534 	movhi	r7,16404
10004430:	000c5000 	call	1000c500 <__muldf3>
10004434:	d9800317 	ldw	r6,12(sp)
10004438:	1009883a 	mov	r4,r2
1000443c:	180b883a 	mov	r5,r3
10004440:	900f883a 	mov	r7,r18
10004444:	000c33c0 	call	1000c33c <__gedf2>
10004448:	0029883a 	mov	r20,zero
1000444c:	0023883a 	mov	r17,zero
10004450:	10007716 	blt	r2,zero,10004630 <_dtoa_r+0x10b4>
10004454:	d9002117 	ldw	r4,132(sp)
10004458:	dd800717 	ldw	r22,28(sp)
1000445c:	0108303a 	nor	r4,zero,r4
10004460:	d9000615 	stw	r4,24(sp)
10004464:	8009883a 	mov	r4,r16
10004468:	a00b883a 	mov	r5,r20
1000446c:	00065380 	call	10006538 <_Bfree>
10004470:	883f4e1e 	bne	r17,zero,100041ac <__alt_data_end+0xf80041ac>
10004474:	003ded06 	br	10003c2c <__alt_data_end+0xf8003c2c>
10004478:	e00b883a 	mov	r5,fp
1000447c:	8009883a 	mov	r4,r16
10004480:	0006b680 	call	10006b68 <__pow5mult>
10004484:	1039883a 	mov	fp,r2
10004488:	003edc06 	br	10003ffc <__alt_data_end+0xf8003ffc>
1000448c:	1000021e 	bne	r2,zero,10004498 <_dtoa_r+0xf1c>
10004490:	ba40004c 	andi	r9,r23,1
10004494:	483f2c1e 	bne	r9,zero,10004148 <__alt_data_end+0xf8004148>
10004498:	01000c04 	movi	r4,48
1000449c:	00000106 	br	100044a4 <_dtoa_r+0xf28>
100044a0:	102d883a 	mov	r22,r2
100044a4:	b0bfffc4 	addi	r2,r22,-1
100044a8:	10c00007 	ldb	r3,0(r2)
100044ac:	193ffc26 	beq	r3,r4,100044a0 <__alt_data_end+0xf80044a0>
100044b0:	003f3506 	br	10004188 <__alt_data_end+0xf8004188>
100044b4:	d9c00f17 	ldw	r7,60(sp)
100044b8:	38015a26 	beq	r7,zero,10004a24 <_dtoa_r+0x14a8>
100044bc:	10810cc4 	addi	r2,r2,1075
100044c0:	dd000a17 	ldw	r20,40(sp)
100044c4:	dcc00817 	ldw	r19,32(sp)
100044c8:	003ea506 	br	10003f60 <__alt_data_end+0xf8003f60>
100044cc:	00800c0e 	bge	zero,r2,10004500 <_dtoa_r+0xf84>
100044d0:	e00b883a 	mov	r5,fp
100044d4:	8009883a 	mov	r4,r16
100044d8:	01800044 	movi	r6,1
100044dc:	0006cb00 	call	10006cb0 <__lshift>
100044e0:	1009883a 	mov	r4,r2
100044e4:	a00b883a 	mov	r5,r20
100044e8:	1039883a 	mov	fp,r2
100044ec:	0006e000 	call	10006e00 <__mcmp>
100044f0:	0081930e 	bge	zero,r2,10004b40 <_dtoa_r+0x15c4>
100044f4:	00800e44 	movi	r2,57
100044f8:	b8800a26 	beq	r23,r2,10004524 <_dtoa_r+0xfa8>
100044fc:	b5c00c44 	addi	r23,r22,49
10004500:	882b883a 	mov	r21,r17
10004504:	95800044 	addi	r22,r18,1
10004508:	95c00005 	stb	r23,0(r18)
1000450c:	9823883a 	mov	r17,r19
10004510:	003f1d06 	br	10004188 <__alt_data_end+0xf8004188>
10004514:	00800e44 	movi	r2,57
10004518:	b8800226 	beq	r23,r2,10004524 <_dtoa_r+0xfa8>
1000451c:	057ff716 	blt	zero,r21,100044fc <__alt_data_end+0xf80044fc>
10004520:	003ff706 	br	10004500 <__alt_data_end+0xf8004500>
10004524:	01000e44 	movi	r4,57
10004528:	882b883a 	mov	r21,r17
1000452c:	95800044 	addi	r22,r18,1
10004530:	91000005 	stb	r4,0(r18)
10004534:	9823883a 	mov	r17,r19
10004538:	003f0406 	br	1000414c <__alt_data_end+0xf800414c>
1000453c:	880b883a 	mov	r5,r17
10004540:	8009883a 	mov	r4,r16
10004544:	01800284 	movi	r6,10
10004548:	000f883a 	mov	r7,zero
1000454c:	00065600 	call	10006560 <__multadd>
10004550:	1023883a 	mov	r17,r2
10004554:	1027883a 	mov	r19,r2
10004558:	a825883a 	mov	r18,r21
1000455c:	003f5506 	br	100042b4 <__alt_data_end+0xf80042b4>
10004560:	8009883a 	mov	r4,r16
10004564:	180b883a 	mov	r5,r3
10004568:	00065380 	call	10006538 <_Bfree>
1000456c:	00800044 	movi	r2,1
10004570:	003f6f06 	br	10004330 <__alt_data_end+0xf8004330>
10004574:	e009883a 	mov	r4,fp
10004578:	a00b883a 	mov	r5,r20
1000457c:	0006e000 	call	10006e00 <__mcmp>
10004580:	103ecc0e 	bge	r2,zero,100040b4 <__alt_data_end+0xf80040b4>
10004584:	e00b883a 	mov	r5,fp
10004588:	8009883a 	mov	r4,r16
1000458c:	01800284 	movi	r6,10
10004590:	000f883a 	mov	r7,zero
10004594:	00065600 	call	10006560 <__multadd>
10004598:	1039883a 	mov	fp,r2
1000459c:	d8800617 	ldw	r2,24(sp)
100045a0:	d8c00c17 	ldw	r3,48(sp)
100045a4:	10bfffc4 	addi	r2,r2,-1
100045a8:	d8800615 	stw	r2,24(sp)
100045ac:	1801681e 	bne	r3,zero,10004b50 <_dtoa_r+0x15d4>
100045b0:	d9800d17 	ldw	r6,52(sp)
100045b4:	d9800915 	stw	r6,36(sp)
100045b8:	003ebe06 	br	100040b4 <__alt_data_end+0xf80040b4>
100045bc:	a0800417 	ldw	r2,16(r20)
100045c0:	10800104 	addi	r2,r2,4
100045c4:	1085883a 	add	r2,r2,r2
100045c8:	1085883a 	add	r2,r2,r2
100045cc:	a085883a 	add	r2,r20,r2
100045d0:	11000017 	ldw	r4,0(r2)
100045d4:	00067a80 	call	100067a8 <__hi0bits>
100045d8:	00c00804 	movi	r3,32
100045dc:	1885c83a 	sub	r2,r3,r2
100045e0:	003e9806 	br	10004044 <__alt_data_end+0xf8004044>
100045e4:	d8800717 	ldw	r2,28(sp)
100045e8:	003c1306 	br	10003638 <__alt_data_end+0xf8003638>
100045ec:	00800084 	movi	r2,2
100045f0:	18bdb11e 	bne	r3,r2,10003cb8 <__alt_data_end+0xf8003cb8>
100045f4:	d8000c15 	stw	zero,48(sp)
100045f8:	003f8006 	br	100043fc <__alt_data_end+0xf80043fc>
100045fc:	d8c00417 	ldw	r3,16(sp)
10004600:	00800084 	movi	r2,2
10004604:	10fead0e 	bge	r2,r3,100040bc <__alt_data_end+0xf80040bc>
10004608:	383f921e 	bne	r7,zero,10004454 <__alt_data_end+0xf8004454>
1000460c:	a00b883a 	mov	r5,r20
10004610:	8009883a 	mov	r4,r16
10004614:	01800144 	movi	r6,5
10004618:	00065600 	call	10006560 <__multadd>
1000461c:	e009883a 	mov	r4,fp
10004620:	100b883a 	mov	r5,r2
10004624:	1029883a 	mov	r20,r2
10004628:	0006e000 	call	10006e00 <__mcmp>
1000462c:	00bf890e 	bge	zero,r2,10004454 <__alt_data_end+0xf8004454>
10004630:	d9c00617 	ldw	r7,24(sp)
10004634:	d9800717 	ldw	r6,28(sp)
10004638:	00800c44 	movi	r2,49
1000463c:	39c00044 	addi	r7,r7,1
10004640:	35800044 	addi	r22,r6,1
10004644:	30800005 	stb	r2,0(r6)
10004648:	d9c00615 	stw	r7,24(sp)
1000464c:	003f8506 	br	10004464 <__alt_data_end+0xf8004464>
10004650:	d9800617 	ldw	r6,24(sp)
10004654:	d9c00717 	ldw	r7,28(sp)
10004658:	00800c44 	movi	r2,49
1000465c:	31800044 	addi	r6,r6,1
10004660:	d9800615 	stw	r6,24(sp)
10004664:	38800005 	stb	r2,0(r7)
10004668:	003ec706 	br	10004188 <__alt_data_end+0xf8004188>
1000466c:	df000417 	ldw	fp,16(sp)
10004670:	dc000317 	ldw	r16,12(sp)
10004674:	003d6d06 	br	10003c2c <__alt_data_end+0xf8003c2c>
10004678:	8809883a 	mov	r4,r17
1000467c:	000d6080 	call	1000d608 <__floatsidf>
10004680:	9809883a 	mov	r4,r19
10004684:	a00b883a 	mov	r5,r20
10004688:	100d883a 	mov	r6,r2
1000468c:	180f883a 	mov	r7,r3
10004690:	000c5000 	call	1000c500 <__muldf3>
10004694:	1009883a 	mov	r4,r2
10004698:	180b883a 	mov	r5,r3
1000469c:	000d883a 	mov	r6,zero
100046a0:	01d00734 	movhi	r7,16412
100046a4:	000b0a00 	call	1000b0a0 <__adddf3>
100046a8:	05bf3034 	movhi	r22,64704
100046ac:	1023883a 	mov	r17,r2
100046b0:	1daf883a 	add	r23,r3,r22
100046b4:	9809883a 	mov	r4,r19
100046b8:	a00b883a 	mov	r5,r20
100046bc:	000d883a 	mov	r6,zero
100046c0:	01d00534 	movhi	r7,16404
100046c4:	000cd000 	call	1000cd00 <__subdf3>
100046c8:	1009883a 	mov	r4,r2
100046cc:	180b883a 	mov	r5,r3
100046d0:	880d883a 	mov	r6,r17
100046d4:	b80f883a 	mov	r7,r23
100046d8:	1027883a 	mov	r19,r2
100046dc:	1829883a 	mov	r20,r3
100046e0:	000c33c0 	call	1000c33c <__gedf2>
100046e4:	00806d16 	blt	zero,r2,1000489c <_dtoa_r+0x1320>
100046e8:	b9e0003c 	xorhi	r7,r23,32768
100046ec:	9809883a 	mov	r4,r19
100046f0:	a00b883a 	mov	r5,r20
100046f4:	880d883a 	mov	r6,r17
100046f8:	000c4140 	call	1000c414 <__ledf2>
100046fc:	103d7a0e 	bge	r2,zero,10003ce8 <__alt_data_end+0xf8003ce8>
10004700:	0029883a 	mov	r20,zero
10004704:	0023883a 	mov	r17,zero
10004708:	003f5206 	br	10004454 <__alt_data_end+0xf8004454>
1000470c:	d9800a17 	ldw	r6,40(sp)
10004710:	e00b883a 	mov	r5,fp
10004714:	8009883a 	mov	r4,r16
10004718:	0006b680 	call	10006b68 <__pow5mult>
1000471c:	1039883a 	mov	fp,r2
10004720:	003e3606 	br	10003ffc <__alt_data_end+0xf8003ffc>
10004724:	d8000c15 	stw	zero,48(sp)
10004728:	003c5c06 	br	1000389c <__alt_data_end+0xf800389c>
1000472c:	d9000a17 	ldw	r4,40(sp)
10004730:	d9800b17 	ldw	r6,44(sp)
10004734:	dd000a15 	stw	r20,40(sp)
10004738:	a105c83a 	sub	r2,r20,r4
1000473c:	308d883a 	add	r6,r6,r2
10004740:	d9800b15 	stw	r6,44(sp)
10004744:	0029883a 	mov	r20,zero
10004748:	003e0106 	br	10003f50 <__alt_data_end+0xf8003f50>
1000474c:	dcc00317 	ldw	r19,12(sp)
10004750:	9029883a 	mov	r20,r18
10004754:	04400084 	movi	r17,2
10004758:	003c8606 	br	10003974 <__alt_data_end+0xf8003974>
1000475c:	3023883a 	mov	r17,r6
10004760:	80001115 	stw	zero,68(r16)
10004764:	000b883a 	mov	r5,zero
10004768:	003c6006 	br	100038ec <__alt_data_end+0xf80038ec>
1000476c:	04400044 	movi	r17,1
10004770:	dc400d15 	stw	r17,52(sp)
10004774:	dc400915 	stw	r17,36(sp)
10004778:	dc402115 	stw	r17,132(sp)
1000477c:	003ff806 	br	10004760 <__alt_data_end+0xf8004760>
10004780:	d8800617 	ldw	r2,24(sp)
10004784:	00adc83a 	sub	r22,zero,r2
10004788:	b000ac26 	beq	r22,zero,10004a3c <_dtoa_r+0x14c0>
1000478c:	b08003cc 	andi	r2,r22,15
10004790:	100490fa 	slli	r2,r2,3
10004794:	00c40074 	movhi	r3,4097
10004798:	18ffed04 	addi	r3,r3,-76
1000479c:	d9000317 	ldw	r4,12(sp)
100047a0:	1885883a 	add	r2,r3,r2
100047a4:	11800017 	ldw	r6,0(r2)
100047a8:	11c00117 	ldw	r7,4(r2)
100047ac:	b02dd13a 	srai	r22,r22,4
100047b0:	900b883a 	mov	r5,r18
100047b4:	000c5000 	call	1000c500 <__muldf3>
100047b8:	1027883a 	mov	r19,r2
100047bc:	1829883a 	mov	r20,r3
100047c0:	b000ec26 	beq	r22,zero,10004b74 <_dtoa_r+0x15f8>
100047c4:	05c40074 	movhi	r23,4097
100047c8:	bdffe304 	addi	r23,r23,-116
100047cc:	04400084 	movi	r17,2
100047d0:	b180004c 	andi	r6,r22,1
100047d4:	1009883a 	mov	r4,r2
100047d8:	b02dd07a 	srai	r22,r22,1
100047dc:	180b883a 	mov	r5,r3
100047e0:	30000426 	beq	r6,zero,100047f4 <_dtoa_r+0x1278>
100047e4:	b9800017 	ldw	r6,0(r23)
100047e8:	b9c00117 	ldw	r7,4(r23)
100047ec:	8c400044 	addi	r17,r17,1
100047f0:	000c5000 	call	1000c500 <__muldf3>
100047f4:	bdc00204 	addi	r23,r23,8
100047f8:	b03ff51e 	bne	r22,zero,100047d0 <__alt_data_end+0xf80047d0>
100047fc:	1027883a 	mov	r19,r2
10004800:	1829883a 	mov	r20,r3
10004804:	003c7406 	br	100039d8 <__alt_data_end+0xf80039d8>
10004808:	d9800617 	ldw	r6,24(sp)
1000480c:	d9c00717 	ldw	r7,28(sp)
10004810:	00c00c04 	movi	r3,48
10004814:	31800044 	addi	r6,r6,1
10004818:	38c00005 	stb	r3,0(r7)
1000481c:	02400c44 	movi	r9,49
10004820:	d9800615 	stw	r6,24(sp)
10004824:	12400005 	stb	r9,0(r2)
10004828:	003d0006 	br	10003c2c <__alt_data_end+0xf8003c2c>
1000482c:	89400117 	ldw	r5,4(r17)
10004830:	8009883a 	mov	r4,r16
10004834:	00064900 	call	10006490 <_Balloc>
10004838:	89800417 	ldw	r6,16(r17)
1000483c:	11000304 	addi	r4,r2,12
10004840:	89400304 	addi	r5,r17,12
10004844:	31800084 	addi	r6,r6,2
10004848:	318d883a 	add	r6,r6,r6
1000484c:	318d883a 	add	r6,r6,r6
10004850:	1025883a 	mov	r18,r2
10004854:	00062700 	call	10006270 <memcpy>
10004858:	8009883a 	mov	r4,r16
1000485c:	900b883a 	mov	r5,r18
10004860:	01800044 	movi	r6,1
10004864:	0006cb00 	call	10006cb0 <__lshift>
10004868:	1027883a 	mov	r19,r2
1000486c:	003e8806 	br	10004290 <__alt_data_end+0xf8004290>
10004870:	00800e44 	movi	r2,57
10004874:	b8bf2b26 	beq	r23,r2,10004524 <__alt_data_end+0xf8004524>
10004878:	ba400044 	addi	r9,r23,1
1000487c:	882b883a 	mov	r21,r17
10004880:	95800044 	addi	r22,r18,1
10004884:	92400005 	stb	r9,0(r18)
10004888:	9823883a 	mov	r17,r19
1000488c:	003e3e06 	br	10004188 <__alt_data_end+0xf8004188>
10004890:	882b883a 	mov	r21,r17
10004894:	9823883a 	mov	r17,r19
10004898:	003e2206 	br	10004124 <__alt_data_end+0xf8004124>
1000489c:	0029883a 	mov	r20,zero
100048a0:	0023883a 	mov	r17,zero
100048a4:	003f6206 	br	10004630 <__alt_data_end+0xf8004630>
100048a8:	59bfffc4 	addi	r6,r11,-1
100048ac:	300490fa 	slli	r2,r6,3
100048b0:	00c40074 	movhi	r3,4097
100048b4:	18ffed04 	addi	r3,r3,-76
100048b8:	b80f883a 	mov	r7,r23
100048bc:	1885883a 	add	r2,r3,r2
100048c0:	11000017 	ldw	r4,0(r2)
100048c4:	11400117 	ldw	r5,4(r2)
100048c8:	d8800717 	ldw	r2,28(sp)
100048cc:	d9801015 	stw	r6,64(sp)
100048d0:	880d883a 	mov	r6,r17
100048d4:	dac01615 	stw	r11,88(sp)
100048d8:	15800044 	addi	r22,r2,1
100048dc:	000c5000 	call	1000c500 <__muldf3>
100048e0:	a00b883a 	mov	r5,r20
100048e4:	9809883a 	mov	r4,r19
100048e8:	d8c01215 	stw	r3,72(sp)
100048ec:	d8801115 	stw	r2,68(sp)
100048f0:	000d5880 	call	1000d588 <__fixdfsi>
100048f4:	1009883a 	mov	r4,r2
100048f8:	1023883a 	mov	r17,r2
100048fc:	000d6080 	call	1000d608 <__floatsidf>
10004900:	9809883a 	mov	r4,r19
10004904:	a00b883a 	mov	r5,r20
10004908:	100d883a 	mov	r6,r2
1000490c:	180f883a 	mov	r7,r3
10004910:	000cd000 	call	1000cd00 <__subdf3>
10004914:	1815883a 	mov	r10,r3
10004918:	d8c00717 	ldw	r3,28(sp)
1000491c:	8c400c04 	addi	r17,r17,48
10004920:	102f883a 	mov	r23,r2
10004924:	1c400005 	stb	r17,0(r3)
10004928:	dac01617 	ldw	r11,88(sp)
1000492c:	00800044 	movi	r2,1
10004930:	58802426 	beq	r11,r2,100049c4 <_dtoa_r+0x1448>
10004934:	d9800717 	ldw	r6,28(sp)
10004938:	dc001415 	stw	r16,80(sp)
1000493c:	b805883a 	mov	r2,r23
10004940:	32d7883a 	add	r11,r6,r11
10004944:	b027883a 	mov	r19,r22
10004948:	5821883a 	mov	r16,r11
1000494c:	5007883a 	mov	r3,r10
10004950:	902f883a 	mov	r23,r18
10004954:	000d883a 	mov	r6,zero
10004958:	01d00934 	movhi	r7,16420
1000495c:	1009883a 	mov	r4,r2
10004960:	180b883a 	mov	r5,r3
10004964:	000c5000 	call	1000c500 <__muldf3>
10004968:	180b883a 	mov	r5,r3
1000496c:	1009883a 	mov	r4,r2
10004970:	1829883a 	mov	r20,r3
10004974:	1025883a 	mov	r18,r2
10004978:	000d5880 	call	1000d588 <__fixdfsi>
1000497c:	1009883a 	mov	r4,r2
10004980:	1023883a 	mov	r17,r2
10004984:	000d6080 	call	1000d608 <__floatsidf>
10004988:	9009883a 	mov	r4,r18
1000498c:	a00b883a 	mov	r5,r20
10004990:	100d883a 	mov	r6,r2
10004994:	180f883a 	mov	r7,r3
10004998:	8c400c04 	addi	r17,r17,48
1000499c:	000cd000 	call	1000cd00 <__subdf3>
100049a0:	9cc00044 	addi	r19,r19,1
100049a4:	9c7fffc5 	stb	r17,-1(r19)
100049a8:	9c3fea1e 	bne	r19,r16,10004954 <__alt_data_end+0xf8004954>
100049ac:	d9c01017 	ldw	r7,64(sp)
100049b0:	dc001417 	ldw	r16,80(sp)
100049b4:	b825883a 	mov	r18,r23
100049b8:	1815883a 	mov	r10,r3
100049bc:	102f883a 	mov	r23,r2
100049c0:	b1ed883a 	add	r22,r22,r7
100049c4:	d9001117 	ldw	r4,68(sp)
100049c8:	d9401217 	ldw	r5,72(sp)
100049cc:	000d883a 	mov	r6,zero
100049d0:	01cff834 	movhi	r7,16352
100049d4:	da801615 	stw	r10,88(sp)
100049d8:	000b0a00 	call	1000b0a0 <__adddf3>
100049dc:	da801617 	ldw	r10,88(sp)
100049e0:	1009883a 	mov	r4,r2
100049e4:	180b883a 	mov	r5,r3
100049e8:	500f883a 	mov	r7,r10
100049ec:	b80d883a 	mov	r6,r23
100049f0:	000c4140 	call	1000c414 <__ledf2>
100049f4:	da801617 	ldw	r10,88(sp)
100049f8:	1000330e 	bge	r2,zero,10004ac8 <_dtoa_r+0x154c>
100049fc:	d9001317 	ldw	r4,76(sp)
10004a00:	b53fffc3 	ldbu	r20,-1(r22)
10004a04:	d9000615 	stw	r4,24(sp)
10004a08:	003d3706 	br	10003ee8 <__alt_data_end+0xf8003ee8>
10004a0c:	d8800817 	ldw	r2,32(sp)
10004a10:	11e7c83a 	sub	r19,r2,r7
10004a14:	0005883a 	mov	r2,zero
10004a18:	003d5106 	br	10003f60 <__alt_data_end+0xf8003f60>
10004a1c:	00800044 	movi	r2,1
10004a20:	003dbd06 	br	10004118 <__alt_data_end+0xf8004118>
10004a24:	d8800217 	ldw	r2,8(sp)
10004a28:	00c00d84 	movi	r3,54
10004a2c:	dd000a17 	ldw	r20,40(sp)
10004a30:	1885c83a 	sub	r2,r3,r2
10004a34:	dcc00817 	ldw	r19,32(sp)
10004a38:	003d4906 	br	10003f60 <__alt_data_end+0xf8003f60>
10004a3c:	dcc00317 	ldw	r19,12(sp)
10004a40:	9029883a 	mov	r20,r18
10004a44:	04400084 	movi	r17,2
10004a48:	003be306 	br	100039d8 <__alt_data_end+0xf80039d8>
10004a4c:	d9000917 	ldw	r4,36(sp)
10004a50:	203f0926 	beq	r4,zero,10004678 <__alt_data_end+0xf8004678>
10004a54:	d9800d17 	ldw	r6,52(sp)
10004a58:	01bca30e 	bge	zero,r6,10003ce8 <__alt_data_end+0xf8003ce8>
10004a5c:	a00b883a 	mov	r5,r20
10004a60:	9809883a 	mov	r4,r19
10004a64:	000d883a 	mov	r6,zero
10004a68:	01d00934 	movhi	r7,16420
10004a6c:	000c5000 	call	1000c500 <__muldf3>
10004a70:	89000044 	addi	r4,r17,1
10004a74:	1027883a 	mov	r19,r2
10004a78:	1829883a 	mov	r20,r3
10004a7c:	000d6080 	call	1000d608 <__floatsidf>
10004a80:	9809883a 	mov	r4,r19
10004a84:	a00b883a 	mov	r5,r20
10004a88:	100d883a 	mov	r6,r2
10004a8c:	180f883a 	mov	r7,r3
10004a90:	000c5000 	call	1000c500 <__muldf3>
10004a94:	01d00734 	movhi	r7,16412
10004a98:	1009883a 	mov	r4,r2
10004a9c:	180b883a 	mov	r5,r3
10004aa0:	000d883a 	mov	r6,zero
10004aa4:	000b0a00 	call	1000b0a0 <__adddf3>
10004aa8:	d9c00617 	ldw	r7,24(sp)
10004aac:	05bf3034 	movhi	r22,64704
10004ab0:	1023883a 	mov	r17,r2
10004ab4:	39ffffc4 	addi	r7,r7,-1
10004ab8:	d9c01315 	stw	r7,76(sp)
10004abc:	1daf883a 	add	r23,r3,r22
10004ac0:	dac00d17 	ldw	r11,52(sp)
10004ac4:	003be006 	br	10003a48 <__alt_data_end+0xf8003a48>
10004ac8:	d9801117 	ldw	r6,68(sp)
10004acc:	d9c01217 	ldw	r7,72(sp)
10004ad0:	0009883a 	mov	r4,zero
10004ad4:	014ff834 	movhi	r5,16352
10004ad8:	da801615 	stw	r10,88(sp)
10004adc:	000cd000 	call	1000cd00 <__subdf3>
10004ae0:	da801617 	ldw	r10,88(sp)
10004ae4:	1009883a 	mov	r4,r2
10004ae8:	180b883a 	mov	r5,r3
10004aec:	b80d883a 	mov	r6,r23
10004af0:	500f883a 	mov	r7,r10
10004af4:	000c33c0 	call	1000c33c <__gedf2>
10004af8:	00bc7b0e 	bge	zero,r2,10003ce8 <__alt_data_end+0xf8003ce8>
10004afc:	01000c04 	movi	r4,48
10004b00:	00000106 	br	10004b08 <_dtoa_r+0x158c>
10004b04:	102d883a 	mov	r22,r2
10004b08:	b0bfffc4 	addi	r2,r22,-1
10004b0c:	10c00007 	ldb	r3,0(r2)
10004b10:	193ffc26 	beq	r3,r4,10004b04 <__alt_data_end+0xf8004b04>
10004b14:	d9001317 	ldw	r4,76(sp)
10004b18:	d9000615 	stw	r4,24(sp)
10004b1c:	003c4306 	br	10003c2c <__alt_data_end+0xf8003c2c>
10004b20:	d8c01317 	ldw	r3,76(sp)
10004b24:	dc001117 	ldw	r16,68(sp)
10004b28:	d8c00615 	stw	r3,24(sp)
10004b2c:	003cee06 	br	10003ee8 <__alt_data_end+0xf8003ee8>
10004b30:	dd401217 	ldw	r21,72(sp)
10004b34:	dc001117 	ldw	r16,68(sp)
10004b38:	dc801417 	ldw	r18,80(sp)
10004b3c:	003c6a06 	br	10003ce8 <__alt_data_end+0xf8003ce8>
10004b40:	103e6f1e 	bne	r2,zero,10004500 <__alt_data_end+0xf8004500>
10004b44:	b880004c 	andi	r2,r23,1
10004b48:	103e6d26 	beq	r2,zero,10004500 <__alt_data_end+0xf8004500>
10004b4c:	003e6906 	br	100044f4 <__alt_data_end+0xf80044f4>
10004b50:	8009883a 	mov	r4,r16
10004b54:	880b883a 	mov	r5,r17
10004b58:	01800284 	movi	r6,10
10004b5c:	000f883a 	mov	r7,zero
10004b60:	00065600 	call	10006560 <__multadd>
10004b64:	d9000d17 	ldw	r4,52(sp)
10004b68:	1023883a 	mov	r17,r2
10004b6c:	d9000915 	stw	r4,36(sp)
10004b70:	003d5006 	br	100040b4 <__alt_data_end+0xf80040b4>
10004b74:	04400084 	movi	r17,2
10004b78:	003b9706 	br	100039d8 <__alt_data_end+0xf80039d8>
10004b7c:	d8801317 	ldw	r2,76(sp)
10004b80:	d8800615 	stw	r2,24(sp)
10004b84:	003cd806 	br	10003ee8 <__alt_data_end+0xf8003ee8>
10004b88:	d8801317 	ldw	r2,76(sp)
10004b8c:	d8800615 	stw	r2,24(sp)
10004b90:	003c2606 	br	10003c2c <__alt_data_end+0xf8003c2c>
10004b94:	04c00044 	movi	r19,1
10004b98:	003b3506 	br	10003870 <__alt_data_end+0xf8003870>
10004b9c:	3023883a 	mov	r17,r6
10004ba0:	000b883a 	mov	r5,zero
10004ba4:	003b5106 	br	100038ec <__alt_data_end+0xf80038ec>
10004ba8:	20fd3426 	beq	r4,r3,1000407c <__alt_data_end+0xf800407c>
10004bac:	00c00f04 	movi	r3,60
10004bb0:	1885c83a 	sub	r2,r3,r2
10004bb4:	003da106 	br	1000423c <__alt_data_end+0xf800423c>

10004bb8 <_fflush_r>:
10004bb8:	defffb04 	addi	sp,sp,-20
10004bbc:	dcc00315 	stw	r19,12(sp)
10004bc0:	dc400115 	stw	r17,4(sp)
10004bc4:	dfc00415 	stw	ra,16(sp)
10004bc8:	dc800215 	stw	r18,8(sp)
10004bcc:	dc000015 	stw	r16,0(sp)
10004bd0:	2027883a 	mov	r19,r4
10004bd4:	2823883a 	mov	r17,r5
10004bd8:	20000226 	beq	r4,zero,10004be4 <_fflush_r+0x2c>
10004bdc:	20800e17 	ldw	r2,56(r4)
10004be0:	10005826 	beq	r2,zero,10004d44 <_fflush_r+0x18c>
10004be4:	8880030b 	ldhu	r2,12(r17)
10004be8:	10ffffcc 	andi	r3,r2,65535
10004bec:	18e0001c 	xori	r3,r3,32768
10004bf0:	18e00004 	addi	r3,r3,-32768
10004bf4:	18002b26 	beq	r3,zero,10004ca4 <_fflush_r+0xec>
10004bf8:	10c0020c 	andi	r3,r2,8
10004bfc:	1800311e 	bne	r3,zero,10004cc4 <_fflush_r+0x10c>
10004c00:	88c00117 	ldw	r3,4(r17)
10004c04:	10820014 	ori	r2,r2,2048
10004c08:	8880030d 	sth	r2,12(r17)
10004c0c:	00c05c0e 	bge	zero,r3,10004d80 <_fflush_r+0x1c8>
10004c10:	88c00a17 	ldw	r3,40(r17)
10004c14:	18002326 	beq	r3,zero,10004ca4 <_fflush_r+0xec>
10004c18:	9c000017 	ldw	r16,0(r19)
10004c1c:	1104000c 	andi	r4,r2,4096
10004c20:	98000015 	stw	zero,0(r19)
10004c24:	20004b26 	beq	r4,zero,10004d54 <_fflush_r+0x19c>
10004c28:	89801417 	ldw	r6,80(r17)
10004c2c:	1080010c 	andi	r2,r2,4
10004c30:	10000626 	beq	r2,zero,10004c4c <_fflush_r+0x94>
10004c34:	89000117 	ldw	r4,4(r17)
10004c38:	88800c17 	ldw	r2,48(r17)
10004c3c:	310dc83a 	sub	r6,r6,r4
10004c40:	10000226 	beq	r2,zero,10004c4c <_fflush_r+0x94>
10004c44:	88800f17 	ldw	r2,60(r17)
10004c48:	308dc83a 	sub	r6,r6,r2
10004c4c:	89400717 	ldw	r5,28(r17)
10004c50:	9809883a 	mov	r4,r19
10004c54:	000f883a 	mov	r7,zero
10004c58:	183ee83a 	callr	r3
10004c5c:	00ffffc4 	movi	r3,-1
10004c60:	10c04a26 	beq	r2,r3,10004d8c <_fflush_r+0x1d4>
10004c64:	88c0030b 	ldhu	r3,12(r17)
10004c68:	89000417 	ldw	r4,16(r17)
10004c6c:	88000115 	stw	zero,4(r17)
10004c70:	197dffcc 	andi	r5,r3,63487
10004c74:	8940030d 	sth	r5,12(r17)
10004c78:	89000015 	stw	r4,0(r17)
10004c7c:	18c4000c 	andi	r3,r3,4096
10004c80:	1800581e 	bne	r3,zero,10004de4 <_fflush_r+0x22c>
10004c84:	89400c17 	ldw	r5,48(r17)
10004c88:	9c000015 	stw	r16,0(r19)
10004c8c:	28000526 	beq	r5,zero,10004ca4 <_fflush_r+0xec>
10004c90:	88801004 	addi	r2,r17,64
10004c94:	28800226 	beq	r5,r2,10004ca0 <_fflush_r+0xe8>
10004c98:	9809883a 	mov	r4,r19
10004c9c:	000530c0 	call	1000530c <_free_r>
10004ca0:	88000c15 	stw	zero,48(r17)
10004ca4:	0005883a 	mov	r2,zero
10004ca8:	dfc00417 	ldw	ra,16(sp)
10004cac:	dcc00317 	ldw	r19,12(sp)
10004cb0:	dc800217 	ldw	r18,8(sp)
10004cb4:	dc400117 	ldw	r17,4(sp)
10004cb8:	dc000017 	ldw	r16,0(sp)
10004cbc:	dec00504 	addi	sp,sp,20
10004cc0:	f800283a 	ret
10004cc4:	8c800417 	ldw	r18,16(r17)
10004cc8:	903ff626 	beq	r18,zero,10004ca4 <__alt_data_end+0xf8004ca4>
10004ccc:	8c000017 	ldw	r16,0(r17)
10004cd0:	108000cc 	andi	r2,r2,3
10004cd4:	8c800015 	stw	r18,0(r17)
10004cd8:	84a1c83a 	sub	r16,r16,r18
10004cdc:	10001b26 	beq	r2,zero,10004d4c <_fflush_r+0x194>
10004ce0:	0005883a 	mov	r2,zero
10004ce4:	88800215 	stw	r2,8(r17)
10004ce8:	04000316 	blt	zero,r16,10004cf8 <_fflush_r+0x140>
10004cec:	003fed06 	br	10004ca4 <__alt_data_end+0xf8004ca4>
10004cf0:	90a5883a 	add	r18,r18,r2
10004cf4:	043feb0e 	bge	zero,r16,10004ca4 <__alt_data_end+0xf8004ca4>
10004cf8:	88800917 	ldw	r2,36(r17)
10004cfc:	89400717 	ldw	r5,28(r17)
10004d00:	800f883a 	mov	r7,r16
10004d04:	900d883a 	mov	r6,r18
10004d08:	9809883a 	mov	r4,r19
10004d0c:	103ee83a 	callr	r2
10004d10:	80a1c83a 	sub	r16,r16,r2
10004d14:	00bff616 	blt	zero,r2,10004cf0 <__alt_data_end+0xf8004cf0>
10004d18:	88c0030b 	ldhu	r3,12(r17)
10004d1c:	00bfffc4 	movi	r2,-1
10004d20:	18c01014 	ori	r3,r3,64
10004d24:	88c0030d 	sth	r3,12(r17)
10004d28:	dfc00417 	ldw	ra,16(sp)
10004d2c:	dcc00317 	ldw	r19,12(sp)
10004d30:	dc800217 	ldw	r18,8(sp)
10004d34:	dc400117 	ldw	r17,4(sp)
10004d38:	dc000017 	ldw	r16,0(sp)
10004d3c:	dec00504 	addi	sp,sp,20
10004d40:	f800283a 	ret
10004d44:	0004ed80 	call	10004ed8 <__sinit>
10004d48:	003fa606 	br	10004be4 <__alt_data_end+0xf8004be4>
10004d4c:	88800517 	ldw	r2,20(r17)
10004d50:	003fe406 	br	10004ce4 <__alt_data_end+0xf8004ce4>
10004d54:	89400717 	ldw	r5,28(r17)
10004d58:	000d883a 	mov	r6,zero
10004d5c:	9809883a 	mov	r4,r19
10004d60:	01c00044 	movi	r7,1
10004d64:	183ee83a 	callr	r3
10004d68:	100d883a 	mov	r6,r2
10004d6c:	00bfffc4 	movi	r2,-1
10004d70:	30801326 	beq	r6,r2,10004dc0 <_fflush_r+0x208>
10004d74:	8880030b 	ldhu	r2,12(r17)
10004d78:	88c00a17 	ldw	r3,40(r17)
10004d7c:	003fab06 	br	10004c2c <__alt_data_end+0xf8004c2c>
10004d80:	88c00f17 	ldw	r3,60(r17)
10004d84:	00ffa216 	blt	zero,r3,10004c10 <__alt_data_end+0xf8004c10>
10004d88:	003fc606 	br	10004ca4 <__alt_data_end+0xf8004ca4>
10004d8c:	98c00017 	ldw	r3,0(r19)
10004d90:	183fb426 	beq	r3,zero,10004c64 <__alt_data_end+0xf8004c64>
10004d94:	01000744 	movi	r4,29
10004d98:	19000226 	beq	r3,r4,10004da4 <_fflush_r+0x1ec>
10004d9c:	01000584 	movi	r4,22
10004da0:	1900121e 	bne	r3,r4,10004dec <_fflush_r+0x234>
10004da4:	88c0030b 	ldhu	r3,12(r17)
10004da8:	88800417 	ldw	r2,16(r17)
10004dac:	88000115 	stw	zero,4(r17)
10004db0:	18fdffcc 	andi	r3,r3,63487
10004db4:	88c0030d 	sth	r3,12(r17)
10004db8:	88800015 	stw	r2,0(r17)
10004dbc:	003fb106 	br	10004c84 <__alt_data_end+0xf8004c84>
10004dc0:	98800017 	ldw	r2,0(r19)
10004dc4:	103feb26 	beq	r2,zero,10004d74 <__alt_data_end+0xf8004d74>
10004dc8:	00c00744 	movi	r3,29
10004dcc:	10c00226 	beq	r2,r3,10004dd8 <_fflush_r+0x220>
10004dd0:	00c00584 	movi	r3,22
10004dd4:	10ffd01e 	bne	r2,r3,10004d18 <__alt_data_end+0xf8004d18>
10004dd8:	9c000015 	stw	r16,0(r19)
10004ddc:	0005883a 	mov	r2,zero
10004de0:	003fb106 	br	10004ca8 <__alt_data_end+0xf8004ca8>
10004de4:	88801415 	stw	r2,80(r17)
10004de8:	003fa606 	br	10004c84 <__alt_data_end+0xf8004c84>
10004dec:	88c0030b 	ldhu	r3,12(r17)
10004df0:	18c01014 	ori	r3,r3,64
10004df4:	88c0030d 	sth	r3,12(r17)
10004df8:	003fab06 	br	10004ca8 <__alt_data_end+0xf8004ca8>

10004dfc <fflush>:
10004dfc:	200b883a 	mov	r5,r4
10004e00:	20000426 	beq	r4,zero,10004e14 <fflush+0x18>
10004e04:	00840074 	movhi	r2,4097
10004e08:	10872204 	addi	r2,r2,7304
10004e0c:	11000017 	ldw	r4,0(r2)
10004e10:	0004bb81 	jmpi	10004bb8 <_fflush_r>
10004e14:	00840074 	movhi	r2,4097
10004e18:	10872104 	addi	r2,r2,7300
10004e1c:	11000017 	ldw	r4,0(r2)
10004e20:	01440034 	movhi	r5,4096
10004e24:	2952ee04 	addi	r5,r5,19384
10004e28:	00056841 	jmpi	10005684 <_fwalk_reent>

10004e2c <__fp_lock>:
10004e2c:	0005883a 	mov	r2,zero
10004e30:	f800283a 	ret

10004e34 <__fp_unlock>:
10004e34:	0005883a 	mov	r2,zero
10004e38:	f800283a 	ret

10004e3c <_cleanup_r>:
10004e3c:	01440074 	movhi	r5,4097
10004e40:	29641004 	addi	r5,r5,-28608
10004e44:	00055dc1 	jmpi	100055dc <_fwalk>

10004e48 <__sfmoreglue>:
10004e48:	defffc04 	addi	sp,sp,-16
10004e4c:	dc800215 	stw	r18,8(sp)
10004e50:	2825883a 	mov	r18,r5
10004e54:	dc000015 	stw	r16,0(sp)
10004e58:	01401a04 	movi	r5,104
10004e5c:	2021883a 	mov	r16,r4
10004e60:	9009883a 	mov	r4,r18
10004e64:	dfc00315 	stw	ra,12(sp)
10004e68:	dc400115 	stw	r17,4(sp)
10004e6c:	000b0780 	call	1000b078 <__mulsi3>
10004e70:	8009883a 	mov	r4,r16
10004e74:	11400304 	addi	r5,r2,12
10004e78:	1023883a 	mov	r17,r2
10004e7c:	00059c40 	call	100059c4 <_malloc_r>
10004e80:	1021883a 	mov	r16,r2
10004e84:	10000726 	beq	r2,zero,10004ea4 <__sfmoreglue+0x5c>
10004e88:	11000304 	addi	r4,r2,12
10004e8c:	10000015 	stw	zero,0(r2)
10004e90:	14800115 	stw	r18,4(r2)
10004e94:	11000215 	stw	r4,8(r2)
10004e98:	000b883a 	mov	r5,zero
10004e9c:	880d883a 	mov	r6,r17
10004ea0:	000637c0 	call	1000637c <memset>
10004ea4:	8005883a 	mov	r2,r16
10004ea8:	dfc00317 	ldw	ra,12(sp)
10004eac:	dc800217 	ldw	r18,8(sp)
10004eb0:	dc400117 	ldw	r17,4(sp)
10004eb4:	dc000017 	ldw	r16,0(sp)
10004eb8:	dec00404 	addi	sp,sp,16
10004ebc:	f800283a 	ret

10004ec0 <_cleanup>:
10004ec0:	00840074 	movhi	r2,4097
10004ec4:	10872104 	addi	r2,r2,7300
10004ec8:	11000017 	ldw	r4,0(r2)
10004ecc:	01440074 	movhi	r5,4097
10004ed0:	29641004 	addi	r5,r5,-28608
10004ed4:	00055dc1 	jmpi	100055dc <_fwalk>

10004ed8 <__sinit>:
10004ed8:	20800e17 	ldw	r2,56(r4)
10004edc:	defff704 	addi	sp,sp,-36
10004ee0:	dc800215 	stw	r18,8(sp)
10004ee4:	dfc00815 	stw	ra,32(sp)
10004ee8:	ddc00715 	stw	r23,28(sp)
10004eec:	dd800615 	stw	r22,24(sp)
10004ef0:	dd400515 	stw	r21,20(sp)
10004ef4:	dd000415 	stw	r20,16(sp)
10004ef8:	dcc00315 	stw	r19,12(sp)
10004efc:	dc400115 	stw	r17,4(sp)
10004f00:	dc000015 	stw	r16,0(sp)
10004f04:	2025883a 	mov	r18,r4
10004f08:	10004f1e 	bne	r2,zero,10005048 <__sinit+0x170>
10004f0c:	24000117 	ldw	r16,4(r4)
10004f10:	00c40034 	movhi	r3,4096
10004f14:	18d38f04 	addi	r3,r3,20028
10004f18:	20c00f15 	stw	r3,60(r4)
10004f1c:	2080bb04 	addi	r2,r4,748
10004f20:	00c000c4 	movi	r3,3
10004f24:	05c00044 	movi	r23,1
10004f28:	20c0b915 	stw	r3,740(r4)
10004f2c:	2080ba15 	stw	r2,744(r4)
10004f30:	25c00e15 	stw	r23,56(r4)
10004f34:	2000b815 	stw	zero,736(r4)
10004f38:	00800104 	movi	r2,4
10004f3c:	81001704 	addi	r4,r16,92
10004f40:	000b883a 	mov	r5,zero
10004f44:	01800204 	movi	r6,8
10004f48:	80000015 	stw	zero,0(r16)
10004f4c:	80000115 	stw	zero,4(r16)
10004f50:	80000215 	stw	zero,8(r16)
10004f54:	8080030d 	sth	r2,12(r16)
10004f58:	80001915 	stw	zero,100(r16)
10004f5c:	8000038d 	sth	zero,14(r16)
10004f60:	80000415 	stw	zero,16(r16)
10004f64:	80000515 	stw	zero,20(r16)
10004f68:	80000615 	stw	zero,24(r16)
10004f6c:	000637c0 	call	1000637c <memset>
10004f70:	94400217 	ldw	r17,8(r18)
10004f74:	05840034 	movhi	r22,4096
10004f78:	b59d6104 	addi	r22,r22,30084
10004f7c:	05440034 	movhi	r21,4096
10004f80:	ad5d7804 	addi	r21,r21,30176
10004f84:	05040034 	movhi	r20,4096
10004f88:	a51d9704 	addi	r20,r20,30300
10004f8c:	04c40034 	movhi	r19,4096
10004f90:	9cddae04 	addi	r19,r19,30392
10004f94:	84000715 	stw	r16,28(r16)
10004f98:	85800815 	stw	r22,32(r16)
10004f9c:	85400915 	stw	r21,36(r16)
10004fa0:	85000a15 	stw	r20,40(r16)
10004fa4:	84c00b15 	stw	r19,44(r16)
10004fa8:	00800284 	movi	r2,10
10004fac:	89001704 	addi	r4,r17,92
10004fb0:	000b883a 	mov	r5,zero
10004fb4:	01800204 	movi	r6,8
10004fb8:	88000015 	stw	zero,0(r17)
10004fbc:	88000115 	stw	zero,4(r17)
10004fc0:	88000215 	stw	zero,8(r17)
10004fc4:	8880030d 	sth	r2,12(r17)
10004fc8:	88001915 	stw	zero,100(r17)
10004fcc:	8dc0038d 	sth	r23,14(r17)
10004fd0:	88000415 	stw	zero,16(r17)
10004fd4:	88000515 	stw	zero,20(r17)
10004fd8:	88000615 	stw	zero,24(r17)
10004fdc:	000637c0 	call	1000637c <memset>
10004fe0:	94000317 	ldw	r16,12(r18)
10004fe4:	00800484 	movi	r2,18
10004fe8:	8c400715 	stw	r17,28(r17)
10004fec:	8d800815 	stw	r22,32(r17)
10004ff0:	8d400915 	stw	r21,36(r17)
10004ff4:	8d000a15 	stw	r20,40(r17)
10004ff8:	8cc00b15 	stw	r19,44(r17)
10004ffc:	8080030d 	sth	r2,12(r16)
10005000:	00800084 	movi	r2,2
10005004:	80000015 	stw	zero,0(r16)
10005008:	80000115 	stw	zero,4(r16)
1000500c:	80000215 	stw	zero,8(r16)
10005010:	80001915 	stw	zero,100(r16)
10005014:	8080038d 	sth	r2,14(r16)
10005018:	80000415 	stw	zero,16(r16)
1000501c:	80000515 	stw	zero,20(r16)
10005020:	80000615 	stw	zero,24(r16)
10005024:	81001704 	addi	r4,r16,92
10005028:	000b883a 	mov	r5,zero
1000502c:	01800204 	movi	r6,8
10005030:	000637c0 	call	1000637c <memset>
10005034:	84000715 	stw	r16,28(r16)
10005038:	85800815 	stw	r22,32(r16)
1000503c:	85400915 	stw	r21,36(r16)
10005040:	85000a15 	stw	r20,40(r16)
10005044:	84c00b15 	stw	r19,44(r16)
10005048:	dfc00817 	ldw	ra,32(sp)
1000504c:	ddc00717 	ldw	r23,28(sp)
10005050:	dd800617 	ldw	r22,24(sp)
10005054:	dd400517 	ldw	r21,20(sp)
10005058:	dd000417 	ldw	r20,16(sp)
1000505c:	dcc00317 	ldw	r19,12(sp)
10005060:	dc800217 	ldw	r18,8(sp)
10005064:	dc400117 	ldw	r17,4(sp)
10005068:	dc000017 	ldw	r16,0(sp)
1000506c:	dec00904 	addi	sp,sp,36
10005070:	f800283a 	ret

10005074 <__sfp>:
10005074:	defffb04 	addi	sp,sp,-20
10005078:	00840074 	movhi	r2,4097
1000507c:	10872104 	addi	r2,r2,7300
10005080:	dc800215 	stw	r18,8(sp)
10005084:	14800017 	ldw	r18,0(r2)
10005088:	dcc00315 	stw	r19,12(sp)
1000508c:	dfc00415 	stw	ra,16(sp)
10005090:	90800e17 	ldw	r2,56(r18)
10005094:	dc400115 	stw	r17,4(sp)
10005098:	dc000015 	stw	r16,0(sp)
1000509c:	2027883a 	mov	r19,r4
100050a0:	10002f26 	beq	r2,zero,10005160 <__sfp+0xec>
100050a4:	9480b804 	addi	r18,r18,736
100050a8:	047fffc4 	movi	r17,-1
100050ac:	91400117 	ldw	r5,4(r18)
100050b0:	94000217 	ldw	r16,8(r18)
100050b4:	297fffc4 	addi	r5,r5,-1
100050b8:	28000a16 	blt	r5,zero,100050e4 <__sfp+0x70>
100050bc:	8080030f 	ldh	r2,12(r16)
100050c0:	10000c26 	beq	r2,zero,100050f4 <__sfp+0x80>
100050c4:	80c01d04 	addi	r3,r16,116
100050c8:	00000206 	br	100050d4 <__sfp+0x60>
100050cc:	18bfe60f 	ldh	r2,-104(r3)
100050d0:	10000826 	beq	r2,zero,100050f4 <__sfp+0x80>
100050d4:	297fffc4 	addi	r5,r5,-1
100050d8:	1c3ffd04 	addi	r16,r3,-12
100050dc:	18c01a04 	addi	r3,r3,104
100050e0:	2c7ffa1e 	bne	r5,r17,100050cc <__alt_data_end+0xf80050cc>
100050e4:	90800017 	ldw	r2,0(r18)
100050e8:	10002026 	beq	r2,zero,1000516c <__sfp+0xf8>
100050ec:	1025883a 	mov	r18,r2
100050f0:	003fee06 	br	100050ac <__alt_data_end+0xf80050ac>
100050f4:	00bfffc4 	movi	r2,-1
100050f8:	8080038d 	sth	r2,14(r16)
100050fc:	00800044 	movi	r2,1
10005100:	8080030d 	sth	r2,12(r16)
10005104:	80001915 	stw	zero,100(r16)
10005108:	80000015 	stw	zero,0(r16)
1000510c:	80000215 	stw	zero,8(r16)
10005110:	80000115 	stw	zero,4(r16)
10005114:	80000415 	stw	zero,16(r16)
10005118:	80000515 	stw	zero,20(r16)
1000511c:	80000615 	stw	zero,24(r16)
10005120:	81001704 	addi	r4,r16,92
10005124:	000b883a 	mov	r5,zero
10005128:	01800204 	movi	r6,8
1000512c:	000637c0 	call	1000637c <memset>
10005130:	8005883a 	mov	r2,r16
10005134:	80000c15 	stw	zero,48(r16)
10005138:	80000d15 	stw	zero,52(r16)
1000513c:	80001115 	stw	zero,68(r16)
10005140:	80001215 	stw	zero,72(r16)
10005144:	dfc00417 	ldw	ra,16(sp)
10005148:	dcc00317 	ldw	r19,12(sp)
1000514c:	dc800217 	ldw	r18,8(sp)
10005150:	dc400117 	ldw	r17,4(sp)
10005154:	dc000017 	ldw	r16,0(sp)
10005158:	dec00504 	addi	sp,sp,20
1000515c:	f800283a 	ret
10005160:	9009883a 	mov	r4,r18
10005164:	0004ed80 	call	10004ed8 <__sinit>
10005168:	003fce06 	br	100050a4 <__alt_data_end+0xf80050a4>
1000516c:	9809883a 	mov	r4,r19
10005170:	01400104 	movi	r5,4
10005174:	0004e480 	call	10004e48 <__sfmoreglue>
10005178:	90800015 	stw	r2,0(r18)
1000517c:	103fdb1e 	bne	r2,zero,100050ec <__alt_data_end+0xf80050ec>
10005180:	00800304 	movi	r2,12
10005184:	98800015 	stw	r2,0(r19)
10005188:	0005883a 	mov	r2,zero
1000518c:	003fed06 	br	10005144 <__alt_data_end+0xf8005144>

10005190 <__sfp_lock_acquire>:
10005190:	f800283a 	ret

10005194 <__sfp_lock_release>:
10005194:	f800283a 	ret

10005198 <__sinit_lock_acquire>:
10005198:	f800283a 	ret

1000519c <__sinit_lock_release>:
1000519c:	f800283a 	ret

100051a0 <__fp_lock_all>:
100051a0:	00840074 	movhi	r2,4097
100051a4:	10872204 	addi	r2,r2,7304
100051a8:	11000017 	ldw	r4,0(r2)
100051ac:	01440034 	movhi	r5,4096
100051b0:	29538b04 	addi	r5,r5,20012
100051b4:	00055dc1 	jmpi	100055dc <_fwalk>

100051b8 <__fp_unlock_all>:
100051b8:	00840074 	movhi	r2,4097
100051bc:	10872204 	addi	r2,r2,7304
100051c0:	11000017 	ldw	r4,0(r2)
100051c4:	01440034 	movhi	r5,4096
100051c8:	29538d04 	addi	r5,r5,20020
100051cc:	00055dc1 	jmpi	100055dc <_fwalk>

100051d0 <_malloc_trim_r>:
100051d0:	defffb04 	addi	sp,sp,-20
100051d4:	dcc00315 	stw	r19,12(sp)
100051d8:	dc800215 	stw	r18,8(sp)
100051dc:	dc400115 	stw	r17,4(sp)
100051e0:	dc000015 	stw	r16,0(sp)
100051e4:	2827883a 	mov	r19,r5
100051e8:	dfc00415 	stw	ra,16(sp)
100051ec:	04440074 	movhi	r17,4097
100051f0:	8c419b04 	addi	r17,r17,1644
100051f4:	2021883a 	mov	r16,r4
100051f8:	000de800 	call	1000de80 <__malloc_lock>
100051fc:	88800217 	ldw	r2,8(r17)
10005200:	14800117 	ldw	r18,4(r2)
10005204:	00bfff04 	movi	r2,-4
10005208:	90a4703a 	and	r18,r18,r2
1000520c:	94e7c83a 	sub	r19,r18,r19
10005210:	9cc3fbc4 	addi	r19,r19,4079
10005214:	9826d33a 	srli	r19,r19,12
10005218:	0083ffc4 	movi	r2,4095
1000521c:	9cffffc4 	addi	r19,r19,-1
10005220:	9826933a 	slli	r19,r19,12
10005224:	14c0060e 	bge	r2,r19,10005240 <_malloc_trim_r+0x70>
10005228:	8009883a 	mov	r4,r16
1000522c:	000b883a 	mov	r5,zero
10005230:	00075200 	call	10007520 <_sbrk_r>
10005234:	88c00217 	ldw	r3,8(r17)
10005238:	1c87883a 	add	r3,r3,r18
1000523c:	10c00a26 	beq	r2,r3,10005268 <_malloc_trim_r+0x98>
10005240:	8009883a 	mov	r4,r16
10005244:	000dea00 	call	1000dea0 <__malloc_unlock>
10005248:	0005883a 	mov	r2,zero
1000524c:	dfc00417 	ldw	ra,16(sp)
10005250:	dcc00317 	ldw	r19,12(sp)
10005254:	dc800217 	ldw	r18,8(sp)
10005258:	dc400117 	ldw	r17,4(sp)
1000525c:	dc000017 	ldw	r16,0(sp)
10005260:	dec00504 	addi	sp,sp,20
10005264:	f800283a 	ret
10005268:	8009883a 	mov	r4,r16
1000526c:	04cbc83a 	sub	r5,zero,r19
10005270:	00075200 	call	10007520 <_sbrk_r>
10005274:	00ffffc4 	movi	r3,-1
10005278:	10c01326 	beq	r2,r3,100052c8 <_malloc_trim_r+0xf8>
1000527c:	00840074 	movhi	r2,4097
10005280:	108dfb04 	addi	r2,r2,14316
10005284:	11000017 	ldw	r4,0(r2)
10005288:	88c00217 	ldw	r3,8(r17)
1000528c:	94e5c83a 	sub	r18,r18,r19
10005290:	94800054 	ori	r18,r18,1
10005294:	24e7c83a 	sub	r19,r4,r19
10005298:	1c800115 	stw	r18,4(r3)
1000529c:	8009883a 	mov	r4,r16
100052a0:	14c00015 	stw	r19,0(r2)
100052a4:	000dea00 	call	1000dea0 <__malloc_unlock>
100052a8:	00800044 	movi	r2,1
100052ac:	dfc00417 	ldw	ra,16(sp)
100052b0:	dcc00317 	ldw	r19,12(sp)
100052b4:	dc800217 	ldw	r18,8(sp)
100052b8:	dc400117 	ldw	r17,4(sp)
100052bc:	dc000017 	ldw	r16,0(sp)
100052c0:	dec00504 	addi	sp,sp,20
100052c4:	f800283a 	ret
100052c8:	8009883a 	mov	r4,r16
100052cc:	000b883a 	mov	r5,zero
100052d0:	00075200 	call	10007520 <_sbrk_r>
100052d4:	88c00217 	ldw	r3,8(r17)
100052d8:	014003c4 	movi	r5,15
100052dc:	10c9c83a 	sub	r4,r2,r3
100052e0:	293fd70e 	bge	r5,r4,10005240 <__alt_data_end+0xf8005240>
100052e4:	01440074 	movhi	r5,4097
100052e8:	29472404 	addi	r5,r5,7312
100052ec:	29400017 	ldw	r5,0(r5)
100052f0:	21000054 	ori	r4,r4,1
100052f4:	19000115 	stw	r4,4(r3)
100052f8:	1145c83a 	sub	r2,r2,r5
100052fc:	01440074 	movhi	r5,4097
10005300:	294dfb04 	addi	r5,r5,14316
10005304:	28800015 	stw	r2,0(r5)
10005308:	003fcd06 	br	10005240 <__alt_data_end+0xf8005240>

1000530c <_free_r>:
1000530c:	defffd04 	addi	sp,sp,-12
10005310:	dc000015 	stw	r16,0(sp)
10005314:	dfc00215 	stw	ra,8(sp)
10005318:	dc400115 	stw	r17,4(sp)
1000531c:	2821883a 	mov	r16,r5
10005320:	28004c26 	beq	r5,zero,10005454 <_free_r+0x148>
10005324:	2023883a 	mov	r17,r4
10005328:	000de800 	call	1000de80 <__malloc_lock>
1000532c:	823fff17 	ldw	r8,-4(r16)
10005330:	00bfff84 	movi	r2,-2
10005334:	81bffe04 	addi	r6,r16,-8
10005338:	4084703a 	and	r2,r8,r2
1000533c:	3087883a 	add	r3,r6,r2
10005340:	01440074 	movhi	r5,4097
10005344:	29419b04 	addi	r5,r5,1644
10005348:	1a400117 	ldw	r9,4(r3)
1000534c:	29000217 	ldw	r4,8(r5)
10005350:	01ffff04 	movi	r7,-4
10005354:	49ce703a 	and	r7,r9,r7
10005358:	20c06526 	beq	r4,r3,100054f0 <_free_r+0x1e4>
1000535c:	19c00115 	stw	r7,4(r3)
10005360:	4200004c 	andi	r8,r8,1
10005364:	40003026 	beq	r8,zero,10005428 <_free_r+0x11c>
10005368:	0009883a 	mov	r4,zero
1000536c:	19d1883a 	add	r8,r3,r7
10005370:	42000117 	ldw	r8,4(r8)
10005374:	4200004c 	andi	r8,r8,1
10005378:	4000061e 	bne	r8,zero,10005394 <_free_r+0x88>
1000537c:	11c5883a 	add	r2,r2,r7
10005380:	19c00217 	ldw	r7,8(r3)
10005384:	20004e26 	beq	r4,zero,100054c0 <_free_r+0x1b4>
10005388:	18c00317 	ldw	r3,12(r3)
1000538c:	38c00315 	stw	r3,12(r7)
10005390:	19c00215 	stw	r7,8(r3)
10005394:	10c00054 	ori	r3,r2,1
10005398:	30c00115 	stw	r3,4(r6)
1000539c:	3087883a 	add	r3,r6,r2
100053a0:	18800015 	stw	r2,0(r3)
100053a4:	20001a1e 	bne	r4,zero,10005410 <_free_r+0x104>
100053a8:	00c07fc4 	movi	r3,511
100053ac:	18802e2e 	bgeu	r3,r2,10005468 <_free_r+0x15c>
100053b0:	1006d27a 	srli	r3,r2,9
100053b4:	01000104 	movi	r4,4
100053b8:	20c06636 	bltu	r4,r3,10005554 <_free_r+0x248>
100053bc:	1008d1ba 	srli	r4,r2,6
100053c0:	21000e04 	addi	r4,r4,56
100053c4:	210f883a 	add	r7,r4,r4
100053c8:	39cf883a 	add	r7,r7,r7
100053cc:	39cf883a 	add	r7,r7,r7
100053d0:	29cf883a 	add	r7,r5,r7
100053d4:	38c00217 	ldw	r3,8(r7)
100053d8:	01440074 	movhi	r5,4097
100053dc:	29419b04 	addi	r5,r5,1644
100053e0:	19c06126 	beq	r3,r7,10005568 <_free_r+0x25c>
100053e4:	013fff04 	movi	r4,-4
100053e8:	19400117 	ldw	r5,4(r3)
100053ec:	290a703a 	and	r5,r5,r4
100053f0:	1140022e 	bgeu	r2,r5,100053fc <_free_r+0xf0>
100053f4:	18c00217 	ldw	r3,8(r3)
100053f8:	38fffb1e 	bne	r7,r3,100053e8 <__alt_data_end+0xf80053e8>
100053fc:	18800317 	ldw	r2,12(r3)
10005400:	30800315 	stw	r2,12(r6)
10005404:	30c00215 	stw	r3,8(r6)
10005408:	11800215 	stw	r6,8(r2)
1000540c:	19800315 	stw	r6,12(r3)
10005410:	8809883a 	mov	r4,r17
10005414:	dfc00217 	ldw	ra,8(sp)
10005418:	dc400117 	ldw	r17,4(sp)
1000541c:	dc000017 	ldw	r16,0(sp)
10005420:	dec00304 	addi	sp,sp,12
10005424:	000dea01 	jmpi	1000dea0 <__malloc_unlock>
10005428:	813ffe17 	ldw	r4,-8(r16)
1000542c:	2a400204 	addi	r9,r5,8
10005430:	310dc83a 	sub	r6,r6,r4
10005434:	32000217 	ldw	r8,8(r6)
10005438:	1105883a 	add	r2,r2,r4
1000543c:	42404326 	beq	r8,r9,1000554c <_free_r+0x240>
10005440:	32400317 	ldw	r9,12(r6)
10005444:	0009883a 	mov	r4,zero
10005448:	42400315 	stw	r9,12(r8)
1000544c:	4a000215 	stw	r8,8(r9)
10005450:	003fc606 	br	1000536c <__alt_data_end+0xf800536c>
10005454:	dfc00217 	ldw	ra,8(sp)
10005458:	dc400117 	ldw	r17,4(sp)
1000545c:	dc000017 	ldw	r16,0(sp)
10005460:	dec00304 	addi	sp,sp,12
10005464:	f800283a 	ret
10005468:	1004d0fa 	srli	r2,r2,3
1000546c:	02000044 	movi	r8,1
10005470:	29c00117 	ldw	r7,4(r5)
10005474:	1087883a 	add	r3,r2,r2
10005478:	18c7883a 	add	r3,r3,r3
1000547c:	18c7883a 	add	r3,r3,r3
10005480:	28c7883a 	add	r3,r5,r3
10005484:	1005d0ba 	srai	r2,r2,2
10005488:	19000217 	ldw	r4,8(r3)
1000548c:	30c00315 	stw	r3,12(r6)
10005490:	4084983a 	sll	r2,r8,r2
10005494:	31000215 	stw	r4,8(r6)
10005498:	19800215 	stw	r6,8(r3)
1000549c:	11c4b03a 	or	r2,r2,r7
100054a0:	21800315 	stw	r6,12(r4)
100054a4:	8809883a 	mov	r4,r17
100054a8:	28800115 	stw	r2,4(r5)
100054ac:	dfc00217 	ldw	ra,8(sp)
100054b0:	dc400117 	ldw	r17,4(sp)
100054b4:	dc000017 	ldw	r16,0(sp)
100054b8:	dec00304 	addi	sp,sp,12
100054bc:	000dea01 	jmpi	1000dea0 <__malloc_unlock>
100054c0:	02040074 	movhi	r8,4097
100054c4:	42019d04 	addi	r8,r8,1652
100054c8:	3a3faf1e 	bne	r7,r8,10005388 <__alt_data_end+0xf8005388>
100054cc:	29800515 	stw	r6,20(r5)
100054d0:	29800415 	stw	r6,16(r5)
100054d4:	10c00054 	ori	r3,r2,1
100054d8:	31c00315 	stw	r7,12(r6)
100054dc:	31c00215 	stw	r7,8(r6)
100054e0:	30c00115 	stw	r3,4(r6)
100054e4:	308d883a 	add	r6,r6,r2
100054e8:	30800015 	stw	r2,0(r6)
100054ec:	003fc806 	br	10005410 <__alt_data_end+0xf8005410>
100054f0:	4200004c 	andi	r8,r8,1
100054f4:	3885883a 	add	r2,r7,r2
100054f8:	4000071e 	bne	r8,zero,10005518 <_free_r+0x20c>
100054fc:	81fffe17 	ldw	r7,-8(r16)
10005500:	31cdc83a 	sub	r6,r6,r7
10005504:	30c00317 	ldw	r3,12(r6)
10005508:	31000217 	ldw	r4,8(r6)
1000550c:	11c5883a 	add	r2,r2,r7
10005510:	20c00315 	stw	r3,12(r4)
10005514:	19000215 	stw	r4,8(r3)
10005518:	00c40074 	movhi	r3,4097
1000551c:	18c72504 	addi	r3,r3,7316
10005520:	11000054 	ori	r4,r2,1
10005524:	18c00017 	ldw	r3,0(r3)
10005528:	31000115 	stw	r4,4(r6)
1000552c:	29800215 	stw	r6,8(r5)
10005530:	10ffb736 	bltu	r2,r3,10005410 <__alt_data_end+0xf8005410>
10005534:	00840074 	movhi	r2,4097
10005538:	108df304 	addi	r2,r2,14284
1000553c:	11400017 	ldw	r5,0(r2)
10005540:	8809883a 	mov	r4,r17
10005544:	00051d00 	call	100051d0 <_malloc_trim_r>
10005548:	003fb106 	br	10005410 <__alt_data_end+0xf8005410>
1000554c:	01000044 	movi	r4,1
10005550:	003f8606 	br	1000536c <__alt_data_end+0xf800536c>
10005554:	01000504 	movi	r4,20
10005558:	20c00b36 	bltu	r4,r3,10005588 <_free_r+0x27c>
1000555c:	190016c4 	addi	r4,r3,91
10005560:	210f883a 	add	r7,r4,r4
10005564:	003f9806 	br	100053c8 <__alt_data_end+0xf80053c8>
10005568:	2009d0ba 	srai	r4,r4,2
1000556c:	00800044 	movi	r2,1
10005570:	29c00117 	ldw	r7,4(r5)
10005574:	1108983a 	sll	r4,r2,r4
10005578:	1805883a 	mov	r2,r3
1000557c:	21c8b03a 	or	r4,r4,r7
10005580:	29000115 	stw	r4,4(r5)
10005584:	003f9e06 	br	10005400 <__alt_data_end+0xf8005400>
10005588:	01001504 	movi	r4,84
1000558c:	20c00436 	bltu	r4,r3,100055a0 <_free_r+0x294>
10005590:	1008d33a 	srli	r4,r2,12
10005594:	21001b84 	addi	r4,r4,110
10005598:	210f883a 	add	r7,r4,r4
1000559c:	003f8a06 	br	100053c8 <__alt_data_end+0xf80053c8>
100055a0:	01005504 	movi	r4,340
100055a4:	20c00436 	bltu	r4,r3,100055b8 <_free_r+0x2ac>
100055a8:	1008d3fa 	srli	r4,r2,15
100055ac:	21001dc4 	addi	r4,r4,119
100055b0:	210f883a 	add	r7,r4,r4
100055b4:	003f8406 	br	100053c8 <__alt_data_end+0xf80053c8>
100055b8:	01015504 	movi	r4,1364
100055bc:	20c00436 	bltu	r4,r3,100055d0 <_free_r+0x2c4>
100055c0:	1008d4ba 	srli	r4,r2,18
100055c4:	21001f04 	addi	r4,r4,124
100055c8:	210f883a 	add	r7,r4,r4
100055cc:	003f7e06 	br	100053c8 <__alt_data_end+0xf80053c8>
100055d0:	01c03f04 	movi	r7,252
100055d4:	01001f84 	movi	r4,126
100055d8:	003f7b06 	br	100053c8 <__alt_data_end+0xf80053c8>

100055dc <_fwalk>:
100055dc:	defff904 	addi	sp,sp,-28
100055e0:	dcc00315 	stw	r19,12(sp)
100055e4:	24c0b804 	addi	r19,r4,736
100055e8:	dd400515 	stw	r21,20(sp)
100055ec:	dd000415 	stw	r20,16(sp)
100055f0:	dfc00615 	stw	ra,24(sp)
100055f4:	dc800215 	stw	r18,8(sp)
100055f8:	dc400115 	stw	r17,4(sp)
100055fc:	dc000015 	stw	r16,0(sp)
10005600:	282b883a 	mov	r21,r5
10005604:	0029883a 	mov	r20,zero
10005608:	00051900 	call	10005190 <__sfp_lock_acquire>
1000560c:	98001226 	beq	r19,zero,10005658 <_fwalk+0x7c>
10005610:	04bfffc4 	movi	r18,-1
10005614:	9c400117 	ldw	r17,4(r19)
10005618:	9c000217 	ldw	r16,8(r19)
1000561c:	8c7fffc4 	addi	r17,r17,-1
10005620:	88000b16 	blt	r17,zero,10005650 <_fwalk+0x74>
10005624:	84000304 	addi	r16,r16,12
10005628:	80c0000f 	ldh	r3,0(r16)
1000562c:	8c7fffc4 	addi	r17,r17,-1
10005630:	813ffd04 	addi	r4,r16,-12
10005634:	18000426 	beq	r3,zero,10005648 <_fwalk+0x6c>
10005638:	80c0008f 	ldh	r3,2(r16)
1000563c:	1c800226 	beq	r3,r18,10005648 <_fwalk+0x6c>
10005640:	a83ee83a 	callr	r21
10005644:	a0a8b03a 	or	r20,r20,r2
10005648:	84001a04 	addi	r16,r16,104
1000564c:	8cbff61e 	bne	r17,r18,10005628 <__alt_data_end+0xf8005628>
10005650:	9cc00017 	ldw	r19,0(r19)
10005654:	983fef1e 	bne	r19,zero,10005614 <__alt_data_end+0xf8005614>
10005658:	00051940 	call	10005194 <__sfp_lock_release>
1000565c:	a005883a 	mov	r2,r20
10005660:	dfc00617 	ldw	ra,24(sp)
10005664:	dd400517 	ldw	r21,20(sp)
10005668:	dd000417 	ldw	r20,16(sp)
1000566c:	dcc00317 	ldw	r19,12(sp)
10005670:	dc800217 	ldw	r18,8(sp)
10005674:	dc400117 	ldw	r17,4(sp)
10005678:	dc000017 	ldw	r16,0(sp)
1000567c:	dec00704 	addi	sp,sp,28
10005680:	f800283a 	ret

10005684 <_fwalk_reent>:
10005684:	defff804 	addi	sp,sp,-32
10005688:	dcc00315 	stw	r19,12(sp)
1000568c:	24c0b804 	addi	r19,r4,736
10005690:	dd800615 	stw	r22,24(sp)
10005694:	dd400515 	stw	r21,20(sp)
10005698:	dd000415 	stw	r20,16(sp)
1000569c:	dfc00715 	stw	ra,28(sp)
100056a0:	dc800215 	stw	r18,8(sp)
100056a4:	dc400115 	stw	r17,4(sp)
100056a8:	dc000015 	stw	r16,0(sp)
100056ac:	2029883a 	mov	r20,r4
100056b0:	282b883a 	mov	r21,r5
100056b4:	002d883a 	mov	r22,zero
100056b8:	00051900 	call	10005190 <__sfp_lock_acquire>
100056bc:	98001326 	beq	r19,zero,1000570c <_fwalk_reent+0x88>
100056c0:	04bfffc4 	movi	r18,-1
100056c4:	9c400117 	ldw	r17,4(r19)
100056c8:	9c000217 	ldw	r16,8(r19)
100056cc:	8c7fffc4 	addi	r17,r17,-1
100056d0:	88000c16 	blt	r17,zero,10005704 <_fwalk_reent+0x80>
100056d4:	84000304 	addi	r16,r16,12
100056d8:	80c0000f 	ldh	r3,0(r16)
100056dc:	8c7fffc4 	addi	r17,r17,-1
100056e0:	817ffd04 	addi	r5,r16,-12
100056e4:	18000526 	beq	r3,zero,100056fc <_fwalk_reent+0x78>
100056e8:	80c0008f 	ldh	r3,2(r16)
100056ec:	a009883a 	mov	r4,r20
100056f0:	1c800226 	beq	r3,r18,100056fc <_fwalk_reent+0x78>
100056f4:	a83ee83a 	callr	r21
100056f8:	b0acb03a 	or	r22,r22,r2
100056fc:	84001a04 	addi	r16,r16,104
10005700:	8cbff51e 	bne	r17,r18,100056d8 <__alt_data_end+0xf80056d8>
10005704:	9cc00017 	ldw	r19,0(r19)
10005708:	983fee1e 	bne	r19,zero,100056c4 <__alt_data_end+0xf80056c4>
1000570c:	00051940 	call	10005194 <__sfp_lock_release>
10005710:	b005883a 	mov	r2,r22
10005714:	dfc00717 	ldw	ra,28(sp)
10005718:	dd800617 	ldw	r22,24(sp)
1000571c:	dd400517 	ldw	r21,20(sp)
10005720:	dd000417 	ldw	r20,16(sp)
10005724:	dcc00317 	ldw	r19,12(sp)
10005728:	dc800217 	ldw	r18,8(sp)
1000572c:	dc400117 	ldw	r17,4(sp)
10005730:	dc000017 	ldw	r16,0(sp)
10005734:	dec00804 	addi	sp,sp,32
10005738:	f800283a 	ret

1000573c <_setlocale_r>:
1000573c:	defffe04 	addi	sp,sp,-8
10005740:	dc000015 	stw	r16,0(sp)
10005744:	dfc00115 	stw	ra,4(sp)
10005748:	3021883a 	mov	r16,r6
1000574c:	30000526 	beq	r6,zero,10005764 <_setlocale_r+0x28>
10005750:	3009883a 	mov	r4,r6
10005754:	01440074 	movhi	r5,4097
10005758:	297fd304 	addi	r5,r5,-180
1000575c:	00076c00 	call	100076c0 <strcmp>
10005760:	1000061e 	bne	r2,zero,1000577c <_setlocale_r+0x40>
10005764:	00840074 	movhi	r2,4097
10005768:	10bfd204 	addi	r2,r2,-184
1000576c:	dfc00117 	ldw	ra,4(sp)
10005770:	dc000017 	ldw	r16,0(sp)
10005774:	dec00204 	addi	sp,sp,8
10005778:	f800283a 	ret
1000577c:	8009883a 	mov	r4,r16
10005780:	01440074 	movhi	r5,4097
10005784:	297fd204 	addi	r5,r5,-184
10005788:	00076c00 	call	100076c0 <strcmp>
1000578c:	103ff526 	beq	r2,zero,10005764 <__alt_data_end+0xf8005764>
10005790:	8009883a 	mov	r4,r16
10005794:	01440074 	movhi	r5,4097
10005798:	297fbd04 	addi	r5,r5,-268
1000579c:	00076c00 	call	100076c0 <strcmp>
100057a0:	103ff026 	beq	r2,zero,10005764 <__alt_data_end+0xf8005764>
100057a4:	0005883a 	mov	r2,zero
100057a8:	003ff006 	br	1000576c <__alt_data_end+0xf800576c>

100057ac <__locale_charset>:
100057ac:	00840074 	movhi	r2,4097
100057b0:	10818504 	addi	r2,r2,1556
100057b4:	f800283a 	ret

100057b8 <__locale_mb_cur_max>:
100057b8:	00840074 	movhi	r2,4097
100057bc:	10872304 	addi	r2,r2,7308
100057c0:	10800017 	ldw	r2,0(r2)
100057c4:	f800283a 	ret

100057c8 <__locale_msgcharset>:
100057c8:	00840074 	movhi	r2,4097
100057cc:	10817d04 	addi	r2,r2,1524
100057d0:	f800283a 	ret

100057d4 <__locale_cjk_lang>:
100057d4:	0005883a 	mov	r2,zero
100057d8:	f800283a 	ret

100057dc <_localeconv_r>:
100057dc:	00840074 	movhi	r2,4097
100057e0:	10818d04 	addi	r2,r2,1588
100057e4:	f800283a 	ret

100057e8 <setlocale>:
100057e8:	00c40074 	movhi	r3,4097
100057ec:	18c72204 	addi	r3,r3,7304
100057f0:	2005883a 	mov	r2,r4
100057f4:	19000017 	ldw	r4,0(r3)
100057f8:	280d883a 	mov	r6,r5
100057fc:	100b883a 	mov	r5,r2
10005800:	000573c1 	jmpi	1000573c <_setlocale_r>

10005804 <localeconv>:
10005804:	00840074 	movhi	r2,4097
10005808:	10818d04 	addi	r2,r2,1588
1000580c:	f800283a 	ret

10005810 <__smakebuf_r>:
10005810:	2880030b 	ldhu	r2,12(r5)
10005814:	deffec04 	addi	sp,sp,-80
10005818:	dc000f15 	stw	r16,60(sp)
1000581c:	dfc01315 	stw	ra,76(sp)
10005820:	dcc01215 	stw	r19,72(sp)
10005824:	dc801115 	stw	r18,68(sp)
10005828:	dc401015 	stw	r17,64(sp)
1000582c:	10c0008c 	andi	r3,r2,2
10005830:	2821883a 	mov	r16,r5
10005834:	18003a1e 	bne	r3,zero,10005920 <__smakebuf_r+0x110>
10005838:	2940038f 	ldh	r5,14(r5)
1000583c:	2023883a 	mov	r17,r4
10005840:	28001b16 	blt	r5,zero,100058b0 <__smakebuf_r+0xa0>
10005844:	d80d883a 	mov	r6,sp
10005848:	00092500 	call	10009250 <_fstat_r>
1000584c:	10001716 	blt	r2,zero,100058ac <__smakebuf_r+0x9c>
10005850:	d8800117 	ldw	r2,4(sp)
10005854:	00e00014 	movui	r3,32768
10005858:	10bc000c 	andi	r2,r2,61440
1000585c:	10c03e26 	beq	r2,r3,10005958 <__smakebuf_r+0x148>
10005860:	80c0030b 	ldhu	r3,12(r16)
10005864:	18c20014 	ori	r3,r3,2048
10005868:	80c0030d 	sth	r3,12(r16)
1000586c:	00c80004 	movi	r3,8192
10005870:	10c0431e 	bne	r2,r3,10005980 <__smakebuf_r+0x170>
10005874:	8140038f 	ldh	r5,14(r16)
10005878:	8809883a 	mov	r4,r17
1000587c:	00097640 	call	10009764 <_isatty_r>
10005880:	10004d26 	beq	r2,zero,100059b8 <__smakebuf_r+0x1a8>
10005884:	80c0030b 	ldhu	r3,12(r16)
10005888:	04c00044 	movi	r19,1
1000588c:	808010c4 	addi	r2,r16,67
10005890:	1cc6b03a 	or	r3,r3,r19
10005894:	80c0030d 	sth	r3,12(r16)
10005898:	80800015 	stw	r2,0(r16)
1000589c:	80800415 	stw	r2,16(r16)
100058a0:	84c00515 	stw	r19,20(r16)
100058a4:	04810004 	movi	r18,1024
100058a8:	00000706 	br	100058c8 <__smakebuf_r+0xb8>
100058ac:	8080030b 	ldhu	r2,12(r16)
100058b0:	10c0200c 	andi	r3,r2,128
100058b4:	1800261e 	bne	r3,zero,10005950 <__smakebuf_r+0x140>
100058b8:	04810004 	movi	r18,1024
100058bc:	10820014 	ori	r2,r2,2048
100058c0:	8080030d 	sth	r2,12(r16)
100058c4:	0027883a 	mov	r19,zero
100058c8:	8809883a 	mov	r4,r17
100058cc:	900b883a 	mov	r5,r18
100058d0:	00059c40 	call	100059c4 <_malloc_r>
100058d4:	10002d26 	beq	r2,zero,1000598c <__smakebuf_r+0x17c>
100058d8:	80c0030b 	ldhu	r3,12(r16)
100058dc:	01040034 	movhi	r4,4096
100058e0:	21138f04 	addi	r4,r4,20028
100058e4:	89000f15 	stw	r4,60(r17)
100058e8:	18c02014 	ori	r3,r3,128
100058ec:	80c0030d 	sth	r3,12(r16)
100058f0:	80800015 	stw	r2,0(r16)
100058f4:	80800415 	stw	r2,16(r16)
100058f8:	84800515 	stw	r18,20(r16)
100058fc:	98000d26 	beq	r19,zero,10005934 <__smakebuf_r+0x124>
10005900:	8140038f 	ldh	r5,14(r16)
10005904:	8809883a 	mov	r4,r17
10005908:	00097640 	call	10009764 <_isatty_r>
1000590c:	10000926 	beq	r2,zero,10005934 <__smakebuf_r+0x124>
10005910:	8080030b 	ldhu	r2,12(r16)
10005914:	10800054 	ori	r2,r2,1
10005918:	8080030d 	sth	r2,12(r16)
1000591c:	00000506 	br	10005934 <__smakebuf_r+0x124>
10005920:	288010c4 	addi	r2,r5,67
10005924:	28800015 	stw	r2,0(r5)
10005928:	28800415 	stw	r2,16(r5)
1000592c:	00800044 	movi	r2,1
10005930:	28800515 	stw	r2,20(r5)
10005934:	dfc01317 	ldw	ra,76(sp)
10005938:	dcc01217 	ldw	r19,72(sp)
1000593c:	dc801117 	ldw	r18,68(sp)
10005940:	dc401017 	ldw	r17,64(sp)
10005944:	dc000f17 	ldw	r16,60(sp)
10005948:	dec01404 	addi	sp,sp,80
1000594c:	f800283a 	ret
10005950:	04801004 	movi	r18,64
10005954:	003fd906 	br	100058bc <__alt_data_end+0xf80058bc>
10005958:	81000a17 	ldw	r4,40(r16)
1000595c:	00c40034 	movhi	r3,4096
10005960:	18dd9704 	addi	r3,r3,30300
10005964:	20ffbe1e 	bne	r4,r3,10005860 <__alt_data_end+0xf8005860>
10005968:	80c0030b 	ldhu	r3,12(r16)
1000596c:	01010004 	movi	r4,1024
10005970:	81001315 	stw	r4,76(r16)
10005974:	1906b03a 	or	r3,r3,r4
10005978:	80c0030d 	sth	r3,12(r16)
1000597c:	003fbb06 	br	1000586c <__alt_data_end+0xf800586c>
10005980:	0027883a 	mov	r19,zero
10005984:	04810004 	movi	r18,1024
10005988:	003fcf06 	br	100058c8 <__alt_data_end+0xf80058c8>
1000598c:	8080030b 	ldhu	r2,12(r16)
10005990:	10c0800c 	andi	r3,r2,512
10005994:	183fe71e 	bne	r3,zero,10005934 <__alt_data_end+0xf8005934>
10005998:	10800094 	ori	r2,r2,2
1000599c:	80c010c4 	addi	r3,r16,67
100059a0:	8080030d 	sth	r2,12(r16)
100059a4:	00800044 	movi	r2,1
100059a8:	80c00015 	stw	r3,0(r16)
100059ac:	80c00415 	stw	r3,16(r16)
100059b0:	80800515 	stw	r2,20(r16)
100059b4:	003fdf06 	br	10005934 <__alt_data_end+0xf8005934>
100059b8:	04c00044 	movi	r19,1
100059bc:	04810004 	movi	r18,1024
100059c0:	003fc106 	br	100058c8 <__alt_data_end+0xf80058c8>

100059c4 <_malloc_r>:
100059c4:	defff504 	addi	sp,sp,-44
100059c8:	dc800315 	stw	r18,12(sp)
100059cc:	dfc00a15 	stw	ra,40(sp)
100059d0:	df000915 	stw	fp,36(sp)
100059d4:	ddc00815 	stw	r23,32(sp)
100059d8:	dd800715 	stw	r22,28(sp)
100059dc:	dd400615 	stw	r21,24(sp)
100059e0:	dd000515 	stw	r20,20(sp)
100059e4:	dcc00415 	stw	r19,16(sp)
100059e8:	dc400215 	stw	r17,8(sp)
100059ec:	dc000115 	stw	r16,4(sp)
100059f0:	288002c4 	addi	r2,r5,11
100059f4:	00c00584 	movi	r3,22
100059f8:	2025883a 	mov	r18,r4
100059fc:	18802b2e 	bgeu	r3,r2,10005aac <_malloc_r+0xe8>
10005a00:	047ffe04 	movi	r17,-8
10005a04:	1462703a 	and	r17,r2,r17
10005a08:	88002a16 	blt	r17,zero,10005ab4 <_malloc_r+0xf0>
10005a0c:	89402936 	bltu	r17,r5,10005ab4 <_malloc_r+0xf0>
10005a10:	9009883a 	mov	r4,r18
10005a14:	000de800 	call	1000de80 <__malloc_lock>
10005a18:	00807dc4 	movi	r2,503
10005a1c:	14402936 	bltu	r2,r17,10005ac4 <_malloc_r+0x100>
10005a20:	8808d0fa 	srli	r4,r17,3
10005a24:	04c40074 	movhi	r19,4097
10005a28:	9cc19b04 	addi	r19,r19,1644
10005a2c:	2105883a 	add	r2,r4,r4
10005a30:	1085883a 	add	r2,r2,r2
10005a34:	1085883a 	add	r2,r2,r2
10005a38:	9885883a 	add	r2,r19,r2
10005a3c:	14000317 	ldw	r16,12(r2)
10005a40:	80815226 	beq	r16,r2,10005f8c <_malloc_r+0x5c8>
10005a44:	81000117 	ldw	r4,4(r16)
10005a48:	00bfff04 	movi	r2,-4
10005a4c:	80c00317 	ldw	r3,12(r16)
10005a50:	2084703a 	and	r2,r4,r2
10005a54:	8085883a 	add	r2,r16,r2
10005a58:	81000217 	ldw	r4,8(r16)
10005a5c:	11400117 	ldw	r5,4(r2)
10005a60:	20c00315 	stw	r3,12(r4)
10005a64:	19000215 	stw	r4,8(r3)
10005a68:	28c00054 	ori	r3,r5,1
10005a6c:	10c00115 	stw	r3,4(r2)
10005a70:	9009883a 	mov	r4,r18
10005a74:	000dea00 	call	1000dea0 <__malloc_unlock>
10005a78:	80800204 	addi	r2,r16,8
10005a7c:	dfc00a17 	ldw	ra,40(sp)
10005a80:	df000917 	ldw	fp,36(sp)
10005a84:	ddc00817 	ldw	r23,32(sp)
10005a88:	dd800717 	ldw	r22,28(sp)
10005a8c:	dd400617 	ldw	r21,24(sp)
10005a90:	dd000517 	ldw	r20,20(sp)
10005a94:	dcc00417 	ldw	r19,16(sp)
10005a98:	dc800317 	ldw	r18,12(sp)
10005a9c:	dc400217 	ldw	r17,8(sp)
10005aa0:	dc000117 	ldw	r16,4(sp)
10005aa4:	dec00b04 	addi	sp,sp,44
10005aa8:	f800283a 	ret
10005aac:	04400404 	movi	r17,16
10005ab0:	897fd72e 	bgeu	r17,r5,10005a10 <__alt_data_end+0xf8005a10>
10005ab4:	00800304 	movi	r2,12
10005ab8:	90800015 	stw	r2,0(r18)
10005abc:	0005883a 	mov	r2,zero
10005ac0:	003fee06 	br	10005a7c <__alt_data_end+0xf8005a7c>
10005ac4:	8808d27a 	srli	r4,r17,9
10005ac8:	20007126 	beq	r4,zero,10005c90 <_malloc_r+0x2cc>
10005acc:	00800104 	movi	r2,4
10005ad0:	1100f536 	bltu	r2,r4,10005ea8 <_malloc_r+0x4e4>
10005ad4:	8808d1ba 	srli	r4,r17,6
10005ad8:	21000e04 	addi	r4,r4,56
10005adc:	210b883a 	add	r5,r4,r4
10005ae0:	294b883a 	add	r5,r5,r5
10005ae4:	294b883a 	add	r5,r5,r5
10005ae8:	04c40074 	movhi	r19,4097
10005aec:	9cc19b04 	addi	r19,r19,1644
10005af0:	994b883a 	add	r5,r19,r5
10005af4:	2c000317 	ldw	r16,12(r5)
10005af8:	2c000e26 	beq	r5,r16,10005b34 <_malloc_r+0x170>
10005afc:	80c00117 	ldw	r3,4(r16)
10005b00:	01ffff04 	movi	r7,-4
10005b04:	018003c4 	movi	r6,15
10005b08:	19c6703a 	and	r3,r3,r7
10005b0c:	1c45c83a 	sub	r2,r3,r17
10005b10:	30800716 	blt	r6,r2,10005b30 <_malloc_r+0x16c>
10005b14:	1000610e 	bge	r2,zero,10005c9c <_malloc_r+0x2d8>
10005b18:	84000317 	ldw	r16,12(r16)
10005b1c:	2c000526 	beq	r5,r16,10005b34 <_malloc_r+0x170>
10005b20:	80c00117 	ldw	r3,4(r16)
10005b24:	19c6703a 	and	r3,r3,r7
10005b28:	1c45c83a 	sub	r2,r3,r17
10005b2c:	30bff90e 	bge	r6,r2,10005b14 <__alt_data_end+0xf8005b14>
10005b30:	213fffc4 	addi	r4,r4,-1
10005b34:	21000044 	addi	r4,r4,1
10005b38:	9c000417 	ldw	r16,16(r19)
10005b3c:	00c40074 	movhi	r3,4097
10005b40:	18c19b04 	addi	r3,r3,1644
10005b44:	1a400204 	addi	r9,r3,8
10005b48:	82410926 	beq	r16,r9,10005f70 <_malloc_r+0x5ac>
10005b4c:	81400117 	ldw	r5,4(r16)
10005b50:	00bfff04 	movi	r2,-4
10005b54:	018003c4 	movi	r6,15
10005b58:	2884703a 	and	r2,r5,r2
10005b5c:	144bc83a 	sub	r5,r2,r17
10005b60:	3140f416 	blt	r6,r5,10005f34 <_malloc_r+0x570>
10005b64:	1a400515 	stw	r9,20(r3)
10005b68:	1a400415 	stw	r9,16(r3)
10005b6c:	2800570e 	bge	r5,zero,10005ccc <_malloc_r+0x308>
10005b70:	01407fc4 	movi	r5,511
10005b74:	2880d436 	bltu	r5,r2,10005ec8 <_malloc_r+0x504>
10005b78:	1004d0fa 	srli	r2,r2,3
10005b7c:	02000044 	movi	r8,1
10005b80:	19c00117 	ldw	r7,4(r3)
10005b84:	108b883a 	add	r5,r2,r2
10005b88:	294b883a 	add	r5,r5,r5
10005b8c:	1005d0ba 	srai	r2,r2,2
10005b90:	294b883a 	add	r5,r5,r5
10005b94:	28cb883a 	add	r5,r5,r3
10005b98:	29800217 	ldw	r6,8(r5)
10005b9c:	4084983a 	sll	r2,r8,r2
10005ba0:	81400315 	stw	r5,12(r16)
10005ba4:	81800215 	stw	r6,8(r16)
10005ba8:	11c4b03a 	or	r2,r2,r7
10005bac:	2c000215 	stw	r16,8(r5)
10005bb0:	18800115 	stw	r2,4(r3)
10005bb4:	34000315 	stw	r16,12(r6)
10005bb8:	2007d0ba 	srai	r3,r4,2
10005bbc:	01400044 	movi	r5,1
10005bc0:	28ca983a 	sll	r5,r5,r3
10005bc4:	11404936 	bltu	r2,r5,10005cec <_malloc_r+0x328>
10005bc8:	1146703a 	and	r3,r2,r5
10005bcc:	18000a1e 	bne	r3,zero,10005bf8 <_malloc_r+0x234>
10005bd0:	00ffff04 	movi	r3,-4
10005bd4:	294b883a 	add	r5,r5,r5
10005bd8:	20c8703a 	and	r4,r4,r3
10005bdc:	1146703a 	and	r3,r2,r5
10005be0:	21000104 	addi	r4,r4,4
10005be4:	1800041e 	bne	r3,zero,10005bf8 <_malloc_r+0x234>
10005be8:	294b883a 	add	r5,r5,r5
10005bec:	1146703a 	and	r3,r2,r5
10005bf0:	21000104 	addi	r4,r4,4
10005bf4:	183ffc26 	beq	r3,zero,10005be8 <__alt_data_end+0xf8005be8>
10005bf8:	023fff04 	movi	r8,-4
10005bfc:	01c003c4 	movi	r7,15
10005c00:	2105883a 	add	r2,r4,r4
10005c04:	1085883a 	add	r2,r2,r2
10005c08:	1085883a 	add	r2,r2,r2
10005c0c:	9897883a 	add	r11,r19,r2
10005c10:	5a800304 	addi	r10,r11,12
10005c14:	2019883a 	mov	r12,r4
10005c18:	54000017 	ldw	r16,0(r10)
10005c1c:	51bffd04 	addi	r6,r10,-12
10005c20:	8180041e 	bne	r16,r6,10005c34 <_malloc_r+0x270>
10005c24:	0000d406 	br	10005f78 <_malloc_r+0x5b4>
10005c28:	1000dd0e 	bge	r2,zero,10005fa0 <_malloc_r+0x5dc>
10005c2c:	84000317 	ldw	r16,12(r16)
10005c30:	8180d126 	beq	r16,r6,10005f78 <_malloc_r+0x5b4>
10005c34:	80c00117 	ldw	r3,4(r16)
10005c38:	1a06703a 	and	r3,r3,r8
10005c3c:	1c45c83a 	sub	r2,r3,r17
10005c40:	38bff90e 	bge	r7,r2,10005c28 <__alt_data_end+0xf8005c28>
10005c44:	80c00317 	ldw	r3,12(r16)
10005c48:	81000217 	ldw	r4,8(r16)
10005c4c:	89400054 	ori	r5,r17,1
10005c50:	81400115 	stw	r5,4(r16)
10005c54:	20c00315 	stw	r3,12(r4)
10005c58:	19000215 	stw	r4,8(r3)
10005c5c:	8463883a 	add	r17,r16,r17
10005c60:	9c400515 	stw	r17,20(r19)
10005c64:	9c400415 	stw	r17,16(r19)
10005c68:	10c00054 	ori	r3,r2,1
10005c6c:	8a400315 	stw	r9,12(r17)
10005c70:	8a400215 	stw	r9,8(r17)
10005c74:	88c00115 	stw	r3,4(r17)
10005c78:	88a3883a 	add	r17,r17,r2
10005c7c:	88800015 	stw	r2,0(r17)
10005c80:	9009883a 	mov	r4,r18
10005c84:	000dea00 	call	1000dea0 <__malloc_unlock>
10005c88:	80800204 	addi	r2,r16,8
10005c8c:	003f7b06 	br	10005a7c <__alt_data_end+0xf8005a7c>
10005c90:	01401f84 	movi	r5,126
10005c94:	01000fc4 	movi	r4,63
10005c98:	003f9106 	br	10005ae0 <__alt_data_end+0xf8005ae0>
10005c9c:	80800317 	ldw	r2,12(r16)
10005ca0:	81000217 	ldw	r4,8(r16)
10005ca4:	80c7883a 	add	r3,r16,r3
10005ca8:	19400117 	ldw	r5,4(r3)
10005cac:	20800315 	stw	r2,12(r4)
10005cb0:	11000215 	stw	r4,8(r2)
10005cb4:	28800054 	ori	r2,r5,1
10005cb8:	18800115 	stw	r2,4(r3)
10005cbc:	9009883a 	mov	r4,r18
10005cc0:	000dea00 	call	1000dea0 <__malloc_unlock>
10005cc4:	80800204 	addi	r2,r16,8
10005cc8:	003f6c06 	br	10005a7c <__alt_data_end+0xf8005a7c>
10005ccc:	8085883a 	add	r2,r16,r2
10005cd0:	10c00117 	ldw	r3,4(r2)
10005cd4:	9009883a 	mov	r4,r18
10005cd8:	18c00054 	ori	r3,r3,1
10005cdc:	10c00115 	stw	r3,4(r2)
10005ce0:	000dea00 	call	1000dea0 <__malloc_unlock>
10005ce4:	80800204 	addi	r2,r16,8
10005ce8:	003f6406 	br	10005a7c <__alt_data_end+0xf8005a7c>
10005cec:	9c000217 	ldw	r16,8(r19)
10005cf0:	00bfff04 	movi	r2,-4
10005cf4:	85400117 	ldw	r21,4(r16)
10005cf8:	a8aa703a 	and	r21,r21,r2
10005cfc:	ac400336 	bltu	r21,r17,10005d0c <_malloc_r+0x348>
10005d00:	ac45c83a 	sub	r2,r21,r17
10005d04:	00c003c4 	movi	r3,15
10005d08:	18805d16 	blt	r3,r2,10005e80 <_malloc_r+0x4bc>
10005d0c:	00840074 	movhi	r2,4097
10005d10:	108df304 	addi	r2,r2,14284
10005d14:	00c40074 	movhi	r3,4097
10005d18:	18c72404 	addi	r3,r3,7312
10005d1c:	15c00017 	ldw	r23,0(r2)
10005d20:	19000017 	ldw	r4,0(r3)
10005d24:	00bfffc4 	movi	r2,-1
10005d28:	8579883a 	add	fp,r16,r21
10005d2c:	8def883a 	add	r23,r17,r23
10005d30:	2080e426 	beq	r4,r2,100060c4 <_malloc_r+0x700>
10005d34:	bdc403c4 	addi	r23,r23,4111
10005d38:	00bc0004 	movi	r2,-4096
10005d3c:	b8ae703a 	and	r23,r23,r2
10005d40:	9009883a 	mov	r4,r18
10005d44:	b80b883a 	mov	r5,r23
10005d48:	d8c00015 	stw	r3,0(sp)
10005d4c:	00075200 	call	10007520 <_sbrk_r>
10005d50:	1029883a 	mov	r20,r2
10005d54:	00bfffc4 	movi	r2,-1
10005d58:	d8c00017 	ldw	r3,0(sp)
10005d5c:	a080a426 	beq	r20,r2,10005ff0 <_malloc_r+0x62c>
10005d60:	a700a236 	bltu	r20,fp,10005fec <_malloc_r+0x628>
10005d64:	05840074 	movhi	r22,4097
10005d68:	b58dfb04 	addi	r22,r22,14316
10005d6c:	b0800017 	ldw	r2,0(r22)
10005d70:	b885883a 	add	r2,r23,r2
10005d74:	b0800015 	stw	r2,0(r22)
10005d78:	e500da26 	beq	fp,r20,100060e4 <_malloc_r+0x720>
10005d7c:	19000017 	ldw	r4,0(r3)
10005d80:	00ffffc4 	movi	r3,-1
10005d84:	20c0e426 	beq	r4,r3,10006118 <_malloc_r+0x754>
10005d88:	a739c83a 	sub	fp,r20,fp
10005d8c:	1705883a 	add	r2,r2,fp
10005d90:	b0800015 	stw	r2,0(r22)
10005d94:	a08001cc 	andi	r2,r20,7
10005d98:	1000b526 	beq	r2,zero,10006070 <_malloc_r+0x6ac>
10005d9c:	a0a9c83a 	sub	r20,r20,r2
10005da0:	00c40204 	movi	r3,4104
10005da4:	a5000204 	addi	r20,r20,8
10005da8:	1885c83a 	sub	r2,r3,r2
10005dac:	a5c7883a 	add	r3,r20,r23
10005db0:	18c3ffcc 	andi	r3,r3,4095
10005db4:	10efc83a 	sub	r23,r2,r3
10005db8:	9009883a 	mov	r4,r18
10005dbc:	b80b883a 	mov	r5,r23
10005dc0:	00075200 	call	10007520 <_sbrk_r>
10005dc4:	00ffffc4 	movi	r3,-1
10005dc8:	10c0d026 	beq	r2,r3,1000610c <_malloc_r+0x748>
10005dcc:	1505c83a 	sub	r2,r2,r20
10005dd0:	b887883a 	add	r3,r23,r2
10005dd4:	18c00054 	ori	r3,r3,1
10005dd8:	b0800017 	ldw	r2,0(r22)
10005ddc:	9d000215 	stw	r20,8(r19)
10005de0:	a0c00115 	stw	r3,4(r20)
10005de4:	b885883a 	add	r2,r23,r2
10005de8:	b0800015 	stw	r2,0(r22)
10005dec:	84c00e26 	beq	r16,r19,10005e28 <_malloc_r+0x464>
10005df0:	00c003c4 	movi	r3,15
10005df4:	1d40a02e 	bgeu	r3,r21,10006078 <_malloc_r+0x6b4>
10005df8:	81400117 	ldw	r5,4(r16)
10005dfc:	ad7ffd04 	addi	r21,r21,-12
10005e00:	013ffe04 	movi	r4,-8
10005e04:	a908703a 	and	r4,r21,r4
10005e08:	2940004c 	andi	r5,r5,1
10005e0c:	214ab03a 	or	r5,r4,r5
10005e10:	81400115 	stw	r5,4(r16)
10005e14:	01800144 	movi	r6,5
10005e18:	810b883a 	add	r5,r16,r4
10005e1c:	29800115 	stw	r6,4(r5)
10005e20:	29800215 	stw	r6,8(r5)
10005e24:	1900c036 	bltu	r3,r4,10006128 <_malloc_r+0x764>
10005e28:	00c40074 	movhi	r3,4097
10005e2c:	18cdf204 	addi	r3,r3,14280
10005e30:	19000017 	ldw	r4,0(r3)
10005e34:	2080012e 	bgeu	r4,r2,10005e3c <_malloc_r+0x478>
10005e38:	18800015 	stw	r2,0(r3)
10005e3c:	00c40074 	movhi	r3,4097
10005e40:	18cdf104 	addi	r3,r3,14276
10005e44:	19000017 	ldw	r4,0(r3)
10005e48:	9c000217 	ldw	r16,8(r19)
10005e4c:	2080012e 	bgeu	r4,r2,10005e54 <_malloc_r+0x490>
10005e50:	18800015 	stw	r2,0(r3)
10005e54:	80c00117 	ldw	r3,4(r16)
10005e58:	00bfff04 	movi	r2,-4
10005e5c:	1886703a 	and	r3,r3,r2
10005e60:	1c45c83a 	sub	r2,r3,r17
10005e64:	1c400236 	bltu	r3,r17,10005e70 <_malloc_r+0x4ac>
10005e68:	00c003c4 	movi	r3,15
10005e6c:	18800416 	blt	r3,r2,10005e80 <_malloc_r+0x4bc>
10005e70:	9009883a 	mov	r4,r18
10005e74:	000dea00 	call	1000dea0 <__malloc_unlock>
10005e78:	0005883a 	mov	r2,zero
10005e7c:	003eff06 	br	10005a7c <__alt_data_end+0xf8005a7c>
10005e80:	88c00054 	ori	r3,r17,1
10005e84:	80c00115 	stw	r3,4(r16)
10005e88:	8463883a 	add	r17,r16,r17
10005e8c:	10800054 	ori	r2,r2,1
10005e90:	9c400215 	stw	r17,8(r19)
10005e94:	88800115 	stw	r2,4(r17)
10005e98:	9009883a 	mov	r4,r18
10005e9c:	000dea00 	call	1000dea0 <__malloc_unlock>
10005ea0:	80800204 	addi	r2,r16,8
10005ea4:	003ef506 	br	10005a7c <__alt_data_end+0xf8005a7c>
10005ea8:	00800504 	movi	r2,20
10005eac:	1100482e 	bgeu	r2,r4,10005fd0 <_malloc_r+0x60c>
10005eb0:	00801504 	movi	r2,84
10005eb4:	11006836 	bltu	r2,r4,10006058 <_malloc_r+0x694>
10005eb8:	8808d33a 	srli	r4,r17,12
10005ebc:	21001b84 	addi	r4,r4,110
10005ec0:	210b883a 	add	r5,r4,r4
10005ec4:	003f0606 	br	10005ae0 <__alt_data_end+0xf8005ae0>
10005ec8:	1006d27a 	srli	r3,r2,9
10005ecc:	01400104 	movi	r5,4
10005ed0:	28c0422e 	bgeu	r5,r3,10005fdc <_malloc_r+0x618>
10005ed4:	01400504 	movi	r5,20
10005ed8:	28c07c36 	bltu	r5,r3,100060cc <_malloc_r+0x708>
10005edc:	194016c4 	addi	r5,r3,91
10005ee0:	294d883a 	add	r6,r5,r5
10005ee4:	318d883a 	add	r6,r6,r6
10005ee8:	318d883a 	add	r6,r6,r6
10005eec:	998d883a 	add	r6,r19,r6
10005ef0:	30c00217 	ldw	r3,8(r6)
10005ef4:	01c40074 	movhi	r7,4097
10005ef8:	39c19b04 	addi	r7,r7,1644
10005efc:	19806326 	beq	r3,r6,1000608c <_malloc_r+0x6c8>
10005f00:	01ffff04 	movi	r7,-4
10005f04:	19400117 	ldw	r5,4(r3)
10005f08:	29ca703a 	and	r5,r5,r7
10005f0c:	1140022e 	bgeu	r2,r5,10005f18 <_malloc_r+0x554>
10005f10:	18c00217 	ldw	r3,8(r3)
10005f14:	30fffb1e 	bne	r6,r3,10005f04 <__alt_data_end+0xf8005f04>
10005f18:	19400317 	ldw	r5,12(r3)
10005f1c:	98800117 	ldw	r2,4(r19)
10005f20:	81400315 	stw	r5,12(r16)
10005f24:	80c00215 	stw	r3,8(r16)
10005f28:	2c000215 	stw	r16,8(r5)
10005f2c:	1c000315 	stw	r16,12(r3)
10005f30:	003f2106 	br	10005bb8 <__alt_data_end+0xf8005bb8>
10005f34:	88800054 	ori	r2,r17,1
10005f38:	80800115 	stw	r2,4(r16)
10005f3c:	8463883a 	add	r17,r16,r17
10005f40:	1c400515 	stw	r17,20(r3)
10005f44:	1c400415 	stw	r17,16(r3)
10005f48:	28800054 	ori	r2,r5,1
10005f4c:	88800115 	stw	r2,4(r17)
10005f50:	8a400315 	stw	r9,12(r17)
10005f54:	8a400215 	stw	r9,8(r17)
10005f58:	8963883a 	add	r17,r17,r5
10005f5c:	89400015 	stw	r5,0(r17)
10005f60:	9009883a 	mov	r4,r18
10005f64:	000dea00 	call	1000dea0 <__malloc_unlock>
10005f68:	80800204 	addi	r2,r16,8
10005f6c:	003ec306 	br	10005a7c <__alt_data_end+0xf8005a7c>
10005f70:	18800117 	ldw	r2,4(r3)
10005f74:	003f1006 	br	10005bb8 <__alt_data_end+0xf8005bb8>
10005f78:	63000044 	addi	r12,r12,1
10005f7c:	608000cc 	andi	r2,r12,3
10005f80:	52800204 	addi	r10,r10,8
10005f84:	103f241e 	bne	r2,zero,10005c18 <__alt_data_end+0xf8005c18>
10005f88:	00002106 	br	10006010 <_malloc_r+0x64c>
10005f8c:	80800204 	addi	r2,r16,8
10005f90:	84000517 	ldw	r16,20(r16)
10005f94:	143eab1e 	bne	r2,r16,10005a44 <__alt_data_end+0xf8005a44>
10005f98:	21000084 	addi	r4,r4,2
10005f9c:	003ee606 	br	10005b38 <__alt_data_end+0xf8005b38>
10005fa0:	80c7883a 	add	r3,r16,r3
10005fa4:	19400117 	ldw	r5,4(r3)
10005fa8:	80800317 	ldw	r2,12(r16)
10005fac:	81000217 	ldw	r4,8(r16)
10005fb0:	29400054 	ori	r5,r5,1
10005fb4:	19400115 	stw	r5,4(r3)
10005fb8:	20800315 	stw	r2,12(r4)
10005fbc:	11000215 	stw	r4,8(r2)
10005fc0:	9009883a 	mov	r4,r18
10005fc4:	000dea00 	call	1000dea0 <__malloc_unlock>
10005fc8:	80800204 	addi	r2,r16,8
10005fcc:	003eab06 	br	10005a7c <__alt_data_end+0xf8005a7c>
10005fd0:	210016c4 	addi	r4,r4,91
10005fd4:	210b883a 	add	r5,r4,r4
10005fd8:	003ec106 	br	10005ae0 <__alt_data_end+0xf8005ae0>
10005fdc:	100ad1ba 	srli	r5,r2,6
10005fe0:	29400e04 	addi	r5,r5,56
10005fe4:	294d883a 	add	r6,r5,r5
10005fe8:	003fbe06 	br	10005ee4 <__alt_data_end+0xf8005ee4>
10005fec:	84ff5d26 	beq	r16,r19,10005d64 <__alt_data_end+0xf8005d64>
10005ff0:	9c000217 	ldw	r16,8(r19)
10005ff4:	00bfff04 	movi	r2,-4
10005ff8:	80c00117 	ldw	r3,4(r16)
10005ffc:	1886703a 	and	r3,r3,r2
10006000:	003f9706 	br	10005e60 <__alt_data_end+0xf8005e60>
10006004:	5ac00017 	ldw	r11,0(r11)
10006008:	213fffc4 	addi	r4,r4,-1
1000600c:	58805c1e 	bne	r11,r2,10006180 <_malloc_r+0x7bc>
10006010:	20c000cc 	andi	r3,r4,3
10006014:	58bffe04 	addi	r2,r11,-8
10006018:	183ffa1e 	bne	r3,zero,10006004 <__alt_data_end+0xf8006004>
1000601c:	98800117 	ldw	r2,4(r19)
10006020:	0146303a 	nor	r3,zero,r5
10006024:	1884703a 	and	r2,r3,r2
10006028:	98800115 	stw	r2,4(r19)
1000602c:	294b883a 	add	r5,r5,r5
10006030:	117f2e36 	bltu	r2,r5,10005cec <__alt_data_end+0xf8005cec>
10006034:	283f2d26 	beq	r5,zero,10005cec <__alt_data_end+0xf8005cec>
10006038:	1146703a 	and	r3,r2,r5
1000603c:	6009883a 	mov	r4,r12
10006040:	183eef1e 	bne	r3,zero,10005c00 <__alt_data_end+0xf8005c00>
10006044:	294b883a 	add	r5,r5,r5
10006048:	1146703a 	and	r3,r2,r5
1000604c:	21000104 	addi	r4,r4,4
10006050:	183ffc26 	beq	r3,zero,10006044 <__alt_data_end+0xf8006044>
10006054:	003eea06 	br	10005c00 <__alt_data_end+0xf8005c00>
10006058:	00805504 	movi	r2,340
1000605c:	11001336 	bltu	r2,r4,100060ac <_malloc_r+0x6e8>
10006060:	8808d3fa 	srli	r4,r17,15
10006064:	21001dc4 	addi	r4,r4,119
10006068:	210b883a 	add	r5,r4,r4
1000606c:	003e9c06 	br	10005ae0 <__alt_data_end+0xf8005ae0>
10006070:	00840004 	movi	r2,4096
10006074:	003f4d06 	br	10005dac <__alt_data_end+0xf8005dac>
10006078:	00800044 	movi	r2,1
1000607c:	a0800115 	stw	r2,4(r20)
10006080:	a021883a 	mov	r16,r20
10006084:	0007883a 	mov	r3,zero
10006088:	003f7506 	br	10005e60 <__alt_data_end+0xf8005e60>
1000608c:	280bd0ba 	srai	r5,r5,2
10006090:	01800044 	movi	r6,1
10006094:	38800117 	ldw	r2,4(r7)
10006098:	314c983a 	sll	r6,r6,r5
1000609c:	180b883a 	mov	r5,r3
100060a0:	3084b03a 	or	r2,r6,r2
100060a4:	38800115 	stw	r2,4(r7)
100060a8:	003f9d06 	br	10005f20 <__alt_data_end+0xf8005f20>
100060ac:	00815504 	movi	r2,1364
100060b0:	11001336 	bltu	r2,r4,10006100 <_malloc_r+0x73c>
100060b4:	8808d4ba 	srli	r4,r17,18
100060b8:	21001f04 	addi	r4,r4,124
100060bc:	210b883a 	add	r5,r4,r4
100060c0:	003e8706 	br	10005ae0 <__alt_data_end+0xf8005ae0>
100060c4:	bdc00404 	addi	r23,r23,16
100060c8:	003f1d06 	br	10005d40 <__alt_data_end+0xf8005d40>
100060cc:	01401504 	movi	r5,84
100060d0:	28c01c36 	bltu	r5,r3,10006144 <_malloc_r+0x780>
100060d4:	100ad33a 	srli	r5,r2,12
100060d8:	29401b84 	addi	r5,r5,110
100060dc:	294d883a 	add	r6,r5,r5
100060e0:	003f8006 	br	10005ee4 <__alt_data_end+0xf8005ee4>
100060e4:	e103ffcc 	andi	r4,fp,4095
100060e8:	203f241e 	bne	r4,zero,10005d7c <__alt_data_end+0xf8005d7c>
100060ec:	98c00217 	ldw	r3,8(r19)
100060f0:	bd49883a 	add	r4,r23,r21
100060f4:	21000054 	ori	r4,r4,1
100060f8:	19000115 	stw	r4,4(r3)
100060fc:	003f4a06 	br	10005e28 <__alt_data_end+0xf8005e28>
10006100:	01403f04 	movi	r5,252
10006104:	01001f84 	movi	r4,126
10006108:	003e7506 	br	10005ae0 <__alt_data_end+0xf8005ae0>
1000610c:	00c00044 	movi	r3,1
10006110:	002f883a 	mov	r23,zero
10006114:	003f3006 	br	10005dd8 <__alt_data_end+0xf8005dd8>
10006118:	00840074 	movhi	r2,4097
1000611c:	10872404 	addi	r2,r2,7312
10006120:	15000015 	stw	r20,0(r2)
10006124:	003f1b06 	br	10005d94 <__alt_data_end+0xf8005d94>
10006128:	9009883a 	mov	r4,r18
1000612c:	81400204 	addi	r5,r16,8
10006130:	000530c0 	call	1000530c <_free_r>
10006134:	00840074 	movhi	r2,4097
10006138:	108dfb04 	addi	r2,r2,14316
1000613c:	10800017 	ldw	r2,0(r2)
10006140:	003f3906 	br	10005e28 <__alt_data_end+0xf8005e28>
10006144:	01405504 	movi	r5,340
10006148:	28c00436 	bltu	r5,r3,1000615c <_malloc_r+0x798>
1000614c:	100ad3fa 	srli	r5,r2,15
10006150:	29401dc4 	addi	r5,r5,119
10006154:	294d883a 	add	r6,r5,r5
10006158:	003f6206 	br	10005ee4 <__alt_data_end+0xf8005ee4>
1000615c:	01415504 	movi	r5,1364
10006160:	28c00436 	bltu	r5,r3,10006174 <_malloc_r+0x7b0>
10006164:	100ad4ba 	srli	r5,r2,18
10006168:	29401f04 	addi	r5,r5,124
1000616c:	294d883a 	add	r6,r5,r5
10006170:	003f5c06 	br	10005ee4 <__alt_data_end+0xf8005ee4>
10006174:	01803f04 	movi	r6,252
10006178:	01401f84 	movi	r5,126
1000617c:	003f5906 	br	10005ee4 <__alt_data_end+0xf8005ee4>
10006180:	98800117 	ldw	r2,4(r19)
10006184:	003fa906 	br	1000602c <__alt_data_end+0xf800602c>

10006188 <memchr>:
10006188:	208000cc 	andi	r2,r4,3
1000618c:	2811883a 	mov	r8,r5
10006190:	10003526 	beq	r2,zero,10006268 <memchr+0xe0>
10006194:	30bfffc4 	addi	r2,r6,-1
10006198:	30001b26 	beq	r6,zero,10006208 <memchr+0x80>
1000619c:	21800003 	ldbu	r6,0(r4)
100061a0:	28c03fcc 	andi	r3,r5,255
100061a4:	30c01a26 	beq	r6,r3,10006210 <memchr+0x88>
100061a8:	180d883a 	mov	r6,r3
100061ac:	00000406 	br	100061c0 <memchr+0x38>
100061b0:	10001526 	beq	r2,zero,10006208 <memchr+0x80>
100061b4:	20c00003 	ldbu	r3,0(r4)
100061b8:	10bfffc4 	addi	r2,r2,-1
100061bc:	19801426 	beq	r3,r6,10006210 <memchr+0x88>
100061c0:	21000044 	addi	r4,r4,1
100061c4:	20c000cc 	andi	r3,r4,3
100061c8:	183ff91e 	bne	r3,zero,100061b0 <__alt_data_end+0xf80061b0>
100061cc:	02c000c4 	movi	r11,3
100061d0:	58801136 	bltu	r11,r2,10006218 <memchr+0x90>
100061d4:	10000c26 	beq	r2,zero,10006208 <memchr+0x80>
100061d8:	20c00003 	ldbu	r3,0(r4)
100061dc:	29403fcc 	andi	r5,r5,255
100061e0:	19400b26 	beq	r3,r5,10006210 <memchr+0x88>
100061e4:	20c00044 	addi	r3,r4,1
100061e8:	2085883a 	add	r2,r4,r2
100061ec:	41803fcc 	andi	r6,r8,255
100061f0:	00000306 	br	10006200 <memchr+0x78>
100061f4:	18c00044 	addi	r3,r3,1
100061f8:	197fffc3 	ldbu	r5,-1(r3)
100061fc:	29800426 	beq	r5,r6,10006210 <memchr+0x88>
10006200:	1809883a 	mov	r4,r3
10006204:	18bffb1e 	bne	r3,r2,100061f4 <__alt_data_end+0xf80061f4>
10006208:	0005883a 	mov	r2,zero
1000620c:	f800283a 	ret
10006210:	2005883a 	mov	r2,r4
10006214:	f800283a 	ret
10006218:	28c03fcc 	andi	r3,r5,255
1000621c:	180c923a 	slli	r6,r3,8
10006220:	02bfbff4 	movhi	r10,65279
10006224:	52bfbfc4 	addi	r10,r10,-257
10006228:	02602074 	movhi	r9,32897
1000622c:	4a602004 	addi	r9,r9,-32640
10006230:	30c6b03a 	or	r3,r6,r3
10006234:	180c943a 	slli	r6,r3,16
10006238:	30ccb03a 	or	r6,r6,r3
1000623c:	20c00017 	ldw	r3,0(r4)
10006240:	30c6f03a 	xor	r3,r6,r3
10006244:	1a8f883a 	add	r7,r3,r10
10006248:	00c6303a 	nor	r3,zero,r3
1000624c:	38c6703a 	and	r3,r7,r3
10006250:	1a46703a 	and	r3,r3,r9
10006254:	183fdf1e 	bne	r3,zero,100061d4 <__alt_data_end+0xf80061d4>
10006258:	10bfff04 	addi	r2,r2,-4
1000625c:	21000104 	addi	r4,r4,4
10006260:	58bff636 	bltu	r11,r2,1000623c <__alt_data_end+0xf800623c>
10006264:	003fdb06 	br	100061d4 <__alt_data_end+0xf80061d4>
10006268:	3005883a 	mov	r2,r6
1000626c:	003fd706 	br	100061cc <__alt_data_end+0xf80061cc>

10006270 <memcpy>:
10006270:	00c003c4 	movi	r3,15
10006274:	2005883a 	mov	r2,r4
10006278:	1980372e 	bgeu	r3,r6,10006358 <memcpy+0xe8>
1000627c:	2146b03a 	or	r3,r4,r5
10006280:	18c000cc 	andi	r3,r3,3
10006284:	1800371e 	bne	r3,zero,10006364 <memcpy+0xf4>
10006288:	327ffc04 	addi	r9,r6,-16
1000628c:	4812d13a 	srli	r9,r9,4
10006290:	2007883a 	mov	r3,r4
10006294:	280f883a 	mov	r7,r5
10006298:	4808913a 	slli	r4,r9,4
1000629c:	1109883a 	add	r4,r2,r4
100062a0:	21000404 	addi	r4,r4,16
100062a4:	3a000017 	ldw	r8,0(r7)
100062a8:	18c00404 	addi	r3,r3,16
100062ac:	39c00404 	addi	r7,r7,16
100062b0:	1a3ffc15 	stw	r8,-16(r3)
100062b4:	3a3ffd17 	ldw	r8,-12(r7)
100062b8:	1a3ffd15 	stw	r8,-12(r3)
100062bc:	3a3ffe17 	ldw	r8,-8(r7)
100062c0:	1a3ffe15 	stw	r8,-8(r3)
100062c4:	3a3fff17 	ldw	r8,-4(r7)
100062c8:	1a3fff15 	stw	r8,-4(r3)
100062cc:	193ff51e 	bne	r3,r4,100062a4 <__alt_data_end+0xf80062a4>
100062d0:	49000044 	addi	r4,r9,1
100062d4:	2008913a 	slli	r4,r4,4
100062d8:	328003cc 	andi	r10,r6,15
100062dc:	1107883a 	add	r3,r2,r4
100062e0:	290b883a 	add	r5,r5,r4
100062e4:	010000c4 	movi	r4,3
100062e8:	2280212e 	bgeu	r4,r10,10006370 <memcpy+0x100>
100062ec:	52bfff04 	addi	r10,r10,-4
100062f0:	5014d0ba 	srli	r10,r10,2
100062f4:	180f883a 	mov	r7,r3
100062f8:	2811883a 	mov	r8,r5
100062fc:	5289883a 	add	r4,r10,r10
10006300:	2109883a 	add	r4,r4,r4
10006304:	21000104 	addi	r4,r4,4
10006308:	1909883a 	add	r4,r3,r4
1000630c:	42400017 	ldw	r9,0(r8)
10006310:	39c00104 	addi	r7,r7,4
10006314:	42000104 	addi	r8,r8,4
10006318:	3a7fff15 	stw	r9,-4(r7)
1000631c:	393ffb1e 	bne	r7,r4,1000630c <__alt_data_end+0xf800630c>
10006320:	51000044 	addi	r4,r10,1
10006324:	2109883a 	add	r4,r4,r4
10006328:	2109883a 	add	r4,r4,r4
1000632c:	318000cc 	andi	r6,r6,3
10006330:	1907883a 	add	r3,r3,r4
10006334:	290b883a 	add	r5,r5,r4
10006338:	30000c26 	beq	r6,zero,1000636c <memcpy+0xfc>
1000633c:	298d883a 	add	r6,r5,r6
10006340:	29c00003 	ldbu	r7,0(r5)
10006344:	18c00044 	addi	r3,r3,1
10006348:	29400044 	addi	r5,r5,1
1000634c:	19ffffc5 	stb	r7,-1(r3)
10006350:	29bffb1e 	bne	r5,r6,10006340 <__alt_data_end+0xf8006340>
10006354:	f800283a 	ret
10006358:	2007883a 	mov	r3,r4
1000635c:	303ff71e 	bne	r6,zero,1000633c <__alt_data_end+0xf800633c>
10006360:	00000206 	br	1000636c <memcpy+0xfc>
10006364:	2007883a 	mov	r3,r4
10006368:	003ff406 	br	1000633c <__alt_data_end+0xf800633c>
1000636c:	f800283a 	ret
10006370:	500d883a 	mov	r6,r10
10006374:	303ff11e 	bne	r6,zero,1000633c <__alt_data_end+0xf800633c>
10006378:	003ffc06 	br	1000636c <__alt_data_end+0xf800636c>

1000637c <memset>:
1000637c:	20c000cc 	andi	r3,r4,3
10006380:	2005883a 	mov	r2,r4
10006384:	18003f26 	beq	r3,zero,10006484 <memset+0x108>
10006388:	31ffffc4 	addi	r7,r6,-1
1000638c:	30003b26 	beq	r6,zero,1000647c <memset+0x100>
10006390:	2813883a 	mov	r9,r5
10006394:	200d883a 	mov	r6,r4
10006398:	2007883a 	mov	r3,r4
1000639c:	00000406 	br	100063b0 <memset+0x34>
100063a0:	3a3fffc4 	addi	r8,r7,-1
100063a4:	31800044 	addi	r6,r6,1
100063a8:	38003426 	beq	r7,zero,1000647c <memset+0x100>
100063ac:	400f883a 	mov	r7,r8
100063b0:	18c00044 	addi	r3,r3,1
100063b4:	32400005 	stb	r9,0(r6)
100063b8:	1a0000cc 	andi	r8,r3,3
100063bc:	403ff81e 	bne	r8,zero,100063a0 <__alt_data_end+0xf80063a0>
100063c0:	010000c4 	movi	r4,3
100063c4:	21c0282e 	bgeu	r4,r7,10006468 <memset+0xec>
100063c8:	29003fcc 	andi	r4,r5,255
100063cc:	2010923a 	slli	r8,r4,8
100063d0:	4108b03a 	or	r4,r8,r4
100063d4:	2010943a 	slli	r8,r4,16
100063d8:	4110b03a 	or	r8,r8,r4
100063dc:	010003c4 	movi	r4,15
100063e0:	21c0122e 	bgeu	r4,r7,1000642c <memset+0xb0>
100063e4:	3a7ffc04 	addi	r9,r7,-16
100063e8:	4812d13a 	srli	r9,r9,4
100063ec:	19000404 	addi	r4,r3,16
100063f0:	180d883a 	mov	r6,r3
100063f4:	4814913a 	slli	r10,r9,4
100063f8:	2289883a 	add	r4,r4,r10
100063fc:	32000015 	stw	r8,0(r6)
10006400:	32000115 	stw	r8,4(r6)
10006404:	32000215 	stw	r8,8(r6)
10006408:	32000315 	stw	r8,12(r6)
1000640c:	31800404 	addi	r6,r6,16
10006410:	313ffa1e 	bne	r6,r4,100063fc <__alt_data_end+0xf80063fc>
10006414:	4a400044 	addi	r9,r9,1
10006418:	4812913a 	slli	r9,r9,4
1000641c:	39c003cc 	andi	r7,r7,15
10006420:	010000c4 	movi	r4,3
10006424:	1a47883a 	add	r3,r3,r9
10006428:	21c00f2e 	bgeu	r4,r7,10006468 <memset+0xec>
1000642c:	3a7fff04 	addi	r9,r7,-4
10006430:	4812d0ba 	srli	r9,r9,2
10006434:	19000104 	addi	r4,r3,4
10006438:	180d883a 	mov	r6,r3
1000643c:	4a55883a 	add	r10,r9,r9
10006440:	5295883a 	add	r10,r10,r10
10006444:	2289883a 	add	r4,r4,r10
10006448:	32000015 	stw	r8,0(r6)
1000644c:	31800104 	addi	r6,r6,4
10006450:	313ffd1e 	bne	r6,r4,10006448 <__alt_data_end+0xf8006448>
10006454:	4a400044 	addi	r9,r9,1
10006458:	4a53883a 	add	r9,r9,r9
1000645c:	4a53883a 	add	r9,r9,r9
10006460:	1a47883a 	add	r3,r3,r9
10006464:	39c000cc 	andi	r7,r7,3
10006468:	38000526 	beq	r7,zero,10006480 <memset+0x104>
1000646c:	19cf883a 	add	r7,r3,r7
10006470:	19400005 	stb	r5,0(r3)
10006474:	18c00044 	addi	r3,r3,1
10006478:	19fffd1e 	bne	r3,r7,10006470 <__alt_data_end+0xf8006470>
1000647c:	f800283a 	ret
10006480:	f800283a 	ret
10006484:	2007883a 	mov	r3,r4
10006488:	300f883a 	mov	r7,r6
1000648c:	003fcc06 	br	100063c0 <__alt_data_end+0xf80063c0>

10006490 <_Balloc>:
10006490:	20801317 	ldw	r2,76(r4)
10006494:	defffc04 	addi	sp,sp,-16
10006498:	dc400115 	stw	r17,4(sp)
1000649c:	dc000015 	stw	r16,0(sp)
100064a0:	dfc00315 	stw	ra,12(sp)
100064a4:	dc800215 	stw	r18,8(sp)
100064a8:	2023883a 	mov	r17,r4
100064ac:	2821883a 	mov	r16,r5
100064b0:	10000f26 	beq	r2,zero,100064f0 <_Balloc+0x60>
100064b4:	8407883a 	add	r3,r16,r16
100064b8:	18c7883a 	add	r3,r3,r3
100064bc:	10c7883a 	add	r3,r2,r3
100064c0:	18800017 	ldw	r2,0(r3)
100064c4:	10001126 	beq	r2,zero,1000650c <_Balloc+0x7c>
100064c8:	11000017 	ldw	r4,0(r2)
100064cc:	19000015 	stw	r4,0(r3)
100064d0:	10000415 	stw	zero,16(r2)
100064d4:	10000315 	stw	zero,12(r2)
100064d8:	dfc00317 	ldw	ra,12(sp)
100064dc:	dc800217 	ldw	r18,8(sp)
100064e0:	dc400117 	ldw	r17,4(sp)
100064e4:	dc000017 	ldw	r16,0(sp)
100064e8:	dec00404 	addi	sp,sp,16
100064ec:	f800283a 	ret
100064f0:	01400104 	movi	r5,4
100064f4:	01800844 	movi	r6,33
100064f8:	0008e400 	call	10008e40 <_calloc_r>
100064fc:	88801315 	stw	r2,76(r17)
10006500:	103fec1e 	bne	r2,zero,100064b4 <__alt_data_end+0xf80064b4>
10006504:	0005883a 	mov	r2,zero
10006508:	003ff306 	br	100064d8 <__alt_data_end+0xf80064d8>
1000650c:	01400044 	movi	r5,1
10006510:	2c24983a 	sll	r18,r5,r16
10006514:	8809883a 	mov	r4,r17
10006518:	91800144 	addi	r6,r18,5
1000651c:	318d883a 	add	r6,r6,r6
10006520:	318d883a 	add	r6,r6,r6
10006524:	0008e400 	call	10008e40 <_calloc_r>
10006528:	103ff626 	beq	r2,zero,10006504 <__alt_data_end+0xf8006504>
1000652c:	14000115 	stw	r16,4(r2)
10006530:	14800215 	stw	r18,8(r2)
10006534:	003fe606 	br	100064d0 <__alt_data_end+0xf80064d0>

10006538 <_Bfree>:
10006538:	28000826 	beq	r5,zero,1000655c <_Bfree+0x24>
1000653c:	28c00117 	ldw	r3,4(r5)
10006540:	20801317 	ldw	r2,76(r4)
10006544:	18c7883a 	add	r3,r3,r3
10006548:	18c7883a 	add	r3,r3,r3
1000654c:	10c5883a 	add	r2,r2,r3
10006550:	10c00017 	ldw	r3,0(r2)
10006554:	28c00015 	stw	r3,0(r5)
10006558:	11400015 	stw	r5,0(r2)
1000655c:	f800283a 	ret

10006560 <__multadd>:
10006560:	defff604 	addi	sp,sp,-40
10006564:	dd400515 	stw	r21,20(sp)
10006568:	2d400417 	ldw	r21,16(r5)
1000656c:	df000815 	stw	fp,32(sp)
10006570:	ddc00715 	stw	r23,28(sp)
10006574:	dd800615 	stw	r22,24(sp)
10006578:	dd000415 	stw	r20,16(sp)
1000657c:	dc400115 	stw	r17,4(sp)
10006580:	dc000015 	stw	r16,0(sp)
10006584:	dfc00915 	stw	ra,36(sp)
10006588:	dcc00315 	stw	r19,12(sp)
1000658c:	dc800215 	stw	r18,8(sp)
10006590:	282d883a 	mov	r22,r5
10006594:	202f883a 	mov	r23,r4
10006598:	3029883a 	mov	r20,r6
1000659c:	3839883a 	mov	fp,r7
100065a0:	2c000504 	addi	r16,r5,20
100065a4:	0023883a 	mov	r17,zero
100065a8:	84c00017 	ldw	r19,0(r16)
100065ac:	a00b883a 	mov	r5,r20
100065b0:	8c400044 	addi	r17,r17,1
100065b4:	993fffcc 	andi	r4,r19,65535
100065b8:	000b0780 	call	1000b078 <__mulsi3>
100065bc:	1725883a 	add	r18,r2,fp
100065c0:	9808d43a 	srli	r4,r19,16
100065c4:	9026d43a 	srli	r19,r18,16
100065c8:	a00b883a 	mov	r5,r20
100065cc:	000b0780 	call	1000b078 <__mulsi3>
100065d0:	988f883a 	add	r7,r19,r2
100065d4:	3804943a 	slli	r2,r7,16
100065d8:	94bfffcc 	andi	r18,r18,65535
100065dc:	3838d43a 	srli	fp,r7,16
100065e0:	14a5883a 	add	r18,r2,r18
100065e4:	84800015 	stw	r18,0(r16)
100065e8:	84000104 	addi	r16,r16,4
100065ec:	8d7fee16 	blt	r17,r21,100065a8 <__alt_data_end+0xf80065a8>
100065f0:	e0000926 	beq	fp,zero,10006618 <__multadd+0xb8>
100065f4:	b0800217 	ldw	r2,8(r22)
100065f8:	a880140e 	bge	r21,r2,1000664c <__multadd+0xec>
100065fc:	a8800144 	addi	r2,r21,5
10006600:	1085883a 	add	r2,r2,r2
10006604:	1085883a 	add	r2,r2,r2
10006608:	b085883a 	add	r2,r22,r2
1000660c:	17000015 	stw	fp,0(r2)
10006610:	ad400044 	addi	r21,r21,1
10006614:	b5400415 	stw	r21,16(r22)
10006618:	b005883a 	mov	r2,r22
1000661c:	dfc00917 	ldw	ra,36(sp)
10006620:	df000817 	ldw	fp,32(sp)
10006624:	ddc00717 	ldw	r23,28(sp)
10006628:	dd800617 	ldw	r22,24(sp)
1000662c:	dd400517 	ldw	r21,20(sp)
10006630:	dd000417 	ldw	r20,16(sp)
10006634:	dcc00317 	ldw	r19,12(sp)
10006638:	dc800217 	ldw	r18,8(sp)
1000663c:	dc400117 	ldw	r17,4(sp)
10006640:	dc000017 	ldw	r16,0(sp)
10006644:	dec00a04 	addi	sp,sp,40
10006648:	f800283a 	ret
1000664c:	b1400117 	ldw	r5,4(r22)
10006650:	b809883a 	mov	r4,r23
10006654:	29400044 	addi	r5,r5,1
10006658:	00064900 	call	10006490 <_Balloc>
1000665c:	b1800417 	ldw	r6,16(r22)
10006660:	b1400304 	addi	r5,r22,12
10006664:	11000304 	addi	r4,r2,12
10006668:	31800084 	addi	r6,r6,2
1000666c:	318d883a 	add	r6,r6,r6
10006670:	318d883a 	add	r6,r6,r6
10006674:	1021883a 	mov	r16,r2
10006678:	00062700 	call	10006270 <memcpy>
1000667c:	b0c00117 	ldw	r3,4(r22)
10006680:	b8801317 	ldw	r2,76(r23)
10006684:	18c7883a 	add	r3,r3,r3
10006688:	18c7883a 	add	r3,r3,r3
1000668c:	10c5883a 	add	r2,r2,r3
10006690:	10c00017 	ldw	r3,0(r2)
10006694:	b0c00015 	stw	r3,0(r22)
10006698:	15800015 	stw	r22,0(r2)
1000669c:	802d883a 	mov	r22,r16
100066a0:	003fd606 	br	100065fc <__alt_data_end+0xf80065fc>

100066a4 <__s2b>:
100066a4:	defff904 	addi	sp,sp,-28
100066a8:	dd000415 	stw	r20,16(sp)
100066ac:	dc400115 	stw	r17,4(sp)
100066b0:	2829883a 	mov	r20,r5
100066b4:	2023883a 	mov	r17,r4
100066b8:	01400244 	movi	r5,9
100066bc:	39000204 	addi	r4,r7,8
100066c0:	dcc00315 	stw	r19,12(sp)
100066c4:	dc800215 	stw	r18,8(sp)
100066c8:	dfc00615 	stw	ra,24(sp)
100066cc:	dd400515 	stw	r21,20(sp)
100066d0:	dc000015 	stw	r16,0(sp)
100066d4:	3827883a 	mov	r19,r7
100066d8:	3025883a 	mov	r18,r6
100066dc:	000afd40 	call	1000afd4 <__divsi3>
100066e0:	00c00044 	movi	r3,1
100066e4:	000b883a 	mov	r5,zero
100066e8:	1880030e 	bge	r3,r2,100066f8 <__s2b+0x54>
100066ec:	18c7883a 	add	r3,r3,r3
100066f0:	29400044 	addi	r5,r5,1
100066f4:	18bffd16 	blt	r3,r2,100066ec <__alt_data_end+0xf80066ec>
100066f8:	8809883a 	mov	r4,r17
100066fc:	00064900 	call	10006490 <_Balloc>
10006700:	d8c00717 	ldw	r3,28(sp)
10006704:	10c00515 	stw	r3,20(r2)
10006708:	00c00044 	movi	r3,1
1000670c:	10c00415 	stw	r3,16(r2)
10006710:	00c00244 	movi	r3,9
10006714:	1c80210e 	bge	r3,r18,1000679c <__s2b+0xf8>
10006718:	a0eb883a 	add	r21,r20,r3
1000671c:	a821883a 	mov	r16,r21
10006720:	a4a9883a 	add	r20,r20,r18
10006724:	81c00007 	ldb	r7,0(r16)
10006728:	8809883a 	mov	r4,r17
1000672c:	84000044 	addi	r16,r16,1
10006730:	100b883a 	mov	r5,r2
10006734:	01800284 	movi	r6,10
10006738:	39fff404 	addi	r7,r7,-48
1000673c:	00065600 	call	10006560 <__multadd>
10006740:	853ff81e 	bne	r16,r20,10006724 <__alt_data_end+0xf8006724>
10006744:	aca1883a 	add	r16,r21,r18
10006748:	843ffe04 	addi	r16,r16,-8
1000674c:	94c00a0e 	bge	r18,r19,10006778 <__s2b+0xd4>
10006750:	84e7883a 	add	r19,r16,r19
10006754:	9ca5c83a 	sub	r18,r19,r18
10006758:	81c00007 	ldb	r7,0(r16)
1000675c:	8809883a 	mov	r4,r17
10006760:	84000044 	addi	r16,r16,1
10006764:	100b883a 	mov	r5,r2
10006768:	01800284 	movi	r6,10
1000676c:	39fff404 	addi	r7,r7,-48
10006770:	00065600 	call	10006560 <__multadd>
10006774:	84bff81e 	bne	r16,r18,10006758 <__alt_data_end+0xf8006758>
10006778:	dfc00617 	ldw	ra,24(sp)
1000677c:	dd400517 	ldw	r21,20(sp)
10006780:	dd000417 	ldw	r20,16(sp)
10006784:	dcc00317 	ldw	r19,12(sp)
10006788:	dc800217 	ldw	r18,8(sp)
1000678c:	dc400117 	ldw	r17,4(sp)
10006790:	dc000017 	ldw	r16,0(sp)
10006794:	dec00704 	addi	sp,sp,28
10006798:	f800283a 	ret
1000679c:	a4000284 	addi	r16,r20,10
100067a0:	1825883a 	mov	r18,r3
100067a4:	003fe906 	br	1000674c <__alt_data_end+0xf800674c>

100067a8 <__hi0bits>:
100067a8:	20bfffec 	andhi	r2,r4,65535
100067ac:	1000141e 	bne	r2,zero,10006800 <__hi0bits+0x58>
100067b0:	2008943a 	slli	r4,r4,16
100067b4:	00800404 	movi	r2,16
100067b8:	20ffc02c 	andhi	r3,r4,65280
100067bc:	1800021e 	bne	r3,zero,100067c8 <__hi0bits+0x20>
100067c0:	2008923a 	slli	r4,r4,8
100067c4:	10800204 	addi	r2,r2,8
100067c8:	20fc002c 	andhi	r3,r4,61440
100067cc:	1800021e 	bne	r3,zero,100067d8 <__hi0bits+0x30>
100067d0:	2008913a 	slli	r4,r4,4
100067d4:	10800104 	addi	r2,r2,4
100067d8:	20f0002c 	andhi	r3,r4,49152
100067dc:	1800031e 	bne	r3,zero,100067ec <__hi0bits+0x44>
100067e0:	2109883a 	add	r4,r4,r4
100067e4:	10800084 	addi	r2,r2,2
100067e8:	2109883a 	add	r4,r4,r4
100067ec:	20000316 	blt	r4,zero,100067fc <__hi0bits+0x54>
100067f0:	2110002c 	andhi	r4,r4,16384
100067f4:	2000041e 	bne	r4,zero,10006808 <__hi0bits+0x60>
100067f8:	00800804 	movi	r2,32
100067fc:	f800283a 	ret
10006800:	0005883a 	mov	r2,zero
10006804:	003fec06 	br	100067b8 <__alt_data_end+0xf80067b8>
10006808:	10800044 	addi	r2,r2,1
1000680c:	f800283a 	ret

10006810 <__lo0bits>:
10006810:	20c00017 	ldw	r3,0(r4)
10006814:	188001cc 	andi	r2,r3,7
10006818:	10000826 	beq	r2,zero,1000683c <__lo0bits+0x2c>
1000681c:	1880004c 	andi	r2,r3,1
10006820:	1000211e 	bne	r2,zero,100068a8 <__lo0bits+0x98>
10006824:	1880008c 	andi	r2,r3,2
10006828:	1000211e 	bne	r2,zero,100068b0 <__lo0bits+0xa0>
1000682c:	1806d0ba 	srli	r3,r3,2
10006830:	00800084 	movi	r2,2
10006834:	20c00015 	stw	r3,0(r4)
10006838:	f800283a 	ret
1000683c:	18bfffcc 	andi	r2,r3,65535
10006840:	10001326 	beq	r2,zero,10006890 <__lo0bits+0x80>
10006844:	0005883a 	mov	r2,zero
10006848:	19403fcc 	andi	r5,r3,255
1000684c:	2800021e 	bne	r5,zero,10006858 <__lo0bits+0x48>
10006850:	1806d23a 	srli	r3,r3,8
10006854:	10800204 	addi	r2,r2,8
10006858:	194003cc 	andi	r5,r3,15
1000685c:	2800021e 	bne	r5,zero,10006868 <__lo0bits+0x58>
10006860:	1806d13a 	srli	r3,r3,4
10006864:	10800104 	addi	r2,r2,4
10006868:	194000cc 	andi	r5,r3,3
1000686c:	2800021e 	bne	r5,zero,10006878 <__lo0bits+0x68>
10006870:	1806d0ba 	srli	r3,r3,2
10006874:	10800084 	addi	r2,r2,2
10006878:	1940004c 	andi	r5,r3,1
1000687c:	2800081e 	bne	r5,zero,100068a0 <__lo0bits+0x90>
10006880:	1806d07a 	srli	r3,r3,1
10006884:	1800051e 	bne	r3,zero,1000689c <__lo0bits+0x8c>
10006888:	00800804 	movi	r2,32
1000688c:	f800283a 	ret
10006890:	1806d43a 	srli	r3,r3,16
10006894:	00800404 	movi	r2,16
10006898:	003feb06 	br	10006848 <__alt_data_end+0xf8006848>
1000689c:	10800044 	addi	r2,r2,1
100068a0:	20c00015 	stw	r3,0(r4)
100068a4:	f800283a 	ret
100068a8:	0005883a 	mov	r2,zero
100068ac:	f800283a 	ret
100068b0:	1806d07a 	srli	r3,r3,1
100068b4:	00800044 	movi	r2,1
100068b8:	20c00015 	stw	r3,0(r4)
100068bc:	f800283a 	ret

100068c0 <__i2b>:
100068c0:	defffd04 	addi	sp,sp,-12
100068c4:	dc000015 	stw	r16,0(sp)
100068c8:	04000044 	movi	r16,1
100068cc:	dc400115 	stw	r17,4(sp)
100068d0:	2823883a 	mov	r17,r5
100068d4:	800b883a 	mov	r5,r16
100068d8:	dfc00215 	stw	ra,8(sp)
100068dc:	00064900 	call	10006490 <_Balloc>
100068e0:	14400515 	stw	r17,20(r2)
100068e4:	14000415 	stw	r16,16(r2)
100068e8:	dfc00217 	ldw	ra,8(sp)
100068ec:	dc400117 	ldw	r17,4(sp)
100068f0:	dc000017 	ldw	r16,0(sp)
100068f4:	dec00304 	addi	sp,sp,12
100068f8:	f800283a 	ret

100068fc <__multiply>:
100068fc:	defff004 	addi	sp,sp,-64
10006900:	dc400715 	stw	r17,28(sp)
10006904:	dc000615 	stw	r16,24(sp)
10006908:	34400417 	ldw	r17,16(r6)
1000690c:	2c000417 	ldw	r16,16(r5)
10006910:	df000e15 	stw	fp,56(sp)
10006914:	dd000a15 	stw	r20,40(sp)
10006918:	dfc00f15 	stw	ra,60(sp)
1000691c:	ddc00d15 	stw	r23,52(sp)
10006920:	dd800c15 	stw	r22,48(sp)
10006924:	dd400b15 	stw	r21,44(sp)
10006928:	dcc00915 	stw	r19,36(sp)
1000692c:	dc800815 	stw	r18,32(sp)
10006930:	2839883a 	mov	fp,r5
10006934:	3029883a 	mov	r20,r6
10006938:	8440050e 	bge	r16,r17,10006950 <__multiply+0x54>
1000693c:	8007883a 	mov	r3,r16
10006940:	3039883a 	mov	fp,r6
10006944:	8821883a 	mov	r16,r17
10006948:	2829883a 	mov	r20,r5
1000694c:	1823883a 	mov	r17,r3
10006950:	e0800217 	ldw	r2,8(fp)
10006954:	8447883a 	add	r3,r16,r17
10006958:	d8c00115 	stw	r3,4(sp)
1000695c:	e1400117 	ldw	r5,4(fp)
10006960:	10c0010e 	bge	r2,r3,10006968 <__multiply+0x6c>
10006964:	29400044 	addi	r5,r5,1
10006968:	00064900 	call	10006490 <_Balloc>
1000696c:	d8c00117 	ldw	r3,4(sp)
10006970:	d8800515 	stw	r2,20(sp)
10006974:	18ef883a 	add	r23,r3,r3
10006978:	bdef883a 	add	r23,r23,r23
1000697c:	10c00504 	addi	r3,r2,20
10006980:	1def883a 	add	r23,r3,r23
10006984:	d8c00015 	stw	r3,0(sp)
10006988:	ddc00215 	stw	r23,8(sp)
1000698c:	1805883a 	mov	r2,r3
10006990:	1dc0042e 	bgeu	r3,r23,100069a4 <__multiply+0xa8>
10006994:	d8c00217 	ldw	r3,8(sp)
10006998:	10000015 	stw	zero,0(r2)
1000699c:	10800104 	addi	r2,r2,4
100069a0:	10fffc36 	bltu	r2,r3,10006994 <__alt_data_end+0xf8006994>
100069a4:	8c63883a 	add	r17,r17,r17
100069a8:	a5000504 	addi	r20,r20,20
100069ac:	8c63883a 	add	r17,r17,r17
100069b0:	e7000504 	addi	fp,fp,20
100069b4:	8421883a 	add	r16,r16,r16
100069b8:	a463883a 	add	r17,r20,r17
100069bc:	8421883a 	add	r16,r16,r16
100069c0:	df000315 	stw	fp,12(sp)
100069c4:	dc400415 	stw	r17,16(sp)
100069c8:	e425883a 	add	r18,fp,r16
100069cc:	a440482e 	bgeu	r20,r17,10006af0 <__multiply+0x1f4>
100069d0:	a4000017 	ldw	r16,0(r20)
100069d4:	847fffcc 	andi	r17,r16,65535
100069d8:	88001d26 	beq	r17,zero,10006a50 <__multiply+0x154>
100069dc:	dc000017 	ldw	r16,0(sp)
100069e0:	dcc00317 	ldw	r19,12(sp)
100069e4:	002b883a 	mov	r21,zero
100069e8:	9dc00017 	ldw	r23,0(r19)
100069ec:	85800017 	ldw	r22,0(r16)
100069f0:	880b883a 	mov	r5,r17
100069f4:	b93fffcc 	andi	r4,r23,65535
100069f8:	000b0780 	call	1000b078 <__mulsi3>
100069fc:	b808d43a 	srli	r4,r23,16
10006a00:	b0ffffcc 	andi	r3,r22,65535
10006a04:	1885883a 	add	r2,r3,r2
10006a08:	880b883a 	mov	r5,r17
10006a0c:	156b883a 	add	r21,r2,r21
10006a10:	b02cd43a 	srli	r22,r22,16
10006a14:	000b0780 	call	1000b078 <__mulsi3>
10006a18:	a808d43a 	srli	r4,r21,16
10006a1c:	b085883a 	add	r2,r22,r2
10006a20:	a8ffffcc 	andi	r3,r21,65535
10006a24:	110d883a 	add	r6,r2,r4
10006a28:	3004943a 	slli	r2,r6,16
10006a2c:	9cc00104 	addi	r19,r19,4
10006a30:	8009883a 	mov	r4,r16
10006a34:	10c6b03a 	or	r3,r2,r3
10006a38:	80c00015 	stw	r3,0(r16)
10006a3c:	302ad43a 	srli	r21,r6,16
10006a40:	84000104 	addi	r16,r16,4
10006a44:	9cbfe836 	bltu	r19,r18,100069e8 <__alt_data_end+0xf80069e8>
10006a48:	25400115 	stw	r21,4(r4)
10006a4c:	a4000017 	ldw	r16,0(r20)
10006a50:	8020d43a 	srli	r16,r16,16
10006a54:	80002026 	beq	r16,zero,10006ad8 <__multiply+0x1dc>
10006a58:	d8c00017 	ldw	r3,0(sp)
10006a5c:	dd400317 	ldw	r21,12(sp)
10006a60:	002f883a 	mov	r23,zero
10006a64:	1f000017 	ldw	fp,0(r3)
10006a68:	182d883a 	mov	r22,r3
10006a6c:	e023883a 	mov	r17,fp
10006a70:	a900000b 	ldhu	r4,0(r21)
10006a74:	8822d43a 	srli	r17,r17,16
10006a78:	800b883a 	mov	r5,r16
10006a7c:	000b0780 	call	1000b078 <__mulsi3>
10006a80:	1445883a 	add	r2,r2,r17
10006a84:	15ef883a 	add	r23,r2,r23
10006a88:	b804943a 	slli	r2,r23,16
10006a8c:	e1ffffcc 	andi	r7,fp,65535
10006a90:	ad400104 	addi	r21,r21,4
10006a94:	11ceb03a 	or	r7,r2,r7
10006a98:	b1c00015 	stw	r7,0(r22)
10006a9c:	a93fff17 	ldw	r4,-4(r21)
10006aa0:	b7000117 	ldw	fp,4(r22)
10006aa4:	800b883a 	mov	r5,r16
10006aa8:	2008d43a 	srli	r4,r4,16
10006aac:	e023883a 	mov	r17,fp
10006ab0:	b027883a 	mov	r19,r22
10006ab4:	000b0780 	call	1000b078 <__mulsi3>
10006ab8:	b812d43a 	srli	r9,r23,16
10006abc:	e23fffcc 	andi	r8,fp,65535
10006ac0:	1205883a 	add	r2,r2,r8
10006ac4:	1279883a 	add	fp,r2,r9
10006ac8:	b5800104 	addi	r22,r22,4
10006acc:	e02ed43a 	srli	r23,fp,16
10006ad0:	acbfe736 	bltu	r21,r18,10006a70 <__alt_data_end+0xf8006a70>
10006ad4:	9f000115 	stw	fp,4(r19)
10006ad8:	d8c00017 	ldw	r3,0(sp)
10006adc:	a5000104 	addi	r20,r20,4
10006ae0:	18c00104 	addi	r3,r3,4
10006ae4:	d8c00015 	stw	r3,0(sp)
10006ae8:	d8c00417 	ldw	r3,16(sp)
10006aec:	a0ffb836 	bltu	r20,r3,100069d0 <__alt_data_end+0xf80069d0>
10006af0:	d8c00117 	ldw	r3,4(sp)
10006af4:	00c00c0e 	bge	zero,r3,10006b28 <__multiply+0x22c>
10006af8:	d8c00217 	ldw	r3,8(sp)
10006afc:	18bfff17 	ldw	r2,-4(r3)
10006b00:	1dffff04 	addi	r23,r3,-4
10006b04:	10000326 	beq	r2,zero,10006b14 <__multiply+0x218>
10006b08:	00000706 	br	10006b28 <__multiply+0x22c>
10006b0c:	b8800017 	ldw	r2,0(r23)
10006b10:	1000051e 	bne	r2,zero,10006b28 <__multiply+0x22c>
10006b14:	d8c00117 	ldw	r3,4(sp)
10006b18:	bdffff04 	addi	r23,r23,-4
10006b1c:	18ffffc4 	addi	r3,r3,-1
10006b20:	d8c00115 	stw	r3,4(sp)
10006b24:	183ff91e 	bne	r3,zero,10006b0c <__alt_data_end+0xf8006b0c>
10006b28:	d8c00517 	ldw	r3,20(sp)
10006b2c:	d9000117 	ldw	r4,4(sp)
10006b30:	1805883a 	mov	r2,r3
10006b34:	19000415 	stw	r4,16(r3)
10006b38:	dfc00f17 	ldw	ra,60(sp)
10006b3c:	df000e17 	ldw	fp,56(sp)
10006b40:	ddc00d17 	ldw	r23,52(sp)
10006b44:	dd800c17 	ldw	r22,48(sp)
10006b48:	dd400b17 	ldw	r21,44(sp)
10006b4c:	dd000a17 	ldw	r20,40(sp)
10006b50:	dcc00917 	ldw	r19,36(sp)
10006b54:	dc800817 	ldw	r18,32(sp)
10006b58:	dc400717 	ldw	r17,28(sp)
10006b5c:	dc000617 	ldw	r16,24(sp)
10006b60:	dec01004 	addi	sp,sp,64
10006b64:	f800283a 	ret

10006b68 <__pow5mult>:
10006b68:	defffa04 	addi	sp,sp,-24
10006b6c:	dcc00315 	stw	r19,12(sp)
10006b70:	dc800215 	stw	r18,8(sp)
10006b74:	dc000015 	stw	r16,0(sp)
10006b78:	dfc00515 	stw	ra,20(sp)
10006b7c:	dd000415 	stw	r20,16(sp)
10006b80:	dc400115 	stw	r17,4(sp)
10006b84:	308000cc 	andi	r2,r6,3
10006b88:	3021883a 	mov	r16,r6
10006b8c:	2027883a 	mov	r19,r4
10006b90:	2825883a 	mov	r18,r5
10006b94:	1000301e 	bne	r2,zero,10006c58 <__pow5mult+0xf0>
10006b98:	8021d0ba 	srai	r16,r16,2
10006b9c:	80001b26 	beq	r16,zero,10006c0c <__pow5mult+0xa4>
10006ba0:	9c401217 	ldw	r17,72(r19)
10006ba4:	88003726 	beq	r17,zero,10006c84 <__pow5mult+0x11c>
10006ba8:	80c0004c 	andi	r3,r16,1
10006bac:	1800071e 	bne	r3,zero,10006bcc <__pow5mult+0x64>
10006bb0:	8021d07a 	srai	r16,r16,1
10006bb4:	80001526 	beq	r16,zero,10006c0c <__pow5mult+0xa4>
10006bb8:	88800017 	ldw	r2,0(r17)
10006bbc:	10001c26 	beq	r2,zero,10006c30 <__pow5mult+0xc8>
10006bc0:	1023883a 	mov	r17,r2
10006bc4:	80c0004c 	andi	r3,r16,1
10006bc8:	183ff926 	beq	r3,zero,10006bb0 <__alt_data_end+0xf8006bb0>
10006bcc:	900b883a 	mov	r5,r18
10006bd0:	880d883a 	mov	r6,r17
10006bd4:	9809883a 	mov	r4,r19
10006bd8:	00068fc0 	call	100068fc <__multiply>
10006bdc:	90001c26 	beq	r18,zero,10006c50 <__pow5mult+0xe8>
10006be0:	91000117 	ldw	r4,4(r18)
10006be4:	98c01317 	ldw	r3,76(r19)
10006be8:	8021d07a 	srai	r16,r16,1
10006bec:	2109883a 	add	r4,r4,r4
10006bf0:	2109883a 	add	r4,r4,r4
10006bf4:	1907883a 	add	r3,r3,r4
10006bf8:	19000017 	ldw	r4,0(r3)
10006bfc:	91000015 	stw	r4,0(r18)
10006c00:	1c800015 	stw	r18,0(r3)
10006c04:	1025883a 	mov	r18,r2
10006c08:	803feb1e 	bne	r16,zero,10006bb8 <__alt_data_end+0xf8006bb8>
10006c0c:	9005883a 	mov	r2,r18
10006c10:	dfc00517 	ldw	ra,20(sp)
10006c14:	dd000417 	ldw	r20,16(sp)
10006c18:	dcc00317 	ldw	r19,12(sp)
10006c1c:	dc800217 	ldw	r18,8(sp)
10006c20:	dc400117 	ldw	r17,4(sp)
10006c24:	dc000017 	ldw	r16,0(sp)
10006c28:	dec00604 	addi	sp,sp,24
10006c2c:	f800283a 	ret
10006c30:	880b883a 	mov	r5,r17
10006c34:	880d883a 	mov	r6,r17
10006c38:	9809883a 	mov	r4,r19
10006c3c:	00068fc0 	call	100068fc <__multiply>
10006c40:	88800015 	stw	r2,0(r17)
10006c44:	10000015 	stw	zero,0(r2)
10006c48:	1023883a 	mov	r17,r2
10006c4c:	003fdd06 	br	10006bc4 <__alt_data_end+0xf8006bc4>
10006c50:	1025883a 	mov	r18,r2
10006c54:	003fd606 	br	10006bb0 <__alt_data_end+0xf8006bb0>
10006c58:	10bfffc4 	addi	r2,r2,-1
10006c5c:	1085883a 	add	r2,r2,r2
10006c60:	00c40074 	movhi	r3,4097
10006c64:	18ffd604 	addi	r3,r3,-168
10006c68:	1085883a 	add	r2,r2,r2
10006c6c:	1885883a 	add	r2,r3,r2
10006c70:	11800017 	ldw	r6,0(r2)
10006c74:	000f883a 	mov	r7,zero
10006c78:	00065600 	call	10006560 <__multadd>
10006c7c:	1025883a 	mov	r18,r2
10006c80:	003fc506 	br	10006b98 <__alt_data_end+0xf8006b98>
10006c84:	05000044 	movi	r20,1
10006c88:	9809883a 	mov	r4,r19
10006c8c:	a00b883a 	mov	r5,r20
10006c90:	00064900 	call	10006490 <_Balloc>
10006c94:	1023883a 	mov	r17,r2
10006c98:	00809c44 	movi	r2,625
10006c9c:	88800515 	stw	r2,20(r17)
10006ca0:	8d000415 	stw	r20,16(r17)
10006ca4:	9c401215 	stw	r17,72(r19)
10006ca8:	88000015 	stw	zero,0(r17)
10006cac:	003fbe06 	br	10006ba8 <__alt_data_end+0xf8006ba8>

10006cb0 <__lshift>:
10006cb0:	defff904 	addi	sp,sp,-28
10006cb4:	dd000415 	stw	r20,16(sp)
10006cb8:	dc400115 	stw	r17,4(sp)
10006cbc:	2d000417 	ldw	r20,16(r5)
10006cc0:	3023d17a 	srai	r17,r6,5
10006cc4:	28800217 	ldw	r2,8(r5)
10006cc8:	dd400515 	stw	r21,20(sp)
10006ccc:	8d29883a 	add	r20,r17,r20
10006cd0:	dcc00315 	stw	r19,12(sp)
10006cd4:	dc800215 	stw	r18,8(sp)
10006cd8:	dc000015 	stw	r16,0(sp)
10006cdc:	dfc00615 	stw	ra,24(sp)
10006ce0:	a4000044 	addi	r16,r20,1
10006ce4:	2825883a 	mov	r18,r5
10006ce8:	302b883a 	mov	r21,r6
10006cec:	2027883a 	mov	r19,r4
10006cf0:	29400117 	ldw	r5,4(r5)
10006cf4:	1400030e 	bge	r2,r16,10006d04 <__lshift+0x54>
10006cf8:	1085883a 	add	r2,r2,r2
10006cfc:	29400044 	addi	r5,r5,1
10006d00:	143ffd16 	blt	r2,r16,10006cf8 <__alt_data_end+0xf8006cf8>
10006d04:	9809883a 	mov	r4,r19
10006d08:	00064900 	call	10006490 <_Balloc>
10006d0c:	11000504 	addi	r4,r2,20
10006d10:	0440090e 	bge	zero,r17,10006d38 <__lshift+0x88>
10006d14:	200f883a 	mov	r7,r4
10006d18:	0007883a 	mov	r3,zero
10006d1c:	38000015 	stw	zero,0(r7)
10006d20:	18c00044 	addi	r3,r3,1
10006d24:	39c00104 	addi	r7,r7,4
10006d28:	1c7ffc1e 	bne	r3,r17,10006d1c <__alt_data_end+0xf8006d1c>
10006d2c:	18c7883a 	add	r3,r3,r3
10006d30:	18c7883a 	add	r3,r3,r3
10006d34:	20c9883a 	add	r4,r4,r3
10006d38:	92400417 	ldw	r9,16(r18)
10006d3c:	90c00504 	addi	r3,r18,20
10006d40:	a98007cc 	andi	r6,r21,31
10006d44:	4a53883a 	add	r9,r9,r9
10006d48:	4a53883a 	add	r9,r9,r9
10006d4c:	1a53883a 	add	r9,r3,r9
10006d50:	30002426 	beq	r6,zero,10006de4 <__lshift+0x134>
10006d54:	01400804 	movi	r5,32
10006d58:	298bc83a 	sub	r5,r5,r6
10006d5c:	200f883a 	mov	r7,r4
10006d60:	0011883a 	mov	r8,zero
10006d64:	1a800017 	ldw	r10,0(r3)
10006d68:	3809883a 	mov	r4,r7
10006d6c:	39c00104 	addi	r7,r7,4
10006d70:	5194983a 	sll	r10,r10,r6
10006d74:	18c00104 	addi	r3,r3,4
10006d78:	4290b03a 	or	r8,r8,r10
10006d7c:	3a3fff15 	stw	r8,-4(r7)
10006d80:	1a3fff17 	ldw	r8,-4(r3)
10006d84:	4150d83a 	srl	r8,r8,r5
10006d88:	1a7ff636 	bltu	r3,r9,10006d64 <__alt_data_end+0xf8006d64>
10006d8c:	22000115 	stw	r8,4(r4)
10006d90:	40000126 	beq	r8,zero,10006d98 <__lshift+0xe8>
10006d94:	a4000084 	addi	r16,r20,2
10006d98:	91000117 	ldw	r4,4(r18)
10006d9c:	98c01317 	ldw	r3,76(r19)
10006da0:	843fffc4 	addi	r16,r16,-1
10006da4:	2109883a 	add	r4,r4,r4
10006da8:	2109883a 	add	r4,r4,r4
10006dac:	1907883a 	add	r3,r3,r4
10006db0:	19000017 	ldw	r4,0(r3)
10006db4:	14000415 	stw	r16,16(r2)
10006db8:	91000015 	stw	r4,0(r18)
10006dbc:	1c800015 	stw	r18,0(r3)
10006dc0:	dfc00617 	ldw	ra,24(sp)
10006dc4:	dd400517 	ldw	r21,20(sp)
10006dc8:	dd000417 	ldw	r20,16(sp)
10006dcc:	dcc00317 	ldw	r19,12(sp)
10006dd0:	dc800217 	ldw	r18,8(sp)
10006dd4:	dc400117 	ldw	r17,4(sp)
10006dd8:	dc000017 	ldw	r16,0(sp)
10006ddc:	dec00704 	addi	sp,sp,28
10006de0:	f800283a 	ret
10006de4:	200f883a 	mov	r7,r4
10006de8:	19800017 	ldw	r6,0(r3)
10006dec:	39c00104 	addi	r7,r7,4
10006df0:	18c00104 	addi	r3,r3,4
10006df4:	39bfff15 	stw	r6,-4(r7)
10006df8:	1a7ffb36 	bltu	r3,r9,10006de8 <__alt_data_end+0xf8006de8>
10006dfc:	003fe606 	br	10006d98 <__alt_data_end+0xf8006d98>

10006e00 <__mcmp>:
10006e00:	20800417 	ldw	r2,16(r4)
10006e04:	28c00417 	ldw	r3,16(r5)
10006e08:	10c5c83a 	sub	r2,r2,r3
10006e0c:	1000111e 	bne	r2,zero,10006e54 <__mcmp+0x54>
10006e10:	18c7883a 	add	r3,r3,r3
10006e14:	18c7883a 	add	r3,r3,r3
10006e18:	21000504 	addi	r4,r4,20
10006e1c:	29400504 	addi	r5,r5,20
10006e20:	20c5883a 	add	r2,r4,r3
10006e24:	28cb883a 	add	r5,r5,r3
10006e28:	00000106 	br	10006e30 <__mcmp+0x30>
10006e2c:	2080082e 	bgeu	r4,r2,10006e50 <__mcmp+0x50>
10006e30:	10bfff04 	addi	r2,r2,-4
10006e34:	297fff04 	addi	r5,r5,-4
10006e38:	11800017 	ldw	r6,0(r2)
10006e3c:	28c00017 	ldw	r3,0(r5)
10006e40:	30fffa26 	beq	r6,r3,10006e2c <__alt_data_end+0xf8006e2c>
10006e44:	30c00436 	bltu	r6,r3,10006e58 <__mcmp+0x58>
10006e48:	00800044 	movi	r2,1
10006e4c:	f800283a 	ret
10006e50:	0005883a 	mov	r2,zero
10006e54:	f800283a 	ret
10006e58:	00bfffc4 	movi	r2,-1
10006e5c:	f800283a 	ret

10006e60 <__mdiff>:
10006e60:	defffc04 	addi	sp,sp,-16
10006e64:	dc000015 	stw	r16,0(sp)
10006e68:	2821883a 	mov	r16,r5
10006e6c:	200f883a 	mov	r7,r4
10006e70:	300b883a 	mov	r5,r6
10006e74:	8009883a 	mov	r4,r16
10006e78:	dc400115 	stw	r17,4(sp)
10006e7c:	dfc00315 	stw	ra,12(sp)
10006e80:	dc800215 	stw	r18,8(sp)
10006e84:	3023883a 	mov	r17,r6
10006e88:	0006e000 	call	10006e00 <__mcmp>
10006e8c:	10005226 	beq	r2,zero,10006fd8 <__mdiff+0x178>
10006e90:	10004c16 	blt	r2,zero,10006fc4 <__mdiff+0x164>
10006e94:	0025883a 	mov	r18,zero
10006e98:	81400117 	ldw	r5,4(r16)
10006e9c:	3809883a 	mov	r4,r7
10006ea0:	00064900 	call	10006490 <_Balloc>
10006ea4:	82800417 	ldw	r10,16(r16)
10006ea8:	8b400417 	ldw	r13,16(r17)
10006eac:	81000504 	addi	r4,r16,20
10006eb0:	5299883a 	add	r12,r10,r10
10006eb4:	6b5b883a 	add	r13,r13,r13
10006eb8:	6319883a 	add	r12,r12,r12
10006ebc:	89800504 	addi	r6,r17,20
10006ec0:	6b5b883a 	add	r13,r13,r13
10006ec4:	14800315 	stw	r18,12(r2)
10006ec8:	2319883a 	add	r12,r4,r12
10006ecc:	335b883a 	add	r13,r6,r13
10006ed0:	11400504 	addi	r5,r2,20
10006ed4:	0007883a 	mov	r3,zero
10006ed8:	00000106 	br	10006ee0 <__mdiff+0x80>
10006edc:	400b883a 	mov	r5,r8
10006ee0:	22400017 	ldw	r9,0(r4)
10006ee4:	32000017 	ldw	r8,0(r6)
10006ee8:	31800104 	addi	r6,r6,4
10006eec:	49ffffcc 	andi	r7,r9,65535
10006ef0:	42ffffcc 	andi	r11,r8,65535
10006ef4:	38c7883a 	add	r3,r7,r3
10006ef8:	1acfc83a 	sub	r7,r3,r11
10006efc:	4010d43a 	srli	r8,r8,16
10006f00:	4806d43a 	srli	r3,r9,16
10006f04:	3817d43a 	srai	r11,r7,16
10006f08:	39ffffcc 	andi	r7,r7,65535
10006f0c:	1a07c83a 	sub	r3,r3,r8
10006f10:	1ac7883a 	add	r3,r3,r11
10006f14:	1812943a 	slli	r9,r3,16
10006f18:	2a000104 	addi	r8,r5,4
10006f1c:	21000104 	addi	r4,r4,4
10006f20:	49ceb03a 	or	r7,r9,r7
10006f24:	29c00015 	stw	r7,0(r5)
10006f28:	1807d43a 	srai	r3,r3,16
10006f2c:	337feb36 	bltu	r6,r13,10006edc <__alt_data_end+0xf8006edc>
10006f30:	2013883a 	mov	r9,r4
10006f34:	2300342e 	bgeu	r4,r12,10007008 <__mdiff+0x1a8>
10006f38:	400b883a 	mov	r5,r8
10006f3c:	21c00017 	ldw	r7,0(r4)
10006f40:	29400104 	addi	r5,r5,4
10006f44:	21000104 	addi	r4,r4,4
10006f48:	39bfffcc 	andi	r6,r7,65535
10006f4c:	30cd883a 	add	r6,r6,r3
10006f50:	3007d43a 	srai	r3,r6,16
10006f54:	380ed43a 	srli	r7,r7,16
10006f58:	31bfffcc 	andi	r6,r6,65535
10006f5c:	19c7883a 	add	r3,r3,r7
10006f60:	180e943a 	slli	r7,r3,16
10006f64:	1807d43a 	srai	r3,r3,16
10006f68:	398cb03a 	or	r6,r7,r6
10006f6c:	29bfff15 	stw	r6,-4(r5)
10006f70:	233ff236 	bltu	r4,r12,10006f3c <__alt_data_end+0xf8006f3c>
10006f74:	0248303a 	nor	r4,zero,r9
10006f78:	2309883a 	add	r4,r4,r12
10006f7c:	2008d0ba 	srli	r4,r4,2
10006f80:	21000044 	addi	r4,r4,1
10006f84:	2109883a 	add	r4,r4,r4
10006f88:	2109883a 	add	r4,r4,r4
10006f8c:	4111883a 	add	r8,r8,r4
10006f90:	413fff04 	addi	r4,r8,-4
10006f94:	3000041e 	bne	r6,zero,10006fa8 <__mdiff+0x148>
10006f98:	213fff04 	addi	r4,r4,-4
10006f9c:	20c00017 	ldw	r3,0(r4)
10006fa0:	52bfffc4 	addi	r10,r10,-1
10006fa4:	183ffc26 	beq	r3,zero,10006f98 <__alt_data_end+0xf8006f98>
10006fa8:	12800415 	stw	r10,16(r2)
10006fac:	dfc00317 	ldw	ra,12(sp)
10006fb0:	dc800217 	ldw	r18,8(sp)
10006fb4:	dc400117 	ldw	r17,4(sp)
10006fb8:	dc000017 	ldw	r16,0(sp)
10006fbc:	dec00404 	addi	sp,sp,16
10006fc0:	f800283a 	ret
10006fc4:	8005883a 	mov	r2,r16
10006fc8:	04800044 	movi	r18,1
10006fcc:	8821883a 	mov	r16,r17
10006fd0:	1023883a 	mov	r17,r2
10006fd4:	003fb006 	br	10006e98 <__alt_data_end+0xf8006e98>
10006fd8:	3809883a 	mov	r4,r7
10006fdc:	000b883a 	mov	r5,zero
10006fe0:	00064900 	call	10006490 <_Balloc>
10006fe4:	00c00044 	movi	r3,1
10006fe8:	10c00415 	stw	r3,16(r2)
10006fec:	10000515 	stw	zero,20(r2)
10006ff0:	dfc00317 	ldw	ra,12(sp)
10006ff4:	dc800217 	ldw	r18,8(sp)
10006ff8:	dc400117 	ldw	r17,4(sp)
10006ffc:	dc000017 	ldw	r16,0(sp)
10007000:	dec00404 	addi	sp,sp,16
10007004:	f800283a 	ret
10007008:	380d883a 	mov	r6,r7
1000700c:	003fe006 	br	10006f90 <__alt_data_end+0xf8006f90>

10007010 <__ulp>:
10007010:	295ffc2c 	andhi	r5,r5,32752
10007014:	00bf3034 	movhi	r2,64704
10007018:	2887883a 	add	r3,r5,r2
1000701c:	00c0020e 	bge	zero,r3,10007028 <__ulp+0x18>
10007020:	0005883a 	mov	r2,zero
10007024:	f800283a 	ret
10007028:	00c7c83a 	sub	r3,zero,r3
1000702c:	1805d53a 	srai	r2,r3,20
10007030:	00c004c4 	movi	r3,19
10007034:	18800a0e 	bge	r3,r2,10007060 <__ulp+0x50>
10007038:	01000c84 	movi	r4,50
1000703c:	0007883a 	mov	r3,zero
10007040:	20800516 	blt	r4,r2,10007058 <__ulp+0x48>
10007044:	01000cc4 	movi	r4,51
10007048:	2085c83a 	sub	r2,r4,r2
1000704c:	01000044 	movi	r4,1
10007050:	2084983a 	sll	r2,r4,r2
10007054:	f800283a 	ret
10007058:	00800044 	movi	r2,1
1000705c:	f800283a 	ret
10007060:	00c00234 	movhi	r3,8
10007064:	1887d83a 	sra	r3,r3,r2
10007068:	0005883a 	mov	r2,zero
1000706c:	f800283a 	ret

10007070 <__b2d>:
10007070:	21800417 	ldw	r6,16(r4)
10007074:	22000504 	addi	r8,r4,20
10007078:	deffff04 	addi	sp,sp,-4
1000707c:	318d883a 	add	r6,r6,r6
10007080:	318d883a 	add	r6,r6,r6
10007084:	418d883a 	add	r6,r8,r6
10007088:	31ffff17 	ldw	r7,-4(r6)
1000708c:	327fff04 	addi	r9,r6,-4
10007090:	dfc00015 	stw	ra,0(sp)
10007094:	3809883a 	mov	r4,r7
10007098:	00067a80 	call	100067a8 <__hi0bits>
1000709c:	00c00804 	movi	r3,32
100070a0:	1887c83a 	sub	r3,r3,r2
100070a4:	28c00015 	stw	r3,0(r5)
100070a8:	00c00284 	movi	r3,10
100070ac:	18800d16 	blt	r3,r2,100070e4 <__b2d+0x74>
100070b0:	010002c4 	movi	r4,11
100070b4:	2089c83a 	sub	r4,r4,r2
100070b8:	3906d83a 	srl	r3,r7,r4
100070bc:	18cffc34 	orhi	r3,r3,16368
100070c0:	4240232e 	bgeu	r8,r9,10007150 <__b2d+0xe0>
100070c4:	317ffe17 	ldw	r5,-8(r6)
100070c8:	2908d83a 	srl	r4,r5,r4
100070cc:	10800544 	addi	r2,r2,21
100070d0:	388e983a 	sll	r7,r7,r2
100070d4:	21c4b03a 	or	r2,r4,r7
100070d8:	dfc00017 	ldw	ra,0(sp)
100070dc:	dec00104 	addi	sp,sp,4
100070e0:	f800283a 	ret
100070e4:	42401136 	bltu	r8,r9,1000712c <__b2d+0xbc>
100070e8:	113ffd44 	addi	r4,r2,-11
100070ec:	000b883a 	mov	r5,zero
100070f0:	20001226 	beq	r4,zero,1000713c <__b2d+0xcc>
100070f4:	00c00ac4 	movi	r3,43
100070f8:	1885c83a 	sub	r2,r3,r2
100070fc:	3906983a 	sll	r3,r7,r4
10007100:	288cd83a 	srl	r6,r5,r2
10007104:	18cffc34 	orhi	r3,r3,16368
10007108:	1986b03a 	or	r3,r3,r6
1000710c:	4240122e 	bgeu	r8,r9,10007158 <__b2d+0xe8>
10007110:	49bfff17 	ldw	r6,-4(r9)
10007114:	3084d83a 	srl	r2,r6,r2
10007118:	2908983a 	sll	r4,r5,r4
1000711c:	1104b03a 	or	r2,r2,r4
10007120:	dfc00017 	ldw	ra,0(sp)
10007124:	dec00104 	addi	sp,sp,4
10007128:	f800283a 	ret
1000712c:	113ffd44 	addi	r4,r2,-11
10007130:	327ffe04 	addi	r9,r6,-8
10007134:	317ffe17 	ldw	r5,-8(r6)
10007138:	203fee1e 	bne	r4,zero,100070f4 <__alt_data_end+0xf80070f4>
1000713c:	38cffc34 	orhi	r3,r7,16368
10007140:	2805883a 	mov	r2,r5
10007144:	dfc00017 	ldw	ra,0(sp)
10007148:	dec00104 	addi	sp,sp,4
1000714c:	f800283a 	ret
10007150:	0009883a 	mov	r4,zero
10007154:	003fdd06 	br	100070cc <__alt_data_end+0xf80070cc>
10007158:	0005883a 	mov	r2,zero
1000715c:	003fee06 	br	10007118 <__alt_data_end+0xf8007118>

10007160 <__d2b>:
10007160:	defffa04 	addi	sp,sp,-24
10007164:	dc400315 	stw	r17,12(sp)
10007168:	2823883a 	mov	r17,r5
1000716c:	01400044 	movi	r5,1
10007170:	dc800415 	stw	r18,16(sp)
10007174:	dc000215 	stw	r16,8(sp)
10007178:	dfc00515 	stw	ra,20(sp)
1000717c:	3021883a 	mov	r16,r6
10007180:	3825883a 	mov	r18,r7
10007184:	00064900 	call	10006490 <_Balloc>
10007188:	8012907a 	slli	r9,r16,1
1000718c:	1011883a 	mov	r8,r2
10007190:	00800434 	movhi	r2,16
10007194:	10bfffc4 	addi	r2,r2,-1
10007198:	4812d57a 	srli	r9,r9,21
1000719c:	80a0703a 	and	r16,r16,r2
100071a0:	48000126 	beq	r9,zero,100071a8 <__d2b+0x48>
100071a4:	84000434 	orhi	r16,r16,16
100071a8:	dc000015 	stw	r16,0(sp)
100071ac:	88001e26 	beq	r17,zero,10007228 <__d2b+0xc8>
100071b0:	d9000104 	addi	r4,sp,4
100071b4:	dc400115 	stw	r17,4(sp)
100071b8:	00068100 	call	10006810 <__lo0bits>
100071bc:	d8c00017 	ldw	r3,0(sp)
100071c0:	10002f1e 	bne	r2,zero,10007280 <__d2b+0x120>
100071c4:	d9000117 	ldw	r4,4(sp)
100071c8:	41000515 	stw	r4,20(r8)
100071cc:	180b003a 	cmpeq	r5,r3,zero
100071d0:	01000084 	movi	r4,2
100071d4:	214bc83a 	sub	r5,r4,r5
100071d8:	40c00615 	stw	r3,24(r8)
100071dc:	41400415 	stw	r5,16(r8)
100071e0:	4800191e 	bne	r9,zero,10007248 <__d2b+0xe8>
100071e4:	280690ba 	slli	r3,r5,2
100071e8:	10bef384 	addi	r2,r2,-1074
100071ec:	90800015 	stw	r2,0(r18)
100071f0:	40c5883a 	add	r2,r8,r3
100071f4:	11000417 	ldw	r4,16(r2)
100071f8:	00067a80 	call	100067a8 <__hi0bits>
100071fc:	280a917a 	slli	r5,r5,5
10007200:	d8c00617 	ldw	r3,24(sp)
10007204:	2885c83a 	sub	r2,r5,r2
10007208:	18800015 	stw	r2,0(r3)
1000720c:	4005883a 	mov	r2,r8
10007210:	dfc00517 	ldw	ra,20(sp)
10007214:	dc800417 	ldw	r18,16(sp)
10007218:	dc400317 	ldw	r17,12(sp)
1000721c:	dc000217 	ldw	r16,8(sp)
10007220:	dec00604 	addi	sp,sp,24
10007224:	f800283a 	ret
10007228:	d809883a 	mov	r4,sp
1000722c:	00068100 	call	10006810 <__lo0bits>
10007230:	d8c00017 	ldw	r3,0(sp)
10007234:	01400044 	movi	r5,1
10007238:	41400415 	stw	r5,16(r8)
1000723c:	40c00515 	stw	r3,20(r8)
10007240:	10800804 	addi	r2,r2,32
10007244:	483fe726 	beq	r9,zero,100071e4 <__alt_data_end+0xf80071e4>
10007248:	00c00d44 	movi	r3,53
1000724c:	4a7ef344 	addi	r9,r9,-1075
10007250:	4893883a 	add	r9,r9,r2
10007254:	1885c83a 	sub	r2,r3,r2
10007258:	d8c00617 	ldw	r3,24(sp)
1000725c:	92400015 	stw	r9,0(r18)
10007260:	18800015 	stw	r2,0(r3)
10007264:	4005883a 	mov	r2,r8
10007268:	dfc00517 	ldw	ra,20(sp)
1000726c:	dc800417 	ldw	r18,16(sp)
10007270:	dc400317 	ldw	r17,12(sp)
10007274:	dc000217 	ldw	r16,8(sp)
10007278:	dec00604 	addi	sp,sp,24
1000727c:	f800283a 	ret
10007280:	01000804 	movi	r4,32
10007284:	2089c83a 	sub	r4,r4,r2
10007288:	1908983a 	sll	r4,r3,r4
1000728c:	d9400117 	ldw	r5,4(sp)
10007290:	1886d83a 	srl	r3,r3,r2
10007294:	2148b03a 	or	r4,r4,r5
10007298:	41000515 	stw	r4,20(r8)
1000729c:	d8c00015 	stw	r3,0(sp)
100072a0:	003fca06 	br	100071cc <__alt_data_end+0xf80071cc>

100072a4 <__ratio>:
100072a4:	defffd04 	addi	sp,sp,-12
100072a8:	2817883a 	mov	r11,r5
100072ac:	201b883a 	mov	r13,r4
100072b0:	d9400104 	addi	r5,sp,4
100072b4:	dfc00215 	stw	ra,8(sp)
100072b8:	00070700 	call	10007070 <__b2d>
100072bc:	5809883a 	mov	r4,r11
100072c0:	d80b883a 	mov	r5,sp
100072c4:	1019883a 	mov	r12,r2
100072c8:	1815883a 	mov	r10,r3
100072cc:	00070700 	call	10007070 <__b2d>
100072d0:	69400417 	ldw	r5,16(r13)
100072d4:	59000417 	ldw	r4,16(r11)
100072d8:	d9800117 	ldw	r6,4(sp)
100072dc:	2909c83a 	sub	r4,r5,r4
100072e0:	d9400017 	ldw	r5,0(sp)
100072e4:	2008917a 	slli	r4,r4,5
100072e8:	314bc83a 	sub	r5,r6,r5
100072ec:	290b883a 	add	r5,r5,r4
100072f0:	01400a0e 	bge	zero,r5,1000731c <__ratio+0x78>
100072f4:	280a953a 	slli	r5,r5,20
100072f8:	6009883a 	mov	r4,r12
100072fc:	100d883a 	mov	r6,r2
10007300:	2a95883a 	add	r10,r5,r10
10007304:	500b883a 	mov	r5,r10
10007308:	180f883a 	mov	r7,r3
1000730c:	000b91c0 	call	1000b91c <__divdf3>
10007310:	dfc00217 	ldw	ra,8(sp)
10007314:	dec00304 	addi	sp,sp,12
10007318:	f800283a 	ret
1000731c:	280a953a 	slli	r5,r5,20
10007320:	6009883a 	mov	r4,r12
10007324:	100d883a 	mov	r6,r2
10007328:	1947c83a 	sub	r3,r3,r5
1000732c:	180f883a 	mov	r7,r3
10007330:	500b883a 	mov	r5,r10
10007334:	000b91c0 	call	1000b91c <__divdf3>
10007338:	dfc00217 	ldw	ra,8(sp)
1000733c:	dec00304 	addi	sp,sp,12
10007340:	f800283a 	ret

10007344 <_mprec_log10>:
10007344:	defffe04 	addi	sp,sp,-8
10007348:	dc000015 	stw	r16,0(sp)
1000734c:	dfc00115 	stw	ra,4(sp)
10007350:	008005c4 	movi	r2,23
10007354:	2021883a 	mov	r16,r4
10007358:	11000d0e 	bge	r2,r4,10007390 <_mprec_log10+0x4c>
1000735c:	0005883a 	mov	r2,zero
10007360:	00cffc34 	movhi	r3,16368
10007364:	843fffc4 	addi	r16,r16,-1
10007368:	1009883a 	mov	r4,r2
1000736c:	180b883a 	mov	r5,r3
10007370:	000d883a 	mov	r6,zero
10007374:	01d00934 	movhi	r7,16420
10007378:	000c5000 	call	1000c500 <__muldf3>
1000737c:	803ff91e 	bne	r16,zero,10007364 <__alt_data_end+0xf8007364>
10007380:	dfc00117 	ldw	ra,4(sp)
10007384:	dc000017 	ldw	r16,0(sp)
10007388:	dec00204 	addi	sp,sp,8
1000738c:	f800283a 	ret
10007390:	202090fa 	slli	r16,r4,3
10007394:	00840074 	movhi	r2,4097
10007398:	10bfed04 	addi	r2,r2,-76
1000739c:	1421883a 	add	r16,r2,r16
100073a0:	80800017 	ldw	r2,0(r16)
100073a4:	80c00117 	ldw	r3,4(r16)
100073a8:	dfc00117 	ldw	ra,4(sp)
100073ac:	dc000017 	ldw	r16,0(sp)
100073b0:	dec00204 	addi	sp,sp,8
100073b4:	f800283a 	ret

100073b8 <__copybits>:
100073b8:	297fffc4 	addi	r5,r5,-1
100073bc:	2811d17a 	srai	r8,r5,5
100073c0:	31c00417 	ldw	r7,16(r6)
100073c4:	30800504 	addi	r2,r6,20
100073c8:	42000044 	addi	r8,r8,1
100073cc:	39cf883a 	add	r7,r7,r7
100073d0:	4211883a 	add	r8,r8,r8
100073d4:	39cf883a 	add	r7,r7,r7
100073d8:	4211883a 	add	r8,r8,r8
100073dc:	11cf883a 	add	r7,r2,r7
100073e0:	2211883a 	add	r8,r4,r8
100073e4:	11c00d2e 	bgeu	r2,r7,1000741c <__copybits+0x64>
100073e8:	2007883a 	mov	r3,r4
100073ec:	11400017 	ldw	r5,0(r2)
100073f0:	18c00104 	addi	r3,r3,4
100073f4:	10800104 	addi	r2,r2,4
100073f8:	197fff15 	stw	r5,-4(r3)
100073fc:	11fffb36 	bltu	r2,r7,100073ec <__alt_data_end+0xf80073ec>
10007400:	3985c83a 	sub	r2,r7,r6
10007404:	10bffac4 	addi	r2,r2,-21
10007408:	1004d0ba 	srli	r2,r2,2
1000740c:	10800044 	addi	r2,r2,1
10007410:	1085883a 	add	r2,r2,r2
10007414:	1085883a 	add	r2,r2,r2
10007418:	2089883a 	add	r4,r4,r2
1000741c:	2200032e 	bgeu	r4,r8,1000742c <__copybits+0x74>
10007420:	20000015 	stw	zero,0(r4)
10007424:	21000104 	addi	r4,r4,4
10007428:	223ffd36 	bltu	r4,r8,10007420 <__alt_data_end+0xf8007420>
1000742c:	f800283a 	ret

10007430 <__any_on>:
10007430:	20800417 	ldw	r2,16(r4)
10007434:	2807d17a 	srai	r3,r5,5
10007438:	21000504 	addi	r4,r4,20
1000743c:	10c00d0e 	bge	r2,r3,10007474 <__any_on+0x44>
10007440:	1085883a 	add	r2,r2,r2
10007444:	1085883a 	add	r2,r2,r2
10007448:	2085883a 	add	r2,r4,r2
1000744c:	2080182e 	bgeu	r4,r2,100074b0 <__any_on+0x80>
10007450:	10ffff17 	ldw	r3,-4(r2)
10007454:	10bfff04 	addi	r2,r2,-4
10007458:	1800041e 	bne	r3,zero,1000746c <__any_on+0x3c>
1000745c:	2080142e 	bgeu	r4,r2,100074b0 <__any_on+0x80>
10007460:	10bfff04 	addi	r2,r2,-4
10007464:	10c00017 	ldw	r3,0(r2)
10007468:	183ffc26 	beq	r3,zero,1000745c <__alt_data_end+0xf800745c>
1000746c:	00800044 	movi	r2,1
10007470:	f800283a 	ret
10007474:	18800a0e 	bge	r3,r2,100074a0 <__any_on+0x70>
10007478:	18c7883a 	add	r3,r3,r3
1000747c:	18c7883a 	add	r3,r3,r3
10007480:	294007cc 	andi	r5,r5,31
10007484:	20c5883a 	add	r2,r4,r3
10007488:	283ff026 	beq	r5,zero,1000744c <__alt_data_end+0xf800744c>
1000748c:	10c00017 	ldw	r3,0(r2)
10007490:	194cd83a 	srl	r6,r3,r5
10007494:	314a983a 	sll	r5,r6,r5
10007498:	28fff41e 	bne	r5,r3,1000746c <__alt_data_end+0xf800746c>
1000749c:	003feb06 	br	1000744c <__alt_data_end+0xf800744c>
100074a0:	18c7883a 	add	r3,r3,r3
100074a4:	18c7883a 	add	r3,r3,r3
100074a8:	20c5883a 	add	r2,r4,r3
100074ac:	003fe706 	br	1000744c <__alt_data_end+0xf800744c>
100074b0:	0005883a 	mov	r2,zero
100074b4:	f800283a 	ret

100074b8 <__fpclassifyd>:
100074b8:	00a00034 	movhi	r2,32768
100074bc:	10bfffc4 	addi	r2,r2,-1
100074c0:	288a703a 	and	r5,r5,r2
100074c4:	28000726 	beq	r5,zero,100074e4 <__fpclassifyd+0x2c>
100074c8:	00bffc34 	movhi	r2,65520
100074cc:	2885883a 	add	r2,r5,r2
100074d0:	00dff834 	movhi	r3,32736
100074d4:	18ffffc4 	addi	r3,r3,-1
100074d8:	18800636 	bltu	r3,r2,100074f4 <__fpclassifyd+0x3c>
100074dc:	00800104 	movi	r2,4
100074e0:	f800283a 	ret
100074e4:	2005003a 	cmpeq	r2,r4,zero
100074e8:	00c000c4 	movi	r3,3
100074ec:	1885c83a 	sub	r2,r3,r2
100074f0:	f800283a 	ret
100074f4:	00800434 	movhi	r2,16
100074f8:	10bfffc4 	addi	r2,r2,-1
100074fc:	11400236 	bltu	r2,r5,10007508 <__fpclassifyd+0x50>
10007500:	008000c4 	movi	r2,3
10007504:	f800283a 	ret
10007508:	009ffc34 	movhi	r2,32752
1000750c:	28800226 	beq	r5,r2,10007518 <__fpclassifyd+0x60>
10007510:	0005883a 	mov	r2,zero
10007514:	f800283a 	ret
10007518:	2005003a 	cmpeq	r2,r4,zero
1000751c:	f800283a 	ret

10007520 <_sbrk_r>:
10007520:	defffd04 	addi	sp,sp,-12
10007524:	dc400115 	stw	r17,4(sp)
10007528:	dc000015 	stw	r16,0(sp)
1000752c:	2023883a 	mov	r17,r4
10007530:	04040074 	movhi	r16,4097
10007534:	840df404 	addi	r16,r16,14288
10007538:	2809883a 	mov	r4,r5
1000753c:	dfc00215 	stw	ra,8(sp)
10007540:	80000015 	stw	zero,0(r16)
10007544:	000e0880 	call	1000e088 <sbrk>
10007548:	00ffffc4 	movi	r3,-1
1000754c:	10c00526 	beq	r2,r3,10007564 <_sbrk_r+0x44>
10007550:	dfc00217 	ldw	ra,8(sp)
10007554:	dc400117 	ldw	r17,4(sp)
10007558:	dc000017 	ldw	r16,0(sp)
1000755c:	dec00304 	addi	sp,sp,12
10007560:	f800283a 	ret
10007564:	80c00017 	ldw	r3,0(r16)
10007568:	183ff926 	beq	r3,zero,10007550 <__alt_data_end+0xf8007550>
1000756c:	88c00015 	stw	r3,0(r17)
10007570:	dfc00217 	ldw	ra,8(sp)
10007574:	dc400117 	ldw	r17,4(sp)
10007578:	dc000017 	ldw	r16,0(sp)
1000757c:	dec00304 	addi	sp,sp,12
10007580:	f800283a 	ret

10007584 <__sread>:
10007584:	defffe04 	addi	sp,sp,-8
10007588:	dc000015 	stw	r16,0(sp)
1000758c:	2821883a 	mov	r16,r5
10007590:	2940038f 	ldh	r5,14(r5)
10007594:	dfc00115 	stw	ra,4(sp)
10007598:	00099700 	call	10009970 <_read_r>
1000759c:	10000716 	blt	r2,zero,100075bc <__sread+0x38>
100075a0:	80c01417 	ldw	r3,80(r16)
100075a4:	1887883a 	add	r3,r3,r2
100075a8:	80c01415 	stw	r3,80(r16)
100075ac:	dfc00117 	ldw	ra,4(sp)
100075b0:	dc000017 	ldw	r16,0(sp)
100075b4:	dec00204 	addi	sp,sp,8
100075b8:	f800283a 	ret
100075bc:	80c0030b 	ldhu	r3,12(r16)
100075c0:	18fbffcc 	andi	r3,r3,61439
100075c4:	80c0030d 	sth	r3,12(r16)
100075c8:	dfc00117 	ldw	ra,4(sp)
100075cc:	dc000017 	ldw	r16,0(sp)
100075d0:	dec00204 	addi	sp,sp,8
100075d4:	f800283a 	ret

100075d8 <__seofread>:
100075d8:	0005883a 	mov	r2,zero
100075dc:	f800283a 	ret

100075e0 <__swrite>:
100075e0:	2880030b 	ldhu	r2,12(r5)
100075e4:	defffb04 	addi	sp,sp,-20
100075e8:	dcc00315 	stw	r19,12(sp)
100075ec:	dc800215 	stw	r18,8(sp)
100075f0:	dc400115 	stw	r17,4(sp)
100075f4:	dc000015 	stw	r16,0(sp)
100075f8:	dfc00415 	stw	ra,16(sp)
100075fc:	10c0400c 	andi	r3,r2,256
10007600:	2821883a 	mov	r16,r5
10007604:	2027883a 	mov	r19,r4
10007608:	3025883a 	mov	r18,r6
1000760c:	3823883a 	mov	r17,r7
10007610:	18000526 	beq	r3,zero,10007628 <__swrite+0x48>
10007614:	2940038f 	ldh	r5,14(r5)
10007618:	000d883a 	mov	r6,zero
1000761c:	01c00084 	movi	r7,2
10007620:	00097c80 	call	100097c8 <_lseek_r>
10007624:	8080030b 	ldhu	r2,12(r16)
10007628:	8140038f 	ldh	r5,14(r16)
1000762c:	10bbffcc 	andi	r2,r2,61439
10007630:	9809883a 	mov	r4,r19
10007634:	900d883a 	mov	r6,r18
10007638:	880f883a 	mov	r7,r17
1000763c:	8080030d 	sth	r2,12(r16)
10007640:	dfc00417 	ldw	ra,16(sp)
10007644:	dcc00317 	ldw	r19,12(sp)
10007648:	dc800217 	ldw	r18,8(sp)
1000764c:	dc400117 	ldw	r17,4(sp)
10007650:	dc000017 	ldw	r16,0(sp)
10007654:	dec00504 	addi	sp,sp,20
10007658:	0008d701 	jmpi	10008d70 <_write_r>

1000765c <__sseek>:
1000765c:	defffe04 	addi	sp,sp,-8
10007660:	dc000015 	stw	r16,0(sp)
10007664:	2821883a 	mov	r16,r5
10007668:	2940038f 	ldh	r5,14(r5)
1000766c:	dfc00115 	stw	ra,4(sp)
10007670:	00097c80 	call	100097c8 <_lseek_r>
10007674:	00ffffc4 	movi	r3,-1
10007678:	10c00826 	beq	r2,r3,1000769c <__sseek+0x40>
1000767c:	80c0030b 	ldhu	r3,12(r16)
10007680:	80801415 	stw	r2,80(r16)
10007684:	18c40014 	ori	r3,r3,4096
10007688:	80c0030d 	sth	r3,12(r16)
1000768c:	dfc00117 	ldw	ra,4(sp)
10007690:	dc000017 	ldw	r16,0(sp)
10007694:	dec00204 	addi	sp,sp,8
10007698:	f800283a 	ret
1000769c:	80c0030b 	ldhu	r3,12(r16)
100076a0:	18fbffcc 	andi	r3,r3,61439
100076a4:	80c0030d 	sth	r3,12(r16)
100076a8:	dfc00117 	ldw	ra,4(sp)
100076ac:	dc000017 	ldw	r16,0(sp)
100076b0:	dec00204 	addi	sp,sp,8
100076b4:	f800283a 	ret

100076b8 <__sclose>:
100076b8:	2940038f 	ldh	r5,14(r5)
100076bc:	0008ddc1 	jmpi	10008ddc <_close_r>

100076c0 <strcmp>:
100076c0:	2144b03a 	or	r2,r4,r5
100076c4:	108000cc 	andi	r2,r2,3
100076c8:	1000171e 	bne	r2,zero,10007728 <strcmp+0x68>
100076cc:	20800017 	ldw	r2,0(r4)
100076d0:	28c00017 	ldw	r3,0(r5)
100076d4:	10c0141e 	bne	r2,r3,10007728 <strcmp+0x68>
100076d8:	027fbff4 	movhi	r9,65279
100076dc:	4a7fbfc4 	addi	r9,r9,-257
100076e0:	1247883a 	add	r3,r2,r9
100076e4:	0084303a 	nor	r2,zero,r2
100076e8:	1884703a 	and	r2,r3,r2
100076ec:	02202074 	movhi	r8,32897
100076f0:	42202004 	addi	r8,r8,-32640
100076f4:	1204703a 	and	r2,r2,r8
100076f8:	10000226 	beq	r2,zero,10007704 <strcmp+0x44>
100076fc:	00001706 	br	1000775c <strcmp+0x9c>
10007700:	3000161e 	bne	r6,zero,1000775c <strcmp+0x9c>
10007704:	21000104 	addi	r4,r4,4
10007708:	20800017 	ldw	r2,0(r4)
1000770c:	29400104 	addi	r5,r5,4
10007710:	28c00017 	ldw	r3,0(r5)
10007714:	124f883a 	add	r7,r2,r9
10007718:	008c303a 	nor	r6,zero,r2
1000771c:	398c703a 	and	r6,r7,r6
10007720:	320c703a 	and	r6,r6,r8
10007724:	10fff626 	beq	r2,r3,10007700 <__alt_data_end+0xf8007700>
10007728:	20800007 	ldb	r2,0(r4)
1000772c:	1000051e 	bne	r2,zero,10007744 <strcmp+0x84>
10007730:	00000606 	br	1000774c <strcmp+0x8c>
10007734:	21000044 	addi	r4,r4,1
10007738:	20800007 	ldb	r2,0(r4)
1000773c:	29400044 	addi	r5,r5,1
10007740:	10000226 	beq	r2,zero,1000774c <strcmp+0x8c>
10007744:	28c00007 	ldb	r3,0(r5)
10007748:	10fffa26 	beq	r2,r3,10007734 <__alt_data_end+0xf8007734>
1000774c:	20c00003 	ldbu	r3,0(r4)
10007750:	28800003 	ldbu	r2,0(r5)
10007754:	1885c83a 	sub	r2,r3,r2
10007758:	f800283a 	ret
1000775c:	0005883a 	mov	r2,zero
10007760:	f800283a 	ret

10007764 <strlen>:
10007764:	208000cc 	andi	r2,r4,3
10007768:	10001d26 	beq	r2,zero,100077e0 <strlen+0x7c>
1000776c:	20800007 	ldb	r2,0(r4)
10007770:	10001d26 	beq	r2,zero,100077e8 <strlen+0x84>
10007774:	2005883a 	mov	r2,r4
10007778:	00000206 	br	10007784 <strlen+0x20>
1000777c:	10c00007 	ldb	r3,0(r2)
10007780:	18001526 	beq	r3,zero,100077d8 <strlen+0x74>
10007784:	10800044 	addi	r2,r2,1
10007788:	10c000cc 	andi	r3,r2,3
1000778c:	183ffb1e 	bne	r3,zero,1000777c <__alt_data_end+0xf800777c>
10007790:	10c00017 	ldw	r3,0(r2)
10007794:	01ffbff4 	movhi	r7,65279
10007798:	39ffbfc4 	addi	r7,r7,-257
1000779c:	01a02074 	movhi	r6,32897
100077a0:	31a02004 	addi	r6,r6,-32640
100077a4:	00000206 	br	100077b0 <strlen+0x4c>
100077a8:	10800104 	addi	r2,r2,4
100077ac:	10c00017 	ldw	r3,0(r2)
100077b0:	19cb883a 	add	r5,r3,r7
100077b4:	00c6303a 	nor	r3,zero,r3
100077b8:	28c6703a 	and	r3,r5,r3
100077bc:	1986703a 	and	r3,r3,r6
100077c0:	183ff926 	beq	r3,zero,100077a8 <__alt_data_end+0xf80077a8>
100077c4:	10c00007 	ldb	r3,0(r2)
100077c8:	18000326 	beq	r3,zero,100077d8 <strlen+0x74>
100077cc:	10800044 	addi	r2,r2,1
100077d0:	10c00007 	ldb	r3,0(r2)
100077d4:	183ffd1e 	bne	r3,zero,100077cc <__alt_data_end+0xf80077cc>
100077d8:	1105c83a 	sub	r2,r2,r4
100077dc:	f800283a 	ret
100077e0:	2005883a 	mov	r2,r4
100077e4:	003fea06 	br	10007790 <__alt_data_end+0xf8007790>
100077e8:	0005883a 	mov	r2,zero
100077ec:	f800283a 	ret

100077f0 <__sprint_r.part.0>:
100077f0:	28801917 	ldw	r2,100(r5)
100077f4:	defff604 	addi	sp,sp,-40
100077f8:	dd800615 	stw	r22,24(sp)
100077fc:	dcc00315 	stw	r19,12(sp)
10007800:	dfc00915 	stw	ra,36(sp)
10007804:	df000815 	stw	fp,32(sp)
10007808:	ddc00715 	stw	r23,28(sp)
1000780c:	dd400515 	stw	r21,20(sp)
10007810:	dd000415 	stw	r20,16(sp)
10007814:	dc800215 	stw	r18,8(sp)
10007818:	dc400115 	stw	r17,4(sp)
1000781c:	dc000015 	stw	r16,0(sp)
10007820:	1088000c 	andi	r2,r2,8192
10007824:	2827883a 	mov	r19,r5
10007828:	302d883a 	mov	r22,r6
1000782c:	10002d26 	beq	r2,zero,100078e4 <__sprint_r.part.0+0xf4>
10007830:	30800217 	ldw	r2,8(r6)
10007834:	35c00017 	ldw	r23,0(r6)
10007838:	10002826 	beq	r2,zero,100078dc <__sprint_r.part.0+0xec>
1000783c:	202b883a 	mov	r21,r4
10007840:	bf000104 	addi	fp,r23,4
10007844:	053fffc4 	movi	r20,-1
10007848:	e4800017 	ldw	r18,0(fp)
1000784c:	bc400017 	ldw	r17,0(r23)
10007850:	0021883a 	mov	r16,zero
10007854:	9024d0ba 	srli	r18,r18,2
10007858:	04800316 	blt	zero,r18,10007868 <__sprint_r.part.0+0x78>
1000785c:	00001806 	br	100078c0 <__sprint_r.part.0+0xd0>
10007860:	8c400104 	addi	r17,r17,4
10007864:	94001526 	beq	r18,r16,100078bc <__sprint_r.part.0+0xcc>
10007868:	89400017 	ldw	r5,0(r17)
1000786c:	a809883a 	mov	r4,r21
10007870:	980d883a 	mov	r6,r19
10007874:	00090540 	call	10009054 <_fputwc_r>
10007878:	84000044 	addi	r16,r16,1
1000787c:	153ff81e 	bne	r2,r20,10007860 <__alt_data_end+0xf8007860>
10007880:	a005883a 	mov	r2,r20
10007884:	b0000215 	stw	zero,8(r22)
10007888:	b0000115 	stw	zero,4(r22)
1000788c:	dfc00917 	ldw	ra,36(sp)
10007890:	df000817 	ldw	fp,32(sp)
10007894:	ddc00717 	ldw	r23,28(sp)
10007898:	dd800617 	ldw	r22,24(sp)
1000789c:	dd400517 	ldw	r21,20(sp)
100078a0:	dd000417 	ldw	r20,16(sp)
100078a4:	dcc00317 	ldw	r19,12(sp)
100078a8:	dc800217 	ldw	r18,8(sp)
100078ac:	dc400117 	ldw	r17,4(sp)
100078b0:	dc000017 	ldw	r16,0(sp)
100078b4:	dec00a04 	addi	sp,sp,40
100078b8:	f800283a 	ret
100078bc:	b0800217 	ldw	r2,8(r22)
100078c0:	94a5883a 	add	r18,r18,r18
100078c4:	94a5883a 	add	r18,r18,r18
100078c8:	1485c83a 	sub	r2,r2,r18
100078cc:	b0800215 	stw	r2,8(r22)
100078d0:	bdc00204 	addi	r23,r23,8
100078d4:	e7000204 	addi	fp,fp,8
100078d8:	103fdb1e 	bne	r2,zero,10007848 <__alt_data_end+0xf8007848>
100078dc:	0005883a 	mov	r2,zero
100078e0:	003fe806 	br	10007884 <__alt_data_end+0xf8007884>
100078e4:	00092b80 	call	100092b8 <__sfvwrite_r>
100078e8:	003fe606 	br	10007884 <__alt_data_end+0xf8007884>

100078ec <__sprint_r>:
100078ec:	30c00217 	ldw	r3,8(r6)
100078f0:	18000126 	beq	r3,zero,100078f8 <__sprint_r+0xc>
100078f4:	00077f01 	jmpi	100077f0 <__sprint_r.part.0>
100078f8:	30000115 	stw	zero,4(r6)
100078fc:	0005883a 	mov	r2,zero
10007900:	f800283a 	ret

10007904 <___vfiprintf_internal_r>:
10007904:	defec804 	addi	sp,sp,-1248
10007908:	dfc13715 	stw	ra,1244(sp)
1000790c:	df013615 	stw	fp,1240(sp)
10007910:	ddc13515 	stw	r23,1236(sp)
10007914:	dd813415 	stw	r22,1232(sp)
10007918:	dd413315 	stw	r21,1228(sp)
1000791c:	dd013215 	stw	r20,1224(sp)
10007920:	dcc13115 	stw	r19,1220(sp)
10007924:	dc813015 	stw	r18,1216(sp)
10007928:	dc412f15 	stw	r17,1212(sp)
1000792c:	dc012e15 	stw	r16,1208(sp)
10007930:	d9012215 	stw	r4,1160(sp)
10007934:	d9412015 	stw	r5,1152(sp)
10007938:	d9c12315 	stw	r7,1164(sp)
1000793c:	3013883a 	mov	r9,r6
10007940:	20000226 	beq	r4,zero,1000794c <___vfiprintf_internal_r+0x48>
10007944:	20800e17 	ldw	r2,56(r4)
10007948:	1000f926 	beq	r2,zero,10007d30 <___vfiprintf_internal_r+0x42c>
1000794c:	d8c12017 	ldw	r3,1152(sp)
10007950:	1880030b 	ldhu	r2,12(r3)
10007954:	1108000c 	andi	r4,r2,8192
10007958:	1007883a 	mov	r3,r2
1000795c:	2000081e 	bne	r4,zero,10007980 <___vfiprintf_internal_r+0x7c>
10007960:	d9412017 	ldw	r5,1152(sp)
10007964:	10c80014 	ori	r3,r2,8192
10007968:	00b7ffc4 	movi	r2,-8193
1000796c:	29001917 	ldw	r4,100(r5)
10007970:	28c0030d 	sth	r3,12(r5)
10007974:	2088703a 	and	r4,r4,r2
10007978:	29001915 	stw	r4,100(r5)
1000797c:	1805883a 	mov	r2,r3
10007980:	1900020c 	andi	r4,r3,8
10007984:	2000a726 	beq	r4,zero,10007c24 <___vfiprintf_internal_r+0x320>
10007988:	d9412017 	ldw	r5,1152(sp)
1000798c:	29000417 	ldw	r4,16(r5)
10007990:	2000a426 	beq	r4,zero,10007c24 <___vfiprintf_internal_r+0x320>
10007994:	18c0068c 	andi	r3,r3,26
10007998:	01000284 	movi	r4,10
1000799c:	1900ad26 	beq	r3,r4,10007c54 <___vfiprintf_internal_r+0x350>
100079a0:	d90109c4 	addi	r4,sp,1063
100079a4:	d9410a04 	addi	r5,sp,1064
100079a8:	2905c83a 	sub	r2,r5,r4
100079ac:	d9011e15 	stw	r4,1144(sp)
100079b0:	d9411f15 	stw	r5,1148(sp)
100079b4:	dec11a15 	stw	sp,1128(sp)
100079b8:	d8011c15 	stw	zero,1136(sp)
100079bc:	d8011b15 	stw	zero,1132(sp)
100079c0:	d8012715 	stw	zero,1180(sp)
100079c4:	d8012415 	stw	zero,1168(sp)
100079c8:	d811883a 	mov	r8,sp
100079cc:	04c40074 	movhi	r19,4097
100079d0:	9cc02304 	addi	r19,r19,140
100079d4:	04040074 	movhi	r16,4097
100079d8:	84001f04 	addi	r16,r16,124
100079dc:	d8812815 	stw	r2,1184(sp)
100079e0:	48800007 	ldb	r2,0(r9)
100079e4:	10040126 	beq	r2,zero,100089ec <___vfiprintf_internal_r+0x10e8>
100079e8:	00c00944 	movi	r3,37
100079ec:	4829883a 	mov	r20,r9
100079f0:	10c0021e 	bne	r2,r3,100079fc <___vfiprintf_internal_r+0xf8>
100079f4:	00001606 	br	10007a50 <___vfiprintf_internal_r+0x14c>
100079f8:	10c00326 	beq	r2,r3,10007a08 <___vfiprintf_internal_r+0x104>
100079fc:	a5000044 	addi	r20,r20,1
10007a00:	a0800007 	ldb	r2,0(r20)
10007a04:	103ffc1e 	bne	r2,zero,100079f8 <__alt_data_end+0xf80079f8>
10007a08:	a263c83a 	sub	r17,r20,r9
10007a0c:	88001026 	beq	r17,zero,10007a50 <___vfiprintf_internal_r+0x14c>
10007a10:	d8c11c17 	ldw	r3,1136(sp)
10007a14:	d8811b17 	ldw	r2,1132(sp)
10007a18:	42400015 	stw	r9,0(r8)
10007a1c:	88c7883a 	add	r3,r17,r3
10007a20:	10800044 	addi	r2,r2,1
10007a24:	44400115 	stw	r17,4(r8)
10007a28:	d8c11c15 	stw	r3,1136(sp)
10007a2c:	d8811b15 	stw	r2,1132(sp)
10007a30:	010001c4 	movi	r4,7
10007a34:	2080760e 	bge	r4,r2,10007c10 <___vfiprintf_internal_r+0x30c>
10007a38:	1803b41e 	bne	r3,zero,1000890c <___vfiprintf_internal_r+0x1008>
10007a3c:	d8c12417 	ldw	r3,1168(sp)
10007a40:	d8011b15 	stw	zero,1132(sp)
10007a44:	d811883a 	mov	r8,sp
10007a48:	1c47883a 	add	r3,r3,r17
10007a4c:	d8c12415 	stw	r3,1168(sp)
10007a50:	a0800007 	ldb	r2,0(r20)
10007a54:	1002dc26 	beq	r2,zero,100085c8 <___vfiprintf_internal_r+0xcc4>
10007a58:	04bfffc4 	movi	r18,-1
10007a5c:	a2400044 	addi	r9,r20,1
10007a60:	a0c00047 	ldb	r3,1(r20)
10007a64:	d8011d85 	stb	zero,1142(sp)
10007a68:	002d883a 	mov	r22,zero
10007a6c:	d8012115 	stw	zero,1156(sp)
10007a70:	0023883a 	mov	r17,zero
10007a74:	05001604 	movi	r20,88
10007a78:	05400244 	movi	r21,9
10007a7c:	402f883a 	mov	r23,r8
10007a80:	900d883a 	mov	r6,r18
10007a84:	4a400044 	addi	r9,r9,1
10007a88:	18bff804 	addi	r2,r3,-32
10007a8c:	a0828736 	bltu	r20,r2,100084ac <___vfiprintf_internal_r+0xba8>
10007a90:	1085883a 	add	r2,r2,r2
10007a94:	1085883a 	add	r2,r2,r2
10007a98:	01040034 	movhi	r4,4096
10007a9c:	211eab04 	addi	r4,r4,31404
10007aa0:	1105883a 	add	r2,r2,r4
10007aa4:	10800017 	ldw	r2,0(r2)
10007aa8:	1000683a 	jmp	r2
10007aac:	1000820c 	andi	zero,r2,520
10007ab0:	100084ac 	andhi	zero,r2,530
10007ab4:	100084ac 	andhi	zero,r2,530
10007ab8:	10008228 	cmpgeui	zero,r2,520
10007abc:	100084ac 	andhi	zero,r2,530
10007ac0:	100084ac 	andhi	zero,r2,530
10007ac4:	100084ac 	andhi	zero,r2,530
10007ac8:	100084ac 	andhi	zero,r2,530
10007acc:	100084ac 	andhi	zero,r2,530
10007ad0:	100084ac 	andhi	zero,r2,530
10007ad4:	100082bc 	xorhi	zero,r2,522
10007ad8:	100082e4 	muli	zero,r2,523
10007adc:	100084ac 	andhi	zero,r2,530
10007ae0:	10007d50 	cmplti	zero,r2,501
10007ae4:	100082f0 	cmpltui	zero,r2,523
10007ae8:	100084ac 	andhi	zero,r2,530
10007aec:	10007d5c 	xori	zero,r2,501
10007af0:	10007d68 	cmpgeui	zero,r2,501
10007af4:	10007d68 	cmpgeui	zero,r2,501
10007af8:	10007d68 	cmpgeui	zero,r2,501
10007afc:	10007d68 	cmpgeui	zero,r2,501
10007b00:	10007d68 	cmpgeui	zero,r2,501
10007b04:	10007d68 	cmpgeui	zero,r2,501
10007b08:	10007d68 	cmpgeui	zero,r2,501
10007b0c:	10007d68 	cmpgeui	zero,r2,501
10007b10:	10007d68 	cmpgeui	zero,r2,501
10007b14:	100084ac 	andhi	zero,r2,530
10007b18:	100084ac 	andhi	zero,r2,530
10007b1c:	100084ac 	andhi	zero,r2,530
10007b20:	100084ac 	andhi	zero,r2,530
10007b24:	100084ac 	andhi	zero,r2,530
10007b28:	100084ac 	andhi	zero,r2,530
10007b2c:	100084ac 	andhi	zero,r2,530
10007b30:	100084ac 	andhi	zero,r2,530
10007b34:	100084ac 	andhi	zero,r2,530
10007b38:	100084ac 	andhi	zero,r2,530
10007b3c:	10007db0 	cmpltui	zero,r2,502
10007b40:	100084ac 	andhi	zero,r2,530
10007b44:	100084ac 	andhi	zero,r2,530
10007b48:	100084ac 	andhi	zero,r2,530
10007b4c:	100084ac 	andhi	zero,r2,530
10007b50:	100084ac 	andhi	zero,r2,530
10007b54:	100084ac 	andhi	zero,r2,530
10007b58:	100084ac 	andhi	zero,r2,530
10007b5c:	100084ac 	andhi	zero,r2,530
10007b60:	100084ac 	andhi	zero,r2,530
10007b64:	100084ac 	andhi	zero,r2,530
10007b68:	10008104 	addi	zero,r2,516
10007b6c:	100084ac 	andhi	zero,r2,530
10007b70:	100084ac 	andhi	zero,r2,530
10007b74:	100084ac 	andhi	zero,r2,530
10007b78:	100084ac 	andhi	zero,r2,530
10007b7c:	100084ac 	andhi	zero,r2,530
10007b80:	10008148 	cmpgei	zero,r2,517
10007b84:	100084ac 	andhi	zero,r2,530
10007b88:	100084ac 	andhi	zero,r2,530
10007b8c:	10008180 	call	11000818 <_gp+0xfe6b9c>
10007b90:	100084ac 	andhi	zero,r2,530
10007b94:	100084ac 	andhi	zero,r2,530
10007b98:	100084ac 	andhi	zero,r2,530
10007b9c:	100084ac 	andhi	zero,r2,530
10007ba0:	100084ac 	andhi	zero,r2,530
10007ba4:	100084ac 	andhi	zero,r2,530
10007ba8:	100084ac 	andhi	zero,r2,530
10007bac:	100084ac 	andhi	zero,r2,530
10007bb0:	100084ac 	andhi	zero,r2,530
10007bb4:	100084ac 	andhi	zero,r2,530
10007bb8:	100081dc 	xori	zero,r2,519
10007bbc:	10008350 	cmplti	zero,r2,525
10007bc0:	100084ac 	andhi	zero,r2,530
10007bc4:	100084ac 	andhi	zero,r2,530
10007bc8:	100084ac 	andhi	zero,r2,530
10007bcc:	10008344 	addi	zero,r2,525
10007bd0:	10008350 	cmplti	zero,r2,525
10007bd4:	100084ac 	andhi	zero,r2,530
10007bd8:	100084ac 	andhi	zero,r2,530
10007bdc:	10008234 	orhi	zero,r2,520
10007be0:	100084ac 	andhi	zero,r2,530
10007be4:	1000824c 	andi	zero,r2,521
10007be8:	10008284 	addi	zero,r2,522
10007bec:	10008464 	muli	zero,r2,529
10007bf0:	10008388 	cmpgei	zero,r2,526
10007bf4:	100084ac 	andhi	zero,r2,530
10007bf8:	10008394 	ori	zero,r2,526
10007bfc:	100084ac 	andhi	zero,r2,530
10007c00:	100083ec 	andhi	zero,r2,527
10007c04:	100084ac 	andhi	zero,r2,530
10007c08:	100084ac 	andhi	zero,r2,530
10007c0c:	10008424 	muli	zero,r2,528
10007c10:	42000204 	addi	r8,r8,8
10007c14:	d8c12417 	ldw	r3,1168(sp)
10007c18:	1c47883a 	add	r3,r3,r17
10007c1c:	d8c12415 	stw	r3,1168(sp)
10007c20:	003f8b06 	br	10007a50 <__alt_data_end+0xf8007a50>
10007c24:	d9012217 	ldw	r4,1160(sp)
10007c28:	d9412017 	ldw	r5,1152(sp)
10007c2c:	da412d15 	stw	r9,1204(sp)
10007c30:	000321c0 	call	1000321c <__swsetup_r>
10007c34:	da412d17 	ldw	r9,1204(sp)
10007c38:	1000301e 	bne	r2,zero,10007cfc <___vfiprintf_internal_r+0x3f8>
10007c3c:	d8c12017 	ldw	r3,1152(sp)
10007c40:	01000284 	movi	r4,10
10007c44:	1880030b 	ldhu	r2,12(r3)
10007c48:	1007883a 	mov	r3,r2
10007c4c:	18c0068c 	andi	r3,r3,26
10007c50:	193f531e 	bne	r3,r4,100079a0 <__alt_data_end+0xf80079a0>
10007c54:	d9012017 	ldw	r4,1152(sp)
10007c58:	20c0038b 	ldhu	r3,14(r4)
10007c5c:	193fffcc 	andi	r4,r3,65535
10007c60:	2120001c 	xori	r4,r4,32768
10007c64:	21200004 	addi	r4,r4,-32768
10007c68:	203f4d16 	blt	r4,zero,100079a0 <__alt_data_end+0xf80079a0>
10007c6c:	d9412017 	ldw	r5,1152(sp)
10007c70:	d9012217 	ldw	r4,1160(sp)
10007c74:	d9c12317 	ldw	r7,1164(sp)
10007c78:	2b001917 	ldw	r12,100(r5)
10007c7c:	2ac00717 	ldw	r11,28(r5)
10007c80:	2a800917 	ldw	r10,36(r5)
10007c84:	02010004 	movi	r8,1024
10007c88:	10bfff4c 	andi	r2,r2,65533
10007c8c:	da0b883a 	add	r5,sp,r8
10007c90:	480d883a 	mov	r6,r9
10007c94:	d881030d 	sth	r2,1036(sp)
10007c98:	db011915 	stw	r12,1124(sp)
10007c9c:	d8c1038d 	sth	r3,1038(sp)
10007ca0:	dac10715 	stw	r11,1052(sp)
10007ca4:	da810915 	stw	r10,1060(sp)
10007ca8:	dec10015 	stw	sp,1024(sp)
10007cac:	dec10415 	stw	sp,1040(sp)
10007cb0:	da010215 	stw	r8,1032(sp)
10007cb4:	da010515 	stw	r8,1044(sp)
10007cb8:	d8010615 	stw	zero,1048(sp)
10007cbc:	00079040 	call	10007904 <___vfiprintf_internal_r>
10007cc0:	1021883a 	mov	r16,r2
10007cc4:	10000416 	blt	r2,zero,10007cd8 <___vfiprintf_internal_r+0x3d4>
10007cc8:	d9012217 	ldw	r4,1160(sp)
10007ccc:	d9410004 	addi	r5,sp,1024
10007cd0:	0004bb80 	call	10004bb8 <_fflush_r>
10007cd4:	10040b1e 	bne	r2,zero,10008d04 <___vfiprintf_internal_r+0x1400>
10007cd8:	d881030b 	ldhu	r2,1036(sp)
10007cdc:	1080100c 	andi	r2,r2,64
10007ce0:	10000426 	beq	r2,zero,10007cf4 <___vfiprintf_internal_r+0x3f0>
10007ce4:	d8c12017 	ldw	r3,1152(sp)
10007ce8:	1880030b 	ldhu	r2,12(r3)
10007cec:	10801014 	ori	r2,r2,64
10007cf0:	1880030d 	sth	r2,12(r3)
10007cf4:	8005883a 	mov	r2,r16
10007cf8:	00000106 	br	10007d00 <___vfiprintf_internal_r+0x3fc>
10007cfc:	00bfffc4 	movi	r2,-1
10007d00:	dfc13717 	ldw	ra,1244(sp)
10007d04:	df013617 	ldw	fp,1240(sp)
10007d08:	ddc13517 	ldw	r23,1236(sp)
10007d0c:	dd813417 	ldw	r22,1232(sp)
10007d10:	dd413317 	ldw	r21,1228(sp)
10007d14:	dd013217 	ldw	r20,1224(sp)
10007d18:	dcc13117 	ldw	r19,1220(sp)
10007d1c:	dc813017 	ldw	r18,1216(sp)
10007d20:	dc412f17 	ldw	r17,1212(sp)
10007d24:	dc012e17 	ldw	r16,1208(sp)
10007d28:	dec13804 	addi	sp,sp,1248
10007d2c:	f800283a 	ret
10007d30:	d9812d15 	stw	r6,1204(sp)
10007d34:	0004ed80 	call	10004ed8 <__sinit>
10007d38:	da412d17 	ldw	r9,1204(sp)
10007d3c:	003f0306 	br	1000794c <__alt_data_end+0xf800794c>
10007d40:	d9412117 	ldw	r5,1156(sp)
10007d44:	d8812315 	stw	r2,1164(sp)
10007d48:	014bc83a 	sub	r5,zero,r5
10007d4c:	d9412115 	stw	r5,1156(sp)
10007d50:	8c400114 	ori	r17,r17,4
10007d54:	48c00007 	ldb	r3,0(r9)
10007d58:	003f4a06 	br	10007a84 <__alt_data_end+0xf8007a84>
10007d5c:	8c402014 	ori	r17,r17,128
10007d60:	48c00007 	ldb	r3,0(r9)
10007d64:	003f4706 	br	10007a84 <__alt_data_end+0xf8007a84>
10007d68:	4825883a 	mov	r18,r9
10007d6c:	d8012115 	stw	zero,1156(sp)
10007d70:	1f3ff404 	addi	fp,r3,-48
10007d74:	00000106 	br	10007d7c <___vfiprintf_internal_r+0x478>
10007d78:	1025883a 	mov	r18,r2
10007d7c:	d9012117 	ldw	r4,1156(sp)
10007d80:	01400284 	movi	r5,10
10007d84:	d9812b15 	stw	r6,1196(sp)
10007d88:	000b0780 	call	1000b078 <__mulsi3>
10007d8c:	90c00007 	ldb	r3,0(r18)
10007d90:	1739883a 	add	fp,r2,fp
10007d94:	df012115 	stw	fp,1156(sp)
10007d98:	90800044 	addi	r2,r18,1
10007d9c:	1f3ff404 	addi	fp,r3,-48
10007da0:	1013883a 	mov	r9,r2
10007da4:	d9812b17 	ldw	r6,1196(sp)
10007da8:	af3ff32e 	bgeu	r21,fp,10007d78 <__alt_data_end+0xf8007d78>
10007dac:	003f3606 	br	10007a88 <__alt_data_end+0xf8007a88>
10007db0:	8c400414 	ori	r17,r17,16
10007db4:	dd811d85 	stb	r22,1142(sp)
10007db8:	8880080c 	andi	r2,r17,32
10007dbc:	b811883a 	mov	r8,r23
10007dc0:	3025883a 	mov	r18,r6
10007dc4:	10016726 	beq	r2,zero,10008364 <___vfiprintf_internal_r+0xa60>
10007dc8:	d8c12317 	ldw	r3,1164(sp)
10007dcc:	18800117 	ldw	r2,4(r3)
10007dd0:	1d000017 	ldw	r20,0(r3)
10007dd4:	18c00204 	addi	r3,r3,8
10007dd8:	d8c12315 	stw	r3,1164(sp)
10007ddc:	102b883a 	mov	r21,r2
10007de0:	10030416 	blt	r2,zero,100089f4 <___vfiprintf_internal_r+0x10f0>
10007de4:	dd811d83 	ldbu	r22,1142(sp)
10007de8:	900f883a 	mov	r7,r18
10007dec:	00800044 	movi	r2,1
10007df0:	a548b03a 	or	r4,r20,r21
10007df4:	90000216 	blt	r18,zero,10007e00 <___vfiprintf_internal_r+0x4fc>
10007df8:	00ffdfc4 	movi	r3,-129
10007dfc:	88e2703a 	and	r17,r17,r3
10007e00:	10803fcc 	andi	r2,r2,255
10007e04:	2001db1e 	bne	r4,zero,10008574 <___vfiprintf_internal_r+0xc70>
10007e08:	9001da1e 	bne	r18,zero,10008574 <___vfiprintf_internal_r+0xc70>
10007e0c:	1002ab1e 	bne	r2,zero,100088bc <___vfiprintf_internal_r+0xfb8>
10007e10:	8880004c 	andi	r2,r17,1
10007e14:	1002a926 	beq	r2,zero,100088bc <___vfiprintf_internal_r+0xfb8>
10007e18:	d9c12817 	ldw	r7,1184(sp)
10007e1c:	00800c04 	movi	r2,48
10007e20:	d88109c5 	stb	r2,1063(sp)
10007e24:	ddc109c4 	addi	r23,sp,1063
10007e28:	3829883a 	mov	r20,r7
10007e2c:	3c80010e 	bge	r7,r18,10007e34 <___vfiprintf_internal_r+0x530>
10007e30:	9029883a 	mov	r20,r18
10007e34:	b5803fcc 	andi	r22,r22,255
10007e38:	b580201c 	xori	r22,r22,128
10007e3c:	b5bfe004 	addi	r22,r22,-128
10007e40:	b0000126 	beq	r22,zero,10007e48 <___vfiprintf_internal_r+0x544>
10007e44:	a5000044 	addi	r20,r20,1
10007e48:	8a80008c 	andi	r10,r17,2
10007e4c:	50000126 	beq	r10,zero,10007e54 <___vfiprintf_internal_r+0x550>
10007e50:	a5000084 	addi	r20,r20,2
10007e54:	8d40210c 	andi	r21,r17,132
10007e58:	a801aa1e 	bne	r21,zero,10008504 <___vfiprintf_internal_r+0xc00>
10007e5c:	d8c12117 	ldw	r3,1156(sp)
10007e60:	1d2dc83a 	sub	r22,r3,r20
10007e64:	0581a70e 	bge	zero,r22,10008504 <___vfiprintf_internal_r+0xc00>
10007e68:	07000404 	movi	fp,16
10007e6c:	d8c11c17 	ldw	r3,1136(sp)
10007e70:	e583780e 	bge	fp,r22,10008c54 <___vfiprintf_internal_r+0x1350>
10007e74:	01440074 	movhi	r5,4097
10007e78:	29402304 	addi	r5,r5,140
10007e7c:	dc412615 	stw	r17,1176(sp)
10007e80:	d9011b17 	ldw	r4,1132(sp)
10007e84:	b023883a 	mov	r17,r22
10007e88:	d9412515 	stw	r5,1172(sp)
10007e8c:	030001c4 	movi	r12,7
10007e90:	d9c12915 	stw	r7,1188(sp)
10007e94:	da812a15 	stw	r10,1192(sp)
10007e98:	482d883a 	mov	r22,r9
10007e9c:	00000506 	br	10007eb4 <___vfiprintf_internal_r+0x5b0>
10007ea0:	21400084 	addi	r5,r4,2
10007ea4:	42000204 	addi	r8,r8,8
10007ea8:	1009883a 	mov	r4,r2
10007eac:	8c7ffc04 	addi	r17,r17,-16
10007eb0:	e4400d0e 	bge	fp,r17,10007ee8 <___vfiprintf_internal_r+0x5e4>
10007eb4:	18c00404 	addi	r3,r3,16
10007eb8:	20800044 	addi	r2,r4,1
10007ebc:	44c00015 	stw	r19,0(r8)
10007ec0:	47000115 	stw	fp,4(r8)
10007ec4:	d8c11c15 	stw	r3,1136(sp)
10007ec8:	d8811b15 	stw	r2,1132(sp)
10007ecc:	60bff40e 	bge	r12,r2,10007ea0 <__alt_data_end+0xf8007ea0>
10007ed0:	1801801e 	bne	r3,zero,100084d4 <___vfiprintf_internal_r+0xbd0>
10007ed4:	8c7ffc04 	addi	r17,r17,-16
10007ed8:	0009883a 	mov	r4,zero
10007edc:	01400044 	movi	r5,1
10007ee0:	d811883a 	mov	r8,sp
10007ee4:	e47ff316 	blt	fp,r17,10007eb4 <__alt_data_end+0xf8007eb4>
10007ee8:	b013883a 	mov	r9,r22
10007eec:	d9c12917 	ldw	r7,1188(sp)
10007ef0:	882d883a 	mov	r22,r17
10007ef4:	da812a17 	ldw	r10,1192(sp)
10007ef8:	dc412617 	ldw	r17,1176(sp)
10007efc:	d8812517 	ldw	r2,1172(sp)
10007f00:	b0c7883a 	add	r3,r22,r3
10007f04:	45800115 	stw	r22,4(r8)
10007f08:	40800015 	stw	r2,0(r8)
10007f0c:	d8c11c15 	stw	r3,1136(sp)
10007f10:	d9411b15 	stw	r5,1132(sp)
10007f14:	008001c4 	movi	r2,7
10007f18:	11426a16 	blt	r2,r5,100088c4 <___vfiprintf_internal_r+0xfc0>
10007f1c:	d9011d87 	ldb	r4,1142(sp)
10007f20:	42000204 	addi	r8,r8,8
10007f24:	28800044 	addi	r2,r5,1
10007f28:	20017b1e 	bne	r4,zero,10008518 <___vfiprintf_internal_r+0xc14>
10007f2c:	50000c26 	beq	r10,zero,10007f60 <___vfiprintf_internal_r+0x65c>
10007f30:	d9011d04 	addi	r4,sp,1140
10007f34:	18c00084 	addi	r3,r3,2
10007f38:	41000015 	stw	r4,0(r8)
10007f3c:	01000084 	movi	r4,2
10007f40:	41000115 	stw	r4,4(r8)
10007f44:	d8c11c15 	stw	r3,1136(sp)
10007f48:	d8811b15 	stw	r2,1132(sp)
10007f4c:	010001c4 	movi	r4,7
10007f50:	20821716 	blt	r4,r2,100087b0 <___vfiprintf_internal_r+0xeac>
10007f54:	100b883a 	mov	r5,r2
10007f58:	42000204 	addi	r8,r8,8
10007f5c:	10800044 	addi	r2,r2,1
10007f60:	01002004 	movi	r4,128
10007f64:	a901d126 	beq	r21,r4,100086ac <___vfiprintf_internal_r+0xda8>
10007f68:	91e5c83a 	sub	r18,r18,r7
10007f6c:	0480290e 	bge	zero,r18,10008014 <___vfiprintf_internal_r+0x710>
10007f70:	05800404 	movi	r22,16
10007f74:	05440074 	movhi	r21,4097
10007f78:	ad401f04 	addi	r21,r21,124
10007f7c:	b4801c0e 	bge	r22,r18,10007ff0 <___vfiprintf_internal_r+0x6ec>
10007f80:	dc412515 	stw	r17,1172(sp)
10007f84:	070001c4 	movi	fp,7
10007f88:	9023883a 	mov	r17,r18
10007f8c:	d9c12615 	stw	r7,1176(sp)
10007f90:	4825883a 	mov	r18,r9
10007f94:	00000506 	br	10007fac <___vfiprintf_internal_r+0x6a8>
10007f98:	28800084 	addi	r2,r5,2
10007f9c:	42000204 	addi	r8,r8,8
10007fa0:	200b883a 	mov	r5,r4
10007fa4:	8c7ffc04 	addi	r17,r17,-16
10007fa8:	b4400d0e 	bge	r22,r17,10007fe0 <___vfiprintf_internal_r+0x6dc>
10007fac:	18c00404 	addi	r3,r3,16
10007fb0:	29000044 	addi	r4,r5,1
10007fb4:	44000015 	stw	r16,0(r8)
10007fb8:	45800115 	stw	r22,4(r8)
10007fbc:	d8c11c15 	stw	r3,1136(sp)
10007fc0:	d9011b15 	stw	r4,1132(sp)
10007fc4:	e13ff40e 	bge	fp,r4,10007f98 <__alt_data_end+0xf8007f98>
10007fc8:	1801601e 	bne	r3,zero,1000854c <___vfiprintf_internal_r+0xc48>
10007fcc:	8c7ffc04 	addi	r17,r17,-16
10007fd0:	000b883a 	mov	r5,zero
10007fd4:	00800044 	movi	r2,1
10007fd8:	d811883a 	mov	r8,sp
10007fdc:	b47ff316 	blt	r22,r17,10007fac <__alt_data_end+0xf8007fac>
10007fe0:	9013883a 	mov	r9,r18
10007fe4:	d9c12617 	ldw	r7,1176(sp)
10007fe8:	8825883a 	mov	r18,r17
10007fec:	dc412517 	ldw	r17,1172(sp)
10007ff0:	1c87883a 	add	r3,r3,r18
10007ff4:	45400015 	stw	r21,0(r8)
10007ff8:	44800115 	stw	r18,4(r8)
10007ffc:	d8c11c15 	stw	r3,1136(sp)
10008000:	d8811b15 	stw	r2,1132(sp)
10008004:	010001c4 	movi	r4,7
10008008:	20819e16 	blt	r4,r2,10008684 <___vfiprintf_internal_r+0xd80>
1000800c:	42000204 	addi	r8,r8,8
10008010:	10800044 	addi	r2,r2,1
10008014:	38c7883a 	add	r3,r7,r3
10008018:	45c00015 	stw	r23,0(r8)
1000801c:	41c00115 	stw	r7,4(r8)
10008020:	d8c11c15 	stw	r3,1136(sp)
10008024:	d8811b15 	stw	r2,1132(sp)
10008028:	010001c4 	movi	r4,7
1000802c:	20819d0e 	bge	r4,r2,100086a4 <___vfiprintf_internal_r+0xda0>
10008030:	1802291e 	bne	r3,zero,100088d8 <___vfiprintf_internal_r+0xfd4>
10008034:	d8011b15 	stw	zero,1132(sp)
10008038:	d811883a 	mov	r8,sp
1000803c:	8c40010c 	andi	r17,r17,4
10008040:	88017526 	beq	r17,zero,10008618 <___vfiprintf_internal_r+0xd14>
10008044:	d9412117 	ldw	r5,1156(sp)
10008048:	2d23c83a 	sub	r17,r5,r20
1000804c:	0441720e 	bge	zero,r17,10008618 <___vfiprintf_internal_r+0xd14>
10008050:	04800404 	movi	r18,16
10008054:	9443170e 	bge	r18,r17,10008cb4 <___vfiprintf_internal_r+0x13b0>
10008058:	01440074 	movhi	r5,4097
1000805c:	29402304 	addi	r5,r5,140
10008060:	d9011b17 	ldw	r4,1132(sp)
10008064:	d9412515 	stw	r5,1172(sp)
10008068:	058001c4 	movi	r22,7
1000806c:	dd412217 	ldw	r21,1160(sp)
10008070:	ddc12017 	ldw	r23,1152(sp)
10008074:	4839883a 	mov	fp,r9
10008078:	00000506 	br	10008090 <___vfiprintf_internal_r+0x78c>
1000807c:	21400084 	addi	r5,r4,2
10008080:	42000204 	addi	r8,r8,8
10008084:	1009883a 	mov	r4,r2
10008088:	8c7ffc04 	addi	r17,r17,-16
1000808c:	94400d0e 	bge	r18,r17,100080c4 <___vfiprintf_internal_r+0x7c0>
10008090:	18c00404 	addi	r3,r3,16
10008094:	20800044 	addi	r2,r4,1
10008098:	44c00015 	stw	r19,0(r8)
1000809c:	44800115 	stw	r18,4(r8)
100080a0:	d8c11c15 	stw	r3,1136(sp)
100080a4:	d8811b15 	stw	r2,1132(sp)
100080a8:	b0bff40e 	bge	r22,r2,1000807c <__alt_data_end+0xf800807c>
100080ac:	18016b1e 	bne	r3,zero,1000865c <___vfiprintf_internal_r+0xd58>
100080b0:	8c7ffc04 	addi	r17,r17,-16
100080b4:	0009883a 	mov	r4,zero
100080b8:	01400044 	movi	r5,1
100080bc:	d811883a 	mov	r8,sp
100080c0:	947ff316 	blt	r18,r17,10008090 <__alt_data_end+0xf8008090>
100080c4:	e013883a 	mov	r9,fp
100080c8:	d8812517 	ldw	r2,1172(sp)
100080cc:	1c47883a 	add	r3,r3,r17
100080d0:	44400115 	stw	r17,4(r8)
100080d4:	40800015 	stw	r2,0(r8)
100080d8:	d8c11c15 	stw	r3,1136(sp)
100080dc:	d9411b15 	stw	r5,1132(sp)
100080e0:	008001c4 	movi	r2,7
100080e4:	11414c0e 	bge	r2,r5,10008618 <___vfiprintf_internal_r+0xd14>
100080e8:	1801431e 	bne	r3,zero,100085f8 <___vfiprintf_internal_r+0xcf4>
100080ec:	d8c12117 	ldw	r3,1156(sp)
100080f0:	a0c28e16 	blt	r20,r3,10008b2c <___vfiprintf_internal_r+0x1228>
100080f4:	d9012417 	ldw	r4,1168(sp)
100080f8:	2509883a 	add	r4,r4,r20
100080fc:	d9012415 	stw	r4,1168(sp)
10008100:	00015306 	br	10008650 <___vfiprintf_internal_r+0xd4c>
10008104:	8c400414 	ori	r17,r17,16
10008108:	8880080c 	andi	r2,r17,32
1000810c:	b811883a 	mov	r8,r23
10008110:	3025883a 	mov	r18,r6
10008114:	10005f26 	beq	r2,zero,10008294 <___vfiprintf_internal_r+0x990>
10008118:	d8812317 	ldw	r2,1164(sp)
1000811c:	d8c12317 	ldw	r3,1164(sp)
10008120:	15000017 	ldw	r20,0(r2)
10008124:	15400117 	ldw	r21,4(r2)
10008128:	18c00204 	addi	r3,r3,8
1000812c:	0005883a 	mov	r2,zero
10008130:	d8c12315 	stw	r3,1164(sp)
10008134:	a548b03a 	or	r4,r20,r21
10008138:	d8011d85 	stb	zero,1142(sp)
1000813c:	900f883a 	mov	r7,r18
10008140:	002d883a 	mov	r22,zero
10008144:	003f2b06 	br	10007df4 <__alt_data_end+0xf8007df4>
10008148:	8c400414 	ori	r17,r17,16
1000814c:	8880080c 	andi	r2,r17,32
10008150:	b811883a 	mov	r8,r23
10008154:	3025883a 	mov	r18,r6
10008158:	1000a826 	beq	r2,zero,100083fc <___vfiprintf_internal_r+0xaf8>
1000815c:	d8812317 	ldw	r2,1164(sp)
10008160:	d8c12317 	ldw	r3,1164(sp)
10008164:	15000017 	ldw	r20,0(r2)
10008168:	15400117 	ldw	r21,4(r2)
1000816c:	18c00204 	addi	r3,r3,8
10008170:	00800044 	movi	r2,1
10008174:	d8c12315 	stw	r3,1164(sp)
10008178:	a548b03a 	or	r4,r20,r21
1000817c:	003fee06 	br	10008138 <__alt_data_end+0xf8008138>
10008180:	01440074 	movhi	r5,4097
10008184:	297fb904 	addi	r5,r5,-284
10008188:	dd811d85 	stb	r22,1142(sp)
1000818c:	d9412715 	stw	r5,1180(sp)
10008190:	8880080c 	andi	r2,r17,32
10008194:	b811883a 	mov	r8,r23
10008198:	3025883a 	mov	r18,r6
1000819c:	1000a926 	beq	r2,zero,10008444 <___vfiprintf_internal_r+0xb40>
100081a0:	d9412317 	ldw	r5,1164(sp)
100081a4:	2d000017 	ldw	r20,0(r5)
100081a8:	2d400117 	ldw	r21,4(r5)
100081ac:	29400204 	addi	r5,r5,8
100081b0:	d9412315 	stw	r5,1164(sp)
100081b4:	8880004c 	andi	r2,r17,1
100081b8:	1001d126 	beq	r2,zero,10008900 <___vfiprintf_internal_r+0xffc>
100081bc:	a548b03a 	or	r4,r20,r21
100081c0:	20021626 	beq	r4,zero,10008a1c <___vfiprintf_internal_r+0x1118>
100081c4:	00800c04 	movi	r2,48
100081c8:	d8811d05 	stb	r2,1140(sp)
100081cc:	d8c11d45 	stb	r3,1141(sp)
100081d0:	8c400094 	ori	r17,r17,2
100081d4:	00800084 	movi	r2,2
100081d8:	003fd706 	br	10008138 <__alt_data_end+0xf8008138>
100081dc:	d9412317 	ldw	r5,1164(sp)
100081e0:	05000044 	movi	r20,1
100081e4:	b811883a 	mov	r8,r23
100081e8:	28800017 	ldw	r2,0(r5)
100081ec:	29400104 	addi	r5,r5,4
100081f0:	d8011d85 	stb	zero,1142(sp)
100081f4:	d8810005 	stb	r2,1024(sp)
100081f8:	d9412315 	stw	r5,1164(sp)
100081fc:	a00f883a 	mov	r7,r20
10008200:	ddc10004 	addi	r23,sp,1024
10008204:	0025883a 	mov	r18,zero
10008208:	003f0f06 	br	10007e48 <__alt_data_end+0xf8007e48>
1000820c:	b0803fcc 	andi	r2,r22,255
10008210:	1080201c 	xori	r2,r2,128
10008214:	10bfe004 	addi	r2,r2,-128
10008218:	10021f1e 	bne	r2,zero,10008a98 <___vfiprintf_internal_r+0x1194>
1000821c:	05800804 	movi	r22,32
10008220:	48c00007 	ldb	r3,0(r9)
10008224:	003e1706 	br	10007a84 <__alt_data_end+0xf8007a84>
10008228:	8c400054 	ori	r17,r17,1
1000822c:	48c00007 	ldb	r3,0(r9)
10008230:	003e1406 	br	10007a84 <__alt_data_end+0xf8007a84>
10008234:	48c00007 	ldb	r3,0(r9)
10008238:	01001b04 	movi	r4,108
1000823c:	4805883a 	mov	r2,r9
10008240:	19026526 	beq	r3,r4,10008bd8 <___vfiprintf_internal_r+0x12d4>
10008244:	8c400414 	ori	r17,r17,16
10008248:	003e0e06 	br	10007a84 <__alt_data_end+0xf8007a84>
1000824c:	dd811d85 	stb	r22,1142(sp)
10008250:	8880080c 	andi	r2,r17,32
10008254:	b811883a 	mov	r8,r23
10008258:	10020426 	beq	r2,zero,10008a6c <___vfiprintf_internal_r+0x1168>
1000825c:	d8c12317 	ldw	r3,1164(sp)
10008260:	d9012417 	ldw	r4,1168(sp)
10008264:	d9412317 	ldw	r5,1164(sp)
10008268:	18800017 	ldw	r2,0(r3)
1000826c:	2007d7fa 	srai	r3,r4,31
10008270:	29400104 	addi	r5,r5,4
10008274:	d9412315 	stw	r5,1164(sp)
10008278:	11000015 	stw	r4,0(r2)
1000827c:	10c00115 	stw	r3,4(r2)
10008280:	003dd706 	br	100079e0 <__alt_data_end+0xf80079e0>
10008284:	8880080c 	andi	r2,r17,32
10008288:	b811883a 	mov	r8,r23
1000828c:	3025883a 	mov	r18,r6
10008290:	103fa11e 	bne	r2,zero,10008118 <__alt_data_end+0xf8008118>
10008294:	8880040c 	andi	r2,r17,16
10008298:	1001ea26 	beq	r2,zero,10008a44 <___vfiprintf_internal_r+0x1140>
1000829c:	d9012317 	ldw	r4,1164(sp)
100082a0:	002b883a 	mov	r21,zero
100082a4:	0005883a 	mov	r2,zero
100082a8:	25000017 	ldw	r20,0(r4)
100082ac:	21000104 	addi	r4,r4,4
100082b0:	d9012315 	stw	r4,1164(sp)
100082b4:	a009883a 	mov	r4,r20
100082b8:	003f9f06 	br	10008138 <__alt_data_end+0xf8008138>
100082bc:	d8812317 	ldw	r2,1164(sp)
100082c0:	d8c12317 	ldw	r3,1164(sp)
100082c4:	10800017 	ldw	r2,0(r2)
100082c8:	d8812115 	stw	r2,1156(sp)
100082cc:	d9012117 	ldw	r4,1156(sp)
100082d0:	18800104 	addi	r2,r3,4
100082d4:	203e9a16 	blt	r4,zero,10007d40 <__alt_data_end+0xf8007d40>
100082d8:	d8812315 	stw	r2,1164(sp)
100082dc:	48c00007 	ldb	r3,0(r9)
100082e0:	003de806 	br	10007a84 <__alt_data_end+0xf8007a84>
100082e4:	05800ac4 	movi	r22,43
100082e8:	48c00007 	ldb	r3,0(r9)
100082ec:	003de506 	br	10007a84 <__alt_data_end+0xf8007a84>
100082f0:	48c00007 	ldb	r3,0(r9)
100082f4:	01000a84 	movi	r4,42
100082f8:	48800044 	addi	r2,r9,1
100082fc:	19028326 	beq	r3,r4,10008d0c <___vfiprintf_internal_r+0x1408>
10008300:	1f3ff404 	addi	fp,r3,-48
10008304:	af027a36 	bltu	r21,fp,10008cf0 <___vfiprintf_internal_r+0x13ec>
10008308:	1025883a 	mov	r18,r2
1000830c:	0009883a 	mov	r4,zero
10008310:	00000106 	br	10008318 <___vfiprintf_internal_r+0xa14>
10008314:	4825883a 	mov	r18,r9
10008318:	01400284 	movi	r5,10
1000831c:	000b0780 	call	1000b078 <__mulsi3>
10008320:	90c00007 	ldb	r3,0(r18)
10008324:	e089883a 	add	r4,fp,r2
10008328:	92400044 	addi	r9,r18,1
1000832c:	1f3ff404 	addi	fp,r3,-48
10008330:	af3ff82e 	bgeu	r21,fp,10008314 <__alt_data_end+0xf8008314>
10008334:	2025883a 	mov	r18,r4
10008338:	20022416 	blt	r4,zero,10008bcc <___vfiprintf_internal_r+0x12c8>
1000833c:	900d883a 	mov	r6,r18
10008340:	003dd106 	br	10007a88 <__alt_data_end+0xf8007a88>
10008344:	8c401014 	ori	r17,r17,64
10008348:	48c00007 	ldb	r3,0(r9)
1000834c:	003dcd06 	br	10007a84 <__alt_data_end+0xf8007a84>
10008350:	dd811d85 	stb	r22,1142(sp)
10008354:	8880080c 	andi	r2,r17,32
10008358:	b811883a 	mov	r8,r23
1000835c:	3025883a 	mov	r18,r6
10008360:	103e991e 	bne	r2,zero,10007dc8 <__alt_data_end+0xf8007dc8>
10008364:	8880040c 	andi	r2,r17,16
10008368:	1001d726 	beq	r2,zero,10008ac8 <___vfiprintf_internal_r+0x11c4>
1000836c:	d9012317 	ldw	r4,1164(sp)
10008370:	25000017 	ldw	r20,0(r4)
10008374:	21000104 	addi	r4,r4,4
10008378:	d9012315 	stw	r4,1164(sp)
1000837c:	a02bd7fa 	srai	r21,r20,31
10008380:	a805883a 	mov	r2,r21
10008384:	003e9606 	br	10007de0 <__alt_data_end+0xf8007de0>
10008388:	8c400814 	ori	r17,r17,32
1000838c:	48c00007 	ldb	r3,0(r9)
10008390:	003dbc06 	br	10007a84 <__alt_data_end+0xf8007a84>
10008394:	d9412317 	ldw	r5,1164(sp)
10008398:	b811883a 	mov	r8,r23
1000839c:	d8011d85 	stb	zero,1142(sp)
100083a0:	2dc00017 	ldw	r23,0(r5)
100083a4:	3025883a 	mov	r18,r6
100083a8:	2d400104 	addi	r21,r5,4
100083ac:	b8022f26 	beq	r23,zero,10008c6c <___vfiprintf_internal_r+0x1368>
100083b0:	b809883a 	mov	r4,r23
100083b4:	30020f16 	blt	r6,zero,10008bf4 <___vfiprintf_internal_r+0x12f0>
100083b8:	000b883a 	mov	r5,zero
100083bc:	da012b15 	stw	r8,1196(sp)
100083c0:	da412d15 	stw	r9,1204(sp)
100083c4:	00061880 	call	10006188 <memchr>
100083c8:	da012b17 	ldw	r8,1196(sp)
100083cc:	da412d17 	ldw	r9,1204(sp)
100083d0:	10024226 	beq	r2,zero,10008cdc <___vfiprintf_internal_r+0x13d8>
100083d4:	15cfc83a 	sub	r7,r2,r23
100083d8:	91c1d616 	blt	r18,r7,10008b34 <___vfiprintf_internal_r+0x1230>
100083dc:	dd811d83 	ldbu	r22,1142(sp)
100083e0:	dd412315 	stw	r21,1164(sp)
100083e4:	0025883a 	mov	r18,zero
100083e8:	003e8f06 	br	10007e28 <__alt_data_end+0xf8007e28>
100083ec:	8880080c 	andi	r2,r17,32
100083f0:	b811883a 	mov	r8,r23
100083f4:	3025883a 	mov	r18,r6
100083f8:	103f581e 	bne	r2,zero,1000815c <__alt_data_end+0xf800815c>
100083fc:	8880040c 	andi	r2,r17,16
10008400:	1001a726 	beq	r2,zero,10008aa0 <___vfiprintf_internal_r+0x119c>
10008404:	d9012317 	ldw	r4,1164(sp)
10008408:	002b883a 	mov	r21,zero
1000840c:	00800044 	movi	r2,1
10008410:	25000017 	ldw	r20,0(r4)
10008414:	21000104 	addi	r4,r4,4
10008418:	d9012315 	stw	r4,1164(sp)
1000841c:	a009883a 	mov	r4,r20
10008420:	003f4506 	br	10008138 <__alt_data_end+0xf8008138>
10008424:	01040074 	movhi	r4,4097
10008428:	213fbe04 	addi	r4,r4,-264
1000842c:	dd811d85 	stb	r22,1142(sp)
10008430:	d9012715 	stw	r4,1180(sp)
10008434:	8880080c 	andi	r2,r17,32
10008438:	b811883a 	mov	r8,r23
1000843c:	3025883a 	mov	r18,r6
10008440:	103f571e 	bne	r2,zero,100081a0 <__alt_data_end+0xf80081a0>
10008444:	8880040c 	andi	r2,r17,16
10008448:	10017626 	beq	r2,zero,10008a24 <___vfiprintf_internal_r+0x1120>
1000844c:	d8812317 	ldw	r2,1164(sp)
10008450:	002b883a 	mov	r21,zero
10008454:	15000017 	ldw	r20,0(r2)
10008458:	10800104 	addi	r2,r2,4
1000845c:	d8812315 	stw	r2,1164(sp)
10008460:	003f5406 	br	100081b4 <__alt_data_end+0xf80081b4>
10008464:	d8c12317 	ldw	r3,1164(sp)
10008468:	00800c04 	movi	r2,48
1000846c:	01040074 	movhi	r4,4097
10008470:	213fbe04 	addi	r4,r4,-264
10008474:	1d000017 	ldw	r20,0(r3)
10008478:	d8811d05 	stb	r2,1140(sp)
1000847c:	18c00104 	addi	r3,r3,4
10008480:	00801e04 	movi	r2,120
10008484:	d8811d45 	stb	r2,1141(sp)
10008488:	d9012715 	stw	r4,1180(sp)
1000848c:	b811883a 	mov	r8,r23
10008490:	3025883a 	mov	r18,r6
10008494:	002b883a 	mov	r21,zero
10008498:	8c400094 	ori	r17,r17,2
1000849c:	d8c12315 	stw	r3,1164(sp)
100084a0:	00800084 	movi	r2,2
100084a4:	a009883a 	mov	r4,r20
100084a8:	003f2306 	br	10008138 <__alt_data_end+0xf8008138>
100084ac:	dd811d85 	stb	r22,1142(sp)
100084b0:	b811883a 	mov	r8,r23
100084b4:	18004426 	beq	r3,zero,100085c8 <___vfiprintf_internal_r+0xcc4>
100084b8:	05000044 	movi	r20,1
100084bc:	d8c10005 	stb	r3,1024(sp)
100084c0:	d8011d85 	stb	zero,1142(sp)
100084c4:	a00f883a 	mov	r7,r20
100084c8:	ddc10004 	addi	r23,sp,1024
100084cc:	0025883a 	mov	r18,zero
100084d0:	003e5d06 	br	10007e48 <__alt_data_end+0xf8007e48>
100084d4:	d9012217 	ldw	r4,1160(sp)
100084d8:	d9412017 	ldw	r5,1152(sp)
100084dc:	d9811a04 	addi	r6,sp,1128
100084e0:	db012b15 	stw	r12,1196(sp)
100084e4:	00077f00 	call	100077f0 <__sprint_r.part.0>
100084e8:	db012b17 	ldw	r12,1196(sp)
100084ec:	10003c1e 	bne	r2,zero,100085e0 <___vfiprintf_internal_r+0xcdc>
100084f0:	d9011b17 	ldw	r4,1132(sp)
100084f4:	d8c11c17 	ldw	r3,1136(sp)
100084f8:	d811883a 	mov	r8,sp
100084fc:	21400044 	addi	r5,r4,1
10008500:	003e6a06 	br	10007eac <__alt_data_end+0xf8007eac>
10008504:	d9411b17 	ldw	r5,1132(sp)
10008508:	d8c11c17 	ldw	r3,1136(sp)
1000850c:	28800044 	addi	r2,r5,1
10008510:	d9011d87 	ldb	r4,1142(sp)
10008514:	203e8526 	beq	r4,zero,10007f2c <__alt_data_end+0xf8007f2c>
10008518:	01000044 	movi	r4,1
1000851c:	d9411d84 	addi	r5,sp,1142
10008520:	1907883a 	add	r3,r3,r4
10008524:	41400015 	stw	r5,0(r8)
10008528:	41000115 	stw	r4,4(r8)
1000852c:	d8c11c15 	stw	r3,1136(sp)
10008530:	d8811b15 	stw	r2,1132(sp)
10008534:	014001c4 	movi	r5,7
10008538:	28809816 	blt	r5,r2,1000879c <___vfiprintf_internal_r+0xe98>
1000853c:	100b883a 	mov	r5,r2
10008540:	42000204 	addi	r8,r8,8
10008544:	1105883a 	add	r2,r2,r4
10008548:	003e7806 	br	10007f2c <__alt_data_end+0xf8007f2c>
1000854c:	d9012217 	ldw	r4,1160(sp)
10008550:	d9412017 	ldw	r5,1152(sp)
10008554:	d9811a04 	addi	r6,sp,1128
10008558:	00077f00 	call	100077f0 <__sprint_r.part.0>
1000855c:	1000201e 	bne	r2,zero,100085e0 <___vfiprintf_internal_r+0xcdc>
10008560:	d9411b17 	ldw	r5,1132(sp)
10008564:	d8c11c17 	ldw	r3,1136(sp)
10008568:	d811883a 	mov	r8,sp
1000856c:	28800044 	addi	r2,r5,1
10008570:	003e8c06 	br	10007fa4 <__alt_data_end+0xf8007fa4>
10008574:	00c00044 	movi	r3,1
10008578:	10c0ab26 	beq	r2,r3,10008828 <___vfiprintf_internal_r+0xf24>
1000857c:	00c00084 	movi	r3,2
10008580:	10c0901e 	bne	r2,r3,100087c4 <___vfiprintf_internal_r+0xec0>
10008584:	d9412717 	ldw	r5,1180(sp)
10008588:	d88109c4 	addi	r2,sp,1063
1000858c:	a0c003cc 	andi	r3,r20,15
10008590:	a808973a 	slli	r4,r21,28
10008594:	28c7883a 	add	r3,r5,r3
10008598:	a028d13a 	srli	r20,r20,4
1000859c:	18c00003 	ldbu	r3,0(r3)
100085a0:	a82ad13a 	srli	r21,r21,4
100085a4:	2528b03a 	or	r20,r4,r20
100085a8:	10c00005 	stb	r3,0(r2)
100085ac:	a546b03a 	or	r3,r20,r21
100085b0:	102f883a 	mov	r23,r2
100085b4:	10bfffc4 	addi	r2,r2,-1
100085b8:	183ff41e 	bne	r3,zero,1000858c <__alt_data_end+0xf800858c>
100085bc:	d8811f17 	ldw	r2,1148(sp)
100085c0:	15cfc83a 	sub	r7,r2,r23
100085c4:	003e1806 	br	10007e28 <__alt_data_end+0xf8007e28>
100085c8:	d8811c17 	ldw	r2,1136(sp)
100085cc:	10000426 	beq	r2,zero,100085e0 <___vfiprintf_internal_r+0xcdc>
100085d0:	d9012217 	ldw	r4,1160(sp)
100085d4:	d9412017 	ldw	r5,1152(sp)
100085d8:	d9811a04 	addi	r6,sp,1128
100085dc:	00077f00 	call	100077f0 <__sprint_r.part.0>
100085e0:	d8c12017 	ldw	r3,1152(sp)
100085e4:	1880030b 	ldhu	r2,12(r3)
100085e8:	1080100c 	andi	r2,r2,64
100085ec:	103dc31e 	bne	r2,zero,10007cfc <__alt_data_end+0xf8007cfc>
100085f0:	d8812417 	ldw	r2,1168(sp)
100085f4:	003dc206 	br	10007d00 <__alt_data_end+0xf8007d00>
100085f8:	d9012217 	ldw	r4,1160(sp)
100085fc:	d9412017 	ldw	r5,1152(sp)
10008600:	d9811a04 	addi	r6,sp,1128
10008604:	da412d15 	stw	r9,1204(sp)
10008608:	00077f00 	call	100077f0 <__sprint_r.part.0>
1000860c:	da412d17 	ldw	r9,1204(sp)
10008610:	103ff31e 	bne	r2,zero,100085e0 <__alt_data_end+0xf80085e0>
10008614:	d8c11c17 	ldw	r3,1136(sp)
10008618:	d9412117 	ldw	r5,1156(sp)
1000861c:	a140010e 	bge	r20,r5,10008624 <___vfiprintf_internal_r+0xd20>
10008620:	2829883a 	mov	r20,r5
10008624:	d8812417 	ldw	r2,1168(sp)
10008628:	1505883a 	add	r2,r2,r20
1000862c:	d8812415 	stw	r2,1168(sp)
10008630:	18000726 	beq	r3,zero,10008650 <___vfiprintf_internal_r+0xd4c>
10008634:	d9012217 	ldw	r4,1160(sp)
10008638:	d9412017 	ldw	r5,1152(sp)
1000863c:	d9811a04 	addi	r6,sp,1128
10008640:	da412d15 	stw	r9,1204(sp)
10008644:	00077f00 	call	100077f0 <__sprint_r.part.0>
10008648:	da412d17 	ldw	r9,1204(sp)
1000864c:	103fe41e 	bne	r2,zero,100085e0 <__alt_data_end+0xf80085e0>
10008650:	d8011b15 	stw	zero,1132(sp)
10008654:	d811883a 	mov	r8,sp
10008658:	003ce106 	br	100079e0 <__alt_data_end+0xf80079e0>
1000865c:	a809883a 	mov	r4,r21
10008660:	b80b883a 	mov	r5,r23
10008664:	d9811a04 	addi	r6,sp,1128
10008668:	00077f00 	call	100077f0 <__sprint_r.part.0>
1000866c:	103fdc1e 	bne	r2,zero,100085e0 <__alt_data_end+0xf80085e0>
10008670:	d9011b17 	ldw	r4,1132(sp)
10008674:	d8c11c17 	ldw	r3,1136(sp)
10008678:	d811883a 	mov	r8,sp
1000867c:	21400044 	addi	r5,r4,1
10008680:	003e8106 	br	10008088 <__alt_data_end+0xf8008088>
10008684:	1800cb1e 	bne	r3,zero,100089b4 <___vfiprintf_internal_r+0x10b0>
10008688:	00800044 	movi	r2,1
1000868c:	ddc00015 	stw	r23,0(sp)
10008690:	d9c00115 	stw	r7,4(sp)
10008694:	d9c11c15 	stw	r7,1136(sp)
10008698:	d8811b15 	stw	r2,1132(sp)
1000869c:	3807883a 	mov	r3,r7
100086a0:	d811883a 	mov	r8,sp
100086a4:	42000204 	addi	r8,r8,8
100086a8:	003e6406 	br	1000803c <__alt_data_end+0xf800803c>
100086ac:	d9012117 	ldw	r4,1156(sp)
100086b0:	252dc83a 	sub	r22,r4,r20
100086b4:	05be2c0e 	bge	zero,r22,10007f68 <__alt_data_end+0xf8007f68>
100086b8:	07000404 	movi	fp,16
100086bc:	e581830e 	bge	fp,r22,10008ccc <___vfiprintf_internal_r+0x13c8>
100086c0:	05440074 	movhi	r21,4097
100086c4:	ad401f04 	addi	r21,r21,124
100086c8:	dc412515 	stw	r17,1172(sp)
100086cc:	028001c4 	movi	r10,7
100086d0:	b023883a 	mov	r17,r22
100086d4:	d9c12615 	stw	r7,1176(sp)
100086d8:	a82d883a 	mov	r22,r21
100086dc:	482b883a 	mov	r21,r9
100086e0:	00000506 	br	100086f8 <___vfiprintf_internal_r+0xdf4>
100086e4:	29000084 	addi	r4,r5,2
100086e8:	42000204 	addi	r8,r8,8
100086ec:	100b883a 	mov	r5,r2
100086f0:	8c7ffc04 	addi	r17,r17,-16
100086f4:	e4400d0e 	bge	fp,r17,1000872c <___vfiprintf_internal_r+0xe28>
100086f8:	18c00404 	addi	r3,r3,16
100086fc:	28800044 	addi	r2,r5,1
10008700:	44000015 	stw	r16,0(r8)
10008704:	47000115 	stw	fp,4(r8)
10008708:	d8c11c15 	stw	r3,1136(sp)
1000870c:	d8811b15 	stw	r2,1132(sp)
10008710:	50bff40e 	bge	r10,r2,100086e4 <__alt_data_end+0xf80086e4>
10008714:	1800151e 	bne	r3,zero,1000876c <___vfiprintf_internal_r+0xe68>
10008718:	8c7ffc04 	addi	r17,r17,-16
1000871c:	000b883a 	mov	r5,zero
10008720:	01000044 	movi	r4,1
10008724:	d811883a 	mov	r8,sp
10008728:	e47ff316 	blt	fp,r17,100086f8 <__alt_data_end+0xf80086f8>
1000872c:	a813883a 	mov	r9,r21
10008730:	d9c12617 	ldw	r7,1176(sp)
10008734:	b02b883a 	mov	r21,r22
10008738:	882d883a 	mov	r22,r17
1000873c:	dc412517 	ldw	r17,1172(sp)
10008740:	1d87883a 	add	r3,r3,r22
10008744:	45400015 	stw	r21,0(r8)
10008748:	45800115 	stw	r22,4(r8)
1000874c:	d8c11c15 	stw	r3,1136(sp)
10008750:	d9011b15 	stw	r4,1132(sp)
10008754:	008001c4 	movi	r2,7
10008758:	11009116 	blt	r2,r4,100089a0 <___vfiprintf_internal_r+0x109c>
1000875c:	42000204 	addi	r8,r8,8
10008760:	20800044 	addi	r2,r4,1
10008764:	200b883a 	mov	r5,r4
10008768:	003dff06 	br	10007f68 <__alt_data_end+0xf8007f68>
1000876c:	d9012217 	ldw	r4,1160(sp)
10008770:	d9412017 	ldw	r5,1152(sp)
10008774:	d9811a04 	addi	r6,sp,1128
10008778:	da812c15 	stw	r10,1200(sp)
1000877c:	00077f00 	call	100077f0 <__sprint_r.part.0>
10008780:	da812c17 	ldw	r10,1200(sp)
10008784:	103f961e 	bne	r2,zero,100085e0 <__alt_data_end+0xf80085e0>
10008788:	d9411b17 	ldw	r5,1132(sp)
1000878c:	d8c11c17 	ldw	r3,1136(sp)
10008790:	d811883a 	mov	r8,sp
10008794:	29000044 	addi	r4,r5,1
10008798:	003fd506 	br	100086f0 <__alt_data_end+0xf80086f0>
1000879c:	1800701e 	bne	r3,zero,10008960 <___vfiprintf_internal_r+0x105c>
100087a0:	000b883a 	mov	r5,zero
100087a4:	2005883a 	mov	r2,r4
100087a8:	d811883a 	mov	r8,sp
100087ac:	003ddf06 	br	10007f2c <__alt_data_end+0xf8007f2c>
100087b0:	18005d1e 	bne	r3,zero,10008928 <___vfiprintf_internal_r+0x1024>
100087b4:	000b883a 	mov	r5,zero
100087b8:	00800044 	movi	r2,1
100087bc:	d811883a 	mov	r8,sp
100087c0:	003de706 	br	10007f60 <__alt_data_end+0xf8007f60>
100087c4:	d8c109c4 	addi	r3,sp,1063
100087c8:	a008d0fa 	srli	r4,r20,3
100087cc:	a80a977a 	slli	r5,r21,29
100087d0:	a82ad0fa 	srli	r21,r21,3
100087d4:	a50001cc 	andi	r20,r20,7
100087d8:	a0800c04 	addi	r2,r20,48
100087dc:	2928b03a 	or	r20,r5,r4
100087e0:	18800005 	stb	r2,0(r3)
100087e4:	a548b03a 	or	r4,r20,r21
100087e8:	182f883a 	mov	r23,r3
100087ec:	18ffffc4 	addi	r3,r3,-1
100087f0:	203ff51e 	bne	r4,zero,100087c8 <__alt_data_end+0xf80087c8>
100087f4:	8900004c 	andi	r4,r17,1
100087f8:	b80b883a 	mov	r5,r23
100087fc:	203f6f26 	beq	r4,zero,100085bc <__alt_data_end+0xf80085bc>
10008800:	10803fcc 	andi	r2,r2,255
10008804:	1080201c 	xori	r2,r2,128
10008808:	10bfe004 	addi	r2,r2,-128
1000880c:	01000c04 	movi	r4,48
10008810:	1100f526 	beq	r2,r4,10008be8 <___vfiprintf_internal_r+0x12e4>
10008814:	293fffc5 	stb	r4,-1(r5)
10008818:	d9011f17 	ldw	r4,1148(sp)
1000881c:	182f883a 	mov	r23,r3
10008820:	20cfc83a 	sub	r7,r4,r3
10008824:	003d8006 	br	10007e28 <__alt_data_end+0xf8007e28>
10008828:	a800021e 	bne	r21,zero,10008834 <___vfiprintf_internal_r+0xf30>
1000882c:	00800244 	movi	r2,9
10008830:	15001d2e 	bgeu	r2,r20,100088a8 <___vfiprintf_internal_r+0xfa4>
10008834:	dc412515 	stw	r17,1172(sp)
10008838:	d88109c4 	addi	r2,sp,1063
1000883c:	a823883a 	mov	r17,r21
10008840:	4039883a 	mov	fp,r8
10008844:	482b883a 	mov	r21,r9
10008848:	a009883a 	mov	r4,r20
1000884c:	880b883a 	mov	r5,r17
10008850:	01800284 	movi	r6,10
10008854:	000f883a 	mov	r7,zero
10008858:	102f883a 	mov	r23,r2
1000885c:	000a9300 	call	1000a930 <__umoddi3>
10008860:	10800c04 	addi	r2,r2,48
10008864:	a009883a 	mov	r4,r20
10008868:	880b883a 	mov	r5,r17
1000886c:	b8800005 	stb	r2,0(r23)
10008870:	01800284 	movi	r6,10
10008874:	000f883a 	mov	r7,zero
10008878:	000a2dc0 	call	1000a2dc <__udivdi3>
1000887c:	1823883a 	mov	r17,r3
10008880:	10c6b03a 	or	r3,r2,r3
10008884:	1029883a 	mov	r20,r2
10008888:	b8bfffc4 	addi	r2,r23,-1
1000888c:	183fee1e 	bne	r3,zero,10008848 <__alt_data_end+0xf8008848>
10008890:	d9411f17 	ldw	r5,1148(sp)
10008894:	e011883a 	mov	r8,fp
10008898:	dc412517 	ldw	r17,1172(sp)
1000889c:	a813883a 	mov	r9,r21
100088a0:	2dcfc83a 	sub	r7,r5,r23
100088a4:	003d6006 	br	10007e28 <__alt_data_end+0xf8007e28>
100088a8:	a5000c04 	addi	r20,r20,48
100088ac:	dd0109c5 	stb	r20,1063(sp)
100088b0:	d9c12817 	ldw	r7,1184(sp)
100088b4:	ddc109c4 	addi	r23,sp,1063
100088b8:	003d5b06 	br	10007e28 <__alt_data_end+0xf8007e28>
100088bc:	ddc10a04 	addi	r23,sp,1064
100088c0:	003d5906 	br	10007e28 <__alt_data_end+0xf8007e28>
100088c4:	1800891e 	bne	r3,zero,10008aec <___vfiprintf_internal_r+0x11e8>
100088c8:	000b883a 	mov	r5,zero
100088cc:	00800044 	movi	r2,1
100088d0:	d811883a 	mov	r8,sp
100088d4:	003f0e06 	br	10008510 <__alt_data_end+0xf8008510>
100088d8:	d9012217 	ldw	r4,1160(sp)
100088dc:	d9412017 	ldw	r5,1152(sp)
100088e0:	d9811a04 	addi	r6,sp,1128
100088e4:	da412d15 	stw	r9,1204(sp)
100088e8:	00077f00 	call	100077f0 <__sprint_r.part.0>
100088ec:	da412d17 	ldw	r9,1204(sp)
100088f0:	103f3b1e 	bne	r2,zero,100085e0 <__alt_data_end+0xf80085e0>
100088f4:	d8c11c17 	ldw	r3,1136(sp)
100088f8:	d811883a 	mov	r8,sp
100088fc:	003dcf06 	br	1000803c <__alt_data_end+0xf800803c>
10008900:	00800084 	movi	r2,2
10008904:	a548b03a 	or	r4,r20,r21
10008908:	003e0b06 	br	10008138 <__alt_data_end+0xf8008138>
1000890c:	d9012217 	ldw	r4,1160(sp)
10008910:	d9412017 	ldw	r5,1152(sp)
10008914:	d9811a04 	addi	r6,sp,1128
10008918:	00077f00 	call	100077f0 <__sprint_r.part.0>
1000891c:	103f301e 	bne	r2,zero,100085e0 <__alt_data_end+0xf80085e0>
10008920:	d811883a 	mov	r8,sp
10008924:	003cbb06 	br	10007c14 <__alt_data_end+0xf8007c14>
10008928:	d9012217 	ldw	r4,1160(sp)
1000892c:	d9412017 	ldw	r5,1152(sp)
10008930:	d9811a04 	addi	r6,sp,1128
10008934:	d9c12b15 	stw	r7,1196(sp)
10008938:	da412d15 	stw	r9,1204(sp)
1000893c:	00077f00 	call	100077f0 <__sprint_r.part.0>
10008940:	d9c12b17 	ldw	r7,1196(sp)
10008944:	da412d17 	ldw	r9,1204(sp)
10008948:	103f251e 	bne	r2,zero,100085e0 <__alt_data_end+0xf80085e0>
1000894c:	d9411b17 	ldw	r5,1132(sp)
10008950:	d8c11c17 	ldw	r3,1136(sp)
10008954:	d811883a 	mov	r8,sp
10008958:	28800044 	addi	r2,r5,1
1000895c:	003d8006 	br	10007f60 <__alt_data_end+0xf8007f60>
10008960:	d9012217 	ldw	r4,1160(sp)
10008964:	d9412017 	ldw	r5,1152(sp)
10008968:	d9811a04 	addi	r6,sp,1128
1000896c:	d9c12b15 	stw	r7,1196(sp)
10008970:	da412d15 	stw	r9,1204(sp)
10008974:	da812c15 	stw	r10,1200(sp)
10008978:	00077f00 	call	100077f0 <__sprint_r.part.0>
1000897c:	d9c12b17 	ldw	r7,1196(sp)
10008980:	da412d17 	ldw	r9,1204(sp)
10008984:	da812c17 	ldw	r10,1200(sp)
10008988:	103f151e 	bne	r2,zero,100085e0 <__alt_data_end+0xf80085e0>
1000898c:	d9411b17 	ldw	r5,1132(sp)
10008990:	d8c11c17 	ldw	r3,1136(sp)
10008994:	d811883a 	mov	r8,sp
10008998:	28800044 	addi	r2,r5,1
1000899c:	003d6306 	br	10007f2c <__alt_data_end+0xf8007f2c>
100089a0:	18009e1e 	bne	r3,zero,10008c1c <___vfiprintf_internal_r+0x1318>
100089a4:	000b883a 	mov	r5,zero
100089a8:	00800044 	movi	r2,1
100089ac:	d811883a 	mov	r8,sp
100089b0:	003d6d06 	br	10007f68 <__alt_data_end+0xf8007f68>
100089b4:	d9012217 	ldw	r4,1160(sp)
100089b8:	d9412017 	ldw	r5,1152(sp)
100089bc:	d9811a04 	addi	r6,sp,1128
100089c0:	d9c12b15 	stw	r7,1196(sp)
100089c4:	da412d15 	stw	r9,1204(sp)
100089c8:	00077f00 	call	100077f0 <__sprint_r.part.0>
100089cc:	d9c12b17 	ldw	r7,1196(sp)
100089d0:	da412d17 	ldw	r9,1204(sp)
100089d4:	103f021e 	bne	r2,zero,100085e0 <__alt_data_end+0xf80085e0>
100089d8:	d8811b17 	ldw	r2,1132(sp)
100089dc:	d8c11c17 	ldw	r3,1136(sp)
100089e0:	d811883a 	mov	r8,sp
100089e4:	10800044 	addi	r2,r2,1
100089e8:	003d8a06 	br	10008014 <__alt_data_end+0xf8008014>
100089ec:	4829883a 	mov	r20,r9
100089f0:	003c1706 	br	10007a50 <__alt_data_end+0xf8007a50>
100089f4:	0529c83a 	sub	r20,zero,r20
100089f8:	a004c03a 	cmpne	r2,r20,zero
100089fc:	056bc83a 	sub	r21,zero,r21
10008a00:	a8abc83a 	sub	r21,r21,r2
10008a04:	05800b44 	movi	r22,45
10008a08:	dd811d85 	stb	r22,1142(sp)
10008a0c:	900f883a 	mov	r7,r18
10008a10:	00800044 	movi	r2,1
10008a14:	a548b03a 	or	r4,r20,r21
10008a18:	003cf606 	br	10007df4 <__alt_data_end+0xf8007df4>
10008a1c:	00800084 	movi	r2,2
10008a20:	003dc506 	br	10008138 <__alt_data_end+0xf8008138>
10008a24:	8880100c 	andi	r2,r17,64
10008a28:	10005a26 	beq	r2,zero,10008b94 <___vfiprintf_internal_r+0x1290>
10008a2c:	d9012317 	ldw	r4,1164(sp)
10008a30:	002b883a 	mov	r21,zero
10008a34:	2500000b 	ldhu	r20,0(r4)
10008a38:	21000104 	addi	r4,r4,4
10008a3c:	d9012315 	stw	r4,1164(sp)
10008a40:	003ddc06 	br	100081b4 <__alt_data_end+0xf80081b4>
10008a44:	8880100c 	andi	r2,r17,64
10008a48:	10005826 	beq	r2,zero,10008bac <___vfiprintf_internal_r+0x12a8>
10008a4c:	d9412317 	ldw	r5,1164(sp)
10008a50:	002b883a 	mov	r21,zero
10008a54:	0005883a 	mov	r2,zero
10008a58:	2d00000b 	ldhu	r20,0(r5)
10008a5c:	29400104 	addi	r5,r5,4
10008a60:	d9412315 	stw	r5,1164(sp)
10008a64:	a009883a 	mov	r4,r20
10008a68:	003db306 	br	10008138 <__alt_data_end+0xf8008138>
10008a6c:	8880040c 	andi	r2,r17,16
10008a70:	1000411e 	bne	r2,zero,10008b78 <___vfiprintf_internal_r+0x1274>
10008a74:	8c40100c 	andi	r17,r17,64
10008a78:	88008726 	beq	r17,zero,10008c98 <___vfiprintf_internal_r+0x1394>
10008a7c:	d9412317 	ldw	r5,1164(sp)
10008a80:	d8c12417 	ldw	r3,1168(sp)
10008a84:	28800017 	ldw	r2,0(r5)
10008a88:	29400104 	addi	r5,r5,4
10008a8c:	d9412315 	stw	r5,1164(sp)
10008a90:	10c0000d 	sth	r3,0(r2)
10008a94:	003bd206 	br	100079e0 <__alt_data_end+0xf80079e0>
10008a98:	48c00007 	ldb	r3,0(r9)
10008a9c:	003bf906 	br	10007a84 <__alt_data_end+0xf8007a84>
10008aa0:	8880100c 	andi	r2,r17,64
10008aa4:	10002c26 	beq	r2,zero,10008b58 <___vfiprintf_internal_r+0x1254>
10008aa8:	d9412317 	ldw	r5,1164(sp)
10008aac:	002b883a 	mov	r21,zero
10008ab0:	00800044 	movi	r2,1
10008ab4:	2d00000b 	ldhu	r20,0(r5)
10008ab8:	29400104 	addi	r5,r5,4
10008abc:	d9412315 	stw	r5,1164(sp)
10008ac0:	a009883a 	mov	r4,r20
10008ac4:	003d9c06 	br	10008138 <__alt_data_end+0xf8008138>
10008ac8:	8880100c 	andi	r2,r17,64
10008acc:	10001b26 	beq	r2,zero,10008b3c <___vfiprintf_internal_r+0x1238>
10008ad0:	d9412317 	ldw	r5,1164(sp)
10008ad4:	2d00000f 	ldh	r20,0(r5)
10008ad8:	29400104 	addi	r5,r5,4
10008adc:	d9412315 	stw	r5,1164(sp)
10008ae0:	a02bd7fa 	srai	r21,r20,31
10008ae4:	a805883a 	mov	r2,r21
10008ae8:	003cbd06 	br	10007de0 <__alt_data_end+0xf8007de0>
10008aec:	d9012217 	ldw	r4,1160(sp)
10008af0:	d9412017 	ldw	r5,1152(sp)
10008af4:	d9811a04 	addi	r6,sp,1128
10008af8:	d9c12b15 	stw	r7,1196(sp)
10008afc:	da412d15 	stw	r9,1204(sp)
10008b00:	da812c15 	stw	r10,1200(sp)
10008b04:	00077f00 	call	100077f0 <__sprint_r.part.0>
10008b08:	d9c12b17 	ldw	r7,1196(sp)
10008b0c:	da412d17 	ldw	r9,1204(sp)
10008b10:	da812c17 	ldw	r10,1200(sp)
10008b14:	103eb21e 	bne	r2,zero,100085e0 <__alt_data_end+0xf80085e0>
10008b18:	d9411b17 	ldw	r5,1132(sp)
10008b1c:	d8c11c17 	ldw	r3,1136(sp)
10008b20:	d811883a 	mov	r8,sp
10008b24:	28800044 	addi	r2,r5,1
10008b28:	003e7906 	br	10008510 <__alt_data_end+0xf8008510>
10008b2c:	1829883a 	mov	r20,r3
10008b30:	003d7006 	br	100080f4 <__alt_data_end+0xf80080f4>
10008b34:	900f883a 	mov	r7,r18
10008b38:	003e2806 	br	100083dc <__alt_data_end+0xf80083dc>
10008b3c:	d8812317 	ldw	r2,1164(sp)
10008b40:	15000017 	ldw	r20,0(r2)
10008b44:	10800104 	addi	r2,r2,4
10008b48:	d8812315 	stw	r2,1164(sp)
10008b4c:	a02bd7fa 	srai	r21,r20,31
10008b50:	a805883a 	mov	r2,r21
10008b54:	003ca206 	br	10007de0 <__alt_data_end+0xf8007de0>
10008b58:	d8812317 	ldw	r2,1164(sp)
10008b5c:	002b883a 	mov	r21,zero
10008b60:	15000017 	ldw	r20,0(r2)
10008b64:	10800104 	addi	r2,r2,4
10008b68:	d8812315 	stw	r2,1164(sp)
10008b6c:	a009883a 	mov	r4,r20
10008b70:	00800044 	movi	r2,1
10008b74:	003d7006 	br	10008138 <__alt_data_end+0xf8008138>
10008b78:	d8c12317 	ldw	r3,1164(sp)
10008b7c:	d9012417 	ldw	r4,1168(sp)
10008b80:	18800017 	ldw	r2,0(r3)
10008b84:	18c00104 	addi	r3,r3,4
10008b88:	d8c12315 	stw	r3,1164(sp)
10008b8c:	11000015 	stw	r4,0(r2)
10008b90:	003b9306 	br	100079e0 <__alt_data_end+0xf80079e0>
10008b94:	d9412317 	ldw	r5,1164(sp)
10008b98:	002b883a 	mov	r21,zero
10008b9c:	2d000017 	ldw	r20,0(r5)
10008ba0:	29400104 	addi	r5,r5,4
10008ba4:	d9412315 	stw	r5,1164(sp)
10008ba8:	003d8206 	br	100081b4 <__alt_data_end+0xf80081b4>
10008bac:	d8812317 	ldw	r2,1164(sp)
10008bb0:	002b883a 	mov	r21,zero
10008bb4:	15000017 	ldw	r20,0(r2)
10008bb8:	10800104 	addi	r2,r2,4
10008bbc:	d8812315 	stw	r2,1164(sp)
10008bc0:	a009883a 	mov	r4,r20
10008bc4:	0005883a 	mov	r2,zero
10008bc8:	003d5b06 	br	10008138 <__alt_data_end+0xf8008138>
10008bcc:	04bfffc4 	movi	r18,-1
10008bd0:	900d883a 	mov	r6,r18
10008bd4:	003bac06 	br	10007a88 <__alt_data_end+0xf8007a88>
10008bd8:	4a400044 	addi	r9,r9,1
10008bdc:	8c400814 	ori	r17,r17,32
10008be0:	10c00047 	ldb	r3,1(r2)
10008be4:	003ba706 	br	10007a84 <__alt_data_end+0xf8007a84>
10008be8:	d8c11f17 	ldw	r3,1148(sp)
10008bec:	1dcfc83a 	sub	r7,r3,r23
10008bf0:	003c8d06 	br	10007e28 <__alt_data_end+0xf8007e28>
10008bf4:	da012b15 	stw	r8,1196(sp)
10008bf8:	da412d15 	stw	r9,1204(sp)
10008bfc:	00077640 	call	10007764 <strlen>
10008c00:	100f883a 	mov	r7,r2
10008c04:	dd811d83 	ldbu	r22,1142(sp)
10008c08:	dd412315 	stw	r21,1164(sp)
10008c0c:	0025883a 	mov	r18,zero
10008c10:	da012b17 	ldw	r8,1196(sp)
10008c14:	da412d17 	ldw	r9,1204(sp)
10008c18:	003c8306 	br	10007e28 <__alt_data_end+0xf8007e28>
10008c1c:	d9012217 	ldw	r4,1160(sp)
10008c20:	d9412017 	ldw	r5,1152(sp)
10008c24:	d9811a04 	addi	r6,sp,1128
10008c28:	d9c12b15 	stw	r7,1196(sp)
10008c2c:	da412d15 	stw	r9,1204(sp)
10008c30:	00077f00 	call	100077f0 <__sprint_r.part.0>
10008c34:	d9c12b17 	ldw	r7,1196(sp)
10008c38:	da412d17 	ldw	r9,1204(sp)
10008c3c:	103e681e 	bne	r2,zero,100085e0 <__alt_data_end+0xf80085e0>
10008c40:	d9411b17 	ldw	r5,1132(sp)
10008c44:	d8c11c17 	ldw	r3,1136(sp)
10008c48:	d811883a 	mov	r8,sp
10008c4c:	28800044 	addi	r2,r5,1
10008c50:	003cc506 	br	10007f68 <__alt_data_end+0xf8007f68>
10008c54:	d9411b17 	ldw	r5,1132(sp)
10008c58:	01040074 	movhi	r4,4097
10008c5c:	21002304 	addi	r4,r4,140
10008c60:	d9012515 	stw	r4,1172(sp)
10008c64:	29400044 	addi	r5,r5,1
10008c68:	003ca406 	br	10007efc <__alt_data_end+0xf8007efc>
10008c6c:	00800184 	movi	r2,6
10008c70:	300f883a 	mov	r7,r6
10008c74:	1180012e 	bgeu	r2,r6,10008c7c <___vfiprintf_internal_r+0x1378>
10008c78:	100f883a 	mov	r7,r2
10008c7c:	3829883a 	mov	r20,r7
10008c80:	38001e16 	blt	r7,zero,10008cfc <___vfiprintf_internal_r+0x13f8>
10008c84:	dd412315 	stw	r21,1164(sp)
10008c88:	05c40074 	movhi	r23,4097
10008c8c:	bdffc304 	addi	r23,r23,-244
10008c90:	0025883a 	mov	r18,zero
10008c94:	003c6c06 	br	10007e48 <__alt_data_end+0xf8007e48>
10008c98:	d9012317 	ldw	r4,1164(sp)
10008c9c:	d9412417 	ldw	r5,1168(sp)
10008ca0:	20800017 	ldw	r2,0(r4)
10008ca4:	21000104 	addi	r4,r4,4
10008ca8:	d9012315 	stw	r4,1164(sp)
10008cac:	11400015 	stw	r5,0(r2)
10008cb0:	003b4b06 	br	100079e0 <__alt_data_end+0xf80079e0>
10008cb4:	d9411b17 	ldw	r5,1132(sp)
10008cb8:	00840074 	movhi	r2,4097
10008cbc:	10802304 	addi	r2,r2,140
10008cc0:	d8812515 	stw	r2,1172(sp)
10008cc4:	29400044 	addi	r5,r5,1
10008cc8:	003cff06 	br	100080c8 <__alt_data_end+0xf80080c8>
10008ccc:	1009883a 	mov	r4,r2
10008cd0:	05440074 	movhi	r21,4097
10008cd4:	ad401f04 	addi	r21,r21,124
10008cd8:	003e9906 	br	10008740 <__alt_data_end+0xf8008740>
10008cdc:	900f883a 	mov	r7,r18
10008ce0:	dd811d83 	ldbu	r22,1142(sp)
10008ce4:	dd412315 	stw	r21,1164(sp)
10008ce8:	0025883a 	mov	r18,zero
10008cec:	003c4e06 	br	10007e28 <__alt_data_end+0xf8007e28>
10008cf0:	1013883a 	mov	r9,r2
10008cf4:	000d883a 	mov	r6,zero
10008cf8:	003b6306 	br	10007a88 <__alt_data_end+0xf8007a88>
10008cfc:	0029883a 	mov	r20,zero
10008d00:	003fe006 	br	10008c84 <__alt_data_end+0xf8008c84>
10008d04:	043fffc4 	movi	r16,-1
10008d08:	003bf306 	br	10007cd8 <__alt_data_end+0xf8007cd8>
10008d0c:	d9412317 	ldw	r5,1164(sp)
10008d10:	48c00043 	ldbu	r3,1(r9)
10008d14:	1013883a 	mov	r9,r2
10008d18:	29800017 	ldw	r6,0(r5)
10008d1c:	29000104 	addi	r4,r5,4
10008d20:	d9012315 	stw	r4,1164(sp)
10008d24:	30000416 	blt	r6,zero,10008d38 <___vfiprintf_internal_r+0x1434>
10008d28:	18c03fcc 	andi	r3,r3,255
10008d2c:	18c0201c 	xori	r3,r3,128
10008d30:	18ffe004 	addi	r3,r3,-128
10008d34:	003b5306 	br	10007a84 <__alt_data_end+0xf8007a84>
10008d38:	18c03fcc 	andi	r3,r3,255
10008d3c:	18c0201c 	xori	r3,r3,128
10008d40:	01bfffc4 	movi	r6,-1
10008d44:	18ffe004 	addi	r3,r3,-128
10008d48:	003b4e06 	br	10007a84 <__alt_data_end+0xf8007a84>

10008d4c <__vfiprintf_internal>:
10008d4c:	00840074 	movhi	r2,4097
10008d50:	10872204 	addi	r2,r2,7304
10008d54:	2007883a 	mov	r3,r4
10008d58:	11000017 	ldw	r4,0(r2)
10008d5c:	2805883a 	mov	r2,r5
10008d60:	300f883a 	mov	r7,r6
10008d64:	180b883a 	mov	r5,r3
10008d68:	100d883a 	mov	r6,r2
10008d6c:	00079041 	jmpi	10007904 <___vfiprintf_internal_r>

10008d70 <_write_r>:
10008d70:	defffd04 	addi	sp,sp,-12
10008d74:	dc400115 	stw	r17,4(sp)
10008d78:	dc000015 	stw	r16,0(sp)
10008d7c:	2023883a 	mov	r17,r4
10008d80:	04040074 	movhi	r16,4097
10008d84:	840df404 	addi	r16,r16,14288
10008d88:	2809883a 	mov	r4,r5
10008d8c:	300b883a 	mov	r5,r6
10008d90:	380d883a 	mov	r6,r7
10008d94:	dfc00215 	stw	ra,8(sp)
10008d98:	80000015 	stw	zero,0(r16)
10008d9c:	000e1880 	call	1000e188 <write>
10008da0:	00ffffc4 	movi	r3,-1
10008da4:	10c00526 	beq	r2,r3,10008dbc <_write_r+0x4c>
10008da8:	dfc00217 	ldw	ra,8(sp)
10008dac:	dc400117 	ldw	r17,4(sp)
10008db0:	dc000017 	ldw	r16,0(sp)
10008db4:	dec00304 	addi	sp,sp,12
10008db8:	f800283a 	ret
10008dbc:	80c00017 	ldw	r3,0(r16)
10008dc0:	183ff926 	beq	r3,zero,10008da8 <__alt_data_end+0xf8008da8>
10008dc4:	88c00015 	stw	r3,0(r17)
10008dc8:	dfc00217 	ldw	ra,8(sp)
10008dcc:	dc400117 	ldw	r17,4(sp)
10008dd0:	dc000017 	ldw	r16,0(sp)
10008dd4:	dec00304 	addi	sp,sp,12
10008dd8:	f800283a 	ret

10008ddc <_close_r>:
10008ddc:	defffd04 	addi	sp,sp,-12
10008de0:	dc400115 	stw	r17,4(sp)
10008de4:	dc000015 	stw	r16,0(sp)
10008de8:	2023883a 	mov	r17,r4
10008dec:	04040074 	movhi	r16,4097
10008df0:	840df404 	addi	r16,r16,14288
10008df4:	2809883a 	mov	r4,r5
10008df8:	dfc00215 	stw	ra,8(sp)
10008dfc:	80000015 	stw	zero,0(r16)
10008e00:	000d8740 	call	1000d874 <close>
10008e04:	00ffffc4 	movi	r3,-1
10008e08:	10c00526 	beq	r2,r3,10008e20 <_close_r+0x44>
10008e0c:	dfc00217 	ldw	ra,8(sp)
10008e10:	dc400117 	ldw	r17,4(sp)
10008e14:	dc000017 	ldw	r16,0(sp)
10008e18:	dec00304 	addi	sp,sp,12
10008e1c:	f800283a 	ret
10008e20:	80c00017 	ldw	r3,0(r16)
10008e24:	183ff926 	beq	r3,zero,10008e0c <__alt_data_end+0xf8008e0c>
10008e28:	88c00015 	stw	r3,0(r17)
10008e2c:	dfc00217 	ldw	ra,8(sp)
10008e30:	dc400117 	ldw	r17,4(sp)
10008e34:	dc000017 	ldw	r16,0(sp)
10008e38:	dec00304 	addi	sp,sp,12
10008e3c:	f800283a 	ret

10008e40 <_calloc_r>:
10008e40:	defffe04 	addi	sp,sp,-8
10008e44:	dc000015 	stw	r16,0(sp)
10008e48:	2021883a 	mov	r16,r4
10008e4c:	2809883a 	mov	r4,r5
10008e50:	300b883a 	mov	r5,r6
10008e54:	dfc00115 	stw	ra,4(sp)
10008e58:	000b0780 	call	1000b078 <__mulsi3>
10008e5c:	8009883a 	mov	r4,r16
10008e60:	100b883a 	mov	r5,r2
10008e64:	00059c40 	call	100059c4 <_malloc_r>
10008e68:	1021883a 	mov	r16,r2
10008e6c:	10002826 	beq	r2,zero,10008f10 <_calloc_r+0xd0>
10008e70:	11bfff17 	ldw	r6,-4(r2)
10008e74:	00ffff04 	movi	r3,-4
10008e78:	00800904 	movi	r2,36
10008e7c:	30cc703a 	and	r6,r6,r3
10008e80:	30cd883a 	add	r6,r6,r3
10008e84:	11801436 	bltu	r2,r6,10008ed8 <_calloc_r+0x98>
10008e88:	00c004c4 	movi	r3,19
10008e8c:	19800936 	bltu	r3,r6,10008eb4 <_calloc_r+0x74>
10008e90:	8005883a 	mov	r2,r16
10008e94:	10000015 	stw	zero,0(r2)
10008e98:	10000115 	stw	zero,4(r2)
10008e9c:	10000215 	stw	zero,8(r2)
10008ea0:	8005883a 	mov	r2,r16
10008ea4:	dfc00117 	ldw	ra,4(sp)
10008ea8:	dc000017 	ldw	r16,0(sp)
10008eac:	dec00204 	addi	sp,sp,8
10008eb0:	f800283a 	ret
10008eb4:	80000015 	stw	zero,0(r16)
10008eb8:	80000115 	stw	zero,4(r16)
10008ebc:	00c006c4 	movi	r3,27
10008ec0:	19800d2e 	bgeu	r3,r6,10008ef8 <_calloc_r+0xb8>
10008ec4:	80000215 	stw	zero,8(r16)
10008ec8:	80000315 	stw	zero,12(r16)
10008ecc:	30800c26 	beq	r6,r2,10008f00 <_calloc_r+0xc0>
10008ed0:	80800404 	addi	r2,r16,16
10008ed4:	003fef06 	br	10008e94 <__alt_data_end+0xf8008e94>
10008ed8:	8009883a 	mov	r4,r16
10008edc:	000b883a 	mov	r5,zero
10008ee0:	000637c0 	call	1000637c <memset>
10008ee4:	8005883a 	mov	r2,r16
10008ee8:	dfc00117 	ldw	ra,4(sp)
10008eec:	dc000017 	ldw	r16,0(sp)
10008ef0:	dec00204 	addi	sp,sp,8
10008ef4:	f800283a 	ret
10008ef8:	80800204 	addi	r2,r16,8
10008efc:	003fe506 	br	10008e94 <__alt_data_end+0xf8008e94>
10008f00:	80000415 	stw	zero,16(r16)
10008f04:	80800604 	addi	r2,r16,24
10008f08:	80000515 	stw	zero,20(r16)
10008f0c:	003fe106 	br	10008e94 <__alt_data_end+0xf8008e94>
10008f10:	0005883a 	mov	r2,zero
10008f14:	003fe306 	br	10008ea4 <__alt_data_end+0xf8008ea4>

10008f18 <_fclose_r>:
10008f18:	defffc04 	addi	sp,sp,-16
10008f1c:	dc000015 	stw	r16,0(sp)
10008f20:	dfc00315 	stw	ra,12(sp)
10008f24:	dc800215 	stw	r18,8(sp)
10008f28:	dc400115 	stw	r17,4(sp)
10008f2c:	2821883a 	mov	r16,r5
10008f30:	28003126 	beq	r5,zero,10008ff8 <_fclose_r+0xe0>
10008f34:	2023883a 	mov	r17,r4
10008f38:	00051900 	call	10005190 <__sfp_lock_acquire>
10008f3c:	88000226 	beq	r17,zero,10008f48 <_fclose_r+0x30>
10008f40:	88800e17 	ldw	r2,56(r17)
10008f44:	10003326 	beq	r2,zero,10009014 <_fclose_r+0xfc>
10008f48:	8080030f 	ldh	r2,12(r16)
10008f4c:	10002226 	beq	r2,zero,10008fd8 <_fclose_r+0xc0>
10008f50:	8809883a 	mov	r4,r17
10008f54:	800b883a 	mov	r5,r16
10008f58:	0004bb80 	call	10004bb8 <_fflush_r>
10008f5c:	80c00b17 	ldw	r3,44(r16)
10008f60:	1025883a 	mov	r18,r2
10008f64:	18000426 	beq	r3,zero,10008f78 <_fclose_r+0x60>
10008f68:	81400717 	ldw	r5,28(r16)
10008f6c:	8809883a 	mov	r4,r17
10008f70:	183ee83a 	callr	r3
10008f74:	10003016 	blt	r2,zero,10009038 <_fclose_r+0x120>
10008f78:	8080030b 	ldhu	r2,12(r16)
10008f7c:	1080200c 	andi	r2,r2,128
10008f80:	1000291e 	bne	r2,zero,10009028 <_fclose_r+0x110>
10008f84:	81400c17 	ldw	r5,48(r16)
10008f88:	28000526 	beq	r5,zero,10008fa0 <_fclose_r+0x88>
10008f8c:	80801004 	addi	r2,r16,64
10008f90:	28800226 	beq	r5,r2,10008f9c <_fclose_r+0x84>
10008f94:	8809883a 	mov	r4,r17
10008f98:	000530c0 	call	1000530c <_free_r>
10008f9c:	80000c15 	stw	zero,48(r16)
10008fa0:	81401117 	ldw	r5,68(r16)
10008fa4:	28000326 	beq	r5,zero,10008fb4 <_fclose_r+0x9c>
10008fa8:	8809883a 	mov	r4,r17
10008fac:	000530c0 	call	1000530c <_free_r>
10008fb0:	80001115 	stw	zero,68(r16)
10008fb4:	8000030d 	sth	zero,12(r16)
10008fb8:	00051940 	call	10005194 <__sfp_lock_release>
10008fbc:	9005883a 	mov	r2,r18
10008fc0:	dfc00317 	ldw	ra,12(sp)
10008fc4:	dc800217 	ldw	r18,8(sp)
10008fc8:	dc400117 	ldw	r17,4(sp)
10008fcc:	dc000017 	ldw	r16,0(sp)
10008fd0:	dec00404 	addi	sp,sp,16
10008fd4:	f800283a 	ret
10008fd8:	00051940 	call	10005194 <__sfp_lock_release>
10008fdc:	0005883a 	mov	r2,zero
10008fe0:	dfc00317 	ldw	ra,12(sp)
10008fe4:	dc800217 	ldw	r18,8(sp)
10008fe8:	dc400117 	ldw	r17,4(sp)
10008fec:	dc000017 	ldw	r16,0(sp)
10008ff0:	dec00404 	addi	sp,sp,16
10008ff4:	f800283a 	ret
10008ff8:	0005883a 	mov	r2,zero
10008ffc:	dfc00317 	ldw	ra,12(sp)
10009000:	dc800217 	ldw	r18,8(sp)
10009004:	dc400117 	ldw	r17,4(sp)
10009008:	dc000017 	ldw	r16,0(sp)
1000900c:	dec00404 	addi	sp,sp,16
10009010:	f800283a 	ret
10009014:	8809883a 	mov	r4,r17
10009018:	0004ed80 	call	10004ed8 <__sinit>
1000901c:	8080030f 	ldh	r2,12(r16)
10009020:	103fcb1e 	bne	r2,zero,10008f50 <__alt_data_end+0xf8008f50>
10009024:	003fec06 	br	10008fd8 <__alt_data_end+0xf8008fd8>
10009028:	81400417 	ldw	r5,16(r16)
1000902c:	8809883a 	mov	r4,r17
10009030:	000530c0 	call	1000530c <_free_r>
10009034:	003fd306 	br	10008f84 <__alt_data_end+0xf8008f84>
10009038:	04bfffc4 	movi	r18,-1
1000903c:	003fce06 	br	10008f78 <__alt_data_end+0xf8008f78>

10009040 <fclose>:
10009040:	00840074 	movhi	r2,4097
10009044:	10872204 	addi	r2,r2,7304
10009048:	200b883a 	mov	r5,r4
1000904c:	11000017 	ldw	r4,0(r2)
10009050:	0008f181 	jmpi	10008f18 <_fclose_r>

10009054 <_fputwc_r>:
10009054:	3080030b 	ldhu	r2,12(r6)
10009058:	defff804 	addi	sp,sp,-32
1000905c:	dcc00415 	stw	r19,16(sp)
10009060:	dc800315 	stw	r18,12(sp)
10009064:	dc000115 	stw	r16,4(sp)
10009068:	dfc00715 	stw	ra,28(sp)
1000906c:	dd400615 	stw	r21,24(sp)
10009070:	dd000515 	stw	r20,20(sp)
10009074:	dc400215 	stw	r17,8(sp)
10009078:	10c8000c 	andi	r3,r2,8192
1000907c:	3021883a 	mov	r16,r6
10009080:	2027883a 	mov	r19,r4
10009084:	2825883a 	mov	r18,r5
10009088:	1800051e 	bne	r3,zero,100090a0 <_fputwc_r+0x4c>
1000908c:	30c01917 	ldw	r3,100(r6)
10009090:	10880014 	ori	r2,r2,8192
10009094:	3080030d 	sth	r2,12(r6)
10009098:	18880014 	ori	r2,r3,8192
1000909c:	30801915 	stw	r2,100(r6)
100090a0:	00057b80 	call	100057b8 <__locale_mb_cur_max>
100090a4:	00c00044 	movi	r3,1
100090a8:	10c03e26 	beq	r2,r3,100091a4 <_fputwc_r+0x150>
100090ac:	9809883a 	mov	r4,r19
100090b0:	d80b883a 	mov	r5,sp
100090b4:	900d883a 	mov	r6,r18
100090b8:	81c01704 	addi	r7,r16,92
100090bc:	000a0dc0 	call	1000a0dc <_wcrtomb_r>
100090c0:	1029883a 	mov	r20,r2
100090c4:	00bfffc4 	movi	r2,-1
100090c8:	a0802026 	beq	r20,r2,1000914c <_fputwc_r+0xf8>
100090cc:	d9400003 	ldbu	r5,0(sp)
100090d0:	a0001c26 	beq	r20,zero,10009144 <_fputwc_r+0xf0>
100090d4:	0023883a 	mov	r17,zero
100090d8:	05400284 	movi	r21,10
100090dc:	00000906 	br	10009104 <_fputwc_r+0xb0>
100090e0:	80c00017 	ldw	r3,0(r16)
100090e4:	19400005 	stb	r5,0(r3)
100090e8:	80c00017 	ldw	r3,0(r16)
100090ec:	18c00044 	addi	r3,r3,1
100090f0:	80c00015 	stw	r3,0(r16)
100090f4:	8c400044 	addi	r17,r17,1
100090f8:	dc47883a 	add	r3,sp,r17
100090fc:	8d00112e 	bgeu	r17,r20,10009144 <_fputwc_r+0xf0>
10009100:	19400003 	ldbu	r5,0(r3)
10009104:	80c00217 	ldw	r3,8(r16)
10009108:	18ffffc4 	addi	r3,r3,-1
1000910c:	80c00215 	stw	r3,8(r16)
10009110:	183ff30e 	bge	r3,zero,100090e0 <__alt_data_end+0xf80090e0>
10009114:	80800617 	ldw	r2,24(r16)
10009118:	18801916 	blt	r3,r2,10009180 <_fputwc_r+0x12c>
1000911c:	80800017 	ldw	r2,0(r16)
10009120:	11400005 	stb	r5,0(r2)
10009124:	80800017 	ldw	r2,0(r16)
10009128:	10c00003 	ldbu	r3,0(r2)
1000912c:	10800044 	addi	r2,r2,1
10009130:	1d402326 	beq	r3,r21,100091c0 <_fputwc_r+0x16c>
10009134:	8c400044 	addi	r17,r17,1
10009138:	80800015 	stw	r2,0(r16)
1000913c:	dc47883a 	add	r3,sp,r17
10009140:	8d3fef36 	bltu	r17,r20,10009100 <__alt_data_end+0xf8009100>
10009144:	9005883a 	mov	r2,r18
10009148:	00000406 	br	1000915c <_fputwc_r+0x108>
1000914c:	80c0030b 	ldhu	r3,12(r16)
10009150:	a005883a 	mov	r2,r20
10009154:	18c01014 	ori	r3,r3,64
10009158:	80c0030d 	sth	r3,12(r16)
1000915c:	dfc00717 	ldw	ra,28(sp)
10009160:	dd400617 	ldw	r21,24(sp)
10009164:	dd000517 	ldw	r20,20(sp)
10009168:	dcc00417 	ldw	r19,16(sp)
1000916c:	dc800317 	ldw	r18,12(sp)
10009170:	dc400217 	ldw	r17,8(sp)
10009174:	dc000117 	ldw	r16,4(sp)
10009178:	dec00804 	addi	sp,sp,32
1000917c:	f800283a 	ret
10009180:	9809883a 	mov	r4,r19
10009184:	29403fcc 	andi	r5,r5,255
10009188:	800d883a 	mov	r6,r16
1000918c:	0009f400 	call	10009f40 <__swbuf_r>
10009190:	10bfffe0 	cmpeqi	r2,r2,-1
10009194:	10803fcc 	andi	r2,r2,255
10009198:	103fd626 	beq	r2,zero,100090f4 <__alt_data_end+0xf80090f4>
1000919c:	00bfffc4 	movi	r2,-1
100091a0:	003fee06 	br	1000915c <__alt_data_end+0xf800915c>
100091a4:	90ffffc4 	addi	r3,r18,-1
100091a8:	01003f84 	movi	r4,254
100091ac:	20ffbf36 	bltu	r4,r3,100090ac <__alt_data_end+0xf80090ac>
100091b0:	900b883a 	mov	r5,r18
100091b4:	dc800005 	stb	r18,0(sp)
100091b8:	1029883a 	mov	r20,r2
100091bc:	003fc506 	br	100090d4 <__alt_data_end+0xf80090d4>
100091c0:	9809883a 	mov	r4,r19
100091c4:	a80b883a 	mov	r5,r21
100091c8:	800d883a 	mov	r6,r16
100091cc:	0009f400 	call	10009f40 <__swbuf_r>
100091d0:	10bfffe0 	cmpeqi	r2,r2,-1
100091d4:	003fef06 	br	10009194 <__alt_data_end+0xf8009194>

100091d8 <fputwc>:
100091d8:	defffc04 	addi	sp,sp,-16
100091dc:	dc000115 	stw	r16,4(sp)
100091e0:	04040074 	movhi	r16,4097
100091e4:	84072204 	addi	r16,r16,7304
100091e8:	80800017 	ldw	r2,0(r16)
100091ec:	dc400215 	stw	r17,8(sp)
100091f0:	dfc00315 	stw	ra,12(sp)
100091f4:	2023883a 	mov	r17,r4
100091f8:	280d883a 	mov	r6,r5
100091fc:	10000d26 	beq	r2,zero,10009234 <fputwc+0x5c>
10009200:	10c00e17 	ldw	r3,56(r2)
10009204:	1009883a 	mov	r4,r2
10009208:	1800041e 	bne	r3,zero,1000921c <fputwc+0x44>
1000920c:	d9400015 	stw	r5,0(sp)
10009210:	0004ed80 	call	10004ed8 <__sinit>
10009214:	81000017 	ldw	r4,0(r16)
10009218:	d9800017 	ldw	r6,0(sp)
1000921c:	880b883a 	mov	r5,r17
10009220:	dfc00317 	ldw	ra,12(sp)
10009224:	dc400217 	ldw	r17,8(sp)
10009228:	dc000117 	ldw	r16,4(sp)
1000922c:	dec00404 	addi	sp,sp,16
10009230:	00090541 	jmpi	10009054 <_fputwc_r>
10009234:	0009883a 	mov	r4,zero
10009238:	880b883a 	mov	r5,r17
1000923c:	dfc00317 	ldw	ra,12(sp)
10009240:	dc400217 	ldw	r17,8(sp)
10009244:	dc000117 	ldw	r16,4(sp)
10009248:	dec00404 	addi	sp,sp,16
1000924c:	00090541 	jmpi	10009054 <_fputwc_r>

10009250 <_fstat_r>:
10009250:	defffd04 	addi	sp,sp,-12
10009254:	dc400115 	stw	r17,4(sp)
10009258:	dc000015 	stw	r16,0(sp)
1000925c:	2023883a 	mov	r17,r4
10009260:	04040074 	movhi	r16,4097
10009264:	840df404 	addi	r16,r16,14288
10009268:	2809883a 	mov	r4,r5
1000926c:	300b883a 	mov	r5,r6
10009270:	dfc00215 	stw	ra,8(sp)
10009274:	80000015 	stw	zero,0(r16)
10009278:	000da500 	call	1000da50 <fstat>
1000927c:	00ffffc4 	movi	r3,-1
10009280:	10c00526 	beq	r2,r3,10009298 <_fstat_r+0x48>
10009284:	dfc00217 	ldw	ra,8(sp)
10009288:	dc400117 	ldw	r17,4(sp)
1000928c:	dc000017 	ldw	r16,0(sp)
10009290:	dec00304 	addi	sp,sp,12
10009294:	f800283a 	ret
10009298:	80c00017 	ldw	r3,0(r16)
1000929c:	183ff926 	beq	r3,zero,10009284 <__alt_data_end+0xf8009284>
100092a0:	88c00015 	stw	r3,0(r17)
100092a4:	dfc00217 	ldw	ra,8(sp)
100092a8:	dc400117 	ldw	r17,4(sp)
100092ac:	dc000017 	ldw	r16,0(sp)
100092b0:	dec00304 	addi	sp,sp,12
100092b4:	f800283a 	ret

100092b8 <__sfvwrite_r>:
100092b8:	30800217 	ldw	r2,8(r6)
100092bc:	defff404 	addi	sp,sp,-48
100092c0:	dcc00515 	stw	r19,20(sp)
100092c4:	dfc00b15 	stw	ra,44(sp)
100092c8:	df000a15 	stw	fp,40(sp)
100092cc:	ddc00915 	stw	r23,36(sp)
100092d0:	dd800815 	stw	r22,32(sp)
100092d4:	dd400715 	stw	r21,28(sp)
100092d8:	dd000615 	stw	r20,24(sp)
100092dc:	dc800415 	stw	r18,16(sp)
100092e0:	dc400315 	stw	r17,12(sp)
100092e4:	dc000215 	stw	r16,8(sp)
100092e8:	3027883a 	mov	r19,r6
100092ec:	10001d26 	beq	r2,zero,10009364 <__sfvwrite_r+0xac>
100092f0:	2880030b 	ldhu	r2,12(r5)
100092f4:	202b883a 	mov	r21,r4
100092f8:	2821883a 	mov	r16,r5
100092fc:	10c0020c 	andi	r3,r2,8
10009300:	18002526 	beq	r3,zero,10009398 <__sfvwrite_r+0xe0>
10009304:	28c00417 	ldw	r3,16(r5)
10009308:	18002326 	beq	r3,zero,10009398 <__sfvwrite_r+0xe0>
1000930c:	10c0008c 	andi	r3,r2,2
10009310:	9c400017 	ldw	r17,0(r19)
10009314:	18002826 	beq	r3,zero,100093b8 <__sfvwrite_r+0x100>
10009318:	0029883a 	mov	r20,zero
1000931c:	0025883a 	mov	r18,zero
10009320:	05810004 	movi	r22,1024
10009324:	a00d883a 	mov	r6,r20
10009328:	a809883a 	mov	r4,r21
1000932c:	90004726 	beq	r18,zero,1000944c <__sfvwrite_r+0x194>
10009330:	900f883a 	mov	r7,r18
10009334:	81400717 	ldw	r5,28(r16)
10009338:	b480012e 	bgeu	r22,r18,10009340 <__sfvwrite_r+0x88>
1000933c:	01c10004 	movi	r7,1024
10009340:	80800917 	ldw	r2,36(r16)
10009344:	103ee83a 	callr	r2
10009348:	00804c0e 	bge	zero,r2,1000947c <__sfvwrite_r+0x1c4>
1000934c:	98c00217 	ldw	r3,8(r19)
10009350:	a0a9883a 	add	r20,r20,r2
10009354:	90a5c83a 	sub	r18,r18,r2
10009358:	1885c83a 	sub	r2,r3,r2
1000935c:	98800215 	stw	r2,8(r19)
10009360:	103ff01e 	bne	r2,zero,10009324 <__alt_data_end+0xf8009324>
10009364:	0005883a 	mov	r2,zero
10009368:	dfc00b17 	ldw	ra,44(sp)
1000936c:	df000a17 	ldw	fp,40(sp)
10009370:	ddc00917 	ldw	r23,36(sp)
10009374:	dd800817 	ldw	r22,32(sp)
10009378:	dd400717 	ldw	r21,28(sp)
1000937c:	dd000617 	ldw	r20,24(sp)
10009380:	dcc00517 	ldw	r19,20(sp)
10009384:	dc800417 	ldw	r18,16(sp)
10009388:	dc400317 	ldw	r17,12(sp)
1000938c:	dc000217 	ldw	r16,8(sp)
10009390:	dec00c04 	addi	sp,sp,48
10009394:	f800283a 	ret
10009398:	a809883a 	mov	r4,r21
1000939c:	800b883a 	mov	r5,r16
100093a0:	000321c0 	call	1000321c <__swsetup_r>
100093a4:	1000e81e 	bne	r2,zero,10009748 <__sfvwrite_r+0x490>
100093a8:	8080030b 	ldhu	r2,12(r16)
100093ac:	9c400017 	ldw	r17,0(r19)
100093b0:	10c0008c 	andi	r3,r2,2
100093b4:	183fd81e 	bne	r3,zero,10009318 <__alt_data_end+0xf8009318>
100093b8:	10c0004c 	andi	r3,r2,1
100093bc:	002d883a 	mov	r22,zero
100093c0:	1800331e 	bne	r3,zero,10009490 <__sfvwrite_r+0x1d8>
100093c4:	0025883a 	mov	r18,zero
100093c8:	90001c26 	beq	r18,zero,1000943c <__sfvwrite_r+0x184>
100093cc:	10c0800c 	andi	r3,r2,512
100093d0:	85000217 	ldw	r20,8(r16)
100093d4:	18006f26 	beq	r3,zero,10009594 <__sfvwrite_r+0x2dc>
100093d8:	95008936 	bltu	r18,r20,10009600 <__sfvwrite_r+0x348>
100093dc:	10c1200c 	andi	r3,r2,1152
100093e0:	1800a11e 	bne	r3,zero,10009668 <__sfvwrite_r+0x3b0>
100093e4:	81000017 	ldw	r4,0(r16)
100093e8:	a02f883a 	mov	r23,r20
100093ec:	a039883a 	mov	fp,r20
100093f0:	9029883a 	mov	r20,r18
100093f4:	b00b883a 	mov	r5,r22
100093f8:	b80d883a 	mov	r6,r23
100093fc:	00098340 	call	10009834 <memmove>
10009400:	81400217 	ldw	r5,8(r16)
10009404:	81000017 	ldw	r4,0(r16)
10009408:	9005883a 	mov	r2,r18
1000940c:	2f39c83a 	sub	fp,r5,fp
10009410:	25c7883a 	add	r3,r4,r23
10009414:	87000215 	stw	fp,8(r16)
10009418:	80c00015 	stw	r3,0(r16)
1000941c:	98c00217 	ldw	r3,8(r19)
10009420:	b0ad883a 	add	r22,r22,r2
10009424:	90a5c83a 	sub	r18,r18,r2
10009428:	1d29c83a 	sub	r20,r3,r20
1000942c:	9d000215 	stw	r20,8(r19)
10009430:	a03fcc26 	beq	r20,zero,10009364 <__alt_data_end+0xf8009364>
10009434:	8080030b 	ldhu	r2,12(r16)
10009438:	903fe41e 	bne	r18,zero,100093cc <__alt_data_end+0xf80093cc>
1000943c:	8d800017 	ldw	r22,0(r17)
10009440:	8c800117 	ldw	r18,4(r17)
10009444:	8c400204 	addi	r17,r17,8
10009448:	003fdf06 	br	100093c8 <__alt_data_end+0xf80093c8>
1000944c:	8d000017 	ldw	r20,0(r17)
10009450:	8c800117 	ldw	r18,4(r17)
10009454:	8c400204 	addi	r17,r17,8
10009458:	003fb206 	br	10009324 <__alt_data_end+0xf8009324>
1000945c:	00099dc0 	call	100099dc <_realloc_r>
10009460:	1039883a 	mov	fp,r2
10009464:	10009d1e 	bne	r2,zero,100096dc <__sfvwrite_r+0x424>
10009468:	81400417 	ldw	r5,16(r16)
1000946c:	a809883a 	mov	r4,r21
10009470:	000530c0 	call	1000530c <_free_r>
10009474:	00800304 	movi	r2,12
10009478:	a8800015 	stw	r2,0(r21)
1000947c:	80c0030b 	ldhu	r3,12(r16)
10009480:	00bfffc4 	movi	r2,-1
10009484:	18c01014 	ori	r3,r3,64
10009488:	80c0030d 	sth	r3,12(r16)
1000948c:	003fb606 	br	10009368 <__alt_data_end+0xf8009368>
10009490:	0007883a 	mov	r3,zero
10009494:	0039883a 	mov	fp,zero
10009498:	0025883a 	mov	r18,zero
1000949c:	90001f26 	beq	r18,zero,1000951c <__sfvwrite_r+0x264>
100094a0:	18006826 	beq	r3,zero,10009644 <__sfvwrite_r+0x38c>
100094a4:	b02f883a 	mov	r23,r22
100094a8:	9580012e 	bgeu	r18,r22,100094b0 <__sfvwrite_r+0x1f8>
100094ac:	902f883a 	mov	r23,r18
100094b0:	81000017 	ldw	r4,0(r16)
100094b4:	80800417 	ldw	r2,16(r16)
100094b8:	b829883a 	mov	r20,r23
100094bc:	81800217 	ldw	r6,8(r16)
100094c0:	81c00517 	ldw	r7,20(r16)
100094c4:	1100022e 	bgeu	r2,r4,100094d0 <__sfvwrite_r+0x218>
100094c8:	31d1883a 	add	r8,r6,r7
100094cc:	45c01816 	blt	r8,r23,10009530 <__sfvwrite_r+0x278>
100094d0:	b9c03f16 	blt	r23,r7,100095d0 <__sfvwrite_r+0x318>
100094d4:	80800917 	ldw	r2,36(r16)
100094d8:	81400717 	ldw	r5,28(r16)
100094dc:	a809883a 	mov	r4,r21
100094e0:	d8c00115 	stw	r3,4(sp)
100094e4:	e00d883a 	mov	r6,fp
100094e8:	103ee83a 	callr	r2
100094ec:	1029883a 	mov	r20,r2
100094f0:	d8c00117 	ldw	r3,4(sp)
100094f4:	00bfe10e 	bge	zero,r2,1000947c <__alt_data_end+0xf800947c>
100094f8:	b52dc83a 	sub	r22,r22,r20
100094fc:	b0001f26 	beq	r22,zero,1000957c <__sfvwrite_r+0x2c4>
10009500:	98800217 	ldw	r2,8(r19)
10009504:	e539883a 	add	fp,fp,r20
10009508:	9525c83a 	sub	r18,r18,r20
1000950c:	1529c83a 	sub	r20,r2,r20
10009510:	9d000215 	stw	r20,8(r19)
10009514:	a03f9326 	beq	r20,zero,10009364 <__alt_data_end+0xf8009364>
10009518:	903fe11e 	bne	r18,zero,100094a0 <__alt_data_end+0xf80094a0>
1000951c:	8f000017 	ldw	fp,0(r17)
10009520:	8c800117 	ldw	r18,4(r17)
10009524:	0007883a 	mov	r3,zero
10009528:	8c400204 	addi	r17,r17,8
1000952c:	003fdb06 	br	1000949c <__alt_data_end+0xf800949c>
10009530:	400d883a 	mov	r6,r8
10009534:	e00b883a 	mov	r5,fp
10009538:	d8c00115 	stw	r3,4(sp)
1000953c:	da000015 	stw	r8,0(sp)
10009540:	00098340 	call	10009834 <memmove>
10009544:	da000017 	ldw	r8,0(sp)
10009548:	80800017 	ldw	r2,0(r16)
1000954c:	a809883a 	mov	r4,r21
10009550:	800b883a 	mov	r5,r16
10009554:	1205883a 	add	r2,r2,r8
10009558:	80800015 	stw	r2,0(r16)
1000955c:	da000015 	stw	r8,0(sp)
10009560:	0004bb80 	call	10004bb8 <_fflush_r>
10009564:	d8c00117 	ldw	r3,4(sp)
10009568:	da000017 	ldw	r8,0(sp)
1000956c:	103fc31e 	bne	r2,zero,1000947c <__alt_data_end+0xf800947c>
10009570:	4029883a 	mov	r20,r8
10009574:	b52dc83a 	sub	r22,r22,r20
10009578:	b03fe11e 	bne	r22,zero,10009500 <__alt_data_end+0xf8009500>
1000957c:	a809883a 	mov	r4,r21
10009580:	800b883a 	mov	r5,r16
10009584:	0004bb80 	call	10004bb8 <_fflush_r>
10009588:	103fbc1e 	bne	r2,zero,1000947c <__alt_data_end+0xf800947c>
1000958c:	0007883a 	mov	r3,zero
10009590:	003fdb06 	br	10009500 <__alt_data_end+0xf8009500>
10009594:	81000017 	ldw	r4,0(r16)
10009598:	80800417 	ldw	r2,16(r16)
1000959c:	1100012e 	bgeu	r2,r4,100095a4 <__sfvwrite_r+0x2ec>
100095a0:	a4805836 	bltu	r20,r18,10009704 <__sfvwrite_r+0x44c>
100095a4:	81c00517 	ldw	r7,20(r16)
100095a8:	91c01a36 	bltu	r18,r7,10009614 <__sfvwrite_r+0x35c>
100095ac:	80800917 	ldw	r2,36(r16)
100095b0:	81400717 	ldw	r5,28(r16)
100095b4:	a809883a 	mov	r4,r21
100095b8:	b00d883a 	mov	r6,r22
100095bc:	103ee83a 	callr	r2
100095c0:	1029883a 	mov	r20,r2
100095c4:	00bfad0e 	bge	zero,r2,1000947c <__alt_data_end+0xf800947c>
100095c8:	a005883a 	mov	r2,r20
100095cc:	003f9306 	br	1000941c <__alt_data_end+0xf800941c>
100095d0:	b80d883a 	mov	r6,r23
100095d4:	e00b883a 	mov	r5,fp
100095d8:	d8c00115 	stw	r3,4(sp)
100095dc:	00098340 	call	10009834 <memmove>
100095e0:	80800217 	ldw	r2,8(r16)
100095e4:	81000017 	ldw	r4,0(r16)
100095e8:	d8c00117 	ldw	r3,4(sp)
100095ec:	15c5c83a 	sub	r2,r2,r23
100095f0:	25ef883a 	add	r23,r4,r23
100095f4:	80800215 	stw	r2,8(r16)
100095f8:	85c00015 	stw	r23,0(r16)
100095fc:	003fbe06 	br	100094f8 <__alt_data_end+0xf80094f8>
10009600:	81000017 	ldw	r4,0(r16)
10009604:	9039883a 	mov	fp,r18
10009608:	9029883a 	mov	r20,r18
1000960c:	902f883a 	mov	r23,r18
10009610:	003f7806 	br	100093f4 <__alt_data_end+0xf80093f4>
10009614:	b00b883a 	mov	r5,r22
10009618:	900d883a 	mov	r6,r18
1000961c:	00098340 	call	10009834 <memmove>
10009620:	80c00217 	ldw	r3,8(r16)
10009624:	80800017 	ldw	r2,0(r16)
10009628:	9029883a 	mov	r20,r18
1000962c:	1c87c83a 	sub	r3,r3,r18
10009630:	1485883a 	add	r2,r2,r18
10009634:	80800015 	stw	r2,0(r16)
10009638:	80c00215 	stw	r3,8(r16)
1000963c:	9005883a 	mov	r2,r18
10009640:	003f7606 	br	1000941c <__alt_data_end+0xf800941c>
10009644:	e009883a 	mov	r4,fp
10009648:	01400284 	movi	r5,10
1000964c:	900d883a 	mov	r6,r18
10009650:	00061880 	call	10006188 <memchr>
10009654:	10003926 	beq	r2,zero,1000973c <__sfvwrite_r+0x484>
10009658:	15800044 	addi	r22,r2,1
1000965c:	b72dc83a 	sub	r22,r22,fp
10009660:	00c00044 	movi	r3,1
10009664:	003f8f06 	br	100094a4 <__alt_data_end+0xf80094a4>
10009668:	81000517 	ldw	r4,20(r16)
1000966c:	81400417 	ldw	r5,16(r16)
10009670:	80c00017 	ldw	r3,0(r16)
10009674:	210d883a 	add	r6,r4,r4
10009678:	3109883a 	add	r4,r6,r4
1000967c:	2028d7fa 	srli	r20,r4,31
10009680:	196fc83a 	sub	r23,r3,r5
10009684:	b9800044 	addi	r6,r23,1
10009688:	a109883a 	add	r4,r20,r4
1000968c:	2029d07a 	srai	r20,r4,1
10009690:	348d883a 	add	r6,r6,r18
10009694:	a180272e 	bgeu	r20,r6,10009734 <__sfvwrite_r+0x47c>
10009698:	3029883a 	mov	r20,r6
1000969c:	1081000c 	andi	r2,r2,1024
100096a0:	a809883a 	mov	r4,r21
100096a4:	103f6d26 	beq	r2,zero,1000945c <__alt_data_end+0xf800945c>
100096a8:	300b883a 	mov	r5,r6
100096ac:	00059c40 	call	100059c4 <_malloc_r>
100096b0:	1039883a 	mov	fp,r2
100096b4:	103f6f26 	beq	r2,zero,10009474 <__alt_data_end+0xf8009474>
100096b8:	81400417 	ldw	r5,16(r16)
100096bc:	1009883a 	mov	r4,r2
100096c0:	b80d883a 	mov	r6,r23
100096c4:	00062700 	call	10006270 <memcpy>
100096c8:	8080030b 	ldhu	r2,12(r16)
100096cc:	00fedfc4 	movi	r3,-1153
100096d0:	10c4703a 	and	r2,r2,r3
100096d4:	10802014 	ori	r2,r2,128
100096d8:	8080030d 	sth	r2,12(r16)
100096dc:	e5c9883a 	add	r4,fp,r23
100096e0:	a5c7c83a 	sub	r3,r20,r23
100096e4:	87000415 	stw	fp,16(r16)
100096e8:	85000515 	stw	r20,20(r16)
100096ec:	81000015 	stw	r4,0(r16)
100096f0:	9039883a 	mov	fp,r18
100096f4:	80c00215 	stw	r3,8(r16)
100096f8:	9029883a 	mov	r20,r18
100096fc:	902f883a 	mov	r23,r18
10009700:	003f3c06 	br	100093f4 <__alt_data_end+0xf80093f4>
10009704:	b00b883a 	mov	r5,r22
10009708:	a00d883a 	mov	r6,r20
1000970c:	00098340 	call	10009834 <memmove>
10009710:	80800017 	ldw	r2,0(r16)
10009714:	a809883a 	mov	r4,r21
10009718:	800b883a 	mov	r5,r16
1000971c:	1505883a 	add	r2,r2,r20
10009720:	80800015 	stw	r2,0(r16)
10009724:	0004bb80 	call	10004bb8 <_fflush_r>
10009728:	103f541e 	bne	r2,zero,1000947c <__alt_data_end+0xf800947c>
1000972c:	a005883a 	mov	r2,r20
10009730:	003f3a06 	br	1000941c <__alt_data_end+0xf800941c>
10009734:	a00d883a 	mov	r6,r20
10009738:	003fd806 	br	1000969c <__alt_data_end+0xf800969c>
1000973c:	95800044 	addi	r22,r18,1
10009740:	00c00044 	movi	r3,1
10009744:	003f5706 	br	100094a4 <__alt_data_end+0xf80094a4>
10009748:	80c0030b 	ldhu	r3,12(r16)
1000974c:	00bfffc4 	movi	r2,-1
10009750:	18c01014 	ori	r3,r3,64
10009754:	80c0030d 	sth	r3,12(r16)
10009758:	00c00244 	movi	r3,9
1000975c:	a8c00015 	stw	r3,0(r21)
10009760:	003f0106 	br	10009368 <__alt_data_end+0xf8009368>

10009764 <_isatty_r>:
10009764:	defffd04 	addi	sp,sp,-12
10009768:	dc400115 	stw	r17,4(sp)
1000976c:	dc000015 	stw	r16,0(sp)
10009770:	2023883a 	mov	r17,r4
10009774:	04040074 	movhi	r16,4097
10009778:	840df404 	addi	r16,r16,14288
1000977c:	2809883a 	mov	r4,r5
10009780:	dfc00215 	stw	ra,8(sp)
10009784:	80000015 	stw	zero,0(r16)
10009788:	000db540 	call	1000db54 <isatty>
1000978c:	00ffffc4 	movi	r3,-1
10009790:	10c00526 	beq	r2,r3,100097a8 <_isatty_r+0x44>
10009794:	dfc00217 	ldw	ra,8(sp)
10009798:	dc400117 	ldw	r17,4(sp)
1000979c:	dc000017 	ldw	r16,0(sp)
100097a0:	dec00304 	addi	sp,sp,12
100097a4:	f800283a 	ret
100097a8:	80c00017 	ldw	r3,0(r16)
100097ac:	183ff926 	beq	r3,zero,10009794 <__alt_data_end+0xf8009794>
100097b0:	88c00015 	stw	r3,0(r17)
100097b4:	dfc00217 	ldw	ra,8(sp)
100097b8:	dc400117 	ldw	r17,4(sp)
100097bc:	dc000017 	ldw	r16,0(sp)
100097c0:	dec00304 	addi	sp,sp,12
100097c4:	f800283a 	ret

100097c8 <_lseek_r>:
100097c8:	defffd04 	addi	sp,sp,-12
100097cc:	dc400115 	stw	r17,4(sp)
100097d0:	dc000015 	stw	r16,0(sp)
100097d4:	2023883a 	mov	r17,r4
100097d8:	04040074 	movhi	r16,4097
100097dc:	840df404 	addi	r16,r16,14288
100097e0:	2809883a 	mov	r4,r5
100097e4:	300b883a 	mov	r5,r6
100097e8:	380d883a 	mov	r6,r7
100097ec:	dfc00215 	stw	ra,8(sp)
100097f0:	80000015 	stw	zero,0(r16)
100097f4:	000dd300 	call	1000dd30 <lseek>
100097f8:	00ffffc4 	movi	r3,-1
100097fc:	10c00526 	beq	r2,r3,10009814 <_lseek_r+0x4c>
10009800:	dfc00217 	ldw	ra,8(sp)
10009804:	dc400117 	ldw	r17,4(sp)
10009808:	dc000017 	ldw	r16,0(sp)
1000980c:	dec00304 	addi	sp,sp,12
10009810:	f800283a 	ret
10009814:	80c00017 	ldw	r3,0(r16)
10009818:	183ff926 	beq	r3,zero,10009800 <__alt_data_end+0xf8009800>
1000981c:	88c00015 	stw	r3,0(r17)
10009820:	dfc00217 	ldw	ra,8(sp)
10009824:	dc400117 	ldw	r17,4(sp)
10009828:	dc000017 	ldw	r16,0(sp)
1000982c:	dec00304 	addi	sp,sp,12
10009830:	f800283a 	ret

10009834 <memmove>:
10009834:	2005883a 	mov	r2,r4
10009838:	29000b2e 	bgeu	r5,r4,10009868 <memmove+0x34>
1000983c:	298f883a 	add	r7,r5,r6
10009840:	21c0092e 	bgeu	r4,r7,10009868 <memmove+0x34>
10009844:	2187883a 	add	r3,r4,r6
10009848:	198bc83a 	sub	r5,r3,r6
1000984c:	30003e26 	beq	r6,zero,10009948 <memmove+0x114>
10009850:	39ffffc4 	addi	r7,r7,-1
10009854:	39000003 	ldbu	r4,0(r7)
10009858:	18ffffc4 	addi	r3,r3,-1
1000985c:	19000005 	stb	r4,0(r3)
10009860:	197ffb1e 	bne	r3,r5,10009850 <__alt_data_end+0xf8009850>
10009864:	f800283a 	ret
10009868:	00c003c4 	movi	r3,15
1000986c:	1980372e 	bgeu	r3,r6,1000994c <memmove+0x118>
10009870:	1146b03a 	or	r3,r2,r5
10009874:	18c000cc 	andi	r3,r3,3
10009878:	1800371e 	bne	r3,zero,10009958 <memmove+0x124>
1000987c:	327ffc04 	addi	r9,r6,-16
10009880:	4812d13a 	srli	r9,r9,4
10009884:	280f883a 	mov	r7,r5
10009888:	1007883a 	mov	r3,r2
1000988c:	4810913a 	slli	r8,r9,4
10009890:	1211883a 	add	r8,r2,r8
10009894:	42000404 	addi	r8,r8,16
10009898:	39000017 	ldw	r4,0(r7)
1000989c:	18c00404 	addi	r3,r3,16
100098a0:	39c00404 	addi	r7,r7,16
100098a4:	193ffc15 	stw	r4,-16(r3)
100098a8:	393ffd17 	ldw	r4,-12(r7)
100098ac:	193ffd15 	stw	r4,-12(r3)
100098b0:	393ffe17 	ldw	r4,-8(r7)
100098b4:	193ffe15 	stw	r4,-8(r3)
100098b8:	393fff17 	ldw	r4,-4(r7)
100098bc:	193fff15 	stw	r4,-4(r3)
100098c0:	1a3ff51e 	bne	r3,r8,10009898 <__alt_data_end+0xf8009898>
100098c4:	49000044 	addi	r4,r9,1
100098c8:	2008913a 	slli	r4,r4,4
100098cc:	328003cc 	andi	r10,r6,15
100098d0:	1107883a 	add	r3,r2,r4
100098d4:	290b883a 	add	r5,r5,r4
100098d8:	010000c4 	movi	r4,3
100098dc:	2280212e 	bgeu	r4,r10,10009964 <memmove+0x130>
100098e0:	52bfff04 	addi	r10,r10,-4
100098e4:	5014d0ba 	srli	r10,r10,2
100098e8:	180f883a 	mov	r7,r3
100098ec:	2809883a 	mov	r4,r5
100098f0:	5291883a 	add	r8,r10,r10
100098f4:	4211883a 	add	r8,r8,r8
100098f8:	42400104 	addi	r9,r8,4
100098fc:	1a53883a 	add	r9,r3,r9
10009900:	22000017 	ldw	r8,0(r4)
10009904:	39c00104 	addi	r7,r7,4
10009908:	21000104 	addi	r4,r4,4
1000990c:	3a3fff15 	stw	r8,-4(r7)
10009910:	3a7ffb1e 	bne	r7,r9,10009900 <__alt_data_end+0xf8009900>
10009914:	51000044 	addi	r4,r10,1
10009918:	2109883a 	add	r4,r4,r4
1000991c:	2109883a 	add	r4,r4,r4
10009920:	318000cc 	andi	r6,r6,3
10009924:	1907883a 	add	r3,r3,r4
10009928:	290b883a 	add	r5,r5,r4
1000992c:	30000c26 	beq	r6,zero,10009960 <memmove+0x12c>
10009930:	198d883a 	add	r6,r3,r6
10009934:	29c00003 	ldbu	r7,0(r5)
10009938:	18c00044 	addi	r3,r3,1
1000993c:	29400044 	addi	r5,r5,1
10009940:	19ffffc5 	stb	r7,-1(r3)
10009944:	19bffb1e 	bne	r3,r6,10009934 <__alt_data_end+0xf8009934>
10009948:	f800283a 	ret
1000994c:	1007883a 	mov	r3,r2
10009950:	303ff71e 	bne	r6,zero,10009930 <__alt_data_end+0xf8009930>
10009954:	00000206 	br	10009960 <memmove+0x12c>
10009958:	1007883a 	mov	r3,r2
1000995c:	003ff406 	br	10009930 <__alt_data_end+0xf8009930>
10009960:	f800283a 	ret
10009964:	500d883a 	mov	r6,r10
10009968:	303ff11e 	bne	r6,zero,10009930 <__alt_data_end+0xf8009930>
1000996c:	003ffc06 	br	10009960 <__alt_data_end+0xf8009960>

10009970 <_read_r>:
10009970:	defffd04 	addi	sp,sp,-12
10009974:	dc400115 	stw	r17,4(sp)
10009978:	dc000015 	stw	r16,0(sp)
1000997c:	2023883a 	mov	r17,r4
10009980:	04040074 	movhi	r16,4097
10009984:	840df404 	addi	r16,r16,14288
10009988:	2809883a 	mov	r4,r5
1000998c:	300b883a 	mov	r5,r6
10009990:	380d883a 	mov	r6,r7
10009994:	dfc00215 	stw	ra,8(sp)
10009998:	80000015 	stw	zero,0(r16)
1000999c:	000df100 	call	1000df10 <read>
100099a0:	00ffffc4 	movi	r3,-1
100099a4:	10c00526 	beq	r2,r3,100099bc <_read_r+0x4c>
100099a8:	dfc00217 	ldw	ra,8(sp)
100099ac:	dc400117 	ldw	r17,4(sp)
100099b0:	dc000017 	ldw	r16,0(sp)
100099b4:	dec00304 	addi	sp,sp,12
100099b8:	f800283a 	ret
100099bc:	80c00017 	ldw	r3,0(r16)
100099c0:	183ff926 	beq	r3,zero,100099a8 <__alt_data_end+0xf80099a8>
100099c4:	88c00015 	stw	r3,0(r17)
100099c8:	dfc00217 	ldw	ra,8(sp)
100099cc:	dc400117 	ldw	r17,4(sp)
100099d0:	dc000017 	ldw	r16,0(sp)
100099d4:	dec00304 	addi	sp,sp,12
100099d8:	f800283a 	ret

100099dc <_realloc_r>:
100099dc:	defff604 	addi	sp,sp,-40
100099e0:	dd000415 	stw	r20,16(sp)
100099e4:	dc000015 	stw	r16,0(sp)
100099e8:	dfc00915 	stw	ra,36(sp)
100099ec:	df000815 	stw	fp,32(sp)
100099f0:	ddc00715 	stw	r23,28(sp)
100099f4:	dd800615 	stw	r22,24(sp)
100099f8:	dd400515 	stw	r21,20(sp)
100099fc:	dcc00315 	stw	r19,12(sp)
10009a00:	dc800215 	stw	r18,8(sp)
10009a04:	dc400115 	stw	r17,4(sp)
10009a08:	2821883a 	mov	r16,r5
10009a0c:	3029883a 	mov	r20,r6
10009a10:	28009a26 	beq	r5,zero,10009c7c <_realloc_r+0x2a0>
10009a14:	202b883a 	mov	r21,r4
10009a18:	000de800 	call	1000de80 <__malloc_lock>
10009a1c:	80ffff17 	ldw	r3,-4(r16)
10009a20:	047fff04 	movi	r17,-4
10009a24:	a08002c4 	addi	r2,r20,11
10009a28:	01000584 	movi	r4,22
10009a2c:	84fffe04 	addi	r19,r16,-8
10009a30:	1c62703a 	and	r17,r3,r17
10009a34:	2080372e 	bgeu	r4,r2,10009b14 <_realloc_r+0x138>
10009a38:	04bffe04 	movi	r18,-8
10009a3c:	14a4703a 	and	r18,r2,r18
10009a40:	9005883a 	mov	r2,r18
10009a44:	90005b16 	blt	r18,zero,10009bb4 <_realloc_r+0x1d8>
10009a48:	95005a36 	bltu	r18,r20,10009bb4 <_realloc_r+0x1d8>
10009a4c:	8880340e 	bge	r17,r2,10009b20 <_realloc_r+0x144>
10009a50:	05c40074 	movhi	r23,4097
10009a54:	bdc19b04 	addi	r23,r23,1644
10009a58:	b9000217 	ldw	r4,8(r23)
10009a5c:	9c4b883a 	add	r5,r19,r17
10009a60:	21409626 	beq	r4,r5,10009cbc <_realloc_r+0x2e0>
10009a64:	29800117 	ldw	r6,4(r5)
10009a68:	01ffff84 	movi	r7,-2
10009a6c:	31ce703a 	and	r7,r6,r7
10009a70:	29cf883a 	add	r7,r5,r7
10009a74:	39c00117 	ldw	r7,4(r7)
10009a78:	39c0004c 	andi	r7,r7,1
10009a7c:	38004226 	beq	r7,zero,10009b88 <_realloc_r+0x1ac>
10009a80:	000d883a 	mov	r6,zero
10009a84:	000b883a 	mov	r5,zero
10009a88:	18c0004c 	andi	r3,r3,1
10009a8c:	18005c1e 	bne	r3,zero,10009c00 <_realloc_r+0x224>
10009a90:	85bffe17 	ldw	r22,-8(r16)
10009a94:	00ffff04 	movi	r3,-4
10009a98:	9dadc83a 	sub	r22,r19,r22
10009a9c:	b1c00117 	ldw	r7,4(r22)
10009aa0:	38c6703a 	and	r3,r7,r3
10009aa4:	28005426 	beq	r5,zero,10009bf8 <_realloc_r+0x21c>
10009aa8:	1c47883a 	add	r3,r3,r17
10009aac:	2900bf26 	beq	r5,r4,10009dac <_realloc_r+0x3d0>
10009ab0:	30ef883a 	add	r23,r6,r3
10009ab4:	b8807e16 	blt	r23,r2,10009cb0 <_realloc_r+0x2d4>
10009ab8:	28800317 	ldw	r2,12(r5)
10009abc:	28c00217 	ldw	r3,8(r5)
10009ac0:	89bfff04 	addi	r6,r17,-4
10009ac4:	01000904 	movi	r4,36
10009ac8:	18800315 	stw	r2,12(r3)
10009acc:	10c00215 	stw	r3,8(r2)
10009ad0:	b1400217 	ldw	r5,8(r22)
10009ad4:	b0c00317 	ldw	r3,12(r22)
10009ad8:	b5000204 	addi	r20,r22,8
10009adc:	28c00315 	stw	r3,12(r5)
10009ae0:	19400215 	stw	r5,8(r3)
10009ae4:	21808536 	bltu	r4,r6,10009cfc <_realloc_r+0x320>
10009ae8:	008004c4 	movi	r2,19
10009aec:	1180932e 	bgeu	r2,r6,10009d3c <_realloc_r+0x360>
10009af0:	80800017 	ldw	r2,0(r16)
10009af4:	b0800215 	stw	r2,8(r22)
10009af8:	80800117 	ldw	r2,4(r16)
10009afc:	b0800315 	stw	r2,12(r22)
10009b00:	008006c4 	movi	r2,27
10009b04:	1180df36 	bltu	r2,r6,10009e84 <_realloc_r+0x4a8>
10009b08:	b0c00404 	addi	r3,r22,16
10009b0c:	84000204 	addi	r16,r16,8
10009b10:	00008b06 	br	10009d40 <_realloc_r+0x364>
10009b14:	00800404 	movi	r2,16
10009b18:	1025883a 	mov	r18,r2
10009b1c:	003fca06 	br	10009a48 <__alt_data_end+0xf8009a48>
10009b20:	8029883a 	mov	r20,r16
10009b24:	8c8dc83a 	sub	r6,r17,r18
10009b28:	008003c4 	movi	r2,15
10009b2c:	18c0004c 	andi	r3,r3,1
10009b30:	11802436 	bltu	r2,r6,10009bc4 <_realloc_r+0x1e8>
10009b34:	1c46b03a 	or	r3,r3,r17
10009b38:	98c00115 	stw	r3,4(r19)
10009b3c:	9c63883a 	add	r17,r19,r17
10009b40:	88800117 	ldw	r2,4(r17)
10009b44:	10800054 	ori	r2,r2,1
10009b48:	88800115 	stw	r2,4(r17)
10009b4c:	a809883a 	mov	r4,r21
10009b50:	000dea00 	call	1000dea0 <__malloc_unlock>
10009b54:	a005883a 	mov	r2,r20
10009b58:	dfc00917 	ldw	ra,36(sp)
10009b5c:	df000817 	ldw	fp,32(sp)
10009b60:	ddc00717 	ldw	r23,28(sp)
10009b64:	dd800617 	ldw	r22,24(sp)
10009b68:	dd400517 	ldw	r21,20(sp)
10009b6c:	dd000417 	ldw	r20,16(sp)
10009b70:	dcc00317 	ldw	r19,12(sp)
10009b74:	dc800217 	ldw	r18,8(sp)
10009b78:	dc400117 	ldw	r17,4(sp)
10009b7c:	dc000017 	ldw	r16,0(sp)
10009b80:	dec00a04 	addi	sp,sp,40
10009b84:	f800283a 	ret
10009b88:	01ffff04 	movi	r7,-4
10009b8c:	31cc703a 	and	r6,r6,r7
10009b90:	344f883a 	add	r7,r6,r17
10009b94:	38bfbc16 	blt	r7,r2,10009a88 <__alt_data_end+0xf8009a88>
10009b98:	28800317 	ldw	r2,12(r5)
10009b9c:	29000217 	ldw	r4,8(r5)
10009ba0:	8029883a 	mov	r20,r16
10009ba4:	3823883a 	mov	r17,r7
10009ba8:	20800315 	stw	r2,12(r4)
10009bac:	11000215 	stw	r4,8(r2)
10009bb0:	003fdc06 	br	10009b24 <__alt_data_end+0xf8009b24>
10009bb4:	00800304 	movi	r2,12
10009bb8:	a8800015 	stw	r2,0(r21)
10009bbc:	0005883a 	mov	r2,zero
10009bc0:	003fe506 	br	10009b58 <__alt_data_end+0xf8009b58>
10009bc4:	1c86b03a 	or	r3,r3,r18
10009bc8:	9c8b883a 	add	r5,r19,r18
10009bcc:	98c00115 	stw	r3,4(r19)
10009bd0:	30800054 	ori	r2,r6,1
10009bd4:	28800115 	stw	r2,4(r5)
10009bd8:	298d883a 	add	r6,r5,r6
10009bdc:	30800117 	ldw	r2,4(r6)
10009be0:	a809883a 	mov	r4,r21
10009be4:	29400204 	addi	r5,r5,8
10009be8:	10800054 	ori	r2,r2,1
10009bec:	30800115 	stw	r2,4(r6)
10009bf0:	000530c0 	call	1000530c <_free_r>
10009bf4:	003fd506 	br	10009b4c <__alt_data_end+0xf8009b4c>
10009bf8:	1c6f883a 	add	r23,r3,r17
10009bfc:	b880370e 	bge	r23,r2,10009cdc <_realloc_r+0x300>
10009c00:	a00b883a 	mov	r5,r20
10009c04:	a809883a 	mov	r4,r21
10009c08:	00059c40 	call	100059c4 <_malloc_r>
10009c0c:	1029883a 	mov	r20,r2
10009c10:	1000c026 	beq	r2,zero,10009f14 <_realloc_r+0x538>
10009c14:	80ffff17 	ldw	r3,-4(r16)
10009c18:	113ffe04 	addi	r4,r2,-8
10009c1c:	00bfff84 	movi	r2,-2
10009c20:	1884703a 	and	r2,r3,r2
10009c24:	9885883a 	add	r2,r19,r2
10009c28:	20809026 	beq	r4,r2,10009e6c <_realloc_r+0x490>
10009c2c:	89bfff04 	addi	r6,r17,-4
10009c30:	00800904 	movi	r2,36
10009c34:	11805936 	bltu	r2,r6,10009d9c <_realloc_r+0x3c0>
10009c38:	00c004c4 	movi	r3,19
10009c3c:	19803636 	bltu	r3,r6,10009d18 <_realloc_r+0x33c>
10009c40:	a005883a 	mov	r2,r20
10009c44:	8007883a 	mov	r3,r16
10009c48:	19000017 	ldw	r4,0(r3)
10009c4c:	11000015 	stw	r4,0(r2)
10009c50:	19000117 	ldw	r4,4(r3)
10009c54:	11000115 	stw	r4,4(r2)
10009c58:	18c00217 	ldw	r3,8(r3)
10009c5c:	10c00215 	stw	r3,8(r2)
10009c60:	800b883a 	mov	r5,r16
10009c64:	a809883a 	mov	r4,r21
10009c68:	000530c0 	call	1000530c <_free_r>
10009c6c:	a809883a 	mov	r4,r21
10009c70:	000dea00 	call	1000dea0 <__malloc_unlock>
10009c74:	a005883a 	mov	r2,r20
10009c78:	003fb706 	br	10009b58 <__alt_data_end+0xf8009b58>
10009c7c:	300b883a 	mov	r5,r6
10009c80:	dfc00917 	ldw	ra,36(sp)
10009c84:	df000817 	ldw	fp,32(sp)
10009c88:	ddc00717 	ldw	r23,28(sp)
10009c8c:	dd800617 	ldw	r22,24(sp)
10009c90:	dd400517 	ldw	r21,20(sp)
10009c94:	dd000417 	ldw	r20,16(sp)
10009c98:	dcc00317 	ldw	r19,12(sp)
10009c9c:	dc800217 	ldw	r18,8(sp)
10009ca0:	dc400117 	ldw	r17,4(sp)
10009ca4:	dc000017 	ldw	r16,0(sp)
10009ca8:	dec00a04 	addi	sp,sp,40
10009cac:	00059c41 	jmpi	100059c4 <_malloc_r>
10009cb0:	182f883a 	mov	r23,r3
10009cb4:	b8bfd216 	blt	r23,r2,10009c00 <__alt_data_end+0xf8009c00>
10009cb8:	00000806 	br	10009cdc <_realloc_r+0x300>
10009cbc:	21800117 	ldw	r6,4(r4)
10009cc0:	017fff04 	movi	r5,-4
10009cc4:	91c00404 	addi	r7,r18,16
10009cc8:	314c703a 	and	r6,r6,r5
10009ccc:	344b883a 	add	r5,r6,r17
10009cd0:	29c0250e 	bge	r5,r7,10009d68 <_realloc_r+0x38c>
10009cd4:	200b883a 	mov	r5,r4
10009cd8:	003f6b06 	br	10009a88 <__alt_data_end+0xf8009a88>
10009cdc:	b0800317 	ldw	r2,12(r22)
10009ce0:	b0c00217 	ldw	r3,8(r22)
10009ce4:	89bfff04 	addi	r6,r17,-4
10009ce8:	01000904 	movi	r4,36
10009cec:	18800315 	stw	r2,12(r3)
10009cf0:	10c00215 	stw	r3,8(r2)
10009cf4:	b5000204 	addi	r20,r22,8
10009cf8:	21bf7b2e 	bgeu	r4,r6,10009ae8 <__alt_data_end+0xf8009ae8>
10009cfc:	a009883a 	mov	r4,r20
10009d00:	800b883a 	mov	r5,r16
10009d04:	00098340 	call	10009834 <memmove>
10009d08:	b0c00117 	ldw	r3,4(r22)
10009d0c:	b823883a 	mov	r17,r23
10009d10:	b027883a 	mov	r19,r22
10009d14:	003f8306 	br	10009b24 <__alt_data_end+0xf8009b24>
10009d18:	80c00017 	ldw	r3,0(r16)
10009d1c:	a0c00015 	stw	r3,0(r20)
10009d20:	80c00117 	ldw	r3,4(r16)
10009d24:	a0c00115 	stw	r3,4(r20)
10009d28:	00c006c4 	movi	r3,27
10009d2c:	19804736 	bltu	r3,r6,10009e4c <_realloc_r+0x470>
10009d30:	a0800204 	addi	r2,r20,8
10009d34:	80c00204 	addi	r3,r16,8
10009d38:	003fc306 	br	10009c48 <__alt_data_end+0xf8009c48>
10009d3c:	a007883a 	mov	r3,r20
10009d40:	80800017 	ldw	r2,0(r16)
10009d44:	b823883a 	mov	r17,r23
10009d48:	b027883a 	mov	r19,r22
10009d4c:	18800015 	stw	r2,0(r3)
10009d50:	80800117 	ldw	r2,4(r16)
10009d54:	18800115 	stw	r2,4(r3)
10009d58:	80800217 	ldw	r2,8(r16)
10009d5c:	18800215 	stw	r2,8(r3)
10009d60:	b0c00117 	ldw	r3,4(r22)
10009d64:	003f6f06 	br	10009b24 <__alt_data_end+0xf8009b24>
10009d68:	9ca7883a 	add	r19,r19,r18
10009d6c:	2c85c83a 	sub	r2,r5,r18
10009d70:	bcc00215 	stw	r19,8(r23)
10009d74:	10800054 	ori	r2,r2,1
10009d78:	98800115 	stw	r2,4(r19)
10009d7c:	80bfff17 	ldw	r2,-4(r16)
10009d80:	a809883a 	mov	r4,r21
10009d84:	1080004c 	andi	r2,r2,1
10009d88:	90a4b03a 	or	r18,r18,r2
10009d8c:	84bfff15 	stw	r18,-4(r16)
10009d90:	000dea00 	call	1000dea0 <__malloc_unlock>
10009d94:	8005883a 	mov	r2,r16
10009d98:	003f6f06 	br	10009b58 <__alt_data_end+0xf8009b58>
10009d9c:	a009883a 	mov	r4,r20
10009da0:	800b883a 	mov	r5,r16
10009da4:	00098340 	call	10009834 <memmove>
10009da8:	003fad06 	br	10009c60 <__alt_data_end+0xf8009c60>
10009dac:	30f9883a 	add	fp,r6,r3
10009db0:	91000404 	addi	r4,r18,16
10009db4:	e13fbe16 	blt	fp,r4,10009cb0 <__alt_data_end+0xf8009cb0>
10009db8:	b0800317 	ldw	r2,12(r22)
10009dbc:	b0c00217 	ldw	r3,8(r22)
10009dc0:	89bfff04 	addi	r6,r17,-4
10009dc4:	01000904 	movi	r4,36
10009dc8:	18800315 	stw	r2,12(r3)
10009dcc:	10c00215 	stw	r3,8(r2)
10009dd0:	b4400204 	addi	r17,r22,8
10009dd4:	21804336 	bltu	r4,r6,10009ee4 <_realloc_r+0x508>
10009dd8:	008004c4 	movi	r2,19
10009ddc:	11803f2e 	bgeu	r2,r6,10009edc <_realloc_r+0x500>
10009de0:	80800017 	ldw	r2,0(r16)
10009de4:	b0800215 	stw	r2,8(r22)
10009de8:	80800117 	ldw	r2,4(r16)
10009dec:	b0800315 	stw	r2,12(r22)
10009df0:	008006c4 	movi	r2,27
10009df4:	11803f36 	bltu	r2,r6,10009ef4 <_realloc_r+0x518>
10009df8:	b0c00404 	addi	r3,r22,16
10009dfc:	84000204 	addi	r16,r16,8
10009e00:	80800017 	ldw	r2,0(r16)
10009e04:	18800015 	stw	r2,0(r3)
10009e08:	80800117 	ldw	r2,4(r16)
10009e0c:	18800115 	stw	r2,4(r3)
10009e10:	80800217 	ldw	r2,8(r16)
10009e14:	18800215 	stw	r2,8(r3)
10009e18:	b487883a 	add	r3,r22,r18
10009e1c:	e485c83a 	sub	r2,fp,r18
10009e20:	b8c00215 	stw	r3,8(r23)
10009e24:	10800054 	ori	r2,r2,1
10009e28:	18800115 	stw	r2,4(r3)
10009e2c:	b0800117 	ldw	r2,4(r22)
10009e30:	a809883a 	mov	r4,r21
10009e34:	1080004c 	andi	r2,r2,1
10009e38:	90a4b03a 	or	r18,r18,r2
10009e3c:	b4800115 	stw	r18,4(r22)
10009e40:	000dea00 	call	1000dea0 <__malloc_unlock>
10009e44:	8805883a 	mov	r2,r17
10009e48:	003f4306 	br	10009b58 <__alt_data_end+0xf8009b58>
10009e4c:	80c00217 	ldw	r3,8(r16)
10009e50:	a0c00215 	stw	r3,8(r20)
10009e54:	80c00317 	ldw	r3,12(r16)
10009e58:	a0c00315 	stw	r3,12(r20)
10009e5c:	30801126 	beq	r6,r2,10009ea4 <_realloc_r+0x4c8>
10009e60:	a0800404 	addi	r2,r20,16
10009e64:	80c00404 	addi	r3,r16,16
10009e68:	003f7706 	br	10009c48 <__alt_data_end+0xf8009c48>
10009e6c:	a13fff17 	ldw	r4,-4(r20)
10009e70:	00bfff04 	movi	r2,-4
10009e74:	8029883a 	mov	r20,r16
10009e78:	2084703a 	and	r2,r4,r2
10009e7c:	88a3883a 	add	r17,r17,r2
10009e80:	003f2806 	br	10009b24 <__alt_data_end+0xf8009b24>
10009e84:	80800217 	ldw	r2,8(r16)
10009e88:	b0800415 	stw	r2,16(r22)
10009e8c:	80800317 	ldw	r2,12(r16)
10009e90:	b0800515 	stw	r2,20(r22)
10009e94:	31000a26 	beq	r6,r4,10009ec0 <_realloc_r+0x4e4>
10009e98:	b0c00604 	addi	r3,r22,24
10009e9c:	84000404 	addi	r16,r16,16
10009ea0:	003fa706 	br	10009d40 <__alt_data_end+0xf8009d40>
10009ea4:	81000417 	ldw	r4,16(r16)
10009ea8:	a0800604 	addi	r2,r20,24
10009eac:	80c00604 	addi	r3,r16,24
10009eb0:	a1000415 	stw	r4,16(r20)
10009eb4:	81000517 	ldw	r4,20(r16)
10009eb8:	a1000515 	stw	r4,20(r20)
10009ebc:	003f6206 	br	10009c48 <__alt_data_end+0xf8009c48>
10009ec0:	80800417 	ldw	r2,16(r16)
10009ec4:	84000604 	addi	r16,r16,24
10009ec8:	b0c00804 	addi	r3,r22,32
10009ecc:	b0800615 	stw	r2,24(r22)
10009ed0:	80bfff17 	ldw	r2,-4(r16)
10009ed4:	b0800715 	stw	r2,28(r22)
10009ed8:	003f9906 	br	10009d40 <__alt_data_end+0xf8009d40>
10009edc:	8807883a 	mov	r3,r17
10009ee0:	003fc706 	br	10009e00 <__alt_data_end+0xf8009e00>
10009ee4:	8809883a 	mov	r4,r17
10009ee8:	800b883a 	mov	r5,r16
10009eec:	00098340 	call	10009834 <memmove>
10009ef0:	003fc906 	br	10009e18 <__alt_data_end+0xf8009e18>
10009ef4:	80800217 	ldw	r2,8(r16)
10009ef8:	b0800415 	stw	r2,16(r22)
10009efc:	80800317 	ldw	r2,12(r16)
10009f00:	b0800515 	stw	r2,20(r22)
10009f04:	31000726 	beq	r6,r4,10009f24 <_realloc_r+0x548>
10009f08:	b0c00604 	addi	r3,r22,24
10009f0c:	84000404 	addi	r16,r16,16
10009f10:	003fbb06 	br	10009e00 <__alt_data_end+0xf8009e00>
10009f14:	a809883a 	mov	r4,r21
10009f18:	000dea00 	call	1000dea0 <__malloc_unlock>
10009f1c:	0005883a 	mov	r2,zero
10009f20:	003f0d06 	br	10009b58 <__alt_data_end+0xf8009b58>
10009f24:	80800417 	ldw	r2,16(r16)
10009f28:	84000604 	addi	r16,r16,24
10009f2c:	b0c00804 	addi	r3,r22,32
10009f30:	b0800615 	stw	r2,24(r22)
10009f34:	80bfff17 	ldw	r2,-4(r16)
10009f38:	b0800715 	stw	r2,28(r22)
10009f3c:	003fb006 	br	10009e00 <__alt_data_end+0xf8009e00>

10009f40 <__swbuf_r>:
10009f40:	defffc04 	addi	sp,sp,-16
10009f44:	dc800215 	stw	r18,8(sp)
10009f48:	dc400115 	stw	r17,4(sp)
10009f4c:	dc000015 	stw	r16,0(sp)
10009f50:	dfc00315 	stw	ra,12(sp)
10009f54:	2023883a 	mov	r17,r4
10009f58:	2825883a 	mov	r18,r5
10009f5c:	3021883a 	mov	r16,r6
10009f60:	20000226 	beq	r4,zero,10009f6c <__swbuf_r+0x2c>
10009f64:	20800e17 	ldw	r2,56(r4)
10009f68:	10004d26 	beq	r2,zero,1000a0a0 <__swbuf_r+0x160>
10009f6c:	80800617 	ldw	r2,24(r16)
10009f70:	80c0030b 	ldhu	r3,12(r16)
10009f74:	80800215 	stw	r2,8(r16)
10009f78:	1880020c 	andi	r2,r3,8
10009f7c:	10004126 	beq	r2,zero,1000a084 <__swbuf_r+0x144>
10009f80:	80800417 	ldw	r2,16(r16)
10009f84:	10003f26 	beq	r2,zero,1000a084 <__swbuf_r+0x144>
10009f88:	1908000c 	andi	r4,r3,8192
10009f8c:	94803fcc 	andi	r18,r18,255
10009f90:	20001726 	beq	r4,zero,10009ff0 <__swbuf_r+0xb0>
10009f94:	80c00017 	ldw	r3,0(r16)
10009f98:	81000517 	ldw	r4,20(r16)
10009f9c:	1885c83a 	sub	r2,r3,r2
10009fa0:	11001d0e 	bge	r2,r4,1000a018 <__swbuf_r+0xd8>
10009fa4:	81000217 	ldw	r4,8(r16)
10009fa8:	19400044 	addi	r5,r3,1
10009fac:	81400015 	stw	r5,0(r16)
10009fb0:	213fffc4 	addi	r4,r4,-1
10009fb4:	81000215 	stw	r4,8(r16)
10009fb8:	1c800005 	stb	r18,0(r3)
10009fbc:	80c00517 	ldw	r3,20(r16)
10009fc0:	10800044 	addi	r2,r2,1
10009fc4:	18802226 	beq	r3,r2,1000a050 <__swbuf_r+0x110>
10009fc8:	8080030b 	ldhu	r2,12(r16)
10009fcc:	1080004c 	andi	r2,r2,1
10009fd0:	1000251e 	bne	r2,zero,1000a068 <__swbuf_r+0x128>
10009fd4:	9005883a 	mov	r2,r18
10009fd8:	dfc00317 	ldw	ra,12(sp)
10009fdc:	dc800217 	ldw	r18,8(sp)
10009fe0:	dc400117 	ldw	r17,4(sp)
10009fe4:	dc000017 	ldw	r16,0(sp)
10009fe8:	dec00404 	addi	sp,sp,16
10009fec:	f800283a 	ret
10009ff0:	81401917 	ldw	r5,100(r16)
10009ff4:	18c80014 	ori	r3,r3,8192
10009ff8:	0137ffc4 	movi	r4,-8193
10009ffc:	2908703a 	and	r4,r5,r4
1000a000:	80c0030d 	sth	r3,12(r16)
1000a004:	80c00017 	ldw	r3,0(r16)
1000a008:	81001915 	stw	r4,100(r16)
1000a00c:	81000517 	ldw	r4,20(r16)
1000a010:	1885c83a 	sub	r2,r3,r2
1000a014:	113fe316 	blt	r2,r4,10009fa4 <__alt_data_end+0xf8009fa4>
1000a018:	8809883a 	mov	r4,r17
1000a01c:	800b883a 	mov	r5,r16
1000a020:	0004bb80 	call	10004bb8 <_fflush_r>
1000a024:	10000e1e 	bne	r2,zero,1000a060 <__swbuf_r+0x120>
1000a028:	80c00017 	ldw	r3,0(r16)
1000a02c:	81000217 	ldw	r4,8(r16)
1000a030:	00800044 	movi	r2,1
1000a034:	19400044 	addi	r5,r3,1
1000a038:	213fffc4 	addi	r4,r4,-1
1000a03c:	81400015 	stw	r5,0(r16)
1000a040:	81000215 	stw	r4,8(r16)
1000a044:	1c800005 	stb	r18,0(r3)
1000a048:	80c00517 	ldw	r3,20(r16)
1000a04c:	18bfde1e 	bne	r3,r2,10009fc8 <__alt_data_end+0xf8009fc8>
1000a050:	8809883a 	mov	r4,r17
1000a054:	800b883a 	mov	r5,r16
1000a058:	0004bb80 	call	10004bb8 <_fflush_r>
1000a05c:	103fdd26 	beq	r2,zero,10009fd4 <__alt_data_end+0xf8009fd4>
1000a060:	00bfffc4 	movi	r2,-1
1000a064:	003fdc06 	br	10009fd8 <__alt_data_end+0xf8009fd8>
1000a068:	00800284 	movi	r2,10
1000a06c:	90bfd91e 	bne	r18,r2,10009fd4 <__alt_data_end+0xf8009fd4>
1000a070:	8809883a 	mov	r4,r17
1000a074:	800b883a 	mov	r5,r16
1000a078:	0004bb80 	call	10004bb8 <_fflush_r>
1000a07c:	103fd526 	beq	r2,zero,10009fd4 <__alt_data_end+0xf8009fd4>
1000a080:	003ff706 	br	1000a060 <__alt_data_end+0xf800a060>
1000a084:	8809883a 	mov	r4,r17
1000a088:	800b883a 	mov	r5,r16
1000a08c:	000321c0 	call	1000321c <__swsetup_r>
1000a090:	80c0030b 	ldhu	r3,12(r16)
1000a094:	1000041e 	bne	r2,zero,1000a0a8 <__swbuf_r+0x168>
1000a098:	80800417 	ldw	r2,16(r16)
1000a09c:	003fba06 	br	10009f88 <__alt_data_end+0xf8009f88>
1000a0a0:	0004ed80 	call	10004ed8 <__sinit>
1000a0a4:	003fb106 	br	10009f6c <__alt_data_end+0xf8009f6c>
1000a0a8:	18c01014 	ori	r3,r3,64
1000a0ac:	80c0030d 	sth	r3,12(r16)
1000a0b0:	00c00244 	movi	r3,9
1000a0b4:	00bfffc4 	movi	r2,-1
1000a0b8:	88c00015 	stw	r3,0(r17)
1000a0bc:	003fc606 	br	10009fd8 <__alt_data_end+0xf8009fd8>

1000a0c0 <__swbuf>:
1000a0c0:	00c40074 	movhi	r3,4097
1000a0c4:	18c72204 	addi	r3,r3,7304
1000a0c8:	2005883a 	mov	r2,r4
1000a0cc:	19000017 	ldw	r4,0(r3)
1000a0d0:	280d883a 	mov	r6,r5
1000a0d4:	100b883a 	mov	r5,r2
1000a0d8:	0009f401 	jmpi	10009f40 <__swbuf_r>

1000a0dc <_wcrtomb_r>:
1000a0dc:	defff604 	addi	sp,sp,-40
1000a0e0:	dc800815 	stw	r18,32(sp)
1000a0e4:	dc400715 	stw	r17,28(sp)
1000a0e8:	dc000615 	stw	r16,24(sp)
1000a0ec:	00840074 	movhi	r2,4097
1000a0f0:	10872604 	addi	r2,r2,7320
1000a0f4:	dfc00915 	stw	ra,36(sp)
1000a0f8:	2021883a 	mov	r16,r4
1000a0fc:	3823883a 	mov	r17,r7
1000a100:	14800017 	ldw	r18,0(r2)
1000a104:	28001426 	beq	r5,zero,1000a158 <_wcrtomb_r+0x7c>
1000a108:	d9400415 	stw	r5,16(sp)
1000a10c:	d9800515 	stw	r6,20(sp)
1000a110:	00057ac0 	call	100057ac <__locale_charset>
1000a114:	d9400417 	ldw	r5,16(sp)
1000a118:	d9800517 	ldw	r6,20(sp)
1000a11c:	8009883a 	mov	r4,r16
1000a120:	dc400015 	stw	r17,0(sp)
1000a124:	100f883a 	mov	r7,r2
1000a128:	903ee83a 	callr	r18
1000a12c:	00ffffc4 	movi	r3,-1
1000a130:	10c0031e 	bne	r2,r3,1000a140 <_wcrtomb_r+0x64>
1000a134:	88000015 	stw	zero,0(r17)
1000a138:	00c02284 	movi	r3,138
1000a13c:	80c00015 	stw	r3,0(r16)
1000a140:	dfc00917 	ldw	ra,36(sp)
1000a144:	dc800817 	ldw	r18,32(sp)
1000a148:	dc400717 	ldw	r17,28(sp)
1000a14c:	dc000617 	ldw	r16,24(sp)
1000a150:	dec00a04 	addi	sp,sp,40
1000a154:	f800283a 	ret
1000a158:	00057ac0 	call	100057ac <__locale_charset>
1000a15c:	8009883a 	mov	r4,r16
1000a160:	dc400015 	stw	r17,0(sp)
1000a164:	d9400104 	addi	r5,sp,4
1000a168:	000d883a 	mov	r6,zero
1000a16c:	100f883a 	mov	r7,r2
1000a170:	903ee83a 	callr	r18
1000a174:	003fed06 	br	1000a12c <__alt_data_end+0xf800a12c>

1000a178 <wcrtomb>:
1000a178:	defff504 	addi	sp,sp,-44
1000a17c:	dc400515 	stw	r17,20(sp)
1000a180:	dc000415 	stw	r16,16(sp)
1000a184:	dfc00a15 	stw	ra,40(sp)
1000a188:	dd400915 	stw	r21,36(sp)
1000a18c:	dd000815 	stw	r20,32(sp)
1000a190:	dcc00715 	stw	r19,28(sp)
1000a194:	dc800615 	stw	r18,24(sp)
1000a198:	2021883a 	mov	r16,r4
1000a19c:	3023883a 	mov	r17,r6
1000a1a0:	20001d26 	beq	r4,zero,1000a218 <wcrtomb+0xa0>
1000a1a4:	04840074 	movhi	r18,4097
1000a1a8:	94872204 	addi	r18,r18,7304
1000a1ac:	95400017 	ldw	r21,0(r18)
1000a1b0:	00840074 	movhi	r2,4097
1000a1b4:	10872604 	addi	r2,r2,7320
1000a1b8:	15000017 	ldw	r20,0(r2)
1000a1bc:	2827883a 	mov	r19,r5
1000a1c0:	00057ac0 	call	100057ac <__locale_charset>
1000a1c4:	a809883a 	mov	r4,r21
1000a1c8:	dc400015 	stw	r17,0(sp)
1000a1cc:	800b883a 	mov	r5,r16
1000a1d0:	980d883a 	mov	r6,r19
1000a1d4:	100f883a 	mov	r7,r2
1000a1d8:	a03ee83a 	callr	r20
1000a1dc:	00ffffc4 	movi	r3,-1
1000a1e0:	10c0041e 	bne	r2,r3,1000a1f4 <wcrtomb+0x7c>
1000a1e4:	90c00017 	ldw	r3,0(r18)
1000a1e8:	01002284 	movi	r4,138
1000a1ec:	88000015 	stw	zero,0(r17)
1000a1f0:	19000015 	stw	r4,0(r3)
1000a1f4:	dfc00a17 	ldw	ra,40(sp)
1000a1f8:	dd400917 	ldw	r21,36(sp)
1000a1fc:	dd000817 	ldw	r20,32(sp)
1000a200:	dcc00717 	ldw	r19,28(sp)
1000a204:	dc800617 	ldw	r18,24(sp)
1000a208:	dc400517 	ldw	r17,20(sp)
1000a20c:	dc000417 	ldw	r16,16(sp)
1000a210:	dec00b04 	addi	sp,sp,44
1000a214:	f800283a 	ret
1000a218:	04840074 	movhi	r18,4097
1000a21c:	94872204 	addi	r18,r18,7304
1000a220:	94c00017 	ldw	r19,0(r18)
1000a224:	00840074 	movhi	r2,4097
1000a228:	10872604 	addi	r2,r2,7320
1000a22c:	14000017 	ldw	r16,0(r2)
1000a230:	00057ac0 	call	100057ac <__locale_charset>
1000a234:	9809883a 	mov	r4,r19
1000a238:	dc400015 	stw	r17,0(sp)
1000a23c:	d9400104 	addi	r5,sp,4
1000a240:	000d883a 	mov	r6,zero
1000a244:	100f883a 	mov	r7,r2
1000a248:	803ee83a 	callr	r16
1000a24c:	003fe306 	br	1000a1dc <__alt_data_end+0xf800a1dc>

1000a250 <__ascii_wctomb>:
1000a250:	28000526 	beq	r5,zero,1000a268 <__ascii_wctomb+0x18>
1000a254:	00803fc4 	movi	r2,255
1000a258:	11800536 	bltu	r2,r6,1000a270 <__ascii_wctomb+0x20>
1000a25c:	29800005 	stb	r6,0(r5)
1000a260:	00800044 	movi	r2,1
1000a264:	f800283a 	ret
1000a268:	0005883a 	mov	r2,zero
1000a26c:	f800283a 	ret
1000a270:	00802284 	movi	r2,138
1000a274:	20800015 	stw	r2,0(r4)
1000a278:	00bfffc4 	movi	r2,-1
1000a27c:	f800283a 	ret

1000a280 <_wctomb_r>:
1000a280:	defff904 	addi	sp,sp,-28
1000a284:	00840074 	movhi	r2,4097
1000a288:	10872604 	addi	r2,r2,7320
1000a28c:	dfc00615 	stw	ra,24(sp)
1000a290:	dc400515 	stw	r17,20(sp)
1000a294:	dc000415 	stw	r16,16(sp)
1000a298:	3823883a 	mov	r17,r7
1000a29c:	14000017 	ldw	r16,0(r2)
1000a2a0:	d9000115 	stw	r4,4(sp)
1000a2a4:	d9400215 	stw	r5,8(sp)
1000a2a8:	d9800315 	stw	r6,12(sp)
1000a2ac:	00057ac0 	call	100057ac <__locale_charset>
1000a2b0:	d9000117 	ldw	r4,4(sp)
1000a2b4:	d9400217 	ldw	r5,8(sp)
1000a2b8:	d9800317 	ldw	r6,12(sp)
1000a2bc:	dc400015 	stw	r17,0(sp)
1000a2c0:	100f883a 	mov	r7,r2
1000a2c4:	803ee83a 	callr	r16
1000a2c8:	dfc00617 	ldw	ra,24(sp)
1000a2cc:	dc400517 	ldw	r17,20(sp)
1000a2d0:	dc000417 	ldw	r16,16(sp)
1000a2d4:	dec00704 	addi	sp,sp,28
1000a2d8:	f800283a 	ret

1000a2dc <__udivdi3>:
1000a2dc:	defff504 	addi	sp,sp,-44
1000a2e0:	dc800315 	stw	r18,12(sp)
1000a2e4:	dc400215 	stw	r17,8(sp)
1000a2e8:	dfc00a15 	stw	ra,40(sp)
1000a2ec:	df000915 	stw	fp,36(sp)
1000a2f0:	ddc00815 	stw	r23,32(sp)
1000a2f4:	dd800715 	stw	r22,28(sp)
1000a2f8:	dd400615 	stw	r21,24(sp)
1000a2fc:	dd000515 	stw	r20,20(sp)
1000a300:	dcc00415 	stw	r19,16(sp)
1000a304:	dc000115 	stw	r16,4(sp)
1000a308:	2025883a 	mov	r18,r4
1000a30c:	2823883a 	mov	r17,r5
1000a310:	3800481e 	bne	r7,zero,1000a434 <__udivdi3+0x158>
1000a314:	3021883a 	mov	r16,r6
1000a318:	2027883a 	mov	r19,r4
1000a31c:	29805a2e 	bgeu	r5,r6,1000a488 <__udivdi3+0x1ac>
1000a320:	00bfffd4 	movui	r2,65535
1000a324:	2829883a 	mov	r20,r5
1000a328:	1180b436 	bltu	r2,r6,1000a5fc <__udivdi3+0x320>
1000a32c:	00803fc4 	movi	r2,255
1000a330:	11816736 	bltu	r2,r6,1000a8d0 <__udivdi3+0x5f4>
1000a334:	0005883a 	mov	r2,zero
1000a338:	0007883a 	mov	r3,zero
1000a33c:	3084d83a 	srl	r2,r6,r2
1000a340:	01040074 	movhi	r4,4097
1000a344:	21002704 	addi	r4,r4,156
1000a348:	2085883a 	add	r2,r4,r2
1000a34c:	10800003 	ldbu	r2,0(r2)
1000a350:	10c7883a 	add	r3,r2,r3
1000a354:	00800804 	movi	r2,32
1000a358:	10c5c83a 	sub	r2,r2,r3
1000a35c:	10000526 	beq	r2,zero,1000a374 <__udivdi3+0x98>
1000a360:	88a2983a 	sll	r17,r17,r2
1000a364:	90c6d83a 	srl	r3,r18,r3
1000a368:	30a0983a 	sll	r16,r6,r2
1000a36c:	90a6983a 	sll	r19,r18,r2
1000a370:	88e8b03a 	or	r20,r17,r3
1000a374:	8022d43a 	srli	r17,r16,16
1000a378:	a009883a 	mov	r4,r20
1000a37c:	857fffcc 	andi	r21,r16,65535
1000a380:	880b883a 	mov	r5,r17
1000a384:	000b0700 	call	1000b070 <__umodsi3>
1000a388:	a009883a 	mov	r4,r20
1000a38c:	880b883a 	mov	r5,r17
1000a390:	102d883a 	mov	r22,r2
1000a394:	000b0680 	call	1000b068 <__udivsi3>
1000a398:	1009883a 	mov	r4,r2
1000a39c:	a80b883a 	mov	r5,r21
1000a3a0:	1025883a 	mov	r18,r2
1000a3a4:	000b0780 	call	1000b078 <__mulsi3>
1000a3a8:	1009883a 	mov	r4,r2
1000a3ac:	b006943a 	slli	r3,r22,16
1000a3b0:	9804d43a 	srli	r2,r19,16
1000a3b4:	1886b03a 	or	r3,r3,r2
1000a3b8:	1900052e 	bgeu	r3,r4,1000a3d0 <__udivdi3+0xf4>
1000a3bc:	1c07883a 	add	r3,r3,r16
1000a3c0:	90bfffc4 	addi	r2,r18,-1
1000a3c4:	1c000136 	bltu	r3,r16,1000a3cc <__udivdi3+0xf0>
1000a3c8:	19015636 	bltu	r3,r4,1000a924 <__udivdi3+0x648>
1000a3cc:	1025883a 	mov	r18,r2
1000a3d0:	1929c83a 	sub	r20,r3,r4
1000a3d4:	880b883a 	mov	r5,r17
1000a3d8:	a009883a 	mov	r4,r20
1000a3dc:	000b0700 	call	1000b070 <__umodsi3>
1000a3e0:	102d883a 	mov	r22,r2
1000a3e4:	880b883a 	mov	r5,r17
1000a3e8:	a009883a 	mov	r4,r20
1000a3ec:	b02c943a 	slli	r22,r22,16
1000a3f0:	000b0680 	call	1000b068 <__udivsi3>
1000a3f4:	1009883a 	mov	r4,r2
1000a3f8:	a80b883a 	mov	r5,r21
1000a3fc:	9cffffcc 	andi	r19,r19,65535
1000a400:	1023883a 	mov	r17,r2
1000a404:	b4e6b03a 	or	r19,r22,r19
1000a408:	000b0780 	call	1000b078 <__mulsi3>
1000a40c:	9880052e 	bgeu	r19,r2,1000a424 <__udivdi3+0x148>
1000a410:	9c27883a 	add	r19,r19,r16
1000a414:	88ffffc4 	addi	r3,r17,-1
1000a418:	9c011436 	bltu	r19,r16,1000a86c <__udivdi3+0x590>
1000a41c:	9881132e 	bgeu	r19,r2,1000a86c <__udivdi3+0x590>
1000a420:	8c7fff84 	addi	r17,r17,-2
1000a424:	9024943a 	slli	r18,r18,16
1000a428:	0007883a 	mov	r3,zero
1000a42c:	8c84b03a 	or	r2,r17,r18
1000a430:	00006106 	br	1000a5b8 <__udivdi3+0x2dc>
1000a434:	29c05e36 	bltu	r5,r7,1000a5b0 <__udivdi3+0x2d4>
1000a438:	00bfffd4 	movui	r2,65535
1000a43c:	11c06a2e 	bgeu	r2,r7,1000a5e8 <__udivdi3+0x30c>
1000a440:	00804034 	movhi	r2,256
1000a444:	10bfffc4 	addi	r2,r2,-1
1000a448:	11c11236 	bltu	r2,r7,1000a894 <__udivdi3+0x5b8>
1000a44c:	00c00404 	movi	r3,16
1000a450:	180b883a 	mov	r5,r3
1000a454:	38c6d83a 	srl	r3,r7,r3
1000a458:	01040074 	movhi	r4,4097
1000a45c:	21002704 	addi	r4,r4,156
1000a460:	04000804 	movi	r16,32
1000a464:	20c7883a 	add	r3,r4,r3
1000a468:	18800003 	ldbu	r2,0(r3)
1000a46c:	1145883a 	add	r2,r2,r5
1000a470:	80a1c83a 	sub	r16,r16,r2
1000a474:	80006c1e 	bne	r16,zero,1000a628 <__udivdi3+0x34c>
1000a478:	3c411836 	bltu	r7,r17,1000a8dc <__udivdi3+0x600>
1000a47c:	9185403a 	cmpgeu	r2,r18,r6
1000a480:	0007883a 	mov	r3,zero
1000a484:	00004c06 	br	1000a5b8 <__udivdi3+0x2dc>
1000a488:	3000041e 	bne	r6,zero,1000a49c <__udivdi3+0x1c0>
1000a48c:	01000044 	movi	r4,1
1000a490:	000b883a 	mov	r5,zero
1000a494:	000b0680 	call	1000b068 <__udivsi3>
1000a498:	1021883a 	mov	r16,r2
1000a49c:	00bfffd4 	movui	r2,65535
1000a4a0:	14005c2e 	bgeu	r2,r16,1000a614 <__udivdi3+0x338>
1000a4a4:	00804034 	movhi	r2,256
1000a4a8:	10bfffc4 	addi	r2,r2,-1
1000a4ac:	14010236 	bltu	r2,r16,1000a8b8 <__udivdi3+0x5dc>
1000a4b0:	00800404 	movi	r2,16
1000a4b4:	1007883a 	mov	r3,r2
1000a4b8:	8084d83a 	srl	r2,r16,r2
1000a4bc:	01040074 	movhi	r4,4097
1000a4c0:	21002704 	addi	r4,r4,156
1000a4c4:	2085883a 	add	r2,r4,r2
1000a4c8:	10800003 	ldbu	r2,0(r2)
1000a4cc:	10c7883a 	add	r3,r2,r3
1000a4d0:	00800804 	movi	r2,32
1000a4d4:	10c5c83a 	sub	r2,r2,r3
1000a4d8:	1000aa1e 	bne	r2,zero,1000a784 <__udivdi3+0x4a8>
1000a4dc:	8028d43a 	srli	r20,r16,16
1000a4e0:	8c23c83a 	sub	r17,r17,r16
1000a4e4:	857fffcc 	andi	r21,r16,65535
1000a4e8:	00c00044 	movi	r3,1
1000a4ec:	8809883a 	mov	r4,r17
1000a4f0:	a00b883a 	mov	r5,r20
1000a4f4:	d8c00015 	stw	r3,0(sp)
1000a4f8:	000b0700 	call	1000b070 <__umodsi3>
1000a4fc:	8809883a 	mov	r4,r17
1000a500:	a00b883a 	mov	r5,r20
1000a504:	102d883a 	mov	r22,r2
1000a508:	000b0680 	call	1000b068 <__udivsi3>
1000a50c:	1009883a 	mov	r4,r2
1000a510:	a80b883a 	mov	r5,r21
1000a514:	1025883a 	mov	r18,r2
1000a518:	000b0780 	call	1000b078 <__mulsi3>
1000a51c:	1009883a 	mov	r4,r2
1000a520:	b00e943a 	slli	r7,r22,16
1000a524:	9804d43a 	srli	r2,r19,16
1000a528:	d8c00017 	ldw	r3,0(sp)
1000a52c:	388eb03a 	or	r7,r7,r2
1000a530:	3900052e 	bgeu	r7,r4,1000a548 <__udivdi3+0x26c>
1000a534:	3c0f883a 	add	r7,r7,r16
1000a538:	90bfffc4 	addi	r2,r18,-1
1000a53c:	3c000136 	bltu	r7,r16,1000a544 <__udivdi3+0x268>
1000a540:	3900f536 	bltu	r7,r4,1000a918 <__udivdi3+0x63c>
1000a544:	1025883a 	mov	r18,r2
1000a548:	3923c83a 	sub	r17,r7,r4
1000a54c:	8809883a 	mov	r4,r17
1000a550:	a00b883a 	mov	r5,r20
1000a554:	d8c00015 	stw	r3,0(sp)
1000a558:	000b0700 	call	1000b070 <__umodsi3>
1000a55c:	102d883a 	mov	r22,r2
1000a560:	8809883a 	mov	r4,r17
1000a564:	a00b883a 	mov	r5,r20
1000a568:	b02c943a 	slli	r22,r22,16
1000a56c:	000b0680 	call	1000b068 <__udivsi3>
1000a570:	1009883a 	mov	r4,r2
1000a574:	a80b883a 	mov	r5,r21
1000a578:	9cffffcc 	andi	r19,r19,65535
1000a57c:	1023883a 	mov	r17,r2
1000a580:	b4e6b03a 	or	r19,r22,r19
1000a584:	000b0780 	call	1000b078 <__mulsi3>
1000a588:	d8c00017 	ldw	r3,0(sp)
1000a58c:	9880052e 	bgeu	r19,r2,1000a5a4 <__udivdi3+0x2c8>
1000a590:	9c27883a 	add	r19,r19,r16
1000a594:	893fffc4 	addi	r4,r17,-1
1000a598:	9c00b236 	bltu	r19,r16,1000a864 <__udivdi3+0x588>
1000a59c:	9880b12e 	bgeu	r19,r2,1000a864 <__udivdi3+0x588>
1000a5a0:	8c7fff84 	addi	r17,r17,-2
1000a5a4:	9024943a 	slli	r18,r18,16
1000a5a8:	8c84b03a 	or	r2,r17,r18
1000a5ac:	00000206 	br	1000a5b8 <__udivdi3+0x2dc>
1000a5b0:	0007883a 	mov	r3,zero
1000a5b4:	0005883a 	mov	r2,zero
1000a5b8:	dfc00a17 	ldw	ra,40(sp)
1000a5bc:	df000917 	ldw	fp,36(sp)
1000a5c0:	ddc00817 	ldw	r23,32(sp)
1000a5c4:	dd800717 	ldw	r22,28(sp)
1000a5c8:	dd400617 	ldw	r21,24(sp)
1000a5cc:	dd000517 	ldw	r20,20(sp)
1000a5d0:	dcc00417 	ldw	r19,16(sp)
1000a5d4:	dc800317 	ldw	r18,12(sp)
1000a5d8:	dc400217 	ldw	r17,8(sp)
1000a5dc:	dc000117 	ldw	r16,4(sp)
1000a5e0:	dec00b04 	addi	sp,sp,44
1000a5e4:	f800283a 	ret
1000a5e8:	00803fc4 	movi	r2,255
1000a5ec:	11c0ac36 	bltu	r2,r7,1000a8a0 <__udivdi3+0x5c4>
1000a5f0:	0007883a 	mov	r3,zero
1000a5f4:	000b883a 	mov	r5,zero
1000a5f8:	003f9606 	br	1000a454 <__alt_data_end+0xf800a454>
1000a5fc:	00804034 	movhi	r2,256
1000a600:	10bfffc4 	addi	r2,r2,-1
1000a604:	1180a936 	bltu	r2,r6,1000a8ac <__udivdi3+0x5d0>
1000a608:	00800404 	movi	r2,16
1000a60c:	1007883a 	mov	r3,r2
1000a610:	003f4a06 	br	1000a33c <__alt_data_end+0xf800a33c>
1000a614:	00803fc4 	movi	r2,255
1000a618:	1400aa36 	bltu	r2,r16,1000a8c4 <__udivdi3+0x5e8>
1000a61c:	0005883a 	mov	r2,zero
1000a620:	0007883a 	mov	r3,zero
1000a624:	003fa406 	br	1000a4b8 <__alt_data_end+0xf800a4b8>
1000a628:	3c0e983a 	sll	r7,r7,r16
1000a62c:	3086d83a 	srl	r3,r6,r2
1000a630:	88aed83a 	srl	r23,r17,r2
1000a634:	9084d83a 	srl	r2,r18,r2
1000a638:	38e6b03a 	or	r19,r7,r3
1000a63c:	9828d43a 	srli	r20,r19,16
1000a640:	8c22983a 	sll	r17,r17,r16
1000a644:	b809883a 	mov	r4,r23
1000a648:	a00b883a 	mov	r5,r20
1000a64c:	342a983a 	sll	r21,r6,r16
1000a650:	88a2b03a 	or	r17,r17,r2
1000a654:	000b0700 	call	1000b070 <__umodsi3>
1000a658:	b809883a 	mov	r4,r23
1000a65c:	a00b883a 	mov	r5,r20
1000a660:	1039883a 	mov	fp,r2
1000a664:	9dbfffcc 	andi	r22,r19,65535
1000a668:	000b0680 	call	1000b068 <__udivsi3>
1000a66c:	1009883a 	mov	r4,r2
1000a670:	b00b883a 	mov	r5,r22
1000a674:	102f883a 	mov	r23,r2
1000a678:	000b0780 	call	1000b078 <__mulsi3>
1000a67c:	1009883a 	mov	r4,r2
1000a680:	e00e943a 	slli	r7,fp,16
1000a684:	8804d43a 	srli	r2,r17,16
1000a688:	388eb03a 	or	r7,r7,r2
1000a68c:	3900042e 	bgeu	r7,r4,1000a6a0 <__udivdi3+0x3c4>
1000a690:	3ccf883a 	add	r7,r7,r19
1000a694:	b8bfffc4 	addi	r2,r23,-1
1000a698:	3cc0972e 	bgeu	r7,r19,1000a8f8 <__udivdi3+0x61c>
1000a69c:	102f883a 	mov	r23,r2
1000a6a0:	3939c83a 	sub	fp,r7,r4
1000a6a4:	a00b883a 	mov	r5,r20
1000a6a8:	e009883a 	mov	r4,fp
1000a6ac:	000b0700 	call	1000b070 <__umodsi3>
1000a6b0:	a00b883a 	mov	r5,r20
1000a6b4:	e009883a 	mov	r4,fp
1000a6b8:	d8800015 	stw	r2,0(sp)
1000a6bc:	000b0680 	call	1000b068 <__udivsi3>
1000a6c0:	1009883a 	mov	r4,r2
1000a6c4:	b00b883a 	mov	r5,r22
1000a6c8:	1029883a 	mov	r20,r2
1000a6cc:	000b0780 	call	1000b078 <__mulsi3>
1000a6d0:	d8c00017 	ldw	r3,0(sp)
1000a6d4:	8c7fffcc 	andi	r17,r17,65535
1000a6d8:	1806943a 	slli	r3,r3,16
1000a6dc:	1c46b03a 	or	r3,r3,r17
1000a6e0:	1880042e 	bgeu	r3,r2,1000a6f4 <__udivdi3+0x418>
1000a6e4:	1cc7883a 	add	r3,r3,r19
1000a6e8:	a13fffc4 	addi	r4,r20,-1
1000a6ec:	1cc07e2e 	bgeu	r3,r19,1000a8e8 <__udivdi3+0x60c>
1000a6f0:	2029883a 	mov	r20,r4
1000a6f4:	b82e943a 	slli	r23,r23,16
1000a6f8:	a822d43a 	srli	r17,r21,16
1000a6fc:	ad7fffcc 	andi	r21,r21,65535
1000a700:	a5e8b03a 	or	r20,r20,r23
1000a704:	a5bfffcc 	andi	r22,r20,65535
1000a708:	b009883a 	mov	r4,r22
1000a70c:	a80b883a 	mov	r5,r21
1000a710:	18afc83a 	sub	r23,r3,r2
1000a714:	a026d43a 	srli	r19,r20,16
1000a718:	000b0780 	call	1000b078 <__mulsi3>
1000a71c:	b009883a 	mov	r4,r22
1000a720:	880b883a 	mov	r5,r17
1000a724:	1039883a 	mov	fp,r2
1000a728:	000b0780 	call	1000b078 <__mulsi3>
1000a72c:	a80b883a 	mov	r5,r21
1000a730:	9809883a 	mov	r4,r19
1000a734:	102d883a 	mov	r22,r2
1000a738:	000b0780 	call	1000b078 <__mulsi3>
1000a73c:	9809883a 	mov	r4,r19
1000a740:	880b883a 	mov	r5,r17
1000a744:	102b883a 	mov	r21,r2
1000a748:	000b0780 	call	1000b078 <__mulsi3>
1000a74c:	100b883a 	mov	r5,r2
1000a750:	e004d43a 	srli	r2,fp,16
1000a754:	ad89883a 	add	r4,r21,r22
1000a758:	2089883a 	add	r4,r4,r2
1000a75c:	2540022e 	bgeu	r4,r21,1000a768 <__udivdi3+0x48c>
1000a760:	00800074 	movhi	r2,1
1000a764:	288b883a 	add	r5,r5,r2
1000a768:	2004d43a 	srli	r2,r4,16
1000a76c:	288b883a 	add	r5,r5,r2
1000a770:	b9404536 	bltu	r23,r5,1000a888 <__udivdi3+0x5ac>
1000a774:	b9403f26 	beq	r23,r5,1000a874 <__udivdi3+0x598>
1000a778:	a005883a 	mov	r2,r20
1000a77c:	0007883a 	mov	r3,zero
1000a780:	003f8d06 	br	1000a5b8 <__alt_data_end+0xf800a5b8>
1000a784:	80a0983a 	sll	r16,r16,r2
1000a788:	88eed83a 	srl	r23,r17,r3
1000a78c:	90c6d83a 	srl	r3,r18,r3
1000a790:	8028d43a 	srli	r20,r16,16
1000a794:	88a2983a 	sll	r17,r17,r2
1000a798:	b809883a 	mov	r4,r23
1000a79c:	a00b883a 	mov	r5,r20
1000a7a0:	88ecb03a 	or	r22,r17,r3
1000a7a4:	90a6983a 	sll	r19,r18,r2
1000a7a8:	000b0700 	call	1000b070 <__umodsi3>
1000a7ac:	b809883a 	mov	r4,r23
1000a7b0:	a00b883a 	mov	r5,r20
1000a7b4:	1023883a 	mov	r17,r2
1000a7b8:	857fffcc 	andi	r21,r16,65535
1000a7bc:	000b0680 	call	1000b068 <__udivsi3>
1000a7c0:	1009883a 	mov	r4,r2
1000a7c4:	a80b883a 	mov	r5,r21
1000a7c8:	102f883a 	mov	r23,r2
1000a7cc:	000b0780 	call	1000b078 <__mulsi3>
1000a7d0:	1009883a 	mov	r4,r2
1000a7d4:	880c943a 	slli	r6,r17,16
1000a7d8:	b004d43a 	srli	r2,r22,16
1000a7dc:	308cb03a 	or	r6,r6,r2
1000a7e0:	3100062e 	bgeu	r6,r4,1000a7fc <__udivdi3+0x520>
1000a7e4:	340d883a 	add	r6,r6,r16
1000a7e8:	b8bfffc4 	addi	r2,r23,-1
1000a7ec:	34004836 	bltu	r6,r16,1000a910 <__udivdi3+0x634>
1000a7f0:	3100472e 	bgeu	r6,r4,1000a910 <__udivdi3+0x634>
1000a7f4:	bdffff84 	addi	r23,r23,-2
1000a7f8:	340d883a 	add	r6,r6,r16
1000a7fc:	3125c83a 	sub	r18,r6,r4
1000a800:	9009883a 	mov	r4,r18
1000a804:	a00b883a 	mov	r5,r20
1000a808:	000b0700 	call	1000b070 <__umodsi3>
1000a80c:	1023883a 	mov	r17,r2
1000a810:	9009883a 	mov	r4,r18
1000a814:	a00b883a 	mov	r5,r20
1000a818:	8822943a 	slli	r17,r17,16
1000a81c:	000b0680 	call	1000b068 <__udivsi3>
1000a820:	1009883a 	mov	r4,r2
1000a824:	a80b883a 	mov	r5,r21
1000a828:	b5bfffcc 	andi	r22,r22,65535
1000a82c:	1025883a 	mov	r18,r2
1000a830:	8da2b03a 	or	r17,r17,r22
1000a834:	000b0780 	call	1000b078 <__mulsi3>
1000a838:	8880062e 	bgeu	r17,r2,1000a854 <__udivdi3+0x578>
1000a83c:	8c23883a 	add	r17,r17,r16
1000a840:	90ffffc4 	addi	r3,r18,-1
1000a844:	8c003036 	bltu	r17,r16,1000a908 <__udivdi3+0x62c>
1000a848:	88802f2e 	bgeu	r17,r2,1000a908 <__udivdi3+0x62c>
1000a84c:	94bfff84 	addi	r18,r18,-2
1000a850:	8c23883a 	add	r17,r17,r16
1000a854:	b806943a 	slli	r3,r23,16
1000a858:	88a3c83a 	sub	r17,r17,r2
1000a85c:	90c6b03a 	or	r3,r18,r3
1000a860:	003f2206 	br	1000a4ec <__alt_data_end+0xf800a4ec>
1000a864:	2023883a 	mov	r17,r4
1000a868:	003f4e06 	br	1000a5a4 <__alt_data_end+0xf800a5a4>
1000a86c:	1823883a 	mov	r17,r3
1000a870:	003eec06 	br	1000a424 <__alt_data_end+0xf800a424>
1000a874:	2008943a 	slli	r4,r4,16
1000a878:	9420983a 	sll	r16,r18,r16
1000a87c:	e73fffcc 	andi	fp,fp,65535
1000a880:	2709883a 	add	r4,r4,fp
1000a884:	813fbc2e 	bgeu	r16,r4,1000a778 <__alt_data_end+0xf800a778>
1000a888:	a0bfffc4 	addi	r2,r20,-1
1000a88c:	0007883a 	mov	r3,zero
1000a890:	003f4906 	br	1000a5b8 <__alt_data_end+0xf800a5b8>
1000a894:	00c00604 	movi	r3,24
1000a898:	180b883a 	mov	r5,r3
1000a89c:	003eed06 	br	1000a454 <__alt_data_end+0xf800a454>
1000a8a0:	00c00204 	movi	r3,8
1000a8a4:	180b883a 	mov	r5,r3
1000a8a8:	003eea06 	br	1000a454 <__alt_data_end+0xf800a454>
1000a8ac:	00800604 	movi	r2,24
1000a8b0:	1007883a 	mov	r3,r2
1000a8b4:	003ea106 	br	1000a33c <__alt_data_end+0xf800a33c>
1000a8b8:	00800604 	movi	r2,24
1000a8bc:	1007883a 	mov	r3,r2
1000a8c0:	003efd06 	br	1000a4b8 <__alt_data_end+0xf800a4b8>
1000a8c4:	00800204 	movi	r2,8
1000a8c8:	1007883a 	mov	r3,r2
1000a8cc:	003efa06 	br	1000a4b8 <__alt_data_end+0xf800a4b8>
1000a8d0:	00800204 	movi	r2,8
1000a8d4:	1007883a 	mov	r3,r2
1000a8d8:	003e9806 	br	1000a33c <__alt_data_end+0xf800a33c>
1000a8dc:	0007883a 	mov	r3,zero
1000a8e0:	00800044 	movi	r2,1
1000a8e4:	003f3406 	br	1000a5b8 <__alt_data_end+0xf800a5b8>
1000a8e8:	18bf812e 	bgeu	r3,r2,1000a6f0 <__alt_data_end+0xf800a6f0>
1000a8ec:	a53fff84 	addi	r20,r20,-2
1000a8f0:	1cc7883a 	add	r3,r3,r19
1000a8f4:	003f7f06 	br	1000a6f4 <__alt_data_end+0xf800a6f4>
1000a8f8:	393f682e 	bgeu	r7,r4,1000a69c <__alt_data_end+0xf800a69c>
1000a8fc:	bdffff84 	addi	r23,r23,-2
1000a900:	3ccf883a 	add	r7,r7,r19
1000a904:	003f6606 	br	1000a6a0 <__alt_data_end+0xf800a6a0>
1000a908:	1825883a 	mov	r18,r3
1000a90c:	003fd106 	br	1000a854 <__alt_data_end+0xf800a854>
1000a910:	102f883a 	mov	r23,r2
1000a914:	003fb906 	br	1000a7fc <__alt_data_end+0xf800a7fc>
1000a918:	94bfff84 	addi	r18,r18,-2
1000a91c:	3c0f883a 	add	r7,r7,r16
1000a920:	003f0906 	br	1000a548 <__alt_data_end+0xf800a548>
1000a924:	94bfff84 	addi	r18,r18,-2
1000a928:	1c07883a 	add	r3,r3,r16
1000a92c:	003ea806 	br	1000a3d0 <__alt_data_end+0xf800a3d0>

1000a930 <__umoddi3>:
1000a930:	defff304 	addi	sp,sp,-52
1000a934:	dd000715 	stw	r20,28(sp)
1000a938:	dc800515 	stw	r18,20(sp)
1000a93c:	dc400415 	stw	r17,16(sp)
1000a940:	dfc00c15 	stw	ra,48(sp)
1000a944:	df000b15 	stw	fp,44(sp)
1000a948:	ddc00a15 	stw	r23,40(sp)
1000a94c:	dd800915 	stw	r22,36(sp)
1000a950:	dd400815 	stw	r21,32(sp)
1000a954:	dcc00615 	stw	r19,24(sp)
1000a958:	dc000315 	stw	r16,12(sp)
1000a95c:	2025883a 	mov	r18,r4
1000a960:	2823883a 	mov	r17,r5
1000a964:	2829883a 	mov	r20,r5
1000a968:	38003d1e 	bne	r7,zero,1000aa60 <__umoddi3+0x130>
1000a96c:	3021883a 	mov	r16,r6
1000a970:	2027883a 	mov	r19,r4
1000a974:	2980532e 	bgeu	r5,r6,1000aac4 <__umoddi3+0x194>
1000a978:	00bfffd4 	movui	r2,65535
1000a97c:	1180a636 	bltu	r2,r6,1000ac18 <__umoddi3+0x2e8>
1000a980:	00803fc4 	movi	r2,255
1000a984:	11816336 	bltu	r2,r6,1000af14 <__umoddi3+0x5e4>
1000a988:	0005883a 	mov	r2,zero
1000a98c:	0009883a 	mov	r4,zero
1000a990:	3084d83a 	srl	r2,r6,r2
1000a994:	00c40074 	movhi	r3,4097
1000a998:	18c02704 	addi	r3,r3,156
1000a99c:	1885883a 	add	r2,r3,r2
1000a9a0:	10800003 	ldbu	r2,0(r2)
1000a9a4:	1109883a 	add	r4,r2,r4
1000a9a8:	00800804 	movi	r2,32
1000a9ac:	1105c83a 	sub	r2,r2,r4
1000a9b0:	10011026 	beq	r2,zero,1000adf4 <__umoddi3+0x4c4>
1000a9b4:	9108d83a 	srl	r4,r18,r4
1000a9b8:	88a2983a 	sll	r17,r17,r2
1000a9bc:	30a0983a 	sll	r16,r6,r2
1000a9c0:	90a6983a 	sll	r19,r18,r2
1000a9c4:	8928b03a 	or	r20,r17,r4
1000a9c8:	1025883a 	mov	r18,r2
1000a9cc:	8022d43a 	srli	r17,r16,16
1000a9d0:	a009883a 	mov	r4,r20
1000a9d4:	857fffcc 	andi	r21,r16,65535
1000a9d8:	880b883a 	mov	r5,r17
1000a9dc:	000b0700 	call	1000b070 <__umodsi3>
1000a9e0:	a009883a 	mov	r4,r20
1000a9e4:	880b883a 	mov	r5,r17
1000a9e8:	102d883a 	mov	r22,r2
1000a9ec:	000b0680 	call	1000b068 <__udivsi3>
1000a9f0:	1009883a 	mov	r4,r2
1000a9f4:	a80b883a 	mov	r5,r21
1000a9f8:	000b0780 	call	1000b078 <__mulsi3>
1000a9fc:	1009883a 	mov	r4,r2
1000aa00:	b006943a 	slli	r3,r22,16
1000aa04:	9804d43a 	srli	r2,r19,16
1000aa08:	1886b03a 	or	r3,r3,r2
1000aa0c:	1900042e 	bgeu	r3,r4,1000aa20 <__umoddi3+0xf0>
1000aa10:	1c07883a 	add	r3,r3,r16
1000aa14:	1c000236 	bltu	r3,r16,1000aa20 <__umoddi3+0xf0>
1000aa18:	1900012e 	bgeu	r3,r4,1000aa20 <__umoddi3+0xf0>
1000aa1c:	1c07883a 	add	r3,r3,r16
1000aa20:	1929c83a 	sub	r20,r3,r4
1000aa24:	a009883a 	mov	r4,r20
1000aa28:	880b883a 	mov	r5,r17
1000aa2c:	000b0700 	call	1000b070 <__umodsi3>
1000aa30:	102d883a 	mov	r22,r2
1000aa34:	a009883a 	mov	r4,r20
1000aa38:	880b883a 	mov	r5,r17
1000aa3c:	b02c943a 	slli	r22,r22,16
1000aa40:	000b0680 	call	1000b068 <__udivsi3>
1000aa44:	1009883a 	mov	r4,r2
1000aa48:	a80b883a 	mov	r5,r21
1000aa4c:	9cffffcc 	andi	r19,r19,65535
1000aa50:	000b0780 	call	1000b078 <__mulsi3>
1000aa54:	b4e6b03a 	or	r19,r22,r19
1000aa58:	9880582e 	bgeu	r19,r2,1000abbc <__umoddi3+0x28c>
1000aa5c:	00005306 	br	1000abac <__umoddi3+0x27c>
1000aa60:	29c05a36 	bltu	r5,r7,1000abcc <__umoddi3+0x29c>
1000aa64:	00bfffd4 	movui	r2,65535
1000aa68:	11c0662e 	bgeu	r2,r7,1000ac04 <__umoddi3+0x2d4>
1000aa6c:	00804034 	movhi	r2,256
1000aa70:	10bfffc4 	addi	r2,r2,-1
1000aa74:	11c11b36 	bltu	r2,r7,1000aee4 <__umoddi3+0x5b4>
1000aa78:	00c00404 	movi	r3,16
1000aa7c:	1827883a 	mov	r19,r3
1000aa80:	38c6d83a 	srl	r3,r7,r3
1000aa84:	01040074 	movhi	r4,4097
1000aa88:	21002704 	addi	r4,r4,156
1000aa8c:	04000804 	movi	r16,32
1000aa90:	20c7883a 	add	r3,r4,r3
1000aa94:	18800003 	ldbu	r2,0(r3)
1000aa98:	14e7883a 	add	r19,r2,r19
1000aa9c:	84e1c83a 	sub	r16,r16,r19
1000aaa0:	8000681e 	bne	r16,zero,1000ac44 <__umoddi3+0x314>
1000aaa4:	3c400136 	bltu	r7,r17,1000aaac <__umoddi3+0x17c>
1000aaa8:	91812736 	bltu	r18,r6,1000af48 <__umoddi3+0x618>
1000aaac:	9185c83a 	sub	r2,r18,r6
1000aab0:	89e3c83a 	sub	r17,r17,r7
1000aab4:	90a5803a 	cmpltu	r18,r18,r2
1000aab8:	8ca9c83a 	sub	r20,r17,r18
1000aabc:	a007883a 	mov	r3,r20
1000aac0:	00004406 	br	1000abd4 <__umoddi3+0x2a4>
1000aac4:	3000041e 	bne	r6,zero,1000aad8 <__umoddi3+0x1a8>
1000aac8:	01000044 	movi	r4,1
1000aacc:	000b883a 	mov	r5,zero
1000aad0:	000b0680 	call	1000b068 <__udivsi3>
1000aad4:	1021883a 	mov	r16,r2
1000aad8:	00bfffd4 	movui	r2,65535
1000aadc:	1400542e 	bgeu	r2,r16,1000ac30 <__umoddi3+0x300>
1000aae0:	00804034 	movhi	r2,256
1000aae4:	10bfffc4 	addi	r2,r2,-1
1000aae8:	14010736 	bltu	r2,r16,1000af08 <__umoddi3+0x5d8>
1000aaec:	00800404 	movi	r2,16
1000aaf0:	1007883a 	mov	r3,r2
1000aaf4:	8084d83a 	srl	r2,r16,r2
1000aaf8:	01040074 	movhi	r4,4097
1000aafc:	21002704 	addi	r4,r4,156
1000ab00:	05400804 	movi	r21,32
1000ab04:	2085883a 	add	r2,r4,r2
1000ab08:	10800003 	ldbu	r2,0(r2)
1000ab0c:	10c7883a 	add	r3,r2,r3
1000ab10:	a8ebc83a 	sub	r21,r21,r3
1000ab14:	a800b91e 	bne	r21,zero,1000adfc <__umoddi3+0x4cc>
1000ab18:	8028d43a 	srli	r20,r16,16
1000ab1c:	8c23c83a 	sub	r17,r17,r16
1000ab20:	85bfffcc 	andi	r22,r16,65535
1000ab24:	0025883a 	mov	r18,zero
1000ab28:	8809883a 	mov	r4,r17
1000ab2c:	a00b883a 	mov	r5,r20
1000ab30:	000b0700 	call	1000b070 <__umodsi3>
1000ab34:	8809883a 	mov	r4,r17
1000ab38:	a00b883a 	mov	r5,r20
1000ab3c:	102b883a 	mov	r21,r2
1000ab40:	000b0680 	call	1000b068 <__udivsi3>
1000ab44:	1009883a 	mov	r4,r2
1000ab48:	b00b883a 	mov	r5,r22
1000ab4c:	000b0780 	call	1000b078 <__mulsi3>
1000ab50:	1009883a 	mov	r4,r2
1000ab54:	a806943a 	slli	r3,r21,16
1000ab58:	9804d43a 	srli	r2,r19,16
1000ab5c:	1886b03a 	or	r3,r3,r2
1000ab60:	1900032e 	bgeu	r3,r4,1000ab70 <__umoddi3+0x240>
1000ab64:	1c07883a 	add	r3,r3,r16
1000ab68:	1c000136 	bltu	r3,r16,1000ab70 <__umoddi3+0x240>
1000ab6c:	1900f436 	bltu	r3,r4,1000af40 <__umoddi3+0x610>
1000ab70:	1923c83a 	sub	r17,r3,r4
1000ab74:	8809883a 	mov	r4,r17
1000ab78:	a00b883a 	mov	r5,r20
1000ab7c:	000b0700 	call	1000b070 <__umodsi3>
1000ab80:	102b883a 	mov	r21,r2
1000ab84:	8809883a 	mov	r4,r17
1000ab88:	a00b883a 	mov	r5,r20
1000ab8c:	a82a943a 	slli	r21,r21,16
1000ab90:	000b0680 	call	1000b068 <__udivsi3>
1000ab94:	1009883a 	mov	r4,r2
1000ab98:	b00b883a 	mov	r5,r22
1000ab9c:	9cffffcc 	andi	r19,r19,65535
1000aba0:	000b0780 	call	1000b078 <__mulsi3>
1000aba4:	ace6b03a 	or	r19,r21,r19
1000aba8:	9880042e 	bgeu	r19,r2,1000abbc <__umoddi3+0x28c>
1000abac:	9c27883a 	add	r19,r19,r16
1000abb0:	9c000236 	bltu	r19,r16,1000abbc <__umoddi3+0x28c>
1000abb4:	9880012e 	bgeu	r19,r2,1000abbc <__umoddi3+0x28c>
1000abb8:	9c27883a 	add	r19,r19,r16
1000abbc:	9885c83a 	sub	r2,r19,r2
1000abc0:	1484d83a 	srl	r2,r2,r18
1000abc4:	0007883a 	mov	r3,zero
1000abc8:	00000206 	br	1000abd4 <__umoddi3+0x2a4>
1000abcc:	2005883a 	mov	r2,r4
1000abd0:	2807883a 	mov	r3,r5
1000abd4:	dfc00c17 	ldw	ra,48(sp)
1000abd8:	df000b17 	ldw	fp,44(sp)
1000abdc:	ddc00a17 	ldw	r23,40(sp)
1000abe0:	dd800917 	ldw	r22,36(sp)
1000abe4:	dd400817 	ldw	r21,32(sp)
1000abe8:	dd000717 	ldw	r20,28(sp)
1000abec:	dcc00617 	ldw	r19,24(sp)
1000abf0:	dc800517 	ldw	r18,20(sp)
1000abf4:	dc400417 	ldw	r17,16(sp)
1000abf8:	dc000317 	ldw	r16,12(sp)
1000abfc:	dec00d04 	addi	sp,sp,52
1000ac00:	f800283a 	ret
1000ac04:	00803fc4 	movi	r2,255
1000ac08:	11c0b336 	bltu	r2,r7,1000aed8 <__umoddi3+0x5a8>
1000ac0c:	0007883a 	mov	r3,zero
1000ac10:	0027883a 	mov	r19,zero
1000ac14:	003f9a06 	br	1000aa80 <__alt_data_end+0xf800aa80>
1000ac18:	00804034 	movhi	r2,256
1000ac1c:	10bfffc4 	addi	r2,r2,-1
1000ac20:	1180b336 	bltu	r2,r6,1000aef0 <__umoddi3+0x5c0>
1000ac24:	00800404 	movi	r2,16
1000ac28:	1009883a 	mov	r4,r2
1000ac2c:	003f5806 	br	1000a990 <__alt_data_end+0xf800a990>
1000ac30:	00803fc4 	movi	r2,255
1000ac34:	1400b136 	bltu	r2,r16,1000aefc <__umoddi3+0x5cc>
1000ac38:	0005883a 	mov	r2,zero
1000ac3c:	0007883a 	mov	r3,zero
1000ac40:	003fac06 	br	1000aaf4 <__alt_data_end+0xf800aaf4>
1000ac44:	34c4d83a 	srl	r2,r6,r19
1000ac48:	3c0e983a 	sll	r7,r7,r16
1000ac4c:	8cf8d83a 	srl	fp,r17,r19
1000ac50:	8c22983a 	sll	r17,r17,r16
1000ac54:	38a8b03a 	or	r20,r7,r2
1000ac58:	a02ad43a 	srli	r21,r20,16
1000ac5c:	94c4d83a 	srl	r2,r18,r19
1000ac60:	e009883a 	mov	r4,fp
1000ac64:	a80b883a 	mov	r5,r21
1000ac68:	342c983a 	sll	r22,r6,r16
1000ac6c:	88a2b03a 	or	r17,r17,r2
1000ac70:	000b0700 	call	1000b070 <__umodsi3>
1000ac74:	e009883a 	mov	r4,fp
1000ac78:	a80b883a 	mov	r5,r21
1000ac7c:	a5ffffcc 	andi	r23,r20,65535
1000ac80:	d8800215 	stw	r2,8(sp)
1000ac84:	000b0680 	call	1000b068 <__udivsi3>
1000ac88:	1009883a 	mov	r4,r2
1000ac8c:	b80b883a 	mov	r5,r23
1000ac90:	1039883a 	mov	fp,r2
1000ac94:	000b0780 	call	1000b078 <__mulsi3>
1000ac98:	d8c00217 	ldw	r3,8(sp)
1000ac9c:	1009883a 	mov	r4,r2
1000aca0:	8804d43a 	srli	r2,r17,16
1000aca4:	1806943a 	slli	r3,r3,16
1000aca8:	9424983a 	sll	r18,r18,r16
1000acac:	1886b03a 	or	r3,r3,r2
1000acb0:	1900042e 	bgeu	r3,r4,1000acc4 <__umoddi3+0x394>
1000acb4:	1d07883a 	add	r3,r3,r20
1000acb8:	e0bfffc4 	addi	r2,fp,-1
1000acbc:	1d009c2e 	bgeu	r3,r20,1000af30 <__umoddi3+0x600>
1000acc0:	1039883a 	mov	fp,r2
1000acc4:	1907c83a 	sub	r3,r3,r4
1000acc8:	1809883a 	mov	r4,r3
1000accc:	a80b883a 	mov	r5,r21
1000acd0:	d8c00215 	stw	r3,8(sp)
1000acd4:	000b0700 	call	1000b070 <__umodsi3>
1000acd8:	d8c00217 	ldw	r3,8(sp)
1000acdc:	a80b883a 	mov	r5,r21
1000ace0:	d8800015 	stw	r2,0(sp)
1000ace4:	1809883a 	mov	r4,r3
1000ace8:	000b0680 	call	1000b068 <__udivsi3>
1000acec:	1009883a 	mov	r4,r2
1000acf0:	b80b883a 	mov	r5,r23
1000acf4:	102b883a 	mov	r21,r2
1000acf8:	000b0780 	call	1000b078 <__mulsi3>
1000acfc:	d9c00017 	ldw	r7,0(sp)
1000ad00:	8c7fffcc 	andi	r17,r17,65535
1000ad04:	380e943a 	slli	r7,r7,16
1000ad08:	3c4eb03a 	or	r7,r7,r17
1000ad0c:	3880042e 	bgeu	r7,r2,1000ad20 <__umoddi3+0x3f0>
1000ad10:	3d0f883a 	add	r7,r7,r20
1000ad14:	a8ffffc4 	addi	r3,r21,-1
1000ad18:	3d00812e 	bgeu	r7,r20,1000af20 <__umoddi3+0x5f0>
1000ad1c:	182b883a 	mov	r21,r3
1000ad20:	e038943a 	slli	fp,fp,16
1000ad24:	b010d43a 	srli	r8,r22,16
1000ad28:	b1bfffcc 	andi	r6,r22,65535
1000ad2c:	af2ab03a 	or	r21,r21,fp
1000ad30:	a82ed43a 	srli	r23,r21,16
1000ad34:	ad7fffcc 	andi	r21,r21,65535
1000ad38:	300b883a 	mov	r5,r6
1000ad3c:	a809883a 	mov	r4,r21
1000ad40:	38a3c83a 	sub	r17,r7,r2
1000ad44:	d9800115 	stw	r6,4(sp)
1000ad48:	da000015 	stw	r8,0(sp)
1000ad4c:	000b0780 	call	1000b078 <__mulsi3>
1000ad50:	da000017 	ldw	r8,0(sp)
1000ad54:	a809883a 	mov	r4,r21
1000ad58:	1039883a 	mov	fp,r2
1000ad5c:	400b883a 	mov	r5,r8
1000ad60:	da000215 	stw	r8,8(sp)
1000ad64:	000b0780 	call	1000b078 <__mulsi3>
1000ad68:	d9800117 	ldw	r6,4(sp)
1000ad6c:	b809883a 	mov	r4,r23
1000ad70:	d8800015 	stw	r2,0(sp)
1000ad74:	300b883a 	mov	r5,r6
1000ad78:	000b0780 	call	1000b078 <__mulsi3>
1000ad7c:	d8c00217 	ldw	r3,8(sp)
1000ad80:	b809883a 	mov	r4,r23
1000ad84:	102b883a 	mov	r21,r2
1000ad88:	180b883a 	mov	r5,r3
1000ad8c:	000b0780 	call	1000b078 <__mulsi3>
1000ad90:	d9c00017 	ldw	r7,0(sp)
1000ad94:	1007883a 	mov	r3,r2
1000ad98:	e004d43a 	srli	r2,fp,16
1000ad9c:	a9c9883a 	add	r4,r21,r7
1000ada0:	2089883a 	add	r4,r4,r2
1000ada4:	2540022e 	bgeu	r4,r21,1000adb0 <__umoddi3+0x480>
1000ada8:	00800074 	movhi	r2,1
1000adac:	1887883a 	add	r3,r3,r2
1000adb0:	2004d43a 	srli	r2,r4,16
1000adb4:	2008943a 	slli	r4,r4,16
1000adb8:	e73fffcc 	andi	fp,fp,65535
1000adbc:	1887883a 	add	r3,r3,r2
1000adc0:	2709883a 	add	r4,r4,fp
1000adc4:	88c03e36 	bltu	r17,r3,1000aec0 <__umoddi3+0x590>
1000adc8:	88c06226 	beq	r17,r3,1000af54 <__umoddi3+0x624>
1000adcc:	88c7c83a 	sub	r3,r17,r3
1000add0:	202d883a 	mov	r22,r4
1000add4:	95adc83a 	sub	r22,r18,r22
1000add8:	95a5803a 	cmpltu	r18,r18,r22
1000addc:	1c87c83a 	sub	r3,r3,r18
1000ade0:	1cc4983a 	sll	r2,r3,r19
1000ade4:	b42cd83a 	srl	r22,r22,r16
1000ade8:	1c06d83a 	srl	r3,r3,r16
1000adec:	1584b03a 	or	r2,r2,r22
1000adf0:	003f7806 	br	1000abd4 <__alt_data_end+0xf800abd4>
1000adf4:	0025883a 	mov	r18,zero
1000adf8:	003ef406 	br	1000a9cc <__alt_data_end+0xf800a9cc>
1000adfc:	8560983a 	sll	r16,r16,r21
1000ae00:	88e6d83a 	srl	r19,r17,r3
1000ae04:	90c6d83a 	srl	r3,r18,r3
1000ae08:	8028d43a 	srli	r20,r16,16
1000ae0c:	8d62983a 	sll	r17,r17,r21
1000ae10:	9809883a 	mov	r4,r19
1000ae14:	a00b883a 	mov	r5,r20
1000ae18:	88eeb03a 	or	r23,r17,r3
1000ae1c:	000b0700 	call	1000b070 <__umodsi3>
1000ae20:	9809883a 	mov	r4,r19
1000ae24:	a00b883a 	mov	r5,r20
1000ae28:	1023883a 	mov	r17,r2
1000ae2c:	85bfffcc 	andi	r22,r16,65535
1000ae30:	000b0680 	call	1000b068 <__udivsi3>
1000ae34:	1009883a 	mov	r4,r2
1000ae38:	b00b883a 	mov	r5,r22
1000ae3c:	000b0780 	call	1000b078 <__mulsi3>
1000ae40:	1007883a 	mov	r3,r2
1000ae44:	8808943a 	slli	r4,r17,16
1000ae48:	b804d43a 	srli	r2,r23,16
1000ae4c:	9566983a 	sll	r19,r18,r21
1000ae50:	2088b03a 	or	r4,r4,r2
1000ae54:	20c0042e 	bgeu	r4,r3,1000ae68 <__umoddi3+0x538>
1000ae58:	2409883a 	add	r4,r4,r16
1000ae5c:	24000236 	bltu	r4,r16,1000ae68 <__umoddi3+0x538>
1000ae60:	20c0012e 	bgeu	r4,r3,1000ae68 <__umoddi3+0x538>
1000ae64:	2409883a 	add	r4,r4,r16
1000ae68:	20e5c83a 	sub	r18,r4,r3
1000ae6c:	9009883a 	mov	r4,r18
1000ae70:	a00b883a 	mov	r5,r20
1000ae74:	000b0700 	call	1000b070 <__umodsi3>
1000ae78:	1023883a 	mov	r17,r2
1000ae7c:	9009883a 	mov	r4,r18
1000ae80:	a00b883a 	mov	r5,r20
1000ae84:	8822943a 	slli	r17,r17,16
1000ae88:	000b0680 	call	1000b068 <__udivsi3>
1000ae8c:	1009883a 	mov	r4,r2
1000ae90:	b00b883a 	mov	r5,r22
1000ae94:	bdffffcc 	andi	r23,r23,65535
1000ae98:	000b0780 	call	1000b078 <__mulsi3>
1000ae9c:	8de2b03a 	or	r17,r17,r23
1000aea0:	8880042e 	bgeu	r17,r2,1000aeb4 <__umoddi3+0x584>
1000aea4:	8c23883a 	add	r17,r17,r16
1000aea8:	8c000236 	bltu	r17,r16,1000aeb4 <__umoddi3+0x584>
1000aeac:	8880012e 	bgeu	r17,r2,1000aeb4 <__umoddi3+0x584>
1000aeb0:	8c23883a 	add	r17,r17,r16
1000aeb4:	88a3c83a 	sub	r17,r17,r2
1000aeb8:	a825883a 	mov	r18,r21
1000aebc:	003f1a06 	br	1000ab28 <__alt_data_end+0xf800ab28>
1000aec0:	25adc83a 	sub	r22,r4,r22
1000aec4:	1d07c83a 	sub	r3,r3,r20
1000aec8:	2589803a 	cmpltu	r4,r4,r22
1000aecc:	1907c83a 	sub	r3,r3,r4
1000aed0:	88c7c83a 	sub	r3,r17,r3
1000aed4:	003fbf06 	br	1000add4 <__alt_data_end+0xf800add4>
1000aed8:	00c00204 	movi	r3,8
1000aedc:	1827883a 	mov	r19,r3
1000aee0:	003ee706 	br	1000aa80 <__alt_data_end+0xf800aa80>
1000aee4:	00c00604 	movi	r3,24
1000aee8:	1827883a 	mov	r19,r3
1000aeec:	003ee406 	br	1000aa80 <__alt_data_end+0xf800aa80>
1000aef0:	00800604 	movi	r2,24
1000aef4:	1009883a 	mov	r4,r2
1000aef8:	003ea506 	br	1000a990 <__alt_data_end+0xf800a990>
1000aefc:	00800204 	movi	r2,8
1000af00:	1007883a 	mov	r3,r2
1000af04:	003efb06 	br	1000aaf4 <__alt_data_end+0xf800aaf4>
1000af08:	00800604 	movi	r2,24
1000af0c:	1007883a 	mov	r3,r2
1000af10:	003ef806 	br	1000aaf4 <__alt_data_end+0xf800aaf4>
1000af14:	00800204 	movi	r2,8
1000af18:	1009883a 	mov	r4,r2
1000af1c:	003e9c06 	br	1000a990 <__alt_data_end+0xf800a990>
1000af20:	38bf7e2e 	bgeu	r7,r2,1000ad1c <__alt_data_end+0xf800ad1c>
1000af24:	ad7fff84 	addi	r21,r21,-2
1000af28:	3d0f883a 	add	r7,r7,r20
1000af2c:	003f7c06 	br	1000ad20 <__alt_data_end+0xf800ad20>
1000af30:	193f632e 	bgeu	r3,r4,1000acc0 <__alt_data_end+0xf800acc0>
1000af34:	e73fff84 	addi	fp,fp,-2
1000af38:	1d07883a 	add	r3,r3,r20
1000af3c:	003f6106 	br	1000acc4 <__alt_data_end+0xf800acc4>
1000af40:	1c07883a 	add	r3,r3,r16
1000af44:	003f0a06 	br	1000ab70 <__alt_data_end+0xf800ab70>
1000af48:	9005883a 	mov	r2,r18
1000af4c:	a007883a 	mov	r3,r20
1000af50:	003f2006 	br	1000abd4 <__alt_data_end+0xf800abd4>
1000af54:	913fda36 	bltu	r18,r4,1000aec0 <__alt_data_end+0xf800aec0>
1000af58:	202d883a 	mov	r22,r4
1000af5c:	0007883a 	mov	r3,zero
1000af60:	003f9c06 	br	1000add4 <__alt_data_end+0xf800add4>

1000af64 <udivmodsi4>:
1000af64:	2900182e 	bgeu	r5,r4,1000afc8 <udivmodsi4+0x64>
1000af68:	28001716 	blt	r5,zero,1000afc8 <udivmodsi4+0x64>
1000af6c:	00800804 	movi	r2,32
1000af70:	00c00044 	movi	r3,1
1000af74:	00000206 	br	1000af80 <udivmodsi4+0x1c>
1000af78:	10001126 	beq	r2,zero,1000afc0 <udivmodsi4+0x5c>
1000af7c:	28000516 	blt	r5,zero,1000af94 <udivmodsi4+0x30>
1000af80:	294b883a 	add	r5,r5,r5
1000af84:	10bfffc4 	addi	r2,r2,-1
1000af88:	18c7883a 	add	r3,r3,r3
1000af8c:	293ffa36 	bltu	r5,r4,1000af78 <__alt_data_end+0xf800af78>
1000af90:	18000b26 	beq	r3,zero,1000afc0 <udivmodsi4+0x5c>
1000af94:	0005883a 	mov	r2,zero
1000af98:	21400236 	bltu	r4,r5,1000afa4 <udivmodsi4+0x40>
1000af9c:	2149c83a 	sub	r4,r4,r5
1000afa0:	10c4b03a 	or	r2,r2,r3
1000afa4:	1806d07a 	srli	r3,r3,1
1000afa8:	280ad07a 	srli	r5,r5,1
1000afac:	183ffa1e 	bne	r3,zero,1000af98 <__alt_data_end+0xf800af98>
1000afb0:	3000011e 	bne	r6,zero,1000afb8 <udivmodsi4+0x54>
1000afb4:	f800283a 	ret
1000afb8:	2005883a 	mov	r2,r4
1000afbc:	f800283a 	ret
1000afc0:	0005883a 	mov	r2,zero
1000afc4:	003ffa06 	br	1000afb0 <__alt_data_end+0xf800afb0>
1000afc8:	00c00044 	movi	r3,1
1000afcc:	0005883a 	mov	r2,zero
1000afd0:	003ff106 	br	1000af98 <__alt_data_end+0xf800af98>

1000afd4 <__divsi3>:
1000afd4:	deffff04 	addi	sp,sp,-4
1000afd8:	dfc00015 	stw	ra,0(sp)
1000afdc:	20000916 	blt	r4,zero,1000b004 <__divsi3+0x30>
1000afe0:	000f883a 	mov	r7,zero
1000afe4:	28000a16 	blt	r5,zero,1000b010 <__divsi3+0x3c>
1000afe8:	000d883a 	mov	r6,zero
1000afec:	000af640 	call	1000af64 <udivmodsi4>
1000aff0:	38000126 	beq	r7,zero,1000aff8 <__divsi3+0x24>
1000aff4:	0085c83a 	sub	r2,zero,r2
1000aff8:	dfc00017 	ldw	ra,0(sp)
1000affc:	dec00104 	addi	sp,sp,4
1000b000:	f800283a 	ret
1000b004:	0109c83a 	sub	r4,zero,r4
1000b008:	01c00044 	movi	r7,1
1000b00c:	283ff60e 	bge	r5,zero,1000afe8 <__alt_data_end+0xf800afe8>
1000b010:	014bc83a 	sub	r5,zero,r5
1000b014:	39c0005c 	xori	r7,r7,1
1000b018:	003ff306 	br	1000afe8 <__alt_data_end+0xf800afe8>

1000b01c <__modsi3>:
1000b01c:	20000316 	blt	r4,zero,1000b02c <__modsi3+0x10>
1000b020:	28000c16 	blt	r5,zero,1000b054 <__modsi3+0x38>
1000b024:	01800044 	movi	r6,1
1000b028:	000af641 	jmpi	1000af64 <udivmodsi4>
1000b02c:	deffff04 	addi	sp,sp,-4
1000b030:	dfc00015 	stw	ra,0(sp)
1000b034:	0109c83a 	sub	r4,zero,r4
1000b038:	28000916 	blt	r5,zero,1000b060 <__modsi3+0x44>
1000b03c:	01800044 	movi	r6,1
1000b040:	000af640 	call	1000af64 <udivmodsi4>
1000b044:	0085c83a 	sub	r2,zero,r2
1000b048:	dfc00017 	ldw	ra,0(sp)
1000b04c:	dec00104 	addi	sp,sp,4
1000b050:	f800283a 	ret
1000b054:	014bc83a 	sub	r5,zero,r5
1000b058:	01800044 	movi	r6,1
1000b05c:	000af641 	jmpi	1000af64 <udivmodsi4>
1000b060:	014bc83a 	sub	r5,zero,r5
1000b064:	003ff506 	br	1000b03c <__alt_data_end+0xf800b03c>

1000b068 <__udivsi3>:
1000b068:	000d883a 	mov	r6,zero
1000b06c:	000af641 	jmpi	1000af64 <udivmodsi4>

1000b070 <__umodsi3>:
1000b070:	01800044 	movi	r6,1
1000b074:	000af641 	jmpi	1000af64 <udivmodsi4>

1000b078 <__mulsi3>:
1000b078:	0005883a 	mov	r2,zero
1000b07c:	20000726 	beq	r4,zero,1000b09c <__mulsi3+0x24>
1000b080:	20c0004c 	andi	r3,r4,1
1000b084:	2008d07a 	srli	r4,r4,1
1000b088:	18000126 	beq	r3,zero,1000b090 <__mulsi3+0x18>
1000b08c:	1145883a 	add	r2,r2,r5
1000b090:	294b883a 	add	r5,r5,r5
1000b094:	203ffa1e 	bne	r4,zero,1000b080 <__alt_data_end+0xf800b080>
1000b098:	f800283a 	ret
1000b09c:	f800283a 	ret

1000b0a0 <__adddf3>:
1000b0a0:	00800434 	movhi	r2,16
1000b0a4:	10bfffc4 	addi	r2,r2,-1
1000b0a8:	defffb04 	addi	sp,sp,-20
1000b0ac:	2890703a 	and	r8,r5,r2
1000b0b0:	2806d7fa 	srli	r3,r5,31
1000b0b4:	3884703a 	and	r2,r7,r2
1000b0b8:	2014d77a 	srli	r10,r4,29
1000b0bc:	3812d53a 	srli	r9,r7,20
1000b0c0:	dc400115 	stw	r17,4(sp)
1000b0c4:	100490fa 	slli	r2,r2,3
1000b0c8:	2822d53a 	srli	r17,r5,20
1000b0cc:	380ed7fa 	srli	r7,r7,31
1000b0d0:	400a90fa 	slli	r5,r8,3
1000b0d4:	3010d77a 	srli	r8,r6,29
1000b0d8:	dc800215 	stw	r18,8(sp)
1000b0dc:	dc000015 	stw	r16,0(sp)
1000b0e0:	dfc00415 	stw	ra,16(sp)
1000b0e4:	dcc00315 	stw	r19,12(sp)
1000b0e8:	1c803fcc 	andi	r18,r3,255
1000b0ec:	202090fa 	slli	r16,r4,3
1000b0f0:	8c41ffcc 	andi	r17,r17,2047
1000b0f4:	2a8ab03a 	or	r5,r5,r10
1000b0f8:	4901ffcc 	andi	r4,r9,2047
1000b0fc:	1204b03a 	or	r2,r2,r8
1000b100:	300c90fa 	slli	r6,r6,3
1000b104:	91c07126 	beq	r18,r7,1000b2cc <__adddf3+0x22c>
1000b108:	8907c83a 	sub	r3,r17,r4
1000b10c:	00c0a00e 	bge	zero,r3,1000b390 <__adddf3+0x2f0>
1000b110:	2000291e 	bne	r4,zero,1000b1b8 <__adddf3+0x118>
1000b114:	1188b03a 	or	r4,r2,r6
1000b118:	20008b1e 	bne	r4,zero,1000b348 <__adddf3+0x2a8>
1000b11c:	808001cc 	andi	r2,r16,7
1000b120:	10005a26 	beq	r2,zero,1000b28c <__adddf3+0x1ec>
1000b124:	80c003cc 	andi	r3,r16,15
1000b128:	00800104 	movi	r2,4
1000b12c:	18805726 	beq	r3,r2,1000b28c <__adddf3+0x1ec>
1000b130:	81000104 	addi	r4,r16,4
1000b134:	2421803a 	cmpltu	r16,r4,r16
1000b138:	2c0b883a 	add	r5,r5,r16
1000b13c:	2880202c 	andhi	r2,r5,128
1000b140:	9007883a 	mov	r3,r18
1000b144:	2021883a 	mov	r16,r4
1000b148:	10005326 	beq	r2,zero,1000b298 <__adddf3+0x1f8>
1000b14c:	8c400044 	addi	r17,r17,1
1000b150:	0081ffc4 	movi	r2,2047
1000b154:	8880ae26 	beq	r17,r2,1000b410 <__adddf3+0x370>
1000b158:	00bfe034 	movhi	r2,65408
1000b15c:	10bfffc4 	addi	r2,r2,-1
1000b160:	288a703a 	and	r5,r5,r2
1000b164:	2804977a 	slli	r2,r5,29
1000b168:	280a927a 	slli	r5,r5,9
1000b16c:	8020d0fa 	srli	r16,r16,3
1000b170:	280ad33a 	srli	r5,r5,12
1000b174:	1404b03a 	or	r2,r2,r16
1000b178:	8c41ffcc 	andi	r17,r17,2047
1000b17c:	8822953a 	slli	r17,r17,20
1000b180:	18c03fcc 	andi	r3,r3,255
1000b184:	180897fa 	slli	r4,r3,31
1000b188:	00c00434 	movhi	r3,16
1000b18c:	18ffffc4 	addi	r3,r3,-1
1000b190:	28c6703a 	and	r3,r5,r3
1000b194:	1c46b03a 	or	r3,r3,r17
1000b198:	1906b03a 	or	r3,r3,r4
1000b19c:	dfc00417 	ldw	ra,16(sp)
1000b1a0:	dcc00317 	ldw	r19,12(sp)
1000b1a4:	dc800217 	ldw	r18,8(sp)
1000b1a8:	dc400117 	ldw	r17,4(sp)
1000b1ac:	dc000017 	ldw	r16,0(sp)
1000b1b0:	dec00504 	addi	sp,sp,20
1000b1b4:	f800283a 	ret
1000b1b8:	0101ffc4 	movi	r4,2047
1000b1bc:	893fd726 	beq	r17,r4,1000b11c <__alt_data_end+0xf800b11c>
1000b1c0:	10802034 	orhi	r2,r2,128
1000b1c4:	01000e04 	movi	r4,56
1000b1c8:	20c09416 	blt	r4,r3,1000b41c <__adddf3+0x37c>
1000b1cc:	010007c4 	movi	r4,31
1000b1d0:	20c0b716 	blt	r4,r3,1000b4b0 <__adddf3+0x410>
1000b1d4:	01000804 	movi	r4,32
1000b1d8:	20c9c83a 	sub	r4,r4,r3
1000b1dc:	30ced83a 	srl	r7,r6,r3
1000b1e0:	1110983a 	sll	r8,r2,r4
1000b1e4:	3108983a 	sll	r4,r6,r4
1000b1e8:	10c6d83a 	srl	r3,r2,r3
1000b1ec:	41c4b03a 	or	r2,r8,r7
1000b1f0:	2008c03a 	cmpne	r4,r4,zero
1000b1f4:	110cb03a 	or	r6,r2,r4
1000b1f8:	818dc83a 	sub	r6,r16,r6
1000b1fc:	81a1803a 	cmpltu	r16,r16,r6
1000b200:	28cbc83a 	sub	r5,r5,r3
1000b204:	2c0bc83a 	sub	r5,r5,r16
1000b208:	3021883a 	mov	r16,r6
1000b20c:	2880202c 	andhi	r2,r5,128
1000b210:	103fc226 	beq	r2,zero,1000b11c <__alt_data_end+0xf800b11c>
1000b214:	04c02034 	movhi	r19,128
1000b218:	9cffffc4 	addi	r19,r19,-1
1000b21c:	2ce6703a 	and	r19,r5,r19
1000b220:	98006c26 	beq	r19,zero,1000b3d4 <__adddf3+0x334>
1000b224:	9809883a 	mov	r4,r19
1000b228:	000d7780 	call	1000d778 <__clzsi2>
1000b22c:	10fffe04 	addi	r3,r2,-8
1000b230:	010007c4 	movi	r4,31
1000b234:	20c06d16 	blt	r4,r3,1000b3ec <__adddf3+0x34c>
1000b238:	01000a04 	movi	r4,40
1000b23c:	2085c83a 	sub	r2,r4,r2
1000b240:	8084d83a 	srl	r2,r16,r2
1000b244:	98e6983a 	sll	r19,r19,r3
1000b248:	80e0983a 	sll	r16,r16,r3
1000b24c:	14c4b03a 	or	r2,r2,r19
1000b250:	1c406a16 	blt	r3,r17,1000b3fc <__adddf3+0x35c>
1000b254:	1c63c83a 	sub	r17,r3,r17
1000b258:	89400044 	addi	r5,r17,1
1000b25c:	00c007c4 	movi	r3,31
1000b260:	19408616 	blt	r3,r5,1000b47c <__adddf3+0x3dc>
1000b264:	1c47c83a 	sub	r3,r3,r17
1000b268:	8148d83a 	srl	r4,r16,r5
1000b26c:	80e0983a 	sll	r16,r16,r3
1000b270:	10c6983a 	sll	r3,r2,r3
1000b274:	114ad83a 	srl	r5,r2,r5
1000b278:	8004c03a 	cmpne	r2,r16,zero
1000b27c:	20e0b03a 	or	r16,r4,r3
1000b280:	80a0b03a 	or	r16,r16,r2
1000b284:	0023883a 	mov	r17,zero
1000b288:	003fa406 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b28c:	2880202c 	andhi	r2,r5,128
1000b290:	9007883a 	mov	r3,r18
1000b294:	103fad1e 	bne	r2,zero,1000b14c <__alt_data_end+0xf800b14c>
1000b298:	2804977a 	slli	r2,r5,29
1000b29c:	8020d0fa 	srli	r16,r16,3
1000b2a0:	0101ffc4 	movi	r4,2047
1000b2a4:	280ad0fa 	srli	r5,r5,3
1000b2a8:	1404b03a 	or	r2,r2,r16
1000b2ac:	8900031e 	bne	r17,r4,1000b2bc <__adddf3+0x21c>
1000b2b0:	1148b03a 	or	r4,r2,r5
1000b2b4:	20005626 	beq	r4,zero,1000b410 <__adddf3+0x370>
1000b2b8:	29400234 	orhi	r5,r5,8
1000b2bc:	01000434 	movhi	r4,16
1000b2c0:	213fffc4 	addi	r4,r4,-1
1000b2c4:	290a703a 	and	r5,r5,r4
1000b2c8:	003fab06 	br	1000b178 <__alt_data_end+0xf800b178>
1000b2cc:	890fc83a 	sub	r7,r17,r4
1000b2d0:	01c0560e 	bge	zero,r7,1000b42c <__adddf3+0x38c>
1000b2d4:	20002426 	beq	r4,zero,1000b368 <__adddf3+0x2c8>
1000b2d8:	0101ffc4 	movi	r4,2047
1000b2dc:	893f8f26 	beq	r17,r4,1000b11c <__alt_data_end+0xf800b11c>
1000b2e0:	10802034 	orhi	r2,r2,128
1000b2e4:	01000e04 	movi	r4,56
1000b2e8:	21c09d0e 	bge	r4,r7,1000b560 <__adddf3+0x4c0>
1000b2ec:	118cb03a 	or	r6,r2,r6
1000b2f0:	300cc03a 	cmpne	r6,r6,zero
1000b2f4:	000f883a 	mov	r7,zero
1000b2f8:	340d883a 	add	r6,r6,r16
1000b2fc:	3421803a 	cmpltu	r16,r6,r16
1000b300:	394b883a 	add	r5,r7,r5
1000b304:	2c0b883a 	add	r5,r5,r16
1000b308:	3021883a 	mov	r16,r6
1000b30c:	2880202c 	andhi	r2,r5,128
1000b310:	103f8226 	beq	r2,zero,1000b11c <__alt_data_end+0xf800b11c>
1000b314:	8c400044 	addi	r17,r17,1
1000b318:	0081ffc4 	movi	r2,2047
1000b31c:	8880cb26 	beq	r17,r2,1000b64c <__adddf3+0x5ac>
1000b320:	00bfe034 	movhi	r2,65408
1000b324:	10bfffc4 	addi	r2,r2,-1
1000b328:	288a703a 	and	r5,r5,r2
1000b32c:	8006d07a 	srli	r3,r16,1
1000b330:	280497fa 	slli	r2,r5,31
1000b334:	8400004c 	andi	r16,r16,1
1000b338:	80e0b03a 	or	r16,r16,r3
1000b33c:	80a0b03a 	or	r16,r16,r2
1000b340:	280ad07a 	srli	r5,r5,1
1000b344:	003f7506 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b348:	18ffffc4 	addi	r3,r3,-1
1000b34c:	1800481e 	bne	r3,zero,1000b470 <__adddf3+0x3d0>
1000b350:	818dc83a 	sub	r6,r16,r6
1000b354:	81a1803a 	cmpltu	r16,r16,r6
1000b358:	288bc83a 	sub	r5,r5,r2
1000b35c:	2c0bc83a 	sub	r5,r5,r16
1000b360:	3021883a 	mov	r16,r6
1000b364:	003fa906 	br	1000b20c <__alt_data_end+0xf800b20c>
1000b368:	1188b03a 	or	r4,r2,r6
1000b36c:	203f6b26 	beq	r4,zero,1000b11c <__alt_data_end+0xf800b11c>
1000b370:	39ffffc4 	addi	r7,r7,-1
1000b374:	3800931e 	bne	r7,zero,1000b5c4 <__adddf3+0x524>
1000b378:	340d883a 	add	r6,r6,r16
1000b37c:	3421803a 	cmpltu	r16,r6,r16
1000b380:	114b883a 	add	r5,r2,r5
1000b384:	2c0b883a 	add	r5,r5,r16
1000b388:	3021883a 	mov	r16,r6
1000b38c:	003fdf06 	br	1000b30c <__alt_data_end+0xf800b30c>
1000b390:	1800531e 	bne	r3,zero,1000b4e0 <__adddf3+0x440>
1000b394:	88c00044 	addi	r3,r17,1
1000b398:	18c1ffcc 	andi	r3,r3,2047
1000b39c:	01000044 	movi	r4,1
1000b3a0:	20c0a00e 	bge	r4,r3,1000b624 <__adddf3+0x584>
1000b3a4:	8187c83a 	sub	r3,r16,r6
1000b3a8:	80c9803a 	cmpltu	r4,r16,r3
1000b3ac:	28a7c83a 	sub	r19,r5,r2
1000b3b0:	9927c83a 	sub	r19,r19,r4
1000b3b4:	9900202c 	andhi	r4,r19,128
1000b3b8:	20006226 	beq	r4,zero,1000b544 <__adddf3+0x4a4>
1000b3bc:	3421c83a 	sub	r16,r6,r16
1000b3c0:	1145c83a 	sub	r2,r2,r5
1000b3c4:	340d803a 	cmpltu	r6,r6,r16
1000b3c8:	11a7c83a 	sub	r19,r2,r6
1000b3cc:	3825883a 	mov	r18,r7
1000b3d0:	983f941e 	bne	r19,zero,1000b224 <__alt_data_end+0xf800b224>
1000b3d4:	8009883a 	mov	r4,r16
1000b3d8:	000d7780 	call	1000d778 <__clzsi2>
1000b3dc:	10800804 	addi	r2,r2,32
1000b3e0:	10fffe04 	addi	r3,r2,-8
1000b3e4:	010007c4 	movi	r4,31
1000b3e8:	20ff930e 	bge	r4,r3,1000b238 <__alt_data_end+0xf800b238>
1000b3ec:	10bff604 	addi	r2,r2,-40
1000b3f0:	8084983a 	sll	r2,r16,r2
1000b3f4:	0021883a 	mov	r16,zero
1000b3f8:	1c7f960e 	bge	r3,r17,1000b254 <__alt_data_end+0xf800b254>
1000b3fc:	017fe034 	movhi	r5,65408
1000b400:	297fffc4 	addi	r5,r5,-1
1000b404:	88e3c83a 	sub	r17,r17,r3
1000b408:	114a703a 	and	r5,r2,r5
1000b40c:	003f4306 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b410:	000b883a 	mov	r5,zero
1000b414:	0005883a 	mov	r2,zero
1000b418:	003f5706 	br	1000b178 <__alt_data_end+0xf800b178>
1000b41c:	118cb03a 	or	r6,r2,r6
1000b420:	300cc03a 	cmpne	r6,r6,zero
1000b424:	0007883a 	mov	r3,zero
1000b428:	003f7306 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000b42c:	3800961e 	bne	r7,zero,1000b688 <__adddf3+0x5e8>
1000b430:	89000044 	addi	r4,r17,1
1000b434:	2201ffcc 	andi	r8,r4,2047
1000b438:	01c00044 	movi	r7,1
1000b43c:	3a00680e 	bge	r7,r8,1000b5e0 <__adddf3+0x540>
1000b440:	01c1ffc4 	movi	r7,2047
1000b444:	21c0a726 	beq	r4,r7,1000b6e4 <__adddf3+0x644>
1000b448:	340d883a 	add	r6,r6,r16
1000b44c:	3421803a 	cmpltu	r16,r6,r16
1000b450:	114b883a 	add	r5,r2,r5
1000b454:	2c0b883a 	add	r5,r5,r16
1000b458:	282097fa 	slli	r16,r5,31
1000b45c:	300cd07a 	srli	r6,r6,1
1000b460:	280ad07a 	srli	r5,r5,1
1000b464:	2023883a 	mov	r17,r4
1000b468:	81a0b03a 	or	r16,r16,r6
1000b46c:	003f2b06 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b470:	0101ffc4 	movi	r4,2047
1000b474:	893f531e 	bne	r17,r4,1000b1c4 <__alt_data_end+0xf800b1c4>
1000b478:	003f2806 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b47c:	893ff844 	addi	r4,r17,-31
1000b480:	00c00804 	movi	r3,32
1000b484:	1108d83a 	srl	r4,r2,r4
1000b488:	28c05126 	beq	r5,r3,1000b5d0 <__adddf3+0x530>
1000b48c:	00c00fc4 	movi	r3,63
1000b490:	1c63c83a 	sub	r17,r3,r17
1000b494:	1444983a 	sll	r2,r2,r17
1000b498:	1420b03a 	or	r16,r2,r16
1000b49c:	8020c03a 	cmpne	r16,r16,zero
1000b4a0:	8120b03a 	or	r16,r16,r4
1000b4a4:	000b883a 	mov	r5,zero
1000b4a8:	0023883a 	mov	r17,zero
1000b4ac:	003f1b06 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b4b0:	193ff804 	addi	r4,r3,-32
1000b4b4:	01c00804 	movi	r7,32
1000b4b8:	1108d83a 	srl	r4,r2,r4
1000b4bc:	19c04626 	beq	r3,r7,1000b5d8 <__adddf3+0x538>
1000b4c0:	01c01004 	movi	r7,64
1000b4c4:	38c7c83a 	sub	r3,r7,r3
1000b4c8:	10c4983a 	sll	r2,r2,r3
1000b4cc:	118cb03a 	or	r6,r2,r6
1000b4d0:	300cc03a 	cmpne	r6,r6,zero
1000b4d4:	310cb03a 	or	r6,r6,r4
1000b4d8:	0007883a 	mov	r3,zero
1000b4dc:	003f4606 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000b4e0:	88002b26 	beq	r17,zero,1000b590 <__adddf3+0x4f0>
1000b4e4:	0201ffc4 	movi	r8,2047
1000b4e8:	22002f26 	beq	r4,r8,1000b5a8 <__adddf3+0x508>
1000b4ec:	00c7c83a 	sub	r3,zero,r3
1000b4f0:	29402034 	orhi	r5,r5,128
1000b4f4:	02000e04 	movi	r8,56
1000b4f8:	40c07616 	blt	r8,r3,1000b6d4 <__adddf3+0x634>
1000b4fc:	020007c4 	movi	r8,31
1000b500:	40c0d216 	blt	r8,r3,1000b84c <__adddf3+0x7ac>
1000b504:	02000804 	movi	r8,32
1000b508:	40d1c83a 	sub	r8,r8,r3
1000b50c:	2a14983a 	sll	r10,r5,r8
1000b510:	80d2d83a 	srl	r9,r16,r3
1000b514:	8210983a 	sll	r8,r16,r8
1000b518:	28cad83a 	srl	r5,r5,r3
1000b51c:	5252b03a 	or	r9,r10,r9
1000b520:	4006c03a 	cmpne	r3,r8,zero
1000b524:	48e0b03a 	or	r16,r9,r3
1000b528:	3421c83a 	sub	r16,r6,r16
1000b52c:	114bc83a 	sub	r5,r2,r5
1000b530:	340d803a 	cmpltu	r6,r6,r16
1000b534:	298bc83a 	sub	r5,r5,r6
1000b538:	2023883a 	mov	r17,r4
1000b53c:	3825883a 	mov	r18,r7
1000b540:	003f3206 	br	1000b20c <__alt_data_end+0xf800b20c>
1000b544:	98c4b03a 	or	r2,r19,r3
1000b548:	10001c1e 	bne	r2,zero,1000b5bc <__adddf3+0x51c>
1000b54c:	0007883a 	mov	r3,zero
1000b550:	000b883a 	mov	r5,zero
1000b554:	0021883a 	mov	r16,zero
1000b558:	0023883a 	mov	r17,zero
1000b55c:	003f4e06 	br	1000b298 <__alt_data_end+0xf800b298>
1000b560:	010007c4 	movi	r4,31
1000b564:	21c03c16 	blt	r4,r7,1000b658 <__adddf3+0x5b8>
1000b568:	01000804 	movi	r4,32
1000b56c:	21c9c83a 	sub	r4,r4,r7
1000b570:	31d0d83a 	srl	r8,r6,r7
1000b574:	1112983a 	sll	r9,r2,r4
1000b578:	3108983a 	sll	r4,r6,r4
1000b57c:	11ced83a 	srl	r7,r2,r7
1000b580:	4a04b03a 	or	r2,r9,r8
1000b584:	2008c03a 	cmpne	r4,r4,zero
1000b588:	110cb03a 	or	r6,r2,r4
1000b58c:	003f5a06 	br	1000b2f8 <__alt_data_end+0xf800b2f8>
1000b590:	2c10b03a 	or	r8,r5,r16
1000b594:	40000426 	beq	r8,zero,1000b5a8 <__adddf3+0x508>
1000b598:	00c6303a 	nor	r3,zero,r3
1000b59c:	183fe226 	beq	r3,zero,1000b528 <__alt_data_end+0xf800b528>
1000b5a0:	0201ffc4 	movi	r8,2047
1000b5a4:	223fd31e 	bne	r4,r8,1000b4f4 <__alt_data_end+0xf800b4f4>
1000b5a8:	100b883a 	mov	r5,r2
1000b5ac:	3021883a 	mov	r16,r6
1000b5b0:	2023883a 	mov	r17,r4
1000b5b4:	3825883a 	mov	r18,r7
1000b5b8:	003ed806 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b5bc:	1821883a 	mov	r16,r3
1000b5c0:	003f1706 	br	1000b220 <__alt_data_end+0xf800b220>
1000b5c4:	0101ffc4 	movi	r4,2047
1000b5c8:	893f461e 	bne	r17,r4,1000b2e4 <__alt_data_end+0xf800b2e4>
1000b5cc:	003ed306 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b5d0:	0005883a 	mov	r2,zero
1000b5d4:	003fb006 	br	1000b498 <__alt_data_end+0xf800b498>
1000b5d8:	0005883a 	mov	r2,zero
1000b5dc:	003fbb06 	br	1000b4cc <__alt_data_end+0xf800b4cc>
1000b5e0:	2c06b03a 	or	r3,r5,r16
1000b5e4:	8800841e 	bne	r17,zero,1000b7f8 <__adddf3+0x758>
1000b5e8:	1800b226 	beq	r3,zero,1000b8b4 <__adddf3+0x814>
1000b5ec:	1186b03a 	or	r3,r2,r6
1000b5f0:	183eca26 	beq	r3,zero,1000b11c <__alt_data_end+0xf800b11c>
1000b5f4:	340d883a 	add	r6,r6,r16
1000b5f8:	114b883a 	add	r5,r2,r5
1000b5fc:	3421803a 	cmpltu	r16,r6,r16
1000b600:	2c0b883a 	add	r5,r5,r16
1000b604:	2880202c 	andhi	r2,r5,128
1000b608:	1000c026 	beq	r2,zero,1000b90c <__adddf3+0x86c>
1000b60c:	00bfe034 	movhi	r2,65408
1000b610:	10bfffc4 	addi	r2,r2,-1
1000b614:	288a703a 	and	r5,r5,r2
1000b618:	3021883a 	mov	r16,r6
1000b61c:	3823883a 	mov	r17,r7
1000b620:	003ebe06 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b624:	2c06b03a 	or	r3,r5,r16
1000b628:	8800221e 	bne	r17,zero,1000b6b4 <__adddf3+0x614>
1000b62c:	1800481e 	bne	r3,zero,1000b750 <__adddf3+0x6b0>
1000b630:	1186b03a 	or	r3,r2,r6
1000b634:	18000426 	beq	r3,zero,1000b648 <__adddf3+0x5a8>
1000b638:	100b883a 	mov	r5,r2
1000b63c:	3021883a 	mov	r16,r6
1000b640:	3825883a 	mov	r18,r7
1000b644:	003eb506 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b648:	0007883a 	mov	r3,zero
1000b64c:	000b883a 	mov	r5,zero
1000b650:	0021883a 	mov	r16,zero
1000b654:	003f1006 	br	1000b298 <__alt_data_end+0xf800b298>
1000b658:	393ff804 	addi	r4,r7,-32
1000b65c:	02000804 	movi	r8,32
1000b660:	1108d83a 	srl	r4,r2,r4
1000b664:	3a007726 	beq	r7,r8,1000b844 <__adddf3+0x7a4>
1000b668:	02001004 	movi	r8,64
1000b66c:	41cfc83a 	sub	r7,r8,r7
1000b670:	11c4983a 	sll	r2,r2,r7
1000b674:	118cb03a 	or	r6,r2,r6
1000b678:	300cc03a 	cmpne	r6,r6,zero
1000b67c:	310cb03a 	or	r6,r6,r4
1000b680:	000f883a 	mov	r7,zero
1000b684:	003f1c06 	br	1000b2f8 <__alt_data_end+0xf800b2f8>
1000b688:	88001a1e 	bne	r17,zero,1000b6f4 <__adddf3+0x654>
1000b68c:	2c10b03a 	or	r8,r5,r16
1000b690:	40005526 	beq	r8,zero,1000b7e8 <__adddf3+0x748>
1000b694:	01ce303a 	nor	r7,zero,r7
1000b698:	3800511e 	bne	r7,zero,1000b7e0 <__adddf3+0x740>
1000b69c:	81a1883a 	add	r16,r16,r6
1000b6a0:	114b883a 	add	r5,r2,r5
1000b6a4:	818d803a 	cmpltu	r6,r16,r6
1000b6a8:	298b883a 	add	r5,r5,r6
1000b6ac:	2023883a 	mov	r17,r4
1000b6b0:	003f1606 	br	1000b30c <__alt_data_end+0xf800b30c>
1000b6b4:	1800341e 	bne	r3,zero,1000b788 <__adddf3+0x6e8>
1000b6b8:	1186b03a 	or	r3,r2,r6
1000b6bc:	18006f26 	beq	r3,zero,1000b87c <__adddf3+0x7dc>
1000b6c0:	100b883a 	mov	r5,r2
1000b6c4:	3021883a 	mov	r16,r6
1000b6c8:	3825883a 	mov	r18,r7
1000b6cc:	0441ffc4 	movi	r17,2047
1000b6d0:	003e9206 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b6d4:	2c20b03a 	or	r16,r5,r16
1000b6d8:	8020c03a 	cmpne	r16,r16,zero
1000b6dc:	000b883a 	mov	r5,zero
1000b6e0:	003f9106 	br	1000b528 <__alt_data_end+0xf800b528>
1000b6e4:	2023883a 	mov	r17,r4
1000b6e8:	000b883a 	mov	r5,zero
1000b6ec:	0021883a 	mov	r16,zero
1000b6f0:	003ee906 	br	1000b298 <__alt_data_end+0xf800b298>
1000b6f4:	0201ffc4 	movi	r8,2047
1000b6f8:	22003b26 	beq	r4,r8,1000b7e8 <__adddf3+0x748>
1000b6fc:	01cfc83a 	sub	r7,zero,r7
1000b700:	29402034 	orhi	r5,r5,128
1000b704:	02000e04 	movi	r8,56
1000b708:	41c06216 	blt	r8,r7,1000b894 <__adddf3+0x7f4>
1000b70c:	020007c4 	movi	r8,31
1000b710:	41c07016 	blt	r8,r7,1000b8d4 <__adddf3+0x834>
1000b714:	02000804 	movi	r8,32
1000b718:	41d1c83a 	sub	r8,r8,r7
1000b71c:	2a14983a 	sll	r10,r5,r8
1000b720:	81d2d83a 	srl	r9,r16,r7
1000b724:	8210983a 	sll	r8,r16,r8
1000b728:	29cad83a 	srl	r5,r5,r7
1000b72c:	5252b03a 	or	r9,r10,r9
1000b730:	400ec03a 	cmpne	r7,r8,zero
1000b734:	49e0b03a 	or	r16,r9,r7
1000b738:	81a1883a 	add	r16,r16,r6
1000b73c:	2885883a 	add	r2,r5,r2
1000b740:	818d803a 	cmpltu	r6,r16,r6
1000b744:	118b883a 	add	r5,r2,r6
1000b748:	2023883a 	mov	r17,r4
1000b74c:	003eef06 	br	1000b30c <__alt_data_end+0xf800b30c>
1000b750:	1186b03a 	or	r3,r2,r6
1000b754:	183e7126 	beq	r3,zero,1000b11c <__alt_data_end+0xf800b11c>
1000b758:	8187c83a 	sub	r3,r16,r6
1000b75c:	80d1803a 	cmpltu	r8,r16,r3
1000b760:	2889c83a 	sub	r4,r5,r2
1000b764:	2209c83a 	sub	r4,r4,r8
1000b768:	2200202c 	andhi	r8,r4,128
1000b76c:	40005426 	beq	r8,zero,1000b8c0 <__adddf3+0x820>
1000b770:	3421c83a 	sub	r16,r6,r16
1000b774:	114bc83a 	sub	r5,r2,r5
1000b778:	340d803a 	cmpltu	r6,r6,r16
1000b77c:	298bc83a 	sub	r5,r5,r6
1000b780:	3825883a 	mov	r18,r7
1000b784:	003e6506 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b788:	1186b03a 	or	r3,r2,r6
1000b78c:	18002b26 	beq	r3,zero,1000b83c <__adddf3+0x79c>
1000b790:	2806d0fa 	srli	r3,r5,3
1000b794:	8020d0fa 	srli	r16,r16,3
1000b798:	280a977a 	slli	r5,r5,29
1000b79c:	1900022c 	andhi	r4,r3,8
1000b7a0:	2c20b03a 	or	r16,r5,r16
1000b7a4:	20000826 	beq	r4,zero,1000b7c8 <__adddf3+0x728>
1000b7a8:	1008d0fa 	srli	r4,r2,3
1000b7ac:	2140022c 	andhi	r5,r4,8
1000b7b0:	2800051e 	bne	r5,zero,1000b7c8 <__adddf3+0x728>
1000b7b4:	300cd0fa 	srli	r6,r6,3
1000b7b8:	1004977a 	slli	r2,r2,29
1000b7bc:	2007883a 	mov	r3,r4
1000b7c0:	3825883a 	mov	r18,r7
1000b7c4:	11a0b03a 	or	r16,r2,r6
1000b7c8:	800ad77a 	srli	r5,r16,29
1000b7cc:	180690fa 	slli	r3,r3,3
1000b7d0:	802090fa 	slli	r16,r16,3
1000b7d4:	0441ffc4 	movi	r17,2047
1000b7d8:	28cab03a 	or	r5,r5,r3
1000b7dc:	003e4f06 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b7e0:	0201ffc4 	movi	r8,2047
1000b7e4:	223fc71e 	bne	r4,r8,1000b704 <__alt_data_end+0xf800b704>
1000b7e8:	100b883a 	mov	r5,r2
1000b7ec:	3021883a 	mov	r16,r6
1000b7f0:	2023883a 	mov	r17,r4
1000b7f4:	003e4906 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b7f8:	18002a26 	beq	r3,zero,1000b8a4 <__adddf3+0x804>
1000b7fc:	1186b03a 	or	r3,r2,r6
1000b800:	18000e26 	beq	r3,zero,1000b83c <__adddf3+0x79c>
1000b804:	2806d0fa 	srli	r3,r5,3
1000b808:	8020d0fa 	srli	r16,r16,3
1000b80c:	280a977a 	slli	r5,r5,29
1000b810:	1900022c 	andhi	r4,r3,8
1000b814:	2c20b03a 	or	r16,r5,r16
1000b818:	203feb26 	beq	r4,zero,1000b7c8 <__alt_data_end+0xf800b7c8>
1000b81c:	1008d0fa 	srli	r4,r2,3
1000b820:	2140022c 	andhi	r5,r4,8
1000b824:	283fe81e 	bne	r5,zero,1000b7c8 <__alt_data_end+0xf800b7c8>
1000b828:	300cd0fa 	srli	r6,r6,3
1000b82c:	1004977a 	slli	r2,r2,29
1000b830:	2007883a 	mov	r3,r4
1000b834:	11a0b03a 	or	r16,r2,r6
1000b838:	003fe306 	br	1000b7c8 <__alt_data_end+0xf800b7c8>
1000b83c:	0441ffc4 	movi	r17,2047
1000b840:	003e3606 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b844:	0005883a 	mov	r2,zero
1000b848:	003f8a06 	br	1000b674 <__alt_data_end+0xf800b674>
1000b84c:	1a3ff804 	addi	r8,r3,-32
1000b850:	02400804 	movi	r9,32
1000b854:	2a10d83a 	srl	r8,r5,r8
1000b858:	1a402a26 	beq	r3,r9,1000b904 <__adddf3+0x864>
1000b85c:	02401004 	movi	r9,64
1000b860:	48c7c83a 	sub	r3,r9,r3
1000b864:	28ca983a 	sll	r5,r5,r3
1000b868:	2c20b03a 	or	r16,r5,r16
1000b86c:	8020c03a 	cmpne	r16,r16,zero
1000b870:	8220b03a 	or	r16,r16,r8
1000b874:	000b883a 	mov	r5,zero
1000b878:	003f2b06 	br	1000b528 <__alt_data_end+0xf800b528>
1000b87c:	0007883a 	mov	r3,zero
1000b880:	01402034 	movhi	r5,128
1000b884:	297fffc4 	addi	r5,r5,-1
1000b888:	043ffe04 	movi	r16,-8
1000b88c:	0441ffc4 	movi	r17,2047
1000b890:	003e8106 	br	1000b298 <__alt_data_end+0xf800b298>
1000b894:	2c20b03a 	or	r16,r5,r16
1000b898:	8020c03a 	cmpne	r16,r16,zero
1000b89c:	000b883a 	mov	r5,zero
1000b8a0:	003fa506 	br	1000b738 <__alt_data_end+0xf800b738>
1000b8a4:	100b883a 	mov	r5,r2
1000b8a8:	3021883a 	mov	r16,r6
1000b8ac:	0441ffc4 	movi	r17,2047
1000b8b0:	003e1a06 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b8b4:	100b883a 	mov	r5,r2
1000b8b8:	3021883a 	mov	r16,r6
1000b8bc:	003e1706 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b8c0:	20c4b03a 	or	r2,r4,r3
1000b8c4:	103f6026 	beq	r2,zero,1000b648 <__alt_data_end+0xf800b648>
1000b8c8:	200b883a 	mov	r5,r4
1000b8cc:	1821883a 	mov	r16,r3
1000b8d0:	003e1206 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b8d4:	3a3ff804 	addi	r8,r7,-32
1000b8d8:	02400804 	movi	r9,32
1000b8dc:	2a10d83a 	srl	r8,r5,r8
1000b8e0:	3a400c26 	beq	r7,r9,1000b914 <__adddf3+0x874>
1000b8e4:	02401004 	movi	r9,64
1000b8e8:	49cfc83a 	sub	r7,r9,r7
1000b8ec:	29ca983a 	sll	r5,r5,r7
1000b8f0:	2c20b03a 	or	r16,r5,r16
1000b8f4:	8020c03a 	cmpne	r16,r16,zero
1000b8f8:	8220b03a 	or	r16,r16,r8
1000b8fc:	000b883a 	mov	r5,zero
1000b900:	003f8d06 	br	1000b738 <__alt_data_end+0xf800b738>
1000b904:	000b883a 	mov	r5,zero
1000b908:	003fd706 	br	1000b868 <__alt_data_end+0xf800b868>
1000b90c:	3021883a 	mov	r16,r6
1000b910:	003e0206 	br	1000b11c <__alt_data_end+0xf800b11c>
1000b914:	000b883a 	mov	r5,zero
1000b918:	003ff506 	br	1000b8f0 <__alt_data_end+0xf800b8f0>

1000b91c <__divdf3>:
1000b91c:	defff004 	addi	sp,sp,-64
1000b920:	dd000a15 	stw	r20,40(sp)
1000b924:	2828d53a 	srli	r20,r5,20
1000b928:	dd800c15 	stw	r22,48(sp)
1000b92c:	282cd7fa 	srli	r22,r5,31
1000b930:	df000e15 	stw	fp,56(sp)
1000b934:	dcc00915 	stw	r19,36(sp)
1000b938:	dc800815 	stw	r18,32(sp)
1000b93c:	04c00434 	movhi	r19,16
1000b940:	9cffffc4 	addi	r19,r19,-1
1000b944:	dfc00f15 	stw	ra,60(sp)
1000b948:	ddc00d15 	stw	r23,52(sp)
1000b94c:	dd400b15 	stw	r21,44(sp)
1000b950:	dc400715 	stw	r17,28(sp)
1000b954:	dc000615 	stw	r16,24(sp)
1000b958:	a501ffcc 	andi	r20,r20,2047
1000b95c:	2025883a 	mov	r18,r4
1000b960:	2ce6703a 	and	r19,r5,r19
1000b964:	b7003fcc 	andi	fp,r22,255
1000b968:	a0006a26 	beq	r20,zero,1000bb14 <__divdf3+0x1f8>
1000b96c:	0081ffc4 	movi	r2,2047
1000b970:	2021883a 	mov	r16,r4
1000b974:	a0803726 	beq	r20,r2,1000ba54 <__divdf3+0x138>
1000b978:	98800434 	orhi	r2,r19,16
1000b97c:	100490fa 	slli	r2,r2,3
1000b980:	2026d77a 	srli	r19,r4,29
1000b984:	202090fa 	slli	r16,r4,3
1000b988:	a53f0044 	addi	r20,r20,-1023
1000b98c:	14e6b03a 	or	r19,r2,r19
1000b990:	002b883a 	mov	r21,zero
1000b994:	0013883a 	mov	r9,zero
1000b998:	3804d53a 	srli	r2,r7,20
1000b99c:	382ed7fa 	srli	r23,r7,31
1000b9a0:	04400434 	movhi	r17,16
1000b9a4:	8c7fffc4 	addi	r17,r17,-1
1000b9a8:	1081ffcc 	andi	r2,r2,2047
1000b9ac:	3025883a 	mov	r18,r6
1000b9b0:	3c62703a 	and	r17,r7,r17
1000b9b4:	ba803fcc 	andi	r10,r23,255
1000b9b8:	10007326 	beq	r2,zero,1000bb88 <__divdf3+0x26c>
1000b9bc:	0101ffc4 	movi	r4,2047
1000b9c0:	11006b26 	beq	r2,r4,1000bb70 <__divdf3+0x254>
1000b9c4:	89000434 	orhi	r4,r17,16
1000b9c8:	200890fa 	slli	r4,r4,3
1000b9cc:	3022d77a 	srli	r17,r6,29
1000b9d0:	302490fa 	slli	r18,r6,3
1000b9d4:	10bf0044 	addi	r2,r2,-1023
1000b9d8:	2462b03a 	or	r17,r4,r17
1000b9dc:	000f883a 	mov	r7,zero
1000b9e0:	b5caf03a 	xor	r5,r22,r23
1000b9e4:	3d48b03a 	or	r4,r7,r21
1000b9e8:	00c003c4 	movi	r3,15
1000b9ec:	2811883a 	mov	r8,r5
1000b9f0:	2d403fcc 	andi	r21,r5,255
1000b9f4:	19009436 	bltu	r3,r4,1000bc48 <__divdf3+0x32c>
1000b9f8:	2109883a 	add	r4,r4,r4
1000b9fc:	00c40074 	movhi	r3,4097
1000ba00:	18ee8504 	addi	r3,r3,-17900
1000ba04:	2109883a 	add	r4,r4,r4
1000ba08:	20c9883a 	add	r4,r4,r3
1000ba0c:	20c00017 	ldw	r3,0(r4)
1000ba10:	1800683a 	jmp	r3
1000ba14:	1000bc48 	cmpgei	zero,r2,753
1000ba18:	1000bab0 	cmpltui	zero,r2,746
1000ba1c:	1000bc38 	rdprs	zero,r2,752
1000ba20:	1000ba80 	call	11000ba8 <_gp+0xfe6f2c>
1000ba24:	1000bc38 	rdprs	zero,r2,752
1000ba28:	1000bc20 	cmpeqi	zero,r2,752
1000ba2c:	1000bc38 	rdprs	zero,r2,752
1000ba30:	1000ba80 	call	11000ba8 <_gp+0xfe6f2c>
1000ba34:	1000bab0 	cmpltui	zero,r2,746
1000ba38:	1000bab0 	cmpltui	zero,r2,746
1000ba3c:	1000bc20 	cmpeqi	zero,r2,752
1000ba40:	1000ba80 	call	11000ba8 <_gp+0xfe6f2c>
1000ba44:	1000ba70 	cmpltui	zero,r2,745
1000ba48:	1000ba70 	cmpltui	zero,r2,745
1000ba4c:	1000ba70 	cmpltui	zero,r2,745
1000ba50:	1000bfd8 	cmpnei	zero,r2,767
1000ba54:	9904b03a 	or	r2,r19,r4
1000ba58:	10006e1e 	bne	r2,zero,1000bc14 <__divdf3+0x2f8>
1000ba5c:	05400204 	movi	r21,8
1000ba60:	0027883a 	mov	r19,zero
1000ba64:	0021883a 	mov	r16,zero
1000ba68:	02400084 	movi	r9,2
1000ba6c:	003fca06 	br	1000b998 <__alt_data_end+0xf800b998>
1000ba70:	9823883a 	mov	r17,r19
1000ba74:	8025883a 	mov	r18,r16
1000ba78:	e015883a 	mov	r10,fp
1000ba7c:	480f883a 	mov	r7,r9
1000ba80:	00800084 	movi	r2,2
1000ba84:	38800926 	beq	r7,r2,1000baac <__divdf3+0x190>
1000ba88:	008000c4 	movi	r2,3
1000ba8c:	38820226 	beq	r7,r2,1000c298 <__divdf3+0x97c>
1000ba90:	00800044 	movi	r2,1
1000ba94:	3881b81e 	bne	r7,r2,1000c178 <__divdf3+0x85c>
1000ba98:	5011883a 	mov	r8,r10
1000ba9c:	0005883a 	mov	r2,zero
1000baa0:	0027883a 	mov	r19,zero
1000baa4:	0021883a 	mov	r16,zero
1000baa8:	00000506 	br	1000bac0 <__divdf3+0x1a4>
1000baac:	502b883a 	mov	r21,r10
1000bab0:	aa00004c 	andi	r8,r21,1
1000bab4:	0081ffc4 	movi	r2,2047
1000bab8:	0027883a 	mov	r19,zero
1000babc:	0021883a 	mov	r16,zero
1000bac0:	1004953a 	slli	r2,r2,20
1000bac4:	42003fcc 	andi	r8,r8,255
1000bac8:	401097fa 	slli	r8,r8,31
1000bacc:	00c00434 	movhi	r3,16
1000bad0:	18ffffc4 	addi	r3,r3,-1
1000bad4:	98e6703a 	and	r19,r19,r3
1000bad8:	9886b03a 	or	r3,r19,r2
1000badc:	1a06b03a 	or	r3,r3,r8
1000bae0:	8005883a 	mov	r2,r16
1000bae4:	dfc00f17 	ldw	ra,60(sp)
1000bae8:	df000e17 	ldw	fp,56(sp)
1000baec:	ddc00d17 	ldw	r23,52(sp)
1000baf0:	dd800c17 	ldw	r22,48(sp)
1000baf4:	dd400b17 	ldw	r21,44(sp)
1000baf8:	dd000a17 	ldw	r20,40(sp)
1000bafc:	dcc00917 	ldw	r19,36(sp)
1000bb00:	dc800817 	ldw	r18,32(sp)
1000bb04:	dc400717 	ldw	r17,28(sp)
1000bb08:	dc000617 	ldw	r16,24(sp)
1000bb0c:	dec01004 	addi	sp,sp,64
1000bb10:	f800283a 	ret
1000bb14:	9904b03a 	or	r2,r19,r4
1000bb18:	10003926 	beq	r2,zero,1000bc00 <__divdf3+0x2e4>
1000bb1c:	98015326 	beq	r19,zero,1000c06c <__divdf3+0x750>
1000bb20:	9809883a 	mov	r4,r19
1000bb24:	d9800215 	stw	r6,8(sp)
1000bb28:	d9c00515 	stw	r7,20(sp)
1000bb2c:	000d7780 	call	1000d778 <__clzsi2>
1000bb30:	d9800217 	ldw	r6,8(sp)
1000bb34:	d9c00517 	ldw	r7,20(sp)
1000bb38:	00c009c4 	movi	r3,39
1000bb3c:	18814716 	blt	r3,r2,1000c05c <__divdf3+0x740>
1000bb40:	01400a04 	movi	r5,40
1000bb44:	143ffe04 	addi	r16,r2,-8
1000bb48:	288bc83a 	sub	r5,r5,r2
1000bb4c:	9c26983a 	sll	r19,r19,r16
1000bb50:	914ad83a 	srl	r5,r18,r5
1000bb54:	9420983a 	sll	r16,r18,r16
1000bb58:	2ce6b03a 	or	r19,r5,r19
1000bb5c:	053f0344 	movi	r20,-1011
1000bb60:	a0a9c83a 	sub	r20,r20,r2
1000bb64:	002b883a 	mov	r21,zero
1000bb68:	0013883a 	mov	r9,zero
1000bb6c:	003f8a06 	br	1000b998 <__alt_data_end+0xf800b998>
1000bb70:	8988b03a 	or	r4,r17,r6
1000bb74:	2000201e 	bne	r4,zero,1000bbf8 <__divdf3+0x2dc>
1000bb78:	0023883a 	mov	r17,zero
1000bb7c:	0025883a 	mov	r18,zero
1000bb80:	01c00084 	movi	r7,2
1000bb84:	003f9606 	br	1000b9e0 <__alt_data_end+0xf800b9e0>
1000bb88:	8988b03a 	or	r4,r17,r6
1000bb8c:	20001626 	beq	r4,zero,1000bbe8 <__divdf3+0x2cc>
1000bb90:	88012826 	beq	r17,zero,1000c034 <__divdf3+0x718>
1000bb94:	8809883a 	mov	r4,r17
1000bb98:	d9800215 	stw	r6,8(sp)
1000bb9c:	da400315 	stw	r9,12(sp)
1000bba0:	da800415 	stw	r10,16(sp)
1000bba4:	000d7780 	call	1000d778 <__clzsi2>
1000bba8:	d9800217 	ldw	r6,8(sp)
1000bbac:	da400317 	ldw	r9,12(sp)
1000bbb0:	da800417 	ldw	r10,16(sp)
1000bbb4:	010009c4 	movi	r4,39
1000bbb8:	20811a16 	blt	r4,r2,1000c024 <__divdf3+0x708>
1000bbbc:	01000a04 	movi	r4,40
1000bbc0:	14bffe04 	addi	r18,r2,-8
1000bbc4:	2089c83a 	sub	r4,r4,r2
1000bbc8:	8ca2983a 	sll	r17,r17,r18
1000bbcc:	3108d83a 	srl	r4,r6,r4
1000bbd0:	34a4983a 	sll	r18,r6,r18
1000bbd4:	2462b03a 	or	r17,r4,r17
1000bbd8:	013f0344 	movi	r4,-1011
1000bbdc:	2085c83a 	sub	r2,r4,r2
1000bbe0:	000f883a 	mov	r7,zero
1000bbe4:	003f7e06 	br	1000b9e0 <__alt_data_end+0xf800b9e0>
1000bbe8:	0023883a 	mov	r17,zero
1000bbec:	0025883a 	mov	r18,zero
1000bbf0:	01c00044 	movi	r7,1
1000bbf4:	003f7a06 	br	1000b9e0 <__alt_data_end+0xf800b9e0>
1000bbf8:	01c000c4 	movi	r7,3
1000bbfc:	003f7806 	br	1000b9e0 <__alt_data_end+0xf800b9e0>
1000bc00:	05400104 	movi	r21,4
1000bc04:	0027883a 	mov	r19,zero
1000bc08:	0021883a 	mov	r16,zero
1000bc0c:	02400044 	movi	r9,1
1000bc10:	003f6106 	br	1000b998 <__alt_data_end+0xf800b998>
1000bc14:	05400304 	movi	r21,12
1000bc18:	024000c4 	movi	r9,3
1000bc1c:	003f5e06 	br	1000b998 <__alt_data_end+0xf800b998>
1000bc20:	0011883a 	mov	r8,zero
1000bc24:	04c00434 	movhi	r19,16
1000bc28:	9cffffc4 	addi	r19,r19,-1
1000bc2c:	043fffc4 	movi	r16,-1
1000bc30:	0081ffc4 	movi	r2,2047
1000bc34:	003fa206 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000bc38:	0005883a 	mov	r2,zero
1000bc3c:	0027883a 	mov	r19,zero
1000bc40:	0021883a 	mov	r16,zero
1000bc44:	003f9e06 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000bc48:	a085c83a 	sub	r2,r20,r2
1000bc4c:	d8800115 	stw	r2,4(sp)
1000bc50:	8cc11b36 	bltu	r17,r19,1000c0c0 <__divdf3+0x7a4>
1000bc54:	9c411926 	beq	r19,r17,1000c0bc <__divdf3+0x7a0>
1000bc58:	d8c00117 	ldw	r3,4(sp)
1000bc5c:	002d883a 	mov	r22,zero
1000bc60:	18ffffc4 	addi	r3,r3,-1
1000bc64:	d8c00115 	stw	r3,4(sp)
1000bc68:	9006d63a 	srli	r3,r18,24
1000bc6c:	8822923a 	slli	r17,r17,8
1000bc70:	9024923a 	slli	r18,r18,8
1000bc74:	9809883a 	mov	r4,r19
1000bc78:	1c6eb03a 	or	r23,r3,r17
1000bc7c:	b828d43a 	srli	r20,r23,16
1000bc80:	dc800015 	stw	r18,0(sp)
1000bc84:	bcbfffcc 	andi	r18,r23,65535
1000bc88:	a00b883a 	mov	r5,r20
1000bc8c:	000b0680 	call	1000b068 <__udivsi3>
1000bc90:	1009883a 	mov	r4,r2
1000bc94:	900b883a 	mov	r5,r18
1000bc98:	1039883a 	mov	fp,r2
1000bc9c:	000b0780 	call	1000b078 <__mulsi3>
1000bca0:	9809883a 	mov	r4,r19
1000bca4:	a00b883a 	mov	r5,r20
1000bca8:	1023883a 	mov	r17,r2
1000bcac:	000b0700 	call	1000b070 <__umodsi3>
1000bcb0:	1004943a 	slli	r2,r2,16
1000bcb4:	8008d43a 	srli	r4,r16,16
1000bcb8:	110ab03a 	or	r5,r2,r4
1000bcbc:	2c40062e 	bgeu	r5,r17,1000bcd8 <__divdf3+0x3bc>
1000bcc0:	2dcb883a 	add	r5,r5,r23
1000bcc4:	e0bfffc4 	addi	r2,fp,-1
1000bcc8:	2dc11136 	bltu	r5,r23,1000c110 <__divdf3+0x7f4>
1000bccc:	2c41102e 	bgeu	r5,r17,1000c110 <__divdf3+0x7f4>
1000bcd0:	e73fff84 	addi	fp,fp,-2
1000bcd4:	2dcb883a 	add	r5,r5,r23
1000bcd8:	2c67c83a 	sub	r19,r5,r17
1000bcdc:	9809883a 	mov	r4,r19
1000bce0:	a00b883a 	mov	r5,r20
1000bce4:	000b0680 	call	1000b068 <__udivsi3>
1000bce8:	1009883a 	mov	r4,r2
1000bcec:	900b883a 	mov	r5,r18
1000bcf0:	1023883a 	mov	r17,r2
1000bcf4:	000b0780 	call	1000b078 <__mulsi3>
1000bcf8:	9809883a 	mov	r4,r19
1000bcfc:	a00b883a 	mov	r5,r20
1000bd00:	d8800215 	stw	r2,8(sp)
1000bd04:	000b0700 	call	1000b070 <__umodsi3>
1000bd08:	1004943a 	slli	r2,r2,16
1000bd0c:	da000217 	ldw	r8,8(sp)
1000bd10:	843fffcc 	andi	r16,r16,65535
1000bd14:	140eb03a 	or	r7,r2,r16
1000bd18:	3a00062e 	bgeu	r7,r8,1000bd34 <__divdf3+0x418>
1000bd1c:	3dcf883a 	add	r7,r7,r23
1000bd20:	88bfffc4 	addi	r2,r17,-1
1000bd24:	3dc0f836 	bltu	r7,r23,1000c108 <__divdf3+0x7ec>
1000bd28:	3a00f72e 	bgeu	r7,r8,1000c108 <__divdf3+0x7ec>
1000bd2c:	8c7fff84 	addi	r17,r17,-2
1000bd30:	3dcf883a 	add	r7,r7,r23
1000bd34:	e004943a 	slli	r2,fp,16
1000bd38:	d8c00017 	ldw	r3,0(sp)
1000bd3c:	3a0fc83a 	sub	r7,r7,r8
1000bd40:	88a2b03a 	or	r17,r17,r2
1000bd44:	1f3fffcc 	andi	fp,r3,65535
1000bd48:	8a7fffcc 	andi	r9,r17,65535
1000bd4c:	4809883a 	mov	r4,r9
1000bd50:	e00b883a 	mov	r5,fp
1000bd54:	1826d43a 	srli	r19,r3,16
1000bd58:	d9c00515 	stw	r7,20(sp)
1000bd5c:	da400315 	stw	r9,12(sp)
1000bd60:	000b0780 	call	1000b078 <__mulsi3>
1000bd64:	da400317 	ldw	r9,12(sp)
1000bd68:	8820d43a 	srli	r16,r17,16
1000bd6c:	980b883a 	mov	r5,r19
1000bd70:	4809883a 	mov	r4,r9
1000bd74:	d8800215 	stw	r2,8(sp)
1000bd78:	000b0780 	call	1000b078 <__mulsi3>
1000bd7c:	8009883a 	mov	r4,r16
1000bd80:	e00b883a 	mov	r5,fp
1000bd84:	d8800415 	stw	r2,16(sp)
1000bd88:	000b0780 	call	1000b078 <__mulsi3>
1000bd8c:	8009883a 	mov	r4,r16
1000bd90:	980b883a 	mov	r5,r19
1000bd94:	d8800315 	stw	r2,12(sp)
1000bd98:	000b0780 	call	1000b078 <__mulsi3>
1000bd9c:	da000217 	ldw	r8,8(sp)
1000bda0:	da400317 	ldw	r9,12(sp)
1000bda4:	da800417 	ldw	r10,16(sp)
1000bda8:	100b883a 	mov	r5,r2
1000bdac:	4004d43a 	srli	r2,r8,16
1000bdb0:	4a89883a 	add	r4,r9,r10
1000bdb4:	d9c00517 	ldw	r7,20(sp)
1000bdb8:	2089883a 	add	r4,r4,r2
1000bdbc:	2240022e 	bgeu	r4,r9,1000bdc8 <__divdf3+0x4ac>
1000bdc0:	00800074 	movhi	r2,1
1000bdc4:	288b883a 	add	r5,r5,r2
1000bdc8:	2004d43a 	srli	r2,r4,16
1000bdcc:	2020943a 	slli	r16,r4,16
1000bdd0:	423fffcc 	andi	r8,r8,65535
1000bdd4:	288b883a 	add	r5,r5,r2
1000bdd8:	8221883a 	add	r16,r16,r8
1000bddc:	3940ab36 	bltu	r7,r5,1000c08c <__divdf3+0x770>
1000bde0:	3940a926 	beq	r7,r5,1000c088 <__divdf3+0x76c>
1000bde4:	394bc83a 	sub	r5,r7,r5
1000bde8:	b421c83a 	sub	r16,r22,r16
1000bdec:	b42d803a 	cmpltu	r22,r22,r16
1000bdf0:	2dadc83a 	sub	r22,r5,r22
1000bdf4:	b5c0da26 	beq	r22,r23,1000c160 <__divdf3+0x844>
1000bdf8:	b009883a 	mov	r4,r22
1000bdfc:	a00b883a 	mov	r5,r20
1000be00:	000b0680 	call	1000b068 <__udivsi3>
1000be04:	1009883a 	mov	r4,r2
1000be08:	900b883a 	mov	r5,r18
1000be0c:	d8800215 	stw	r2,8(sp)
1000be10:	000b0780 	call	1000b078 <__mulsi3>
1000be14:	b009883a 	mov	r4,r22
1000be18:	a00b883a 	mov	r5,r20
1000be1c:	d8800515 	stw	r2,20(sp)
1000be20:	000b0700 	call	1000b070 <__umodsi3>
1000be24:	1004943a 	slli	r2,r2,16
1000be28:	8008d43a 	srli	r4,r16,16
1000be2c:	d9c00517 	ldw	r7,20(sp)
1000be30:	da000217 	ldw	r8,8(sp)
1000be34:	110ab03a 	or	r5,r2,r4
1000be38:	29c0062e 	bgeu	r5,r7,1000be54 <__divdf3+0x538>
1000be3c:	2dcb883a 	add	r5,r5,r23
1000be40:	40bfffc4 	addi	r2,r8,-1
1000be44:	2dc0ca36 	bltu	r5,r23,1000c170 <__divdf3+0x854>
1000be48:	29c0c92e 	bgeu	r5,r7,1000c170 <__divdf3+0x854>
1000be4c:	423fff84 	addi	r8,r8,-2
1000be50:	2dcb883a 	add	r5,r5,r23
1000be54:	29cfc83a 	sub	r7,r5,r7
1000be58:	3809883a 	mov	r4,r7
1000be5c:	a00b883a 	mov	r5,r20
1000be60:	da000215 	stw	r8,8(sp)
1000be64:	d9c00515 	stw	r7,20(sp)
1000be68:	000b0680 	call	1000b068 <__udivsi3>
1000be6c:	900b883a 	mov	r5,r18
1000be70:	1009883a 	mov	r4,r2
1000be74:	102d883a 	mov	r22,r2
1000be78:	000b0780 	call	1000b078 <__mulsi3>
1000be7c:	d9c00517 	ldw	r7,20(sp)
1000be80:	a00b883a 	mov	r5,r20
1000be84:	1025883a 	mov	r18,r2
1000be88:	3809883a 	mov	r4,r7
1000be8c:	000b0700 	call	1000b070 <__umodsi3>
1000be90:	1004943a 	slli	r2,r2,16
1000be94:	843fffcc 	andi	r16,r16,65535
1000be98:	da000217 	ldw	r8,8(sp)
1000be9c:	140eb03a 	or	r7,r2,r16
1000bea0:	3c80062e 	bgeu	r7,r18,1000bebc <__divdf3+0x5a0>
1000bea4:	3dcf883a 	add	r7,r7,r23
1000bea8:	b0bfffc4 	addi	r2,r22,-1
1000beac:	3dc0ae36 	bltu	r7,r23,1000c168 <__divdf3+0x84c>
1000beb0:	3c80ad2e 	bgeu	r7,r18,1000c168 <__divdf3+0x84c>
1000beb4:	b5bfff84 	addi	r22,r22,-2
1000beb8:	3dcf883a 	add	r7,r7,r23
1000bebc:	4010943a 	slli	r8,r8,16
1000bec0:	3ca9c83a 	sub	r20,r7,r18
1000bec4:	e00b883a 	mov	r5,fp
1000bec8:	b224b03a 	or	r18,r22,r8
1000becc:	91ffffcc 	andi	r7,r18,65535
1000bed0:	3809883a 	mov	r4,r7
1000bed4:	d9c00515 	stw	r7,20(sp)
1000bed8:	000b0780 	call	1000b078 <__mulsi3>
1000bedc:	d9c00517 	ldw	r7,20(sp)
1000bee0:	9020d43a 	srli	r16,r18,16
1000bee4:	980b883a 	mov	r5,r19
1000bee8:	3809883a 	mov	r4,r7
1000beec:	102d883a 	mov	r22,r2
1000bef0:	000b0780 	call	1000b078 <__mulsi3>
1000bef4:	e00b883a 	mov	r5,fp
1000bef8:	8009883a 	mov	r4,r16
1000befc:	d8800515 	stw	r2,20(sp)
1000bf00:	000b0780 	call	1000b078 <__mulsi3>
1000bf04:	8009883a 	mov	r4,r16
1000bf08:	980b883a 	mov	r5,r19
1000bf0c:	1039883a 	mov	fp,r2
1000bf10:	000b0780 	call	1000b078 <__mulsi3>
1000bf14:	d9c00517 	ldw	r7,20(sp)
1000bf18:	100b883a 	mov	r5,r2
1000bf1c:	b004d43a 	srli	r2,r22,16
1000bf20:	e1c9883a 	add	r4,fp,r7
1000bf24:	2089883a 	add	r4,r4,r2
1000bf28:	2700022e 	bgeu	r4,fp,1000bf34 <__divdf3+0x618>
1000bf2c:	00800074 	movhi	r2,1
1000bf30:	288b883a 	add	r5,r5,r2
1000bf34:	2004d43a 	srli	r2,r4,16
1000bf38:	2008943a 	slli	r4,r4,16
1000bf3c:	b5bfffcc 	andi	r22,r22,65535
1000bf40:	288b883a 	add	r5,r5,r2
1000bf44:	25ad883a 	add	r22,r4,r22
1000bf48:	a140632e 	bgeu	r20,r5,1000c0d8 <__divdf3+0x7bc>
1000bf4c:	a5e9883a 	add	r20,r20,r23
1000bf50:	90bfffc4 	addi	r2,r18,-1
1000bf54:	a5c0702e 	bgeu	r20,r23,1000c118 <__divdf3+0x7fc>
1000bf58:	1025883a 	mov	r18,r2
1000bf5c:	a1406126 	beq	r20,r5,1000c0e4 <__divdf3+0x7c8>
1000bf60:	94800054 	ori	r18,r18,1
1000bf64:	d8c00117 	ldw	r3,4(sp)
1000bf68:	1880ffc4 	addi	r2,r3,1023
1000bf6c:	0080720e 	bge	zero,r2,1000c138 <__divdf3+0x81c>
1000bf70:	90c001cc 	andi	r3,r18,7
1000bf74:	18000726 	beq	r3,zero,1000bf94 <__divdf3+0x678>
1000bf78:	910003cc 	andi	r4,r18,15
1000bf7c:	00c00104 	movi	r3,4
1000bf80:	20c00426 	beq	r4,r3,1000bf94 <__divdf3+0x678>
1000bf84:	90c7883a 	add	r3,r18,r3
1000bf88:	1ca5803a 	cmpltu	r18,r3,r18
1000bf8c:	8ca3883a 	add	r17,r17,r18
1000bf90:	1825883a 	mov	r18,r3
1000bf94:	88c0402c 	andhi	r3,r17,256
1000bf98:	18000526 	beq	r3,zero,1000bfb0 <__divdf3+0x694>
1000bf9c:	d8c00117 	ldw	r3,4(sp)
1000bfa0:	00bfc034 	movhi	r2,65280
1000bfa4:	10bfffc4 	addi	r2,r2,-1
1000bfa8:	88a2703a 	and	r17,r17,r2
1000bfac:	18810004 	addi	r2,r3,1024
1000bfb0:	00c1ff84 	movi	r3,2046
1000bfb4:	18bebe16 	blt	r3,r2,1000bab0 <__alt_data_end+0xf800bab0>
1000bfb8:	8820977a 	slli	r16,r17,29
1000bfbc:	9024d0fa 	srli	r18,r18,3
1000bfc0:	8822927a 	slli	r17,r17,9
1000bfc4:	1081ffcc 	andi	r2,r2,2047
1000bfc8:	84a0b03a 	or	r16,r16,r18
1000bfcc:	8826d33a 	srli	r19,r17,12
1000bfd0:	aa00004c 	andi	r8,r21,1
1000bfd4:	003eba06 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000bfd8:	9880022c 	andhi	r2,r19,8
1000bfdc:	10000a26 	beq	r2,zero,1000c008 <__divdf3+0x6ec>
1000bfe0:	8880022c 	andhi	r2,r17,8
1000bfe4:	1000081e 	bne	r2,zero,1000c008 <__divdf3+0x6ec>
1000bfe8:	00800434 	movhi	r2,16
1000bfec:	10bfffc4 	addi	r2,r2,-1
1000bff0:	8cc00234 	orhi	r19,r17,8
1000bff4:	98a6703a 	and	r19,r19,r2
1000bff8:	b811883a 	mov	r8,r23
1000bffc:	9021883a 	mov	r16,r18
1000c000:	0081ffc4 	movi	r2,2047
1000c004:	003eae06 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000c008:	00800434 	movhi	r2,16
1000c00c:	10bfffc4 	addi	r2,r2,-1
1000c010:	9cc00234 	orhi	r19,r19,8
1000c014:	98a6703a 	and	r19,r19,r2
1000c018:	b011883a 	mov	r8,r22
1000c01c:	0081ffc4 	movi	r2,2047
1000c020:	003ea706 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000c024:	147ff604 	addi	r17,r2,-40
1000c028:	3462983a 	sll	r17,r6,r17
1000c02c:	0025883a 	mov	r18,zero
1000c030:	003ee906 	br	1000bbd8 <__alt_data_end+0xf800bbd8>
1000c034:	3009883a 	mov	r4,r6
1000c038:	d9800215 	stw	r6,8(sp)
1000c03c:	da400315 	stw	r9,12(sp)
1000c040:	da800415 	stw	r10,16(sp)
1000c044:	000d7780 	call	1000d778 <__clzsi2>
1000c048:	10800804 	addi	r2,r2,32
1000c04c:	da800417 	ldw	r10,16(sp)
1000c050:	da400317 	ldw	r9,12(sp)
1000c054:	d9800217 	ldw	r6,8(sp)
1000c058:	003ed606 	br	1000bbb4 <__alt_data_end+0xf800bbb4>
1000c05c:	14fff604 	addi	r19,r2,-40
1000c060:	94e6983a 	sll	r19,r18,r19
1000c064:	0021883a 	mov	r16,zero
1000c068:	003ebc06 	br	1000bb5c <__alt_data_end+0xf800bb5c>
1000c06c:	d9800215 	stw	r6,8(sp)
1000c070:	d9c00515 	stw	r7,20(sp)
1000c074:	000d7780 	call	1000d778 <__clzsi2>
1000c078:	10800804 	addi	r2,r2,32
1000c07c:	d9c00517 	ldw	r7,20(sp)
1000c080:	d9800217 	ldw	r6,8(sp)
1000c084:	003eac06 	br	1000bb38 <__alt_data_end+0xf800bb38>
1000c088:	b400292e 	bgeu	r22,r16,1000c130 <__divdf3+0x814>
1000c08c:	d8c00017 	ldw	r3,0(sp)
1000c090:	b0ed883a 	add	r22,r22,r3
1000c094:	b0c5803a 	cmpltu	r2,r22,r3
1000c098:	15c5883a 	add	r2,r2,r23
1000c09c:	11cf883a 	add	r7,r2,r7
1000c0a0:	88bfffc4 	addi	r2,r17,-1
1000c0a4:	b9c0122e 	bgeu	r23,r7,1000c0f0 <__divdf3+0x7d4>
1000c0a8:	39405036 	bltu	r7,r5,1000c1ec <__divdf3+0x8d0>
1000c0ac:	29c01e26 	beq	r5,r7,1000c128 <__divdf3+0x80c>
1000c0b0:	394bc83a 	sub	r5,r7,r5
1000c0b4:	1023883a 	mov	r17,r2
1000c0b8:	003f4b06 	br	1000bde8 <__alt_data_end+0xf800bde8>
1000c0bc:	943ee62e 	bgeu	r18,r16,1000bc58 <__alt_data_end+0xf800bc58>
1000c0c0:	980497fa 	slli	r2,r19,31
1000c0c4:	8006d07a 	srli	r3,r16,1
1000c0c8:	802c97fa 	slli	r22,r16,31
1000c0cc:	9826d07a 	srli	r19,r19,1
1000c0d0:	18a0b03a 	or	r16,r3,r2
1000c0d4:	003ee406 	br	1000bc68 <__alt_data_end+0xf800bc68>
1000c0d8:	a17fa11e 	bne	r20,r5,1000bf60 <__alt_data_end+0xf800bf60>
1000c0dc:	b03f9b1e 	bne	r22,zero,1000bf4c <__alt_data_end+0xf800bf4c>
1000c0e0:	d8000015 	stw	zero,0(sp)
1000c0e4:	d8c00017 	ldw	r3,0(sp)
1000c0e8:	1dbf9d1e 	bne	r3,r22,1000bf60 <__alt_data_end+0xf800bf60>
1000c0ec:	003f9d06 	br	1000bf64 <__alt_data_end+0xf800bf64>
1000c0f0:	3dffef1e 	bne	r7,r23,1000c0b0 <__alt_data_end+0xf800c0b0>
1000c0f4:	d8c00017 	ldw	r3,0(sp)
1000c0f8:	b0ffeb2e 	bgeu	r22,r3,1000c0a8 <__alt_data_end+0xf800c0a8>
1000c0fc:	b94bc83a 	sub	r5,r23,r5
1000c100:	1023883a 	mov	r17,r2
1000c104:	003f3806 	br	1000bde8 <__alt_data_end+0xf800bde8>
1000c108:	1023883a 	mov	r17,r2
1000c10c:	003f0906 	br	1000bd34 <__alt_data_end+0xf800bd34>
1000c110:	1039883a 	mov	fp,r2
1000c114:	003ef006 	br	1000bcd8 <__alt_data_end+0xf800bcd8>
1000c118:	a1403b36 	bltu	r20,r5,1000c208 <__divdf3+0x8ec>
1000c11c:	2d005826 	beq	r5,r20,1000c280 <__divdf3+0x964>
1000c120:	1025883a 	mov	r18,r2
1000c124:	003f8e06 	br	1000bf60 <__alt_data_end+0xf800bf60>
1000c128:	b4003036 	bltu	r22,r16,1000c1ec <__divdf3+0x8d0>
1000c12c:	1023883a 	mov	r17,r2
1000c130:	000b883a 	mov	r5,zero
1000c134:	003f2c06 	br	1000bde8 <__alt_data_end+0xf800bde8>
1000c138:	d8c00117 	ldw	r3,4(sp)
1000c13c:	00bf0084 	movi	r2,-1022
1000c140:	10c5c83a 	sub	r2,r2,r3
1000c144:	00c00e04 	movi	r3,56
1000c148:	18800d0e 	bge	r3,r2,1000c180 <__divdf3+0x864>
1000c14c:	aa00004c 	andi	r8,r21,1
1000c150:	0005883a 	mov	r2,zero
1000c154:	0027883a 	mov	r19,zero
1000c158:	0021883a 	mov	r16,zero
1000c15c:	003e5806 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000c160:	04bfffc4 	movi	r18,-1
1000c164:	003f7f06 	br	1000bf64 <__alt_data_end+0xf800bf64>
1000c168:	102d883a 	mov	r22,r2
1000c16c:	003f5306 	br	1000bebc <__alt_data_end+0xf800bebc>
1000c170:	1011883a 	mov	r8,r2
1000c174:	003f3706 	br	1000be54 <__alt_data_end+0xf800be54>
1000c178:	502b883a 	mov	r21,r10
1000c17c:	003f7906 	br	1000bf64 <__alt_data_end+0xf800bf64>
1000c180:	00c007c4 	movi	r3,31
1000c184:	18802816 	blt	r3,r2,1000c228 <__divdf3+0x90c>
1000c188:	d9000117 	ldw	r4,4(sp)
1000c18c:	908ad83a 	srl	r5,r18,r2
1000c190:	8884d83a 	srl	r2,r17,r2
1000c194:	20c10784 	addi	r3,r4,1054
1000c198:	88c8983a 	sll	r4,r17,r3
1000c19c:	90c6983a 	sll	r3,r18,r3
1000c1a0:	2908b03a 	or	r4,r5,r4
1000c1a4:	1806c03a 	cmpne	r3,r3,zero
1000c1a8:	20c6b03a 	or	r3,r4,r3
1000c1ac:	190001cc 	andi	r4,r3,7
1000c1b0:	20000726 	beq	r4,zero,1000c1d0 <__divdf3+0x8b4>
1000c1b4:	194003cc 	andi	r5,r3,15
1000c1b8:	01000104 	movi	r4,4
1000c1bc:	29000426 	beq	r5,r4,1000c1d0 <__divdf3+0x8b4>
1000c1c0:	1909883a 	add	r4,r3,r4
1000c1c4:	20c7803a 	cmpltu	r3,r4,r3
1000c1c8:	10c5883a 	add	r2,r2,r3
1000c1cc:	2007883a 	mov	r3,r4
1000c1d0:	1100202c 	andhi	r4,r2,128
1000c1d4:	20002226 	beq	r4,zero,1000c260 <__divdf3+0x944>
1000c1d8:	aa00004c 	andi	r8,r21,1
1000c1dc:	00800044 	movi	r2,1
1000c1e0:	0027883a 	mov	r19,zero
1000c1e4:	0021883a 	mov	r16,zero
1000c1e8:	003e3506 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000c1ec:	d8c00017 	ldw	r3,0(sp)
1000c1f0:	8c7fff84 	addi	r17,r17,-2
1000c1f4:	b0ed883a 	add	r22,r22,r3
1000c1f8:	b0c5803a 	cmpltu	r2,r22,r3
1000c1fc:	15c5883a 	add	r2,r2,r23
1000c200:	11cf883a 	add	r7,r2,r7
1000c204:	003ef706 	br	1000bde4 <__alt_data_end+0xf800bde4>
1000c208:	d8c00017 	ldw	r3,0(sp)
1000c20c:	18c9883a 	add	r4,r3,r3
1000c210:	20c5803a 	cmpltu	r2,r4,r3
1000c214:	15c7883a 	add	r3,r2,r23
1000c218:	a0e9883a 	add	r20,r20,r3
1000c21c:	90bfff84 	addi	r2,r18,-2
1000c220:	d9000015 	stw	r4,0(sp)
1000c224:	003f4c06 	br	1000bf58 <__alt_data_end+0xf800bf58>
1000c228:	d9000117 	ldw	r4,4(sp)
1000c22c:	00fef884 	movi	r3,-1054
1000c230:	1907c83a 	sub	r3,r3,r4
1000c234:	01000804 	movi	r4,32
1000c238:	88c6d83a 	srl	r3,r17,r3
1000c23c:	11001426 	beq	r2,r4,1000c290 <__divdf3+0x974>
1000c240:	d9000117 	ldw	r4,4(sp)
1000c244:	20810f84 	addi	r2,r4,1086
1000c248:	8884983a 	sll	r2,r17,r2
1000c24c:	1484b03a 	or	r2,r2,r18
1000c250:	1004c03a 	cmpne	r2,r2,zero
1000c254:	10c6b03a 	or	r3,r2,r3
1000c258:	0005883a 	mov	r2,zero
1000c25c:	003fd306 	br	1000c1ac <__alt_data_end+0xf800c1ac>
1000c260:	1020977a 	slli	r16,r2,29
1000c264:	1806d0fa 	srli	r3,r3,3
1000c268:	1004927a 	slli	r2,r2,9
1000c26c:	aa00004c 	andi	r8,r21,1
1000c270:	80e0b03a 	or	r16,r16,r3
1000c274:	1026d33a 	srli	r19,r2,12
1000c278:	0005883a 	mov	r2,zero
1000c27c:	003e1006 	br	1000bac0 <__alt_data_end+0xf800bac0>
1000c280:	d8c00017 	ldw	r3,0(sp)
1000c284:	1dbfe036 	bltu	r3,r22,1000c208 <__alt_data_end+0xf800c208>
1000c288:	1025883a 	mov	r18,r2
1000c28c:	003f9506 	br	1000c0e4 <__alt_data_end+0xf800c0e4>
1000c290:	0005883a 	mov	r2,zero
1000c294:	003fed06 	br	1000c24c <__alt_data_end+0xf800c24c>
1000c298:	00800434 	movhi	r2,16
1000c29c:	10bfffc4 	addi	r2,r2,-1
1000c2a0:	8cc00234 	orhi	r19,r17,8
1000c2a4:	98a6703a 	and	r19,r19,r2
1000c2a8:	5011883a 	mov	r8,r10
1000c2ac:	9021883a 	mov	r16,r18
1000c2b0:	0081ffc4 	movi	r2,2047
1000c2b4:	003e0206 	br	1000bac0 <__alt_data_end+0xf800bac0>

1000c2b8 <__eqdf2>:
1000c2b8:	2806d53a 	srli	r3,r5,20
1000c2bc:	3810d53a 	srli	r8,r7,20
1000c2c0:	00800434 	movhi	r2,16
1000c2c4:	10bfffc4 	addi	r2,r2,-1
1000c2c8:	18c1ffcc 	andi	r3,r3,2047
1000c2cc:	0241ffc4 	movi	r9,2047
1000c2d0:	2894703a 	and	r10,r5,r2
1000c2d4:	4201ffcc 	andi	r8,r8,2047
1000c2d8:	3884703a 	and	r2,r7,r2
1000c2dc:	280ad7fa 	srli	r5,r5,31
1000c2e0:	380ed7fa 	srli	r7,r7,31
1000c2e4:	1a400f26 	beq	r3,r9,1000c324 <__eqdf2+0x6c>
1000c2e8:	0241ffc4 	movi	r9,2047
1000c2ec:	42400326 	beq	r8,r9,1000c2fc <__eqdf2+0x44>
1000c2f0:	1a000526 	beq	r3,r8,1000c308 <__eqdf2+0x50>
1000c2f4:	00800044 	movi	r2,1
1000c2f8:	f800283a 	ret
1000c2fc:	1192b03a 	or	r9,r2,r6
1000c300:	483ffc1e 	bne	r9,zero,1000c2f4 <__alt_data_end+0xf800c2f4>
1000c304:	1a3ffb1e 	bne	r3,r8,1000c2f4 <__alt_data_end+0xf800c2f4>
1000c308:	50bffa1e 	bne	r10,r2,1000c2f4 <__alt_data_end+0xf800c2f4>
1000c30c:	21bff91e 	bne	r4,r6,1000c2f4 <__alt_data_end+0xf800c2f4>
1000c310:	29c00826 	beq	r5,r7,1000c334 <__eqdf2+0x7c>
1000c314:	183ff71e 	bne	r3,zero,1000c2f4 <__alt_data_end+0xf800c2f4>
1000c318:	5104b03a 	or	r2,r10,r4
1000c31c:	1004c03a 	cmpne	r2,r2,zero
1000c320:	f800283a 	ret
1000c324:	5112b03a 	or	r9,r10,r4
1000c328:	483fef26 	beq	r9,zero,1000c2e8 <__alt_data_end+0xf800c2e8>
1000c32c:	00800044 	movi	r2,1
1000c330:	f800283a 	ret
1000c334:	0005883a 	mov	r2,zero
1000c338:	f800283a 	ret

1000c33c <__gedf2>:
1000c33c:	2804d53a 	srli	r2,r5,20
1000c340:	3810d53a 	srli	r8,r7,20
1000c344:	00c00434 	movhi	r3,16
1000c348:	18ffffc4 	addi	r3,r3,-1
1000c34c:	1081ffcc 	andi	r2,r2,2047
1000c350:	0241ffc4 	movi	r9,2047
1000c354:	28d4703a 	and	r10,r5,r3
1000c358:	4201ffcc 	andi	r8,r8,2047
1000c35c:	38c6703a 	and	r3,r7,r3
1000c360:	280ad7fa 	srli	r5,r5,31
1000c364:	380ed7fa 	srli	r7,r7,31
1000c368:	12401b26 	beq	r2,r9,1000c3d8 <__gedf2+0x9c>
1000c36c:	0241ffc4 	movi	r9,2047
1000c370:	42400926 	beq	r8,r9,1000c398 <__gedf2+0x5c>
1000c374:	10000c1e 	bne	r2,zero,1000c3a8 <__gedf2+0x6c>
1000c378:	5112b03a 	or	r9,r10,r4
1000c37c:	4813003a 	cmpeq	r9,r9,zero
1000c380:	4817883a 	mov	r11,r9
1000c384:	40000a26 	beq	r8,zero,1000c3b0 <__gedf2+0x74>
1000c388:	48001626 	beq	r9,zero,1000c3e4 <__gedf2+0xa8>
1000c38c:	38000d1e 	bne	r7,zero,1000c3c4 <__gedf2+0x88>
1000c390:	00bfffc4 	movi	r2,-1
1000c394:	f800283a 	ret
1000c398:	1992b03a 	or	r9,r3,r6
1000c39c:	483ff526 	beq	r9,zero,1000c374 <__alt_data_end+0xf800c374>
1000c3a0:	00bfff84 	movi	r2,-2
1000c3a4:	f800283a 	ret
1000c3a8:	40000e1e 	bne	r8,zero,1000c3e4 <__gedf2+0xa8>
1000c3ac:	0017883a 	mov	r11,zero
1000c3b0:	1992b03a 	or	r9,r3,r6
1000c3b4:	4813003a 	cmpeq	r9,r9,zero
1000c3b8:	5800041e 	bne	r11,zero,1000c3cc <__gedf2+0x90>
1000c3bc:	48000926 	beq	r9,zero,1000c3e4 <__gedf2+0xa8>
1000c3c0:	283ff31e 	bne	r5,zero,1000c390 <__alt_data_end+0xf800c390>
1000c3c4:	00800044 	movi	r2,1
1000c3c8:	f800283a 	ret
1000c3cc:	483fef26 	beq	r9,zero,1000c38c <__alt_data_end+0xf800c38c>
1000c3d0:	0005883a 	mov	r2,zero
1000c3d4:	f800283a 	ret
1000c3d8:	5112b03a 	or	r9,r10,r4
1000c3dc:	483fe326 	beq	r9,zero,1000c36c <__alt_data_end+0xf800c36c>
1000c3e0:	003fef06 	br	1000c3a0 <__alt_data_end+0xf800c3a0>
1000c3e4:	29fff61e 	bne	r5,r7,1000c3c0 <__alt_data_end+0xf800c3c0>
1000c3e8:	40bff516 	blt	r8,r2,1000c3c0 <__alt_data_end+0xf800c3c0>
1000c3ec:	12000316 	blt	r2,r8,1000c3fc <__gedf2+0xc0>
1000c3f0:	1abff336 	bltu	r3,r10,1000c3c0 <__alt_data_end+0xf800c3c0>
1000c3f4:	50c00326 	beq	r10,r3,1000c404 <__gedf2+0xc8>
1000c3f8:	50fff52e 	bgeu	r10,r3,1000c3d0 <__alt_data_end+0xf800c3d0>
1000c3fc:	283fe426 	beq	r5,zero,1000c390 <__alt_data_end+0xf800c390>
1000c400:	003ff006 	br	1000c3c4 <__alt_data_end+0xf800c3c4>
1000c404:	313fee36 	bltu	r6,r4,1000c3c0 <__alt_data_end+0xf800c3c0>
1000c408:	21bff12e 	bgeu	r4,r6,1000c3d0 <__alt_data_end+0xf800c3d0>
1000c40c:	283fe026 	beq	r5,zero,1000c390 <__alt_data_end+0xf800c390>
1000c410:	003fec06 	br	1000c3c4 <__alt_data_end+0xf800c3c4>

1000c414 <__ledf2>:
1000c414:	2806d53a 	srli	r3,r5,20
1000c418:	3810d53a 	srli	r8,r7,20
1000c41c:	00800434 	movhi	r2,16
1000c420:	10bfffc4 	addi	r2,r2,-1
1000c424:	18c1ffcc 	andi	r3,r3,2047
1000c428:	0241ffc4 	movi	r9,2047
1000c42c:	2894703a 	and	r10,r5,r2
1000c430:	4201ffcc 	andi	r8,r8,2047
1000c434:	3884703a 	and	r2,r7,r2
1000c438:	280ad7fa 	srli	r5,r5,31
1000c43c:	380ed7fa 	srli	r7,r7,31
1000c440:	1a402026 	beq	r3,r9,1000c4c4 <__ledf2+0xb0>
1000c444:	0241ffc4 	movi	r9,2047
1000c448:	42401726 	beq	r8,r9,1000c4a8 <__ledf2+0x94>
1000c44c:	18000b26 	beq	r3,zero,1000c47c <__ledf2+0x68>
1000c450:	29403fcc 	andi	r5,r5,255
1000c454:	39c03fcc 	andi	r7,r7,255
1000c458:	40000f1e 	bne	r8,zero,1000c498 <__ledf2+0x84>
1000c45c:	0017883a 	mov	r11,zero
1000c460:	1192b03a 	or	r9,r2,r6
1000c464:	4813003a 	cmpeq	r9,r9,zero
1000c468:	58001326 	beq	r11,zero,1000c4b8 <__ledf2+0xa4>
1000c46c:	48001e1e 	bne	r9,zero,1000c4e8 <__ledf2+0xd4>
1000c470:	38000b1e 	bne	r7,zero,1000c4a0 <__ledf2+0x8c>
1000c474:	00bfffc4 	movi	r2,-1
1000c478:	f800283a 	ret
1000c47c:	5112b03a 	or	r9,r10,r4
1000c480:	4813003a 	cmpeq	r9,r9,zero
1000c484:	4817883a 	mov	r11,r9
1000c488:	29403fcc 	andi	r5,r5,255
1000c48c:	39c03fcc 	andi	r7,r7,255
1000c490:	403ff326 	beq	r8,zero,1000c460 <__alt_data_end+0xf800c460>
1000c494:	483ff61e 	bne	r9,zero,1000c470 <__alt_data_end+0xf800c470>
1000c498:	29c00e26 	beq	r5,r7,1000c4d4 <__ledf2+0xc0>
1000c49c:	283ff51e 	bne	r5,zero,1000c474 <__alt_data_end+0xf800c474>
1000c4a0:	00800044 	movi	r2,1
1000c4a4:	f800283a 	ret
1000c4a8:	1192b03a 	or	r9,r2,r6
1000c4ac:	483fe726 	beq	r9,zero,1000c44c <__alt_data_end+0xf800c44c>
1000c4b0:	00800084 	movi	r2,2
1000c4b4:	f800283a 	ret
1000c4b8:	483ff726 	beq	r9,zero,1000c498 <__alt_data_end+0xf800c498>
1000c4bc:	283ff826 	beq	r5,zero,1000c4a0 <__alt_data_end+0xf800c4a0>
1000c4c0:	003fec06 	br	1000c474 <__alt_data_end+0xf800c474>
1000c4c4:	5112b03a 	or	r9,r10,r4
1000c4c8:	483fde26 	beq	r9,zero,1000c444 <__alt_data_end+0xf800c444>
1000c4cc:	00800084 	movi	r2,2
1000c4d0:	f800283a 	ret
1000c4d4:	40fff116 	blt	r8,r3,1000c49c <__alt_data_end+0xf800c49c>
1000c4d8:	1a000716 	blt	r3,r8,1000c4f8 <__ledf2+0xe4>
1000c4dc:	12bfef36 	bltu	r2,r10,1000c49c <__alt_data_end+0xf800c49c>
1000c4e0:	50800326 	beq	r10,r2,1000c4f0 <__ledf2+0xdc>
1000c4e4:	50800436 	bltu	r10,r2,1000c4f8 <__ledf2+0xe4>
1000c4e8:	0005883a 	mov	r2,zero
1000c4ec:	f800283a 	ret
1000c4f0:	313fea36 	bltu	r6,r4,1000c49c <__alt_data_end+0xf800c49c>
1000c4f4:	21bffc2e 	bgeu	r4,r6,1000c4e8 <__alt_data_end+0xf800c4e8>
1000c4f8:	283fde26 	beq	r5,zero,1000c474 <__alt_data_end+0xf800c474>
1000c4fc:	003fe806 	br	1000c4a0 <__alt_data_end+0xf800c4a0>

1000c500 <__muldf3>:
1000c500:	deffee04 	addi	sp,sp,-72
1000c504:	dc400915 	stw	r17,36(sp)
1000c508:	2822d53a 	srli	r17,r5,20
1000c50c:	dc000815 	stw	r16,32(sp)
1000c510:	2820d7fa 	srli	r16,r5,31
1000c514:	df001015 	stw	fp,64(sp)
1000c518:	dd000c15 	stw	r20,48(sp)
1000c51c:	dcc00b15 	stw	r19,44(sp)
1000c520:	dfc01115 	stw	ra,68(sp)
1000c524:	04c00434 	movhi	r19,16
1000c528:	9cffffc4 	addi	r19,r19,-1
1000c52c:	ddc00f15 	stw	r23,60(sp)
1000c530:	dd800e15 	stw	r22,56(sp)
1000c534:	dd400d15 	stw	r21,52(sp)
1000c538:	dc800a15 	stw	r18,40(sp)
1000c53c:	8c41ffcc 	andi	r17,r17,2047
1000c540:	2029883a 	mov	r20,r4
1000c544:	2ce6703a 	and	r19,r5,r19
1000c548:	8039883a 	mov	fp,r16
1000c54c:	82003fcc 	andi	r8,r16,255
1000c550:	88005d26 	beq	r17,zero,1000c6c8 <__muldf3+0x1c8>
1000c554:	0081ffc4 	movi	r2,2047
1000c558:	202f883a 	mov	r23,r4
1000c55c:	88803326 	beq	r17,r2,1000c62c <__muldf3+0x12c>
1000c560:	98800434 	orhi	r2,r19,16
1000c564:	100490fa 	slli	r2,r2,3
1000c568:	2026d77a 	srli	r19,r4,29
1000c56c:	202e90fa 	slli	r23,r4,3
1000c570:	8c7f0044 	addi	r17,r17,-1023
1000c574:	14e6b03a 	or	r19,r2,r19
1000c578:	002d883a 	mov	r22,zero
1000c57c:	000b883a 	mov	r5,zero
1000c580:	3804d53a 	srli	r2,r7,20
1000c584:	3828d7fa 	srli	r20,r7,31
1000c588:	04800434 	movhi	r18,16
1000c58c:	94bfffc4 	addi	r18,r18,-1
1000c590:	1081ffcc 	andi	r2,r2,2047
1000c594:	302b883a 	mov	r21,r6
1000c598:	3ca4703a 	and	r18,r7,r18
1000c59c:	a2403fcc 	andi	r9,r20,255
1000c5a0:	10006826 	beq	r2,zero,1000c744 <__muldf3+0x244>
1000c5a4:	00c1ffc4 	movi	r3,2047
1000c5a8:	10c06026 	beq	r2,r3,1000c72c <__muldf3+0x22c>
1000c5ac:	90c00434 	orhi	r3,r18,16
1000c5b0:	180690fa 	slli	r3,r3,3
1000c5b4:	3024d77a 	srli	r18,r6,29
1000c5b8:	302a90fa 	slli	r21,r6,3
1000c5bc:	10bf0044 	addi	r2,r2,-1023
1000c5c0:	1ca4b03a 	or	r18,r3,r18
1000c5c4:	0007883a 	mov	r3,zero
1000c5c8:	1d88b03a 	or	r4,r3,r22
1000c5cc:	2109883a 	add	r4,r4,r4
1000c5d0:	2109883a 	add	r4,r4,r4
1000c5d4:	01840074 	movhi	r6,4097
1000c5d8:	31b17b04 	addi	r6,r6,-14868
1000c5dc:	2189883a 	add	r4,r4,r6
1000c5e0:	21000017 	ldw	r4,0(r4)
1000c5e4:	852cf03a 	xor	r22,r16,r20
1000c5e8:	2000683a 	jmp	r4
1000c5ec:	1000c834 	orhi	zero,r2,800
1000c5f0:	1000c824 	muli	zero,r2,800
1000c5f4:	1000c824 	muli	zero,r2,800
1000c5f8:	1000c810 	cmplti	zero,r2,800
1000c5fc:	1000c64c 	andi	zero,r2,793
1000c600:	1000c64c 	andi	zero,r2,793
1000c604:	1000c7f8 	rdprs	zero,r2,799
1000c608:	1000c810 	cmplti	zero,r2,800
1000c60c:	1000c64c 	andi	zero,r2,793
1000c610:	1000c7f8 	rdprs	zero,r2,799
1000c614:	1000c64c 	andi	zero,r2,793
1000c618:	1000c810 	cmplti	zero,r2,800
1000c61c:	1000c648 	cmpgei	zero,r2,793
1000c620:	1000c648 	cmpgei	zero,r2,793
1000c624:	1000c648 	cmpgei	zero,r2,793
1000c628:	1000cb4c 	andi	zero,r2,813
1000c62c:	9904b03a 	or	r2,r19,r4
1000c630:	10006e1e 	bne	r2,zero,1000c7ec <__muldf3+0x2ec>
1000c634:	05800204 	movi	r22,8
1000c638:	0027883a 	mov	r19,zero
1000c63c:	002f883a 	mov	r23,zero
1000c640:	01400084 	movi	r5,2
1000c644:	003fce06 	br	1000c580 <__alt_data_end+0xf800c580>
1000c648:	402d883a 	mov	r22,r8
1000c64c:	00800084 	movi	r2,2
1000c650:	28805626 	beq	r5,r2,1000c7ac <__muldf3+0x2ac>
1000c654:	008000c4 	movi	r2,3
1000c658:	2881a226 	beq	r5,r2,1000cce4 <__muldf3+0x7e4>
1000c65c:	00800044 	movi	r2,1
1000c660:	28811d1e 	bne	r5,r2,1000cad8 <__muldf3+0x5d8>
1000c664:	b039883a 	mov	fp,r22
1000c668:	0005883a 	mov	r2,zero
1000c66c:	0027883a 	mov	r19,zero
1000c670:	002f883a 	mov	r23,zero
1000c674:	1004953a 	slli	r2,r2,20
1000c678:	e7003fcc 	andi	fp,fp,255
1000c67c:	e03897fa 	slli	fp,fp,31
1000c680:	00c00434 	movhi	r3,16
1000c684:	18ffffc4 	addi	r3,r3,-1
1000c688:	98e6703a 	and	r19,r19,r3
1000c68c:	9886b03a 	or	r3,r19,r2
1000c690:	1f06b03a 	or	r3,r3,fp
1000c694:	b805883a 	mov	r2,r23
1000c698:	dfc01117 	ldw	ra,68(sp)
1000c69c:	df001017 	ldw	fp,64(sp)
1000c6a0:	ddc00f17 	ldw	r23,60(sp)
1000c6a4:	dd800e17 	ldw	r22,56(sp)
1000c6a8:	dd400d17 	ldw	r21,52(sp)
1000c6ac:	dd000c17 	ldw	r20,48(sp)
1000c6b0:	dcc00b17 	ldw	r19,44(sp)
1000c6b4:	dc800a17 	ldw	r18,40(sp)
1000c6b8:	dc400917 	ldw	r17,36(sp)
1000c6bc:	dc000817 	ldw	r16,32(sp)
1000c6c0:	dec01204 	addi	sp,sp,72
1000c6c4:	f800283a 	ret
1000c6c8:	9904b03a 	or	r2,r19,r4
1000c6cc:	10004226 	beq	r2,zero,1000c7d8 <__muldf3+0x2d8>
1000c6d0:	98013426 	beq	r19,zero,1000cba4 <__muldf3+0x6a4>
1000c6d4:	9809883a 	mov	r4,r19
1000c6d8:	d9800515 	stw	r6,20(sp)
1000c6dc:	d9c00415 	stw	r7,16(sp)
1000c6e0:	da000615 	stw	r8,24(sp)
1000c6e4:	000d7780 	call	1000d778 <__clzsi2>
1000c6e8:	d9800517 	ldw	r6,20(sp)
1000c6ec:	d9c00417 	ldw	r7,16(sp)
1000c6f0:	da000617 	ldw	r8,24(sp)
1000c6f4:	00c009c4 	movi	r3,39
1000c6f8:	18812616 	blt	r3,r2,1000cb94 <__muldf3+0x694>
1000c6fc:	00c00a04 	movi	r3,40
1000c700:	15fffe04 	addi	r23,r2,-8
1000c704:	1887c83a 	sub	r3,r3,r2
1000c708:	9de6983a 	sll	r19,r19,r23
1000c70c:	a0c6d83a 	srl	r3,r20,r3
1000c710:	a5ee983a 	sll	r23,r20,r23
1000c714:	1ce6b03a 	or	r19,r3,r19
1000c718:	047f0344 	movi	r17,-1011
1000c71c:	88a3c83a 	sub	r17,r17,r2
1000c720:	002d883a 	mov	r22,zero
1000c724:	000b883a 	mov	r5,zero
1000c728:	003f9506 	br	1000c580 <__alt_data_end+0xf800c580>
1000c72c:	9186b03a 	or	r3,r18,r6
1000c730:	1800271e 	bne	r3,zero,1000c7d0 <__muldf3+0x2d0>
1000c734:	0025883a 	mov	r18,zero
1000c738:	002b883a 	mov	r21,zero
1000c73c:	00c00084 	movi	r3,2
1000c740:	003fa106 	br	1000c5c8 <__alt_data_end+0xf800c5c8>
1000c744:	9186b03a 	or	r3,r18,r6
1000c748:	18001d26 	beq	r3,zero,1000c7c0 <__muldf3+0x2c0>
1000c74c:	90012226 	beq	r18,zero,1000cbd8 <__muldf3+0x6d8>
1000c750:	9009883a 	mov	r4,r18
1000c754:	d9400415 	stw	r5,16(sp)
1000c758:	d9800515 	stw	r6,20(sp)
1000c75c:	da000615 	stw	r8,24(sp)
1000c760:	da400715 	stw	r9,28(sp)
1000c764:	000d7780 	call	1000d778 <__clzsi2>
1000c768:	d9400417 	ldw	r5,16(sp)
1000c76c:	d9800517 	ldw	r6,20(sp)
1000c770:	da000617 	ldw	r8,24(sp)
1000c774:	da400717 	ldw	r9,28(sp)
1000c778:	00c009c4 	movi	r3,39
1000c77c:	18811216 	blt	r3,r2,1000cbc8 <__muldf3+0x6c8>
1000c780:	01c00a04 	movi	r7,40
1000c784:	157ffe04 	addi	r21,r2,-8
1000c788:	388fc83a 	sub	r7,r7,r2
1000c78c:	9564983a 	sll	r18,r18,r21
1000c790:	31ced83a 	srl	r7,r6,r7
1000c794:	356a983a 	sll	r21,r6,r21
1000c798:	3ca4b03a 	or	r18,r7,r18
1000c79c:	00ff0344 	movi	r3,-1011
1000c7a0:	1885c83a 	sub	r2,r3,r2
1000c7a4:	0007883a 	mov	r3,zero
1000c7a8:	003f8706 	br	1000c5c8 <__alt_data_end+0xf800c5c8>
1000c7ac:	b039883a 	mov	fp,r22
1000c7b0:	0081ffc4 	movi	r2,2047
1000c7b4:	0027883a 	mov	r19,zero
1000c7b8:	002f883a 	mov	r23,zero
1000c7bc:	003fad06 	br	1000c674 <__alt_data_end+0xf800c674>
1000c7c0:	0025883a 	mov	r18,zero
1000c7c4:	002b883a 	mov	r21,zero
1000c7c8:	00c00044 	movi	r3,1
1000c7cc:	003f7e06 	br	1000c5c8 <__alt_data_end+0xf800c5c8>
1000c7d0:	00c000c4 	movi	r3,3
1000c7d4:	003f7c06 	br	1000c5c8 <__alt_data_end+0xf800c5c8>
1000c7d8:	05800104 	movi	r22,4
1000c7dc:	0027883a 	mov	r19,zero
1000c7e0:	002f883a 	mov	r23,zero
1000c7e4:	01400044 	movi	r5,1
1000c7e8:	003f6506 	br	1000c580 <__alt_data_end+0xf800c580>
1000c7ec:	05800304 	movi	r22,12
1000c7f0:	014000c4 	movi	r5,3
1000c7f4:	003f6206 	br	1000c580 <__alt_data_end+0xf800c580>
1000c7f8:	0039883a 	mov	fp,zero
1000c7fc:	04c00434 	movhi	r19,16
1000c800:	9cffffc4 	addi	r19,r19,-1
1000c804:	05ffffc4 	movi	r23,-1
1000c808:	0081ffc4 	movi	r2,2047
1000c80c:	003f9906 	br	1000c674 <__alt_data_end+0xf800c674>
1000c810:	9027883a 	mov	r19,r18
1000c814:	a82f883a 	mov	r23,r21
1000c818:	482d883a 	mov	r22,r9
1000c81c:	180b883a 	mov	r5,r3
1000c820:	003f8a06 	br	1000c64c <__alt_data_end+0xf800c64c>
1000c824:	9027883a 	mov	r19,r18
1000c828:	a82f883a 	mov	r23,r21
1000c82c:	180b883a 	mov	r5,r3
1000c830:	003f8606 	br	1000c64c <__alt_data_end+0xf800c64c>
1000c834:	a828d43a 	srli	r20,r21,16
1000c838:	b820d43a 	srli	r16,r23,16
1000c83c:	ad7fffcc 	andi	r21,r21,65535
1000c840:	bdffffcc 	andi	r23,r23,65535
1000c844:	8885883a 	add	r2,r17,r2
1000c848:	a809883a 	mov	r4,r21
1000c84c:	b80b883a 	mov	r5,r23
1000c850:	d8800015 	stw	r2,0(sp)
1000c854:	000b0780 	call	1000b078 <__mulsi3>
1000c858:	a009883a 	mov	r4,r20
1000c85c:	b80b883a 	mov	r5,r23
1000c860:	d8800415 	stw	r2,16(sp)
1000c864:	000b0780 	call	1000b078 <__mulsi3>
1000c868:	a809883a 	mov	r4,r21
1000c86c:	800b883a 	mov	r5,r16
1000c870:	d8800615 	stw	r2,24(sp)
1000c874:	000b0780 	call	1000b078 <__mulsi3>
1000c878:	a009883a 	mov	r4,r20
1000c87c:	800b883a 	mov	r5,r16
1000c880:	1023883a 	mov	r17,r2
1000c884:	000b0780 	call	1000b078 <__mulsi3>
1000c888:	d9c00417 	ldw	r7,16(sp)
1000c88c:	da000617 	ldw	r8,24(sp)
1000c890:	1039883a 	mov	fp,r2
1000c894:	3804d43a 	srli	r2,r7,16
1000c898:	8a07883a 	add	r3,r17,r8
1000c89c:	1887883a 	add	r3,r3,r2
1000c8a0:	1c40022e 	bgeu	r3,r17,1000c8ac <__muldf3+0x3ac>
1000c8a4:	00800074 	movhi	r2,1
1000c8a8:	e0b9883a 	add	fp,fp,r2
1000c8ac:	1804943a 	slli	r2,r3,16
1000c8b0:	1806d43a 	srli	r3,r3,16
1000c8b4:	9022d43a 	srli	r17,r18,16
1000c8b8:	39ffffcc 	andi	r7,r7,65535
1000c8bc:	94bfffcc 	andi	r18,r18,65535
1000c8c0:	11cf883a 	add	r7,r2,r7
1000c8c4:	b80b883a 	mov	r5,r23
1000c8c8:	9009883a 	mov	r4,r18
1000c8cc:	d8c00215 	stw	r3,8(sp)
1000c8d0:	d9c00315 	stw	r7,12(sp)
1000c8d4:	000b0780 	call	1000b078 <__mulsi3>
1000c8d8:	b80b883a 	mov	r5,r23
1000c8dc:	8809883a 	mov	r4,r17
1000c8e0:	d8800415 	stw	r2,16(sp)
1000c8e4:	000b0780 	call	1000b078 <__mulsi3>
1000c8e8:	9009883a 	mov	r4,r18
1000c8ec:	800b883a 	mov	r5,r16
1000c8f0:	d8800715 	stw	r2,28(sp)
1000c8f4:	000b0780 	call	1000b078 <__mulsi3>
1000c8f8:	8809883a 	mov	r4,r17
1000c8fc:	800b883a 	mov	r5,r16
1000c900:	102f883a 	mov	r23,r2
1000c904:	000b0780 	call	1000b078 <__mulsi3>
1000c908:	d9c00417 	ldw	r7,16(sp)
1000c90c:	da400717 	ldw	r9,28(sp)
1000c910:	1011883a 	mov	r8,r2
1000c914:	3804d43a 	srli	r2,r7,16
1000c918:	ba47883a 	add	r3,r23,r9
1000c91c:	1887883a 	add	r3,r3,r2
1000c920:	1dc0022e 	bgeu	r3,r23,1000c92c <__muldf3+0x42c>
1000c924:	00800074 	movhi	r2,1
1000c928:	4091883a 	add	r8,r8,r2
1000c92c:	1804d43a 	srli	r2,r3,16
1000c930:	182e943a 	slli	r23,r3,16
1000c934:	9820d43a 	srli	r16,r19,16
1000c938:	9cffffcc 	andi	r19,r19,65535
1000c93c:	39ffffcc 	andi	r7,r7,65535
1000c940:	4085883a 	add	r2,r8,r2
1000c944:	a809883a 	mov	r4,r21
1000c948:	980b883a 	mov	r5,r19
1000c94c:	b9ef883a 	add	r23,r23,r7
1000c950:	d8800115 	stw	r2,4(sp)
1000c954:	000b0780 	call	1000b078 <__mulsi3>
1000c958:	a009883a 	mov	r4,r20
1000c95c:	980b883a 	mov	r5,r19
1000c960:	d8800415 	stw	r2,16(sp)
1000c964:	000b0780 	call	1000b078 <__mulsi3>
1000c968:	a809883a 	mov	r4,r21
1000c96c:	800b883a 	mov	r5,r16
1000c970:	d8800715 	stw	r2,28(sp)
1000c974:	000b0780 	call	1000b078 <__mulsi3>
1000c978:	a009883a 	mov	r4,r20
1000c97c:	800b883a 	mov	r5,r16
1000c980:	102b883a 	mov	r21,r2
1000c984:	000b0780 	call	1000b078 <__mulsi3>
1000c988:	d9c00417 	ldw	r7,16(sp)
1000c98c:	da400717 	ldw	r9,28(sp)
1000c990:	1011883a 	mov	r8,r2
1000c994:	3804d43a 	srli	r2,r7,16
1000c998:	aa47883a 	add	r3,r21,r9
1000c99c:	1887883a 	add	r3,r3,r2
1000c9a0:	1d40022e 	bgeu	r3,r21,1000c9ac <__muldf3+0x4ac>
1000c9a4:	00800074 	movhi	r2,1
1000c9a8:	4091883a 	add	r8,r8,r2
1000c9ac:	1828d43a 	srli	r20,r3,16
1000c9b0:	1806943a 	slli	r3,r3,16
1000c9b4:	39ffffcc 	andi	r7,r7,65535
1000c9b8:	9009883a 	mov	r4,r18
1000c9bc:	980b883a 	mov	r5,r19
1000c9c0:	19eb883a 	add	r21,r3,r7
1000c9c4:	4529883a 	add	r20,r8,r20
1000c9c8:	000b0780 	call	1000b078 <__mulsi3>
1000c9cc:	980b883a 	mov	r5,r19
1000c9d0:	8809883a 	mov	r4,r17
1000c9d4:	d8800415 	stw	r2,16(sp)
1000c9d8:	000b0780 	call	1000b078 <__mulsi3>
1000c9dc:	9009883a 	mov	r4,r18
1000c9e0:	800b883a 	mov	r5,r16
1000c9e4:	1027883a 	mov	r19,r2
1000c9e8:	000b0780 	call	1000b078 <__mulsi3>
1000c9ec:	8809883a 	mov	r4,r17
1000c9f0:	800b883a 	mov	r5,r16
1000c9f4:	1025883a 	mov	r18,r2
1000c9f8:	000b0780 	call	1000b078 <__mulsi3>
1000c9fc:	d9c00417 	ldw	r7,16(sp)
1000ca00:	1011883a 	mov	r8,r2
1000ca04:	94c7883a 	add	r3,r18,r19
1000ca08:	3804d43a 	srli	r2,r7,16
1000ca0c:	1887883a 	add	r3,r3,r2
1000ca10:	1c80022e 	bgeu	r3,r18,1000ca1c <__muldf3+0x51c>
1000ca14:	00800074 	movhi	r2,1
1000ca18:	4091883a 	add	r8,r8,r2
1000ca1c:	1804943a 	slli	r2,r3,16
1000ca20:	d9400217 	ldw	r5,8(sp)
1000ca24:	39ffffcc 	andi	r7,r7,65535
1000ca28:	11cf883a 	add	r7,r2,r7
1000ca2c:	d8800117 	ldw	r2,4(sp)
1000ca30:	b949883a 	add	r4,r23,r5
1000ca34:	2739883a 	add	fp,r4,fp
1000ca38:	e5ef803a 	cmpltu	r23,fp,r23
1000ca3c:	388f883a 	add	r7,r7,r2
1000ca40:	3dcb883a 	add	r5,r7,r23
1000ca44:	a149883a 	add	r4,r20,r5
1000ca48:	2def803a 	cmpltu	r23,r5,r23
1000ca4c:	d9400117 	ldw	r5,4(sp)
1000ca50:	e579883a 	add	fp,fp,r21
1000ca54:	e56b803a 	cmpltu	r21,fp,r21
1000ca58:	1804d43a 	srli	r2,r3,16
1000ca5c:	394f803a 	cmpltu	r7,r7,r5
1000ca60:	2547883a 	add	r3,r4,r21
1000ca64:	b9e6b03a 	or	r19,r23,r7
1000ca68:	1d6b803a 	cmpltu	r21,r3,r21
1000ca6c:	2529803a 	cmpltu	r20,r4,r20
1000ca70:	98a7883a 	add	r19,r19,r2
1000ca74:	ad2ab03a 	or	r21,r21,r20
1000ca78:	9d67883a 	add	r19,r19,r21
1000ca7c:	e02e927a 	slli	r23,fp,9
1000ca80:	9a27883a 	add	r19,r19,r8
1000ca84:	d9000317 	ldw	r4,12(sp)
1000ca88:	1804d5fa 	srli	r2,r3,23
1000ca8c:	9826927a 	slli	r19,r19,9
1000ca90:	e038d5fa 	srli	fp,fp,23
1000ca94:	b92eb03a 	or	r23,r23,r4
1000ca98:	1806927a 	slli	r3,r3,9
1000ca9c:	98a6b03a 	or	r19,r19,r2
1000caa0:	b82ec03a 	cmpne	r23,r23,zero
1000caa4:	bf2eb03a 	or	r23,r23,fp
1000caa8:	9880402c 	andhi	r2,r19,256
1000caac:	b8eeb03a 	or	r23,r23,r3
1000cab0:	10000926 	beq	r2,zero,1000cad8 <__muldf3+0x5d8>
1000cab4:	b806d07a 	srli	r3,r23,1
1000cab8:	bdc0004c 	andi	r23,r23,1
1000cabc:	980497fa 	slli	r2,r19,31
1000cac0:	b8eeb03a 	or	r23,r23,r3
1000cac4:	d8c00017 	ldw	r3,0(sp)
1000cac8:	9826d07a 	srli	r19,r19,1
1000cacc:	b8aeb03a 	or	r23,r23,r2
1000cad0:	18c00044 	addi	r3,r3,1
1000cad4:	d8c00015 	stw	r3,0(sp)
1000cad8:	d8c00017 	ldw	r3,0(sp)
1000cadc:	1880ffc4 	addi	r2,r3,1023
1000cae0:	0080490e 	bge	zero,r2,1000cc08 <__muldf3+0x708>
1000cae4:	b8c001cc 	andi	r3,r23,7
1000cae8:	18000726 	beq	r3,zero,1000cb08 <__muldf3+0x608>
1000caec:	b90003cc 	andi	r4,r23,15
1000caf0:	00c00104 	movi	r3,4
1000caf4:	20c00426 	beq	r4,r3,1000cb08 <__muldf3+0x608>
1000caf8:	b8c7883a 	add	r3,r23,r3
1000cafc:	1def803a 	cmpltu	r23,r3,r23
1000cb00:	9de7883a 	add	r19,r19,r23
1000cb04:	182f883a 	mov	r23,r3
1000cb08:	98c0402c 	andhi	r3,r19,256
1000cb0c:	18000526 	beq	r3,zero,1000cb24 <__muldf3+0x624>
1000cb10:	d8c00017 	ldw	r3,0(sp)
1000cb14:	00bfc034 	movhi	r2,65280
1000cb18:	10bfffc4 	addi	r2,r2,-1
1000cb1c:	98a6703a 	and	r19,r19,r2
1000cb20:	18810004 	addi	r2,r3,1024
1000cb24:	00c1ff84 	movi	r3,2046
1000cb28:	18bf2016 	blt	r3,r2,1000c7ac <__alt_data_end+0xf800c7ac>
1000cb2c:	9806977a 	slli	r3,r19,29
1000cb30:	b82ed0fa 	srli	r23,r23,3
1000cb34:	9826927a 	slli	r19,r19,9
1000cb38:	1081ffcc 	andi	r2,r2,2047
1000cb3c:	1deeb03a 	or	r23,r3,r23
1000cb40:	9826d33a 	srli	r19,r19,12
1000cb44:	b039883a 	mov	fp,r22
1000cb48:	003eca06 	br	1000c674 <__alt_data_end+0xf800c674>
1000cb4c:	9880022c 	andhi	r2,r19,8
1000cb50:	10000a26 	beq	r2,zero,1000cb7c <__muldf3+0x67c>
1000cb54:	9080022c 	andhi	r2,r18,8
1000cb58:	1000081e 	bne	r2,zero,1000cb7c <__muldf3+0x67c>
1000cb5c:	00800434 	movhi	r2,16
1000cb60:	10bfffc4 	addi	r2,r2,-1
1000cb64:	94c00234 	orhi	r19,r18,8
1000cb68:	98a6703a 	and	r19,r19,r2
1000cb6c:	a039883a 	mov	fp,r20
1000cb70:	a82f883a 	mov	r23,r21
1000cb74:	0081ffc4 	movi	r2,2047
1000cb78:	003ebe06 	br	1000c674 <__alt_data_end+0xf800c674>
1000cb7c:	00800434 	movhi	r2,16
1000cb80:	10bfffc4 	addi	r2,r2,-1
1000cb84:	9cc00234 	orhi	r19,r19,8
1000cb88:	98a6703a 	and	r19,r19,r2
1000cb8c:	0081ffc4 	movi	r2,2047
1000cb90:	003eb806 	br	1000c674 <__alt_data_end+0xf800c674>
1000cb94:	14fff604 	addi	r19,r2,-40
1000cb98:	a4e6983a 	sll	r19,r20,r19
1000cb9c:	002f883a 	mov	r23,zero
1000cba0:	003edd06 	br	1000c718 <__alt_data_end+0xf800c718>
1000cba4:	d9800515 	stw	r6,20(sp)
1000cba8:	d9c00415 	stw	r7,16(sp)
1000cbac:	da000615 	stw	r8,24(sp)
1000cbb0:	000d7780 	call	1000d778 <__clzsi2>
1000cbb4:	10800804 	addi	r2,r2,32
1000cbb8:	da000617 	ldw	r8,24(sp)
1000cbbc:	d9c00417 	ldw	r7,16(sp)
1000cbc0:	d9800517 	ldw	r6,20(sp)
1000cbc4:	003ecb06 	br	1000c6f4 <__alt_data_end+0xf800c6f4>
1000cbc8:	14bff604 	addi	r18,r2,-40
1000cbcc:	34a4983a 	sll	r18,r6,r18
1000cbd0:	002b883a 	mov	r21,zero
1000cbd4:	003ef106 	br	1000c79c <__alt_data_end+0xf800c79c>
1000cbd8:	3009883a 	mov	r4,r6
1000cbdc:	d9400415 	stw	r5,16(sp)
1000cbe0:	d9800515 	stw	r6,20(sp)
1000cbe4:	da000615 	stw	r8,24(sp)
1000cbe8:	da400715 	stw	r9,28(sp)
1000cbec:	000d7780 	call	1000d778 <__clzsi2>
1000cbf0:	10800804 	addi	r2,r2,32
1000cbf4:	da400717 	ldw	r9,28(sp)
1000cbf8:	da000617 	ldw	r8,24(sp)
1000cbfc:	d9800517 	ldw	r6,20(sp)
1000cc00:	d9400417 	ldw	r5,16(sp)
1000cc04:	003edc06 	br	1000c778 <__alt_data_end+0xf800c778>
1000cc08:	d8c00017 	ldw	r3,0(sp)
1000cc0c:	00bf0084 	movi	r2,-1022
1000cc10:	10c5c83a 	sub	r2,r2,r3
1000cc14:	00c00e04 	movi	r3,56
1000cc18:	18be9216 	blt	r3,r2,1000c664 <__alt_data_end+0xf800c664>
1000cc1c:	00c007c4 	movi	r3,31
1000cc20:	18801916 	blt	r3,r2,1000cc88 <__muldf3+0x788>
1000cc24:	d9000017 	ldw	r4,0(sp)
1000cc28:	b88ad83a 	srl	r5,r23,r2
1000cc2c:	9884d83a 	srl	r2,r19,r2
1000cc30:	20c10784 	addi	r3,r4,1054
1000cc34:	98c8983a 	sll	r4,r19,r3
1000cc38:	b8c6983a 	sll	r3,r23,r3
1000cc3c:	2908b03a 	or	r4,r5,r4
1000cc40:	1806c03a 	cmpne	r3,r3,zero
1000cc44:	20c6b03a 	or	r3,r4,r3
1000cc48:	190001cc 	andi	r4,r3,7
1000cc4c:	20000726 	beq	r4,zero,1000cc6c <__muldf3+0x76c>
1000cc50:	194003cc 	andi	r5,r3,15
1000cc54:	01000104 	movi	r4,4
1000cc58:	29000426 	beq	r5,r4,1000cc6c <__muldf3+0x76c>
1000cc5c:	1909883a 	add	r4,r3,r4
1000cc60:	20c7803a 	cmpltu	r3,r4,r3
1000cc64:	10c5883a 	add	r2,r2,r3
1000cc68:	2007883a 	mov	r3,r4
1000cc6c:	1100202c 	andhi	r4,r2,128
1000cc70:	20001226 	beq	r4,zero,1000ccbc <__muldf3+0x7bc>
1000cc74:	b039883a 	mov	fp,r22
1000cc78:	00800044 	movi	r2,1
1000cc7c:	0027883a 	mov	r19,zero
1000cc80:	002f883a 	mov	r23,zero
1000cc84:	003e7b06 	br	1000c674 <__alt_data_end+0xf800c674>
1000cc88:	d9400017 	ldw	r5,0(sp)
1000cc8c:	00fef884 	movi	r3,-1054
1000cc90:	01000804 	movi	r4,32
1000cc94:	1947c83a 	sub	r3,r3,r5
1000cc98:	98c6d83a 	srl	r3,r19,r3
1000cc9c:	11000f26 	beq	r2,r4,1000ccdc <__muldf3+0x7dc>
1000cca0:	28810f84 	addi	r2,r5,1086
1000cca4:	9884983a 	sll	r2,r19,r2
1000cca8:	15c4b03a 	or	r2,r2,r23
1000ccac:	1004c03a 	cmpne	r2,r2,zero
1000ccb0:	10c6b03a 	or	r3,r2,r3
1000ccb4:	0005883a 	mov	r2,zero
1000ccb8:	003fe306 	br	1000cc48 <__alt_data_end+0xf800cc48>
1000ccbc:	102e977a 	slli	r23,r2,29
1000ccc0:	1806d0fa 	srli	r3,r3,3
1000ccc4:	1004927a 	slli	r2,r2,9
1000ccc8:	b039883a 	mov	fp,r22
1000cccc:	b8eeb03a 	or	r23,r23,r3
1000ccd0:	1026d33a 	srli	r19,r2,12
1000ccd4:	0005883a 	mov	r2,zero
1000ccd8:	003e6606 	br	1000c674 <__alt_data_end+0xf800c674>
1000ccdc:	0005883a 	mov	r2,zero
1000cce0:	003ff106 	br	1000cca8 <__alt_data_end+0xf800cca8>
1000cce4:	00800434 	movhi	r2,16
1000cce8:	10bfffc4 	addi	r2,r2,-1
1000ccec:	9cc00234 	orhi	r19,r19,8
1000ccf0:	98a6703a 	and	r19,r19,r2
1000ccf4:	b039883a 	mov	fp,r22
1000ccf8:	0081ffc4 	movi	r2,2047
1000ccfc:	003e5d06 	br	1000c674 <__alt_data_end+0xf800c674>

1000cd00 <__subdf3>:
1000cd00:	02000434 	movhi	r8,16
1000cd04:	423fffc4 	addi	r8,r8,-1
1000cd08:	defffb04 	addi	sp,sp,-20
1000cd0c:	2a06703a 	and	r3,r5,r8
1000cd10:	3a10703a 	and	r8,r7,r8
1000cd14:	3804d53a 	srli	r2,r7,20
1000cd18:	dc800215 	stw	r18,8(sp)
1000cd1c:	dc400115 	stw	r17,4(sp)
1000cd20:	2824d7fa 	srli	r18,r5,31
1000cd24:	2822d53a 	srli	r17,r5,20
1000cd28:	401090fa 	slli	r8,r8,3
1000cd2c:	180a90fa 	slli	r5,r3,3
1000cd30:	3006d77a 	srli	r3,r6,29
1000cd34:	2014d77a 	srli	r10,r4,29
1000cd38:	dc000015 	stw	r16,0(sp)
1000cd3c:	40d0b03a 	or	r8,r8,r3
1000cd40:	dfc00415 	stw	ra,16(sp)
1000cd44:	dcc00315 	stw	r19,12(sp)
1000cd48:	1081ffcc 	andi	r2,r2,2047
1000cd4c:	00c1ffc4 	movi	r3,2047
1000cd50:	9013883a 	mov	r9,r18
1000cd54:	8c41ffcc 	andi	r17,r17,2047
1000cd58:	94803fcc 	andi	r18,r18,255
1000cd5c:	2a8ab03a 	or	r5,r5,r10
1000cd60:	202090fa 	slli	r16,r4,3
1000cd64:	380ed7fa 	srli	r7,r7,31
1000cd68:	300c90fa 	slli	r6,r6,3
1000cd6c:	10c02e26 	beq	r2,r3,1000ce28 <__subdf3+0x128>
1000cd70:	39c0005c 	xori	r7,r7,1
1000cd74:	8887c83a 	sub	r3,r17,r2
1000cd78:	91c03026 	beq	r18,r7,1000ce3c <__subdf3+0x13c>
1000cd7c:	00c0a40e 	bge	zero,r3,1000d010 <__subdf3+0x310>
1000cd80:	10004c1e 	bne	r2,zero,1000ceb4 <__subdf3+0x1b4>
1000cd84:	4184b03a 	or	r2,r8,r6
1000cd88:	10008f1e 	bne	r2,zero,1000cfc8 <__subdf3+0x2c8>
1000cd8c:	808001cc 	andi	r2,r16,7
1000cd90:	10007d26 	beq	r2,zero,1000cf88 <__subdf3+0x288>
1000cd94:	80c003cc 	andi	r3,r16,15
1000cd98:	00800104 	movi	r2,4
1000cd9c:	18807a26 	beq	r3,r2,1000cf88 <__subdf3+0x288>
1000cda0:	80c00104 	addi	r3,r16,4
1000cda4:	1c21803a 	cmpltu	r16,r3,r16
1000cda8:	2c0b883a 	add	r5,r5,r16
1000cdac:	2880202c 	andhi	r2,r5,128
1000cdb0:	9240004c 	andi	r9,r18,1
1000cdb4:	1821883a 	mov	r16,r3
1000cdb8:	10007626 	beq	r2,zero,1000cf94 <__subdf3+0x294>
1000cdbc:	8c400044 	addi	r17,r17,1
1000cdc0:	0081ffc4 	movi	r2,2047
1000cdc4:	8880b226 	beq	r17,r2,1000d090 <__subdf3+0x390>
1000cdc8:	00bfe034 	movhi	r2,65408
1000cdcc:	10bfffc4 	addi	r2,r2,-1
1000cdd0:	288a703a 	and	r5,r5,r2
1000cdd4:	2804977a 	slli	r2,r5,29
1000cdd8:	280a927a 	slli	r5,r5,9
1000cddc:	8020d0fa 	srli	r16,r16,3
1000cde0:	280ad33a 	srli	r5,r5,12
1000cde4:	1404b03a 	or	r2,r2,r16
1000cde8:	8c41ffcc 	andi	r17,r17,2047
1000cdec:	8822953a 	slli	r17,r17,20
1000cdf0:	4a403fcc 	andi	r9,r9,255
1000cdf4:	481297fa 	slli	r9,r9,31
1000cdf8:	00c00434 	movhi	r3,16
1000cdfc:	18ffffc4 	addi	r3,r3,-1
1000ce00:	28c6703a 	and	r3,r5,r3
1000ce04:	1c46b03a 	or	r3,r3,r17
1000ce08:	1a46b03a 	or	r3,r3,r9
1000ce0c:	dfc00417 	ldw	ra,16(sp)
1000ce10:	dcc00317 	ldw	r19,12(sp)
1000ce14:	dc800217 	ldw	r18,8(sp)
1000ce18:	dc400117 	ldw	r17,4(sp)
1000ce1c:	dc000017 	ldw	r16,0(sp)
1000ce20:	dec00504 	addi	sp,sp,20
1000ce24:	f800283a 	ret
1000ce28:	4186b03a 	or	r3,r8,r6
1000ce2c:	183fd026 	beq	r3,zero,1000cd70 <__alt_data_end+0xf800cd70>
1000ce30:	39c03fcc 	andi	r7,r7,255
1000ce34:	8887c83a 	sub	r3,r17,r2
1000ce38:	91ffd01e 	bne	r18,r7,1000cd7c <__alt_data_end+0xf800cd7c>
1000ce3c:	00c09b0e 	bge	zero,r3,1000d0ac <__subdf3+0x3ac>
1000ce40:	10006926 	beq	r2,zero,1000cfe8 <__subdf3+0x2e8>
1000ce44:	0081ffc4 	movi	r2,2047
1000ce48:	88bfd026 	beq	r17,r2,1000cd8c <__alt_data_end+0xf800cd8c>
1000ce4c:	42002034 	orhi	r8,r8,128
1000ce50:	00800e04 	movi	r2,56
1000ce54:	10c0e20e 	bge	r2,r3,1000d1e0 <__subdf3+0x4e0>
1000ce58:	418cb03a 	or	r6,r8,r6
1000ce5c:	300cc03a 	cmpne	r6,r6,zero
1000ce60:	0007883a 	mov	r3,zero
1000ce64:	340d883a 	add	r6,r6,r16
1000ce68:	3421803a 	cmpltu	r16,r6,r16
1000ce6c:	194b883a 	add	r5,r3,r5
1000ce70:	2c0b883a 	add	r5,r5,r16
1000ce74:	3021883a 	mov	r16,r6
1000ce78:	2880202c 	andhi	r2,r5,128
1000ce7c:	103fc326 	beq	r2,zero,1000cd8c <__alt_data_end+0xf800cd8c>
1000ce80:	8c400044 	addi	r17,r17,1
1000ce84:	0081ffc4 	movi	r2,2047
1000ce88:	88811026 	beq	r17,r2,1000d2cc <__subdf3+0x5cc>
1000ce8c:	00bfe034 	movhi	r2,65408
1000ce90:	10bfffc4 	addi	r2,r2,-1
1000ce94:	288a703a 	and	r5,r5,r2
1000ce98:	8006d07a 	srli	r3,r16,1
1000ce9c:	280497fa 	slli	r2,r5,31
1000cea0:	8400004c 	andi	r16,r16,1
1000cea4:	80e0b03a 	or	r16,r16,r3
1000cea8:	80a0b03a 	or	r16,r16,r2
1000ceac:	280ad07a 	srli	r5,r5,1
1000ceb0:	003fb606 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000ceb4:	0081ffc4 	movi	r2,2047
1000ceb8:	88bfb426 	beq	r17,r2,1000cd8c <__alt_data_end+0xf800cd8c>
1000cebc:	42002034 	orhi	r8,r8,128
1000cec0:	00800e04 	movi	r2,56
1000cec4:	10c07516 	blt	r2,r3,1000d09c <__subdf3+0x39c>
1000cec8:	008007c4 	movi	r2,31
1000cecc:	10c09816 	blt	r2,r3,1000d130 <__subdf3+0x430>
1000ced0:	00800804 	movi	r2,32
1000ced4:	10c5c83a 	sub	r2,r2,r3
1000ced8:	30c8d83a 	srl	r4,r6,r3
1000cedc:	408e983a 	sll	r7,r8,r2
1000cee0:	3084983a 	sll	r2,r6,r2
1000cee4:	40c6d83a 	srl	r3,r8,r3
1000cee8:	3908b03a 	or	r4,r7,r4
1000ceec:	1004c03a 	cmpne	r2,r2,zero
1000cef0:	208cb03a 	or	r6,r4,r2
1000cef4:	818dc83a 	sub	r6,r16,r6
1000cef8:	81a1803a 	cmpltu	r16,r16,r6
1000cefc:	28cbc83a 	sub	r5,r5,r3
1000cf00:	2c0bc83a 	sub	r5,r5,r16
1000cf04:	3021883a 	mov	r16,r6
1000cf08:	2880202c 	andhi	r2,r5,128
1000cf0c:	103f9f26 	beq	r2,zero,1000cd8c <__alt_data_end+0xf800cd8c>
1000cf10:	04c02034 	movhi	r19,128
1000cf14:	9cffffc4 	addi	r19,r19,-1
1000cf18:	2ce6703a 	and	r19,r5,r19
1000cf1c:	98004d26 	beq	r19,zero,1000d054 <__subdf3+0x354>
1000cf20:	9809883a 	mov	r4,r19
1000cf24:	000d7780 	call	1000d778 <__clzsi2>
1000cf28:	10fffe04 	addi	r3,r2,-8
1000cf2c:	010007c4 	movi	r4,31
1000cf30:	20c04e16 	blt	r4,r3,1000d06c <__subdf3+0x36c>
1000cf34:	01000a04 	movi	r4,40
1000cf38:	2085c83a 	sub	r2,r4,r2
1000cf3c:	8084d83a 	srl	r2,r16,r2
1000cf40:	98e6983a 	sll	r19,r19,r3
1000cf44:	80e0983a 	sll	r16,r16,r3
1000cf48:	14c4b03a 	or	r2,r2,r19
1000cf4c:	1c404b16 	blt	r3,r17,1000d07c <__subdf3+0x37c>
1000cf50:	1c63c83a 	sub	r17,r3,r17
1000cf54:	89400044 	addi	r5,r17,1
1000cf58:	00c007c4 	movi	r3,31
1000cf5c:	19406716 	blt	r3,r5,1000d0fc <__subdf3+0x3fc>
1000cf60:	1c47c83a 	sub	r3,r3,r17
1000cf64:	8148d83a 	srl	r4,r16,r5
1000cf68:	80e0983a 	sll	r16,r16,r3
1000cf6c:	10c6983a 	sll	r3,r2,r3
1000cf70:	114ad83a 	srl	r5,r2,r5
1000cf74:	8004c03a 	cmpne	r2,r16,zero
1000cf78:	20e0b03a 	or	r16,r4,r3
1000cf7c:	80a0b03a 	or	r16,r16,r2
1000cf80:	0023883a 	mov	r17,zero
1000cf84:	003f8106 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000cf88:	2880202c 	andhi	r2,r5,128
1000cf8c:	9240004c 	andi	r9,r18,1
1000cf90:	103f8a1e 	bne	r2,zero,1000cdbc <__alt_data_end+0xf800cdbc>
1000cf94:	2804977a 	slli	r2,r5,29
1000cf98:	8020d0fa 	srli	r16,r16,3
1000cf9c:	00c1ffc4 	movi	r3,2047
1000cfa0:	280ad0fa 	srli	r5,r5,3
1000cfa4:	1404b03a 	or	r2,r2,r16
1000cfa8:	88c0031e 	bne	r17,r3,1000cfb8 <__subdf3+0x2b8>
1000cfac:	1146b03a 	or	r3,r2,r5
1000cfb0:	18003726 	beq	r3,zero,1000d090 <__subdf3+0x390>
1000cfb4:	29400234 	orhi	r5,r5,8
1000cfb8:	00c00434 	movhi	r3,16
1000cfbc:	18ffffc4 	addi	r3,r3,-1
1000cfc0:	28ca703a 	and	r5,r5,r3
1000cfc4:	003f8806 	br	1000cde8 <__alt_data_end+0xf800cde8>
1000cfc8:	18ffffc4 	addi	r3,r3,-1
1000cfcc:	1800481e 	bne	r3,zero,1000d0f0 <__subdf3+0x3f0>
1000cfd0:	818dc83a 	sub	r6,r16,r6
1000cfd4:	81a1803a 	cmpltu	r16,r16,r6
1000cfd8:	2a0bc83a 	sub	r5,r5,r8
1000cfdc:	2c0bc83a 	sub	r5,r5,r16
1000cfe0:	3021883a 	mov	r16,r6
1000cfe4:	003fc806 	br	1000cf08 <__alt_data_end+0xf800cf08>
1000cfe8:	4184b03a 	or	r2,r8,r6
1000cfec:	103f6726 	beq	r2,zero,1000cd8c <__alt_data_end+0xf800cd8c>
1000cff0:	18ffffc4 	addi	r3,r3,-1
1000cff4:	1800931e 	bne	r3,zero,1000d244 <__subdf3+0x544>
1000cff8:	340d883a 	add	r6,r6,r16
1000cffc:	3421803a 	cmpltu	r16,r6,r16
1000d000:	414b883a 	add	r5,r8,r5
1000d004:	2c0b883a 	add	r5,r5,r16
1000d008:	3021883a 	mov	r16,r6
1000d00c:	003f9a06 	br	1000ce78 <__alt_data_end+0xf800ce78>
1000d010:	1800531e 	bne	r3,zero,1000d160 <__subdf3+0x460>
1000d014:	88800044 	addi	r2,r17,1
1000d018:	1081ffcc 	andi	r2,r2,2047
1000d01c:	00c00044 	movi	r3,1
1000d020:	1880a00e 	bge	r3,r2,1000d2a4 <__subdf3+0x5a4>
1000d024:	8185c83a 	sub	r2,r16,r6
1000d028:	8087803a 	cmpltu	r3,r16,r2
1000d02c:	2a27c83a 	sub	r19,r5,r8
1000d030:	98e7c83a 	sub	r19,r19,r3
1000d034:	98c0202c 	andhi	r3,r19,128
1000d038:	18006226 	beq	r3,zero,1000d1c4 <__subdf3+0x4c4>
1000d03c:	3421c83a 	sub	r16,r6,r16
1000d040:	414bc83a 	sub	r5,r8,r5
1000d044:	340d803a 	cmpltu	r6,r6,r16
1000d048:	29a7c83a 	sub	r19,r5,r6
1000d04c:	3825883a 	mov	r18,r7
1000d050:	983fb31e 	bne	r19,zero,1000cf20 <__alt_data_end+0xf800cf20>
1000d054:	8009883a 	mov	r4,r16
1000d058:	000d7780 	call	1000d778 <__clzsi2>
1000d05c:	10800804 	addi	r2,r2,32
1000d060:	10fffe04 	addi	r3,r2,-8
1000d064:	010007c4 	movi	r4,31
1000d068:	20ffb20e 	bge	r4,r3,1000cf34 <__alt_data_end+0xf800cf34>
1000d06c:	10bff604 	addi	r2,r2,-40
1000d070:	8084983a 	sll	r2,r16,r2
1000d074:	0021883a 	mov	r16,zero
1000d078:	1c7fb50e 	bge	r3,r17,1000cf50 <__alt_data_end+0xf800cf50>
1000d07c:	017fe034 	movhi	r5,65408
1000d080:	297fffc4 	addi	r5,r5,-1
1000d084:	88e3c83a 	sub	r17,r17,r3
1000d088:	114a703a 	and	r5,r2,r5
1000d08c:	003f3f06 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d090:	000b883a 	mov	r5,zero
1000d094:	0005883a 	mov	r2,zero
1000d098:	003f5306 	br	1000cde8 <__alt_data_end+0xf800cde8>
1000d09c:	418cb03a 	or	r6,r8,r6
1000d0a0:	300cc03a 	cmpne	r6,r6,zero
1000d0a4:	0007883a 	mov	r3,zero
1000d0a8:	003f9206 	br	1000cef4 <__alt_data_end+0xf800cef4>
1000d0ac:	1800961e 	bne	r3,zero,1000d308 <__subdf3+0x608>
1000d0b0:	88800044 	addi	r2,r17,1
1000d0b4:	1101ffcc 	andi	r4,r2,2047
1000d0b8:	00c00044 	movi	r3,1
1000d0bc:	1900680e 	bge	r3,r4,1000d260 <__subdf3+0x560>
1000d0c0:	00c1ffc4 	movi	r3,2047
1000d0c4:	10c0b626 	beq	r2,r3,1000d3a0 <__subdf3+0x6a0>
1000d0c8:	340d883a 	add	r6,r6,r16
1000d0cc:	3421803a 	cmpltu	r16,r6,r16
1000d0d0:	414b883a 	add	r5,r8,r5
1000d0d4:	2c0b883a 	add	r5,r5,r16
1000d0d8:	282097fa 	slli	r16,r5,31
1000d0dc:	300cd07a 	srli	r6,r6,1
1000d0e0:	280ad07a 	srli	r5,r5,1
1000d0e4:	1023883a 	mov	r17,r2
1000d0e8:	81a0b03a 	or	r16,r16,r6
1000d0ec:	003f2706 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d0f0:	0081ffc4 	movi	r2,2047
1000d0f4:	88bf721e 	bne	r17,r2,1000cec0 <__alt_data_end+0xf800cec0>
1000d0f8:	003f2406 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d0fc:	893ff844 	addi	r4,r17,-31
1000d100:	00c00804 	movi	r3,32
1000d104:	1108d83a 	srl	r4,r2,r4
1000d108:	28c05126 	beq	r5,r3,1000d250 <__subdf3+0x550>
1000d10c:	00c00fc4 	movi	r3,63
1000d110:	1c63c83a 	sub	r17,r3,r17
1000d114:	1444983a 	sll	r2,r2,r17
1000d118:	1420b03a 	or	r16,r2,r16
1000d11c:	8020c03a 	cmpne	r16,r16,zero
1000d120:	8120b03a 	or	r16,r16,r4
1000d124:	000b883a 	mov	r5,zero
1000d128:	0023883a 	mov	r17,zero
1000d12c:	003f1706 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d130:	18bff804 	addi	r2,r3,-32
1000d134:	01000804 	movi	r4,32
1000d138:	4084d83a 	srl	r2,r8,r2
1000d13c:	19004626 	beq	r3,r4,1000d258 <__subdf3+0x558>
1000d140:	01001004 	movi	r4,64
1000d144:	20c7c83a 	sub	r3,r4,r3
1000d148:	40d0983a 	sll	r8,r8,r3
1000d14c:	418cb03a 	or	r6,r8,r6
1000d150:	300cc03a 	cmpne	r6,r6,zero
1000d154:	308cb03a 	or	r6,r6,r2
1000d158:	0007883a 	mov	r3,zero
1000d15c:	003f6506 	br	1000cef4 <__alt_data_end+0xf800cef4>
1000d160:	88002b26 	beq	r17,zero,1000d210 <__subdf3+0x510>
1000d164:	0101ffc4 	movi	r4,2047
1000d168:	11002f26 	beq	r2,r4,1000d228 <__subdf3+0x528>
1000d16c:	00c7c83a 	sub	r3,zero,r3
1000d170:	29402034 	orhi	r5,r5,128
1000d174:	01000e04 	movi	r4,56
1000d178:	20c08516 	blt	r4,r3,1000d390 <__subdf3+0x690>
1000d17c:	010007c4 	movi	r4,31
1000d180:	20c0cd16 	blt	r4,r3,1000d4b8 <__subdf3+0x7b8>
1000d184:	01000804 	movi	r4,32
1000d188:	20c9c83a 	sub	r4,r4,r3
1000d18c:	2914983a 	sll	r10,r5,r4
1000d190:	80d2d83a 	srl	r9,r16,r3
1000d194:	8108983a 	sll	r4,r16,r4
1000d198:	28cad83a 	srl	r5,r5,r3
1000d19c:	5252b03a 	or	r9,r10,r9
1000d1a0:	2006c03a 	cmpne	r3,r4,zero
1000d1a4:	48e0b03a 	or	r16,r9,r3
1000d1a8:	3421c83a 	sub	r16,r6,r16
1000d1ac:	414bc83a 	sub	r5,r8,r5
1000d1b0:	340d803a 	cmpltu	r6,r6,r16
1000d1b4:	298bc83a 	sub	r5,r5,r6
1000d1b8:	1023883a 	mov	r17,r2
1000d1bc:	3825883a 	mov	r18,r7
1000d1c0:	003f5106 	br	1000cf08 <__alt_data_end+0xf800cf08>
1000d1c4:	9886b03a 	or	r3,r19,r2
1000d1c8:	18001c1e 	bne	r3,zero,1000d23c <__subdf3+0x53c>
1000d1cc:	0013883a 	mov	r9,zero
1000d1d0:	000b883a 	mov	r5,zero
1000d1d4:	0021883a 	mov	r16,zero
1000d1d8:	0023883a 	mov	r17,zero
1000d1dc:	003f6d06 	br	1000cf94 <__alt_data_end+0xf800cf94>
1000d1e0:	008007c4 	movi	r2,31
1000d1e4:	10c03c16 	blt	r2,r3,1000d2d8 <__subdf3+0x5d8>
1000d1e8:	00800804 	movi	r2,32
1000d1ec:	10c5c83a 	sub	r2,r2,r3
1000d1f0:	30c8d83a 	srl	r4,r6,r3
1000d1f4:	408e983a 	sll	r7,r8,r2
1000d1f8:	3084983a 	sll	r2,r6,r2
1000d1fc:	40c6d83a 	srl	r3,r8,r3
1000d200:	3908b03a 	or	r4,r7,r4
1000d204:	1004c03a 	cmpne	r2,r2,zero
1000d208:	208cb03a 	or	r6,r4,r2
1000d20c:	003f1506 	br	1000ce64 <__alt_data_end+0xf800ce64>
1000d210:	2c08b03a 	or	r4,r5,r16
1000d214:	20000426 	beq	r4,zero,1000d228 <__subdf3+0x528>
1000d218:	00c6303a 	nor	r3,zero,r3
1000d21c:	183fe226 	beq	r3,zero,1000d1a8 <__alt_data_end+0xf800d1a8>
1000d220:	0101ffc4 	movi	r4,2047
1000d224:	113fd31e 	bne	r2,r4,1000d174 <__alt_data_end+0xf800d174>
1000d228:	400b883a 	mov	r5,r8
1000d22c:	3021883a 	mov	r16,r6
1000d230:	1023883a 	mov	r17,r2
1000d234:	3825883a 	mov	r18,r7
1000d238:	003ed406 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d23c:	1021883a 	mov	r16,r2
1000d240:	003f3606 	br	1000cf1c <__alt_data_end+0xf800cf1c>
1000d244:	0081ffc4 	movi	r2,2047
1000d248:	88bf011e 	bne	r17,r2,1000ce50 <__alt_data_end+0xf800ce50>
1000d24c:	003ecf06 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d250:	0005883a 	mov	r2,zero
1000d254:	003fb006 	br	1000d118 <__alt_data_end+0xf800d118>
1000d258:	0011883a 	mov	r8,zero
1000d25c:	003fbb06 	br	1000d14c <__alt_data_end+0xf800d14c>
1000d260:	2c04b03a 	or	r2,r5,r16
1000d264:	88007f1e 	bne	r17,zero,1000d464 <__subdf3+0x764>
1000d268:	1000a926 	beq	r2,zero,1000d510 <__subdf3+0x810>
1000d26c:	4184b03a 	or	r2,r8,r6
1000d270:	103ec626 	beq	r2,zero,1000cd8c <__alt_data_end+0xf800cd8c>
1000d274:	340d883a 	add	r6,r6,r16
1000d278:	414b883a 	add	r5,r8,r5
1000d27c:	3421803a 	cmpltu	r16,r6,r16
1000d280:	2c0b883a 	add	r5,r5,r16
1000d284:	2880202c 	andhi	r2,r5,128
1000d288:	1000bb26 	beq	r2,zero,1000d578 <__subdf3+0x878>
1000d28c:	00bfe034 	movhi	r2,65408
1000d290:	10bfffc4 	addi	r2,r2,-1
1000d294:	288a703a 	and	r5,r5,r2
1000d298:	3021883a 	mov	r16,r6
1000d29c:	1823883a 	mov	r17,r3
1000d2a0:	003eba06 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d2a4:	2c04b03a 	or	r2,r5,r16
1000d2a8:	8800311e 	bne	r17,zero,1000d370 <__subdf3+0x670>
1000d2ac:	1000451e 	bne	r2,zero,1000d3c4 <__subdf3+0x6c4>
1000d2b0:	4184b03a 	or	r2,r8,r6
1000d2b4:	10000426 	beq	r2,zero,1000d2c8 <__subdf3+0x5c8>
1000d2b8:	400b883a 	mov	r5,r8
1000d2bc:	3021883a 	mov	r16,r6
1000d2c0:	3825883a 	mov	r18,r7
1000d2c4:	003eb106 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d2c8:	0013883a 	mov	r9,zero
1000d2cc:	000b883a 	mov	r5,zero
1000d2d0:	0021883a 	mov	r16,zero
1000d2d4:	003f2f06 	br	1000cf94 <__alt_data_end+0xf800cf94>
1000d2d8:	18bff804 	addi	r2,r3,-32
1000d2dc:	01000804 	movi	r4,32
1000d2e0:	4084d83a 	srl	r2,r8,r2
1000d2e4:	19007226 	beq	r3,r4,1000d4b0 <__subdf3+0x7b0>
1000d2e8:	01001004 	movi	r4,64
1000d2ec:	20c7c83a 	sub	r3,r4,r3
1000d2f0:	40d0983a 	sll	r8,r8,r3
1000d2f4:	418cb03a 	or	r6,r8,r6
1000d2f8:	300cc03a 	cmpne	r6,r6,zero
1000d2fc:	308cb03a 	or	r6,r6,r2
1000d300:	0007883a 	mov	r3,zero
1000d304:	003ed706 	br	1000ce64 <__alt_data_end+0xf800ce64>
1000d308:	8800291e 	bne	r17,zero,1000d3b0 <__subdf3+0x6b0>
1000d30c:	2c08b03a 	or	r4,r5,r16
1000d310:	20005026 	beq	r4,zero,1000d454 <__subdf3+0x754>
1000d314:	00c6303a 	nor	r3,zero,r3
1000d318:	18000f26 	beq	r3,zero,1000d358 <__subdf3+0x658>
1000d31c:	0101ffc4 	movi	r4,2047
1000d320:	11004c26 	beq	r2,r4,1000d454 <__subdf3+0x754>
1000d324:	01000e04 	movi	r4,56
1000d328:	20c07516 	blt	r4,r3,1000d500 <__subdf3+0x800>
1000d32c:	010007c4 	movi	r4,31
1000d330:	20c08316 	blt	r4,r3,1000d540 <__subdf3+0x840>
1000d334:	01000804 	movi	r4,32
1000d338:	20c9c83a 	sub	r4,r4,r3
1000d33c:	2914983a 	sll	r10,r5,r4
1000d340:	80ced83a 	srl	r7,r16,r3
1000d344:	8108983a 	sll	r4,r16,r4
1000d348:	28cad83a 	srl	r5,r5,r3
1000d34c:	51ceb03a 	or	r7,r10,r7
1000d350:	2006c03a 	cmpne	r3,r4,zero
1000d354:	38e0b03a 	or	r16,r7,r3
1000d358:	81a1883a 	add	r16,r16,r6
1000d35c:	2a0b883a 	add	r5,r5,r8
1000d360:	818d803a 	cmpltu	r6,r16,r6
1000d364:	298b883a 	add	r5,r5,r6
1000d368:	1023883a 	mov	r17,r2
1000d36c:	003ec206 	br	1000ce78 <__alt_data_end+0xf800ce78>
1000d370:	1000221e 	bne	r2,zero,1000d3fc <__subdf3+0x6fc>
1000d374:	4184b03a 	or	r2,r8,r6
1000d378:	10005b26 	beq	r2,zero,1000d4e8 <__subdf3+0x7e8>
1000d37c:	400b883a 	mov	r5,r8
1000d380:	3021883a 	mov	r16,r6
1000d384:	3825883a 	mov	r18,r7
1000d388:	0441ffc4 	movi	r17,2047
1000d38c:	003e7f06 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d390:	2c20b03a 	or	r16,r5,r16
1000d394:	8020c03a 	cmpne	r16,r16,zero
1000d398:	000b883a 	mov	r5,zero
1000d39c:	003f8206 	br	1000d1a8 <__alt_data_end+0xf800d1a8>
1000d3a0:	1023883a 	mov	r17,r2
1000d3a4:	000b883a 	mov	r5,zero
1000d3a8:	0021883a 	mov	r16,zero
1000d3ac:	003ef906 	br	1000cf94 <__alt_data_end+0xf800cf94>
1000d3b0:	0101ffc4 	movi	r4,2047
1000d3b4:	11002726 	beq	r2,r4,1000d454 <__subdf3+0x754>
1000d3b8:	00c7c83a 	sub	r3,zero,r3
1000d3bc:	29402034 	orhi	r5,r5,128
1000d3c0:	003fd806 	br	1000d324 <__alt_data_end+0xf800d324>
1000d3c4:	4184b03a 	or	r2,r8,r6
1000d3c8:	103e7026 	beq	r2,zero,1000cd8c <__alt_data_end+0xf800cd8c>
1000d3cc:	8185c83a 	sub	r2,r16,r6
1000d3d0:	8089803a 	cmpltu	r4,r16,r2
1000d3d4:	2a07c83a 	sub	r3,r5,r8
1000d3d8:	1907c83a 	sub	r3,r3,r4
1000d3dc:	1900202c 	andhi	r4,r3,128
1000d3e0:	20005226 	beq	r4,zero,1000d52c <__subdf3+0x82c>
1000d3e4:	3421c83a 	sub	r16,r6,r16
1000d3e8:	414bc83a 	sub	r5,r8,r5
1000d3ec:	340d803a 	cmpltu	r6,r6,r16
1000d3f0:	298bc83a 	sub	r5,r5,r6
1000d3f4:	3825883a 	mov	r18,r7
1000d3f8:	003e6406 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d3fc:	4184b03a 	or	r2,r8,r6
1000d400:	10002926 	beq	r2,zero,1000d4a8 <__subdf3+0x7a8>
1000d404:	2804d0fa 	srli	r2,r5,3
1000d408:	8020d0fa 	srli	r16,r16,3
1000d40c:	280a977a 	slli	r5,r5,29
1000d410:	10c0022c 	andhi	r3,r2,8
1000d414:	2c20b03a 	or	r16,r5,r16
1000d418:	18000826 	beq	r3,zero,1000d43c <__subdf3+0x73c>
1000d41c:	4006d0fa 	srli	r3,r8,3
1000d420:	1900022c 	andhi	r4,r3,8
1000d424:	2000051e 	bne	r4,zero,1000d43c <__subdf3+0x73c>
1000d428:	300cd0fa 	srli	r6,r6,3
1000d42c:	4010977a 	slli	r8,r8,29
1000d430:	1805883a 	mov	r2,r3
1000d434:	3825883a 	mov	r18,r7
1000d438:	41a0b03a 	or	r16,r8,r6
1000d43c:	800ad77a 	srli	r5,r16,29
1000d440:	100490fa 	slli	r2,r2,3
1000d444:	802090fa 	slli	r16,r16,3
1000d448:	0441ffc4 	movi	r17,2047
1000d44c:	288ab03a 	or	r5,r5,r2
1000d450:	003e4e06 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d454:	400b883a 	mov	r5,r8
1000d458:	3021883a 	mov	r16,r6
1000d45c:	1023883a 	mov	r17,r2
1000d460:	003e4a06 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d464:	10002d26 	beq	r2,zero,1000d51c <__subdf3+0x81c>
1000d468:	4184b03a 	or	r2,r8,r6
1000d46c:	10000e26 	beq	r2,zero,1000d4a8 <__subdf3+0x7a8>
1000d470:	2804d0fa 	srli	r2,r5,3
1000d474:	8020d0fa 	srli	r16,r16,3
1000d478:	280a977a 	slli	r5,r5,29
1000d47c:	10c0022c 	andhi	r3,r2,8
1000d480:	2c20b03a 	or	r16,r5,r16
1000d484:	183fed26 	beq	r3,zero,1000d43c <__alt_data_end+0xf800d43c>
1000d488:	4006d0fa 	srli	r3,r8,3
1000d48c:	1900022c 	andhi	r4,r3,8
1000d490:	203fea1e 	bne	r4,zero,1000d43c <__alt_data_end+0xf800d43c>
1000d494:	300cd0fa 	srli	r6,r6,3
1000d498:	4010977a 	slli	r8,r8,29
1000d49c:	1805883a 	mov	r2,r3
1000d4a0:	41a0b03a 	or	r16,r8,r6
1000d4a4:	003fe506 	br	1000d43c <__alt_data_end+0xf800d43c>
1000d4a8:	0441ffc4 	movi	r17,2047
1000d4ac:	003e3706 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d4b0:	0011883a 	mov	r8,zero
1000d4b4:	003f8f06 	br	1000d2f4 <__alt_data_end+0xf800d2f4>
1000d4b8:	193ff804 	addi	r4,r3,-32
1000d4bc:	02400804 	movi	r9,32
1000d4c0:	2908d83a 	srl	r4,r5,r4
1000d4c4:	1a402a26 	beq	r3,r9,1000d570 <__subdf3+0x870>
1000d4c8:	02401004 	movi	r9,64
1000d4cc:	48c7c83a 	sub	r3,r9,r3
1000d4d0:	28ca983a 	sll	r5,r5,r3
1000d4d4:	2c20b03a 	or	r16,r5,r16
1000d4d8:	8020c03a 	cmpne	r16,r16,zero
1000d4dc:	8120b03a 	or	r16,r16,r4
1000d4e0:	000b883a 	mov	r5,zero
1000d4e4:	003f3006 	br	1000d1a8 <__alt_data_end+0xf800d1a8>
1000d4e8:	0013883a 	mov	r9,zero
1000d4ec:	01402034 	movhi	r5,128
1000d4f0:	297fffc4 	addi	r5,r5,-1
1000d4f4:	043ffe04 	movi	r16,-8
1000d4f8:	0441ffc4 	movi	r17,2047
1000d4fc:	003ea506 	br	1000cf94 <__alt_data_end+0xf800cf94>
1000d500:	2c20b03a 	or	r16,r5,r16
1000d504:	8020c03a 	cmpne	r16,r16,zero
1000d508:	000b883a 	mov	r5,zero
1000d50c:	003f9206 	br	1000d358 <__alt_data_end+0xf800d358>
1000d510:	400b883a 	mov	r5,r8
1000d514:	3021883a 	mov	r16,r6
1000d518:	003e1c06 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d51c:	400b883a 	mov	r5,r8
1000d520:	3021883a 	mov	r16,r6
1000d524:	0441ffc4 	movi	r17,2047
1000d528:	003e1806 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d52c:	1888b03a 	or	r4,r3,r2
1000d530:	203f6526 	beq	r4,zero,1000d2c8 <__alt_data_end+0xf800d2c8>
1000d534:	180b883a 	mov	r5,r3
1000d538:	1021883a 	mov	r16,r2
1000d53c:	003e1306 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d540:	193ff804 	addi	r4,r3,-32
1000d544:	01c00804 	movi	r7,32
1000d548:	2908d83a 	srl	r4,r5,r4
1000d54c:	19c00c26 	beq	r3,r7,1000d580 <__subdf3+0x880>
1000d550:	01c01004 	movi	r7,64
1000d554:	38c7c83a 	sub	r3,r7,r3
1000d558:	28ca983a 	sll	r5,r5,r3
1000d55c:	2c20b03a 	or	r16,r5,r16
1000d560:	8020c03a 	cmpne	r16,r16,zero
1000d564:	8120b03a 	or	r16,r16,r4
1000d568:	000b883a 	mov	r5,zero
1000d56c:	003f7a06 	br	1000d358 <__alt_data_end+0xf800d358>
1000d570:	000b883a 	mov	r5,zero
1000d574:	003fd706 	br	1000d4d4 <__alt_data_end+0xf800d4d4>
1000d578:	3021883a 	mov	r16,r6
1000d57c:	003e0306 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000d580:	000b883a 	mov	r5,zero
1000d584:	003ff506 	br	1000d55c <__alt_data_end+0xf800d55c>

1000d588 <__fixdfsi>:
1000d588:	2806d53a 	srli	r3,r5,20
1000d58c:	00800434 	movhi	r2,16
1000d590:	10bfffc4 	addi	r2,r2,-1
1000d594:	0180ff84 	movi	r6,1022
1000d598:	18c1ffcc 	andi	r3,r3,2047
1000d59c:	2884703a 	and	r2,r5,r2
1000d5a0:	280ad7fa 	srli	r5,r5,31
1000d5a4:	30c0120e 	bge	r6,r3,1000d5f0 <__fixdfsi+0x68>
1000d5a8:	01810744 	movi	r6,1053
1000d5ac:	30c00c16 	blt	r6,r3,1000d5e0 <__fixdfsi+0x58>
1000d5b0:	01810cc4 	movi	r6,1075
1000d5b4:	30cdc83a 	sub	r6,r6,r3
1000d5b8:	01c007c4 	movi	r7,31
1000d5bc:	10800434 	orhi	r2,r2,16
1000d5c0:	39800d16 	blt	r7,r6,1000d5f8 <__fixdfsi+0x70>
1000d5c4:	18fefb44 	addi	r3,r3,-1043
1000d5c8:	2188d83a 	srl	r4,r4,r6
1000d5cc:	10c4983a 	sll	r2,r2,r3
1000d5d0:	2084b03a 	or	r2,r4,r2
1000d5d4:	28000726 	beq	r5,zero,1000d5f4 <__fixdfsi+0x6c>
1000d5d8:	0085c83a 	sub	r2,zero,r2
1000d5dc:	f800283a 	ret
1000d5e0:	00a00034 	movhi	r2,32768
1000d5e4:	10bfffc4 	addi	r2,r2,-1
1000d5e8:	2885883a 	add	r2,r5,r2
1000d5ec:	f800283a 	ret
1000d5f0:	0005883a 	mov	r2,zero
1000d5f4:	f800283a 	ret
1000d5f8:	010104c4 	movi	r4,1043
1000d5fc:	20c7c83a 	sub	r3,r4,r3
1000d600:	10c4d83a 	srl	r2,r2,r3
1000d604:	003ff306 	br	1000d5d4 <__alt_data_end+0xf800d5d4>

1000d608 <__floatsidf>:
1000d608:	defffd04 	addi	sp,sp,-12
1000d60c:	dc000015 	stw	r16,0(sp)
1000d610:	dfc00215 	stw	ra,8(sp)
1000d614:	dc400115 	stw	r17,4(sp)
1000d618:	2021883a 	mov	r16,r4
1000d61c:	20002926 	beq	r4,zero,1000d6c4 <__floatsidf+0xbc>
1000d620:	2022d7fa 	srli	r17,r4,31
1000d624:	88000126 	beq	r17,zero,1000d62c <__floatsidf+0x24>
1000d628:	0121c83a 	sub	r16,zero,r4
1000d62c:	8009883a 	mov	r4,r16
1000d630:	000d7780 	call	1000d778 <__clzsi2>
1000d634:	01810784 	movi	r6,1054
1000d638:	00c00284 	movi	r3,10
1000d63c:	308dc83a 	sub	r6,r6,r2
1000d640:	1880150e 	bge	r3,r2,1000d698 <__floatsidf+0x90>
1000d644:	113ffd44 	addi	r4,r2,-11
1000d648:	8108983a 	sll	r4,r16,r4
1000d64c:	00800434 	movhi	r2,16
1000d650:	10bfffc4 	addi	r2,r2,-1
1000d654:	3181ffcc 	andi	r6,r6,2047
1000d658:	2088703a 	and	r4,r4,r2
1000d65c:	880b883a 	mov	r5,r17
1000d660:	0005883a 	mov	r2,zero
1000d664:	300c953a 	slli	r6,r6,20
1000d668:	29403fcc 	andi	r5,r5,255
1000d66c:	280a97fa 	slli	r5,r5,31
1000d670:	00c00434 	movhi	r3,16
1000d674:	18ffffc4 	addi	r3,r3,-1
1000d678:	20c8703a 	and	r4,r4,r3
1000d67c:	2186b03a 	or	r3,r4,r6
1000d680:	1946b03a 	or	r3,r3,r5
1000d684:	dfc00217 	ldw	ra,8(sp)
1000d688:	dc400117 	ldw	r17,4(sp)
1000d68c:	dc000017 	ldw	r16,0(sp)
1000d690:	dec00304 	addi	sp,sp,12
1000d694:	f800283a 	ret
1000d698:	010002c4 	movi	r4,11
1000d69c:	2089c83a 	sub	r4,r4,r2
1000d6a0:	8108d83a 	srl	r4,r16,r4
1000d6a4:	10800544 	addi	r2,r2,21
1000d6a8:	00c00434 	movhi	r3,16
1000d6ac:	18ffffc4 	addi	r3,r3,-1
1000d6b0:	8084983a 	sll	r2,r16,r2
1000d6b4:	20c8703a 	and	r4,r4,r3
1000d6b8:	3181ffcc 	andi	r6,r6,2047
1000d6bc:	880b883a 	mov	r5,r17
1000d6c0:	003fe806 	br	1000d664 <__alt_data_end+0xf800d664>
1000d6c4:	000b883a 	mov	r5,zero
1000d6c8:	000d883a 	mov	r6,zero
1000d6cc:	0009883a 	mov	r4,zero
1000d6d0:	0005883a 	mov	r2,zero
1000d6d4:	003fe306 	br	1000d664 <__alt_data_end+0xf800d664>

1000d6d8 <__floatunsidf>:
1000d6d8:	defffe04 	addi	sp,sp,-8
1000d6dc:	dc000015 	stw	r16,0(sp)
1000d6e0:	dfc00115 	stw	ra,4(sp)
1000d6e4:	2021883a 	mov	r16,r4
1000d6e8:	20001f26 	beq	r4,zero,1000d768 <__floatunsidf+0x90>
1000d6ec:	000d7780 	call	1000d778 <__clzsi2>
1000d6f0:	01010784 	movi	r4,1054
1000d6f4:	00c00284 	movi	r3,10
1000d6f8:	2089c83a 	sub	r4,r4,r2
1000d6fc:	1880100e 	bge	r3,r2,1000d740 <__floatunsidf+0x68>
1000d700:	117ffd44 	addi	r5,r2,-11
1000d704:	814a983a 	sll	r5,r16,r5
1000d708:	00800434 	movhi	r2,16
1000d70c:	10bfffc4 	addi	r2,r2,-1
1000d710:	2101ffcc 	andi	r4,r4,2047
1000d714:	288a703a 	and	r5,r5,r2
1000d718:	0005883a 	mov	r2,zero
1000d71c:	2008953a 	slli	r4,r4,20
1000d720:	00c00434 	movhi	r3,16
1000d724:	18ffffc4 	addi	r3,r3,-1
1000d728:	28c6703a 	and	r3,r5,r3
1000d72c:	1906b03a 	or	r3,r3,r4
1000d730:	dfc00117 	ldw	ra,4(sp)
1000d734:	dc000017 	ldw	r16,0(sp)
1000d738:	dec00204 	addi	sp,sp,8
1000d73c:	f800283a 	ret
1000d740:	014002c4 	movi	r5,11
1000d744:	288bc83a 	sub	r5,r5,r2
1000d748:	814ad83a 	srl	r5,r16,r5
1000d74c:	10800544 	addi	r2,r2,21
1000d750:	00c00434 	movhi	r3,16
1000d754:	18ffffc4 	addi	r3,r3,-1
1000d758:	8084983a 	sll	r2,r16,r2
1000d75c:	28ca703a 	and	r5,r5,r3
1000d760:	2101ffcc 	andi	r4,r4,2047
1000d764:	003fed06 	br	1000d71c <__alt_data_end+0xf800d71c>
1000d768:	0009883a 	mov	r4,zero
1000d76c:	000b883a 	mov	r5,zero
1000d770:	0005883a 	mov	r2,zero
1000d774:	003fe906 	br	1000d71c <__alt_data_end+0xf800d71c>

1000d778 <__clzsi2>:
1000d778:	00bfffd4 	movui	r2,65535
1000d77c:	11000b36 	bltu	r2,r4,1000d7ac <__clzsi2+0x34>
1000d780:	00803fc4 	movi	r2,255
1000d784:	11001e2e 	bgeu	r2,r4,1000d800 <__clzsi2+0x88>
1000d788:	00c00204 	movi	r3,8
1000d78c:	20c8d83a 	srl	r4,r4,r3
1000d790:	00c40074 	movhi	r3,4097
1000d794:	18c02704 	addi	r3,r3,156
1000d798:	00800604 	movi	r2,24
1000d79c:	1909883a 	add	r4,r3,r4
1000d7a0:	20c00003 	ldbu	r3,0(r4)
1000d7a4:	10c5c83a 	sub	r2,r2,r3
1000d7a8:	f800283a 	ret
1000d7ac:	00804034 	movhi	r2,256
1000d7b0:	10bfffc4 	addi	r2,r2,-1
1000d7b4:	11000936 	bltu	r2,r4,1000d7dc <__clzsi2+0x64>
1000d7b8:	00800404 	movi	r2,16
1000d7bc:	1007883a 	mov	r3,r2
1000d7c0:	20c8d83a 	srl	r4,r4,r3
1000d7c4:	00c40074 	movhi	r3,4097
1000d7c8:	18c02704 	addi	r3,r3,156
1000d7cc:	1909883a 	add	r4,r3,r4
1000d7d0:	20c00003 	ldbu	r3,0(r4)
1000d7d4:	10c5c83a 	sub	r2,r2,r3
1000d7d8:	f800283a 	ret
1000d7dc:	00c00604 	movi	r3,24
1000d7e0:	20c8d83a 	srl	r4,r4,r3
1000d7e4:	00c40074 	movhi	r3,4097
1000d7e8:	18c02704 	addi	r3,r3,156
1000d7ec:	00800204 	movi	r2,8
1000d7f0:	1909883a 	add	r4,r3,r4
1000d7f4:	20c00003 	ldbu	r3,0(r4)
1000d7f8:	10c5c83a 	sub	r2,r2,r3
1000d7fc:	f800283a 	ret
1000d800:	0007883a 	mov	r3,zero
1000d804:	20c8d83a 	srl	r4,r4,r3
1000d808:	00c40074 	movhi	r3,4097
1000d80c:	18c02704 	addi	r3,r3,156
1000d810:	00800804 	movi	r2,32
1000d814:	1909883a 	add	r4,r3,r4
1000d818:	20c00003 	ldbu	r3,0(r4)
1000d81c:	10c5c83a 	sub	r2,r2,r3
1000d820:	f800283a 	ret

1000d824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d824:	defffe04 	addi	sp,sp,-8
1000d828:	dfc00115 	stw	ra,4(sp)
1000d82c:	df000015 	stw	fp,0(sp)
1000d830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d834:	00840074 	movhi	r2,4097
1000d838:	10872c04 	addi	r2,r2,7344
1000d83c:	10800017 	ldw	r2,0(r2)
1000d840:	10000526 	beq	r2,zero,1000d858 <alt_get_errno+0x34>
1000d844:	00840074 	movhi	r2,4097
1000d848:	10872c04 	addi	r2,r2,7344
1000d84c:	10800017 	ldw	r2,0(r2)
1000d850:	103ee83a 	callr	r2
1000d854:	00000206 	br	1000d860 <alt_get_errno+0x3c>
1000d858:	00840074 	movhi	r2,4097
1000d85c:	108df404 	addi	r2,r2,14288
}
1000d860:	e037883a 	mov	sp,fp
1000d864:	dfc00117 	ldw	ra,4(sp)
1000d868:	df000017 	ldw	fp,0(sp)
1000d86c:	dec00204 	addi	sp,sp,8
1000d870:	f800283a 	ret

1000d874 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000d874:	defffb04 	addi	sp,sp,-20
1000d878:	dfc00415 	stw	ra,16(sp)
1000d87c:	df000315 	stw	fp,12(sp)
1000d880:	df000304 	addi	fp,sp,12
1000d884:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000d888:	e0bfff17 	ldw	r2,-4(fp)
1000d88c:	10000816 	blt	r2,zero,1000d8b0 <close+0x3c>
1000d890:	e13fff17 	ldw	r4,-4(fp)
1000d894:	01400304 	movi	r5,12
1000d898:	000b0780 	call	1000b078 <__mulsi3>
1000d89c:	1007883a 	mov	r3,r2
1000d8a0:	00840074 	movhi	r2,4097
1000d8a4:	1082a704 	addi	r2,r2,2716
1000d8a8:	1885883a 	add	r2,r3,r2
1000d8ac:	00000106 	br	1000d8b4 <close+0x40>
1000d8b0:	0005883a 	mov	r2,zero
1000d8b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000d8b8:	e0bffd17 	ldw	r2,-12(fp)
1000d8bc:	10001826 	beq	r2,zero,1000d920 <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000d8c0:	e0bffd17 	ldw	r2,-12(fp)
1000d8c4:	10800017 	ldw	r2,0(r2)
1000d8c8:	10800417 	ldw	r2,16(r2)
1000d8cc:	10000626 	beq	r2,zero,1000d8e8 <close+0x74>
1000d8d0:	e0bffd17 	ldw	r2,-12(fp)
1000d8d4:	10800017 	ldw	r2,0(r2)
1000d8d8:	10800417 	ldw	r2,16(r2)
1000d8dc:	e13ffd17 	ldw	r4,-12(fp)
1000d8e0:	103ee83a 	callr	r2
1000d8e4:	00000106 	br	1000d8ec <close+0x78>
1000d8e8:	0005883a 	mov	r2,zero
1000d8ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000d8f0:	e13fff17 	ldw	r4,-4(fp)
1000d8f4:	000e0080 	call	1000e008 <alt_release_fd>
    if (rval < 0)
1000d8f8:	e0bffe17 	ldw	r2,-8(fp)
1000d8fc:	1000060e 	bge	r2,zero,1000d918 <close+0xa4>
    {
      ALT_ERRNO = -rval;
1000d900:	000d8240 	call	1000d824 <alt_get_errno>
1000d904:	e0fffe17 	ldw	r3,-8(fp)
1000d908:	00c7c83a 	sub	r3,zero,r3
1000d90c:	10c00015 	stw	r3,0(r2)
      return -1;
1000d910:	00bfffc4 	movi	r2,-1
1000d914:	00000606 	br	1000d930 <close+0xbc>
    }
    return 0;
1000d918:	0005883a 	mov	r2,zero
1000d91c:	00000406 	br	1000d930 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d920:	000d8240 	call	1000d824 <alt_get_errno>
1000d924:	00c01444 	movi	r3,81
1000d928:	10c00015 	stw	r3,0(r2)
    return -1;
1000d92c:	00bfffc4 	movi	r2,-1
  }
}
1000d930:	e037883a 	mov	sp,fp
1000d934:	dfc00117 	ldw	ra,4(sp)
1000d938:	df000017 	ldw	fp,0(sp)
1000d93c:	dec00204 	addi	sp,sp,8
1000d940:	f800283a 	ret

1000d944 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000d944:	defffc04 	addi	sp,sp,-16
1000d948:	df000315 	stw	fp,12(sp)
1000d94c:	df000304 	addi	fp,sp,12
1000d950:	e13ffd15 	stw	r4,-12(fp)
1000d954:	e17ffe15 	stw	r5,-8(fp)
1000d958:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000d95c:	e0bfff17 	ldw	r2,-4(fp)
}
1000d960:	e037883a 	mov	sp,fp
1000d964:	df000017 	ldw	fp,0(sp)
1000d968:	dec00104 	addi	sp,sp,4
1000d96c:	f800283a 	ret

1000d970 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000d970:	defffa04 	addi	sp,sp,-24
1000d974:	dfc00515 	stw	ra,20(sp)
1000d978:	df000415 	stw	fp,16(sp)
1000d97c:	df000404 	addi	fp,sp,16
1000d980:	e13ffe15 	stw	r4,-8(fp)
1000d984:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000d988:	e0bfff17 	ldw	r2,-4(fp)
1000d98c:	10800017 	ldw	r2,0(r2)
1000d990:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000d994:	e13ffe17 	ldw	r4,-8(fp)
1000d998:	00077640 	call	10007764 <strlen>
1000d99c:	10800044 	addi	r2,r2,1
1000d9a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000d9a4:	00000d06 	br	1000d9dc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000d9a8:	e0bffc17 	ldw	r2,-16(fp)
1000d9ac:	10c00217 	ldw	r3,8(r2)
1000d9b0:	e0bffd17 	ldw	r2,-12(fp)
1000d9b4:	1809883a 	mov	r4,r3
1000d9b8:	e17ffe17 	ldw	r5,-8(fp)
1000d9bc:	100d883a 	mov	r6,r2
1000d9c0:	000fb380 	call	1000fb38 <memcmp>
1000d9c4:	1000021e 	bne	r2,zero,1000d9d0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000d9c8:	e0bffc17 	ldw	r2,-16(fp)
1000d9cc:	00000706 	br	1000d9ec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000d9d0:	e0bffc17 	ldw	r2,-16(fp)
1000d9d4:	10800017 	ldw	r2,0(r2)
1000d9d8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000d9dc:	e0fffc17 	ldw	r3,-16(fp)
1000d9e0:	e0bfff17 	ldw	r2,-4(fp)
1000d9e4:	18bff01e 	bne	r3,r2,1000d9a8 <__alt_data_end+0xf800d9a8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000d9e8:	0005883a 	mov	r2,zero
}
1000d9ec:	e037883a 	mov	sp,fp
1000d9f0:	dfc00117 	ldw	ra,4(sp)
1000d9f4:	df000017 	ldw	fp,0(sp)
1000d9f8:	dec00204 	addi	sp,sp,8
1000d9fc:	f800283a 	ret

1000da00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000da00:	defffe04 	addi	sp,sp,-8
1000da04:	dfc00115 	stw	ra,4(sp)
1000da08:	df000015 	stw	fp,0(sp)
1000da0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000da10:	00840074 	movhi	r2,4097
1000da14:	10872c04 	addi	r2,r2,7344
1000da18:	10800017 	ldw	r2,0(r2)
1000da1c:	10000526 	beq	r2,zero,1000da34 <alt_get_errno+0x34>
1000da20:	00840074 	movhi	r2,4097
1000da24:	10872c04 	addi	r2,r2,7344
1000da28:	10800017 	ldw	r2,0(r2)
1000da2c:	103ee83a 	callr	r2
1000da30:	00000206 	br	1000da3c <alt_get_errno+0x3c>
1000da34:	00840074 	movhi	r2,4097
1000da38:	108df404 	addi	r2,r2,14288
}
1000da3c:	e037883a 	mov	sp,fp
1000da40:	dfc00117 	ldw	ra,4(sp)
1000da44:	df000017 	ldw	fp,0(sp)
1000da48:	dec00204 	addi	sp,sp,8
1000da4c:	f800283a 	ret

1000da50 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000da50:	defffb04 	addi	sp,sp,-20
1000da54:	dfc00415 	stw	ra,16(sp)
1000da58:	df000315 	stw	fp,12(sp)
1000da5c:	df000304 	addi	fp,sp,12
1000da60:	e13ffe15 	stw	r4,-8(fp)
1000da64:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000da68:	e0bffe17 	ldw	r2,-8(fp)
1000da6c:	10000816 	blt	r2,zero,1000da90 <fstat+0x40>
1000da70:	e13ffe17 	ldw	r4,-8(fp)
1000da74:	01400304 	movi	r5,12
1000da78:	000b0780 	call	1000b078 <__mulsi3>
1000da7c:	1007883a 	mov	r3,r2
1000da80:	00840074 	movhi	r2,4097
1000da84:	1082a704 	addi	r2,r2,2716
1000da88:	1885883a 	add	r2,r3,r2
1000da8c:	00000106 	br	1000da94 <fstat+0x44>
1000da90:	0005883a 	mov	r2,zero
1000da94:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000da98:	e0bffd17 	ldw	r2,-12(fp)
1000da9c:	10001026 	beq	r2,zero,1000dae0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000daa0:	e0bffd17 	ldw	r2,-12(fp)
1000daa4:	10800017 	ldw	r2,0(r2)
1000daa8:	10800817 	ldw	r2,32(r2)
1000daac:	10000726 	beq	r2,zero,1000dacc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000dab0:	e0bffd17 	ldw	r2,-12(fp)
1000dab4:	10800017 	ldw	r2,0(r2)
1000dab8:	10800817 	ldw	r2,32(r2)
1000dabc:	e13ffd17 	ldw	r4,-12(fp)
1000dac0:	e17fff17 	ldw	r5,-4(fp)
1000dac4:	103ee83a 	callr	r2
1000dac8:	00000906 	br	1000daf0 <fstat+0xa0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000dacc:	e0bfff17 	ldw	r2,-4(fp)
1000dad0:	00c80004 	movi	r3,8192
1000dad4:	10c00115 	stw	r3,4(r2)
      return 0;
1000dad8:	0005883a 	mov	r2,zero
1000dadc:	00000406 	br	1000daf0 <fstat+0xa0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000dae0:	000da000 	call	1000da00 <alt_get_errno>
1000dae4:	00c01444 	movi	r3,81
1000dae8:	10c00015 	stw	r3,0(r2)
    return -1;
1000daec:	00bfffc4 	movi	r2,-1
  }
}
1000daf0:	e037883a 	mov	sp,fp
1000daf4:	dfc00117 	ldw	ra,4(sp)
1000daf8:	df000017 	ldw	fp,0(sp)
1000dafc:	dec00204 	addi	sp,sp,8
1000db00:	f800283a 	ret

1000db04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000db04:	defffe04 	addi	sp,sp,-8
1000db08:	dfc00115 	stw	ra,4(sp)
1000db0c:	df000015 	stw	fp,0(sp)
1000db10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000db14:	00840074 	movhi	r2,4097
1000db18:	10872c04 	addi	r2,r2,7344
1000db1c:	10800017 	ldw	r2,0(r2)
1000db20:	10000526 	beq	r2,zero,1000db38 <alt_get_errno+0x34>
1000db24:	00840074 	movhi	r2,4097
1000db28:	10872c04 	addi	r2,r2,7344
1000db2c:	10800017 	ldw	r2,0(r2)
1000db30:	103ee83a 	callr	r2
1000db34:	00000206 	br	1000db40 <alt_get_errno+0x3c>
1000db38:	00840074 	movhi	r2,4097
1000db3c:	108df404 	addi	r2,r2,14288
}
1000db40:	e037883a 	mov	sp,fp
1000db44:	dfc00117 	ldw	ra,4(sp)
1000db48:	df000017 	ldw	fp,0(sp)
1000db4c:	dec00204 	addi	sp,sp,8
1000db50:	f800283a 	ret

1000db54 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000db54:	deffed04 	addi	sp,sp,-76
1000db58:	dfc01215 	stw	ra,72(sp)
1000db5c:	df001115 	stw	fp,68(sp)
1000db60:	df001104 	addi	fp,sp,68
1000db64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000db68:	e0bfff17 	ldw	r2,-4(fp)
1000db6c:	10000816 	blt	r2,zero,1000db90 <isatty+0x3c>
1000db70:	e13fff17 	ldw	r4,-4(fp)
1000db74:	01400304 	movi	r5,12
1000db78:	000b0780 	call	1000b078 <__mulsi3>
1000db7c:	1007883a 	mov	r3,r2
1000db80:	00840074 	movhi	r2,4097
1000db84:	1082a704 	addi	r2,r2,2716
1000db88:	1885883a 	add	r2,r3,r2
1000db8c:	00000106 	br	1000db94 <isatty+0x40>
1000db90:	0005883a 	mov	r2,zero
1000db94:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000db98:	e0bfef17 	ldw	r2,-68(fp)
1000db9c:	10000e26 	beq	r2,zero,1000dbd8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000dba0:	e0bfef17 	ldw	r2,-68(fp)
1000dba4:	10800017 	ldw	r2,0(r2)
1000dba8:	10800817 	ldw	r2,32(r2)
1000dbac:	1000021e 	bne	r2,zero,1000dbb8 <isatty+0x64>
    {
      return 1;
1000dbb0:	00800044 	movi	r2,1
1000dbb4:	00000c06 	br	1000dbe8 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000dbb8:	e0bff004 	addi	r2,fp,-64
1000dbbc:	e13fff17 	ldw	r4,-4(fp)
1000dbc0:	100b883a 	mov	r5,r2
1000dbc4:	000da500 	call	1000da50 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000dbc8:	e0bff117 	ldw	r2,-60(fp)
1000dbcc:	10880020 	cmpeqi	r2,r2,8192
1000dbd0:	10803fcc 	andi	r2,r2,255
1000dbd4:	00000406 	br	1000dbe8 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000dbd8:	000db040 	call	1000db04 <alt_get_errno>
1000dbdc:	00c01444 	movi	r3,81
1000dbe0:	10c00015 	stw	r3,0(r2)
    return 0;
1000dbe4:	0005883a 	mov	r2,zero
  }
}
1000dbe8:	e037883a 	mov	sp,fp
1000dbec:	dfc00117 	ldw	ra,4(sp)
1000dbf0:	df000017 	ldw	fp,0(sp)
1000dbf4:	dec00204 	addi	sp,sp,8
1000dbf8:	f800283a 	ret

1000dbfc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000dbfc:	defffc04 	addi	sp,sp,-16
1000dc00:	df000315 	stw	fp,12(sp)
1000dc04:	df000304 	addi	fp,sp,12
1000dc08:	e13ffd15 	stw	r4,-12(fp)
1000dc0c:	e17ffe15 	stw	r5,-8(fp)
1000dc10:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000dc14:	e0fffe17 	ldw	r3,-8(fp)
1000dc18:	e0bffd17 	ldw	r2,-12(fp)
1000dc1c:	18800c26 	beq	r3,r2,1000dc50 <alt_load_section+0x54>
  {
    while( to != end )
1000dc20:	00000806 	br	1000dc44 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000dc24:	e0bffe17 	ldw	r2,-8(fp)
1000dc28:	10c00104 	addi	r3,r2,4
1000dc2c:	e0fffe15 	stw	r3,-8(fp)
1000dc30:	e0fffd17 	ldw	r3,-12(fp)
1000dc34:	19000104 	addi	r4,r3,4
1000dc38:	e13ffd15 	stw	r4,-12(fp)
1000dc3c:	18c00017 	ldw	r3,0(r3)
1000dc40:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000dc44:	e0fffe17 	ldw	r3,-8(fp)
1000dc48:	e0bfff17 	ldw	r2,-4(fp)
1000dc4c:	18bff51e 	bne	r3,r2,1000dc24 <__alt_data_end+0xf800dc24>
    {
      *to++ = *from++;
    }
  }
}
1000dc50:	e037883a 	mov	sp,fp
1000dc54:	df000017 	ldw	fp,0(sp)
1000dc58:	dec00104 	addi	sp,sp,4
1000dc5c:	f800283a 	ret

1000dc60 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000dc60:	defffe04 	addi	sp,sp,-8
1000dc64:	dfc00115 	stw	ra,4(sp)
1000dc68:	df000015 	stw	fp,0(sp)
1000dc6c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000dc70:	01040074 	movhi	r4,4097
1000dc74:	21073104 	addi	r4,r4,7364
1000dc78:	01440074 	movhi	r5,4097
1000dc7c:	29407404 	addi	r5,r5,464
1000dc80:	01840074 	movhi	r6,4097
1000dc84:	31873104 	addi	r6,r6,7364
1000dc88:	000dbfc0 	call	1000dbfc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000dc8c:	01040034 	movhi	r4,4096
1000dc90:	21000804 	addi	r4,r4,32
1000dc94:	01440034 	movhi	r5,4096
1000dc98:	29400804 	addi	r5,r5,32
1000dc9c:	01840034 	movhi	r6,4096
1000dca0:	31806f04 	addi	r6,r6,444
1000dca4:	000dbfc0 	call	1000dbfc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000dca8:	01040074 	movhi	r4,4097
1000dcac:	213faa04 	addi	r4,r4,-344
1000dcb0:	01440074 	movhi	r5,4097
1000dcb4:	297faa04 	addi	r5,r5,-344
1000dcb8:	01840074 	movhi	r6,4097
1000dcbc:	31807404 	addi	r6,r6,464
1000dcc0:	000dbfc0 	call	1000dbfc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000dcc4:	000eea80 	call	1000eea8 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000dcc8:	000f06c0 	call	1000f06c <alt_icache_flush_all>
}
1000dccc:	e037883a 	mov	sp,fp
1000dcd0:	dfc00117 	ldw	ra,4(sp)
1000dcd4:	df000017 	ldw	fp,0(sp)
1000dcd8:	dec00204 	addi	sp,sp,8
1000dcdc:	f800283a 	ret

1000dce0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dce0:	defffe04 	addi	sp,sp,-8
1000dce4:	dfc00115 	stw	ra,4(sp)
1000dce8:	df000015 	stw	fp,0(sp)
1000dcec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dcf0:	00840074 	movhi	r2,4097
1000dcf4:	10872c04 	addi	r2,r2,7344
1000dcf8:	10800017 	ldw	r2,0(r2)
1000dcfc:	10000526 	beq	r2,zero,1000dd14 <alt_get_errno+0x34>
1000dd00:	00840074 	movhi	r2,4097
1000dd04:	10872c04 	addi	r2,r2,7344
1000dd08:	10800017 	ldw	r2,0(r2)
1000dd0c:	103ee83a 	callr	r2
1000dd10:	00000206 	br	1000dd1c <alt_get_errno+0x3c>
1000dd14:	00840074 	movhi	r2,4097
1000dd18:	108df404 	addi	r2,r2,14288
}
1000dd1c:	e037883a 	mov	sp,fp
1000dd20:	dfc00117 	ldw	ra,4(sp)
1000dd24:	df000017 	ldw	fp,0(sp)
1000dd28:	dec00204 	addi	sp,sp,8
1000dd2c:	f800283a 	ret

1000dd30 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000dd30:	defff904 	addi	sp,sp,-28
1000dd34:	dfc00615 	stw	ra,24(sp)
1000dd38:	df000515 	stw	fp,20(sp)
1000dd3c:	df000504 	addi	fp,sp,20
1000dd40:	e13ffd15 	stw	r4,-12(fp)
1000dd44:	e17ffe15 	stw	r5,-8(fp)
1000dd48:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000dd4c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dd50:	e0bffd17 	ldw	r2,-12(fp)
1000dd54:	10000816 	blt	r2,zero,1000dd78 <lseek+0x48>
1000dd58:	e13ffd17 	ldw	r4,-12(fp)
1000dd5c:	01400304 	movi	r5,12
1000dd60:	000b0780 	call	1000b078 <__mulsi3>
1000dd64:	1007883a 	mov	r3,r2
1000dd68:	00840074 	movhi	r2,4097
1000dd6c:	1082a704 	addi	r2,r2,2716
1000dd70:	1885883a 	add	r2,r3,r2
1000dd74:	00000106 	br	1000dd7c <lseek+0x4c>
1000dd78:	0005883a 	mov	r2,zero
1000dd7c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000dd80:	e0bffc17 	ldw	r2,-16(fp)
1000dd84:	10001026 	beq	r2,zero,1000ddc8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000dd88:	e0bffc17 	ldw	r2,-16(fp)
1000dd8c:	10800017 	ldw	r2,0(r2)
1000dd90:	10800717 	ldw	r2,28(r2)
1000dd94:	10000926 	beq	r2,zero,1000ddbc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000dd98:	e0bffc17 	ldw	r2,-16(fp)
1000dd9c:	10800017 	ldw	r2,0(r2)
1000dda0:	10800717 	ldw	r2,28(r2)
1000dda4:	e13ffc17 	ldw	r4,-16(fp)
1000dda8:	e17ffe17 	ldw	r5,-8(fp)
1000ddac:	e1bfff17 	ldw	r6,-4(fp)
1000ddb0:	103ee83a 	callr	r2
1000ddb4:	e0bffb15 	stw	r2,-20(fp)
1000ddb8:	00000506 	br	1000ddd0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000ddbc:	00bfde84 	movi	r2,-134
1000ddc0:	e0bffb15 	stw	r2,-20(fp)
1000ddc4:	00000206 	br	1000ddd0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000ddc8:	00bfebc4 	movi	r2,-81
1000ddcc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000ddd0:	e0bffb17 	ldw	r2,-20(fp)
1000ddd4:	1000060e 	bge	r2,zero,1000ddf0 <lseek+0xc0>
  {
    ALT_ERRNO = -rc;
1000ddd8:	000dce00 	call	1000dce0 <alt_get_errno>
1000dddc:	e0fffb17 	ldw	r3,-20(fp)
1000dde0:	00c7c83a 	sub	r3,zero,r3
1000dde4:	10c00015 	stw	r3,0(r2)
    rc = -1;
1000dde8:	00bfffc4 	movi	r2,-1
1000ddec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000ddf0:	e0bffb17 	ldw	r2,-20(fp)
}
1000ddf4:	e037883a 	mov	sp,fp
1000ddf8:	dfc00117 	ldw	ra,4(sp)
1000ddfc:	df000017 	ldw	fp,0(sp)
1000de00:	dec00204 	addi	sp,sp,8
1000de04:	f800283a 	ret

1000de08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000de08:	defffd04 	addi	sp,sp,-12
1000de0c:	dfc00215 	stw	ra,8(sp)
1000de10:	df000115 	stw	fp,4(sp)
1000de14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000de18:	0009883a 	mov	r4,zero
1000de1c:	000e2b40 	call	1000e2b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000de20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000de24:	000e2e80 	call	1000e2e8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000de28:	01040074 	movhi	r4,4097
1000de2c:	21006a04 	addi	r4,r4,424
1000de30:	01440074 	movhi	r5,4097
1000de34:	29406a04 	addi	r5,r5,424
1000de38:	01840074 	movhi	r6,4097
1000de3c:	31806a04 	addi	r6,r6,424
1000de40:	000f4300 	call	1000f430 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000de44:	000efb40 	call	1000efb4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000de48:	01040074 	movhi	r4,4097
1000de4c:	213c0404 	addi	r4,r4,-4080
1000de50:	000faec0 	call	1000faec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000de54:	d126d617 	ldw	r4,-25768(gp)
1000de58:	d0e6d717 	ldw	r3,-25764(gp)
1000de5c:	d0a6d817 	ldw	r2,-25760(gp)
1000de60:	180b883a 	mov	r5,r3
1000de64:	100d883a 	mov	r6,r2
1000de68:	0000fb80 	call	10000fb8 <main>
1000de6c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000de70:	01000044 	movi	r4,1
1000de74:	000d8740 	call	1000d874 <close>
  exit (result);
1000de78:	e13fff17 	ldw	r4,-4(fp)
1000de7c:	000fb000 	call	1000fb00 <exit>

1000de80 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000de80:	defffe04 	addi	sp,sp,-8
1000de84:	df000115 	stw	fp,4(sp)
1000de88:	df000104 	addi	fp,sp,4
1000de8c:	e13fff15 	stw	r4,-4(fp)
}
1000de90:	e037883a 	mov	sp,fp
1000de94:	df000017 	ldw	fp,0(sp)
1000de98:	dec00104 	addi	sp,sp,4
1000de9c:	f800283a 	ret

1000dea0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000dea0:	defffe04 	addi	sp,sp,-8
1000dea4:	df000115 	stw	fp,4(sp)
1000dea8:	df000104 	addi	fp,sp,4
1000deac:	e13fff15 	stw	r4,-4(fp)
}
1000deb0:	e037883a 	mov	sp,fp
1000deb4:	df000017 	ldw	fp,0(sp)
1000deb8:	dec00104 	addi	sp,sp,4
1000debc:	f800283a 	ret

1000dec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dec0:	defffe04 	addi	sp,sp,-8
1000dec4:	dfc00115 	stw	ra,4(sp)
1000dec8:	df000015 	stw	fp,0(sp)
1000decc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ded0:	00840074 	movhi	r2,4097
1000ded4:	10872c04 	addi	r2,r2,7344
1000ded8:	10800017 	ldw	r2,0(r2)
1000dedc:	10000526 	beq	r2,zero,1000def4 <alt_get_errno+0x34>
1000dee0:	00840074 	movhi	r2,4097
1000dee4:	10872c04 	addi	r2,r2,7344
1000dee8:	10800017 	ldw	r2,0(r2)
1000deec:	103ee83a 	callr	r2
1000def0:	00000206 	br	1000defc <alt_get_errno+0x3c>
1000def4:	00840074 	movhi	r2,4097
1000def8:	108df404 	addi	r2,r2,14288
}
1000defc:	e037883a 	mov	sp,fp
1000df00:	dfc00117 	ldw	ra,4(sp)
1000df04:	df000017 	ldw	fp,0(sp)
1000df08:	dec00204 	addi	sp,sp,8
1000df0c:	f800283a 	ret

1000df10 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000df10:	defff904 	addi	sp,sp,-28
1000df14:	dfc00615 	stw	ra,24(sp)
1000df18:	df000515 	stw	fp,20(sp)
1000df1c:	df000504 	addi	fp,sp,20
1000df20:	e13ffd15 	stw	r4,-12(fp)
1000df24:	e17ffe15 	stw	r5,-8(fp)
1000df28:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000df2c:	e0bffd17 	ldw	r2,-12(fp)
1000df30:	10000816 	blt	r2,zero,1000df54 <read+0x44>
1000df34:	e13ffd17 	ldw	r4,-12(fp)
1000df38:	01400304 	movi	r5,12
1000df3c:	000b0780 	call	1000b078 <__mulsi3>
1000df40:	1007883a 	mov	r3,r2
1000df44:	00840074 	movhi	r2,4097
1000df48:	1082a704 	addi	r2,r2,2716
1000df4c:	1885883a 	add	r2,r3,r2
1000df50:	00000106 	br	1000df58 <read+0x48>
1000df54:	0005883a 	mov	r2,zero
1000df58:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000df5c:	e0bffb17 	ldw	r2,-20(fp)
1000df60:	10002026 	beq	r2,zero,1000dfe4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000df64:	e0bffb17 	ldw	r2,-20(fp)
1000df68:	10800217 	ldw	r2,8(r2)
1000df6c:	108000cc 	andi	r2,r2,3
1000df70:	10800060 	cmpeqi	r2,r2,1
1000df74:	1000171e 	bne	r2,zero,1000dfd4 <read+0xc4>
        (fd->dev->read))
1000df78:	e0bffb17 	ldw	r2,-20(fp)
1000df7c:	10800017 	ldw	r2,0(r2)
1000df80:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000df84:	10001326 	beq	r2,zero,1000dfd4 <read+0xc4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000df88:	e0bffb17 	ldw	r2,-20(fp)
1000df8c:	10800017 	ldw	r2,0(r2)
1000df90:	10800517 	ldw	r2,20(r2)
1000df94:	e0ffff17 	ldw	r3,-4(fp)
1000df98:	e13ffb17 	ldw	r4,-20(fp)
1000df9c:	e17ffe17 	ldw	r5,-8(fp)
1000dfa0:	180d883a 	mov	r6,r3
1000dfa4:	103ee83a 	callr	r2
1000dfa8:	e0bffc15 	stw	r2,-16(fp)
1000dfac:	e0bffc17 	ldw	r2,-16(fp)
1000dfb0:	1000060e 	bge	r2,zero,1000dfcc <read+0xbc>
        {
          ALT_ERRNO = -rval;
1000dfb4:	000dec00 	call	1000dec0 <alt_get_errno>
1000dfb8:	e0fffc17 	ldw	r3,-16(fp)
1000dfbc:	00c7c83a 	sub	r3,zero,r3
1000dfc0:	10c00015 	stw	r3,0(r2)
          return -1;
1000dfc4:	00bfffc4 	movi	r2,-1
1000dfc8:	00000a06 	br	1000dff4 <read+0xe4>
        }
        return rval;
1000dfcc:	e0bffc17 	ldw	r2,-16(fp)
1000dfd0:	00000806 	br	1000dff4 <read+0xe4>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000dfd4:	000dec00 	call	1000dec0 <alt_get_errno>
1000dfd8:	00c00344 	movi	r3,13
1000dfdc:	10c00015 	stw	r3,0(r2)
1000dfe0:	00000306 	br	1000dff0 <read+0xe0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000dfe4:	000dec00 	call	1000dec0 <alt_get_errno>
1000dfe8:	00c01444 	movi	r3,81
1000dfec:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000dff0:	00bfffc4 	movi	r2,-1
}
1000dff4:	e037883a 	mov	sp,fp
1000dff8:	dfc00117 	ldw	ra,4(sp)
1000dffc:	df000017 	ldw	fp,0(sp)
1000e000:	dec00204 	addi	sp,sp,8
1000e004:	f800283a 	ret

1000e008 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000e008:	defffc04 	addi	sp,sp,-16
1000e00c:	dfc00315 	stw	ra,12(sp)
1000e010:	df000215 	stw	fp,8(sp)
1000e014:	dc000115 	stw	r16,4(sp)
1000e018:	df000204 	addi	fp,sp,8
1000e01c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000e020:	e0bffe17 	ldw	r2,-8(fp)
1000e024:	108000d0 	cmplti	r2,r2,3
1000e028:	1000111e 	bne	r2,zero,1000e070 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000e02c:	04040074 	movhi	r16,4097
1000e030:	8402a704 	addi	r16,r16,2716
1000e034:	e0bffe17 	ldw	r2,-8(fp)
1000e038:	1009883a 	mov	r4,r2
1000e03c:	01400304 	movi	r5,12
1000e040:	000b0780 	call	1000b078 <__mulsi3>
1000e044:	8085883a 	add	r2,r16,r2
1000e048:	10800204 	addi	r2,r2,8
1000e04c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000e050:	04040074 	movhi	r16,4097
1000e054:	8402a704 	addi	r16,r16,2716
1000e058:	e0bffe17 	ldw	r2,-8(fp)
1000e05c:	1009883a 	mov	r4,r2
1000e060:	01400304 	movi	r5,12
1000e064:	000b0780 	call	1000b078 <__mulsi3>
1000e068:	8085883a 	add	r2,r16,r2
1000e06c:	10000015 	stw	zero,0(r2)
  }
}
1000e070:	e6ffff04 	addi	sp,fp,-4
1000e074:	dfc00217 	ldw	ra,8(sp)
1000e078:	df000117 	ldw	fp,4(sp)
1000e07c:	dc000017 	ldw	r16,0(sp)
1000e080:	dec00304 	addi	sp,sp,12
1000e084:	f800283a 	ret

1000e088 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000e088:	defff904 	addi	sp,sp,-28
1000e08c:	df000615 	stw	fp,24(sp)
1000e090:	df000604 	addi	fp,sp,24
1000e094:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e098:	0005303a 	rdctl	r2,status
1000e09c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e0a0:	e0fffc17 	ldw	r3,-16(fp)
1000e0a4:	00bfff84 	movi	r2,-2
1000e0a8:	1884703a 	and	r2,r3,r2
1000e0ac:	1001703a 	wrctl	status,r2
  
  return context;
1000e0b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000e0b4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000e0b8:	d0a00e17 	ldw	r2,-32712(gp)
1000e0bc:	10c000c4 	addi	r3,r2,3
1000e0c0:	00bfff04 	movi	r2,-4
1000e0c4:	1884703a 	and	r2,r3,r2
1000e0c8:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000e0cc:	d0e00e17 	ldw	r3,-32712(gp)
1000e0d0:	e0bfff17 	ldw	r2,-4(fp)
1000e0d4:	1885883a 	add	r2,r3,r2
1000e0d8:	00c60034 	movhi	r3,6144
1000e0dc:	18c00004 	addi	r3,r3,0
1000e0e0:	1880062e 	bgeu	r3,r2,1000e0fc <sbrk+0x74>
1000e0e4:	e0bffa17 	ldw	r2,-24(fp)
1000e0e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e0ec:	e0bffd17 	ldw	r2,-12(fp)
1000e0f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000e0f4:	00bfffc4 	movi	r2,-1
1000e0f8:	00000b06 	br	1000e128 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000e0fc:	d0a00e17 	ldw	r2,-32712(gp)
1000e100:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000e104:	d0e00e17 	ldw	r3,-32712(gp)
1000e108:	e0bfff17 	ldw	r2,-4(fp)
1000e10c:	1885883a 	add	r2,r3,r2
1000e110:	d0a00e15 	stw	r2,-32712(gp)
1000e114:	e0bffa17 	ldw	r2,-24(fp)
1000e118:	e0bffe15 	stw	r2,-8(fp)
1000e11c:	e0bffe17 	ldw	r2,-8(fp)
1000e120:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000e124:	e0bffb17 	ldw	r2,-20(fp)
} 
1000e128:	e037883a 	mov	sp,fp
1000e12c:	df000017 	ldw	fp,0(sp)
1000e130:	dec00104 	addi	sp,sp,4
1000e134:	f800283a 	ret

1000e138 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e138:	defffe04 	addi	sp,sp,-8
1000e13c:	dfc00115 	stw	ra,4(sp)
1000e140:	df000015 	stw	fp,0(sp)
1000e144:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e148:	00840074 	movhi	r2,4097
1000e14c:	10872c04 	addi	r2,r2,7344
1000e150:	10800017 	ldw	r2,0(r2)
1000e154:	10000526 	beq	r2,zero,1000e16c <alt_get_errno+0x34>
1000e158:	00840074 	movhi	r2,4097
1000e15c:	10872c04 	addi	r2,r2,7344
1000e160:	10800017 	ldw	r2,0(r2)
1000e164:	103ee83a 	callr	r2
1000e168:	00000206 	br	1000e174 <alt_get_errno+0x3c>
1000e16c:	00840074 	movhi	r2,4097
1000e170:	108df404 	addi	r2,r2,14288
}
1000e174:	e037883a 	mov	sp,fp
1000e178:	dfc00117 	ldw	ra,4(sp)
1000e17c:	df000017 	ldw	fp,0(sp)
1000e180:	dec00204 	addi	sp,sp,8
1000e184:	f800283a 	ret

1000e188 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000e188:	defff904 	addi	sp,sp,-28
1000e18c:	dfc00615 	stw	ra,24(sp)
1000e190:	df000515 	stw	fp,20(sp)
1000e194:	df000504 	addi	fp,sp,20
1000e198:	e13ffd15 	stw	r4,-12(fp)
1000e19c:	e17ffe15 	stw	r5,-8(fp)
1000e1a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e1a4:	e0bffd17 	ldw	r2,-12(fp)
1000e1a8:	10000816 	blt	r2,zero,1000e1cc <write+0x44>
1000e1ac:	e13ffd17 	ldw	r4,-12(fp)
1000e1b0:	01400304 	movi	r5,12
1000e1b4:	000b0780 	call	1000b078 <__mulsi3>
1000e1b8:	1007883a 	mov	r3,r2
1000e1bc:	00840074 	movhi	r2,4097
1000e1c0:	1082a704 	addi	r2,r2,2716
1000e1c4:	1885883a 	add	r2,r3,r2
1000e1c8:	00000106 	br	1000e1d0 <write+0x48>
1000e1cc:	0005883a 	mov	r2,zero
1000e1d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e1d4:	e0bffb17 	ldw	r2,-20(fp)
1000e1d8:	10001f26 	beq	r2,zero,1000e258 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000e1dc:	e0bffb17 	ldw	r2,-20(fp)
1000e1e0:	10800217 	ldw	r2,8(r2)
1000e1e4:	108000cc 	andi	r2,r2,3
1000e1e8:	10001726 	beq	r2,zero,1000e248 <write+0xc0>
1000e1ec:	e0bffb17 	ldw	r2,-20(fp)
1000e1f0:	10800017 	ldw	r2,0(r2)
1000e1f4:	10800617 	ldw	r2,24(r2)
1000e1f8:	10001326 	beq	r2,zero,1000e248 <write+0xc0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000e1fc:	e0bffb17 	ldw	r2,-20(fp)
1000e200:	10800017 	ldw	r2,0(r2)
1000e204:	10800617 	ldw	r2,24(r2)
1000e208:	e0ffff17 	ldw	r3,-4(fp)
1000e20c:	e13ffb17 	ldw	r4,-20(fp)
1000e210:	e17ffe17 	ldw	r5,-8(fp)
1000e214:	180d883a 	mov	r6,r3
1000e218:	103ee83a 	callr	r2
1000e21c:	e0bffc15 	stw	r2,-16(fp)
1000e220:	e0bffc17 	ldw	r2,-16(fp)
1000e224:	1000060e 	bge	r2,zero,1000e240 <write+0xb8>
      {
        ALT_ERRNO = -rval;
1000e228:	000e1380 	call	1000e138 <alt_get_errno>
1000e22c:	e0fffc17 	ldw	r3,-16(fp)
1000e230:	00c7c83a 	sub	r3,zero,r3
1000e234:	10c00015 	stw	r3,0(r2)
        return -1;
1000e238:	00bfffc4 	movi	r2,-1
1000e23c:	00000a06 	br	1000e268 <write+0xe0>
      }
      return rval;
1000e240:	e0bffc17 	ldw	r2,-16(fp)
1000e244:	00000806 	br	1000e268 <write+0xe0>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000e248:	000e1380 	call	1000e138 <alt_get_errno>
1000e24c:	00c00344 	movi	r3,13
1000e250:	10c00015 	stw	r3,0(r2)
1000e254:	00000306 	br	1000e264 <write+0xdc>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000e258:	000e1380 	call	1000e138 <alt_get_errno>
1000e25c:	00c01444 	movi	r3,81
1000e260:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000e264:	00bfffc4 	movi	r2,-1
}
1000e268:	e037883a 	mov	sp,fp
1000e26c:	dfc00117 	ldw	ra,4(sp)
1000e270:	df000017 	ldw	fp,0(sp)
1000e274:	dec00204 	addi	sp,sp,8
1000e278:	f800283a 	ret

1000e27c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000e27c:	defffd04 	addi	sp,sp,-12
1000e280:	dfc00215 	stw	ra,8(sp)
1000e284:	df000115 	stw	fp,4(sp)
1000e288:	df000104 	addi	fp,sp,4
1000e28c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000e290:	e13fff17 	ldw	r4,-4(fp)
1000e294:	01440074 	movhi	r5,4097
1000e298:	29472904 	addi	r5,r5,7332
1000e29c:	000ef140 	call	1000ef14 <alt_dev_llist_insert>
}
1000e2a0:	e037883a 	mov	sp,fp
1000e2a4:	dfc00117 	ldw	ra,4(sp)
1000e2a8:	df000017 	ldw	fp,0(sp)
1000e2ac:	dec00204 	addi	sp,sp,8
1000e2b0:	f800283a 	ret

1000e2b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000e2b4:	defffd04 	addi	sp,sp,-12
1000e2b8:	dfc00215 	stw	ra,8(sp)
1000e2bc:	df000115 	stw	fp,4(sp)
1000e2c0:	df000104 	addi	fp,sp,4
1000e2c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000e2c8:	000f8e40 	call	1000f8e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000e2cc:	00800044 	movi	r2,1
1000e2d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000e2d4:	e037883a 	mov	sp,fp
1000e2d8:	dfc00117 	ldw	ra,4(sp)
1000e2dc:	df000017 	ldw	fp,0(sp)
1000e2e0:	dec00204 	addi	sp,sp,8
1000e2e4:	f800283a 	ret

1000e2e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000e2e8:	defffe04 	addi	sp,sp,-8
1000e2ec:	dfc00115 	stw	ra,4(sp)
1000e2f0:	df000015 	stw	fp,0(sp)
1000e2f4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000e2f8:	01040074 	movhi	r4,4097
1000e2fc:	21031104 	addi	r4,r4,3140
1000e300:	000b883a 	mov	r5,zero
1000e304:	01800044 	movi	r6,1
1000e308:	000e4940 	call	1000e494 <altera_avalon_jtag_uart_init>
1000e30c:	01040074 	movhi	r4,4097
1000e310:	21030704 	addi	r4,r4,3100
1000e314:	000e27c0 	call	1000e27c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000e318:	0001883a 	nop
}
1000e31c:	e037883a 	mov	sp,fp
1000e320:	dfc00117 	ldw	ra,4(sp)
1000e324:	df000017 	ldw	fp,0(sp)
1000e328:	dec00204 	addi	sp,sp,8
1000e32c:	f800283a 	ret

1000e330 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000e330:	defffa04 	addi	sp,sp,-24
1000e334:	dfc00515 	stw	ra,20(sp)
1000e338:	df000415 	stw	fp,16(sp)
1000e33c:	df000404 	addi	fp,sp,16
1000e340:	e13ffd15 	stw	r4,-12(fp)
1000e344:	e17ffe15 	stw	r5,-8(fp)
1000e348:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e34c:	e0bffd17 	ldw	r2,-12(fp)
1000e350:	10800017 	ldw	r2,0(r2)
1000e354:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000e358:	e0bffc17 	ldw	r2,-16(fp)
1000e35c:	10c00a04 	addi	r3,r2,40
1000e360:	e0bffd17 	ldw	r2,-12(fp)
1000e364:	10800217 	ldw	r2,8(r2)
1000e368:	1809883a 	mov	r4,r3
1000e36c:	e17ffe17 	ldw	r5,-8(fp)
1000e370:	e1bfff17 	ldw	r6,-4(fp)
1000e374:	100f883a 	mov	r7,r2
1000e378:	000e9480 	call	1000e948 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000e37c:	e037883a 	mov	sp,fp
1000e380:	dfc00117 	ldw	ra,4(sp)
1000e384:	df000017 	ldw	fp,0(sp)
1000e388:	dec00204 	addi	sp,sp,8
1000e38c:	f800283a 	ret

1000e390 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000e390:	defffa04 	addi	sp,sp,-24
1000e394:	dfc00515 	stw	ra,20(sp)
1000e398:	df000415 	stw	fp,16(sp)
1000e39c:	df000404 	addi	fp,sp,16
1000e3a0:	e13ffd15 	stw	r4,-12(fp)
1000e3a4:	e17ffe15 	stw	r5,-8(fp)
1000e3a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e3ac:	e0bffd17 	ldw	r2,-12(fp)
1000e3b0:	10800017 	ldw	r2,0(r2)
1000e3b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000e3b8:	e0bffc17 	ldw	r2,-16(fp)
1000e3bc:	10c00a04 	addi	r3,r2,40
1000e3c0:	e0bffd17 	ldw	r2,-12(fp)
1000e3c4:	10800217 	ldw	r2,8(r2)
1000e3c8:	1809883a 	mov	r4,r3
1000e3cc:	e17ffe17 	ldw	r5,-8(fp)
1000e3d0:	e1bfff17 	ldw	r6,-4(fp)
1000e3d4:	100f883a 	mov	r7,r2
1000e3d8:	000eb500 	call	1000eb50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000e3dc:	e037883a 	mov	sp,fp
1000e3e0:	dfc00117 	ldw	ra,4(sp)
1000e3e4:	df000017 	ldw	fp,0(sp)
1000e3e8:	dec00204 	addi	sp,sp,8
1000e3ec:	f800283a 	ret

1000e3f0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000e3f0:	defffc04 	addi	sp,sp,-16
1000e3f4:	dfc00315 	stw	ra,12(sp)
1000e3f8:	df000215 	stw	fp,8(sp)
1000e3fc:	df000204 	addi	fp,sp,8
1000e400:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e404:	e0bfff17 	ldw	r2,-4(fp)
1000e408:	10800017 	ldw	r2,0(r2)
1000e40c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000e410:	e0bffe17 	ldw	r2,-8(fp)
1000e414:	10c00a04 	addi	r3,r2,40
1000e418:	e0bfff17 	ldw	r2,-4(fp)
1000e41c:	10800217 	ldw	r2,8(r2)
1000e420:	1809883a 	mov	r4,r3
1000e424:	100b883a 	mov	r5,r2
1000e428:	000e7f40 	call	1000e7f4 <altera_avalon_jtag_uart_close>
}
1000e42c:	e037883a 	mov	sp,fp
1000e430:	dfc00117 	ldw	ra,4(sp)
1000e434:	df000017 	ldw	fp,0(sp)
1000e438:	dec00204 	addi	sp,sp,8
1000e43c:	f800283a 	ret

1000e440 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000e440:	defffa04 	addi	sp,sp,-24
1000e444:	dfc00515 	stw	ra,20(sp)
1000e448:	df000415 	stw	fp,16(sp)
1000e44c:	df000404 	addi	fp,sp,16
1000e450:	e13ffd15 	stw	r4,-12(fp)
1000e454:	e17ffe15 	stw	r5,-8(fp)
1000e458:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000e45c:	e0bffd17 	ldw	r2,-12(fp)
1000e460:	10800017 	ldw	r2,0(r2)
1000e464:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000e468:	e0bffc17 	ldw	r2,-16(fp)
1000e46c:	10800a04 	addi	r2,r2,40
1000e470:	1009883a 	mov	r4,r2
1000e474:	e17ffe17 	ldw	r5,-8(fp)
1000e478:	e1bfff17 	ldw	r6,-4(fp)
1000e47c:	000e85c0 	call	1000e85c <altera_avalon_jtag_uart_ioctl>
}
1000e480:	e037883a 	mov	sp,fp
1000e484:	dfc00117 	ldw	ra,4(sp)
1000e488:	df000017 	ldw	fp,0(sp)
1000e48c:	dec00204 	addi	sp,sp,8
1000e490:	f800283a 	ret

1000e494 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000e494:	defffa04 	addi	sp,sp,-24
1000e498:	dfc00515 	stw	ra,20(sp)
1000e49c:	df000415 	stw	fp,16(sp)
1000e4a0:	df000404 	addi	fp,sp,16
1000e4a4:	e13ffd15 	stw	r4,-12(fp)
1000e4a8:	e17ffe15 	stw	r5,-8(fp)
1000e4ac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e4b0:	e0bffd17 	ldw	r2,-12(fp)
1000e4b4:	00c00044 	movi	r3,1
1000e4b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000e4bc:	e0bffd17 	ldw	r2,-12(fp)
1000e4c0:	10800017 	ldw	r2,0(r2)
1000e4c4:	10800104 	addi	r2,r2,4
1000e4c8:	e0fffd17 	ldw	r3,-12(fp)
1000e4cc:	18c00817 	ldw	r3,32(r3)
1000e4d0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000e4d4:	e0fffe17 	ldw	r3,-8(fp)
1000e4d8:	e0bfff17 	ldw	r2,-4(fp)
1000e4dc:	d8000015 	stw	zero,0(sp)
1000e4e0:	1809883a 	mov	r4,r3
1000e4e4:	100b883a 	mov	r5,r2
1000e4e8:	01840074 	movhi	r6,4097
1000e4ec:	31b95504 	addi	r6,r6,-6828
1000e4f0:	e1fffd17 	ldw	r7,-12(fp)
1000e4f4:	000f0880 	call	1000f088 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000e4f8:	e0bffd17 	ldw	r2,-12(fp)
1000e4fc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000e500:	e0bffd17 	ldw	r2,-12(fp)
1000e504:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000e508:	00840074 	movhi	r2,4097
1000e50c:	108df904 	addi	r2,r2,14308
1000e510:	10800017 	ldw	r2,0(r2)
1000e514:	1809883a 	mov	r4,r3
1000e518:	100b883a 	mov	r5,r2
1000e51c:	01840074 	movhi	r6,4097
1000e520:	31b9d404 	addi	r6,r6,-6320
1000e524:	e1fffd17 	ldw	r7,-12(fp)
1000e528:	000ed680 	call	1000ed68 <alt_alarm_start>
1000e52c:	1000040e 	bge	r2,zero,1000e540 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000e530:	e0bffd17 	ldw	r2,-12(fp)
1000e534:	00e00034 	movhi	r3,32768
1000e538:	18ffffc4 	addi	r3,r3,-1
1000e53c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000e540:	e037883a 	mov	sp,fp
1000e544:	dfc00117 	ldw	ra,4(sp)
1000e548:	df000017 	ldw	fp,0(sp)
1000e54c:	dec00204 	addi	sp,sp,8
1000e550:	f800283a 	ret

1000e554 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000e554:	defff804 	addi	sp,sp,-32
1000e558:	df000715 	stw	fp,28(sp)
1000e55c:	df000704 	addi	fp,sp,28
1000e560:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000e564:	e0bfff17 	ldw	r2,-4(fp)
1000e568:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000e56c:	e0bffb17 	ldw	r2,-20(fp)
1000e570:	10800017 	ldw	r2,0(r2)
1000e574:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e578:	e0bffc17 	ldw	r2,-16(fp)
1000e57c:	10800104 	addi	r2,r2,4
1000e580:	10800037 	ldwio	r2,0(r2)
1000e584:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000e588:	e0bffd17 	ldw	r2,-12(fp)
1000e58c:	1080c00c 	andi	r2,r2,768
1000e590:	1000011e 	bne	r2,zero,1000e598 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000e594:	00006a06 	br	1000e740 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000e598:	e0bffd17 	ldw	r2,-12(fp)
1000e59c:	1080400c 	andi	r2,r2,256
1000e5a0:	10003226 	beq	r2,zero,1000e66c <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000e5a4:	00800074 	movhi	r2,1
1000e5a8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e5ac:	e0bffb17 	ldw	r2,-20(fp)
1000e5b0:	10800a17 	ldw	r2,40(r2)
1000e5b4:	10800044 	addi	r2,r2,1
1000e5b8:	1081ffcc 	andi	r2,r2,2047
1000e5bc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000e5c0:	e0bffb17 	ldw	r2,-20(fp)
1000e5c4:	10c00b17 	ldw	r3,44(r2)
1000e5c8:	e0bffe17 	ldw	r2,-8(fp)
1000e5cc:	1880011e 	bne	r3,r2,1000e5d4 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000e5d0:	00001506 	br	1000e628 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000e5d4:	e0bffc17 	ldw	r2,-16(fp)
1000e5d8:	10800037 	ldwio	r2,0(r2)
1000e5dc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000e5e0:	e0bff917 	ldw	r2,-28(fp)
1000e5e4:	10a0000c 	andi	r2,r2,32768
1000e5e8:	1000011e 	bne	r2,zero,1000e5f0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000e5ec:	00000e06 	br	1000e628 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000e5f0:	e0bffb17 	ldw	r2,-20(fp)
1000e5f4:	10800a17 	ldw	r2,40(r2)
1000e5f8:	e0fff917 	ldw	r3,-28(fp)
1000e5fc:	e13ffb17 	ldw	r4,-20(fp)
1000e600:	2085883a 	add	r2,r4,r2
1000e604:	10800e04 	addi	r2,r2,56
1000e608:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e60c:	e0bffb17 	ldw	r2,-20(fp)
1000e610:	10800a17 	ldw	r2,40(r2)
1000e614:	10800044 	addi	r2,r2,1
1000e618:	10c1ffcc 	andi	r3,r2,2047
1000e61c:	e0bffb17 	ldw	r2,-20(fp)
1000e620:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000e624:	003fe106 	br	1000e5ac <__alt_data_end+0xf800e5ac>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000e628:	e0bff917 	ldw	r2,-28(fp)
1000e62c:	10bfffec 	andhi	r2,r2,65535
1000e630:	10000e26 	beq	r2,zero,1000e66c <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e634:	e0bffb17 	ldw	r2,-20(fp)
1000e638:	10c00817 	ldw	r3,32(r2)
1000e63c:	00bfff84 	movi	r2,-2
1000e640:	1886703a 	and	r3,r3,r2
1000e644:	e0bffb17 	ldw	r2,-20(fp)
1000e648:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000e64c:	e0bffc17 	ldw	r2,-16(fp)
1000e650:	10800104 	addi	r2,r2,4
1000e654:	e0fffb17 	ldw	r3,-20(fp)
1000e658:	18c00817 	ldw	r3,32(r3)
1000e65c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e660:	e0bffc17 	ldw	r2,-16(fp)
1000e664:	10800104 	addi	r2,r2,4
1000e668:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000e66c:	e0bffd17 	ldw	r2,-12(fp)
1000e670:	1080800c 	andi	r2,r2,512
1000e674:	10003126 	beq	r2,zero,1000e73c <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000e678:	e0bffd17 	ldw	r2,-12(fp)
1000e67c:	1004d43a 	srli	r2,r2,16
1000e680:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e684:	00001406 	br	1000e6d8 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000e688:	e0bffc17 	ldw	r2,-16(fp)
1000e68c:	e0fffb17 	ldw	r3,-20(fp)
1000e690:	18c00d17 	ldw	r3,52(r3)
1000e694:	e13ffb17 	ldw	r4,-20(fp)
1000e698:	20c7883a 	add	r3,r4,r3
1000e69c:	18c20e04 	addi	r3,r3,2104
1000e6a0:	18c00003 	ldbu	r3,0(r3)
1000e6a4:	18c03fcc 	andi	r3,r3,255
1000e6a8:	18c0201c 	xori	r3,r3,128
1000e6ac:	18ffe004 	addi	r3,r3,-128
1000e6b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e6b4:	e0bffb17 	ldw	r2,-20(fp)
1000e6b8:	10800d17 	ldw	r2,52(r2)
1000e6bc:	10800044 	addi	r2,r2,1
1000e6c0:	10c1ffcc 	andi	r3,r2,2047
1000e6c4:	e0bffb17 	ldw	r2,-20(fp)
1000e6c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000e6cc:	e0bffa17 	ldw	r2,-24(fp)
1000e6d0:	10bfffc4 	addi	r2,r2,-1
1000e6d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e6d8:	e0bffa17 	ldw	r2,-24(fp)
1000e6dc:	10000526 	beq	r2,zero,1000e6f4 <altera_avalon_jtag_uart_irq+0x1a0>
1000e6e0:	e0bffb17 	ldw	r2,-20(fp)
1000e6e4:	10c00d17 	ldw	r3,52(r2)
1000e6e8:	e0bffb17 	ldw	r2,-20(fp)
1000e6ec:	10800c17 	ldw	r2,48(r2)
1000e6f0:	18bfe51e 	bne	r3,r2,1000e688 <__alt_data_end+0xf800e688>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000e6f4:	e0bffa17 	ldw	r2,-24(fp)
1000e6f8:	10001026 	beq	r2,zero,1000e73c <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e6fc:	e0bffb17 	ldw	r2,-20(fp)
1000e700:	10c00817 	ldw	r3,32(r2)
1000e704:	00bfff44 	movi	r2,-3
1000e708:	1886703a 	and	r3,r3,r2
1000e70c:	e0bffb17 	ldw	r2,-20(fp)
1000e710:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e714:	e0bffb17 	ldw	r2,-20(fp)
1000e718:	10800017 	ldw	r2,0(r2)
1000e71c:	10800104 	addi	r2,r2,4
1000e720:	e0fffb17 	ldw	r3,-20(fp)
1000e724:	18c00817 	ldw	r3,32(r3)
1000e728:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e72c:	e0bffc17 	ldw	r2,-16(fp)
1000e730:	10800104 	addi	r2,r2,4
1000e734:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000e738:	003f8f06 	br	1000e578 <__alt_data_end+0xf800e578>
1000e73c:	003f8e06 	br	1000e578 <__alt_data_end+0xf800e578>
}
1000e740:	e037883a 	mov	sp,fp
1000e744:	df000017 	ldw	fp,0(sp)
1000e748:	dec00104 	addi	sp,sp,4
1000e74c:	f800283a 	ret

1000e750 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000e750:	defff804 	addi	sp,sp,-32
1000e754:	df000715 	stw	fp,28(sp)
1000e758:	df000704 	addi	fp,sp,28
1000e75c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000e760:	e0bffb17 	ldw	r2,-20(fp)
1000e764:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000e768:	e0bff917 	ldw	r2,-28(fp)
1000e76c:	10800017 	ldw	r2,0(r2)
1000e770:	10800104 	addi	r2,r2,4
1000e774:	10800037 	ldwio	r2,0(r2)
1000e778:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000e77c:	e0bffa17 	ldw	r2,-24(fp)
1000e780:	1081000c 	andi	r2,r2,1024
1000e784:	10000a26 	beq	r2,zero,1000e7b0 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000e788:	e0bff917 	ldw	r2,-28(fp)
1000e78c:	10800017 	ldw	r2,0(r2)
1000e790:	10800104 	addi	r2,r2,4
1000e794:	e0fff917 	ldw	r3,-28(fp)
1000e798:	18c00817 	ldw	r3,32(r3)
1000e79c:	18c10014 	ori	r3,r3,1024
1000e7a0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
1000e7a4:	e0bff917 	ldw	r2,-28(fp)
1000e7a8:	10000915 	stw	zero,36(r2)
1000e7ac:	00000a06 	br	1000e7d8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000e7b0:	e0bff917 	ldw	r2,-28(fp)
1000e7b4:	10800917 	ldw	r2,36(r2)
1000e7b8:	00e00034 	movhi	r3,32768
1000e7bc:	18ffff04 	addi	r3,r3,-4
1000e7c0:	18800536 	bltu	r3,r2,1000e7d8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
1000e7c4:	e0bff917 	ldw	r2,-28(fp)
1000e7c8:	10800917 	ldw	r2,36(r2)
1000e7cc:	10c00044 	addi	r3,r2,1
1000e7d0:	e0bff917 	ldw	r2,-28(fp)
1000e7d4:	10c00915 	stw	r3,36(r2)
1000e7d8:	00840074 	movhi	r2,4097
1000e7dc:	108df904 	addi	r2,r2,14308
1000e7e0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000e7e4:	e037883a 	mov	sp,fp
1000e7e8:	df000017 	ldw	fp,0(sp)
1000e7ec:	dec00104 	addi	sp,sp,4
1000e7f0:	f800283a 	ret

1000e7f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000e7f4:	defffd04 	addi	sp,sp,-12
1000e7f8:	df000215 	stw	fp,8(sp)
1000e7fc:	df000204 	addi	fp,sp,8
1000e800:	e13ffe15 	stw	r4,-8(fp)
1000e804:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e808:	00000506 	br	1000e820 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000e80c:	e0bfff17 	ldw	r2,-4(fp)
1000e810:	1090000c 	andi	r2,r2,16384
1000e814:	10000226 	beq	r2,zero,1000e820 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000e818:	00bffd44 	movi	r2,-11
1000e81c:	00000b06 	br	1000e84c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e820:	e0bffe17 	ldw	r2,-8(fp)
1000e824:	10c00d17 	ldw	r3,52(r2)
1000e828:	e0bffe17 	ldw	r2,-8(fp)
1000e82c:	10800c17 	ldw	r2,48(r2)
1000e830:	18800526 	beq	r3,r2,1000e848 <altera_avalon_jtag_uart_close+0x54>
1000e834:	e0bffe17 	ldw	r2,-8(fp)
1000e838:	10c00917 	ldw	r3,36(r2)
1000e83c:	e0bffe17 	ldw	r2,-8(fp)
1000e840:	10800117 	ldw	r2,4(r2)
1000e844:	18bff136 	bltu	r3,r2,1000e80c <__alt_data_end+0xf800e80c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000e848:	0005883a 	mov	r2,zero
}
1000e84c:	e037883a 	mov	sp,fp
1000e850:	df000017 	ldw	fp,0(sp)
1000e854:	dec00104 	addi	sp,sp,4
1000e858:	f800283a 	ret

1000e85c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000e85c:	defffa04 	addi	sp,sp,-24
1000e860:	df000515 	stw	fp,20(sp)
1000e864:	df000504 	addi	fp,sp,20
1000e868:	e13ffd15 	stw	r4,-12(fp)
1000e86c:	e17ffe15 	stw	r5,-8(fp)
1000e870:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000e874:	00bff9c4 	movi	r2,-25
1000e878:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000e87c:	e0bffe17 	ldw	r2,-8(fp)
1000e880:	10da8060 	cmpeqi	r3,r2,27137
1000e884:	1800031e 	bne	r3,zero,1000e894 <altera_avalon_jtag_uart_ioctl+0x38>
1000e888:	109a80a0 	cmpeqi	r2,r2,27138
1000e88c:	1000191e 	bne	r2,zero,1000e8f4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000e890:	00002806 	br	1000e934 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000e894:	e0bffd17 	ldw	r2,-12(fp)
1000e898:	10c00117 	ldw	r3,4(r2)
1000e89c:	00a00034 	movhi	r2,32768
1000e8a0:	10bfffc4 	addi	r2,r2,-1
1000e8a4:	18801226 	beq	r3,r2,1000e8f0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000e8a8:	e0bfff17 	ldw	r2,-4(fp)
1000e8ac:	10800017 	ldw	r2,0(r2)
1000e8b0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000e8b4:	e0bffc17 	ldw	r2,-16(fp)
1000e8b8:	10800090 	cmplti	r2,r2,2
1000e8bc:	1000061e 	bne	r2,zero,1000e8d8 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e8c0:	e0fffc17 	ldw	r3,-16(fp)
1000e8c4:	00a00034 	movhi	r2,32768
1000e8c8:	10bfffc4 	addi	r2,r2,-1
1000e8cc:	18800226 	beq	r3,r2,1000e8d8 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e8d0:	e0bffc17 	ldw	r2,-16(fp)
1000e8d4:	00000206 	br	1000e8e0 <altera_avalon_jtag_uart_ioctl+0x84>
1000e8d8:	00a00034 	movhi	r2,32768
1000e8dc:	10bfff84 	addi	r2,r2,-2
1000e8e0:	e0fffd17 	ldw	r3,-12(fp)
1000e8e4:	18800115 	stw	r2,4(r3)
      rc = 0;
1000e8e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e8ec:	00001106 	br	1000e934 <altera_avalon_jtag_uart_ioctl+0xd8>
1000e8f0:	00001006 	br	1000e934 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000e8f4:	e0bffd17 	ldw	r2,-12(fp)
1000e8f8:	10c00117 	ldw	r3,4(r2)
1000e8fc:	00a00034 	movhi	r2,32768
1000e900:	10bfffc4 	addi	r2,r2,-1
1000e904:	18800a26 	beq	r3,r2,1000e930 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000e908:	e0bffd17 	ldw	r2,-12(fp)
1000e90c:	10c00917 	ldw	r3,36(r2)
1000e910:	e0bffd17 	ldw	r2,-12(fp)
1000e914:	10800117 	ldw	r2,4(r2)
1000e918:	1885803a 	cmpltu	r2,r3,r2
1000e91c:	10c03fcc 	andi	r3,r2,255
1000e920:	e0bfff17 	ldw	r2,-4(fp)
1000e924:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000e928:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e92c:	00000006 	br	1000e930 <altera_avalon_jtag_uart_ioctl+0xd4>
1000e930:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000e934:	e0bffb17 	ldw	r2,-20(fp)
}
1000e938:	e037883a 	mov	sp,fp
1000e93c:	df000017 	ldw	fp,0(sp)
1000e940:	dec00104 	addi	sp,sp,4
1000e944:	f800283a 	ret

1000e948 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000e948:	defff304 	addi	sp,sp,-52
1000e94c:	dfc00c15 	stw	ra,48(sp)
1000e950:	df000b15 	stw	fp,44(sp)
1000e954:	df000b04 	addi	fp,sp,44
1000e958:	e13ffc15 	stw	r4,-16(fp)
1000e95c:	e17ffd15 	stw	r5,-12(fp)
1000e960:	e1bffe15 	stw	r6,-8(fp)
1000e964:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000e968:	e0bffd17 	ldw	r2,-12(fp)
1000e96c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e970:	00004906 	br	1000ea98 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000e974:	e0bffc17 	ldw	r2,-16(fp)
1000e978:	10800a17 	ldw	r2,40(r2)
1000e97c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000e980:	e0bffc17 	ldw	r2,-16(fp)
1000e984:	10800b17 	ldw	r2,44(r2)
1000e988:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000e98c:	e0fff717 	ldw	r3,-36(fp)
1000e990:	e0bff817 	ldw	r2,-32(fp)
1000e994:	18800536 	bltu	r3,r2,1000e9ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000e998:	e0fff717 	ldw	r3,-36(fp)
1000e99c:	e0bff817 	ldw	r2,-32(fp)
1000e9a0:	1885c83a 	sub	r2,r3,r2
1000e9a4:	e0bff615 	stw	r2,-40(fp)
1000e9a8:	00000406 	br	1000e9bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000e9ac:	00c20004 	movi	r3,2048
1000e9b0:	e0bff817 	ldw	r2,-32(fp)
1000e9b4:	1885c83a 	sub	r2,r3,r2
1000e9b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e9bc:	e0bff617 	ldw	r2,-40(fp)
1000e9c0:	1000011e 	bne	r2,zero,1000e9c8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000e9c4:	00001d06 	br	1000ea3c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000e9c8:	e0fffe17 	ldw	r3,-8(fp)
1000e9cc:	e0bff617 	ldw	r2,-40(fp)
1000e9d0:	1880022e 	bgeu	r3,r2,1000e9dc <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000e9d4:	e0bffe17 	ldw	r2,-8(fp)
1000e9d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000e9dc:	e0bff817 	ldw	r2,-32(fp)
1000e9e0:	10800e04 	addi	r2,r2,56
1000e9e4:	e0fffc17 	ldw	r3,-16(fp)
1000e9e8:	1885883a 	add	r2,r3,r2
1000e9ec:	e13ff517 	ldw	r4,-44(fp)
1000e9f0:	100b883a 	mov	r5,r2
1000e9f4:	e1bff617 	ldw	r6,-40(fp)
1000e9f8:	00062700 	call	10006270 <memcpy>
      ptr   += n;
1000e9fc:	e0fff517 	ldw	r3,-44(fp)
1000ea00:	e0bff617 	ldw	r2,-40(fp)
1000ea04:	1885883a 	add	r2,r3,r2
1000ea08:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000ea0c:	e0fffe17 	ldw	r3,-8(fp)
1000ea10:	e0bff617 	ldw	r2,-40(fp)
1000ea14:	1885c83a 	sub	r2,r3,r2
1000ea18:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ea1c:	e0fff817 	ldw	r3,-32(fp)
1000ea20:	e0bff617 	ldw	r2,-40(fp)
1000ea24:	1885883a 	add	r2,r3,r2
1000ea28:	10c1ffcc 	andi	r3,r2,2047
1000ea2c:	e0bffc17 	ldw	r2,-16(fp)
1000ea30:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000ea34:	e0bffe17 	ldw	r2,-8(fp)
1000ea38:	00bfce16 	blt	zero,r2,1000e974 <__alt_data_end+0xf800e974>

    /* If we read any data then return it */
    if (ptr != buffer)
1000ea3c:	e0fff517 	ldw	r3,-44(fp)
1000ea40:	e0bffd17 	ldw	r2,-12(fp)
1000ea44:	18800126 	beq	r3,r2,1000ea4c <altera_avalon_jtag_uart_read+0x104>
      break;
1000ea48:	00001506 	br	1000eaa0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000ea4c:	e0bfff17 	ldw	r2,-4(fp)
1000ea50:	1090000c 	andi	r2,r2,16384
1000ea54:	10000126 	beq	r2,zero,1000ea5c <altera_avalon_jtag_uart_read+0x114>
      break;
1000ea58:	00001106 	br	1000eaa0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000ea5c:	0001883a 	nop
1000ea60:	e0bffc17 	ldw	r2,-16(fp)
1000ea64:	10c00a17 	ldw	r3,40(r2)
1000ea68:	e0bff717 	ldw	r2,-36(fp)
1000ea6c:	1880051e 	bne	r3,r2,1000ea84 <altera_avalon_jtag_uart_read+0x13c>
1000ea70:	e0bffc17 	ldw	r2,-16(fp)
1000ea74:	10c00917 	ldw	r3,36(r2)
1000ea78:	e0bffc17 	ldw	r2,-16(fp)
1000ea7c:	10800117 	ldw	r2,4(r2)
1000ea80:	18bff736 	bltu	r3,r2,1000ea60 <__alt_data_end+0xf800ea60>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000ea84:	e0bffc17 	ldw	r2,-16(fp)
1000ea88:	10c00a17 	ldw	r3,40(r2)
1000ea8c:	e0bff717 	ldw	r2,-36(fp)
1000ea90:	1880011e 	bne	r3,r2,1000ea98 <altera_avalon_jtag_uart_read+0x150>
      break;
1000ea94:	00000206 	br	1000eaa0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000ea98:	e0bffe17 	ldw	r2,-8(fp)
1000ea9c:	00bfb516 	blt	zero,r2,1000e974 <__alt_data_end+0xf800e974>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000eaa0:	e0fff517 	ldw	r3,-44(fp)
1000eaa4:	e0bffd17 	ldw	r2,-12(fp)
1000eaa8:	18801726 	beq	r3,r2,1000eb08 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000eaac:	0005303a 	rdctl	r2,status
1000eab0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000eab4:	e0fffa17 	ldw	r3,-24(fp)
1000eab8:	00bfff84 	movi	r2,-2
1000eabc:	1884703a 	and	r2,r3,r2
1000eac0:	1001703a 	wrctl	status,r2
  
  return context;
1000eac4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000eac8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000eacc:	e0bffc17 	ldw	r2,-16(fp)
1000ead0:	10800817 	ldw	r2,32(r2)
1000ead4:	10c00054 	ori	r3,r2,1
1000ead8:	e0bffc17 	ldw	r2,-16(fp)
1000eadc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000eae0:	e0bffc17 	ldw	r2,-16(fp)
1000eae4:	10800017 	ldw	r2,0(r2)
1000eae8:	10800104 	addi	r2,r2,4
1000eaec:	e0fffc17 	ldw	r3,-16(fp)
1000eaf0:	18c00817 	ldw	r3,32(r3)
1000eaf4:	10c00035 	stwio	r3,0(r2)
1000eaf8:	e0bff917 	ldw	r2,-28(fp)
1000eafc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000eb00:	e0bffb17 	ldw	r2,-20(fp)
1000eb04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000eb08:	e0fff517 	ldw	r3,-44(fp)
1000eb0c:	e0bffd17 	ldw	r2,-12(fp)
1000eb10:	18800426 	beq	r3,r2,1000eb24 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
1000eb14:	e0fff517 	ldw	r3,-44(fp)
1000eb18:	e0bffd17 	ldw	r2,-12(fp)
1000eb1c:	1885c83a 	sub	r2,r3,r2
1000eb20:	00000606 	br	1000eb3c <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
1000eb24:	e0bfff17 	ldw	r2,-4(fp)
1000eb28:	1090000c 	andi	r2,r2,16384
1000eb2c:	10000226 	beq	r2,zero,1000eb38 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
1000eb30:	00bffd44 	movi	r2,-11
1000eb34:	00000106 	br	1000eb3c <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
1000eb38:	00bffec4 	movi	r2,-5
}
1000eb3c:	e037883a 	mov	sp,fp
1000eb40:	dfc00117 	ldw	ra,4(sp)
1000eb44:	df000017 	ldw	fp,0(sp)
1000eb48:	dec00204 	addi	sp,sp,8
1000eb4c:	f800283a 	ret

1000eb50 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000eb50:	defff304 	addi	sp,sp,-52
1000eb54:	dfc00c15 	stw	ra,48(sp)
1000eb58:	df000b15 	stw	fp,44(sp)
1000eb5c:	df000b04 	addi	fp,sp,44
1000eb60:	e13ffc15 	stw	r4,-16(fp)
1000eb64:	e17ffd15 	stw	r5,-12(fp)
1000eb68:	e1bffe15 	stw	r6,-8(fp)
1000eb6c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000eb70:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000eb74:	e0bffd17 	ldw	r2,-12(fp)
1000eb78:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000eb7c:	00003906 	br	1000ec64 <altera_avalon_jtag_uart_write+0x114>
1000eb80:	00003806 	br	1000ec64 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000eb84:	e0bffc17 	ldw	r2,-16(fp)
1000eb88:	10800c17 	ldw	r2,48(r2)
1000eb8c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000eb90:	e0bffc17 	ldw	r2,-16(fp)
1000eb94:	10800d17 	ldw	r2,52(r2)
1000eb98:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000eb9c:	e0fff817 	ldw	r3,-32(fp)
1000eba0:	e0bff517 	ldw	r2,-44(fp)
1000eba4:	1880062e 	bgeu	r3,r2,1000ebc0 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
1000eba8:	e0fff517 	ldw	r3,-44(fp)
1000ebac:	e0bff817 	ldw	r2,-32(fp)
1000ebb0:	1885c83a 	sub	r2,r3,r2
1000ebb4:	10bfffc4 	addi	r2,r2,-1
1000ebb8:	e0bff615 	stw	r2,-40(fp)
1000ebbc:	00000b06 	br	1000ebec <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
1000ebc0:	e0bff517 	ldw	r2,-44(fp)
1000ebc4:	10000526 	beq	r2,zero,1000ebdc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000ebc8:	00c20004 	movi	r3,2048
1000ebcc:	e0bff817 	ldw	r2,-32(fp)
1000ebd0:	1885c83a 	sub	r2,r3,r2
1000ebd4:	e0bff615 	stw	r2,-40(fp)
1000ebd8:	00000406 	br	1000ebec <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000ebdc:	00c1ffc4 	movi	r3,2047
1000ebe0:	e0bff817 	ldw	r2,-32(fp)
1000ebe4:	1885c83a 	sub	r2,r3,r2
1000ebe8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000ebec:	e0bff617 	ldw	r2,-40(fp)
1000ebf0:	1000011e 	bne	r2,zero,1000ebf8 <altera_avalon_jtag_uart_write+0xa8>
        break;
1000ebf4:	00001d06 	br	1000ec6c <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
1000ebf8:	e0fffe17 	ldw	r3,-8(fp)
1000ebfc:	e0bff617 	ldw	r2,-40(fp)
1000ec00:	1880022e 	bgeu	r3,r2,1000ec0c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
1000ec04:	e0bffe17 	ldw	r2,-8(fp)
1000ec08:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000ec0c:	e0bff817 	ldw	r2,-32(fp)
1000ec10:	10820e04 	addi	r2,r2,2104
1000ec14:	e0fffc17 	ldw	r3,-16(fp)
1000ec18:	1885883a 	add	r2,r3,r2
1000ec1c:	1009883a 	mov	r4,r2
1000ec20:	e17ffd17 	ldw	r5,-12(fp)
1000ec24:	e1bff617 	ldw	r6,-40(fp)
1000ec28:	00062700 	call	10006270 <memcpy>
      ptr   += n;
1000ec2c:	e0fffd17 	ldw	r3,-12(fp)
1000ec30:	e0bff617 	ldw	r2,-40(fp)
1000ec34:	1885883a 	add	r2,r3,r2
1000ec38:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000ec3c:	e0fffe17 	ldw	r3,-8(fp)
1000ec40:	e0bff617 	ldw	r2,-40(fp)
1000ec44:	1885c83a 	sub	r2,r3,r2
1000ec48:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ec4c:	e0fff817 	ldw	r3,-32(fp)
1000ec50:	e0bff617 	ldw	r2,-40(fp)
1000ec54:	1885883a 	add	r2,r3,r2
1000ec58:	10c1ffcc 	andi	r3,r2,2047
1000ec5c:	e0bffc17 	ldw	r2,-16(fp)
1000ec60:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000ec64:	e0bffe17 	ldw	r2,-8(fp)
1000ec68:	00bfc616 	blt	zero,r2,1000eb84 <__alt_data_end+0xf800eb84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ec6c:	0005303a 	rdctl	r2,status
1000ec70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ec74:	e0fffa17 	ldw	r3,-24(fp)
1000ec78:	00bfff84 	movi	r2,-2
1000ec7c:	1884703a 	and	r2,r3,r2
1000ec80:	1001703a 	wrctl	status,r2
  
  return context;
1000ec84:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000ec88:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000ec8c:	e0bffc17 	ldw	r2,-16(fp)
1000ec90:	10800817 	ldw	r2,32(r2)
1000ec94:	10c00094 	ori	r3,r2,2
1000ec98:	e0bffc17 	ldw	r2,-16(fp)
1000ec9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000eca0:	e0bffc17 	ldw	r2,-16(fp)
1000eca4:	10800017 	ldw	r2,0(r2)
1000eca8:	10800104 	addi	r2,r2,4
1000ecac:	e0fffc17 	ldw	r3,-16(fp)
1000ecb0:	18c00817 	ldw	r3,32(r3)
1000ecb4:	10c00035 	stwio	r3,0(r2)
1000ecb8:	e0bff917 	ldw	r2,-28(fp)
1000ecbc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ecc0:	e0bffb17 	ldw	r2,-20(fp)
1000ecc4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000ecc8:	e0bffe17 	ldw	r2,-8(fp)
1000eccc:	0080120e 	bge	zero,r2,1000ed18 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000ecd0:	e0bfff17 	ldw	r2,-4(fp)
1000ecd4:	1090000c 	andi	r2,r2,16384
1000ecd8:	10000126 	beq	r2,zero,1000ece0 <altera_avalon_jtag_uart_write+0x190>
        break;
1000ecdc:	00001006 	br	1000ed20 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000ece0:	0001883a 	nop
1000ece4:	e0bffc17 	ldw	r2,-16(fp)
1000ece8:	10c00d17 	ldw	r3,52(r2)
1000ecec:	e0bff517 	ldw	r2,-44(fp)
1000ecf0:	1880051e 	bne	r3,r2,1000ed08 <altera_avalon_jtag_uart_write+0x1b8>
1000ecf4:	e0bffc17 	ldw	r2,-16(fp)
1000ecf8:	10c00917 	ldw	r3,36(r2)
1000ecfc:	e0bffc17 	ldw	r2,-16(fp)
1000ed00:	10800117 	ldw	r2,4(r2)
1000ed04:	18bff736 	bltu	r3,r2,1000ece4 <__alt_data_end+0xf800ece4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000ed08:	e0bffc17 	ldw	r2,-16(fp)
1000ed0c:	10800917 	ldw	r2,36(r2)
1000ed10:	10000126 	beq	r2,zero,1000ed18 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000ed14:	00000206 	br	1000ed20 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000ed18:	e0bffe17 	ldw	r2,-8(fp)
1000ed1c:	00bf9816 	blt	zero,r2,1000eb80 <__alt_data_end+0xf800eb80>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000ed20:	e0fffd17 	ldw	r3,-12(fp)
1000ed24:	e0bff717 	ldw	r2,-36(fp)
1000ed28:	18800426 	beq	r3,r2,1000ed3c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000ed2c:	e0fffd17 	ldw	r3,-12(fp)
1000ed30:	e0bff717 	ldw	r2,-36(fp)
1000ed34:	1885c83a 	sub	r2,r3,r2
1000ed38:	00000606 	br	1000ed54 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000ed3c:	e0bfff17 	ldw	r2,-4(fp)
1000ed40:	1090000c 	andi	r2,r2,16384
1000ed44:	10000226 	beq	r2,zero,1000ed50 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000ed48:	00bffd44 	movi	r2,-11
1000ed4c:	00000106 	br	1000ed54 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000ed50:	00bffec4 	movi	r2,-5
}
1000ed54:	e037883a 	mov	sp,fp
1000ed58:	dfc00117 	ldw	ra,4(sp)
1000ed5c:	df000017 	ldw	fp,0(sp)
1000ed60:	dec00204 	addi	sp,sp,8
1000ed64:	f800283a 	ret

1000ed68 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000ed68:	defff504 	addi	sp,sp,-44
1000ed6c:	df000a15 	stw	fp,40(sp)
1000ed70:	df000a04 	addi	fp,sp,40
1000ed74:	e13ffc15 	stw	r4,-16(fp)
1000ed78:	e17ffd15 	stw	r5,-12(fp)
1000ed7c:	e1bffe15 	stw	r6,-8(fp)
1000ed80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000ed84:	e03ff615 	stw	zero,-40(fp)
1000ed88:	00840074 	movhi	r2,4097
1000ed8c:	108df904 	addi	r2,r2,14308
1000ed90:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000ed94:	10003f26 	beq	r2,zero,1000ee94 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000ed98:	e0bffc17 	ldw	r2,-16(fp)
1000ed9c:	10003b26 	beq	r2,zero,1000ee8c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000eda0:	e0bffc17 	ldw	r2,-16(fp)
1000eda4:	e0fffe17 	ldw	r3,-8(fp)
1000eda8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000edac:	e0bffc17 	ldw	r2,-16(fp)
1000edb0:	e0ffff17 	ldw	r3,-4(fp)
1000edb4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000edb8:	0005303a 	rdctl	r2,status
1000edbc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000edc0:	e0fff817 	ldw	r3,-32(fp)
1000edc4:	00bfff84 	movi	r2,-2
1000edc8:	1884703a 	and	r2,r3,r2
1000edcc:	1001703a 	wrctl	status,r2
  
  return context;
1000edd0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000edd4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000edd8:	00840074 	movhi	r2,4097
1000eddc:	108dfa04 	addi	r2,r2,14312
1000ede0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000ede4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000ede8:	e0fffd17 	ldw	r3,-12(fp)
1000edec:	e0bff617 	ldw	r2,-40(fp)
1000edf0:	1885883a 	add	r2,r3,r2
1000edf4:	10c00044 	addi	r3,r2,1
1000edf8:	e0bffc17 	ldw	r2,-16(fp)
1000edfc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000ee00:	e0bffc17 	ldw	r2,-16(fp)
1000ee04:	10c00217 	ldw	r3,8(r2)
1000ee08:	e0bff617 	ldw	r2,-40(fp)
1000ee0c:	1880042e 	bgeu	r3,r2,1000ee20 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000ee10:	e0bffc17 	ldw	r2,-16(fp)
1000ee14:	00c00044 	movi	r3,1
1000ee18:	10c00405 	stb	r3,16(r2)
1000ee1c:	00000206 	br	1000ee28 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000ee20:	e0bffc17 	ldw	r2,-16(fp)
1000ee24:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000ee28:	e0bffc17 	ldw	r2,-16(fp)
1000ee2c:	00c40074 	movhi	r3,4097
1000ee30:	18c72f04 	addi	r3,r3,7356
1000ee34:	e0fff915 	stw	r3,-28(fp)
1000ee38:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ee3c:	e0bffa17 	ldw	r2,-24(fp)
1000ee40:	e0fff917 	ldw	r3,-28(fp)
1000ee44:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ee48:	e0bff917 	ldw	r2,-28(fp)
1000ee4c:	10c00017 	ldw	r3,0(r2)
1000ee50:	e0bffa17 	ldw	r2,-24(fp)
1000ee54:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ee58:	e0bff917 	ldw	r2,-28(fp)
1000ee5c:	10800017 	ldw	r2,0(r2)
1000ee60:	e0fffa17 	ldw	r3,-24(fp)
1000ee64:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ee68:	e0bff917 	ldw	r2,-28(fp)
1000ee6c:	e0fffa17 	ldw	r3,-24(fp)
1000ee70:	10c00015 	stw	r3,0(r2)
1000ee74:	e0bff717 	ldw	r2,-36(fp)
1000ee78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ee7c:	e0bffb17 	ldw	r2,-20(fp)
1000ee80:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000ee84:	0005883a 	mov	r2,zero
1000ee88:	00000306 	br	1000ee98 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000ee8c:	00bffa84 	movi	r2,-22
1000ee90:	00000106 	br	1000ee98 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000ee94:	00bfde84 	movi	r2,-134
  }
}
1000ee98:	e037883a 	mov	sp,fp
1000ee9c:	df000017 	ldw	fp,0(sp)
1000eea0:	dec00104 	addi	sp,sp,4
1000eea4:	f800283a 	ret

1000eea8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000eea8:	deffff04 	addi	sp,sp,-4
1000eeac:	df000015 	stw	fp,0(sp)
1000eeb0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000eeb4:	e037883a 	mov	sp,fp
1000eeb8:	df000017 	ldw	fp,0(sp)
1000eebc:	dec00104 	addi	sp,sp,4
1000eec0:	f800283a 	ret

1000eec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000eec4:	defffe04 	addi	sp,sp,-8
1000eec8:	dfc00115 	stw	ra,4(sp)
1000eecc:	df000015 	stw	fp,0(sp)
1000eed0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000eed4:	00840074 	movhi	r2,4097
1000eed8:	10872c04 	addi	r2,r2,7344
1000eedc:	10800017 	ldw	r2,0(r2)
1000eee0:	10000526 	beq	r2,zero,1000eef8 <alt_get_errno+0x34>
1000eee4:	00840074 	movhi	r2,4097
1000eee8:	10872c04 	addi	r2,r2,7344
1000eeec:	10800017 	ldw	r2,0(r2)
1000eef0:	103ee83a 	callr	r2
1000eef4:	00000206 	br	1000ef00 <alt_get_errno+0x3c>
1000eef8:	00840074 	movhi	r2,4097
1000eefc:	108df404 	addi	r2,r2,14288
}
1000ef00:	e037883a 	mov	sp,fp
1000ef04:	dfc00117 	ldw	ra,4(sp)
1000ef08:	df000017 	ldw	fp,0(sp)
1000ef0c:	dec00204 	addi	sp,sp,8
1000ef10:	f800283a 	ret

1000ef14 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000ef14:	defffa04 	addi	sp,sp,-24
1000ef18:	dfc00515 	stw	ra,20(sp)
1000ef1c:	df000415 	stw	fp,16(sp)
1000ef20:	df000404 	addi	fp,sp,16
1000ef24:	e13ffe15 	stw	r4,-8(fp)
1000ef28:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000ef2c:	e0bffe17 	ldw	r2,-8(fp)
1000ef30:	10000326 	beq	r2,zero,1000ef40 <alt_dev_llist_insert+0x2c>
1000ef34:	e0bffe17 	ldw	r2,-8(fp)
1000ef38:	10800217 	ldw	r2,8(r2)
1000ef3c:	1000051e 	bne	r2,zero,1000ef54 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
1000ef40:	000eec40 	call	1000eec4 <alt_get_errno>
1000ef44:	00c00584 	movi	r3,22
1000ef48:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
1000ef4c:	00bffa84 	movi	r2,-22
1000ef50:	00001306 	br	1000efa0 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000ef54:	e0bffe17 	ldw	r2,-8(fp)
1000ef58:	e0ffff17 	ldw	r3,-4(fp)
1000ef5c:	e0fffc15 	stw	r3,-16(fp)
1000ef60:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ef64:	e0bffd17 	ldw	r2,-12(fp)
1000ef68:	e0fffc17 	ldw	r3,-16(fp)
1000ef6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ef70:	e0bffc17 	ldw	r2,-16(fp)
1000ef74:	10c00017 	ldw	r3,0(r2)
1000ef78:	e0bffd17 	ldw	r2,-12(fp)
1000ef7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ef80:	e0bffc17 	ldw	r2,-16(fp)
1000ef84:	10800017 	ldw	r2,0(r2)
1000ef88:	e0fffd17 	ldw	r3,-12(fp)
1000ef8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ef90:	e0bffc17 	ldw	r2,-16(fp)
1000ef94:	e0fffd17 	ldw	r3,-12(fp)
1000ef98:	10c00015 	stw	r3,0(r2)

  return 0;  
1000ef9c:	0005883a 	mov	r2,zero
}
1000efa0:	e037883a 	mov	sp,fp
1000efa4:	dfc00117 	ldw	ra,4(sp)
1000efa8:	df000017 	ldw	fp,0(sp)
1000efac:	dec00204 	addi	sp,sp,8
1000efb0:	f800283a 	ret

1000efb4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000efb4:	defffd04 	addi	sp,sp,-12
1000efb8:	dfc00215 	stw	ra,8(sp)
1000efbc:	df000115 	stw	fp,4(sp)
1000efc0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000efc4:	00840074 	movhi	r2,4097
1000efc8:	10bfa904 	addi	r2,r2,-348
1000efcc:	e0bfff15 	stw	r2,-4(fp)
1000efd0:	00000606 	br	1000efec <_do_ctors+0x38>
        (*ctor) (); 
1000efd4:	e0bfff17 	ldw	r2,-4(fp)
1000efd8:	10800017 	ldw	r2,0(r2)
1000efdc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000efe0:	e0bfff17 	ldw	r2,-4(fp)
1000efe4:	10bfff04 	addi	r2,r2,-4
1000efe8:	e0bfff15 	stw	r2,-4(fp)
1000efec:	e0ffff17 	ldw	r3,-4(fp)
1000eff0:	00840074 	movhi	r2,4097
1000eff4:	10bfaa04 	addi	r2,r2,-344
1000eff8:	18bff62e 	bgeu	r3,r2,1000efd4 <__alt_data_end+0xf800efd4>
        (*ctor) (); 
}
1000effc:	e037883a 	mov	sp,fp
1000f000:	dfc00117 	ldw	ra,4(sp)
1000f004:	df000017 	ldw	fp,0(sp)
1000f008:	dec00204 	addi	sp,sp,8
1000f00c:	f800283a 	ret

1000f010 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000f010:	defffd04 	addi	sp,sp,-12
1000f014:	dfc00215 	stw	ra,8(sp)
1000f018:	df000115 	stw	fp,4(sp)
1000f01c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f020:	00840074 	movhi	r2,4097
1000f024:	10bfa904 	addi	r2,r2,-348
1000f028:	e0bfff15 	stw	r2,-4(fp)
1000f02c:	00000606 	br	1000f048 <_do_dtors+0x38>
        (*dtor) (); 
1000f030:	e0bfff17 	ldw	r2,-4(fp)
1000f034:	10800017 	ldw	r2,0(r2)
1000f038:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f03c:	e0bfff17 	ldw	r2,-4(fp)
1000f040:	10bfff04 	addi	r2,r2,-4
1000f044:	e0bfff15 	stw	r2,-4(fp)
1000f048:	e0ffff17 	ldw	r3,-4(fp)
1000f04c:	00840074 	movhi	r2,4097
1000f050:	10bfaa04 	addi	r2,r2,-344
1000f054:	18bff62e 	bgeu	r3,r2,1000f030 <__alt_data_end+0xf800f030>
        (*dtor) (); 
}
1000f058:	e037883a 	mov	sp,fp
1000f05c:	dfc00117 	ldw	ra,4(sp)
1000f060:	df000017 	ldw	fp,0(sp)
1000f064:	dec00204 	addi	sp,sp,8
1000f068:	f800283a 	ret

1000f06c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000f06c:	deffff04 	addi	sp,sp,-4
1000f070:	df000015 	stw	fp,0(sp)
1000f074:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000f078:	e037883a 	mov	sp,fp
1000f07c:	df000017 	ldw	fp,0(sp)
1000f080:	dec00104 	addi	sp,sp,4
1000f084:	f800283a 	ret

1000f088 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f088:	defff904 	addi	sp,sp,-28
1000f08c:	dfc00615 	stw	ra,24(sp)
1000f090:	df000515 	stw	fp,20(sp)
1000f094:	df000504 	addi	fp,sp,20
1000f098:	e13ffc15 	stw	r4,-16(fp)
1000f09c:	e17ffd15 	stw	r5,-12(fp)
1000f0a0:	e1bffe15 	stw	r6,-8(fp)
1000f0a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000f0a8:	e0800217 	ldw	r2,8(fp)
1000f0ac:	d8800015 	stw	r2,0(sp)
1000f0b0:	e13ffc17 	ldw	r4,-16(fp)
1000f0b4:	e17ffd17 	ldw	r5,-12(fp)
1000f0b8:	e1bffe17 	ldw	r6,-8(fp)
1000f0bc:	e1ffff17 	ldw	r7,-4(fp)
1000f0c0:	000f2600 	call	1000f260 <alt_iic_isr_register>
}  
1000f0c4:	e037883a 	mov	sp,fp
1000f0c8:	dfc00117 	ldw	ra,4(sp)
1000f0cc:	df000017 	ldw	fp,0(sp)
1000f0d0:	dec00204 	addi	sp,sp,8
1000f0d4:	f800283a 	ret

1000f0d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000f0d8:	defff904 	addi	sp,sp,-28
1000f0dc:	df000615 	stw	fp,24(sp)
1000f0e0:	df000604 	addi	fp,sp,24
1000f0e4:	e13ffe15 	stw	r4,-8(fp)
1000f0e8:	e17fff15 	stw	r5,-4(fp)
1000f0ec:	e0bfff17 	ldw	r2,-4(fp)
1000f0f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f0f4:	0005303a 	rdctl	r2,status
1000f0f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f0fc:	e0fffb17 	ldw	r3,-20(fp)
1000f100:	00bfff84 	movi	r2,-2
1000f104:	1884703a 	and	r2,r3,r2
1000f108:	1001703a 	wrctl	status,r2
  
  return context;
1000f10c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f110:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000f114:	e0bffa17 	ldw	r2,-24(fp)
1000f118:	00c00044 	movi	r3,1
1000f11c:	1884983a 	sll	r2,r3,r2
1000f120:	1007883a 	mov	r3,r2
1000f124:	00840074 	movhi	r2,4097
1000f128:	108df804 	addi	r2,r2,14304
1000f12c:	10800017 	ldw	r2,0(r2)
1000f130:	1886b03a 	or	r3,r3,r2
1000f134:	00840074 	movhi	r2,4097
1000f138:	108df804 	addi	r2,r2,14304
1000f13c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f140:	00840074 	movhi	r2,4097
1000f144:	108df804 	addi	r2,r2,14304
1000f148:	10800017 	ldw	r2,0(r2)
1000f14c:	100170fa 	wrctl	ienable,r2
1000f150:	e0bffc17 	ldw	r2,-16(fp)
1000f154:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f158:	e0bffd17 	ldw	r2,-12(fp)
1000f15c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f160:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
1000f164:	e037883a 	mov	sp,fp
1000f168:	df000017 	ldw	fp,0(sp)
1000f16c:	dec00104 	addi	sp,sp,4
1000f170:	f800283a 	ret

1000f174 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000f174:	defff904 	addi	sp,sp,-28
1000f178:	df000615 	stw	fp,24(sp)
1000f17c:	df000604 	addi	fp,sp,24
1000f180:	e13ffe15 	stw	r4,-8(fp)
1000f184:	e17fff15 	stw	r5,-4(fp)
1000f188:	e0bfff17 	ldw	r2,-4(fp)
1000f18c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f190:	0005303a 	rdctl	r2,status
1000f194:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f198:	e0fffb17 	ldw	r3,-20(fp)
1000f19c:	00bfff84 	movi	r2,-2
1000f1a0:	1884703a 	and	r2,r3,r2
1000f1a4:	1001703a 	wrctl	status,r2
  
  return context;
1000f1a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f1ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000f1b0:	e0bffa17 	ldw	r2,-24(fp)
1000f1b4:	00c00044 	movi	r3,1
1000f1b8:	1884983a 	sll	r2,r3,r2
1000f1bc:	0084303a 	nor	r2,zero,r2
1000f1c0:	1007883a 	mov	r3,r2
1000f1c4:	00840074 	movhi	r2,4097
1000f1c8:	108df804 	addi	r2,r2,14304
1000f1cc:	10800017 	ldw	r2,0(r2)
1000f1d0:	1886703a 	and	r3,r3,r2
1000f1d4:	00840074 	movhi	r2,4097
1000f1d8:	108df804 	addi	r2,r2,14304
1000f1dc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f1e0:	00840074 	movhi	r2,4097
1000f1e4:	108df804 	addi	r2,r2,14304
1000f1e8:	10800017 	ldw	r2,0(r2)
1000f1ec:	100170fa 	wrctl	ienable,r2
1000f1f0:	e0bffc17 	ldw	r2,-16(fp)
1000f1f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f1f8:	e0bffd17 	ldw	r2,-12(fp)
1000f1fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f200:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
1000f204:	e037883a 	mov	sp,fp
1000f208:	df000017 	ldw	fp,0(sp)
1000f20c:	dec00104 	addi	sp,sp,4
1000f210:	f800283a 	ret

1000f214 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000f214:	defffc04 	addi	sp,sp,-16
1000f218:	df000315 	stw	fp,12(sp)
1000f21c:	df000304 	addi	fp,sp,12
1000f220:	e13ffe15 	stw	r4,-8(fp)
1000f224:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000f228:	000530fa 	rdctl	r2,ienable
1000f22c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000f230:	e0bfff17 	ldw	r2,-4(fp)
1000f234:	00c00044 	movi	r3,1
1000f238:	1884983a 	sll	r2,r3,r2
1000f23c:	1007883a 	mov	r3,r2
1000f240:	e0bffd17 	ldw	r2,-12(fp)
1000f244:	1884703a 	and	r2,r3,r2
1000f248:	1004c03a 	cmpne	r2,r2,zero
1000f24c:	10803fcc 	andi	r2,r2,255
}
1000f250:	e037883a 	mov	sp,fp
1000f254:	df000017 	ldw	fp,0(sp)
1000f258:	dec00104 	addi	sp,sp,4
1000f25c:	f800283a 	ret

1000f260 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f260:	defff504 	addi	sp,sp,-44
1000f264:	dfc00a15 	stw	ra,40(sp)
1000f268:	df000915 	stw	fp,36(sp)
1000f26c:	df000904 	addi	fp,sp,36
1000f270:	e13ffc15 	stw	r4,-16(fp)
1000f274:	e17ffd15 	stw	r5,-12(fp)
1000f278:	e1bffe15 	stw	r6,-8(fp)
1000f27c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000f280:	00bffa84 	movi	r2,-22
1000f284:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000f288:	e0bffd17 	ldw	r2,-12(fp)
1000f28c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000f290:	e0bff817 	ldw	r2,-32(fp)
1000f294:	10800808 	cmpgei	r2,r2,32
1000f298:	1000271e 	bne	r2,zero,1000f338 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f29c:	0005303a 	rdctl	r2,status
1000f2a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f2a4:	e0fffa17 	ldw	r3,-24(fp)
1000f2a8:	00bfff84 	movi	r2,-2
1000f2ac:	1884703a 	and	r2,r3,r2
1000f2b0:	1001703a 	wrctl	status,r2
  
  return context;
1000f2b4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000f2b8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000f2bc:	00c40074 	movhi	r3,4097
1000f2c0:	18ce0504 	addi	r3,r3,14356
1000f2c4:	e0bff817 	ldw	r2,-32(fp)
1000f2c8:	100490fa 	slli	r2,r2,3
1000f2cc:	1885883a 	add	r2,r3,r2
1000f2d0:	e0fffe17 	ldw	r3,-8(fp)
1000f2d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000f2d8:	00c40074 	movhi	r3,4097
1000f2dc:	18ce0504 	addi	r3,r3,14356
1000f2e0:	e0bff817 	ldw	r2,-32(fp)
1000f2e4:	100490fa 	slli	r2,r2,3
1000f2e8:	1885883a 	add	r2,r3,r2
1000f2ec:	10800104 	addi	r2,r2,4
1000f2f0:	e0ffff17 	ldw	r3,-4(fp)
1000f2f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000f2f8:	e0bffe17 	ldw	r2,-8(fp)
1000f2fc:	10000526 	beq	r2,zero,1000f314 <alt_iic_isr_register+0xb4>
1000f300:	e0bff817 	ldw	r2,-32(fp)
1000f304:	e13ffc17 	ldw	r4,-16(fp)
1000f308:	100b883a 	mov	r5,r2
1000f30c:	000f0d80 	call	1000f0d8 <alt_ic_irq_enable>
1000f310:	00000406 	br	1000f324 <alt_iic_isr_register+0xc4>
1000f314:	e0bff817 	ldw	r2,-32(fp)
1000f318:	e13ffc17 	ldw	r4,-16(fp)
1000f31c:	100b883a 	mov	r5,r2
1000f320:	000f1740 	call	1000f174 <alt_ic_irq_disable>
1000f324:	e0bff715 	stw	r2,-36(fp)
1000f328:	e0bff917 	ldw	r2,-28(fp)
1000f32c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f330:	e0bffb17 	ldw	r2,-20(fp)
1000f334:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000f338:	e0bff717 	ldw	r2,-36(fp)
}
1000f33c:	e037883a 	mov	sp,fp
1000f340:	dfc00117 	ldw	ra,4(sp)
1000f344:	df000017 	ldw	fp,0(sp)
1000f348:	dec00204 	addi	sp,sp,8
1000f34c:	f800283a 	ret

1000f350 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000f350:	defff804 	addi	sp,sp,-32
1000f354:	dfc00715 	stw	ra,28(sp)
1000f358:	df000615 	stw	fp,24(sp)
1000f35c:	dc000515 	stw	r16,20(sp)
1000f360:	df000604 	addi	fp,sp,24
1000f364:	e13ffb15 	stw	r4,-20(fp)
1000f368:	e17ffc15 	stw	r5,-16(fp)
1000f36c:	e1bffd15 	stw	r6,-12(fp)
1000f370:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000f374:	e13ffc17 	ldw	r4,-16(fp)
1000f378:	e17ffd17 	ldw	r5,-12(fp)
1000f37c:	e1bffe17 	ldw	r6,-8(fp)
1000f380:	000f5ec0 	call	1000f5ec <open>
1000f384:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000f388:	e0bffa17 	ldw	r2,-24(fp)
1000f38c:	10002216 	blt	r2,zero,1000f418 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000f390:	04040074 	movhi	r16,4097
1000f394:	8402a704 	addi	r16,r16,2716
1000f398:	e0bffa17 	ldw	r2,-24(fp)
1000f39c:	1009883a 	mov	r4,r2
1000f3a0:	01400304 	movi	r5,12
1000f3a4:	000b0780 	call	1000b078 <__mulsi3>
1000f3a8:	8085883a 	add	r2,r16,r2
1000f3ac:	10c00017 	ldw	r3,0(r2)
1000f3b0:	e0bffb17 	ldw	r2,-20(fp)
1000f3b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000f3b8:	04040074 	movhi	r16,4097
1000f3bc:	8402a704 	addi	r16,r16,2716
1000f3c0:	e0bffa17 	ldw	r2,-24(fp)
1000f3c4:	1009883a 	mov	r4,r2
1000f3c8:	01400304 	movi	r5,12
1000f3cc:	000b0780 	call	1000b078 <__mulsi3>
1000f3d0:	8085883a 	add	r2,r16,r2
1000f3d4:	10800104 	addi	r2,r2,4
1000f3d8:	10c00017 	ldw	r3,0(r2)
1000f3dc:	e0bffb17 	ldw	r2,-20(fp)
1000f3e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000f3e4:	04040074 	movhi	r16,4097
1000f3e8:	8402a704 	addi	r16,r16,2716
1000f3ec:	e0bffa17 	ldw	r2,-24(fp)
1000f3f0:	1009883a 	mov	r4,r2
1000f3f4:	01400304 	movi	r5,12
1000f3f8:	000b0780 	call	1000b078 <__mulsi3>
1000f3fc:	8085883a 	add	r2,r16,r2
1000f400:	10800204 	addi	r2,r2,8
1000f404:	10c00017 	ldw	r3,0(r2)
1000f408:	e0bffb17 	ldw	r2,-20(fp)
1000f40c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000f410:	e13ffa17 	ldw	r4,-24(fp)
1000f414:	000e0080 	call	1000e008 <alt_release_fd>
  }
} 
1000f418:	e6ffff04 	addi	sp,fp,-4
1000f41c:	dfc00217 	ldw	ra,8(sp)
1000f420:	df000117 	ldw	fp,4(sp)
1000f424:	dc000017 	ldw	r16,0(sp)
1000f428:	dec00304 	addi	sp,sp,12
1000f42c:	f800283a 	ret

1000f430 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000f430:	defffb04 	addi	sp,sp,-20
1000f434:	dfc00415 	stw	ra,16(sp)
1000f438:	df000315 	stw	fp,12(sp)
1000f43c:	df000304 	addi	fp,sp,12
1000f440:	e13ffd15 	stw	r4,-12(fp)
1000f444:	e17ffe15 	stw	r5,-8(fp)
1000f448:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000f44c:	01040074 	movhi	r4,4097
1000f450:	2102aa04 	addi	r4,r4,2728
1000f454:	e17ffd17 	ldw	r5,-12(fp)
1000f458:	01800044 	movi	r6,1
1000f45c:	01c07fc4 	movi	r7,511
1000f460:	000f3500 	call	1000f350 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000f464:	01040074 	movhi	r4,4097
1000f468:	2102a704 	addi	r4,r4,2716
1000f46c:	e17ffe17 	ldw	r5,-8(fp)
1000f470:	000d883a 	mov	r6,zero
1000f474:	01c07fc4 	movi	r7,511
1000f478:	000f3500 	call	1000f350 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000f47c:	01040074 	movhi	r4,4097
1000f480:	2102ad04 	addi	r4,r4,2740
1000f484:	e17fff17 	ldw	r5,-4(fp)
1000f488:	01800044 	movi	r6,1
1000f48c:	01c07fc4 	movi	r7,511
1000f490:	000f3500 	call	1000f350 <alt_open_fd>
}  
1000f494:	e037883a 	mov	sp,fp
1000f498:	dfc00117 	ldw	ra,4(sp)
1000f49c:	df000017 	ldw	fp,0(sp)
1000f4a0:	dec00204 	addi	sp,sp,8
1000f4a4:	f800283a 	ret

1000f4a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f4a8:	defffe04 	addi	sp,sp,-8
1000f4ac:	dfc00115 	stw	ra,4(sp)
1000f4b0:	df000015 	stw	fp,0(sp)
1000f4b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f4b8:	00840074 	movhi	r2,4097
1000f4bc:	10872c04 	addi	r2,r2,7344
1000f4c0:	10800017 	ldw	r2,0(r2)
1000f4c4:	10000526 	beq	r2,zero,1000f4dc <alt_get_errno+0x34>
1000f4c8:	00840074 	movhi	r2,4097
1000f4cc:	10872c04 	addi	r2,r2,7344
1000f4d0:	10800017 	ldw	r2,0(r2)
1000f4d4:	103ee83a 	callr	r2
1000f4d8:	00000206 	br	1000f4e4 <alt_get_errno+0x3c>
1000f4dc:	00840074 	movhi	r2,4097
1000f4e0:	108df404 	addi	r2,r2,14288
}
1000f4e4:	e037883a 	mov	sp,fp
1000f4e8:	dfc00117 	ldw	ra,4(sp)
1000f4ec:	df000017 	ldw	fp,0(sp)
1000f4f0:	dec00204 	addi	sp,sp,8
1000f4f4:	f800283a 	ret

1000f4f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000f4f8:	defffb04 	addi	sp,sp,-20
1000f4fc:	dfc00415 	stw	ra,16(sp)
1000f500:	df000315 	stw	fp,12(sp)
1000f504:	dc000215 	stw	r16,8(sp)
1000f508:	df000304 	addi	fp,sp,12
1000f50c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000f510:	e0bffe17 	ldw	r2,-8(fp)
1000f514:	10800217 	ldw	r2,8(r2)
1000f518:	10d00034 	orhi	r3,r2,16384
1000f51c:	e0bffe17 	ldw	r2,-8(fp)
1000f520:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f524:	e03ffd15 	stw	zero,-12(fp)
1000f528:	00002306 	br	1000f5b8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f52c:	04040074 	movhi	r16,4097
1000f530:	8402a704 	addi	r16,r16,2716
1000f534:	e0bffd17 	ldw	r2,-12(fp)
1000f538:	1009883a 	mov	r4,r2
1000f53c:	01400304 	movi	r5,12
1000f540:	000b0780 	call	1000b078 <__mulsi3>
1000f544:	8085883a 	add	r2,r16,r2
1000f548:	10c00017 	ldw	r3,0(r2)
1000f54c:	e0bffe17 	ldw	r2,-8(fp)
1000f550:	10800017 	ldw	r2,0(r2)
1000f554:	1880151e 	bne	r3,r2,1000f5ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f558:	04040074 	movhi	r16,4097
1000f55c:	8402a704 	addi	r16,r16,2716
1000f560:	e0bffd17 	ldw	r2,-12(fp)
1000f564:	1009883a 	mov	r4,r2
1000f568:	01400304 	movi	r5,12
1000f56c:	000b0780 	call	1000b078 <__mulsi3>
1000f570:	8085883a 	add	r2,r16,r2
1000f574:	10800204 	addi	r2,r2,8
1000f578:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f57c:	10000b0e 	bge	r2,zero,1000f5ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000f580:	e13ffd17 	ldw	r4,-12(fp)
1000f584:	01400304 	movi	r5,12
1000f588:	000b0780 	call	1000b078 <__mulsi3>
1000f58c:	1007883a 	mov	r3,r2
1000f590:	00840074 	movhi	r2,4097
1000f594:	1082a704 	addi	r2,r2,2716
1000f598:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f59c:	e0bffe17 	ldw	r2,-8(fp)
1000f5a0:	18800226 	beq	r3,r2,1000f5ac <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000f5a4:	00bffcc4 	movi	r2,-13
1000f5a8:	00000a06 	br	1000f5d4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f5ac:	e0bffd17 	ldw	r2,-12(fp)
1000f5b0:	10800044 	addi	r2,r2,1
1000f5b4:	e0bffd15 	stw	r2,-12(fp)
1000f5b8:	00840074 	movhi	r2,4097
1000f5bc:	10872b04 	addi	r2,r2,7340
1000f5c0:	10800017 	ldw	r2,0(r2)
1000f5c4:	1007883a 	mov	r3,r2
1000f5c8:	e0bffd17 	ldw	r2,-12(fp)
1000f5cc:	18bfd72e 	bgeu	r3,r2,1000f52c <__alt_data_end+0xf800f52c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000f5d0:	0005883a 	mov	r2,zero
}
1000f5d4:	e6ffff04 	addi	sp,fp,-4
1000f5d8:	dfc00217 	ldw	ra,8(sp)
1000f5dc:	df000117 	ldw	fp,4(sp)
1000f5e0:	dc000017 	ldw	r16,0(sp)
1000f5e4:	dec00304 	addi	sp,sp,12
1000f5e8:	f800283a 	ret

1000f5ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000f5ec:	defff604 	addi	sp,sp,-40
1000f5f0:	dfc00915 	stw	ra,36(sp)
1000f5f4:	df000815 	stw	fp,32(sp)
1000f5f8:	df000804 	addi	fp,sp,32
1000f5fc:	e13ffd15 	stw	r4,-12(fp)
1000f600:	e17ffe15 	stw	r5,-8(fp)
1000f604:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000f608:	00bfffc4 	movi	r2,-1
1000f60c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000f610:	00bffb44 	movi	r2,-19
1000f614:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000f618:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000f61c:	e13ffd17 	ldw	r4,-12(fp)
1000f620:	01440074 	movhi	r5,4097
1000f624:	29472904 	addi	r5,r5,7332
1000f628:	000d9700 	call	1000d970 <alt_find_dev>
1000f62c:	e0bff815 	stw	r2,-32(fp)
1000f630:	e0bff817 	ldw	r2,-32(fp)
1000f634:	1000051e 	bne	r2,zero,1000f64c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000f638:	e13ffd17 	ldw	r4,-12(fp)
1000f63c:	000f9040 	call	1000f904 <alt_find_file>
1000f640:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000f644:	00800044 	movi	r2,1
1000f648:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000f64c:	e0bff817 	ldw	r2,-32(fp)
1000f650:	10002b26 	beq	r2,zero,1000f700 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000f654:	e13ff817 	ldw	r4,-32(fp)
1000f658:	000fa180 	call	1000fa18 <alt_get_fd>
1000f65c:	e0bff915 	stw	r2,-28(fp)
1000f660:	e0bff917 	ldw	r2,-28(fp)
1000f664:	1000030e 	bge	r2,zero,1000f674 <open+0x88>
    {
      status = index;
1000f668:	e0bff917 	ldw	r2,-28(fp)
1000f66c:	e0bffa15 	stw	r2,-24(fp)
1000f670:	00002506 	br	1000f708 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000f674:	e13ff917 	ldw	r4,-28(fp)
1000f678:	01400304 	movi	r5,12
1000f67c:	000b0780 	call	1000b078 <__mulsi3>
1000f680:	1007883a 	mov	r3,r2
1000f684:	00840074 	movhi	r2,4097
1000f688:	1082a704 	addi	r2,r2,2716
1000f68c:	1885883a 	add	r2,r3,r2
1000f690:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000f694:	e0fffe17 	ldw	r3,-8(fp)
1000f698:	00900034 	movhi	r2,16384
1000f69c:	10bfffc4 	addi	r2,r2,-1
1000f6a0:	1886703a 	and	r3,r3,r2
1000f6a4:	e0bffc17 	ldw	r2,-16(fp)
1000f6a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000f6ac:	e0bffb17 	ldw	r2,-20(fp)
1000f6b0:	1000051e 	bne	r2,zero,1000f6c8 <open+0xdc>
1000f6b4:	e13ffc17 	ldw	r4,-16(fp)
1000f6b8:	000f4f80 	call	1000f4f8 <alt_file_locked>
1000f6bc:	e0bffa15 	stw	r2,-24(fp)
1000f6c0:	e0bffa17 	ldw	r2,-24(fp)
1000f6c4:	10001016 	blt	r2,zero,1000f708 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000f6c8:	e0bff817 	ldw	r2,-32(fp)
1000f6cc:	10800317 	ldw	r2,12(r2)
1000f6d0:	10000826 	beq	r2,zero,1000f6f4 <open+0x108>
1000f6d4:	e0bff817 	ldw	r2,-32(fp)
1000f6d8:	10800317 	ldw	r2,12(r2)
1000f6dc:	e13ffc17 	ldw	r4,-16(fp)
1000f6e0:	e17ffd17 	ldw	r5,-12(fp)
1000f6e4:	e1bffe17 	ldw	r6,-8(fp)
1000f6e8:	e1ffff17 	ldw	r7,-4(fp)
1000f6ec:	103ee83a 	callr	r2
1000f6f0:	00000106 	br	1000f6f8 <open+0x10c>
1000f6f4:	0005883a 	mov	r2,zero
1000f6f8:	e0bffa15 	stw	r2,-24(fp)
1000f6fc:	00000206 	br	1000f708 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000f700:	00bffb44 	movi	r2,-19
1000f704:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000f708:	e0bffa17 	ldw	r2,-24(fp)
1000f70c:	1000080e 	bge	r2,zero,1000f730 <open+0x144>
  {
    alt_release_fd (index);  
1000f710:	e13ff917 	ldw	r4,-28(fp)
1000f714:	000e0080 	call	1000e008 <alt_release_fd>
    ALT_ERRNO = -status;
1000f718:	000f4a80 	call	1000f4a8 <alt_get_errno>
1000f71c:	e0fffa17 	ldw	r3,-24(fp)
1000f720:	00c7c83a 	sub	r3,zero,r3
1000f724:	10c00015 	stw	r3,0(r2)
    return -1;
1000f728:	00bfffc4 	movi	r2,-1
1000f72c:	00000106 	br	1000f734 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1000f730:	e0bff917 	ldw	r2,-28(fp)
}
1000f734:	e037883a 	mov	sp,fp
1000f738:	dfc00117 	ldw	ra,4(sp)
1000f73c:	df000017 	ldw	fp,0(sp)
1000f740:	dec00204 	addi	sp,sp,8
1000f744:	f800283a 	ret

1000f748 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000f748:	defffa04 	addi	sp,sp,-24
1000f74c:	df000515 	stw	fp,20(sp)
1000f750:	df000504 	addi	fp,sp,20
1000f754:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f758:	0005303a 	rdctl	r2,status
1000f75c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f760:	e0fffc17 	ldw	r3,-16(fp)
1000f764:	00bfff84 	movi	r2,-2
1000f768:	1884703a 	and	r2,r3,r2
1000f76c:	1001703a 	wrctl	status,r2
  
  return context;
1000f770:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000f774:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000f778:	e0bfff17 	ldw	r2,-4(fp)
1000f77c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000f780:	e0bffd17 	ldw	r2,-12(fp)
1000f784:	10800017 	ldw	r2,0(r2)
1000f788:	e0fffd17 	ldw	r3,-12(fp)
1000f78c:	18c00117 	ldw	r3,4(r3)
1000f790:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000f794:	e0bffd17 	ldw	r2,-12(fp)
1000f798:	10800117 	ldw	r2,4(r2)
1000f79c:	e0fffd17 	ldw	r3,-12(fp)
1000f7a0:	18c00017 	ldw	r3,0(r3)
1000f7a4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000f7a8:	e0bffd17 	ldw	r2,-12(fp)
1000f7ac:	e0fffd17 	ldw	r3,-12(fp)
1000f7b0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000f7b4:	e0bffd17 	ldw	r2,-12(fp)
1000f7b8:	e0fffd17 	ldw	r3,-12(fp)
1000f7bc:	10c00015 	stw	r3,0(r2)
1000f7c0:	e0bffb17 	ldw	r2,-20(fp)
1000f7c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f7c8:	e0bffe17 	ldw	r2,-8(fp)
1000f7cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000f7d0:	e037883a 	mov	sp,fp
1000f7d4:	df000017 	ldw	fp,0(sp)
1000f7d8:	dec00104 	addi	sp,sp,4
1000f7dc:	f800283a 	ret

1000f7e0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000f7e0:	defffb04 	addi	sp,sp,-20
1000f7e4:	dfc00415 	stw	ra,16(sp)
1000f7e8:	df000315 	stw	fp,12(sp)
1000f7ec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000f7f0:	d0a01017 	ldw	r2,-32704(gp)
1000f7f4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000f7f8:	d0a6db17 	ldw	r2,-25748(gp)
1000f7fc:	10800044 	addi	r2,r2,1
1000f800:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f804:	00002e06 	br	1000f8c0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000f808:	e0bffd17 	ldw	r2,-12(fp)
1000f80c:	10800017 	ldw	r2,0(r2)
1000f810:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000f814:	e0bffd17 	ldw	r2,-12(fp)
1000f818:	10800403 	ldbu	r2,16(r2)
1000f81c:	10803fcc 	andi	r2,r2,255
1000f820:	10000426 	beq	r2,zero,1000f834 <alt_tick+0x54>
1000f824:	d0a6db17 	ldw	r2,-25748(gp)
1000f828:	1000021e 	bne	r2,zero,1000f834 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000f82c:	e0bffd17 	ldw	r2,-12(fp)
1000f830:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000f834:	e0bffd17 	ldw	r2,-12(fp)
1000f838:	10800217 	ldw	r2,8(r2)
1000f83c:	d0e6db17 	ldw	r3,-25748(gp)
1000f840:	18801d36 	bltu	r3,r2,1000f8b8 <alt_tick+0xd8>
1000f844:	e0bffd17 	ldw	r2,-12(fp)
1000f848:	10800403 	ldbu	r2,16(r2)
1000f84c:	10803fcc 	andi	r2,r2,255
1000f850:	1000191e 	bne	r2,zero,1000f8b8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000f854:	e0bffd17 	ldw	r2,-12(fp)
1000f858:	10800317 	ldw	r2,12(r2)
1000f85c:	e0fffd17 	ldw	r3,-12(fp)
1000f860:	18c00517 	ldw	r3,20(r3)
1000f864:	1809883a 	mov	r4,r3
1000f868:	103ee83a 	callr	r2
1000f86c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000f870:	e0bfff17 	ldw	r2,-4(fp)
1000f874:	1000031e 	bne	r2,zero,1000f884 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000f878:	e13ffd17 	ldw	r4,-12(fp)
1000f87c:	000f7480 	call	1000f748 <alt_alarm_stop>
1000f880:	00000d06 	br	1000f8b8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000f884:	e0bffd17 	ldw	r2,-12(fp)
1000f888:	10c00217 	ldw	r3,8(r2)
1000f88c:	e0bfff17 	ldw	r2,-4(fp)
1000f890:	1887883a 	add	r3,r3,r2
1000f894:	e0bffd17 	ldw	r2,-12(fp)
1000f898:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000f89c:	e0bffd17 	ldw	r2,-12(fp)
1000f8a0:	10c00217 	ldw	r3,8(r2)
1000f8a4:	d0a6db17 	ldw	r2,-25748(gp)
1000f8a8:	1880032e 	bgeu	r3,r2,1000f8b8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000f8ac:	e0bffd17 	ldw	r2,-12(fp)
1000f8b0:	00c00044 	movi	r3,1
1000f8b4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000f8b8:	e0bffe17 	ldw	r2,-8(fp)
1000f8bc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f8c0:	e0fffd17 	ldw	r3,-12(fp)
1000f8c4:	d0a01004 	addi	r2,gp,-32704
1000f8c8:	18bfcf1e 	bne	r3,r2,1000f808 <__alt_data_end+0xf800f808>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000f8cc:	0001883a 	nop
}
1000f8d0:	e037883a 	mov	sp,fp
1000f8d4:	dfc00117 	ldw	ra,4(sp)
1000f8d8:	df000017 	ldw	fp,0(sp)
1000f8dc:	dec00204 	addi	sp,sp,8
1000f8e0:	f800283a 	ret

1000f8e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000f8e4:	deffff04 	addi	sp,sp,-4
1000f8e8:	df000015 	stw	fp,0(sp)
1000f8ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000f8f0:	000170fa 	wrctl	ienable,zero
}
1000f8f4:	e037883a 	mov	sp,fp
1000f8f8:	df000017 	ldw	fp,0(sp)
1000f8fc:	dec00104 	addi	sp,sp,4
1000f900:	f800283a 	ret

1000f904 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000f904:	defffb04 	addi	sp,sp,-20
1000f908:	dfc00415 	stw	ra,16(sp)
1000f90c:	df000315 	stw	fp,12(sp)
1000f910:	df000304 	addi	fp,sp,12
1000f914:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000f918:	00840074 	movhi	r2,4097
1000f91c:	10872704 	addi	r2,r2,7324
1000f920:	10800017 	ldw	r2,0(r2)
1000f924:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f928:	00003106 	br	1000f9f0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000f92c:	e0bffd17 	ldw	r2,-12(fp)
1000f930:	10800217 	ldw	r2,8(r2)
1000f934:	1009883a 	mov	r4,r2
1000f938:	00077640 	call	10007764 <strlen>
1000f93c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000f940:	e0bffd17 	ldw	r2,-12(fp)
1000f944:	10c00217 	ldw	r3,8(r2)
1000f948:	e0bffe17 	ldw	r2,-8(fp)
1000f94c:	10bfffc4 	addi	r2,r2,-1
1000f950:	1885883a 	add	r2,r3,r2
1000f954:	10800003 	ldbu	r2,0(r2)
1000f958:	10803fcc 	andi	r2,r2,255
1000f95c:	1080201c 	xori	r2,r2,128
1000f960:	10bfe004 	addi	r2,r2,-128
1000f964:	10800bd8 	cmpnei	r2,r2,47
1000f968:	1000031e 	bne	r2,zero,1000f978 <alt_find_file+0x74>
    {
      len -= 1;
1000f96c:	e0bffe17 	ldw	r2,-8(fp)
1000f970:	10bfffc4 	addi	r2,r2,-1
1000f974:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f978:	e0bffe17 	ldw	r2,-8(fp)
1000f97c:	e0ffff17 	ldw	r3,-4(fp)
1000f980:	1885883a 	add	r2,r3,r2
1000f984:	10800003 	ldbu	r2,0(r2)
1000f988:	10803fcc 	andi	r2,r2,255
1000f98c:	1080201c 	xori	r2,r2,128
1000f990:	10bfe004 	addi	r2,r2,-128
1000f994:	10800be0 	cmpeqi	r2,r2,47
1000f998:	1000081e 	bne	r2,zero,1000f9bc <alt_find_file+0xb8>
1000f99c:	e0bffe17 	ldw	r2,-8(fp)
1000f9a0:	e0ffff17 	ldw	r3,-4(fp)
1000f9a4:	1885883a 	add	r2,r3,r2
1000f9a8:	10800003 	ldbu	r2,0(r2)
1000f9ac:	10803fcc 	andi	r2,r2,255
1000f9b0:	1080201c 	xori	r2,r2,128
1000f9b4:	10bfe004 	addi	r2,r2,-128
1000f9b8:	10000a1e 	bne	r2,zero,1000f9e4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000f9bc:	e0bffd17 	ldw	r2,-12(fp)
1000f9c0:	10c00217 	ldw	r3,8(r2)
1000f9c4:	e0bffe17 	ldw	r2,-8(fp)
1000f9c8:	1809883a 	mov	r4,r3
1000f9cc:	e17fff17 	ldw	r5,-4(fp)
1000f9d0:	100d883a 	mov	r6,r2
1000f9d4:	000fb380 	call	1000fb38 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f9d8:	1000021e 	bne	r2,zero,1000f9e4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000f9dc:	e0bffd17 	ldw	r2,-12(fp)
1000f9e0:	00000806 	br	1000fa04 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000f9e4:	e0bffd17 	ldw	r2,-12(fp)
1000f9e8:	10800017 	ldw	r2,0(r2)
1000f9ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f9f0:	e0fffd17 	ldw	r3,-12(fp)
1000f9f4:	00840074 	movhi	r2,4097
1000f9f8:	10872704 	addi	r2,r2,7324
1000f9fc:	18bfcb1e 	bne	r3,r2,1000f92c <__alt_data_end+0xf800f92c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000fa00:	0005883a 	mov	r2,zero
}
1000fa04:	e037883a 	mov	sp,fp
1000fa08:	dfc00117 	ldw	ra,4(sp)
1000fa0c:	df000017 	ldw	fp,0(sp)
1000fa10:	dec00204 	addi	sp,sp,8
1000fa14:	f800283a 	ret

1000fa18 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000fa18:	defffa04 	addi	sp,sp,-24
1000fa1c:	dfc00515 	stw	ra,20(sp)
1000fa20:	df000415 	stw	fp,16(sp)
1000fa24:	dc000315 	stw	r16,12(sp)
1000fa28:	df000404 	addi	fp,sp,16
1000fa2c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000fa30:	00bffa04 	movi	r2,-24
1000fa34:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000fa38:	e03ffc15 	stw	zero,-16(fp)
1000fa3c:	00002106 	br	1000fac4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000fa40:	04040074 	movhi	r16,4097
1000fa44:	8402a704 	addi	r16,r16,2716
1000fa48:	e0bffc17 	ldw	r2,-16(fp)
1000fa4c:	1009883a 	mov	r4,r2
1000fa50:	01400304 	movi	r5,12
1000fa54:	000b0780 	call	1000b078 <__mulsi3>
1000fa58:	8085883a 	add	r2,r16,r2
1000fa5c:	10800017 	ldw	r2,0(r2)
1000fa60:	1000151e 	bne	r2,zero,1000fab8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000fa64:	04040074 	movhi	r16,4097
1000fa68:	8402a704 	addi	r16,r16,2716
1000fa6c:	e0bffc17 	ldw	r2,-16(fp)
1000fa70:	1009883a 	mov	r4,r2
1000fa74:	01400304 	movi	r5,12
1000fa78:	000b0780 	call	1000b078 <__mulsi3>
1000fa7c:	8085883a 	add	r2,r16,r2
1000fa80:	e0fffe17 	ldw	r3,-8(fp)
1000fa84:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000fa88:	00840074 	movhi	r2,4097
1000fa8c:	10872b04 	addi	r2,r2,7340
1000fa90:	10c00017 	ldw	r3,0(r2)
1000fa94:	e0bffc17 	ldw	r2,-16(fp)
1000fa98:	1880040e 	bge	r3,r2,1000faac <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000fa9c:	00840074 	movhi	r2,4097
1000faa0:	10872b04 	addi	r2,r2,7340
1000faa4:	e0fffc17 	ldw	r3,-16(fp)
1000faa8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000faac:	e0bffc17 	ldw	r2,-16(fp)
1000fab0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000fab4:	00000606 	br	1000fad0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000fab8:	e0bffc17 	ldw	r2,-16(fp)
1000fabc:	10800044 	addi	r2,r2,1
1000fac0:	e0bffc15 	stw	r2,-16(fp)
1000fac4:	e0bffc17 	ldw	r2,-16(fp)
1000fac8:	10800810 	cmplti	r2,r2,32
1000facc:	103fdc1e 	bne	r2,zero,1000fa40 <__alt_data_end+0xf800fa40>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000fad0:	e0bffd17 	ldw	r2,-12(fp)
}
1000fad4:	e6ffff04 	addi	sp,fp,-4
1000fad8:	dfc00217 	ldw	ra,8(sp)
1000fadc:	df000117 	ldw	fp,4(sp)
1000fae0:	dc000017 	ldw	r16,0(sp)
1000fae4:	dec00304 	addi	sp,sp,12
1000fae8:	f800283a 	ret

1000faec <atexit>:
1000faec:	200b883a 	mov	r5,r4
1000faf0:	000d883a 	mov	r6,zero
1000faf4:	0009883a 	mov	r4,zero
1000faf8:	000f883a 	mov	r7,zero
1000fafc:	000fbb41 	jmpi	1000fbb4 <__register_exitproc>

1000fb00 <exit>:
1000fb00:	defffe04 	addi	sp,sp,-8
1000fb04:	000b883a 	mov	r5,zero
1000fb08:	dc000015 	stw	r16,0(sp)
1000fb0c:	dfc00115 	stw	ra,4(sp)
1000fb10:	2021883a 	mov	r16,r4
1000fb14:	000fcd00 	call	1000fcd0 <__call_exitprocs>
1000fb18:	00840074 	movhi	r2,4097
1000fb1c:	10872104 	addi	r2,r2,7300
1000fb20:	11000017 	ldw	r4,0(r2)
1000fb24:	20800f17 	ldw	r2,60(r4)
1000fb28:	10000126 	beq	r2,zero,1000fb30 <exit+0x30>
1000fb2c:	103ee83a 	callr	r2
1000fb30:	8009883a 	mov	r4,r16
1000fb34:	000fe740 	call	1000fe74 <_exit>

1000fb38 <memcmp>:
1000fb38:	01c000c4 	movi	r7,3
1000fb3c:	3980192e 	bgeu	r7,r6,1000fba4 <memcmp+0x6c>
1000fb40:	2144b03a 	or	r2,r4,r5
1000fb44:	11c4703a 	and	r2,r2,r7
1000fb48:	10000f26 	beq	r2,zero,1000fb88 <memcmp+0x50>
1000fb4c:	21c00003 	ldbu	r7,0(r4)
1000fb50:	28800003 	ldbu	r2,0(r5)
1000fb54:	3880151e 	bne	r7,r2,1000fbac <memcmp+0x74>
1000fb58:	30ffff84 	addi	r3,r6,-2
1000fb5c:	01bfffc4 	movi	r6,-1
1000fb60:	00000406 	br	1000fb74 <memcmp+0x3c>
1000fb64:	21c00003 	ldbu	r7,0(r4)
1000fb68:	28800003 	ldbu	r2,0(r5)
1000fb6c:	18ffffc4 	addi	r3,r3,-1
1000fb70:	38800e1e 	bne	r7,r2,1000fbac <memcmp+0x74>
1000fb74:	21000044 	addi	r4,r4,1
1000fb78:	29400044 	addi	r5,r5,1
1000fb7c:	19bff91e 	bne	r3,r6,1000fb64 <__alt_data_end+0xf800fb64>
1000fb80:	0005883a 	mov	r2,zero
1000fb84:	f800283a 	ret
1000fb88:	20c00017 	ldw	r3,0(r4)
1000fb8c:	28800017 	ldw	r2,0(r5)
1000fb90:	1880041e 	bne	r3,r2,1000fba4 <memcmp+0x6c>
1000fb94:	31bfff04 	addi	r6,r6,-4
1000fb98:	21000104 	addi	r4,r4,4
1000fb9c:	29400104 	addi	r5,r5,4
1000fba0:	39bff936 	bltu	r7,r6,1000fb88 <__alt_data_end+0xf800fb88>
1000fba4:	303fe91e 	bne	r6,zero,1000fb4c <__alt_data_end+0xf800fb4c>
1000fba8:	003ff506 	br	1000fb80 <__alt_data_end+0xf800fb80>
1000fbac:	3885c83a 	sub	r2,r7,r2
1000fbb0:	f800283a 	ret

1000fbb4 <__register_exitproc>:
1000fbb4:	defffa04 	addi	sp,sp,-24
1000fbb8:	00840074 	movhi	r2,4097
1000fbbc:	10872104 	addi	r2,r2,7300
1000fbc0:	dc000315 	stw	r16,12(sp)
1000fbc4:	14000017 	ldw	r16,0(r2)
1000fbc8:	dc400415 	stw	r17,16(sp)
1000fbcc:	dfc00515 	stw	ra,20(sp)
1000fbd0:	80805217 	ldw	r2,328(r16)
1000fbd4:	2023883a 	mov	r17,r4
1000fbd8:	10003a26 	beq	r2,zero,1000fcc4 <__register_exitproc+0x110>
1000fbdc:	10c00117 	ldw	r3,4(r2)
1000fbe0:	020007c4 	movi	r8,31
1000fbe4:	40c0190e 	bge	r8,r3,1000fc4c <__register_exitproc+0x98>
1000fbe8:	00800034 	movhi	r2,0
1000fbec:	10800004 	addi	r2,r2,0
1000fbf0:	1000061e 	bne	r2,zero,1000fc0c <__register_exitproc+0x58>
1000fbf4:	00bfffc4 	movi	r2,-1
1000fbf8:	dfc00517 	ldw	ra,20(sp)
1000fbfc:	dc400417 	ldw	r17,16(sp)
1000fc00:	dc000317 	ldw	r16,12(sp)
1000fc04:	dec00604 	addi	sp,sp,24
1000fc08:	f800283a 	ret
1000fc0c:	01006404 	movi	r4,400
1000fc10:	d9400015 	stw	r5,0(sp)
1000fc14:	d9800115 	stw	r6,4(sp)
1000fc18:	d9c00215 	stw	r7,8(sp)
1000fc1c:	00000000 	call	10000000 <__reset>
1000fc20:	d9400017 	ldw	r5,0(sp)
1000fc24:	d9800117 	ldw	r6,4(sp)
1000fc28:	d9c00217 	ldw	r7,8(sp)
1000fc2c:	103ff126 	beq	r2,zero,1000fbf4 <__alt_data_end+0xf800fbf4>
1000fc30:	81005217 	ldw	r4,328(r16)
1000fc34:	10000115 	stw	zero,4(r2)
1000fc38:	0007883a 	mov	r3,zero
1000fc3c:	11000015 	stw	r4,0(r2)
1000fc40:	80805215 	stw	r2,328(r16)
1000fc44:	10006215 	stw	zero,392(r2)
1000fc48:	10006315 	stw	zero,396(r2)
1000fc4c:	88000d1e 	bne	r17,zero,1000fc84 <__register_exitproc+0xd0>
1000fc50:	19000084 	addi	r4,r3,2
1000fc54:	2109883a 	add	r4,r4,r4
1000fc58:	18c00044 	addi	r3,r3,1
1000fc5c:	2109883a 	add	r4,r4,r4
1000fc60:	10c00115 	stw	r3,4(r2)
1000fc64:	1105883a 	add	r2,r2,r4
1000fc68:	11400015 	stw	r5,0(r2)
1000fc6c:	0005883a 	mov	r2,zero
1000fc70:	dfc00517 	ldw	ra,20(sp)
1000fc74:	dc400417 	ldw	r17,16(sp)
1000fc78:	dc000317 	ldw	r16,12(sp)
1000fc7c:	dec00604 	addi	sp,sp,24
1000fc80:	f800283a 	ret
1000fc84:	18c9883a 	add	r4,r3,r3
1000fc88:	2109883a 	add	r4,r4,r4
1000fc8c:	1109883a 	add	r4,r2,r4
1000fc90:	21802215 	stw	r6,136(r4)
1000fc94:	01800044 	movi	r6,1
1000fc98:	12006217 	ldw	r8,392(r2)
1000fc9c:	30cc983a 	sll	r6,r6,r3
1000fca0:	4190b03a 	or	r8,r8,r6
1000fca4:	12006215 	stw	r8,392(r2)
1000fca8:	21c04215 	stw	r7,264(r4)
1000fcac:	01000084 	movi	r4,2
1000fcb0:	893fe71e 	bne	r17,r4,1000fc50 <__alt_data_end+0xf800fc50>
1000fcb4:	11006317 	ldw	r4,396(r2)
1000fcb8:	218cb03a 	or	r6,r4,r6
1000fcbc:	11806315 	stw	r6,396(r2)
1000fcc0:	003fe306 	br	1000fc50 <__alt_data_end+0xf800fc50>
1000fcc4:	80805304 	addi	r2,r16,332
1000fcc8:	80805215 	stw	r2,328(r16)
1000fccc:	003fc306 	br	1000fbdc <__alt_data_end+0xf800fbdc>

1000fcd0 <__call_exitprocs>:
1000fcd0:	00840074 	movhi	r2,4097
1000fcd4:	10872104 	addi	r2,r2,7300
1000fcd8:	10800017 	ldw	r2,0(r2)
1000fcdc:	defff304 	addi	sp,sp,-52
1000fce0:	df000b15 	stw	fp,44(sp)
1000fce4:	d8800015 	stw	r2,0(sp)
1000fce8:	10805204 	addi	r2,r2,328
1000fcec:	dd400815 	stw	r21,32(sp)
1000fcf0:	dfc00c15 	stw	ra,48(sp)
1000fcf4:	ddc00a15 	stw	r23,40(sp)
1000fcf8:	dd800915 	stw	r22,36(sp)
1000fcfc:	dd000715 	stw	r20,28(sp)
1000fd00:	dcc00615 	stw	r19,24(sp)
1000fd04:	dc800515 	stw	r18,20(sp)
1000fd08:	dc400415 	stw	r17,16(sp)
1000fd0c:	dc000315 	stw	r16,12(sp)
1000fd10:	d9000115 	stw	r4,4(sp)
1000fd14:	2839883a 	mov	fp,r5
1000fd18:	d8800215 	stw	r2,8(sp)
1000fd1c:	057fffc4 	movi	r21,-1
1000fd20:	d8800017 	ldw	r2,0(sp)
1000fd24:	14805217 	ldw	r18,328(r2)
1000fd28:	90001826 	beq	r18,zero,1000fd8c <__call_exitprocs+0xbc>
1000fd2c:	ddc00217 	ldw	r23,8(sp)
1000fd30:	90c00117 	ldw	r3,4(r18)
1000fd34:	1c3fffc4 	addi	r16,r3,-1
1000fd38:	80001116 	blt	r16,zero,1000fd80 <__call_exitprocs+0xb0>
1000fd3c:	18c00044 	addi	r3,r3,1
1000fd40:	8427883a 	add	r19,r16,r16
1000fd44:	18c7883a 	add	r3,r3,r3
1000fd48:	95802204 	addi	r22,r18,136
1000fd4c:	9ce7883a 	add	r19,r19,r19
1000fd50:	18c7883a 	add	r3,r3,r3
1000fd54:	b4e7883a 	add	r19,r22,r19
1000fd58:	90e3883a 	add	r17,r18,r3
1000fd5c:	e0001726 	beq	fp,zero,1000fdbc <__call_exitprocs+0xec>
1000fd60:	8c87c83a 	sub	r3,r17,r18
1000fd64:	b0c7883a 	add	r3,r22,r3
1000fd68:	18c01e17 	ldw	r3,120(r3)
1000fd6c:	1f001326 	beq	r3,fp,1000fdbc <__call_exitprocs+0xec>
1000fd70:	843fffc4 	addi	r16,r16,-1
1000fd74:	9cffff04 	addi	r19,r19,-4
1000fd78:	8c7fff04 	addi	r17,r17,-4
1000fd7c:	857ff71e 	bne	r16,r21,1000fd5c <__alt_data_end+0xf800fd5c>
1000fd80:	00800034 	movhi	r2,0
1000fd84:	10800004 	addi	r2,r2,0
1000fd88:	10002a1e 	bne	r2,zero,1000fe34 <__call_exitprocs+0x164>
1000fd8c:	dfc00c17 	ldw	ra,48(sp)
1000fd90:	df000b17 	ldw	fp,44(sp)
1000fd94:	ddc00a17 	ldw	r23,40(sp)
1000fd98:	dd800917 	ldw	r22,36(sp)
1000fd9c:	dd400817 	ldw	r21,32(sp)
1000fda0:	dd000717 	ldw	r20,28(sp)
1000fda4:	dcc00617 	ldw	r19,24(sp)
1000fda8:	dc800517 	ldw	r18,20(sp)
1000fdac:	dc400417 	ldw	r17,16(sp)
1000fdb0:	dc000317 	ldw	r16,12(sp)
1000fdb4:	dec00d04 	addi	sp,sp,52
1000fdb8:	f800283a 	ret
1000fdbc:	91000117 	ldw	r4,4(r18)
1000fdc0:	88c00017 	ldw	r3,0(r17)
1000fdc4:	213fffc4 	addi	r4,r4,-1
1000fdc8:	24001526 	beq	r4,r16,1000fe20 <__call_exitprocs+0x150>
1000fdcc:	88000015 	stw	zero,0(r17)
1000fdd0:	183fe726 	beq	r3,zero,1000fd70 <__alt_data_end+0xf800fd70>
1000fdd4:	00800044 	movi	r2,1
1000fdd8:	1408983a 	sll	r4,r2,r16
1000fddc:	91406217 	ldw	r5,392(r18)
1000fde0:	95000117 	ldw	r20,4(r18)
1000fde4:	214a703a 	and	r5,r4,r5
1000fde8:	28000b26 	beq	r5,zero,1000fe18 <__call_exitprocs+0x148>
1000fdec:	91406317 	ldw	r5,396(r18)
1000fdf0:	2148703a 	and	r4,r4,r5
1000fdf4:	20000c1e 	bne	r4,zero,1000fe28 <__call_exitprocs+0x158>
1000fdf8:	99400017 	ldw	r5,0(r19)
1000fdfc:	d9000117 	ldw	r4,4(sp)
1000fe00:	183ee83a 	callr	r3
1000fe04:	90c00117 	ldw	r3,4(r18)
1000fe08:	1d3fc51e 	bne	r3,r20,1000fd20 <__alt_data_end+0xf800fd20>
1000fe0c:	b8c00017 	ldw	r3,0(r23)
1000fe10:	1cbfd726 	beq	r3,r18,1000fd70 <__alt_data_end+0xf800fd70>
1000fe14:	003fc206 	br	1000fd20 <__alt_data_end+0xf800fd20>
1000fe18:	183ee83a 	callr	r3
1000fe1c:	003ff906 	br	1000fe04 <__alt_data_end+0xf800fe04>
1000fe20:	94000115 	stw	r16,4(r18)
1000fe24:	003fea06 	br	1000fdd0 <__alt_data_end+0xf800fdd0>
1000fe28:	99000017 	ldw	r4,0(r19)
1000fe2c:	183ee83a 	callr	r3
1000fe30:	003ff406 	br	1000fe04 <__alt_data_end+0xf800fe04>
1000fe34:	90c00117 	ldw	r3,4(r18)
1000fe38:	1800081e 	bne	r3,zero,1000fe5c <__call_exitprocs+0x18c>
1000fe3c:	90c00017 	ldw	r3,0(r18)
1000fe40:	18000a26 	beq	r3,zero,1000fe6c <__call_exitprocs+0x19c>
1000fe44:	9009883a 	mov	r4,r18
1000fe48:	b8c00015 	stw	r3,0(r23)
1000fe4c:	00000000 	call	10000000 <__reset>
1000fe50:	bc800017 	ldw	r18,0(r23)
1000fe54:	903fb61e 	bne	r18,zero,1000fd30 <__alt_data_end+0xf800fd30>
1000fe58:	003fcc06 	br	1000fd8c <__alt_data_end+0xf800fd8c>
1000fe5c:	90c00017 	ldw	r3,0(r18)
1000fe60:	902f883a 	mov	r23,r18
1000fe64:	1825883a 	mov	r18,r3
1000fe68:	003ffa06 	br	1000fe54 <__alt_data_end+0xf800fe54>
1000fe6c:	0007883a 	mov	r3,zero
1000fe70:	003ffb06 	br	1000fe60 <__alt_data_end+0xf800fe60>

1000fe74 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000fe74:	defffd04 	addi	sp,sp,-12
1000fe78:	df000215 	stw	fp,8(sp)
1000fe7c:	df000204 	addi	fp,sp,8
1000fe80:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000fe84:	0001883a 	nop
1000fe88:	e0bfff17 	ldw	r2,-4(fp)
1000fe8c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000fe90:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000fe94:	10000226 	beq	r2,zero,1000fea0 <_exit+0x2c>
    ALT_SIM_FAIL();
1000fe98:	002af070 	cmpltui	zero,zero,43969
1000fe9c:	00000106 	br	1000fea4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000fea0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000fea4:	003fff06 	br	1000fea4 <__alt_data_end+0xf800fea4>
