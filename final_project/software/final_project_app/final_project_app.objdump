
final_project_app.elf:     file format elf32-littlenios2
final_project_app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00010030 memsz 0x00010030 flags r-x
    LOAD off    0x00011050 vaddr 0x10010050 paddr 0x10011b44 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013638 vaddr 0x10013638 paddr 0x10013638 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fb6c  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000328  1000fd28  1000fd28  00010d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  10010050  10011b44  00011050  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  10013638  10013638  00013638  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00012b44  2**0
                  CONTENTS
  7 .sdram        00000000  10013794  10013794  00012b44  2**0
                  CONTENTS
  8 .comment      00000039  00000000  00000000  00012b44  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cc8  00000000  00000000  00012b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023204  00000000  00000000  00013848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008cad  00000000  00000000  00036a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ad36  00000000  00000000  0003f6f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000023a0  00000000  00000000  0004a430  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003414  00000000  00000000  0004c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016f95  00000000  00000000  0004fbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00066b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001338  00000000  00000000  00066b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006b424  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006b427  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006b433  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006b434  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006b435  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006b439  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006b43d  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006b441  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006b44c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006b457  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0006b462  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003c  00000000  00000000  0006b473  2**0
                  CONTENTS, READONLY
 30 .jdi          000047d7  00000000  00000000  0006b4af  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00063454  00000000  00000000  0006fc86  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
1000fd28 l    d  .rodata	00000000 .rodata
10010050 l    d  .rwdata	00000000 .rwdata
10013638 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10013794 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_app_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 audIO.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000fd96 l     O .rodata	00000010 zeroes.4155
1000fda6 l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100031d4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10004cac l     F .text	00000008 __fp_lock
10004cb4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10010050 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10010494 l     O .rwdata	00000020 lc_ctype_charset
10010474 l     O .rwdata	00000020 lc_message_charset
100104b4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1000fdd8 l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10007670 l     F .text	000000fc __sprint_r.part.0
1000ff0c l     O .rodata	00000010 blanks.4099
1000fefc l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000ade4 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000d6a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000d7c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000d880 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000d984 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000da7c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000db60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000dd40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10011b34 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000dfb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000e0fc l     F .text	00000038 alt_dev_reg
10010a9c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000e3d4 l     F .text	000001fc altera_avalon_jtag_uart_irq
1000e5d0 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000ed44 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000f1d0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000f328 l     F .text	00000050 alt_get_errno
1000f378 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
100071c4 g     F .text	00000074 _mprec_log10
100072b0 g     F .text	00000088 __any_on
100095e4 g     F .text	00000064 _isatty_r
1000fde4 g     O .rodata	00000028 __mprec_tinytens
1000dc88 g     F .text	00000078 alt_main
10013694 g     O .bss	00000100 alt_irq
10009648 g     F .text	0000006c _lseek_r
10011b44 g       *ABS*	00000000 __flash_rwdata_start
1000c138 g     F .text	00000084 .hidden __eqdf2
10000478 g     F .text	00000060 alt_up_audio_read_fifo_avail
10013794 g       *ABS*	00000000 __alt_heap_start
10000ee8 g     F .text	0000003c printf
100004d8 g     F .text	00000068 alt_up_audio_record_r
10009f5c g     F .text	0000009c _wcrtomb_r
100074dc g     F .text	0000005c __sseek
10004d58 g     F .text	0000019c __sinit
10009dc0 g     F .text	00000180 __swbuf_r
100055bc g     F .text	00000070 _setlocale_r
10004cc8 g     F .text	00000078 __sfmoreglue
1000dd20 g     F .text	00000020 __malloc_unlock
100003f0 g     F .text	00000088 alt_up_audio_reset_audio_core
10000be4 g     F .text	00000044 audio_read_fifo_head
10000c28 g     F .text	00000050 audio_write_fifo_head
100096b4 g     F .text	0000013c memmove
10004d40 g     F .text	00000018 _cleanup
10000d88 g     F .text	0000005c audio_play_r
10006310 g     F .text	000000a8 _Balloc
10000c78 g     F .text	0000005c audio_record_r
1000c1bc g     F .text	000000d8 .hidden __gtdf2
1000f764 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100090d0 g     F .text	00000068 _fstat_r
10013650 g     O .bss	00000004 errno
10007458 g     F .text	00000008 __seofread
100003b0 g     F .text	00000040 alt_up_audio_write_interrupt_pending
10013658 g     O .bss	00000004 alt_argv
10019afc g       *ABS*	00000000 _gp
10000afc g     F .text	000000e8 audio_write_fifo
1001091c g     O .rwdata	00000180 alt_fd_list
1000d7f0 g     F .text	00000090 alt_find_dev
100060f0 g     F .text	0000010c memcpy
10004cbc g     F .text	0000000c _cleanup_r
1000d488 g     F .text	000000d0 .hidden __floatsidf
1000f2b0 g     F .text	00000078 alt_io_redirect
1000c294 g     F .text	000000ec .hidden __ltdf2
1000fd28 g       *ABS*	00000000 __DTOR_END__
10011b00 g     O .rwdata	00000004 AUDIO_CONFIG
10007338 g     F .text	00000068 __fpclassifyd
10007124 g     F .text	000000a0 __ratio
10008bcc g     F .text	00000024 __vfiprintf_internal
100008b4 g     F .text	00000050 alt_up_audio_read_fifo_head
1000e7c8 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10000ebc g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000aee8 g     F .text	00000008 .hidden __udivsi3
1000d9d4 g     F .text	000000a8 isatty
1000fe34 g     O .rodata	000000c8 __mprec_tens
1000562c g     F .text	0000000c __locale_charset
1001364c g     O .bss	00000004 __malloc_top_pad
10011b0c g     O .rwdata	00000004 __mb_cur_max
1000565c g     F .text	0000000c _localeconv_r
10009138 g     F .text	000004ac __sfvwrite_r
10006740 g     F .text	0000003c __i2b
100073a0 g     F .text	00000064 _sbrk_r
100097f0 g     F .text	0000006c _read_r
10011b2c g     O .rwdata	00000004 alt_max_fd
10000904 g     F .text	0000005c alt_up_audio_write_fifo_head
10008d98 g     F .text	00000128 _fclose_r
10004c7c g     F .text	00000030 fflush
10013648 g     O .bss	00000004 __malloc_max_sbrked_mem
1000af20 g     F .text	0000087c .hidden __adddf3
10006ef0 g     F .text	000000f0 __b2d
1000a7b0 g     F .text	00000634 .hidden __umoddi3
1000dbb0 g     F .text	000000d8 lseek
10011b04 g     O .rwdata	00000004 _global_impure_ptr
1000985c g     F .text	00000564 _realloc_r
10013794 g       *ABS*	00000000 __bss_end
1000f0e0 g     F .text	000000f0 alt_iic_isr_register
1000f660 g     F .text	00000104 alt_tick
1000a15c g     F .text	00000654 .hidden __udivdi3
10008ed4 g     F .text	00000184 _fputwc_r
1000fe0c g     O .rodata	00000028 __mprec_bigtens
10006524 g     F .text	00000104 __s2b
1000d558 g     F .text	000000a0 .hidden __floatunsidf
10006c80 g     F .text	00000060 __mcmp
100001f8 g     F .text	00000040 alt_up_audio_open_dev
10005020 g     F .text	00000018 __fp_lock_all
1000f094 g     F .text	0000004c alt_ic_irq_enabled
10000608 g     F .text	00000068 alt_up_audio_play_r
1000f5c8 g     F .text	00000098 alt_alarm_stop
10013660 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
100108f4 g     O .rwdata	00000028 alt_dev_null
1000ed28 g     F .text	0000001c alt_dcache_flush_all
10006628 g     F .text	00000068 __hi0bits
10011afc g     O .rwdata	00000004 AUDIO_DEVICE
1000d408 g     F .text	00000080 .hidden __fixdfsi
10011b44 g       *ABS*	00000000 __ram_rwdata_end
10011b24 g     O .rwdata	00000008 alt_dev_list
1000e008 g     F .text	000000f4 write
10010050 g       *ABS*	00000000 __ram_rodata_end
1000d8d0 g     F .text	000000b4 fstat
1000c294 g     F .text	000000ec .hidden __ledf2
100069e8 g     F .text	00000148 __pow5mult
10007784 g     F .text	00001448 ___vfiprintf_internal_r
10013640 g     O .bss	00000004 __nlocale_changed
1000aef0 g     F .text	00000008 .hidden __umodsi3
10013794 g       *ABS*	00000000 end
1000e314 g     F .text	000000c0 altera_avalon_jtag_uart_init
1000fd28 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000d5f8 g     F .text	000000ac .hidden __clzsi2
1000e9d0 g     F .text	00000218 altera_avalon_jtag_uart_write
10005010 g     F .text	00000004 __sfp_lock_acquire
10006008 g     F .text	000000e8 memchr
10000f24 g     F .text	00002154 ___vfprintf_internal_r
1000518c g     F .text	000002d0 _free_r
10005638 g     F .text	00000010 __locale_mb_cur_max
1000fb50 g     F .text	000001a4 __call_exitprocs
1001363c g     O .bss	00000004 __mlocale_changed
10011b10 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
10013664 g     O .bss	00000004 _alt_tick_rate
100009d8 g     F .text	00000058 audio_read_fifo_avail
100007b4 g     F .text	00000100 alt_up_audio_write_fifo
10006b30 g     F .text	00000150 __lshift
10013668 g     O .bss	00000004 _alt_nticks
1000dd90 g     F .text	000000f8 read
1000e168 g     F .text	00000048 alt_sys_init
100006d8 g     F .text	000000dc alt_up_audio_read_fifo
1000fa34 g     F .text	0000011c __register_exitproc
10000320 g     F .text	00000050 alt_up_audio_disable_write_interrupt
1000677c g     F .text	0000026c __multiply
1000e674 g     F .text	00000068 altera_avalon_jtag_uart_close
1000aef8 g     F .text	00000028 .hidden __mulsi3
10010050 g       *ABS*	00000000 __ram_rwdata_start
1000fd28 g       *ABS*	00000000 __ram_rodata_start
1001366c g     O .bss	00000028 __malloc_current_mallinfo
10006fe0 g     F .text	00000144 __d2b
1000e1b0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000f898 g     F .text	000000d4 alt_get_fd
10008c5c g     F .text	00000064 _close_r
100002d4 g     F .text	0000004c alt_up_audio_enable_write_interrupt
1000f9b8 g     F .text	0000007c memcmp
1000e270 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10013794 g       *ABS*	00000000 __alt_stack_base
1000e2c0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000309c g     F .text	00000138 __swsetup_r
1000b79c g     F .text	0000099c .hidden __divdf3
10000284 g     F .text	00000050 alt_up_audio_disable_read_interrupt
10004ef4 g     F .text	0000011c __sfp
10007238 g     F .text	00000078 __copybits
100104ec g     O .rwdata	00000408 __malloc_av_
1000501c g     F .text	00000004 __sinit_lock_release
1000c380 g     F .text	00000800 .hidden __muldf3
10007404 g     F .text	00000054 __sread
1000f784 g     F .text	00000114 alt_find_file
1000ed94 g     F .text	000000a0 alt_dev_llist_insert
1000dd00 g     F .text	00000020 __malloc_lock
1000df08 g     F .text	000000b0 sbrk
10000960 g     F .text	00000078 audio_reset_audio_core
10004a38 g     F .text	00000244 _fflush_r
10008cc0 g     F .text	000000d8 _calloc_r
10013638 g       *ABS*	00000000 __bss_start
100061fc g     F .text	00000114 memset
10000e40 g     F .text	0000007c main
100005a8 g     F .text	00000060 alt_up_audio_write_fifo_space
1001365c g     O .bss	00000004 alt_envp
10013644 g     O .bss	00000004 __malloc_max_total_mem
1000e210 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10009f40 g     F .text	0000001c __swbuf
10007538 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10008ec0 g     F .text	00000014 fclose
100033fc g     F .text	0000163c _dtoa_r
10005844 g     F .text	000007c4 _malloc_r
1000a0d0 g     F .text	00000030 __ascii_wctomb
10011b30 g     O .rwdata	00000004 alt_errno
1000545c g     F .text	000000a8 _fwalk
1000ae54 g     F .text	00000048 .hidden __divsi3
10005050 g     F .text	0000013c _malloc_trim_r
1000fd28 g       *ABS*	00000000 __CTOR_END__
10007540 g     F .text	000000a4 strcmp
1000fd28 g       *ABS*	00000000 __flash_rodata_start
1000fd28 g       *ABS*	00000000 __DTOR_LIST__
1000c138 g     F .text	00000084 .hidden __nedf2
1000e134 g     F .text	00000034 alt_irq_init
1000de88 g     F .text	00000080 alt_release_fd
1000ff1c g     O .rodata	00000100 .hidden __clz_tab
10013638 g     O .bss	00000004 _PathLocale
1000f96c g     F .text	00000014 atexit
10008bf0 g     F .text	0000006c _write_r
10005668 g     F .text	0000001c setlocale
10011b08 g     O .rwdata	00000004 _impure_ptr
10013654 g     O .bss	00000004 alt_argc
1000ee90 g     F .text	0000005c _do_dtors
10005654 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10006e90 g     F .text	00000060 __ulp
10005038 g     F .text	00000018 __fp_unlock_all
10011b1c g     O .rwdata	00000008 alt_fs_list
10000540 g     F .text	00000068 alt_up_audio_record_l
10000cd4 g     F .text	0000005c audio_record_l
10000020 g       *ABS*	00000000 __ram_exceptions_start
10005684 g     F .text	0000000c localeconv
1000ef08 g     F .text	00000050 alt_ic_isr_register
10000a30 g     F .text	000000cc audio_read_fifo
10011b44 g       *ABS*	00000000 _edata
10013794 g       *ABS*	00000000 _end
100001bc g       *ABS*	00000000 __ram_exceptions_end
1000e6dc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10000670 g     F .text	00000068 alt_up_audio_play_l
1000eff4 g     F .text	000000a0 alt_ic_irq_disable
10007460 g     F .text	0000007c __swrite
10011b14 g     O .rwdata	00000004 __malloc_trim_threshold
10005648 g     F .text	0000000c __locale_msgcharset
1000f980 g     F .text	00000038 exit
10005504 g     F .text	000000b8 _fwalk_reent
10006ce0 g     F .text	000001b0 __mdiff
1000ae9c g     F .text	0000004c .hidden __modsi3
10000d30 g     F .text	00000058 audio_write_fifo_space
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10005014 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000fcf4 g     F .text	00000034 _exit
1000ebe8 g     F .text	00000140 alt_alarm_start
10005690 g     F .text	000001b4 __smakebuf_r
100075e4 g     F .text	0000008c strlen
1000f46c g     F .text	0000015c open
1000c1bc g     F .text	000000d8 .hidden __gedf2
10011b18 g     O .rwdata	00000004 __wctomb
1000776c g     F .text	00000018 __sprint_r
1000eeec g     F .text	0000001c alt_icache_flush_all
10011b38 g     O .rwdata	00000004 alt_priority_mask
1000ef58 g     F .text	0000009c alt_ic_irq_enable
10003078 g     F .text	00000024 __vfprintf_internal
10000de4 g     F .text	0000005c audio_play_l
1000a100 g     F .text	0000005c _wctomb_r
1000cb80 g     F .text	00000888 .hidden __subdf3
10006690 g     F .text	000000b0 __lo0bits
10011b3c g     O .rwdata	00000008 alt_alarm_list
1000ee34 g     F .text	0000005c _do_ctors
10009ff8 g     F .text	000000d8 wcrtomb
1000d6f4 g     F .text	000000d0 close
1000dae0 g     F .text	00000080 alt_load
10000238 g     F .text	0000004c alt_up_audio_enable_read_interrupt
10009058 g     F .text	00000078 fputwc
00000000  w      *UND*	00000000 free
10005018 g     F .text	00000004 __sinit_lock_acquire
100063e0 g     F .text	00000144 __multadd
100063b8 g     F .text	00000028 _Bfree
10000370 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40074 	movhi	r3,4097
10000130:	18cda504 	addi	r3,r3,13972
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10800017 	ldw	r2,0(r2)
10000144:	01040074 	movhi	r4,4097
10000148:	210da504 	addi	r4,r4,13972
1000014c:	e0fffd17 	ldw	r3,-12(fp)
10000150:	180690fa 	slli	r3,r3,3
10000154:	20c7883a 	add	r3,r4,r3
10000158:	18c00104 	addi	r3,r3,4
1000015c:	18c00017 	ldw	r3,0(r3)
10000160:	1809883a 	mov	r4,r3
10000164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6a6bf14 	ori	gp,gp,39676
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	108d8e14 	ori	r2,r2,13880

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18cde514 	ori	r3,r3,14228

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	000dae00 	call	1000dae0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	000dc880 	call	1000dc88 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
100001f8:	defffc04 	addi	sp,sp,-16
100001fc:	dfc00315 	stw	ra,12(sp)
10000200:	df000215 	stw	fp,8(sp)
10000204:	df000204 	addi	fp,sp,8
10000208:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
1000020c:	e13fff17 	ldw	r4,-4(fp)
10000210:	01440074 	movhi	r5,4097
10000214:	2946c904 	addi	r5,r5,6948
10000218:	000d7f00 	call	1000d7f0 <alt_find_dev>
1000021c:	e0bffe15 	stw	r2,-8(fp)
  return dev;
10000220:	e0bffe17 	ldw	r2,-8(fp)
}
10000224:	e037883a 	mov	sp,fp
10000228:	dfc00117 	ldw	ra,4(sp)
1000022c:	df000017 	ldw	fp,0(sp)
10000230:	dec00204 	addi	sp,sp,8
10000234:	f800283a 	ret

10000238 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
10000238:	defffd04 	addi	sp,sp,-12
1000023c:	df000215 	stw	fp,8(sp)
10000240:	df000204 	addi	fp,sp,8
10000244:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000248:	e0bfff17 	ldw	r2,-4(fp)
1000024c:	10800a17 	ldw	r2,40(r2)
10000250:	10800037 	ldwio	r2,0(r2)
10000254:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
10000258:	e0bffe17 	ldw	r2,-8(fp)
1000025c:	10800054 	ori	r2,r2,1
10000260:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000264:	e0bfff17 	ldw	r2,-4(fp)
10000268:	10800a17 	ldw	r2,40(r2)
1000026c:	e0fffe17 	ldw	r3,-8(fp)
10000270:	10c00035 	stwio	r3,0(r2)
}
10000274:	e037883a 	mov	sp,fp
10000278:	df000017 	ldw	fp,0(sp)
1000027c:	dec00104 	addi	sp,sp,4
10000280:	f800283a 	ret

10000284 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
10000284:	defffd04 	addi	sp,sp,-12
10000288:	df000215 	stw	fp,8(sp)
1000028c:	df000204 	addi	fp,sp,8
10000290:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000294:	e0bfff17 	ldw	r2,-4(fp)
10000298:	10800a17 	ldw	r2,40(r2)
1000029c:	10800037 	ldwio	r2,0(r2)
100002a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
100002a4:	e0fffe17 	ldw	r3,-8(fp)
100002a8:	00bfff84 	movi	r2,-2
100002ac:	1884703a 	and	r2,r3,r2
100002b0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
100002b4:	e0bfff17 	ldw	r2,-4(fp)
100002b8:	10800a17 	ldw	r2,40(r2)
100002bc:	e0fffe17 	ldw	r3,-8(fp)
100002c0:	10c00035 	stwio	r3,0(r2)
}
100002c4:	e037883a 	mov	sp,fp
100002c8:	df000017 	ldw	fp,0(sp)
100002cc:	dec00104 	addi	sp,sp,4
100002d0:	f800283a 	ret

100002d4 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
100002d4:	defffd04 	addi	sp,sp,-12
100002d8:	df000215 	stw	fp,8(sp)
100002dc:	df000204 	addi	fp,sp,8
100002e0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
100002e4:	e0bfff17 	ldw	r2,-4(fp)
100002e8:	10800a17 	ldw	r2,40(r2)
100002ec:	10800037 	ldwio	r2,0(r2)
100002f0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
100002f4:	e0bffe17 	ldw	r2,-8(fp)
100002f8:	10800094 	ori	r2,r2,2
100002fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000300:	e0bfff17 	ldw	r2,-4(fp)
10000304:	10800a17 	ldw	r2,40(r2)
10000308:	e0fffe17 	ldw	r3,-8(fp)
1000030c:	10c00035 	stwio	r3,0(r2)
}
10000310:	e037883a 	mov	sp,fp
10000314:	df000017 	ldw	fp,0(sp)
10000318:	dec00104 	addi	sp,sp,4
1000031c:	f800283a 	ret

10000320 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
10000320:	defffd04 	addi	sp,sp,-12
10000324:	df000215 	stw	fp,8(sp)
10000328:	df000204 	addi	fp,sp,8
1000032c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000330:	e0bfff17 	ldw	r2,-4(fp)
10000334:	10800a17 	ldw	r2,40(r2)
10000338:	10800037 	ldwio	r2,0(r2)
1000033c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
10000340:	e0fffe17 	ldw	r3,-8(fp)
10000344:	00bfff44 	movi	r2,-3
10000348:	1884703a 	and	r2,r3,r2
1000034c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000350:	e0bfff17 	ldw	r2,-4(fp)
10000354:	10800a17 	ldw	r2,40(r2)
10000358:	e0fffe17 	ldw	r3,-8(fp)
1000035c:	10c00035 	stwio	r3,0(r2)
}
10000360:	e037883a 	mov	sp,fp
10000364:	df000017 	ldw	fp,0(sp)
10000368:	dec00104 	addi	sp,sp,4
1000036c:	f800283a 	ret

10000370 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
10000370:	defffd04 	addi	sp,sp,-12
10000374:	df000215 	stw	fp,8(sp)
10000378:	df000204 	addi	fp,sp,8
1000037c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000380:	e0bfff17 	ldw	r2,-4(fp)
10000384:	10800a17 	ldw	r2,40(r2)
10000388:	10800037 	ldwio	r2,0(r2)
1000038c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
10000390:	e0bffe17 	ldw	r2,-8(fp)
10000394:	1080400c 	andi	r2,r2,256
10000398:	1004c03a 	cmpne	r2,r2,zero
1000039c:	10803fcc 	andi	r2,r2,255
}
100003a0:	e037883a 	mov	sp,fp
100003a4:	df000017 	ldw	fp,0(sp)
100003a8:	dec00104 	addi	sp,sp,4
100003ac:	f800283a 	ret

100003b0 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
100003b0:	defffd04 	addi	sp,sp,-12
100003b4:	df000215 	stw	fp,8(sp)
100003b8:	df000204 	addi	fp,sp,8
100003bc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
100003c0:	e0bfff17 	ldw	r2,-4(fp)
100003c4:	10800a17 	ldw	r2,40(r2)
100003c8:	10800037 	ldwio	r2,0(r2)
100003cc:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
100003d0:	e0bffe17 	ldw	r2,-8(fp)
100003d4:	1080800c 	andi	r2,r2,512
100003d8:	1004c03a 	cmpne	r2,r2,zero
100003dc:	10803fcc 	andi	r2,r2,255
}
100003e0:	e037883a 	mov	sp,fp
100003e4:	df000017 	ldw	fp,0(sp)
100003e8:	dec00104 	addi	sp,sp,4
100003ec:	f800283a 	ret

100003f0 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
100003f0:	defffd04 	addi	sp,sp,-12
100003f4:	df000215 	stw	fp,8(sp)
100003f8:	df000204 	addi	fp,sp,8
100003fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000400:	e0bfff17 	ldw	r2,-4(fp)
10000404:	10800a17 	ldw	r2,40(r2)
10000408:	10800037 	ldwio	r2,0(r2)
1000040c:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
10000410:	e0bffe17 	ldw	r2,-8(fp)
10000414:	10800114 	ori	r2,r2,4
10000418:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
1000041c:	e0bffe17 	ldw	r2,-8(fp)
10000420:	10800214 	ori	r2,r2,8
10000424:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000428:	e0bfff17 	ldw	r2,-4(fp)
1000042c:	10800a17 	ldw	r2,40(r2)
10000430:	e0fffe17 	ldw	r3,-8(fp)
10000434:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
10000438:	e0fffe17 	ldw	r3,-8(fp)
1000043c:	00bffec4 	movi	r2,-5
10000440:	1884703a 	and	r2,r3,r2
10000444:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
10000448:	e0fffe17 	ldw	r3,-8(fp)
1000044c:	00bffdc4 	movi	r2,-9
10000450:	1884703a 	and	r2,r3,r2
10000454:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000458:	e0bfff17 	ldw	r2,-4(fp)
1000045c:	10800a17 	ldw	r2,40(r2)
10000460:	e0fffe17 	ldw	r3,-8(fp)
10000464:	10c00035 	stwio	r3,0(r2)
}
10000468:	e037883a 	mov	sp,fp
1000046c:	df000017 	ldw	fp,0(sp)
10000470:	dec00104 	addi	sp,sp,4
10000474:	f800283a 	ret

10000478 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
10000478:	defffc04 	addi	sp,sp,-16
1000047c:	df000315 	stw	fp,12(sp)
10000480:	df000304 	addi	fp,sp,12
10000484:	e13ffe15 	stw	r4,-8(fp)
10000488:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
1000048c:	e0bffe17 	ldw	r2,-8(fp)
10000490:	10800a17 	ldw	r2,40(r2)
10000494:	10800104 	addi	r2,r2,4
10000498:	10800037 	ldwio	r2,0(r2)
1000049c:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
100004a0:	e0bfff17 	ldw	r2,-4(fp)
100004a4:	1000041e 	bne	r2,zero,100004b8 <alt_up_audio_read_fifo_avail+0x40>
100004a8:	e0bffd17 	ldw	r2,-12(fp)
100004ac:	10bfc00c 	andi	r2,r2,65280
100004b0:	1004d23a 	srli	r2,r2,8
100004b4:	00000206 	br	100004c0 <alt_up_audio_read_fifo_avail+0x48>
100004b8:	e0bffd17 	ldw	r2,-12(fp)
100004bc:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
100004c0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
100004c4:	e0bffd17 	ldw	r2,-12(fp)
}
100004c8:	e037883a 	mov	sp,fp
100004cc:	df000017 	ldw	fp,0(sp)
100004d0:	dec00104 	addi	sp,sp,4
100004d4:	f800283a 	ret

100004d8 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
100004d8:	defffa04 	addi	sp,sp,-24
100004dc:	dfc00515 	stw	ra,20(sp)
100004e0:	df000415 	stw	fp,16(sp)
100004e4:	df000404 	addi	fp,sp,16
100004e8:	e13ffd15 	stw	r4,-12(fp)
100004ec:	e17ffe15 	stw	r5,-8(fp)
100004f0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
100004f4:	e13ffd17 	ldw	r4,-12(fp)
100004f8:	01400044 	movi	r5,1
100004fc:	00004780 	call	10000478 <alt_up_audio_read_fifo_avail>
10000500:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
10000504:	e0bffc17 	ldw	r2,-16(fp)
10000508:	10801868 	cmpgeui	r2,r2,97
1000050c:	1000021e 	bne	r2,zero,10000518 <alt_up_audio_record_r+0x40>
		return 0;
10000510:	0005883a 	mov	r2,zero
10000514:	00000506 	br	1000052c <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
10000518:	e13ffd17 	ldw	r4,-12(fp)
1000051c:	e17ffe17 	ldw	r5,-8(fp)
10000520:	e1bfff17 	ldw	r6,-4(fp)
10000524:	01c00044 	movi	r7,1
10000528:	00006d80 	call	100006d8 <alt_up_audio_read_fifo>
}
1000052c:	e037883a 	mov	sp,fp
10000530:	dfc00117 	ldw	ra,4(sp)
10000534:	df000017 	ldw	fp,0(sp)
10000538:	dec00204 	addi	sp,sp,8
1000053c:	f800283a 	ret

10000540 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000540:	defffa04 	addi	sp,sp,-24
10000544:	dfc00515 	stw	ra,20(sp)
10000548:	df000415 	stw	fp,16(sp)
1000054c:	df000404 	addi	fp,sp,16
10000550:	e13ffd15 	stw	r4,-12(fp)
10000554:	e17ffe15 	stw	r5,-8(fp)
10000558:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
1000055c:	e13ffd17 	ldw	r4,-12(fp)
10000560:	000b883a 	mov	r5,zero
10000564:	00004780 	call	10000478 <alt_up_audio_read_fifo_avail>
10000568:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
1000056c:	e0bffc17 	ldw	r2,-16(fp)
10000570:	10801868 	cmpgeui	r2,r2,97
10000574:	1000021e 	bne	r2,zero,10000580 <alt_up_audio_record_l+0x40>
		return 0;
10000578:	0005883a 	mov	r2,zero
1000057c:	00000506 	br	10000594 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
10000580:	e13ffd17 	ldw	r4,-12(fp)
10000584:	e17ffe17 	ldw	r5,-8(fp)
10000588:	e1bfff17 	ldw	r6,-4(fp)
1000058c:	000f883a 	mov	r7,zero
10000590:	00006d80 	call	100006d8 <alt_up_audio_read_fifo>
}
10000594:	e037883a 	mov	sp,fp
10000598:	dfc00117 	ldw	ra,4(sp)
1000059c:	df000017 	ldw	fp,0(sp)
100005a0:	dec00204 	addi	sp,sp,8
100005a4:	f800283a 	ret

100005a8 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
100005a8:	defffc04 	addi	sp,sp,-16
100005ac:	df000315 	stw	fp,12(sp)
100005b0:	df000304 	addi	fp,sp,12
100005b4:	e13ffe15 	stw	r4,-8(fp)
100005b8:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100005bc:	e0bffe17 	ldw	r2,-8(fp)
100005c0:	10800a17 	ldw	r2,40(r2)
100005c4:	10800104 	addi	r2,r2,4
100005c8:	10800037 	ldwio	r2,0(r2)
100005cc:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100005d0:	e0bfff17 	ldw	r2,-4(fp)
100005d4:	1000031e 	bne	r2,zero,100005e4 <alt_up_audio_write_fifo_space+0x3c>
100005d8:	e0bffd17 	ldw	r2,-12(fp)
100005dc:	1004d63a 	srli	r2,r2,24
100005e0:	00000306 	br	100005f0 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
100005e4:	e0bffd17 	ldw	r2,-12(fp)
100005e8:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100005ec:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
100005f0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
100005f4:	e0bffd17 	ldw	r2,-12(fp)
}
100005f8:	e037883a 	mov	sp,fp
100005fc:	df000017 	ldw	fp,0(sp)
10000600:	dec00104 	addi	sp,sp,4
10000604:	f800283a 	ret

10000608 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000608:	defffa04 	addi	sp,sp,-24
1000060c:	dfc00515 	stw	ra,20(sp)
10000610:	df000415 	stw	fp,16(sp)
10000614:	df000404 	addi	fp,sp,16
10000618:	e13ffd15 	stw	r4,-12(fp)
1000061c:	e17ffe15 	stw	r5,-8(fp)
10000620:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
10000624:	e13ffd17 	ldw	r4,-12(fp)
10000628:	01400044 	movi	r5,1
1000062c:	00005a80 	call	100005a8 <alt_up_audio_write_fifo_space>
10000630:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
10000634:	e0bffc17 	ldw	r2,-16(fp)
10000638:	10801868 	cmpgeui	r2,r2,97
1000063c:	1000021e 	bne	r2,zero,10000648 <alt_up_audio_play_r+0x40>
		return 0;
10000640:	0005883a 	mov	r2,zero
10000644:	00000506 	br	1000065c <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
10000648:	e13ffd17 	ldw	r4,-12(fp)
1000064c:	e17ffe17 	ldw	r5,-8(fp)
10000650:	e1bfff17 	ldw	r6,-4(fp)
10000654:	01c00044 	movi	r7,1
10000658:	00007b40 	call	100007b4 <alt_up_audio_write_fifo>
}
1000065c:	e037883a 	mov	sp,fp
10000660:	dfc00117 	ldw	ra,4(sp)
10000664:	df000017 	ldw	fp,0(sp)
10000668:	dec00204 	addi	sp,sp,8
1000066c:	f800283a 	ret

10000670 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000670:	defffa04 	addi	sp,sp,-24
10000674:	dfc00515 	stw	ra,20(sp)
10000678:	df000415 	stw	fp,16(sp)
1000067c:	df000404 	addi	fp,sp,16
10000680:	e13ffd15 	stw	r4,-12(fp)
10000684:	e17ffe15 	stw	r5,-8(fp)
10000688:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
1000068c:	e13ffd17 	ldw	r4,-12(fp)
10000690:	000b883a 	mov	r5,zero
10000694:	00005a80 	call	100005a8 <alt_up_audio_write_fifo_space>
10000698:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
1000069c:	e0bffc17 	ldw	r2,-16(fp)
100006a0:	10801868 	cmpgeui	r2,r2,97
100006a4:	1000021e 	bne	r2,zero,100006b0 <alt_up_audio_play_l+0x40>
		return 0;
100006a8:	0005883a 	mov	r2,zero
100006ac:	00000506 	br	100006c4 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
100006b0:	e13ffd17 	ldw	r4,-12(fp)
100006b4:	e17ffe17 	ldw	r5,-8(fp)
100006b8:	e1bfff17 	ldw	r6,-4(fp)
100006bc:	000f883a 	mov	r7,zero
100006c0:	00007b40 	call	100007b4 <alt_up_audio_write_fifo>
}
100006c4:	e037883a 	mov	sp,fp
100006c8:	dfc00117 	ldw	ra,4(sp)
100006cc:	df000017 	ldw	fp,0(sp)
100006d0:	dec00204 	addi	sp,sp,8
100006d4:	f800283a 	ret

100006d8 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
100006d8:	defff904 	addi	sp,sp,-28
100006dc:	df000615 	stw	fp,24(sp)
100006e0:	df000604 	addi	fp,sp,24
100006e4:	e13ffc15 	stw	r4,-16(fp)
100006e8:	e17ffd15 	stw	r5,-12(fp)
100006ec:	e1bffe15 	stw	r6,-8(fp)
100006f0:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
100006f4:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
100006f8:	00002606 	br	10000794 <alt_up_audio_read_fifo+0xbc>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100006fc:	e0bffc17 	ldw	r2,-16(fp)
10000700:	10800a17 	ldw	r2,40(r2)
10000704:	10800104 	addi	r2,r2,4
10000708:	10800037 	ldwio	r2,0(r2)
1000070c:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
10000710:	e0bfff17 	ldw	r2,-4(fp)
10000714:	1000041e 	bne	r2,zero,10000728 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
10000718:	e0bffb17 	ldw	r2,-20(fp)
1000071c:	10bfc00c 	andi	r2,r2,65280
			:
10000720:	1004d23a 	srli	r2,r2,8
10000724:	00000206 	br	10000730 <alt_up_audio_read_fifo+0x58>
10000728:	e0bffb17 	ldw	r2,-20(fp)
1000072c:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
10000730:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
10000734:	e0bffb17 	ldw	r2,-20(fp)
10000738:	10001526 	beq	r2,zero,10000790 <alt_up_audio_read_fifo+0xb8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
1000073c:	e0bffa17 	ldw	r2,-24(fp)
10000740:	1085883a 	add	r2,r2,r2
10000744:	1085883a 	add	r2,r2,r2
10000748:	e0fffd17 	ldw	r3,-12(fp)
1000074c:	1887883a 	add	r3,r3,r2
10000750:	e0bfff17 	ldw	r2,-4(fp)
10000754:	1000051e 	bne	r2,zero,1000076c <alt_up_audio_read_fifo+0x94>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
10000758:	e0bffc17 	ldw	r2,-16(fp)
1000075c:	10800a17 	ldw	r2,40(r2)
10000760:	10800204 	addi	r2,r2,8
10000764:	10800037 	ldwio	r2,0(r2)
10000768:	00000406 	br	1000077c <alt_up_audio_read_fifo+0xa4>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
1000076c:	e0bffc17 	ldw	r2,-16(fp)
10000770:	10800a17 	ldw	r2,40(r2)
10000774:	10800304 	addi	r2,r2,12
10000778:	10800037 	ldwio	r2,0(r2)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
1000077c:	18800015 	stw	r2,0(r3)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
10000780:	e0bffa17 	ldw	r2,-24(fp)
10000784:	10800044 	addi	r2,r2,1
10000788:	e0bffa15 	stw	r2,-24(fp)
1000078c:	00000106 	br	10000794 <alt_up_audio_read_fifo+0xbc>
		}
		else
		{
			// no more data to read
			break;
10000790:	00000306 	br	100007a0 <alt_up_audio_read_fifo+0xc8>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
10000794:	e0fffa17 	ldw	r3,-24(fp)
10000798:	e0bffe17 	ldw	r2,-8(fp)
1000079c:	18bfd716 	blt	r3,r2,100006fc <__alt_data_end+0xf80006fc>
		{
			// no more data to read
			break;
		}
	}
	return count;
100007a0:	e0bffa17 	ldw	r2,-24(fp)
}
100007a4:	e037883a 	mov	sp,fp
100007a8:	df000017 	ldw	fp,0(sp)
100007ac:	dec00104 	addi	sp,sp,4
100007b0:	f800283a 	ret

100007b4 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
100007b4:	defff904 	addi	sp,sp,-28
100007b8:	df000615 	stw	fp,24(sp)
100007bc:	df000604 	addi	fp,sp,24
100007c0:	e13ffc15 	stw	r4,-16(fp)
100007c4:	e17ffd15 	stw	r5,-12(fp)
100007c8:	e1bffe15 	stw	r6,-8(fp)
100007cc:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
100007d0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
100007d4:	00002f06 	br	10000894 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100007d8:	e0bffc17 	ldw	r2,-16(fp)
100007dc:	10800a17 	ldw	r2,40(r2)
100007e0:	10800104 	addi	r2,r2,4
100007e4:	10800037 	ldwio	r2,0(r2)
100007e8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100007ec:	e0bfff17 	ldw	r2,-4(fp)
100007f0:	1000031e 	bne	r2,zero,10000800 <alt_up_audio_write_fifo+0x4c>
100007f4:	e0bffb17 	ldw	r2,-20(fp)
100007f8:	1004d63a 	srli	r2,r2,24
100007fc:	00000306 	br	1000080c <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
10000800:	e0bffb17 	ldw	r2,-20(fp)
10000804:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
10000808:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
1000080c:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
10000810:	e0bffb17 	ldw	r2,-20(fp)
10000814:	10001e26 	beq	r2,zero,10000890 <alt_up_audio_write_fifo+0xdc>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
10000818:	e0bfff17 	ldw	r2,-4(fp)
1000081c:	10000e1e 	bne	r2,zero,10000858 <alt_up_audio_write_fifo+0xa4>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
10000820:	e0bffc17 	ldw	r2,-16(fp)
10000824:	10800a17 	ldw	r2,40(r2)
10000828:	10800204 	addi	r2,r2,8
1000082c:	1007883a 	mov	r3,r2
10000830:	e0bffa17 	ldw	r2,-24(fp)
10000834:	11000044 	addi	r4,r2,1
10000838:	e13ffa15 	stw	r4,-24(fp)
1000083c:	1085883a 	add	r2,r2,r2
10000840:	1085883a 	add	r2,r2,r2
10000844:	e13ffd17 	ldw	r4,-12(fp)
10000848:	2085883a 	add	r2,r4,r2
1000084c:	10800017 	ldw	r2,0(r2)
10000850:	18800035 	stwio	r2,0(r3)
10000854:	00000f06 	br	10000894 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
10000858:	e0bffc17 	ldw	r2,-16(fp)
1000085c:	10800a17 	ldw	r2,40(r2)
10000860:	10800304 	addi	r2,r2,12
10000864:	1007883a 	mov	r3,r2
10000868:	e0bffa17 	ldw	r2,-24(fp)
1000086c:	11000044 	addi	r4,r2,1
10000870:	e13ffa15 	stw	r4,-24(fp)
10000874:	1085883a 	add	r2,r2,r2
10000878:	1085883a 	add	r2,r2,r2
1000087c:	e13ffd17 	ldw	r4,-12(fp)
10000880:	2085883a 	add	r2,r4,r2
10000884:	10800017 	ldw	r2,0(r2)
10000888:	18800035 	stwio	r2,0(r3)
1000088c:	00000106 	br	10000894 <alt_up_audio_write_fifo+0xe0>
		}
		else
		{
			// no more space to write
			break;
10000890:	00000306 	br	100008a0 <alt_up_audio_write_fifo+0xec>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
10000894:	e0fffa17 	ldw	r3,-24(fp)
10000898:	e0bffe17 	ldw	r2,-8(fp)
1000089c:	18bfce16 	blt	r3,r2,100007d8 <__alt_data_end+0xf80007d8>
		{
			// no more space to write
			break;
		}
	}
	return count;
100008a0:	e0bffa17 	ldw	r2,-24(fp)
}
100008a4:	e037883a 	mov	sp,fp
100008a8:	df000017 	ldw	fp,0(sp)
100008ac:	dec00104 	addi	sp,sp,4
100008b0:	f800283a 	ret

100008b4 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
100008b4:	defffd04 	addi	sp,sp,-12
100008b8:	df000215 	stw	fp,8(sp)
100008bc:	df000204 	addi	fp,sp,8
100008c0:	e13ffe15 	stw	r4,-8(fp)
100008c4:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
100008c8:	e0bfff17 	ldw	r2,-4(fp)
100008cc:	1000051e 	bne	r2,zero,100008e4 <alt_up_audio_read_fifo_head+0x30>
100008d0:	e0bffe17 	ldw	r2,-8(fp)
100008d4:	10800a17 	ldw	r2,40(r2)
100008d8:	10800204 	addi	r2,r2,8
100008dc:	10800037 	ldwio	r2,0(r2)
100008e0:	00000406 	br	100008f4 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
100008e4:	e0bffe17 	ldw	r2,-8(fp)
100008e8:	10800a17 	ldw	r2,40(r2)
100008ec:	10800304 	addi	r2,r2,12
100008f0:	10800037 	ldwio	r2,0(r2)
}
100008f4:	e037883a 	mov	sp,fp
100008f8:	df000017 	ldw	fp,0(sp)
100008fc:	dec00104 	addi	sp,sp,4
10000900:	f800283a 	ret

10000904 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
10000904:	defffc04 	addi	sp,sp,-16
10000908:	df000315 	stw	fp,12(sp)
1000090c:	df000304 	addi	fp,sp,12
10000910:	e13ffd15 	stw	r4,-12(fp)
10000914:	e17ffe15 	stw	r5,-8(fp)
10000918:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
1000091c:	e0bfff17 	ldw	r2,-4(fp)
10000920:	1000061e 	bne	r2,zero,1000093c <alt_up_audio_write_fifo_head+0x38>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
10000924:	e0bffd17 	ldw	r2,-12(fp)
10000928:	10800a17 	ldw	r2,40(r2)
1000092c:	10800204 	addi	r2,r2,8
10000930:	e0fffe17 	ldw	r3,-8(fp)
10000934:	10c00035 	stwio	r3,0(r2)
10000938:	00000506 	br	10000950 <alt_up_audio_write_fifo_head+0x4c>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
1000093c:	e0bffd17 	ldw	r2,-12(fp)
10000940:	10800a17 	ldw	r2,40(r2)
10000944:	10800304 	addi	r2,r2,12
10000948:	e0fffe17 	ldw	r3,-8(fp)
1000094c:	10c00035 	stwio	r3,0(r2)
}
10000950:	e037883a 	mov	sp,fp
10000954:	df000017 	ldw	fp,0(sp)
10000958:	dec00104 	addi	sp,sp,4
1000095c:	f800283a 	ret

10000960 <audio_reset_audio_core>:
#define LEFT_DATA	((volatile unsigned int *const)(AUDIO_DEVICE + 2));
#define RIGHT_DATA	((volatile unsigned int *const)(AUDIO_DEVICE + 3));


void audio_reset_audio_core()
{
10000960:	defffe04 	addi	sp,sp,-8
10000964:	df000115 	stw	fp,4(sp)
10000968:	df000104 	addi	fp,sp,4
	unsigned int ctrl_reg = IORD_AUDIO_CONTROL();
1000096c:	00801004 	movi	r2,64
10000970:	10800037 	ldwio	r2,0(r2)
10000974:	e0bfff15 	stw	r2,-4(fp)
	// set CR and CW to 1 while maintaining the other bits
	ctrl_reg |= AUDIO_CONTROL_CR_MASK;
10000978:	e0bfff17 	ldw	r2,-4(fp)
1000097c:	10800114 	ori	r2,r2,4
10000980:	e0bfff15 	stw	r2,-4(fp)
	ctrl_reg |= AUDIO_CONTROL_CW_MASK;
10000984:	e0bfff17 	ldw	r2,-4(fp)
10000988:	10800214 	ori	r2,r2,8
1000098c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_AUDIO_CONTROL(ctrl_reg);
10000990:	00801004 	movi	r2,64
10000994:	e0ffff17 	ldw	r3,-4(fp)
10000998:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining the other bits
	ctrl_reg &= ~AUDIO_CONTROL_CR_MASK;
1000099c:	e0ffff17 	ldw	r3,-4(fp)
100009a0:	00bffec4 	movi	r2,-5
100009a4:	1884703a 	and	r2,r3,r2
100009a8:	e0bfff15 	stw	r2,-4(fp)
	ctrl_reg &= ~AUDIO_CONTROL_CW_MASK;
100009ac:	e0ffff17 	ldw	r3,-4(fp)
100009b0:	00bffdc4 	movi	r2,-9
100009b4:	1884703a 	and	r2,r3,r2
100009b8:	e0bfff15 	stw	r2,-4(fp)
	IOWR_AUDIO_CONTROL(ctrl_reg);
100009bc:	00801004 	movi	r2,64
100009c0:	e0ffff17 	ldw	r3,-4(fp)
100009c4:	10c00035 	stwio	r3,0(r2)
}
100009c8:	e037883a 	mov	sp,fp
100009cc:	df000017 	ldw	fp,0(sp)
100009d0:	dec00104 	addi	sp,sp,4
100009d4:	f800283a 	ret

100009d8 <audio_read_fifo_avail>:

// provides number of words of data available in the incoming FIFO: RALC or RARC
unsigned int audio_read_fifo_avail(int channel)
{
100009d8:	defffd04 	addi	sp,sp,-12
100009dc:	df000215 	stw	fp,8(sp)
100009e0:	df000204 	addi	fp,sp,8
100009e4:	e13fff15 	stw	r4,-4(fp)
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
100009e8:	00801004 	movi	r2,64
100009ec:	10800104 	addi	r2,r2,4
100009f0:	10800037 	ldwio	r2,0(r2)
100009f4:	e0bffe15 	stw	r2,-8(fp)
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
100009f8:	e0bfff17 	ldw	r2,-4(fp)
100009fc:	1000041e 	bne	r2,zero,10000a10 <audio_read_fifo_avail+0x38>
{
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
10000a00:	e0bffe17 	ldw	r2,-8(fp)
10000a04:	10bfc00c 	andi	r2,r2,65280
			:
10000a08:	1004d23a 	srli	r2,r2,8
10000a0c:	00000206 	br	10000a18 <audio_read_fifo_avail+0x40>
10000a10:	e0bffe17 	ldw	r2,-8(fp)
10000a14:	10803fcc 	andi	r2,r2,255
unsigned int audio_read_fifo_avail(int channel)
{
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
10000a18:	e0bffe15 	stw	r2,-8(fp)
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
	return fifospace;
10000a1c:	e0bffe17 	ldw	r2,-8(fp)
}
10000a20:	e037883a 	mov	sp,fp
10000a24:	df000017 	ldw	fp,0(sp)
10000a28:	dec00104 	addi	sp,sp,4
10000a2c:	f800283a 	ret

10000a30 <audio_read_fifo>:

int audio_read_fifo(unsigned int *buf, int len, int channel) {
10000a30:	defffa04 	addi	sp,sp,-24
10000a34:	df000515 	stw	fp,20(sp)
10000a38:	df000504 	addi	fp,sp,20
10000a3c:	e13ffd15 	stw	r4,-12(fp)
10000a40:	e17ffe15 	stw	r5,-8(fp)
10000a44:	e1bfff15 	stw	r6,-4(fp)
	unsigned int fifospace;
	int count = 0;
10000a48:	e03ffb15 	stw	zero,-20(fp)
	while (count < len) {
10000a4c:	00002306 	br	10000adc <audio_read_fifo+0xac>
		// read the whole fifospcae register
		fifospace = IORD_AUDIO_FIFOSPACE();
10000a50:	00801004 	movi	r2,64
10000a54:	10800104 	addi	r2,r2,4
10000a58:	10800037 	ldwio	r2,0(r2)
10000a5c:	e0bffc15 	stw	r2,-16(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
10000a60:	e0bfff17 	ldw	r2,-4(fp)
10000a64:	1000041e 	bne	r2,zero,10000a78 <audio_read_fifo+0x48>
	while (count < len) {
		// read the whole fifospcae register
		fifospace = IORD_AUDIO_FIFOSPACE();
		// extract the part for proper Channel Read Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
10000a68:	e0bffc17 	ldw	r2,-16(fp)
10000a6c:	10bfc00c 	andi	r2,r2,65280
			:
10000a70:	1004d23a 	srli	r2,r2,8
10000a74:	00000206 	br	10000a80 <audio_read_fifo+0x50>
10000a78:	e0bffc17 	ldw	r2,-16(fp)
10000a7c:	10803fcc 	andi	r2,r2,255
	int count = 0;
	while (count < len) {
		// read the whole fifospcae register
		fifospace = IORD_AUDIO_FIFOSPACE();
		// extract the part for proper Channel Read Space
		fifospace = (channel == AUDIO_LEFT) ?
10000a80:	e0bffc15 	stw	r2,-16(fp)
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
		if (fifospace > 0) {
10000a84:	e0bffc17 	ldw	r2,-16(fp)
10000a88:	10001326 	beq	r2,zero,10000ad8 <audio_read_fifo+0xa8>
			buf[count] = (channel == AUDIO_LEFT) ?
10000a8c:	e0bffb17 	ldw	r2,-20(fp)
10000a90:	1085883a 	add	r2,r2,r2
10000a94:	1085883a 	add	r2,r2,r2
10000a98:	e0fffd17 	ldw	r3,-12(fp)
10000a9c:	1887883a 	add	r3,r3,r2
10000aa0:	e0bfff17 	ldw	r2,-4(fp)
10000aa4:	1000041e 	bne	r2,zero,10000ab8 <audio_read_fifo+0x88>
				IORD_AUDIO_LEFTDATA():
10000aa8:	00801004 	movi	r2,64
10000aac:	10800204 	addi	r2,r2,8
10000ab0:	10800037 	ldwio	r2,0(r2)
10000ab4:	00000306 	br	10000ac4 <audio_read_fifo+0x94>
				IORD_AUDIO_RIGHTDATA();
10000ab8:	00801004 	movi	r2,64
10000abc:	10800304 	addi	r2,r2,12
10000ac0:	10800037 	ldwio	r2,0(r2)
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
		if (fifospace > 0) {
			buf[count] = (channel == AUDIO_LEFT) ?
10000ac4:	18800015 	stw	r2,0(r3)
				IORD_AUDIO_LEFTDATA():
				IORD_AUDIO_RIGHTDATA();
			count ++;
10000ac8:	e0bffb17 	ldw	r2,-20(fp)
10000acc:	10800044 	addi	r2,r2,1
10000ad0:	e0bffb15 	stw	r2,-20(fp)
10000ad4:	00000106 	br	10000adc <audio_read_fifo+0xac>
		}
		else {
			//no more data to read
			break;
10000ad8:	00000306 	br	10000ae8 <audio_read_fifo+0xb8>
}

int audio_read_fifo(unsigned int *buf, int len, int channel) {
	unsigned int fifospace;
	int count = 0;
	while (count < len) {
10000adc:	e0fffb17 	ldw	r3,-20(fp)
10000ae0:	e0bffe17 	ldw	r2,-8(fp)
10000ae4:	18bfda16 	blt	r3,r2,10000a50 <__alt_data_end+0xf8000a50>
		else {
			//no more data to read
			break;
		}
	}
	return count;
10000ae8:	e0bffb17 	ldw	r2,-20(fp)
}
10000aec:	e037883a 	mov	sp,fp
10000af0:	df000017 	ldw	fp,0(sp)
10000af4:	dec00104 	addi	sp,sp,4
10000af8:	f800283a 	ret

10000afc <audio_write_fifo>:

int audio_write_fifo(unsigned int *buf, int len, int channel) {
10000afc:	defffa04 	addi	sp,sp,-24
10000b00:	df000515 	stw	fp,20(sp)
10000b04:	df000504 	addi	fp,sp,20
10000b08:	e13ffd15 	stw	r4,-12(fp)
10000b0c:	e17ffe15 	stw	r5,-8(fp)
10000b10:	e1bfff15 	stw	r6,-4(fp)
	unsigned int fifospace;
	int count = 0;
10000b14:	e03ffb15 	stw	zero,-20(fp)
	while (count < len) {
10000b18:	00002a06 	br	10000bc4 <audio_write_fifo+0xc8>
		//read the whole fifospace register
		fifospace = IORD_AUDIO_FIFOSPACE();
10000b1c:	00801004 	movi	r2,64
10000b20:	10800104 	addi	r2,r2,4
10000b24:	10800037 	ldwio	r2,0(r2)
10000b28:	e0bffc15 	stw	r2,-16(fp)
		//extract the part for left Channel Write Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET :
10000b2c:	e0bfff17 	ldw	r2,-4(fp)
10000b30:	1000031e 	bne	r2,zero,10000b40 <audio_write_fifo+0x44>
10000b34:	e0bffc17 	ldw	r2,-16(fp)
10000b38:	1004d63a 	srli	r2,r2,24
10000b3c:	00000306 	br	10000b4c <audio_write_fifo+0x50>
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
10000b40:	e0bffc17 	ldw	r2,-16(fp)
10000b44:	10803fec 	andhi	r2,r2,255
	while (count < len) {
		//read the whole fifospace register
		fifospace = IORD_AUDIO_FIFOSPACE();
		//extract the part for left Channel Write Space
		fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET :
10000b48:	1004d43a 	srli	r2,r2,16
	int count = 0;
	while (count < len) {
		//read the whole fifospace register
		fifospace = IORD_AUDIO_FIFOSPACE();
		//extract the part for left Channel Write Space
		fifospace = (channel == AUDIO_LEFT) ?
10000b4c:	e0bffc15 	stw	r2,-16(fp)
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET :
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
		if (fifospace > 0) {
10000b50:	e0bffc17 	ldw	r2,-16(fp)
10000b54:	10001a26 	beq	r2,zero,10000bc0 <audio_write_fifo+0xc4>
			if (channel == AUDIO_LEFT)
10000b58:	e0bfff17 	ldw	r2,-4(fp)
10000b5c:	10000c1e 	bne	r2,zero,10000b90 <audio_write_fifo+0x94>
				IOWR_AUDIO_LEFTDATA(buf[count++]);
10000b60:	00801004 	movi	r2,64
10000b64:	10c00204 	addi	r3,r2,8
10000b68:	e0bffb17 	ldw	r2,-20(fp)
10000b6c:	11000044 	addi	r4,r2,1
10000b70:	e13ffb15 	stw	r4,-20(fp)
10000b74:	1085883a 	add	r2,r2,r2
10000b78:	1085883a 	add	r2,r2,r2
10000b7c:	e13ffd17 	ldw	r4,-12(fp)
10000b80:	2085883a 	add	r2,r4,r2
10000b84:	10800017 	ldw	r2,0(r2)
10000b88:	18800035 	stwio	r2,0(r3)
10000b8c:	00000d06 	br	10000bc4 <audio_write_fifo+0xc8>
			else 
				IOWR_AUDIO_RIGHTDATA(buf[count++]);
10000b90:	00801004 	movi	r2,64
10000b94:	10c00304 	addi	r3,r2,12
10000b98:	e0bffb17 	ldw	r2,-20(fp)
10000b9c:	11000044 	addi	r4,r2,1
10000ba0:	e13ffb15 	stw	r4,-20(fp)
10000ba4:	1085883a 	add	r2,r2,r2
10000ba8:	1085883a 	add	r2,r2,r2
10000bac:	e13ffd17 	ldw	r4,-12(fp)
10000bb0:	2085883a 	add	r2,r4,r2
10000bb4:	10800017 	ldw	r2,0(r2)
10000bb8:	18800035 	stwio	r2,0(r3)
10000bbc:	00000106 	br	10000bc4 <audio_write_fifo+0xc8>
		}
		else {
			//no more space to write
			break;
10000bc0:	00000306 	br	10000bd0 <audio_write_fifo+0xd4>
}

int audio_write_fifo(unsigned int *buf, int len, int channel) {
	unsigned int fifospace;
	int count = 0;
	while (count < len) {
10000bc4:	e0fffb17 	ldw	r3,-20(fp)
10000bc8:	e0bffe17 	ldw	r2,-8(fp)
10000bcc:	18bfd316 	blt	r3,r2,10000b1c <__alt_data_end+0xf8000b1c>
		else {
			//no more space to write
			break;
		}
	}
	return count;
10000bd0:	e0bffb17 	ldw	r2,-20(fp)
}
10000bd4:	e037883a 	mov	sp,fp
10000bd8:	df000017 	ldw	fp,0(sp)
10000bdc:	dec00104 	addi	sp,sp,4
10000be0:	f800283a 	ret

10000be4 <audio_read_fifo_head>:

unsigned int audio_read_fifo_head(int channel) {
10000be4:	defffe04 	addi	sp,sp,-8
10000be8:	df000115 	stw	fp,4(sp)
10000bec:	df000104 	addi	fp,sp,4
10000bf0:	e13fff15 	stw	r4,-4(fp)
	return ( (channel == AUDIO_LEFT) ? IORD_AUDIO_LEFTDATA() :
10000bf4:	e0bfff17 	ldw	r2,-4(fp)
10000bf8:	1000041e 	bne	r2,zero,10000c0c <audio_read_fifo_head+0x28>
10000bfc:	00801004 	movi	r2,64
10000c00:	10800204 	addi	r2,r2,8
10000c04:	10800037 	ldwio	r2,0(r2)
10000c08:	00000306 	br	10000c18 <audio_read_fifo_head+0x34>
					IORD_AUDIO_RIGHTDATA() );
10000c0c:	00801004 	movi	r2,64
10000c10:	10800304 	addi	r2,r2,12
10000c14:	10800037 	ldwio	r2,0(r2)
}
10000c18:	e037883a 	mov	sp,fp
10000c1c:	df000017 	ldw	fp,0(sp)
10000c20:	dec00104 	addi	sp,sp,4
10000c24:	f800283a 	ret

10000c28 <audio_write_fifo_head>:

void audio_write_fifo_head(unsigned int data, int channel) {
10000c28:	defffd04 	addi	sp,sp,-12
10000c2c:	df000215 	stw	fp,8(sp)
10000c30:	df000204 	addi	fp,sp,8
10000c34:	e13ffe15 	stw	r4,-8(fp)
10000c38:	e17fff15 	stw	r5,-4(fp)
	if (channel == AUDIO_LEFT)
10000c3c:	e0bfff17 	ldw	r2,-4(fp)
10000c40:	1000051e 	bne	r2,zero,10000c58 <audio_write_fifo_head+0x30>
		IOWR_AUDIO_LEFTDATA(data);
10000c44:	00801004 	movi	r2,64
10000c48:	10800204 	addi	r2,r2,8
10000c4c:	e0fffe17 	ldw	r3,-8(fp)
10000c50:	10c00035 	stwio	r3,0(r2)
10000c54:	00000406 	br	10000c68 <audio_write_fifo_head+0x40>
	else
		IOWR_AUDIO_RIGHTDATA(data);
10000c58:	00801004 	movi	r2,64
10000c5c:	10800304 	addi	r2,r2,12
10000c60:	e0fffe17 	ldw	r3,-8(fp)
10000c64:	10c00035 	stwio	r3,0(r2)
}
10000c68:	e037883a 	mov	sp,fp
10000c6c:	df000017 	ldw	fp,0(sp)
10000c70:	dec00104 	addi	sp,sp,4
10000c74:	f800283a 	ret

10000c78 <audio_record_r>:
 * Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words
 * available. If it doesn't, then just returns 0. If it does, then data is read from
 * the FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int audio_record_r(unsigned int *buf, int len)
{
10000c78:	defffb04 	addi	sp,sp,-20
10000c7c:	dfc00415 	stw	ra,16(sp)
10000c80:	df000315 	stw	fp,12(sp)
10000c84:	df000304 	addi	fp,sp,12
10000c88:	e13ffe15 	stw	r4,-8(fp)
10000c8c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_words = audio_read_fifo_avail(AUDIO_RIGHT);
10000c90:	01000044 	movi	r4,1
10000c94:	00009d80 	call	100009d8 <audio_read_fifo_avail>
10000c98:	e0bffd15 	stw	r2,-12(fp)
	if (data_words <= BUF_THRESHOLD)
10000c9c:	e0bffd17 	ldw	r2,-12(fp)
10000ca0:	10801868 	cmpgeui	r2,r2,97
10000ca4:	1000021e 	bne	r2,zero,10000cb0 <audio_record_r+0x38>
		return 0;
10000ca8:	0005883a 	mov	r2,zero
10000cac:	00000406 	br	10000cc0 <audio_record_r+0x48>
	else
		return audio_read_fifo(buf, len, AUDIO_RIGHT);
10000cb0:	e13ffe17 	ldw	r4,-8(fp)
10000cb4:	e17fff17 	ldw	r5,-4(fp)
10000cb8:	01800044 	movi	r6,1
10000cbc:	0000a300 	call	10000a30 <audio_read_fifo>
}
10000cc0:	e037883a 	mov	sp,fp
10000cc4:	dfc00117 	ldw	ra,4(sp)
10000cc8:	df000017 	ldw	fp,0(sp)
10000ccc:	dec00204 	addi	sp,sp,8
10000cd0:	f800283a 	ret

10000cd4 <audio_record_l>:
 * Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words
 * available. If it doesn't, then just returns 0. If it does, then data is read from
 * the FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int audio_record_l(unsigned int *buf, int len)
{
10000cd4:	defffb04 	addi	sp,sp,-20
10000cd8:	dfc00415 	stw	ra,16(sp)
10000cdc:	df000315 	stw	fp,12(sp)
10000ce0:	df000304 	addi	fp,sp,12
10000ce4:	e13ffe15 	stw	r4,-8(fp)
10000ce8:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_words = audio_read_fifo_avail(AUDIO_LEFT);
10000cec:	0009883a 	mov	r4,zero
10000cf0:	00009d80 	call	100009d8 <audio_read_fifo_avail>
10000cf4:	e0bffd15 	stw	r2,-12(fp)
	if (data_words <= BUF_THRESHOLD)
10000cf8:	e0bffd17 	ldw	r2,-12(fp)
10000cfc:	10801868 	cmpgeui	r2,r2,97
10000d00:	1000021e 	bne	r2,zero,10000d0c <audio_record_l+0x38>
		return 0;
10000d04:	0005883a 	mov	r2,zero
10000d08:	00000406 	br	10000d1c <audio_record_l+0x48>
	else
		return audio_read_fifo(buf, len, AUDIO_LEFT);
10000d0c:	e13ffe17 	ldw	r4,-8(fp)
10000d10:	e17fff17 	ldw	r5,-4(fp)
10000d14:	000d883a 	mov	r6,zero
10000d18:	0000a300 	call	10000a30 <audio_read_fifo>
}
10000d1c:	e037883a 	mov	sp,fp
10000d20:	dfc00117 	ldw	ra,4(sp)
10000d24:	df000017 	ldw	fp,0(sp)
10000d28:	dec00204 	addi	sp,sp,8
10000d2c:	f800283a 	ret

10000d30 <audio_write_fifo_space>:

/**
 * Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC
 */
unsigned int audio_write_fifo_space(int channel)
{
10000d30:	defffd04 	addi	sp,sp,-12
10000d34:	df000215 	stw	fp,8(sp)
10000d38:	df000204 	addi	fp,sp,8
10000d3c:	e13fff15 	stw	r4,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_AUDIO_FIFOSPACE();
10000d40:	00801004 	movi	r2,64
10000d44:	10800104 	addi	r2,r2,4
10000d48:	10800037 	ldwio	r2,0(r2)
10000d4c:	e0bffe15 	stw	r2,-8(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET
			:
10000d50:	e0bfff17 	ldw	r2,-4(fp)
10000d54:	1000031e 	bne	r2,zero,10000d64 <audio_write_fifo_space+0x34>
10000d58:	e0bffe17 	ldw	r2,-8(fp)
10000d5c:	1004d63a 	srli	r2,r2,24
10000d60:	00000306 	br	10000d70 <audio_write_fifo_space+0x40>
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
10000d64:	e0bffe17 	ldw	r2,-8(fp)
10000d68:	10803fec 	andhi	r2,r2,255
	// read the whole fifospace register
	fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper Channel Read Space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET
			:
10000d6c:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper Channel Read Space
	fifospace = (channel == AUDIO_LEFT) ?
10000d70:	e0bffe15 	stw	r2,-8(fp)
			(fifospace & AUDIO_FIFOSPACE_WSLC_MASK) >> AUDIO_FIFOSPACE_WSLC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_WSRC_MASK) >> AUDIO_FIFOSPACE_WSRC_OFFSET;
	return fifospace;
10000d74:	e0bffe17 	ldw	r2,-8(fp)
}
10000d78:	e037883a 	mov	sp,fp
10000d7c:	df000017 	ldw	fp,0(sp)
10000d80:	dec00104 	addi	sp,sp,4
10000d84:	f800283a 	ret

10000d88 <audio_play_r>:
 * Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the
 * FIFO, up to a maximum of len words.
 */
unsigned int audio_play_r(unsigned int *buf, int len)
{
10000d88:	defffb04 	addi	sp,sp,-20
10000d8c:	dfc00415 	stw	ra,16(sp)
10000d90:	df000315 	stw	fp,12(sp)
10000d94:	df000304 	addi	fp,sp,12
10000d98:	e13ffe15 	stw	r4,-8(fp)
10000d9c:	e17fff15 	stw	r5,-4(fp)
	unsigned int space = audio_write_fifo_space(AUDIO_RIGHT);
10000da0:	01000044 	movi	r4,1
10000da4:	0000d300 	call	10000d30 <audio_write_fifo_space>
10000da8:	e0bffd15 	stw	r2,-12(fp)
		if (space <= BUF_THRESHOLD)
10000dac:	e0bffd17 	ldw	r2,-12(fp)
10000db0:	10801868 	cmpgeui	r2,r2,97
10000db4:	1000021e 	bne	r2,zero,10000dc0 <audio_play_r+0x38>
			return 0;
10000db8:	0005883a 	mov	r2,zero
10000dbc:	00000406 	br	10000dd0 <audio_play_r+0x48>
		else
			return audio_write_fifo(buf, len, AUDIO_RIGHT);
10000dc0:	e13ffe17 	ldw	r4,-8(fp)
10000dc4:	e17fff17 	ldw	r5,-4(fp)
10000dc8:	01800044 	movi	r6,1
10000dcc:	0000afc0 	call	10000afc <audio_write_fifo>
}
10000dd0:	e037883a 	mov	sp,fp
10000dd4:	dfc00117 	ldw	ra,4(sp)
10000dd8:	df000017 	ldw	fp,0(sp)
10000ddc:	dec00204 	addi	sp,sp,8
10000de0:	f800283a 	ret

10000de4 <audio_play_l>:
 * Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the
 * FIFO, up to a maximum of len words.
 */
unsigned int audio_play_l(unsigned int *buf, int len)
{
10000de4:	defffb04 	addi	sp,sp,-20
10000de8:	dfc00415 	stw	ra,16(sp)
10000dec:	df000315 	stw	fp,12(sp)
10000df0:	df000304 	addi	fp,sp,12
10000df4:	e13ffe15 	stw	r4,-8(fp)
10000df8:	e17fff15 	stw	r5,-4(fp)
	unsigned int space = audio_write_fifo_space(AUDIO_LEFT);
10000dfc:	0009883a 	mov	r4,zero
10000e00:	0000d300 	call	10000d30 <audio_write_fifo_space>
10000e04:	e0bffd15 	stw	r2,-12(fp)
	if (space <= BUF_THRESHOLD)
10000e08:	e0bffd17 	ldw	r2,-12(fp)
10000e0c:	10801868 	cmpgeui	r2,r2,97
10000e10:	1000021e 	bne	r2,zero,10000e1c <audio_play_l+0x38>
		return 0;
10000e14:	0005883a 	mov	r2,zero
10000e18:	00000406 	br	10000e2c <audio_play_l+0x48>
	else
		return audio_write_fifo(buf, len, AUDIO_LEFT);
10000e1c:	e13ffe17 	ldw	r4,-8(fp)
10000e20:	e17fff17 	ldw	r5,-4(fp)
10000e24:	000d883a 	mov	r6,zero
10000e28:	0000afc0 	call	10000afc <audio_write_fifo>
}
10000e2c:	e037883a 	mov	sp,fp
10000e30:	dfc00117 	ldw	ra,4(sp)
10000e34:	df000017 	ldw	fp,0(sp)
10000e38:	dec00204 	addi	sp,sp,8
10000e3c:	f800283a 	ret

10000e40 <main>:
//#include "priv/alt_file.h"
#include "audIO.h"


int main()
{
10000e40:	defc1504 	addi	sp,sp,-4012
10000e44:	dfc3ea15 	stw	ra,4008(sp)
10000e48:	df03e915 	stw	fp,4004(sp)
10000e4c:	df03e904 	addi	fp,sp,4004
	  next = (alt_dev *)dev->llist.next;
	  printf("%d:\tList name: %s\n", i++, dev->name);
  } while ((alt_llist *)next != &alt_dev_list);
  */
  
  audio_reset_audio_core();
10000e50:	00009600 	call	10000960 <audio_reset_audio_core>
  
  // Check how many data words the read FIFO for the right channel has.
  for (i = 0; i < 5; i++) {
10000e54:	e03c1715 	stw	zero,-4004(fp)
10000e58:	00000f06 	br	10000e98 <main+0x58>
	  printf("Left available: %u\n", audio_read_fifo_avail(AUDIO_LEFT));
10000e5c:	0009883a 	mov	r4,zero
10000e60:	00009d80 	call	100009d8 <audio_read_fifo_avail>
10000e64:	01040074 	movhi	r4,4097
10000e68:	213f4a04 	addi	r4,r4,-728
10000e6c:	100b883a 	mov	r5,r2
10000e70:	0000ee80 	call	10000ee8 <printf>
	  printf("Right available: %u\n", audio_read_fifo_avail(AUDIO_RIGHT));
10000e74:	01000044 	movi	r4,1
10000e78:	00009d80 	call	100009d8 <audio_read_fifo_avail>
10000e7c:	01040074 	movhi	r4,4097
10000e80:	213f4f04 	addi	r4,r4,-708
10000e84:	100b883a 	mov	r5,r2
10000e88:	0000ee80 	call	10000ee8 <printf>
  */
  
  audio_reset_audio_core();
  
  // Check how many data words the read FIFO for the right channel has.
  for (i = 0; i < 5; i++) {
10000e8c:	e0bc1717 	ldw	r2,-4004(fp)
10000e90:	10800044 	addi	r2,r2,1
10000e94:	e0bc1715 	stw	r2,-4004(fp)
10000e98:	e0bc1717 	ldw	r2,-4004(fp)
10000e9c:	10800150 	cmplti	r2,r2,5
10000ea0:	103fee1e 	bne	r2,zero,10000e5c <__alt_data_end+0xf8000e5c>
	  printf("Left available: %u\n", audio_read_fifo_avail(AUDIO_LEFT));
	  printf("Right available: %u\n", audio_read_fifo_avail(AUDIO_RIGHT));
  }
  return 0;
10000ea4:	0005883a 	mov	r2,zero
  printf("Reading buffer...");
  audio_record_r(buf, sizeof(buf));
  printf(" Done.\n");
  
  return 0;
}
10000ea8:	e037883a 	mov	sp,fp
10000eac:	dfc00117 	ldw	ra,4(sp)
10000eb0:	df000017 	ldw	fp,0(sp)
10000eb4:	dec00204 	addi	sp,sp,8
10000eb8:	f800283a 	ret

10000ebc <_printf_r>:
10000ebc:	defffd04 	addi	sp,sp,-12
10000ec0:	dfc00015 	stw	ra,0(sp)
10000ec4:	d9800115 	stw	r6,4(sp)
10000ec8:	d9c00215 	stw	r7,8(sp)
10000ecc:	280d883a 	mov	r6,r5
10000ed0:	21400217 	ldw	r5,8(r4)
10000ed4:	d9c00104 	addi	r7,sp,4
10000ed8:	0000f240 	call	10000f24 <___vfprintf_internal_r>
10000edc:	dfc00017 	ldw	ra,0(sp)
10000ee0:	dec00304 	addi	sp,sp,12
10000ee4:	f800283a 	ret

10000ee8 <printf>:
10000ee8:	defffc04 	addi	sp,sp,-16
10000eec:	dfc00015 	stw	ra,0(sp)
10000ef0:	d9400115 	stw	r5,4(sp)
10000ef4:	d9800215 	stw	r6,8(sp)
10000ef8:	d9c00315 	stw	r7,12(sp)
10000efc:	00840074 	movhi	r2,4097
10000f00:	1086c204 	addi	r2,r2,6920
10000f04:	10800017 	ldw	r2,0(r2)
10000f08:	200b883a 	mov	r5,r4
10000f0c:	d9800104 	addi	r6,sp,4
10000f10:	11000217 	ldw	r4,8(r2)
10000f14:	00030780 	call	10003078 <__vfprintf_internal>
10000f18:	dfc00017 	ldw	ra,0(sp)
10000f1c:	dec00404 	addi	sp,sp,16
10000f20:	f800283a 	ret

10000f24 <___vfprintf_internal_r>:
10000f24:	defeb604 	addi	sp,sp,-1320
10000f28:	dfc14915 	stw	ra,1316(sp)
10000f2c:	dcc14315 	stw	r19,1292(sp)
10000f30:	dc414115 	stw	r17,1284(sp)
10000f34:	d9012c15 	stw	r4,1200(sp)
10000f38:	2827883a 	mov	r19,r5
10000f3c:	3023883a 	mov	r17,r6
10000f40:	d9c12f15 	stw	r7,1212(sp)
10000f44:	df014815 	stw	fp,1312(sp)
10000f48:	ddc14715 	stw	r23,1308(sp)
10000f4c:	dd814615 	stw	r22,1304(sp)
10000f50:	dd414515 	stw	r21,1300(sp)
10000f54:	dd014415 	stw	r20,1296(sp)
10000f58:	dc814215 	stw	r18,1288(sp)
10000f5c:	dc014015 	stw	r16,1280(sp)
10000f60:	000565c0 	call	1000565c <_localeconv_r>
10000f64:	10800017 	ldw	r2,0(r2)
10000f68:	1009883a 	mov	r4,r2
10000f6c:	d8813415 	stw	r2,1232(sp)
10000f70:	00075e40 	call	100075e4 <strlen>
10000f74:	d8813815 	stw	r2,1248(sp)
10000f78:	d8812c17 	ldw	r2,1200(sp)
10000f7c:	10000226 	beq	r2,zero,10000f88 <___vfprintf_internal_r+0x64>
10000f80:	10800e17 	ldw	r2,56(r2)
10000f84:	10010826 	beq	r2,zero,100013a8 <___vfprintf_internal_r+0x484>
10000f88:	9880030b 	ldhu	r2,12(r19)
10000f8c:	1108000c 	andi	r4,r2,8192
10000f90:	1007883a 	mov	r3,r2
10000f94:	2000071e 	bne	r4,zero,10000fb4 <___vfprintf_internal_r+0x90>
10000f98:	99001917 	ldw	r4,100(r19)
10000f9c:	10c80014 	ori	r3,r2,8192
10000fa0:	00b7ffc4 	movi	r2,-8193
10000fa4:	2088703a 	and	r4,r4,r2
10000fa8:	98c0030d 	sth	r3,12(r19)
10000fac:	1805883a 	mov	r2,r3
10000fb0:	99001915 	stw	r4,100(r19)
10000fb4:	1900020c 	andi	r4,r3,8
10000fb8:	2000ab26 	beq	r4,zero,10001268 <___vfprintf_internal_r+0x344>
10000fbc:	99000417 	ldw	r4,16(r19)
10000fc0:	2000a926 	beq	r4,zero,10001268 <___vfprintf_internal_r+0x344>
10000fc4:	18c0068c 	andi	r3,r3,26
10000fc8:	01000284 	movi	r4,10
10000fcc:	1900af26 	beq	r3,r4,1000128c <___vfprintf_internal_r+0x368>
10000fd0:	d9010dc4 	addi	r4,sp,1079
10000fd4:	d9410e04 	addi	r5,sp,1080
10000fd8:	d8800404 	addi	r2,sp,16
10000fdc:	2907c83a 	sub	r3,r5,r4
10000fe0:	d9012815 	stw	r4,1184(sp)
10000fe4:	d9412915 	stw	r5,1188(sp)
10000fe8:	d8811e15 	stw	r2,1144(sp)
10000fec:	d8012015 	stw	zero,1152(sp)
10000ff0:	d8011f15 	stw	zero,1148(sp)
10000ff4:	d8013515 	stw	zero,1236(sp)
10000ff8:	d8013715 	stw	zero,1244(sp)
10000ffc:	d8013915 	stw	zero,1252(sp)
10001000:	d8013b15 	stw	zero,1260(sp)
10001004:	d8013a15 	stw	zero,1256(sp)
10001008:	d8013115 	stw	zero,1220(sp)
1000100c:	1011883a 	mov	r8,r2
10001010:	05c40074 	movhi	r23,4097
10001014:	bdff6584 	addi	r23,r23,-618
10001018:	d8c13d15 	stw	r3,1268(sp)
1000101c:	88800007 	ldb	r2,0(r17)
10001020:	10021126 	beq	r2,zero,10001868 <___vfprintf_internal_r+0x944>
10001024:	00c00944 	movi	r3,37
10001028:	8821883a 	mov	r16,r17
1000102c:	10c0021e 	bne	r2,r3,10001038 <___vfprintf_internal_r+0x114>
10001030:	00001406 	br	10001084 <___vfprintf_internal_r+0x160>
10001034:	10c00326 	beq	r2,r3,10001044 <___vfprintf_internal_r+0x120>
10001038:	84000044 	addi	r16,r16,1
1000103c:	80800007 	ldb	r2,0(r16)
10001040:	103ffc1e 	bne	r2,zero,10001034 <__alt_data_end+0xf8001034>
10001044:	8465c83a 	sub	r18,r16,r17
10001048:	90000e26 	beq	r18,zero,10001084 <___vfprintf_internal_r+0x160>
1000104c:	d8c12017 	ldw	r3,1152(sp)
10001050:	d8811f17 	ldw	r2,1148(sp)
10001054:	44400015 	stw	r17,0(r8)
10001058:	1c87883a 	add	r3,r3,r18
1000105c:	10800044 	addi	r2,r2,1
10001060:	d8c12015 	stw	r3,1152(sp)
10001064:	44800115 	stw	r18,4(r8)
10001068:	d8811f15 	stw	r2,1148(sp)
1000106c:	00c001c4 	movi	r3,7
10001070:	1880bb16 	blt	r3,r2,10001360 <___vfprintf_internal_r+0x43c>
10001074:	42000204 	addi	r8,r8,8
10001078:	d9013117 	ldw	r4,1220(sp)
1000107c:	2489883a 	add	r4,r4,r18
10001080:	d9013115 	stw	r4,1220(sp)
10001084:	80800007 	ldb	r2,0(r16)
10001088:	1000bc26 	beq	r2,zero,1000137c <___vfprintf_internal_r+0x458>
1000108c:	053fffc4 	movi	r20,-1
10001090:	84400044 	addi	r17,r16,1
10001094:	84800047 	ldb	r18,1(r16)
10001098:	d8012785 	stb	zero,1182(sp)
1000109c:	002d883a 	mov	r22,zero
100010a0:	d8013015 	stw	zero,1216(sp)
100010a4:	d8012a15 	stw	zero,1192(sp)
100010a8:	04001604 	movi	r16,88
100010ac:	05400244 	movi	r21,9
100010b0:	4039883a 	mov	fp,r8
100010b4:	a007883a 	mov	r3,r20
100010b8:	8c400044 	addi	r17,r17,1
100010bc:	90bff804 	addi	r2,r18,-32
100010c0:	80832036 	bltu	r16,r2,10001d44 <___vfprintf_internal_r+0xe20>
100010c4:	1085883a 	add	r2,r2,r2
100010c8:	1085883a 	add	r2,r2,r2
100010cc:	01440034 	movhi	r5,4096
100010d0:	29443804 	addi	r5,r5,4320
100010d4:	1145883a 	add	r2,r2,r5
100010d8:	10800017 	ldw	r2,0(r2)
100010dc:	1000683a 	jmp	r2
100010e0:	10001ae4 	muli	zero,r2,107
100010e4:	10001d44 	addi	zero,r2,117
100010e8:	10001d44 	addi	zero,r2,117
100010ec:	10001b00 	call	110001b0 <_gp+0xfe66b4>
100010f0:	10001d44 	addi	zero,r2,117
100010f4:	10001d44 	addi	zero,r2,117
100010f8:	10001d44 	addi	zero,r2,117
100010fc:	10001d44 	addi	zero,r2,117
10001100:	10001d44 	addi	zero,r2,117
10001104:	10001d44 	addi	zero,r2,117
10001108:	10001b14 	ori	zero,r2,108
1000110c:	100013b4 	orhi	zero,r2,78
10001110:	10001d44 	addi	zero,r2,117
10001114:	10001254 	ori	zero,r2,73
10001118:	100013c0 	call	1100013c <_gp+0xfe6640>
1000111c:	10001d44 	addi	zero,r2,117
10001120:	10001410 	cmplti	zero,r2,80
10001124:	10001920 	cmpeqi	zero,r2,100
10001128:	10001920 	cmpeqi	zero,r2,100
1000112c:	10001920 	cmpeqi	zero,r2,100
10001130:	10001920 	cmpeqi	zero,r2,100
10001134:	10001920 	cmpeqi	zero,r2,100
10001138:	10001920 	cmpeqi	zero,r2,100
1000113c:	10001920 	cmpeqi	zero,r2,100
10001140:	10001920 	cmpeqi	zero,r2,100
10001144:	10001920 	cmpeqi	zero,r2,100
10001148:	10001d44 	addi	zero,r2,117
1000114c:	10001d44 	addi	zero,r2,117
10001150:	10001d44 	addi	zero,r2,117
10001154:	10001d44 	addi	zero,r2,117
10001158:	10001d44 	addi	zero,r2,117
1000115c:	10001d44 	addi	zero,r2,117
10001160:	10001d44 	addi	zero,r2,117
10001164:	10001d44 	addi	zero,r2,117
10001168:	10001d44 	addi	zero,r2,117
1000116c:	10001d44 	addi	zero,r2,117
10001170:	10001424 	muli	zero,r2,80
10001174:	10001870 	cmpltui	zero,r2,97
10001178:	10001d44 	addi	zero,r2,117
1000117c:	10001870 	cmpltui	zero,r2,97
10001180:	10001d44 	addi	zero,r2,117
10001184:	10001d44 	addi	zero,r2,117
10001188:	10001d44 	addi	zero,r2,117
1000118c:	10001d44 	addi	zero,r2,117
10001190:	10001968 	cmpgeui	zero,r2,101
10001194:	10001d44 	addi	zero,r2,117
10001198:	10001d44 	addi	zero,r2,117
1000119c:	1000197c 	xorhi	zero,r2,101
100011a0:	10001d44 	addi	zero,r2,117
100011a4:	10001d44 	addi	zero,r2,117
100011a8:	10001d44 	addi	zero,r2,117
100011ac:	10001d44 	addi	zero,r2,117
100011b0:	10001d44 	addi	zero,r2,117
100011b4:	100019c4 	addi	zero,r2,103
100011b8:	10001d44 	addi	zero,r2,117
100011bc:	10001d44 	addi	zero,r2,117
100011c0:	10001b38 	rdprs	zero,r2,108
100011c4:	10001d44 	addi	zero,r2,117
100011c8:	10001d44 	addi	zero,r2,117
100011cc:	10001d44 	addi	zero,r2,117
100011d0:	10001d44 	addi	zero,r2,117
100011d4:	10001d44 	addi	zero,r2,117
100011d8:	10001d44 	addi	zero,r2,117
100011dc:	10001d44 	addi	zero,r2,117
100011e0:	10001d44 	addi	zero,r2,117
100011e4:	10001d44 	addi	zero,r2,117
100011e8:	10001d44 	addi	zero,r2,117
100011ec:	10001a3c 	xorhi	zero,r2,104
100011f0:	10001bb4 	orhi	zero,r2,110
100011f4:	10001870 	cmpltui	zero,r2,97
100011f8:	10001870 	cmpltui	zero,r2,97
100011fc:	10001870 	cmpltui	zero,r2,97
10001200:	10001b80 	call	110001b8 <_gp+0xfe66bc>
10001204:	10001bb4 	orhi	zero,r2,110
10001208:	10001d44 	addi	zero,r2,117
1000120c:	10001d44 	addi	zero,r2,117
10001210:	10001b94 	ori	zero,r2,110
10001214:	10001d44 	addi	zero,r2,117
10001218:	10001a04 	addi	zero,r2,104
1000121c:	10001cc4 	addi	zero,r2,115
10001220:	10001c70 	cmpltui	zero,r2,113
10001224:	10001bf4 	orhi	zero,r2,111
10001228:	10001d44 	addi	zero,r2,117
1000122c:	10001c08 	cmpgei	zero,r2,112
10001230:	10001d44 	addi	zero,r2,117
10001234:	10001d04 	addi	zero,r2,116
10001238:	10001d44 	addi	zero,r2,117
1000123c:	10001d44 	addi	zero,r2,117
10001240:	10001a7c 	xorhi	zero,r2,105
10001244:	d9413017 	ldw	r5,1216(sp)
10001248:	d8812f15 	stw	r2,1212(sp)
1000124c:	014bc83a 	sub	r5,zero,r5
10001250:	d9413015 	stw	r5,1216(sp)
10001254:	d8812a17 	ldw	r2,1192(sp)
10001258:	10800114 	ori	r2,r2,4
1000125c:	d8812a15 	stw	r2,1192(sp)
10001260:	8c800007 	ldb	r18,0(r17)
10001264:	003f9406 	br	100010b8 <__alt_data_end+0xf80010b8>
10001268:	d9012c17 	ldw	r4,1200(sp)
1000126c:	980b883a 	mov	r5,r19
10001270:	000309c0 	call	1000309c <__swsetup_r>
10001274:	10002d1e 	bne	r2,zero,1000132c <___vfprintf_internal_r+0x408>
10001278:	9880030b 	ldhu	r2,12(r19)
1000127c:	01000284 	movi	r4,10
10001280:	1007883a 	mov	r3,r2
10001284:	18c0068c 	andi	r3,r3,26
10001288:	193f511e 	bne	r3,r4,10000fd0 <__alt_data_end+0xf8000fd0>
1000128c:	98c0038b 	ldhu	r3,14(r19)
10001290:	193fffcc 	andi	r4,r3,65535
10001294:	2120001c 	xori	r4,r4,32768
10001298:	21200004 	addi	r4,r4,-32768
1000129c:	203f4c16 	blt	r4,zero,10000fd0 <__alt_data_end+0xf8000fd0>
100012a0:	9ac01917 	ldw	r11,100(r19)
100012a4:	9a800717 	ldw	r10,28(r19)
100012a8:	9a400917 	ldw	r9,36(r19)
100012ac:	d9012c17 	ldw	r4,1200(sp)
100012b0:	d9c12f17 	ldw	r7,1212(sp)
100012b4:	02010004 	movi	r8,1024
100012b8:	10bfff4c 	andi	r2,r2,65533
100012bc:	d8c1078d 	sth	r3,1054(sp)
100012c0:	d9410404 	addi	r5,sp,1040
100012c4:	d8c00404 	addi	r3,sp,16
100012c8:	880d883a 	mov	r6,r17
100012cc:	d881070d 	sth	r2,1052(sp)
100012d0:	dac11d15 	stw	r11,1140(sp)
100012d4:	da810b15 	stw	r10,1068(sp)
100012d8:	da410d15 	stw	r9,1076(sp)
100012dc:	d8c10415 	stw	r3,1040(sp)
100012e0:	d8c10815 	stw	r3,1056(sp)
100012e4:	da010615 	stw	r8,1048(sp)
100012e8:	da010915 	stw	r8,1060(sp)
100012ec:	d8010a15 	stw	zero,1064(sp)
100012f0:	0000f240 	call	10000f24 <___vfprintf_internal_r>
100012f4:	1021883a 	mov	r16,r2
100012f8:	10000416 	blt	r2,zero,1000130c <___vfprintf_internal_r+0x3e8>
100012fc:	d9012c17 	ldw	r4,1200(sp)
10001300:	d9410404 	addi	r5,sp,1040
10001304:	0004a380 	call	10004a38 <_fflush_r>
10001308:	10072a1e 	bne	r2,zero,10002fb4 <___vfprintf_internal_r+0x2090>
1000130c:	d881070b 	ldhu	r2,1052(sp)
10001310:	1080100c 	andi	r2,r2,64
10001314:	10000326 	beq	r2,zero,10001324 <___vfprintf_internal_r+0x400>
10001318:	9880030b 	ldhu	r2,12(r19)
1000131c:	10801014 	ori	r2,r2,64
10001320:	9880030d 	sth	r2,12(r19)
10001324:	8005883a 	mov	r2,r16
10001328:	00000106 	br	10001330 <___vfprintf_internal_r+0x40c>
1000132c:	00bfffc4 	movi	r2,-1
10001330:	dfc14917 	ldw	ra,1316(sp)
10001334:	df014817 	ldw	fp,1312(sp)
10001338:	ddc14717 	ldw	r23,1308(sp)
1000133c:	dd814617 	ldw	r22,1304(sp)
10001340:	dd414517 	ldw	r21,1300(sp)
10001344:	dd014417 	ldw	r20,1296(sp)
10001348:	dcc14317 	ldw	r19,1292(sp)
1000134c:	dc814217 	ldw	r18,1288(sp)
10001350:	dc414117 	ldw	r17,1284(sp)
10001354:	dc014017 	ldw	r16,1280(sp)
10001358:	dec14a04 	addi	sp,sp,1320
1000135c:	f800283a 	ret
10001360:	d9012c17 	ldw	r4,1200(sp)
10001364:	980b883a 	mov	r5,r19
10001368:	d9811e04 	addi	r6,sp,1144
1000136c:	000776c0 	call	1000776c <__sprint_r>
10001370:	1000081e 	bne	r2,zero,10001394 <___vfprintf_internal_r+0x470>
10001374:	da000404 	addi	r8,sp,16
10001378:	003f3f06 	br	10001078 <__alt_data_end+0xf8001078>
1000137c:	d8812017 	ldw	r2,1152(sp)
10001380:	10000426 	beq	r2,zero,10001394 <___vfprintf_internal_r+0x470>
10001384:	d9012c17 	ldw	r4,1200(sp)
10001388:	980b883a 	mov	r5,r19
1000138c:	d9811e04 	addi	r6,sp,1144
10001390:	000776c0 	call	1000776c <__sprint_r>
10001394:	9880030b 	ldhu	r2,12(r19)
10001398:	1080100c 	andi	r2,r2,64
1000139c:	103fe31e 	bne	r2,zero,1000132c <__alt_data_end+0xf800132c>
100013a0:	d8813117 	ldw	r2,1220(sp)
100013a4:	003fe206 	br	10001330 <__alt_data_end+0xf8001330>
100013a8:	d9012c17 	ldw	r4,1200(sp)
100013ac:	0004d580 	call	10004d58 <__sinit>
100013b0:	003ef506 	br	10000f88 <__alt_data_end+0xf8000f88>
100013b4:	05800ac4 	movi	r22,43
100013b8:	8c800007 	ldb	r18,0(r17)
100013bc:	003f3e06 	br	100010b8 <__alt_data_end+0xf80010b8>
100013c0:	8c800007 	ldb	r18,0(r17)
100013c4:	00c00a84 	movi	r3,42
100013c8:	88800044 	addi	r2,r17,1
100013cc:	90c6fb26 	beq	r18,r3,10002fbc <___vfprintf_internal_r+0x2098>
100013d0:	953ff404 	addi	r20,r18,-48
100013d4:	1023883a 	mov	r17,r2
100013d8:	0007883a 	mov	r3,zero
100013dc:	ad3f3736 	bltu	r21,r20,100010bc <__alt_data_end+0xf80010bc>
100013e0:	0009883a 	mov	r4,zero
100013e4:	01400284 	movi	r5,10
100013e8:	000aef80 	call	1000aef8 <__mulsi3>
100013ec:	8c800007 	ldb	r18,0(r17)
100013f0:	a089883a 	add	r4,r20,r2
100013f4:	8c400044 	addi	r17,r17,1
100013f8:	953ff404 	addi	r20,r18,-48
100013fc:	ad3ff92e 	bgeu	r21,r20,100013e4 <__alt_data_end+0xf80013e4>
10001400:	2007883a 	mov	r3,r4
10001404:	203f2d0e 	bge	r4,zero,100010bc <__alt_data_end+0xf80010bc>
10001408:	00ffffc4 	movi	r3,-1
1000140c:	003f2b06 	br	100010bc <__alt_data_end+0xf80010bc>
10001410:	d9412a17 	ldw	r5,1192(sp)
10001414:	29402014 	ori	r5,r5,128
10001418:	d9412a15 	stw	r5,1192(sp)
1000141c:	8c800007 	ldb	r18,0(r17)
10001420:	003f2506 	br	100010b8 <__alt_data_end+0xf80010b8>
10001424:	d9412a17 	ldw	r5,1192(sp)
10001428:	1829883a 	mov	r20,r3
1000142c:	dd812785 	stb	r22,1182(sp)
10001430:	29400414 	ori	r5,r5,16
10001434:	d9412a15 	stw	r5,1192(sp)
10001438:	d8c12a17 	ldw	r3,1192(sp)
1000143c:	e011883a 	mov	r8,fp
10001440:	1880080c 	andi	r2,r3,32
10001444:	1001e126 	beq	r2,zero,10001bcc <___vfprintf_internal_r+0xca8>
10001448:	d9012f17 	ldw	r4,1212(sp)
1000144c:	20800117 	ldw	r2,4(r4)
10001450:	25400017 	ldw	r21,0(r4)
10001454:	21000204 	addi	r4,r4,8
10001458:	d9012f15 	stw	r4,1212(sp)
1000145c:	102d883a 	mov	r22,r2
10001460:	10046916 	blt	r2,zero,10002608 <___vfprintf_internal_r+0x16e4>
10001464:	df012783 	ldbu	fp,1182(sp)
10001468:	00c00044 	movi	r3,1
1000146c:	ad84b03a 	or	r2,r21,r22
10001470:	a0000416 	blt	r20,zero,10001484 <___vfprintf_internal_r+0x560>
10001474:	d9412a17 	ldw	r5,1192(sp)
10001478:	013fdfc4 	movi	r4,-129
1000147c:	290a703a 	and	r5,r5,r4
10001480:	d9412a15 	stw	r5,1192(sp)
10001484:	1002491e 	bne	r2,zero,10001dac <___vfprintf_internal_r+0xe88>
10001488:	a002481e 	bne	r20,zero,10001dac <___vfprintf_internal_r+0xe88>
1000148c:	18c03fcc 	andi	r3,r3,255
10001490:	1803871e 	bne	r3,zero,100022b0 <___vfprintf_internal_r+0x138c>
10001494:	d9012a17 	ldw	r4,1192(sp)
10001498:	2080004c 	andi	r2,r4,1
1000149c:	10038426 	beq	r2,zero,100022b0 <___vfprintf_internal_r+0x138c>
100014a0:	d9413d17 	ldw	r5,1268(sp)
100014a4:	00800c04 	movi	r2,48
100014a8:	d8810dc5 	stb	r2,1079(sp)
100014ac:	d9412e15 	stw	r5,1208(sp)
100014b0:	dc010dc4 	addi	r16,sp,1079
100014b4:	d8812e17 	ldw	r2,1208(sp)
100014b8:	1500010e 	bge	r2,r20,100014c0 <___vfprintf_internal_r+0x59c>
100014bc:	a005883a 	mov	r2,r20
100014c0:	d8812b15 	stw	r2,1196(sp)
100014c4:	d8013315 	stw	zero,1228(sp)
100014c8:	e0803fcc 	andi	r2,fp,255
100014cc:	1080201c 	xori	r2,r2,128
100014d0:	10bfe004 	addi	r2,r2,-128
100014d4:	10000326 	beq	r2,zero,100014e4 <___vfprintf_internal_r+0x5c0>
100014d8:	d8c12b17 	ldw	r3,1196(sp)
100014dc:	18c00044 	addi	r3,r3,1
100014e0:	d8c12b15 	stw	r3,1196(sp)
100014e4:	d8c12a17 	ldw	r3,1192(sp)
100014e8:	18c0008c 	andi	r3,r3,2
100014ec:	d8c12d15 	stw	r3,1204(sp)
100014f0:	18000326 	beq	r3,zero,10001500 <___vfprintf_internal_r+0x5dc>
100014f4:	d8c12b17 	ldw	r3,1196(sp)
100014f8:	18c00084 	addi	r3,r3,2
100014fc:	d8c12b15 	stw	r3,1196(sp)
10001500:	d8c12a17 	ldw	r3,1192(sp)
10001504:	18c0210c 	andi	r3,r3,132
10001508:	d8c13215 	stw	r3,1224(sp)
1000150c:	1802151e 	bne	r3,zero,10001d64 <___vfprintf_internal_r+0xe40>
10001510:	d9013017 	ldw	r4,1216(sp)
10001514:	d8c12b17 	ldw	r3,1196(sp)
10001518:	20f9c83a 	sub	fp,r4,r3
1000151c:	0702110e 	bge	zero,fp,10001d64 <___vfprintf_internal_r+0xe40>
10001520:	02400404 	movi	r9,16
10001524:	d8c12017 	ldw	r3,1152(sp)
10001528:	d8811f17 	ldw	r2,1148(sp)
1000152c:	4f059a0e 	bge	r9,fp,10002b98 <___vfprintf_internal_r+0x1c74>
10001530:	8809883a 	mov	r4,r17
10001534:	01440074 	movhi	r5,4097
10001538:	297f6984 	addi	r5,r5,-602
1000153c:	dc013c15 	stw	r16,1264(sp)
10001540:	e023883a 	mov	r17,fp
10001544:	d9413615 	stw	r5,1240(sp)
10001548:	482d883a 	mov	r22,r9
1000154c:	054001c4 	movi	r21,7
10001550:	dc012c17 	ldw	r16,1200(sp)
10001554:	2039883a 	mov	fp,r4
10001558:	00000306 	br	10001568 <___vfprintf_internal_r+0x644>
1000155c:	8c7ffc04 	addi	r17,r17,-16
10001560:	42000204 	addi	r8,r8,8
10001564:	b440130e 	bge	r22,r17,100015b4 <___vfprintf_internal_r+0x690>
10001568:	18c00404 	addi	r3,r3,16
1000156c:	10800044 	addi	r2,r2,1
10001570:	01040074 	movhi	r4,4097
10001574:	213f6984 	addi	r4,r4,-602
10001578:	41000015 	stw	r4,0(r8)
1000157c:	45800115 	stw	r22,4(r8)
10001580:	d8c12015 	stw	r3,1152(sp)
10001584:	d8811f15 	stw	r2,1148(sp)
10001588:	a8bff40e 	bge	r21,r2,1000155c <__alt_data_end+0xf800155c>
1000158c:	8009883a 	mov	r4,r16
10001590:	980b883a 	mov	r5,r19
10001594:	d9811e04 	addi	r6,sp,1144
10001598:	000776c0 	call	1000776c <__sprint_r>
1000159c:	103f7d1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
100015a0:	8c7ffc04 	addi	r17,r17,-16
100015a4:	d8c12017 	ldw	r3,1152(sp)
100015a8:	d8811f17 	ldw	r2,1148(sp)
100015ac:	da000404 	addi	r8,sp,16
100015b0:	b47fed16 	blt	r22,r17,10001568 <__alt_data_end+0xf8001568>
100015b4:	dc013c17 	ldw	r16,1264(sp)
100015b8:	e009883a 	mov	r4,fp
100015bc:	8839883a 	mov	fp,r17
100015c0:	2023883a 	mov	r17,r4
100015c4:	d9413617 	ldw	r5,1240(sp)
100015c8:	e0c7883a 	add	r3,fp,r3
100015cc:	10800044 	addi	r2,r2,1
100015d0:	41400015 	stw	r5,0(r8)
100015d4:	47000115 	stw	fp,4(r8)
100015d8:	d8c12015 	stw	r3,1152(sp)
100015dc:	d8811f15 	stw	r2,1148(sp)
100015e0:	010001c4 	movi	r4,7
100015e4:	20836b16 	blt	r4,r2,10002394 <___vfprintf_internal_r+0x1470>
100015e8:	d8812787 	ldb	r2,1182(sp)
100015ec:	42000204 	addi	r8,r8,8
100015f0:	10000c26 	beq	r2,zero,10001624 <___vfprintf_internal_r+0x700>
100015f4:	d8811f17 	ldw	r2,1148(sp)
100015f8:	d9012784 	addi	r4,sp,1182
100015fc:	18c00044 	addi	r3,r3,1
10001600:	10800044 	addi	r2,r2,1
10001604:	41000015 	stw	r4,0(r8)
10001608:	01000044 	movi	r4,1
1000160c:	41000115 	stw	r4,4(r8)
10001610:	d8c12015 	stw	r3,1152(sp)
10001614:	d8811f15 	stw	r2,1148(sp)
10001618:	010001c4 	movi	r4,7
1000161c:	2082ef16 	blt	r4,r2,100021dc <___vfprintf_internal_r+0x12b8>
10001620:	42000204 	addi	r8,r8,8
10001624:	d8812d17 	ldw	r2,1204(sp)
10001628:	10000c26 	beq	r2,zero,1000165c <___vfprintf_internal_r+0x738>
1000162c:	d8811f17 	ldw	r2,1148(sp)
10001630:	d9012704 	addi	r4,sp,1180
10001634:	18c00084 	addi	r3,r3,2
10001638:	10800044 	addi	r2,r2,1
1000163c:	41000015 	stw	r4,0(r8)
10001640:	01000084 	movi	r4,2
10001644:	41000115 	stw	r4,4(r8)
10001648:	d8c12015 	stw	r3,1152(sp)
1000164c:	d8811f15 	stw	r2,1148(sp)
10001650:	010001c4 	movi	r4,7
10001654:	2082e916 	blt	r4,r2,100021fc <___vfprintf_internal_r+0x12d8>
10001658:	42000204 	addi	r8,r8,8
1000165c:	d9013217 	ldw	r4,1224(sp)
10001660:	00802004 	movi	r2,128
10001664:	20823226 	beq	r4,r2,10001f30 <___vfprintf_internal_r+0x100c>
10001668:	d9012e17 	ldw	r4,1208(sp)
1000166c:	a129c83a 	sub	r20,r20,r4
10001670:	05002d0e 	bge	zero,r20,10001728 <___vfprintf_internal_r+0x804>
10001674:	05800404 	movi	r22,16
10001678:	d8811f17 	ldw	r2,1148(sp)
1000167c:	05440074 	movhi	r21,4097
10001680:	ad7f6584 	addi	r21,r21,-618
10001684:	b5001f0e 	bge	r22,r20,10001704 <___vfprintf_internal_r+0x7e0>
10001688:	8809883a 	mov	r4,r17
1000168c:	dc012d15 	stw	r16,1204(sp)
10001690:	a023883a 	mov	r17,r20
10001694:	070001c4 	movi	fp,7
10001698:	dc012c17 	ldw	r16,1200(sp)
1000169c:	2029883a 	mov	r20,r4
100016a0:	00000306 	br	100016b0 <___vfprintf_internal_r+0x78c>
100016a4:	8c7ffc04 	addi	r17,r17,-16
100016a8:	42000204 	addi	r8,r8,8
100016ac:	b440110e 	bge	r22,r17,100016f4 <___vfprintf_internal_r+0x7d0>
100016b0:	18c00404 	addi	r3,r3,16
100016b4:	10800044 	addi	r2,r2,1
100016b8:	45c00015 	stw	r23,0(r8)
100016bc:	45800115 	stw	r22,4(r8)
100016c0:	d8c12015 	stw	r3,1152(sp)
100016c4:	d8811f15 	stw	r2,1148(sp)
100016c8:	e0bff60e 	bge	fp,r2,100016a4 <__alt_data_end+0xf80016a4>
100016cc:	8009883a 	mov	r4,r16
100016d0:	980b883a 	mov	r5,r19
100016d4:	d9811e04 	addi	r6,sp,1144
100016d8:	000776c0 	call	1000776c <__sprint_r>
100016dc:	103f2d1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
100016e0:	8c7ffc04 	addi	r17,r17,-16
100016e4:	d8c12017 	ldw	r3,1152(sp)
100016e8:	d8811f17 	ldw	r2,1148(sp)
100016ec:	da000404 	addi	r8,sp,16
100016f0:	b47fef16 	blt	r22,r17,100016b0 <__alt_data_end+0xf80016b0>
100016f4:	dc012d17 	ldw	r16,1204(sp)
100016f8:	a009883a 	mov	r4,r20
100016fc:	8829883a 	mov	r20,r17
10001700:	2023883a 	mov	r17,r4
10001704:	1d07883a 	add	r3,r3,r20
10001708:	10800044 	addi	r2,r2,1
1000170c:	45400015 	stw	r21,0(r8)
10001710:	45000115 	stw	r20,4(r8)
10001714:	d8c12015 	stw	r3,1152(sp)
10001718:	d8811f15 	stw	r2,1148(sp)
1000171c:	010001c4 	movi	r4,7
10001720:	2082a616 	blt	r4,r2,100021bc <___vfprintf_internal_r+0x1298>
10001724:	42000204 	addi	r8,r8,8
10001728:	d9412a17 	ldw	r5,1192(sp)
1000172c:	2880400c 	andi	r2,r5,256
10001730:	1001b51e 	bne	r2,zero,10001e08 <___vfprintf_internal_r+0xee4>
10001734:	d8812e17 	ldw	r2,1208(sp)
10001738:	d9012e17 	ldw	r4,1208(sp)
1000173c:	44000015 	stw	r16,0(r8)
10001740:	1887883a 	add	r3,r3,r2
10001744:	d8811f17 	ldw	r2,1148(sp)
10001748:	10800044 	addi	r2,r2,1
1000174c:	41000115 	stw	r4,4(r8)
10001750:	d8c12015 	stw	r3,1152(sp)
10001754:	d8811f15 	stw	r2,1148(sp)
10001758:	010001c4 	movi	r4,7
1000175c:	20818b16 	blt	r4,r2,10001d8c <___vfprintf_internal_r+0xe68>
10001760:	42000204 	addi	r8,r8,8
10001764:	d9412a17 	ldw	r5,1192(sp)
10001768:	2880010c 	andi	r2,r5,4
1000176c:	10003226 	beq	r2,zero,10001838 <___vfprintf_internal_r+0x914>
10001770:	d8813017 	ldw	r2,1216(sp)
10001774:	d9012b17 	ldw	r4,1196(sp)
10001778:	1121c83a 	sub	r16,r2,r4
1000177c:	04002e0e 	bge	zero,r16,10001838 <___vfprintf_internal_r+0x914>
10001780:	04800404 	movi	r18,16
10001784:	d8811f17 	ldw	r2,1148(sp)
10001788:	9405240e 	bge	r18,r16,10002c1c <___vfprintf_internal_r+0x1cf8>
1000178c:	01040074 	movhi	r4,4097
10001790:	213f6984 	addi	r4,r4,-602
10001794:	d9013615 	stw	r4,1240(sp)
10001798:	050001c4 	movi	r20,7
1000179c:	dd412c17 	ldw	r21,1200(sp)
100017a0:	00000306 	br	100017b0 <___vfprintf_internal_r+0x88c>
100017a4:	843ffc04 	addi	r16,r16,-16
100017a8:	42000204 	addi	r8,r8,8
100017ac:	9400130e 	bge	r18,r16,100017fc <___vfprintf_internal_r+0x8d8>
100017b0:	18c00404 	addi	r3,r3,16
100017b4:	10800044 	addi	r2,r2,1
100017b8:	01440074 	movhi	r5,4097
100017bc:	297f6984 	addi	r5,r5,-602
100017c0:	41400015 	stw	r5,0(r8)
100017c4:	44800115 	stw	r18,4(r8)
100017c8:	d8c12015 	stw	r3,1152(sp)
100017cc:	d8811f15 	stw	r2,1148(sp)
100017d0:	a0bff40e 	bge	r20,r2,100017a4 <__alt_data_end+0xf80017a4>
100017d4:	a809883a 	mov	r4,r21
100017d8:	980b883a 	mov	r5,r19
100017dc:	d9811e04 	addi	r6,sp,1144
100017e0:	000776c0 	call	1000776c <__sprint_r>
100017e4:	103eeb1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
100017e8:	843ffc04 	addi	r16,r16,-16
100017ec:	d8c12017 	ldw	r3,1152(sp)
100017f0:	d8811f17 	ldw	r2,1148(sp)
100017f4:	da000404 	addi	r8,sp,16
100017f8:	943fed16 	blt	r18,r16,100017b0 <__alt_data_end+0xf80017b0>
100017fc:	d9013617 	ldw	r4,1240(sp)
10001800:	1c07883a 	add	r3,r3,r16
10001804:	10800044 	addi	r2,r2,1
10001808:	41000015 	stw	r4,0(r8)
1000180c:	44000115 	stw	r16,4(r8)
10001810:	d8c12015 	stw	r3,1152(sp)
10001814:	d8811f15 	stw	r2,1148(sp)
10001818:	010001c4 	movi	r4,7
1000181c:	2080060e 	bge	r4,r2,10001838 <___vfprintf_internal_r+0x914>
10001820:	d9012c17 	ldw	r4,1200(sp)
10001824:	980b883a 	mov	r5,r19
10001828:	d9811e04 	addi	r6,sp,1144
1000182c:	000776c0 	call	1000776c <__sprint_r>
10001830:	103ed81e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10001834:	d8c12017 	ldw	r3,1152(sp)
10001838:	d8812b17 	ldw	r2,1196(sp)
1000183c:	d9413017 	ldw	r5,1216(sp)
10001840:	1140010e 	bge	r2,r5,10001848 <___vfprintf_internal_r+0x924>
10001844:	2805883a 	mov	r2,r5
10001848:	d9013117 	ldw	r4,1220(sp)
1000184c:	2089883a 	add	r4,r4,r2
10001850:	d9013115 	stw	r4,1220(sp)
10001854:	1802381e 	bne	r3,zero,10002138 <___vfprintf_internal_r+0x1214>
10001858:	88800007 	ldb	r2,0(r17)
1000185c:	d8011f15 	stw	zero,1148(sp)
10001860:	da000404 	addi	r8,sp,16
10001864:	103def1e 	bne	r2,zero,10001024 <__alt_data_end+0xf8001024>
10001868:	8821883a 	mov	r16,r17
1000186c:	003e0506 	br	10001084 <__alt_data_end+0xf8001084>
10001870:	1829883a 	mov	r20,r3
10001874:	d8c12a17 	ldw	r3,1192(sp)
10001878:	dd812785 	stb	r22,1182(sp)
1000187c:	e011883a 	mov	r8,fp
10001880:	1880020c 	andi	r2,r3,8
10001884:	1003c926 	beq	r2,zero,100027ac <___vfprintf_internal_r+0x1888>
10001888:	d9012f17 	ldw	r4,1212(sp)
1000188c:	d9412f17 	ldw	r5,1212(sp)
10001890:	d8812f17 	ldw	r2,1212(sp)
10001894:	21000017 	ldw	r4,0(r4)
10001898:	29400117 	ldw	r5,4(r5)
1000189c:	10800204 	addi	r2,r2,8
100018a0:	d9013715 	stw	r4,1244(sp)
100018a4:	d9413915 	stw	r5,1252(sp)
100018a8:	d8812f15 	stw	r2,1212(sp)
100018ac:	d9013717 	ldw	r4,1244(sp)
100018b0:	d9413917 	ldw	r5,1252(sp)
100018b4:	da013f15 	stw	r8,1276(sp)
100018b8:	04000044 	movi	r16,1
100018bc:	00073380 	call	10007338 <__fpclassifyd>
100018c0:	da013f17 	ldw	r8,1276(sp)
100018c4:	d9013717 	ldw	r4,1244(sp)
100018c8:	d9413917 	ldw	r5,1252(sp)
100018cc:	1403571e 	bne	r2,r16,1000262c <___vfprintf_internal_r+0x1708>
100018d0:	000d883a 	mov	r6,zero
100018d4:	000f883a 	mov	r7,zero
100018d8:	000c2940 	call	1000c294 <__ledf2>
100018dc:	da013f17 	ldw	r8,1276(sp)
100018e0:	1004f416 	blt	r2,zero,10002cb4 <___vfprintf_internal_r+0x1d90>
100018e4:	df012783 	ldbu	fp,1182(sp)
100018e8:	008011c4 	movi	r2,71
100018ec:	14847a0e 	bge	r2,r18,10002ad8 <___vfprintf_internal_r+0x1bb4>
100018f0:	04040074 	movhi	r16,4097
100018f4:	843f5604 	addi	r16,r16,-680
100018f8:	d9012a17 	ldw	r4,1192(sp)
100018fc:	00bfdfc4 	movi	r2,-129
10001900:	00c000c4 	movi	r3,3
10001904:	2088703a 	and	r4,r4,r2
10001908:	d8c12b15 	stw	r3,1196(sp)
1000190c:	d9012a15 	stw	r4,1192(sp)
10001910:	d8c12e15 	stw	r3,1208(sp)
10001914:	0029883a 	mov	r20,zero
10001918:	d8013315 	stw	zero,1228(sp)
1000191c:	003eea06 	br	100014c8 <__alt_data_end+0xf80014c8>
10001920:	953ff404 	addi	r20,r18,-48
10001924:	d8013015 	stw	zero,1216(sp)
10001928:	0009883a 	mov	r4,zero
1000192c:	1825883a 	mov	r18,r3
10001930:	01400284 	movi	r5,10
10001934:	000aef80 	call	1000aef8 <__mulsi3>
10001938:	88c00007 	ldb	r3,0(r17)
1000193c:	1509883a 	add	r4,r2,r20
10001940:	8c400044 	addi	r17,r17,1
10001944:	1d3ff404 	addi	r20,r3,-48
10001948:	8805883a 	mov	r2,r17
1000194c:	ad3ff82e 	bgeu	r21,r20,10001930 <__alt_data_end+0xf8001930>
10001950:	d9013015 	stw	r4,1216(sp)
10001954:	9009883a 	mov	r4,r18
10001958:	1023883a 	mov	r17,r2
1000195c:	1825883a 	mov	r18,r3
10001960:	2007883a 	mov	r3,r4
10001964:	003dd506 	br	100010bc <__alt_data_end+0xf80010bc>
10001968:	d8812a17 	ldw	r2,1192(sp)
1000196c:	10800214 	ori	r2,r2,8
10001970:	d8812a15 	stw	r2,1192(sp)
10001974:	8c800007 	ldb	r18,0(r17)
10001978:	003dcf06 	br	100010b8 <__alt_data_end+0xf80010b8>
1000197c:	d9012a17 	ldw	r4,1192(sp)
10001980:	e011883a 	mov	r8,fp
10001984:	1829883a 	mov	r20,r3
10001988:	21000414 	ori	r4,r4,16
1000198c:	d9012a15 	stw	r4,1192(sp)
10001990:	d9412a17 	ldw	r5,1192(sp)
10001994:	2880080c 	andi	r2,r5,32
10001998:	1000cf26 	beq	r2,zero,10001cd8 <___vfprintf_internal_r+0xdb4>
1000199c:	d8812f17 	ldw	r2,1212(sp)
100019a0:	0007883a 	mov	r3,zero
100019a4:	15400017 	ldw	r21,0(r2)
100019a8:	15800117 	ldw	r22,4(r2)
100019ac:	10800204 	addi	r2,r2,8
100019b0:	d8812f15 	stw	r2,1212(sp)
100019b4:	ad84b03a 	or	r2,r21,r22
100019b8:	d8012785 	stb	zero,1182(sp)
100019bc:	0039883a 	mov	fp,zero
100019c0:	003eab06 	br	10001470 <__alt_data_end+0xf8001470>
100019c4:	d9012a17 	ldw	r4,1192(sp)
100019c8:	e011883a 	mov	r8,fp
100019cc:	1829883a 	mov	r20,r3
100019d0:	21000414 	ori	r4,r4,16
100019d4:	d9012a15 	stw	r4,1192(sp)
100019d8:	d9412a17 	ldw	r5,1192(sp)
100019dc:	2880080c 	andi	r2,r5,32
100019e0:	1000cd26 	beq	r2,zero,10001d18 <___vfprintf_internal_r+0xdf4>
100019e4:	d8812f17 	ldw	r2,1212(sp)
100019e8:	00c00044 	movi	r3,1
100019ec:	15400017 	ldw	r21,0(r2)
100019f0:	15800117 	ldw	r22,4(r2)
100019f4:	10800204 	addi	r2,r2,8
100019f8:	d8812f15 	stw	r2,1212(sp)
100019fc:	ad84b03a 	or	r2,r21,r22
10001a00:	003fed06 	br	100019b8 <__alt_data_end+0xf80019b8>
10001a04:	d9012a17 	ldw	r4,1192(sp)
10001a08:	dd812785 	stb	r22,1182(sp)
10001a0c:	e011883a 	mov	r8,fp
10001a10:	2080080c 	andi	r2,r4,32
10001a14:	10039226 	beq	r2,zero,10002860 <___vfprintf_internal_r+0x193c>
10001a18:	d9412f17 	ldw	r5,1212(sp)
10001a1c:	d9013117 	ldw	r4,1220(sp)
10001a20:	28800017 	ldw	r2,0(r5)
10001a24:	2007d7fa 	srai	r3,r4,31
10001a28:	29400104 	addi	r5,r5,4
10001a2c:	d9412f15 	stw	r5,1212(sp)
10001a30:	11000015 	stw	r4,0(r2)
10001a34:	10c00115 	stw	r3,4(r2)
10001a38:	003d7806 	br	1000101c <__alt_data_end+0xf800101c>
10001a3c:	d8c12f17 	ldw	r3,1212(sp)
10001a40:	d9012f17 	ldw	r4,1212(sp)
10001a44:	e011883a 	mov	r8,fp
10001a48:	18800017 	ldw	r2,0(r3)
10001a4c:	21000104 	addi	r4,r4,4
10001a50:	00c00044 	movi	r3,1
10001a54:	d8c12b15 	stw	r3,1196(sp)
10001a58:	d8012785 	stb	zero,1182(sp)
10001a5c:	d8810405 	stb	r2,1040(sp)
10001a60:	d9012f15 	stw	r4,1212(sp)
10001a64:	d8c12e15 	stw	r3,1208(sp)
10001a68:	0029883a 	mov	r20,zero
10001a6c:	d8013315 	stw	zero,1228(sp)
10001a70:	dc010404 	addi	r16,sp,1040
10001a74:	0005883a 	mov	r2,zero
10001a78:	003e9a06 	br	100014e4 <__alt_data_end+0xf80014e4>
10001a7c:	d9412a17 	ldw	r5,1192(sp)
10001a80:	01040074 	movhi	r4,4097
10001a84:	213f5e04 	addi	r4,r4,-648
10001a88:	dd812785 	stb	r22,1182(sp)
10001a8c:	d9013b15 	stw	r4,1260(sp)
10001a90:	2880080c 	andi	r2,r5,32
10001a94:	e011883a 	mov	r8,fp
10001a98:	1829883a 	mov	r20,r3
10001a9c:	10002f26 	beq	r2,zero,10001b5c <___vfprintf_internal_r+0xc38>
10001aa0:	d8812f17 	ldw	r2,1212(sp)
10001aa4:	15400017 	ldw	r21,0(r2)
10001aa8:	15800117 	ldw	r22,4(r2)
10001aac:	10800204 	addi	r2,r2,8
10001ab0:	d8812f15 	stw	r2,1212(sp)
10001ab4:	d9012a17 	ldw	r4,1192(sp)
10001ab8:	2080004c 	andi	r2,r4,1
10001abc:	10025f26 	beq	r2,zero,1000243c <___vfprintf_internal_r+0x1518>
10001ac0:	ad84b03a 	or	r2,r21,r22
10001ac4:	10034e26 	beq	r2,zero,10002800 <___vfprintf_internal_r+0x18dc>
10001ac8:	00c00c04 	movi	r3,48
10001acc:	21000094 	ori	r4,r4,2
10001ad0:	d8c12705 	stb	r3,1180(sp)
10001ad4:	dc812745 	stb	r18,1181(sp)
10001ad8:	d9012a15 	stw	r4,1192(sp)
10001adc:	00c00084 	movi	r3,2
10001ae0:	003fb506 	br	100019b8 <__alt_data_end+0xf80019b8>
10001ae4:	b0803fcc 	andi	r2,r22,255
10001ae8:	1080201c 	xori	r2,r2,128
10001aec:	10bfe004 	addi	r2,r2,-128
10001af0:	1003501e 	bne	r2,zero,10002834 <___vfprintf_internal_r+0x1910>
10001af4:	05800804 	movi	r22,32
10001af8:	8c800007 	ldb	r18,0(r17)
10001afc:	003d6e06 	br	100010b8 <__alt_data_end+0xf80010b8>
10001b00:	d9012a17 	ldw	r4,1192(sp)
10001b04:	21000054 	ori	r4,r4,1
10001b08:	d9012a15 	stw	r4,1192(sp)
10001b0c:	8c800007 	ldb	r18,0(r17)
10001b10:	003d6906 	br	100010b8 <__alt_data_end+0xf80010b8>
10001b14:	d9412f17 	ldw	r5,1212(sp)
10001b18:	d9012f17 	ldw	r4,1212(sp)
10001b1c:	29400017 	ldw	r5,0(r5)
10001b20:	20800104 	addi	r2,r4,4
10001b24:	d9413015 	stw	r5,1216(sp)
10001b28:	283dc616 	blt	r5,zero,10001244 <__alt_data_end+0xf8001244>
10001b2c:	d8812f15 	stw	r2,1212(sp)
10001b30:	8c800007 	ldb	r18,0(r17)
10001b34:	003d6006 	br	100010b8 <__alt_data_end+0xf80010b8>
10001b38:	d9412a17 	ldw	r5,1192(sp)
10001b3c:	00840074 	movhi	r2,4097
10001b40:	10bf5904 	addi	r2,r2,-668
10001b44:	d8813b15 	stw	r2,1260(sp)
10001b48:	dd812785 	stb	r22,1182(sp)
10001b4c:	2880080c 	andi	r2,r5,32
10001b50:	e011883a 	mov	r8,fp
10001b54:	1829883a 	mov	r20,r3
10001b58:	103fd11e 	bne	r2,zero,10001aa0 <__alt_data_end+0xf8001aa0>
10001b5c:	d8c12a17 	ldw	r3,1192(sp)
10001b60:	1880040c 	andi	r2,r3,16
10001b64:	10033526 	beq	r2,zero,1000283c <___vfprintf_internal_r+0x1918>
10001b68:	d9012f17 	ldw	r4,1212(sp)
10001b6c:	002d883a 	mov	r22,zero
10001b70:	25400017 	ldw	r21,0(r4)
10001b74:	21000104 	addi	r4,r4,4
10001b78:	d9012f15 	stw	r4,1212(sp)
10001b7c:	003fcd06 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10001b80:	d9012a17 	ldw	r4,1192(sp)
10001b84:	21001014 	ori	r4,r4,64
10001b88:	d9012a15 	stw	r4,1192(sp)
10001b8c:	8c800007 	ldb	r18,0(r17)
10001b90:	003d4906 	br	100010b8 <__alt_data_end+0xf80010b8>
10001b94:	8c800007 	ldb	r18,0(r17)
10001b98:	01401b04 	movi	r5,108
10001b9c:	8805883a 	mov	r2,r17
10001ba0:	9143db26 	beq	r18,r5,10002b10 <___vfprintf_internal_r+0x1bec>
10001ba4:	d9412a17 	ldw	r5,1192(sp)
10001ba8:	29400414 	ori	r5,r5,16
10001bac:	d9412a15 	stw	r5,1192(sp)
10001bb0:	003d4106 	br	100010b8 <__alt_data_end+0xf80010b8>
10001bb4:	1829883a 	mov	r20,r3
10001bb8:	d8c12a17 	ldw	r3,1192(sp)
10001bbc:	dd812785 	stb	r22,1182(sp)
10001bc0:	e011883a 	mov	r8,fp
10001bc4:	1880080c 	andi	r2,r3,32
10001bc8:	103e1f1e 	bne	r2,zero,10001448 <__alt_data_end+0xf8001448>
10001bcc:	d9412a17 	ldw	r5,1192(sp)
10001bd0:	2880040c 	andi	r2,r5,16
10001bd4:	10032f26 	beq	r2,zero,10002894 <___vfprintf_internal_r+0x1970>
10001bd8:	d8812f17 	ldw	r2,1212(sp)
10001bdc:	15400017 	ldw	r21,0(r2)
10001be0:	10800104 	addi	r2,r2,4
10001be4:	d8812f15 	stw	r2,1212(sp)
10001be8:	a82dd7fa 	srai	r22,r21,31
10001bec:	b005883a 	mov	r2,r22
10001bf0:	003e1b06 	br	10001460 <__alt_data_end+0xf8001460>
10001bf4:	d8812a17 	ldw	r2,1192(sp)
10001bf8:	10800814 	ori	r2,r2,32
10001bfc:	d8812a15 	stw	r2,1192(sp)
10001c00:	8c800007 	ldb	r18,0(r17)
10001c04:	003d2c06 	br	100010b8 <__alt_data_end+0xf80010b8>
10001c08:	1829883a 	mov	r20,r3
10001c0c:	d8c12f17 	ldw	r3,1212(sp)
10001c10:	d8012785 	stb	zero,1182(sp)
10001c14:	e011883a 	mov	r8,fp
10001c18:	1c000017 	ldw	r16,0(r3)
10001c1c:	1d400104 	addi	r21,r3,4
10001c20:	80040226 	beq	r16,zero,10002c2c <___vfprintf_internal_r+0x1d08>
10001c24:	8009883a 	mov	r4,r16
10001c28:	a003c716 	blt	r20,zero,10002b48 <___vfprintf_internal_r+0x1c24>
10001c2c:	000b883a 	mov	r5,zero
10001c30:	a00d883a 	mov	r6,r20
10001c34:	df013f15 	stw	fp,1276(sp)
10001c38:	00060080 	call	10006008 <memchr>
10001c3c:	da013f17 	ldw	r8,1276(sp)
10001c40:	10044326 	beq	r2,zero,10002d50 <___vfprintf_internal_r+0x1e2c>
10001c44:	1405c83a 	sub	r2,r2,r16
10001c48:	d8812e15 	stw	r2,1208(sp)
10001c4c:	a0837c16 	blt	r20,r2,10002a40 <___vfprintf_internal_r+0x1b1c>
10001c50:	d8812e17 	ldw	r2,1208(sp)
10001c54:	1003c116 	blt	r2,zero,10002b5c <___vfprintf_internal_r+0x1c38>
10001c58:	df012783 	ldbu	fp,1182(sp)
10001c5c:	d8812b15 	stw	r2,1196(sp)
10001c60:	dd412f15 	stw	r21,1212(sp)
10001c64:	0029883a 	mov	r20,zero
10001c68:	d8013315 	stw	zero,1228(sp)
10001c6c:	003e1606 	br	100014c8 <__alt_data_end+0xf80014c8>
10001c70:	d9012f17 	ldw	r4,1212(sp)
10001c74:	d9412a17 	ldw	r5,1192(sp)
10001c78:	00800c04 	movi	r2,48
10001c7c:	25400017 	ldw	r21,0(r4)
10001c80:	d8812705 	stb	r2,1180(sp)
10001c84:	00801e04 	movi	r2,120
10001c88:	29400094 	ori	r5,r5,2
10001c8c:	d8812745 	stb	r2,1181(sp)
10001c90:	21000104 	addi	r4,r4,4
10001c94:	00840074 	movhi	r2,4097
10001c98:	10bf5e04 	addi	r2,r2,-648
10001c9c:	1829883a 	mov	r20,r3
10001ca0:	d8813b15 	stw	r2,1260(sp)
10001ca4:	e011883a 	mov	r8,fp
10001ca8:	002d883a 	mov	r22,zero
10001cac:	d9412a15 	stw	r5,1192(sp)
10001cb0:	d9012f15 	stw	r4,1212(sp)
10001cb4:	00c00084 	movi	r3,2
10001cb8:	04801e04 	movi	r18,120
10001cbc:	a805883a 	mov	r2,r21
10001cc0:	003f3d06 	br	100019b8 <__alt_data_end+0xf80019b8>
10001cc4:	d9412a17 	ldw	r5,1192(sp)
10001cc8:	e011883a 	mov	r8,fp
10001ccc:	1829883a 	mov	r20,r3
10001cd0:	2880080c 	andi	r2,r5,32
10001cd4:	103f311e 	bne	r2,zero,1000199c <__alt_data_end+0xf800199c>
10001cd8:	d8c12a17 	ldw	r3,1192(sp)
10001cdc:	1880040c 	andi	r2,r3,16
10001ce0:	1002c926 	beq	r2,zero,10002808 <___vfprintf_internal_r+0x18e4>
10001ce4:	d9012f17 	ldw	r4,1212(sp)
10001ce8:	002d883a 	mov	r22,zero
10001cec:	0007883a 	mov	r3,zero
10001cf0:	25400017 	ldw	r21,0(r4)
10001cf4:	21000104 	addi	r4,r4,4
10001cf8:	d9012f15 	stw	r4,1212(sp)
10001cfc:	a805883a 	mov	r2,r21
10001d00:	003f2d06 	br	100019b8 <__alt_data_end+0xf80019b8>
10001d04:	d9412a17 	ldw	r5,1192(sp)
10001d08:	e011883a 	mov	r8,fp
10001d0c:	1829883a 	mov	r20,r3
10001d10:	2880080c 	andi	r2,r5,32
10001d14:	103f331e 	bne	r2,zero,100019e4 <__alt_data_end+0xf80019e4>
10001d18:	d8c12a17 	ldw	r3,1192(sp)
10001d1c:	1880040c 	andi	r2,r3,16
10001d20:	1002ac26 	beq	r2,zero,100027d4 <___vfprintf_internal_r+0x18b0>
10001d24:	d9012f17 	ldw	r4,1212(sp)
10001d28:	002d883a 	mov	r22,zero
10001d2c:	00c00044 	movi	r3,1
10001d30:	25400017 	ldw	r21,0(r4)
10001d34:	21000104 	addi	r4,r4,4
10001d38:	d9012f15 	stw	r4,1212(sp)
10001d3c:	a805883a 	mov	r2,r21
10001d40:	003f1d06 	br	100019b8 <__alt_data_end+0xf80019b8>
10001d44:	dd812785 	stb	r22,1182(sp)
10001d48:	e011883a 	mov	r8,fp
10001d4c:	903d8b26 	beq	r18,zero,1000137c <__alt_data_end+0xf800137c>
10001d50:	00c00044 	movi	r3,1
10001d54:	d8c12b15 	stw	r3,1196(sp)
10001d58:	dc810405 	stb	r18,1040(sp)
10001d5c:	d8012785 	stb	zero,1182(sp)
10001d60:	003f4006 	br	10001a64 <__alt_data_end+0xf8001a64>
10001d64:	d8c12017 	ldw	r3,1152(sp)
10001d68:	003e2106 	br	100015f0 <__alt_data_end+0xf80015f0>
10001d6c:	45400015 	stw	r21,0(r8)
10001d70:	44000115 	stw	r16,4(r8)
10001d74:	1c07883a 	add	r3,r3,r16
10001d78:	10800044 	addi	r2,r2,1
10001d7c:	d8c12015 	stw	r3,1152(sp)
10001d80:	d8811f15 	stw	r2,1148(sp)
10001d84:	010001c4 	movi	r4,7
10001d88:	20be750e 	bge	r4,r2,10001760 <__alt_data_end+0xf8001760>
10001d8c:	d9012c17 	ldw	r4,1200(sp)
10001d90:	980b883a 	mov	r5,r19
10001d94:	d9811e04 	addi	r6,sp,1144
10001d98:	000776c0 	call	1000776c <__sprint_r>
10001d9c:	103d7d1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10001da0:	d8c12017 	ldw	r3,1152(sp)
10001da4:	da000404 	addi	r8,sp,16
10001da8:	003e6e06 	br	10001764 <__alt_data_end+0xf8001764>
10001dac:	18803fcc 	andi	r2,r3,255
10001db0:	00c00044 	movi	r3,1
10001db4:	10c11926 	beq	r2,r3,1000221c <___vfprintf_internal_r+0x12f8>
10001db8:	00c00084 	movi	r3,2
10001dbc:	10c0e41e 	bne	r2,r3,10002150 <___vfprintf_internal_r+0x122c>
10001dc0:	d9413b17 	ldw	r5,1260(sp)
10001dc4:	d8c10dc4 	addi	r3,sp,1079
10001dc8:	a88003cc 	andi	r2,r21,15
10001dcc:	b008973a 	slli	r4,r22,28
10001dd0:	2885883a 	add	r2,r5,r2
10001dd4:	a82ad13a 	srli	r21,r21,4
10001dd8:	10800003 	ldbu	r2,0(r2)
10001ddc:	b02cd13a 	srli	r22,r22,4
10001de0:	256ab03a 	or	r21,r4,r21
10001de4:	18800005 	stb	r2,0(r3)
10001de8:	ad84b03a 	or	r2,r21,r22
10001dec:	1821883a 	mov	r16,r3
10001df0:	18ffffc4 	addi	r3,r3,-1
10001df4:	103ff41e 	bne	r2,zero,10001dc8 <__alt_data_end+0xf8001dc8>
10001df8:	d8c12917 	ldw	r3,1188(sp)
10001dfc:	1c07c83a 	sub	r3,r3,r16
10001e00:	d8c12e15 	stw	r3,1208(sp)
10001e04:	003dab06 	br	100014b4 <__alt_data_end+0xf80014b4>
10001e08:	00801944 	movi	r2,101
10001e0c:	14807e0e 	bge	r2,r18,10002008 <___vfprintf_internal_r+0x10e4>
10001e10:	d9013717 	ldw	r4,1244(sp)
10001e14:	d9413917 	ldw	r5,1252(sp)
10001e18:	000d883a 	mov	r6,zero
10001e1c:	000f883a 	mov	r7,zero
10001e20:	d8c13e15 	stw	r3,1272(sp)
10001e24:	da013f15 	stw	r8,1276(sp)
10001e28:	000c1380 	call	1000c138 <__eqdf2>
10001e2c:	d8c13e17 	ldw	r3,1272(sp)
10001e30:	da013f17 	ldw	r8,1276(sp)
10001e34:	1001211e 	bne	r2,zero,100022bc <___vfprintf_internal_r+0x1398>
10001e38:	d8811f17 	ldw	r2,1148(sp)
10001e3c:	01000044 	movi	r4,1
10001e40:	18c00044 	addi	r3,r3,1
10001e44:	10800044 	addi	r2,r2,1
10001e48:	01440074 	movhi	r5,4097
10001e4c:	297f6504 	addi	r5,r5,-620
10001e50:	41000115 	stw	r4,4(r8)
10001e54:	41400015 	stw	r5,0(r8)
10001e58:	d8c12015 	stw	r3,1152(sp)
10001e5c:	d8811f15 	stw	r2,1148(sp)
10001e60:	010001c4 	movi	r4,7
10001e64:	2082a316 	blt	r4,r2,100028f4 <___vfprintf_internal_r+0x19d0>
10001e68:	42000204 	addi	r8,r8,8
10001e6c:	d8812617 	ldw	r2,1176(sp)
10001e70:	d9013517 	ldw	r4,1236(sp)
10001e74:	11000316 	blt	r2,r4,10001e84 <___vfprintf_internal_r+0xf60>
10001e78:	d9412a17 	ldw	r5,1192(sp)
10001e7c:	2880004c 	andi	r2,r5,1
10001e80:	103e3826 	beq	r2,zero,10001764 <__alt_data_end+0xf8001764>
10001e84:	d8813817 	ldw	r2,1248(sp)
10001e88:	d9013417 	ldw	r4,1232(sp)
10001e8c:	d9413817 	ldw	r5,1248(sp)
10001e90:	1887883a 	add	r3,r3,r2
10001e94:	d8811f17 	ldw	r2,1148(sp)
10001e98:	41000015 	stw	r4,0(r8)
10001e9c:	41400115 	stw	r5,4(r8)
10001ea0:	10800044 	addi	r2,r2,1
10001ea4:	d8c12015 	stw	r3,1152(sp)
10001ea8:	d8811f15 	stw	r2,1148(sp)
10001eac:	010001c4 	movi	r4,7
10001eb0:	20831d16 	blt	r4,r2,10002b28 <___vfprintf_internal_r+0x1c04>
10001eb4:	42000204 	addi	r8,r8,8
10001eb8:	d8813517 	ldw	r2,1236(sp)
10001ebc:	143fffc4 	addi	r16,r2,-1
10001ec0:	043e280e 	bge	zero,r16,10001764 <__alt_data_end+0xf8001764>
10001ec4:	04800404 	movi	r18,16
10001ec8:	d8811f17 	ldw	r2,1148(sp)
10001ecc:	05440074 	movhi	r21,4097
10001ed0:	ad7f6584 	addi	r21,r21,-618
10001ed4:	943fa50e 	bge	r18,r16,10001d6c <__alt_data_end+0xf8001d6c>
10001ed8:	050001c4 	movi	r20,7
10001edc:	dd812c17 	ldw	r22,1200(sp)
10001ee0:	00000306 	br	10001ef0 <___vfprintf_internal_r+0xfcc>
10001ee4:	42000204 	addi	r8,r8,8
10001ee8:	843ffc04 	addi	r16,r16,-16
10001eec:	943f9f0e 	bge	r18,r16,10001d6c <__alt_data_end+0xf8001d6c>
10001ef0:	18c00404 	addi	r3,r3,16
10001ef4:	10800044 	addi	r2,r2,1
10001ef8:	45c00015 	stw	r23,0(r8)
10001efc:	44800115 	stw	r18,4(r8)
10001f00:	d8c12015 	stw	r3,1152(sp)
10001f04:	d8811f15 	stw	r2,1148(sp)
10001f08:	a0bff60e 	bge	r20,r2,10001ee4 <__alt_data_end+0xf8001ee4>
10001f0c:	b009883a 	mov	r4,r22
10001f10:	980b883a 	mov	r5,r19
10001f14:	d9811e04 	addi	r6,sp,1144
10001f18:	000776c0 	call	1000776c <__sprint_r>
10001f1c:	103d1d1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10001f20:	d8c12017 	ldw	r3,1152(sp)
10001f24:	d8811f17 	ldw	r2,1148(sp)
10001f28:	da000404 	addi	r8,sp,16
10001f2c:	003fee06 	br	10001ee8 <__alt_data_end+0xf8001ee8>
10001f30:	d9413017 	ldw	r5,1216(sp)
10001f34:	d8812b17 	ldw	r2,1196(sp)
10001f38:	28adc83a 	sub	r22,r5,r2
10001f3c:	05bdca0e 	bge	zero,r22,10001668 <__alt_data_end+0xf8001668>
10001f40:	07000404 	movi	fp,16
10001f44:	d8811f17 	ldw	r2,1148(sp)
10001f48:	05440074 	movhi	r21,4097
10001f4c:	ad7f6584 	addi	r21,r21,-618
10001f50:	e580230e 	bge	fp,r22,10001fe0 <___vfprintf_internal_r+0x10bc>
10001f54:	a809883a 	mov	r4,r21
10001f58:	dc012d15 	stw	r16,1204(sp)
10001f5c:	882b883a 	mov	r21,r17
10001f60:	01c001c4 	movi	r7,7
10001f64:	b023883a 	mov	r17,r22
10001f68:	dc012c17 	ldw	r16,1200(sp)
10001f6c:	202d883a 	mov	r22,r4
10001f70:	00000306 	br	10001f80 <___vfprintf_internal_r+0x105c>
10001f74:	8c7ffc04 	addi	r17,r17,-16
10001f78:	42000204 	addi	r8,r8,8
10001f7c:	e440130e 	bge	fp,r17,10001fcc <___vfprintf_internal_r+0x10a8>
10001f80:	18c00404 	addi	r3,r3,16
10001f84:	10800044 	addi	r2,r2,1
10001f88:	45c00015 	stw	r23,0(r8)
10001f8c:	47000115 	stw	fp,4(r8)
10001f90:	d8c12015 	stw	r3,1152(sp)
10001f94:	d8811f15 	stw	r2,1148(sp)
10001f98:	38bff60e 	bge	r7,r2,10001f74 <__alt_data_end+0xf8001f74>
10001f9c:	8009883a 	mov	r4,r16
10001fa0:	980b883a 	mov	r5,r19
10001fa4:	d9811e04 	addi	r6,sp,1144
10001fa8:	d9c13e15 	stw	r7,1272(sp)
10001fac:	000776c0 	call	1000776c <__sprint_r>
10001fb0:	d9c13e17 	ldw	r7,1272(sp)
10001fb4:	103cf71e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10001fb8:	8c7ffc04 	addi	r17,r17,-16
10001fbc:	d8c12017 	ldw	r3,1152(sp)
10001fc0:	d8811f17 	ldw	r2,1148(sp)
10001fc4:	da000404 	addi	r8,sp,16
10001fc8:	e47fed16 	blt	fp,r17,10001f80 <__alt_data_end+0xf8001f80>
10001fcc:	dc012d17 	ldw	r16,1204(sp)
10001fd0:	b009883a 	mov	r4,r22
10001fd4:	882d883a 	mov	r22,r17
10001fd8:	a823883a 	mov	r17,r21
10001fdc:	202b883a 	mov	r21,r4
10001fe0:	1d87883a 	add	r3,r3,r22
10001fe4:	10800044 	addi	r2,r2,1
10001fe8:	45400015 	stw	r21,0(r8)
10001fec:	45800115 	stw	r22,4(r8)
10001ff0:	d8c12015 	stw	r3,1152(sp)
10001ff4:	d8811f15 	stw	r2,1148(sp)
10001ff8:	010001c4 	movi	r4,7
10001ffc:	20817a16 	blt	r4,r2,100025e8 <___vfprintf_internal_r+0x16c4>
10002000:	42000204 	addi	r8,r8,8
10002004:	003d9806 	br	10001668 <__alt_data_end+0xf8001668>
10002008:	d9013517 	ldw	r4,1236(sp)
1000200c:	00800044 	movi	r2,1
10002010:	1100340e 	bge	r2,r4,100020e4 <___vfprintf_internal_r+0x11c0>
10002014:	dc811f17 	ldw	r18,1148(sp)
10002018:	00800044 	movi	r2,1
1000201c:	18c00044 	addi	r3,r3,1
10002020:	94800044 	addi	r18,r18,1
10002024:	40800115 	stw	r2,4(r8)
10002028:	44000015 	stw	r16,0(r8)
1000202c:	d8c12015 	stw	r3,1152(sp)
10002030:	dc811f15 	stw	r18,1148(sp)
10002034:	008001c4 	movi	r2,7
10002038:	14814e16 	blt	r2,r18,10002574 <___vfprintf_internal_r+0x1650>
1000203c:	42000204 	addi	r8,r8,8
10002040:	d8813817 	ldw	r2,1248(sp)
10002044:	94800044 	addi	r18,r18,1
10002048:	dc811f15 	stw	r18,1148(sp)
1000204c:	18ad883a 	add	r22,r3,r2
10002050:	d8c13417 	ldw	r3,1232(sp)
10002054:	40800115 	stw	r2,4(r8)
10002058:	dd812015 	stw	r22,1152(sp)
1000205c:	40c00015 	stw	r3,0(r8)
10002060:	008001c4 	movi	r2,7
10002064:	14814c16 	blt	r2,r18,10002598 <___vfprintf_internal_r+0x1674>
10002068:	45000204 	addi	r20,r8,8
1000206c:	d9013717 	ldw	r4,1244(sp)
10002070:	d9413917 	ldw	r5,1252(sp)
10002074:	000d883a 	mov	r6,zero
10002078:	000f883a 	mov	r7,zero
1000207c:	000c1380 	call	1000c138 <__eqdf2>
10002080:	1000cd26 	beq	r2,zero,100023b8 <___vfprintf_internal_r+0x1494>
10002084:	d9013517 	ldw	r4,1236(sp)
10002088:	84000044 	addi	r16,r16,1
1000208c:	94800044 	addi	r18,r18,1
10002090:	20bfffc4 	addi	r2,r4,-1
10002094:	b0ad883a 	add	r22,r22,r2
10002098:	a0800115 	stw	r2,4(r20)
1000209c:	a4000015 	stw	r16,0(r20)
100020a0:	dd812015 	stw	r22,1152(sp)
100020a4:	dc811f15 	stw	r18,1148(sp)
100020a8:	008001c4 	movi	r2,7
100020ac:	14801916 	blt	r2,r18,10002114 <___vfprintf_internal_r+0x11f0>
100020b0:	a5000204 	addi	r20,r20,8
100020b4:	d9013a17 	ldw	r4,1256(sp)
100020b8:	d88122c4 	addi	r2,sp,1163
100020bc:	94800044 	addi	r18,r18,1
100020c0:	2587883a 	add	r3,r4,r22
100020c4:	a0800015 	stw	r2,0(r20)
100020c8:	a1000115 	stw	r4,4(r20)
100020cc:	d8c12015 	stw	r3,1152(sp)
100020d0:	dc811f15 	stw	r18,1148(sp)
100020d4:	008001c4 	movi	r2,7
100020d8:	14bf2c16 	blt	r2,r18,10001d8c <__alt_data_end+0xf8001d8c>
100020dc:	a2000204 	addi	r8,r20,8
100020e0:	003da006 	br	10001764 <__alt_data_end+0xf8001764>
100020e4:	d9412a17 	ldw	r5,1192(sp)
100020e8:	2888703a 	and	r4,r5,r2
100020ec:	203fc91e 	bne	r4,zero,10002014 <__alt_data_end+0xf8002014>
100020f0:	dc811f17 	ldw	r18,1148(sp)
100020f4:	1d800044 	addi	r22,r3,1
100020f8:	40800115 	stw	r2,4(r8)
100020fc:	94800044 	addi	r18,r18,1
10002100:	44000015 	stw	r16,0(r8)
10002104:	dd812015 	stw	r22,1152(sp)
10002108:	dc811f15 	stw	r18,1148(sp)
1000210c:	008001c4 	movi	r2,7
10002110:	1482740e 	bge	r2,r18,10002ae4 <___vfprintf_internal_r+0x1bc0>
10002114:	d9012c17 	ldw	r4,1200(sp)
10002118:	980b883a 	mov	r5,r19
1000211c:	d9811e04 	addi	r6,sp,1144
10002120:	000776c0 	call	1000776c <__sprint_r>
10002124:	103c9b1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002128:	dd812017 	ldw	r22,1152(sp)
1000212c:	dc811f17 	ldw	r18,1148(sp)
10002130:	dd000404 	addi	r20,sp,16
10002134:	003fdf06 	br	100020b4 <__alt_data_end+0xf80020b4>
10002138:	d9012c17 	ldw	r4,1200(sp)
1000213c:	980b883a 	mov	r5,r19
10002140:	d9811e04 	addi	r6,sp,1144
10002144:	000776c0 	call	1000776c <__sprint_r>
10002148:	103dc326 	beq	r2,zero,10001858 <__alt_data_end+0xf8001858>
1000214c:	003c9106 	br	10001394 <__alt_data_end+0xf8001394>
10002150:	d8c10dc4 	addi	r3,sp,1079
10002154:	a808d0fa 	srli	r4,r21,3
10002158:	b00a977a 	slli	r5,r22,29
1000215c:	b02cd0fa 	srli	r22,r22,3
10002160:	ad4001cc 	andi	r21,r21,7
10002164:	a8800c04 	addi	r2,r21,48
10002168:	292ab03a 	or	r21,r5,r4
1000216c:	18800005 	stb	r2,0(r3)
10002170:	ad88b03a 	or	r4,r21,r22
10002174:	1821883a 	mov	r16,r3
10002178:	18ffffc4 	addi	r3,r3,-1
1000217c:	203ff51e 	bne	r4,zero,10002154 <__alt_data_end+0xf8002154>
10002180:	d9412a17 	ldw	r5,1192(sp)
10002184:	2900004c 	andi	r4,r5,1
10002188:	800b883a 	mov	r5,r16
1000218c:	203f1a26 	beq	r4,zero,10001df8 <__alt_data_end+0xf8001df8>
10002190:	10803fcc 	andi	r2,r2,255
10002194:	1080201c 	xori	r2,r2,128
10002198:	10bfe004 	addi	r2,r2,-128
1000219c:	01000c04 	movi	r4,48
100021a0:	113f1526 	beq	r2,r4,10001df8 <__alt_data_end+0xf8001df8>
100021a4:	1821883a 	mov	r16,r3
100021a8:	d8c12917 	ldw	r3,1188(sp)
100021ac:	293fffc5 	stb	r4,-1(r5)
100021b0:	1c07c83a 	sub	r3,r3,r16
100021b4:	d8c12e15 	stw	r3,1208(sp)
100021b8:	003cbe06 	br	100014b4 <__alt_data_end+0xf80014b4>
100021bc:	d9012c17 	ldw	r4,1200(sp)
100021c0:	980b883a 	mov	r5,r19
100021c4:	d9811e04 	addi	r6,sp,1144
100021c8:	000776c0 	call	1000776c <__sprint_r>
100021cc:	103c711e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
100021d0:	d8c12017 	ldw	r3,1152(sp)
100021d4:	da000404 	addi	r8,sp,16
100021d8:	003d5306 	br	10001728 <__alt_data_end+0xf8001728>
100021dc:	d9012c17 	ldw	r4,1200(sp)
100021e0:	980b883a 	mov	r5,r19
100021e4:	d9811e04 	addi	r6,sp,1144
100021e8:	000776c0 	call	1000776c <__sprint_r>
100021ec:	103c691e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
100021f0:	d8c12017 	ldw	r3,1152(sp)
100021f4:	da000404 	addi	r8,sp,16
100021f8:	003d0a06 	br	10001624 <__alt_data_end+0xf8001624>
100021fc:	d9012c17 	ldw	r4,1200(sp)
10002200:	980b883a 	mov	r5,r19
10002204:	d9811e04 	addi	r6,sp,1144
10002208:	000776c0 	call	1000776c <__sprint_r>
1000220c:	103c611e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002210:	d8c12017 	ldw	r3,1152(sp)
10002214:	da000404 	addi	r8,sp,16
10002218:	003d1006 	br	1000165c <__alt_data_end+0xf800165c>
1000221c:	b000021e 	bne	r22,zero,10002228 <___vfprintf_internal_r+0x1304>
10002220:	00800244 	movi	r2,9
10002224:	15401c2e 	bgeu	r2,r21,10002298 <___vfprintf_internal_r+0x1374>
10002228:	dc412b15 	stw	r17,1196(sp)
1000222c:	d8810dc4 	addi	r2,sp,1079
10002230:	b023883a 	mov	r17,r22
10002234:	402d883a 	mov	r22,r8
10002238:	a809883a 	mov	r4,r21
1000223c:	880b883a 	mov	r5,r17
10002240:	01800284 	movi	r6,10
10002244:	000f883a 	mov	r7,zero
10002248:	1021883a 	mov	r16,r2
1000224c:	000a7b00 	call	1000a7b0 <__umoddi3>
10002250:	10800c04 	addi	r2,r2,48
10002254:	a809883a 	mov	r4,r21
10002258:	880b883a 	mov	r5,r17
1000225c:	80800005 	stb	r2,0(r16)
10002260:	01800284 	movi	r6,10
10002264:	000f883a 	mov	r7,zero
10002268:	000a15c0 	call	1000a15c <__udivdi3>
1000226c:	1823883a 	mov	r17,r3
10002270:	10c6b03a 	or	r3,r2,r3
10002274:	102b883a 	mov	r21,r2
10002278:	80bfffc4 	addi	r2,r16,-1
1000227c:	183fee1e 	bne	r3,zero,10002238 <__alt_data_end+0xf8002238>
10002280:	d8c12917 	ldw	r3,1188(sp)
10002284:	b011883a 	mov	r8,r22
10002288:	dc412b17 	ldw	r17,1196(sp)
1000228c:	1c07c83a 	sub	r3,r3,r16
10002290:	d8c12e15 	stw	r3,1208(sp)
10002294:	003c8706 	br	100014b4 <__alt_data_end+0xf80014b4>
10002298:	d9013d17 	ldw	r4,1268(sp)
1000229c:	ad400c04 	addi	r21,r21,48
100022a0:	dd410dc5 	stb	r21,1079(sp)
100022a4:	d9012e15 	stw	r4,1208(sp)
100022a8:	dc010dc4 	addi	r16,sp,1079
100022ac:	003c8106 	br	100014b4 <__alt_data_end+0xf80014b4>
100022b0:	d8012e15 	stw	zero,1208(sp)
100022b4:	dc010e04 	addi	r16,sp,1080
100022b8:	003c7e06 	br	100014b4 <__alt_data_end+0xf80014b4>
100022bc:	d8812617 	ldw	r2,1176(sp)
100022c0:	0081940e 	bge	zero,r2,10002914 <___vfprintf_internal_r+0x19f0>
100022c4:	d9413517 	ldw	r5,1236(sp)
100022c8:	d8813317 	ldw	r2,1228(sp)
100022cc:	8165883a 	add	r18,r16,r5
100022d0:	9429c83a 	sub	r20,r18,r16
100022d4:	1500010e 	bge	r2,r20,100022dc <___vfprintf_internal_r+0x13b8>
100022d8:	1029883a 	mov	r20,r2
100022dc:	05000a0e 	bge	zero,r20,10002308 <___vfprintf_internal_r+0x13e4>
100022e0:	d8811f17 	ldw	r2,1148(sp)
100022e4:	1d07883a 	add	r3,r3,r20
100022e8:	44000015 	stw	r16,0(r8)
100022ec:	10800044 	addi	r2,r2,1
100022f0:	45000115 	stw	r20,4(r8)
100022f4:	d8c12015 	stw	r3,1152(sp)
100022f8:	d8811f15 	stw	r2,1148(sp)
100022fc:	010001c4 	movi	r4,7
10002300:	20822b16 	blt	r4,r2,10002bb0 <___vfprintf_internal_r+0x1c8c>
10002304:	42000204 	addi	r8,r8,8
10002308:	a0022716 	blt	r20,zero,10002ba8 <___vfprintf_internal_r+0x1c84>
1000230c:	d9013317 	ldw	r4,1228(sp)
10002310:	2529c83a 	sub	r20,r4,r20
10002314:	0500530e 	bge	zero,r20,10002464 <___vfprintf_internal_r+0x1540>
10002318:	05800404 	movi	r22,16
1000231c:	d8811f17 	ldw	r2,1148(sp)
10002320:	05440074 	movhi	r21,4097
10002324:	ad7f6584 	addi	r21,r21,-618
10002328:	b501680e 	bge	r22,r20,100028cc <___vfprintf_internal_r+0x19a8>
1000232c:	8809883a 	mov	r4,r17
10002330:	dc012e15 	stw	r16,1208(sp)
10002334:	a023883a 	mov	r17,r20
10002338:	070001c4 	movi	fp,7
1000233c:	dc012c17 	ldw	r16,1200(sp)
10002340:	2029883a 	mov	r20,r4
10002344:	00000306 	br	10002354 <___vfprintf_internal_r+0x1430>
10002348:	42000204 	addi	r8,r8,8
1000234c:	8c7ffc04 	addi	r17,r17,-16
10002350:	b4415a0e 	bge	r22,r17,100028bc <___vfprintf_internal_r+0x1998>
10002354:	18c00404 	addi	r3,r3,16
10002358:	10800044 	addi	r2,r2,1
1000235c:	45c00015 	stw	r23,0(r8)
10002360:	45800115 	stw	r22,4(r8)
10002364:	d8c12015 	stw	r3,1152(sp)
10002368:	d8811f15 	stw	r2,1148(sp)
1000236c:	e0bff60e 	bge	fp,r2,10002348 <__alt_data_end+0xf8002348>
10002370:	8009883a 	mov	r4,r16
10002374:	980b883a 	mov	r5,r19
10002378:	d9811e04 	addi	r6,sp,1144
1000237c:	000776c0 	call	1000776c <__sprint_r>
10002380:	103c041e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002384:	d8c12017 	ldw	r3,1152(sp)
10002388:	d8811f17 	ldw	r2,1148(sp)
1000238c:	da000404 	addi	r8,sp,16
10002390:	003fee06 	br	1000234c <__alt_data_end+0xf800234c>
10002394:	d9012c17 	ldw	r4,1200(sp)
10002398:	980b883a 	mov	r5,r19
1000239c:	d9811e04 	addi	r6,sp,1144
100023a0:	000776c0 	call	1000776c <__sprint_r>
100023a4:	103bfb1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
100023a8:	d8c12017 	ldw	r3,1152(sp)
100023ac:	d8812787 	ldb	r2,1182(sp)
100023b0:	da000404 	addi	r8,sp,16
100023b4:	003c8e06 	br	100015f0 <__alt_data_end+0xf80015f0>
100023b8:	d9413517 	ldw	r5,1236(sp)
100023bc:	2c3fffc4 	addi	r16,r5,-1
100023c0:	043f3c0e 	bge	zero,r16,100020b4 <__alt_data_end+0xf80020b4>
100023c4:	07000404 	movi	fp,16
100023c8:	05440074 	movhi	r21,4097
100023cc:	ad7f6584 	addi	r21,r21,-618
100023d0:	e4007c0e 	bge	fp,r16,100025c4 <___vfprintf_internal_r+0x16a0>
100023d4:	dc412e15 	stw	r17,1208(sp)
100023d8:	00c001c4 	movi	r3,7
100023dc:	8023883a 	mov	r17,r16
100023e0:	dc012c17 	ldw	r16,1200(sp)
100023e4:	00000306 	br	100023f4 <___vfprintf_internal_r+0x14d0>
100023e8:	a5000204 	addi	r20,r20,8
100023ec:	8c7ffc04 	addi	r17,r17,-16
100023f0:	e440720e 	bge	fp,r17,100025bc <___vfprintf_internal_r+0x1698>
100023f4:	b5800404 	addi	r22,r22,16
100023f8:	94800044 	addi	r18,r18,1
100023fc:	a5c00015 	stw	r23,0(r20)
10002400:	a7000115 	stw	fp,4(r20)
10002404:	dd812015 	stw	r22,1152(sp)
10002408:	dc811f15 	stw	r18,1148(sp)
1000240c:	1cbff60e 	bge	r3,r18,100023e8 <__alt_data_end+0xf80023e8>
10002410:	8009883a 	mov	r4,r16
10002414:	980b883a 	mov	r5,r19
10002418:	d9811e04 	addi	r6,sp,1144
1000241c:	d8c13e15 	stw	r3,1272(sp)
10002420:	000776c0 	call	1000776c <__sprint_r>
10002424:	d8c13e17 	ldw	r3,1272(sp)
10002428:	103bda1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
1000242c:	dd812017 	ldw	r22,1152(sp)
10002430:	dc811f17 	ldw	r18,1148(sp)
10002434:	dd000404 	addi	r20,sp,16
10002438:	003fec06 	br	100023ec <__alt_data_end+0xf80023ec>
1000243c:	00c00084 	movi	r3,2
10002440:	ad84b03a 	or	r2,r21,r22
10002444:	003d5c06 	br	100019b8 <__alt_data_end+0xf80019b8>
10002448:	d9012c17 	ldw	r4,1200(sp)
1000244c:	980b883a 	mov	r5,r19
10002450:	d9811e04 	addi	r6,sp,1144
10002454:	000776c0 	call	1000776c <__sprint_r>
10002458:	103bce1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
1000245c:	d8c12017 	ldw	r3,1152(sp)
10002460:	da000404 	addi	r8,sp,16
10002464:	d9413317 	ldw	r5,1228(sp)
10002468:	d8812617 	ldw	r2,1176(sp)
1000246c:	d9013517 	ldw	r4,1236(sp)
10002470:	8161883a 	add	r16,r16,r5
10002474:	11000316 	blt	r2,r4,10002484 <___vfprintf_internal_r+0x1560>
10002478:	d9412a17 	ldw	r5,1192(sp)
1000247c:	2900004c 	andi	r4,r5,1
10002480:	20000d26 	beq	r4,zero,100024b8 <___vfprintf_internal_r+0x1594>
10002484:	d9013817 	ldw	r4,1248(sp)
10002488:	d9413417 	ldw	r5,1232(sp)
1000248c:	1907883a 	add	r3,r3,r4
10002490:	d9011f17 	ldw	r4,1148(sp)
10002494:	41400015 	stw	r5,0(r8)
10002498:	d9413817 	ldw	r5,1248(sp)
1000249c:	21000044 	addi	r4,r4,1
100024a0:	d8c12015 	stw	r3,1152(sp)
100024a4:	41400115 	stw	r5,4(r8)
100024a8:	d9011f15 	stw	r4,1148(sp)
100024ac:	014001c4 	movi	r5,7
100024b0:	2901c716 	blt	r5,r4,10002bd0 <___vfprintf_internal_r+0x1cac>
100024b4:	42000204 	addi	r8,r8,8
100024b8:	d9013517 	ldw	r4,1236(sp)
100024bc:	9425c83a 	sub	r18,r18,r16
100024c0:	2085c83a 	sub	r2,r4,r2
100024c4:	1029883a 	mov	r20,r2
100024c8:	9080010e 	bge	r18,r2,100024d0 <___vfprintf_internal_r+0x15ac>
100024cc:	9029883a 	mov	r20,r18
100024d0:	05000a0e 	bge	zero,r20,100024fc <___vfprintf_internal_r+0x15d8>
100024d4:	d9011f17 	ldw	r4,1148(sp)
100024d8:	1d07883a 	add	r3,r3,r20
100024dc:	44000015 	stw	r16,0(r8)
100024e0:	21000044 	addi	r4,r4,1
100024e4:	45000115 	stw	r20,4(r8)
100024e8:	d8c12015 	stw	r3,1152(sp)
100024ec:	d9011f15 	stw	r4,1148(sp)
100024f0:	014001c4 	movi	r5,7
100024f4:	2901dd16 	blt	r5,r4,10002c6c <___vfprintf_internal_r+0x1d48>
100024f8:	42000204 	addi	r8,r8,8
100024fc:	a001d916 	blt	r20,zero,10002c64 <___vfprintf_internal_r+0x1d40>
10002500:	1521c83a 	sub	r16,r2,r20
10002504:	043c970e 	bge	zero,r16,10001764 <__alt_data_end+0xf8001764>
10002508:	04800404 	movi	r18,16
1000250c:	d8811f17 	ldw	r2,1148(sp)
10002510:	05440074 	movhi	r21,4097
10002514:	ad7f6584 	addi	r21,r21,-618
10002518:	943e140e 	bge	r18,r16,10001d6c <__alt_data_end+0xf8001d6c>
1000251c:	050001c4 	movi	r20,7
10002520:	dd812c17 	ldw	r22,1200(sp)
10002524:	00000306 	br	10002534 <___vfprintf_internal_r+0x1610>
10002528:	42000204 	addi	r8,r8,8
1000252c:	843ffc04 	addi	r16,r16,-16
10002530:	943e0e0e 	bge	r18,r16,10001d6c <__alt_data_end+0xf8001d6c>
10002534:	18c00404 	addi	r3,r3,16
10002538:	10800044 	addi	r2,r2,1
1000253c:	45c00015 	stw	r23,0(r8)
10002540:	44800115 	stw	r18,4(r8)
10002544:	d8c12015 	stw	r3,1152(sp)
10002548:	d8811f15 	stw	r2,1148(sp)
1000254c:	a0bff60e 	bge	r20,r2,10002528 <__alt_data_end+0xf8002528>
10002550:	b009883a 	mov	r4,r22
10002554:	980b883a 	mov	r5,r19
10002558:	d9811e04 	addi	r6,sp,1144
1000255c:	000776c0 	call	1000776c <__sprint_r>
10002560:	103b8c1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002564:	d8c12017 	ldw	r3,1152(sp)
10002568:	d8811f17 	ldw	r2,1148(sp)
1000256c:	da000404 	addi	r8,sp,16
10002570:	003fee06 	br	1000252c <__alt_data_end+0xf800252c>
10002574:	d9012c17 	ldw	r4,1200(sp)
10002578:	980b883a 	mov	r5,r19
1000257c:	d9811e04 	addi	r6,sp,1144
10002580:	000776c0 	call	1000776c <__sprint_r>
10002584:	103b831e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002588:	d8c12017 	ldw	r3,1152(sp)
1000258c:	dc811f17 	ldw	r18,1148(sp)
10002590:	da000404 	addi	r8,sp,16
10002594:	003eaa06 	br	10002040 <__alt_data_end+0xf8002040>
10002598:	d9012c17 	ldw	r4,1200(sp)
1000259c:	980b883a 	mov	r5,r19
100025a0:	d9811e04 	addi	r6,sp,1144
100025a4:	000776c0 	call	1000776c <__sprint_r>
100025a8:	103b7a1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
100025ac:	dd812017 	ldw	r22,1152(sp)
100025b0:	dc811f17 	ldw	r18,1148(sp)
100025b4:	dd000404 	addi	r20,sp,16
100025b8:	003eac06 	br	1000206c <__alt_data_end+0xf800206c>
100025bc:	8821883a 	mov	r16,r17
100025c0:	dc412e17 	ldw	r17,1208(sp)
100025c4:	b42d883a 	add	r22,r22,r16
100025c8:	94800044 	addi	r18,r18,1
100025cc:	a5400015 	stw	r21,0(r20)
100025d0:	a4000115 	stw	r16,4(r20)
100025d4:	dd812015 	stw	r22,1152(sp)
100025d8:	dc811f15 	stw	r18,1148(sp)
100025dc:	008001c4 	movi	r2,7
100025e0:	14beb30e 	bge	r2,r18,100020b0 <__alt_data_end+0xf80020b0>
100025e4:	003ecb06 	br	10002114 <__alt_data_end+0xf8002114>
100025e8:	d9012c17 	ldw	r4,1200(sp)
100025ec:	980b883a 	mov	r5,r19
100025f0:	d9811e04 	addi	r6,sp,1144
100025f4:	000776c0 	call	1000776c <__sprint_r>
100025f8:	103b661e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
100025fc:	d8c12017 	ldw	r3,1152(sp)
10002600:	da000404 	addi	r8,sp,16
10002604:	003c1806 	br	10001668 <__alt_data_end+0xf8001668>
10002608:	056bc83a 	sub	r21,zero,r21
1000260c:	a804c03a 	cmpne	r2,r21,zero
10002610:	05adc83a 	sub	r22,zero,r22
10002614:	07000b44 	movi	fp,45
10002618:	b0adc83a 	sub	r22,r22,r2
1000261c:	df012785 	stb	fp,1182(sp)
10002620:	00c00044 	movi	r3,1
10002624:	ad84b03a 	or	r2,r21,r22
10002628:	003b9106 	br	10001470 <__alt_data_end+0xf8001470>
1000262c:	da013f15 	stw	r8,1276(sp)
10002630:	00073380 	call	10007338 <__fpclassifyd>
10002634:	da013f17 	ldw	r8,1276(sp)
10002638:	1000f226 	beq	r2,zero,10002a04 <___vfprintf_internal_r+0x1ae0>
1000263c:	05bff7c4 	movi	r22,-33
10002640:	00bfffc4 	movi	r2,-1
10002644:	95ac703a 	and	r22,r18,r22
10002648:	a0820b26 	beq	r20,r2,10002e78 <___vfprintf_internal_r+0x1f54>
1000264c:	008011c4 	movi	r2,71
10002650:	b081fc26 	beq	r22,r2,10002e44 <___vfprintf_internal_r+0x1f20>
10002654:	d8c12a17 	ldw	r3,1192(sp)
10002658:	d9013917 	ldw	r4,1252(sp)
1000265c:	18c04014 	ori	r3,r3,256
10002660:	d8c12d15 	stw	r3,1204(sp)
10002664:	20020616 	blt	r4,zero,10002e80 <___vfprintf_internal_r+0x1f5c>
10002668:	dd413917 	ldw	r21,1252(sp)
1000266c:	d8012b05 	stb	zero,1196(sp)
10002670:	00801984 	movi	r2,102
10002674:	9081a526 	beq	r18,r2,10002d0c <___vfprintf_internal_r+0x1de8>
10002678:	00801184 	movi	r2,70
1000267c:	9081a326 	beq	r18,r2,10002d0c <___vfprintf_internal_r+0x1de8>
10002680:	00801144 	movi	r2,69
10002684:	b0820226 	beq	r22,r2,10002e90 <___vfprintf_internal_r+0x1f6c>
10002688:	a039883a 	mov	fp,r20
1000268c:	d8812604 	addi	r2,sp,1176
10002690:	d8800115 	stw	r2,4(sp)
10002694:	d9012c17 	ldw	r4,1200(sp)
10002698:	d8812504 	addi	r2,sp,1172
1000269c:	d9413717 	ldw	r5,1244(sp)
100026a0:	d8800215 	stw	r2,8(sp)
100026a4:	d8812104 	addi	r2,sp,1156
100026a8:	df000015 	stw	fp,0(sp)
100026ac:	d8800315 	stw	r2,12(sp)
100026b0:	a80d883a 	mov	r6,r21
100026b4:	01c00084 	movi	r7,2
100026b8:	da013f15 	stw	r8,1276(sp)
100026bc:	00033fc0 	call	100033fc <_dtoa_r>
100026c0:	1021883a 	mov	r16,r2
100026c4:	008019c4 	movi	r2,103
100026c8:	da013f17 	ldw	r8,1276(sp)
100026cc:	90800226 	beq	r18,r2,100026d8 <___vfprintf_internal_r+0x17b4>
100026d0:	008011c4 	movi	r2,71
100026d4:	9080031e 	bne	r18,r2,100026e4 <___vfprintf_internal_r+0x17c0>
100026d8:	d9012a17 	ldw	r4,1192(sp)
100026dc:	2080004c 	andi	r2,r4,1
100026e0:	1001fe26 	beq	r2,zero,10002edc <___vfprintf_internal_r+0x1fb8>
100026e4:	00801184 	movi	r2,70
100026e8:	8713883a 	add	r9,r16,fp
100026ec:	b0819f26 	beq	r22,r2,10002d6c <___vfprintf_internal_r+0x1e48>
100026f0:	d9013717 	ldw	r4,1244(sp)
100026f4:	a80b883a 	mov	r5,r21
100026f8:	000d883a 	mov	r6,zero
100026fc:	000f883a 	mov	r7,zero
10002700:	da013f15 	stw	r8,1276(sp)
10002704:	da413e15 	stw	r9,1272(sp)
10002708:	000c1380 	call	1000c138 <__eqdf2>
1000270c:	da013f17 	ldw	r8,1276(sp)
10002710:	da413e17 	ldw	r9,1272(sp)
10002714:	10017b26 	beq	r2,zero,10002d04 <___vfprintf_internal_r+0x1de0>
10002718:	d8812117 	ldw	r2,1156(sp)
1000271c:	1240062e 	bgeu	r2,r9,10002738 <___vfprintf_internal_r+0x1814>
10002720:	01000c04 	movi	r4,48
10002724:	10c00044 	addi	r3,r2,1
10002728:	d8c12115 	stw	r3,1156(sp)
1000272c:	11000005 	stb	r4,0(r2)
10002730:	d8812117 	ldw	r2,1156(sp)
10002734:	127ffb36 	bltu	r2,r9,10002724 <__alt_data_end+0xf8002724>
10002738:	1405c83a 	sub	r2,r2,r16
1000273c:	d8813515 	stw	r2,1236(sp)
10002740:	008011c4 	movi	r2,71
10002744:	b0816926 	beq	r22,r2,10002cec <___vfprintf_internal_r+0x1dc8>
10002748:	00801944 	movi	r2,101
1000274c:	14823f0e 	bge	r2,r18,1000304c <___vfprintf_internal_r+0x2128>
10002750:	d8c12617 	ldw	r3,1176(sp)
10002754:	00801984 	movi	r2,102
10002758:	d8c13315 	stw	r3,1228(sp)
1000275c:	9081e126 	beq	r18,r2,10002ee4 <___vfprintf_internal_r+0x1fc0>
10002760:	d8c13317 	ldw	r3,1228(sp)
10002764:	d9013517 	ldw	r4,1236(sp)
10002768:	1901cb16 	blt	r3,r4,10002e98 <___vfprintf_internal_r+0x1f74>
1000276c:	d9412a17 	ldw	r5,1192(sp)
10002770:	2880004c 	andi	r2,r5,1
10002774:	1001d11e 	bne	r2,zero,10002ebc <___vfprintf_internal_r+0x1f98>
10002778:	1805883a 	mov	r2,r3
1000277c:	18023116 	blt	r3,zero,10003044 <___vfprintf_internal_r+0x2120>
10002780:	d8c13317 	ldw	r3,1228(sp)
10002784:	048019c4 	movi	r18,103
10002788:	d8c12e15 	stw	r3,1208(sp)
1000278c:	df012b07 	ldb	fp,1196(sp)
10002790:	e0014e1e 	bne	fp,zero,10002ccc <___vfprintf_internal_r+0x1da8>
10002794:	d8c12d17 	ldw	r3,1204(sp)
10002798:	df012783 	ldbu	fp,1182(sp)
1000279c:	d8812b15 	stw	r2,1196(sp)
100027a0:	d8c12a15 	stw	r3,1192(sp)
100027a4:	0029883a 	mov	r20,zero
100027a8:	003b4706 	br	100014c8 <__alt_data_end+0xf80014c8>
100027ac:	d8c12f17 	ldw	r3,1212(sp)
100027b0:	d9012f17 	ldw	r4,1212(sp)
100027b4:	d9412f17 	ldw	r5,1212(sp)
100027b8:	18c00017 	ldw	r3,0(r3)
100027bc:	21000117 	ldw	r4,4(r4)
100027c0:	29400204 	addi	r5,r5,8
100027c4:	d8c13715 	stw	r3,1244(sp)
100027c8:	d9013915 	stw	r4,1252(sp)
100027cc:	d9412f15 	stw	r5,1212(sp)
100027d0:	003c3606 	br	100018ac <__alt_data_end+0xf80018ac>
100027d4:	d9412a17 	ldw	r5,1192(sp)
100027d8:	2880100c 	andi	r2,r5,64
100027dc:	1000b026 	beq	r2,zero,10002aa0 <___vfprintf_internal_r+0x1b7c>
100027e0:	d8812f17 	ldw	r2,1212(sp)
100027e4:	002d883a 	mov	r22,zero
100027e8:	00c00044 	movi	r3,1
100027ec:	1540000b 	ldhu	r21,0(r2)
100027f0:	10800104 	addi	r2,r2,4
100027f4:	d8812f15 	stw	r2,1212(sp)
100027f8:	a805883a 	mov	r2,r21
100027fc:	003c6e06 	br	100019b8 <__alt_data_end+0xf80019b8>
10002800:	00c00084 	movi	r3,2
10002804:	003c6c06 	br	100019b8 <__alt_data_end+0xf80019b8>
10002808:	d9412a17 	ldw	r5,1192(sp)
1000280c:	2880100c 	andi	r2,r5,64
10002810:	10009b26 	beq	r2,zero,10002a80 <___vfprintf_internal_r+0x1b5c>
10002814:	d8812f17 	ldw	r2,1212(sp)
10002818:	002d883a 	mov	r22,zero
1000281c:	0007883a 	mov	r3,zero
10002820:	1540000b 	ldhu	r21,0(r2)
10002824:	10800104 	addi	r2,r2,4
10002828:	d8812f15 	stw	r2,1212(sp)
1000282c:	a805883a 	mov	r2,r21
10002830:	003c6106 	br	100019b8 <__alt_data_end+0xf80019b8>
10002834:	8c800007 	ldb	r18,0(r17)
10002838:	003a1f06 	br	100010b8 <__alt_data_end+0xf80010b8>
1000283c:	d9412a17 	ldw	r5,1192(sp)
10002840:	2880100c 	andi	r2,r5,64
10002844:	10009e26 	beq	r2,zero,10002ac0 <___vfprintf_internal_r+0x1b9c>
10002848:	d8812f17 	ldw	r2,1212(sp)
1000284c:	002d883a 	mov	r22,zero
10002850:	1540000b 	ldhu	r21,0(r2)
10002854:	10800104 	addi	r2,r2,4
10002858:	d8812f15 	stw	r2,1212(sp)
1000285c:	003c9506 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10002860:	d9412a17 	ldw	r5,1192(sp)
10002864:	2880040c 	andi	r2,r5,16
10002868:	10007e1e 	bne	r2,zero,10002a64 <___vfprintf_internal_r+0x1b40>
1000286c:	d9412a17 	ldw	r5,1192(sp)
10002870:	2880100c 	andi	r2,r5,64
10002874:	10010826 	beq	r2,zero,10002c98 <___vfprintf_internal_r+0x1d74>
10002878:	d8c12f17 	ldw	r3,1212(sp)
1000287c:	d9013117 	ldw	r4,1220(sp)
10002880:	18800017 	ldw	r2,0(r3)
10002884:	18c00104 	addi	r3,r3,4
10002888:	d8c12f15 	stw	r3,1212(sp)
1000288c:	1100000d 	sth	r4,0(r2)
10002890:	0039e206 	br	1000101c <__alt_data_end+0xf800101c>
10002894:	d8c12a17 	ldw	r3,1192(sp)
10002898:	1880100c 	andi	r2,r3,64
1000289c:	10006a26 	beq	r2,zero,10002a48 <___vfprintf_internal_r+0x1b24>
100028a0:	d9012f17 	ldw	r4,1212(sp)
100028a4:	2540000f 	ldh	r21,0(r4)
100028a8:	21000104 	addi	r4,r4,4
100028ac:	d9012f15 	stw	r4,1212(sp)
100028b0:	a82dd7fa 	srai	r22,r21,31
100028b4:	b005883a 	mov	r2,r22
100028b8:	003ae906 	br	10001460 <__alt_data_end+0xf8001460>
100028bc:	dc012e17 	ldw	r16,1208(sp)
100028c0:	a009883a 	mov	r4,r20
100028c4:	8829883a 	mov	r20,r17
100028c8:	2023883a 	mov	r17,r4
100028cc:	1d07883a 	add	r3,r3,r20
100028d0:	10800044 	addi	r2,r2,1
100028d4:	45400015 	stw	r21,0(r8)
100028d8:	45000115 	stw	r20,4(r8)
100028dc:	d8c12015 	stw	r3,1152(sp)
100028e0:	d8811f15 	stw	r2,1148(sp)
100028e4:	010001c4 	movi	r4,7
100028e8:	20bed716 	blt	r4,r2,10002448 <__alt_data_end+0xf8002448>
100028ec:	42000204 	addi	r8,r8,8
100028f0:	003edc06 	br	10002464 <__alt_data_end+0xf8002464>
100028f4:	d9012c17 	ldw	r4,1200(sp)
100028f8:	980b883a 	mov	r5,r19
100028fc:	d9811e04 	addi	r6,sp,1144
10002900:	000776c0 	call	1000776c <__sprint_r>
10002904:	103aa31e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002908:	d8c12017 	ldw	r3,1152(sp)
1000290c:	da000404 	addi	r8,sp,16
10002910:	003d5606 	br	10001e6c <__alt_data_end+0xf8001e6c>
10002914:	d9011f17 	ldw	r4,1148(sp)
10002918:	01440074 	movhi	r5,4097
1000291c:	297f6504 	addi	r5,r5,-620
10002920:	18c00044 	addi	r3,r3,1
10002924:	21000044 	addi	r4,r4,1
10002928:	41400015 	stw	r5,0(r8)
1000292c:	01400044 	movi	r5,1
10002930:	41400115 	stw	r5,4(r8)
10002934:	d8c12015 	stw	r3,1152(sp)
10002938:	d9011f15 	stw	r4,1148(sp)
1000293c:	014001c4 	movi	r5,7
10002940:	29006a16 	blt	r5,r4,10002aec <___vfprintf_internal_r+0x1bc8>
10002944:	42000204 	addi	r8,r8,8
10002948:	1025883a 	mov	r18,r2
1000294c:	9000051e 	bne	r18,zero,10002964 <___vfprintf_internal_r+0x1a40>
10002950:	d8813517 	ldw	r2,1236(sp)
10002954:	1000031e 	bne	r2,zero,10002964 <___vfprintf_internal_r+0x1a40>
10002958:	d9012a17 	ldw	r4,1192(sp)
1000295c:	2080004c 	andi	r2,r4,1
10002960:	103b8026 	beq	r2,zero,10001764 <__alt_data_end+0xf8001764>
10002964:	d8813417 	ldw	r2,1232(sp)
10002968:	d9413817 	ldw	r5,1248(sp)
1000296c:	010001c4 	movi	r4,7
10002970:	40800015 	stw	r2,0(r8)
10002974:	d8811f17 	ldw	r2,1148(sp)
10002978:	1947883a 	add	r3,r3,r5
1000297c:	41400115 	stw	r5,4(r8)
10002980:	10800044 	addi	r2,r2,1
10002984:	d8c12015 	stw	r3,1152(sp)
10002988:	d8811f15 	stw	r2,1148(sp)
1000298c:	20813016 	blt	r4,r2,10002e50 <___vfprintf_internal_r+0x1f2c>
10002990:	42000204 	addi	r8,r8,8
10002994:	04a5c83a 	sub	r18,zero,r18
10002998:	04807a0e 	bge	zero,r18,10002b84 <___vfprintf_internal_r+0x1c60>
1000299c:	05000404 	movi	r20,16
100029a0:	05440074 	movhi	r21,4097
100029a4:	ad7f6584 	addi	r21,r21,-618
100029a8:	a480920e 	bge	r20,r18,10002bf4 <___vfprintf_internal_r+0x1cd0>
100029ac:	058001c4 	movi	r22,7
100029b0:	df012c17 	ldw	fp,1200(sp)
100029b4:	00000306 	br	100029c4 <___vfprintf_internal_r+0x1aa0>
100029b8:	42000204 	addi	r8,r8,8
100029bc:	94bffc04 	addi	r18,r18,-16
100029c0:	a4808c0e 	bge	r20,r18,10002bf4 <___vfprintf_internal_r+0x1cd0>
100029c4:	18c00404 	addi	r3,r3,16
100029c8:	10800044 	addi	r2,r2,1
100029cc:	45c00015 	stw	r23,0(r8)
100029d0:	45000115 	stw	r20,4(r8)
100029d4:	d8c12015 	stw	r3,1152(sp)
100029d8:	d8811f15 	stw	r2,1148(sp)
100029dc:	b0bff60e 	bge	r22,r2,100029b8 <__alt_data_end+0xf80029b8>
100029e0:	e009883a 	mov	r4,fp
100029e4:	980b883a 	mov	r5,r19
100029e8:	d9811e04 	addi	r6,sp,1144
100029ec:	000776c0 	call	1000776c <__sprint_r>
100029f0:	103a681e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
100029f4:	d8c12017 	ldw	r3,1152(sp)
100029f8:	d8811f17 	ldw	r2,1148(sp)
100029fc:	da000404 	addi	r8,sp,16
10002a00:	003fee06 	br	100029bc <__alt_data_end+0xf80029bc>
10002a04:	008011c4 	movi	r2,71
10002a08:	1480ad16 	blt	r2,r18,10002cc0 <___vfprintf_internal_r+0x1d9c>
10002a0c:	04040074 	movhi	r16,4097
10002a10:	843f5704 	addi	r16,r16,-676
10002a14:	d9012a17 	ldw	r4,1192(sp)
10002a18:	00bfdfc4 	movi	r2,-129
10002a1c:	00c000c4 	movi	r3,3
10002a20:	2088703a 	and	r4,r4,r2
10002a24:	d8c12b15 	stw	r3,1196(sp)
10002a28:	d9012a15 	stw	r4,1192(sp)
10002a2c:	df012783 	ldbu	fp,1182(sp)
10002a30:	d8c12e15 	stw	r3,1208(sp)
10002a34:	0029883a 	mov	r20,zero
10002a38:	d8013315 	stw	zero,1228(sp)
10002a3c:	003aa206 	br	100014c8 <__alt_data_end+0xf80014c8>
10002a40:	dd012e15 	stw	r20,1208(sp)
10002a44:	003c8206 	br	10001c50 <__alt_data_end+0xf8001c50>
10002a48:	d9412f17 	ldw	r5,1212(sp)
10002a4c:	2d400017 	ldw	r21,0(r5)
10002a50:	29400104 	addi	r5,r5,4
10002a54:	d9412f15 	stw	r5,1212(sp)
10002a58:	a82dd7fa 	srai	r22,r21,31
10002a5c:	b005883a 	mov	r2,r22
10002a60:	003a7f06 	br	10001460 <__alt_data_end+0xf8001460>
10002a64:	d8c12f17 	ldw	r3,1212(sp)
10002a68:	d9013117 	ldw	r4,1220(sp)
10002a6c:	18800017 	ldw	r2,0(r3)
10002a70:	18c00104 	addi	r3,r3,4
10002a74:	d8c12f15 	stw	r3,1212(sp)
10002a78:	11000015 	stw	r4,0(r2)
10002a7c:	00396706 	br	1000101c <__alt_data_end+0xf800101c>
10002a80:	d8c12f17 	ldw	r3,1212(sp)
10002a84:	002d883a 	mov	r22,zero
10002a88:	1d400017 	ldw	r21,0(r3)
10002a8c:	18c00104 	addi	r3,r3,4
10002a90:	d8c12f15 	stw	r3,1212(sp)
10002a94:	a805883a 	mov	r2,r21
10002a98:	0007883a 	mov	r3,zero
10002a9c:	003bc606 	br	100019b8 <__alt_data_end+0xf80019b8>
10002aa0:	d8c12f17 	ldw	r3,1212(sp)
10002aa4:	002d883a 	mov	r22,zero
10002aa8:	1d400017 	ldw	r21,0(r3)
10002aac:	18c00104 	addi	r3,r3,4
10002ab0:	d8c12f15 	stw	r3,1212(sp)
10002ab4:	a805883a 	mov	r2,r21
10002ab8:	00c00044 	movi	r3,1
10002abc:	003bbe06 	br	100019b8 <__alt_data_end+0xf80019b8>
10002ac0:	d8c12f17 	ldw	r3,1212(sp)
10002ac4:	002d883a 	mov	r22,zero
10002ac8:	1d400017 	ldw	r21,0(r3)
10002acc:	18c00104 	addi	r3,r3,4
10002ad0:	d8c12f15 	stw	r3,1212(sp)
10002ad4:	003bf706 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10002ad8:	04040074 	movhi	r16,4097
10002adc:	843f5504 	addi	r16,r16,-684
10002ae0:	003b8506 	br	100018f8 <__alt_data_end+0xf80018f8>
10002ae4:	45000204 	addi	r20,r8,8
10002ae8:	003d7206 	br	100020b4 <__alt_data_end+0xf80020b4>
10002aec:	d9012c17 	ldw	r4,1200(sp)
10002af0:	980b883a 	mov	r5,r19
10002af4:	d9811e04 	addi	r6,sp,1144
10002af8:	000776c0 	call	1000776c <__sprint_r>
10002afc:	103a251e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002b00:	dc812617 	ldw	r18,1176(sp)
10002b04:	d8c12017 	ldw	r3,1152(sp)
10002b08:	da000404 	addi	r8,sp,16
10002b0c:	003f8f06 	br	1000294c <__alt_data_end+0xf800294c>
10002b10:	d9012a17 	ldw	r4,1192(sp)
10002b14:	8c400044 	addi	r17,r17,1
10002b18:	14800047 	ldb	r18,1(r2)
10002b1c:	21000814 	ori	r4,r4,32
10002b20:	d9012a15 	stw	r4,1192(sp)
10002b24:	00396406 	br	100010b8 <__alt_data_end+0xf80010b8>
10002b28:	d9012c17 	ldw	r4,1200(sp)
10002b2c:	980b883a 	mov	r5,r19
10002b30:	d9811e04 	addi	r6,sp,1144
10002b34:	000776c0 	call	1000776c <__sprint_r>
10002b38:	103a161e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002b3c:	d8c12017 	ldw	r3,1152(sp)
10002b40:	da000404 	addi	r8,sp,16
10002b44:	003cdc06 	br	10001eb8 <__alt_data_end+0xf8001eb8>
10002b48:	df013f15 	stw	fp,1276(sp)
10002b4c:	00075e40 	call	100075e4 <strlen>
10002b50:	d8812e15 	stw	r2,1208(sp)
10002b54:	da013f17 	ldw	r8,1276(sp)
10002b58:	103c3f0e 	bge	r2,zero,10001c58 <__alt_data_end+0xf8001c58>
10002b5c:	0005883a 	mov	r2,zero
10002b60:	003c3d06 	br	10001c58 <__alt_data_end+0xf8001c58>
10002b64:	d9012c17 	ldw	r4,1200(sp)
10002b68:	980b883a 	mov	r5,r19
10002b6c:	d9811e04 	addi	r6,sp,1144
10002b70:	000776c0 	call	1000776c <__sprint_r>
10002b74:	103a071e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002b78:	d8c12017 	ldw	r3,1152(sp)
10002b7c:	d8811f17 	ldw	r2,1148(sp)
10002b80:	da000404 	addi	r8,sp,16
10002b84:	d9013517 	ldw	r4,1236(sp)
10002b88:	10800044 	addi	r2,r2,1
10002b8c:	44000015 	stw	r16,0(r8)
10002b90:	20c7883a 	add	r3,r4,r3
10002b94:	003aed06 	br	1000174c <__alt_data_end+0xf800174c>
10002b98:	01040074 	movhi	r4,4097
10002b9c:	213f6984 	addi	r4,r4,-602
10002ba0:	d9013615 	stw	r4,1240(sp)
10002ba4:	003a8706 	br	100015c4 <__alt_data_end+0xf80015c4>
10002ba8:	0029883a 	mov	r20,zero
10002bac:	003dd706 	br	1000230c <__alt_data_end+0xf800230c>
10002bb0:	d9012c17 	ldw	r4,1200(sp)
10002bb4:	980b883a 	mov	r5,r19
10002bb8:	d9811e04 	addi	r6,sp,1144
10002bbc:	000776c0 	call	1000776c <__sprint_r>
10002bc0:	1039f41e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002bc4:	d8c12017 	ldw	r3,1152(sp)
10002bc8:	da000404 	addi	r8,sp,16
10002bcc:	003dce06 	br	10002308 <__alt_data_end+0xf8002308>
10002bd0:	d9012c17 	ldw	r4,1200(sp)
10002bd4:	980b883a 	mov	r5,r19
10002bd8:	d9811e04 	addi	r6,sp,1144
10002bdc:	000776c0 	call	1000776c <__sprint_r>
10002be0:	1039ec1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002be4:	d8812617 	ldw	r2,1176(sp)
10002be8:	d8c12017 	ldw	r3,1152(sp)
10002bec:	da000404 	addi	r8,sp,16
10002bf0:	003e3106 	br	100024b8 <__alt_data_end+0xf80024b8>
10002bf4:	1c87883a 	add	r3,r3,r18
10002bf8:	10800044 	addi	r2,r2,1
10002bfc:	45400015 	stw	r21,0(r8)
10002c00:	44800115 	stw	r18,4(r8)
10002c04:	d8c12015 	stw	r3,1152(sp)
10002c08:	d8811f15 	stw	r2,1148(sp)
10002c0c:	010001c4 	movi	r4,7
10002c10:	20bfd416 	blt	r4,r2,10002b64 <__alt_data_end+0xf8002b64>
10002c14:	42000204 	addi	r8,r8,8
10002c18:	003fda06 	br	10002b84 <__alt_data_end+0xf8002b84>
10002c1c:	01440074 	movhi	r5,4097
10002c20:	297f6984 	addi	r5,r5,-602
10002c24:	d9413615 	stw	r5,1240(sp)
10002c28:	003af406 	br	100017fc <__alt_data_end+0xf80017fc>
10002c2c:	00800184 	movi	r2,6
10002c30:	1500012e 	bgeu	r2,r20,10002c38 <___vfprintf_internal_r+0x1d14>
10002c34:	1029883a 	mov	r20,r2
10002c38:	dd012e15 	stw	r20,1208(sp)
10002c3c:	a005883a 	mov	r2,r20
10002c40:	a000d216 	blt	r20,zero,10002f8c <___vfprintf_internal_r+0x2068>
10002c44:	d8812b15 	stw	r2,1196(sp)
10002c48:	dd412f15 	stw	r21,1212(sp)
10002c4c:	0029883a 	mov	r20,zero
10002c50:	d8013315 	stw	zero,1228(sp)
10002c54:	04040074 	movhi	r16,4097
10002c58:	843f6304 	addi	r16,r16,-628
10002c5c:	0005883a 	mov	r2,zero
10002c60:	003a2006 	br	100014e4 <__alt_data_end+0xf80014e4>
10002c64:	0029883a 	mov	r20,zero
10002c68:	003e2506 	br	10002500 <__alt_data_end+0xf8002500>
10002c6c:	d9012c17 	ldw	r4,1200(sp)
10002c70:	980b883a 	mov	r5,r19
10002c74:	d9811e04 	addi	r6,sp,1144
10002c78:	000776c0 	call	1000776c <__sprint_r>
10002c7c:	1039c51e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002c80:	d8812617 	ldw	r2,1176(sp)
10002c84:	d9413517 	ldw	r5,1236(sp)
10002c88:	d8c12017 	ldw	r3,1152(sp)
10002c8c:	da000404 	addi	r8,sp,16
10002c90:	2885c83a 	sub	r2,r5,r2
10002c94:	003e1906 	br	100024fc <__alt_data_end+0xf80024fc>
10002c98:	d9412f17 	ldw	r5,1212(sp)
10002c9c:	d8c13117 	ldw	r3,1220(sp)
10002ca0:	28800017 	ldw	r2,0(r5)
10002ca4:	29400104 	addi	r5,r5,4
10002ca8:	d9412f15 	stw	r5,1212(sp)
10002cac:	10c00015 	stw	r3,0(r2)
10002cb0:	0038da06 	br	1000101c <__alt_data_end+0xf800101c>
10002cb4:	07000b44 	movi	fp,45
10002cb8:	df012785 	stb	fp,1182(sp)
10002cbc:	003b0a06 	br	100018e8 <__alt_data_end+0xf80018e8>
10002cc0:	04040074 	movhi	r16,4097
10002cc4:	843f5804 	addi	r16,r16,-672
10002cc8:	003f5206 	br	10002a14 <__alt_data_end+0xf8002a14>
10002ccc:	00c00b44 	movi	r3,45
10002cd0:	d8c12785 	stb	r3,1182(sp)
10002cd4:	d8c12d17 	ldw	r3,1204(sp)
10002cd8:	d8812b15 	stw	r2,1196(sp)
10002cdc:	0029883a 	mov	r20,zero
10002ce0:	d8c12a15 	stw	r3,1192(sp)
10002ce4:	00800b44 	movi	r2,45
10002ce8:	0039fb06 	br	100014d8 <__alt_data_end+0xf80014d8>
10002cec:	d8812617 	ldw	r2,1176(sp)
10002cf0:	00ffff44 	movi	r3,-3
10002cf4:	10c03216 	blt	r2,r3,10002dc0 <___vfprintf_internal_r+0x1e9c>
10002cf8:	a0803116 	blt	r20,r2,10002dc0 <___vfprintf_internal_r+0x1e9c>
10002cfc:	d8813315 	stw	r2,1228(sp)
10002d00:	003e9706 	br	10002760 <__alt_data_end+0xf8002760>
10002d04:	4805883a 	mov	r2,r9
10002d08:	003e8b06 	br	10002738 <__alt_data_end+0xf8002738>
10002d0c:	d8812604 	addi	r2,sp,1176
10002d10:	d8800115 	stw	r2,4(sp)
10002d14:	d9012c17 	ldw	r4,1200(sp)
10002d18:	d8812504 	addi	r2,sp,1172
10002d1c:	d9413717 	ldw	r5,1244(sp)
10002d20:	d8800215 	stw	r2,8(sp)
10002d24:	d8812104 	addi	r2,sp,1156
10002d28:	dd000015 	stw	r20,0(sp)
10002d2c:	d8800315 	stw	r2,12(sp)
10002d30:	a80d883a 	mov	r6,r21
10002d34:	01c000c4 	movi	r7,3
10002d38:	da013f15 	stw	r8,1276(sp)
10002d3c:	00033fc0 	call	100033fc <_dtoa_r>
10002d40:	1021883a 	mov	r16,r2
10002d44:	a039883a 	mov	fp,r20
10002d48:	da013f17 	ldw	r8,1276(sp)
10002d4c:	003e6506 	br	100026e4 <__alt_data_end+0xf80026e4>
10002d50:	dd012b15 	stw	r20,1196(sp)
10002d54:	dd012e15 	stw	r20,1208(sp)
10002d58:	df012783 	ldbu	fp,1182(sp)
10002d5c:	dd412f15 	stw	r21,1212(sp)
10002d60:	0029883a 	mov	r20,zero
10002d64:	d8013315 	stw	zero,1228(sp)
10002d68:	0039d706 	br	100014c8 <__alt_data_end+0xf80014c8>
10002d6c:	81000007 	ldb	r4,0(r16)
10002d70:	00800c04 	movi	r2,48
10002d74:	20800326 	beq	r4,r2,10002d84 <___vfprintf_internal_r+0x1e60>
10002d78:	d8c12617 	ldw	r3,1176(sp)
10002d7c:	48d3883a 	add	r9,r9,r3
10002d80:	003e5b06 	br	100026f0 <__alt_data_end+0xf80026f0>
10002d84:	d9013717 	ldw	r4,1244(sp)
10002d88:	a80b883a 	mov	r5,r21
10002d8c:	000d883a 	mov	r6,zero
10002d90:	000f883a 	mov	r7,zero
10002d94:	da013f15 	stw	r8,1276(sp)
10002d98:	da413e15 	stw	r9,1272(sp)
10002d9c:	000c1380 	call	1000c138 <__eqdf2>
10002da0:	da013f17 	ldw	r8,1276(sp)
10002da4:	da413e17 	ldw	r9,1272(sp)
10002da8:	103ff326 	beq	r2,zero,10002d78 <__alt_data_end+0xf8002d78>
10002dac:	00800044 	movi	r2,1
10002db0:	1707c83a 	sub	r3,r2,fp
10002db4:	d8c12615 	stw	r3,1176(sp)
10002db8:	48d3883a 	add	r9,r9,r3
10002dbc:	003e4c06 	br	100026f0 <__alt_data_end+0xf80026f0>
10002dc0:	94bfff84 	addi	r18,r18,-2
10002dc4:	157fffc4 	addi	r21,r2,-1
10002dc8:	dd412615 	stw	r21,1176(sp)
10002dcc:	dc8122c5 	stb	r18,1163(sp)
10002dd0:	a8009016 	blt	r21,zero,10003014 <___vfprintf_internal_r+0x20f0>
10002dd4:	00800ac4 	movi	r2,43
10002dd8:	d8812305 	stb	r2,1164(sp)
10002ddc:	05000244 	movi	r20,9
10002de0:	a5404a16 	blt	r20,r21,10002f0c <___vfprintf_internal_r+0x1fe8>
10002de4:	00800c04 	movi	r2,48
10002de8:	ad400c04 	addi	r21,r21,48
10002dec:	d8812345 	stb	r2,1165(sp)
10002df0:	dd412385 	stb	r21,1166(sp)
10002df4:	d8c123c4 	addi	r3,sp,1167
10002df8:	d88122c4 	addi	r2,sp,1163
10002dfc:	1885c83a 	sub	r2,r3,r2
10002e00:	d8c13517 	ldw	r3,1236(sp)
10002e04:	d9013517 	ldw	r4,1236(sp)
10002e08:	d8813a15 	stw	r2,1256(sp)
10002e0c:	1887883a 	add	r3,r3,r2
10002e10:	d8c12e15 	stw	r3,1208(sp)
10002e14:	00800044 	movi	r2,1
10002e18:	11007a0e 	bge	r2,r4,10003004 <___vfprintf_internal_r+0x20e0>
10002e1c:	d8c12e17 	ldw	r3,1208(sp)
10002e20:	18c00044 	addi	r3,r3,1
10002e24:	d8c12e15 	stw	r3,1208(sp)
10002e28:	1805883a 	mov	r2,r3
10002e2c:	18000216 	blt	r3,zero,10002e38 <___vfprintf_internal_r+0x1f14>
10002e30:	d8013315 	stw	zero,1228(sp)
10002e34:	003e5506 	br	1000278c <__alt_data_end+0xf800278c>
10002e38:	0005883a 	mov	r2,zero
10002e3c:	d8013315 	stw	zero,1228(sp)
10002e40:	003e5206 	br	1000278c <__alt_data_end+0xf800278c>
10002e44:	a03e031e 	bne	r20,zero,10002654 <__alt_data_end+0xf8002654>
10002e48:	8029883a 	mov	r20,r16
10002e4c:	003e0106 	br	10002654 <__alt_data_end+0xf8002654>
10002e50:	d9012c17 	ldw	r4,1200(sp)
10002e54:	980b883a 	mov	r5,r19
10002e58:	d9811e04 	addi	r6,sp,1144
10002e5c:	000776c0 	call	1000776c <__sprint_r>
10002e60:	10394c1e 	bne	r2,zero,10001394 <__alt_data_end+0xf8001394>
10002e64:	dc812617 	ldw	r18,1176(sp)
10002e68:	d8c12017 	ldw	r3,1152(sp)
10002e6c:	d8811f17 	ldw	r2,1148(sp)
10002e70:	da000404 	addi	r8,sp,16
10002e74:	003ec706 	br	10002994 <__alt_data_end+0xf8002994>
10002e78:	05000184 	movi	r20,6
10002e7c:	003df506 	br	10002654 <__alt_data_end+0xf8002654>
10002e80:	00c00b44 	movi	r3,45
10002e84:	2560003c 	xorhi	r21,r4,32768
10002e88:	d8c12b05 	stb	r3,1196(sp)
10002e8c:	003df806 	br	10002670 <__alt_data_end+0xf8002670>
10002e90:	a7000044 	addi	fp,r20,1
10002e94:	003dfd06 	br	1000268c <__alt_data_end+0xf800268c>
10002e98:	d8c13317 	ldw	r3,1228(sp)
10002e9c:	00c0610e 	bge	zero,r3,10003024 <___vfprintf_internal_r+0x2100>
10002ea0:	00800044 	movi	r2,1
10002ea4:	d9013517 	ldw	r4,1236(sp)
10002ea8:	1105883a 	add	r2,r2,r4
10002eac:	d8812e15 	stw	r2,1208(sp)
10002eb0:	10000716 	blt	r2,zero,10002ed0 <___vfprintf_internal_r+0x1fac>
10002eb4:	048019c4 	movi	r18,103
10002eb8:	003e3406 	br	1000278c <__alt_data_end+0xf800278c>
10002ebc:	d8c13317 	ldw	r3,1228(sp)
10002ec0:	18c00044 	addi	r3,r3,1
10002ec4:	d8c12e15 	stw	r3,1208(sp)
10002ec8:	1805883a 	mov	r2,r3
10002ecc:	183ff90e 	bge	r3,zero,10002eb4 <__alt_data_end+0xf8002eb4>
10002ed0:	0005883a 	mov	r2,zero
10002ed4:	048019c4 	movi	r18,103
10002ed8:	003e2c06 	br	1000278c <__alt_data_end+0xf800278c>
10002edc:	d8812117 	ldw	r2,1156(sp)
10002ee0:	003e1506 	br	10002738 <__alt_data_end+0xf8002738>
10002ee4:	00c0400e 	bge	zero,r3,10002fe8 <___vfprintf_internal_r+0x20c4>
10002ee8:	a0002a1e 	bne	r20,zero,10002f94 <___vfprintf_internal_r+0x2070>
10002eec:	d9012a17 	ldw	r4,1192(sp)
10002ef0:	2080004c 	andi	r2,r4,1
10002ef4:	1000271e 	bne	r2,zero,10002f94 <___vfprintf_internal_r+0x2070>
10002ef8:	1805883a 	mov	r2,r3
10002efc:	18005a16 	blt	r3,zero,10003068 <___vfprintf_internal_r+0x2144>
10002f00:	d8c13317 	ldw	r3,1228(sp)
10002f04:	d8c12e15 	stw	r3,1208(sp)
10002f08:	003e2006 	br	1000278c <__alt_data_end+0xf800278c>
10002f0c:	d8c12284 	addi	r3,sp,1162
10002f10:	4039883a 	mov	fp,r8
10002f14:	a809883a 	mov	r4,r21
10002f18:	01400284 	movi	r5,10
10002f1c:	182d883a 	mov	r22,r3
10002f20:	000ae9c0 	call	1000ae9c <__modsi3>
10002f24:	10800c04 	addi	r2,r2,48
10002f28:	a809883a 	mov	r4,r21
10002f2c:	b0800005 	stb	r2,0(r22)
10002f30:	01400284 	movi	r5,10
10002f34:	000ae540 	call	1000ae54 <__divsi3>
10002f38:	102b883a 	mov	r21,r2
10002f3c:	b0ffffc4 	addi	r3,r22,-1
10002f40:	a0bff416 	blt	r20,r2,10002f14 <__alt_data_end+0xf8002f14>
10002f44:	11400c04 	addi	r5,r2,48
10002f48:	b17fffc5 	stb	r5,-1(r22)
10002f4c:	d88122c4 	addi	r2,sp,1163
10002f50:	e011883a 	mov	r8,fp
10002f54:	1880462e 	bgeu	r3,r2,10003070 <___vfprintf_internal_r+0x214c>
10002f58:	d9012344 	addi	r4,sp,1165
10002f5c:	b007883a 	mov	r3,r22
10002f60:	00000206 	br	10002f6c <___vfprintf_internal_r+0x2048>
10002f64:	19400003 	ldbu	r5,0(r3)
10002f68:	18c00044 	addi	r3,r3,1
10002f6c:	21400005 	stb	r5,0(r4)
10002f70:	21000044 	addi	r4,r4,1
10002f74:	10fffb1e 	bne	r2,r3,10002f64 <__alt_data_end+0xf8002f64>
10002f78:	d8c12304 	addi	r3,sp,1164
10002f7c:	1d87c83a 	sub	r3,r3,r22
10002f80:	d9412344 	addi	r5,sp,1165
10002f84:	28c7883a 	add	r3,r5,r3
10002f88:	003f9c06 	br	10002dfc <__alt_data_end+0xf8002dfc>
10002f8c:	0005883a 	mov	r2,zero
10002f90:	003f2c06 	br	10002c44 <__alt_data_end+0xf8002c44>
10002f94:	d8c13317 	ldw	r3,1228(sp)
10002f98:	a5000044 	addi	r20,r20,1
10002f9c:	1d29883a 	add	r20,r3,r20
10002fa0:	dd012e15 	stw	r20,1208(sp)
10002fa4:	a005883a 	mov	r2,r20
10002fa8:	a03df80e 	bge	r20,zero,1000278c <__alt_data_end+0xf800278c>
10002fac:	0005883a 	mov	r2,zero
10002fb0:	003df606 	br	1000278c <__alt_data_end+0xf800278c>
10002fb4:	043fffc4 	movi	r16,-1
10002fb8:	0038d406 	br	1000130c <__alt_data_end+0xf800130c>
10002fbc:	d9012f17 	ldw	r4,1212(sp)
10002fc0:	8c800043 	ldbu	r18,1(r17)
10002fc4:	1023883a 	mov	r17,r2
10002fc8:	20c00017 	ldw	r3,0(r4)
10002fcc:	21000104 	addi	r4,r4,4
10002fd0:	d9012f15 	stw	r4,1212(sp)
10002fd4:	18001f16 	blt	r3,zero,10003054 <___vfprintf_internal_r+0x2130>
10002fd8:	94803fcc 	andi	r18,r18,255
10002fdc:	9480201c 	xori	r18,r18,128
10002fe0:	94bfe004 	addi	r18,r18,-128
10002fe4:	00383406 	br	100010b8 <__alt_data_end+0xf80010b8>
10002fe8:	a000111e 	bne	r20,zero,10003030 <___vfprintf_internal_r+0x210c>
10002fec:	d9012a17 	ldw	r4,1192(sp)
10002ff0:	2080004c 	andi	r2,r4,1
10002ff4:	10000e1e 	bne	r2,zero,10003030 <___vfprintf_internal_r+0x210c>
10002ff8:	00800044 	movi	r2,1
10002ffc:	d8812e15 	stw	r2,1208(sp)
10003000:	003de206 	br	1000278c <__alt_data_end+0xf800278c>
10003004:	d9412a17 	ldw	r5,1192(sp)
10003008:	2884703a 	and	r2,r5,r2
1000300c:	103f831e 	bne	r2,zero,10002e1c <__alt_data_end+0xf8002e1c>
10003010:	003f8506 	br	10002e28 <__alt_data_end+0xf8002e28>
10003014:	00800b44 	movi	r2,45
10003018:	056bc83a 	sub	r21,zero,r21
1000301c:	d8812305 	stb	r2,1164(sp)
10003020:	003f6e06 	br	10002ddc <__alt_data_end+0xf8002ddc>
10003024:	00800084 	movi	r2,2
10003028:	10c5c83a 	sub	r2,r2,r3
1000302c:	003f9d06 	br	10002ea4 <__alt_data_end+0xf8002ea4>
10003030:	a5000084 	addi	r20,r20,2
10003034:	dd012e15 	stw	r20,1208(sp)
10003038:	a005883a 	mov	r2,r20
1000303c:	a03dd30e 	bge	r20,zero,1000278c <__alt_data_end+0xf800278c>
10003040:	003fda06 	br	10002fac <__alt_data_end+0xf8002fac>
10003044:	0005883a 	mov	r2,zero
10003048:	003dcd06 	br	10002780 <__alt_data_end+0xf8002780>
1000304c:	d8812617 	ldw	r2,1176(sp)
10003050:	003f5c06 	br	10002dc4 <__alt_data_end+0xf8002dc4>
10003054:	94803fcc 	andi	r18,r18,255
10003058:	9480201c 	xori	r18,r18,128
1000305c:	00ffffc4 	movi	r3,-1
10003060:	94bfe004 	addi	r18,r18,-128
10003064:	00381406 	br	100010b8 <__alt_data_end+0xf80010b8>
10003068:	0005883a 	mov	r2,zero
1000306c:	003fa406 	br	10002f00 <__alt_data_end+0xf8002f00>
10003070:	d8c12344 	addi	r3,sp,1165
10003074:	003f6106 	br	10002dfc <__alt_data_end+0xf8002dfc>

10003078 <__vfprintf_internal>:
10003078:	00840074 	movhi	r2,4097
1000307c:	1086c204 	addi	r2,r2,6920
10003080:	2007883a 	mov	r3,r4
10003084:	11000017 	ldw	r4,0(r2)
10003088:	2805883a 	mov	r2,r5
1000308c:	300f883a 	mov	r7,r6
10003090:	180b883a 	mov	r5,r3
10003094:	100d883a 	mov	r6,r2
10003098:	0000f241 	jmpi	10000f24 <___vfprintf_internal_r>

1000309c <__swsetup_r>:
1000309c:	00840074 	movhi	r2,4097
100030a0:	1086c204 	addi	r2,r2,6920
100030a4:	10800017 	ldw	r2,0(r2)
100030a8:	defffd04 	addi	sp,sp,-12
100030ac:	dc400115 	stw	r17,4(sp)
100030b0:	dc000015 	stw	r16,0(sp)
100030b4:	dfc00215 	stw	ra,8(sp)
100030b8:	2023883a 	mov	r17,r4
100030bc:	2821883a 	mov	r16,r5
100030c0:	10000226 	beq	r2,zero,100030cc <__swsetup_r+0x30>
100030c4:	10c00e17 	ldw	r3,56(r2)
100030c8:	18002e26 	beq	r3,zero,10003184 <__swsetup_r+0xe8>
100030cc:	8080030b 	ldhu	r2,12(r16)
100030d0:	10c0020c 	andi	r3,r2,8
100030d4:	100d883a 	mov	r6,r2
100030d8:	18000f26 	beq	r3,zero,10003118 <__swsetup_r+0x7c>
100030dc:	80c00417 	ldw	r3,16(r16)
100030e0:	18001526 	beq	r3,zero,10003138 <__swsetup_r+0x9c>
100030e4:	1100004c 	andi	r4,r2,1
100030e8:	20001c1e 	bne	r4,zero,1000315c <__swsetup_r+0xc0>
100030ec:	1080008c 	andi	r2,r2,2
100030f0:	1000271e 	bne	r2,zero,10003190 <__swsetup_r+0xf4>
100030f4:	80800517 	ldw	r2,20(r16)
100030f8:	80800215 	stw	r2,8(r16)
100030fc:	18001c26 	beq	r3,zero,10003170 <__swsetup_r+0xd4>
10003100:	0005883a 	mov	r2,zero
10003104:	dfc00217 	ldw	ra,8(sp)
10003108:	dc400117 	ldw	r17,4(sp)
1000310c:	dc000017 	ldw	r16,0(sp)
10003110:	dec00304 	addi	sp,sp,12
10003114:	f800283a 	ret
10003118:	3080040c 	andi	r2,r6,16
1000311c:	10001726 	beq	r2,zero,1000317c <__swsetup_r+0xe0>
10003120:	3080010c 	andi	r2,r6,4
10003124:	10001d1e 	bne	r2,zero,1000319c <__swsetup_r+0x100>
10003128:	80c00417 	ldw	r3,16(r16)
1000312c:	30800214 	ori	r2,r6,8
10003130:	8080030d 	sth	r2,12(r16)
10003134:	183feb1e 	bne	r3,zero,100030e4 <__alt_data_end+0xf80030e4>
10003138:	1140a00c 	andi	r5,r2,640
1000313c:	01008004 	movi	r4,512
10003140:	293fe826 	beq	r5,r4,100030e4 <__alt_data_end+0xf80030e4>
10003144:	8809883a 	mov	r4,r17
10003148:	800b883a 	mov	r5,r16
1000314c:	00056900 	call	10005690 <__smakebuf_r>
10003150:	8080030b 	ldhu	r2,12(r16)
10003154:	80c00417 	ldw	r3,16(r16)
10003158:	003fe206 	br	100030e4 <__alt_data_end+0xf80030e4>
1000315c:	80800517 	ldw	r2,20(r16)
10003160:	80000215 	stw	zero,8(r16)
10003164:	0085c83a 	sub	r2,zero,r2
10003168:	80800615 	stw	r2,24(r16)
1000316c:	183fe41e 	bne	r3,zero,10003100 <__alt_data_end+0xf8003100>
10003170:	8080030b 	ldhu	r2,12(r16)
10003174:	1080200c 	andi	r2,r2,128
10003178:	103fe226 	beq	r2,zero,10003104 <__alt_data_end+0xf8003104>
1000317c:	00bfffc4 	movi	r2,-1
10003180:	003fe006 	br	10003104 <__alt_data_end+0xf8003104>
10003184:	1009883a 	mov	r4,r2
10003188:	0004d580 	call	10004d58 <__sinit>
1000318c:	003fcf06 	br	100030cc <__alt_data_end+0xf80030cc>
10003190:	0005883a 	mov	r2,zero
10003194:	80800215 	stw	r2,8(r16)
10003198:	003fd806 	br	100030fc <__alt_data_end+0xf80030fc>
1000319c:	81400c17 	ldw	r5,48(r16)
100031a0:	28000626 	beq	r5,zero,100031bc <__swsetup_r+0x120>
100031a4:	80801004 	addi	r2,r16,64
100031a8:	28800326 	beq	r5,r2,100031b8 <__swsetup_r+0x11c>
100031ac:	8809883a 	mov	r4,r17
100031b0:	000518c0 	call	1000518c <_free_r>
100031b4:	8180030b 	ldhu	r6,12(r16)
100031b8:	80000c15 	stw	zero,48(r16)
100031bc:	80c00417 	ldw	r3,16(r16)
100031c0:	00bff6c4 	movi	r2,-37
100031c4:	118c703a 	and	r6,r2,r6
100031c8:	80000115 	stw	zero,4(r16)
100031cc:	80c00015 	stw	r3,0(r16)
100031d0:	003fd606 	br	1000312c <__alt_data_end+0xf800312c>

100031d4 <quorem>:
100031d4:	defff204 	addi	sp,sp,-56
100031d8:	dd400915 	stw	r21,36(sp)
100031dc:	20800417 	ldw	r2,16(r4)
100031e0:	2d400417 	ldw	r21,16(r5)
100031e4:	dfc00d15 	stw	ra,52(sp)
100031e8:	df000c15 	stw	fp,48(sp)
100031ec:	ddc00b15 	stw	r23,44(sp)
100031f0:	dd800a15 	stw	r22,40(sp)
100031f4:	dd000815 	stw	r20,32(sp)
100031f8:	dcc00715 	stw	r19,28(sp)
100031fc:	dc800615 	stw	r18,24(sp)
10003200:	dc400515 	stw	r17,20(sp)
10003204:	dc000415 	stw	r16,16(sp)
10003208:	d9000015 	stw	r4,0(sp)
1000320c:	d9400115 	stw	r5,4(sp)
10003210:	15407816 	blt	r2,r21,100033f4 <quorem+0x220>
10003214:	ad7fffc4 	addi	r21,r21,-1
10003218:	ad79883a 	add	fp,r21,r21
1000321c:	28c00504 	addi	r3,r5,20
10003220:	e739883a 	add	fp,fp,fp
10003224:	1f2f883a 	add	r23,r3,fp
10003228:	24400504 	addi	r17,r4,20
1000322c:	8f39883a 	add	fp,r17,fp
10003230:	b9400017 	ldw	r5,0(r23)
10003234:	e1000017 	ldw	r4,0(fp)
10003238:	d8c00215 	stw	r3,8(sp)
1000323c:	29400044 	addi	r5,r5,1
10003240:	df000315 	stw	fp,12(sp)
10003244:	000aee80 	call	1000aee8 <__udivsi3>
10003248:	1021883a 	mov	r16,r2
1000324c:	10003026 	beq	r2,zero,10003310 <quorem+0x13c>
10003250:	dcc00217 	ldw	r19,8(sp)
10003254:	8829883a 	mov	r20,r17
10003258:	002d883a 	mov	r22,zero
1000325c:	0039883a 	mov	fp,zero
10003260:	9c800017 	ldw	r18,0(r19)
10003264:	800b883a 	mov	r5,r16
10003268:	9cc00104 	addi	r19,r19,4
1000326c:	913fffcc 	andi	r4,r18,65535
10003270:	000aef80 	call	1000aef8 <__mulsi3>
10003274:	9008d43a 	srli	r4,r18,16
10003278:	800b883a 	mov	r5,r16
1000327c:	b0ad883a 	add	r22,r22,r2
10003280:	000aef80 	call	1000aef8 <__mulsi3>
10003284:	a1400017 	ldw	r5,0(r20)
10003288:	b010d43a 	srli	r8,r22,16
1000328c:	b0ffffcc 	andi	r3,r22,65535
10003290:	293fffcc 	andi	r4,r5,65535
10003294:	2709883a 	add	r4,r4,fp
10003298:	280cd43a 	srli	r6,r5,16
1000329c:	20c9c83a 	sub	r4,r4,r3
100032a0:	4085883a 	add	r2,r8,r2
100032a4:	2007d43a 	srai	r3,r4,16
100032a8:	117fffcc 	andi	r5,r2,65535
100032ac:	314bc83a 	sub	r5,r6,r5
100032b0:	28cb883a 	add	r5,r5,r3
100032b4:	280c943a 	slli	r6,r5,16
100032b8:	213fffcc 	andi	r4,r4,65535
100032bc:	102cd43a 	srli	r22,r2,16
100032c0:	3108b03a 	or	r4,r6,r4
100032c4:	a1000015 	stw	r4,0(r20)
100032c8:	2839d43a 	srai	fp,r5,16
100032cc:	a5000104 	addi	r20,r20,4
100032d0:	bcffe32e 	bgeu	r23,r19,10003260 <__alt_data_end+0xf8003260>
100032d4:	d8c00317 	ldw	r3,12(sp)
100032d8:	18800017 	ldw	r2,0(r3)
100032dc:	10000c1e 	bne	r2,zero,10003310 <quorem+0x13c>
100032e0:	18bfff04 	addi	r2,r3,-4
100032e4:	8880082e 	bgeu	r17,r2,10003308 <quorem+0x134>
100032e8:	18ffff17 	ldw	r3,-4(r3)
100032ec:	18000326 	beq	r3,zero,100032fc <quorem+0x128>
100032f0:	00000506 	br	10003308 <quorem+0x134>
100032f4:	10c00017 	ldw	r3,0(r2)
100032f8:	1800031e 	bne	r3,zero,10003308 <quorem+0x134>
100032fc:	10bfff04 	addi	r2,r2,-4
10003300:	ad7fffc4 	addi	r21,r21,-1
10003304:	88bffb36 	bltu	r17,r2,100032f4 <__alt_data_end+0xf80032f4>
10003308:	d8c00017 	ldw	r3,0(sp)
1000330c:	1d400415 	stw	r21,16(r3)
10003310:	d9000017 	ldw	r4,0(sp)
10003314:	d9400117 	ldw	r5,4(sp)
10003318:	0006c800 	call	10006c80 <__mcmp>
1000331c:	10002816 	blt	r2,zero,100033c0 <quorem+0x1ec>
10003320:	d8c00217 	ldw	r3,8(sp)
10003324:	84000044 	addi	r16,r16,1
10003328:	880d883a 	mov	r6,r17
1000332c:	000f883a 	mov	r7,zero
10003330:	32800017 	ldw	r10,0(r6)
10003334:	1a400017 	ldw	r9,0(r3)
10003338:	31800104 	addi	r6,r6,4
1000333c:	523fffcc 	andi	r8,r10,65535
10003340:	48bfffcc 	andi	r2,r9,65535
10003344:	41cf883a 	add	r7,r8,r7
10003348:	3891c83a 	sub	r8,r7,r2
1000334c:	4812d43a 	srli	r9,r9,16
10003350:	500ed43a 	srli	r7,r10,16
10003354:	4005d43a 	srai	r2,r8,16
10003358:	423fffcc 	andi	r8,r8,65535
1000335c:	3a4fc83a 	sub	r7,r7,r9
10003360:	388f883a 	add	r7,r7,r2
10003364:	3804943a 	slli	r2,r7,16
10003368:	18c00104 	addi	r3,r3,4
1000336c:	380fd43a 	srai	r7,r7,16
10003370:	1210b03a 	or	r8,r2,r8
10003374:	323fff15 	stw	r8,-4(r6)
10003378:	b8ffed2e 	bgeu	r23,r3,10003330 <__alt_data_end+0xf8003330>
1000337c:	ad45883a 	add	r2,r21,r21
10003380:	1085883a 	add	r2,r2,r2
10003384:	8887883a 	add	r3,r17,r2
10003388:	18800017 	ldw	r2,0(r3)
1000338c:	10000c1e 	bne	r2,zero,100033c0 <quorem+0x1ec>
10003390:	18bfff04 	addi	r2,r3,-4
10003394:	8880082e 	bgeu	r17,r2,100033b8 <quorem+0x1e4>
10003398:	18ffff17 	ldw	r3,-4(r3)
1000339c:	18000326 	beq	r3,zero,100033ac <quorem+0x1d8>
100033a0:	00000506 	br	100033b8 <quorem+0x1e4>
100033a4:	10c00017 	ldw	r3,0(r2)
100033a8:	1800031e 	bne	r3,zero,100033b8 <quorem+0x1e4>
100033ac:	10bfff04 	addi	r2,r2,-4
100033b0:	ad7fffc4 	addi	r21,r21,-1
100033b4:	88bffb36 	bltu	r17,r2,100033a4 <__alt_data_end+0xf80033a4>
100033b8:	d8c00017 	ldw	r3,0(sp)
100033bc:	1d400415 	stw	r21,16(r3)
100033c0:	8005883a 	mov	r2,r16
100033c4:	dfc00d17 	ldw	ra,52(sp)
100033c8:	df000c17 	ldw	fp,48(sp)
100033cc:	ddc00b17 	ldw	r23,44(sp)
100033d0:	dd800a17 	ldw	r22,40(sp)
100033d4:	dd400917 	ldw	r21,36(sp)
100033d8:	dd000817 	ldw	r20,32(sp)
100033dc:	dcc00717 	ldw	r19,28(sp)
100033e0:	dc800617 	ldw	r18,24(sp)
100033e4:	dc400517 	ldw	r17,20(sp)
100033e8:	dc000417 	ldw	r16,16(sp)
100033ec:	dec00e04 	addi	sp,sp,56
100033f0:	f800283a 	ret
100033f4:	0005883a 	mov	r2,zero
100033f8:	003ff206 	br	100033c4 <__alt_data_end+0xf80033c4>

100033fc <_dtoa_r>:
100033fc:	20801017 	ldw	r2,64(r4)
10003400:	deffdf04 	addi	sp,sp,-132
10003404:	dcc01a15 	stw	r19,104(sp)
10003408:	dc801915 	stw	r18,100(sp)
1000340c:	dc401815 	stw	r17,96(sp)
10003410:	dc001715 	stw	r16,92(sp)
10003414:	dfc02015 	stw	ra,128(sp)
10003418:	df001f15 	stw	fp,124(sp)
1000341c:	ddc01e15 	stw	r23,120(sp)
10003420:	dd801d15 	stw	r22,116(sp)
10003424:	dd401c15 	stw	r21,112(sp)
10003428:	dd001b15 	stw	r20,108(sp)
1000342c:	d9400315 	stw	r5,12(sp)
10003430:	d9c00415 	stw	r7,16(sp)
10003434:	2021883a 	mov	r16,r4
10003438:	3023883a 	mov	r17,r6
1000343c:	dcc02317 	ldw	r19,140(sp)
10003440:	3025883a 	mov	r18,r6
10003444:	10000826 	beq	r2,zero,10003468 <_dtoa_r+0x6c>
10003448:	20c01117 	ldw	r3,68(r4)
1000344c:	01800044 	movi	r6,1
10003450:	100b883a 	mov	r5,r2
10003454:	30cc983a 	sll	r6,r6,r3
10003458:	10c00115 	stw	r3,4(r2)
1000345c:	11800215 	stw	r6,8(r2)
10003460:	00063b80 	call	100063b8 <_Bfree>
10003464:	80001015 	stw	zero,64(r16)
10003468:	88002e16 	blt	r17,zero,10003524 <_dtoa_r+0x128>
1000346c:	98000015 	stw	zero,0(r19)
10003470:	88dffc2c 	andhi	r3,r17,32752
10003474:	009ffc34 	movhi	r2,32752
10003478:	18801b26 	beq	r3,r2,100034e8 <_dtoa_r+0xec>
1000347c:	d9000317 	ldw	r4,12(sp)
10003480:	900b883a 	mov	r5,r18
10003484:	000d883a 	mov	r6,zero
10003488:	000f883a 	mov	r7,zero
1000348c:	000c1380 	call	1000c138 <__eqdf2>
10003490:	10002b1e 	bne	r2,zero,10003540 <_dtoa_r+0x144>
10003494:	d8c02217 	ldw	r3,136(sp)
10003498:	d9002417 	ldw	r4,144(sp)
1000349c:	00800044 	movi	r2,1
100034a0:	18800015 	stw	r2,0(r3)
100034a4:	2001a026 	beq	r4,zero,10003b28 <_dtoa_r+0x72c>
100034a8:	00840074 	movhi	r2,4097
100034ac:	10bf6544 	addi	r2,r2,-619
100034b0:	20800015 	stw	r2,0(r4)
100034b4:	10bfffc4 	addi	r2,r2,-1
100034b8:	dfc02017 	ldw	ra,128(sp)
100034bc:	df001f17 	ldw	fp,124(sp)
100034c0:	ddc01e17 	ldw	r23,120(sp)
100034c4:	dd801d17 	ldw	r22,116(sp)
100034c8:	dd401c17 	ldw	r21,112(sp)
100034cc:	dd001b17 	ldw	r20,108(sp)
100034d0:	dcc01a17 	ldw	r19,104(sp)
100034d4:	dc801917 	ldw	r18,100(sp)
100034d8:	dc401817 	ldw	r17,96(sp)
100034dc:	dc001717 	ldw	r16,92(sp)
100034e0:	dec02104 	addi	sp,sp,132
100034e4:	f800283a 	ret
100034e8:	d8c02217 	ldw	r3,136(sp)
100034ec:	d9000317 	ldw	r4,12(sp)
100034f0:	0089c3c4 	movi	r2,9999
100034f4:	18800015 	stw	r2,0(r3)
100034f8:	20017926 	beq	r4,zero,10003ae0 <_dtoa_r+0x6e4>
100034fc:	00840074 	movhi	r2,4097
10003500:	10bf7104 	addi	r2,r2,-572
10003504:	d9802417 	ldw	r6,144(sp)
10003508:	303feb26 	beq	r6,zero,100034b8 <__alt_data_end+0xf80034b8>
1000350c:	10c000c7 	ldb	r3,3(r2)
10003510:	18017a1e 	bne	r3,zero,10003afc <_dtoa_r+0x700>
10003514:	10c000c4 	addi	r3,r2,3
10003518:	d9c02417 	ldw	r7,144(sp)
1000351c:	38c00015 	stw	r3,0(r7)
10003520:	003fe506 	br	100034b8 <__alt_data_end+0xf80034b8>
10003524:	04a00034 	movhi	r18,32768
10003528:	94bfffc4 	addi	r18,r18,-1
1000352c:	8ca4703a 	and	r18,r17,r18
10003530:	00800044 	movi	r2,1
10003534:	98800015 	stw	r2,0(r19)
10003538:	9023883a 	mov	r17,r18
1000353c:	003fcc06 	br	10003470 <__alt_data_end+0xf8003470>
10003540:	d9400317 	ldw	r5,12(sp)
10003544:	d8800204 	addi	r2,sp,8
10003548:	8828d53a 	srli	r20,r17,20
1000354c:	d8800015 	stw	r2,0(sp)
10003550:	8009883a 	mov	r4,r16
10003554:	900d883a 	mov	r6,r18
10003558:	d9c00104 	addi	r7,sp,4
1000355c:	0006fe00 	call	10006fe0 <__d2b>
10003560:	1039883a 	mov	fp,r2
10003564:	a001671e 	bne	r20,zero,10003b04 <_dtoa_r+0x708>
10003568:	dd400217 	ldw	r21,8(sp)
1000356c:	dd000117 	ldw	r20,4(sp)
10003570:	00befbc4 	movi	r2,-1041
10003574:	ad29883a 	add	r20,r21,r20
10003578:	a082d616 	blt	r20,r2,100040d4 <_dtoa_r+0xcd8>
1000357c:	d9800317 	ldw	r6,12(sp)
10003580:	013f0384 	movi	r4,-1010
10003584:	2509c83a 	sub	r4,r4,r20
10003588:	a0810484 	addi	r2,r20,1042
1000358c:	8922983a 	sll	r17,r17,r4
10003590:	3084d83a 	srl	r2,r6,r2
10003594:	8888b03a 	or	r4,r17,r2
10003598:	000d5580 	call	1000d558 <__floatunsidf>
1000359c:	1009883a 	mov	r4,r2
100035a0:	017f8434 	movhi	r5,65040
100035a4:	00800044 	movi	r2,1
100035a8:	194b883a 	add	r5,r3,r5
100035ac:	a53fffc4 	addi	r20,r20,-1
100035b0:	d8800f15 	stw	r2,60(sp)
100035b4:	000d883a 	mov	r6,zero
100035b8:	01cffe34 	movhi	r7,16376
100035bc:	000cb800 	call	1000cb80 <__subdf3>
100035c0:	1009883a 	mov	r4,r2
100035c4:	180b883a 	mov	r5,r3
100035c8:	0198dbf4 	movhi	r6,25455
100035cc:	3190d844 	addi	r6,r6,17249
100035d0:	01cff4f4 	movhi	r7,16339
100035d4:	39e1e9c4 	addi	r7,r7,-30809
100035d8:	000c3800 	call	1000c380 <__muldf3>
100035dc:	180b883a 	mov	r5,r3
100035e0:	01a2d874 	movhi	r6,35681
100035e4:	31b22cc4 	addi	r6,r6,-14157
100035e8:	01cff1f4 	movhi	r7,16327
100035ec:	39e28a04 	addi	r7,r7,-30168
100035f0:	1009883a 	mov	r4,r2
100035f4:	000af200 	call	1000af20 <__adddf3>
100035f8:	a009883a 	mov	r4,r20
100035fc:	1027883a 	mov	r19,r2
10003600:	1823883a 	mov	r17,r3
10003604:	000d4880 	call	1000d488 <__floatsidf>
10003608:	1009883a 	mov	r4,r2
1000360c:	180b883a 	mov	r5,r3
10003610:	019427f4 	movhi	r6,20639
10003614:	319e7ec4 	addi	r6,r6,31227
10003618:	01cff4f4 	movhi	r7,16339
1000361c:	39d104c4 	addi	r7,r7,17427
10003620:	000c3800 	call	1000c380 <__muldf3>
10003624:	9809883a 	mov	r4,r19
10003628:	880b883a 	mov	r5,r17
1000362c:	100d883a 	mov	r6,r2
10003630:	180f883a 	mov	r7,r3
10003634:	000af200 	call	1000af20 <__adddf3>
10003638:	1009883a 	mov	r4,r2
1000363c:	180b883a 	mov	r5,r3
10003640:	1027883a 	mov	r19,r2
10003644:	1823883a 	mov	r17,r3
10003648:	000d4080 	call	1000d408 <__fixdfsi>
1000364c:	9809883a 	mov	r4,r19
10003650:	880b883a 	mov	r5,r17
10003654:	000d883a 	mov	r6,zero
10003658:	000f883a 	mov	r7,zero
1000365c:	d8800615 	stw	r2,24(sp)
10003660:	000c2940 	call	1000c294 <__ledf2>
10003664:	10028416 	blt	r2,zero,10004078 <_dtoa_r+0xc7c>
10003668:	d9000617 	ldw	r4,24(sp)
1000366c:	00800584 	movi	r2,22
10003670:	11027236 	bltu	r2,r4,1000403c <_dtoa_r+0xc40>
10003674:	200490fa 	slli	r2,r4,3
10003678:	00c40074 	movhi	r3,4097
1000367c:	18ff8d04 	addi	r3,r3,-460
10003680:	d9800317 	ldw	r6,12(sp)
10003684:	1885883a 	add	r2,r3,r2
10003688:	11000017 	ldw	r4,0(r2)
1000368c:	11400117 	ldw	r5,4(r2)
10003690:	900f883a 	mov	r7,r18
10003694:	000c1bc0 	call	1000c1bc <__gedf2>
10003698:	0082930e 	bge	zero,r2,100040e8 <_dtoa_r+0xcec>
1000369c:	d9800617 	ldw	r6,24(sp)
100036a0:	d8000e15 	stw	zero,56(sp)
100036a4:	31bfffc4 	addi	r6,r6,-1
100036a8:	d9800615 	stw	r6,24(sp)
100036ac:	ad2bc83a 	sub	r21,r21,r20
100036b0:	ad7fffc4 	addi	r21,r21,-1
100036b4:	a8026c16 	blt	r21,zero,10004068 <_dtoa_r+0xc6c>
100036b8:	d8000815 	stw	zero,32(sp)
100036bc:	d8800617 	ldw	r2,24(sp)
100036c0:	10026116 	blt	r2,zero,10004048 <_dtoa_r+0xc4c>
100036c4:	a8ab883a 	add	r21,r21,r2
100036c8:	d8800b15 	stw	r2,44(sp)
100036cc:	d8000a15 	stw	zero,40(sp)
100036d0:	d9c00417 	ldw	r7,16(sp)
100036d4:	00800244 	movi	r2,9
100036d8:	11c11636 	bltu	r2,r7,10003b34 <_dtoa_r+0x738>
100036dc:	00800144 	movi	r2,5
100036e0:	11c4cc0e 	bge	r2,r7,10004a14 <_dtoa_r+0x1618>
100036e4:	39ffff04 	addi	r7,r7,-4
100036e8:	d9c00415 	stw	r7,16(sp)
100036ec:	0027883a 	mov	r19,zero
100036f0:	d8c00417 	ldw	r3,16(sp)
100036f4:	008000c4 	movi	r2,3
100036f8:	1883aa26 	beq	r3,r2,100045a4 <_dtoa_r+0x11a8>
100036fc:	10c35b0e 	bge	r2,r3,1000446c <_dtoa_r+0x1070>
10003700:	d9000417 	ldw	r4,16(sp)
10003704:	00800104 	movi	r2,4
10003708:	2082da26 	beq	r4,r2,10004274 <_dtoa_r+0xe78>
1000370c:	00800144 	movi	r2,5
10003710:	2081091e 	bne	r4,r2,10003b38 <_dtoa_r+0x73c>
10003714:	01c00044 	movi	r7,1
10003718:	d9c00c15 	stw	r7,48(sp)
1000371c:	d8c02117 	ldw	r3,132(sp)
10003720:	d9000617 	ldw	r4,24(sp)
10003724:	1907883a 	add	r3,r3,r4
10003728:	19800044 	addi	r6,r3,1
1000372c:	d8c00d15 	stw	r3,52(sp)
10003730:	d9800915 	stw	r6,36(sp)
10003734:	0183a90e 	bge	zero,r6,100045dc <_dtoa_r+0x11e0>
10003738:	d9800917 	ldw	r6,36(sp)
1000373c:	80001115 	stw	zero,68(r16)
10003740:	008005c4 	movi	r2,23
10003744:	1184b52e 	bgeu	r2,r6,10004a1c <_dtoa_r+0x1620>
10003748:	00c00044 	movi	r3,1
1000374c:	00800104 	movi	r2,4
10003750:	1085883a 	add	r2,r2,r2
10003754:	11000504 	addi	r4,r2,20
10003758:	180b883a 	mov	r5,r3
1000375c:	18c00044 	addi	r3,r3,1
10003760:	313ffb2e 	bgeu	r6,r4,10003750 <__alt_data_end+0xf8003750>
10003764:	81401115 	stw	r5,68(r16)
10003768:	3023883a 	mov	r17,r6
1000376c:	8009883a 	mov	r4,r16
10003770:	00063100 	call	10006310 <_Balloc>
10003774:	d8800715 	stw	r2,28(sp)
10003778:	80801015 	stw	r2,64(r16)
1000377c:	00800384 	movi	r2,14
10003780:	1440f936 	bltu	r2,r17,10003b68 <_dtoa_r+0x76c>
10003784:	9800f826 	beq	r19,zero,10003b68 <_dtoa_r+0x76c>
10003788:	d9c00617 	ldw	r7,24(sp)
1000378c:	01c39c0e 	bge	zero,r7,10004600 <_dtoa_r+0x1204>
10003790:	388003cc 	andi	r2,r7,15
10003794:	100490fa 	slli	r2,r2,3
10003798:	382dd13a 	srai	r22,r7,4
1000379c:	00c40074 	movhi	r3,4097
100037a0:	18ff8d04 	addi	r3,r3,-460
100037a4:	1885883a 	add	r2,r3,r2
100037a8:	b0c0040c 	andi	r3,r22,16
100037ac:	12800017 	ldw	r10,0(r2)
100037b0:	12400117 	ldw	r9,4(r2)
100037b4:	18038526 	beq	r3,zero,100045cc <_dtoa_r+0x11d0>
100037b8:	00840074 	movhi	r2,4097
100037bc:	10bf8304 	addi	r2,r2,-500
100037c0:	11800817 	ldw	r6,32(r2)
100037c4:	11c00917 	ldw	r7,36(r2)
100037c8:	d9000317 	ldw	r4,12(sp)
100037cc:	900b883a 	mov	r5,r18
100037d0:	da401515 	stw	r9,84(sp)
100037d4:	da801615 	stw	r10,88(sp)
100037d8:	000b79c0 	call	1000b79c <__divdf3>
100037dc:	da401517 	ldw	r9,84(sp)
100037e0:	da801617 	ldw	r10,88(sp)
100037e4:	1027883a 	mov	r19,r2
100037e8:	1829883a 	mov	r20,r3
100037ec:	b58003cc 	andi	r22,r22,15
100037f0:	044000c4 	movi	r17,3
100037f4:	b0001126 	beq	r22,zero,1000383c <_dtoa_r+0x440>
100037f8:	05c40074 	movhi	r23,4097
100037fc:	bdff8304 	addi	r23,r23,-500
10003800:	5005883a 	mov	r2,r10
10003804:	4807883a 	mov	r3,r9
10003808:	b180004c 	andi	r6,r22,1
1000380c:	1009883a 	mov	r4,r2
10003810:	b02dd07a 	srai	r22,r22,1
10003814:	180b883a 	mov	r5,r3
10003818:	30000426 	beq	r6,zero,1000382c <_dtoa_r+0x430>
1000381c:	b9800017 	ldw	r6,0(r23)
10003820:	b9c00117 	ldw	r7,4(r23)
10003824:	8c400044 	addi	r17,r17,1
10003828:	000c3800 	call	1000c380 <__muldf3>
1000382c:	bdc00204 	addi	r23,r23,8
10003830:	b03ff51e 	bne	r22,zero,10003808 <__alt_data_end+0xf8003808>
10003834:	1015883a 	mov	r10,r2
10003838:	1813883a 	mov	r9,r3
1000383c:	9809883a 	mov	r4,r19
10003840:	a00b883a 	mov	r5,r20
10003844:	500d883a 	mov	r6,r10
10003848:	480f883a 	mov	r7,r9
1000384c:	000b79c0 	call	1000b79c <__divdf3>
10003850:	1027883a 	mov	r19,r2
10003854:	1829883a 	mov	r20,r3
10003858:	d8c00e17 	ldw	r3,56(sp)
1000385c:	18000626 	beq	r3,zero,10003878 <_dtoa_r+0x47c>
10003860:	9809883a 	mov	r4,r19
10003864:	a00b883a 	mov	r5,r20
10003868:	000d883a 	mov	r6,zero
1000386c:	01cffc34 	movhi	r7,16368
10003870:	000c2940 	call	1000c294 <__ledf2>
10003874:	10041516 	blt	r2,zero,100048cc <_dtoa_r+0x14d0>
10003878:	8809883a 	mov	r4,r17
1000387c:	000d4880 	call	1000d488 <__floatsidf>
10003880:	1009883a 	mov	r4,r2
10003884:	180b883a 	mov	r5,r3
10003888:	980d883a 	mov	r6,r19
1000388c:	a00f883a 	mov	r7,r20
10003890:	000c3800 	call	1000c380 <__muldf3>
10003894:	1009883a 	mov	r4,r2
10003898:	180b883a 	mov	r5,r3
1000389c:	000d883a 	mov	r6,zero
100038a0:	01d00734 	movhi	r7,16412
100038a4:	000af200 	call	1000af20 <__adddf3>
100038a8:	1023883a 	mov	r17,r2
100038ac:	d8800917 	ldw	r2,36(sp)
100038b0:	05bf3034 	movhi	r22,64704
100038b4:	1daf883a 	add	r23,r3,r22
100038b8:	10031e26 	beq	r2,zero,10004534 <_dtoa_r+0x1138>
100038bc:	d8c00617 	ldw	r3,24(sp)
100038c0:	dac00917 	ldw	r11,36(sp)
100038c4:	d8c01315 	stw	r3,76(sp)
100038c8:	d9000c17 	ldw	r4,48(sp)
100038cc:	20039626 	beq	r4,zero,10004728 <_dtoa_r+0x132c>
100038d0:	58bfffc4 	addi	r2,r11,-1
100038d4:	100490fa 	slli	r2,r2,3
100038d8:	00c40074 	movhi	r3,4097
100038dc:	18ff8d04 	addi	r3,r3,-460
100038e0:	0009883a 	mov	r4,zero
100038e4:	1885883a 	add	r2,r3,r2
100038e8:	11800017 	ldw	r6,0(r2)
100038ec:	11c00117 	ldw	r7,4(r2)
100038f0:	d8800717 	ldw	r2,28(sp)
100038f4:	014ff834 	movhi	r5,16352
100038f8:	dac01615 	stw	r11,88(sp)
100038fc:	15800044 	addi	r22,r2,1
10003900:	000b79c0 	call	1000b79c <__divdf3>
10003904:	880d883a 	mov	r6,r17
10003908:	b80f883a 	mov	r7,r23
1000390c:	1009883a 	mov	r4,r2
10003910:	180b883a 	mov	r5,r3
10003914:	000cb800 	call	1000cb80 <__subdf3>
10003918:	a00b883a 	mov	r5,r20
1000391c:	9809883a 	mov	r4,r19
10003920:	102f883a 	mov	r23,r2
10003924:	d8c01015 	stw	r3,64(sp)
10003928:	000d4080 	call	1000d408 <__fixdfsi>
1000392c:	1009883a 	mov	r4,r2
10003930:	d8801515 	stw	r2,84(sp)
10003934:	000d4880 	call	1000d488 <__floatsidf>
10003938:	9809883a 	mov	r4,r19
1000393c:	a00b883a 	mov	r5,r20
10003940:	100d883a 	mov	r6,r2
10003944:	180f883a 	mov	r7,r3
10003948:	000cb800 	call	1000cb80 <__subdf3>
1000394c:	da401517 	ldw	r9,84(sp)
10003950:	1827883a 	mov	r19,r3
10003954:	d8c00717 	ldw	r3,28(sp)
10003958:	d9401017 	ldw	r5,64(sp)
1000395c:	4a400c04 	addi	r9,r9,48
10003960:	1023883a 	mov	r17,r2
10003964:	1a400005 	stb	r9,0(r3)
10003968:	b809883a 	mov	r4,r23
1000396c:	880d883a 	mov	r6,r17
10003970:	980f883a 	mov	r7,r19
10003974:	4829883a 	mov	r20,r9
10003978:	000c1bc0 	call	1000c1bc <__gedf2>
1000397c:	00842216 	blt	zero,r2,10004a08 <_dtoa_r+0x160c>
10003980:	0009883a 	mov	r4,zero
10003984:	014ffc34 	movhi	r5,16368
10003988:	880d883a 	mov	r6,r17
1000398c:	980f883a 	mov	r7,r19
10003990:	000cb800 	call	1000cb80 <__subdf3>
10003994:	d9401017 	ldw	r5,64(sp)
10003998:	b809883a 	mov	r4,r23
1000399c:	100d883a 	mov	r6,r2
100039a0:	180f883a 	mov	r7,r3
100039a4:	000c1bc0 	call	1000c1bc <__gedf2>
100039a8:	dac01617 	ldw	r11,88(sp)
100039ac:	00841316 	blt	zero,r2,100049fc <_dtoa_r+0x1600>
100039b0:	00800044 	movi	r2,1
100039b4:	12c06c0e 	bge	r2,r11,10003b68 <_dtoa_r+0x76c>
100039b8:	d9000717 	ldw	r4,28(sp)
100039bc:	dd401215 	stw	r21,72(sp)
100039c0:	dc001115 	stw	r16,68(sp)
100039c4:	22d7883a 	add	r11,r4,r11
100039c8:	dc801415 	stw	r18,80(sp)
100039cc:	582b883a 	mov	r21,r11
100039d0:	b021883a 	mov	r16,r22
100039d4:	dc801017 	ldw	r18,64(sp)
100039d8:	00000906 	br	10003a00 <_dtoa_r+0x604>
100039dc:	000cb800 	call	1000cb80 <__subdf3>
100039e0:	1009883a 	mov	r4,r2
100039e4:	180b883a 	mov	r5,r3
100039e8:	b80d883a 	mov	r6,r23
100039ec:	900f883a 	mov	r7,r18
100039f0:	000c2940 	call	1000c294 <__ledf2>
100039f4:	1003ea16 	blt	r2,zero,100049a0 <_dtoa_r+0x15a4>
100039f8:	b543ed26 	beq	r22,r21,100049b0 <_dtoa_r+0x15b4>
100039fc:	b021883a 	mov	r16,r22
10003a00:	b809883a 	mov	r4,r23
10003a04:	900b883a 	mov	r5,r18
10003a08:	000d883a 	mov	r6,zero
10003a0c:	01d00934 	movhi	r7,16420
10003a10:	000c3800 	call	1000c380 <__muldf3>
10003a14:	000d883a 	mov	r6,zero
10003a18:	01d00934 	movhi	r7,16420
10003a1c:	8809883a 	mov	r4,r17
10003a20:	980b883a 	mov	r5,r19
10003a24:	102f883a 	mov	r23,r2
10003a28:	1825883a 	mov	r18,r3
10003a2c:	000c3800 	call	1000c380 <__muldf3>
10003a30:	180b883a 	mov	r5,r3
10003a34:	1009883a 	mov	r4,r2
10003a38:	1823883a 	mov	r17,r3
10003a3c:	1027883a 	mov	r19,r2
10003a40:	000d4080 	call	1000d408 <__fixdfsi>
10003a44:	1009883a 	mov	r4,r2
10003a48:	1029883a 	mov	r20,r2
10003a4c:	000d4880 	call	1000d488 <__floatsidf>
10003a50:	9809883a 	mov	r4,r19
10003a54:	880b883a 	mov	r5,r17
10003a58:	100d883a 	mov	r6,r2
10003a5c:	180f883a 	mov	r7,r3
10003a60:	000cb800 	call	1000cb80 <__subdf3>
10003a64:	a5000c04 	addi	r20,r20,48
10003a68:	1009883a 	mov	r4,r2
10003a6c:	180b883a 	mov	r5,r3
10003a70:	b80d883a 	mov	r6,r23
10003a74:	900f883a 	mov	r7,r18
10003a78:	85000005 	stb	r20,0(r16)
10003a7c:	1023883a 	mov	r17,r2
10003a80:	1827883a 	mov	r19,r3
10003a84:	000c2940 	call	1000c294 <__ledf2>
10003a88:	b5800044 	addi	r22,r22,1
10003a8c:	0009883a 	mov	r4,zero
10003a90:	014ffc34 	movhi	r5,16368
10003a94:	880d883a 	mov	r6,r17
10003a98:	980f883a 	mov	r7,r19
10003a9c:	103fcf0e 	bge	r2,zero,100039dc <__alt_data_end+0xf80039dc>
10003aa0:	d8c01317 	ldw	r3,76(sp)
10003aa4:	dc001117 	ldw	r16,68(sp)
10003aa8:	d8c00615 	stw	r3,24(sp)
10003aac:	8009883a 	mov	r4,r16
10003ab0:	e00b883a 	mov	r5,fp
10003ab4:	00063b80 	call	100063b8 <_Bfree>
10003ab8:	d9800617 	ldw	r6,24(sp)
10003abc:	d9c02217 	ldw	r7,136(sp)
10003ac0:	b0000005 	stb	zero,0(r22)
10003ac4:	30800044 	addi	r2,r6,1
10003ac8:	38800015 	stw	r2,0(r7)
10003acc:	d8802417 	ldw	r2,144(sp)
10003ad0:	10026426 	beq	r2,zero,10004464 <_dtoa_r+0x1068>
10003ad4:	15800015 	stw	r22,0(r2)
10003ad8:	d8800717 	ldw	r2,28(sp)
10003adc:	003e7606 	br	100034b8 <__alt_data_end+0xf80034b8>
10003ae0:	00800434 	movhi	r2,16
10003ae4:	10bfffc4 	addi	r2,r2,-1
10003ae8:	88a2703a 	and	r17,r17,r2
10003aec:	883e831e 	bne	r17,zero,100034fc <__alt_data_end+0xf80034fc>
10003af0:	00840074 	movhi	r2,4097
10003af4:	10bf6e04 	addi	r2,r2,-584
10003af8:	003e8206 	br	10003504 <__alt_data_end+0xf8003504>
10003afc:	10c00204 	addi	r3,r2,8
10003b00:	003e8506 	br	10003518 <__alt_data_end+0xf8003518>
10003b04:	01400434 	movhi	r5,16
10003b08:	297fffc4 	addi	r5,r5,-1
10003b0c:	914a703a 	and	r5,r18,r5
10003b10:	d9000317 	ldw	r4,12(sp)
10003b14:	294ffc34 	orhi	r5,r5,16368
10003b18:	a53f0044 	addi	r20,r20,-1023
10003b1c:	dd400217 	ldw	r21,8(sp)
10003b20:	d8000f15 	stw	zero,60(sp)
10003b24:	003ea306 	br	100035b4 <__alt_data_end+0xf80035b4>
10003b28:	00840074 	movhi	r2,4097
10003b2c:	10bf6504 	addi	r2,r2,-620
10003b30:	003e6106 	br	100034b8 <__alt_data_end+0xf80034b8>
10003b34:	d8000415 	stw	zero,16(sp)
10003b38:	8009883a 	mov	r4,r16
10003b3c:	80001115 	stw	zero,68(r16)
10003b40:	000b883a 	mov	r5,zero
10003b44:	00063100 	call	10006310 <_Balloc>
10003b48:	00ffffc4 	movi	r3,-1
10003b4c:	01000044 	movi	r4,1
10003b50:	d8800715 	stw	r2,28(sp)
10003b54:	d8c00d15 	stw	r3,52(sp)
10003b58:	80801015 	stw	r2,64(r16)
10003b5c:	d8002115 	stw	zero,132(sp)
10003b60:	d8c00915 	stw	r3,36(sp)
10003b64:	d9000c15 	stw	r4,48(sp)
10003b68:	d8800117 	ldw	r2,4(sp)
10003b6c:	10008e16 	blt	r2,zero,10003da8 <_dtoa_r+0x9ac>
10003b70:	d9000617 	ldw	r4,24(sp)
10003b74:	00c00384 	movi	r3,14
10003b78:	19008b16 	blt	r3,r4,10003da8 <_dtoa_r+0x9ac>
10003b7c:	200490fa 	slli	r2,r4,3
10003b80:	d9802117 	ldw	r6,132(sp)
10003b84:	00c40074 	movhi	r3,4097
10003b88:	18ff8d04 	addi	r3,r3,-460
10003b8c:	1885883a 	add	r2,r3,r2
10003b90:	14400017 	ldw	r17,0(r2)
10003b94:	14c00117 	ldw	r19,4(r2)
10003b98:	3001be16 	blt	r6,zero,10004294 <_dtoa_r+0xe98>
10003b9c:	d9000317 	ldw	r4,12(sp)
10003ba0:	880d883a 	mov	r6,r17
10003ba4:	980f883a 	mov	r7,r19
10003ba8:	900b883a 	mov	r5,r18
10003bac:	000b79c0 	call	1000b79c <__divdf3>
10003bb0:	180b883a 	mov	r5,r3
10003bb4:	1009883a 	mov	r4,r2
10003bb8:	000d4080 	call	1000d408 <__fixdfsi>
10003bbc:	1009883a 	mov	r4,r2
10003bc0:	102f883a 	mov	r23,r2
10003bc4:	000d4880 	call	1000d488 <__floatsidf>
10003bc8:	1009883a 	mov	r4,r2
10003bcc:	180b883a 	mov	r5,r3
10003bd0:	880d883a 	mov	r6,r17
10003bd4:	980f883a 	mov	r7,r19
10003bd8:	000c3800 	call	1000c380 <__muldf3>
10003bdc:	d9000317 	ldw	r4,12(sp)
10003be0:	900b883a 	mov	r5,r18
10003be4:	100d883a 	mov	r6,r2
10003be8:	180f883a 	mov	r7,r3
10003bec:	000cb800 	call	1000cb80 <__subdf3>
10003bf0:	d9c00717 	ldw	r7,28(sp)
10003bf4:	1009883a 	mov	r4,r2
10003bf8:	b8800c04 	addi	r2,r23,48
10003bfc:	38800005 	stb	r2,0(r7)
10003c00:	3d800044 	addi	r22,r7,1
10003c04:	d9c00917 	ldw	r7,36(sp)
10003c08:	01800044 	movi	r6,1
10003c0c:	180b883a 	mov	r5,r3
10003c10:	2005883a 	mov	r2,r4
10003c14:	39803e26 	beq	r7,r6,10003d10 <_dtoa_r+0x914>
10003c18:	000d883a 	mov	r6,zero
10003c1c:	01d00934 	movhi	r7,16420
10003c20:	000c3800 	call	1000c380 <__muldf3>
10003c24:	1009883a 	mov	r4,r2
10003c28:	180b883a 	mov	r5,r3
10003c2c:	000d883a 	mov	r6,zero
10003c30:	000f883a 	mov	r7,zero
10003c34:	1029883a 	mov	r20,r2
10003c38:	182b883a 	mov	r21,r3
10003c3c:	000c1380 	call	1000c138 <__eqdf2>
10003c40:	103f9a26 	beq	r2,zero,10003aac <__alt_data_end+0xf8003aac>
10003c44:	d8c00717 	ldw	r3,28(sp)
10003c48:	d9000917 	ldw	r4,36(sp)
10003c4c:	b025883a 	mov	r18,r22
10003c50:	df000415 	stw	fp,16(sp)
10003c54:	1905883a 	add	r2,r3,r4
10003c58:	15ffffc4 	addi	r23,r2,-1
10003c5c:	dc000315 	stw	r16,12(sp)
10003c60:	00000a06 	br	10003c8c <_dtoa_r+0x890>
10003c64:	000c3800 	call	1000c380 <__muldf3>
10003c68:	1009883a 	mov	r4,r2
10003c6c:	180b883a 	mov	r5,r3
10003c70:	000d883a 	mov	r6,zero
10003c74:	000f883a 	mov	r7,zero
10003c78:	1029883a 	mov	r20,r2
10003c7c:	182b883a 	mov	r21,r3
10003c80:	000c1380 	call	1000c138 <__eqdf2>
10003c84:	10021926 	beq	r2,zero,100044ec <_dtoa_r+0x10f0>
10003c88:	e025883a 	mov	r18,fp
10003c8c:	880d883a 	mov	r6,r17
10003c90:	980f883a 	mov	r7,r19
10003c94:	a009883a 	mov	r4,r20
10003c98:	a80b883a 	mov	r5,r21
10003c9c:	000b79c0 	call	1000b79c <__divdf3>
10003ca0:	180b883a 	mov	r5,r3
10003ca4:	1009883a 	mov	r4,r2
10003ca8:	000d4080 	call	1000d408 <__fixdfsi>
10003cac:	1009883a 	mov	r4,r2
10003cb0:	1021883a 	mov	r16,r2
10003cb4:	000d4880 	call	1000d488 <__floatsidf>
10003cb8:	1009883a 	mov	r4,r2
10003cbc:	180b883a 	mov	r5,r3
10003cc0:	880d883a 	mov	r6,r17
10003cc4:	980f883a 	mov	r7,r19
10003cc8:	000c3800 	call	1000c380 <__muldf3>
10003ccc:	a009883a 	mov	r4,r20
10003cd0:	a80b883a 	mov	r5,r21
10003cd4:	100d883a 	mov	r6,r2
10003cd8:	180f883a 	mov	r7,r3
10003cdc:	000cb800 	call	1000cb80 <__subdf3>
10003ce0:	82800c04 	addi	r10,r16,48
10003ce4:	97000044 	addi	fp,r18,1
10003ce8:	92800005 	stb	r10,0(r18)
10003cec:	000d883a 	mov	r6,zero
10003cf0:	01d00934 	movhi	r7,16420
10003cf4:	1009883a 	mov	r4,r2
10003cf8:	180b883a 	mov	r5,r3
10003cfc:	e02d883a 	mov	r22,fp
10003d00:	95ffd81e 	bne	r18,r23,10003c64 <__alt_data_end+0xf8003c64>
10003d04:	802f883a 	mov	r23,r16
10003d08:	df000417 	ldw	fp,16(sp)
10003d0c:	dc000317 	ldw	r16,12(sp)
10003d10:	1009883a 	mov	r4,r2
10003d14:	180b883a 	mov	r5,r3
10003d18:	100d883a 	mov	r6,r2
10003d1c:	180f883a 	mov	r7,r3
10003d20:	000af200 	call	1000af20 <__adddf3>
10003d24:	8809883a 	mov	r4,r17
10003d28:	980b883a 	mov	r5,r19
10003d2c:	100d883a 	mov	r6,r2
10003d30:	180f883a 	mov	r7,r3
10003d34:	1025883a 	mov	r18,r2
10003d38:	1829883a 	mov	r20,r3
10003d3c:	000c2940 	call	1000c294 <__ledf2>
10003d40:	10000816 	blt	r2,zero,10003d64 <_dtoa_r+0x968>
10003d44:	8809883a 	mov	r4,r17
10003d48:	980b883a 	mov	r5,r19
10003d4c:	900d883a 	mov	r6,r18
10003d50:	a00f883a 	mov	r7,r20
10003d54:	000c1380 	call	1000c138 <__eqdf2>
10003d58:	103f541e 	bne	r2,zero,10003aac <__alt_data_end+0xf8003aac>
10003d5c:	bdc0004c 	andi	r23,r23,1
10003d60:	b83f5226 	beq	r23,zero,10003aac <__alt_data_end+0xf8003aac>
10003d64:	b53fffc3 	ldbu	r20,-1(r22)
10003d68:	b0ffff84 	addi	r3,r22,-2
10003d6c:	01400e44 	movi	r5,57
10003d70:	d9800717 	ldw	r6,28(sp)
10003d74:	00000406 	br	10003d88 <_dtoa_r+0x98c>
10003d78:	30824326 	beq	r6,r2,10004688 <_dtoa_r+0x128c>
10003d7c:	1d000003 	ldbu	r20,0(r3)
10003d80:	102d883a 	mov	r22,r2
10003d84:	18ffffc4 	addi	r3,r3,-1
10003d88:	a1003fcc 	andi	r4,r20,255
10003d8c:	2100201c 	xori	r4,r4,128
10003d90:	213fe004 	addi	r4,r4,-128
10003d94:	b0bfffc4 	addi	r2,r22,-1
10003d98:	217ff726 	beq	r4,r5,10003d78 <__alt_data_end+0xf8003d78>
10003d9c:	a2400044 	addi	r9,r20,1
10003da0:	12400005 	stb	r9,0(r2)
10003da4:	003f4106 	br	10003aac <__alt_data_end+0xf8003aac>
10003da8:	d9000c17 	ldw	r4,48(sp)
10003dac:	2000be26 	beq	r4,zero,100040a8 <_dtoa_r+0xcac>
10003db0:	d9800417 	ldw	r6,16(sp)
10003db4:	00c00044 	movi	r3,1
10003db8:	19815e0e 	bge	r3,r6,10004334 <_dtoa_r+0xf38>
10003dbc:	d8800917 	ldw	r2,36(sp)
10003dc0:	d8c00a17 	ldw	r3,40(sp)
10003dc4:	153fffc4 	addi	r20,r2,-1
10003dc8:	1d01f816 	blt	r3,r20,100045ac <_dtoa_r+0x11b0>
10003dcc:	1d29c83a 	sub	r20,r3,r20
10003dd0:	d9c00917 	ldw	r7,36(sp)
10003dd4:	3802ad16 	blt	r7,zero,1000488c <_dtoa_r+0x1490>
10003dd8:	dcc00817 	ldw	r19,32(sp)
10003ddc:	d8800917 	ldw	r2,36(sp)
10003de0:	d8c00817 	ldw	r3,32(sp)
10003de4:	8009883a 	mov	r4,r16
10003de8:	01400044 	movi	r5,1
10003dec:	1887883a 	add	r3,r3,r2
10003df0:	d8c00815 	stw	r3,32(sp)
10003df4:	a8ab883a 	add	r21,r21,r2
10003df8:	00067400 	call	10006740 <__i2b>
10003dfc:	1023883a 	mov	r17,r2
10003e00:	98000826 	beq	r19,zero,10003e24 <_dtoa_r+0xa28>
10003e04:	0540070e 	bge	zero,r21,10003e24 <_dtoa_r+0xa28>
10003e08:	a805883a 	mov	r2,r21
10003e0c:	9d411716 	blt	r19,r21,1000426c <_dtoa_r+0xe70>
10003e10:	d9000817 	ldw	r4,32(sp)
10003e14:	98a7c83a 	sub	r19,r19,r2
10003e18:	a8abc83a 	sub	r21,r21,r2
10003e1c:	2089c83a 	sub	r4,r4,r2
10003e20:	d9000815 	stw	r4,32(sp)
10003e24:	d9800a17 	ldw	r6,40(sp)
10003e28:	0180140e 	bge	zero,r6,10003e7c <_dtoa_r+0xa80>
10003e2c:	d9c00c17 	ldw	r7,48(sp)
10003e30:	3801d626 	beq	r7,zero,1000458c <_dtoa_r+0x1190>
10003e34:	05000e0e 	bge	zero,r20,10003e70 <_dtoa_r+0xa74>
10003e38:	880b883a 	mov	r5,r17
10003e3c:	8009883a 	mov	r4,r16
10003e40:	a00d883a 	mov	r6,r20
10003e44:	00069e80 	call	100069e8 <__pow5mult>
10003e48:	e00d883a 	mov	r6,fp
10003e4c:	8009883a 	mov	r4,r16
10003e50:	100b883a 	mov	r5,r2
10003e54:	1023883a 	mov	r17,r2
10003e58:	000677c0 	call	1000677c <__multiply>
10003e5c:	102d883a 	mov	r22,r2
10003e60:	e00b883a 	mov	r5,fp
10003e64:	8009883a 	mov	r4,r16
10003e68:	00063b80 	call	100063b8 <_Bfree>
10003e6c:	b039883a 	mov	fp,r22
10003e70:	d8800a17 	ldw	r2,40(sp)
10003e74:	150dc83a 	sub	r6,r2,r20
10003e78:	30011f1e 	bne	r6,zero,100042f8 <_dtoa_r+0xefc>
10003e7c:	8009883a 	mov	r4,r16
10003e80:	01400044 	movi	r5,1
10003e84:	00067400 	call	10006740 <__i2b>
10003e88:	d8c00b17 	ldw	r3,44(sp)
10003e8c:	1029883a 	mov	r20,r2
10003e90:	00c0050e 	bge	zero,r3,10003ea8 <_dtoa_r+0xaac>
10003e94:	8009883a 	mov	r4,r16
10003e98:	100b883a 	mov	r5,r2
10003e9c:	180d883a 	mov	r6,r3
10003ea0:	00069e80 	call	100069e8 <__pow5mult>
10003ea4:	1029883a 	mov	r20,r2
10003ea8:	d9000417 	ldw	r4,16(sp)
10003eac:	00800044 	movi	r2,1
10003eb0:	1100e00e 	bge	r2,r4,10004234 <_dtoa_r+0xe38>
10003eb4:	0025883a 	mov	r18,zero
10003eb8:	d8800b17 	ldw	r2,44(sp)
10003ebc:	10015f1e 	bne	r2,zero,1000443c <_dtoa_r+0x1040>
10003ec0:	00800044 	movi	r2,1
10003ec4:	1545883a 	add	r2,r2,r21
10003ec8:	108007cc 	andi	r2,r2,31
10003ecc:	10007a26 	beq	r2,zero,100040b8 <_dtoa_r+0xcbc>
10003ed0:	01000804 	movi	r4,32
10003ed4:	2089c83a 	sub	r4,r4,r2
10003ed8:	00c00104 	movi	r3,4
10003edc:	1902d20e 	bge	r3,r4,10004a28 <_dtoa_r+0x162c>
10003ee0:	00c00704 	movi	r3,28
10003ee4:	1885c83a 	sub	r2,r3,r2
10003ee8:	d8c00817 	ldw	r3,32(sp)
10003eec:	98a7883a 	add	r19,r19,r2
10003ef0:	a8ab883a 	add	r21,r21,r2
10003ef4:	1887883a 	add	r3,r3,r2
10003ef8:	d8c00815 	stw	r3,32(sp)
10003efc:	d9800817 	ldw	r6,32(sp)
10003f00:	0180040e 	bge	zero,r6,10003f14 <_dtoa_r+0xb18>
10003f04:	e00b883a 	mov	r5,fp
10003f08:	8009883a 	mov	r4,r16
10003f0c:	0006b300 	call	10006b30 <__lshift>
10003f10:	1039883a 	mov	fp,r2
10003f14:	0540050e 	bge	zero,r21,10003f2c <_dtoa_r+0xb30>
10003f18:	a00b883a 	mov	r5,r20
10003f1c:	8009883a 	mov	r4,r16
10003f20:	a80d883a 	mov	r6,r21
10003f24:	0006b300 	call	10006b30 <__lshift>
10003f28:	1029883a 	mov	r20,r2
10003f2c:	d9c00e17 	ldw	r7,56(sp)
10003f30:	3801301e 	bne	r7,zero,100043f4 <_dtoa_r+0xff8>
10003f34:	d9c00917 	ldw	r7,36(sp)
10003f38:	01c1500e 	bge	zero,r7,1000447c <_dtoa_r+0x1080>
10003f3c:	d8800c17 	ldw	r2,48(sp)
10003f40:	10006b1e 	bne	r2,zero,100040f0 <_dtoa_r+0xcf4>
10003f44:	dc800717 	ldw	r18,28(sp)
10003f48:	dcc00917 	ldw	r19,36(sp)
10003f4c:	902b883a 	mov	r21,r18
10003f50:	00000206 	br	10003f5c <_dtoa_r+0xb60>
10003f54:	00063e00 	call	100063e0 <__multadd>
10003f58:	1039883a 	mov	fp,r2
10003f5c:	e009883a 	mov	r4,fp
10003f60:	a00b883a 	mov	r5,r20
10003f64:	00031d40 	call	100031d4 <quorem>
10003f68:	10800c04 	addi	r2,r2,48
10003f6c:	90800005 	stb	r2,0(r18)
10003f70:	94800044 	addi	r18,r18,1
10003f74:	9547c83a 	sub	r3,r18,r21
10003f78:	8009883a 	mov	r4,r16
10003f7c:	e00b883a 	mov	r5,fp
10003f80:	01800284 	movi	r6,10
10003f84:	000f883a 	mov	r7,zero
10003f88:	1cfff216 	blt	r3,r19,10003f54 <__alt_data_end+0xf8003f54>
10003f8c:	102f883a 	mov	r23,r2
10003f90:	d8800917 	ldw	r2,36(sp)
10003f94:	0082410e 	bge	zero,r2,1000489c <_dtoa_r+0x14a0>
10003f98:	d9000717 	ldw	r4,28(sp)
10003f9c:	002b883a 	mov	r21,zero
10003fa0:	20ad883a 	add	r22,r4,r2
10003fa4:	e00b883a 	mov	r5,fp
10003fa8:	8009883a 	mov	r4,r16
10003fac:	01800044 	movi	r6,1
10003fb0:	0006b300 	call	10006b30 <__lshift>
10003fb4:	1009883a 	mov	r4,r2
10003fb8:	a00b883a 	mov	r5,r20
10003fbc:	1039883a 	mov	fp,r2
10003fc0:	0006c800 	call	10006c80 <__mcmp>
10003fc4:	0080d10e 	bge	zero,r2,1000430c <_dtoa_r+0xf10>
10003fc8:	b13fffc3 	ldbu	r4,-1(r22)
10003fcc:	b0ffff84 	addi	r3,r22,-2
10003fd0:	01800e44 	movi	r6,57
10003fd4:	d9c00717 	ldw	r7,28(sp)
10003fd8:	00000406 	br	10003fec <_dtoa_r+0xbf0>
10003fdc:	38813c26 	beq	r7,r2,100044d0 <_dtoa_r+0x10d4>
10003fe0:	19000003 	ldbu	r4,0(r3)
10003fe4:	102d883a 	mov	r22,r2
10003fe8:	18ffffc4 	addi	r3,r3,-1
10003fec:	21403fcc 	andi	r5,r4,255
10003ff0:	2940201c 	xori	r5,r5,128
10003ff4:	297fe004 	addi	r5,r5,-128
10003ff8:	b0bfffc4 	addi	r2,r22,-1
10003ffc:	29bff726 	beq	r5,r6,10003fdc <__alt_data_end+0xf8003fdc>
10004000:	21000044 	addi	r4,r4,1
10004004:	11000005 	stb	r4,0(r2)
10004008:	8009883a 	mov	r4,r16
1000400c:	a00b883a 	mov	r5,r20
10004010:	00063b80 	call	100063b8 <_Bfree>
10004014:	883ea526 	beq	r17,zero,10003aac <__alt_data_end+0xf8003aac>
10004018:	a8000426 	beq	r21,zero,1000402c <_dtoa_r+0xc30>
1000401c:	ac400326 	beq	r21,r17,1000402c <_dtoa_r+0xc30>
10004020:	8009883a 	mov	r4,r16
10004024:	a80b883a 	mov	r5,r21
10004028:	00063b80 	call	100063b8 <_Bfree>
1000402c:	8009883a 	mov	r4,r16
10004030:	880b883a 	mov	r5,r17
10004034:	00063b80 	call	100063b8 <_Bfree>
10004038:	003e9c06 	br	10003aac <__alt_data_end+0xf8003aac>
1000403c:	01c00044 	movi	r7,1
10004040:	d9c00e15 	stw	r7,56(sp)
10004044:	003d9906 	br	100036ac <__alt_data_end+0xf80036ac>
10004048:	d8c00817 	ldw	r3,32(sp)
1000404c:	d9000617 	ldw	r4,24(sp)
10004050:	d8000b15 	stw	zero,44(sp)
10004054:	1907c83a 	sub	r3,r3,r4
10004058:	010dc83a 	sub	r6,zero,r4
1000405c:	d8c00815 	stw	r3,32(sp)
10004060:	d9800a15 	stw	r6,40(sp)
10004064:	003d9a06 	br	100036d0 <__alt_data_end+0xf80036d0>
10004068:	056bc83a 	sub	r21,zero,r21
1000406c:	dd400815 	stw	r21,32(sp)
10004070:	002b883a 	mov	r21,zero
10004074:	003d9106 	br	100036bc <__alt_data_end+0xf80036bc>
10004078:	d9000617 	ldw	r4,24(sp)
1000407c:	000d4880 	call	1000d488 <__floatsidf>
10004080:	1009883a 	mov	r4,r2
10004084:	180b883a 	mov	r5,r3
10004088:	980d883a 	mov	r6,r19
1000408c:	880f883a 	mov	r7,r17
10004090:	000c1380 	call	1000c138 <__eqdf2>
10004094:	103d7426 	beq	r2,zero,10003668 <__alt_data_end+0xf8003668>
10004098:	d8c00617 	ldw	r3,24(sp)
1000409c:	18ffffc4 	addi	r3,r3,-1
100040a0:	d8c00615 	stw	r3,24(sp)
100040a4:	003d7006 	br	10003668 <__alt_data_end+0xf8003668>
100040a8:	dd000a17 	ldw	r20,40(sp)
100040ac:	dcc00817 	ldw	r19,32(sp)
100040b0:	0023883a 	mov	r17,zero
100040b4:	003f5206 	br	10003e00 <__alt_data_end+0xf8003e00>
100040b8:	00800704 	movi	r2,28
100040bc:	d9000817 	ldw	r4,32(sp)
100040c0:	98a7883a 	add	r19,r19,r2
100040c4:	a8ab883a 	add	r21,r21,r2
100040c8:	2089883a 	add	r4,r4,r2
100040cc:	d9000815 	stw	r4,32(sp)
100040d0:	003f8a06 	br	10003efc <__alt_data_end+0xf8003efc>
100040d4:	d9c00317 	ldw	r7,12(sp)
100040d8:	013efb84 	movi	r4,-1042
100040dc:	2509c83a 	sub	r4,r4,r20
100040e0:	3908983a 	sll	r4,r7,r4
100040e4:	003d2c06 	br	10003598 <__alt_data_end+0xf8003598>
100040e8:	d8000e15 	stw	zero,56(sp)
100040ec:	003d6f06 	br	100036ac <__alt_data_end+0xf80036ac>
100040f0:	04c0050e 	bge	zero,r19,10004108 <_dtoa_r+0xd0c>
100040f4:	880b883a 	mov	r5,r17
100040f8:	8009883a 	mov	r4,r16
100040fc:	980d883a 	mov	r6,r19
10004100:	0006b300 	call	10006b30 <__lshift>
10004104:	1023883a 	mov	r17,r2
10004108:	9001681e 	bne	r18,zero,100046ac <_dtoa_r+0x12b0>
1000410c:	8827883a 	mov	r19,r17
10004110:	d8c00717 	ldw	r3,28(sp)
10004114:	d9000917 	ldw	r4,36(sp)
10004118:	1dffffc4 	addi	r23,r3,-1
1000411c:	1825883a 	mov	r18,r3
10004120:	d8c00317 	ldw	r3,12(sp)
10004124:	b92f883a 	add	r23,r23,r4
10004128:	ddc00515 	stw	r23,20(sp)
1000412c:	18c0004c 	andi	r3,r3,1
10004130:	d8c00315 	stw	r3,12(sp)
10004134:	e009883a 	mov	r4,fp
10004138:	a00b883a 	mov	r5,r20
1000413c:	00031d40 	call	100031d4 <quorem>
10004140:	e009883a 	mov	r4,fp
10004144:	880b883a 	mov	r5,r17
10004148:	102d883a 	mov	r22,r2
1000414c:	0006c800 	call	10006c80 <__mcmp>
10004150:	8009883a 	mov	r4,r16
10004154:	a00b883a 	mov	r5,r20
10004158:	980d883a 	mov	r6,r19
1000415c:	102b883a 	mov	r21,r2
10004160:	0006ce00 	call	10006ce0 <__mdiff>
10004164:	1007883a 	mov	r3,r2
10004168:	10800317 	ldw	r2,12(r2)
1000416c:	b5c00c04 	addi	r23,r22,48
10004170:	10009b1e 	bne	r2,zero,100043e0 <_dtoa_r+0xfe4>
10004174:	180b883a 	mov	r5,r3
10004178:	e009883a 	mov	r4,fp
1000417c:	d8c01515 	stw	r3,84(sp)
10004180:	0006c800 	call	10006c80 <__mcmp>
10004184:	d8c01517 	ldw	r3,84(sp)
10004188:	8009883a 	mov	r4,r16
1000418c:	d8801515 	stw	r2,84(sp)
10004190:	180b883a 	mov	r5,r3
10004194:	00063b80 	call	100063b8 <_Bfree>
10004198:	d8801517 	ldw	r2,84(sp)
1000419c:	1000041e 	bne	r2,zero,100041b0 <_dtoa_r+0xdb4>
100041a0:	d9000417 	ldw	r4,16(sp)
100041a4:	2000021e 	bne	r4,zero,100041b0 <_dtoa_r+0xdb4>
100041a8:	d8c00317 	ldw	r3,12(sp)
100041ac:	18007926 	beq	r3,zero,10004394 <_dtoa_r+0xf98>
100041b0:	a8006616 	blt	r21,zero,1000434c <_dtoa_r+0xf50>
100041b4:	a800041e 	bne	r21,zero,100041c8 <_dtoa_r+0xdcc>
100041b8:	d9000417 	ldw	r4,16(sp)
100041bc:	2000021e 	bne	r4,zero,100041c8 <_dtoa_r+0xdcc>
100041c0:	d8c00317 	ldw	r3,12(sp)
100041c4:	18006126 	beq	r3,zero,1000434c <_dtoa_r+0xf50>
100041c8:	00814916 	blt	zero,r2,100046f0 <_dtoa_r+0x12f4>
100041cc:	d8c00517 	ldw	r3,20(sp)
100041d0:	95400044 	addi	r21,r18,1
100041d4:	95c00005 	stb	r23,0(r18)
100041d8:	a82d883a 	mov	r22,r21
100041dc:	90c14c26 	beq	r18,r3,10004710 <_dtoa_r+0x1314>
100041e0:	e00b883a 	mov	r5,fp
100041e4:	8009883a 	mov	r4,r16
100041e8:	01800284 	movi	r6,10
100041ec:	000f883a 	mov	r7,zero
100041f0:	00063e00 	call	100063e0 <__multadd>
100041f4:	1039883a 	mov	fp,r2
100041f8:	8cc07026 	beq	r17,r19,100043bc <_dtoa_r+0xfc0>
100041fc:	880b883a 	mov	r5,r17
10004200:	01800284 	movi	r6,10
10004204:	000f883a 	mov	r7,zero
10004208:	8009883a 	mov	r4,r16
1000420c:	00063e00 	call	100063e0 <__multadd>
10004210:	980b883a 	mov	r5,r19
10004214:	8009883a 	mov	r4,r16
10004218:	01800284 	movi	r6,10
1000421c:	000f883a 	mov	r7,zero
10004220:	1023883a 	mov	r17,r2
10004224:	00063e00 	call	100063e0 <__multadd>
10004228:	1027883a 	mov	r19,r2
1000422c:	a825883a 	mov	r18,r21
10004230:	003fc006 	br	10004134 <__alt_data_end+0xf8004134>
10004234:	d9800317 	ldw	r6,12(sp)
10004238:	303f1e1e 	bne	r6,zero,10003eb4 <__alt_data_end+0xf8003eb4>
1000423c:	00c00434 	movhi	r3,16
10004240:	18ffffc4 	addi	r3,r3,-1
10004244:	90c6703a 	and	r3,r18,r3
10004248:	183f1a1e 	bne	r3,zero,10003eb4 <__alt_data_end+0xf8003eb4>
1000424c:	949ffc2c 	andhi	r18,r18,32752
10004250:	903f1826 	beq	r18,zero,10003eb4 <__alt_data_end+0xf8003eb4>
10004254:	d9c00817 	ldw	r7,32(sp)
10004258:	a8ab883a 	add	r21,r21,r2
1000425c:	1025883a 	mov	r18,r2
10004260:	388f883a 	add	r7,r7,r2
10004264:	d9c00815 	stw	r7,32(sp)
10004268:	003f1306 	br	10003eb8 <__alt_data_end+0xf8003eb8>
1000426c:	9805883a 	mov	r2,r19
10004270:	003ee706 	br	10003e10 <__alt_data_end+0xf8003e10>
10004274:	01800044 	movi	r6,1
10004278:	d9800c15 	stw	r6,48(sp)
1000427c:	d8802117 	ldw	r2,132(sp)
10004280:	0080da0e 	bge	zero,r2,100045ec <_dtoa_r+0x11f0>
10004284:	100d883a 	mov	r6,r2
10004288:	d8800d15 	stw	r2,52(sp)
1000428c:	d8800915 	stw	r2,36(sp)
10004290:	003d2a06 	br	1000373c <__alt_data_end+0xf800373c>
10004294:	d8800917 	ldw	r2,36(sp)
10004298:	00be4016 	blt	zero,r2,10003b9c <__alt_data_end+0xf8003b9c>
1000429c:	1000b81e 	bne	r2,zero,10004580 <_dtoa_r+0x1184>
100042a0:	8809883a 	mov	r4,r17
100042a4:	980b883a 	mov	r5,r19
100042a8:	000d883a 	mov	r6,zero
100042ac:	01d00534 	movhi	r7,16404
100042b0:	000c3800 	call	1000c380 <__muldf3>
100042b4:	d9800317 	ldw	r6,12(sp)
100042b8:	1009883a 	mov	r4,r2
100042bc:	180b883a 	mov	r5,r3
100042c0:	900f883a 	mov	r7,r18
100042c4:	000c1bc0 	call	1000c1bc <__gedf2>
100042c8:	0029883a 	mov	r20,zero
100042cc:	0023883a 	mov	r17,zero
100042d0:	10007716 	blt	r2,zero,100044b0 <_dtoa_r+0x10b4>
100042d4:	d9002117 	ldw	r4,132(sp)
100042d8:	dd800717 	ldw	r22,28(sp)
100042dc:	0108303a 	nor	r4,zero,r4
100042e0:	d9000615 	stw	r4,24(sp)
100042e4:	8009883a 	mov	r4,r16
100042e8:	a00b883a 	mov	r5,r20
100042ec:	00063b80 	call	100063b8 <_Bfree>
100042f0:	883f4e1e 	bne	r17,zero,1000402c <__alt_data_end+0xf800402c>
100042f4:	003ded06 	br	10003aac <__alt_data_end+0xf8003aac>
100042f8:	e00b883a 	mov	r5,fp
100042fc:	8009883a 	mov	r4,r16
10004300:	00069e80 	call	100069e8 <__pow5mult>
10004304:	1039883a 	mov	fp,r2
10004308:	003edc06 	br	10003e7c <__alt_data_end+0xf8003e7c>
1000430c:	1000021e 	bne	r2,zero,10004318 <_dtoa_r+0xf1c>
10004310:	ba40004c 	andi	r9,r23,1
10004314:	483f2c1e 	bne	r9,zero,10003fc8 <__alt_data_end+0xf8003fc8>
10004318:	01000c04 	movi	r4,48
1000431c:	00000106 	br	10004324 <_dtoa_r+0xf28>
10004320:	102d883a 	mov	r22,r2
10004324:	b0bfffc4 	addi	r2,r22,-1
10004328:	10c00007 	ldb	r3,0(r2)
1000432c:	193ffc26 	beq	r3,r4,10004320 <__alt_data_end+0xf8004320>
10004330:	003f3506 	br	10004008 <__alt_data_end+0xf8004008>
10004334:	d9c00f17 	ldw	r7,60(sp)
10004338:	38015a26 	beq	r7,zero,100048a4 <_dtoa_r+0x14a8>
1000433c:	10810cc4 	addi	r2,r2,1075
10004340:	dd000a17 	ldw	r20,40(sp)
10004344:	dcc00817 	ldw	r19,32(sp)
10004348:	003ea506 	br	10003de0 <__alt_data_end+0xf8003de0>
1000434c:	00800c0e 	bge	zero,r2,10004380 <_dtoa_r+0xf84>
10004350:	e00b883a 	mov	r5,fp
10004354:	8009883a 	mov	r4,r16
10004358:	01800044 	movi	r6,1
1000435c:	0006b300 	call	10006b30 <__lshift>
10004360:	1009883a 	mov	r4,r2
10004364:	a00b883a 	mov	r5,r20
10004368:	1039883a 	mov	fp,r2
1000436c:	0006c800 	call	10006c80 <__mcmp>
10004370:	0081930e 	bge	zero,r2,100049c0 <_dtoa_r+0x15c4>
10004374:	00800e44 	movi	r2,57
10004378:	b8800a26 	beq	r23,r2,100043a4 <_dtoa_r+0xfa8>
1000437c:	b5c00c44 	addi	r23,r22,49
10004380:	882b883a 	mov	r21,r17
10004384:	95800044 	addi	r22,r18,1
10004388:	95c00005 	stb	r23,0(r18)
1000438c:	9823883a 	mov	r17,r19
10004390:	003f1d06 	br	10004008 <__alt_data_end+0xf8004008>
10004394:	00800e44 	movi	r2,57
10004398:	b8800226 	beq	r23,r2,100043a4 <_dtoa_r+0xfa8>
1000439c:	057ff716 	blt	zero,r21,1000437c <__alt_data_end+0xf800437c>
100043a0:	003ff706 	br	10004380 <__alt_data_end+0xf8004380>
100043a4:	01000e44 	movi	r4,57
100043a8:	882b883a 	mov	r21,r17
100043ac:	95800044 	addi	r22,r18,1
100043b0:	91000005 	stb	r4,0(r18)
100043b4:	9823883a 	mov	r17,r19
100043b8:	003f0406 	br	10003fcc <__alt_data_end+0xf8003fcc>
100043bc:	880b883a 	mov	r5,r17
100043c0:	8009883a 	mov	r4,r16
100043c4:	01800284 	movi	r6,10
100043c8:	000f883a 	mov	r7,zero
100043cc:	00063e00 	call	100063e0 <__multadd>
100043d0:	1023883a 	mov	r17,r2
100043d4:	1027883a 	mov	r19,r2
100043d8:	a825883a 	mov	r18,r21
100043dc:	003f5506 	br	10004134 <__alt_data_end+0xf8004134>
100043e0:	8009883a 	mov	r4,r16
100043e4:	180b883a 	mov	r5,r3
100043e8:	00063b80 	call	100063b8 <_Bfree>
100043ec:	00800044 	movi	r2,1
100043f0:	003f6f06 	br	100041b0 <__alt_data_end+0xf80041b0>
100043f4:	e009883a 	mov	r4,fp
100043f8:	a00b883a 	mov	r5,r20
100043fc:	0006c800 	call	10006c80 <__mcmp>
10004400:	103ecc0e 	bge	r2,zero,10003f34 <__alt_data_end+0xf8003f34>
10004404:	e00b883a 	mov	r5,fp
10004408:	8009883a 	mov	r4,r16
1000440c:	01800284 	movi	r6,10
10004410:	000f883a 	mov	r7,zero
10004414:	00063e00 	call	100063e0 <__multadd>
10004418:	1039883a 	mov	fp,r2
1000441c:	d8800617 	ldw	r2,24(sp)
10004420:	d8c00c17 	ldw	r3,48(sp)
10004424:	10bfffc4 	addi	r2,r2,-1
10004428:	d8800615 	stw	r2,24(sp)
1000442c:	1801681e 	bne	r3,zero,100049d0 <_dtoa_r+0x15d4>
10004430:	d9800d17 	ldw	r6,52(sp)
10004434:	d9800915 	stw	r6,36(sp)
10004438:	003ebe06 	br	10003f34 <__alt_data_end+0xf8003f34>
1000443c:	a0800417 	ldw	r2,16(r20)
10004440:	10800104 	addi	r2,r2,4
10004444:	1085883a 	add	r2,r2,r2
10004448:	1085883a 	add	r2,r2,r2
1000444c:	a085883a 	add	r2,r20,r2
10004450:	11000017 	ldw	r4,0(r2)
10004454:	00066280 	call	10006628 <__hi0bits>
10004458:	00c00804 	movi	r3,32
1000445c:	1885c83a 	sub	r2,r3,r2
10004460:	003e9806 	br	10003ec4 <__alt_data_end+0xf8003ec4>
10004464:	d8800717 	ldw	r2,28(sp)
10004468:	003c1306 	br	100034b8 <__alt_data_end+0xf80034b8>
1000446c:	00800084 	movi	r2,2
10004470:	18bdb11e 	bne	r3,r2,10003b38 <__alt_data_end+0xf8003b38>
10004474:	d8000c15 	stw	zero,48(sp)
10004478:	003f8006 	br	1000427c <__alt_data_end+0xf800427c>
1000447c:	d8c00417 	ldw	r3,16(sp)
10004480:	00800084 	movi	r2,2
10004484:	10fead0e 	bge	r2,r3,10003f3c <__alt_data_end+0xf8003f3c>
10004488:	383f921e 	bne	r7,zero,100042d4 <__alt_data_end+0xf80042d4>
1000448c:	a00b883a 	mov	r5,r20
10004490:	8009883a 	mov	r4,r16
10004494:	01800144 	movi	r6,5
10004498:	00063e00 	call	100063e0 <__multadd>
1000449c:	e009883a 	mov	r4,fp
100044a0:	100b883a 	mov	r5,r2
100044a4:	1029883a 	mov	r20,r2
100044a8:	0006c800 	call	10006c80 <__mcmp>
100044ac:	00bf890e 	bge	zero,r2,100042d4 <__alt_data_end+0xf80042d4>
100044b0:	d9c00617 	ldw	r7,24(sp)
100044b4:	d9800717 	ldw	r6,28(sp)
100044b8:	00800c44 	movi	r2,49
100044bc:	39c00044 	addi	r7,r7,1
100044c0:	35800044 	addi	r22,r6,1
100044c4:	30800005 	stb	r2,0(r6)
100044c8:	d9c00615 	stw	r7,24(sp)
100044cc:	003f8506 	br	100042e4 <__alt_data_end+0xf80042e4>
100044d0:	d9800617 	ldw	r6,24(sp)
100044d4:	d9c00717 	ldw	r7,28(sp)
100044d8:	00800c44 	movi	r2,49
100044dc:	31800044 	addi	r6,r6,1
100044e0:	d9800615 	stw	r6,24(sp)
100044e4:	38800005 	stb	r2,0(r7)
100044e8:	003ec706 	br	10004008 <__alt_data_end+0xf8004008>
100044ec:	df000417 	ldw	fp,16(sp)
100044f0:	dc000317 	ldw	r16,12(sp)
100044f4:	003d6d06 	br	10003aac <__alt_data_end+0xf8003aac>
100044f8:	8809883a 	mov	r4,r17
100044fc:	000d4880 	call	1000d488 <__floatsidf>
10004500:	9809883a 	mov	r4,r19
10004504:	a00b883a 	mov	r5,r20
10004508:	100d883a 	mov	r6,r2
1000450c:	180f883a 	mov	r7,r3
10004510:	000c3800 	call	1000c380 <__muldf3>
10004514:	1009883a 	mov	r4,r2
10004518:	180b883a 	mov	r5,r3
1000451c:	000d883a 	mov	r6,zero
10004520:	01d00734 	movhi	r7,16412
10004524:	000af200 	call	1000af20 <__adddf3>
10004528:	05bf3034 	movhi	r22,64704
1000452c:	1023883a 	mov	r17,r2
10004530:	1daf883a 	add	r23,r3,r22
10004534:	9809883a 	mov	r4,r19
10004538:	a00b883a 	mov	r5,r20
1000453c:	000d883a 	mov	r6,zero
10004540:	01d00534 	movhi	r7,16404
10004544:	000cb800 	call	1000cb80 <__subdf3>
10004548:	1009883a 	mov	r4,r2
1000454c:	180b883a 	mov	r5,r3
10004550:	880d883a 	mov	r6,r17
10004554:	b80f883a 	mov	r7,r23
10004558:	1027883a 	mov	r19,r2
1000455c:	1829883a 	mov	r20,r3
10004560:	000c1bc0 	call	1000c1bc <__gedf2>
10004564:	00806d16 	blt	zero,r2,1000471c <_dtoa_r+0x1320>
10004568:	b9e0003c 	xorhi	r7,r23,32768
1000456c:	9809883a 	mov	r4,r19
10004570:	a00b883a 	mov	r5,r20
10004574:	880d883a 	mov	r6,r17
10004578:	000c2940 	call	1000c294 <__ledf2>
1000457c:	103d7a0e 	bge	r2,zero,10003b68 <__alt_data_end+0xf8003b68>
10004580:	0029883a 	mov	r20,zero
10004584:	0023883a 	mov	r17,zero
10004588:	003f5206 	br	100042d4 <__alt_data_end+0xf80042d4>
1000458c:	d9800a17 	ldw	r6,40(sp)
10004590:	e00b883a 	mov	r5,fp
10004594:	8009883a 	mov	r4,r16
10004598:	00069e80 	call	100069e8 <__pow5mult>
1000459c:	1039883a 	mov	fp,r2
100045a0:	003e3606 	br	10003e7c <__alt_data_end+0xf8003e7c>
100045a4:	d8000c15 	stw	zero,48(sp)
100045a8:	003c5c06 	br	1000371c <__alt_data_end+0xf800371c>
100045ac:	d9000a17 	ldw	r4,40(sp)
100045b0:	d9800b17 	ldw	r6,44(sp)
100045b4:	dd000a15 	stw	r20,40(sp)
100045b8:	a105c83a 	sub	r2,r20,r4
100045bc:	308d883a 	add	r6,r6,r2
100045c0:	d9800b15 	stw	r6,44(sp)
100045c4:	0029883a 	mov	r20,zero
100045c8:	003e0106 	br	10003dd0 <__alt_data_end+0xf8003dd0>
100045cc:	dcc00317 	ldw	r19,12(sp)
100045d0:	9029883a 	mov	r20,r18
100045d4:	04400084 	movi	r17,2
100045d8:	003c8606 	br	100037f4 <__alt_data_end+0xf80037f4>
100045dc:	3023883a 	mov	r17,r6
100045e0:	80001115 	stw	zero,68(r16)
100045e4:	000b883a 	mov	r5,zero
100045e8:	003c6006 	br	1000376c <__alt_data_end+0xf800376c>
100045ec:	04400044 	movi	r17,1
100045f0:	dc400d15 	stw	r17,52(sp)
100045f4:	dc400915 	stw	r17,36(sp)
100045f8:	dc402115 	stw	r17,132(sp)
100045fc:	003ff806 	br	100045e0 <__alt_data_end+0xf80045e0>
10004600:	d8800617 	ldw	r2,24(sp)
10004604:	00adc83a 	sub	r22,zero,r2
10004608:	b000ac26 	beq	r22,zero,100048bc <_dtoa_r+0x14c0>
1000460c:	b08003cc 	andi	r2,r22,15
10004610:	100490fa 	slli	r2,r2,3
10004614:	00c40074 	movhi	r3,4097
10004618:	18ff8d04 	addi	r3,r3,-460
1000461c:	d9000317 	ldw	r4,12(sp)
10004620:	1885883a 	add	r2,r3,r2
10004624:	11800017 	ldw	r6,0(r2)
10004628:	11c00117 	ldw	r7,4(r2)
1000462c:	b02dd13a 	srai	r22,r22,4
10004630:	900b883a 	mov	r5,r18
10004634:	000c3800 	call	1000c380 <__muldf3>
10004638:	1027883a 	mov	r19,r2
1000463c:	1829883a 	mov	r20,r3
10004640:	b000ec26 	beq	r22,zero,100049f4 <_dtoa_r+0x15f8>
10004644:	05c40074 	movhi	r23,4097
10004648:	bdff8304 	addi	r23,r23,-500
1000464c:	04400084 	movi	r17,2
10004650:	b180004c 	andi	r6,r22,1
10004654:	1009883a 	mov	r4,r2
10004658:	b02dd07a 	srai	r22,r22,1
1000465c:	180b883a 	mov	r5,r3
10004660:	30000426 	beq	r6,zero,10004674 <_dtoa_r+0x1278>
10004664:	b9800017 	ldw	r6,0(r23)
10004668:	b9c00117 	ldw	r7,4(r23)
1000466c:	8c400044 	addi	r17,r17,1
10004670:	000c3800 	call	1000c380 <__muldf3>
10004674:	bdc00204 	addi	r23,r23,8
10004678:	b03ff51e 	bne	r22,zero,10004650 <__alt_data_end+0xf8004650>
1000467c:	1027883a 	mov	r19,r2
10004680:	1829883a 	mov	r20,r3
10004684:	003c7406 	br	10003858 <__alt_data_end+0xf8003858>
10004688:	d9800617 	ldw	r6,24(sp)
1000468c:	d9c00717 	ldw	r7,28(sp)
10004690:	00c00c04 	movi	r3,48
10004694:	31800044 	addi	r6,r6,1
10004698:	38c00005 	stb	r3,0(r7)
1000469c:	02400c44 	movi	r9,49
100046a0:	d9800615 	stw	r6,24(sp)
100046a4:	12400005 	stb	r9,0(r2)
100046a8:	003d0006 	br	10003aac <__alt_data_end+0xf8003aac>
100046ac:	89400117 	ldw	r5,4(r17)
100046b0:	8009883a 	mov	r4,r16
100046b4:	00063100 	call	10006310 <_Balloc>
100046b8:	89800417 	ldw	r6,16(r17)
100046bc:	11000304 	addi	r4,r2,12
100046c0:	89400304 	addi	r5,r17,12
100046c4:	31800084 	addi	r6,r6,2
100046c8:	318d883a 	add	r6,r6,r6
100046cc:	318d883a 	add	r6,r6,r6
100046d0:	1025883a 	mov	r18,r2
100046d4:	00060f00 	call	100060f0 <memcpy>
100046d8:	8009883a 	mov	r4,r16
100046dc:	900b883a 	mov	r5,r18
100046e0:	01800044 	movi	r6,1
100046e4:	0006b300 	call	10006b30 <__lshift>
100046e8:	1027883a 	mov	r19,r2
100046ec:	003e8806 	br	10004110 <__alt_data_end+0xf8004110>
100046f0:	00800e44 	movi	r2,57
100046f4:	b8bf2b26 	beq	r23,r2,100043a4 <__alt_data_end+0xf80043a4>
100046f8:	ba400044 	addi	r9,r23,1
100046fc:	882b883a 	mov	r21,r17
10004700:	95800044 	addi	r22,r18,1
10004704:	92400005 	stb	r9,0(r18)
10004708:	9823883a 	mov	r17,r19
1000470c:	003e3e06 	br	10004008 <__alt_data_end+0xf8004008>
10004710:	882b883a 	mov	r21,r17
10004714:	9823883a 	mov	r17,r19
10004718:	003e2206 	br	10003fa4 <__alt_data_end+0xf8003fa4>
1000471c:	0029883a 	mov	r20,zero
10004720:	0023883a 	mov	r17,zero
10004724:	003f6206 	br	100044b0 <__alt_data_end+0xf80044b0>
10004728:	59bfffc4 	addi	r6,r11,-1
1000472c:	300490fa 	slli	r2,r6,3
10004730:	00c40074 	movhi	r3,4097
10004734:	18ff8d04 	addi	r3,r3,-460
10004738:	b80f883a 	mov	r7,r23
1000473c:	1885883a 	add	r2,r3,r2
10004740:	11000017 	ldw	r4,0(r2)
10004744:	11400117 	ldw	r5,4(r2)
10004748:	d8800717 	ldw	r2,28(sp)
1000474c:	d9801015 	stw	r6,64(sp)
10004750:	880d883a 	mov	r6,r17
10004754:	dac01615 	stw	r11,88(sp)
10004758:	15800044 	addi	r22,r2,1
1000475c:	000c3800 	call	1000c380 <__muldf3>
10004760:	a00b883a 	mov	r5,r20
10004764:	9809883a 	mov	r4,r19
10004768:	d8c01215 	stw	r3,72(sp)
1000476c:	d8801115 	stw	r2,68(sp)
10004770:	000d4080 	call	1000d408 <__fixdfsi>
10004774:	1009883a 	mov	r4,r2
10004778:	1023883a 	mov	r17,r2
1000477c:	000d4880 	call	1000d488 <__floatsidf>
10004780:	9809883a 	mov	r4,r19
10004784:	a00b883a 	mov	r5,r20
10004788:	100d883a 	mov	r6,r2
1000478c:	180f883a 	mov	r7,r3
10004790:	000cb800 	call	1000cb80 <__subdf3>
10004794:	1815883a 	mov	r10,r3
10004798:	d8c00717 	ldw	r3,28(sp)
1000479c:	8c400c04 	addi	r17,r17,48
100047a0:	102f883a 	mov	r23,r2
100047a4:	1c400005 	stb	r17,0(r3)
100047a8:	dac01617 	ldw	r11,88(sp)
100047ac:	00800044 	movi	r2,1
100047b0:	58802426 	beq	r11,r2,10004844 <_dtoa_r+0x1448>
100047b4:	d9800717 	ldw	r6,28(sp)
100047b8:	dc001415 	stw	r16,80(sp)
100047bc:	b805883a 	mov	r2,r23
100047c0:	32d7883a 	add	r11,r6,r11
100047c4:	b027883a 	mov	r19,r22
100047c8:	5821883a 	mov	r16,r11
100047cc:	5007883a 	mov	r3,r10
100047d0:	902f883a 	mov	r23,r18
100047d4:	000d883a 	mov	r6,zero
100047d8:	01d00934 	movhi	r7,16420
100047dc:	1009883a 	mov	r4,r2
100047e0:	180b883a 	mov	r5,r3
100047e4:	000c3800 	call	1000c380 <__muldf3>
100047e8:	180b883a 	mov	r5,r3
100047ec:	1009883a 	mov	r4,r2
100047f0:	1829883a 	mov	r20,r3
100047f4:	1025883a 	mov	r18,r2
100047f8:	000d4080 	call	1000d408 <__fixdfsi>
100047fc:	1009883a 	mov	r4,r2
10004800:	1023883a 	mov	r17,r2
10004804:	000d4880 	call	1000d488 <__floatsidf>
10004808:	9009883a 	mov	r4,r18
1000480c:	a00b883a 	mov	r5,r20
10004810:	100d883a 	mov	r6,r2
10004814:	180f883a 	mov	r7,r3
10004818:	8c400c04 	addi	r17,r17,48
1000481c:	000cb800 	call	1000cb80 <__subdf3>
10004820:	9cc00044 	addi	r19,r19,1
10004824:	9c7fffc5 	stb	r17,-1(r19)
10004828:	9c3fea1e 	bne	r19,r16,100047d4 <__alt_data_end+0xf80047d4>
1000482c:	d9c01017 	ldw	r7,64(sp)
10004830:	dc001417 	ldw	r16,80(sp)
10004834:	b825883a 	mov	r18,r23
10004838:	1815883a 	mov	r10,r3
1000483c:	102f883a 	mov	r23,r2
10004840:	b1ed883a 	add	r22,r22,r7
10004844:	d9001117 	ldw	r4,68(sp)
10004848:	d9401217 	ldw	r5,72(sp)
1000484c:	000d883a 	mov	r6,zero
10004850:	01cff834 	movhi	r7,16352
10004854:	da801615 	stw	r10,88(sp)
10004858:	000af200 	call	1000af20 <__adddf3>
1000485c:	da801617 	ldw	r10,88(sp)
10004860:	1009883a 	mov	r4,r2
10004864:	180b883a 	mov	r5,r3
10004868:	500f883a 	mov	r7,r10
1000486c:	b80d883a 	mov	r6,r23
10004870:	000c2940 	call	1000c294 <__ledf2>
10004874:	da801617 	ldw	r10,88(sp)
10004878:	1000330e 	bge	r2,zero,10004948 <_dtoa_r+0x154c>
1000487c:	d9001317 	ldw	r4,76(sp)
10004880:	b53fffc3 	ldbu	r20,-1(r22)
10004884:	d9000615 	stw	r4,24(sp)
10004888:	003d3706 	br	10003d68 <__alt_data_end+0xf8003d68>
1000488c:	d8800817 	ldw	r2,32(sp)
10004890:	11e7c83a 	sub	r19,r2,r7
10004894:	0005883a 	mov	r2,zero
10004898:	003d5106 	br	10003de0 <__alt_data_end+0xf8003de0>
1000489c:	00800044 	movi	r2,1
100048a0:	003dbd06 	br	10003f98 <__alt_data_end+0xf8003f98>
100048a4:	d8800217 	ldw	r2,8(sp)
100048a8:	00c00d84 	movi	r3,54
100048ac:	dd000a17 	ldw	r20,40(sp)
100048b0:	1885c83a 	sub	r2,r3,r2
100048b4:	dcc00817 	ldw	r19,32(sp)
100048b8:	003d4906 	br	10003de0 <__alt_data_end+0xf8003de0>
100048bc:	dcc00317 	ldw	r19,12(sp)
100048c0:	9029883a 	mov	r20,r18
100048c4:	04400084 	movi	r17,2
100048c8:	003be306 	br	10003858 <__alt_data_end+0xf8003858>
100048cc:	d9000917 	ldw	r4,36(sp)
100048d0:	203f0926 	beq	r4,zero,100044f8 <__alt_data_end+0xf80044f8>
100048d4:	d9800d17 	ldw	r6,52(sp)
100048d8:	01bca30e 	bge	zero,r6,10003b68 <__alt_data_end+0xf8003b68>
100048dc:	a00b883a 	mov	r5,r20
100048e0:	9809883a 	mov	r4,r19
100048e4:	000d883a 	mov	r6,zero
100048e8:	01d00934 	movhi	r7,16420
100048ec:	000c3800 	call	1000c380 <__muldf3>
100048f0:	89000044 	addi	r4,r17,1
100048f4:	1027883a 	mov	r19,r2
100048f8:	1829883a 	mov	r20,r3
100048fc:	000d4880 	call	1000d488 <__floatsidf>
10004900:	9809883a 	mov	r4,r19
10004904:	a00b883a 	mov	r5,r20
10004908:	100d883a 	mov	r6,r2
1000490c:	180f883a 	mov	r7,r3
10004910:	000c3800 	call	1000c380 <__muldf3>
10004914:	01d00734 	movhi	r7,16412
10004918:	1009883a 	mov	r4,r2
1000491c:	180b883a 	mov	r5,r3
10004920:	000d883a 	mov	r6,zero
10004924:	000af200 	call	1000af20 <__adddf3>
10004928:	d9c00617 	ldw	r7,24(sp)
1000492c:	05bf3034 	movhi	r22,64704
10004930:	1023883a 	mov	r17,r2
10004934:	39ffffc4 	addi	r7,r7,-1
10004938:	d9c01315 	stw	r7,76(sp)
1000493c:	1daf883a 	add	r23,r3,r22
10004940:	dac00d17 	ldw	r11,52(sp)
10004944:	003be006 	br	100038c8 <__alt_data_end+0xf80038c8>
10004948:	d9801117 	ldw	r6,68(sp)
1000494c:	d9c01217 	ldw	r7,72(sp)
10004950:	0009883a 	mov	r4,zero
10004954:	014ff834 	movhi	r5,16352
10004958:	da801615 	stw	r10,88(sp)
1000495c:	000cb800 	call	1000cb80 <__subdf3>
10004960:	da801617 	ldw	r10,88(sp)
10004964:	1009883a 	mov	r4,r2
10004968:	180b883a 	mov	r5,r3
1000496c:	b80d883a 	mov	r6,r23
10004970:	500f883a 	mov	r7,r10
10004974:	000c1bc0 	call	1000c1bc <__gedf2>
10004978:	00bc7b0e 	bge	zero,r2,10003b68 <__alt_data_end+0xf8003b68>
1000497c:	01000c04 	movi	r4,48
10004980:	00000106 	br	10004988 <_dtoa_r+0x158c>
10004984:	102d883a 	mov	r22,r2
10004988:	b0bfffc4 	addi	r2,r22,-1
1000498c:	10c00007 	ldb	r3,0(r2)
10004990:	193ffc26 	beq	r3,r4,10004984 <__alt_data_end+0xf8004984>
10004994:	d9001317 	ldw	r4,76(sp)
10004998:	d9000615 	stw	r4,24(sp)
1000499c:	003c4306 	br	10003aac <__alt_data_end+0xf8003aac>
100049a0:	d8c01317 	ldw	r3,76(sp)
100049a4:	dc001117 	ldw	r16,68(sp)
100049a8:	d8c00615 	stw	r3,24(sp)
100049ac:	003cee06 	br	10003d68 <__alt_data_end+0xf8003d68>
100049b0:	dd401217 	ldw	r21,72(sp)
100049b4:	dc001117 	ldw	r16,68(sp)
100049b8:	dc801417 	ldw	r18,80(sp)
100049bc:	003c6a06 	br	10003b68 <__alt_data_end+0xf8003b68>
100049c0:	103e6f1e 	bne	r2,zero,10004380 <__alt_data_end+0xf8004380>
100049c4:	b880004c 	andi	r2,r23,1
100049c8:	103e6d26 	beq	r2,zero,10004380 <__alt_data_end+0xf8004380>
100049cc:	003e6906 	br	10004374 <__alt_data_end+0xf8004374>
100049d0:	8009883a 	mov	r4,r16
100049d4:	880b883a 	mov	r5,r17
100049d8:	01800284 	movi	r6,10
100049dc:	000f883a 	mov	r7,zero
100049e0:	00063e00 	call	100063e0 <__multadd>
100049e4:	d9000d17 	ldw	r4,52(sp)
100049e8:	1023883a 	mov	r17,r2
100049ec:	d9000915 	stw	r4,36(sp)
100049f0:	003d5006 	br	10003f34 <__alt_data_end+0xf8003f34>
100049f4:	04400084 	movi	r17,2
100049f8:	003b9706 	br	10003858 <__alt_data_end+0xf8003858>
100049fc:	d8801317 	ldw	r2,76(sp)
10004a00:	d8800615 	stw	r2,24(sp)
10004a04:	003cd806 	br	10003d68 <__alt_data_end+0xf8003d68>
10004a08:	d8801317 	ldw	r2,76(sp)
10004a0c:	d8800615 	stw	r2,24(sp)
10004a10:	003c2606 	br	10003aac <__alt_data_end+0xf8003aac>
10004a14:	04c00044 	movi	r19,1
10004a18:	003b3506 	br	100036f0 <__alt_data_end+0xf80036f0>
10004a1c:	3023883a 	mov	r17,r6
10004a20:	000b883a 	mov	r5,zero
10004a24:	003b5106 	br	1000376c <__alt_data_end+0xf800376c>
10004a28:	20fd3426 	beq	r4,r3,10003efc <__alt_data_end+0xf8003efc>
10004a2c:	00c00f04 	movi	r3,60
10004a30:	1885c83a 	sub	r2,r3,r2
10004a34:	003da106 	br	100040bc <__alt_data_end+0xf80040bc>

10004a38 <_fflush_r>:
10004a38:	defffb04 	addi	sp,sp,-20
10004a3c:	dcc00315 	stw	r19,12(sp)
10004a40:	dc400115 	stw	r17,4(sp)
10004a44:	dfc00415 	stw	ra,16(sp)
10004a48:	dc800215 	stw	r18,8(sp)
10004a4c:	dc000015 	stw	r16,0(sp)
10004a50:	2027883a 	mov	r19,r4
10004a54:	2823883a 	mov	r17,r5
10004a58:	20000226 	beq	r4,zero,10004a64 <_fflush_r+0x2c>
10004a5c:	20800e17 	ldw	r2,56(r4)
10004a60:	10005826 	beq	r2,zero,10004bc4 <_fflush_r+0x18c>
10004a64:	8880030b 	ldhu	r2,12(r17)
10004a68:	10ffffcc 	andi	r3,r2,65535
10004a6c:	18e0001c 	xori	r3,r3,32768
10004a70:	18e00004 	addi	r3,r3,-32768
10004a74:	18002b26 	beq	r3,zero,10004b24 <_fflush_r+0xec>
10004a78:	10c0020c 	andi	r3,r2,8
10004a7c:	1800311e 	bne	r3,zero,10004b44 <_fflush_r+0x10c>
10004a80:	88c00117 	ldw	r3,4(r17)
10004a84:	10820014 	ori	r2,r2,2048
10004a88:	8880030d 	sth	r2,12(r17)
10004a8c:	00c05c0e 	bge	zero,r3,10004c00 <_fflush_r+0x1c8>
10004a90:	88c00a17 	ldw	r3,40(r17)
10004a94:	18002326 	beq	r3,zero,10004b24 <_fflush_r+0xec>
10004a98:	9c000017 	ldw	r16,0(r19)
10004a9c:	1104000c 	andi	r4,r2,4096
10004aa0:	98000015 	stw	zero,0(r19)
10004aa4:	20004b26 	beq	r4,zero,10004bd4 <_fflush_r+0x19c>
10004aa8:	89801417 	ldw	r6,80(r17)
10004aac:	1080010c 	andi	r2,r2,4
10004ab0:	10000626 	beq	r2,zero,10004acc <_fflush_r+0x94>
10004ab4:	89000117 	ldw	r4,4(r17)
10004ab8:	88800c17 	ldw	r2,48(r17)
10004abc:	310dc83a 	sub	r6,r6,r4
10004ac0:	10000226 	beq	r2,zero,10004acc <_fflush_r+0x94>
10004ac4:	88800f17 	ldw	r2,60(r17)
10004ac8:	308dc83a 	sub	r6,r6,r2
10004acc:	89400717 	ldw	r5,28(r17)
10004ad0:	9809883a 	mov	r4,r19
10004ad4:	000f883a 	mov	r7,zero
10004ad8:	183ee83a 	callr	r3
10004adc:	00ffffc4 	movi	r3,-1
10004ae0:	10c04a26 	beq	r2,r3,10004c0c <_fflush_r+0x1d4>
10004ae4:	88c0030b 	ldhu	r3,12(r17)
10004ae8:	89000417 	ldw	r4,16(r17)
10004aec:	88000115 	stw	zero,4(r17)
10004af0:	197dffcc 	andi	r5,r3,63487
10004af4:	8940030d 	sth	r5,12(r17)
10004af8:	89000015 	stw	r4,0(r17)
10004afc:	18c4000c 	andi	r3,r3,4096
10004b00:	1800581e 	bne	r3,zero,10004c64 <_fflush_r+0x22c>
10004b04:	89400c17 	ldw	r5,48(r17)
10004b08:	9c000015 	stw	r16,0(r19)
10004b0c:	28000526 	beq	r5,zero,10004b24 <_fflush_r+0xec>
10004b10:	88801004 	addi	r2,r17,64
10004b14:	28800226 	beq	r5,r2,10004b20 <_fflush_r+0xe8>
10004b18:	9809883a 	mov	r4,r19
10004b1c:	000518c0 	call	1000518c <_free_r>
10004b20:	88000c15 	stw	zero,48(r17)
10004b24:	0005883a 	mov	r2,zero
10004b28:	dfc00417 	ldw	ra,16(sp)
10004b2c:	dcc00317 	ldw	r19,12(sp)
10004b30:	dc800217 	ldw	r18,8(sp)
10004b34:	dc400117 	ldw	r17,4(sp)
10004b38:	dc000017 	ldw	r16,0(sp)
10004b3c:	dec00504 	addi	sp,sp,20
10004b40:	f800283a 	ret
10004b44:	8c800417 	ldw	r18,16(r17)
10004b48:	903ff626 	beq	r18,zero,10004b24 <__alt_data_end+0xf8004b24>
10004b4c:	8c000017 	ldw	r16,0(r17)
10004b50:	108000cc 	andi	r2,r2,3
10004b54:	8c800015 	stw	r18,0(r17)
10004b58:	84a1c83a 	sub	r16,r16,r18
10004b5c:	10001b26 	beq	r2,zero,10004bcc <_fflush_r+0x194>
10004b60:	0005883a 	mov	r2,zero
10004b64:	88800215 	stw	r2,8(r17)
10004b68:	04000316 	blt	zero,r16,10004b78 <_fflush_r+0x140>
10004b6c:	003fed06 	br	10004b24 <__alt_data_end+0xf8004b24>
10004b70:	90a5883a 	add	r18,r18,r2
10004b74:	043feb0e 	bge	zero,r16,10004b24 <__alt_data_end+0xf8004b24>
10004b78:	88800917 	ldw	r2,36(r17)
10004b7c:	89400717 	ldw	r5,28(r17)
10004b80:	800f883a 	mov	r7,r16
10004b84:	900d883a 	mov	r6,r18
10004b88:	9809883a 	mov	r4,r19
10004b8c:	103ee83a 	callr	r2
10004b90:	80a1c83a 	sub	r16,r16,r2
10004b94:	00bff616 	blt	zero,r2,10004b70 <__alt_data_end+0xf8004b70>
10004b98:	88c0030b 	ldhu	r3,12(r17)
10004b9c:	00bfffc4 	movi	r2,-1
10004ba0:	18c01014 	ori	r3,r3,64
10004ba4:	88c0030d 	sth	r3,12(r17)
10004ba8:	dfc00417 	ldw	ra,16(sp)
10004bac:	dcc00317 	ldw	r19,12(sp)
10004bb0:	dc800217 	ldw	r18,8(sp)
10004bb4:	dc400117 	ldw	r17,4(sp)
10004bb8:	dc000017 	ldw	r16,0(sp)
10004bbc:	dec00504 	addi	sp,sp,20
10004bc0:	f800283a 	ret
10004bc4:	0004d580 	call	10004d58 <__sinit>
10004bc8:	003fa606 	br	10004a64 <__alt_data_end+0xf8004a64>
10004bcc:	88800517 	ldw	r2,20(r17)
10004bd0:	003fe406 	br	10004b64 <__alt_data_end+0xf8004b64>
10004bd4:	89400717 	ldw	r5,28(r17)
10004bd8:	000d883a 	mov	r6,zero
10004bdc:	9809883a 	mov	r4,r19
10004be0:	01c00044 	movi	r7,1
10004be4:	183ee83a 	callr	r3
10004be8:	100d883a 	mov	r6,r2
10004bec:	00bfffc4 	movi	r2,-1
10004bf0:	30801326 	beq	r6,r2,10004c40 <_fflush_r+0x208>
10004bf4:	8880030b 	ldhu	r2,12(r17)
10004bf8:	88c00a17 	ldw	r3,40(r17)
10004bfc:	003fab06 	br	10004aac <__alt_data_end+0xf8004aac>
10004c00:	88c00f17 	ldw	r3,60(r17)
10004c04:	00ffa216 	blt	zero,r3,10004a90 <__alt_data_end+0xf8004a90>
10004c08:	003fc606 	br	10004b24 <__alt_data_end+0xf8004b24>
10004c0c:	98c00017 	ldw	r3,0(r19)
10004c10:	183fb426 	beq	r3,zero,10004ae4 <__alt_data_end+0xf8004ae4>
10004c14:	01000744 	movi	r4,29
10004c18:	19000226 	beq	r3,r4,10004c24 <_fflush_r+0x1ec>
10004c1c:	01000584 	movi	r4,22
10004c20:	1900121e 	bne	r3,r4,10004c6c <_fflush_r+0x234>
10004c24:	88c0030b 	ldhu	r3,12(r17)
10004c28:	88800417 	ldw	r2,16(r17)
10004c2c:	88000115 	stw	zero,4(r17)
10004c30:	18fdffcc 	andi	r3,r3,63487
10004c34:	88c0030d 	sth	r3,12(r17)
10004c38:	88800015 	stw	r2,0(r17)
10004c3c:	003fb106 	br	10004b04 <__alt_data_end+0xf8004b04>
10004c40:	98800017 	ldw	r2,0(r19)
10004c44:	103feb26 	beq	r2,zero,10004bf4 <__alt_data_end+0xf8004bf4>
10004c48:	00c00744 	movi	r3,29
10004c4c:	10c00226 	beq	r2,r3,10004c58 <_fflush_r+0x220>
10004c50:	00c00584 	movi	r3,22
10004c54:	10ffd01e 	bne	r2,r3,10004b98 <__alt_data_end+0xf8004b98>
10004c58:	9c000015 	stw	r16,0(r19)
10004c5c:	0005883a 	mov	r2,zero
10004c60:	003fb106 	br	10004b28 <__alt_data_end+0xf8004b28>
10004c64:	88801415 	stw	r2,80(r17)
10004c68:	003fa606 	br	10004b04 <__alt_data_end+0xf8004b04>
10004c6c:	88c0030b 	ldhu	r3,12(r17)
10004c70:	18c01014 	ori	r3,r3,64
10004c74:	88c0030d 	sth	r3,12(r17)
10004c78:	003fab06 	br	10004b28 <__alt_data_end+0xf8004b28>

10004c7c <fflush>:
10004c7c:	200b883a 	mov	r5,r4
10004c80:	20000426 	beq	r4,zero,10004c94 <fflush+0x18>
10004c84:	00840074 	movhi	r2,4097
10004c88:	1086c204 	addi	r2,r2,6920
10004c8c:	11000017 	ldw	r4,0(r2)
10004c90:	0004a381 	jmpi	10004a38 <_fflush_r>
10004c94:	00840074 	movhi	r2,4097
10004c98:	1086c104 	addi	r2,r2,6916
10004c9c:	11000017 	ldw	r4,0(r2)
10004ca0:	01440034 	movhi	r5,4096
10004ca4:	29528e04 	addi	r5,r5,19000
10004ca8:	00055041 	jmpi	10005504 <_fwalk_reent>

10004cac <__fp_lock>:
10004cac:	0005883a 	mov	r2,zero
10004cb0:	f800283a 	ret

10004cb4 <__fp_unlock>:
10004cb4:	0005883a 	mov	r2,zero
10004cb8:	f800283a 	ret

10004cbc <_cleanup_r>:
10004cbc:	01440074 	movhi	r5,4097
10004cc0:	2963b004 	addi	r5,r5,-28992
10004cc4:	000545c1 	jmpi	1000545c <_fwalk>

10004cc8 <__sfmoreglue>:
10004cc8:	defffc04 	addi	sp,sp,-16
10004ccc:	dc800215 	stw	r18,8(sp)
10004cd0:	2825883a 	mov	r18,r5
10004cd4:	dc000015 	stw	r16,0(sp)
10004cd8:	01401a04 	movi	r5,104
10004cdc:	2021883a 	mov	r16,r4
10004ce0:	9009883a 	mov	r4,r18
10004ce4:	dfc00315 	stw	ra,12(sp)
10004ce8:	dc400115 	stw	r17,4(sp)
10004cec:	000aef80 	call	1000aef8 <__mulsi3>
10004cf0:	8009883a 	mov	r4,r16
10004cf4:	11400304 	addi	r5,r2,12
10004cf8:	1023883a 	mov	r17,r2
10004cfc:	00058440 	call	10005844 <_malloc_r>
10004d00:	1021883a 	mov	r16,r2
10004d04:	10000726 	beq	r2,zero,10004d24 <__sfmoreglue+0x5c>
10004d08:	11000304 	addi	r4,r2,12
10004d0c:	10000015 	stw	zero,0(r2)
10004d10:	14800115 	stw	r18,4(r2)
10004d14:	11000215 	stw	r4,8(r2)
10004d18:	000b883a 	mov	r5,zero
10004d1c:	880d883a 	mov	r6,r17
10004d20:	00061fc0 	call	100061fc <memset>
10004d24:	8005883a 	mov	r2,r16
10004d28:	dfc00317 	ldw	ra,12(sp)
10004d2c:	dc800217 	ldw	r18,8(sp)
10004d30:	dc400117 	ldw	r17,4(sp)
10004d34:	dc000017 	ldw	r16,0(sp)
10004d38:	dec00404 	addi	sp,sp,16
10004d3c:	f800283a 	ret

10004d40 <_cleanup>:
10004d40:	00840074 	movhi	r2,4097
10004d44:	1086c104 	addi	r2,r2,6916
10004d48:	11000017 	ldw	r4,0(r2)
10004d4c:	01440074 	movhi	r5,4097
10004d50:	2963b004 	addi	r5,r5,-28992
10004d54:	000545c1 	jmpi	1000545c <_fwalk>

10004d58 <__sinit>:
10004d58:	20800e17 	ldw	r2,56(r4)
10004d5c:	defff704 	addi	sp,sp,-36
10004d60:	dc800215 	stw	r18,8(sp)
10004d64:	dfc00815 	stw	ra,32(sp)
10004d68:	ddc00715 	stw	r23,28(sp)
10004d6c:	dd800615 	stw	r22,24(sp)
10004d70:	dd400515 	stw	r21,20(sp)
10004d74:	dd000415 	stw	r20,16(sp)
10004d78:	dcc00315 	stw	r19,12(sp)
10004d7c:	dc400115 	stw	r17,4(sp)
10004d80:	dc000015 	stw	r16,0(sp)
10004d84:	2025883a 	mov	r18,r4
10004d88:	10004f1e 	bne	r2,zero,10004ec8 <__sinit+0x170>
10004d8c:	24000117 	ldw	r16,4(r4)
10004d90:	00c40034 	movhi	r3,4096
10004d94:	18d32f04 	addi	r3,r3,19644
10004d98:	20c00f15 	stw	r3,60(r4)
10004d9c:	2080bb04 	addi	r2,r4,748
10004da0:	00c000c4 	movi	r3,3
10004da4:	05c00044 	movi	r23,1
10004da8:	20c0b915 	stw	r3,740(r4)
10004dac:	2080ba15 	stw	r2,744(r4)
10004db0:	25c00e15 	stw	r23,56(r4)
10004db4:	2000b815 	stw	zero,736(r4)
10004db8:	00800104 	movi	r2,4
10004dbc:	81001704 	addi	r4,r16,92
10004dc0:	000b883a 	mov	r5,zero
10004dc4:	01800204 	movi	r6,8
10004dc8:	80000015 	stw	zero,0(r16)
10004dcc:	80000115 	stw	zero,4(r16)
10004dd0:	80000215 	stw	zero,8(r16)
10004dd4:	8080030d 	sth	r2,12(r16)
10004dd8:	80001915 	stw	zero,100(r16)
10004ddc:	8000038d 	sth	zero,14(r16)
10004de0:	80000415 	stw	zero,16(r16)
10004de4:	80000515 	stw	zero,20(r16)
10004de8:	80000615 	stw	zero,24(r16)
10004dec:	00061fc0 	call	100061fc <memset>
10004df0:	94400217 	ldw	r17,8(r18)
10004df4:	05840034 	movhi	r22,4096
10004df8:	b59d0104 	addi	r22,r22,29700
10004dfc:	05440034 	movhi	r21,4096
10004e00:	ad5d1804 	addi	r21,r21,29792
10004e04:	05040034 	movhi	r20,4096
10004e08:	a51d3704 	addi	r20,r20,29916
10004e0c:	04c40034 	movhi	r19,4096
10004e10:	9cdd4e04 	addi	r19,r19,30008
10004e14:	84000715 	stw	r16,28(r16)
10004e18:	85800815 	stw	r22,32(r16)
10004e1c:	85400915 	stw	r21,36(r16)
10004e20:	85000a15 	stw	r20,40(r16)
10004e24:	84c00b15 	stw	r19,44(r16)
10004e28:	00800284 	movi	r2,10
10004e2c:	89001704 	addi	r4,r17,92
10004e30:	000b883a 	mov	r5,zero
10004e34:	01800204 	movi	r6,8
10004e38:	88000015 	stw	zero,0(r17)
10004e3c:	88000115 	stw	zero,4(r17)
10004e40:	88000215 	stw	zero,8(r17)
10004e44:	8880030d 	sth	r2,12(r17)
10004e48:	88001915 	stw	zero,100(r17)
10004e4c:	8dc0038d 	sth	r23,14(r17)
10004e50:	88000415 	stw	zero,16(r17)
10004e54:	88000515 	stw	zero,20(r17)
10004e58:	88000615 	stw	zero,24(r17)
10004e5c:	00061fc0 	call	100061fc <memset>
10004e60:	94000317 	ldw	r16,12(r18)
10004e64:	00800484 	movi	r2,18
10004e68:	8c400715 	stw	r17,28(r17)
10004e6c:	8d800815 	stw	r22,32(r17)
10004e70:	8d400915 	stw	r21,36(r17)
10004e74:	8d000a15 	stw	r20,40(r17)
10004e78:	8cc00b15 	stw	r19,44(r17)
10004e7c:	8080030d 	sth	r2,12(r16)
10004e80:	00800084 	movi	r2,2
10004e84:	80000015 	stw	zero,0(r16)
10004e88:	80000115 	stw	zero,4(r16)
10004e8c:	80000215 	stw	zero,8(r16)
10004e90:	80001915 	stw	zero,100(r16)
10004e94:	8080038d 	sth	r2,14(r16)
10004e98:	80000415 	stw	zero,16(r16)
10004e9c:	80000515 	stw	zero,20(r16)
10004ea0:	80000615 	stw	zero,24(r16)
10004ea4:	81001704 	addi	r4,r16,92
10004ea8:	000b883a 	mov	r5,zero
10004eac:	01800204 	movi	r6,8
10004eb0:	00061fc0 	call	100061fc <memset>
10004eb4:	84000715 	stw	r16,28(r16)
10004eb8:	85800815 	stw	r22,32(r16)
10004ebc:	85400915 	stw	r21,36(r16)
10004ec0:	85000a15 	stw	r20,40(r16)
10004ec4:	84c00b15 	stw	r19,44(r16)
10004ec8:	dfc00817 	ldw	ra,32(sp)
10004ecc:	ddc00717 	ldw	r23,28(sp)
10004ed0:	dd800617 	ldw	r22,24(sp)
10004ed4:	dd400517 	ldw	r21,20(sp)
10004ed8:	dd000417 	ldw	r20,16(sp)
10004edc:	dcc00317 	ldw	r19,12(sp)
10004ee0:	dc800217 	ldw	r18,8(sp)
10004ee4:	dc400117 	ldw	r17,4(sp)
10004ee8:	dc000017 	ldw	r16,0(sp)
10004eec:	dec00904 	addi	sp,sp,36
10004ef0:	f800283a 	ret

10004ef4 <__sfp>:
10004ef4:	defffb04 	addi	sp,sp,-20
10004ef8:	00840074 	movhi	r2,4097
10004efc:	1086c104 	addi	r2,r2,6916
10004f00:	dc800215 	stw	r18,8(sp)
10004f04:	14800017 	ldw	r18,0(r2)
10004f08:	dcc00315 	stw	r19,12(sp)
10004f0c:	dfc00415 	stw	ra,16(sp)
10004f10:	90800e17 	ldw	r2,56(r18)
10004f14:	dc400115 	stw	r17,4(sp)
10004f18:	dc000015 	stw	r16,0(sp)
10004f1c:	2027883a 	mov	r19,r4
10004f20:	10002f26 	beq	r2,zero,10004fe0 <__sfp+0xec>
10004f24:	9480b804 	addi	r18,r18,736
10004f28:	047fffc4 	movi	r17,-1
10004f2c:	91400117 	ldw	r5,4(r18)
10004f30:	94000217 	ldw	r16,8(r18)
10004f34:	297fffc4 	addi	r5,r5,-1
10004f38:	28000a16 	blt	r5,zero,10004f64 <__sfp+0x70>
10004f3c:	8080030f 	ldh	r2,12(r16)
10004f40:	10000c26 	beq	r2,zero,10004f74 <__sfp+0x80>
10004f44:	80c01d04 	addi	r3,r16,116
10004f48:	00000206 	br	10004f54 <__sfp+0x60>
10004f4c:	18bfe60f 	ldh	r2,-104(r3)
10004f50:	10000826 	beq	r2,zero,10004f74 <__sfp+0x80>
10004f54:	297fffc4 	addi	r5,r5,-1
10004f58:	1c3ffd04 	addi	r16,r3,-12
10004f5c:	18c01a04 	addi	r3,r3,104
10004f60:	2c7ffa1e 	bne	r5,r17,10004f4c <__alt_data_end+0xf8004f4c>
10004f64:	90800017 	ldw	r2,0(r18)
10004f68:	10002026 	beq	r2,zero,10004fec <__sfp+0xf8>
10004f6c:	1025883a 	mov	r18,r2
10004f70:	003fee06 	br	10004f2c <__alt_data_end+0xf8004f2c>
10004f74:	00bfffc4 	movi	r2,-1
10004f78:	8080038d 	sth	r2,14(r16)
10004f7c:	00800044 	movi	r2,1
10004f80:	8080030d 	sth	r2,12(r16)
10004f84:	80001915 	stw	zero,100(r16)
10004f88:	80000015 	stw	zero,0(r16)
10004f8c:	80000215 	stw	zero,8(r16)
10004f90:	80000115 	stw	zero,4(r16)
10004f94:	80000415 	stw	zero,16(r16)
10004f98:	80000515 	stw	zero,20(r16)
10004f9c:	80000615 	stw	zero,24(r16)
10004fa0:	81001704 	addi	r4,r16,92
10004fa4:	000b883a 	mov	r5,zero
10004fa8:	01800204 	movi	r6,8
10004fac:	00061fc0 	call	100061fc <memset>
10004fb0:	8005883a 	mov	r2,r16
10004fb4:	80000c15 	stw	zero,48(r16)
10004fb8:	80000d15 	stw	zero,52(r16)
10004fbc:	80001115 	stw	zero,68(r16)
10004fc0:	80001215 	stw	zero,72(r16)
10004fc4:	dfc00417 	ldw	ra,16(sp)
10004fc8:	dcc00317 	ldw	r19,12(sp)
10004fcc:	dc800217 	ldw	r18,8(sp)
10004fd0:	dc400117 	ldw	r17,4(sp)
10004fd4:	dc000017 	ldw	r16,0(sp)
10004fd8:	dec00504 	addi	sp,sp,20
10004fdc:	f800283a 	ret
10004fe0:	9009883a 	mov	r4,r18
10004fe4:	0004d580 	call	10004d58 <__sinit>
10004fe8:	003fce06 	br	10004f24 <__alt_data_end+0xf8004f24>
10004fec:	9809883a 	mov	r4,r19
10004ff0:	01400104 	movi	r5,4
10004ff4:	0004cc80 	call	10004cc8 <__sfmoreglue>
10004ff8:	90800015 	stw	r2,0(r18)
10004ffc:	103fdb1e 	bne	r2,zero,10004f6c <__alt_data_end+0xf8004f6c>
10005000:	00800304 	movi	r2,12
10005004:	98800015 	stw	r2,0(r19)
10005008:	0005883a 	mov	r2,zero
1000500c:	003fed06 	br	10004fc4 <__alt_data_end+0xf8004fc4>

10005010 <__sfp_lock_acquire>:
10005010:	f800283a 	ret

10005014 <__sfp_lock_release>:
10005014:	f800283a 	ret

10005018 <__sinit_lock_acquire>:
10005018:	f800283a 	ret

1000501c <__sinit_lock_release>:
1000501c:	f800283a 	ret

10005020 <__fp_lock_all>:
10005020:	00840074 	movhi	r2,4097
10005024:	1086c204 	addi	r2,r2,6920
10005028:	11000017 	ldw	r4,0(r2)
1000502c:	01440034 	movhi	r5,4096
10005030:	29532b04 	addi	r5,r5,19628
10005034:	000545c1 	jmpi	1000545c <_fwalk>

10005038 <__fp_unlock_all>:
10005038:	00840074 	movhi	r2,4097
1000503c:	1086c204 	addi	r2,r2,6920
10005040:	11000017 	ldw	r4,0(r2)
10005044:	01440034 	movhi	r5,4096
10005048:	29532d04 	addi	r5,r5,19636
1000504c:	000545c1 	jmpi	1000545c <_fwalk>

10005050 <_malloc_trim_r>:
10005050:	defffb04 	addi	sp,sp,-20
10005054:	dcc00315 	stw	r19,12(sp)
10005058:	dc800215 	stw	r18,8(sp)
1000505c:	dc400115 	stw	r17,4(sp)
10005060:	dc000015 	stw	r16,0(sp)
10005064:	2827883a 	mov	r19,r5
10005068:	dfc00415 	stw	ra,16(sp)
1000506c:	04440074 	movhi	r17,4097
10005070:	8c413b04 	addi	r17,r17,1260
10005074:	2021883a 	mov	r16,r4
10005078:	000dd000 	call	1000dd00 <__malloc_lock>
1000507c:	88800217 	ldw	r2,8(r17)
10005080:	14800117 	ldw	r18,4(r2)
10005084:	00bfff04 	movi	r2,-4
10005088:	90a4703a 	and	r18,r18,r2
1000508c:	94e7c83a 	sub	r19,r18,r19
10005090:	9cc3fbc4 	addi	r19,r19,4079
10005094:	9826d33a 	srli	r19,r19,12
10005098:	0083ffc4 	movi	r2,4095
1000509c:	9cffffc4 	addi	r19,r19,-1
100050a0:	9826933a 	slli	r19,r19,12
100050a4:	14c0060e 	bge	r2,r19,100050c0 <_malloc_trim_r+0x70>
100050a8:	8009883a 	mov	r4,r16
100050ac:	000b883a 	mov	r5,zero
100050b0:	00073a00 	call	100073a0 <_sbrk_r>
100050b4:	88c00217 	ldw	r3,8(r17)
100050b8:	1c87883a 	add	r3,r3,r18
100050bc:	10c00a26 	beq	r2,r3,100050e8 <_malloc_trim_r+0x98>
100050c0:	8009883a 	mov	r4,r16
100050c4:	000dd200 	call	1000dd20 <__malloc_unlock>
100050c8:	0005883a 	mov	r2,zero
100050cc:	dfc00417 	ldw	ra,16(sp)
100050d0:	dcc00317 	ldw	r19,12(sp)
100050d4:	dc800217 	ldw	r18,8(sp)
100050d8:	dc400117 	ldw	r17,4(sp)
100050dc:	dc000017 	ldw	r16,0(sp)
100050e0:	dec00504 	addi	sp,sp,20
100050e4:	f800283a 	ret
100050e8:	8009883a 	mov	r4,r16
100050ec:	04cbc83a 	sub	r5,zero,r19
100050f0:	00073a00 	call	100073a0 <_sbrk_r>
100050f4:	00ffffc4 	movi	r3,-1
100050f8:	10c01326 	beq	r2,r3,10005148 <_malloc_trim_r+0xf8>
100050fc:	00840074 	movhi	r2,4097
10005100:	108d9b04 	addi	r2,r2,13932
10005104:	11000017 	ldw	r4,0(r2)
10005108:	88c00217 	ldw	r3,8(r17)
1000510c:	94e5c83a 	sub	r18,r18,r19
10005110:	94800054 	ori	r18,r18,1
10005114:	24e7c83a 	sub	r19,r4,r19
10005118:	1c800115 	stw	r18,4(r3)
1000511c:	8009883a 	mov	r4,r16
10005120:	14c00015 	stw	r19,0(r2)
10005124:	000dd200 	call	1000dd20 <__malloc_unlock>
10005128:	00800044 	movi	r2,1
1000512c:	dfc00417 	ldw	ra,16(sp)
10005130:	dcc00317 	ldw	r19,12(sp)
10005134:	dc800217 	ldw	r18,8(sp)
10005138:	dc400117 	ldw	r17,4(sp)
1000513c:	dc000017 	ldw	r16,0(sp)
10005140:	dec00504 	addi	sp,sp,20
10005144:	f800283a 	ret
10005148:	8009883a 	mov	r4,r16
1000514c:	000b883a 	mov	r5,zero
10005150:	00073a00 	call	100073a0 <_sbrk_r>
10005154:	88c00217 	ldw	r3,8(r17)
10005158:	014003c4 	movi	r5,15
1000515c:	10c9c83a 	sub	r4,r2,r3
10005160:	293fd70e 	bge	r5,r4,100050c0 <__alt_data_end+0xf80050c0>
10005164:	01440074 	movhi	r5,4097
10005168:	2946c404 	addi	r5,r5,6928
1000516c:	29400017 	ldw	r5,0(r5)
10005170:	21000054 	ori	r4,r4,1
10005174:	19000115 	stw	r4,4(r3)
10005178:	1145c83a 	sub	r2,r2,r5
1000517c:	01440074 	movhi	r5,4097
10005180:	294d9b04 	addi	r5,r5,13932
10005184:	28800015 	stw	r2,0(r5)
10005188:	003fcd06 	br	100050c0 <__alt_data_end+0xf80050c0>

1000518c <_free_r>:
1000518c:	defffd04 	addi	sp,sp,-12
10005190:	dc000015 	stw	r16,0(sp)
10005194:	dfc00215 	stw	ra,8(sp)
10005198:	dc400115 	stw	r17,4(sp)
1000519c:	2821883a 	mov	r16,r5
100051a0:	28004c26 	beq	r5,zero,100052d4 <_free_r+0x148>
100051a4:	2023883a 	mov	r17,r4
100051a8:	000dd000 	call	1000dd00 <__malloc_lock>
100051ac:	823fff17 	ldw	r8,-4(r16)
100051b0:	00bfff84 	movi	r2,-2
100051b4:	81bffe04 	addi	r6,r16,-8
100051b8:	4084703a 	and	r2,r8,r2
100051bc:	3087883a 	add	r3,r6,r2
100051c0:	01440074 	movhi	r5,4097
100051c4:	29413b04 	addi	r5,r5,1260
100051c8:	1a400117 	ldw	r9,4(r3)
100051cc:	29000217 	ldw	r4,8(r5)
100051d0:	01ffff04 	movi	r7,-4
100051d4:	49ce703a 	and	r7,r9,r7
100051d8:	20c06526 	beq	r4,r3,10005370 <_free_r+0x1e4>
100051dc:	19c00115 	stw	r7,4(r3)
100051e0:	4200004c 	andi	r8,r8,1
100051e4:	40003026 	beq	r8,zero,100052a8 <_free_r+0x11c>
100051e8:	0009883a 	mov	r4,zero
100051ec:	19d1883a 	add	r8,r3,r7
100051f0:	42000117 	ldw	r8,4(r8)
100051f4:	4200004c 	andi	r8,r8,1
100051f8:	4000061e 	bne	r8,zero,10005214 <_free_r+0x88>
100051fc:	11c5883a 	add	r2,r2,r7
10005200:	19c00217 	ldw	r7,8(r3)
10005204:	20004e26 	beq	r4,zero,10005340 <_free_r+0x1b4>
10005208:	18c00317 	ldw	r3,12(r3)
1000520c:	38c00315 	stw	r3,12(r7)
10005210:	19c00215 	stw	r7,8(r3)
10005214:	10c00054 	ori	r3,r2,1
10005218:	30c00115 	stw	r3,4(r6)
1000521c:	3087883a 	add	r3,r6,r2
10005220:	18800015 	stw	r2,0(r3)
10005224:	20001a1e 	bne	r4,zero,10005290 <_free_r+0x104>
10005228:	00c07fc4 	movi	r3,511
1000522c:	18802e2e 	bgeu	r3,r2,100052e8 <_free_r+0x15c>
10005230:	1006d27a 	srli	r3,r2,9
10005234:	01000104 	movi	r4,4
10005238:	20c06636 	bltu	r4,r3,100053d4 <_free_r+0x248>
1000523c:	1008d1ba 	srli	r4,r2,6
10005240:	21000e04 	addi	r4,r4,56
10005244:	210f883a 	add	r7,r4,r4
10005248:	39cf883a 	add	r7,r7,r7
1000524c:	39cf883a 	add	r7,r7,r7
10005250:	29cf883a 	add	r7,r5,r7
10005254:	38c00217 	ldw	r3,8(r7)
10005258:	01440074 	movhi	r5,4097
1000525c:	29413b04 	addi	r5,r5,1260
10005260:	19c06126 	beq	r3,r7,100053e8 <_free_r+0x25c>
10005264:	013fff04 	movi	r4,-4
10005268:	19400117 	ldw	r5,4(r3)
1000526c:	290a703a 	and	r5,r5,r4
10005270:	1140022e 	bgeu	r2,r5,1000527c <_free_r+0xf0>
10005274:	18c00217 	ldw	r3,8(r3)
10005278:	38fffb1e 	bne	r7,r3,10005268 <__alt_data_end+0xf8005268>
1000527c:	18800317 	ldw	r2,12(r3)
10005280:	30800315 	stw	r2,12(r6)
10005284:	30c00215 	stw	r3,8(r6)
10005288:	11800215 	stw	r6,8(r2)
1000528c:	19800315 	stw	r6,12(r3)
10005290:	8809883a 	mov	r4,r17
10005294:	dfc00217 	ldw	ra,8(sp)
10005298:	dc400117 	ldw	r17,4(sp)
1000529c:	dc000017 	ldw	r16,0(sp)
100052a0:	dec00304 	addi	sp,sp,12
100052a4:	000dd201 	jmpi	1000dd20 <__malloc_unlock>
100052a8:	813ffe17 	ldw	r4,-8(r16)
100052ac:	2a400204 	addi	r9,r5,8
100052b0:	310dc83a 	sub	r6,r6,r4
100052b4:	32000217 	ldw	r8,8(r6)
100052b8:	1105883a 	add	r2,r2,r4
100052bc:	42404326 	beq	r8,r9,100053cc <_free_r+0x240>
100052c0:	32400317 	ldw	r9,12(r6)
100052c4:	0009883a 	mov	r4,zero
100052c8:	42400315 	stw	r9,12(r8)
100052cc:	4a000215 	stw	r8,8(r9)
100052d0:	003fc606 	br	100051ec <__alt_data_end+0xf80051ec>
100052d4:	dfc00217 	ldw	ra,8(sp)
100052d8:	dc400117 	ldw	r17,4(sp)
100052dc:	dc000017 	ldw	r16,0(sp)
100052e0:	dec00304 	addi	sp,sp,12
100052e4:	f800283a 	ret
100052e8:	1004d0fa 	srli	r2,r2,3
100052ec:	02000044 	movi	r8,1
100052f0:	29c00117 	ldw	r7,4(r5)
100052f4:	1087883a 	add	r3,r2,r2
100052f8:	18c7883a 	add	r3,r3,r3
100052fc:	18c7883a 	add	r3,r3,r3
10005300:	28c7883a 	add	r3,r5,r3
10005304:	1005d0ba 	srai	r2,r2,2
10005308:	19000217 	ldw	r4,8(r3)
1000530c:	30c00315 	stw	r3,12(r6)
10005310:	4084983a 	sll	r2,r8,r2
10005314:	31000215 	stw	r4,8(r6)
10005318:	19800215 	stw	r6,8(r3)
1000531c:	11c4b03a 	or	r2,r2,r7
10005320:	21800315 	stw	r6,12(r4)
10005324:	8809883a 	mov	r4,r17
10005328:	28800115 	stw	r2,4(r5)
1000532c:	dfc00217 	ldw	ra,8(sp)
10005330:	dc400117 	ldw	r17,4(sp)
10005334:	dc000017 	ldw	r16,0(sp)
10005338:	dec00304 	addi	sp,sp,12
1000533c:	000dd201 	jmpi	1000dd20 <__malloc_unlock>
10005340:	02040074 	movhi	r8,4097
10005344:	42013d04 	addi	r8,r8,1268
10005348:	3a3faf1e 	bne	r7,r8,10005208 <__alt_data_end+0xf8005208>
1000534c:	29800515 	stw	r6,20(r5)
10005350:	29800415 	stw	r6,16(r5)
10005354:	10c00054 	ori	r3,r2,1
10005358:	31c00315 	stw	r7,12(r6)
1000535c:	31c00215 	stw	r7,8(r6)
10005360:	30c00115 	stw	r3,4(r6)
10005364:	308d883a 	add	r6,r6,r2
10005368:	30800015 	stw	r2,0(r6)
1000536c:	003fc806 	br	10005290 <__alt_data_end+0xf8005290>
10005370:	4200004c 	andi	r8,r8,1
10005374:	3885883a 	add	r2,r7,r2
10005378:	4000071e 	bne	r8,zero,10005398 <_free_r+0x20c>
1000537c:	81fffe17 	ldw	r7,-8(r16)
10005380:	31cdc83a 	sub	r6,r6,r7
10005384:	30c00317 	ldw	r3,12(r6)
10005388:	31000217 	ldw	r4,8(r6)
1000538c:	11c5883a 	add	r2,r2,r7
10005390:	20c00315 	stw	r3,12(r4)
10005394:	19000215 	stw	r4,8(r3)
10005398:	00c40074 	movhi	r3,4097
1000539c:	18c6c504 	addi	r3,r3,6932
100053a0:	11000054 	ori	r4,r2,1
100053a4:	18c00017 	ldw	r3,0(r3)
100053a8:	31000115 	stw	r4,4(r6)
100053ac:	29800215 	stw	r6,8(r5)
100053b0:	10ffb736 	bltu	r2,r3,10005290 <__alt_data_end+0xf8005290>
100053b4:	00840074 	movhi	r2,4097
100053b8:	108d9304 	addi	r2,r2,13900
100053bc:	11400017 	ldw	r5,0(r2)
100053c0:	8809883a 	mov	r4,r17
100053c4:	00050500 	call	10005050 <_malloc_trim_r>
100053c8:	003fb106 	br	10005290 <__alt_data_end+0xf8005290>
100053cc:	01000044 	movi	r4,1
100053d0:	003f8606 	br	100051ec <__alt_data_end+0xf80051ec>
100053d4:	01000504 	movi	r4,20
100053d8:	20c00b36 	bltu	r4,r3,10005408 <_free_r+0x27c>
100053dc:	190016c4 	addi	r4,r3,91
100053e0:	210f883a 	add	r7,r4,r4
100053e4:	003f9806 	br	10005248 <__alt_data_end+0xf8005248>
100053e8:	2009d0ba 	srai	r4,r4,2
100053ec:	00800044 	movi	r2,1
100053f0:	29c00117 	ldw	r7,4(r5)
100053f4:	1108983a 	sll	r4,r2,r4
100053f8:	1805883a 	mov	r2,r3
100053fc:	21c8b03a 	or	r4,r4,r7
10005400:	29000115 	stw	r4,4(r5)
10005404:	003f9e06 	br	10005280 <__alt_data_end+0xf8005280>
10005408:	01001504 	movi	r4,84
1000540c:	20c00436 	bltu	r4,r3,10005420 <_free_r+0x294>
10005410:	1008d33a 	srli	r4,r2,12
10005414:	21001b84 	addi	r4,r4,110
10005418:	210f883a 	add	r7,r4,r4
1000541c:	003f8a06 	br	10005248 <__alt_data_end+0xf8005248>
10005420:	01005504 	movi	r4,340
10005424:	20c00436 	bltu	r4,r3,10005438 <_free_r+0x2ac>
10005428:	1008d3fa 	srli	r4,r2,15
1000542c:	21001dc4 	addi	r4,r4,119
10005430:	210f883a 	add	r7,r4,r4
10005434:	003f8406 	br	10005248 <__alt_data_end+0xf8005248>
10005438:	01015504 	movi	r4,1364
1000543c:	20c00436 	bltu	r4,r3,10005450 <_free_r+0x2c4>
10005440:	1008d4ba 	srli	r4,r2,18
10005444:	21001f04 	addi	r4,r4,124
10005448:	210f883a 	add	r7,r4,r4
1000544c:	003f7e06 	br	10005248 <__alt_data_end+0xf8005248>
10005450:	01c03f04 	movi	r7,252
10005454:	01001f84 	movi	r4,126
10005458:	003f7b06 	br	10005248 <__alt_data_end+0xf8005248>

1000545c <_fwalk>:
1000545c:	defff904 	addi	sp,sp,-28
10005460:	dcc00315 	stw	r19,12(sp)
10005464:	24c0b804 	addi	r19,r4,736
10005468:	dd400515 	stw	r21,20(sp)
1000546c:	dd000415 	stw	r20,16(sp)
10005470:	dfc00615 	stw	ra,24(sp)
10005474:	dc800215 	stw	r18,8(sp)
10005478:	dc400115 	stw	r17,4(sp)
1000547c:	dc000015 	stw	r16,0(sp)
10005480:	282b883a 	mov	r21,r5
10005484:	0029883a 	mov	r20,zero
10005488:	00050100 	call	10005010 <__sfp_lock_acquire>
1000548c:	98001226 	beq	r19,zero,100054d8 <_fwalk+0x7c>
10005490:	04bfffc4 	movi	r18,-1
10005494:	9c400117 	ldw	r17,4(r19)
10005498:	9c000217 	ldw	r16,8(r19)
1000549c:	8c7fffc4 	addi	r17,r17,-1
100054a0:	88000b16 	blt	r17,zero,100054d0 <_fwalk+0x74>
100054a4:	84000304 	addi	r16,r16,12
100054a8:	80c0000f 	ldh	r3,0(r16)
100054ac:	8c7fffc4 	addi	r17,r17,-1
100054b0:	813ffd04 	addi	r4,r16,-12
100054b4:	18000426 	beq	r3,zero,100054c8 <_fwalk+0x6c>
100054b8:	80c0008f 	ldh	r3,2(r16)
100054bc:	1c800226 	beq	r3,r18,100054c8 <_fwalk+0x6c>
100054c0:	a83ee83a 	callr	r21
100054c4:	a0a8b03a 	or	r20,r20,r2
100054c8:	84001a04 	addi	r16,r16,104
100054cc:	8cbff61e 	bne	r17,r18,100054a8 <__alt_data_end+0xf80054a8>
100054d0:	9cc00017 	ldw	r19,0(r19)
100054d4:	983fef1e 	bne	r19,zero,10005494 <__alt_data_end+0xf8005494>
100054d8:	00050140 	call	10005014 <__sfp_lock_release>
100054dc:	a005883a 	mov	r2,r20
100054e0:	dfc00617 	ldw	ra,24(sp)
100054e4:	dd400517 	ldw	r21,20(sp)
100054e8:	dd000417 	ldw	r20,16(sp)
100054ec:	dcc00317 	ldw	r19,12(sp)
100054f0:	dc800217 	ldw	r18,8(sp)
100054f4:	dc400117 	ldw	r17,4(sp)
100054f8:	dc000017 	ldw	r16,0(sp)
100054fc:	dec00704 	addi	sp,sp,28
10005500:	f800283a 	ret

10005504 <_fwalk_reent>:
10005504:	defff804 	addi	sp,sp,-32
10005508:	dcc00315 	stw	r19,12(sp)
1000550c:	24c0b804 	addi	r19,r4,736
10005510:	dd800615 	stw	r22,24(sp)
10005514:	dd400515 	stw	r21,20(sp)
10005518:	dd000415 	stw	r20,16(sp)
1000551c:	dfc00715 	stw	ra,28(sp)
10005520:	dc800215 	stw	r18,8(sp)
10005524:	dc400115 	stw	r17,4(sp)
10005528:	dc000015 	stw	r16,0(sp)
1000552c:	2029883a 	mov	r20,r4
10005530:	282b883a 	mov	r21,r5
10005534:	002d883a 	mov	r22,zero
10005538:	00050100 	call	10005010 <__sfp_lock_acquire>
1000553c:	98001326 	beq	r19,zero,1000558c <_fwalk_reent+0x88>
10005540:	04bfffc4 	movi	r18,-1
10005544:	9c400117 	ldw	r17,4(r19)
10005548:	9c000217 	ldw	r16,8(r19)
1000554c:	8c7fffc4 	addi	r17,r17,-1
10005550:	88000c16 	blt	r17,zero,10005584 <_fwalk_reent+0x80>
10005554:	84000304 	addi	r16,r16,12
10005558:	80c0000f 	ldh	r3,0(r16)
1000555c:	8c7fffc4 	addi	r17,r17,-1
10005560:	817ffd04 	addi	r5,r16,-12
10005564:	18000526 	beq	r3,zero,1000557c <_fwalk_reent+0x78>
10005568:	80c0008f 	ldh	r3,2(r16)
1000556c:	a009883a 	mov	r4,r20
10005570:	1c800226 	beq	r3,r18,1000557c <_fwalk_reent+0x78>
10005574:	a83ee83a 	callr	r21
10005578:	b0acb03a 	or	r22,r22,r2
1000557c:	84001a04 	addi	r16,r16,104
10005580:	8cbff51e 	bne	r17,r18,10005558 <__alt_data_end+0xf8005558>
10005584:	9cc00017 	ldw	r19,0(r19)
10005588:	983fee1e 	bne	r19,zero,10005544 <__alt_data_end+0xf8005544>
1000558c:	00050140 	call	10005014 <__sfp_lock_release>
10005590:	b005883a 	mov	r2,r22
10005594:	dfc00717 	ldw	ra,28(sp)
10005598:	dd800617 	ldw	r22,24(sp)
1000559c:	dd400517 	ldw	r21,20(sp)
100055a0:	dd000417 	ldw	r20,16(sp)
100055a4:	dcc00317 	ldw	r19,12(sp)
100055a8:	dc800217 	ldw	r18,8(sp)
100055ac:	dc400117 	ldw	r17,4(sp)
100055b0:	dc000017 	ldw	r16,0(sp)
100055b4:	dec00804 	addi	sp,sp,32
100055b8:	f800283a 	ret

100055bc <_setlocale_r>:
100055bc:	defffe04 	addi	sp,sp,-8
100055c0:	dc000015 	stw	r16,0(sp)
100055c4:	dfc00115 	stw	ra,4(sp)
100055c8:	3021883a 	mov	r16,r6
100055cc:	30000526 	beq	r6,zero,100055e4 <_setlocale_r+0x28>
100055d0:	3009883a 	mov	r4,r6
100055d4:	01440074 	movhi	r5,4097
100055d8:	297f7304 	addi	r5,r5,-564
100055dc:	00075400 	call	10007540 <strcmp>
100055e0:	1000061e 	bne	r2,zero,100055fc <_setlocale_r+0x40>
100055e4:	00840074 	movhi	r2,4097
100055e8:	10bf7204 	addi	r2,r2,-568
100055ec:	dfc00117 	ldw	ra,4(sp)
100055f0:	dc000017 	ldw	r16,0(sp)
100055f4:	dec00204 	addi	sp,sp,8
100055f8:	f800283a 	ret
100055fc:	8009883a 	mov	r4,r16
10005600:	01440074 	movhi	r5,4097
10005604:	297f7204 	addi	r5,r5,-568
10005608:	00075400 	call	10007540 <strcmp>
1000560c:	103ff526 	beq	r2,zero,100055e4 <__alt_data_end+0xf80055e4>
10005610:	8009883a 	mov	r4,r16
10005614:	01440074 	movhi	r5,4097
10005618:	297f5d04 	addi	r5,r5,-652
1000561c:	00075400 	call	10007540 <strcmp>
10005620:	103ff026 	beq	r2,zero,100055e4 <__alt_data_end+0xf80055e4>
10005624:	0005883a 	mov	r2,zero
10005628:	003ff006 	br	100055ec <__alt_data_end+0xf80055ec>

1000562c <__locale_charset>:
1000562c:	00840074 	movhi	r2,4097
10005630:	10812504 	addi	r2,r2,1172
10005634:	f800283a 	ret

10005638 <__locale_mb_cur_max>:
10005638:	00840074 	movhi	r2,4097
1000563c:	1086c304 	addi	r2,r2,6924
10005640:	10800017 	ldw	r2,0(r2)
10005644:	f800283a 	ret

10005648 <__locale_msgcharset>:
10005648:	00840074 	movhi	r2,4097
1000564c:	10811d04 	addi	r2,r2,1140
10005650:	f800283a 	ret

10005654 <__locale_cjk_lang>:
10005654:	0005883a 	mov	r2,zero
10005658:	f800283a 	ret

1000565c <_localeconv_r>:
1000565c:	00840074 	movhi	r2,4097
10005660:	10812d04 	addi	r2,r2,1204
10005664:	f800283a 	ret

10005668 <setlocale>:
10005668:	00c40074 	movhi	r3,4097
1000566c:	18c6c204 	addi	r3,r3,6920
10005670:	2005883a 	mov	r2,r4
10005674:	19000017 	ldw	r4,0(r3)
10005678:	280d883a 	mov	r6,r5
1000567c:	100b883a 	mov	r5,r2
10005680:	00055bc1 	jmpi	100055bc <_setlocale_r>

10005684 <localeconv>:
10005684:	00840074 	movhi	r2,4097
10005688:	10812d04 	addi	r2,r2,1204
1000568c:	f800283a 	ret

10005690 <__smakebuf_r>:
10005690:	2880030b 	ldhu	r2,12(r5)
10005694:	deffec04 	addi	sp,sp,-80
10005698:	dc000f15 	stw	r16,60(sp)
1000569c:	dfc01315 	stw	ra,76(sp)
100056a0:	dcc01215 	stw	r19,72(sp)
100056a4:	dc801115 	stw	r18,68(sp)
100056a8:	dc401015 	stw	r17,64(sp)
100056ac:	10c0008c 	andi	r3,r2,2
100056b0:	2821883a 	mov	r16,r5
100056b4:	18003a1e 	bne	r3,zero,100057a0 <__smakebuf_r+0x110>
100056b8:	2940038f 	ldh	r5,14(r5)
100056bc:	2023883a 	mov	r17,r4
100056c0:	28001b16 	blt	r5,zero,10005730 <__smakebuf_r+0xa0>
100056c4:	d80d883a 	mov	r6,sp
100056c8:	00090d00 	call	100090d0 <_fstat_r>
100056cc:	10001716 	blt	r2,zero,1000572c <__smakebuf_r+0x9c>
100056d0:	d8800117 	ldw	r2,4(sp)
100056d4:	00e00014 	movui	r3,32768
100056d8:	10bc000c 	andi	r2,r2,61440
100056dc:	10c03e26 	beq	r2,r3,100057d8 <__smakebuf_r+0x148>
100056e0:	80c0030b 	ldhu	r3,12(r16)
100056e4:	18c20014 	ori	r3,r3,2048
100056e8:	80c0030d 	sth	r3,12(r16)
100056ec:	00c80004 	movi	r3,8192
100056f0:	10c0431e 	bne	r2,r3,10005800 <__smakebuf_r+0x170>
100056f4:	8140038f 	ldh	r5,14(r16)
100056f8:	8809883a 	mov	r4,r17
100056fc:	00095e40 	call	100095e4 <_isatty_r>
10005700:	10004d26 	beq	r2,zero,10005838 <__smakebuf_r+0x1a8>
10005704:	80c0030b 	ldhu	r3,12(r16)
10005708:	04c00044 	movi	r19,1
1000570c:	808010c4 	addi	r2,r16,67
10005710:	1cc6b03a 	or	r3,r3,r19
10005714:	80c0030d 	sth	r3,12(r16)
10005718:	80800015 	stw	r2,0(r16)
1000571c:	80800415 	stw	r2,16(r16)
10005720:	84c00515 	stw	r19,20(r16)
10005724:	04810004 	movi	r18,1024
10005728:	00000706 	br	10005748 <__smakebuf_r+0xb8>
1000572c:	8080030b 	ldhu	r2,12(r16)
10005730:	10c0200c 	andi	r3,r2,128
10005734:	1800261e 	bne	r3,zero,100057d0 <__smakebuf_r+0x140>
10005738:	04810004 	movi	r18,1024
1000573c:	10820014 	ori	r2,r2,2048
10005740:	8080030d 	sth	r2,12(r16)
10005744:	0027883a 	mov	r19,zero
10005748:	8809883a 	mov	r4,r17
1000574c:	900b883a 	mov	r5,r18
10005750:	00058440 	call	10005844 <_malloc_r>
10005754:	10002d26 	beq	r2,zero,1000580c <__smakebuf_r+0x17c>
10005758:	80c0030b 	ldhu	r3,12(r16)
1000575c:	01040034 	movhi	r4,4096
10005760:	21132f04 	addi	r4,r4,19644
10005764:	89000f15 	stw	r4,60(r17)
10005768:	18c02014 	ori	r3,r3,128
1000576c:	80c0030d 	sth	r3,12(r16)
10005770:	80800015 	stw	r2,0(r16)
10005774:	80800415 	stw	r2,16(r16)
10005778:	84800515 	stw	r18,20(r16)
1000577c:	98000d26 	beq	r19,zero,100057b4 <__smakebuf_r+0x124>
10005780:	8140038f 	ldh	r5,14(r16)
10005784:	8809883a 	mov	r4,r17
10005788:	00095e40 	call	100095e4 <_isatty_r>
1000578c:	10000926 	beq	r2,zero,100057b4 <__smakebuf_r+0x124>
10005790:	8080030b 	ldhu	r2,12(r16)
10005794:	10800054 	ori	r2,r2,1
10005798:	8080030d 	sth	r2,12(r16)
1000579c:	00000506 	br	100057b4 <__smakebuf_r+0x124>
100057a0:	288010c4 	addi	r2,r5,67
100057a4:	28800015 	stw	r2,0(r5)
100057a8:	28800415 	stw	r2,16(r5)
100057ac:	00800044 	movi	r2,1
100057b0:	28800515 	stw	r2,20(r5)
100057b4:	dfc01317 	ldw	ra,76(sp)
100057b8:	dcc01217 	ldw	r19,72(sp)
100057bc:	dc801117 	ldw	r18,68(sp)
100057c0:	dc401017 	ldw	r17,64(sp)
100057c4:	dc000f17 	ldw	r16,60(sp)
100057c8:	dec01404 	addi	sp,sp,80
100057cc:	f800283a 	ret
100057d0:	04801004 	movi	r18,64
100057d4:	003fd906 	br	1000573c <__alt_data_end+0xf800573c>
100057d8:	81000a17 	ldw	r4,40(r16)
100057dc:	00c40034 	movhi	r3,4096
100057e0:	18dd3704 	addi	r3,r3,29916
100057e4:	20ffbe1e 	bne	r4,r3,100056e0 <__alt_data_end+0xf80056e0>
100057e8:	80c0030b 	ldhu	r3,12(r16)
100057ec:	01010004 	movi	r4,1024
100057f0:	81001315 	stw	r4,76(r16)
100057f4:	1906b03a 	or	r3,r3,r4
100057f8:	80c0030d 	sth	r3,12(r16)
100057fc:	003fbb06 	br	100056ec <__alt_data_end+0xf80056ec>
10005800:	0027883a 	mov	r19,zero
10005804:	04810004 	movi	r18,1024
10005808:	003fcf06 	br	10005748 <__alt_data_end+0xf8005748>
1000580c:	8080030b 	ldhu	r2,12(r16)
10005810:	10c0800c 	andi	r3,r2,512
10005814:	183fe71e 	bne	r3,zero,100057b4 <__alt_data_end+0xf80057b4>
10005818:	10800094 	ori	r2,r2,2
1000581c:	80c010c4 	addi	r3,r16,67
10005820:	8080030d 	sth	r2,12(r16)
10005824:	00800044 	movi	r2,1
10005828:	80c00015 	stw	r3,0(r16)
1000582c:	80c00415 	stw	r3,16(r16)
10005830:	80800515 	stw	r2,20(r16)
10005834:	003fdf06 	br	100057b4 <__alt_data_end+0xf80057b4>
10005838:	04c00044 	movi	r19,1
1000583c:	04810004 	movi	r18,1024
10005840:	003fc106 	br	10005748 <__alt_data_end+0xf8005748>

10005844 <_malloc_r>:
10005844:	defff504 	addi	sp,sp,-44
10005848:	dc800315 	stw	r18,12(sp)
1000584c:	dfc00a15 	stw	ra,40(sp)
10005850:	df000915 	stw	fp,36(sp)
10005854:	ddc00815 	stw	r23,32(sp)
10005858:	dd800715 	stw	r22,28(sp)
1000585c:	dd400615 	stw	r21,24(sp)
10005860:	dd000515 	stw	r20,20(sp)
10005864:	dcc00415 	stw	r19,16(sp)
10005868:	dc400215 	stw	r17,8(sp)
1000586c:	dc000115 	stw	r16,4(sp)
10005870:	288002c4 	addi	r2,r5,11
10005874:	00c00584 	movi	r3,22
10005878:	2025883a 	mov	r18,r4
1000587c:	18802b2e 	bgeu	r3,r2,1000592c <_malloc_r+0xe8>
10005880:	047ffe04 	movi	r17,-8
10005884:	1462703a 	and	r17,r2,r17
10005888:	88002a16 	blt	r17,zero,10005934 <_malloc_r+0xf0>
1000588c:	89402936 	bltu	r17,r5,10005934 <_malloc_r+0xf0>
10005890:	9009883a 	mov	r4,r18
10005894:	000dd000 	call	1000dd00 <__malloc_lock>
10005898:	00807dc4 	movi	r2,503
1000589c:	14402936 	bltu	r2,r17,10005944 <_malloc_r+0x100>
100058a0:	8808d0fa 	srli	r4,r17,3
100058a4:	04c40074 	movhi	r19,4097
100058a8:	9cc13b04 	addi	r19,r19,1260
100058ac:	2105883a 	add	r2,r4,r4
100058b0:	1085883a 	add	r2,r2,r2
100058b4:	1085883a 	add	r2,r2,r2
100058b8:	9885883a 	add	r2,r19,r2
100058bc:	14000317 	ldw	r16,12(r2)
100058c0:	80815226 	beq	r16,r2,10005e0c <_malloc_r+0x5c8>
100058c4:	81000117 	ldw	r4,4(r16)
100058c8:	00bfff04 	movi	r2,-4
100058cc:	80c00317 	ldw	r3,12(r16)
100058d0:	2084703a 	and	r2,r4,r2
100058d4:	8085883a 	add	r2,r16,r2
100058d8:	81000217 	ldw	r4,8(r16)
100058dc:	11400117 	ldw	r5,4(r2)
100058e0:	20c00315 	stw	r3,12(r4)
100058e4:	19000215 	stw	r4,8(r3)
100058e8:	28c00054 	ori	r3,r5,1
100058ec:	10c00115 	stw	r3,4(r2)
100058f0:	9009883a 	mov	r4,r18
100058f4:	000dd200 	call	1000dd20 <__malloc_unlock>
100058f8:	80800204 	addi	r2,r16,8
100058fc:	dfc00a17 	ldw	ra,40(sp)
10005900:	df000917 	ldw	fp,36(sp)
10005904:	ddc00817 	ldw	r23,32(sp)
10005908:	dd800717 	ldw	r22,28(sp)
1000590c:	dd400617 	ldw	r21,24(sp)
10005910:	dd000517 	ldw	r20,20(sp)
10005914:	dcc00417 	ldw	r19,16(sp)
10005918:	dc800317 	ldw	r18,12(sp)
1000591c:	dc400217 	ldw	r17,8(sp)
10005920:	dc000117 	ldw	r16,4(sp)
10005924:	dec00b04 	addi	sp,sp,44
10005928:	f800283a 	ret
1000592c:	04400404 	movi	r17,16
10005930:	897fd72e 	bgeu	r17,r5,10005890 <__alt_data_end+0xf8005890>
10005934:	00800304 	movi	r2,12
10005938:	90800015 	stw	r2,0(r18)
1000593c:	0005883a 	mov	r2,zero
10005940:	003fee06 	br	100058fc <__alt_data_end+0xf80058fc>
10005944:	8808d27a 	srli	r4,r17,9
10005948:	20007126 	beq	r4,zero,10005b10 <_malloc_r+0x2cc>
1000594c:	00800104 	movi	r2,4
10005950:	1100f536 	bltu	r2,r4,10005d28 <_malloc_r+0x4e4>
10005954:	8808d1ba 	srli	r4,r17,6
10005958:	21000e04 	addi	r4,r4,56
1000595c:	210b883a 	add	r5,r4,r4
10005960:	294b883a 	add	r5,r5,r5
10005964:	294b883a 	add	r5,r5,r5
10005968:	04c40074 	movhi	r19,4097
1000596c:	9cc13b04 	addi	r19,r19,1260
10005970:	994b883a 	add	r5,r19,r5
10005974:	2c000317 	ldw	r16,12(r5)
10005978:	2c000e26 	beq	r5,r16,100059b4 <_malloc_r+0x170>
1000597c:	80c00117 	ldw	r3,4(r16)
10005980:	01ffff04 	movi	r7,-4
10005984:	018003c4 	movi	r6,15
10005988:	19c6703a 	and	r3,r3,r7
1000598c:	1c45c83a 	sub	r2,r3,r17
10005990:	30800716 	blt	r6,r2,100059b0 <_malloc_r+0x16c>
10005994:	1000610e 	bge	r2,zero,10005b1c <_malloc_r+0x2d8>
10005998:	84000317 	ldw	r16,12(r16)
1000599c:	2c000526 	beq	r5,r16,100059b4 <_malloc_r+0x170>
100059a0:	80c00117 	ldw	r3,4(r16)
100059a4:	19c6703a 	and	r3,r3,r7
100059a8:	1c45c83a 	sub	r2,r3,r17
100059ac:	30bff90e 	bge	r6,r2,10005994 <__alt_data_end+0xf8005994>
100059b0:	213fffc4 	addi	r4,r4,-1
100059b4:	21000044 	addi	r4,r4,1
100059b8:	9c000417 	ldw	r16,16(r19)
100059bc:	00c40074 	movhi	r3,4097
100059c0:	18c13b04 	addi	r3,r3,1260
100059c4:	1a400204 	addi	r9,r3,8
100059c8:	82410926 	beq	r16,r9,10005df0 <_malloc_r+0x5ac>
100059cc:	81400117 	ldw	r5,4(r16)
100059d0:	00bfff04 	movi	r2,-4
100059d4:	018003c4 	movi	r6,15
100059d8:	2884703a 	and	r2,r5,r2
100059dc:	144bc83a 	sub	r5,r2,r17
100059e0:	3140f416 	blt	r6,r5,10005db4 <_malloc_r+0x570>
100059e4:	1a400515 	stw	r9,20(r3)
100059e8:	1a400415 	stw	r9,16(r3)
100059ec:	2800570e 	bge	r5,zero,10005b4c <_malloc_r+0x308>
100059f0:	01407fc4 	movi	r5,511
100059f4:	2880d436 	bltu	r5,r2,10005d48 <_malloc_r+0x504>
100059f8:	1004d0fa 	srli	r2,r2,3
100059fc:	02000044 	movi	r8,1
10005a00:	19c00117 	ldw	r7,4(r3)
10005a04:	108b883a 	add	r5,r2,r2
10005a08:	294b883a 	add	r5,r5,r5
10005a0c:	1005d0ba 	srai	r2,r2,2
10005a10:	294b883a 	add	r5,r5,r5
10005a14:	28cb883a 	add	r5,r5,r3
10005a18:	29800217 	ldw	r6,8(r5)
10005a1c:	4084983a 	sll	r2,r8,r2
10005a20:	81400315 	stw	r5,12(r16)
10005a24:	81800215 	stw	r6,8(r16)
10005a28:	11c4b03a 	or	r2,r2,r7
10005a2c:	2c000215 	stw	r16,8(r5)
10005a30:	18800115 	stw	r2,4(r3)
10005a34:	34000315 	stw	r16,12(r6)
10005a38:	2007d0ba 	srai	r3,r4,2
10005a3c:	01400044 	movi	r5,1
10005a40:	28ca983a 	sll	r5,r5,r3
10005a44:	11404936 	bltu	r2,r5,10005b6c <_malloc_r+0x328>
10005a48:	1146703a 	and	r3,r2,r5
10005a4c:	18000a1e 	bne	r3,zero,10005a78 <_malloc_r+0x234>
10005a50:	00ffff04 	movi	r3,-4
10005a54:	294b883a 	add	r5,r5,r5
10005a58:	20c8703a 	and	r4,r4,r3
10005a5c:	1146703a 	and	r3,r2,r5
10005a60:	21000104 	addi	r4,r4,4
10005a64:	1800041e 	bne	r3,zero,10005a78 <_malloc_r+0x234>
10005a68:	294b883a 	add	r5,r5,r5
10005a6c:	1146703a 	and	r3,r2,r5
10005a70:	21000104 	addi	r4,r4,4
10005a74:	183ffc26 	beq	r3,zero,10005a68 <__alt_data_end+0xf8005a68>
10005a78:	023fff04 	movi	r8,-4
10005a7c:	01c003c4 	movi	r7,15
10005a80:	2105883a 	add	r2,r4,r4
10005a84:	1085883a 	add	r2,r2,r2
10005a88:	1085883a 	add	r2,r2,r2
10005a8c:	9897883a 	add	r11,r19,r2
10005a90:	5a800304 	addi	r10,r11,12
10005a94:	2019883a 	mov	r12,r4
10005a98:	54000017 	ldw	r16,0(r10)
10005a9c:	51bffd04 	addi	r6,r10,-12
10005aa0:	8180041e 	bne	r16,r6,10005ab4 <_malloc_r+0x270>
10005aa4:	0000d406 	br	10005df8 <_malloc_r+0x5b4>
10005aa8:	1000dd0e 	bge	r2,zero,10005e20 <_malloc_r+0x5dc>
10005aac:	84000317 	ldw	r16,12(r16)
10005ab0:	8180d126 	beq	r16,r6,10005df8 <_malloc_r+0x5b4>
10005ab4:	80c00117 	ldw	r3,4(r16)
10005ab8:	1a06703a 	and	r3,r3,r8
10005abc:	1c45c83a 	sub	r2,r3,r17
10005ac0:	38bff90e 	bge	r7,r2,10005aa8 <__alt_data_end+0xf8005aa8>
10005ac4:	80c00317 	ldw	r3,12(r16)
10005ac8:	81000217 	ldw	r4,8(r16)
10005acc:	89400054 	ori	r5,r17,1
10005ad0:	81400115 	stw	r5,4(r16)
10005ad4:	20c00315 	stw	r3,12(r4)
10005ad8:	19000215 	stw	r4,8(r3)
10005adc:	8463883a 	add	r17,r16,r17
10005ae0:	9c400515 	stw	r17,20(r19)
10005ae4:	9c400415 	stw	r17,16(r19)
10005ae8:	10c00054 	ori	r3,r2,1
10005aec:	8a400315 	stw	r9,12(r17)
10005af0:	8a400215 	stw	r9,8(r17)
10005af4:	88c00115 	stw	r3,4(r17)
10005af8:	88a3883a 	add	r17,r17,r2
10005afc:	88800015 	stw	r2,0(r17)
10005b00:	9009883a 	mov	r4,r18
10005b04:	000dd200 	call	1000dd20 <__malloc_unlock>
10005b08:	80800204 	addi	r2,r16,8
10005b0c:	003f7b06 	br	100058fc <__alt_data_end+0xf80058fc>
10005b10:	01401f84 	movi	r5,126
10005b14:	01000fc4 	movi	r4,63
10005b18:	003f9106 	br	10005960 <__alt_data_end+0xf8005960>
10005b1c:	80800317 	ldw	r2,12(r16)
10005b20:	81000217 	ldw	r4,8(r16)
10005b24:	80c7883a 	add	r3,r16,r3
10005b28:	19400117 	ldw	r5,4(r3)
10005b2c:	20800315 	stw	r2,12(r4)
10005b30:	11000215 	stw	r4,8(r2)
10005b34:	28800054 	ori	r2,r5,1
10005b38:	18800115 	stw	r2,4(r3)
10005b3c:	9009883a 	mov	r4,r18
10005b40:	000dd200 	call	1000dd20 <__malloc_unlock>
10005b44:	80800204 	addi	r2,r16,8
10005b48:	003f6c06 	br	100058fc <__alt_data_end+0xf80058fc>
10005b4c:	8085883a 	add	r2,r16,r2
10005b50:	10c00117 	ldw	r3,4(r2)
10005b54:	9009883a 	mov	r4,r18
10005b58:	18c00054 	ori	r3,r3,1
10005b5c:	10c00115 	stw	r3,4(r2)
10005b60:	000dd200 	call	1000dd20 <__malloc_unlock>
10005b64:	80800204 	addi	r2,r16,8
10005b68:	003f6406 	br	100058fc <__alt_data_end+0xf80058fc>
10005b6c:	9c000217 	ldw	r16,8(r19)
10005b70:	00bfff04 	movi	r2,-4
10005b74:	85400117 	ldw	r21,4(r16)
10005b78:	a8aa703a 	and	r21,r21,r2
10005b7c:	ac400336 	bltu	r21,r17,10005b8c <_malloc_r+0x348>
10005b80:	ac45c83a 	sub	r2,r21,r17
10005b84:	00c003c4 	movi	r3,15
10005b88:	18805d16 	blt	r3,r2,10005d00 <_malloc_r+0x4bc>
10005b8c:	00840074 	movhi	r2,4097
10005b90:	108d9304 	addi	r2,r2,13900
10005b94:	00c40074 	movhi	r3,4097
10005b98:	18c6c404 	addi	r3,r3,6928
10005b9c:	15c00017 	ldw	r23,0(r2)
10005ba0:	19000017 	ldw	r4,0(r3)
10005ba4:	00bfffc4 	movi	r2,-1
10005ba8:	8579883a 	add	fp,r16,r21
10005bac:	8def883a 	add	r23,r17,r23
10005bb0:	2080e426 	beq	r4,r2,10005f44 <_malloc_r+0x700>
10005bb4:	bdc403c4 	addi	r23,r23,4111
10005bb8:	00bc0004 	movi	r2,-4096
10005bbc:	b8ae703a 	and	r23,r23,r2
10005bc0:	9009883a 	mov	r4,r18
10005bc4:	b80b883a 	mov	r5,r23
10005bc8:	d8c00015 	stw	r3,0(sp)
10005bcc:	00073a00 	call	100073a0 <_sbrk_r>
10005bd0:	1029883a 	mov	r20,r2
10005bd4:	00bfffc4 	movi	r2,-1
10005bd8:	d8c00017 	ldw	r3,0(sp)
10005bdc:	a080a426 	beq	r20,r2,10005e70 <_malloc_r+0x62c>
10005be0:	a700a236 	bltu	r20,fp,10005e6c <_malloc_r+0x628>
10005be4:	05840074 	movhi	r22,4097
10005be8:	b58d9b04 	addi	r22,r22,13932
10005bec:	b0800017 	ldw	r2,0(r22)
10005bf0:	b885883a 	add	r2,r23,r2
10005bf4:	b0800015 	stw	r2,0(r22)
10005bf8:	e500da26 	beq	fp,r20,10005f64 <_malloc_r+0x720>
10005bfc:	19000017 	ldw	r4,0(r3)
10005c00:	00ffffc4 	movi	r3,-1
10005c04:	20c0e426 	beq	r4,r3,10005f98 <_malloc_r+0x754>
10005c08:	a739c83a 	sub	fp,r20,fp
10005c0c:	1705883a 	add	r2,r2,fp
10005c10:	b0800015 	stw	r2,0(r22)
10005c14:	a08001cc 	andi	r2,r20,7
10005c18:	1000b526 	beq	r2,zero,10005ef0 <_malloc_r+0x6ac>
10005c1c:	a0a9c83a 	sub	r20,r20,r2
10005c20:	00c40204 	movi	r3,4104
10005c24:	a5000204 	addi	r20,r20,8
10005c28:	1885c83a 	sub	r2,r3,r2
10005c2c:	a5c7883a 	add	r3,r20,r23
10005c30:	18c3ffcc 	andi	r3,r3,4095
10005c34:	10efc83a 	sub	r23,r2,r3
10005c38:	9009883a 	mov	r4,r18
10005c3c:	b80b883a 	mov	r5,r23
10005c40:	00073a00 	call	100073a0 <_sbrk_r>
10005c44:	00ffffc4 	movi	r3,-1
10005c48:	10c0d026 	beq	r2,r3,10005f8c <_malloc_r+0x748>
10005c4c:	1505c83a 	sub	r2,r2,r20
10005c50:	b887883a 	add	r3,r23,r2
10005c54:	18c00054 	ori	r3,r3,1
10005c58:	b0800017 	ldw	r2,0(r22)
10005c5c:	9d000215 	stw	r20,8(r19)
10005c60:	a0c00115 	stw	r3,4(r20)
10005c64:	b885883a 	add	r2,r23,r2
10005c68:	b0800015 	stw	r2,0(r22)
10005c6c:	84c00e26 	beq	r16,r19,10005ca8 <_malloc_r+0x464>
10005c70:	00c003c4 	movi	r3,15
10005c74:	1d40a02e 	bgeu	r3,r21,10005ef8 <_malloc_r+0x6b4>
10005c78:	81400117 	ldw	r5,4(r16)
10005c7c:	ad7ffd04 	addi	r21,r21,-12
10005c80:	013ffe04 	movi	r4,-8
10005c84:	a908703a 	and	r4,r21,r4
10005c88:	2940004c 	andi	r5,r5,1
10005c8c:	214ab03a 	or	r5,r4,r5
10005c90:	81400115 	stw	r5,4(r16)
10005c94:	01800144 	movi	r6,5
10005c98:	810b883a 	add	r5,r16,r4
10005c9c:	29800115 	stw	r6,4(r5)
10005ca0:	29800215 	stw	r6,8(r5)
10005ca4:	1900c036 	bltu	r3,r4,10005fa8 <_malloc_r+0x764>
10005ca8:	00c40074 	movhi	r3,4097
10005cac:	18cd9204 	addi	r3,r3,13896
10005cb0:	19000017 	ldw	r4,0(r3)
10005cb4:	2080012e 	bgeu	r4,r2,10005cbc <_malloc_r+0x478>
10005cb8:	18800015 	stw	r2,0(r3)
10005cbc:	00c40074 	movhi	r3,4097
10005cc0:	18cd9104 	addi	r3,r3,13892
10005cc4:	19000017 	ldw	r4,0(r3)
10005cc8:	9c000217 	ldw	r16,8(r19)
10005ccc:	2080012e 	bgeu	r4,r2,10005cd4 <_malloc_r+0x490>
10005cd0:	18800015 	stw	r2,0(r3)
10005cd4:	80c00117 	ldw	r3,4(r16)
10005cd8:	00bfff04 	movi	r2,-4
10005cdc:	1886703a 	and	r3,r3,r2
10005ce0:	1c45c83a 	sub	r2,r3,r17
10005ce4:	1c400236 	bltu	r3,r17,10005cf0 <_malloc_r+0x4ac>
10005ce8:	00c003c4 	movi	r3,15
10005cec:	18800416 	blt	r3,r2,10005d00 <_malloc_r+0x4bc>
10005cf0:	9009883a 	mov	r4,r18
10005cf4:	000dd200 	call	1000dd20 <__malloc_unlock>
10005cf8:	0005883a 	mov	r2,zero
10005cfc:	003eff06 	br	100058fc <__alt_data_end+0xf80058fc>
10005d00:	88c00054 	ori	r3,r17,1
10005d04:	80c00115 	stw	r3,4(r16)
10005d08:	8463883a 	add	r17,r16,r17
10005d0c:	10800054 	ori	r2,r2,1
10005d10:	9c400215 	stw	r17,8(r19)
10005d14:	88800115 	stw	r2,4(r17)
10005d18:	9009883a 	mov	r4,r18
10005d1c:	000dd200 	call	1000dd20 <__malloc_unlock>
10005d20:	80800204 	addi	r2,r16,8
10005d24:	003ef506 	br	100058fc <__alt_data_end+0xf80058fc>
10005d28:	00800504 	movi	r2,20
10005d2c:	1100482e 	bgeu	r2,r4,10005e50 <_malloc_r+0x60c>
10005d30:	00801504 	movi	r2,84
10005d34:	11006836 	bltu	r2,r4,10005ed8 <_malloc_r+0x694>
10005d38:	8808d33a 	srli	r4,r17,12
10005d3c:	21001b84 	addi	r4,r4,110
10005d40:	210b883a 	add	r5,r4,r4
10005d44:	003f0606 	br	10005960 <__alt_data_end+0xf8005960>
10005d48:	1006d27a 	srli	r3,r2,9
10005d4c:	01400104 	movi	r5,4
10005d50:	28c0422e 	bgeu	r5,r3,10005e5c <_malloc_r+0x618>
10005d54:	01400504 	movi	r5,20
10005d58:	28c07c36 	bltu	r5,r3,10005f4c <_malloc_r+0x708>
10005d5c:	194016c4 	addi	r5,r3,91
10005d60:	294d883a 	add	r6,r5,r5
10005d64:	318d883a 	add	r6,r6,r6
10005d68:	318d883a 	add	r6,r6,r6
10005d6c:	998d883a 	add	r6,r19,r6
10005d70:	30c00217 	ldw	r3,8(r6)
10005d74:	01c40074 	movhi	r7,4097
10005d78:	39c13b04 	addi	r7,r7,1260
10005d7c:	19806326 	beq	r3,r6,10005f0c <_malloc_r+0x6c8>
10005d80:	01ffff04 	movi	r7,-4
10005d84:	19400117 	ldw	r5,4(r3)
10005d88:	29ca703a 	and	r5,r5,r7
10005d8c:	1140022e 	bgeu	r2,r5,10005d98 <_malloc_r+0x554>
10005d90:	18c00217 	ldw	r3,8(r3)
10005d94:	30fffb1e 	bne	r6,r3,10005d84 <__alt_data_end+0xf8005d84>
10005d98:	19400317 	ldw	r5,12(r3)
10005d9c:	98800117 	ldw	r2,4(r19)
10005da0:	81400315 	stw	r5,12(r16)
10005da4:	80c00215 	stw	r3,8(r16)
10005da8:	2c000215 	stw	r16,8(r5)
10005dac:	1c000315 	stw	r16,12(r3)
10005db0:	003f2106 	br	10005a38 <__alt_data_end+0xf8005a38>
10005db4:	88800054 	ori	r2,r17,1
10005db8:	80800115 	stw	r2,4(r16)
10005dbc:	8463883a 	add	r17,r16,r17
10005dc0:	1c400515 	stw	r17,20(r3)
10005dc4:	1c400415 	stw	r17,16(r3)
10005dc8:	28800054 	ori	r2,r5,1
10005dcc:	88800115 	stw	r2,4(r17)
10005dd0:	8a400315 	stw	r9,12(r17)
10005dd4:	8a400215 	stw	r9,8(r17)
10005dd8:	8963883a 	add	r17,r17,r5
10005ddc:	89400015 	stw	r5,0(r17)
10005de0:	9009883a 	mov	r4,r18
10005de4:	000dd200 	call	1000dd20 <__malloc_unlock>
10005de8:	80800204 	addi	r2,r16,8
10005dec:	003ec306 	br	100058fc <__alt_data_end+0xf80058fc>
10005df0:	18800117 	ldw	r2,4(r3)
10005df4:	003f1006 	br	10005a38 <__alt_data_end+0xf8005a38>
10005df8:	63000044 	addi	r12,r12,1
10005dfc:	608000cc 	andi	r2,r12,3
10005e00:	52800204 	addi	r10,r10,8
10005e04:	103f241e 	bne	r2,zero,10005a98 <__alt_data_end+0xf8005a98>
10005e08:	00002106 	br	10005e90 <_malloc_r+0x64c>
10005e0c:	80800204 	addi	r2,r16,8
10005e10:	84000517 	ldw	r16,20(r16)
10005e14:	143eab1e 	bne	r2,r16,100058c4 <__alt_data_end+0xf80058c4>
10005e18:	21000084 	addi	r4,r4,2
10005e1c:	003ee606 	br	100059b8 <__alt_data_end+0xf80059b8>
10005e20:	80c7883a 	add	r3,r16,r3
10005e24:	19400117 	ldw	r5,4(r3)
10005e28:	80800317 	ldw	r2,12(r16)
10005e2c:	81000217 	ldw	r4,8(r16)
10005e30:	29400054 	ori	r5,r5,1
10005e34:	19400115 	stw	r5,4(r3)
10005e38:	20800315 	stw	r2,12(r4)
10005e3c:	11000215 	stw	r4,8(r2)
10005e40:	9009883a 	mov	r4,r18
10005e44:	000dd200 	call	1000dd20 <__malloc_unlock>
10005e48:	80800204 	addi	r2,r16,8
10005e4c:	003eab06 	br	100058fc <__alt_data_end+0xf80058fc>
10005e50:	210016c4 	addi	r4,r4,91
10005e54:	210b883a 	add	r5,r4,r4
10005e58:	003ec106 	br	10005960 <__alt_data_end+0xf8005960>
10005e5c:	100ad1ba 	srli	r5,r2,6
10005e60:	29400e04 	addi	r5,r5,56
10005e64:	294d883a 	add	r6,r5,r5
10005e68:	003fbe06 	br	10005d64 <__alt_data_end+0xf8005d64>
10005e6c:	84ff5d26 	beq	r16,r19,10005be4 <__alt_data_end+0xf8005be4>
10005e70:	9c000217 	ldw	r16,8(r19)
10005e74:	00bfff04 	movi	r2,-4
10005e78:	80c00117 	ldw	r3,4(r16)
10005e7c:	1886703a 	and	r3,r3,r2
10005e80:	003f9706 	br	10005ce0 <__alt_data_end+0xf8005ce0>
10005e84:	5ac00017 	ldw	r11,0(r11)
10005e88:	213fffc4 	addi	r4,r4,-1
10005e8c:	58805c1e 	bne	r11,r2,10006000 <_malloc_r+0x7bc>
10005e90:	20c000cc 	andi	r3,r4,3
10005e94:	58bffe04 	addi	r2,r11,-8
10005e98:	183ffa1e 	bne	r3,zero,10005e84 <__alt_data_end+0xf8005e84>
10005e9c:	98800117 	ldw	r2,4(r19)
10005ea0:	0146303a 	nor	r3,zero,r5
10005ea4:	1884703a 	and	r2,r3,r2
10005ea8:	98800115 	stw	r2,4(r19)
10005eac:	294b883a 	add	r5,r5,r5
10005eb0:	117f2e36 	bltu	r2,r5,10005b6c <__alt_data_end+0xf8005b6c>
10005eb4:	283f2d26 	beq	r5,zero,10005b6c <__alt_data_end+0xf8005b6c>
10005eb8:	1146703a 	and	r3,r2,r5
10005ebc:	6009883a 	mov	r4,r12
10005ec0:	183eef1e 	bne	r3,zero,10005a80 <__alt_data_end+0xf8005a80>
10005ec4:	294b883a 	add	r5,r5,r5
10005ec8:	1146703a 	and	r3,r2,r5
10005ecc:	21000104 	addi	r4,r4,4
10005ed0:	183ffc26 	beq	r3,zero,10005ec4 <__alt_data_end+0xf8005ec4>
10005ed4:	003eea06 	br	10005a80 <__alt_data_end+0xf8005a80>
10005ed8:	00805504 	movi	r2,340
10005edc:	11001336 	bltu	r2,r4,10005f2c <_malloc_r+0x6e8>
10005ee0:	8808d3fa 	srli	r4,r17,15
10005ee4:	21001dc4 	addi	r4,r4,119
10005ee8:	210b883a 	add	r5,r4,r4
10005eec:	003e9c06 	br	10005960 <__alt_data_end+0xf8005960>
10005ef0:	00840004 	movi	r2,4096
10005ef4:	003f4d06 	br	10005c2c <__alt_data_end+0xf8005c2c>
10005ef8:	00800044 	movi	r2,1
10005efc:	a0800115 	stw	r2,4(r20)
10005f00:	a021883a 	mov	r16,r20
10005f04:	0007883a 	mov	r3,zero
10005f08:	003f7506 	br	10005ce0 <__alt_data_end+0xf8005ce0>
10005f0c:	280bd0ba 	srai	r5,r5,2
10005f10:	01800044 	movi	r6,1
10005f14:	38800117 	ldw	r2,4(r7)
10005f18:	314c983a 	sll	r6,r6,r5
10005f1c:	180b883a 	mov	r5,r3
10005f20:	3084b03a 	or	r2,r6,r2
10005f24:	38800115 	stw	r2,4(r7)
10005f28:	003f9d06 	br	10005da0 <__alt_data_end+0xf8005da0>
10005f2c:	00815504 	movi	r2,1364
10005f30:	11001336 	bltu	r2,r4,10005f80 <_malloc_r+0x73c>
10005f34:	8808d4ba 	srli	r4,r17,18
10005f38:	21001f04 	addi	r4,r4,124
10005f3c:	210b883a 	add	r5,r4,r4
10005f40:	003e8706 	br	10005960 <__alt_data_end+0xf8005960>
10005f44:	bdc00404 	addi	r23,r23,16
10005f48:	003f1d06 	br	10005bc0 <__alt_data_end+0xf8005bc0>
10005f4c:	01401504 	movi	r5,84
10005f50:	28c01c36 	bltu	r5,r3,10005fc4 <_malloc_r+0x780>
10005f54:	100ad33a 	srli	r5,r2,12
10005f58:	29401b84 	addi	r5,r5,110
10005f5c:	294d883a 	add	r6,r5,r5
10005f60:	003f8006 	br	10005d64 <__alt_data_end+0xf8005d64>
10005f64:	e103ffcc 	andi	r4,fp,4095
10005f68:	203f241e 	bne	r4,zero,10005bfc <__alt_data_end+0xf8005bfc>
10005f6c:	98c00217 	ldw	r3,8(r19)
10005f70:	bd49883a 	add	r4,r23,r21
10005f74:	21000054 	ori	r4,r4,1
10005f78:	19000115 	stw	r4,4(r3)
10005f7c:	003f4a06 	br	10005ca8 <__alt_data_end+0xf8005ca8>
10005f80:	01403f04 	movi	r5,252
10005f84:	01001f84 	movi	r4,126
10005f88:	003e7506 	br	10005960 <__alt_data_end+0xf8005960>
10005f8c:	00c00044 	movi	r3,1
10005f90:	002f883a 	mov	r23,zero
10005f94:	003f3006 	br	10005c58 <__alt_data_end+0xf8005c58>
10005f98:	00840074 	movhi	r2,4097
10005f9c:	1086c404 	addi	r2,r2,6928
10005fa0:	15000015 	stw	r20,0(r2)
10005fa4:	003f1b06 	br	10005c14 <__alt_data_end+0xf8005c14>
10005fa8:	9009883a 	mov	r4,r18
10005fac:	81400204 	addi	r5,r16,8
10005fb0:	000518c0 	call	1000518c <_free_r>
10005fb4:	00840074 	movhi	r2,4097
10005fb8:	108d9b04 	addi	r2,r2,13932
10005fbc:	10800017 	ldw	r2,0(r2)
10005fc0:	003f3906 	br	10005ca8 <__alt_data_end+0xf8005ca8>
10005fc4:	01405504 	movi	r5,340
10005fc8:	28c00436 	bltu	r5,r3,10005fdc <_malloc_r+0x798>
10005fcc:	100ad3fa 	srli	r5,r2,15
10005fd0:	29401dc4 	addi	r5,r5,119
10005fd4:	294d883a 	add	r6,r5,r5
10005fd8:	003f6206 	br	10005d64 <__alt_data_end+0xf8005d64>
10005fdc:	01415504 	movi	r5,1364
10005fe0:	28c00436 	bltu	r5,r3,10005ff4 <_malloc_r+0x7b0>
10005fe4:	100ad4ba 	srli	r5,r2,18
10005fe8:	29401f04 	addi	r5,r5,124
10005fec:	294d883a 	add	r6,r5,r5
10005ff0:	003f5c06 	br	10005d64 <__alt_data_end+0xf8005d64>
10005ff4:	01803f04 	movi	r6,252
10005ff8:	01401f84 	movi	r5,126
10005ffc:	003f5906 	br	10005d64 <__alt_data_end+0xf8005d64>
10006000:	98800117 	ldw	r2,4(r19)
10006004:	003fa906 	br	10005eac <__alt_data_end+0xf8005eac>

10006008 <memchr>:
10006008:	208000cc 	andi	r2,r4,3
1000600c:	2811883a 	mov	r8,r5
10006010:	10003526 	beq	r2,zero,100060e8 <memchr+0xe0>
10006014:	30bfffc4 	addi	r2,r6,-1
10006018:	30001b26 	beq	r6,zero,10006088 <memchr+0x80>
1000601c:	21800003 	ldbu	r6,0(r4)
10006020:	28c03fcc 	andi	r3,r5,255
10006024:	30c01a26 	beq	r6,r3,10006090 <memchr+0x88>
10006028:	180d883a 	mov	r6,r3
1000602c:	00000406 	br	10006040 <memchr+0x38>
10006030:	10001526 	beq	r2,zero,10006088 <memchr+0x80>
10006034:	20c00003 	ldbu	r3,0(r4)
10006038:	10bfffc4 	addi	r2,r2,-1
1000603c:	19801426 	beq	r3,r6,10006090 <memchr+0x88>
10006040:	21000044 	addi	r4,r4,1
10006044:	20c000cc 	andi	r3,r4,3
10006048:	183ff91e 	bne	r3,zero,10006030 <__alt_data_end+0xf8006030>
1000604c:	02c000c4 	movi	r11,3
10006050:	58801136 	bltu	r11,r2,10006098 <memchr+0x90>
10006054:	10000c26 	beq	r2,zero,10006088 <memchr+0x80>
10006058:	20c00003 	ldbu	r3,0(r4)
1000605c:	29403fcc 	andi	r5,r5,255
10006060:	19400b26 	beq	r3,r5,10006090 <memchr+0x88>
10006064:	20c00044 	addi	r3,r4,1
10006068:	2085883a 	add	r2,r4,r2
1000606c:	41803fcc 	andi	r6,r8,255
10006070:	00000306 	br	10006080 <memchr+0x78>
10006074:	18c00044 	addi	r3,r3,1
10006078:	197fffc3 	ldbu	r5,-1(r3)
1000607c:	29800426 	beq	r5,r6,10006090 <memchr+0x88>
10006080:	1809883a 	mov	r4,r3
10006084:	18bffb1e 	bne	r3,r2,10006074 <__alt_data_end+0xf8006074>
10006088:	0005883a 	mov	r2,zero
1000608c:	f800283a 	ret
10006090:	2005883a 	mov	r2,r4
10006094:	f800283a 	ret
10006098:	28c03fcc 	andi	r3,r5,255
1000609c:	180c923a 	slli	r6,r3,8
100060a0:	02bfbff4 	movhi	r10,65279
100060a4:	52bfbfc4 	addi	r10,r10,-257
100060a8:	02602074 	movhi	r9,32897
100060ac:	4a602004 	addi	r9,r9,-32640
100060b0:	30c6b03a 	or	r3,r6,r3
100060b4:	180c943a 	slli	r6,r3,16
100060b8:	30ccb03a 	or	r6,r6,r3
100060bc:	20c00017 	ldw	r3,0(r4)
100060c0:	30c6f03a 	xor	r3,r6,r3
100060c4:	1a8f883a 	add	r7,r3,r10
100060c8:	00c6303a 	nor	r3,zero,r3
100060cc:	38c6703a 	and	r3,r7,r3
100060d0:	1a46703a 	and	r3,r3,r9
100060d4:	183fdf1e 	bne	r3,zero,10006054 <__alt_data_end+0xf8006054>
100060d8:	10bfff04 	addi	r2,r2,-4
100060dc:	21000104 	addi	r4,r4,4
100060e0:	58bff636 	bltu	r11,r2,100060bc <__alt_data_end+0xf80060bc>
100060e4:	003fdb06 	br	10006054 <__alt_data_end+0xf8006054>
100060e8:	3005883a 	mov	r2,r6
100060ec:	003fd706 	br	1000604c <__alt_data_end+0xf800604c>

100060f0 <memcpy>:
100060f0:	00c003c4 	movi	r3,15
100060f4:	2005883a 	mov	r2,r4
100060f8:	1980372e 	bgeu	r3,r6,100061d8 <memcpy+0xe8>
100060fc:	2146b03a 	or	r3,r4,r5
10006100:	18c000cc 	andi	r3,r3,3
10006104:	1800371e 	bne	r3,zero,100061e4 <memcpy+0xf4>
10006108:	327ffc04 	addi	r9,r6,-16
1000610c:	4812d13a 	srli	r9,r9,4
10006110:	2007883a 	mov	r3,r4
10006114:	280f883a 	mov	r7,r5
10006118:	4808913a 	slli	r4,r9,4
1000611c:	1109883a 	add	r4,r2,r4
10006120:	21000404 	addi	r4,r4,16
10006124:	3a000017 	ldw	r8,0(r7)
10006128:	18c00404 	addi	r3,r3,16
1000612c:	39c00404 	addi	r7,r7,16
10006130:	1a3ffc15 	stw	r8,-16(r3)
10006134:	3a3ffd17 	ldw	r8,-12(r7)
10006138:	1a3ffd15 	stw	r8,-12(r3)
1000613c:	3a3ffe17 	ldw	r8,-8(r7)
10006140:	1a3ffe15 	stw	r8,-8(r3)
10006144:	3a3fff17 	ldw	r8,-4(r7)
10006148:	1a3fff15 	stw	r8,-4(r3)
1000614c:	193ff51e 	bne	r3,r4,10006124 <__alt_data_end+0xf8006124>
10006150:	49000044 	addi	r4,r9,1
10006154:	2008913a 	slli	r4,r4,4
10006158:	328003cc 	andi	r10,r6,15
1000615c:	1107883a 	add	r3,r2,r4
10006160:	290b883a 	add	r5,r5,r4
10006164:	010000c4 	movi	r4,3
10006168:	2280212e 	bgeu	r4,r10,100061f0 <memcpy+0x100>
1000616c:	52bfff04 	addi	r10,r10,-4
10006170:	5014d0ba 	srli	r10,r10,2
10006174:	180f883a 	mov	r7,r3
10006178:	2811883a 	mov	r8,r5
1000617c:	5289883a 	add	r4,r10,r10
10006180:	2109883a 	add	r4,r4,r4
10006184:	21000104 	addi	r4,r4,4
10006188:	1909883a 	add	r4,r3,r4
1000618c:	42400017 	ldw	r9,0(r8)
10006190:	39c00104 	addi	r7,r7,4
10006194:	42000104 	addi	r8,r8,4
10006198:	3a7fff15 	stw	r9,-4(r7)
1000619c:	393ffb1e 	bne	r7,r4,1000618c <__alt_data_end+0xf800618c>
100061a0:	51000044 	addi	r4,r10,1
100061a4:	2109883a 	add	r4,r4,r4
100061a8:	2109883a 	add	r4,r4,r4
100061ac:	318000cc 	andi	r6,r6,3
100061b0:	1907883a 	add	r3,r3,r4
100061b4:	290b883a 	add	r5,r5,r4
100061b8:	30000c26 	beq	r6,zero,100061ec <memcpy+0xfc>
100061bc:	298d883a 	add	r6,r5,r6
100061c0:	29c00003 	ldbu	r7,0(r5)
100061c4:	18c00044 	addi	r3,r3,1
100061c8:	29400044 	addi	r5,r5,1
100061cc:	19ffffc5 	stb	r7,-1(r3)
100061d0:	29bffb1e 	bne	r5,r6,100061c0 <__alt_data_end+0xf80061c0>
100061d4:	f800283a 	ret
100061d8:	2007883a 	mov	r3,r4
100061dc:	303ff71e 	bne	r6,zero,100061bc <__alt_data_end+0xf80061bc>
100061e0:	00000206 	br	100061ec <memcpy+0xfc>
100061e4:	2007883a 	mov	r3,r4
100061e8:	003ff406 	br	100061bc <__alt_data_end+0xf80061bc>
100061ec:	f800283a 	ret
100061f0:	500d883a 	mov	r6,r10
100061f4:	303ff11e 	bne	r6,zero,100061bc <__alt_data_end+0xf80061bc>
100061f8:	003ffc06 	br	100061ec <__alt_data_end+0xf80061ec>

100061fc <memset>:
100061fc:	20c000cc 	andi	r3,r4,3
10006200:	2005883a 	mov	r2,r4
10006204:	18003f26 	beq	r3,zero,10006304 <memset+0x108>
10006208:	31ffffc4 	addi	r7,r6,-1
1000620c:	30003b26 	beq	r6,zero,100062fc <memset+0x100>
10006210:	2813883a 	mov	r9,r5
10006214:	200d883a 	mov	r6,r4
10006218:	2007883a 	mov	r3,r4
1000621c:	00000406 	br	10006230 <memset+0x34>
10006220:	3a3fffc4 	addi	r8,r7,-1
10006224:	31800044 	addi	r6,r6,1
10006228:	38003426 	beq	r7,zero,100062fc <memset+0x100>
1000622c:	400f883a 	mov	r7,r8
10006230:	18c00044 	addi	r3,r3,1
10006234:	32400005 	stb	r9,0(r6)
10006238:	1a0000cc 	andi	r8,r3,3
1000623c:	403ff81e 	bne	r8,zero,10006220 <__alt_data_end+0xf8006220>
10006240:	010000c4 	movi	r4,3
10006244:	21c0282e 	bgeu	r4,r7,100062e8 <memset+0xec>
10006248:	29003fcc 	andi	r4,r5,255
1000624c:	2010923a 	slli	r8,r4,8
10006250:	4108b03a 	or	r4,r8,r4
10006254:	2010943a 	slli	r8,r4,16
10006258:	4110b03a 	or	r8,r8,r4
1000625c:	010003c4 	movi	r4,15
10006260:	21c0122e 	bgeu	r4,r7,100062ac <memset+0xb0>
10006264:	3a7ffc04 	addi	r9,r7,-16
10006268:	4812d13a 	srli	r9,r9,4
1000626c:	19000404 	addi	r4,r3,16
10006270:	180d883a 	mov	r6,r3
10006274:	4814913a 	slli	r10,r9,4
10006278:	2289883a 	add	r4,r4,r10
1000627c:	32000015 	stw	r8,0(r6)
10006280:	32000115 	stw	r8,4(r6)
10006284:	32000215 	stw	r8,8(r6)
10006288:	32000315 	stw	r8,12(r6)
1000628c:	31800404 	addi	r6,r6,16
10006290:	313ffa1e 	bne	r6,r4,1000627c <__alt_data_end+0xf800627c>
10006294:	4a400044 	addi	r9,r9,1
10006298:	4812913a 	slli	r9,r9,4
1000629c:	39c003cc 	andi	r7,r7,15
100062a0:	010000c4 	movi	r4,3
100062a4:	1a47883a 	add	r3,r3,r9
100062a8:	21c00f2e 	bgeu	r4,r7,100062e8 <memset+0xec>
100062ac:	3a7fff04 	addi	r9,r7,-4
100062b0:	4812d0ba 	srli	r9,r9,2
100062b4:	19000104 	addi	r4,r3,4
100062b8:	180d883a 	mov	r6,r3
100062bc:	4a55883a 	add	r10,r9,r9
100062c0:	5295883a 	add	r10,r10,r10
100062c4:	2289883a 	add	r4,r4,r10
100062c8:	32000015 	stw	r8,0(r6)
100062cc:	31800104 	addi	r6,r6,4
100062d0:	313ffd1e 	bne	r6,r4,100062c8 <__alt_data_end+0xf80062c8>
100062d4:	4a400044 	addi	r9,r9,1
100062d8:	4a53883a 	add	r9,r9,r9
100062dc:	4a53883a 	add	r9,r9,r9
100062e0:	1a47883a 	add	r3,r3,r9
100062e4:	39c000cc 	andi	r7,r7,3
100062e8:	38000526 	beq	r7,zero,10006300 <memset+0x104>
100062ec:	19cf883a 	add	r7,r3,r7
100062f0:	19400005 	stb	r5,0(r3)
100062f4:	18c00044 	addi	r3,r3,1
100062f8:	19fffd1e 	bne	r3,r7,100062f0 <__alt_data_end+0xf80062f0>
100062fc:	f800283a 	ret
10006300:	f800283a 	ret
10006304:	2007883a 	mov	r3,r4
10006308:	300f883a 	mov	r7,r6
1000630c:	003fcc06 	br	10006240 <__alt_data_end+0xf8006240>

10006310 <_Balloc>:
10006310:	20801317 	ldw	r2,76(r4)
10006314:	defffc04 	addi	sp,sp,-16
10006318:	dc400115 	stw	r17,4(sp)
1000631c:	dc000015 	stw	r16,0(sp)
10006320:	dfc00315 	stw	ra,12(sp)
10006324:	dc800215 	stw	r18,8(sp)
10006328:	2023883a 	mov	r17,r4
1000632c:	2821883a 	mov	r16,r5
10006330:	10000f26 	beq	r2,zero,10006370 <_Balloc+0x60>
10006334:	8407883a 	add	r3,r16,r16
10006338:	18c7883a 	add	r3,r3,r3
1000633c:	10c7883a 	add	r3,r2,r3
10006340:	18800017 	ldw	r2,0(r3)
10006344:	10001126 	beq	r2,zero,1000638c <_Balloc+0x7c>
10006348:	11000017 	ldw	r4,0(r2)
1000634c:	19000015 	stw	r4,0(r3)
10006350:	10000415 	stw	zero,16(r2)
10006354:	10000315 	stw	zero,12(r2)
10006358:	dfc00317 	ldw	ra,12(sp)
1000635c:	dc800217 	ldw	r18,8(sp)
10006360:	dc400117 	ldw	r17,4(sp)
10006364:	dc000017 	ldw	r16,0(sp)
10006368:	dec00404 	addi	sp,sp,16
1000636c:	f800283a 	ret
10006370:	01400104 	movi	r5,4
10006374:	01800844 	movi	r6,33
10006378:	0008cc00 	call	10008cc0 <_calloc_r>
1000637c:	88801315 	stw	r2,76(r17)
10006380:	103fec1e 	bne	r2,zero,10006334 <__alt_data_end+0xf8006334>
10006384:	0005883a 	mov	r2,zero
10006388:	003ff306 	br	10006358 <__alt_data_end+0xf8006358>
1000638c:	01400044 	movi	r5,1
10006390:	2c24983a 	sll	r18,r5,r16
10006394:	8809883a 	mov	r4,r17
10006398:	91800144 	addi	r6,r18,5
1000639c:	318d883a 	add	r6,r6,r6
100063a0:	318d883a 	add	r6,r6,r6
100063a4:	0008cc00 	call	10008cc0 <_calloc_r>
100063a8:	103ff626 	beq	r2,zero,10006384 <__alt_data_end+0xf8006384>
100063ac:	14000115 	stw	r16,4(r2)
100063b0:	14800215 	stw	r18,8(r2)
100063b4:	003fe606 	br	10006350 <__alt_data_end+0xf8006350>

100063b8 <_Bfree>:
100063b8:	28000826 	beq	r5,zero,100063dc <_Bfree+0x24>
100063bc:	28c00117 	ldw	r3,4(r5)
100063c0:	20801317 	ldw	r2,76(r4)
100063c4:	18c7883a 	add	r3,r3,r3
100063c8:	18c7883a 	add	r3,r3,r3
100063cc:	10c5883a 	add	r2,r2,r3
100063d0:	10c00017 	ldw	r3,0(r2)
100063d4:	28c00015 	stw	r3,0(r5)
100063d8:	11400015 	stw	r5,0(r2)
100063dc:	f800283a 	ret

100063e0 <__multadd>:
100063e0:	defff604 	addi	sp,sp,-40
100063e4:	dd400515 	stw	r21,20(sp)
100063e8:	2d400417 	ldw	r21,16(r5)
100063ec:	df000815 	stw	fp,32(sp)
100063f0:	ddc00715 	stw	r23,28(sp)
100063f4:	dd800615 	stw	r22,24(sp)
100063f8:	dd000415 	stw	r20,16(sp)
100063fc:	dc400115 	stw	r17,4(sp)
10006400:	dc000015 	stw	r16,0(sp)
10006404:	dfc00915 	stw	ra,36(sp)
10006408:	dcc00315 	stw	r19,12(sp)
1000640c:	dc800215 	stw	r18,8(sp)
10006410:	282d883a 	mov	r22,r5
10006414:	202f883a 	mov	r23,r4
10006418:	3029883a 	mov	r20,r6
1000641c:	3839883a 	mov	fp,r7
10006420:	2c000504 	addi	r16,r5,20
10006424:	0023883a 	mov	r17,zero
10006428:	84c00017 	ldw	r19,0(r16)
1000642c:	a00b883a 	mov	r5,r20
10006430:	8c400044 	addi	r17,r17,1
10006434:	993fffcc 	andi	r4,r19,65535
10006438:	000aef80 	call	1000aef8 <__mulsi3>
1000643c:	1725883a 	add	r18,r2,fp
10006440:	9808d43a 	srli	r4,r19,16
10006444:	9026d43a 	srli	r19,r18,16
10006448:	a00b883a 	mov	r5,r20
1000644c:	000aef80 	call	1000aef8 <__mulsi3>
10006450:	988f883a 	add	r7,r19,r2
10006454:	3804943a 	slli	r2,r7,16
10006458:	94bfffcc 	andi	r18,r18,65535
1000645c:	3838d43a 	srli	fp,r7,16
10006460:	14a5883a 	add	r18,r2,r18
10006464:	84800015 	stw	r18,0(r16)
10006468:	84000104 	addi	r16,r16,4
1000646c:	8d7fee16 	blt	r17,r21,10006428 <__alt_data_end+0xf8006428>
10006470:	e0000926 	beq	fp,zero,10006498 <__multadd+0xb8>
10006474:	b0800217 	ldw	r2,8(r22)
10006478:	a880140e 	bge	r21,r2,100064cc <__multadd+0xec>
1000647c:	a8800144 	addi	r2,r21,5
10006480:	1085883a 	add	r2,r2,r2
10006484:	1085883a 	add	r2,r2,r2
10006488:	b085883a 	add	r2,r22,r2
1000648c:	17000015 	stw	fp,0(r2)
10006490:	ad400044 	addi	r21,r21,1
10006494:	b5400415 	stw	r21,16(r22)
10006498:	b005883a 	mov	r2,r22
1000649c:	dfc00917 	ldw	ra,36(sp)
100064a0:	df000817 	ldw	fp,32(sp)
100064a4:	ddc00717 	ldw	r23,28(sp)
100064a8:	dd800617 	ldw	r22,24(sp)
100064ac:	dd400517 	ldw	r21,20(sp)
100064b0:	dd000417 	ldw	r20,16(sp)
100064b4:	dcc00317 	ldw	r19,12(sp)
100064b8:	dc800217 	ldw	r18,8(sp)
100064bc:	dc400117 	ldw	r17,4(sp)
100064c0:	dc000017 	ldw	r16,0(sp)
100064c4:	dec00a04 	addi	sp,sp,40
100064c8:	f800283a 	ret
100064cc:	b1400117 	ldw	r5,4(r22)
100064d0:	b809883a 	mov	r4,r23
100064d4:	29400044 	addi	r5,r5,1
100064d8:	00063100 	call	10006310 <_Balloc>
100064dc:	b1800417 	ldw	r6,16(r22)
100064e0:	b1400304 	addi	r5,r22,12
100064e4:	11000304 	addi	r4,r2,12
100064e8:	31800084 	addi	r6,r6,2
100064ec:	318d883a 	add	r6,r6,r6
100064f0:	318d883a 	add	r6,r6,r6
100064f4:	1021883a 	mov	r16,r2
100064f8:	00060f00 	call	100060f0 <memcpy>
100064fc:	b0c00117 	ldw	r3,4(r22)
10006500:	b8801317 	ldw	r2,76(r23)
10006504:	18c7883a 	add	r3,r3,r3
10006508:	18c7883a 	add	r3,r3,r3
1000650c:	10c5883a 	add	r2,r2,r3
10006510:	10c00017 	ldw	r3,0(r2)
10006514:	b0c00015 	stw	r3,0(r22)
10006518:	15800015 	stw	r22,0(r2)
1000651c:	802d883a 	mov	r22,r16
10006520:	003fd606 	br	1000647c <__alt_data_end+0xf800647c>

10006524 <__s2b>:
10006524:	defff904 	addi	sp,sp,-28
10006528:	dd000415 	stw	r20,16(sp)
1000652c:	dc400115 	stw	r17,4(sp)
10006530:	2829883a 	mov	r20,r5
10006534:	2023883a 	mov	r17,r4
10006538:	01400244 	movi	r5,9
1000653c:	39000204 	addi	r4,r7,8
10006540:	dcc00315 	stw	r19,12(sp)
10006544:	dc800215 	stw	r18,8(sp)
10006548:	dfc00615 	stw	ra,24(sp)
1000654c:	dd400515 	stw	r21,20(sp)
10006550:	dc000015 	stw	r16,0(sp)
10006554:	3827883a 	mov	r19,r7
10006558:	3025883a 	mov	r18,r6
1000655c:	000ae540 	call	1000ae54 <__divsi3>
10006560:	00c00044 	movi	r3,1
10006564:	000b883a 	mov	r5,zero
10006568:	1880030e 	bge	r3,r2,10006578 <__s2b+0x54>
1000656c:	18c7883a 	add	r3,r3,r3
10006570:	29400044 	addi	r5,r5,1
10006574:	18bffd16 	blt	r3,r2,1000656c <__alt_data_end+0xf800656c>
10006578:	8809883a 	mov	r4,r17
1000657c:	00063100 	call	10006310 <_Balloc>
10006580:	d8c00717 	ldw	r3,28(sp)
10006584:	10c00515 	stw	r3,20(r2)
10006588:	00c00044 	movi	r3,1
1000658c:	10c00415 	stw	r3,16(r2)
10006590:	00c00244 	movi	r3,9
10006594:	1c80210e 	bge	r3,r18,1000661c <__s2b+0xf8>
10006598:	a0eb883a 	add	r21,r20,r3
1000659c:	a821883a 	mov	r16,r21
100065a0:	a4a9883a 	add	r20,r20,r18
100065a4:	81c00007 	ldb	r7,0(r16)
100065a8:	8809883a 	mov	r4,r17
100065ac:	84000044 	addi	r16,r16,1
100065b0:	100b883a 	mov	r5,r2
100065b4:	01800284 	movi	r6,10
100065b8:	39fff404 	addi	r7,r7,-48
100065bc:	00063e00 	call	100063e0 <__multadd>
100065c0:	853ff81e 	bne	r16,r20,100065a4 <__alt_data_end+0xf80065a4>
100065c4:	aca1883a 	add	r16,r21,r18
100065c8:	843ffe04 	addi	r16,r16,-8
100065cc:	94c00a0e 	bge	r18,r19,100065f8 <__s2b+0xd4>
100065d0:	84e7883a 	add	r19,r16,r19
100065d4:	9ca5c83a 	sub	r18,r19,r18
100065d8:	81c00007 	ldb	r7,0(r16)
100065dc:	8809883a 	mov	r4,r17
100065e0:	84000044 	addi	r16,r16,1
100065e4:	100b883a 	mov	r5,r2
100065e8:	01800284 	movi	r6,10
100065ec:	39fff404 	addi	r7,r7,-48
100065f0:	00063e00 	call	100063e0 <__multadd>
100065f4:	84bff81e 	bne	r16,r18,100065d8 <__alt_data_end+0xf80065d8>
100065f8:	dfc00617 	ldw	ra,24(sp)
100065fc:	dd400517 	ldw	r21,20(sp)
10006600:	dd000417 	ldw	r20,16(sp)
10006604:	dcc00317 	ldw	r19,12(sp)
10006608:	dc800217 	ldw	r18,8(sp)
1000660c:	dc400117 	ldw	r17,4(sp)
10006610:	dc000017 	ldw	r16,0(sp)
10006614:	dec00704 	addi	sp,sp,28
10006618:	f800283a 	ret
1000661c:	a4000284 	addi	r16,r20,10
10006620:	1825883a 	mov	r18,r3
10006624:	003fe906 	br	100065cc <__alt_data_end+0xf80065cc>

10006628 <__hi0bits>:
10006628:	20bfffec 	andhi	r2,r4,65535
1000662c:	1000141e 	bne	r2,zero,10006680 <__hi0bits+0x58>
10006630:	2008943a 	slli	r4,r4,16
10006634:	00800404 	movi	r2,16
10006638:	20ffc02c 	andhi	r3,r4,65280
1000663c:	1800021e 	bne	r3,zero,10006648 <__hi0bits+0x20>
10006640:	2008923a 	slli	r4,r4,8
10006644:	10800204 	addi	r2,r2,8
10006648:	20fc002c 	andhi	r3,r4,61440
1000664c:	1800021e 	bne	r3,zero,10006658 <__hi0bits+0x30>
10006650:	2008913a 	slli	r4,r4,4
10006654:	10800104 	addi	r2,r2,4
10006658:	20f0002c 	andhi	r3,r4,49152
1000665c:	1800031e 	bne	r3,zero,1000666c <__hi0bits+0x44>
10006660:	2109883a 	add	r4,r4,r4
10006664:	10800084 	addi	r2,r2,2
10006668:	2109883a 	add	r4,r4,r4
1000666c:	20000316 	blt	r4,zero,1000667c <__hi0bits+0x54>
10006670:	2110002c 	andhi	r4,r4,16384
10006674:	2000041e 	bne	r4,zero,10006688 <__hi0bits+0x60>
10006678:	00800804 	movi	r2,32
1000667c:	f800283a 	ret
10006680:	0005883a 	mov	r2,zero
10006684:	003fec06 	br	10006638 <__alt_data_end+0xf8006638>
10006688:	10800044 	addi	r2,r2,1
1000668c:	f800283a 	ret

10006690 <__lo0bits>:
10006690:	20c00017 	ldw	r3,0(r4)
10006694:	188001cc 	andi	r2,r3,7
10006698:	10000826 	beq	r2,zero,100066bc <__lo0bits+0x2c>
1000669c:	1880004c 	andi	r2,r3,1
100066a0:	1000211e 	bne	r2,zero,10006728 <__lo0bits+0x98>
100066a4:	1880008c 	andi	r2,r3,2
100066a8:	1000211e 	bne	r2,zero,10006730 <__lo0bits+0xa0>
100066ac:	1806d0ba 	srli	r3,r3,2
100066b0:	00800084 	movi	r2,2
100066b4:	20c00015 	stw	r3,0(r4)
100066b8:	f800283a 	ret
100066bc:	18bfffcc 	andi	r2,r3,65535
100066c0:	10001326 	beq	r2,zero,10006710 <__lo0bits+0x80>
100066c4:	0005883a 	mov	r2,zero
100066c8:	19403fcc 	andi	r5,r3,255
100066cc:	2800021e 	bne	r5,zero,100066d8 <__lo0bits+0x48>
100066d0:	1806d23a 	srli	r3,r3,8
100066d4:	10800204 	addi	r2,r2,8
100066d8:	194003cc 	andi	r5,r3,15
100066dc:	2800021e 	bne	r5,zero,100066e8 <__lo0bits+0x58>
100066e0:	1806d13a 	srli	r3,r3,4
100066e4:	10800104 	addi	r2,r2,4
100066e8:	194000cc 	andi	r5,r3,3
100066ec:	2800021e 	bne	r5,zero,100066f8 <__lo0bits+0x68>
100066f0:	1806d0ba 	srli	r3,r3,2
100066f4:	10800084 	addi	r2,r2,2
100066f8:	1940004c 	andi	r5,r3,1
100066fc:	2800081e 	bne	r5,zero,10006720 <__lo0bits+0x90>
10006700:	1806d07a 	srli	r3,r3,1
10006704:	1800051e 	bne	r3,zero,1000671c <__lo0bits+0x8c>
10006708:	00800804 	movi	r2,32
1000670c:	f800283a 	ret
10006710:	1806d43a 	srli	r3,r3,16
10006714:	00800404 	movi	r2,16
10006718:	003feb06 	br	100066c8 <__alt_data_end+0xf80066c8>
1000671c:	10800044 	addi	r2,r2,1
10006720:	20c00015 	stw	r3,0(r4)
10006724:	f800283a 	ret
10006728:	0005883a 	mov	r2,zero
1000672c:	f800283a 	ret
10006730:	1806d07a 	srli	r3,r3,1
10006734:	00800044 	movi	r2,1
10006738:	20c00015 	stw	r3,0(r4)
1000673c:	f800283a 	ret

10006740 <__i2b>:
10006740:	defffd04 	addi	sp,sp,-12
10006744:	dc000015 	stw	r16,0(sp)
10006748:	04000044 	movi	r16,1
1000674c:	dc400115 	stw	r17,4(sp)
10006750:	2823883a 	mov	r17,r5
10006754:	800b883a 	mov	r5,r16
10006758:	dfc00215 	stw	ra,8(sp)
1000675c:	00063100 	call	10006310 <_Balloc>
10006760:	14400515 	stw	r17,20(r2)
10006764:	14000415 	stw	r16,16(r2)
10006768:	dfc00217 	ldw	ra,8(sp)
1000676c:	dc400117 	ldw	r17,4(sp)
10006770:	dc000017 	ldw	r16,0(sp)
10006774:	dec00304 	addi	sp,sp,12
10006778:	f800283a 	ret

1000677c <__multiply>:
1000677c:	defff004 	addi	sp,sp,-64
10006780:	dc400715 	stw	r17,28(sp)
10006784:	dc000615 	stw	r16,24(sp)
10006788:	34400417 	ldw	r17,16(r6)
1000678c:	2c000417 	ldw	r16,16(r5)
10006790:	df000e15 	stw	fp,56(sp)
10006794:	dd000a15 	stw	r20,40(sp)
10006798:	dfc00f15 	stw	ra,60(sp)
1000679c:	ddc00d15 	stw	r23,52(sp)
100067a0:	dd800c15 	stw	r22,48(sp)
100067a4:	dd400b15 	stw	r21,44(sp)
100067a8:	dcc00915 	stw	r19,36(sp)
100067ac:	dc800815 	stw	r18,32(sp)
100067b0:	2839883a 	mov	fp,r5
100067b4:	3029883a 	mov	r20,r6
100067b8:	8440050e 	bge	r16,r17,100067d0 <__multiply+0x54>
100067bc:	8007883a 	mov	r3,r16
100067c0:	3039883a 	mov	fp,r6
100067c4:	8821883a 	mov	r16,r17
100067c8:	2829883a 	mov	r20,r5
100067cc:	1823883a 	mov	r17,r3
100067d0:	e0800217 	ldw	r2,8(fp)
100067d4:	8447883a 	add	r3,r16,r17
100067d8:	d8c00115 	stw	r3,4(sp)
100067dc:	e1400117 	ldw	r5,4(fp)
100067e0:	10c0010e 	bge	r2,r3,100067e8 <__multiply+0x6c>
100067e4:	29400044 	addi	r5,r5,1
100067e8:	00063100 	call	10006310 <_Balloc>
100067ec:	d8c00117 	ldw	r3,4(sp)
100067f0:	d8800515 	stw	r2,20(sp)
100067f4:	18ef883a 	add	r23,r3,r3
100067f8:	bdef883a 	add	r23,r23,r23
100067fc:	10c00504 	addi	r3,r2,20
10006800:	1def883a 	add	r23,r3,r23
10006804:	d8c00015 	stw	r3,0(sp)
10006808:	ddc00215 	stw	r23,8(sp)
1000680c:	1805883a 	mov	r2,r3
10006810:	1dc0042e 	bgeu	r3,r23,10006824 <__multiply+0xa8>
10006814:	d8c00217 	ldw	r3,8(sp)
10006818:	10000015 	stw	zero,0(r2)
1000681c:	10800104 	addi	r2,r2,4
10006820:	10fffc36 	bltu	r2,r3,10006814 <__alt_data_end+0xf8006814>
10006824:	8c63883a 	add	r17,r17,r17
10006828:	a5000504 	addi	r20,r20,20
1000682c:	8c63883a 	add	r17,r17,r17
10006830:	e7000504 	addi	fp,fp,20
10006834:	8421883a 	add	r16,r16,r16
10006838:	a463883a 	add	r17,r20,r17
1000683c:	8421883a 	add	r16,r16,r16
10006840:	df000315 	stw	fp,12(sp)
10006844:	dc400415 	stw	r17,16(sp)
10006848:	e425883a 	add	r18,fp,r16
1000684c:	a440482e 	bgeu	r20,r17,10006970 <__multiply+0x1f4>
10006850:	a4000017 	ldw	r16,0(r20)
10006854:	847fffcc 	andi	r17,r16,65535
10006858:	88001d26 	beq	r17,zero,100068d0 <__multiply+0x154>
1000685c:	dc000017 	ldw	r16,0(sp)
10006860:	dcc00317 	ldw	r19,12(sp)
10006864:	002b883a 	mov	r21,zero
10006868:	9dc00017 	ldw	r23,0(r19)
1000686c:	85800017 	ldw	r22,0(r16)
10006870:	880b883a 	mov	r5,r17
10006874:	b93fffcc 	andi	r4,r23,65535
10006878:	000aef80 	call	1000aef8 <__mulsi3>
1000687c:	b808d43a 	srli	r4,r23,16
10006880:	b0ffffcc 	andi	r3,r22,65535
10006884:	1885883a 	add	r2,r3,r2
10006888:	880b883a 	mov	r5,r17
1000688c:	156b883a 	add	r21,r2,r21
10006890:	b02cd43a 	srli	r22,r22,16
10006894:	000aef80 	call	1000aef8 <__mulsi3>
10006898:	a808d43a 	srli	r4,r21,16
1000689c:	b085883a 	add	r2,r22,r2
100068a0:	a8ffffcc 	andi	r3,r21,65535
100068a4:	110d883a 	add	r6,r2,r4
100068a8:	3004943a 	slli	r2,r6,16
100068ac:	9cc00104 	addi	r19,r19,4
100068b0:	8009883a 	mov	r4,r16
100068b4:	10c6b03a 	or	r3,r2,r3
100068b8:	80c00015 	stw	r3,0(r16)
100068bc:	302ad43a 	srli	r21,r6,16
100068c0:	84000104 	addi	r16,r16,4
100068c4:	9cbfe836 	bltu	r19,r18,10006868 <__alt_data_end+0xf8006868>
100068c8:	25400115 	stw	r21,4(r4)
100068cc:	a4000017 	ldw	r16,0(r20)
100068d0:	8020d43a 	srli	r16,r16,16
100068d4:	80002026 	beq	r16,zero,10006958 <__multiply+0x1dc>
100068d8:	d8c00017 	ldw	r3,0(sp)
100068dc:	dd400317 	ldw	r21,12(sp)
100068e0:	002f883a 	mov	r23,zero
100068e4:	1f000017 	ldw	fp,0(r3)
100068e8:	182d883a 	mov	r22,r3
100068ec:	e023883a 	mov	r17,fp
100068f0:	a900000b 	ldhu	r4,0(r21)
100068f4:	8822d43a 	srli	r17,r17,16
100068f8:	800b883a 	mov	r5,r16
100068fc:	000aef80 	call	1000aef8 <__mulsi3>
10006900:	1445883a 	add	r2,r2,r17
10006904:	15ef883a 	add	r23,r2,r23
10006908:	b804943a 	slli	r2,r23,16
1000690c:	e1ffffcc 	andi	r7,fp,65535
10006910:	ad400104 	addi	r21,r21,4
10006914:	11ceb03a 	or	r7,r2,r7
10006918:	b1c00015 	stw	r7,0(r22)
1000691c:	a93fff17 	ldw	r4,-4(r21)
10006920:	b7000117 	ldw	fp,4(r22)
10006924:	800b883a 	mov	r5,r16
10006928:	2008d43a 	srli	r4,r4,16
1000692c:	e023883a 	mov	r17,fp
10006930:	b027883a 	mov	r19,r22
10006934:	000aef80 	call	1000aef8 <__mulsi3>
10006938:	b812d43a 	srli	r9,r23,16
1000693c:	e23fffcc 	andi	r8,fp,65535
10006940:	1205883a 	add	r2,r2,r8
10006944:	1279883a 	add	fp,r2,r9
10006948:	b5800104 	addi	r22,r22,4
1000694c:	e02ed43a 	srli	r23,fp,16
10006950:	acbfe736 	bltu	r21,r18,100068f0 <__alt_data_end+0xf80068f0>
10006954:	9f000115 	stw	fp,4(r19)
10006958:	d8c00017 	ldw	r3,0(sp)
1000695c:	a5000104 	addi	r20,r20,4
10006960:	18c00104 	addi	r3,r3,4
10006964:	d8c00015 	stw	r3,0(sp)
10006968:	d8c00417 	ldw	r3,16(sp)
1000696c:	a0ffb836 	bltu	r20,r3,10006850 <__alt_data_end+0xf8006850>
10006970:	d8c00117 	ldw	r3,4(sp)
10006974:	00c00c0e 	bge	zero,r3,100069a8 <__multiply+0x22c>
10006978:	d8c00217 	ldw	r3,8(sp)
1000697c:	18bfff17 	ldw	r2,-4(r3)
10006980:	1dffff04 	addi	r23,r3,-4
10006984:	10000326 	beq	r2,zero,10006994 <__multiply+0x218>
10006988:	00000706 	br	100069a8 <__multiply+0x22c>
1000698c:	b8800017 	ldw	r2,0(r23)
10006990:	1000051e 	bne	r2,zero,100069a8 <__multiply+0x22c>
10006994:	d8c00117 	ldw	r3,4(sp)
10006998:	bdffff04 	addi	r23,r23,-4
1000699c:	18ffffc4 	addi	r3,r3,-1
100069a0:	d8c00115 	stw	r3,4(sp)
100069a4:	183ff91e 	bne	r3,zero,1000698c <__alt_data_end+0xf800698c>
100069a8:	d8c00517 	ldw	r3,20(sp)
100069ac:	d9000117 	ldw	r4,4(sp)
100069b0:	1805883a 	mov	r2,r3
100069b4:	19000415 	stw	r4,16(r3)
100069b8:	dfc00f17 	ldw	ra,60(sp)
100069bc:	df000e17 	ldw	fp,56(sp)
100069c0:	ddc00d17 	ldw	r23,52(sp)
100069c4:	dd800c17 	ldw	r22,48(sp)
100069c8:	dd400b17 	ldw	r21,44(sp)
100069cc:	dd000a17 	ldw	r20,40(sp)
100069d0:	dcc00917 	ldw	r19,36(sp)
100069d4:	dc800817 	ldw	r18,32(sp)
100069d8:	dc400717 	ldw	r17,28(sp)
100069dc:	dc000617 	ldw	r16,24(sp)
100069e0:	dec01004 	addi	sp,sp,64
100069e4:	f800283a 	ret

100069e8 <__pow5mult>:
100069e8:	defffa04 	addi	sp,sp,-24
100069ec:	dcc00315 	stw	r19,12(sp)
100069f0:	dc800215 	stw	r18,8(sp)
100069f4:	dc000015 	stw	r16,0(sp)
100069f8:	dfc00515 	stw	ra,20(sp)
100069fc:	dd000415 	stw	r20,16(sp)
10006a00:	dc400115 	stw	r17,4(sp)
10006a04:	308000cc 	andi	r2,r6,3
10006a08:	3021883a 	mov	r16,r6
10006a0c:	2027883a 	mov	r19,r4
10006a10:	2825883a 	mov	r18,r5
10006a14:	1000301e 	bne	r2,zero,10006ad8 <__pow5mult+0xf0>
10006a18:	8021d0ba 	srai	r16,r16,2
10006a1c:	80001b26 	beq	r16,zero,10006a8c <__pow5mult+0xa4>
10006a20:	9c401217 	ldw	r17,72(r19)
10006a24:	88003726 	beq	r17,zero,10006b04 <__pow5mult+0x11c>
10006a28:	80c0004c 	andi	r3,r16,1
10006a2c:	1800071e 	bne	r3,zero,10006a4c <__pow5mult+0x64>
10006a30:	8021d07a 	srai	r16,r16,1
10006a34:	80001526 	beq	r16,zero,10006a8c <__pow5mult+0xa4>
10006a38:	88800017 	ldw	r2,0(r17)
10006a3c:	10001c26 	beq	r2,zero,10006ab0 <__pow5mult+0xc8>
10006a40:	1023883a 	mov	r17,r2
10006a44:	80c0004c 	andi	r3,r16,1
10006a48:	183ff926 	beq	r3,zero,10006a30 <__alt_data_end+0xf8006a30>
10006a4c:	900b883a 	mov	r5,r18
10006a50:	880d883a 	mov	r6,r17
10006a54:	9809883a 	mov	r4,r19
10006a58:	000677c0 	call	1000677c <__multiply>
10006a5c:	90001c26 	beq	r18,zero,10006ad0 <__pow5mult+0xe8>
10006a60:	91000117 	ldw	r4,4(r18)
10006a64:	98c01317 	ldw	r3,76(r19)
10006a68:	8021d07a 	srai	r16,r16,1
10006a6c:	2109883a 	add	r4,r4,r4
10006a70:	2109883a 	add	r4,r4,r4
10006a74:	1907883a 	add	r3,r3,r4
10006a78:	19000017 	ldw	r4,0(r3)
10006a7c:	91000015 	stw	r4,0(r18)
10006a80:	1c800015 	stw	r18,0(r3)
10006a84:	1025883a 	mov	r18,r2
10006a88:	803feb1e 	bne	r16,zero,10006a38 <__alt_data_end+0xf8006a38>
10006a8c:	9005883a 	mov	r2,r18
10006a90:	dfc00517 	ldw	ra,20(sp)
10006a94:	dd000417 	ldw	r20,16(sp)
10006a98:	dcc00317 	ldw	r19,12(sp)
10006a9c:	dc800217 	ldw	r18,8(sp)
10006aa0:	dc400117 	ldw	r17,4(sp)
10006aa4:	dc000017 	ldw	r16,0(sp)
10006aa8:	dec00604 	addi	sp,sp,24
10006aac:	f800283a 	ret
10006ab0:	880b883a 	mov	r5,r17
10006ab4:	880d883a 	mov	r6,r17
10006ab8:	9809883a 	mov	r4,r19
10006abc:	000677c0 	call	1000677c <__multiply>
10006ac0:	88800015 	stw	r2,0(r17)
10006ac4:	10000015 	stw	zero,0(r2)
10006ac8:	1023883a 	mov	r17,r2
10006acc:	003fdd06 	br	10006a44 <__alt_data_end+0xf8006a44>
10006ad0:	1025883a 	mov	r18,r2
10006ad4:	003fd606 	br	10006a30 <__alt_data_end+0xf8006a30>
10006ad8:	10bfffc4 	addi	r2,r2,-1
10006adc:	1085883a 	add	r2,r2,r2
10006ae0:	00c40074 	movhi	r3,4097
10006ae4:	18ff7604 	addi	r3,r3,-552
10006ae8:	1085883a 	add	r2,r2,r2
10006aec:	1885883a 	add	r2,r3,r2
10006af0:	11800017 	ldw	r6,0(r2)
10006af4:	000f883a 	mov	r7,zero
10006af8:	00063e00 	call	100063e0 <__multadd>
10006afc:	1025883a 	mov	r18,r2
10006b00:	003fc506 	br	10006a18 <__alt_data_end+0xf8006a18>
10006b04:	05000044 	movi	r20,1
10006b08:	9809883a 	mov	r4,r19
10006b0c:	a00b883a 	mov	r5,r20
10006b10:	00063100 	call	10006310 <_Balloc>
10006b14:	1023883a 	mov	r17,r2
10006b18:	00809c44 	movi	r2,625
10006b1c:	88800515 	stw	r2,20(r17)
10006b20:	8d000415 	stw	r20,16(r17)
10006b24:	9c401215 	stw	r17,72(r19)
10006b28:	88000015 	stw	zero,0(r17)
10006b2c:	003fbe06 	br	10006a28 <__alt_data_end+0xf8006a28>

10006b30 <__lshift>:
10006b30:	defff904 	addi	sp,sp,-28
10006b34:	dd000415 	stw	r20,16(sp)
10006b38:	dc400115 	stw	r17,4(sp)
10006b3c:	2d000417 	ldw	r20,16(r5)
10006b40:	3023d17a 	srai	r17,r6,5
10006b44:	28800217 	ldw	r2,8(r5)
10006b48:	dd400515 	stw	r21,20(sp)
10006b4c:	8d29883a 	add	r20,r17,r20
10006b50:	dcc00315 	stw	r19,12(sp)
10006b54:	dc800215 	stw	r18,8(sp)
10006b58:	dc000015 	stw	r16,0(sp)
10006b5c:	dfc00615 	stw	ra,24(sp)
10006b60:	a4000044 	addi	r16,r20,1
10006b64:	2825883a 	mov	r18,r5
10006b68:	302b883a 	mov	r21,r6
10006b6c:	2027883a 	mov	r19,r4
10006b70:	29400117 	ldw	r5,4(r5)
10006b74:	1400030e 	bge	r2,r16,10006b84 <__lshift+0x54>
10006b78:	1085883a 	add	r2,r2,r2
10006b7c:	29400044 	addi	r5,r5,1
10006b80:	143ffd16 	blt	r2,r16,10006b78 <__alt_data_end+0xf8006b78>
10006b84:	9809883a 	mov	r4,r19
10006b88:	00063100 	call	10006310 <_Balloc>
10006b8c:	11000504 	addi	r4,r2,20
10006b90:	0440090e 	bge	zero,r17,10006bb8 <__lshift+0x88>
10006b94:	200f883a 	mov	r7,r4
10006b98:	0007883a 	mov	r3,zero
10006b9c:	38000015 	stw	zero,0(r7)
10006ba0:	18c00044 	addi	r3,r3,1
10006ba4:	39c00104 	addi	r7,r7,4
10006ba8:	1c7ffc1e 	bne	r3,r17,10006b9c <__alt_data_end+0xf8006b9c>
10006bac:	18c7883a 	add	r3,r3,r3
10006bb0:	18c7883a 	add	r3,r3,r3
10006bb4:	20c9883a 	add	r4,r4,r3
10006bb8:	92400417 	ldw	r9,16(r18)
10006bbc:	90c00504 	addi	r3,r18,20
10006bc0:	a98007cc 	andi	r6,r21,31
10006bc4:	4a53883a 	add	r9,r9,r9
10006bc8:	4a53883a 	add	r9,r9,r9
10006bcc:	1a53883a 	add	r9,r3,r9
10006bd0:	30002426 	beq	r6,zero,10006c64 <__lshift+0x134>
10006bd4:	01400804 	movi	r5,32
10006bd8:	298bc83a 	sub	r5,r5,r6
10006bdc:	200f883a 	mov	r7,r4
10006be0:	0011883a 	mov	r8,zero
10006be4:	1a800017 	ldw	r10,0(r3)
10006be8:	3809883a 	mov	r4,r7
10006bec:	39c00104 	addi	r7,r7,4
10006bf0:	5194983a 	sll	r10,r10,r6
10006bf4:	18c00104 	addi	r3,r3,4
10006bf8:	4290b03a 	or	r8,r8,r10
10006bfc:	3a3fff15 	stw	r8,-4(r7)
10006c00:	1a3fff17 	ldw	r8,-4(r3)
10006c04:	4150d83a 	srl	r8,r8,r5
10006c08:	1a7ff636 	bltu	r3,r9,10006be4 <__alt_data_end+0xf8006be4>
10006c0c:	22000115 	stw	r8,4(r4)
10006c10:	40000126 	beq	r8,zero,10006c18 <__lshift+0xe8>
10006c14:	a4000084 	addi	r16,r20,2
10006c18:	91000117 	ldw	r4,4(r18)
10006c1c:	98c01317 	ldw	r3,76(r19)
10006c20:	843fffc4 	addi	r16,r16,-1
10006c24:	2109883a 	add	r4,r4,r4
10006c28:	2109883a 	add	r4,r4,r4
10006c2c:	1907883a 	add	r3,r3,r4
10006c30:	19000017 	ldw	r4,0(r3)
10006c34:	14000415 	stw	r16,16(r2)
10006c38:	91000015 	stw	r4,0(r18)
10006c3c:	1c800015 	stw	r18,0(r3)
10006c40:	dfc00617 	ldw	ra,24(sp)
10006c44:	dd400517 	ldw	r21,20(sp)
10006c48:	dd000417 	ldw	r20,16(sp)
10006c4c:	dcc00317 	ldw	r19,12(sp)
10006c50:	dc800217 	ldw	r18,8(sp)
10006c54:	dc400117 	ldw	r17,4(sp)
10006c58:	dc000017 	ldw	r16,0(sp)
10006c5c:	dec00704 	addi	sp,sp,28
10006c60:	f800283a 	ret
10006c64:	200f883a 	mov	r7,r4
10006c68:	19800017 	ldw	r6,0(r3)
10006c6c:	39c00104 	addi	r7,r7,4
10006c70:	18c00104 	addi	r3,r3,4
10006c74:	39bfff15 	stw	r6,-4(r7)
10006c78:	1a7ffb36 	bltu	r3,r9,10006c68 <__alt_data_end+0xf8006c68>
10006c7c:	003fe606 	br	10006c18 <__alt_data_end+0xf8006c18>

10006c80 <__mcmp>:
10006c80:	20800417 	ldw	r2,16(r4)
10006c84:	28c00417 	ldw	r3,16(r5)
10006c88:	10c5c83a 	sub	r2,r2,r3
10006c8c:	1000111e 	bne	r2,zero,10006cd4 <__mcmp+0x54>
10006c90:	18c7883a 	add	r3,r3,r3
10006c94:	18c7883a 	add	r3,r3,r3
10006c98:	21000504 	addi	r4,r4,20
10006c9c:	29400504 	addi	r5,r5,20
10006ca0:	20c5883a 	add	r2,r4,r3
10006ca4:	28cb883a 	add	r5,r5,r3
10006ca8:	00000106 	br	10006cb0 <__mcmp+0x30>
10006cac:	2080082e 	bgeu	r4,r2,10006cd0 <__mcmp+0x50>
10006cb0:	10bfff04 	addi	r2,r2,-4
10006cb4:	297fff04 	addi	r5,r5,-4
10006cb8:	11800017 	ldw	r6,0(r2)
10006cbc:	28c00017 	ldw	r3,0(r5)
10006cc0:	30fffa26 	beq	r6,r3,10006cac <__alt_data_end+0xf8006cac>
10006cc4:	30c00436 	bltu	r6,r3,10006cd8 <__mcmp+0x58>
10006cc8:	00800044 	movi	r2,1
10006ccc:	f800283a 	ret
10006cd0:	0005883a 	mov	r2,zero
10006cd4:	f800283a 	ret
10006cd8:	00bfffc4 	movi	r2,-1
10006cdc:	f800283a 	ret

10006ce0 <__mdiff>:
10006ce0:	defffc04 	addi	sp,sp,-16
10006ce4:	dc000015 	stw	r16,0(sp)
10006ce8:	2821883a 	mov	r16,r5
10006cec:	200f883a 	mov	r7,r4
10006cf0:	300b883a 	mov	r5,r6
10006cf4:	8009883a 	mov	r4,r16
10006cf8:	dc400115 	stw	r17,4(sp)
10006cfc:	dfc00315 	stw	ra,12(sp)
10006d00:	dc800215 	stw	r18,8(sp)
10006d04:	3023883a 	mov	r17,r6
10006d08:	0006c800 	call	10006c80 <__mcmp>
10006d0c:	10005226 	beq	r2,zero,10006e58 <__mdiff+0x178>
10006d10:	10004c16 	blt	r2,zero,10006e44 <__mdiff+0x164>
10006d14:	0025883a 	mov	r18,zero
10006d18:	81400117 	ldw	r5,4(r16)
10006d1c:	3809883a 	mov	r4,r7
10006d20:	00063100 	call	10006310 <_Balloc>
10006d24:	82800417 	ldw	r10,16(r16)
10006d28:	8b400417 	ldw	r13,16(r17)
10006d2c:	81000504 	addi	r4,r16,20
10006d30:	5299883a 	add	r12,r10,r10
10006d34:	6b5b883a 	add	r13,r13,r13
10006d38:	6319883a 	add	r12,r12,r12
10006d3c:	89800504 	addi	r6,r17,20
10006d40:	6b5b883a 	add	r13,r13,r13
10006d44:	14800315 	stw	r18,12(r2)
10006d48:	2319883a 	add	r12,r4,r12
10006d4c:	335b883a 	add	r13,r6,r13
10006d50:	11400504 	addi	r5,r2,20
10006d54:	0007883a 	mov	r3,zero
10006d58:	00000106 	br	10006d60 <__mdiff+0x80>
10006d5c:	400b883a 	mov	r5,r8
10006d60:	22400017 	ldw	r9,0(r4)
10006d64:	32000017 	ldw	r8,0(r6)
10006d68:	31800104 	addi	r6,r6,4
10006d6c:	49ffffcc 	andi	r7,r9,65535
10006d70:	42ffffcc 	andi	r11,r8,65535
10006d74:	38c7883a 	add	r3,r7,r3
10006d78:	1acfc83a 	sub	r7,r3,r11
10006d7c:	4010d43a 	srli	r8,r8,16
10006d80:	4806d43a 	srli	r3,r9,16
10006d84:	3817d43a 	srai	r11,r7,16
10006d88:	39ffffcc 	andi	r7,r7,65535
10006d8c:	1a07c83a 	sub	r3,r3,r8
10006d90:	1ac7883a 	add	r3,r3,r11
10006d94:	1812943a 	slli	r9,r3,16
10006d98:	2a000104 	addi	r8,r5,4
10006d9c:	21000104 	addi	r4,r4,4
10006da0:	49ceb03a 	or	r7,r9,r7
10006da4:	29c00015 	stw	r7,0(r5)
10006da8:	1807d43a 	srai	r3,r3,16
10006dac:	337feb36 	bltu	r6,r13,10006d5c <__alt_data_end+0xf8006d5c>
10006db0:	2013883a 	mov	r9,r4
10006db4:	2300342e 	bgeu	r4,r12,10006e88 <__mdiff+0x1a8>
10006db8:	400b883a 	mov	r5,r8
10006dbc:	21c00017 	ldw	r7,0(r4)
10006dc0:	29400104 	addi	r5,r5,4
10006dc4:	21000104 	addi	r4,r4,4
10006dc8:	39bfffcc 	andi	r6,r7,65535
10006dcc:	30cd883a 	add	r6,r6,r3
10006dd0:	3007d43a 	srai	r3,r6,16
10006dd4:	380ed43a 	srli	r7,r7,16
10006dd8:	31bfffcc 	andi	r6,r6,65535
10006ddc:	19c7883a 	add	r3,r3,r7
10006de0:	180e943a 	slli	r7,r3,16
10006de4:	1807d43a 	srai	r3,r3,16
10006de8:	398cb03a 	or	r6,r7,r6
10006dec:	29bfff15 	stw	r6,-4(r5)
10006df0:	233ff236 	bltu	r4,r12,10006dbc <__alt_data_end+0xf8006dbc>
10006df4:	0248303a 	nor	r4,zero,r9
10006df8:	2309883a 	add	r4,r4,r12
10006dfc:	2008d0ba 	srli	r4,r4,2
10006e00:	21000044 	addi	r4,r4,1
10006e04:	2109883a 	add	r4,r4,r4
10006e08:	2109883a 	add	r4,r4,r4
10006e0c:	4111883a 	add	r8,r8,r4
10006e10:	413fff04 	addi	r4,r8,-4
10006e14:	3000041e 	bne	r6,zero,10006e28 <__mdiff+0x148>
10006e18:	213fff04 	addi	r4,r4,-4
10006e1c:	20c00017 	ldw	r3,0(r4)
10006e20:	52bfffc4 	addi	r10,r10,-1
10006e24:	183ffc26 	beq	r3,zero,10006e18 <__alt_data_end+0xf8006e18>
10006e28:	12800415 	stw	r10,16(r2)
10006e2c:	dfc00317 	ldw	ra,12(sp)
10006e30:	dc800217 	ldw	r18,8(sp)
10006e34:	dc400117 	ldw	r17,4(sp)
10006e38:	dc000017 	ldw	r16,0(sp)
10006e3c:	dec00404 	addi	sp,sp,16
10006e40:	f800283a 	ret
10006e44:	8005883a 	mov	r2,r16
10006e48:	04800044 	movi	r18,1
10006e4c:	8821883a 	mov	r16,r17
10006e50:	1023883a 	mov	r17,r2
10006e54:	003fb006 	br	10006d18 <__alt_data_end+0xf8006d18>
10006e58:	3809883a 	mov	r4,r7
10006e5c:	000b883a 	mov	r5,zero
10006e60:	00063100 	call	10006310 <_Balloc>
10006e64:	00c00044 	movi	r3,1
10006e68:	10c00415 	stw	r3,16(r2)
10006e6c:	10000515 	stw	zero,20(r2)
10006e70:	dfc00317 	ldw	ra,12(sp)
10006e74:	dc800217 	ldw	r18,8(sp)
10006e78:	dc400117 	ldw	r17,4(sp)
10006e7c:	dc000017 	ldw	r16,0(sp)
10006e80:	dec00404 	addi	sp,sp,16
10006e84:	f800283a 	ret
10006e88:	380d883a 	mov	r6,r7
10006e8c:	003fe006 	br	10006e10 <__alt_data_end+0xf8006e10>

10006e90 <__ulp>:
10006e90:	295ffc2c 	andhi	r5,r5,32752
10006e94:	00bf3034 	movhi	r2,64704
10006e98:	2887883a 	add	r3,r5,r2
10006e9c:	00c0020e 	bge	zero,r3,10006ea8 <__ulp+0x18>
10006ea0:	0005883a 	mov	r2,zero
10006ea4:	f800283a 	ret
10006ea8:	00c7c83a 	sub	r3,zero,r3
10006eac:	1805d53a 	srai	r2,r3,20
10006eb0:	00c004c4 	movi	r3,19
10006eb4:	18800a0e 	bge	r3,r2,10006ee0 <__ulp+0x50>
10006eb8:	01000c84 	movi	r4,50
10006ebc:	0007883a 	mov	r3,zero
10006ec0:	20800516 	blt	r4,r2,10006ed8 <__ulp+0x48>
10006ec4:	01000cc4 	movi	r4,51
10006ec8:	2085c83a 	sub	r2,r4,r2
10006ecc:	01000044 	movi	r4,1
10006ed0:	2084983a 	sll	r2,r4,r2
10006ed4:	f800283a 	ret
10006ed8:	00800044 	movi	r2,1
10006edc:	f800283a 	ret
10006ee0:	00c00234 	movhi	r3,8
10006ee4:	1887d83a 	sra	r3,r3,r2
10006ee8:	0005883a 	mov	r2,zero
10006eec:	f800283a 	ret

10006ef0 <__b2d>:
10006ef0:	21800417 	ldw	r6,16(r4)
10006ef4:	22000504 	addi	r8,r4,20
10006ef8:	deffff04 	addi	sp,sp,-4
10006efc:	318d883a 	add	r6,r6,r6
10006f00:	318d883a 	add	r6,r6,r6
10006f04:	418d883a 	add	r6,r8,r6
10006f08:	31ffff17 	ldw	r7,-4(r6)
10006f0c:	327fff04 	addi	r9,r6,-4
10006f10:	dfc00015 	stw	ra,0(sp)
10006f14:	3809883a 	mov	r4,r7
10006f18:	00066280 	call	10006628 <__hi0bits>
10006f1c:	00c00804 	movi	r3,32
10006f20:	1887c83a 	sub	r3,r3,r2
10006f24:	28c00015 	stw	r3,0(r5)
10006f28:	00c00284 	movi	r3,10
10006f2c:	18800d16 	blt	r3,r2,10006f64 <__b2d+0x74>
10006f30:	010002c4 	movi	r4,11
10006f34:	2089c83a 	sub	r4,r4,r2
10006f38:	3906d83a 	srl	r3,r7,r4
10006f3c:	18cffc34 	orhi	r3,r3,16368
10006f40:	4240232e 	bgeu	r8,r9,10006fd0 <__b2d+0xe0>
10006f44:	317ffe17 	ldw	r5,-8(r6)
10006f48:	2908d83a 	srl	r4,r5,r4
10006f4c:	10800544 	addi	r2,r2,21
10006f50:	388e983a 	sll	r7,r7,r2
10006f54:	21c4b03a 	or	r2,r4,r7
10006f58:	dfc00017 	ldw	ra,0(sp)
10006f5c:	dec00104 	addi	sp,sp,4
10006f60:	f800283a 	ret
10006f64:	42401136 	bltu	r8,r9,10006fac <__b2d+0xbc>
10006f68:	113ffd44 	addi	r4,r2,-11
10006f6c:	000b883a 	mov	r5,zero
10006f70:	20001226 	beq	r4,zero,10006fbc <__b2d+0xcc>
10006f74:	00c00ac4 	movi	r3,43
10006f78:	1885c83a 	sub	r2,r3,r2
10006f7c:	3906983a 	sll	r3,r7,r4
10006f80:	288cd83a 	srl	r6,r5,r2
10006f84:	18cffc34 	orhi	r3,r3,16368
10006f88:	1986b03a 	or	r3,r3,r6
10006f8c:	4240122e 	bgeu	r8,r9,10006fd8 <__b2d+0xe8>
10006f90:	49bfff17 	ldw	r6,-4(r9)
10006f94:	3084d83a 	srl	r2,r6,r2
10006f98:	2908983a 	sll	r4,r5,r4
10006f9c:	1104b03a 	or	r2,r2,r4
10006fa0:	dfc00017 	ldw	ra,0(sp)
10006fa4:	dec00104 	addi	sp,sp,4
10006fa8:	f800283a 	ret
10006fac:	113ffd44 	addi	r4,r2,-11
10006fb0:	327ffe04 	addi	r9,r6,-8
10006fb4:	317ffe17 	ldw	r5,-8(r6)
10006fb8:	203fee1e 	bne	r4,zero,10006f74 <__alt_data_end+0xf8006f74>
10006fbc:	38cffc34 	orhi	r3,r7,16368
10006fc0:	2805883a 	mov	r2,r5
10006fc4:	dfc00017 	ldw	ra,0(sp)
10006fc8:	dec00104 	addi	sp,sp,4
10006fcc:	f800283a 	ret
10006fd0:	0009883a 	mov	r4,zero
10006fd4:	003fdd06 	br	10006f4c <__alt_data_end+0xf8006f4c>
10006fd8:	0005883a 	mov	r2,zero
10006fdc:	003fee06 	br	10006f98 <__alt_data_end+0xf8006f98>

10006fe0 <__d2b>:
10006fe0:	defffa04 	addi	sp,sp,-24
10006fe4:	dc400315 	stw	r17,12(sp)
10006fe8:	2823883a 	mov	r17,r5
10006fec:	01400044 	movi	r5,1
10006ff0:	dc800415 	stw	r18,16(sp)
10006ff4:	dc000215 	stw	r16,8(sp)
10006ff8:	dfc00515 	stw	ra,20(sp)
10006ffc:	3021883a 	mov	r16,r6
10007000:	3825883a 	mov	r18,r7
10007004:	00063100 	call	10006310 <_Balloc>
10007008:	8012907a 	slli	r9,r16,1
1000700c:	1011883a 	mov	r8,r2
10007010:	00800434 	movhi	r2,16
10007014:	10bfffc4 	addi	r2,r2,-1
10007018:	4812d57a 	srli	r9,r9,21
1000701c:	80a0703a 	and	r16,r16,r2
10007020:	48000126 	beq	r9,zero,10007028 <__d2b+0x48>
10007024:	84000434 	orhi	r16,r16,16
10007028:	dc000015 	stw	r16,0(sp)
1000702c:	88001e26 	beq	r17,zero,100070a8 <__d2b+0xc8>
10007030:	d9000104 	addi	r4,sp,4
10007034:	dc400115 	stw	r17,4(sp)
10007038:	00066900 	call	10006690 <__lo0bits>
1000703c:	d8c00017 	ldw	r3,0(sp)
10007040:	10002f1e 	bne	r2,zero,10007100 <__d2b+0x120>
10007044:	d9000117 	ldw	r4,4(sp)
10007048:	41000515 	stw	r4,20(r8)
1000704c:	180b003a 	cmpeq	r5,r3,zero
10007050:	01000084 	movi	r4,2
10007054:	214bc83a 	sub	r5,r4,r5
10007058:	40c00615 	stw	r3,24(r8)
1000705c:	41400415 	stw	r5,16(r8)
10007060:	4800191e 	bne	r9,zero,100070c8 <__d2b+0xe8>
10007064:	280690ba 	slli	r3,r5,2
10007068:	10bef384 	addi	r2,r2,-1074
1000706c:	90800015 	stw	r2,0(r18)
10007070:	40c5883a 	add	r2,r8,r3
10007074:	11000417 	ldw	r4,16(r2)
10007078:	00066280 	call	10006628 <__hi0bits>
1000707c:	280a917a 	slli	r5,r5,5
10007080:	d8c00617 	ldw	r3,24(sp)
10007084:	2885c83a 	sub	r2,r5,r2
10007088:	18800015 	stw	r2,0(r3)
1000708c:	4005883a 	mov	r2,r8
10007090:	dfc00517 	ldw	ra,20(sp)
10007094:	dc800417 	ldw	r18,16(sp)
10007098:	dc400317 	ldw	r17,12(sp)
1000709c:	dc000217 	ldw	r16,8(sp)
100070a0:	dec00604 	addi	sp,sp,24
100070a4:	f800283a 	ret
100070a8:	d809883a 	mov	r4,sp
100070ac:	00066900 	call	10006690 <__lo0bits>
100070b0:	d8c00017 	ldw	r3,0(sp)
100070b4:	01400044 	movi	r5,1
100070b8:	41400415 	stw	r5,16(r8)
100070bc:	40c00515 	stw	r3,20(r8)
100070c0:	10800804 	addi	r2,r2,32
100070c4:	483fe726 	beq	r9,zero,10007064 <__alt_data_end+0xf8007064>
100070c8:	00c00d44 	movi	r3,53
100070cc:	4a7ef344 	addi	r9,r9,-1075
100070d0:	4893883a 	add	r9,r9,r2
100070d4:	1885c83a 	sub	r2,r3,r2
100070d8:	d8c00617 	ldw	r3,24(sp)
100070dc:	92400015 	stw	r9,0(r18)
100070e0:	18800015 	stw	r2,0(r3)
100070e4:	4005883a 	mov	r2,r8
100070e8:	dfc00517 	ldw	ra,20(sp)
100070ec:	dc800417 	ldw	r18,16(sp)
100070f0:	dc400317 	ldw	r17,12(sp)
100070f4:	dc000217 	ldw	r16,8(sp)
100070f8:	dec00604 	addi	sp,sp,24
100070fc:	f800283a 	ret
10007100:	01000804 	movi	r4,32
10007104:	2089c83a 	sub	r4,r4,r2
10007108:	1908983a 	sll	r4,r3,r4
1000710c:	d9400117 	ldw	r5,4(sp)
10007110:	1886d83a 	srl	r3,r3,r2
10007114:	2148b03a 	or	r4,r4,r5
10007118:	41000515 	stw	r4,20(r8)
1000711c:	d8c00015 	stw	r3,0(sp)
10007120:	003fca06 	br	1000704c <__alt_data_end+0xf800704c>

10007124 <__ratio>:
10007124:	defffd04 	addi	sp,sp,-12
10007128:	2817883a 	mov	r11,r5
1000712c:	201b883a 	mov	r13,r4
10007130:	d9400104 	addi	r5,sp,4
10007134:	dfc00215 	stw	ra,8(sp)
10007138:	0006ef00 	call	10006ef0 <__b2d>
1000713c:	5809883a 	mov	r4,r11
10007140:	d80b883a 	mov	r5,sp
10007144:	1019883a 	mov	r12,r2
10007148:	1815883a 	mov	r10,r3
1000714c:	0006ef00 	call	10006ef0 <__b2d>
10007150:	69400417 	ldw	r5,16(r13)
10007154:	59000417 	ldw	r4,16(r11)
10007158:	d9800117 	ldw	r6,4(sp)
1000715c:	2909c83a 	sub	r4,r5,r4
10007160:	d9400017 	ldw	r5,0(sp)
10007164:	2008917a 	slli	r4,r4,5
10007168:	314bc83a 	sub	r5,r6,r5
1000716c:	290b883a 	add	r5,r5,r4
10007170:	01400a0e 	bge	zero,r5,1000719c <__ratio+0x78>
10007174:	280a953a 	slli	r5,r5,20
10007178:	6009883a 	mov	r4,r12
1000717c:	100d883a 	mov	r6,r2
10007180:	2a95883a 	add	r10,r5,r10
10007184:	500b883a 	mov	r5,r10
10007188:	180f883a 	mov	r7,r3
1000718c:	000b79c0 	call	1000b79c <__divdf3>
10007190:	dfc00217 	ldw	ra,8(sp)
10007194:	dec00304 	addi	sp,sp,12
10007198:	f800283a 	ret
1000719c:	280a953a 	slli	r5,r5,20
100071a0:	6009883a 	mov	r4,r12
100071a4:	100d883a 	mov	r6,r2
100071a8:	1947c83a 	sub	r3,r3,r5
100071ac:	180f883a 	mov	r7,r3
100071b0:	500b883a 	mov	r5,r10
100071b4:	000b79c0 	call	1000b79c <__divdf3>
100071b8:	dfc00217 	ldw	ra,8(sp)
100071bc:	dec00304 	addi	sp,sp,12
100071c0:	f800283a 	ret

100071c4 <_mprec_log10>:
100071c4:	defffe04 	addi	sp,sp,-8
100071c8:	dc000015 	stw	r16,0(sp)
100071cc:	dfc00115 	stw	ra,4(sp)
100071d0:	008005c4 	movi	r2,23
100071d4:	2021883a 	mov	r16,r4
100071d8:	11000d0e 	bge	r2,r4,10007210 <_mprec_log10+0x4c>
100071dc:	0005883a 	mov	r2,zero
100071e0:	00cffc34 	movhi	r3,16368
100071e4:	843fffc4 	addi	r16,r16,-1
100071e8:	1009883a 	mov	r4,r2
100071ec:	180b883a 	mov	r5,r3
100071f0:	000d883a 	mov	r6,zero
100071f4:	01d00934 	movhi	r7,16420
100071f8:	000c3800 	call	1000c380 <__muldf3>
100071fc:	803ff91e 	bne	r16,zero,100071e4 <__alt_data_end+0xf80071e4>
10007200:	dfc00117 	ldw	ra,4(sp)
10007204:	dc000017 	ldw	r16,0(sp)
10007208:	dec00204 	addi	sp,sp,8
1000720c:	f800283a 	ret
10007210:	202090fa 	slli	r16,r4,3
10007214:	00840074 	movhi	r2,4097
10007218:	10bf8d04 	addi	r2,r2,-460
1000721c:	1421883a 	add	r16,r2,r16
10007220:	80800017 	ldw	r2,0(r16)
10007224:	80c00117 	ldw	r3,4(r16)
10007228:	dfc00117 	ldw	ra,4(sp)
1000722c:	dc000017 	ldw	r16,0(sp)
10007230:	dec00204 	addi	sp,sp,8
10007234:	f800283a 	ret

10007238 <__copybits>:
10007238:	297fffc4 	addi	r5,r5,-1
1000723c:	2811d17a 	srai	r8,r5,5
10007240:	31c00417 	ldw	r7,16(r6)
10007244:	30800504 	addi	r2,r6,20
10007248:	42000044 	addi	r8,r8,1
1000724c:	39cf883a 	add	r7,r7,r7
10007250:	4211883a 	add	r8,r8,r8
10007254:	39cf883a 	add	r7,r7,r7
10007258:	4211883a 	add	r8,r8,r8
1000725c:	11cf883a 	add	r7,r2,r7
10007260:	2211883a 	add	r8,r4,r8
10007264:	11c00d2e 	bgeu	r2,r7,1000729c <__copybits+0x64>
10007268:	2007883a 	mov	r3,r4
1000726c:	11400017 	ldw	r5,0(r2)
10007270:	18c00104 	addi	r3,r3,4
10007274:	10800104 	addi	r2,r2,4
10007278:	197fff15 	stw	r5,-4(r3)
1000727c:	11fffb36 	bltu	r2,r7,1000726c <__alt_data_end+0xf800726c>
10007280:	3985c83a 	sub	r2,r7,r6
10007284:	10bffac4 	addi	r2,r2,-21
10007288:	1004d0ba 	srli	r2,r2,2
1000728c:	10800044 	addi	r2,r2,1
10007290:	1085883a 	add	r2,r2,r2
10007294:	1085883a 	add	r2,r2,r2
10007298:	2089883a 	add	r4,r4,r2
1000729c:	2200032e 	bgeu	r4,r8,100072ac <__copybits+0x74>
100072a0:	20000015 	stw	zero,0(r4)
100072a4:	21000104 	addi	r4,r4,4
100072a8:	223ffd36 	bltu	r4,r8,100072a0 <__alt_data_end+0xf80072a0>
100072ac:	f800283a 	ret

100072b0 <__any_on>:
100072b0:	20800417 	ldw	r2,16(r4)
100072b4:	2807d17a 	srai	r3,r5,5
100072b8:	21000504 	addi	r4,r4,20
100072bc:	10c00d0e 	bge	r2,r3,100072f4 <__any_on+0x44>
100072c0:	1085883a 	add	r2,r2,r2
100072c4:	1085883a 	add	r2,r2,r2
100072c8:	2085883a 	add	r2,r4,r2
100072cc:	2080182e 	bgeu	r4,r2,10007330 <__any_on+0x80>
100072d0:	10ffff17 	ldw	r3,-4(r2)
100072d4:	10bfff04 	addi	r2,r2,-4
100072d8:	1800041e 	bne	r3,zero,100072ec <__any_on+0x3c>
100072dc:	2080142e 	bgeu	r4,r2,10007330 <__any_on+0x80>
100072e0:	10bfff04 	addi	r2,r2,-4
100072e4:	10c00017 	ldw	r3,0(r2)
100072e8:	183ffc26 	beq	r3,zero,100072dc <__alt_data_end+0xf80072dc>
100072ec:	00800044 	movi	r2,1
100072f0:	f800283a 	ret
100072f4:	18800a0e 	bge	r3,r2,10007320 <__any_on+0x70>
100072f8:	18c7883a 	add	r3,r3,r3
100072fc:	18c7883a 	add	r3,r3,r3
10007300:	294007cc 	andi	r5,r5,31
10007304:	20c5883a 	add	r2,r4,r3
10007308:	283ff026 	beq	r5,zero,100072cc <__alt_data_end+0xf80072cc>
1000730c:	10c00017 	ldw	r3,0(r2)
10007310:	194cd83a 	srl	r6,r3,r5
10007314:	314a983a 	sll	r5,r6,r5
10007318:	28fff41e 	bne	r5,r3,100072ec <__alt_data_end+0xf80072ec>
1000731c:	003feb06 	br	100072cc <__alt_data_end+0xf80072cc>
10007320:	18c7883a 	add	r3,r3,r3
10007324:	18c7883a 	add	r3,r3,r3
10007328:	20c5883a 	add	r2,r4,r3
1000732c:	003fe706 	br	100072cc <__alt_data_end+0xf80072cc>
10007330:	0005883a 	mov	r2,zero
10007334:	f800283a 	ret

10007338 <__fpclassifyd>:
10007338:	00a00034 	movhi	r2,32768
1000733c:	10bfffc4 	addi	r2,r2,-1
10007340:	288a703a 	and	r5,r5,r2
10007344:	28000726 	beq	r5,zero,10007364 <__fpclassifyd+0x2c>
10007348:	00bffc34 	movhi	r2,65520
1000734c:	2885883a 	add	r2,r5,r2
10007350:	00dff834 	movhi	r3,32736
10007354:	18ffffc4 	addi	r3,r3,-1
10007358:	18800636 	bltu	r3,r2,10007374 <__fpclassifyd+0x3c>
1000735c:	00800104 	movi	r2,4
10007360:	f800283a 	ret
10007364:	2005003a 	cmpeq	r2,r4,zero
10007368:	00c000c4 	movi	r3,3
1000736c:	1885c83a 	sub	r2,r3,r2
10007370:	f800283a 	ret
10007374:	00800434 	movhi	r2,16
10007378:	10bfffc4 	addi	r2,r2,-1
1000737c:	11400236 	bltu	r2,r5,10007388 <__fpclassifyd+0x50>
10007380:	008000c4 	movi	r2,3
10007384:	f800283a 	ret
10007388:	009ffc34 	movhi	r2,32752
1000738c:	28800226 	beq	r5,r2,10007398 <__fpclassifyd+0x60>
10007390:	0005883a 	mov	r2,zero
10007394:	f800283a 	ret
10007398:	2005003a 	cmpeq	r2,r4,zero
1000739c:	f800283a 	ret

100073a0 <_sbrk_r>:
100073a0:	defffd04 	addi	sp,sp,-12
100073a4:	dc400115 	stw	r17,4(sp)
100073a8:	dc000015 	stw	r16,0(sp)
100073ac:	2023883a 	mov	r17,r4
100073b0:	04040074 	movhi	r16,4097
100073b4:	840d9404 	addi	r16,r16,13904
100073b8:	2809883a 	mov	r4,r5
100073bc:	dfc00215 	stw	ra,8(sp)
100073c0:	80000015 	stw	zero,0(r16)
100073c4:	000df080 	call	1000df08 <sbrk>
100073c8:	00ffffc4 	movi	r3,-1
100073cc:	10c00526 	beq	r2,r3,100073e4 <_sbrk_r+0x44>
100073d0:	dfc00217 	ldw	ra,8(sp)
100073d4:	dc400117 	ldw	r17,4(sp)
100073d8:	dc000017 	ldw	r16,0(sp)
100073dc:	dec00304 	addi	sp,sp,12
100073e0:	f800283a 	ret
100073e4:	80c00017 	ldw	r3,0(r16)
100073e8:	183ff926 	beq	r3,zero,100073d0 <__alt_data_end+0xf80073d0>
100073ec:	88c00015 	stw	r3,0(r17)
100073f0:	dfc00217 	ldw	ra,8(sp)
100073f4:	dc400117 	ldw	r17,4(sp)
100073f8:	dc000017 	ldw	r16,0(sp)
100073fc:	dec00304 	addi	sp,sp,12
10007400:	f800283a 	ret

10007404 <__sread>:
10007404:	defffe04 	addi	sp,sp,-8
10007408:	dc000015 	stw	r16,0(sp)
1000740c:	2821883a 	mov	r16,r5
10007410:	2940038f 	ldh	r5,14(r5)
10007414:	dfc00115 	stw	ra,4(sp)
10007418:	00097f00 	call	100097f0 <_read_r>
1000741c:	10000716 	blt	r2,zero,1000743c <__sread+0x38>
10007420:	80c01417 	ldw	r3,80(r16)
10007424:	1887883a 	add	r3,r3,r2
10007428:	80c01415 	stw	r3,80(r16)
1000742c:	dfc00117 	ldw	ra,4(sp)
10007430:	dc000017 	ldw	r16,0(sp)
10007434:	dec00204 	addi	sp,sp,8
10007438:	f800283a 	ret
1000743c:	80c0030b 	ldhu	r3,12(r16)
10007440:	18fbffcc 	andi	r3,r3,61439
10007444:	80c0030d 	sth	r3,12(r16)
10007448:	dfc00117 	ldw	ra,4(sp)
1000744c:	dc000017 	ldw	r16,0(sp)
10007450:	dec00204 	addi	sp,sp,8
10007454:	f800283a 	ret

10007458 <__seofread>:
10007458:	0005883a 	mov	r2,zero
1000745c:	f800283a 	ret

10007460 <__swrite>:
10007460:	2880030b 	ldhu	r2,12(r5)
10007464:	defffb04 	addi	sp,sp,-20
10007468:	dcc00315 	stw	r19,12(sp)
1000746c:	dc800215 	stw	r18,8(sp)
10007470:	dc400115 	stw	r17,4(sp)
10007474:	dc000015 	stw	r16,0(sp)
10007478:	dfc00415 	stw	ra,16(sp)
1000747c:	10c0400c 	andi	r3,r2,256
10007480:	2821883a 	mov	r16,r5
10007484:	2027883a 	mov	r19,r4
10007488:	3025883a 	mov	r18,r6
1000748c:	3823883a 	mov	r17,r7
10007490:	18000526 	beq	r3,zero,100074a8 <__swrite+0x48>
10007494:	2940038f 	ldh	r5,14(r5)
10007498:	000d883a 	mov	r6,zero
1000749c:	01c00084 	movi	r7,2
100074a0:	00096480 	call	10009648 <_lseek_r>
100074a4:	8080030b 	ldhu	r2,12(r16)
100074a8:	8140038f 	ldh	r5,14(r16)
100074ac:	10bbffcc 	andi	r2,r2,61439
100074b0:	9809883a 	mov	r4,r19
100074b4:	900d883a 	mov	r6,r18
100074b8:	880f883a 	mov	r7,r17
100074bc:	8080030d 	sth	r2,12(r16)
100074c0:	dfc00417 	ldw	ra,16(sp)
100074c4:	dcc00317 	ldw	r19,12(sp)
100074c8:	dc800217 	ldw	r18,8(sp)
100074cc:	dc400117 	ldw	r17,4(sp)
100074d0:	dc000017 	ldw	r16,0(sp)
100074d4:	dec00504 	addi	sp,sp,20
100074d8:	0008bf01 	jmpi	10008bf0 <_write_r>

100074dc <__sseek>:
100074dc:	defffe04 	addi	sp,sp,-8
100074e0:	dc000015 	stw	r16,0(sp)
100074e4:	2821883a 	mov	r16,r5
100074e8:	2940038f 	ldh	r5,14(r5)
100074ec:	dfc00115 	stw	ra,4(sp)
100074f0:	00096480 	call	10009648 <_lseek_r>
100074f4:	00ffffc4 	movi	r3,-1
100074f8:	10c00826 	beq	r2,r3,1000751c <__sseek+0x40>
100074fc:	80c0030b 	ldhu	r3,12(r16)
10007500:	80801415 	stw	r2,80(r16)
10007504:	18c40014 	ori	r3,r3,4096
10007508:	80c0030d 	sth	r3,12(r16)
1000750c:	dfc00117 	ldw	ra,4(sp)
10007510:	dc000017 	ldw	r16,0(sp)
10007514:	dec00204 	addi	sp,sp,8
10007518:	f800283a 	ret
1000751c:	80c0030b 	ldhu	r3,12(r16)
10007520:	18fbffcc 	andi	r3,r3,61439
10007524:	80c0030d 	sth	r3,12(r16)
10007528:	dfc00117 	ldw	ra,4(sp)
1000752c:	dc000017 	ldw	r16,0(sp)
10007530:	dec00204 	addi	sp,sp,8
10007534:	f800283a 	ret

10007538 <__sclose>:
10007538:	2940038f 	ldh	r5,14(r5)
1000753c:	0008c5c1 	jmpi	10008c5c <_close_r>

10007540 <strcmp>:
10007540:	2144b03a 	or	r2,r4,r5
10007544:	108000cc 	andi	r2,r2,3
10007548:	1000171e 	bne	r2,zero,100075a8 <strcmp+0x68>
1000754c:	20800017 	ldw	r2,0(r4)
10007550:	28c00017 	ldw	r3,0(r5)
10007554:	10c0141e 	bne	r2,r3,100075a8 <strcmp+0x68>
10007558:	027fbff4 	movhi	r9,65279
1000755c:	4a7fbfc4 	addi	r9,r9,-257
10007560:	1247883a 	add	r3,r2,r9
10007564:	0084303a 	nor	r2,zero,r2
10007568:	1884703a 	and	r2,r3,r2
1000756c:	02202074 	movhi	r8,32897
10007570:	42202004 	addi	r8,r8,-32640
10007574:	1204703a 	and	r2,r2,r8
10007578:	10000226 	beq	r2,zero,10007584 <strcmp+0x44>
1000757c:	00001706 	br	100075dc <strcmp+0x9c>
10007580:	3000161e 	bne	r6,zero,100075dc <strcmp+0x9c>
10007584:	21000104 	addi	r4,r4,4
10007588:	20800017 	ldw	r2,0(r4)
1000758c:	29400104 	addi	r5,r5,4
10007590:	28c00017 	ldw	r3,0(r5)
10007594:	124f883a 	add	r7,r2,r9
10007598:	008c303a 	nor	r6,zero,r2
1000759c:	398c703a 	and	r6,r7,r6
100075a0:	320c703a 	and	r6,r6,r8
100075a4:	10fff626 	beq	r2,r3,10007580 <__alt_data_end+0xf8007580>
100075a8:	20800007 	ldb	r2,0(r4)
100075ac:	1000051e 	bne	r2,zero,100075c4 <strcmp+0x84>
100075b0:	00000606 	br	100075cc <strcmp+0x8c>
100075b4:	21000044 	addi	r4,r4,1
100075b8:	20800007 	ldb	r2,0(r4)
100075bc:	29400044 	addi	r5,r5,1
100075c0:	10000226 	beq	r2,zero,100075cc <strcmp+0x8c>
100075c4:	28c00007 	ldb	r3,0(r5)
100075c8:	10fffa26 	beq	r2,r3,100075b4 <__alt_data_end+0xf80075b4>
100075cc:	20c00003 	ldbu	r3,0(r4)
100075d0:	28800003 	ldbu	r2,0(r5)
100075d4:	1885c83a 	sub	r2,r3,r2
100075d8:	f800283a 	ret
100075dc:	0005883a 	mov	r2,zero
100075e0:	f800283a 	ret

100075e4 <strlen>:
100075e4:	208000cc 	andi	r2,r4,3
100075e8:	10001d26 	beq	r2,zero,10007660 <strlen+0x7c>
100075ec:	20800007 	ldb	r2,0(r4)
100075f0:	10001d26 	beq	r2,zero,10007668 <strlen+0x84>
100075f4:	2005883a 	mov	r2,r4
100075f8:	00000206 	br	10007604 <strlen+0x20>
100075fc:	10c00007 	ldb	r3,0(r2)
10007600:	18001526 	beq	r3,zero,10007658 <strlen+0x74>
10007604:	10800044 	addi	r2,r2,1
10007608:	10c000cc 	andi	r3,r2,3
1000760c:	183ffb1e 	bne	r3,zero,100075fc <__alt_data_end+0xf80075fc>
10007610:	10c00017 	ldw	r3,0(r2)
10007614:	01ffbff4 	movhi	r7,65279
10007618:	39ffbfc4 	addi	r7,r7,-257
1000761c:	01a02074 	movhi	r6,32897
10007620:	31a02004 	addi	r6,r6,-32640
10007624:	00000206 	br	10007630 <strlen+0x4c>
10007628:	10800104 	addi	r2,r2,4
1000762c:	10c00017 	ldw	r3,0(r2)
10007630:	19cb883a 	add	r5,r3,r7
10007634:	00c6303a 	nor	r3,zero,r3
10007638:	28c6703a 	and	r3,r5,r3
1000763c:	1986703a 	and	r3,r3,r6
10007640:	183ff926 	beq	r3,zero,10007628 <__alt_data_end+0xf8007628>
10007644:	10c00007 	ldb	r3,0(r2)
10007648:	18000326 	beq	r3,zero,10007658 <strlen+0x74>
1000764c:	10800044 	addi	r2,r2,1
10007650:	10c00007 	ldb	r3,0(r2)
10007654:	183ffd1e 	bne	r3,zero,1000764c <__alt_data_end+0xf800764c>
10007658:	1105c83a 	sub	r2,r2,r4
1000765c:	f800283a 	ret
10007660:	2005883a 	mov	r2,r4
10007664:	003fea06 	br	10007610 <__alt_data_end+0xf8007610>
10007668:	0005883a 	mov	r2,zero
1000766c:	f800283a 	ret

10007670 <__sprint_r.part.0>:
10007670:	28801917 	ldw	r2,100(r5)
10007674:	defff604 	addi	sp,sp,-40
10007678:	dd800615 	stw	r22,24(sp)
1000767c:	dcc00315 	stw	r19,12(sp)
10007680:	dfc00915 	stw	ra,36(sp)
10007684:	df000815 	stw	fp,32(sp)
10007688:	ddc00715 	stw	r23,28(sp)
1000768c:	dd400515 	stw	r21,20(sp)
10007690:	dd000415 	stw	r20,16(sp)
10007694:	dc800215 	stw	r18,8(sp)
10007698:	dc400115 	stw	r17,4(sp)
1000769c:	dc000015 	stw	r16,0(sp)
100076a0:	1088000c 	andi	r2,r2,8192
100076a4:	2827883a 	mov	r19,r5
100076a8:	302d883a 	mov	r22,r6
100076ac:	10002d26 	beq	r2,zero,10007764 <__sprint_r.part.0+0xf4>
100076b0:	30800217 	ldw	r2,8(r6)
100076b4:	35c00017 	ldw	r23,0(r6)
100076b8:	10002826 	beq	r2,zero,1000775c <__sprint_r.part.0+0xec>
100076bc:	202b883a 	mov	r21,r4
100076c0:	bf000104 	addi	fp,r23,4
100076c4:	053fffc4 	movi	r20,-1
100076c8:	e4800017 	ldw	r18,0(fp)
100076cc:	bc400017 	ldw	r17,0(r23)
100076d0:	0021883a 	mov	r16,zero
100076d4:	9024d0ba 	srli	r18,r18,2
100076d8:	04800316 	blt	zero,r18,100076e8 <__sprint_r.part.0+0x78>
100076dc:	00001806 	br	10007740 <__sprint_r.part.0+0xd0>
100076e0:	8c400104 	addi	r17,r17,4
100076e4:	94001526 	beq	r18,r16,1000773c <__sprint_r.part.0+0xcc>
100076e8:	89400017 	ldw	r5,0(r17)
100076ec:	a809883a 	mov	r4,r21
100076f0:	980d883a 	mov	r6,r19
100076f4:	0008ed40 	call	10008ed4 <_fputwc_r>
100076f8:	84000044 	addi	r16,r16,1
100076fc:	153ff81e 	bne	r2,r20,100076e0 <__alt_data_end+0xf80076e0>
10007700:	a005883a 	mov	r2,r20
10007704:	b0000215 	stw	zero,8(r22)
10007708:	b0000115 	stw	zero,4(r22)
1000770c:	dfc00917 	ldw	ra,36(sp)
10007710:	df000817 	ldw	fp,32(sp)
10007714:	ddc00717 	ldw	r23,28(sp)
10007718:	dd800617 	ldw	r22,24(sp)
1000771c:	dd400517 	ldw	r21,20(sp)
10007720:	dd000417 	ldw	r20,16(sp)
10007724:	dcc00317 	ldw	r19,12(sp)
10007728:	dc800217 	ldw	r18,8(sp)
1000772c:	dc400117 	ldw	r17,4(sp)
10007730:	dc000017 	ldw	r16,0(sp)
10007734:	dec00a04 	addi	sp,sp,40
10007738:	f800283a 	ret
1000773c:	b0800217 	ldw	r2,8(r22)
10007740:	94a5883a 	add	r18,r18,r18
10007744:	94a5883a 	add	r18,r18,r18
10007748:	1485c83a 	sub	r2,r2,r18
1000774c:	b0800215 	stw	r2,8(r22)
10007750:	bdc00204 	addi	r23,r23,8
10007754:	e7000204 	addi	fp,fp,8
10007758:	103fdb1e 	bne	r2,zero,100076c8 <__alt_data_end+0xf80076c8>
1000775c:	0005883a 	mov	r2,zero
10007760:	003fe806 	br	10007704 <__alt_data_end+0xf8007704>
10007764:	00091380 	call	10009138 <__sfvwrite_r>
10007768:	003fe606 	br	10007704 <__alt_data_end+0xf8007704>

1000776c <__sprint_r>:
1000776c:	30c00217 	ldw	r3,8(r6)
10007770:	18000126 	beq	r3,zero,10007778 <__sprint_r+0xc>
10007774:	00076701 	jmpi	10007670 <__sprint_r.part.0>
10007778:	30000115 	stw	zero,4(r6)
1000777c:	0005883a 	mov	r2,zero
10007780:	f800283a 	ret

10007784 <___vfiprintf_internal_r>:
10007784:	defec804 	addi	sp,sp,-1248
10007788:	dfc13715 	stw	ra,1244(sp)
1000778c:	df013615 	stw	fp,1240(sp)
10007790:	ddc13515 	stw	r23,1236(sp)
10007794:	dd813415 	stw	r22,1232(sp)
10007798:	dd413315 	stw	r21,1228(sp)
1000779c:	dd013215 	stw	r20,1224(sp)
100077a0:	dcc13115 	stw	r19,1220(sp)
100077a4:	dc813015 	stw	r18,1216(sp)
100077a8:	dc412f15 	stw	r17,1212(sp)
100077ac:	dc012e15 	stw	r16,1208(sp)
100077b0:	d9012215 	stw	r4,1160(sp)
100077b4:	d9412015 	stw	r5,1152(sp)
100077b8:	d9c12315 	stw	r7,1164(sp)
100077bc:	3013883a 	mov	r9,r6
100077c0:	20000226 	beq	r4,zero,100077cc <___vfiprintf_internal_r+0x48>
100077c4:	20800e17 	ldw	r2,56(r4)
100077c8:	1000f926 	beq	r2,zero,10007bb0 <___vfiprintf_internal_r+0x42c>
100077cc:	d8c12017 	ldw	r3,1152(sp)
100077d0:	1880030b 	ldhu	r2,12(r3)
100077d4:	1108000c 	andi	r4,r2,8192
100077d8:	1007883a 	mov	r3,r2
100077dc:	2000081e 	bne	r4,zero,10007800 <___vfiprintf_internal_r+0x7c>
100077e0:	d9412017 	ldw	r5,1152(sp)
100077e4:	10c80014 	ori	r3,r2,8192
100077e8:	00b7ffc4 	movi	r2,-8193
100077ec:	29001917 	ldw	r4,100(r5)
100077f0:	28c0030d 	sth	r3,12(r5)
100077f4:	2088703a 	and	r4,r4,r2
100077f8:	29001915 	stw	r4,100(r5)
100077fc:	1805883a 	mov	r2,r3
10007800:	1900020c 	andi	r4,r3,8
10007804:	2000a726 	beq	r4,zero,10007aa4 <___vfiprintf_internal_r+0x320>
10007808:	d9412017 	ldw	r5,1152(sp)
1000780c:	29000417 	ldw	r4,16(r5)
10007810:	2000a426 	beq	r4,zero,10007aa4 <___vfiprintf_internal_r+0x320>
10007814:	18c0068c 	andi	r3,r3,26
10007818:	01000284 	movi	r4,10
1000781c:	1900ad26 	beq	r3,r4,10007ad4 <___vfiprintf_internal_r+0x350>
10007820:	d90109c4 	addi	r4,sp,1063
10007824:	d9410a04 	addi	r5,sp,1064
10007828:	2905c83a 	sub	r2,r5,r4
1000782c:	d9011e15 	stw	r4,1144(sp)
10007830:	d9411f15 	stw	r5,1148(sp)
10007834:	dec11a15 	stw	sp,1128(sp)
10007838:	d8011c15 	stw	zero,1136(sp)
1000783c:	d8011b15 	stw	zero,1132(sp)
10007840:	d8012715 	stw	zero,1180(sp)
10007844:	d8012415 	stw	zero,1168(sp)
10007848:	d811883a 	mov	r8,sp
1000784c:	04c40074 	movhi	r19,4097
10007850:	9cffc304 	addi	r19,r19,-244
10007854:	04040074 	movhi	r16,4097
10007858:	843fbf04 	addi	r16,r16,-260
1000785c:	d8812815 	stw	r2,1184(sp)
10007860:	48800007 	ldb	r2,0(r9)
10007864:	10040126 	beq	r2,zero,1000886c <___vfiprintf_internal_r+0x10e8>
10007868:	00c00944 	movi	r3,37
1000786c:	4829883a 	mov	r20,r9
10007870:	10c0021e 	bne	r2,r3,1000787c <___vfiprintf_internal_r+0xf8>
10007874:	00001606 	br	100078d0 <___vfiprintf_internal_r+0x14c>
10007878:	10c00326 	beq	r2,r3,10007888 <___vfiprintf_internal_r+0x104>
1000787c:	a5000044 	addi	r20,r20,1
10007880:	a0800007 	ldb	r2,0(r20)
10007884:	103ffc1e 	bne	r2,zero,10007878 <__alt_data_end+0xf8007878>
10007888:	a263c83a 	sub	r17,r20,r9
1000788c:	88001026 	beq	r17,zero,100078d0 <___vfiprintf_internal_r+0x14c>
10007890:	d8c11c17 	ldw	r3,1136(sp)
10007894:	d8811b17 	ldw	r2,1132(sp)
10007898:	42400015 	stw	r9,0(r8)
1000789c:	88c7883a 	add	r3,r17,r3
100078a0:	10800044 	addi	r2,r2,1
100078a4:	44400115 	stw	r17,4(r8)
100078a8:	d8c11c15 	stw	r3,1136(sp)
100078ac:	d8811b15 	stw	r2,1132(sp)
100078b0:	010001c4 	movi	r4,7
100078b4:	2080760e 	bge	r4,r2,10007a90 <___vfiprintf_internal_r+0x30c>
100078b8:	1803b41e 	bne	r3,zero,1000878c <___vfiprintf_internal_r+0x1008>
100078bc:	d8c12417 	ldw	r3,1168(sp)
100078c0:	d8011b15 	stw	zero,1132(sp)
100078c4:	d811883a 	mov	r8,sp
100078c8:	1c47883a 	add	r3,r3,r17
100078cc:	d8c12415 	stw	r3,1168(sp)
100078d0:	a0800007 	ldb	r2,0(r20)
100078d4:	1002dc26 	beq	r2,zero,10008448 <___vfiprintf_internal_r+0xcc4>
100078d8:	04bfffc4 	movi	r18,-1
100078dc:	a2400044 	addi	r9,r20,1
100078e0:	a0c00047 	ldb	r3,1(r20)
100078e4:	d8011d85 	stb	zero,1142(sp)
100078e8:	002d883a 	mov	r22,zero
100078ec:	d8012115 	stw	zero,1156(sp)
100078f0:	0023883a 	mov	r17,zero
100078f4:	05001604 	movi	r20,88
100078f8:	05400244 	movi	r21,9
100078fc:	402f883a 	mov	r23,r8
10007900:	900d883a 	mov	r6,r18
10007904:	4a400044 	addi	r9,r9,1
10007908:	18bff804 	addi	r2,r3,-32
1000790c:	a0828736 	bltu	r20,r2,1000832c <___vfiprintf_internal_r+0xba8>
10007910:	1085883a 	add	r2,r2,r2
10007914:	1085883a 	add	r2,r2,r2
10007918:	01040034 	movhi	r4,4096
1000791c:	211e4b04 	addi	r4,r4,31020
10007920:	1105883a 	add	r2,r2,r4
10007924:	10800017 	ldw	r2,0(r2)
10007928:	1000683a 	jmp	r2
1000792c:	1000808c 	andi	zero,r2,514
10007930:	1000832c 	andhi	zero,r2,524
10007934:	1000832c 	andhi	zero,r2,524
10007938:	100080a8 	cmpgeui	zero,r2,514
1000793c:	1000832c 	andhi	zero,r2,524
10007940:	1000832c 	andhi	zero,r2,524
10007944:	1000832c 	andhi	zero,r2,524
10007948:	1000832c 	andhi	zero,r2,524
1000794c:	1000832c 	andhi	zero,r2,524
10007950:	1000832c 	andhi	zero,r2,524
10007954:	1000813c 	xorhi	zero,r2,516
10007958:	10008164 	muli	zero,r2,517
1000795c:	1000832c 	andhi	zero,r2,524
10007960:	10007bd0 	cmplti	zero,r2,495
10007964:	10008170 	cmpltui	zero,r2,517
10007968:	1000832c 	andhi	zero,r2,524
1000796c:	10007bdc 	xori	zero,r2,495
10007970:	10007be8 	cmpgeui	zero,r2,495
10007974:	10007be8 	cmpgeui	zero,r2,495
10007978:	10007be8 	cmpgeui	zero,r2,495
1000797c:	10007be8 	cmpgeui	zero,r2,495
10007980:	10007be8 	cmpgeui	zero,r2,495
10007984:	10007be8 	cmpgeui	zero,r2,495
10007988:	10007be8 	cmpgeui	zero,r2,495
1000798c:	10007be8 	cmpgeui	zero,r2,495
10007990:	10007be8 	cmpgeui	zero,r2,495
10007994:	1000832c 	andhi	zero,r2,524
10007998:	1000832c 	andhi	zero,r2,524
1000799c:	1000832c 	andhi	zero,r2,524
100079a0:	1000832c 	andhi	zero,r2,524
100079a4:	1000832c 	andhi	zero,r2,524
100079a8:	1000832c 	andhi	zero,r2,524
100079ac:	1000832c 	andhi	zero,r2,524
100079b0:	1000832c 	andhi	zero,r2,524
100079b4:	1000832c 	andhi	zero,r2,524
100079b8:	1000832c 	andhi	zero,r2,524
100079bc:	10007c30 	cmpltui	zero,r2,496
100079c0:	1000832c 	andhi	zero,r2,524
100079c4:	1000832c 	andhi	zero,r2,524
100079c8:	1000832c 	andhi	zero,r2,524
100079cc:	1000832c 	andhi	zero,r2,524
100079d0:	1000832c 	andhi	zero,r2,524
100079d4:	1000832c 	andhi	zero,r2,524
100079d8:	1000832c 	andhi	zero,r2,524
100079dc:	1000832c 	andhi	zero,r2,524
100079e0:	1000832c 	andhi	zero,r2,524
100079e4:	1000832c 	andhi	zero,r2,524
100079e8:	10007f84 	addi	zero,r2,510
100079ec:	1000832c 	andhi	zero,r2,524
100079f0:	1000832c 	andhi	zero,r2,524
100079f4:	1000832c 	andhi	zero,r2,524
100079f8:	1000832c 	andhi	zero,r2,524
100079fc:	1000832c 	andhi	zero,r2,524
10007a00:	10007fc8 	cmpgei	zero,r2,511
10007a04:	1000832c 	andhi	zero,r2,524
10007a08:	1000832c 	andhi	zero,r2,524
10007a0c:	10008000 	call	11000800 <_gp+0xfe6d04>
10007a10:	1000832c 	andhi	zero,r2,524
10007a14:	1000832c 	andhi	zero,r2,524
10007a18:	1000832c 	andhi	zero,r2,524
10007a1c:	1000832c 	andhi	zero,r2,524
10007a20:	1000832c 	andhi	zero,r2,524
10007a24:	1000832c 	andhi	zero,r2,524
10007a28:	1000832c 	andhi	zero,r2,524
10007a2c:	1000832c 	andhi	zero,r2,524
10007a30:	1000832c 	andhi	zero,r2,524
10007a34:	1000832c 	andhi	zero,r2,524
10007a38:	1000805c 	xori	zero,r2,513
10007a3c:	100081d0 	cmplti	zero,r2,519
10007a40:	1000832c 	andhi	zero,r2,524
10007a44:	1000832c 	andhi	zero,r2,524
10007a48:	1000832c 	andhi	zero,r2,524
10007a4c:	100081c4 	addi	zero,r2,519
10007a50:	100081d0 	cmplti	zero,r2,519
10007a54:	1000832c 	andhi	zero,r2,524
10007a58:	1000832c 	andhi	zero,r2,524
10007a5c:	100080b4 	orhi	zero,r2,514
10007a60:	1000832c 	andhi	zero,r2,524
10007a64:	100080cc 	andi	zero,r2,515
10007a68:	10008104 	addi	zero,r2,516
10007a6c:	100082e4 	muli	zero,r2,523
10007a70:	10008208 	cmpgei	zero,r2,520
10007a74:	1000832c 	andhi	zero,r2,524
10007a78:	10008214 	ori	zero,r2,520
10007a7c:	1000832c 	andhi	zero,r2,524
10007a80:	1000826c 	andhi	zero,r2,521
10007a84:	1000832c 	andhi	zero,r2,524
10007a88:	1000832c 	andhi	zero,r2,524
10007a8c:	100082a4 	muli	zero,r2,522
10007a90:	42000204 	addi	r8,r8,8
10007a94:	d8c12417 	ldw	r3,1168(sp)
10007a98:	1c47883a 	add	r3,r3,r17
10007a9c:	d8c12415 	stw	r3,1168(sp)
10007aa0:	003f8b06 	br	100078d0 <__alt_data_end+0xf80078d0>
10007aa4:	d9012217 	ldw	r4,1160(sp)
10007aa8:	d9412017 	ldw	r5,1152(sp)
10007aac:	da412d15 	stw	r9,1204(sp)
10007ab0:	000309c0 	call	1000309c <__swsetup_r>
10007ab4:	da412d17 	ldw	r9,1204(sp)
10007ab8:	1000301e 	bne	r2,zero,10007b7c <___vfiprintf_internal_r+0x3f8>
10007abc:	d8c12017 	ldw	r3,1152(sp)
10007ac0:	01000284 	movi	r4,10
10007ac4:	1880030b 	ldhu	r2,12(r3)
10007ac8:	1007883a 	mov	r3,r2
10007acc:	18c0068c 	andi	r3,r3,26
10007ad0:	193f531e 	bne	r3,r4,10007820 <__alt_data_end+0xf8007820>
10007ad4:	d9012017 	ldw	r4,1152(sp)
10007ad8:	20c0038b 	ldhu	r3,14(r4)
10007adc:	193fffcc 	andi	r4,r3,65535
10007ae0:	2120001c 	xori	r4,r4,32768
10007ae4:	21200004 	addi	r4,r4,-32768
10007ae8:	203f4d16 	blt	r4,zero,10007820 <__alt_data_end+0xf8007820>
10007aec:	d9412017 	ldw	r5,1152(sp)
10007af0:	d9012217 	ldw	r4,1160(sp)
10007af4:	d9c12317 	ldw	r7,1164(sp)
10007af8:	2b001917 	ldw	r12,100(r5)
10007afc:	2ac00717 	ldw	r11,28(r5)
10007b00:	2a800917 	ldw	r10,36(r5)
10007b04:	02010004 	movi	r8,1024
10007b08:	10bfff4c 	andi	r2,r2,65533
10007b0c:	da0b883a 	add	r5,sp,r8
10007b10:	480d883a 	mov	r6,r9
10007b14:	d881030d 	sth	r2,1036(sp)
10007b18:	db011915 	stw	r12,1124(sp)
10007b1c:	d8c1038d 	sth	r3,1038(sp)
10007b20:	dac10715 	stw	r11,1052(sp)
10007b24:	da810915 	stw	r10,1060(sp)
10007b28:	dec10015 	stw	sp,1024(sp)
10007b2c:	dec10415 	stw	sp,1040(sp)
10007b30:	da010215 	stw	r8,1032(sp)
10007b34:	da010515 	stw	r8,1044(sp)
10007b38:	d8010615 	stw	zero,1048(sp)
10007b3c:	00077840 	call	10007784 <___vfiprintf_internal_r>
10007b40:	1021883a 	mov	r16,r2
10007b44:	10000416 	blt	r2,zero,10007b58 <___vfiprintf_internal_r+0x3d4>
10007b48:	d9012217 	ldw	r4,1160(sp)
10007b4c:	d9410004 	addi	r5,sp,1024
10007b50:	0004a380 	call	10004a38 <_fflush_r>
10007b54:	10040b1e 	bne	r2,zero,10008b84 <___vfiprintf_internal_r+0x1400>
10007b58:	d881030b 	ldhu	r2,1036(sp)
10007b5c:	1080100c 	andi	r2,r2,64
10007b60:	10000426 	beq	r2,zero,10007b74 <___vfiprintf_internal_r+0x3f0>
10007b64:	d8c12017 	ldw	r3,1152(sp)
10007b68:	1880030b 	ldhu	r2,12(r3)
10007b6c:	10801014 	ori	r2,r2,64
10007b70:	1880030d 	sth	r2,12(r3)
10007b74:	8005883a 	mov	r2,r16
10007b78:	00000106 	br	10007b80 <___vfiprintf_internal_r+0x3fc>
10007b7c:	00bfffc4 	movi	r2,-1
10007b80:	dfc13717 	ldw	ra,1244(sp)
10007b84:	df013617 	ldw	fp,1240(sp)
10007b88:	ddc13517 	ldw	r23,1236(sp)
10007b8c:	dd813417 	ldw	r22,1232(sp)
10007b90:	dd413317 	ldw	r21,1228(sp)
10007b94:	dd013217 	ldw	r20,1224(sp)
10007b98:	dcc13117 	ldw	r19,1220(sp)
10007b9c:	dc813017 	ldw	r18,1216(sp)
10007ba0:	dc412f17 	ldw	r17,1212(sp)
10007ba4:	dc012e17 	ldw	r16,1208(sp)
10007ba8:	dec13804 	addi	sp,sp,1248
10007bac:	f800283a 	ret
10007bb0:	d9812d15 	stw	r6,1204(sp)
10007bb4:	0004d580 	call	10004d58 <__sinit>
10007bb8:	da412d17 	ldw	r9,1204(sp)
10007bbc:	003f0306 	br	100077cc <__alt_data_end+0xf80077cc>
10007bc0:	d9412117 	ldw	r5,1156(sp)
10007bc4:	d8812315 	stw	r2,1164(sp)
10007bc8:	014bc83a 	sub	r5,zero,r5
10007bcc:	d9412115 	stw	r5,1156(sp)
10007bd0:	8c400114 	ori	r17,r17,4
10007bd4:	48c00007 	ldb	r3,0(r9)
10007bd8:	003f4a06 	br	10007904 <__alt_data_end+0xf8007904>
10007bdc:	8c402014 	ori	r17,r17,128
10007be0:	48c00007 	ldb	r3,0(r9)
10007be4:	003f4706 	br	10007904 <__alt_data_end+0xf8007904>
10007be8:	4825883a 	mov	r18,r9
10007bec:	d8012115 	stw	zero,1156(sp)
10007bf0:	1f3ff404 	addi	fp,r3,-48
10007bf4:	00000106 	br	10007bfc <___vfiprintf_internal_r+0x478>
10007bf8:	1025883a 	mov	r18,r2
10007bfc:	d9012117 	ldw	r4,1156(sp)
10007c00:	01400284 	movi	r5,10
10007c04:	d9812b15 	stw	r6,1196(sp)
10007c08:	000aef80 	call	1000aef8 <__mulsi3>
10007c0c:	90c00007 	ldb	r3,0(r18)
10007c10:	1739883a 	add	fp,r2,fp
10007c14:	df012115 	stw	fp,1156(sp)
10007c18:	90800044 	addi	r2,r18,1
10007c1c:	1f3ff404 	addi	fp,r3,-48
10007c20:	1013883a 	mov	r9,r2
10007c24:	d9812b17 	ldw	r6,1196(sp)
10007c28:	af3ff32e 	bgeu	r21,fp,10007bf8 <__alt_data_end+0xf8007bf8>
10007c2c:	003f3606 	br	10007908 <__alt_data_end+0xf8007908>
10007c30:	8c400414 	ori	r17,r17,16
10007c34:	dd811d85 	stb	r22,1142(sp)
10007c38:	8880080c 	andi	r2,r17,32
10007c3c:	b811883a 	mov	r8,r23
10007c40:	3025883a 	mov	r18,r6
10007c44:	10016726 	beq	r2,zero,100081e4 <___vfiprintf_internal_r+0xa60>
10007c48:	d8c12317 	ldw	r3,1164(sp)
10007c4c:	18800117 	ldw	r2,4(r3)
10007c50:	1d000017 	ldw	r20,0(r3)
10007c54:	18c00204 	addi	r3,r3,8
10007c58:	d8c12315 	stw	r3,1164(sp)
10007c5c:	102b883a 	mov	r21,r2
10007c60:	10030416 	blt	r2,zero,10008874 <___vfiprintf_internal_r+0x10f0>
10007c64:	dd811d83 	ldbu	r22,1142(sp)
10007c68:	900f883a 	mov	r7,r18
10007c6c:	00800044 	movi	r2,1
10007c70:	a548b03a 	or	r4,r20,r21
10007c74:	90000216 	blt	r18,zero,10007c80 <___vfiprintf_internal_r+0x4fc>
10007c78:	00ffdfc4 	movi	r3,-129
10007c7c:	88e2703a 	and	r17,r17,r3
10007c80:	10803fcc 	andi	r2,r2,255
10007c84:	2001db1e 	bne	r4,zero,100083f4 <___vfiprintf_internal_r+0xc70>
10007c88:	9001da1e 	bne	r18,zero,100083f4 <___vfiprintf_internal_r+0xc70>
10007c8c:	1002ab1e 	bne	r2,zero,1000873c <___vfiprintf_internal_r+0xfb8>
10007c90:	8880004c 	andi	r2,r17,1
10007c94:	1002a926 	beq	r2,zero,1000873c <___vfiprintf_internal_r+0xfb8>
10007c98:	d9c12817 	ldw	r7,1184(sp)
10007c9c:	00800c04 	movi	r2,48
10007ca0:	d88109c5 	stb	r2,1063(sp)
10007ca4:	ddc109c4 	addi	r23,sp,1063
10007ca8:	3829883a 	mov	r20,r7
10007cac:	3c80010e 	bge	r7,r18,10007cb4 <___vfiprintf_internal_r+0x530>
10007cb0:	9029883a 	mov	r20,r18
10007cb4:	b5803fcc 	andi	r22,r22,255
10007cb8:	b580201c 	xori	r22,r22,128
10007cbc:	b5bfe004 	addi	r22,r22,-128
10007cc0:	b0000126 	beq	r22,zero,10007cc8 <___vfiprintf_internal_r+0x544>
10007cc4:	a5000044 	addi	r20,r20,1
10007cc8:	8a80008c 	andi	r10,r17,2
10007ccc:	50000126 	beq	r10,zero,10007cd4 <___vfiprintf_internal_r+0x550>
10007cd0:	a5000084 	addi	r20,r20,2
10007cd4:	8d40210c 	andi	r21,r17,132
10007cd8:	a801aa1e 	bne	r21,zero,10008384 <___vfiprintf_internal_r+0xc00>
10007cdc:	d8c12117 	ldw	r3,1156(sp)
10007ce0:	1d2dc83a 	sub	r22,r3,r20
10007ce4:	0581a70e 	bge	zero,r22,10008384 <___vfiprintf_internal_r+0xc00>
10007ce8:	07000404 	movi	fp,16
10007cec:	d8c11c17 	ldw	r3,1136(sp)
10007cf0:	e583780e 	bge	fp,r22,10008ad4 <___vfiprintf_internal_r+0x1350>
10007cf4:	01440074 	movhi	r5,4097
10007cf8:	297fc304 	addi	r5,r5,-244
10007cfc:	dc412615 	stw	r17,1176(sp)
10007d00:	d9011b17 	ldw	r4,1132(sp)
10007d04:	b023883a 	mov	r17,r22
10007d08:	d9412515 	stw	r5,1172(sp)
10007d0c:	030001c4 	movi	r12,7
10007d10:	d9c12915 	stw	r7,1188(sp)
10007d14:	da812a15 	stw	r10,1192(sp)
10007d18:	482d883a 	mov	r22,r9
10007d1c:	00000506 	br	10007d34 <___vfiprintf_internal_r+0x5b0>
10007d20:	21400084 	addi	r5,r4,2
10007d24:	42000204 	addi	r8,r8,8
10007d28:	1009883a 	mov	r4,r2
10007d2c:	8c7ffc04 	addi	r17,r17,-16
10007d30:	e4400d0e 	bge	fp,r17,10007d68 <___vfiprintf_internal_r+0x5e4>
10007d34:	18c00404 	addi	r3,r3,16
10007d38:	20800044 	addi	r2,r4,1
10007d3c:	44c00015 	stw	r19,0(r8)
10007d40:	47000115 	stw	fp,4(r8)
10007d44:	d8c11c15 	stw	r3,1136(sp)
10007d48:	d8811b15 	stw	r2,1132(sp)
10007d4c:	60bff40e 	bge	r12,r2,10007d20 <__alt_data_end+0xf8007d20>
10007d50:	1801801e 	bne	r3,zero,10008354 <___vfiprintf_internal_r+0xbd0>
10007d54:	8c7ffc04 	addi	r17,r17,-16
10007d58:	0009883a 	mov	r4,zero
10007d5c:	01400044 	movi	r5,1
10007d60:	d811883a 	mov	r8,sp
10007d64:	e47ff316 	blt	fp,r17,10007d34 <__alt_data_end+0xf8007d34>
10007d68:	b013883a 	mov	r9,r22
10007d6c:	d9c12917 	ldw	r7,1188(sp)
10007d70:	882d883a 	mov	r22,r17
10007d74:	da812a17 	ldw	r10,1192(sp)
10007d78:	dc412617 	ldw	r17,1176(sp)
10007d7c:	d8812517 	ldw	r2,1172(sp)
10007d80:	b0c7883a 	add	r3,r22,r3
10007d84:	45800115 	stw	r22,4(r8)
10007d88:	40800015 	stw	r2,0(r8)
10007d8c:	d8c11c15 	stw	r3,1136(sp)
10007d90:	d9411b15 	stw	r5,1132(sp)
10007d94:	008001c4 	movi	r2,7
10007d98:	11426a16 	blt	r2,r5,10008744 <___vfiprintf_internal_r+0xfc0>
10007d9c:	d9011d87 	ldb	r4,1142(sp)
10007da0:	42000204 	addi	r8,r8,8
10007da4:	28800044 	addi	r2,r5,1
10007da8:	20017b1e 	bne	r4,zero,10008398 <___vfiprintf_internal_r+0xc14>
10007dac:	50000c26 	beq	r10,zero,10007de0 <___vfiprintf_internal_r+0x65c>
10007db0:	d9011d04 	addi	r4,sp,1140
10007db4:	18c00084 	addi	r3,r3,2
10007db8:	41000015 	stw	r4,0(r8)
10007dbc:	01000084 	movi	r4,2
10007dc0:	41000115 	stw	r4,4(r8)
10007dc4:	d8c11c15 	stw	r3,1136(sp)
10007dc8:	d8811b15 	stw	r2,1132(sp)
10007dcc:	010001c4 	movi	r4,7
10007dd0:	20821716 	blt	r4,r2,10008630 <___vfiprintf_internal_r+0xeac>
10007dd4:	100b883a 	mov	r5,r2
10007dd8:	42000204 	addi	r8,r8,8
10007ddc:	10800044 	addi	r2,r2,1
10007de0:	01002004 	movi	r4,128
10007de4:	a901d126 	beq	r21,r4,1000852c <___vfiprintf_internal_r+0xda8>
10007de8:	91e5c83a 	sub	r18,r18,r7
10007dec:	0480290e 	bge	zero,r18,10007e94 <___vfiprintf_internal_r+0x710>
10007df0:	05800404 	movi	r22,16
10007df4:	05440074 	movhi	r21,4097
10007df8:	ad7fbf04 	addi	r21,r21,-260
10007dfc:	b4801c0e 	bge	r22,r18,10007e70 <___vfiprintf_internal_r+0x6ec>
10007e00:	dc412515 	stw	r17,1172(sp)
10007e04:	070001c4 	movi	fp,7
10007e08:	9023883a 	mov	r17,r18
10007e0c:	d9c12615 	stw	r7,1176(sp)
10007e10:	4825883a 	mov	r18,r9
10007e14:	00000506 	br	10007e2c <___vfiprintf_internal_r+0x6a8>
10007e18:	28800084 	addi	r2,r5,2
10007e1c:	42000204 	addi	r8,r8,8
10007e20:	200b883a 	mov	r5,r4
10007e24:	8c7ffc04 	addi	r17,r17,-16
10007e28:	b4400d0e 	bge	r22,r17,10007e60 <___vfiprintf_internal_r+0x6dc>
10007e2c:	18c00404 	addi	r3,r3,16
10007e30:	29000044 	addi	r4,r5,1
10007e34:	44000015 	stw	r16,0(r8)
10007e38:	45800115 	stw	r22,4(r8)
10007e3c:	d8c11c15 	stw	r3,1136(sp)
10007e40:	d9011b15 	stw	r4,1132(sp)
10007e44:	e13ff40e 	bge	fp,r4,10007e18 <__alt_data_end+0xf8007e18>
10007e48:	1801601e 	bne	r3,zero,100083cc <___vfiprintf_internal_r+0xc48>
10007e4c:	8c7ffc04 	addi	r17,r17,-16
10007e50:	000b883a 	mov	r5,zero
10007e54:	00800044 	movi	r2,1
10007e58:	d811883a 	mov	r8,sp
10007e5c:	b47ff316 	blt	r22,r17,10007e2c <__alt_data_end+0xf8007e2c>
10007e60:	9013883a 	mov	r9,r18
10007e64:	d9c12617 	ldw	r7,1176(sp)
10007e68:	8825883a 	mov	r18,r17
10007e6c:	dc412517 	ldw	r17,1172(sp)
10007e70:	1c87883a 	add	r3,r3,r18
10007e74:	45400015 	stw	r21,0(r8)
10007e78:	44800115 	stw	r18,4(r8)
10007e7c:	d8c11c15 	stw	r3,1136(sp)
10007e80:	d8811b15 	stw	r2,1132(sp)
10007e84:	010001c4 	movi	r4,7
10007e88:	20819e16 	blt	r4,r2,10008504 <___vfiprintf_internal_r+0xd80>
10007e8c:	42000204 	addi	r8,r8,8
10007e90:	10800044 	addi	r2,r2,1
10007e94:	38c7883a 	add	r3,r7,r3
10007e98:	45c00015 	stw	r23,0(r8)
10007e9c:	41c00115 	stw	r7,4(r8)
10007ea0:	d8c11c15 	stw	r3,1136(sp)
10007ea4:	d8811b15 	stw	r2,1132(sp)
10007ea8:	010001c4 	movi	r4,7
10007eac:	20819d0e 	bge	r4,r2,10008524 <___vfiprintf_internal_r+0xda0>
10007eb0:	1802291e 	bne	r3,zero,10008758 <___vfiprintf_internal_r+0xfd4>
10007eb4:	d8011b15 	stw	zero,1132(sp)
10007eb8:	d811883a 	mov	r8,sp
10007ebc:	8c40010c 	andi	r17,r17,4
10007ec0:	88017526 	beq	r17,zero,10008498 <___vfiprintf_internal_r+0xd14>
10007ec4:	d9412117 	ldw	r5,1156(sp)
10007ec8:	2d23c83a 	sub	r17,r5,r20
10007ecc:	0441720e 	bge	zero,r17,10008498 <___vfiprintf_internal_r+0xd14>
10007ed0:	04800404 	movi	r18,16
10007ed4:	9443170e 	bge	r18,r17,10008b34 <___vfiprintf_internal_r+0x13b0>
10007ed8:	01440074 	movhi	r5,4097
10007edc:	297fc304 	addi	r5,r5,-244
10007ee0:	d9011b17 	ldw	r4,1132(sp)
10007ee4:	d9412515 	stw	r5,1172(sp)
10007ee8:	058001c4 	movi	r22,7
10007eec:	dd412217 	ldw	r21,1160(sp)
10007ef0:	ddc12017 	ldw	r23,1152(sp)
10007ef4:	4839883a 	mov	fp,r9
10007ef8:	00000506 	br	10007f10 <___vfiprintf_internal_r+0x78c>
10007efc:	21400084 	addi	r5,r4,2
10007f00:	42000204 	addi	r8,r8,8
10007f04:	1009883a 	mov	r4,r2
10007f08:	8c7ffc04 	addi	r17,r17,-16
10007f0c:	94400d0e 	bge	r18,r17,10007f44 <___vfiprintf_internal_r+0x7c0>
10007f10:	18c00404 	addi	r3,r3,16
10007f14:	20800044 	addi	r2,r4,1
10007f18:	44c00015 	stw	r19,0(r8)
10007f1c:	44800115 	stw	r18,4(r8)
10007f20:	d8c11c15 	stw	r3,1136(sp)
10007f24:	d8811b15 	stw	r2,1132(sp)
10007f28:	b0bff40e 	bge	r22,r2,10007efc <__alt_data_end+0xf8007efc>
10007f2c:	18016b1e 	bne	r3,zero,100084dc <___vfiprintf_internal_r+0xd58>
10007f30:	8c7ffc04 	addi	r17,r17,-16
10007f34:	0009883a 	mov	r4,zero
10007f38:	01400044 	movi	r5,1
10007f3c:	d811883a 	mov	r8,sp
10007f40:	947ff316 	blt	r18,r17,10007f10 <__alt_data_end+0xf8007f10>
10007f44:	e013883a 	mov	r9,fp
10007f48:	d8812517 	ldw	r2,1172(sp)
10007f4c:	1c47883a 	add	r3,r3,r17
10007f50:	44400115 	stw	r17,4(r8)
10007f54:	40800015 	stw	r2,0(r8)
10007f58:	d8c11c15 	stw	r3,1136(sp)
10007f5c:	d9411b15 	stw	r5,1132(sp)
10007f60:	008001c4 	movi	r2,7
10007f64:	11414c0e 	bge	r2,r5,10008498 <___vfiprintf_internal_r+0xd14>
10007f68:	1801431e 	bne	r3,zero,10008478 <___vfiprintf_internal_r+0xcf4>
10007f6c:	d8c12117 	ldw	r3,1156(sp)
10007f70:	a0c28e16 	blt	r20,r3,100089ac <___vfiprintf_internal_r+0x1228>
10007f74:	d9012417 	ldw	r4,1168(sp)
10007f78:	2509883a 	add	r4,r4,r20
10007f7c:	d9012415 	stw	r4,1168(sp)
10007f80:	00015306 	br	100084d0 <___vfiprintf_internal_r+0xd4c>
10007f84:	8c400414 	ori	r17,r17,16
10007f88:	8880080c 	andi	r2,r17,32
10007f8c:	b811883a 	mov	r8,r23
10007f90:	3025883a 	mov	r18,r6
10007f94:	10005f26 	beq	r2,zero,10008114 <___vfiprintf_internal_r+0x990>
10007f98:	d8812317 	ldw	r2,1164(sp)
10007f9c:	d8c12317 	ldw	r3,1164(sp)
10007fa0:	15000017 	ldw	r20,0(r2)
10007fa4:	15400117 	ldw	r21,4(r2)
10007fa8:	18c00204 	addi	r3,r3,8
10007fac:	0005883a 	mov	r2,zero
10007fb0:	d8c12315 	stw	r3,1164(sp)
10007fb4:	a548b03a 	or	r4,r20,r21
10007fb8:	d8011d85 	stb	zero,1142(sp)
10007fbc:	900f883a 	mov	r7,r18
10007fc0:	002d883a 	mov	r22,zero
10007fc4:	003f2b06 	br	10007c74 <__alt_data_end+0xf8007c74>
10007fc8:	8c400414 	ori	r17,r17,16
10007fcc:	8880080c 	andi	r2,r17,32
10007fd0:	b811883a 	mov	r8,r23
10007fd4:	3025883a 	mov	r18,r6
10007fd8:	1000a826 	beq	r2,zero,1000827c <___vfiprintf_internal_r+0xaf8>
10007fdc:	d8812317 	ldw	r2,1164(sp)
10007fe0:	d8c12317 	ldw	r3,1164(sp)
10007fe4:	15000017 	ldw	r20,0(r2)
10007fe8:	15400117 	ldw	r21,4(r2)
10007fec:	18c00204 	addi	r3,r3,8
10007ff0:	00800044 	movi	r2,1
10007ff4:	d8c12315 	stw	r3,1164(sp)
10007ff8:	a548b03a 	or	r4,r20,r21
10007ffc:	003fee06 	br	10007fb8 <__alt_data_end+0xf8007fb8>
10008000:	01440074 	movhi	r5,4097
10008004:	297f5904 	addi	r5,r5,-668
10008008:	dd811d85 	stb	r22,1142(sp)
1000800c:	d9412715 	stw	r5,1180(sp)
10008010:	8880080c 	andi	r2,r17,32
10008014:	b811883a 	mov	r8,r23
10008018:	3025883a 	mov	r18,r6
1000801c:	1000a926 	beq	r2,zero,100082c4 <___vfiprintf_internal_r+0xb40>
10008020:	d9412317 	ldw	r5,1164(sp)
10008024:	2d000017 	ldw	r20,0(r5)
10008028:	2d400117 	ldw	r21,4(r5)
1000802c:	29400204 	addi	r5,r5,8
10008030:	d9412315 	stw	r5,1164(sp)
10008034:	8880004c 	andi	r2,r17,1
10008038:	1001d126 	beq	r2,zero,10008780 <___vfiprintf_internal_r+0xffc>
1000803c:	a548b03a 	or	r4,r20,r21
10008040:	20021626 	beq	r4,zero,1000889c <___vfiprintf_internal_r+0x1118>
10008044:	00800c04 	movi	r2,48
10008048:	d8811d05 	stb	r2,1140(sp)
1000804c:	d8c11d45 	stb	r3,1141(sp)
10008050:	8c400094 	ori	r17,r17,2
10008054:	00800084 	movi	r2,2
10008058:	003fd706 	br	10007fb8 <__alt_data_end+0xf8007fb8>
1000805c:	d9412317 	ldw	r5,1164(sp)
10008060:	05000044 	movi	r20,1
10008064:	b811883a 	mov	r8,r23
10008068:	28800017 	ldw	r2,0(r5)
1000806c:	29400104 	addi	r5,r5,4
10008070:	d8011d85 	stb	zero,1142(sp)
10008074:	d8810005 	stb	r2,1024(sp)
10008078:	d9412315 	stw	r5,1164(sp)
1000807c:	a00f883a 	mov	r7,r20
10008080:	ddc10004 	addi	r23,sp,1024
10008084:	0025883a 	mov	r18,zero
10008088:	003f0f06 	br	10007cc8 <__alt_data_end+0xf8007cc8>
1000808c:	b0803fcc 	andi	r2,r22,255
10008090:	1080201c 	xori	r2,r2,128
10008094:	10bfe004 	addi	r2,r2,-128
10008098:	10021f1e 	bne	r2,zero,10008918 <___vfiprintf_internal_r+0x1194>
1000809c:	05800804 	movi	r22,32
100080a0:	48c00007 	ldb	r3,0(r9)
100080a4:	003e1706 	br	10007904 <__alt_data_end+0xf8007904>
100080a8:	8c400054 	ori	r17,r17,1
100080ac:	48c00007 	ldb	r3,0(r9)
100080b0:	003e1406 	br	10007904 <__alt_data_end+0xf8007904>
100080b4:	48c00007 	ldb	r3,0(r9)
100080b8:	01001b04 	movi	r4,108
100080bc:	4805883a 	mov	r2,r9
100080c0:	19026526 	beq	r3,r4,10008a58 <___vfiprintf_internal_r+0x12d4>
100080c4:	8c400414 	ori	r17,r17,16
100080c8:	003e0e06 	br	10007904 <__alt_data_end+0xf8007904>
100080cc:	dd811d85 	stb	r22,1142(sp)
100080d0:	8880080c 	andi	r2,r17,32
100080d4:	b811883a 	mov	r8,r23
100080d8:	10020426 	beq	r2,zero,100088ec <___vfiprintf_internal_r+0x1168>
100080dc:	d8c12317 	ldw	r3,1164(sp)
100080e0:	d9012417 	ldw	r4,1168(sp)
100080e4:	d9412317 	ldw	r5,1164(sp)
100080e8:	18800017 	ldw	r2,0(r3)
100080ec:	2007d7fa 	srai	r3,r4,31
100080f0:	29400104 	addi	r5,r5,4
100080f4:	d9412315 	stw	r5,1164(sp)
100080f8:	11000015 	stw	r4,0(r2)
100080fc:	10c00115 	stw	r3,4(r2)
10008100:	003dd706 	br	10007860 <__alt_data_end+0xf8007860>
10008104:	8880080c 	andi	r2,r17,32
10008108:	b811883a 	mov	r8,r23
1000810c:	3025883a 	mov	r18,r6
10008110:	103fa11e 	bne	r2,zero,10007f98 <__alt_data_end+0xf8007f98>
10008114:	8880040c 	andi	r2,r17,16
10008118:	1001ea26 	beq	r2,zero,100088c4 <___vfiprintf_internal_r+0x1140>
1000811c:	d9012317 	ldw	r4,1164(sp)
10008120:	002b883a 	mov	r21,zero
10008124:	0005883a 	mov	r2,zero
10008128:	25000017 	ldw	r20,0(r4)
1000812c:	21000104 	addi	r4,r4,4
10008130:	d9012315 	stw	r4,1164(sp)
10008134:	a009883a 	mov	r4,r20
10008138:	003f9f06 	br	10007fb8 <__alt_data_end+0xf8007fb8>
1000813c:	d8812317 	ldw	r2,1164(sp)
10008140:	d8c12317 	ldw	r3,1164(sp)
10008144:	10800017 	ldw	r2,0(r2)
10008148:	d8812115 	stw	r2,1156(sp)
1000814c:	d9012117 	ldw	r4,1156(sp)
10008150:	18800104 	addi	r2,r3,4
10008154:	203e9a16 	blt	r4,zero,10007bc0 <__alt_data_end+0xf8007bc0>
10008158:	d8812315 	stw	r2,1164(sp)
1000815c:	48c00007 	ldb	r3,0(r9)
10008160:	003de806 	br	10007904 <__alt_data_end+0xf8007904>
10008164:	05800ac4 	movi	r22,43
10008168:	48c00007 	ldb	r3,0(r9)
1000816c:	003de506 	br	10007904 <__alt_data_end+0xf8007904>
10008170:	48c00007 	ldb	r3,0(r9)
10008174:	01000a84 	movi	r4,42
10008178:	48800044 	addi	r2,r9,1
1000817c:	19028326 	beq	r3,r4,10008b8c <___vfiprintf_internal_r+0x1408>
10008180:	1f3ff404 	addi	fp,r3,-48
10008184:	af027a36 	bltu	r21,fp,10008b70 <___vfiprintf_internal_r+0x13ec>
10008188:	1025883a 	mov	r18,r2
1000818c:	0009883a 	mov	r4,zero
10008190:	00000106 	br	10008198 <___vfiprintf_internal_r+0xa14>
10008194:	4825883a 	mov	r18,r9
10008198:	01400284 	movi	r5,10
1000819c:	000aef80 	call	1000aef8 <__mulsi3>
100081a0:	90c00007 	ldb	r3,0(r18)
100081a4:	e089883a 	add	r4,fp,r2
100081a8:	92400044 	addi	r9,r18,1
100081ac:	1f3ff404 	addi	fp,r3,-48
100081b0:	af3ff82e 	bgeu	r21,fp,10008194 <__alt_data_end+0xf8008194>
100081b4:	2025883a 	mov	r18,r4
100081b8:	20022416 	blt	r4,zero,10008a4c <___vfiprintf_internal_r+0x12c8>
100081bc:	900d883a 	mov	r6,r18
100081c0:	003dd106 	br	10007908 <__alt_data_end+0xf8007908>
100081c4:	8c401014 	ori	r17,r17,64
100081c8:	48c00007 	ldb	r3,0(r9)
100081cc:	003dcd06 	br	10007904 <__alt_data_end+0xf8007904>
100081d0:	dd811d85 	stb	r22,1142(sp)
100081d4:	8880080c 	andi	r2,r17,32
100081d8:	b811883a 	mov	r8,r23
100081dc:	3025883a 	mov	r18,r6
100081e0:	103e991e 	bne	r2,zero,10007c48 <__alt_data_end+0xf8007c48>
100081e4:	8880040c 	andi	r2,r17,16
100081e8:	1001d726 	beq	r2,zero,10008948 <___vfiprintf_internal_r+0x11c4>
100081ec:	d9012317 	ldw	r4,1164(sp)
100081f0:	25000017 	ldw	r20,0(r4)
100081f4:	21000104 	addi	r4,r4,4
100081f8:	d9012315 	stw	r4,1164(sp)
100081fc:	a02bd7fa 	srai	r21,r20,31
10008200:	a805883a 	mov	r2,r21
10008204:	003e9606 	br	10007c60 <__alt_data_end+0xf8007c60>
10008208:	8c400814 	ori	r17,r17,32
1000820c:	48c00007 	ldb	r3,0(r9)
10008210:	003dbc06 	br	10007904 <__alt_data_end+0xf8007904>
10008214:	d9412317 	ldw	r5,1164(sp)
10008218:	b811883a 	mov	r8,r23
1000821c:	d8011d85 	stb	zero,1142(sp)
10008220:	2dc00017 	ldw	r23,0(r5)
10008224:	3025883a 	mov	r18,r6
10008228:	2d400104 	addi	r21,r5,4
1000822c:	b8022f26 	beq	r23,zero,10008aec <___vfiprintf_internal_r+0x1368>
10008230:	b809883a 	mov	r4,r23
10008234:	30020f16 	blt	r6,zero,10008a74 <___vfiprintf_internal_r+0x12f0>
10008238:	000b883a 	mov	r5,zero
1000823c:	da012b15 	stw	r8,1196(sp)
10008240:	da412d15 	stw	r9,1204(sp)
10008244:	00060080 	call	10006008 <memchr>
10008248:	da012b17 	ldw	r8,1196(sp)
1000824c:	da412d17 	ldw	r9,1204(sp)
10008250:	10024226 	beq	r2,zero,10008b5c <___vfiprintf_internal_r+0x13d8>
10008254:	15cfc83a 	sub	r7,r2,r23
10008258:	91c1d616 	blt	r18,r7,100089b4 <___vfiprintf_internal_r+0x1230>
1000825c:	dd811d83 	ldbu	r22,1142(sp)
10008260:	dd412315 	stw	r21,1164(sp)
10008264:	0025883a 	mov	r18,zero
10008268:	003e8f06 	br	10007ca8 <__alt_data_end+0xf8007ca8>
1000826c:	8880080c 	andi	r2,r17,32
10008270:	b811883a 	mov	r8,r23
10008274:	3025883a 	mov	r18,r6
10008278:	103f581e 	bne	r2,zero,10007fdc <__alt_data_end+0xf8007fdc>
1000827c:	8880040c 	andi	r2,r17,16
10008280:	1001a726 	beq	r2,zero,10008920 <___vfiprintf_internal_r+0x119c>
10008284:	d9012317 	ldw	r4,1164(sp)
10008288:	002b883a 	mov	r21,zero
1000828c:	00800044 	movi	r2,1
10008290:	25000017 	ldw	r20,0(r4)
10008294:	21000104 	addi	r4,r4,4
10008298:	d9012315 	stw	r4,1164(sp)
1000829c:	a009883a 	mov	r4,r20
100082a0:	003f4506 	br	10007fb8 <__alt_data_end+0xf8007fb8>
100082a4:	01040074 	movhi	r4,4097
100082a8:	213f5e04 	addi	r4,r4,-648
100082ac:	dd811d85 	stb	r22,1142(sp)
100082b0:	d9012715 	stw	r4,1180(sp)
100082b4:	8880080c 	andi	r2,r17,32
100082b8:	b811883a 	mov	r8,r23
100082bc:	3025883a 	mov	r18,r6
100082c0:	103f571e 	bne	r2,zero,10008020 <__alt_data_end+0xf8008020>
100082c4:	8880040c 	andi	r2,r17,16
100082c8:	10017626 	beq	r2,zero,100088a4 <___vfiprintf_internal_r+0x1120>
100082cc:	d8812317 	ldw	r2,1164(sp)
100082d0:	002b883a 	mov	r21,zero
100082d4:	15000017 	ldw	r20,0(r2)
100082d8:	10800104 	addi	r2,r2,4
100082dc:	d8812315 	stw	r2,1164(sp)
100082e0:	003f5406 	br	10008034 <__alt_data_end+0xf8008034>
100082e4:	d8c12317 	ldw	r3,1164(sp)
100082e8:	00800c04 	movi	r2,48
100082ec:	01040074 	movhi	r4,4097
100082f0:	213f5e04 	addi	r4,r4,-648
100082f4:	1d000017 	ldw	r20,0(r3)
100082f8:	d8811d05 	stb	r2,1140(sp)
100082fc:	18c00104 	addi	r3,r3,4
10008300:	00801e04 	movi	r2,120
10008304:	d8811d45 	stb	r2,1141(sp)
10008308:	d9012715 	stw	r4,1180(sp)
1000830c:	b811883a 	mov	r8,r23
10008310:	3025883a 	mov	r18,r6
10008314:	002b883a 	mov	r21,zero
10008318:	8c400094 	ori	r17,r17,2
1000831c:	d8c12315 	stw	r3,1164(sp)
10008320:	00800084 	movi	r2,2
10008324:	a009883a 	mov	r4,r20
10008328:	003f2306 	br	10007fb8 <__alt_data_end+0xf8007fb8>
1000832c:	dd811d85 	stb	r22,1142(sp)
10008330:	b811883a 	mov	r8,r23
10008334:	18004426 	beq	r3,zero,10008448 <___vfiprintf_internal_r+0xcc4>
10008338:	05000044 	movi	r20,1
1000833c:	d8c10005 	stb	r3,1024(sp)
10008340:	d8011d85 	stb	zero,1142(sp)
10008344:	a00f883a 	mov	r7,r20
10008348:	ddc10004 	addi	r23,sp,1024
1000834c:	0025883a 	mov	r18,zero
10008350:	003e5d06 	br	10007cc8 <__alt_data_end+0xf8007cc8>
10008354:	d9012217 	ldw	r4,1160(sp)
10008358:	d9412017 	ldw	r5,1152(sp)
1000835c:	d9811a04 	addi	r6,sp,1128
10008360:	db012b15 	stw	r12,1196(sp)
10008364:	00076700 	call	10007670 <__sprint_r.part.0>
10008368:	db012b17 	ldw	r12,1196(sp)
1000836c:	10003c1e 	bne	r2,zero,10008460 <___vfiprintf_internal_r+0xcdc>
10008370:	d9011b17 	ldw	r4,1132(sp)
10008374:	d8c11c17 	ldw	r3,1136(sp)
10008378:	d811883a 	mov	r8,sp
1000837c:	21400044 	addi	r5,r4,1
10008380:	003e6a06 	br	10007d2c <__alt_data_end+0xf8007d2c>
10008384:	d9411b17 	ldw	r5,1132(sp)
10008388:	d8c11c17 	ldw	r3,1136(sp)
1000838c:	28800044 	addi	r2,r5,1
10008390:	d9011d87 	ldb	r4,1142(sp)
10008394:	203e8526 	beq	r4,zero,10007dac <__alt_data_end+0xf8007dac>
10008398:	01000044 	movi	r4,1
1000839c:	d9411d84 	addi	r5,sp,1142
100083a0:	1907883a 	add	r3,r3,r4
100083a4:	41400015 	stw	r5,0(r8)
100083a8:	41000115 	stw	r4,4(r8)
100083ac:	d8c11c15 	stw	r3,1136(sp)
100083b0:	d8811b15 	stw	r2,1132(sp)
100083b4:	014001c4 	movi	r5,7
100083b8:	28809816 	blt	r5,r2,1000861c <___vfiprintf_internal_r+0xe98>
100083bc:	100b883a 	mov	r5,r2
100083c0:	42000204 	addi	r8,r8,8
100083c4:	1105883a 	add	r2,r2,r4
100083c8:	003e7806 	br	10007dac <__alt_data_end+0xf8007dac>
100083cc:	d9012217 	ldw	r4,1160(sp)
100083d0:	d9412017 	ldw	r5,1152(sp)
100083d4:	d9811a04 	addi	r6,sp,1128
100083d8:	00076700 	call	10007670 <__sprint_r.part.0>
100083dc:	1000201e 	bne	r2,zero,10008460 <___vfiprintf_internal_r+0xcdc>
100083e0:	d9411b17 	ldw	r5,1132(sp)
100083e4:	d8c11c17 	ldw	r3,1136(sp)
100083e8:	d811883a 	mov	r8,sp
100083ec:	28800044 	addi	r2,r5,1
100083f0:	003e8c06 	br	10007e24 <__alt_data_end+0xf8007e24>
100083f4:	00c00044 	movi	r3,1
100083f8:	10c0ab26 	beq	r2,r3,100086a8 <___vfiprintf_internal_r+0xf24>
100083fc:	00c00084 	movi	r3,2
10008400:	10c0901e 	bne	r2,r3,10008644 <___vfiprintf_internal_r+0xec0>
10008404:	d9412717 	ldw	r5,1180(sp)
10008408:	d88109c4 	addi	r2,sp,1063
1000840c:	a0c003cc 	andi	r3,r20,15
10008410:	a808973a 	slli	r4,r21,28
10008414:	28c7883a 	add	r3,r5,r3
10008418:	a028d13a 	srli	r20,r20,4
1000841c:	18c00003 	ldbu	r3,0(r3)
10008420:	a82ad13a 	srli	r21,r21,4
10008424:	2528b03a 	or	r20,r4,r20
10008428:	10c00005 	stb	r3,0(r2)
1000842c:	a546b03a 	or	r3,r20,r21
10008430:	102f883a 	mov	r23,r2
10008434:	10bfffc4 	addi	r2,r2,-1
10008438:	183ff41e 	bne	r3,zero,1000840c <__alt_data_end+0xf800840c>
1000843c:	d8811f17 	ldw	r2,1148(sp)
10008440:	15cfc83a 	sub	r7,r2,r23
10008444:	003e1806 	br	10007ca8 <__alt_data_end+0xf8007ca8>
10008448:	d8811c17 	ldw	r2,1136(sp)
1000844c:	10000426 	beq	r2,zero,10008460 <___vfiprintf_internal_r+0xcdc>
10008450:	d9012217 	ldw	r4,1160(sp)
10008454:	d9412017 	ldw	r5,1152(sp)
10008458:	d9811a04 	addi	r6,sp,1128
1000845c:	00076700 	call	10007670 <__sprint_r.part.0>
10008460:	d8c12017 	ldw	r3,1152(sp)
10008464:	1880030b 	ldhu	r2,12(r3)
10008468:	1080100c 	andi	r2,r2,64
1000846c:	103dc31e 	bne	r2,zero,10007b7c <__alt_data_end+0xf8007b7c>
10008470:	d8812417 	ldw	r2,1168(sp)
10008474:	003dc206 	br	10007b80 <__alt_data_end+0xf8007b80>
10008478:	d9012217 	ldw	r4,1160(sp)
1000847c:	d9412017 	ldw	r5,1152(sp)
10008480:	d9811a04 	addi	r6,sp,1128
10008484:	da412d15 	stw	r9,1204(sp)
10008488:	00076700 	call	10007670 <__sprint_r.part.0>
1000848c:	da412d17 	ldw	r9,1204(sp)
10008490:	103ff31e 	bne	r2,zero,10008460 <__alt_data_end+0xf8008460>
10008494:	d8c11c17 	ldw	r3,1136(sp)
10008498:	d9412117 	ldw	r5,1156(sp)
1000849c:	a140010e 	bge	r20,r5,100084a4 <___vfiprintf_internal_r+0xd20>
100084a0:	2829883a 	mov	r20,r5
100084a4:	d8812417 	ldw	r2,1168(sp)
100084a8:	1505883a 	add	r2,r2,r20
100084ac:	d8812415 	stw	r2,1168(sp)
100084b0:	18000726 	beq	r3,zero,100084d0 <___vfiprintf_internal_r+0xd4c>
100084b4:	d9012217 	ldw	r4,1160(sp)
100084b8:	d9412017 	ldw	r5,1152(sp)
100084bc:	d9811a04 	addi	r6,sp,1128
100084c0:	da412d15 	stw	r9,1204(sp)
100084c4:	00076700 	call	10007670 <__sprint_r.part.0>
100084c8:	da412d17 	ldw	r9,1204(sp)
100084cc:	103fe41e 	bne	r2,zero,10008460 <__alt_data_end+0xf8008460>
100084d0:	d8011b15 	stw	zero,1132(sp)
100084d4:	d811883a 	mov	r8,sp
100084d8:	003ce106 	br	10007860 <__alt_data_end+0xf8007860>
100084dc:	a809883a 	mov	r4,r21
100084e0:	b80b883a 	mov	r5,r23
100084e4:	d9811a04 	addi	r6,sp,1128
100084e8:	00076700 	call	10007670 <__sprint_r.part.0>
100084ec:	103fdc1e 	bne	r2,zero,10008460 <__alt_data_end+0xf8008460>
100084f0:	d9011b17 	ldw	r4,1132(sp)
100084f4:	d8c11c17 	ldw	r3,1136(sp)
100084f8:	d811883a 	mov	r8,sp
100084fc:	21400044 	addi	r5,r4,1
10008500:	003e8106 	br	10007f08 <__alt_data_end+0xf8007f08>
10008504:	1800cb1e 	bne	r3,zero,10008834 <___vfiprintf_internal_r+0x10b0>
10008508:	00800044 	movi	r2,1
1000850c:	ddc00015 	stw	r23,0(sp)
10008510:	d9c00115 	stw	r7,4(sp)
10008514:	d9c11c15 	stw	r7,1136(sp)
10008518:	d8811b15 	stw	r2,1132(sp)
1000851c:	3807883a 	mov	r3,r7
10008520:	d811883a 	mov	r8,sp
10008524:	42000204 	addi	r8,r8,8
10008528:	003e6406 	br	10007ebc <__alt_data_end+0xf8007ebc>
1000852c:	d9012117 	ldw	r4,1156(sp)
10008530:	252dc83a 	sub	r22,r4,r20
10008534:	05be2c0e 	bge	zero,r22,10007de8 <__alt_data_end+0xf8007de8>
10008538:	07000404 	movi	fp,16
1000853c:	e581830e 	bge	fp,r22,10008b4c <___vfiprintf_internal_r+0x13c8>
10008540:	05440074 	movhi	r21,4097
10008544:	ad7fbf04 	addi	r21,r21,-260
10008548:	dc412515 	stw	r17,1172(sp)
1000854c:	028001c4 	movi	r10,7
10008550:	b023883a 	mov	r17,r22
10008554:	d9c12615 	stw	r7,1176(sp)
10008558:	a82d883a 	mov	r22,r21
1000855c:	482b883a 	mov	r21,r9
10008560:	00000506 	br	10008578 <___vfiprintf_internal_r+0xdf4>
10008564:	29000084 	addi	r4,r5,2
10008568:	42000204 	addi	r8,r8,8
1000856c:	100b883a 	mov	r5,r2
10008570:	8c7ffc04 	addi	r17,r17,-16
10008574:	e4400d0e 	bge	fp,r17,100085ac <___vfiprintf_internal_r+0xe28>
10008578:	18c00404 	addi	r3,r3,16
1000857c:	28800044 	addi	r2,r5,1
10008580:	44000015 	stw	r16,0(r8)
10008584:	47000115 	stw	fp,4(r8)
10008588:	d8c11c15 	stw	r3,1136(sp)
1000858c:	d8811b15 	stw	r2,1132(sp)
10008590:	50bff40e 	bge	r10,r2,10008564 <__alt_data_end+0xf8008564>
10008594:	1800151e 	bne	r3,zero,100085ec <___vfiprintf_internal_r+0xe68>
10008598:	8c7ffc04 	addi	r17,r17,-16
1000859c:	000b883a 	mov	r5,zero
100085a0:	01000044 	movi	r4,1
100085a4:	d811883a 	mov	r8,sp
100085a8:	e47ff316 	blt	fp,r17,10008578 <__alt_data_end+0xf8008578>
100085ac:	a813883a 	mov	r9,r21
100085b0:	d9c12617 	ldw	r7,1176(sp)
100085b4:	b02b883a 	mov	r21,r22
100085b8:	882d883a 	mov	r22,r17
100085bc:	dc412517 	ldw	r17,1172(sp)
100085c0:	1d87883a 	add	r3,r3,r22
100085c4:	45400015 	stw	r21,0(r8)
100085c8:	45800115 	stw	r22,4(r8)
100085cc:	d8c11c15 	stw	r3,1136(sp)
100085d0:	d9011b15 	stw	r4,1132(sp)
100085d4:	008001c4 	movi	r2,7
100085d8:	11009116 	blt	r2,r4,10008820 <___vfiprintf_internal_r+0x109c>
100085dc:	42000204 	addi	r8,r8,8
100085e0:	20800044 	addi	r2,r4,1
100085e4:	200b883a 	mov	r5,r4
100085e8:	003dff06 	br	10007de8 <__alt_data_end+0xf8007de8>
100085ec:	d9012217 	ldw	r4,1160(sp)
100085f0:	d9412017 	ldw	r5,1152(sp)
100085f4:	d9811a04 	addi	r6,sp,1128
100085f8:	da812c15 	stw	r10,1200(sp)
100085fc:	00076700 	call	10007670 <__sprint_r.part.0>
10008600:	da812c17 	ldw	r10,1200(sp)
10008604:	103f961e 	bne	r2,zero,10008460 <__alt_data_end+0xf8008460>
10008608:	d9411b17 	ldw	r5,1132(sp)
1000860c:	d8c11c17 	ldw	r3,1136(sp)
10008610:	d811883a 	mov	r8,sp
10008614:	29000044 	addi	r4,r5,1
10008618:	003fd506 	br	10008570 <__alt_data_end+0xf8008570>
1000861c:	1800701e 	bne	r3,zero,100087e0 <___vfiprintf_internal_r+0x105c>
10008620:	000b883a 	mov	r5,zero
10008624:	2005883a 	mov	r2,r4
10008628:	d811883a 	mov	r8,sp
1000862c:	003ddf06 	br	10007dac <__alt_data_end+0xf8007dac>
10008630:	18005d1e 	bne	r3,zero,100087a8 <___vfiprintf_internal_r+0x1024>
10008634:	000b883a 	mov	r5,zero
10008638:	00800044 	movi	r2,1
1000863c:	d811883a 	mov	r8,sp
10008640:	003de706 	br	10007de0 <__alt_data_end+0xf8007de0>
10008644:	d8c109c4 	addi	r3,sp,1063
10008648:	a008d0fa 	srli	r4,r20,3
1000864c:	a80a977a 	slli	r5,r21,29
10008650:	a82ad0fa 	srli	r21,r21,3
10008654:	a50001cc 	andi	r20,r20,7
10008658:	a0800c04 	addi	r2,r20,48
1000865c:	2928b03a 	or	r20,r5,r4
10008660:	18800005 	stb	r2,0(r3)
10008664:	a548b03a 	or	r4,r20,r21
10008668:	182f883a 	mov	r23,r3
1000866c:	18ffffc4 	addi	r3,r3,-1
10008670:	203ff51e 	bne	r4,zero,10008648 <__alt_data_end+0xf8008648>
10008674:	8900004c 	andi	r4,r17,1
10008678:	b80b883a 	mov	r5,r23
1000867c:	203f6f26 	beq	r4,zero,1000843c <__alt_data_end+0xf800843c>
10008680:	10803fcc 	andi	r2,r2,255
10008684:	1080201c 	xori	r2,r2,128
10008688:	10bfe004 	addi	r2,r2,-128
1000868c:	01000c04 	movi	r4,48
10008690:	1100f526 	beq	r2,r4,10008a68 <___vfiprintf_internal_r+0x12e4>
10008694:	293fffc5 	stb	r4,-1(r5)
10008698:	d9011f17 	ldw	r4,1148(sp)
1000869c:	182f883a 	mov	r23,r3
100086a0:	20cfc83a 	sub	r7,r4,r3
100086a4:	003d8006 	br	10007ca8 <__alt_data_end+0xf8007ca8>
100086a8:	a800021e 	bne	r21,zero,100086b4 <___vfiprintf_internal_r+0xf30>
100086ac:	00800244 	movi	r2,9
100086b0:	15001d2e 	bgeu	r2,r20,10008728 <___vfiprintf_internal_r+0xfa4>
100086b4:	dc412515 	stw	r17,1172(sp)
100086b8:	d88109c4 	addi	r2,sp,1063
100086bc:	a823883a 	mov	r17,r21
100086c0:	4039883a 	mov	fp,r8
100086c4:	482b883a 	mov	r21,r9
100086c8:	a009883a 	mov	r4,r20
100086cc:	880b883a 	mov	r5,r17
100086d0:	01800284 	movi	r6,10
100086d4:	000f883a 	mov	r7,zero
100086d8:	102f883a 	mov	r23,r2
100086dc:	000a7b00 	call	1000a7b0 <__umoddi3>
100086e0:	10800c04 	addi	r2,r2,48
100086e4:	a009883a 	mov	r4,r20
100086e8:	880b883a 	mov	r5,r17
100086ec:	b8800005 	stb	r2,0(r23)
100086f0:	01800284 	movi	r6,10
100086f4:	000f883a 	mov	r7,zero
100086f8:	000a15c0 	call	1000a15c <__udivdi3>
100086fc:	1823883a 	mov	r17,r3
10008700:	10c6b03a 	or	r3,r2,r3
10008704:	1029883a 	mov	r20,r2
10008708:	b8bfffc4 	addi	r2,r23,-1
1000870c:	183fee1e 	bne	r3,zero,100086c8 <__alt_data_end+0xf80086c8>
10008710:	d9411f17 	ldw	r5,1148(sp)
10008714:	e011883a 	mov	r8,fp
10008718:	dc412517 	ldw	r17,1172(sp)
1000871c:	a813883a 	mov	r9,r21
10008720:	2dcfc83a 	sub	r7,r5,r23
10008724:	003d6006 	br	10007ca8 <__alt_data_end+0xf8007ca8>
10008728:	a5000c04 	addi	r20,r20,48
1000872c:	dd0109c5 	stb	r20,1063(sp)
10008730:	d9c12817 	ldw	r7,1184(sp)
10008734:	ddc109c4 	addi	r23,sp,1063
10008738:	003d5b06 	br	10007ca8 <__alt_data_end+0xf8007ca8>
1000873c:	ddc10a04 	addi	r23,sp,1064
10008740:	003d5906 	br	10007ca8 <__alt_data_end+0xf8007ca8>
10008744:	1800891e 	bne	r3,zero,1000896c <___vfiprintf_internal_r+0x11e8>
10008748:	000b883a 	mov	r5,zero
1000874c:	00800044 	movi	r2,1
10008750:	d811883a 	mov	r8,sp
10008754:	003f0e06 	br	10008390 <__alt_data_end+0xf8008390>
10008758:	d9012217 	ldw	r4,1160(sp)
1000875c:	d9412017 	ldw	r5,1152(sp)
10008760:	d9811a04 	addi	r6,sp,1128
10008764:	da412d15 	stw	r9,1204(sp)
10008768:	00076700 	call	10007670 <__sprint_r.part.0>
1000876c:	da412d17 	ldw	r9,1204(sp)
10008770:	103f3b1e 	bne	r2,zero,10008460 <__alt_data_end+0xf8008460>
10008774:	d8c11c17 	ldw	r3,1136(sp)
10008778:	d811883a 	mov	r8,sp
1000877c:	003dcf06 	br	10007ebc <__alt_data_end+0xf8007ebc>
10008780:	00800084 	movi	r2,2
10008784:	a548b03a 	or	r4,r20,r21
10008788:	003e0b06 	br	10007fb8 <__alt_data_end+0xf8007fb8>
1000878c:	d9012217 	ldw	r4,1160(sp)
10008790:	d9412017 	ldw	r5,1152(sp)
10008794:	d9811a04 	addi	r6,sp,1128
10008798:	00076700 	call	10007670 <__sprint_r.part.0>
1000879c:	103f301e 	bne	r2,zero,10008460 <__alt_data_end+0xf8008460>
100087a0:	d811883a 	mov	r8,sp
100087a4:	003cbb06 	br	10007a94 <__alt_data_end+0xf8007a94>
100087a8:	d9012217 	ldw	r4,1160(sp)
100087ac:	d9412017 	ldw	r5,1152(sp)
100087b0:	d9811a04 	addi	r6,sp,1128
100087b4:	d9c12b15 	stw	r7,1196(sp)
100087b8:	da412d15 	stw	r9,1204(sp)
100087bc:	00076700 	call	10007670 <__sprint_r.part.0>
100087c0:	d9c12b17 	ldw	r7,1196(sp)
100087c4:	da412d17 	ldw	r9,1204(sp)
100087c8:	103f251e 	bne	r2,zero,10008460 <__alt_data_end+0xf8008460>
100087cc:	d9411b17 	ldw	r5,1132(sp)
100087d0:	d8c11c17 	ldw	r3,1136(sp)
100087d4:	d811883a 	mov	r8,sp
100087d8:	28800044 	addi	r2,r5,1
100087dc:	003d8006 	br	10007de0 <__alt_data_end+0xf8007de0>
100087e0:	d9012217 	ldw	r4,1160(sp)
100087e4:	d9412017 	ldw	r5,1152(sp)
100087e8:	d9811a04 	addi	r6,sp,1128
100087ec:	d9c12b15 	stw	r7,1196(sp)
100087f0:	da412d15 	stw	r9,1204(sp)
100087f4:	da812c15 	stw	r10,1200(sp)
100087f8:	00076700 	call	10007670 <__sprint_r.part.0>
100087fc:	d9c12b17 	ldw	r7,1196(sp)
10008800:	da412d17 	ldw	r9,1204(sp)
10008804:	da812c17 	ldw	r10,1200(sp)
10008808:	103f151e 	bne	r2,zero,10008460 <__alt_data_end+0xf8008460>
1000880c:	d9411b17 	ldw	r5,1132(sp)
10008810:	d8c11c17 	ldw	r3,1136(sp)
10008814:	d811883a 	mov	r8,sp
10008818:	28800044 	addi	r2,r5,1
1000881c:	003d6306 	br	10007dac <__alt_data_end+0xf8007dac>
10008820:	18009e1e 	bne	r3,zero,10008a9c <___vfiprintf_internal_r+0x1318>
10008824:	000b883a 	mov	r5,zero
10008828:	00800044 	movi	r2,1
1000882c:	d811883a 	mov	r8,sp
10008830:	003d6d06 	br	10007de8 <__alt_data_end+0xf8007de8>
10008834:	d9012217 	ldw	r4,1160(sp)
10008838:	d9412017 	ldw	r5,1152(sp)
1000883c:	d9811a04 	addi	r6,sp,1128
10008840:	d9c12b15 	stw	r7,1196(sp)
10008844:	da412d15 	stw	r9,1204(sp)
10008848:	00076700 	call	10007670 <__sprint_r.part.0>
1000884c:	d9c12b17 	ldw	r7,1196(sp)
10008850:	da412d17 	ldw	r9,1204(sp)
10008854:	103f021e 	bne	r2,zero,10008460 <__alt_data_end+0xf8008460>
10008858:	d8811b17 	ldw	r2,1132(sp)
1000885c:	d8c11c17 	ldw	r3,1136(sp)
10008860:	d811883a 	mov	r8,sp
10008864:	10800044 	addi	r2,r2,1
10008868:	003d8a06 	br	10007e94 <__alt_data_end+0xf8007e94>
1000886c:	4829883a 	mov	r20,r9
10008870:	003c1706 	br	100078d0 <__alt_data_end+0xf80078d0>
10008874:	0529c83a 	sub	r20,zero,r20
10008878:	a004c03a 	cmpne	r2,r20,zero
1000887c:	056bc83a 	sub	r21,zero,r21
10008880:	a8abc83a 	sub	r21,r21,r2
10008884:	05800b44 	movi	r22,45
10008888:	dd811d85 	stb	r22,1142(sp)
1000888c:	900f883a 	mov	r7,r18
10008890:	00800044 	movi	r2,1
10008894:	a548b03a 	or	r4,r20,r21
10008898:	003cf606 	br	10007c74 <__alt_data_end+0xf8007c74>
1000889c:	00800084 	movi	r2,2
100088a0:	003dc506 	br	10007fb8 <__alt_data_end+0xf8007fb8>
100088a4:	8880100c 	andi	r2,r17,64
100088a8:	10005a26 	beq	r2,zero,10008a14 <___vfiprintf_internal_r+0x1290>
100088ac:	d9012317 	ldw	r4,1164(sp)
100088b0:	002b883a 	mov	r21,zero
100088b4:	2500000b 	ldhu	r20,0(r4)
100088b8:	21000104 	addi	r4,r4,4
100088bc:	d9012315 	stw	r4,1164(sp)
100088c0:	003ddc06 	br	10008034 <__alt_data_end+0xf8008034>
100088c4:	8880100c 	andi	r2,r17,64
100088c8:	10005826 	beq	r2,zero,10008a2c <___vfiprintf_internal_r+0x12a8>
100088cc:	d9412317 	ldw	r5,1164(sp)
100088d0:	002b883a 	mov	r21,zero
100088d4:	0005883a 	mov	r2,zero
100088d8:	2d00000b 	ldhu	r20,0(r5)
100088dc:	29400104 	addi	r5,r5,4
100088e0:	d9412315 	stw	r5,1164(sp)
100088e4:	a009883a 	mov	r4,r20
100088e8:	003db306 	br	10007fb8 <__alt_data_end+0xf8007fb8>
100088ec:	8880040c 	andi	r2,r17,16
100088f0:	1000411e 	bne	r2,zero,100089f8 <___vfiprintf_internal_r+0x1274>
100088f4:	8c40100c 	andi	r17,r17,64
100088f8:	88008726 	beq	r17,zero,10008b18 <___vfiprintf_internal_r+0x1394>
100088fc:	d9412317 	ldw	r5,1164(sp)
10008900:	d8c12417 	ldw	r3,1168(sp)
10008904:	28800017 	ldw	r2,0(r5)
10008908:	29400104 	addi	r5,r5,4
1000890c:	d9412315 	stw	r5,1164(sp)
10008910:	10c0000d 	sth	r3,0(r2)
10008914:	003bd206 	br	10007860 <__alt_data_end+0xf8007860>
10008918:	48c00007 	ldb	r3,0(r9)
1000891c:	003bf906 	br	10007904 <__alt_data_end+0xf8007904>
10008920:	8880100c 	andi	r2,r17,64
10008924:	10002c26 	beq	r2,zero,100089d8 <___vfiprintf_internal_r+0x1254>
10008928:	d9412317 	ldw	r5,1164(sp)
1000892c:	002b883a 	mov	r21,zero
10008930:	00800044 	movi	r2,1
10008934:	2d00000b 	ldhu	r20,0(r5)
10008938:	29400104 	addi	r5,r5,4
1000893c:	d9412315 	stw	r5,1164(sp)
10008940:	a009883a 	mov	r4,r20
10008944:	003d9c06 	br	10007fb8 <__alt_data_end+0xf8007fb8>
10008948:	8880100c 	andi	r2,r17,64
1000894c:	10001b26 	beq	r2,zero,100089bc <___vfiprintf_internal_r+0x1238>
10008950:	d9412317 	ldw	r5,1164(sp)
10008954:	2d00000f 	ldh	r20,0(r5)
10008958:	29400104 	addi	r5,r5,4
1000895c:	d9412315 	stw	r5,1164(sp)
10008960:	a02bd7fa 	srai	r21,r20,31
10008964:	a805883a 	mov	r2,r21
10008968:	003cbd06 	br	10007c60 <__alt_data_end+0xf8007c60>
1000896c:	d9012217 	ldw	r4,1160(sp)
10008970:	d9412017 	ldw	r5,1152(sp)
10008974:	d9811a04 	addi	r6,sp,1128
10008978:	d9c12b15 	stw	r7,1196(sp)
1000897c:	da412d15 	stw	r9,1204(sp)
10008980:	da812c15 	stw	r10,1200(sp)
10008984:	00076700 	call	10007670 <__sprint_r.part.0>
10008988:	d9c12b17 	ldw	r7,1196(sp)
1000898c:	da412d17 	ldw	r9,1204(sp)
10008990:	da812c17 	ldw	r10,1200(sp)
10008994:	103eb21e 	bne	r2,zero,10008460 <__alt_data_end+0xf8008460>
10008998:	d9411b17 	ldw	r5,1132(sp)
1000899c:	d8c11c17 	ldw	r3,1136(sp)
100089a0:	d811883a 	mov	r8,sp
100089a4:	28800044 	addi	r2,r5,1
100089a8:	003e7906 	br	10008390 <__alt_data_end+0xf8008390>
100089ac:	1829883a 	mov	r20,r3
100089b0:	003d7006 	br	10007f74 <__alt_data_end+0xf8007f74>
100089b4:	900f883a 	mov	r7,r18
100089b8:	003e2806 	br	1000825c <__alt_data_end+0xf800825c>
100089bc:	d8812317 	ldw	r2,1164(sp)
100089c0:	15000017 	ldw	r20,0(r2)
100089c4:	10800104 	addi	r2,r2,4
100089c8:	d8812315 	stw	r2,1164(sp)
100089cc:	a02bd7fa 	srai	r21,r20,31
100089d0:	a805883a 	mov	r2,r21
100089d4:	003ca206 	br	10007c60 <__alt_data_end+0xf8007c60>
100089d8:	d8812317 	ldw	r2,1164(sp)
100089dc:	002b883a 	mov	r21,zero
100089e0:	15000017 	ldw	r20,0(r2)
100089e4:	10800104 	addi	r2,r2,4
100089e8:	d8812315 	stw	r2,1164(sp)
100089ec:	a009883a 	mov	r4,r20
100089f0:	00800044 	movi	r2,1
100089f4:	003d7006 	br	10007fb8 <__alt_data_end+0xf8007fb8>
100089f8:	d8c12317 	ldw	r3,1164(sp)
100089fc:	d9012417 	ldw	r4,1168(sp)
10008a00:	18800017 	ldw	r2,0(r3)
10008a04:	18c00104 	addi	r3,r3,4
10008a08:	d8c12315 	stw	r3,1164(sp)
10008a0c:	11000015 	stw	r4,0(r2)
10008a10:	003b9306 	br	10007860 <__alt_data_end+0xf8007860>
10008a14:	d9412317 	ldw	r5,1164(sp)
10008a18:	002b883a 	mov	r21,zero
10008a1c:	2d000017 	ldw	r20,0(r5)
10008a20:	29400104 	addi	r5,r5,4
10008a24:	d9412315 	stw	r5,1164(sp)
10008a28:	003d8206 	br	10008034 <__alt_data_end+0xf8008034>
10008a2c:	d8812317 	ldw	r2,1164(sp)
10008a30:	002b883a 	mov	r21,zero
10008a34:	15000017 	ldw	r20,0(r2)
10008a38:	10800104 	addi	r2,r2,4
10008a3c:	d8812315 	stw	r2,1164(sp)
10008a40:	a009883a 	mov	r4,r20
10008a44:	0005883a 	mov	r2,zero
10008a48:	003d5b06 	br	10007fb8 <__alt_data_end+0xf8007fb8>
10008a4c:	04bfffc4 	movi	r18,-1
10008a50:	900d883a 	mov	r6,r18
10008a54:	003bac06 	br	10007908 <__alt_data_end+0xf8007908>
10008a58:	4a400044 	addi	r9,r9,1
10008a5c:	8c400814 	ori	r17,r17,32
10008a60:	10c00047 	ldb	r3,1(r2)
10008a64:	003ba706 	br	10007904 <__alt_data_end+0xf8007904>
10008a68:	d8c11f17 	ldw	r3,1148(sp)
10008a6c:	1dcfc83a 	sub	r7,r3,r23
10008a70:	003c8d06 	br	10007ca8 <__alt_data_end+0xf8007ca8>
10008a74:	da012b15 	stw	r8,1196(sp)
10008a78:	da412d15 	stw	r9,1204(sp)
10008a7c:	00075e40 	call	100075e4 <strlen>
10008a80:	100f883a 	mov	r7,r2
10008a84:	dd811d83 	ldbu	r22,1142(sp)
10008a88:	dd412315 	stw	r21,1164(sp)
10008a8c:	0025883a 	mov	r18,zero
10008a90:	da012b17 	ldw	r8,1196(sp)
10008a94:	da412d17 	ldw	r9,1204(sp)
10008a98:	003c8306 	br	10007ca8 <__alt_data_end+0xf8007ca8>
10008a9c:	d9012217 	ldw	r4,1160(sp)
10008aa0:	d9412017 	ldw	r5,1152(sp)
10008aa4:	d9811a04 	addi	r6,sp,1128
10008aa8:	d9c12b15 	stw	r7,1196(sp)
10008aac:	da412d15 	stw	r9,1204(sp)
10008ab0:	00076700 	call	10007670 <__sprint_r.part.0>
10008ab4:	d9c12b17 	ldw	r7,1196(sp)
10008ab8:	da412d17 	ldw	r9,1204(sp)
10008abc:	103e681e 	bne	r2,zero,10008460 <__alt_data_end+0xf8008460>
10008ac0:	d9411b17 	ldw	r5,1132(sp)
10008ac4:	d8c11c17 	ldw	r3,1136(sp)
10008ac8:	d811883a 	mov	r8,sp
10008acc:	28800044 	addi	r2,r5,1
10008ad0:	003cc506 	br	10007de8 <__alt_data_end+0xf8007de8>
10008ad4:	d9411b17 	ldw	r5,1132(sp)
10008ad8:	01040074 	movhi	r4,4097
10008adc:	213fc304 	addi	r4,r4,-244
10008ae0:	d9012515 	stw	r4,1172(sp)
10008ae4:	29400044 	addi	r5,r5,1
10008ae8:	003ca406 	br	10007d7c <__alt_data_end+0xf8007d7c>
10008aec:	00800184 	movi	r2,6
10008af0:	300f883a 	mov	r7,r6
10008af4:	1180012e 	bgeu	r2,r6,10008afc <___vfiprintf_internal_r+0x1378>
10008af8:	100f883a 	mov	r7,r2
10008afc:	3829883a 	mov	r20,r7
10008b00:	38001e16 	blt	r7,zero,10008b7c <___vfiprintf_internal_r+0x13f8>
10008b04:	dd412315 	stw	r21,1164(sp)
10008b08:	05c40074 	movhi	r23,4097
10008b0c:	bdff6304 	addi	r23,r23,-628
10008b10:	0025883a 	mov	r18,zero
10008b14:	003c6c06 	br	10007cc8 <__alt_data_end+0xf8007cc8>
10008b18:	d9012317 	ldw	r4,1164(sp)
10008b1c:	d9412417 	ldw	r5,1168(sp)
10008b20:	20800017 	ldw	r2,0(r4)
10008b24:	21000104 	addi	r4,r4,4
10008b28:	d9012315 	stw	r4,1164(sp)
10008b2c:	11400015 	stw	r5,0(r2)
10008b30:	003b4b06 	br	10007860 <__alt_data_end+0xf8007860>
10008b34:	d9411b17 	ldw	r5,1132(sp)
10008b38:	00840074 	movhi	r2,4097
10008b3c:	10bfc304 	addi	r2,r2,-244
10008b40:	d8812515 	stw	r2,1172(sp)
10008b44:	29400044 	addi	r5,r5,1
10008b48:	003cff06 	br	10007f48 <__alt_data_end+0xf8007f48>
10008b4c:	1009883a 	mov	r4,r2
10008b50:	05440074 	movhi	r21,4097
10008b54:	ad7fbf04 	addi	r21,r21,-260
10008b58:	003e9906 	br	100085c0 <__alt_data_end+0xf80085c0>
10008b5c:	900f883a 	mov	r7,r18
10008b60:	dd811d83 	ldbu	r22,1142(sp)
10008b64:	dd412315 	stw	r21,1164(sp)
10008b68:	0025883a 	mov	r18,zero
10008b6c:	003c4e06 	br	10007ca8 <__alt_data_end+0xf8007ca8>
10008b70:	1013883a 	mov	r9,r2
10008b74:	000d883a 	mov	r6,zero
10008b78:	003b6306 	br	10007908 <__alt_data_end+0xf8007908>
10008b7c:	0029883a 	mov	r20,zero
10008b80:	003fe006 	br	10008b04 <__alt_data_end+0xf8008b04>
10008b84:	043fffc4 	movi	r16,-1
10008b88:	003bf306 	br	10007b58 <__alt_data_end+0xf8007b58>
10008b8c:	d9412317 	ldw	r5,1164(sp)
10008b90:	48c00043 	ldbu	r3,1(r9)
10008b94:	1013883a 	mov	r9,r2
10008b98:	29800017 	ldw	r6,0(r5)
10008b9c:	29000104 	addi	r4,r5,4
10008ba0:	d9012315 	stw	r4,1164(sp)
10008ba4:	30000416 	blt	r6,zero,10008bb8 <___vfiprintf_internal_r+0x1434>
10008ba8:	18c03fcc 	andi	r3,r3,255
10008bac:	18c0201c 	xori	r3,r3,128
10008bb0:	18ffe004 	addi	r3,r3,-128
10008bb4:	003b5306 	br	10007904 <__alt_data_end+0xf8007904>
10008bb8:	18c03fcc 	andi	r3,r3,255
10008bbc:	18c0201c 	xori	r3,r3,128
10008bc0:	01bfffc4 	movi	r6,-1
10008bc4:	18ffe004 	addi	r3,r3,-128
10008bc8:	003b4e06 	br	10007904 <__alt_data_end+0xf8007904>

10008bcc <__vfiprintf_internal>:
10008bcc:	00840074 	movhi	r2,4097
10008bd0:	1086c204 	addi	r2,r2,6920
10008bd4:	2007883a 	mov	r3,r4
10008bd8:	11000017 	ldw	r4,0(r2)
10008bdc:	2805883a 	mov	r2,r5
10008be0:	300f883a 	mov	r7,r6
10008be4:	180b883a 	mov	r5,r3
10008be8:	100d883a 	mov	r6,r2
10008bec:	00077841 	jmpi	10007784 <___vfiprintf_internal_r>

10008bf0 <_write_r>:
10008bf0:	defffd04 	addi	sp,sp,-12
10008bf4:	dc400115 	stw	r17,4(sp)
10008bf8:	dc000015 	stw	r16,0(sp)
10008bfc:	2023883a 	mov	r17,r4
10008c00:	04040074 	movhi	r16,4097
10008c04:	840d9404 	addi	r16,r16,13904
10008c08:	2809883a 	mov	r4,r5
10008c0c:	300b883a 	mov	r5,r6
10008c10:	380d883a 	mov	r6,r7
10008c14:	dfc00215 	stw	ra,8(sp)
10008c18:	80000015 	stw	zero,0(r16)
10008c1c:	000e0080 	call	1000e008 <write>
10008c20:	00ffffc4 	movi	r3,-1
10008c24:	10c00526 	beq	r2,r3,10008c3c <_write_r+0x4c>
10008c28:	dfc00217 	ldw	ra,8(sp)
10008c2c:	dc400117 	ldw	r17,4(sp)
10008c30:	dc000017 	ldw	r16,0(sp)
10008c34:	dec00304 	addi	sp,sp,12
10008c38:	f800283a 	ret
10008c3c:	80c00017 	ldw	r3,0(r16)
10008c40:	183ff926 	beq	r3,zero,10008c28 <__alt_data_end+0xf8008c28>
10008c44:	88c00015 	stw	r3,0(r17)
10008c48:	dfc00217 	ldw	ra,8(sp)
10008c4c:	dc400117 	ldw	r17,4(sp)
10008c50:	dc000017 	ldw	r16,0(sp)
10008c54:	dec00304 	addi	sp,sp,12
10008c58:	f800283a 	ret

10008c5c <_close_r>:
10008c5c:	defffd04 	addi	sp,sp,-12
10008c60:	dc400115 	stw	r17,4(sp)
10008c64:	dc000015 	stw	r16,0(sp)
10008c68:	2023883a 	mov	r17,r4
10008c6c:	04040074 	movhi	r16,4097
10008c70:	840d9404 	addi	r16,r16,13904
10008c74:	2809883a 	mov	r4,r5
10008c78:	dfc00215 	stw	ra,8(sp)
10008c7c:	80000015 	stw	zero,0(r16)
10008c80:	000d6f40 	call	1000d6f4 <close>
10008c84:	00ffffc4 	movi	r3,-1
10008c88:	10c00526 	beq	r2,r3,10008ca0 <_close_r+0x44>
10008c8c:	dfc00217 	ldw	ra,8(sp)
10008c90:	dc400117 	ldw	r17,4(sp)
10008c94:	dc000017 	ldw	r16,0(sp)
10008c98:	dec00304 	addi	sp,sp,12
10008c9c:	f800283a 	ret
10008ca0:	80c00017 	ldw	r3,0(r16)
10008ca4:	183ff926 	beq	r3,zero,10008c8c <__alt_data_end+0xf8008c8c>
10008ca8:	88c00015 	stw	r3,0(r17)
10008cac:	dfc00217 	ldw	ra,8(sp)
10008cb0:	dc400117 	ldw	r17,4(sp)
10008cb4:	dc000017 	ldw	r16,0(sp)
10008cb8:	dec00304 	addi	sp,sp,12
10008cbc:	f800283a 	ret

10008cc0 <_calloc_r>:
10008cc0:	defffe04 	addi	sp,sp,-8
10008cc4:	dc000015 	stw	r16,0(sp)
10008cc8:	2021883a 	mov	r16,r4
10008ccc:	2809883a 	mov	r4,r5
10008cd0:	300b883a 	mov	r5,r6
10008cd4:	dfc00115 	stw	ra,4(sp)
10008cd8:	000aef80 	call	1000aef8 <__mulsi3>
10008cdc:	8009883a 	mov	r4,r16
10008ce0:	100b883a 	mov	r5,r2
10008ce4:	00058440 	call	10005844 <_malloc_r>
10008ce8:	1021883a 	mov	r16,r2
10008cec:	10002826 	beq	r2,zero,10008d90 <_calloc_r+0xd0>
10008cf0:	11bfff17 	ldw	r6,-4(r2)
10008cf4:	00ffff04 	movi	r3,-4
10008cf8:	00800904 	movi	r2,36
10008cfc:	30cc703a 	and	r6,r6,r3
10008d00:	30cd883a 	add	r6,r6,r3
10008d04:	11801436 	bltu	r2,r6,10008d58 <_calloc_r+0x98>
10008d08:	00c004c4 	movi	r3,19
10008d0c:	19800936 	bltu	r3,r6,10008d34 <_calloc_r+0x74>
10008d10:	8005883a 	mov	r2,r16
10008d14:	10000015 	stw	zero,0(r2)
10008d18:	10000115 	stw	zero,4(r2)
10008d1c:	10000215 	stw	zero,8(r2)
10008d20:	8005883a 	mov	r2,r16
10008d24:	dfc00117 	ldw	ra,4(sp)
10008d28:	dc000017 	ldw	r16,0(sp)
10008d2c:	dec00204 	addi	sp,sp,8
10008d30:	f800283a 	ret
10008d34:	80000015 	stw	zero,0(r16)
10008d38:	80000115 	stw	zero,4(r16)
10008d3c:	00c006c4 	movi	r3,27
10008d40:	19800d2e 	bgeu	r3,r6,10008d78 <_calloc_r+0xb8>
10008d44:	80000215 	stw	zero,8(r16)
10008d48:	80000315 	stw	zero,12(r16)
10008d4c:	30800c26 	beq	r6,r2,10008d80 <_calloc_r+0xc0>
10008d50:	80800404 	addi	r2,r16,16
10008d54:	003fef06 	br	10008d14 <__alt_data_end+0xf8008d14>
10008d58:	8009883a 	mov	r4,r16
10008d5c:	000b883a 	mov	r5,zero
10008d60:	00061fc0 	call	100061fc <memset>
10008d64:	8005883a 	mov	r2,r16
10008d68:	dfc00117 	ldw	ra,4(sp)
10008d6c:	dc000017 	ldw	r16,0(sp)
10008d70:	dec00204 	addi	sp,sp,8
10008d74:	f800283a 	ret
10008d78:	80800204 	addi	r2,r16,8
10008d7c:	003fe506 	br	10008d14 <__alt_data_end+0xf8008d14>
10008d80:	80000415 	stw	zero,16(r16)
10008d84:	80800604 	addi	r2,r16,24
10008d88:	80000515 	stw	zero,20(r16)
10008d8c:	003fe106 	br	10008d14 <__alt_data_end+0xf8008d14>
10008d90:	0005883a 	mov	r2,zero
10008d94:	003fe306 	br	10008d24 <__alt_data_end+0xf8008d24>

10008d98 <_fclose_r>:
10008d98:	defffc04 	addi	sp,sp,-16
10008d9c:	dc000015 	stw	r16,0(sp)
10008da0:	dfc00315 	stw	ra,12(sp)
10008da4:	dc800215 	stw	r18,8(sp)
10008da8:	dc400115 	stw	r17,4(sp)
10008dac:	2821883a 	mov	r16,r5
10008db0:	28003126 	beq	r5,zero,10008e78 <_fclose_r+0xe0>
10008db4:	2023883a 	mov	r17,r4
10008db8:	00050100 	call	10005010 <__sfp_lock_acquire>
10008dbc:	88000226 	beq	r17,zero,10008dc8 <_fclose_r+0x30>
10008dc0:	88800e17 	ldw	r2,56(r17)
10008dc4:	10003326 	beq	r2,zero,10008e94 <_fclose_r+0xfc>
10008dc8:	8080030f 	ldh	r2,12(r16)
10008dcc:	10002226 	beq	r2,zero,10008e58 <_fclose_r+0xc0>
10008dd0:	8809883a 	mov	r4,r17
10008dd4:	800b883a 	mov	r5,r16
10008dd8:	0004a380 	call	10004a38 <_fflush_r>
10008ddc:	80c00b17 	ldw	r3,44(r16)
10008de0:	1025883a 	mov	r18,r2
10008de4:	18000426 	beq	r3,zero,10008df8 <_fclose_r+0x60>
10008de8:	81400717 	ldw	r5,28(r16)
10008dec:	8809883a 	mov	r4,r17
10008df0:	183ee83a 	callr	r3
10008df4:	10003016 	blt	r2,zero,10008eb8 <_fclose_r+0x120>
10008df8:	8080030b 	ldhu	r2,12(r16)
10008dfc:	1080200c 	andi	r2,r2,128
10008e00:	1000291e 	bne	r2,zero,10008ea8 <_fclose_r+0x110>
10008e04:	81400c17 	ldw	r5,48(r16)
10008e08:	28000526 	beq	r5,zero,10008e20 <_fclose_r+0x88>
10008e0c:	80801004 	addi	r2,r16,64
10008e10:	28800226 	beq	r5,r2,10008e1c <_fclose_r+0x84>
10008e14:	8809883a 	mov	r4,r17
10008e18:	000518c0 	call	1000518c <_free_r>
10008e1c:	80000c15 	stw	zero,48(r16)
10008e20:	81401117 	ldw	r5,68(r16)
10008e24:	28000326 	beq	r5,zero,10008e34 <_fclose_r+0x9c>
10008e28:	8809883a 	mov	r4,r17
10008e2c:	000518c0 	call	1000518c <_free_r>
10008e30:	80001115 	stw	zero,68(r16)
10008e34:	8000030d 	sth	zero,12(r16)
10008e38:	00050140 	call	10005014 <__sfp_lock_release>
10008e3c:	9005883a 	mov	r2,r18
10008e40:	dfc00317 	ldw	ra,12(sp)
10008e44:	dc800217 	ldw	r18,8(sp)
10008e48:	dc400117 	ldw	r17,4(sp)
10008e4c:	dc000017 	ldw	r16,0(sp)
10008e50:	dec00404 	addi	sp,sp,16
10008e54:	f800283a 	ret
10008e58:	00050140 	call	10005014 <__sfp_lock_release>
10008e5c:	0005883a 	mov	r2,zero
10008e60:	dfc00317 	ldw	ra,12(sp)
10008e64:	dc800217 	ldw	r18,8(sp)
10008e68:	dc400117 	ldw	r17,4(sp)
10008e6c:	dc000017 	ldw	r16,0(sp)
10008e70:	dec00404 	addi	sp,sp,16
10008e74:	f800283a 	ret
10008e78:	0005883a 	mov	r2,zero
10008e7c:	dfc00317 	ldw	ra,12(sp)
10008e80:	dc800217 	ldw	r18,8(sp)
10008e84:	dc400117 	ldw	r17,4(sp)
10008e88:	dc000017 	ldw	r16,0(sp)
10008e8c:	dec00404 	addi	sp,sp,16
10008e90:	f800283a 	ret
10008e94:	8809883a 	mov	r4,r17
10008e98:	0004d580 	call	10004d58 <__sinit>
10008e9c:	8080030f 	ldh	r2,12(r16)
10008ea0:	103fcb1e 	bne	r2,zero,10008dd0 <__alt_data_end+0xf8008dd0>
10008ea4:	003fec06 	br	10008e58 <__alt_data_end+0xf8008e58>
10008ea8:	81400417 	ldw	r5,16(r16)
10008eac:	8809883a 	mov	r4,r17
10008eb0:	000518c0 	call	1000518c <_free_r>
10008eb4:	003fd306 	br	10008e04 <__alt_data_end+0xf8008e04>
10008eb8:	04bfffc4 	movi	r18,-1
10008ebc:	003fce06 	br	10008df8 <__alt_data_end+0xf8008df8>

10008ec0 <fclose>:
10008ec0:	00840074 	movhi	r2,4097
10008ec4:	1086c204 	addi	r2,r2,6920
10008ec8:	200b883a 	mov	r5,r4
10008ecc:	11000017 	ldw	r4,0(r2)
10008ed0:	0008d981 	jmpi	10008d98 <_fclose_r>

10008ed4 <_fputwc_r>:
10008ed4:	3080030b 	ldhu	r2,12(r6)
10008ed8:	defff804 	addi	sp,sp,-32
10008edc:	dcc00415 	stw	r19,16(sp)
10008ee0:	dc800315 	stw	r18,12(sp)
10008ee4:	dc000115 	stw	r16,4(sp)
10008ee8:	dfc00715 	stw	ra,28(sp)
10008eec:	dd400615 	stw	r21,24(sp)
10008ef0:	dd000515 	stw	r20,20(sp)
10008ef4:	dc400215 	stw	r17,8(sp)
10008ef8:	10c8000c 	andi	r3,r2,8192
10008efc:	3021883a 	mov	r16,r6
10008f00:	2027883a 	mov	r19,r4
10008f04:	2825883a 	mov	r18,r5
10008f08:	1800051e 	bne	r3,zero,10008f20 <_fputwc_r+0x4c>
10008f0c:	30c01917 	ldw	r3,100(r6)
10008f10:	10880014 	ori	r2,r2,8192
10008f14:	3080030d 	sth	r2,12(r6)
10008f18:	18880014 	ori	r2,r3,8192
10008f1c:	30801915 	stw	r2,100(r6)
10008f20:	00056380 	call	10005638 <__locale_mb_cur_max>
10008f24:	00c00044 	movi	r3,1
10008f28:	10c03e26 	beq	r2,r3,10009024 <_fputwc_r+0x150>
10008f2c:	9809883a 	mov	r4,r19
10008f30:	d80b883a 	mov	r5,sp
10008f34:	900d883a 	mov	r6,r18
10008f38:	81c01704 	addi	r7,r16,92
10008f3c:	0009f5c0 	call	10009f5c <_wcrtomb_r>
10008f40:	1029883a 	mov	r20,r2
10008f44:	00bfffc4 	movi	r2,-1
10008f48:	a0802026 	beq	r20,r2,10008fcc <_fputwc_r+0xf8>
10008f4c:	d9400003 	ldbu	r5,0(sp)
10008f50:	a0001c26 	beq	r20,zero,10008fc4 <_fputwc_r+0xf0>
10008f54:	0023883a 	mov	r17,zero
10008f58:	05400284 	movi	r21,10
10008f5c:	00000906 	br	10008f84 <_fputwc_r+0xb0>
10008f60:	80c00017 	ldw	r3,0(r16)
10008f64:	19400005 	stb	r5,0(r3)
10008f68:	80c00017 	ldw	r3,0(r16)
10008f6c:	18c00044 	addi	r3,r3,1
10008f70:	80c00015 	stw	r3,0(r16)
10008f74:	8c400044 	addi	r17,r17,1
10008f78:	dc47883a 	add	r3,sp,r17
10008f7c:	8d00112e 	bgeu	r17,r20,10008fc4 <_fputwc_r+0xf0>
10008f80:	19400003 	ldbu	r5,0(r3)
10008f84:	80c00217 	ldw	r3,8(r16)
10008f88:	18ffffc4 	addi	r3,r3,-1
10008f8c:	80c00215 	stw	r3,8(r16)
10008f90:	183ff30e 	bge	r3,zero,10008f60 <__alt_data_end+0xf8008f60>
10008f94:	80800617 	ldw	r2,24(r16)
10008f98:	18801916 	blt	r3,r2,10009000 <_fputwc_r+0x12c>
10008f9c:	80800017 	ldw	r2,0(r16)
10008fa0:	11400005 	stb	r5,0(r2)
10008fa4:	80800017 	ldw	r2,0(r16)
10008fa8:	10c00003 	ldbu	r3,0(r2)
10008fac:	10800044 	addi	r2,r2,1
10008fb0:	1d402326 	beq	r3,r21,10009040 <_fputwc_r+0x16c>
10008fb4:	8c400044 	addi	r17,r17,1
10008fb8:	80800015 	stw	r2,0(r16)
10008fbc:	dc47883a 	add	r3,sp,r17
10008fc0:	8d3fef36 	bltu	r17,r20,10008f80 <__alt_data_end+0xf8008f80>
10008fc4:	9005883a 	mov	r2,r18
10008fc8:	00000406 	br	10008fdc <_fputwc_r+0x108>
10008fcc:	80c0030b 	ldhu	r3,12(r16)
10008fd0:	a005883a 	mov	r2,r20
10008fd4:	18c01014 	ori	r3,r3,64
10008fd8:	80c0030d 	sth	r3,12(r16)
10008fdc:	dfc00717 	ldw	ra,28(sp)
10008fe0:	dd400617 	ldw	r21,24(sp)
10008fe4:	dd000517 	ldw	r20,20(sp)
10008fe8:	dcc00417 	ldw	r19,16(sp)
10008fec:	dc800317 	ldw	r18,12(sp)
10008ff0:	dc400217 	ldw	r17,8(sp)
10008ff4:	dc000117 	ldw	r16,4(sp)
10008ff8:	dec00804 	addi	sp,sp,32
10008ffc:	f800283a 	ret
10009000:	9809883a 	mov	r4,r19
10009004:	29403fcc 	andi	r5,r5,255
10009008:	800d883a 	mov	r6,r16
1000900c:	0009dc00 	call	10009dc0 <__swbuf_r>
10009010:	10bfffe0 	cmpeqi	r2,r2,-1
10009014:	10803fcc 	andi	r2,r2,255
10009018:	103fd626 	beq	r2,zero,10008f74 <__alt_data_end+0xf8008f74>
1000901c:	00bfffc4 	movi	r2,-1
10009020:	003fee06 	br	10008fdc <__alt_data_end+0xf8008fdc>
10009024:	90ffffc4 	addi	r3,r18,-1
10009028:	01003f84 	movi	r4,254
1000902c:	20ffbf36 	bltu	r4,r3,10008f2c <__alt_data_end+0xf8008f2c>
10009030:	900b883a 	mov	r5,r18
10009034:	dc800005 	stb	r18,0(sp)
10009038:	1029883a 	mov	r20,r2
1000903c:	003fc506 	br	10008f54 <__alt_data_end+0xf8008f54>
10009040:	9809883a 	mov	r4,r19
10009044:	a80b883a 	mov	r5,r21
10009048:	800d883a 	mov	r6,r16
1000904c:	0009dc00 	call	10009dc0 <__swbuf_r>
10009050:	10bfffe0 	cmpeqi	r2,r2,-1
10009054:	003fef06 	br	10009014 <__alt_data_end+0xf8009014>

10009058 <fputwc>:
10009058:	defffc04 	addi	sp,sp,-16
1000905c:	dc000115 	stw	r16,4(sp)
10009060:	04040074 	movhi	r16,4097
10009064:	8406c204 	addi	r16,r16,6920
10009068:	80800017 	ldw	r2,0(r16)
1000906c:	dc400215 	stw	r17,8(sp)
10009070:	dfc00315 	stw	ra,12(sp)
10009074:	2023883a 	mov	r17,r4
10009078:	280d883a 	mov	r6,r5
1000907c:	10000d26 	beq	r2,zero,100090b4 <fputwc+0x5c>
10009080:	10c00e17 	ldw	r3,56(r2)
10009084:	1009883a 	mov	r4,r2
10009088:	1800041e 	bne	r3,zero,1000909c <fputwc+0x44>
1000908c:	d9400015 	stw	r5,0(sp)
10009090:	0004d580 	call	10004d58 <__sinit>
10009094:	81000017 	ldw	r4,0(r16)
10009098:	d9800017 	ldw	r6,0(sp)
1000909c:	880b883a 	mov	r5,r17
100090a0:	dfc00317 	ldw	ra,12(sp)
100090a4:	dc400217 	ldw	r17,8(sp)
100090a8:	dc000117 	ldw	r16,4(sp)
100090ac:	dec00404 	addi	sp,sp,16
100090b0:	0008ed41 	jmpi	10008ed4 <_fputwc_r>
100090b4:	0009883a 	mov	r4,zero
100090b8:	880b883a 	mov	r5,r17
100090bc:	dfc00317 	ldw	ra,12(sp)
100090c0:	dc400217 	ldw	r17,8(sp)
100090c4:	dc000117 	ldw	r16,4(sp)
100090c8:	dec00404 	addi	sp,sp,16
100090cc:	0008ed41 	jmpi	10008ed4 <_fputwc_r>

100090d0 <_fstat_r>:
100090d0:	defffd04 	addi	sp,sp,-12
100090d4:	dc400115 	stw	r17,4(sp)
100090d8:	dc000015 	stw	r16,0(sp)
100090dc:	2023883a 	mov	r17,r4
100090e0:	04040074 	movhi	r16,4097
100090e4:	840d9404 	addi	r16,r16,13904
100090e8:	2809883a 	mov	r4,r5
100090ec:	300b883a 	mov	r5,r6
100090f0:	dfc00215 	stw	ra,8(sp)
100090f4:	80000015 	stw	zero,0(r16)
100090f8:	000d8d00 	call	1000d8d0 <fstat>
100090fc:	00ffffc4 	movi	r3,-1
10009100:	10c00526 	beq	r2,r3,10009118 <_fstat_r+0x48>
10009104:	dfc00217 	ldw	ra,8(sp)
10009108:	dc400117 	ldw	r17,4(sp)
1000910c:	dc000017 	ldw	r16,0(sp)
10009110:	dec00304 	addi	sp,sp,12
10009114:	f800283a 	ret
10009118:	80c00017 	ldw	r3,0(r16)
1000911c:	183ff926 	beq	r3,zero,10009104 <__alt_data_end+0xf8009104>
10009120:	88c00015 	stw	r3,0(r17)
10009124:	dfc00217 	ldw	ra,8(sp)
10009128:	dc400117 	ldw	r17,4(sp)
1000912c:	dc000017 	ldw	r16,0(sp)
10009130:	dec00304 	addi	sp,sp,12
10009134:	f800283a 	ret

10009138 <__sfvwrite_r>:
10009138:	30800217 	ldw	r2,8(r6)
1000913c:	defff404 	addi	sp,sp,-48
10009140:	dcc00515 	stw	r19,20(sp)
10009144:	dfc00b15 	stw	ra,44(sp)
10009148:	df000a15 	stw	fp,40(sp)
1000914c:	ddc00915 	stw	r23,36(sp)
10009150:	dd800815 	stw	r22,32(sp)
10009154:	dd400715 	stw	r21,28(sp)
10009158:	dd000615 	stw	r20,24(sp)
1000915c:	dc800415 	stw	r18,16(sp)
10009160:	dc400315 	stw	r17,12(sp)
10009164:	dc000215 	stw	r16,8(sp)
10009168:	3027883a 	mov	r19,r6
1000916c:	10001d26 	beq	r2,zero,100091e4 <__sfvwrite_r+0xac>
10009170:	2880030b 	ldhu	r2,12(r5)
10009174:	202b883a 	mov	r21,r4
10009178:	2821883a 	mov	r16,r5
1000917c:	10c0020c 	andi	r3,r2,8
10009180:	18002526 	beq	r3,zero,10009218 <__sfvwrite_r+0xe0>
10009184:	28c00417 	ldw	r3,16(r5)
10009188:	18002326 	beq	r3,zero,10009218 <__sfvwrite_r+0xe0>
1000918c:	10c0008c 	andi	r3,r2,2
10009190:	9c400017 	ldw	r17,0(r19)
10009194:	18002826 	beq	r3,zero,10009238 <__sfvwrite_r+0x100>
10009198:	0029883a 	mov	r20,zero
1000919c:	0025883a 	mov	r18,zero
100091a0:	05810004 	movi	r22,1024
100091a4:	a00d883a 	mov	r6,r20
100091a8:	a809883a 	mov	r4,r21
100091ac:	90004726 	beq	r18,zero,100092cc <__sfvwrite_r+0x194>
100091b0:	900f883a 	mov	r7,r18
100091b4:	81400717 	ldw	r5,28(r16)
100091b8:	b480012e 	bgeu	r22,r18,100091c0 <__sfvwrite_r+0x88>
100091bc:	01c10004 	movi	r7,1024
100091c0:	80800917 	ldw	r2,36(r16)
100091c4:	103ee83a 	callr	r2
100091c8:	00804c0e 	bge	zero,r2,100092fc <__sfvwrite_r+0x1c4>
100091cc:	98c00217 	ldw	r3,8(r19)
100091d0:	a0a9883a 	add	r20,r20,r2
100091d4:	90a5c83a 	sub	r18,r18,r2
100091d8:	1885c83a 	sub	r2,r3,r2
100091dc:	98800215 	stw	r2,8(r19)
100091e0:	103ff01e 	bne	r2,zero,100091a4 <__alt_data_end+0xf80091a4>
100091e4:	0005883a 	mov	r2,zero
100091e8:	dfc00b17 	ldw	ra,44(sp)
100091ec:	df000a17 	ldw	fp,40(sp)
100091f0:	ddc00917 	ldw	r23,36(sp)
100091f4:	dd800817 	ldw	r22,32(sp)
100091f8:	dd400717 	ldw	r21,28(sp)
100091fc:	dd000617 	ldw	r20,24(sp)
10009200:	dcc00517 	ldw	r19,20(sp)
10009204:	dc800417 	ldw	r18,16(sp)
10009208:	dc400317 	ldw	r17,12(sp)
1000920c:	dc000217 	ldw	r16,8(sp)
10009210:	dec00c04 	addi	sp,sp,48
10009214:	f800283a 	ret
10009218:	a809883a 	mov	r4,r21
1000921c:	800b883a 	mov	r5,r16
10009220:	000309c0 	call	1000309c <__swsetup_r>
10009224:	1000e81e 	bne	r2,zero,100095c8 <__sfvwrite_r+0x490>
10009228:	8080030b 	ldhu	r2,12(r16)
1000922c:	9c400017 	ldw	r17,0(r19)
10009230:	10c0008c 	andi	r3,r2,2
10009234:	183fd81e 	bne	r3,zero,10009198 <__alt_data_end+0xf8009198>
10009238:	10c0004c 	andi	r3,r2,1
1000923c:	002d883a 	mov	r22,zero
10009240:	1800331e 	bne	r3,zero,10009310 <__sfvwrite_r+0x1d8>
10009244:	0025883a 	mov	r18,zero
10009248:	90001c26 	beq	r18,zero,100092bc <__sfvwrite_r+0x184>
1000924c:	10c0800c 	andi	r3,r2,512
10009250:	85000217 	ldw	r20,8(r16)
10009254:	18006f26 	beq	r3,zero,10009414 <__sfvwrite_r+0x2dc>
10009258:	95008936 	bltu	r18,r20,10009480 <__sfvwrite_r+0x348>
1000925c:	10c1200c 	andi	r3,r2,1152
10009260:	1800a11e 	bne	r3,zero,100094e8 <__sfvwrite_r+0x3b0>
10009264:	81000017 	ldw	r4,0(r16)
10009268:	a02f883a 	mov	r23,r20
1000926c:	a039883a 	mov	fp,r20
10009270:	9029883a 	mov	r20,r18
10009274:	b00b883a 	mov	r5,r22
10009278:	b80d883a 	mov	r6,r23
1000927c:	00096b40 	call	100096b4 <memmove>
10009280:	81400217 	ldw	r5,8(r16)
10009284:	81000017 	ldw	r4,0(r16)
10009288:	9005883a 	mov	r2,r18
1000928c:	2f39c83a 	sub	fp,r5,fp
10009290:	25c7883a 	add	r3,r4,r23
10009294:	87000215 	stw	fp,8(r16)
10009298:	80c00015 	stw	r3,0(r16)
1000929c:	98c00217 	ldw	r3,8(r19)
100092a0:	b0ad883a 	add	r22,r22,r2
100092a4:	90a5c83a 	sub	r18,r18,r2
100092a8:	1d29c83a 	sub	r20,r3,r20
100092ac:	9d000215 	stw	r20,8(r19)
100092b0:	a03fcc26 	beq	r20,zero,100091e4 <__alt_data_end+0xf80091e4>
100092b4:	8080030b 	ldhu	r2,12(r16)
100092b8:	903fe41e 	bne	r18,zero,1000924c <__alt_data_end+0xf800924c>
100092bc:	8d800017 	ldw	r22,0(r17)
100092c0:	8c800117 	ldw	r18,4(r17)
100092c4:	8c400204 	addi	r17,r17,8
100092c8:	003fdf06 	br	10009248 <__alt_data_end+0xf8009248>
100092cc:	8d000017 	ldw	r20,0(r17)
100092d0:	8c800117 	ldw	r18,4(r17)
100092d4:	8c400204 	addi	r17,r17,8
100092d8:	003fb206 	br	100091a4 <__alt_data_end+0xf80091a4>
100092dc:	000985c0 	call	1000985c <_realloc_r>
100092e0:	1039883a 	mov	fp,r2
100092e4:	10009d1e 	bne	r2,zero,1000955c <__sfvwrite_r+0x424>
100092e8:	81400417 	ldw	r5,16(r16)
100092ec:	a809883a 	mov	r4,r21
100092f0:	000518c0 	call	1000518c <_free_r>
100092f4:	00800304 	movi	r2,12
100092f8:	a8800015 	stw	r2,0(r21)
100092fc:	80c0030b 	ldhu	r3,12(r16)
10009300:	00bfffc4 	movi	r2,-1
10009304:	18c01014 	ori	r3,r3,64
10009308:	80c0030d 	sth	r3,12(r16)
1000930c:	003fb606 	br	100091e8 <__alt_data_end+0xf80091e8>
10009310:	0007883a 	mov	r3,zero
10009314:	0039883a 	mov	fp,zero
10009318:	0025883a 	mov	r18,zero
1000931c:	90001f26 	beq	r18,zero,1000939c <__sfvwrite_r+0x264>
10009320:	18006826 	beq	r3,zero,100094c4 <__sfvwrite_r+0x38c>
10009324:	b02f883a 	mov	r23,r22
10009328:	9580012e 	bgeu	r18,r22,10009330 <__sfvwrite_r+0x1f8>
1000932c:	902f883a 	mov	r23,r18
10009330:	81000017 	ldw	r4,0(r16)
10009334:	80800417 	ldw	r2,16(r16)
10009338:	b829883a 	mov	r20,r23
1000933c:	81800217 	ldw	r6,8(r16)
10009340:	81c00517 	ldw	r7,20(r16)
10009344:	1100022e 	bgeu	r2,r4,10009350 <__sfvwrite_r+0x218>
10009348:	31d1883a 	add	r8,r6,r7
1000934c:	45c01816 	blt	r8,r23,100093b0 <__sfvwrite_r+0x278>
10009350:	b9c03f16 	blt	r23,r7,10009450 <__sfvwrite_r+0x318>
10009354:	80800917 	ldw	r2,36(r16)
10009358:	81400717 	ldw	r5,28(r16)
1000935c:	a809883a 	mov	r4,r21
10009360:	d8c00115 	stw	r3,4(sp)
10009364:	e00d883a 	mov	r6,fp
10009368:	103ee83a 	callr	r2
1000936c:	1029883a 	mov	r20,r2
10009370:	d8c00117 	ldw	r3,4(sp)
10009374:	00bfe10e 	bge	zero,r2,100092fc <__alt_data_end+0xf80092fc>
10009378:	b52dc83a 	sub	r22,r22,r20
1000937c:	b0001f26 	beq	r22,zero,100093fc <__sfvwrite_r+0x2c4>
10009380:	98800217 	ldw	r2,8(r19)
10009384:	e539883a 	add	fp,fp,r20
10009388:	9525c83a 	sub	r18,r18,r20
1000938c:	1529c83a 	sub	r20,r2,r20
10009390:	9d000215 	stw	r20,8(r19)
10009394:	a03f9326 	beq	r20,zero,100091e4 <__alt_data_end+0xf80091e4>
10009398:	903fe11e 	bne	r18,zero,10009320 <__alt_data_end+0xf8009320>
1000939c:	8f000017 	ldw	fp,0(r17)
100093a0:	8c800117 	ldw	r18,4(r17)
100093a4:	0007883a 	mov	r3,zero
100093a8:	8c400204 	addi	r17,r17,8
100093ac:	003fdb06 	br	1000931c <__alt_data_end+0xf800931c>
100093b0:	400d883a 	mov	r6,r8
100093b4:	e00b883a 	mov	r5,fp
100093b8:	d8c00115 	stw	r3,4(sp)
100093bc:	da000015 	stw	r8,0(sp)
100093c0:	00096b40 	call	100096b4 <memmove>
100093c4:	da000017 	ldw	r8,0(sp)
100093c8:	80800017 	ldw	r2,0(r16)
100093cc:	a809883a 	mov	r4,r21
100093d0:	800b883a 	mov	r5,r16
100093d4:	1205883a 	add	r2,r2,r8
100093d8:	80800015 	stw	r2,0(r16)
100093dc:	da000015 	stw	r8,0(sp)
100093e0:	0004a380 	call	10004a38 <_fflush_r>
100093e4:	d8c00117 	ldw	r3,4(sp)
100093e8:	da000017 	ldw	r8,0(sp)
100093ec:	103fc31e 	bne	r2,zero,100092fc <__alt_data_end+0xf80092fc>
100093f0:	4029883a 	mov	r20,r8
100093f4:	b52dc83a 	sub	r22,r22,r20
100093f8:	b03fe11e 	bne	r22,zero,10009380 <__alt_data_end+0xf8009380>
100093fc:	a809883a 	mov	r4,r21
10009400:	800b883a 	mov	r5,r16
10009404:	0004a380 	call	10004a38 <_fflush_r>
10009408:	103fbc1e 	bne	r2,zero,100092fc <__alt_data_end+0xf80092fc>
1000940c:	0007883a 	mov	r3,zero
10009410:	003fdb06 	br	10009380 <__alt_data_end+0xf8009380>
10009414:	81000017 	ldw	r4,0(r16)
10009418:	80800417 	ldw	r2,16(r16)
1000941c:	1100012e 	bgeu	r2,r4,10009424 <__sfvwrite_r+0x2ec>
10009420:	a4805836 	bltu	r20,r18,10009584 <__sfvwrite_r+0x44c>
10009424:	81c00517 	ldw	r7,20(r16)
10009428:	91c01a36 	bltu	r18,r7,10009494 <__sfvwrite_r+0x35c>
1000942c:	80800917 	ldw	r2,36(r16)
10009430:	81400717 	ldw	r5,28(r16)
10009434:	a809883a 	mov	r4,r21
10009438:	b00d883a 	mov	r6,r22
1000943c:	103ee83a 	callr	r2
10009440:	1029883a 	mov	r20,r2
10009444:	00bfad0e 	bge	zero,r2,100092fc <__alt_data_end+0xf80092fc>
10009448:	a005883a 	mov	r2,r20
1000944c:	003f9306 	br	1000929c <__alt_data_end+0xf800929c>
10009450:	b80d883a 	mov	r6,r23
10009454:	e00b883a 	mov	r5,fp
10009458:	d8c00115 	stw	r3,4(sp)
1000945c:	00096b40 	call	100096b4 <memmove>
10009460:	80800217 	ldw	r2,8(r16)
10009464:	81000017 	ldw	r4,0(r16)
10009468:	d8c00117 	ldw	r3,4(sp)
1000946c:	15c5c83a 	sub	r2,r2,r23
10009470:	25ef883a 	add	r23,r4,r23
10009474:	80800215 	stw	r2,8(r16)
10009478:	85c00015 	stw	r23,0(r16)
1000947c:	003fbe06 	br	10009378 <__alt_data_end+0xf8009378>
10009480:	81000017 	ldw	r4,0(r16)
10009484:	9039883a 	mov	fp,r18
10009488:	9029883a 	mov	r20,r18
1000948c:	902f883a 	mov	r23,r18
10009490:	003f7806 	br	10009274 <__alt_data_end+0xf8009274>
10009494:	b00b883a 	mov	r5,r22
10009498:	900d883a 	mov	r6,r18
1000949c:	00096b40 	call	100096b4 <memmove>
100094a0:	80c00217 	ldw	r3,8(r16)
100094a4:	80800017 	ldw	r2,0(r16)
100094a8:	9029883a 	mov	r20,r18
100094ac:	1c87c83a 	sub	r3,r3,r18
100094b0:	1485883a 	add	r2,r2,r18
100094b4:	80800015 	stw	r2,0(r16)
100094b8:	80c00215 	stw	r3,8(r16)
100094bc:	9005883a 	mov	r2,r18
100094c0:	003f7606 	br	1000929c <__alt_data_end+0xf800929c>
100094c4:	e009883a 	mov	r4,fp
100094c8:	01400284 	movi	r5,10
100094cc:	900d883a 	mov	r6,r18
100094d0:	00060080 	call	10006008 <memchr>
100094d4:	10003926 	beq	r2,zero,100095bc <__sfvwrite_r+0x484>
100094d8:	15800044 	addi	r22,r2,1
100094dc:	b72dc83a 	sub	r22,r22,fp
100094e0:	00c00044 	movi	r3,1
100094e4:	003f8f06 	br	10009324 <__alt_data_end+0xf8009324>
100094e8:	81000517 	ldw	r4,20(r16)
100094ec:	81400417 	ldw	r5,16(r16)
100094f0:	80c00017 	ldw	r3,0(r16)
100094f4:	210d883a 	add	r6,r4,r4
100094f8:	3109883a 	add	r4,r6,r4
100094fc:	2028d7fa 	srli	r20,r4,31
10009500:	196fc83a 	sub	r23,r3,r5
10009504:	b9800044 	addi	r6,r23,1
10009508:	a109883a 	add	r4,r20,r4
1000950c:	2029d07a 	srai	r20,r4,1
10009510:	348d883a 	add	r6,r6,r18
10009514:	a180272e 	bgeu	r20,r6,100095b4 <__sfvwrite_r+0x47c>
10009518:	3029883a 	mov	r20,r6
1000951c:	1081000c 	andi	r2,r2,1024
10009520:	a809883a 	mov	r4,r21
10009524:	103f6d26 	beq	r2,zero,100092dc <__alt_data_end+0xf80092dc>
10009528:	300b883a 	mov	r5,r6
1000952c:	00058440 	call	10005844 <_malloc_r>
10009530:	1039883a 	mov	fp,r2
10009534:	103f6f26 	beq	r2,zero,100092f4 <__alt_data_end+0xf80092f4>
10009538:	81400417 	ldw	r5,16(r16)
1000953c:	1009883a 	mov	r4,r2
10009540:	b80d883a 	mov	r6,r23
10009544:	00060f00 	call	100060f0 <memcpy>
10009548:	8080030b 	ldhu	r2,12(r16)
1000954c:	00fedfc4 	movi	r3,-1153
10009550:	10c4703a 	and	r2,r2,r3
10009554:	10802014 	ori	r2,r2,128
10009558:	8080030d 	sth	r2,12(r16)
1000955c:	e5c9883a 	add	r4,fp,r23
10009560:	a5c7c83a 	sub	r3,r20,r23
10009564:	87000415 	stw	fp,16(r16)
10009568:	85000515 	stw	r20,20(r16)
1000956c:	81000015 	stw	r4,0(r16)
10009570:	9039883a 	mov	fp,r18
10009574:	80c00215 	stw	r3,8(r16)
10009578:	9029883a 	mov	r20,r18
1000957c:	902f883a 	mov	r23,r18
10009580:	003f3c06 	br	10009274 <__alt_data_end+0xf8009274>
10009584:	b00b883a 	mov	r5,r22
10009588:	a00d883a 	mov	r6,r20
1000958c:	00096b40 	call	100096b4 <memmove>
10009590:	80800017 	ldw	r2,0(r16)
10009594:	a809883a 	mov	r4,r21
10009598:	800b883a 	mov	r5,r16
1000959c:	1505883a 	add	r2,r2,r20
100095a0:	80800015 	stw	r2,0(r16)
100095a4:	0004a380 	call	10004a38 <_fflush_r>
100095a8:	103f541e 	bne	r2,zero,100092fc <__alt_data_end+0xf80092fc>
100095ac:	a005883a 	mov	r2,r20
100095b0:	003f3a06 	br	1000929c <__alt_data_end+0xf800929c>
100095b4:	a00d883a 	mov	r6,r20
100095b8:	003fd806 	br	1000951c <__alt_data_end+0xf800951c>
100095bc:	95800044 	addi	r22,r18,1
100095c0:	00c00044 	movi	r3,1
100095c4:	003f5706 	br	10009324 <__alt_data_end+0xf8009324>
100095c8:	80c0030b 	ldhu	r3,12(r16)
100095cc:	00bfffc4 	movi	r2,-1
100095d0:	18c01014 	ori	r3,r3,64
100095d4:	80c0030d 	sth	r3,12(r16)
100095d8:	00c00244 	movi	r3,9
100095dc:	a8c00015 	stw	r3,0(r21)
100095e0:	003f0106 	br	100091e8 <__alt_data_end+0xf80091e8>

100095e4 <_isatty_r>:
100095e4:	defffd04 	addi	sp,sp,-12
100095e8:	dc400115 	stw	r17,4(sp)
100095ec:	dc000015 	stw	r16,0(sp)
100095f0:	2023883a 	mov	r17,r4
100095f4:	04040074 	movhi	r16,4097
100095f8:	840d9404 	addi	r16,r16,13904
100095fc:	2809883a 	mov	r4,r5
10009600:	dfc00215 	stw	ra,8(sp)
10009604:	80000015 	stw	zero,0(r16)
10009608:	000d9d40 	call	1000d9d4 <isatty>
1000960c:	00ffffc4 	movi	r3,-1
10009610:	10c00526 	beq	r2,r3,10009628 <_isatty_r+0x44>
10009614:	dfc00217 	ldw	ra,8(sp)
10009618:	dc400117 	ldw	r17,4(sp)
1000961c:	dc000017 	ldw	r16,0(sp)
10009620:	dec00304 	addi	sp,sp,12
10009624:	f800283a 	ret
10009628:	80c00017 	ldw	r3,0(r16)
1000962c:	183ff926 	beq	r3,zero,10009614 <__alt_data_end+0xf8009614>
10009630:	88c00015 	stw	r3,0(r17)
10009634:	dfc00217 	ldw	ra,8(sp)
10009638:	dc400117 	ldw	r17,4(sp)
1000963c:	dc000017 	ldw	r16,0(sp)
10009640:	dec00304 	addi	sp,sp,12
10009644:	f800283a 	ret

10009648 <_lseek_r>:
10009648:	defffd04 	addi	sp,sp,-12
1000964c:	dc400115 	stw	r17,4(sp)
10009650:	dc000015 	stw	r16,0(sp)
10009654:	2023883a 	mov	r17,r4
10009658:	04040074 	movhi	r16,4097
1000965c:	840d9404 	addi	r16,r16,13904
10009660:	2809883a 	mov	r4,r5
10009664:	300b883a 	mov	r5,r6
10009668:	380d883a 	mov	r6,r7
1000966c:	dfc00215 	stw	ra,8(sp)
10009670:	80000015 	stw	zero,0(r16)
10009674:	000dbb00 	call	1000dbb0 <lseek>
10009678:	00ffffc4 	movi	r3,-1
1000967c:	10c00526 	beq	r2,r3,10009694 <_lseek_r+0x4c>
10009680:	dfc00217 	ldw	ra,8(sp)
10009684:	dc400117 	ldw	r17,4(sp)
10009688:	dc000017 	ldw	r16,0(sp)
1000968c:	dec00304 	addi	sp,sp,12
10009690:	f800283a 	ret
10009694:	80c00017 	ldw	r3,0(r16)
10009698:	183ff926 	beq	r3,zero,10009680 <__alt_data_end+0xf8009680>
1000969c:	88c00015 	stw	r3,0(r17)
100096a0:	dfc00217 	ldw	ra,8(sp)
100096a4:	dc400117 	ldw	r17,4(sp)
100096a8:	dc000017 	ldw	r16,0(sp)
100096ac:	dec00304 	addi	sp,sp,12
100096b0:	f800283a 	ret

100096b4 <memmove>:
100096b4:	2005883a 	mov	r2,r4
100096b8:	29000b2e 	bgeu	r5,r4,100096e8 <memmove+0x34>
100096bc:	298f883a 	add	r7,r5,r6
100096c0:	21c0092e 	bgeu	r4,r7,100096e8 <memmove+0x34>
100096c4:	2187883a 	add	r3,r4,r6
100096c8:	198bc83a 	sub	r5,r3,r6
100096cc:	30003e26 	beq	r6,zero,100097c8 <memmove+0x114>
100096d0:	39ffffc4 	addi	r7,r7,-1
100096d4:	39000003 	ldbu	r4,0(r7)
100096d8:	18ffffc4 	addi	r3,r3,-1
100096dc:	19000005 	stb	r4,0(r3)
100096e0:	197ffb1e 	bne	r3,r5,100096d0 <__alt_data_end+0xf80096d0>
100096e4:	f800283a 	ret
100096e8:	00c003c4 	movi	r3,15
100096ec:	1980372e 	bgeu	r3,r6,100097cc <memmove+0x118>
100096f0:	1146b03a 	or	r3,r2,r5
100096f4:	18c000cc 	andi	r3,r3,3
100096f8:	1800371e 	bne	r3,zero,100097d8 <memmove+0x124>
100096fc:	327ffc04 	addi	r9,r6,-16
10009700:	4812d13a 	srli	r9,r9,4
10009704:	280f883a 	mov	r7,r5
10009708:	1007883a 	mov	r3,r2
1000970c:	4810913a 	slli	r8,r9,4
10009710:	1211883a 	add	r8,r2,r8
10009714:	42000404 	addi	r8,r8,16
10009718:	39000017 	ldw	r4,0(r7)
1000971c:	18c00404 	addi	r3,r3,16
10009720:	39c00404 	addi	r7,r7,16
10009724:	193ffc15 	stw	r4,-16(r3)
10009728:	393ffd17 	ldw	r4,-12(r7)
1000972c:	193ffd15 	stw	r4,-12(r3)
10009730:	393ffe17 	ldw	r4,-8(r7)
10009734:	193ffe15 	stw	r4,-8(r3)
10009738:	393fff17 	ldw	r4,-4(r7)
1000973c:	193fff15 	stw	r4,-4(r3)
10009740:	1a3ff51e 	bne	r3,r8,10009718 <__alt_data_end+0xf8009718>
10009744:	49000044 	addi	r4,r9,1
10009748:	2008913a 	slli	r4,r4,4
1000974c:	328003cc 	andi	r10,r6,15
10009750:	1107883a 	add	r3,r2,r4
10009754:	290b883a 	add	r5,r5,r4
10009758:	010000c4 	movi	r4,3
1000975c:	2280212e 	bgeu	r4,r10,100097e4 <memmove+0x130>
10009760:	52bfff04 	addi	r10,r10,-4
10009764:	5014d0ba 	srli	r10,r10,2
10009768:	180f883a 	mov	r7,r3
1000976c:	2809883a 	mov	r4,r5
10009770:	5291883a 	add	r8,r10,r10
10009774:	4211883a 	add	r8,r8,r8
10009778:	42400104 	addi	r9,r8,4
1000977c:	1a53883a 	add	r9,r3,r9
10009780:	22000017 	ldw	r8,0(r4)
10009784:	39c00104 	addi	r7,r7,4
10009788:	21000104 	addi	r4,r4,4
1000978c:	3a3fff15 	stw	r8,-4(r7)
10009790:	3a7ffb1e 	bne	r7,r9,10009780 <__alt_data_end+0xf8009780>
10009794:	51000044 	addi	r4,r10,1
10009798:	2109883a 	add	r4,r4,r4
1000979c:	2109883a 	add	r4,r4,r4
100097a0:	318000cc 	andi	r6,r6,3
100097a4:	1907883a 	add	r3,r3,r4
100097a8:	290b883a 	add	r5,r5,r4
100097ac:	30000c26 	beq	r6,zero,100097e0 <memmove+0x12c>
100097b0:	198d883a 	add	r6,r3,r6
100097b4:	29c00003 	ldbu	r7,0(r5)
100097b8:	18c00044 	addi	r3,r3,1
100097bc:	29400044 	addi	r5,r5,1
100097c0:	19ffffc5 	stb	r7,-1(r3)
100097c4:	19bffb1e 	bne	r3,r6,100097b4 <__alt_data_end+0xf80097b4>
100097c8:	f800283a 	ret
100097cc:	1007883a 	mov	r3,r2
100097d0:	303ff71e 	bne	r6,zero,100097b0 <__alt_data_end+0xf80097b0>
100097d4:	00000206 	br	100097e0 <memmove+0x12c>
100097d8:	1007883a 	mov	r3,r2
100097dc:	003ff406 	br	100097b0 <__alt_data_end+0xf80097b0>
100097e0:	f800283a 	ret
100097e4:	500d883a 	mov	r6,r10
100097e8:	303ff11e 	bne	r6,zero,100097b0 <__alt_data_end+0xf80097b0>
100097ec:	003ffc06 	br	100097e0 <__alt_data_end+0xf80097e0>

100097f0 <_read_r>:
100097f0:	defffd04 	addi	sp,sp,-12
100097f4:	dc400115 	stw	r17,4(sp)
100097f8:	dc000015 	stw	r16,0(sp)
100097fc:	2023883a 	mov	r17,r4
10009800:	04040074 	movhi	r16,4097
10009804:	840d9404 	addi	r16,r16,13904
10009808:	2809883a 	mov	r4,r5
1000980c:	300b883a 	mov	r5,r6
10009810:	380d883a 	mov	r6,r7
10009814:	dfc00215 	stw	ra,8(sp)
10009818:	80000015 	stw	zero,0(r16)
1000981c:	000dd900 	call	1000dd90 <read>
10009820:	00ffffc4 	movi	r3,-1
10009824:	10c00526 	beq	r2,r3,1000983c <_read_r+0x4c>
10009828:	dfc00217 	ldw	ra,8(sp)
1000982c:	dc400117 	ldw	r17,4(sp)
10009830:	dc000017 	ldw	r16,0(sp)
10009834:	dec00304 	addi	sp,sp,12
10009838:	f800283a 	ret
1000983c:	80c00017 	ldw	r3,0(r16)
10009840:	183ff926 	beq	r3,zero,10009828 <__alt_data_end+0xf8009828>
10009844:	88c00015 	stw	r3,0(r17)
10009848:	dfc00217 	ldw	ra,8(sp)
1000984c:	dc400117 	ldw	r17,4(sp)
10009850:	dc000017 	ldw	r16,0(sp)
10009854:	dec00304 	addi	sp,sp,12
10009858:	f800283a 	ret

1000985c <_realloc_r>:
1000985c:	defff604 	addi	sp,sp,-40
10009860:	dd000415 	stw	r20,16(sp)
10009864:	dc000015 	stw	r16,0(sp)
10009868:	dfc00915 	stw	ra,36(sp)
1000986c:	df000815 	stw	fp,32(sp)
10009870:	ddc00715 	stw	r23,28(sp)
10009874:	dd800615 	stw	r22,24(sp)
10009878:	dd400515 	stw	r21,20(sp)
1000987c:	dcc00315 	stw	r19,12(sp)
10009880:	dc800215 	stw	r18,8(sp)
10009884:	dc400115 	stw	r17,4(sp)
10009888:	2821883a 	mov	r16,r5
1000988c:	3029883a 	mov	r20,r6
10009890:	28009a26 	beq	r5,zero,10009afc <_realloc_r+0x2a0>
10009894:	202b883a 	mov	r21,r4
10009898:	000dd000 	call	1000dd00 <__malloc_lock>
1000989c:	80ffff17 	ldw	r3,-4(r16)
100098a0:	047fff04 	movi	r17,-4
100098a4:	a08002c4 	addi	r2,r20,11
100098a8:	01000584 	movi	r4,22
100098ac:	84fffe04 	addi	r19,r16,-8
100098b0:	1c62703a 	and	r17,r3,r17
100098b4:	2080372e 	bgeu	r4,r2,10009994 <_realloc_r+0x138>
100098b8:	04bffe04 	movi	r18,-8
100098bc:	14a4703a 	and	r18,r2,r18
100098c0:	9005883a 	mov	r2,r18
100098c4:	90005b16 	blt	r18,zero,10009a34 <_realloc_r+0x1d8>
100098c8:	95005a36 	bltu	r18,r20,10009a34 <_realloc_r+0x1d8>
100098cc:	8880340e 	bge	r17,r2,100099a0 <_realloc_r+0x144>
100098d0:	05c40074 	movhi	r23,4097
100098d4:	bdc13b04 	addi	r23,r23,1260
100098d8:	b9000217 	ldw	r4,8(r23)
100098dc:	9c4b883a 	add	r5,r19,r17
100098e0:	21409626 	beq	r4,r5,10009b3c <_realloc_r+0x2e0>
100098e4:	29800117 	ldw	r6,4(r5)
100098e8:	01ffff84 	movi	r7,-2
100098ec:	31ce703a 	and	r7,r6,r7
100098f0:	29cf883a 	add	r7,r5,r7
100098f4:	39c00117 	ldw	r7,4(r7)
100098f8:	39c0004c 	andi	r7,r7,1
100098fc:	38004226 	beq	r7,zero,10009a08 <_realloc_r+0x1ac>
10009900:	000d883a 	mov	r6,zero
10009904:	000b883a 	mov	r5,zero
10009908:	18c0004c 	andi	r3,r3,1
1000990c:	18005c1e 	bne	r3,zero,10009a80 <_realloc_r+0x224>
10009910:	85bffe17 	ldw	r22,-8(r16)
10009914:	00ffff04 	movi	r3,-4
10009918:	9dadc83a 	sub	r22,r19,r22
1000991c:	b1c00117 	ldw	r7,4(r22)
10009920:	38c6703a 	and	r3,r7,r3
10009924:	28005426 	beq	r5,zero,10009a78 <_realloc_r+0x21c>
10009928:	1c47883a 	add	r3,r3,r17
1000992c:	2900bf26 	beq	r5,r4,10009c2c <_realloc_r+0x3d0>
10009930:	30ef883a 	add	r23,r6,r3
10009934:	b8807e16 	blt	r23,r2,10009b30 <_realloc_r+0x2d4>
10009938:	28800317 	ldw	r2,12(r5)
1000993c:	28c00217 	ldw	r3,8(r5)
10009940:	89bfff04 	addi	r6,r17,-4
10009944:	01000904 	movi	r4,36
10009948:	18800315 	stw	r2,12(r3)
1000994c:	10c00215 	stw	r3,8(r2)
10009950:	b1400217 	ldw	r5,8(r22)
10009954:	b0c00317 	ldw	r3,12(r22)
10009958:	b5000204 	addi	r20,r22,8
1000995c:	28c00315 	stw	r3,12(r5)
10009960:	19400215 	stw	r5,8(r3)
10009964:	21808536 	bltu	r4,r6,10009b7c <_realloc_r+0x320>
10009968:	008004c4 	movi	r2,19
1000996c:	1180932e 	bgeu	r2,r6,10009bbc <_realloc_r+0x360>
10009970:	80800017 	ldw	r2,0(r16)
10009974:	b0800215 	stw	r2,8(r22)
10009978:	80800117 	ldw	r2,4(r16)
1000997c:	b0800315 	stw	r2,12(r22)
10009980:	008006c4 	movi	r2,27
10009984:	1180df36 	bltu	r2,r6,10009d04 <_realloc_r+0x4a8>
10009988:	b0c00404 	addi	r3,r22,16
1000998c:	84000204 	addi	r16,r16,8
10009990:	00008b06 	br	10009bc0 <_realloc_r+0x364>
10009994:	00800404 	movi	r2,16
10009998:	1025883a 	mov	r18,r2
1000999c:	003fca06 	br	100098c8 <__alt_data_end+0xf80098c8>
100099a0:	8029883a 	mov	r20,r16
100099a4:	8c8dc83a 	sub	r6,r17,r18
100099a8:	008003c4 	movi	r2,15
100099ac:	18c0004c 	andi	r3,r3,1
100099b0:	11802436 	bltu	r2,r6,10009a44 <_realloc_r+0x1e8>
100099b4:	1c46b03a 	or	r3,r3,r17
100099b8:	98c00115 	stw	r3,4(r19)
100099bc:	9c63883a 	add	r17,r19,r17
100099c0:	88800117 	ldw	r2,4(r17)
100099c4:	10800054 	ori	r2,r2,1
100099c8:	88800115 	stw	r2,4(r17)
100099cc:	a809883a 	mov	r4,r21
100099d0:	000dd200 	call	1000dd20 <__malloc_unlock>
100099d4:	a005883a 	mov	r2,r20
100099d8:	dfc00917 	ldw	ra,36(sp)
100099dc:	df000817 	ldw	fp,32(sp)
100099e0:	ddc00717 	ldw	r23,28(sp)
100099e4:	dd800617 	ldw	r22,24(sp)
100099e8:	dd400517 	ldw	r21,20(sp)
100099ec:	dd000417 	ldw	r20,16(sp)
100099f0:	dcc00317 	ldw	r19,12(sp)
100099f4:	dc800217 	ldw	r18,8(sp)
100099f8:	dc400117 	ldw	r17,4(sp)
100099fc:	dc000017 	ldw	r16,0(sp)
10009a00:	dec00a04 	addi	sp,sp,40
10009a04:	f800283a 	ret
10009a08:	01ffff04 	movi	r7,-4
10009a0c:	31cc703a 	and	r6,r6,r7
10009a10:	344f883a 	add	r7,r6,r17
10009a14:	38bfbc16 	blt	r7,r2,10009908 <__alt_data_end+0xf8009908>
10009a18:	28800317 	ldw	r2,12(r5)
10009a1c:	29000217 	ldw	r4,8(r5)
10009a20:	8029883a 	mov	r20,r16
10009a24:	3823883a 	mov	r17,r7
10009a28:	20800315 	stw	r2,12(r4)
10009a2c:	11000215 	stw	r4,8(r2)
10009a30:	003fdc06 	br	100099a4 <__alt_data_end+0xf80099a4>
10009a34:	00800304 	movi	r2,12
10009a38:	a8800015 	stw	r2,0(r21)
10009a3c:	0005883a 	mov	r2,zero
10009a40:	003fe506 	br	100099d8 <__alt_data_end+0xf80099d8>
10009a44:	1c86b03a 	or	r3,r3,r18
10009a48:	9c8b883a 	add	r5,r19,r18
10009a4c:	98c00115 	stw	r3,4(r19)
10009a50:	30800054 	ori	r2,r6,1
10009a54:	28800115 	stw	r2,4(r5)
10009a58:	298d883a 	add	r6,r5,r6
10009a5c:	30800117 	ldw	r2,4(r6)
10009a60:	a809883a 	mov	r4,r21
10009a64:	29400204 	addi	r5,r5,8
10009a68:	10800054 	ori	r2,r2,1
10009a6c:	30800115 	stw	r2,4(r6)
10009a70:	000518c0 	call	1000518c <_free_r>
10009a74:	003fd506 	br	100099cc <__alt_data_end+0xf80099cc>
10009a78:	1c6f883a 	add	r23,r3,r17
10009a7c:	b880370e 	bge	r23,r2,10009b5c <_realloc_r+0x300>
10009a80:	a00b883a 	mov	r5,r20
10009a84:	a809883a 	mov	r4,r21
10009a88:	00058440 	call	10005844 <_malloc_r>
10009a8c:	1029883a 	mov	r20,r2
10009a90:	1000c026 	beq	r2,zero,10009d94 <_realloc_r+0x538>
10009a94:	80ffff17 	ldw	r3,-4(r16)
10009a98:	113ffe04 	addi	r4,r2,-8
10009a9c:	00bfff84 	movi	r2,-2
10009aa0:	1884703a 	and	r2,r3,r2
10009aa4:	9885883a 	add	r2,r19,r2
10009aa8:	20809026 	beq	r4,r2,10009cec <_realloc_r+0x490>
10009aac:	89bfff04 	addi	r6,r17,-4
10009ab0:	00800904 	movi	r2,36
10009ab4:	11805936 	bltu	r2,r6,10009c1c <_realloc_r+0x3c0>
10009ab8:	00c004c4 	movi	r3,19
10009abc:	19803636 	bltu	r3,r6,10009b98 <_realloc_r+0x33c>
10009ac0:	a005883a 	mov	r2,r20
10009ac4:	8007883a 	mov	r3,r16
10009ac8:	19000017 	ldw	r4,0(r3)
10009acc:	11000015 	stw	r4,0(r2)
10009ad0:	19000117 	ldw	r4,4(r3)
10009ad4:	11000115 	stw	r4,4(r2)
10009ad8:	18c00217 	ldw	r3,8(r3)
10009adc:	10c00215 	stw	r3,8(r2)
10009ae0:	800b883a 	mov	r5,r16
10009ae4:	a809883a 	mov	r4,r21
10009ae8:	000518c0 	call	1000518c <_free_r>
10009aec:	a809883a 	mov	r4,r21
10009af0:	000dd200 	call	1000dd20 <__malloc_unlock>
10009af4:	a005883a 	mov	r2,r20
10009af8:	003fb706 	br	100099d8 <__alt_data_end+0xf80099d8>
10009afc:	300b883a 	mov	r5,r6
10009b00:	dfc00917 	ldw	ra,36(sp)
10009b04:	df000817 	ldw	fp,32(sp)
10009b08:	ddc00717 	ldw	r23,28(sp)
10009b0c:	dd800617 	ldw	r22,24(sp)
10009b10:	dd400517 	ldw	r21,20(sp)
10009b14:	dd000417 	ldw	r20,16(sp)
10009b18:	dcc00317 	ldw	r19,12(sp)
10009b1c:	dc800217 	ldw	r18,8(sp)
10009b20:	dc400117 	ldw	r17,4(sp)
10009b24:	dc000017 	ldw	r16,0(sp)
10009b28:	dec00a04 	addi	sp,sp,40
10009b2c:	00058441 	jmpi	10005844 <_malloc_r>
10009b30:	182f883a 	mov	r23,r3
10009b34:	b8bfd216 	blt	r23,r2,10009a80 <__alt_data_end+0xf8009a80>
10009b38:	00000806 	br	10009b5c <_realloc_r+0x300>
10009b3c:	21800117 	ldw	r6,4(r4)
10009b40:	017fff04 	movi	r5,-4
10009b44:	91c00404 	addi	r7,r18,16
10009b48:	314c703a 	and	r6,r6,r5
10009b4c:	344b883a 	add	r5,r6,r17
10009b50:	29c0250e 	bge	r5,r7,10009be8 <_realloc_r+0x38c>
10009b54:	200b883a 	mov	r5,r4
10009b58:	003f6b06 	br	10009908 <__alt_data_end+0xf8009908>
10009b5c:	b0800317 	ldw	r2,12(r22)
10009b60:	b0c00217 	ldw	r3,8(r22)
10009b64:	89bfff04 	addi	r6,r17,-4
10009b68:	01000904 	movi	r4,36
10009b6c:	18800315 	stw	r2,12(r3)
10009b70:	10c00215 	stw	r3,8(r2)
10009b74:	b5000204 	addi	r20,r22,8
10009b78:	21bf7b2e 	bgeu	r4,r6,10009968 <__alt_data_end+0xf8009968>
10009b7c:	a009883a 	mov	r4,r20
10009b80:	800b883a 	mov	r5,r16
10009b84:	00096b40 	call	100096b4 <memmove>
10009b88:	b0c00117 	ldw	r3,4(r22)
10009b8c:	b823883a 	mov	r17,r23
10009b90:	b027883a 	mov	r19,r22
10009b94:	003f8306 	br	100099a4 <__alt_data_end+0xf80099a4>
10009b98:	80c00017 	ldw	r3,0(r16)
10009b9c:	a0c00015 	stw	r3,0(r20)
10009ba0:	80c00117 	ldw	r3,4(r16)
10009ba4:	a0c00115 	stw	r3,4(r20)
10009ba8:	00c006c4 	movi	r3,27
10009bac:	19804736 	bltu	r3,r6,10009ccc <_realloc_r+0x470>
10009bb0:	a0800204 	addi	r2,r20,8
10009bb4:	80c00204 	addi	r3,r16,8
10009bb8:	003fc306 	br	10009ac8 <__alt_data_end+0xf8009ac8>
10009bbc:	a007883a 	mov	r3,r20
10009bc0:	80800017 	ldw	r2,0(r16)
10009bc4:	b823883a 	mov	r17,r23
10009bc8:	b027883a 	mov	r19,r22
10009bcc:	18800015 	stw	r2,0(r3)
10009bd0:	80800117 	ldw	r2,4(r16)
10009bd4:	18800115 	stw	r2,4(r3)
10009bd8:	80800217 	ldw	r2,8(r16)
10009bdc:	18800215 	stw	r2,8(r3)
10009be0:	b0c00117 	ldw	r3,4(r22)
10009be4:	003f6f06 	br	100099a4 <__alt_data_end+0xf80099a4>
10009be8:	9ca7883a 	add	r19,r19,r18
10009bec:	2c85c83a 	sub	r2,r5,r18
10009bf0:	bcc00215 	stw	r19,8(r23)
10009bf4:	10800054 	ori	r2,r2,1
10009bf8:	98800115 	stw	r2,4(r19)
10009bfc:	80bfff17 	ldw	r2,-4(r16)
10009c00:	a809883a 	mov	r4,r21
10009c04:	1080004c 	andi	r2,r2,1
10009c08:	90a4b03a 	or	r18,r18,r2
10009c0c:	84bfff15 	stw	r18,-4(r16)
10009c10:	000dd200 	call	1000dd20 <__malloc_unlock>
10009c14:	8005883a 	mov	r2,r16
10009c18:	003f6f06 	br	100099d8 <__alt_data_end+0xf80099d8>
10009c1c:	a009883a 	mov	r4,r20
10009c20:	800b883a 	mov	r5,r16
10009c24:	00096b40 	call	100096b4 <memmove>
10009c28:	003fad06 	br	10009ae0 <__alt_data_end+0xf8009ae0>
10009c2c:	30f9883a 	add	fp,r6,r3
10009c30:	91000404 	addi	r4,r18,16
10009c34:	e13fbe16 	blt	fp,r4,10009b30 <__alt_data_end+0xf8009b30>
10009c38:	b0800317 	ldw	r2,12(r22)
10009c3c:	b0c00217 	ldw	r3,8(r22)
10009c40:	89bfff04 	addi	r6,r17,-4
10009c44:	01000904 	movi	r4,36
10009c48:	18800315 	stw	r2,12(r3)
10009c4c:	10c00215 	stw	r3,8(r2)
10009c50:	b4400204 	addi	r17,r22,8
10009c54:	21804336 	bltu	r4,r6,10009d64 <_realloc_r+0x508>
10009c58:	008004c4 	movi	r2,19
10009c5c:	11803f2e 	bgeu	r2,r6,10009d5c <_realloc_r+0x500>
10009c60:	80800017 	ldw	r2,0(r16)
10009c64:	b0800215 	stw	r2,8(r22)
10009c68:	80800117 	ldw	r2,4(r16)
10009c6c:	b0800315 	stw	r2,12(r22)
10009c70:	008006c4 	movi	r2,27
10009c74:	11803f36 	bltu	r2,r6,10009d74 <_realloc_r+0x518>
10009c78:	b0c00404 	addi	r3,r22,16
10009c7c:	84000204 	addi	r16,r16,8
10009c80:	80800017 	ldw	r2,0(r16)
10009c84:	18800015 	stw	r2,0(r3)
10009c88:	80800117 	ldw	r2,4(r16)
10009c8c:	18800115 	stw	r2,4(r3)
10009c90:	80800217 	ldw	r2,8(r16)
10009c94:	18800215 	stw	r2,8(r3)
10009c98:	b487883a 	add	r3,r22,r18
10009c9c:	e485c83a 	sub	r2,fp,r18
10009ca0:	b8c00215 	stw	r3,8(r23)
10009ca4:	10800054 	ori	r2,r2,1
10009ca8:	18800115 	stw	r2,4(r3)
10009cac:	b0800117 	ldw	r2,4(r22)
10009cb0:	a809883a 	mov	r4,r21
10009cb4:	1080004c 	andi	r2,r2,1
10009cb8:	90a4b03a 	or	r18,r18,r2
10009cbc:	b4800115 	stw	r18,4(r22)
10009cc0:	000dd200 	call	1000dd20 <__malloc_unlock>
10009cc4:	8805883a 	mov	r2,r17
10009cc8:	003f4306 	br	100099d8 <__alt_data_end+0xf80099d8>
10009ccc:	80c00217 	ldw	r3,8(r16)
10009cd0:	a0c00215 	stw	r3,8(r20)
10009cd4:	80c00317 	ldw	r3,12(r16)
10009cd8:	a0c00315 	stw	r3,12(r20)
10009cdc:	30801126 	beq	r6,r2,10009d24 <_realloc_r+0x4c8>
10009ce0:	a0800404 	addi	r2,r20,16
10009ce4:	80c00404 	addi	r3,r16,16
10009ce8:	003f7706 	br	10009ac8 <__alt_data_end+0xf8009ac8>
10009cec:	a13fff17 	ldw	r4,-4(r20)
10009cf0:	00bfff04 	movi	r2,-4
10009cf4:	8029883a 	mov	r20,r16
10009cf8:	2084703a 	and	r2,r4,r2
10009cfc:	88a3883a 	add	r17,r17,r2
10009d00:	003f2806 	br	100099a4 <__alt_data_end+0xf80099a4>
10009d04:	80800217 	ldw	r2,8(r16)
10009d08:	b0800415 	stw	r2,16(r22)
10009d0c:	80800317 	ldw	r2,12(r16)
10009d10:	b0800515 	stw	r2,20(r22)
10009d14:	31000a26 	beq	r6,r4,10009d40 <_realloc_r+0x4e4>
10009d18:	b0c00604 	addi	r3,r22,24
10009d1c:	84000404 	addi	r16,r16,16
10009d20:	003fa706 	br	10009bc0 <__alt_data_end+0xf8009bc0>
10009d24:	81000417 	ldw	r4,16(r16)
10009d28:	a0800604 	addi	r2,r20,24
10009d2c:	80c00604 	addi	r3,r16,24
10009d30:	a1000415 	stw	r4,16(r20)
10009d34:	81000517 	ldw	r4,20(r16)
10009d38:	a1000515 	stw	r4,20(r20)
10009d3c:	003f6206 	br	10009ac8 <__alt_data_end+0xf8009ac8>
10009d40:	80800417 	ldw	r2,16(r16)
10009d44:	84000604 	addi	r16,r16,24
10009d48:	b0c00804 	addi	r3,r22,32
10009d4c:	b0800615 	stw	r2,24(r22)
10009d50:	80bfff17 	ldw	r2,-4(r16)
10009d54:	b0800715 	stw	r2,28(r22)
10009d58:	003f9906 	br	10009bc0 <__alt_data_end+0xf8009bc0>
10009d5c:	8807883a 	mov	r3,r17
10009d60:	003fc706 	br	10009c80 <__alt_data_end+0xf8009c80>
10009d64:	8809883a 	mov	r4,r17
10009d68:	800b883a 	mov	r5,r16
10009d6c:	00096b40 	call	100096b4 <memmove>
10009d70:	003fc906 	br	10009c98 <__alt_data_end+0xf8009c98>
10009d74:	80800217 	ldw	r2,8(r16)
10009d78:	b0800415 	stw	r2,16(r22)
10009d7c:	80800317 	ldw	r2,12(r16)
10009d80:	b0800515 	stw	r2,20(r22)
10009d84:	31000726 	beq	r6,r4,10009da4 <_realloc_r+0x548>
10009d88:	b0c00604 	addi	r3,r22,24
10009d8c:	84000404 	addi	r16,r16,16
10009d90:	003fbb06 	br	10009c80 <__alt_data_end+0xf8009c80>
10009d94:	a809883a 	mov	r4,r21
10009d98:	000dd200 	call	1000dd20 <__malloc_unlock>
10009d9c:	0005883a 	mov	r2,zero
10009da0:	003f0d06 	br	100099d8 <__alt_data_end+0xf80099d8>
10009da4:	80800417 	ldw	r2,16(r16)
10009da8:	84000604 	addi	r16,r16,24
10009dac:	b0c00804 	addi	r3,r22,32
10009db0:	b0800615 	stw	r2,24(r22)
10009db4:	80bfff17 	ldw	r2,-4(r16)
10009db8:	b0800715 	stw	r2,28(r22)
10009dbc:	003fb006 	br	10009c80 <__alt_data_end+0xf8009c80>

10009dc0 <__swbuf_r>:
10009dc0:	defffc04 	addi	sp,sp,-16
10009dc4:	dc800215 	stw	r18,8(sp)
10009dc8:	dc400115 	stw	r17,4(sp)
10009dcc:	dc000015 	stw	r16,0(sp)
10009dd0:	dfc00315 	stw	ra,12(sp)
10009dd4:	2023883a 	mov	r17,r4
10009dd8:	2825883a 	mov	r18,r5
10009ddc:	3021883a 	mov	r16,r6
10009de0:	20000226 	beq	r4,zero,10009dec <__swbuf_r+0x2c>
10009de4:	20800e17 	ldw	r2,56(r4)
10009de8:	10004d26 	beq	r2,zero,10009f20 <__swbuf_r+0x160>
10009dec:	80800617 	ldw	r2,24(r16)
10009df0:	80c0030b 	ldhu	r3,12(r16)
10009df4:	80800215 	stw	r2,8(r16)
10009df8:	1880020c 	andi	r2,r3,8
10009dfc:	10004126 	beq	r2,zero,10009f04 <__swbuf_r+0x144>
10009e00:	80800417 	ldw	r2,16(r16)
10009e04:	10003f26 	beq	r2,zero,10009f04 <__swbuf_r+0x144>
10009e08:	1908000c 	andi	r4,r3,8192
10009e0c:	94803fcc 	andi	r18,r18,255
10009e10:	20001726 	beq	r4,zero,10009e70 <__swbuf_r+0xb0>
10009e14:	80c00017 	ldw	r3,0(r16)
10009e18:	81000517 	ldw	r4,20(r16)
10009e1c:	1885c83a 	sub	r2,r3,r2
10009e20:	11001d0e 	bge	r2,r4,10009e98 <__swbuf_r+0xd8>
10009e24:	81000217 	ldw	r4,8(r16)
10009e28:	19400044 	addi	r5,r3,1
10009e2c:	81400015 	stw	r5,0(r16)
10009e30:	213fffc4 	addi	r4,r4,-1
10009e34:	81000215 	stw	r4,8(r16)
10009e38:	1c800005 	stb	r18,0(r3)
10009e3c:	80c00517 	ldw	r3,20(r16)
10009e40:	10800044 	addi	r2,r2,1
10009e44:	18802226 	beq	r3,r2,10009ed0 <__swbuf_r+0x110>
10009e48:	8080030b 	ldhu	r2,12(r16)
10009e4c:	1080004c 	andi	r2,r2,1
10009e50:	1000251e 	bne	r2,zero,10009ee8 <__swbuf_r+0x128>
10009e54:	9005883a 	mov	r2,r18
10009e58:	dfc00317 	ldw	ra,12(sp)
10009e5c:	dc800217 	ldw	r18,8(sp)
10009e60:	dc400117 	ldw	r17,4(sp)
10009e64:	dc000017 	ldw	r16,0(sp)
10009e68:	dec00404 	addi	sp,sp,16
10009e6c:	f800283a 	ret
10009e70:	81401917 	ldw	r5,100(r16)
10009e74:	18c80014 	ori	r3,r3,8192
10009e78:	0137ffc4 	movi	r4,-8193
10009e7c:	2908703a 	and	r4,r5,r4
10009e80:	80c0030d 	sth	r3,12(r16)
10009e84:	80c00017 	ldw	r3,0(r16)
10009e88:	81001915 	stw	r4,100(r16)
10009e8c:	81000517 	ldw	r4,20(r16)
10009e90:	1885c83a 	sub	r2,r3,r2
10009e94:	113fe316 	blt	r2,r4,10009e24 <__alt_data_end+0xf8009e24>
10009e98:	8809883a 	mov	r4,r17
10009e9c:	800b883a 	mov	r5,r16
10009ea0:	0004a380 	call	10004a38 <_fflush_r>
10009ea4:	10000e1e 	bne	r2,zero,10009ee0 <__swbuf_r+0x120>
10009ea8:	80c00017 	ldw	r3,0(r16)
10009eac:	81000217 	ldw	r4,8(r16)
10009eb0:	00800044 	movi	r2,1
10009eb4:	19400044 	addi	r5,r3,1
10009eb8:	213fffc4 	addi	r4,r4,-1
10009ebc:	81400015 	stw	r5,0(r16)
10009ec0:	81000215 	stw	r4,8(r16)
10009ec4:	1c800005 	stb	r18,0(r3)
10009ec8:	80c00517 	ldw	r3,20(r16)
10009ecc:	18bfde1e 	bne	r3,r2,10009e48 <__alt_data_end+0xf8009e48>
10009ed0:	8809883a 	mov	r4,r17
10009ed4:	800b883a 	mov	r5,r16
10009ed8:	0004a380 	call	10004a38 <_fflush_r>
10009edc:	103fdd26 	beq	r2,zero,10009e54 <__alt_data_end+0xf8009e54>
10009ee0:	00bfffc4 	movi	r2,-1
10009ee4:	003fdc06 	br	10009e58 <__alt_data_end+0xf8009e58>
10009ee8:	00800284 	movi	r2,10
10009eec:	90bfd91e 	bne	r18,r2,10009e54 <__alt_data_end+0xf8009e54>
10009ef0:	8809883a 	mov	r4,r17
10009ef4:	800b883a 	mov	r5,r16
10009ef8:	0004a380 	call	10004a38 <_fflush_r>
10009efc:	103fd526 	beq	r2,zero,10009e54 <__alt_data_end+0xf8009e54>
10009f00:	003ff706 	br	10009ee0 <__alt_data_end+0xf8009ee0>
10009f04:	8809883a 	mov	r4,r17
10009f08:	800b883a 	mov	r5,r16
10009f0c:	000309c0 	call	1000309c <__swsetup_r>
10009f10:	80c0030b 	ldhu	r3,12(r16)
10009f14:	1000041e 	bne	r2,zero,10009f28 <__swbuf_r+0x168>
10009f18:	80800417 	ldw	r2,16(r16)
10009f1c:	003fba06 	br	10009e08 <__alt_data_end+0xf8009e08>
10009f20:	0004d580 	call	10004d58 <__sinit>
10009f24:	003fb106 	br	10009dec <__alt_data_end+0xf8009dec>
10009f28:	18c01014 	ori	r3,r3,64
10009f2c:	80c0030d 	sth	r3,12(r16)
10009f30:	00c00244 	movi	r3,9
10009f34:	00bfffc4 	movi	r2,-1
10009f38:	88c00015 	stw	r3,0(r17)
10009f3c:	003fc606 	br	10009e58 <__alt_data_end+0xf8009e58>

10009f40 <__swbuf>:
10009f40:	00c40074 	movhi	r3,4097
10009f44:	18c6c204 	addi	r3,r3,6920
10009f48:	2005883a 	mov	r2,r4
10009f4c:	19000017 	ldw	r4,0(r3)
10009f50:	280d883a 	mov	r6,r5
10009f54:	100b883a 	mov	r5,r2
10009f58:	0009dc01 	jmpi	10009dc0 <__swbuf_r>

10009f5c <_wcrtomb_r>:
10009f5c:	defff604 	addi	sp,sp,-40
10009f60:	dc800815 	stw	r18,32(sp)
10009f64:	dc400715 	stw	r17,28(sp)
10009f68:	dc000615 	stw	r16,24(sp)
10009f6c:	00840074 	movhi	r2,4097
10009f70:	1086c604 	addi	r2,r2,6936
10009f74:	dfc00915 	stw	ra,36(sp)
10009f78:	2021883a 	mov	r16,r4
10009f7c:	3823883a 	mov	r17,r7
10009f80:	14800017 	ldw	r18,0(r2)
10009f84:	28001426 	beq	r5,zero,10009fd8 <_wcrtomb_r+0x7c>
10009f88:	d9400415 	stw	r5,16(sp)
10009f8c:	d9800515 	stw	r6,20(sp)
10009f90:	000562c0 	call	1000562c <__locale_charset>
10009f94:	d9400417 	ldw	r5,16(sp)
10009f98:	d9800517 	ldw	r6,20(sp)
10009f9c:	8009883a 	mov	r4,r16
10009fa0:	dc400015 	stw	r17,0(sp)
10009fa4:	100f883a 	mov	r7,r2
10009fa8:	903ee83a 	callr	r18
10009fac:	00ffffc4 	movi	r3,-1
10009fb0:	10c0031e 	bne	r2,r3,10009fc0 <_wcrtomb_r+0x64>
10009fb4:	88000015 	stw	zero,0(r17)
10009fb8:	00c02284 	movi	r3,138
10009fbc:	80c00015 	stw	r3,0(r16)
10009fc0:	dfc00917 	ldw	ra,36(sp)
10009fc4:	dc800817 	ldw	r18,32(sp)
10009fc8:	dc400717 	ldw	r17,28(sp)
10009fcc:	dc000617 	ldw	r16,24(sp)
10009fd0:	dec00a04 	addi	sp,sp,40
10009fd4:	f800283a 	ret
10009fd8:	000562c0 	call	1000562c <__locale_charset>
10009fdc:	8009883a 	mov	r4,r16
10009fe0:	dc400015 	stw	r17,0(sp)
10009fe4:	d9400104 	addi	r5,sp,4
10009fe8:	000d883a 	mov	r6,zero
10009fec:	100f883a 	mov	r7,r2
10009ff0:	903ee83a 	callr	r18
10009ff4:	003fed06 	br	10009fac <__alt_data_end+0xf8009fac>

10009ff8 <wcrtomb>:
10009ff8:	defff504 	addi	sp,sp,-44
10009ffc:	dc400515 	stw	r17,20(sp)
1000a000:	dc000415 	stw	r16,16(sp)
1000a004:	dfc00a15 	stw	ra,40(sp)
1000a008:	dd400915 	stw	r21,36(sp)
1000a00c:	dd000815 	stw	r20,32(sp)
1000a010:	dcc00715 	stw	r19,28(sp)
1000a014:	dc800615 	stw	r18,24(sp)
1000a018:	2021883a 	mov	r16,r4
1000a01c:	3023883a 	mov	r17,r6
1000a020:	20001d26 	beq	r4,zero,1000a098 <wcrtomb+0xa0>
1000a024:	04840074 	movhi	r18,4097
1000a028:	9486c204 	addi	r18,r18,6920
1000a02c:	95400017 	ldw	r21,0(r18)
1000a030:	00840074 	movhi	r2,4097
1000a034:	1086c604 	addi	r2,r2,6936
1000a038:	15000017 	ldw	r20,0(r2)
1000a03c:	2827883a 	mov	r19,r5
1000a040:	000562c0 	call	1000562c <__locale_charset>
1000a044:	a809883a 	mov	r4,r21
1000a048:	dc400015 	stw	r17,0(sp)
1000a04c:	800b883a 	mov	r5,r16
1000a050:	980d883a 	mov	r6,r19
1000a054:	100f883a 	mov	r7,r2
1000a058:	a03ee83a 	callr	r20
1000a05c:	00ffffc4 	movi	r3,-1
1000a060:	10c0041e 	bne	r2,r3,1000a074 <wcrtomb+0x7c>
1000a064:	90c00017 	ldw	r3,0(r18)
1000a068:	01002284 	movi	r4,138
1000a06c:	88000015 	stw	zero,0(r17)
1000a070:	19000015 	stw	r4,0(r3)
1000a074:	dfc00a17 	ldw	ra,40(sp)
1000a078:	dd400917 	ldw	r21,36(sp)
1000a07c:	dd000817 	ldw	r20,32(sp)
1000a080:	dcc00717 	ldw	r19,28(sp)
1000a084:	dc800617 	ldw	r18,24(sp)
1000a088:	dc400517 	ldw	r17,20(sp)
1000a08c:	dc000417 	ldw	r16,16(sp)
1000a090:	dec00b04 	addi	sp,sp,44
1000a094:	f800283a 	ret
1000a098:	04840074 	movhi	r18,4097
1000a09c:	9486c204 	addi	r18,r18,6920
1000a0a0:	94c00017 	ldw	r19,0(r18)
1000a0a4:	00840074 	movhi	r2,4097
1000a0a8:	1086c604 	addi	r2,r2,6936
1000a0ac:	14000017 	ldw	r16,0(r2)
1000a0b0:	000562c0 	call	1000562c <__locale_charset>
1000a0b4:	9809883a 	mov	r4,r19
1000a0b8:	dc400015 	stw	r17,0(sp)
1000a0bc:	d9400104 	addi	r5,sp,4
1000a0c0:	000d883a 	mov	r6,zero
1000a0c4:	100f883a 	mov	r7,r2
1000a0c8:	803ee83a 	callr	r16
1000a0cc:	003fe306 	br	1000a05c <__alt_data_end+0xf800a05c>

1000a0d0 <__ascii_wctomb>:
1000a0d0:	28000526 	beq	r5,zero,1000a0e8 <__ascii_wctomb+0x18>
1000a0d4:	00803fc4 	movi	r2,255
1000a0d8:	11800536 	bltu	r2,r6,1000a0f0 <__ascii_wctomb+0x20>
1000a0dc:	29800005 	stb	r6,0(r5)
1000a0e0:	00800044 	movi	r2,1
1000a0e4:	f800283a 	ret
1000a0e8:	0005883a 	mov	r2,zero
1000a0ec:	f800283a 	ret
1000a0f0:	00802284 	movi	r2,138
1000a0f4:	20800015 	stw	r2,0(r4)
1000a0f8:	00bfffc4 	movi	r2,-1
1000a0fc:	f800283a 	ret

1000a100 <_wctomb_r>:
1000a100:	defff904 	addi	sp,sp,-28
1000a104:	00840074 	movhi	r2,4097
1000a108:	1086c604 	addi	r2,r2,6936
1000a10c:	dfc00615 	stw	ra,24(sp)
1000a110:	dc400515 	stw	r17,20(sp)
1000a114:	dc000415 	stw	r16,16(sp)
1000a118:	3823883a 	mov	r17,r7
1000a11c:	14000017 	ldw	r16,0(r2)
1000a120:	d9000115 	stw	r4,4(sp)
1000a124:	d9400215 	stw	r5,8(sp)
1000a128:	d9800315 	stw	r6,12(sp)
1000a12c:	000562c0 	call	1000562c <__locale_charset>
1000a130:	d9000117 	ldw	r4,4(sp)
1000a134:	d9400217 	ldw	r5,8(sp)
1000a138:	d9800317 	ldw	r6,12(sp)
1000a13c:	dc400015 	stw	r17,0(sp)
1000a140:	100f883a 	mov	r7,r2
1000a144:	803ee83a 	callr	r16
1000a148:	dfc00617 	ldw	ra,24(sp)
1000a14c:	dc400517 	ldw	r17,20(sp)
1000a150:	dc000417 	ldw	r16,16(sp)
1000a154:	dec00704 	addi	sp,sp,28
1000a158:	f800283a 	ret

1000a15c <__udivdi3>:
1000a15c:	defff504 	addi	sp,sp,-44
1000a160:	dc800315 	stw	r18,12(sp)
1000a164:	dc400215 	stw	r17,8(sp)
1000a168:	dfc00a15 	stw	ra,40(sp)
1000a16c:	df000915 	stw	fp,36(sp)
1000a170:	ddc00815 	stw	r23,32(sp)
1000a174:	dd800715 	stw	r22,28(sp)
1000a178:	dd400615 	stw	r21,24(sp)
1000a17c:	dd000515 	stw	r20,20(sp)
1000a180:	dcc00415 	stw	r19,16(sp)
1000a184:	dc000115 	stw	r16,4(sp)
1000a188:	2025883a 	mov	r18,r4
1000a18c:	2823883a 	mov	r17,r5
1000a190:	3800481e 	bne	r7,zero,1000a2b4 <__udivdi3+0x158>
1000a194:	3021883a 	mov	r16,r6
1000a198:	2027883a 	mov	r19,r4
1000a19c:	29805a2e 	bgeu	r5,r6,1000a308 <__udivdi3+0x1ac>
1000a1a0:	00bfffd4 	movui	r2,65535
1000a1a4:	2829883a 	mov	r20,r5
1000a1a8:	1180b436 	bltu	r2,r6,1000a47c <__udivdi3+0x320>
1000a1ac:	00803fc4 	movi	r2,255
1000a1b0:	11816736 	bltu	r2,r6,1000a750 <__udivdi3+0x5f4>
1000a1b4:	0005883a 	mov	r2,zero
1000a1b8:	0007883a 	mov	r3,zero
1000a1bc:	3084d83a 	srl	r2,r6,r2
1000a1c0:	01040074 	movhi	r4,4097
1000a1c4:	213fc704 	addi	r4,r4,-228
1000a1c8:	2085883a 	add	r2,r4,r2
1000a1cc:	10800003 	ldbu	r2,0(r2)
1000a1d0:	10c7883a 	add	r3,r2,r3
1000a1d4:	00800804 	movi	r2,32
1000a1d8:	10c5c83a 	sub	r2,r2,r3
1000a1dc:	10000526 	beq	r2,zero,1000a1f4 <__udivdi3+0x98>
1000a1e0:	88a2983a 	sll	r17,r17,r2
1000a1e4:	90c6d83a 	srl	r3,r18,r3
1000a1e8:	30a0983a 	sll	r16,r6,r2
1000a1ec:	90a6983a 	sll	r19,r18,r2
1000a1f0:	88e8b03a 	or	r20,r17,r3
1000a1f4:	8022d43a 	srli	r17,r16,16
1000a1f8:	a009883a 	mov	r4,r20
1000a1fc:	857fffcc 	andi	r21,r16,65535
1000a200:	880b883a 	mov	r5,r17
1000a204:	000aef00 	call	1000aef0 <__umodsi3>
1000a208:	a009883a 	mov	r4,r20
1000a20c:	880b883a 	mov	r5,r17
1000a210:	102d883a 	mov	r22,r2
1000a214:	000aee80 	call	1000aee8 <__udivsi3>
1000a218:	1009883a 	mov	r4,r2
1000a21c:	a80b883a 	mov	r5,r21
1000a220:	1025883a 	mov	r18,r2
1000a224:	000aef80 	call	1000aef8 <__mulsi3>
1000a228:	1009883a 	mov	r4,r2
1000a22c:	b006943a 	slli	r3,r22,16
1000a230:	9804d43a 	srli	r2,r19,16
1000a234:	1886b03a 	or	r3,r3,r2
1000a238:	1900052e 	bgeu	r3,r4,1000a250 <__udivdi3+0xf4>
1000a23c:	1c07883a 	add	r3,r3,r16
1000a240:	90bfffc4 	addi	r2,r18,-1
1000a244:	1c000136 	bltu	r3,r16,1000a24c <__udivdi3+0xf0>
1000a248:	19015636 	bltu	r3,r4,1000a7a4 <__udivdi3+0x648>
1000a24c:	1025883a 	mov	r18,r2
1000a250:	1929c83a 	sub	r20,r3,r4
1000a254:	880b883a 	mov	r5,r17
1000a258:	a009883a 	mov	r4,r20
1000a25c:	000aef00 	call	1000aef0 <__umodsi3>
1000a260:	102d883a 	mov	r22,r2
1000a264:	880b883a 	mov	r5,r17
1000a268:	a009883a 	mov	r4,r20
1000a26c:	b02c943a 	slli	r22,r22,16
1000a270:	000aee80 	call	1000aee8 <__udivsi3>
1000a274:	1009883a 	mov	r4,r2
1000a278:	a80b883a 	mov	r5,r21
1000a27c:	9cffffcc 	andi	r19,r19,65535
1000a280:	1023883a 	mov	r17,r2
1000a284:	b4e6b03a 	or	r19,r22,r19
1000a288:	000aef80 	call	1000aef8 <__mulsi3>
1000a28c:	9880052e 	bgeu	r19,r2,1000a2a4 <__udivdi3+0x148>
1000a290:	9c27883a 	add	r19,r19,r16
1000a294:	88ffffc4 	addi	r3,r17,-1
1000a298:	9c011436 	bltu	r19,r16,1000a6ec <__udivdi3+0x590>
1000a29c:	9881132e 	bgeu	r19,r2,1000a6ec <__udivdi3+0x590>
1000a2a0:	8c7fff84 	addi	r17,r17,-2
1000a2a4:	9024943a 	slli	r18,r18,16
1000a2a8:	0007883a 	mov	r3,zero
1000a2ac:	8c84b03a 	or	r2,r17,r18
1000a2b0:	00006106 	br	1000a438 <__udivdi3+0x2dc>
1000a2b4:	29c05e36 	bltu	r5,r7,1000a430 <__udivdi3+0x2d4>
1000a2b8:	00bfffd4 	movui	r2,65535
1000a2bc:	11c06a2e 	bgeu	r2,r7,1000a468 <__udivdi3+0x30c>
1000a2c0:	00804034 	movhi	r2,256
1000a2c4:	10bfffc4 	addi	r2,r2,-1
1000a2c8:	11c11236 	bltu	r2,r7,1000a714 <__udivdi3+0x5b8>
1000a2cc:	00c00404 	movi	r3,16
1000a2d0:	180b883a 	mov	r5,r3
1000a2d4:	38c6d83a 	srl	r3,r7,r3
1000a2d8:	01040074 	movhi	r4,4097
1000a2dc:	213fc704 	addi	r4,r4,-228
1000a2e0:	04000804 	movi	r16,32
1000a2e4:	20c7883a 	add	r3,r4,r3
1000a2e8:	18800003 	ldbu	r2,0(r3)
1000a2ec:	1145883a 	add	r2,r2,r5
1000a2f0:	80a1c83a 	sub	r16,r16,r2
1000a2f4:	80006c1e 	bne	r16,zero,1000a4a8 <__udivdi3+0x34c>
1000a2f8:	3c411836 	bltu	r7,r17,1000a75c <__udivdi3+0x600>
1000a2fc:	9185403a 	cmpgeu	r2,r18,r6
1000a300:	0007883a 	mov	r3,zero
1000a304:	00004c06 	br	1000a438 <__udivdi3+0x2dc>
1000a308:	3000041e 	bne	r6,zero,1000a31c <__udivdi3+0x1c0>
1000a30c:	01000044 	movi	r4,1
1000a310:	000b883a 	mov	r5,zero
1000a314:	000aee80 	call	1000aee8 <__udivsi3>
1000a318:	1021883a 	mov	r16,r2
1000a31c:	00bfffd4 	movui	r2,65535
1000a320:	14005c2e 	bgeu	r2,r16,1000a494 <__udivdi3+0x338>
1000a324:	00804034 	movhi	r2,256
1000a328:	10bfffc4 	addi	r2,r2,-1
1000a32c:	14010236 	bltu	r2,r16,1000a738 <__udivdi3+0x5dc>
1000a330:	00800404 	movi	r2,16
1000a334:	1007883a 	mov	r3,r2
1000a338:	8084d83a 	srl	r2,r16,r2
1000a33c:	01040074 	movhi	r4,4097
1000a340:	213fc704 	addi	r4,r4,-228
1000a344:	2085883a 	add	r2,r4,r2
1000a348:	10800003 	ldbu	r2,0(r2)
1000a34c:	10c7883a 	add	r3,r2,r3
1000a350:	00800804 	movi	r2,32
1000a354:	10c5c83a 	sub	r2,r2,r3
1000a358:	1000aa1e 	bne	r2,zero,1000a604 <__udivdi3+0x4a8>
1000a35c:	8028d43a 	srli	r20,r16,16
1000a360:	8c23c83a 	sub	r17,r17,r16
1000a364:	857fffcc 	andi	r21,r16,65535
1000a368:	00c00044 	movi	r3,1
1000a36c:	8809883a 	mov	r4,r17
1000a370:	a00b883a 	mov	r5,r20
1000a374:	d8c00015 	stw	r3,0(sp)
1000a378:	000aef00 	call	1000aef0 <__umodsi3>
1000a37c:	8809883a 	mov	r4,r17
1000a380:	a00b883a 	mov	r5,r20
1000a384:	102d883a 	mov	r22,r2
1000a388:	000aee80 	call	1000aee8 <__udivsi3>
1000a38c:	1009883a 	mov	r4,r2
1000a390:	a80b883a 	mov	r5,r21
1000a394:	1025883a 	mov	r18,r2
1000a398:	000aef80 	call	1000aef8 <__mulsi3>
1000a39c:	1009883a 	mov	r4,r2
1000a3a0:	b00e943a 	slli	r7,r22,16
1000a3a4:	9804d43a 	srli	r2,r19,16
1000a3a8:	d8c00017 	ldw	r3,0(sp)
1000a3ac:	388eb03a 	or	r7,r7,r2
1000a3b0:	3900052e 	bgeu	r7,r4,1000a3c8 <__udivdi3+0x26c>
1000a3b4:	3c0f883a 	add	r7,r7,r16
1000a3b8:	90bfffc4 	addi	r2,r18,-1
1000a3bc:	3c000136 	bltu	r7,r16,1000a3c4 <__udivdi3+0x268>
1000a3c0:	3900f536 	bltu	r7,r4,1000a798 <__udivdi3+0x63c>
1000a3c4:	1025883a 	mov	r18,r2
1000a3c8:	3923c83a 	sub	r17,r7,r4
1000a3cc:	8809883a 	mov	r4,r17
1000a3d0:	a00b883a 	mov	r5,r20
1000a3d4:	d8c00015 	stw	r3,0(sp)
1000a3d8:	000aef00 	call	1000aef0 <__umodsi3>
1000a3dc:	102d883a 	mov	r22,r2
1000a3e0:	8809883a 	mov	r4,r17
1000a3e4:	a00b883a 	mov	r5,r20
1000a3e8:	b02c943a 	slli	r22,r22,16
1000a3ec:	000aee80 	call	1000aee8 <__udivsi3>
1000a3f0:	1009883a 	mov	r4,r2
1000a3f4:	a80b883a 	mov	r5,r21
1000a3f8:	9cffffcc 	andi	r19,r19,65535
1000a3fc:	1023883a 	mov	r17,r2
1000a400:	b4e6b03a 	or	r19,r22,r19
1000a404:	000aef80 	call	1000aef8 <__mulsi3>
1000a408:	d8c00017 	ldw	r3,0(sp)
1000a40c:	9880052e 	bgeu	r19,r2,1000a424 <__udivdi3+0x2c8>
1000a410:	9c27883a 	add	r19,r19,r16
1000a414:	893fffc4 	addi	r4,r17,-1
1000a418:	9c00b236 	bltu	r19,r16,1000a6e4 <__udivdi3+0x588>
1000a41c:	9880b12e 	bgeu	r19,r2,1000a6e4 <__udivdi3+0x588>
1000a420:	8c7fff84 	addi	r17,r17,-2
1000a424:	9024943a 	slli	r18,r18,16
1000a428:	8c84b03a 	or	r2,r17,r18
1000a42c:	00000206 	br	1000a438 <__udivdi3+0x2dc>
1000a430:	0007883a 	mov	r3,zero
1000a434:	0005883a 	mov	r2,zero
1000a438:	dfc00a17 	ldw	ra,40(sp)
1000a43c:	df000917 	ldw	fp,36(sp)
1000a440:	ddc00817 	ldw	r23,32(sp)
1000a444:	dd800717 	ldw	r22,28(sp)
1000a448:	dd400617 	ldw	r21,24(sp)
1000a44c:	dd000517 	ldw	r20,20(sp)
1000a450:	dcc00417 	ldw	r19,16(sp)
1000a454:	dc800317 	ldw	r18,12(sp)
1000a458:	dc400217 	ldw	r17,8(sp)
1000a45c:	dc000117 	ldw	r16,4(sp)
1000a460:	dec00b04 	addi	sp,sp,44
1000a464:	f800283a 	ret
1000a468:	00803fc4 	movi	r2,255
1000a46c:	11c0ac36 	bltu	r2,r7,1000a720 <__udivdi3+0x5c4>
1000a470:	0007883a 	mov	r3,zero
1000a474:	000b883a 	mov	r5,zero
1000a478:	003f9606 	br	1000a2d4 <__alt_data_end+0xf800a2d4>
1000a47c:	00804034 	movhi	r2,256
1000a480:	10bfffc4 	addi	r2,r2,-1
1000a484:	1180a936 	bltu	r2,r6,1000a72c <__udivdi3+0x5d0>
1000a488:	00800404 	movi	r2,16
1000a48c:	1007883a 	mov	r3,r2
1000a490:	003f4a06 	br	1000a1bc <__alt_data_end+0xf800a1bc>
1000a494:	00803fc4 	movi	r2,255
1000a498:	1400aa36 	bltu	r2,r16,1000a744 <__udivdi3+0x5e8>
1000a49c:	0005883a 	mov	r2,zero
1000a4a0:	0007883a 	mov	r3,zero
1000a4a4:	003fa406 	br	1000a338 <__alt_data_end+0xf800a338>
1000a4a8:	3c0e983a 	sll	r7,r7,r16
1000a4ac:	3086d83a 	srl	r3,r6,r2
1000a4b0:	88aed83a 	srl	r23,r17,r2
1000a4b4:	9084d83a 	srl	r2,r18,r2
1000a4b8:	38e6b03a 	or	r19,r7,r3
1000a4bc:	9828d43a 	srli	r20,r19,16
1000a4c0:	8c22983a 	sll	r17,r17,r16
1000a4c4:	b809883a 	mov	r4,r23
1000a4c8:	a00b883a 	mov	r5,r20
1000a4cc:	342a983a 	sll	r21,r6,r16
1000a4d0:	88a2b03a 	or	r17,r17,r2
1000a4d4:	000aef00 	call	1000aef0 <__umodsi3>
1000a4d8:	b809883a 	mov	r4,r23
1000a4dc:	a00b883a 	mov	r5,r20
1000a4e0:	1039883a 	mov	fp,r2
1000a4e4:	9dbfffcc 	andi	r22,r19,65535
1000a4e8:	000aee80 	call	1000aee8 <__udivsi3>
1000a4ec:	1009883a 	mov	r4,r2
1000a4f0:	b00b883a 	mov	r5,r22
1000a4f4:	102f883a 	mov	r23,r2
1000a4f8:	000aef80 	call	1000aef8 <__mulsi3>
1000a4fc:	1009883a 	mov	r4,r2
1000a500:	e00e943a 	slli	r7,fp,16
1000a504:	8804d43a 	srli	r2,r17,16
1000a508:	388eb03a 	or	r7,r7,r2
1000a50c:	3900042e 	bgeu	r7,r4,1000a520 <__udivdi3+0x3c4>
1000a510:	3ccf883a 	add	r7,r7,r19
1000a514:	b8bfffc4 	addi	r2,r23,-1
1000a518:	3cc0972e 	bgeu	r7,r19,1000a778 <__udivdi3+0x61c>
1000a51c:	102f883a 	mov	r23,r2
1000a520:	3939c83a 	sub	fp,r7,r4
1000a524:	a00b883a 	mov	r5,r20
1000a528:	e009883a 	mov	r4,fp
1000a52c:	000aef00 	call	1000aef0 <__umodsi3>
1000a530:	a00b883a 	mov	r5,r20
1000a534:	e009883a 	mov	r4,fp
1000a538:	d8800015 	stw	r2,0(sp)
1000a53c:	000aee80 	call	1000aee8 <__udivsi3>
1000a540:	1009883a 	mov	r4,r2
1000a544:	b00b883a 	mov	r5,r22
1000a548:	1029883a 	mov	r20,r2
1000a54c:	000aef80 	call	1000aef8 <__mulsi3>
1000a550:	d8c00017 	ldw	r3,0(sp)
1000a554:	8c7fffcc 	andi	r17,r17,65535
1000a558:	1806943a 	slli	r3,r3,16
1000a55c:	1c46b03a 	or	r3,r3,r17
1000a560:	1880042e 	bgeu	r3,r2,1000a574 <__udivdi3+0x418>
1000a564:	1cc7883a 	add	r3,r3,r19
1000a568:	a13fffc4 	addi	r4,r20,-1
1000a56c:	1cc07e2e 	bgeu	r3,r19,1000a768 <__udivdi3+0x60c>
1000a570:	2029883a 	mov	r20,r4
1000a574:	b82e943a 	slli	r23,r23,16
1000a578:	a822d43a 	srli	r17,r21,16
1000a57c:	ad7fffcc 	andi	r21,r21,65535
1000a580:	a5e8b03a 	or	r20,r20,r23
1000a584:	a5bfffcc 	andi	r22,r20,65535
1000a588:	b009883a 	mov	r4,r22
1000a58c:	a80b883a 	mov	r5,r21
1000a590:	18afc83a 	sub	r23,r3,r2
1000a594:	a026d43a 	srli	r19,r20,16
1000a598:	000aef80 	call	1000aef8 <__mulsi3>
1000a59c:	b009883a 	mov	r4,r22
1000a5a0:	880b883a 	mov	r5,r17
1000a5a4:	1039883a 	mov	fp,r2
1000a5a8:	000aef80 	call	1000aef8 <__mulsi3>
1000a5ac:	a80b883a 	mov	r5,r21
1000a5b0:	9809883a 	mov	r4,r19
1000a5b4:	102d883a 	mov	r22,r2
1000a5b8:	000aef80 	call	1000aef8 <__mulsi3>
1000a5bc:	9809883a 	mov	r4,r19
1000a5c0:	880b883a 	mov	r5,r17
1000a5c4:	102b883a 	mov	r21,r2
1000a5c8:	000aef80 	call	1000aef8 <__mulsi3>
1000a5cc:	100b883a 	mov	r5,r2
1000a5d0:	e004d43a 	srli	r2,fp,16
1000a5d4:	ad89883a 	add	r4,r21,r22
1000a5d8:	2089883a 	add	r4,r4,r2
1000a5dc:	2540022e 	bgeu	r4,r21,1000a5e8 <__udivdi3+0x48c>
1000a5e0:	00800074 	movhi	r2,1
1000a5e4:	288b883a 	add	r5,r5,r2
1000a5e8:	2004d43a 	srli	r2,r4,16
1000a5ec:	288b883a 	add	r5,r5,r2
1000a5f0:	b9404536 	bltu	r23,r5,1000a708 <__udivdi3+0x5ac>
1000a5f4:	b9403f26 	beq	r23,r5,1000a6f4 <__udivdi3+0x598>
1000a5f8:	a005883a 	mov	r2,r20
1000a5fc:	0007883a 	mov	r3,zero
1000a600:	003f8d06 	br	1000a438 <__alt_data_end+0xf800a438>
1000a604:	80a0983a 	sll	r16,r16,r2
1000a608:	88eed83a 	srl	r23,r17,r3
1000a60c:	90c6d83a 	srl	r3,r18,r3
1000a610:	8028d43a 	srli	r20,r16,16
1000a614:	88a2983a 	sll	r17,r17,r2
1000a618:	b809883a 	mov	r4,r23
1000a61c:	a00b883a 	mov	r5,r20
1000a620:	88ecb03a 	or	r22,r17,r3
1000a624:	90a6983a 	sll	r19,r18,r2
1000a628:	000aef00 	call	1000aef0 <__umodsi3>
1000a62c:	b809883a 	mov	r4,r23
1000a630:	a00b883a 	mov	r5,r20
1000a634:	1023883a 	mov	r17,r2
1000a638:	857fffcc 	andi	r21,r16,65535
1000a63c:	000aee80 	call	1000aee8 <__udivsi3>
1000a640:	1009883a 	mov	r4,r2
1000a644:	a80b883a 	mov	r5,r21
1000a648:	102f883a 	mov	r23,r2
1000a64c:	000aef80 	call	1000aef8 <__mulsi3>
1000a650:	1009883a 	mov	r4,r2
1000a654:	880c943a 	slli	r6,r17,16
1000a658:	b004d43a 	srli	r2,r22,16
1000a65c:	308cb03a 	or	r6,r6,r2
1000a660:	3100062e 	bgeu	r6,r4,1000a67c <__udivdi3+0x520>
1000a664:	340d883a 	add	r6,r6,r16
1000a668:	b8bfffc4 	addi	r2,r23,-1
1000a66c:	34004836 	bltu	r6,r16,1000a790 <__udivdi3+0x634>
1000a670:	3100472e 	bgeu	r6,r4,1000a790 <__udivdi3+0x634>
1000a674:	bdffff84 	addi	r23,r23,-2
1000a678:	340d883a 	add	r6,r6,r16
1000a67c:	3125c83a 	sub	r18,r6,r4
1000a680:	9009883a 	mov	r4,r18
1000a684:	a00b883a 	mov	r5,r20
1000a688:	000aef00 	call	1000aef0 <__umodsi3>
1000a68c:	1023883a 	mov	r17,r2
1000a690:	9009883a 	mov	r4,r18
1000a694:	a00b883a 	mov	r5,r20
1000a698:	8822943a 	slli	r17,r17,16
1000a69c:	000aee80 	call	1000aee8 <__udivsi3>
1000a6a0:	1009883a 	mov	r4,r2
1000a6a4:	a80b883a 	mov	r5,r21
1000a6a8:	b5bfffcc 	andi	r22,r22,65535
1000a6ac:	1025883a 	mov	r18,r2
1000a6b0:	8da2b03a 	or	r17,r17,r22
1000a6b4:	000aef80 	call	1000aef8 <__mulsi3>
1000a6b8:	8880062e 	bgeu	r17,r2,1000a6d4 <__udivdi3+0x578>
1000a6bc:	8c23883a 	add	r17,r17,r16
1000a6c0:	90ffffc4 	addi	r3,r18,-1
1000a6c4:	8c003036 	bltu	r17,r16,1000a788 <__udivdi3+0x62c>
1000a6c8:	88802f2e 	bgeu	r17,r2,1000a788 <__udivdi3+0x62c>
1000a6cc:	94bfff84 	addi	r18,r18,-2
1000a6d0:	8c23883a 	add	r17,r17,r16
1000a6d4:	b806943a 	slli	r3,r23,16
1000a6d8:	88a3c83a 	sub	r17,r17,r2
1000a6dc:	90c6b03a 	or	r3,r18,r3
1000a6e0:	003f2206 	br	1000a36c <__alt_data_end+0xf800a36c>
1000a6e4:	2023883a 	mov	r17,r4
1000a6e8:	003f4e06 	br	1000a424 <__alt_data_end+0xf800a424>
1000a6ec:	1823883a 	mov	r17,r3
1000a6f0:	003eec06 	br	1000a2a4 <__alt_data_end+0xf800a2a4>
1000a6f4:	2008943a 	slli	r4,r4,16
1000a6f8:	9420983a 	sll	r16,r18,r16
1000a6fc:	e73fffcc 	andi	fp,fp,65535
1000a700:	2709883a 	add	r4,r4,fp
1000a704:	813fbc2e 	bgeu	r16,r4,1000a5f8 <__alt_data_end+0xf800a5f8>
1000a708:	a0bfffc4 	addi	r2,r20,-1
1000a70c:	0007883a 	mov	r3,zero
1000a710:	003f4906 	br	1000a438 <__alt_data_end+0xf800a438>
1000a714:	00c00604 	movi	r3,24
1000a718:	180b883a 	mov	r5,r3
1000a71c:	003eed06 	br	1000a2d4 <__alt_data_end+0xf800a2d4>
1000a720:	00c00204 	movi	r3,8
1000a724:	180b883a 	mov	r5,r3
1000a728:	003eea06 	br	1000a2d4 <__alt_data_end+0xf800a2d4>
1000a72c:	00800604 	movi	r2,24
1000a730:	1007883a 	mov	r3,r2
1000a734:	003ea106 	br	1000a1bc <__alt_data_end+0xf800a1bc>
1000a738:	00800604 	movi	r2,24
1000a73c:	1007883a 	mov	r3,r2
1000a740:	003efd06 	br	1000a338 <__alt_data_end+0xf800a338>
1000a744:	00800204 	movi	r2,8
1000a748:	1007883a 	mov	r3,r2
1000a74c:	003efa06 	br	1000a338 <__alt_data_end+0xf800a338>
1000a750:	00800204 	movi	r2,8
1000a754:	1007883a 	mov	r3,r2
1000a758:	003e9806 	br	1000a1bc <__alt_data_end+0xf800a1bc>
1000a75c:	0007883a 	mov	r3,zero
1000a760:	00800044 	movi	r2,1
1000a764:	003f3406 	br	1000a438 <__alt_data_end+0xf800a438>
1000a768:	18bf812e 	bgeu	r3,r2,1000a570 <__alt_data_end+0xf800a570>
1000a76c:	a53fff84 	addi	r20,r20,-2
1000a770:	1cc7883a 	add	r3,r3,r19
1000a774:	003f7f06 	br	1000a574 <__alt_data_end+0xf800a574>
1000a778:	393f682e 	bgeu	r7,r4,1000a51c <__alt_data_end+0xf800a51c>
1000a77c:	bdffff84 	addi	r23,r23,-2
1000a780:	3ccf883a 	add	r7,r7,r19
1000a784:	003f6606 	br	1000a520 <__alt_data_end+0xf800a520>
1000a788:	1825883a 	mov	r18,r3
1000a78c:	003fd106 	br	1000a6d4 <__alt_data_end+0xf800a6d4>
1000a790:	102f883a 	mov	r23,r2
1000a794:	003fb906 	br	1000a67c <__alt_data_end+0xf800a67c>
1000a798:	94bfff84 	addi	r18,r18,-2
1000a79c:	3c0f883a 	add	r7,r7,r16
1000a7a0:	003f0906 	br	1000a3c8 <__alt_data_end+0xf800a3c8>
1000a7a4:	94bfff84 	addi	r18,r18,-2
1000a7a8:	1c07883a 	add	r3,r3,r16
1000a7ac:	003ea806 	br	1000a250 <__alt_data_end+0xf800a250>

1000a7b0 <__umoddi3>:
1000a7b0:	defff304 	addi	sp,sp,-52
1000a7b4:	dd000715 	stw	r20,28(sp)
1000a7b8:	dc800515 	stw	r18,20(sp)
1000a7bc:	dc400415 	stw	r17,16(sp)
1000a7c0:	dfc00c15 	stw	ra,48(sp)
1000a7c4:	df000b15 	stw	fp,44(sp)
1000a7c8:	ddc00a15 	stw	r23,40(sp)
1000a7cc:	dd800915 	stw	r22,36(sp)
1000a7d0:	dd400815 	stw	r21,32(sp)
1000a7d4:	dcc00615 	stw	r19,24(sp)
1000a7d8:	dc000315 	stw	r16,12(sp)
1000a7dc:	2025883a 	mov	r18,r4
1000a7e0:	2823883a 	mov	r17,r5
1000a7e4:	2829883a 	mov	r20,r5
1000a7e8:	38003d1e 	bne	r7,zero,1000a8e0 <__umoddi3+0x130>
1000a7ec:	3021883a 	mov	r16,r6
1000a7f0:	2027883a 	mov	r19,r4
1000a7f4:	2980532e 	bgeu	r5,r6,1000a944 <__umoddi3+0x194>
1000a7f8:	00bfffd4 	movui	r2,65535
1000a7fc:	1180a636 	bltu	r2,r6,1000aa98 <__umoddi3+0x2e8>
1000a800:	00803fc4 	movi	r2,255
1000a804:	11816336 	bltu	r2,r6,1000ad94 <__umoddi3+0x5e4>
1000a808:	0005883a 	mov	r2,zero
1000a80c:	0009883a 	mov	r4,zero
1000a810:	3084d83a 	srl	r2,r6,r2
1000a814:	00c40074 	movhi	r3,4097
1000a818:	18ffc704 	addi	r3,r3,-228
1000a81c:	1885883a 	add	r2,r3,r2
1000a820:	10800003 	ldbu	r2,0(r2)
1000a824:	1109883a 	add	r4,r2,r4
1000a828:	00800804 	movi	r2,32
1000a82c:	1105c83a 	sub	r2,r2,r4
1000a830:	10011026 	beq	r2,zero,1000ac74 <__umoddi3+0x4c4>
1000a834:	9108d83a 	srl	r4,r18,r4
1000a838:	88a2983a 	sll	r17,r17,r2
1000a83c:	30a0983a 	sll	r16,r6,r2
1000a840:	90a6983a 	sll	r19,r18,r2
1000a844:	8928b03a 	or	r20,r17,r4
1000a848:	1025883a 	mov	r18,r2
1000a84c:	8022d43a 	srli	r17,r16,16
1000a850:	a009883a 	mov	r4,r20
1000a854:	857fffcc 	andi	r21,r16,65535
1000a858:	880b883a 	mov	r5,r17
1000a85c:	000aef00 	call	1000aef0 <__umodsi3>
1000a860:	a009883a 	mov	r4,r20
1000a864:	880b883a 	mov	r5,r17
1000a868:	102d883a 	mov	r22,r2
1000a86c:	000aee80 	call	1000aee8 <__udivsi3>
1000a870:	1009883a 	mov	r4,r2
1000a874:	a80b883a 	mov	r5,r21
1000a878:	000aef80 	call	1000aef8 <__mulsi3>
1000a87c:	1009883a 	mov	r4,r2
1000a880:	b006943a 	slli	r3,r22,16
1000a884:	9804d43a 	srli	r2,r19,16
1000a888:	1886b03a 	or	r3,r3,r2
1000a88c:	1900042e 	bgeu	r3,r4,1000a8a0 <__umoddi3+0xf0>
1000a890:	1c07883a 	add	r3,r3,r16
1000a894:	1c000236 	bltu	r3,r16,1000a8a0 <__umoddi3+0xf0>
1000a898:	1900012e 	bgeu	r3,r4,1000a8a0 <__umoddi3+0xf0>
1000a89c:	1c07883a 	add	r3,r3,r16
1000a8a0:	1929c83a 	sub	r20,r3,r4
1000a8a4:	a009883a 	mov	r4,r20
1000a8a8:	880b883a 	mov	r5,r17
1000a8ac:	000aef00 	call	1000aef0 <__umodsi3>
1000a8b0:	102d883a 	mov	r22,r2
1000a8b4:	a009883a 	mov	r4,r20
1000a8b8:	880b883a 	mov	r5,r17
1000a8bc:	b02c943a 	slli	r22,r22,16
1000a8c0:	000aee80 	call	1000aee8 <__udivsi3>
1000a8c4:	1009883a 	mov	r4,r2
1000a8c8:	a80b883a 	mov	r5,r21
1000a8cc:	9cffffcc 	andi	r19,r19,65535
1000a8d0:	000aef80 	call	1000aef8 <__mulsi3>
1000a8d4:	b4e6b03a 	or	r19,r22,r19
1000a8d8:	9880582e 	bgeu	r19,r2,1000aa3c <__umoddi3+0x28c>
1000a8dc:	00005306 	br	1000aa2c <__umoddi3+0x27c>
1000a8e0:	29c05a36 	bltu	r5,r7,1000aa4c <__umoddi3+0x29c>
1000a8e4:	00bfffd4 	movui	r2,65535
1000a8e8:	11c0662e 	bgeu	r2,r7,1000aa84 <__umoddi3+0x2d4>
1000a8ec:	00804034 	movhi	r2,256
1000a8f0:	10bfffc4 	addi	r2,r2,-1
1000a8f4:	11c11b36 	bltu	r2,r7,1000ad64 <__umoddi3+0x5b4>
1000a8f8:	00c00404 	movi	r3,16
1000a8fc:	1827883a 	mov	r19,r3
1000a900:	38c6d83a 	srl	r3,r7,r3
1000a904:	01040074 	movhi	r4,4097
1000a908:	213fc704 	addi	r4,r4,-228
1000a90c:	04000804 	movi	r16,32
1000a910:	20c7883a 	add	r3,r4,r3
1000a914:	18800003 	ldbu	r2,0(r3)
1000a918:	14e7883a 	add	r19,r2,r19
1000a91c:	84e1c83a 	sub	r16,r16,r19
1000a920:	8000681e 	bne	r16,zero,1000aac4 <__umoddi3+0x314>
1000a924:	3c400136 	bltu	r7,r17,1000a92c <__umoddi3+0x17c>
1000a928:	91812736 	bltu	r18,r6,1000adc8 <__umoddi3+0x618>
1000a92c:	9185c83a 	sub	r2,r18,r6
1000a930:	89e3c83a 	sub	r17,r17,r7
1000a934:	90a5803a 	cmpltu	r18,r18,r2
1000a938:	8ca9c83a 	sub	r20,r17,r18
1000a93c:	a007883a 	mov	r3,r20
1000a940:	00004406 	br	1000aa54 <__umoddi3+0x2a4>
1000a944:	3000041e 	bne	r6,zero,1000a958 <__umoddi3+0x1a8>
1000a948:	01000044 	movi	r4,1
1000a94c:	000b883a 	mov	r5,zero
1000a950:	000aee80 	call	1000aee8 <__udivsi3>
1000a954:	1021883a 	mov	r16,r2
1000a958:	00bfffd4 	movui	r2,65535
1000a95c:	1400542e 	bgeu	r2,r16,1000aab0 <__umoddi3+0x300>
1000a960:	00804034 	movhi	r2,256
1000a964:	10bfffc4 	addi	r2,r2,-1
1000a968:	14010736 	bltu	r2,r16,1000ad88 <__umoddi3+0x5d8>
1000a96c:	00800404 	movi	r2,16
1000a970:	1007883a 	mov	r3,r2
1000a974:	8084d83a 	srl	r2,r16,r2
1000a978:	01040074 	movhi	r4,4097
1000a97c:	213fc704 	addi	r4,r4,-228
1000a980:	05400804 	movi	r21,32
1000a984:	2085883a 	add	r2,r4,r2
1000a988:	10800003 	ldbu	r2,0(r2)
1000a98c:	10c7883a 	add	r3,r2,r3
1000a990:	a8ebc83a 	sub	r21,r21,r3
1000a994:	a800b91e 	bne	r21,zero,1000ac7c <__umoddi3+0x4cc>
1000a998:	8028d43a 	srli	r20,r16,16
1000a99c:	8c23c83a 	sub	r17,r17,r16
1000a9a0:	85bfffcc 	andi	r22,r16,65535
1000a9a4:	0025883a 	mov	r18,zero
1000a9a8:	8809883a 	mov	r4,r17
1000a9ac:	a00b883a 	mov	r5,r20
1000a9b0:	000aef00 	call	1000aef0 <__umodsi3>
1000a9b4:	8809883a 	mov	r4,r17
1000a9b8:	a00b883a 	mov	r5,r20
1000a9bc:	102b883a 	mov	r21,r2
1000a9c0:	000aee80 	call	1000aee8 <__udivsi3>
1000a9c4:	1009883a 	mov	r4,r2
1000a9c8:	b00b883a 	mov	r5,r22
1000a9cc:	000aef80 	call	1000aef8 <__mulsi3>
1000a9d0:	1009883a 	mov	r4,r2
1000a9d4:	a806943a 	slli	r3,r21,16
1000a9d8:	9804d43a 	srli	r2,r19,16
1000a9dc:	1886b03a 	or	r3,r3,r2
1000a9e0:	1900032e 	bgeu	r3,r4,1000a9f0 <__umoddi3+0x240>
1000a9e4:	1c07883a 	add	r3,r3,r16
1000a9e8:	1c000136 	bltu	r3,r16,1000a9f0 <__umoddi3+0x240>
1000a9ec:	1900f436 	bltu	r3,r4,1000adc0 <__umoddi3+0x610>
1000a9f0:	1923c83a 	sub	r17,r3,r4
1000a9f4:	8809883a 	mov	r4,r17
1000a9f8:	a00b883a 	mov	r5,r20
1000a9fc:	000aef00 	call	1000aef0 <__umodsi3>
1000aa00:	102b883a 	mov	r21,r2
1000aa04:	8809883a 	mov	r4,r17
1000aa08:	a00b883a 	mov	r5,r20
1000aa0c:	a82a943a 	slli	r21,r21,16
1000aa10:	000aee80 	call	1000aee8 <__udivsi3>
1000aa14:	1009883a 	mov	r4,r2
1000aa18:	b00b883a 	mov	r5,r22
1000aa1c:	9cffffcc 	andi	r19,r19,65535
1000aa20:	000aef80 	call	1000aef8 <__mulsi3>
1000aa24:	ace6b03a 	or	r19,r21,r19
1000aa28:	9880042e 	bgeu	r19,r2,1000aa3c <__umoddi3+0x28c>
1000aa2c:	9c27883a 	add	r19,r19,r16
1000aa30:	9c000236 	bltu	r19,r16,1000aa3c <__umoddi3+0x28c>
1000aa34:	9880012e 	bgeu	r19,r2,1000aa3c <__umoddi3+0x28c>
1000aa38:	9c27883a 	add	r19,r19,r16
1000aa3c:	9885c83a 	sub	r2,r19,r2
1000aa40:	1484d83a 	srl	r2,r2,r18
1000aa44:	0007883a 	mov	r3,zero
1000aa48:	00000206 	br	1000aa54 <__umoddi3+0x2a4>
1000aa4c:	2005883a 	mov	r2,r4
1000aa50:	2807883a 	mov	r3,r5
1000aa54:	dfc00c17 	ldw	ra,48(sp)
1000aa58:	df000b17 	ldw	fp,44(sp)
1000aa5c:	ddc00a17 	ldw	r23,40(sp)
1000aa60:	dd800917 	ldw	r22,36(sp)
1000aa64:	dd400817 	ldw	r21,32(sp)
1000aa68:	dd000717 	ldw	r20,28(sp)
1000aa6c:	dcc00617 	ldw	r19,24(sp)
1000aa70:	dc800517 	ldw	r18,20(sp)
1000aa74:	dc400417 	ldw	r17,16(sp)
1000aa78:	dc000317 	ldw	r16,12(sp)
1000aa7c:	dec00d04 	addi	sp,sp,52
1000aa80:	f800283a 	ret
1000aa84:	00803fc4 	movi	r2,255
1000aa88:	11c0b336 	bltu	r2,r7,1000ad58 <__umoddi3+0x5a8>
1000aa8c:	0007883a 	mov	r3,zero
1000aa90:	0027883a 	mov	r19,zero
1000aa94:	003f9a06 	br	1000a900 <__alt_data_end+0xf800a900>
1000aa98:	00804034 	movhi	r2,256
1000aa9c:	10bfffc4 	addi	r2,r2,-1
1000aaa0:	1180b336 	bltu	r2,r6,1000ad70 <__umoddi3+0x5c0>
1000aaa4:	00800404 	movi	r2,16
1000aaa8:	1009883a 	mov	r4,r2
1000aaac:	003f5806 	br	1000a810 <__alt_data_end+0xf800a810>
1000aab0:	00803fc4 	movi	r2,255
1000aab4:	1400b136 	bltu	r2,r16,1000ad7c <__umoddi3+0x5cc>
1000aab8:	0005883a 	mov	r2,zero
1000aabc:	0007883a 	mov	r3,zero
1000aac0:	003fac06 	br	1000a974 <__alt_data_end+0xf800a974>
1000aac4:	34c4d83a 	srl	r2,r6,r19
1000aac8:	3c0e983a 	sll	r7,r7,r16
1000aacc:	8cf8d83a 	srl	fp,r17,r19
1000aad0:	8c22983a 	sll	r17,r17,r16
1000aad4:	38a8b03a 	or	r20,r7,r2
1000aad8:	a02ad43a 	srli	r21,r20,16
1000aadc:	94c4d83a 	srl	r2,r18,r19
1000aae0:	e009883a 	mov	r4,fp
1000aae4:	a80b883a 	mov	r5,r21
1000aae8:	342c983a 	sll	r22,r6,r16
1000aaec:	88a2b03a 	or	r17,r17,r2
1000aaf0:	000aef00 	call	1000aef0 <__umodsi3>
1000aaf4:	e009883a 	mov	r4,fp
1000aaf8:	a80b883a 	mov	r5,r21
1000aafc:	a5ffffcc 	andi	r23,r20,65535
1000ab00:	d8800215 	stw	r2,8(sp)
1000ab04:	000aee80 	call	1000aee8 <__udivsi3>
1000ab08:	1009883a 	mov	r4,r2
1000ab0c:	b80b883a 	mov	r5,r23
1000ab10:	1039883a 	mov	fp,r2
1000ab14:	000aef80 	call	1000aef8 <__mulsi3>
1000ab18:	d8c00217 	ldw	r3,8(sp)
1000ab1c:	1009883a 	mov	r4,r2
1000ab20:	8804d43a 	srli	r2,r17,16
1000ab24:	1806943a 	slli	r3,r3,16
1000ab28:	9424983a 	sll	r18,r18,r16
1000ab2c:	1886b03a 	or	r3,r3,r2
1000ab30:	1900042e 	bgeu	r3,r4,1000ab44 <__umoddi3+0x394>
1000ab34:	1d07883a 	add	r3,r3,r20
1000ab38:	e0bfffc4 	addi	r2,fp,-1
1000ab3c:	1d009c2e 	bgeu	r3,r20,1000adb0 <__umoddi3+0x600>
1000ab40:	1039883a 	mov	fp,r2
1000ab44:	1907c83a 	sub	r3,r3,r4
1000ab48:	1809883a 	mov	r4,r3
1000ab4c:	a80b883a 	mov	r5,r21
1000ab50:	d8c00215 	stw	r3,8(sp)
1000ab54:	000aef00 	call	1000aef0 <__umodsi3>
1000ab58:	d8c00217 	ldw	r3,8(sp)
1000ab5c:	a80b883a 	mov	r5,r21
1000ab60:	d8800015 	stw	r2,0(sp)
1000ab64:	1809883a 	mov	r4,r3
1000ab68:	000aee80 	call	1000aee8 <__udivsi3>
1000ab6c:	1009883a 	mov	r4,r2
1000ab70:	b80b883a 	mov	r5,r23
1000ab74:	102b883a 	mov	r21,r2
1000ab78:	000aef80 	call	1000aef8 <__mulsi3>
1000ab7c:	d9c00017 	ldw	r7,0(sp)
1000ab80:	8c7fffcc 	andi	r17,r17,65535
1000ab84:	380e943a 	slli	r7,r7,16
1000ab88:	3c4eb03a 	or	r7,r7,r17
1000ab8c:	3880042e 	bgeu	r7,r2,1000aba0 <__umoddi3+0x3f0>
1000ab90:	3d0f883a 	add	r7,r7,r20
1000ab94:	a8ffffc4 	addi	r3,r21,-1
1000ab98:	3d00812e 	bgeu	r7,r20,1000ada0 <__umoddi3+0x5f0>
1000ab9c:	182b883a 	mov	r21,r3
1000aba0:	e038943a 	slli	fp,fp,16
1000aba4:	b010d43a 	srli	r8,r22,16
1000aba8:	b1bfffcc 	andi	r6,r22,65535
1000abac:	af2ab03a 	or	r21,r21,fp
1000abb0:	a82ed43a 	srli	r23,r21,16
1000abb4:	ad7fffcc 	andi	r21,r21,65535
1000abb8:	300b883a 	mov	r5,r6
1000abbc:	a809883a 	mov	r4,r21
1000abc0:	38a3c83a 	sub	r17,r7,r2
1000abc4:	d9800115 	stw	r6,4(sp)
1000abc8:	da000015 	stw	r8,0(sp)
1000abcc:	000aef80 	call	1000aef8 <__mulsi3>
1000abd0:	da000017 	ldw	r8,0(sp)
1000abd4:	a809883a 	mov	r4,r21
1000abd8:	1039883a 	mov	fp,r2
1000abdc:	400b883a 	mov	r5,r8
1000abe0:	da000215 	stw	r8,8(sp)
1000abe4:	000aef80 	call	1000aef8 <__mulsi3>
1000abe8:	d9800117 	ldw	r6,4(sp)
1000abec:	b809883a 	mov	r4,r23
1000abf0:	d8800015 	stw	r2,0(sp)
1000abf4:	300b883a 	mov	r5,r6
1000abf8:	000aef80 	call	1000aef8 <__mulsi3>
1000abfc:	d8c00217 	ldw	r3,8(sp)
1000ac00:	b809883a 	mov	r4,r23
1000ac04:	102b883a 	mov	r21,r2
1000ac08:	180b883a 	mov	r5,r3
1000ac0c:	000aef80 	call	1000aef8 <__mulsi3>
1000ac10:	d9c00017 	ldw	r7,0(sp)
1000ac14:	1007883a 	mov	r3,r2
1000ac18:	e004d43a 	srli	r2,fp,16
1000ac1c:	a9c9883a 	add	r4,r21,r7
1000ac20:	2089883a 	add	r4,r4,r2
1000ac24:	2540022e 	bgeu	r4,r21,1000ac30 <__umoddi3+0x480>
1000ac28:	00800074 	movhi	r2,1
1000ac2c:	1887883a 	add	r3,r3,r2
1000ac30:	2004d43a 	srli	r2,r4,16
1000ac34:	2008943a 	slli	r4,r4,16
1000ac38:	e73fffcc 	andi	fp,fp,65535
1000ac3c:	1887883a 	add	r3,r3,r2
1000ac40:	2709883a 	add	r4,r4,fp
1000ac44:	88c03e36 	bltu	r17,r3,1000ad40 <__umoddi3+0x590>
1000ac48:	88c06226 	beq	r17,r3,1000add4 <__umoddi3+0x624>
1000ac4c:	88c7c83a 	sub	r3,r17,r3
1000ac50:	202d883a 	mov	r22,r4
1000ac54:	95adc83a 	sub	r22,r18,r22
1000ac58:	95a5803a 	cmpltu	r18,r18,r22
1000ac5c:	1c87c83a 	sub	r3,r3,r18
1000ac60:	1cc4983a 	sll	r2,r3,r19
1000ac64:	b42cd83a 	srl	r22,r22,r16
1000ac68:	1c06d83a 	srl	r3,r3,r16
1000ac6c:	1584b03a 	or	r2,r2,r22
1000ac70:	003f7806 	br	1000aa54 <__alt_data_end+0xf800aa54>
1000ac74:	0025883a 	mov	r18,zero
1000ac78:	003ef406 	br	1000a84c <__alt_data_end+0xf800a84c>
1000ac7c:	8560983a 	sll	r16,r16,r21
1000ac80:	88e6d83a 	srl	r19,r17,r3
1000ac84:	90c6d83a 	srl	r3,r18,r3
1000ac88:	8028d43a 	srli	r20,r16,16
1000ac8c:	8d62983a 	sll	r17,r17,r21
1000ac90:	9809883a 	mov	r4,r19
1000ac94:	a00b883a 	mov	r5,r20
1000ac98:	88eeb03a 	or	r23,r17,r3
1000ac9c:	000aef00 	call	1000aef0 <__umodsi3>
1000aca0:	9809883a 	mov	r4,r19
1000aca4:	a00b883a 	mov	r5,r20
1000aca8:	1023883a 	mov	r17,r2
1000acac:	85bfffcc 	andi	r22,r16,65535
1000acb0:	000aee80 	call	1000aee8 <__udivsi3>
1000acb4:	1009883a 	mov	r4,r2
1000acb8:	b00b883a 	mov	r5,r22
1000acbc:	000aef80 	call	1000aef8 <__mulsi3>
1000acc0:	1007883a 	mov	r3,r2
1000acc4:	8808943a 	slli	r4,r17,16
1000acc8:	b804d43a 	srli	r2,r23,16
1000accc:	9566983a 	sll	r19,r18,r21
1000acd0:	2088b03a 	or	r4,r4,r2
1000acd4:	20c0042e 	bgeu	r4,r3,1000ace8 <__umoddi3+0x538>
1000acd8:	2409883a 	add	r4,r4,r16
1000acdc:	24000236 	bltu	r4,r16,1000ace8 <__umoddi3+0x538>
1000ace0:	20c0012e 	bgeu	r4,r3,1000ace8 <__umoddi3+0x538>
1000ace4:	2409883a 	add	r4,r4,r16
1000ace8:	20e5c83a 	sub	r18,r4,r3
1000acec:	9009883a 	mov	r4,r18
1000acf0:	a00b883a 	mov	r5,r20
1000acf4:	000aef00 	call	1000aef0 <__umodsi3>
1000acf8:	1023883a 	mov	r17,r2
1000acfc:	9009883a 	mov	r4,r18
1000ad00:	a00b883a 	mov	r5,r20
1000ad04:	8822943a 	slli	r17,r17,16
1000ad08:	000aee80 	call	1000aee8 <__udivsi3>
1000ad0c:	1009883a 	mov	r4,r2
1000ad10:	b00b883a 	mov	r5,r22
1000ad14:	bdffffcc 	andi	r23,r23,65535
1000ad18:	000aef80 	call	1000aef8 <__mulsi3>
1000ad1c:	8de2b03a 	or	r17,r17,r23
1000ad20:	8880042e 	bgeu	r17,r2,1000ad34 <__umoddi3+0x584>
1000ad24:	8c23883a 	add	r17,r17,r16
1000ad28:	8c000236 	bltu	r17,r16,1000ad34 <__umoddi3+0x584>
1000ad2c:	8880012e 	bgeu	r17,r2,1000ad34 <__umoddi3+0x584>
1000ad30:	8c23883a 	add	r17,r17,r16
1000ad34:	88a3c83a 	sub	r17,r17,r2
1000ad38:	a825883a 	mov	r18,r21
1000ad3c:	003f1a06 	br	1000a9a8 <__alt_data_end+0xf800a9a8>
1000ad40:	25adc83a 	sub	r22,r4,r22
1000ad44:	1d07c83a 	sub	r3,r3,r20
1000ad48:	2589803a 	cmpltu	r4,r4,r22
1000ad4c:	1907c83a 	sub	r3,r3,r4
1000ad50:	88c7c83a 	sub	r3,r17,r3
1000ad54:	003fbf06 	br	1000ac54 <__alt_data_end+0xf800ac54>
1000ad58:	00c00204 	movi	r3,8
1000ad5c:	1827883a 	mov	r19,r3
1000ad60:	003ee706 	br	1000a900 <__alt_data_end+0xf800a900>
1000ad64:	00c00604 	movi	r3,24
1000ad68:	1827883a 	mov	r19,r3
1000ad6c:	003ee406 	br	1000a900 <__alt_data_end+0xf800a900>
1000ad70:	00800604 	movi	r2,24
1000ad74:	1009883a 	mov	r4,r2
1000ad78:	003ea506 	br	1000a810 <__alt_data_end+0xf800a810>
1000ad7c:	00800204 	movi	r2,8
1000ad80:	1007883a 	mov	r3,r2
1000ad84:	003efb06 	br	1000a974 <__alt_data_end+0xf800a974>
1000ad88:	00800604 	movi	r2,24
1000ad8c:	1007883a 	mov	r3,r2
1000ad90:	003ef806 	br	1000a974 <__alt_data_end+0xf800a974>
1000ad94:	00800204 	movi	r2,8
1000ad98:	1009883a 	mov	r4,r2
1000ad9c:	003e9c06 	br	1000a810 <__alt_data_end+0xf800a810>
1000ada0:	38bf7e2e 	bgeu	r7,r2,1000ab9c <__alt_data_end+0xf800ab9c>
1000ada4:	ad7fff84 	addi	r21,r21,-2
1000ada8:	3d0f883a 	add	r7,r7,r20
1000adac:	003f7c06 	br	1000aba0 <__alt_data_end+0xf800aba0>
1000adb0:	193f632e 	bgeu	r3,r4,1000ab40 <__alt_data_end+0xf800ab40>
1000adb4:	e73fff84 	addi	fp,fp,-2
1000adb8:	1d07883a 	add	r3,r3,r20
1000adbc:	003f6106 	br	1000ab44 <__alt_data_end+0xf800ab44>
1000adc0:	1c07883a 	add	r3,r3,r16
1000adc4:	003f0a06 	br	1000a9f0 <__alt_data_end+0xf800a9f0>
1000adc8:	9005883a 	mov	r2,r18
1000adcc:	a007883a 	mov	r3,r20
1000add0:	003f2006 	br	1000aa54 <__alt_data_end+0xf800aa54>
1000add4:	913fda36 	bltu	r18,r4,1000ad40 <__alt_data_end+0xf800ad40>
1000add8:	202d883a 	mov	r22,r4
1000addc:	0007883a 	mov	r3,zero
1000ade0:	003f9c06 	br	1000ac54 <__alt_data_end+0xf800ac54>

1000ade4 <udivmodsi4>:
1000ade4:	2900182e 	bgeu	r5,r4,1000ae48 <udivmodsi4+0x64>
1000ade8:	28001716 	blt	r5,zero,1000ae48 <udivmodsi4+0x64>
1000adec:	00800804 	movi	r2,32
1000adf0:	00c00044 	movi	r3,1
1000adf4:	00000206 	br	1000ae00 <udivmodsi4+0x1c>
1000adf8:	10001126 	beq	r2,zero,1000ae40 <udivmodsi4+0x5c>
1000adfc:	28000516 	blt	r5,zero,1000ae14 <udivmodsi4+0x30>
1000ae00:	294b883a 	add	r5,r5,r5
1000ae04:	10bfffc4 	addi	r2,r2,-1
1000ae08:	18c7883a 	add	r3,r3,r3
1000ae0c:	293ffa36 	bltu	r5,r4,1000adf8 <__alt_data_end+0xf800adf8>
1000ae10:	18000b26 	beq	r3,zero,1000ae40 <udivmodsi4+0x5c>
1000ae14:	0005883a 	mov	r2,zero
1000ae18:	21400236 	bltu	r4,r5,1000ae24 <udivmodsi4+0x40>
1000ae1c:	2149c83a 	sub	r4,r4,r5
1000ae20:	10c4b03a 	or	r2,r2,r3
1000ae24:	1806d07a 	srli	r3,r3,1
1000ae28:	280ad07a 	srli	r5,r5,1
1000ae2c:	183ffa1e 	bne	r3,zero,1000ae18 <__alt_data_end+0xf800ae18>
1000ae30:	3000011e 	bne	r6,zero,1000ae38 <udivmodsi4+0x54>
1000ae34:	f800283a 	ret
1000ae38:	2005883a 	mov	r2,r4
1000ae3c:	f800283a 	ret
1000ae40:	0005883a 	mov	r2,zero
1000ae44:	003ffa06 	br	1000ae30 <__alt_data_end+0xf800ae30>
1000ae48:	00c00044 	movi	r3,1
1000ae4c:	0005883a 	mov	r2,zero
1000ae50:	003ff106 	br	1000ae18 <__alt_data_end+0xf800ae18>

1000ae54 <__divsi3>:
1000ae54:	deffff04 	addi	sp,sp,-4
1000ae58:	dfc00015 	stw	ra,0(sp)
1000ae5c:	20000916 	blt	r4,zero,1000ae84 <__divsi3+0x30>
1000ae60:	000f883a 	mov	r7,zero
1000ae64:	28000a16 	blt	r5,zero,1000ae90 <__divsi3+0x3c>
1000ae68:	000d883a 	mov	r6,zero
1000ae6c:	000ade40 	call	1000ade4 <udivmodsi4>
1000ae70:	38000126 	beq	r7,zero,1000ae78 <__divsi3+0x24>
1000ae74:	0085c83a 	sub	r2,zero,r2
1000ae78:	dfc00017 	ldw	ra,0(sp)
1000ae7c:	dec00104 	addi	sp,sp,4
1000ae80:	f800283a 	ret
1000ae84:	0109c83a 	sub	r4,zero,r4
1000ae88:	01c00044 	movi	r7,1
1000ae8c:	283ff60e 	bge	r5,zero,1000ae68 <__alt_data_end+0xf800ae68>
1000ae90:	014bc83a 	sub	r5,zero,r5
1000ae94:	39c0005c 	xori	r7,r7,1
1000ae98:	003ff306 	br	1000ae68 <__alt_data_end+0xf800ae68>

1000ae9c <__modsi3>:
1000ae9c:	20000316 	blt	r4,zero,1000aeac <__modsi3+0x10>
1000aea0:	28000c16 	blt	r5,zero,1000aed4 <__modsi3+0x38>
1000aea4:	01800044 	movi	r6,1
1000aea8:	000ade41 	jmpi	1000ade4 <udivmodsi4>
1000aeac:	deffff04 	addi	sp,sp,-4
1000aeb0:	dfc00015 	stw	ra,0(sp)
1000aeb4:	0109c83a 	sub	r4,zero,r4
1000aeb8:	28000916 	blt	r5,zero,1000aee0 <__modsi3+0x44>
1000aebc:	01800044 	movi	r6,1
1000aec0:	000ade40 	call	1000ade4 <udivmodsi4>
1000aec4:	0085c83a 	sub	r2,zero,r2
1000aec8:	dfc00017 	ldw	ra,0(sp)
1000aecc:	dec00104 	addi	sp,sp,4
1000aed0:	f800283a 	ret
1000aed4:	014bc83a 	sub	r5,zero,r5
1000aed8:	01800044 	movi	r6,1
1000aedc:	000ade41 	jmpi	1000ade4 <udivmodsi4>
1000aee0:	014bc83a 	sub	r5,zero,r5
1000aee4:	003ff506 	br	1000aebc <__alt_data_end+0xf800aebc>

1000aee8 <__udivsi3>:
1000aee8:	000d883a 	mov	r6,zero
1000aeec:	000ade41 	jmpi	1000ade4 <udivmodsi4>

1000aef0 <__umodsi3>:
1000aef0:	01800044 	movi	r6,1
1000aef4:	000ade41 	jmpi	1000ade4 <udivmodsi4>

1000aef8 <__mulsi3>:
1000aef8:	0005883a 	mov	r2,zero
1000aefc:	20000726 	beq	r4,zero,1000af1c <__mulsi3+0x24>
1000af00:	20c0004c 	andi	r3,r4,1
1000af04:	2008d07a 	srli	r4,r4,1
1000af08:	18000126 	beq	r3,zero,1000af10 <__mulsi3+0x18>
1000af0c:	1145883a 	add	r2,r2,r5
1000af10:	294b883a 	add	r5,r5,r5
1000af14:	203ffa1e 	bne	r4,zero,1000af00 <__alt_data_end+0xf800af00>
1000af18:	f800283a 	ret
1000af1c:	f800283a 	ret

1000af20 <__adddf3>:
1000af20:	00800434 	movhi	r2,16
1000af24:	10bfffc4 	addi	r2,r2,-1
1000af28:	defffb04 	addi	sp,sp,-20
1000af2c:	2890703a 	and	r8,r5,r2
1000af30:	2806d7fa 	srli	r3,r5,31
1000af34:	3884703a 	and	r2,r7,r2
1000af38:	2014d77a 	srli	r10,r4,29
1000af3c:	3812d53a 	srli	r9,r7,20
1000af40:	dc400115 	stw	r17,4(sp)
1000af44:	100490fa 	slli	r2,r2,3
1000af48:	2822d53a 	srli	r17,r5,20
1000af4c:	380ed7fa 	srli	r7,r7,31
1000af50:	400a90fa 	slli	r5,r8,3
1000af54:	3010d77a 	srli	r8,r6,29
1000af58:	dc800215 	stw	r18,8(sp)
1000af5c:	dc000015 	stw	r16,0(sp)
1000af60:	dfc00415 	stw	ra,16(sp)
1000af64:	dcc00315 	stw	r19,12(sp)
1000af68:	1c803fcc 	andi	r18,r3,255
1000af6c:	202090fa 	slli	r16,r4,3
1000af70:	8c41ffcc 	andi	r17,r17,2047
1000af74:	2a8ab03a 	or	r5,r5,r10
1000af78:	4901ffcc 	andi	r4,r9,2047
1000af7c:	1204b03a 	or	r2,r2,r8
1000af80:	300c90fa 	slli	r6,r6,3
1000af84:	91c07126 	beq	r18,r7,1000b14c <__adddf3+0x22c>
1000af88:	8907c83a 	sub	r3,r17,r4
1000af8c:	00c0a00e 	bge	zero,r3,1000b210 <__adddf3+0x2f0>
1000af90:	2000291e 	bne	r4,zero,1000b038 <__adddf3+0x118>
1000af94:	1188b03a 	or	r4,r2,r6
1000af98:	20008b1e 	bne	r4,zero,1000b1c8 <__adddf3+0x2a8>
1000af9c:	808001cc 	andi	r2,r16,7
1000afa0:	10005a26 	beq	r2,zero,1000b10c <__adddf3+0x1ec>
1000afa4:	80c003cc 	andi	r3,r16,15
1000afa8:	00800104 	movi	r2,4
1000afac:	18805726 	beq	r3,r2,1000b10c <__adddf3+0x1ec>
1000afb0:	81000104 	addi	r4,r16,4
1000afb4:	2421803a 	cmpltu	r16,r4,r16
1000afb8:	2c0b883a 	add	r5,r5,r16
1000afbc:	2880202c 	andhi	r2,r5,128
1000afc0:	9007883a 	mov	r3,r18
1000afc4:	2021883a 	mov	r16,r4
1000afc8:	10005326 	beq	r2,zero,1000b118 <__adddf3+0x1f8>
1000afcc:	8c400044 	addi	r17,r17,1
1000afd0:	0081ffc4 	movi	r2,2047
1000afd4:	8880ae26 	beq	r17,r2,1000b290 <__adddf3+0x370>
1000afd8:	00bfe034 	movhi	r2,65408
1000afdc:	10bfffc4 	addi	r2,r2,-1
1000afe0:	288a703a 	and	r5,r5,r2
1000afe4:	2804977a 	slli	r2,r5,29
1000afe8:	280a927a 	slli	r5,r5,9
1000afec:	8020d0fa 	srli	r16,r16,3
1000aff0:	280ad33a 	srli	r5,r5,12
1000aff4:	1404b03a 	or	r2,r2,r16
1000aff8:	8c41ffcc 	andi	r17,r17,2047
1000affc:	8822953a 	slli	r17,r17,20
1000b000:	18c03fcc 	andi	r3,r3,255
1000b004:	180897fa 	slli	r4,r3,31
1000b008:	00c00434 	movhi	r3,16
1000b00c:	18ffffc4 	addi	r3,r3,-1
1000b010:	28c6703a 	and	r3,r5,r3
1000b014:	1c46b03a 	or	r3,r3,r17
1000b018:	1906b03a 	or	r3,r3,r4
1000b01c:	dfc00417 	ldw	ra,16(sp)
1000b020:	dcc00317 	ldw	r19,12(sp)
1000b024:	dc800217 	ldw	r18,8(sp)
1000b028:	dc400117 	ldw	r17,4(sp)
1000b02c:	dc000017 	ldw	r16,0(sp)
1000b030:	dec00504 	addi	sp,sp,20
1000b034:	f800283a 	ret
1000b038:	0101ffc4 	movi	r4,2047
1000b03c:	893fd726 	beq	r17,r4,1000af9c <__alt_data_end+0xf800af9c>
1000b040:	10802034 	orhi	r2,r2,128
1000b044:	01000e04 	movi	r4,56
1000b048:	20c09416 	blt	r4,r3,1000b29c <__adddf3+0x37c>
1000b04c:	010007c4 	movi	r4,31
1000b050:	20c0b716 	blt	r4,r3,1000b330 <__adddf3+0x410>
1000b054:	01000804 	movi	r4,32
1000b058:	20c9c83a 	sub	r4,r4,r3
1000b05c:	30ced83a 	srl	r7,r6,r3
1000b060:	1110983a 	sll	r8,r2,r4
1000b064:	3108983a 	sll	r4,r6,r4
1000b068:	10c6d83a 	srl	r3,r2,r3
1000b06c:	41c4b03a 	or	r2,r8,r7
1000b070:	2008c03a 	cmpne	r4,r4,zero
1000b074:	110cb03a 	or	r6,r2,r4
1000b078:	818dc83a 	sub	r6,r16,r6
1000b07c:	81a1803a 	cmpltu	r16,r16,r6
1000b080:	28cbc83a 	sub	r5,r5,r3
1000b084:	2c0bc83a 	sub	r5,r5,r16
1000b088:	3021883a 	mov	r16,r6
1000b08c:	2880202c 	andhi	r2,r5,128
1000b090:	103fc226 	beq	r2,zero,1000af9c <__alt_data_end+0xf800af9c>
1000b094:	04c02034 	movhi	r19,128
1000b098:	9cffffc4 	addi	r19,r19,-1
1000b09c:	2ce6703a 	and	r19,r5,r19
1000b0a0:	98006c26 	beq	r19,zero,1000b254 <__adddf3+0x334>
1000b0a4:	9809883a 	mov	r4,r19
1000b0a8:	000d5f80 	call	1000d5f8 <__clzsi2>
1000b0ac:	10fffe04 	addi	r3,r2,-8
1000b0b0:	010007c4 	movi	r4,31
1000b0b4:	20c06d16 	blt	r4,r3,1000b26c <__adddf3+0x34c>
1000b0b8:	01000a04 	movi	r4,40
1000b0bc:	2085c83a 	sub	r2,r4,r2
1000b0c0:	8084d83a 	srl	r2,r16,r2
1000b0c4:	98e6983a 	sll	r19,r19,r3
1000b0c8:	80e0983a 	sll	r16,r16,r3
1000b0cc:	14c4b03a 	or	r2,r2,r19
1000b0d0:	1c406a16 	blt	r3,r17,1000b27c <__adddf3+0x35c>
1000b0d4:	1c63c83a 	sub	r17,r3,r17
1000b0d8:	89400044 	addi	r5,r17,1
1000b0dc:	00c007c4 	movi	r3,31
1000b0e0:	19408616 	blt	r3,r5,1000b2fc <__adddf3+0x3dc>
1000b0e4:	1c47c83a 	sub	r3,r3,r17
1000b0e8:	8148d83a 	srl	r4,r16,r5
1000b0ec:	80e0983a 	sll	r16,r16,r3
1000b0f0:	10c6983a 	sll	r3,r2,r3
1000b0f4:	114ad83a 	srl	r5,r2,r5
1000b0f8:	8004c03a 	cmpne	r2,r16,zero
1000b0fc:	20e0b03a 	or	r16,r4,r3
1000b100:	80a0b03a 	or	r16,r16,r2
1000b104:	0023883a 	mov	r17,zero
1000b108:	003fa406 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b10c:	2880202c 	andhi	r2,r5,128
1000b110:	9007883a 	mov	r3,r18
1000b114:	103fad1e 	bne	r2,zero,1000afcc <__alt_data_end+0xf800afcc>
1000b118:	2804977a 	slli	r2,r5,29
1000b11c:	8020d0fa 	srli	r16,r16,3
1000b120:	0101ffc4 	movi	r4,2047
1000b124:	280ad0fa 	srli	r5,r5,3
1000b128:	1404b03a 	or	r2,r2,r16
1000b12c:	8900031e 	bne	r17,r4,1000b13c <__adddf3+0x21c>
1000b130:	1148b03a 	or	r4,r2,r5
1000b134:	20005626 	beq	r4,zero,1000b290 <__adddf3+0x370>
1000b138:	29400234 	orhi	r5,r5,8
1000b13c:	01000434 	movhi	r4,16
1000b140:	213fffc4 	addi	r4,r4,-1
1000b144:	290a703a 	and	r5,r5,r4
1000b148:	003fab06 	br	1000aff8 <__alt_data_end+0xf800aff8>
1000b14c:	890fc83a 	sub	r7,r17,r4
1000b150:	01c0560e 	bge	zero,r7,1000b2ac <__adddf3+0x38c>
1000b154:	20002426 	beq	r4,zero,1000b1e8 <__adddf3+0x2c8>
1000b158:	0101ffc4 	movi	r4,2047
1000b15c:	893f8f26 	beq	r17,r4,1000af9c <__alt_data_end+0xf800af9c>
1000b160:	10802034 	orhi	r2,r2,128
1000b164:	01000e04 	movi	r4,56
1000b168:	21c09d0e 	bge	r4,r7,1000b3e0 <__adddf3+0x4c0>
1000b16c:	118cb03a 	or	r6,r2,r6
1000b170:	300cc03a 	cmpne	r6,r6,zero
1000b174:	000f883a 	mov	r7,zero
1000b178:	340d883a 	add	r6,r6,r16
1000b17c:	3421803a 	cmpltu	r16,r6,r16
1000b180:	394b883a 	add	r5,r7,r5
1000b184:	2c0b883a 	add	r5,r5,r16
1000b188:	3021883a 	mov	r16,r6
1000b18c:	2880202c 	andhi	r2,r5,128
1000b190:	103f8226 	beq	r2,zero,1000af9c <__alt_data_end+0xf800af9c>
1000b194:	8c400044 	addi	r17,r17,1
1000b198:	0081ffc4 	movi	r2,2047
1000b19c:	8880cb26 	beq	r17,r2,1000b4cc <__adddf3+0x5ac>
1000b1a0:	00bfe034 	movhi	r2,65408
1000b1a4:	10bfffc4 	addi	r2,r2,-1
1000b1a8:	288a703a 	and	r5,r5,r2
1000b1ac:	8006d07a 	srli	r3,r16,1
1000b1b0:	280497fa 	slli	r2,r5,31
1000b1b4:	8400004c 	andi	r16,r16,1
1000b1b8:	80e0b03a 	or	r16,r16,r3
1000b1bc:	80a0b03a 	or	r16,r16,r2
1000b1c0:	280ad07a 	srli	r5,r5,1
1000b1c4:	003f7506 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b1c8:	18ffffc4 	addi	r3,r3,-1
1000b1cc:	1800481e 	bne	r3,zero,1000b2f0 <__adddf3+0x3d0>
1000b1d0:	818dc83a 	sub	r6,r16,r6
1000b1d4:	81a1803a 	cmpltu	r16,r16,r6
1000b1d8:	288bc83a 	sub	r5,r5,r2
1000b1dc:	2c0bc83a 	sub	r5,r5,r16
1000b1e0:	3021883a 	mov	r16,r6
1000b1e4:	003fa906 	br	1000b08c <__alt_data_end+0xf800b08c>
1000b1e8:	1188b03a 	or	r4,r2,r6
1000b1ec:	203f6b26 	beq	r4,zero,1000af9c <__alt_data_end+0xf800af9c>
1000b1f0:	39ffffc4 	addi	r7,r7,-1
1000b1f4:	3800931e 	bne	r7,zero,1000b444 <__adddf3+0x524>
1000b1f8:	340d883a 	add	r6,r6,r16
1000b1fc:	3421803a 	cmpltu	r16,r6,r16
1000b200:	114b883a 	add	r5,r2,r5
1000b204:	2c0b883a 	add	r5,r5,r16
1000b208:	3021883a 	mov	r16,r6
1000b20c:	003fdf06 	br	1000b18c <__alt_data_end+0xf800b18c>
1000b210:	1800531e 	bne	r3,zero,1000b360 <__adddf3+0x440>
1000b214:	88c00044 	addi	r3,r17,1
1000b218:	18c1ffcc 	andi	r3,r3,2047
1000b21c:	01000044 	movi	r4,1
1000b220:	20c0a00e 	bge	r4,r3,1000b4a4 <__adddf3+0x584>
1000b224:	8187c83a 	sub	r3,r16,r6
1000b228:	80c9803a 	cmpltu	r4,r16,r3
1000b22c:	28a7c83a 	sub	r19,r5,r2
1000b230:	9927c83a 	sub	r19,r19,r4
1000b234:	9900202c 	andhi	r4,r19,128
1000b238:	20006226 	beq	r4,zero,1000b3c4 <__adddf3+0x4a4>
1000b23c:	3421c83a 	sub	r16,r6,r16
1000b240:	1145c83a 	sub	r2,r2,r5
1000b244:	340d803a 	cmpltu	r6,r6,r16
1000b248:	11a7c83a 	sub	r19,r2,r6
1000b24c:	3825883a 	mov	r18,r7
1000b250:	983f941e 	bne	r19,zero,1000b0a4 <__alt_data_end+0xf800b0a4>
1000b254:	8009883a 	mov	r4,r16
1000b258:	000d5f80 	call	1000d5f8 <__clzsi2>
1000b25c:	10800804 	addi	r2,r2,32
1000b260:	10fffe04 	addi	r3,r2,-8
1000b264:	010007c4 	movi	r4,31
1000b268:	20ff930e 	bge	r4,r3,1000b0b8 <__alt_data_end+0xf800b0b8>
1000b26c:	10bff604 	addi	r2,r2,-40
1000b270:	8084983a 	sll	r2,r16,r2
1000b274:	0021883a 	mov	r16,zero
1000b278:	1c7f960e 	bge	r3,r17,1000b0d4 <__alt_data_end+0xf800b0d4>
1000b27c:	017fe034 	movhi	r5,65408
1000b280:	297fffc4 	addi	r5,r5,-1
1000b284:	88e3c83a 	sub	r17,r17,r3
1000b288:	114a703a 	and	r5,r2,r5
1000b28c:	003f4306 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b290:	000b883a 	mov	r5,zero
1000b294:	0005883a 	mov	r2,zero
1000b298:	003f5706 	br	1000aff8 <__alt_data_end+0xf800aff8>
1000b29c:	118cb03a 	or	r6,r2,r6
1000b2a0:	300cc03a 	cmpne	r6,r6,zero
1000b2a4:	0007883a 	mov	r3,zero
1000b2a8:	003f7306 	br	1000b078 <__alt_data_end+0xf800b078>
1000b2ac:	3800961e 	bne	r7,zero,1000b508 <__adddf3+0x5e8>
1000b2b0:	89000044 	addi	r4,r17,1
1000b2b4:	2201ffcc 	andi	r8,r4,2047
1000b2b8:	01c00044 	movi	r7,1
1000b2bc:	3a00680e 	bge	r7,r8,1000b460 <__adddf3+0x540>
1000b2c0:	01c1ffc4 	movi	r7,2047
1000b2c4:	21c0a726 	beq	r4,r7,1000b564 <__adddf3+0x644>
1000b2c8:	340d883a 	add	r6,r6,r16
1000b2cc:	3421803a 	cmpltu	r16,r6,r16
1000b2d0:	114b883a 	add	r5,r2,r5
1000b2d4:	2c0b883a 	add	r5,r5,r16
1000b2d8:	282097fa 	slli	r16,r5,31
1000b2dc:	300cd07a 	srli	r6,r6,1
1000b2e0:	280ad07a 	srli	r5,r5,1
1000b2e4:	2023883a 	mov	r17,r4
1000b2e8:	81a0b03a 	or	r16,r16,r6
1000b2ec:	003f2b06 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b2f0:	0101ffc4 	movi	r4,2047
1000b2f4:	893f531e 	bne	r17,r4,1000b044 <__alt_data_end+0xf800b044>
1000b2f8:	003f2806 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b2fc:	893ff844 	addi	r4,r17,-31
1000b300:	00c00804 	movi	r3,32
1000b304:	1108d83a 	srl	r4,r2,r4
1000b308:	28c05126 	beq	r5,r3,1000b450 <__adddf3+0x530>
1000b30c:	00c00fc4 	movi	r3,63
1000b310:	1c63c83a 	sub	r17,r3,r17
1000b314:	1444983a 	sll	r2,r2,r17
1000b318:	1420b03a 	or	r16,r2,r16
1000b31c:	8020c03a 	cmpne	r16,r16,zero
1000b320:	8120b03a 	or	r16,r16,r4
1000b324:	000b883a 	mov	r5,zero
1000b328:	0023883a 	mov	r17,zero
1000b32c:	003f1b06 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b330:	193ff804 	addi	r4,r3,-32
1000b334:	01c00804 	movi	r7,32
1000b338:	1108d83a 	srl	r4,r2,r4
1000b33c:	19c04626 	beq	r3,r7,1000b458 <__adddf3+0x538>
1000b340:	01c01004 	movi	r7,64
1000b344:	38c7c83a 	sub	r3,r7,r3
1000b348:	10c4983a 	sll	r2,r2,r3
1000b34c:	118cb03a 	or	r6,r2,r6
1000b350:	300cc03a 	cmpne	r6,r6,zero
1000b354:	310cb03a 	or	r6,r6,r4
1000b358:	0007883a 	mov	r3,zero
1000b35c:	003f4606 	br	1000b078 <__alt_data_end+0xf800b078>
1000b360:	88002b26 	beq	r17,zero,1000b410 <__adddf3+0x4f0>
1000b364:	0201ffc4 	movi	r8,2047
1000b368:	22002f26 	beq	r4,r8,1000b428 <__adddf3+0x508>
1000b36c:	00c7c83a 	sub	r3,zero,r3
1000b370:	29402034 	orhi	r5,r5,128
1000b374:	02000e04 	movi	r8,56
1000b378:	40c07616 	blt	r8,r3,1000b554 <__adddf3+0x634>
1000b37c:	020007c4 	movi	r8,31
1000b380:	40c0d216 	blt	r8,r3,1000b6cc <__adddf3+0x7ac>
1000b384:	02000804 	movi	r8,32
1000b388:	40d1c83a 	sub	r8,r8,r3
1000b38c:	2a14983a 	sll	r10,r5,r8
1000b390:	80d2d83a 	srl	r9,r16,r3
1000b394:	8210983a 	sll	r8,r16,r8
1000b398:	28cad83a 	srl	r5,r5,r3
1000b39c:	5252b03a 	or	r9,r10,r9
1000b3a0:	4006c03a 	cmpne	r3,r8,zero
1000b3a4:	48e0b03a 	or	r16,r9,r3
1000b3a8:	3421c83a 	sub	r16,r6,r16
1000b3ac:	114bc83a 	sub	r5,r2,r5
1000b3b0:	340d803a 	cmpltu	r6,r6,r16
1000b3b4:	298bc83a 	sub	r5,r5,r6
1000b3b8:	2023883a 	mov	r17,r4
1000b3bc:	3825883a 	mov	r18,r7
1000b3c0:	003f3206 	br	1000b08c <__alt_data_end+0xf800b08c>
1000b3c4:	98c4b03a 	or	r2,r19,r3
1000b3c8:	10001c1e 	bne	r2,zero,1000b43c <__adddf3+0x51c>
1000b3cc:	0007883a 	mov	r3,zero
1000b3d0:	000b883a 	mov	r5,zero
1000b3d4:	0021883a 	mov	r16,zero
1000b3d8:	0023883a 	mov	r17,zero
1000b3dc:	003f4e06 	br	1000b118 <__alt_data_end+0xf800b118>
1000b3e0:	010007c4 	movi	r4,31
1000b3e4:	21c03c16 	blt	r4,r7,1000b4d8 <__adddf3+0x5b8>
1000b3e8:	01000804 	movi	r4,32
1000b3ec:	21c9c83a 	sub	r4,r4,r7
1000b3f0:	31d0d83a 	srl	r8,r6,r7
1000b3f4:	1112983a 	sll	r9,r2,r4
1000b3f8:	3108983a 	sll	r4,r6,r4
1000b3fc:	11ced83a 	srl	r7,r2,r7
1000b400:	4a04b03a 	or	r2,r9,r8
1000b404:	2008c03a 	cmpne	r4,r4,zero
1000b408:	110cb03a 	or	r6,r2,r4
1000b40c:	003f5a06 	br	1000b178 <__alt_data_end+0xf800b178>
1000b410:	2c10b03a 	or	r8,r5,r16
1000b414:	40000426 	beq	r8,zero,1000b428 <__adddf3+0x508>
1000b418:	00c6303a 	nor	r3,zero,r3
1000b41c:	183fe226 	beq	r3,zero,1000b3a8 <__alt_data_end+0xf800b3a8>
1000b420:	0201ffc4 	movi	r8,2047
1000b424:	223fd31e 	bne	r4,r8,1000b374 <__alt_data_end+0xf800b374>
1000b428:	100b883a 	mov	r5,r2
1000b42c:	3021883a 	mov	r16,r6
1000b430:	2023883a 	mov	r17,r4
1000b434:	3825883a 	mov	r18,r7
1000b438:	003ed806 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b43c:	1821883a 	mov	r16,r3
1000b440:	003f1706 	br	1000b0a0 <__alt_data_end+0xf800b0a0>
1000b444:	0101ffc4 	movi	r4,2047
1000b448:	893f461e 	bne	r17,r4,1000b164 <__alt_data_end+0xf800b164>
1000b44c:	003ed306 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b450:	0005883a 	mov	r2,zero
1000b454:	003fb006 	br	1000b318 <__alt_data_end+0xf800b318>
1000b458:	0005883a 	mov	r2,zero
1000b45c:	003fbb06 	br	1000b34c <__alt_data_end+0xf800b34c>
1000b460:	2c06b03a 	or	r3,r5,r16
1000b464:	8800841e 	bne	r17,zero,1000b678 <__adddf3+0x758>
1000b468:	1800b226 	beq	r3,zero,1000b734 <__adddf3+0x814>
1000b46c:	1186b03a 	or	r3,r2,r6
1000b470:	183eca26 	beq	r3,zero,1000af9c <__alt_data_end+0xf800af9c>
1000b474:	340d883a 	add	r6,r6,r16
1000b478:	114b883a 	add	r5,r2,r5
1000b47c:	3421803a 	cmpltu	r16,r6,r16
1000b480:	2c0b883a 	add	r5,r5,r16
1000b484:	2880202c 	andhi	r2,r5,128
1000b488:	1000c026 	beq	r2,zero,1000b78c <__adddf3+0x86c>
1000b48c:	00bfe034 	movhi	r2,65408
1000b490:	10bfffc4 	addi	r2,r2,-1
1000b494:	288a703a 	and	r5,r5,r2
1000b498:	3021883a 	mov	r16,r6
1000b49c:	3823883a 	mov	r17,r7
1000b4a0:	003ebe06 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b4a4:	2c06b03a 	or	r3,r5,r16
1000b4a8:	8800221e 	bne	r17,zero,1000b534 <__adddf3+0x614>
1000b4ac:	1800481e 	bne	r3,zero,1000b5d0 <__adddf3+0x6b0>
1000b4b0:	1186b03a 	or	r3,r2,r6
1000b4b4:	18000426 	beq	r3,zero,1000b4c8 <__adddf3+0x5a8>
1000b4b8:	100b883a 	mov	r5,r2
1000b4bc:	3021883a 	mov	r16,r6
1000b4c0:	3825883a 	mov	r18,r7
1000b4c4:	003eb506 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b4c8:	0007883a 	mov	r3,zero
1000b4cc:	000b883a 	mov	r5,zero
1000b4d0:	0021883a 	mov	r16,zero
1000b4d4:	003f1006 	br	1000b118 <__alt_data_end+0xf800b118>
1000b4d8:	393ff804 	addi	r4,r7,-32
1000b4dc:	02000804 	movi	r8,32
1000b4e0:	1108d83a 	srl	r4,r2,r4
1000b4e4:	3a007726 	beq	r7,r8,1000b6c4 <__adddf3+0x7a4>
1000b4e8:	02001004 	movi	r8,64
1000b4ec:	41cfc83a 	sub	r7,r8,r7
1000b4f0:	11c4983a 	sll	r2,r2,r7
1000b4f4:	118cb03a 	or	r6,r2,r6
1000b4f8:	300cc03a 	cmpne	r6,r6,zero
1000b4fc:	310cb03a 	or	r6,r6,r4
1000b500:	000f883a 	mov	r7,zero
1000b504:	003f1c06 	br	1000b178 <__alt_data_end+0xf800b178>
1000b508:	88001a1e 	bne	r17,zero,1000b574 <__adddf3+0x654>
1000b50c:	2c10b03a 	or	r8,r5,r16
1000b510:	40005526 	beq	r8,zero,1000b668 <__adddf3+0x748>
1000b514:	01ce303a 	nor	r7,zero,r7
1000b518:	3800511e 	bne	r7,zero,1000b660 <__adddf3+0x740>
1000b51c:	81a1883a 	add	r16,r16,r6
1000b520:	114b883a 	add	r5,r2,r5
1000b524:	818d803a 	cmpltu	r6,r16,r6
1000b528:	298b883a 	add	r5,r5,r6
1000b52c:	2023883a 	mov	r17,r4
1000b530:	003f1606 	br	1000b18c <__alt_data_end+0xf800b18c>
1000b534:	1800341e 	bne	r3,zero,1000b608 <__adddf3+0x6e8>
1000b538:	1186b03a 	or	r3,r2,r6
1000b53c:	18006f26 	beq	r3,zero,1000b6fc <__adddf3+0x7dc>
1000b540:	100b883a 	mov	r5,r2
1000b544:	3021883a 	mov	r16,r6
1000b548:	3825883a 	mov	r18,r7
1000b54c:	0441ffc4 	movi	r17,2047
1000b550:	003e9206 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b554:	2c20b03a 	or	r16,r5,r16
1000b558:	8020c03a 	cmpne	r16,r16,zero
1000b55c:	000b883a 	mov	r5,zero
1000b560:	003f9106 	br	1000b3a8 <__alt_data_end+0xf800b3a8>
1000b564:	2023883a 	mov	r17,r4
1000b568:	000b883a 	mov	r5,zero
1000b56c:	0021883a 	mov	r16,zero
1000b570:	003ee906 	br	1000b118 <__alt_data_end+0xf800b118>
1000b574:	0201ffc4 	movi	r8,2047
1000b578:	22003b26 	beq	r4,r8,1000b668 <__adddf3+0x748>
1000b57c:	01cfc83a 	sub	r7,zero,r7
1000b580:	29402034 	orhi	r5,r5,128
1000b584:	02000e04 	movi	r8,56
1000b588:	41c06216 	blt	r8,r7,1000b714 <__adddf3+0x7f4>
1000b58c:	020007c4 	movi	r8,31
1000b590:	41c07016 	blt	r8,r7,1000b754 <__adddf3+0x834>
1000b594:	02000804 	movi	r8,32
1000b598:	41d1c83a 	sub	r8,r8,r7
1000b59c:	2a14983a 	sll	r10,r5,r8
1000b5a0:	81d2d83a 	srl	r9,r16,r7
1000b5a4:	8210983a 	sll	r8,r16,r8
1000b5a8:	29cad83a 	srl	r5,r5,r7
1000b5ac:	5252b03a 	or	r9,r10,r9
1000b5b0:	400ec03a 	cmpne	r7,r8,zero
1000b5b4:	49e0b03a 	or	r16,r9,r7
1000b5b8:	81a1883a 	add	r16,r16,r6
1000b5bc:	2885883a 	add	r2,r5,r2
1000b5c0:	818d803a 	cmpltu	r6,r16,r6
1000b5c4:	118b883a 	add	r5,r2,r6
1000b5c8:	2023883a 	mov	r17,r4
1000b5cc:	003eef06 	br	1000b18c <__alt_data_end+0xf800b18c>
1000b5d0:	1186b03a 	or	r3,r2,r6
1000b5d4:	183e7126 	beq	r3,zero,1000af9c <__alt_data_end+0xf800af9c>
1000b5d8:	8187c83a 	sub	r3,r16,r6
1000b5dc:	80d1803a 	cmpltu	r8,r16,r3
1000b5e0:	2889c83a 	sub	r4,r5,r2
1000b5e4:	2209c83a 	sub	r4,r4,r8
1000b5e8:	2200202c 	andhi	r8,r4,128
1000b5ec:	40005426 	beq	r8,zero,1000b740 <__adddf3+0x820>
1000b5f0:	3421c83a 	sub	r16,r6,r16
1000b5f4:	114bc83a 	sub	r5,r2,r5
1000b5f8:	340d803a 	cmpltu	r6,r6,r16
1000b5fc:	298bc83a 	sub	r5,r5,r6
1000b600:	3825883a 	mov	r18,r7
1000b604:	003e6506 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b608:	1186b03a 	or	r3,r2,r6
1000b60c:	18002b26 	beq	r3,zero,1000b6bc <__adddf3+0x79c>
1000b610:	2806d0fa 	srli	r3,r5,3
1000b614:	8020d0fa 	srli	r16,r16,3
1000b618:	280a977a 	slli	r5,r5,29
1000b61c:	1900022c 	andhi	r4,r3,8
1000b620:	2c20b03a 	or	r16,r5,r16
1000b624:	20000826 	beq	r4,zero,1000b648 <__adddf3+0x728>
1000b628:	1008d0fa 	srli	r4,r2,3
1000b62c:	2140022c 	andhi	r5,r4,8
1000b630:	2800051e 	bne	r5,zero,1000b648 <__adddf3+0x728>
1000b634:	300cd0fa 	srli	r6,r6,3
1000b638:	1004977a 	slli	r2,r2,29
1000b63c:	2007883a 	mov	r3,r4
1000b640:	3825883a 	mov	r18,r7
1000b644:	11a0b03a 	or	r16,r2,r6
1000b648:	800ad77a 	srli	r5,r16,29
1000b64c:	180690fa 	slli	r3,r3,3
1000b650:	802090fa 	slli	r16,r16,3
1000b654:	0441ffc4 	movi	r17,2047
1000b658:	28cab03a 	or	r5,r5,r3
1000b65c:	003e4f06 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b660:	0201ffc4 	movi	r8,2047
1000b664:	223fc71e 	bne	r4,r8,1000b584 <__alt_data_end+0xf800b584>
1000b668:	100b883a 	mov	r5,r2
1000b66c:	3021883a 	mov	r16,r6
1000b670:	2023883a 	mov	r17,r4
1000b674:	003e4906 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b678:	18002a26 	beq	r3,zero,1000b724 <__adddf3+0x804>
1000b67c:	1186b03a 	or	r3,r2,r6
1000b680:	18000e26 	beq	r3,zero,1000b6bc <__adddf3+0x79c>
1000b684:	2806d0fa 	srli	r3,r5,3
1000b688:	8020d0fa 	srli	r16,r16,3
1000b68c:	280a977a 	slli	r5,r5,29
1000b690:	1900022c 	andhi	r4,r3,8
1000b694:	2c20b03a 	or	r16,r5,r16
1000b698:	203feb26 	beq	r4,zero,1000b648 <__alt_data_end+0xf800b648>
1000b69c:	1008d0fa 	srli	r4,r2,3
1000b6a0:	2140022c 	andhi	r5,r4,8
1000b6a4:	283fe81e 	bne	r5,zero,1000b648 <__alt_data_end+0xf800b648>
1000b6a8:	300cd0fa 	srli	r6,r6,3
1000b6ac:	1004977a 	slli	r2,r2,29
1000b6b0:	2007883a 	mov	r3,r4
1000b6b4:	11a0b03a 	or	r16,r2,r6
1000b6b8:	003fe306 	br	1000b648 <__alt_data_end+0xf800b648>
1000b6bc:	0441ffc4 	movi	r17,2047
1000b6c0:	003e3606 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b6c4:	0005883a 	mov	r2,zero
1000b6c8:	003f8a06 	br	1000b4f4 <__alt_data_end+0xf800b4f4>
1000b6cc:	1a3ff804 	addi	r8,r3,-32
1000b6d0:	02400804 	movi	r9,32
1000b6d4:	2a10d83a 	srl	r8,r5,r8
1000b6d8:	1a402a26 	beq	r3,r9,1000b784 <__adddf3+0x864>
1000b6dc:	02401004 	movi	r9,64
1000b6e0:	48c7c83a 	sub	r3,r9,r3
1000b6e4:	28ca983a 	sll	r5,r5,r3
1000b6e8:	2c20b03a 	or	r16,r5,r16
1000b6ec:	8020c03a 	cmpne	r16,r16,zero
1000b6f0:	8220b03a 	or	r16,r16,r8
1000b6f4:	000b883a 	mov	r5,zero
1000b6f8:	003f2b06 	br	1000b3a8 <__alt_data_end+0xf800b3a8>
1000b6fc:	0007883a 	mov	r3,zero
1000b700:	01402034 	movhi	r5,128
1000b704:	297fffc4 	addi	r5,r5,-1
1000b708:	043ffe04 	movi	r16,-8
1000b70c:	0441ffc4 	movi	r17,2047
1000b710:	003e8106 	br	1000b118 <__alt_data_end+0xf800b118>
1000b714:	2c20b03a 	or	r16,r5,r16
1000b718:	8020c03a 	cmpne	r16,r16,zero
1000b71c:	000b883a 	mov	r5,zero
1000b720:	003fa506 	br	1000b5b8 <__alt_data_end+0xf800b5b8>
1000b724:	100b883a 	mov	r5,r2
1000b728:	3021883a 	mov	r16,r6
1000b72c:	0441ffc4 	movi	r17,2047
1000b730:	003e1a06 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b734:	100b883a 	mov	r5,r2
1000b738:	3021883a 	mov	r16,r6
1000b73c:	003e1706 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b740:	20c4b03a 	or	r2,r4,r3
1000b744:	103f6026 	beq	r2,zero,1000b4c8 <__alt_data_end+0xf800b4c8>
1000b748:	200b883a 	mov	r5,r4
1000b74c:	1821883a 	mov	r16,r3
1000b750:	003e1206 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b754:	3a3ff804 	addi	r8,r7,-32
1000b758:	02400804 	movi	r9,32
1000b75c:	2a10d83a 	srl	r8,r5,r8
1000b760:	3a400c26 	beq	r7,r9,1000b794 <__adddf3+0x874>
1000b764:	02401004 	movi	r9,64
1000b768:	49cfc83a 	sub	r7,r9,r7
1000b76c:	29ca983a 	sll	r5,r5,r7
1000b770:	2c20b03a 	or	r16,r5,r16
1000b774:	8020c03a 	cmpne	r16,r16,zero
1000b778:	8220b03a 	or	r16,r16,r8
1000b77c:	000b883a 	mov	r5,zero
1000b780:	003f8d06 	br	1000b5b8 <__alt_data_end+0xf800b5b8>
1000b784:	000b883a 	mov	r5,zero
1000b788:	003fd706 	br	1000b6e8 <__alt_data_end+0xf800b6e8>
1000b78c:	3021883a 	mov	r16,r6
1000b790:	003e0206 	br	1000af9c <__alt_data_end+0xf800af9c>
1000b794:	000b883a 	mov	r5,zero
1000b798:	003ff506 	br	1000b770 <__alt_data_end+0xf800b770>

1000b79c <__divdf3>:
1000b79c:	defff004 	addi	sp,sp,-64
1000b7a0:	dd000a15 	stw	r20,40(sp)
1000b7a4:	2828d53a 	srli	r20,r5,20
1000b7a8:	dd800c15 	stw	r22,48(sp)
1000b7ac:	282cd7fa 	srli	r22,r5,31
1000b7b0:	df000e15 	stw	fp,56(sp)
1000b7b4:	dcc00915 	stw	r19,36(sp)
1000b7b8:	dc800815 	stw	r18,32(sp)
1000b7bc:	04c00434 	movhi	r19,16
1000b7c0:	9cffffc4 	addi	r19,r19,-1
1000b7c4:	dfc00f15 	stw	ra,60(sp)
1000b7c8:	ddc00d15 	stw	r23,52(sp)
1000b7cc:	dd400b15 	stw	r21,44(sp)
1000b7d0:	dc400715 	stw	r17,28(sp)
1000b7d4:	dc000615 	stw	r16,24(sp)
1000b7d8:	a501ffcc 	andi	r20,r20,2047
1000b7dc:	2025883a 	mov	r18,r4
1000b7e0:	2ce6703a 	and	r19,r5,r19
1000b7e4:	b7003fcc 	andi	fp,r22,255
1000b7e8:	a0006a26 	beq	r20,zero,1000b994 <__divdf3+0x1f8>
1000b7ec:	0081ffc4 	movi	r2,2047
1000b7f0:	2021883a 	mov	r16,r4
1000b7f4:	a0803726 	beq	r20,r2,1000b8d4 <__divdf3+0x138>
1000b7f8:	98800434 	orhi	r2,r19,16
1000b7fc:	100490fa 	slli	r2,r2,3
1000b800:	2026d77a 	srli	r19,r4,29
1000b804:	202090fa 	slli	r16,r4,3
1000b808:	a53f0044 	addi	r20,r20,-1023
1000b80c:	14e6b03a 	or	r19,r2,r19
1000b810:	002b883a 	mov	r21,zero
1000b814:	0013883a 	mov	r9,zero
1000b818:	3804d53a 	srli	r2,r7,20
1000b81c:	382ed7fa 	srli	r23,r7,31
1000b820:	04400434 	movhi	r17,16
1000b824:	8c7fffc4 	addi	r17,r17,-1
1000b828:	1081ffcc 	andi	r2,r2,2047
1000b82c:	3025883a 	mov	r18,r6
1000b830:	3c62703a 	and	r17,r7,r17
1000b834:	ba803fcc 	andi	r10,r23,255
1000b838:	10007326 	beq	r2,zero,1000ba08 <__divdf3+0x26c>
1000b83c:	0101ffc4 	movi	r4,2047
1000b840:	11006b26 	beq	r2,r4,1000b9f0 <__divdf3+0x254>
1000b844:	89000434 	orhi	r4,r17,16
1000b848:	200890fa 	slli	r4,r4,3
1000b84c:	3022d77a 	srli	r17,r6,29
1000b850:	302490fa 	slli	r18,r6,3
1000b854:	10bf0044 	addi	r2,r2,-1023
1000b858:	2462b03a 	or	r17,r4,r17
1000b85c:	000f883a 	mov	r7,zero
1000b860:	b5caf03a 	xor	r5,r22,r23
1000b864:	3d48b03a 	or	r4,r7,r21
1000b868:	00c003c4 	movi	r3,15
1000b86c:	2811883a 	mov	r8,r5
1000b870:	2d403fcc 	andi	r21,r5,255
1000b874:	19009436 	bltu	r3,r4,1000bac8 <__divdf3+0x32c>
1000b878:	2109883a 	add	r4,r4,r4
1000b87c:	00c40074 	movhi	r3,4097
1000b880:	18ee2504 	addi	r3,r3,-18284
1000b884:	2109883a 	add	r4,r4,r4
1000b888:	20c9883a 	add	r4,r4,r3
1000b88c:	20c00017 	ldw	r3,0(r4)
1000b890:	1800683a 	jmp	r3
1000b894:	1000bac8 	cmpgei	zero,r2,747
1000b898:	1000b930 	cmpltui	zero,r2,740
1000b89c:	1000bab8 	rdprs	zero,r2,746
1000b8a0:	1000b900 	call	11000b90 <_gp+0xfe7094>
1000b8a4:	1000bab8 	rdprs	zero,r2,746
1000b8a8:	1000baa0 	cmpeqi	zero,r2,746
1000b8ac:	1000bab8 	rdprs	zero,r2,746
1000b8b0:	1000b900 	call	11000b90 <_gp+0xfe7094>
1000b8b4:	1000b930 	cmpltui	zero,r2,740
1000b8b8:	1000b930 	cmpltui	zero,r2,740
1000b8bc:	1000baa0 	cmpeqi	zero,r2,746
1000b8c0:	1000b900 	call	11000b90 <_gp+0xfe7094>
1000b8c4:	1000b8f0 	cmpltui	zero,r2,739
1000b8c8:	1000b8f0 	cmpltui	zero,r2,739
1000b8cc:	1000b8f0 	cmpltui	zero,r2,739
1000b8d0:	1000be58 	cmpnei	zero,r2,761
1000b8d4:	9904b03a 	or	r2,r19,r4
1000b8d8:	10006e1e 	bne	r2,zero,1000ba94 <__divdf3+0x2f8>
1000b8dc:	05400204 	movi	r21,8
1000b8e0:	0027883a 	mov	r19,zero
1000b8e4:	0021883a 	mov	r16,zero
1000b8e8:	02400084 	movi	r9,2
1000b8ec:	003fca06 	br	1000b818 <__alt_data_end+0xf800b818>
1000b8f0:	9823883a 	mov	r17,r19
1000b8f4:	8025883a 	mov	r18,r16
1000b8f8:	e015883a 	mov	r10,fp
1000b8fc:	480f883a 	mov	r7,r9
1000b900:	00800084 	movi	r2,2
1000b904:	38800926 	beq	r7,r2,1000b92c <__divdf3+0x190>
1000b908:	008000c4 	movi	r2,3
1000b90c:	38820226 	beq	r7,r2,1000c118 <__divdf3+0x97c>
1000b910:	00800044 	movi	r2,1
1000b914:	3881b81e 	bne	r7,r2,1000bff8 <__divdf3+0x85c>
1000b918:	5011883a 	mov	r8,r10
1000b91c:	0005883a 	mov	r2,zero
1000b920:	0027883a 	mov	r19,zero
1000b924:	0021883a 	mov	r16,zero
1000b928:	00000506 	br	1000b940 <__divdf3+0x1a4>
1000b92c:	502b883a 	mov	r21,r10
1000b930:	aa00004c 	andi	r8,r21,1
1000b934:	0081ffc4 	movi	r2,2047
1000b938:	0027883a 	mov	r19,zero
1000b93c:	0021883a 	mov	r16,zero
1000b940:	1004953a 	slli	r2,r2,20
1000b944:	42003fcc 	andi	r8,r8,255
1000b948:	401097fa 	slli	r8,r8,31
1000b94c:	00c00434 	movhi	r3,16
1000b950:	18ffffc4 	addi	r3,r3,-1
1000b954:	98e6703a 	and	r19,r19,r3
1000b958:	9886b03a 	or	r3,r19,r2
1000b95c:	1a06b03a 	or	r3,r3,r8
1000b960:	8005883a 	mov	r2,r16
1000b964:	dfc00f17 	ldw	ra,60(sp)
1000b968:	df000e17 	ldw	fp,56(sp)
1000b96c:	ddc00d17 	ldw	r23,52(sp)
1000b970:	dd800c17 	ldw	r22,48(sp)
1000b974:	dd400b17 	ldw	r21,44(sp)
1000b978:	dd000a17 	ldw	r20,40(sp)
1000b97c:	dcc00917 	ldw	r19,36(sp)
1000b980:	dc800817 	ldw	r18,32(sp)
1000b984:	dc400717 	ldw	r17,28(sp)
1000b988:	dc000617 	ldw	r16,24(sp)
1000b98c:	dec01004 	addi	sp,sp,64
1000b990:	f800283a 	ret
1000b994:	9904b03a 	or	r2,r19,r4
1000b998:	10003926 	beq	r2,zero,1000ba80 <__divdf3+0x2e4>
1000b99c:	98015326 	beq	r19,zero,1000beec <__divdf3+0x750>
1000b9a0:	9809883a 	mov	r4,r19
1000b9a4:	d9800215 	stw	r6,8(sp)
1000b9a8:	d9c00515 	stw	r7,20(sp)
1000b9ac:	000d5f80 	call	1000d5f8 <__clzsi2>
1000b9b0:	d9800217 	ldw	r6,8(sp)
1000b9b4:	d9c00517 	ldw	r7,20(sp)
1000b9b8:	00c009c4 	movi	r3,39
1000b9bc:	18814716 	blt	r3,r2,1000bedc <__divdf3+0x740>
1000b9c0:	01400a04 	movi	r5,40
1000b9c4:	143ffe04 	addi	r16,r2,-8
1000b9c8:	288bc83a 	sub	r5,r5,r2
1000b9cc:	9c26983a 	sll	r19,r19,r16
1000b9d0:	914ad83a 	srl	r5,r18,r5
1000b9d4:	9420983a 	sll	r16,r18,r16
1000b9d8:	2ce6b03a 	or	r19,r5,r19
1000b9dc:	053f0344 	movi	r20,-1011
1000b9e0:	a0a9c83a 	sub	r20,r20,r2
1000b9e4:	002b883a 	mov	r21,zero
1000b9e8:	0013883a 	mov	r9,zero
1000b9ec:	003f8a06 	br	1000b818 <__alt_data_end+0xf800b818>
1000b9f0:	8988b03a 	or	r4,r17,r6
1000b9f4:	2000201e 	bne	r4,zero,1000ba78 <__divdf3+0x2dc>
1000b9f8:	0023883a 	mov	r17,zero
1000b9fc:	0025883a 	mov	r18,zero
1000ba00:	01c00084 	movi	r7,2
1000ba04:	003f9606 	br	1000b860 <__alt_data_end+0xf800b860>
1000ba08:	8988b03a 	or	r4,r17,r6
1000ba0c:	20001626 	beq	r4,zero,1000ba68 <__divdf3+0x2cc>
1000ba10:	88012826 	beq	r17,zero,1000beb4 <__divdf3+0x718>
1000ba14:	8809883a 	mov	r4,r17
1000ba18:	d9800215 	stw	r6,8(sp)
1000ba1c:	da400315 	stw	r9,12(sp)
1000ba20:	da800415 	stw	r10,16(sp)
1000ba24:	000d5f80 	call	1000d5f8 <__clzsi2>
1000ba28:	d9800217 	ldw	r6,8(sp)
1000ba2c:	da400317 	ldw	r9,12(sp)
1000ba30:	da800417 	ldw	r10,16(sp)
1000ba34:	010009c4 	movi	r4,39
1000ba38:	20811a16 	blt	r4,r2,1000bea4 <__divdf3+0x708>
1000ba3c:	01000a04 	movi	r4,40
1000ba40:	14bffe04 	addi	r18,r2,-8
1000ba44:	2089c83a 	sub	r4,r4,r2
1000ba48:	8ca2983a 	sll	r17,r17,r18
1000ba4c:	3108d83a 	srl	r4,r6,r4
1000ba50:	34a4983a 	sll	r18,r6,r18
1000ba54:	2462b03a 	or	r17,r4,r17
1000ba58:	013f0344 	movi	r4,-1011
1000ba5c:	2085c83a 	sub	r2,r4,r2
1000ba60:	000f883a 	mov	r7,zero
1000ba64:	003f7e06 	br	1000b860 <__alt_data_end+0xf800b860>
1000ba68:	0023883a 	mov	r17,zero
1000ba6c:	0025883a 	mov	r18,zero
1000ba70:	01c00044 	movi	r7,1
1000ba74:	003f7a06 	br	1000b860 <__alt_data_end+0xf800b860>
1000ba78:	01c000c4 	movi	r7,3
1000ba7c:	003f7806 	br	1000b860 <__alt_data_end+0xf800b860>
1000ba80:	05400104 	movi	r21,4
1000ba84:	0027883a 	mov	r19,zero
1000ba88:	0021883a 	mov	r16,zero
1000ba8c:	02400044 	movi	r9,1
1000ba90:	003f6106 	br	1000b818 <__alt_data_end+0xf800b818>
1000ba94:	05400304 	movi	r21,12
1000ba98:	024000c4 	movi	r9,3
1000ba9c:	003f5e06 	br	1000b818 <__alt_data_end+0xf800b818>
1000baa0:	0011883a 	mov	r8,zero
1000baa4:	04c00434 	movhi	r19,16
1000baa8:	9cffffc4 	addi	r19,r19,-1
1000baac:	043fffc4 	movi	r16,-1
1000bab0:	0081ffc4 	movi	r2,2047
1000bab4:	003fa206 	br	1000b940 <__alt_data_end+0xf800b940>
1000bab8:	0005883a 	mov	r2,zero
1000babc:	0027883a 	mov	r19,zero
1000bac0:	0021883a 	mov	r16,zero
1000bac4:	003f9e06 	br	1000b940 <__alt_data_end+0xf800b940>
1000bac8:	a085c83a 	sub	r2,r20,r2
1000bacc:	d8800115 	stw	r2,4(sp)
1000bad0:	8cc11b36 	bltu	r17,r19,1000bf40 <__divdf3+0x7a4>
1000bad4:	9c411926 	beq	r19,r17,1000bf3c <__divdf3+0x7a0>
1000bad8:	d8c00117 	ldw	r3,4(sp)
1000badc:	002d883a 	mov	r22,zero
1000bae0:	18ffffc4 	addi	r3,r3,-1
1000bae4:	d8c00115 	stw	r3,4(sp)
1000bae8:	9006d63a 	srli	r3,r18,24
1000baec:	8822923a 	slli	r17,r17,8
1000baf0:	9024923a 	slli	r18,r18,8
1000baf4:	9809883a 	mov	r4,r19
1000baf8:	1c6eb03a 	or	r23,r3,r17
1000bafc:	b828d43a 	srli	r20,r23,16
1000bb00:	dc800015 	stw	r18,0(sp)
1000bb04:	bcbfffcc 	andi	r18,r23,65535
1000bb08:	a00b883a 	mov	r5,r20
1000bb0c:	000aee80 	call	1000aee8 <__udivsi3>
1000bb10:	1009883a 	mov	r4,r2
1000bb14:	900b883a 	mov	r5,r18
1000bb18:	1039883a 	mov	fp,r2
1000bb1c:	000aef80 	call	1000aef8 <__mulsi3>
1000bb20:	9809883a 	mov	r4,r19
1000bb24:	a00b883a 	mov	r5,r20
1000bb28:	1023883a 	mov	r17,r2
1000bb2c:	000aef00 	call	1000aef0 <__umodsi3>
1000bb30:	1004943a 	slli	r2,r2,16
1000bb34:	8008d43a 	srli	r4,r16,16
1000bb38:	110ab03a 	or	r5,r2,r4
1000bb3c:	2c40062e 	bgeu	r5,r17,1000bb58 <__divdf3+0x3bc>
1000bb40:	2dcb883a 	add	r5,r5,r23
1000bb44:	e0bfffc4 	addi	r2,fp,-1
1000bb48:	2dc11136 	bltu	r5,r23,1000bf90 <__divdf3+0x7f4>
1000bb4c:	2c41102e 	bgeu	r5,r17,1000bf90 <__divdf3+0x7f4>
1000bb50:	e73fff84 	addi	fp,fp,-2
1000bb54:	2dcb883a 	add	r5,r5,r23
1000bb58:	2c67c83a 	sub	r19,r5,r17
1000bb5c:	9809883a 	mov	r4,r19
1000bb60:	a00b883a 	mov	r5,r20
1000bb64:	000aee80 	call	1000aee8 <__udivsi3>
1000bb68:	1009883a 	mov	r4,r2
1000bb6c:	900b883a 	mov	r5,r18
1000bb70:	1023883a 	mov	r17,r2
1000bb74:	000aef80 	call	1000aef8 <__mulsi3>
1000bb78:	9809883a 	mov	r4,r19
1000bb7c:	a00b883a 	mov	r5,r20
1000bb80:	d8800215 	stw	r2,8(sp)
1000bb84:	000aef00 	call	1000aef0 <__umodsi3>
1000bb88:	1004943a 	slli	r2,r2,16
1000bb8c:	da000217 	ldw	r8,8(sp)
1000bb90:	843fffcc 	andi	r16,r16,65535
1000bb94:	140eb03a 	or	r7,r2,r16
1000bb98:	3a00062e 	bgeu	r7,r8,1000bbb4 <__divdf3+0x418>
1000bb9c:	3dcf883a 	add	r7,r7,r23
1000bba0:	88bfffc4 	addi	r2,r17,-1
1000bba4:	3dc0f836 	bltu	r7,r23,1000bf88 <__divdf3+0x7ec>
1000bba8:	3a00f72e 	bgeu	r7,r8,1000bf88 <__divdf3+0x7ec>
1000bbac:	8c7fff84 	addi	r17,r17,-2
1000bbb0:	3dcf883a 	add	r7,r7,r23
1000bbb4:	e004943a 	slli	r2,fp,16
1000bbb8:	d8c00017 	ldw	r3,0(sp)
1000bbbc:	3a0fc83a 	sub	r7,r7,r8
1000bbc0:	88a2b03a 	or	r17,r17,r2
1000bbc4:	1f3fffcc 	andi	fp,r3,65535
1000bbc8:	8a7fffcc 	andi	r9,r17,65535
1000bbcc:	4809883a 	mov	r4,r9
1000bbd0:	e00b883a 	mov	r5,fp
1000bbd4:	1826d43a 	srli	r19,r3,16
1000bbd8:	d9c00515 	stw	r7,20(sp)
1000bbdc:	da400315 	stw	r9,12(sp)
1000bbe0:	000aef80 	call	1000aef8 <__mulsi3>
1000bbe4:	da400317 	ldw	r9,12(sp)
1000bbe8:	8820d43a 	srli	r16,r17,16
1000bbec:	980b883a 	mov	r5,r19
1000bbf0:	4809883a 	mov	r4,r9
1000bbf4:	d8800215 	stw	r2,8(sp)
1000bbf8:	000aef80 	call	1000aef8 <__mulsi3>
1000bbfc:	8009883a 	mov	r4,r16
1000bc00:	e00b883a 	mov	r5,fp
1000bc04:	d8800415 	stw	r2,16(sp)
1000bc08:	000aef80 	call	1000aef8 <__mulsi3>
1000bc0c:	8009883a 	mov	r4,r16
1000bc10:	980b883a 	mov	r5,r19
1000bc14:	d8800315 	stw	r2,12(sp)
1000bc18:	000aef80 	call	1000aef8 <__mulsi3>
1000bc1c:	da000217 	ldw	r8,8(sp)
1000bc20:	da400317 	ldw	r9,12(sp)
1000bc24:	da800417 	ldw	r10,16(sp)
1000bc28:	100b883a 	mov	r5,r2
1000bc2c:	4004d43a 	srli	r2,r8,16
1000bc30:	4a89883a 	add	r4,r9,r10
1000bc34:	d9c00517 	ldw	r7,20(sp)
1000bc38:	2089883a 	add	r4,r4,r2
1000bc3c:	2240022e 	bgeu	r4,r9,1000bc48 <__divdf3+0x4ac>
1000bc40:	00800074 	movhi	r2,1
1000bc44:	288b883a 	add	r5,r5,r2
1000bc48:	2004d43a 	srli	r2,r4,16
1000bc4c:	2020943a 	slli	r16,r4,16
1000bc50:	423fffcc 	andi	r8,r8,65535
1000bc54:	288b883a 	add	r5,r5,r2
1000bc58:	8221883a 	add	r16,r16,r8
1000bc5c:	3940ab36 	bltu	r7,r5,1000bf0c <__divdf3+0x770>
1000bc60:	3940a926 	beq	r7,r5,1000bf08 <__divdf3+0x76c>
1000bc64:	394bc83a 	sub	r5,r7,r5
1000bc68:	b421c83a 	sub	r16,r22,r16
1000bc6c:	b42d803a 	cmpltu	r22,r22,r16
1000bc70:	2dadc83a 	sub	r22,r5,r22
1000bc74:	b5c0da26 	beq	r22,r23,1000bfe0 <__divdf3+0x844>
1000bc78:	b009883a 	mov	r4,r22
1000bc7c:	a00b883a 	mov	r5,r20
1000bc80:	000aee80 	call	1000aee8 <__udivsi3>
1000bc84:	1009883a 	mov	r4,r2
1000bc88:	900b883a 	mov	r5,r18
1000bc8c:	d8800215 	stw	r2,8(sp)
1000bc90:	000aef80 	call	1000aef8 <__mulsi3>
1000bc94:	b009883a 	mov	r4,r22
1000bc98:	a00b883a 	mov	r5,r20
1000bc9c:	d8800515 	stw	r2,20(sp)
1000bca0:	000aef00 	call	1000aef0 <__umodsi3>
1000bca4:	1004943a 	slli	r2,r2,16
1000bca8:	8008d43a 	srli	r4,r16,16
1000bcac:	d9c00517 	ldw	r7,20(sp)
1000bcb0:	da000217 	ldw	r8,8(sp)
1000bcb4:	110ab03a 	or	r5,r2,r4
1000bcb8:	29c0062e 	bgeu	r5,r7,1000bcd4 <__divdf3+0x538>
1000bcbc:	2dcb883a 	add	r5,r5,r23
1000bcc0:	40bfffc4 	addi	r2,r8,-1
1000bcc4:	2dc0ca36 	bltu	r5,r23,1000bff0 <__divdf3+0x854>
1000bcc8:	29c0c92e 	bgeu	r5,r7,1000bff0 <__divdf3+0x854>
1000bccc:	423fff84 	addi	r8,r8,-2
1000bcd0:	2dcb883a 	add	r5,r5,r23
1000bcd4:	29cfc83a 	sub	r7,r5,r7
1000bcd8:	3809883a 	mov	r4,r7
1000bcdc:	a00b883a 	mov	r5,r20
1000bce0:	da000215 	stw	r8,8(sp)
1000bce4:	d9c00515 	stw	r7,20(sp)
1000bce8:	000aee80 	call	1000aee8 <__udivsi3>
1000bcec:	900b883a 	mov	r5,r18
1000bcf0:	1009883a 	mov	r4,r2
1000bcf4:	102d883a 	mov	r22,r2
1000bcf8:	000aef80 	call	1000aef8 <__mulsi3>
1000bcfc:	d9c00517 	ldw	r7,20(sp)
1000bd00:	a00b883a 	mov	r5,r20
1000bd04:	1025883a 	mov	r18,r2
1000bd08:	3809883a 	mov	r4,r7
1000bd0c:	000aef00 	call	1000aef0 <__umodsi3>
1000bd10:	1004943a 	slli	r2,r2,16
1000bd14:	843fffcc 	andi	r16,r16,65535
1000bd18:	da000217 	ldw	r8,8(sp)
1000bd1c:	140eb03a 	or	r7,r2,r16
1000bd20:	3c80062e 	bgeu	r7,r18,1000bd3c <__divdf3+0x5a0>
1000bd24:	3dcf883a 	add	r7,r7,r23
1000bd28:	b0bfffc4 	addi	r2,r22,-1
1000bd2c:	3dc0ae36 	bltu	r7,r23,1000bfe8 <__divdf3+0x84c>
1000bd30:	3c80ad2e 	bgeu	r7,r18,1000bfe8 <__divdf3+0x84c>
1000bd34:	b5bfff84 	addi	r22,r22,-2
1000bd38:	3dcf883a 	add	r7,r7,r23
1000bd3c:	4010943a 	slli	r8,r8,16
1000bd40:	3ca9c83a 	sub	r20,r7,r18
1000bd44:	e00b883a 	mov	r5,fp
1000bd48:	b224b03a 	or	r18,r22,r8
1000bd4c:	91ffffcc 	andi	r7,r18,65535
1000bd50:	3809883a 	mov	r4,r7
1000bd54:	d9c00515 	stw	r7,20(sp)
1000bd58:	000aef80 	call	1000aef8 <__mulsi3>
1000bd5c:	d9c00517 	ldw	r7,20(sp)
1000bd60:	9020d43a 	srli	r16,r18,16
1000bd64:	980b883a 	mov	r5,r19
1000bd68:	3809883a 	mov	r4,r7
1000bd6c:	102d883a 	mov	r22,r2
1000bd70:	000aef80 	call	1000aef8 <__mulsi3>
1000bd74:	e00b883a 	mov	r5,fp
1000bd78:	8009883a 	mov	r4,r16
1000bd7c:	d8800515 	stw	r2,20(sp)
1000bd80:	000aef80 	call	1000aef8 <__mulsi3>
1000bd84:	8009883a 	mov	r4,r16
1000bd88:	980b883a 	mov	r5,r19
1000bd8c:	1039883a 	mov	fp,r2
1000bd90:	000aef80 	call	1000aef8 <__mulsi3>
1000bd94:	d9c00517 	ldw	r7,20(sp)
1000bd98:	100b883a 	mov	r5,r2
1000bd9c:	b004d43a 	srli	r2,r22,16
1000bda0:	e1c9883a 	add	r4,fp,r7
1000bda4:	2089883a 	add	r4,r4,r2
1000bda8:	2700022e 	bgeu	r4,fp,1000bdb4 <__divdf3+0x618>
1000bdac:	00800074 	movhi	r2,1
1000bdb0:	288b883a 	add	r5,r5,r2
1000bdb4:	2004d43a 	srli	r2,r4,16
1000bdb8:	2008943a 	slli	r4,r4,16
1000bdbc:	b5bfffcc 	andi	r22,r22,65535
1000bdc0:	288b883a 	add	r5,r5,r2
1000bdc4:	25ad883a 	add	r22,r4,r22
1000bdc8:	a140632e 	bgeu	r20,r5,1000bf58 <__divdf3+0x7bc>
1000bdcc:	a5e9883a 	add	r20,r20,r23
1000bdd0:	90bfffc4 	addi	r2,r18,-1
1000bdd4:	a5c0702e 	bgeu	r20,r23,1000bf98 <__divdf3+0x7fc>
1000bdd8:	1025883a 	mov	r18,r2
1000bddc:	a1406126 	beq	r20,r5,1000bf64 <__divdf3+0x7c8>
1000bde0:	94800054 	ori	r18,r18,1
1000bde4:	d8c00117 	ldw	r3,4(sp)
1000bde8:	1880ffc4 	addi	r2,r3,1023
1000bdec:	0080720e 	bge	zero,r2,1000bfb8 <__divdf3+0x81c>
1000bdf0:	90c001cc 	andi	r3,r18,7
1000bdf4:	18000726 	beq	r3,zero,1000be14 <__divdf3+0x678>
1000bdf8:	910003cc 	andi	r4,r18,15
1000bdfc:	00c00104 	movi	r3,4
1000be00:	20c00426 	beq	r4,r3,1000be14 <__divdf3+0x678>
1000be04:	90c7883a 	add	r3,r18,r3
1000be08:	1ca5803a 	cmpltu	r18,r3,r18
1000be0c:	8ca3883a 	add	r17,r17,r18
1000be10:	1825883a 	mov	r18,r3
1000be14:	88c0402c 	andhi	r3,r17,256
1000be18:	18000526 	beq	r3,zero,1000be30 <__divdf3+0x694>
1000be1c:	d8c00117 	ldw	r3,4(sp)
1000be20:	00bfc034 	movhi	r2,65280
1000be24:	10bfffc4 	addi	r2,r2,-1
1000be28:	88a2703a 	and	r17,r17,r2
1000be2c:	18810004 	addi	r2,r3,1024
1000be30:	00c1ff84 	movi	r3,2046
1000be34:	18bebe16 	blt	r3,r2,1000b930 <__alt_data_end+0xf800b930>
1000be38:	8820977a 	slli	r16,r17,29
1000be3c:	9024d0fa 	srli	r18,r18,3
1000be40:	8822927a 	slli	r17,r17,9
1000be44:	1081ffcc 	andi	r2,r2,2047
1000be48:	84a0b03a 	or	r16,r16,r18
1000be4c:	8826d33a 	srli	r19,r17,12
1000be50:	aa00004c 	andi	r8,r21,1
1000be54:	003eba06 	br	1000b940 <__alt_data_end+0xf800b940>
1000be58:	9880022c 	andhi	r2,r19,8
1000be5c:	10000a26 	beq	r2,zero,1000be88 <__divdf3+0x6ec>
1000be60:	8880022c 	andhi	r2,r17,8
1000be64:	1000081e 	bne	r2,zero,1000be88 <__divdf3+0x6ec>
1000be68:	00800434 	movhi	r2,16
1000be6c:	10bfffc4 	addi	r2,r2,-1
1000be70:	8cc00234 	orhi	r19,r17,8
1000be74:	98a6703a 	and	r19,r19,r2
1000be78:	b811883a 	mov	r8,r23
1000be7c:	9021883a 	mov	r16,r18
1000be80:	0081ffc4 	movi	r2,2047
1000be84:	003eae06 	br	1000b940 <__alt_data_end+0xf800b940>
1000be88:	00800434 	movhi	r2,16
1000be8c:	10bfffc4 	addi	r2,r2,-1
1000be90:	9cc00234 	orhi	r19,r19,8
1000be94:	98a6703a 	and	r19,r19,r2
1000be98:	b011883a 	mov	r8,r22
1000be9c:	0081ffc4 	movi	r2,2047
1000bea0:	003ea706 	br	1000b940 <__alt_data_end+0xf800b940>
1000bea4:	147ff604 	addi	r17,r2,-40
1000bea8:	3462983a 	sll	r17,r6,r17
1000beac:	0025883a 	mov	r18,zero
1000beb0:	003ee906 	br	1000ba58 <__alt_data_end+0xf800ba58>
1000beb4:	3009883a 	mov	r4,r6
1000beb8:	d9800215 	stw	r6,8(sp)
1000bebc:	da400315 	stw	r9,12(sp)
1000bec0:	da800415 	stw	r10,16(sp)
1000bec4:	000d5f80 	call	1000d5f8 <__clzsi2>
1000bec8:	10800804 	addi	r2,r2,32
1000becc:	da800417 	ldw	r10,16(sp)
1000bed0:	da400317 	ldw	r9,12(sp)
1000bed4:	d9800217 	ldw	r6,8(sp)
1000bed8:	003ed606 	br	1000ba34 <__alt_data_end+0xf800ba34>
1000bedc:	14fff604 	addi	r19,r2,-40
1000bee0:	94e6983a 	sll	r19,r18,r19
1000bee4:	0021883a 	mov	r16,zero
1000bee8:	003ebc06 	br	1000b9dc <__alt_data_end+0xf800b9dc>
1000beec:	d9800215 	stw	r6,8(sp)
1000bef0:	d9c00515 	stw	r7,20(sp)
1000bef4:	000d5f80 	call	1000d5f8 <__clzsi2>
1000bef8:	10800804 	addi	r2,r2,32
1000befc:	d9c00517 	ldw	r7,20(sp)
1000bf00:	d9800217 	ldw	r6,8(sp)
1000bf04:	003eac06 	br	1000b9b8 <__alt_data_end+0xf800b9b8>
1000bf08:	b400292e 	bgeu	r22,r16,1000bfb0 <__divdf3+0x814>
1000bf0c:	d8c00017 	ldw	r3,0(sp)
1000bf10:	b0ed883a 	add	r22,r22,r3
1000bf14:	b0c5803a 	cmpltu	r2,r22,r3
1000bf18:	15c5883a 	add	r2,r2,r23
1000bf1c:	11cf883a 	add	r7,r2,r7
1000bf20:	88bfffc4 	addi	r2,r17,-1
1000bf24:	b9c0122e 	bgeu	r23,r7,1000bf70 <__divdf3+0x7d4>
1000bf28:	39405036 	bltu	r7,r5,1000c06c <__divdf3+0x8d0>
1000bf2c:	29c01e26 	beq	r5,r7,1000bfa8 <__divdf3+0x80c>
1000bf30:	394bc83a 	sub	r5,r7,r5
1000bf34:	1023883a 	mov	r17,r2
1000bf38:	003f4b06 	br	1000bc68 <__alt_data_end+0xf800bc68>
1000bf3c:	943ee62e 	bgeu	r18,r16,1000bad8 <__alt_data_end+0xf800bad8>
1000bf40:	980497fa 	slli	r2,r19,31
1000bf44:	8006d07a 	srli	r3,r16,1
1000bf48:	802c97fa 	slli	r22,r16,31
1000bf4c:	9826d07a 	srli	r19,r19,1
1000bf50:	18a0b03a 	or	r16,r3,r2
1000bf54:	003ee406 	br	1000bae8 <__alt_data_end+0xf800bae8>
1000bf58:	a17fa11e 	bne	r20,r5,1000bde0 <__alt_data_end+0xf800bde0>
1000bf5c:	b03f9b1e 	bne	r22,zero,1000bdcc <__alt_data_end+0xf800bdcc>
1000bf60:	d8000015 	stw	zero,0(sp)
1000bf64:	d8c00017 	ldw	r3,0(sp)
1000bf68:	1dbf9d1e 	bne	r3,r22,1000bde0 <__alt_data_end+0xf800bde0>
1000bf6c:	003f9d06 	br	1000bde4 <__alt_data_end+0xf800bde4>
1000bf70:	3dffef1e 	bne	r7,r23,1000bf30 <__alt_data_end+0xf800bf30>
1000bf74:	d8c00017 	ldw	r3,0(sp)
1000bf78:	b0ffeb2e 	bgeu	r22,r3,1000bf28 <__alt_data_end+0xf800bf28>
1000bf7c:	b94bc83a 	sub	r5,r23,r5
1000bf80:	1023883a 	mov	r17,r2
1000bf84:	003f3806 	br	1000bc68 <__alt_data_end+0xf800bc68>
1000bf88:	1023883a 	mov	r17,r2
1000bf8c:	003f0906 	br	1000bbb4 <__alt_data_end+0xf800bbb4>
1000bf90:	1039883a 	mov	fp,r2
1000bf94:	003ef006 	br	1000bb58 <__alt_data_end+0xf800bb58>
1000bf98:	a1403b36 	bltu	r20,r5,1000c088 <__divdf3+0x8ec>
1000bf9c:	2d005826 	beq	r5,r20,1000c100 <__divdf3+0x964>
1000bfa0:	1025883a 	mov	r18,r2
1000bfa4:	003f8e06 	br	1000bde0 <__alt_data_end+0xf800bde0>
1000bfa8:	b4003036 	bltu	r22,r16,1000c06c <__divdf3+0x8d0>
1000bfac:	1023883a 	mov	r17,r2
1000bfb0:	000b883a 	mov	r5,zero
1000bfb4:	003f2c06 	br	1000bc68 <__alt_data_end+0xf800bc68>
1000bfb8:	d8c00117 	ldw	r3,4(sp)
1000bfbc:	00bf0084 	movi	r2,-1022
1000bfc0:	10c5c83a 	sub	r2,r2,r3
1000bfc4:	00c00e04 	movi	r3,56
1000bfc8:	18800d0e 	bge	r3,r2,1000c000 <__divdf3+0x864>
1000bfcc:	aa00004c 	andi	r8,r21,1
1000bfd0:	0005883a 	mov	r2,zero
1000bfd4:	0027883a 	mov	r19,zero
1000bfd8:	0021883a 	mov	r16,zero
1000bfdc:	003e5806 	br	1000b940 <__alt_data_end+0xf800b940>
1000bfe0:	04bfffc4 	movi	r18,-1
1000bfe4:	003f7f06 	br	1000bde4 <__alt_data_end+0xf800bde4>
1000bfe8:	102d883a 	mov	r22,r2
1000bfec:	003f5306 	br	1000bd3c <__alt_data_end+0xf800bd3c>
1000bff0:	1011883a 	mov	r8,r2
1000bff4:	003f3706 	br	1000bcd4 <__alt_data_end+0xf800bcd4>
1000bff8:	502b883a 	mov	r21,r10
1000bffc:	003f7906 	br	1000bde4 <__alt_data_end+0xf800bde4>
1000c000:	00c007c4 	movi	r3,31
1000c004:	18802816 	blt	r3,r2,1000c0a8 <__divdf3+0x90c>
1000c008:	d9000117 	ldw	r4,4(sp)
1000c00c:	908ad83a 	srl	r5,r18,r2
1000c010:	8884d83a 	srl	r2,r17,r2
1000c014:	20c10784 	addi	r3,r4,1054
1000c018:	88c8983a 	sll	r4,r17,r3
1000c01c:	90c6983a 	sll	r3,r18,r3
1000c020:	2908b03a 	or	r4,r5,r4
1000c024:	1806c03a 	cmpne	r3,r3,zero
1000c028:	20c6b03a 	or	r3,r4,r3
1000c02c:	190001cc 	andi	r4,r3,7
1000c030:	20000726 	beq	r4,zero,1000c050 <__divdf3+0x8b4>
1000c034:	194003cc 	andi	r5,r3,15
1000c038:	01000104 	movi	r4,4
1000c03c:	29000426 	beq	r5,r4,1000c050 <__divdf3+0x8b4>
1000c040:	1909883a 	add	r4,r3,r4
1000c044:	20c7803a 	cmpltu	r3,r4,r3
1000c048:	10c5883a 	add	r2,r2,r3
1000c04c:	2007883a 	mov	r3,r4
1000c050:	1100202c 	andhi	r4,r2,128
1000c054:	20002226 	beq	r4,zero,1000c0e0 <__divdf3+0x944>
1000c058:	aa00004c 	andi	r8,r21,1
1000c05c:	00800044 	movi	r2,1
1000c060:	0027883a 	mov	r19,zero
1000c064:	0021883a 	mov	r16,zero
1000c068:	003e3506 	br	1000b940 <__alt_data_end+0xf800b940>
1000c06c:	d8c00017 	ldw	r3,0(sp)
1000c070:	8c7fff84 	addi	r17,r17,-2
1000c074:	b0ed883a 	add	r22,r22,r3
1000c078:	b0c5803a 	cmpltu	r2,r22,r3
1000c07c:	15c5883a 	add	r2,r2,r23
1000c080:	11cf883a 	add	r7,r2,r7
1000c084:	003ef706 	br	1000bc64 <__alt_data_end+0xf800bc64>
1000c088:	d8c00017 	ldw	r3,0(sp)
1000c08c:	18c9883a 	add	r4,r3,r3
1000c090:	20c5803a 	cmpltu	r2,r4,r3
1000c094:	15c7883a 	add	r3,r2,r23
1000c098:	a0e9883a 	add	r20,r20,r3
1000c09c:	90bfff84 	addi	r2,r18,-2
1000c0a0:	d9000015 	stw	r4,0(sp)
1000c0a4:	003f4c06 	br	1000bdd8 <__alt_data_end+0xf800bdd8>
1000c0a8:	d9000117 	ldw	r4,4(sp)
1000c0ac:	00fef884 	movi	r3,-1054
1000c0b0:	1907c83a 	sub	r3,r3,r4
1000c0b4:	01000804 	movi	r4,32
1000c0b8:	88c6d83a 	srl	r3,r17,r3
1000c0bc:	11001426 	beq	r2,r4,1000c110 <__divdf3+0x974>
1000c0c0:	d9000117 	ldw	r4,4(sp)
1000c0c4:	20810f84 	addi	r2,r4,1086
1000c0c8:	8884983a 	sll	r2,r17,r2
1000c0cc:	1484b03a 	or	r2,r2,r18
1000c0d0:	1004c03a 	cmpne	r2,r2,zero
1000c0d4:	10c6b03a 	or	r3,r2,r3
1000c0d8:	0005883a 	mov	r2,zero
1000c0dc:	003fd306 	br	1000c02c <__alt_data_end+0xf800c02c>
1000c0e0:	1020977a 	slli	r16,r2,29
1000c0e4:	1806d0fa 	srli	r3,r3,3
1000c0e8:	1004927a 	slli	r2,r2,9
1000c0ec:	aa00004c 	andi	r8,r21,1
1000c0f0:	80e0b03a 	or	r16,r16,r3
1000c0f4:	1026d33a 	srli	r19,r2,12
1000c0f8:	0005883a 	mov	r2,zero
1000c0fc:	003e1006 	br	1000b940 <__alt_data_end+0xf800b940>
1000c100:	d8c00017 	ldw	r3,0(sp)
1000c104:	1dbfe036 	bltu	r3,r22,1000c088 <__alt_data_end+0xf800c088>
1000c108:	1025883a 	mov	r18,r2
1000c10c:	003f9506 	br	1000bf64 <__alt_data_end+0xf800bf64>
1000c110:	0005883a 	mov	r2,zero
1000c114:	003fed06 	br	1000c0cc <__alt_data_end+0xf800c0cc>
1000c118:	00800434 	movhi	r2,16
1000c11c:	10bfffc4 	addi	r2,r2,-1
1000c120:	8cc00234 	orhi	r19,r17,8
1000c124:	98a6703a 	and	r19,r19,r2
1000c128:	5011883a 	mov	r8,r10
1000c12c:	9021883a 	mov	r16,r18
1000c130:	0081ffc4 	movi	r2,2047
1000c134:	003e0206 	br	1000b940 <__alt_data_end+0xf800b940>

1000c138 <__eqdf2>:
1000c138:	2806d53a 	srli	r3,r5,20
1000c13c:	3810d53a 	srli	r8,r7,20
1000c140:	00800434 	movhi	r2,16
1000c144:	10bfffc4 	addi	r2,r2,-1
1000c148:	18c1ffcc 	andi	r3,r3,2047
1000c14c:	0241ffc4 	movi	r9,2047
1000c150:	2894703a 	and	r10,r5,r2
1000c154:	4201ffcc 	andi	r8,r8,2047
1000c158:	3884703a 	and	r2,r7,r2
1000c15c:	280ad7fa 	srli	r5,r5,31
1000c160:	380ed7fa 	srli	r7,r7,31
1000c164:	1a400f26 	beq	r3,r9,1000c1a4 <__eqdf2+0x6c>
1000c168:	0241ffc4 	movi	r9,2047
1000c16c:	42400326 	beq	r8,r9,1000c17c <__eqdf2+0x44>
1000c170:	1a000526 	beq	r3,r8,1000c188 <__eqdf2+0x50>
1000c174:	00800044 	movi	r2,1
1000c178:	f800283a 	ret
1000c17c:	1192b03a 	or	r9,r2,r6
1000c180:	483ffc1e 	bne	r9,zero,1000c174 <__alt_data_end+0xf800c174>
1000c184:	1a3ffb1e 	bne	r3,r8,1000c174 <__alt_data_end+0xf800c174>
1000c188:	50bffa1e 	bne	r10,r2,1000c174 <__alt_data_end+0xf800c174>
1000c18c:	21bff91e 	bne	r4,r6,1000c174 <__alt_data_end+0xf800c174>
1000c190:	29c00826 	beq	r5,r7,1000c1b4 <__eqdf2+0x7c>
1000c194:	183ff71e 	bne	r3,zero,1000c174 <__alt_data_end+0xf800c174>
1000c198:	5104b03a 	or	r2,r10,r4
1000c19c:	1004c03a 	cmpne	r2,r2,zero
1000c1a0:	f800283a 	ret
1000c1a4:	5112b03a 	or	r9,r10,r4
1000c1a8:	483fef26 	beq	r9,zero,1000c168 <__alt_data_end+0xf800c168>
1000c1ac:	00800044 	movi	r2,1
1000c1b0:	f800283a 	ret
1000c1b4:	0005883a 	mov	r2,zero
1000c1b8:	f800283a 	ret

1000c1bc <__gedf2>:
1000c1bc:	2804d53a 	srli	r2,r5,20
1000c1c0:	3810d53a 	srli	r8,r7,20
1000c1c4:	00c00434 	movhi	r3,16
1000c1c8:	18ffffc4 	addi	r3,r3,-1
1000c1cc:	1081ffcc 	andi	r2,r2,2047
1000c1d0:	0241ffc4 	movi	r9,2047
1000c1d4:	28d4703a 	and	r10,r5,r3
1000c1d8:	4201ffcc 	andi	r8,r8,2047
1000c1dc:	38c6703a 	and	r3,r7,r3
1000c1e0:	280ad7fa 	srli	r5,r5,31
1000c1e4:	380ed7fa 	srli	r7,r7,31
1000c1e8:	12401b26 	beq	r2,r9,1000c258 <__gedf2+0x9c>
1000c1ec:	0241ffc4 	movi	r9,2047
1000c1f0:	42400926 	beq	r8,r9,1000c218 <__gedf2+0x5c>
1000c1f4:	10000c1e 	bne	r2,zero,1000c228 <__gedf2+0x6c>
1000c1f8:	5112b03a 	or	r9,r10,r4
1000c1fc:	4813003a 	cmpeq	r9,r9,zero
1000c200:	4817883a 	mov	r11,r9
1000c204:	40000a26 	beq	r8,zero,1000c230 <__gedf2+0x74>
1000c208:	48001626 	beq	r9,zero,1000c264 <__gedf2+0xa8>
1000c20c:	38000d1e 	bne	r7,zero,1000c244 <__gedf2+0x88>
1000c210:	00bfffc4 	movi	r2,-1
1000c214:	f800283a 	ret
1000c218:	1992b03a 	or	r9,r3,r6
1000c21c:	483ff526 	beq	r9,zero,1000c1f4 <__alt_data_end+0xf800c1f4>
1000c220:	00bfff84 	movi	r2,-2
1000c224:	f800283a 	ret
1000c228:	40000e1e 	bne	r8,zero,1000c264 <__gedf2+0xa8>
1000c22c:	0017883a 	mov	r11,zero
1000c230:	1992b03a 	or	r9,r3,r6
1000c234:	4813003a 	cmpeq	r9,r9,zero
1000c238:	5800041e 	bne	r11,zero,1000c24c <__gedf2+0x90>
1000c23c:	48000926 	beq	r9,zero,1000c264 <__gedf2+0xa8>
1000c240:	283ff31e 	bne	r5,zero,1000c210 <__alt_data_end+0xf800c210>
1000c244:	00800044 	movi	r2,1
1000c248:	f800283a 	ret
1000c24c:	483fef26 	beq	r9,zero,1000c20c <__alt_data_end+0xf800c20c>
1000c250:	0005883a 	mov	r2,zero
1000c254:	f800283a 	ret
1000c258:	5112b03a 	or	r9,r10,r4
1000c25c:	483fe326 	beq	r9,zero,1000c1ec <__alt_data_end+0xf800c1ec>
1000c260:	003fef06 	br	1000c220 <__alt_data_end+0xf800c220>
1000c264:	29fff61e 	bne	r5,r7,1000c240 <__alt_data_end+0xf800c240>
1000c268:	40bff516 	blt	r8,r2,1000c240 <__alt_data_end+0xf800c240>
1000c26c:	12000316 	blt	r2,r8,1000c27c <__gedf2+0xc0>
1000c270:	1abff336 	bltu	r3,r10,1000c240 <__alt_data_end+0xf800c240>
1000c274:	50c00326 	beq	r10,r3,1000c284 <__gedf2+0xc8>
1000c278:	50fff52e 	bgeu	r10,r3,1000c250 <__alt_data_end+0xf800c250>
1000c27c:	283fe426 	beq	r5,zero,1000c210 <__alt_data_end+0xf800c210>
1000c280:	003ff006 	br	1000c244 <__alt_data_end+0xf800c244>
1000c284:	313fee36 	bltu	r6,r4,1000c240 <__alt_data_end+0xf800c240>
1000c288:	21bff12e 	bgeu	r4,r6,1000c250 <__alt_data_end+0xf800c250>
1000c28c:	283fe026 	beq	r5,zero,1000c210 <__alt_data_end+0xf800c210>
1000c290:	003fec06 	br	1000c244 <__alt_data_end+0xf800c244>

1000c294 <__ledf2>:
1000c294:	2806d53a 	srli	r3,r5,20
1000c298:	3810d53a 	srli	r8,r7,20
1000c29c:	00800434 	movhi	r2,16
1000c2a0:	10bfffc4 	addi	r2,r2,-1
1000c2a4:	18c1ffcc 	andi	r3,r3,2047
1000c2a8:	0241ffc4 	movi	r9,2047
1000c2ac:	2894703a 	and	r10,r5,r2
1000c2b0:	4201ffcc 	andi	r8,r8,2047
1000c2b4:	3884703a 	and	r2,r7,r2
1000c2b8:	280ad7fa 	srli	r5,r5,31
1000c2bc:	380ed7fa 	srli	r7,r7,31
1000c2c0:	1a402026 	beq	r3,r9,1000c344 <__ledf2+0xb0>
1000c2c4:	0241ffc4 	movi	r9,2047
1000c2c8:	42401726 	beq	r8,r9,1000c328 <__ledf2+0x94>
1000c2cc:	18000b26 	beq	r3,zero,1000c2fc <__ledf2+0x68>
1000c2d0:	29403fcc 	andi	r5,r5,255
1000c2d4:	39c03fcc 	andi	r7,r7,255
1000c2d8:	40000f1e 	bne	r8,zero,1000c318 <__ledf2+0x84>
1000c2dc:	0017883a 	mov	r11,zero
1000c2e0:	1192b03a 	or	r9,r2,r6
1000c2e4:	4813003a 	cmpeq	r9,r9,zero
1000c2e8:	58001326 	beq	r11,zero,1000c338 <__ledf2+0xa4>
1000c2ec:	48001e1e 	bne	r9,zero,1000c368 <__ledf2+0xd4>
1000c2f0:	38000b1e 	bne	r7,zero,1000c320 <__ledf2+0x8c>
1000c2f4:	00bfffc4 	movi	r2,-1
1000c2f8:	f800283a 	ret
1000c2fc:	5112b03a 	or	r9,r10,r4
1000c300:	4813003a 	cmpeq	r9,r9,zero
1000c304:	4817883a 	mov	r11,r9
1000c308:	29403fcc 	andi	r5,r5,255
1000c30c:	39c03fcc 	andi	r7,r7,255
1000c310:	403ff326 	beq	r8,zero,1000c2e0 <__alt_data_end+0xf800c2e0>
1000c314:	483ff61e 	bne	r9,zero,1000c2f0 <__alt_data_end+0xf800c2f0>
1000c318:	29c00e26 	beq	r5,r7,1000c354 <__ledf2+0xc0>
1000c31c:	283ff51e 	bne	r5,zero,1000c2f4 <__alt_data_end+0xf800c2f4>
1000c320:	00800044 	movi	r2,1
1000c324:	f800283a 	ret
1000c328:	1192b03a 	or	r9,r2,r6
1000c32c:	483fe726 	beq	r9,zero,1000c2cc <__alt_data_end+0xf800c2cc>
1000c330:	00800084 	movi	r2,2
1000c334:	f800283a 	ret
1000c338:	483ff726 	beq	r9,zero,1000c318 <__alt_data_end+0xf800c318>
1000c33c:	283ff826 	beq	r5,zero,1000c320 <__alt_data_end+0xf800c320>
1000c340:	003fec06 	br	1000c2f4 <__alt_data_end+0xf800c2f4>
1000c344:	5112b03a 	or	r9,r10,r4
1000c348:	483fde26 	beq	r9,zero,1000c2c4 <__alt_data_end+0xf800c2c4>
1000c34c:	00800084 	movi	r2,2
1000c350:	f800283a 	ret
1000c354:	40fff116 	blt	r8,r3,1000c31c <__alt_data_end+0xf800c31c>
1000c358:	1a000716 	blt	r3,r8,1000c378 <__ledf2+0xe4>
1000c35c:	12bfef36 	bltu	r2,r10,1000c31c <__alt_data_end+0xf800c31c>
1000c360:	50800326 	beq	r10,r2,1000c370 <__ledf2+0xdc>
1000c364:	50800436 	bltu	r10,r2,1000c378 <__ledf2+0xe4>
1000c368:	0005883a 	mov	r2,zero
1000c36c:	f800283a 	ret
1000c370:	313fea36 	bltu	r6,r4,1000c31c <__alt_data_end+0xf800c31c>
1000c374:	21bffc2e 	bgeu	r4,r6,1000c368 <__alt_data_end+0xf800c368>
1000c378:	283fde26 	beq	r5,zero,1000c2f4 <__alt_data_end+0xf800c2f4>
1000c37c:	003fe806 	br	1000c320 <__alt_data_end+0xf800c320>

1000c380 <__muldf3>:
1000c380:	deffee04 	addi	sp,sp,-72
1000c384:	dc400915 	stw	r17,36(sp)
1000c388:	2822d53a 	srli	r17,r5,20
1000c38c:	dc000815 	stw	r16,32(sp)
1000c390:	2820d7fa 	srli	r16,r5,31
1000c394:	df001015 	stw	fp,64(sp)
1000c398:	dd000c15 	stw	r20,48(sp)
1000c39c:	dcc00b15 	stw	r19,44(sp)
1000c3a0:	dfc01115 	stw	ra,68(sp)
1000c3a4:	04c00434 	movhi	r19,16
1000c3a8:	9cffffc4 	addi	r19,r19,-1
1000c3ac:	ddc00f15 	stw	r23,60(sp)
1000c3b0:	dd800e15 	stw	r22,56(sp)
1000c3b4:	dd400d15 	stw	r21,52(sp)
1000c3b8:	dc800a15 	stw	r18,40(sp)
1000c3bc:	8c41ffcc 	andi	r17,r17,2047
1000c3c0:	2029883a 	mov	r20,r4
1000c3c4:	2ce6703a 	and	r19,r5,r19
1000c3c8:	8039883a 	mov	fp,r16
1000c3cc:	82003fcc 	andi	r8,r16,255
1000c3d0:	88005d26 	beq	r17,zero,1000c548 <__muldf3+0x1c8>
1000c3d4:	0081ffc4 	movi	r2,2047
1000c3d8:	202f883a 	mov	r23,r4
1000c3dc:	88803326 	beq	r17,r2,1000c4ac <__muldf3+0x12c>
1000c3e0:	98800434 	orhi	r2,r19,16
1000c3e4:	100490fa 	slli	r2,r2,3
1000c3e8:	2026d77a 	srli	r19,r4,29
1000c3ec:	202e90fa 	slli	r23,r4,3
1000c3f0:	8c7f0044 	addi	r17,r17,-1023
1000c3f4:	14e6b03a 	or	r19,r2,r19
1000c3f8:	002d883a 	mov	r22,zero
1000c3fc:	000b883a 	mov	r5,zero
1000c400:	3804d53a 	srli	r2,r7,20
1000c404:	3828d7fa 	srli	r20,r7,31
1000c408:	04800434 	movhi	r18,16
1000c40c:	94bfffc4 	addi	r18,r18,-1
1000c410:	1081ffcc 	andi	r2,r2,2047
1000c414:	302b883a 	mov	r21,r6
1000c418:	3ca4703a 	and	r18,r7,r18
1000c41c:	a2403fcc 	andi	r9,r20,255
1000c420:	10006826 	beq	r2,zero,1000c5c4 <__muldf3+0x244>
1000c424:	00c1ffc4 	movi	r3,2047
1000c428:	10c06026 	beq	r2,r3,1000c5ac <__muldf3+0x22c>
1000c42c:	90c00434 	orhi	r3,r18,16
1000c430:	180690fa 	slli	r3,r3,3
1000c434:	3024d77a 	srli	r18,r6,29
1000c438:	302a90fa 	slli	r21,r6,3
1000c43c:	10bf0044 	addi	r2,r2,-1023
1000c440:	1ca4b03a 	or	r18,r3,r18
1000c444:	0007883a 	mov	r3,zero
1000c448:	1d88b03a 	or	r4,r3,r22
1000c44c:	2109883a 	add	r4,r4,r4
1000c450:	2109883a 	add	r4,r4,r4
1000c454:	01840074 	movhi	r6,4097
1000c458:	31b11b04 	addi	r6,r6,-15252
1000c45c:	2189883a 	add	r4,r4,r6
1000c460:	21000017 	ldw	r4,0(r4)
1000c464:	852cf03a 	xor	r22,r16,r20
1000c468:	2000683a 	jmp	r4
1000c46c:	1000c6b4 	orhi	zero,r2,794
1000c470:	1000c6a4 	muli	zero,r2,794
1000c474:	1000c6a4 	muli	zero,r2,794
1000c478:	1000c690 	cmplti	zero,r2,794
1000c47c:	1000c4cc 	andi	zero,r2,787
1000c480:	1000c4cc 	andi	zero,r2,787
1000c484:	1000c678 	rdprs	zero,r2,793
1000c488:	1000c690 	cmplti	zero,r2,794
1000c48c:	1000c4cc 	andi	zero,r2,787
1000c490:	1000c678 	rdprs	zero,r2,793
1000c494:	1000c4cc 	andi	zero,r2,787
1000c498:	1000c690 	cmplti	zero,r2,794
1000c49c:	1000c4c8 	cmpgei	zero,r2,787
1000c4a0:	1000c4c8 	cmpgei	zero,r2,787
1000c4a4:	1000c4c8 	cmpgei	zero,r2,787
1000c4a8:	1000c9cc 	andi	zero,r2,807
1000c4ac:	9904b03a 	or	r2,r19,r4
1000c4b0:	10006e1e 	bne	r2,zero,1000c66c <__muldf3+0x2ec>
1000c4b4:	05800204 	movi	r22,8
1000c4b8:	0027883a 	mov	r19,zero
1000c4bc:	002f883a 	mov	r23,zero
1000c4c0:	01400084 	movi	r5,2
1000c4c4:	003fce06 	br	1000c400 <__alt_data_end+0xf800c400>
1000c4c8:	402d883a 	mov	r22,r8
1000c4cc:	00800084 	movi	r2,2
1000c4d0:	28805626 	beq	r5,r2,1000c62c <__muldf3+0x2ac>
1000c4d4:	008000c4 	movi	r2,3
1000c4d8:	2881a226 	beq	r5,r2,1000cb64 <__muldf3+0x7e4>
1000c4dc:	00800044 	movi	r2,1
1000c4e0:	28811d1e 	bne	r5,r2,1000c958 <__muldf3+0x5d8>
1000c4e4:	b039883a 	mov	fp,r22
1000c4e8:	0005883a 	mov	r2,zero
1000c4ec:	0027883a 	mov	r19,zero
1000c4f0:	002f883a 	mov	r23,zero
1000c4f4:	1004953a 	slli	r2,r2,20
1000c4f8:	e7003fcc 	andi	fp,fp,255
1000c4fc:	e03897fa 	slli	fp,fp,31
1000c500:	00c00434 	movhi	r3,16
1000c504:	18ffffc4 	addi	r3,r3,-1
1000c508:	98e6703a 	and	r19,r19,r3
1000c50c:	9886b03a 	or	r3,r19,r2
1000c510:	1f06b03a 	or	r3,r3,fp
1000c514:	b805883a 	mov	r2,r23
1000c518:	dfc01117 	ldw	ra,68(sp)
1000c51c:	df001017 	ldw	fp,64(sp)
1000c520:	ddc00f17 	ldw	r23,60(sp)
1000c524:	dd800e17 	ldw	r22,56(sp)
1000c528:	dd400d17 	ldw	r21,52(sp)
1000c52c:	dd000c17 	ldw	r20,48(sp)
1000c530:	dcc00b17 	ldw	r19,44(sp)
1000c534:	dc800a17 	ldw	r18,40(sp)
1000c538:	dc400917 	ldw	r17,36(sp)
1000c53c:	dc000817 	ldw	r16,32(sp)
1000c540:	dec01204 	addi	sp,sp,72
1000c544:	f800283a 	ret
1000c548:	9904b03a 	or	r2,r19,r4
1000c54c:	10004226 	beq	r2,zero,1000c658 <__muldf3+0x2d8>
1000c550:	98013426 	beq	r19,zero,1000ca24 <__muldf3+0x6a4>
1000c554:	9809883a 	mov	r4,r19
1000c558:	d9800515 	stw	r6,20(sp)
1000c55c:	d9c00415 	stw	r7,16(sp)
1000c560:	da000615 	stw	r8,24(sp)
1000c564:	000d5f80 	call	1000d5f8 <__clzsi2>
1000c568:	d9800517 	ldw	r6,20(sp)
1000c56c:	d9c00417 	ldw	r7,16(sp)
1000c570:	da000617 	ldw	r8,24(sp)
1000c574:	00c009c4 	movi	r3,39
1000c578:	18812616 	blt	r3,r2,1000ca14 <__muldf3+0x694>
1000c57c:	00c00a04 	movi	r3,40
1000c580:	15fffe04 	addi	r23,r2,-8
1000c584:	1887c83a 	sub	r3,r3,r2
1000c588:	9de6983a 	sll	r19,r19,r23
1000c58c:	a0c6d83a 	srl	r3,r20,r3
1000c590:	a5ee983a 	sll	r23,r20,r23
1000c594:	1ce6b03a 	or	r19,r3,r19
1000c598:	047f0344 	movi	r17,-1011
1000c59c:	88a3c83a 	sub	r17,r17,r2
1000c5a0:	002d883a 	mov	r22,zero
1000c5a4:	000b883a 	mov	r5,zero
1000c5a8:	003f9506 	br	1000c400 <__alt_data_end+0xf800c400>
1000c5ac:	9186b03a 	or	r3,r18,r6
1000c5b0:	1800271e 	bne	r3,zero,1000c650 <__muldf3+0x2d0>
1000c5b4:	0025883a 	mov	r18,zero
1000c5b8:	002b883a 	mov	r21,zero
1000c5bc:	00c00084 	movi	r3,2
1000c5c0:	003fa106 	br	1000c448 <__alt_data_end+0xf800c448>
1000c5c4:	9186b03a 	or	r3,r18,r6
1000c5c8:	18001d26 	beq	r3,zero,1000c640 <__muldf3+0x2c0>
1000c5cc:	90012226 	beq	r18,zero,1000ca58 <__muldf3+0x6d8>
1000c5d0:	9009883a 	mov	r4,r18
1000c5d4:	d9400415 	stw	r5,16(sp)
1000c5d8:	d9800515 	stw	r6,20(sp)
1000c5dc:	da000615 	stw	r8,24(sp)
1000c5e0:	da400715 	stw	r9,28(sp)
1000c5e4:	000d5f80 	call	1000d5f8 <__clzsi2>
1000c5e8:	d9400417 	ldw	r5,16(sp)
1000c5ec:	d9800517 	ldw	r6,20(sp)
1000c5f0:	da000617 	ldw	r8,24(sp)
1000c5f4:	da400717 	ldw	r9,28(sp)
1000c5f8:	00c009c4 	movi	r3,39
1000c5fc:	18811216 	blt	r3,r2,1000ca48 <__muldf3+0x6c8>
1000c600:	01c00a04 	movi	r7,40
1000c604:	157ffe04 	addi	r21,r2,-8
1000c608:	388fc83a 	sub	r7,r7,r2
1000c60c:	9564983a 	sll	r18,r18,r21
1000c610:	31ced83a 	srl	r7,r6,r7
1000c614:	356a983a 	sll	r21,r6,r21
1000c618:	3ca4b03a 	or	r18,r7,r18
1000c61c:	00ff0344 	movi	r3,-1011
1000c620:	1885c83a 	sub	r2,r3,r2
1000c624:	0007883a 	mov	r3,zero
1000c628:	003f8706 	br	1000c448 <__alt_data_end+0xf800c448>
1000c62c:	b039883a 	mov	fp,r22
1000c630:	0081ffc4 	movi	r2,2047
1000c634:	0027883a 	mov	r19,zero
1000c638:	002f883a 	mov	r23,zero
1000c63c:	003fad06 	br	1000c4f4 <__alt_data_end+0xf800c4f4>
1000c640:	0025883a 	mov	r18,zero
1000c644:	002b883a 	mov	r21,zero
1000c648:	00c00044 	movi	r3,1
1000c64c:	003f7e06 	br	1000c448 <__alt_data_end+0xf800c448>
1000c650:	00c000c4 	movi	r3,3
1000c654:	003f7c06 	br	1000c448 <__alt_data_end+0xf800c448>
1000c658:	05800104 	movi	r22,4
1000c65c:	0027883a 	mov	r19,zero
1000c660:	002f883a 	mov	r23,zero
1000c664:	01400044 	movi	r5,1
1000c668:	003f6506 	br	1000c400 <__alt_data_end+0xf800c400>
1000c66c:	05800304 	movi	r22,12
1000c670:	014000c4 	movi	r5,3
1000c674:	003f6206 	br	1000c400 <__alt_data_end+0xf800c400>
1000c678:	0039883a 	mov	fp,zero
1000c67c:	04c00434 	movhi	r19,16
1000c680:	9cffffc4 	addi	r19,r19,-1
1000c684:	05ffffc4 	movi	r23,-1
1000c688:	0081ffc4 	movi	r2,2047
1000c68c:	003f9906 	br	1000c4f4 <__alt_data_end+0xf800c4f4>
1000c690:	9027883a 	mov	r19,r18
1000c694:	a82f883a 	mov	r23,r21
1000c698:	482d883a 	mov	r22,r9
1000c69c:	180b883a 	mov	r5,r3
1000c6a0:	003f8a06 	br	1000c4cc <__alt_data_end+0xf800c4cc>
1000c6a4:	9027883a 	mov	r19,r18
1000c6a8:	a82f883a 	mov	r23,r21
1000c6ac:	180b883a 	mov	r5,r3
1000c6b0:	003f8606 	br	1000c4cc <__alt_data_end+0xf800c4cc>
1000c6b4:	a828d43a 	srli	r20,r21,16
1000c6b8:	b820d43a 	srli	r16,r23,16
1000c6bc:	ad7fffcc 	andi	r21,r21,65535
1000c6c0:	bdffffcc 	andi	r23,r23,65535
1000c6c4:	8885883a 	add	r2,r17,r2
1000c6c8:	a809883a 	mov	r4,r21
1000c6cc:	b80b883a 	mov	r5,r23
1000c6d0:	d8800015 	stw	r2,0(sp)
1000c6d4:	000aef80 	call	1000aef8 <__mulsi3>
1000c6d8:	a009883a 	mov	r4,r20
1000c6dc:	b80b883a 	mov	r5,r23
1000c6e0:	d8800415 	stw	r2,16(sp)
1000c6e4:	000aef80 	call	1000aef8 <__mulsi3>
1000c6e8:	a809883a 	mov	r4,r21
1000c6ec:	800b883a 	mov	r5,r16
1000c6f0:	d8800615 	stw	r2,24(sp)
1000c6f4:	000aef80 	call	1000aef8 <__mulsi3>
1000c6f8:	a009883a 	mov	r4,r20
1000c6fc:	800b883a 	mov	r5,r16
1000c700:	1023883a 	mov	r17,r2
1000c704:	000aef80 	call	1000aef8 <__mulsi3>
1000c708:	d9c00417 	ldw	r7,16(sp)
1000c70c:	da000617 	ldw	r8,24(sp)
1000c710:	1039883a 	mov	fp,r2
1000c714:	3804d43a 	srli	r2,r7,16
1000c718:	8a07883a 	add	r3,r17,r8
1000c71c:	1887883a 	add	r3,r3,r2
1000c720:	1c40022e 	bgeu	r3,r17,1000c72c <__muldf3+0x3ac>
1000c724:	00800074 	movhi	r2,1
1000c728:	e0b9883a 	add	fp,fp,r2
1000c72c:	1804943a 	slli	r2,r3,16
1000c730:	1806d43a 	srli	r3,r3,16
1000c734:	9022d43a 	srli	r17,r18,16
1000c738:	39ffffcc 	andi	r7,r7,65535
1000c73c:	94bfffcc 	andi	r18,r18,65535
1000c740:	11cf883a 	add	r7,r2,r7
1000c744:	b80b883a 	mov	r5,r23
1000c748:	9009883a 	mov	r4,r18
1000c74c:	d8c00215 	stw	r3,8(sp)
1000c750:	d9c00315 	stw	r7,12(sp)
1000c754:	000aef80 	call	1000aef8 <__mulsi3>
1000c758:	b80b883a 	mov	r5,r23
1000c75c:	8809883a 	mov	r4,r17
1000c760:	d8800415 	stw	r2,16(sp)
1000c764:	000aef80 	call	1000aef8 <__mulsi3>
1000c768:	9009883a 	mov	r4,r18
1000c76c:	800b883a 	mov	r5,r16
1000c770:	d8800715 	stw	r2,28(sp)
1000c774:	000aef80 	call	1000aef8 <__mulsi3>
1000c778:	8809883a 	mov	r4,r17
1000c77c:	800b883a 	mov	r5,r16
1000c780:	102f883a 	mov	r23,r2
1000c784:	000aef80 	call	1000aef8 <__mulsi3>
1000c788:	d9c00417 	ldw	r7,16(sp)
1000c78c:	da400717 	ldw	r9,28(sp)
1000c790:	1011883a 	mov	r8,r2
1000c794:	3804d43a 	srli	r2,r7,16
1000c798:	ba47883a 	add	r3,r23,r9
1000c79c:	1887883a 	add	r3,r3,r2
1000c7a0:	1dc0022e 	bgeu	r3,r23,1000c7ac <__muldf3+0x42c>
1000c7a4:	00800074 	movhi	r2,1
1000c7a8:	4091883a 	add	r8,r8,r2
1000c7ac:	1804d43a 	srli	r2,r3,16
1000c7b0:	182e943a 	slli	r23,r3,16
1000c7b4:	9820d43a 	srli	r16,r19,16
1000c7b8:	9cffffcc 	andi	r19,r19,65535
1000c7bc:	39ffffcc 	andi	r7,r7,65535
1000c7c0:	4085883a 	add	r2,r8,r2
1000c7c4:	a809883a 	mov	r4,r21
1000c7c8:	980b883a 	mov	r5,r19
1000c7cc:	b9ef883a 	add	r23,r23,r7
1000c7d0:	d8800115 	stw	r2,4(sp)
1000c7d4:	000aef80 	call	1000aef8 <__mulsi3>
1000c7d8:	a009883a 	mov	r4,r20
1000c7dc:	980b883a 	mov	r5,r19
1000c7e0:	d8800415 	stw	r2,16(sp)
1000c7e4:	000aef80 	call	1000aef8 <__mulsi3>
1000c7e8:	a809883a 	mov	r4,r21
1000c7ec:	800b883a 	mov	r5,r16
1000c7f0:	d8800715 	stw	r2,28(sp)
1000c7f4:	000aef80 	call	1000aef8 <__mulsi3>
1000c7f8:	a009883a 	mov	r4,r20
1000c7fc:	800b883a 	mov	r5,r16
1000c800:	102b883a 	mov	r21,r2
1000c804:	000aef80 	call	1000aef8 <__mulsi3>
1000c808:	d9c00417 	ldw	r7,16(sp)
1000c80c:	da400717 	ldw	r9,28(sp)
1000c810:	1011883a 	mov	r8,r2
1000c814:	3804d43a 	srli	r2,r7,16
1000c818:	aa47883a 	add	r3,r21,r9
1000c81c:	1887883a 	add	r3,r3,r2
1000c820:	1d40022e 	bgeu	r3,r21,1000c82c <__muldf3+0x4ac>
1000c824:	00800074 	movhi	r2,1
1000c828:	4091883a 	add	r8,r8,r2
1000c82c:	1828d43a 	srli	r20,r3,16
1000c830:	1806943a 	slli	r3,r3,16
1000c834:	39ffffcc 	andi	r7,r7,65535
1000c838:	9009883a 	mov	r4,r18
1000c83c:	980b883a 	mov	r5,r19
1000c840:	19eb883a 	add	r21,r3,r7
1000c844:	4529883a 	add	r20,r8,r20
1000c848:	000aef80 	call	1000aef8 <__mulsi3>
1000c84c:	980b883a 	mov	r5,r19
1000c850:	8809883a 	mov	r4,r17
1000c854:	d8800415 	stw	r2,16(sp)
1000c858:	000aef80 	call	1000aef8 <__mulsi3>
1000c85c:	9009883a 	mov	r4,r18
1000c860:	800b883a 	mov	r5,r16
1000c864:	1027883a 	mov	r19,r2
1000c868:	000aef80 	call	1000aef8 <__mulsi3>
1000c86c:	8809883a 	mov	r4,r17
1000c870:	800b883a 	mov	r5,r16
1000c874:	1025883a 	mov	r18,r2
1000c878:	000aef80 	call	1000aef8 <__mulsi3>
1000c87c:	d9c00417 	ldw	r7,16(sp)
1000c880:	1011883a 	mov	r8,r2
1000c884:	94c7883a 	add	r3,r18,r19
1000c888:	3804d43a 	srli	r2,r7,16
1000c88c:	1887883a 	add	r3,r3,r2
1000c890:	1c80022e 	bgeu	r3,r18,1000c89c <__muldf3+0x51c>
1000c894:	00800074 	movhi	r2,1
1000c898:	4091883a 	add	r8,r8,r2
1000c89c:	1804943a 	slli	r2,r3,16
1000c8a0:	d9400217 	ldw	r5,8(sp)
1000c8a4:	39ffffcc 	andi	r7,r7,65535
1000c8a8:	11cf883a 	add	r7,r2,r7
1000c8ac:	d8800117 	ldw	r2,4(sp)
1000c8b0:	b949883a 	add	r4,r23,r5
1000c8b4:	2739883a 	add	fp,r4,fp
1000c8b8:	e5ef803a 	cmpltu	r23,fp,r23
1000c8bc:	388f883a 	add	r7,r7,r2
1000c8c0:	3dcb883a 	add	r5,r7,r23
1000c8c4:	a149883a 	add	r4,r20,r5
1000c8c8:	2def803a 	cmpltu	r23,r5,r23
1000c8cc:	d9400117 	ldw	r5,4(sp)
1000c8d0:	e579883a 	add	fp,fp,r21
1000c8d4:	e56b803a 	cmpltu	r21,fp,r21
1000c8d8:	1804d43a 	srli	r2,r3,16
1000c8dc:	394f803a 	cmpltu	r7,r7,r5
1000c8e0:	2547883a 	add	r3,r4,r21
1000c8e4:	b9e6b03a 	or	r19,r23,r7
1000c8e8:	1d6b803a 	cmpltu	r21,r3,r21
1000c8ec:	2529803a 	cmpltu	r20,r4,r20
1000c8f0:	98a7883a 	add	r19,r19,r2
1000c8f4:	ad2ab03a 	or	r21,r21,r20
1000c8f8:	9d67883a 	add	r19,r19,r21
1000c8fc:	e02e927a 	slli	r23,fp,9
1000c900:	9a27883a 	add	r19,r19,r8
1000c904:	d9000317 	ldw	r4,12(sp)
1000c908:	1804d5fa 	srli	r2,r3,23
1000c90c:	9826927a 	slli	r19,r19,9
1000c910:	e038d5fa 	srli	fp,fp,23
1000c914:	b92eb03a 	or	r23,r23,r4
1000c918:	1806927a 	slli	r3,r3,9
1000c91c:	98a6b03a 	or	r19,r19,r2
1000c920:	b82ec03a 	cmpne	r23,r23,zero
1000c924:	bf2eb03a 	or	r23,r23,fp
1000c928:	9880402c 	andhi	r2,r19,256
1000c92c:	b8eeb03a 	or	r23,r23,r3
1000c930:	10000926 	beq	r2,zero,1000c958 <__muldf3+0x5d8>
1000c934:	b806d07a 	srli	r3,r23,1
1000c938:	bdc0004c 	andi	r23,r23,1
1000c93c:	980497fa 	slli	r2,r19,31
1000c940:	b8eeb03a 	or	r23,r23,r3
1000c944:	d8c00017 	ldw	r3,0(sp)
1000c948:	9826d07a 	srli	r19,r19,1
1000c94c:	b8aeb03a 	or	r23,r23,r2
1000c950:	18c00044 	addi	r3,r3,1
1000c954:	d8c00015 	stw	r3,0(sp)
1000c958:	d8c00017 	ldw	r3,0(sp)
1000c95c:	1880ffc4 	addi	r2,r3,1023
1000c960:	0080490e 	bge	zero,r2,1000ca88 <__muldf3+0x708>
1000c964:	b8c001cc 	andi	r3,r23,7
1000c968:	18000726 	beq	r3,zero,1000c988 <__muldf3+0x608>
1000c96c:	b90003cc 	andi	r4,r23,15
1000c970:	00c00104 	movi	r3,4
1000c974:	20c00426 	beq	r4,r3,1000c988 <__muldf3+0x608>
1000c978:	b8c7883a 	add	r3,r23,r3
1000c97c:	1def803a 	cmpltu	r23,r3,r23
1000c980:	9de7883a 	add	r19,r19,r23
1000c984:	182f883a 	mov	r23,r3
1000c988:	98c0402c 	andhi	r3,r19,256
1000c98c:	18000526 	beq	r3,zero,1000c9a4 <__muldf3+0x624>
1000c990:	d8c00017 	ldw	r3,0(sp)
1000c994:	00bfc034 	movhi	r2,65280
1000c998:	10bfffc4 	addi	r2,r2,-1
1000c99c:	98a6703a 	and	r19,r19,r2
1000c9a0:	18810004 	addi	r2,r3,1024
1000c9a4:	00c1ff84 	movi	r3,2046
1000c9a8:	18bf2016 	blt	r3,r2,1000c62c <__alt_data_end+0xf800c62c>
1000c9ac:	9806977a 	slli	r3,r19,29
1000c9b0:	b82ed0fa 	srli	r23,r23,3
1000c9b4:	9826927a 	slli	r19,r19,9
1000c9b8:	1081ffcc 	andi	r2,r2,2047
1000c9bc:	1deeb03a 	or	r23,r3,r23
1000c9c0:	9826d33a 	srli	r19,r19,12
1000c9c4:	b039883a 	mov	fp,r22
1000c9c8:	003eca06 	br	1000c4f4 <__alt_data_end+0xf800c4f4>
1000c9cc:	9880022c 	andhi	r2,r19,8
1000c9d0:	10000a26 	beq	r2,zero,1000c9fc <__muldf3+0x67c>
1000c9d4:	9080022c 	andhi	r2,r18,8
1000c9d8:	1000081e 	bne	r2,zero,1000c9fc <__muldf3+0x67c>
1000c9dc:	00800434 	movhi	r2,16
1000c9e0:	10bfffc4 	addi	r2,r2,-1
1000c9e4:	94c00234 	orhi	r19,r18,8
1000c9e8:	98a6703a 	and	r19,r19,r2
1000c9ec:	a039883a 	mov	fp,r20
1000c9f0:	a82f883a 	mov	r23,r21
1000c9f4:	0081ffc4 	movi	r2,2047
1000c9f8:	003ebe06 	br	1000c4f4 <__alt_data_end+0xf800c4f4>
1000c9fc:	00800434 	movhi	r2,16
1000ca00:	10bfffc4 	addi	r2,r2,-1
1000ca04:	9cc00234 	orhi	r19,r19,8
1000ca08:	98a6703a 	and	r19,r19,r2
1000ca0c:	0081ffc4 	movi	r2,2047
1000ca10:	003eb806 	br	1000c4f4 <__alt_data_end+0xf800c4f4>
1000ca14:	14fff604 	addi	r19,r2,-40
1000ca18:	a4e6983a 	sll	r19,r20,r19
1000ca1c:	002f883a 	mov	r23,zero
1000ca20:	003edd06 	br	1000c598 <__alt_data_end+0xf800c598>
1000ca24:	d9800515 	stw	r6,20(sp)
1000ca28:	d9c00415 	stw	r7,16(sp)
1000ca2c:	da000615 	stw	r8,24(sp)
1000ca30:	000d5f80 	call	1000d5f8 <__clzsi2>
1000ca34:	10800804 	addi	r2,r2,32
1000ca38:	da000617 	ldw	r8,24(sp)
1000ca3c:	d9c00417 	ldw	r7,16(sp)
1000ca40:	d9800517 	ldw	r6,20(sp)
1000ca44:	003ecb06 	br	1000c574 <__alt_data_end+0xf800c574>
1000ca48:	14bff604 	addi	r18,r2,-40
1000ca4c:	34a4983a 	sll	r18,r6,r18
1000ca50:	002b883a 	mov	r21,zero
1000ca54:	003ef106 	br	1000c61c <__alt_data_end+0xf800c61c>
1000ca58:	3009883a 	mov	r4,r6
1000ca5c:	d9400415 	stw	r5,16(sp)
1000ca60:	d9800515 	stw	r6,20(sp)
1000ca64:	da000615 	stw	r8,24(sp)
1000ca68:	da400715 	stw	r9,28(sp)
1000ca6c:	000d5f80 	call	1000d5f8 <__clzsi2>
1000ca70:	10800804 	addi	r2,r2,32
1000ca74:	da400717 	ldw	r9,28(sp)
1000ca78:	da000617 	ldw	r8,24(sp)
1000ca7c:	d9800517 	ldw	r6,20(sp)
1000ca80:	d9400417 	ldw	r5,16(sp)
1000ca84:	003edc06 	br	1000c5f8 <__alt_data_end+0xf800c5f8>
1000ca88:	d8c00017 	ldw	r3,0(sp)
1000ca8c:	00bf0084 	movi	r2,-1022
1000ca90:	10c5c83a 	sub	r2,r2,r3
1000ca94:	00c00e04 	movi	r3,56
1000ca98:	18be9216 	blt	r3,r2,1000c4e4 <__alt_data_end+0xf800c4e4>
1000ca9c:	00c007c4 	movi	r3,31
1000caa0:	18801916 	blt	r3,r2,1000cb08 <__muldf3+0x788>
1000caa4:	d9000017 	ldw	r4,0(sp)
1000caa8:	b88ad83a 	srl	r5,r23,r2
1000caac:	9884d83a 	srl	r2,r19,r2
1000cab0:	20c10784 	addi	r3,r4,1054
1000cab4:	98c8983a 	sll	r4,r19,r3
1000cab8:	b8c6983a 	sll	r3,r23,r3
1000cabc:	2908b03a 	or	r4,r5,r4
1000cac0:	1806c03a 	cmpne	r3,r3,zero
1000cac4:	20c6b03a 	or	r3,r4,r3
1000cac8:	190001cc 	andi	r4,r3,7
1000cacc:	20000726 	beq	r4,zero,1000caec <__muldf3+0x76c>
1000cad0:	194003cc 	andi	r5,r3,15
1000cad4:	01000104 	movi	r4,4
1000cad8:	29000426 	beq	r5,r4,1000caec <__muldf3+0x76c>
1000cadc:	1909883a 	add	r4,r3,r4
1000cae0:	20c7803a 	cmpltu	r3,r4,r3
1000cae4:	10c5883a 	add	r2,r2,r3
1000cae8:	2007883a 	mov	r3,r4
1000caec:	1100202c 	andhi	r4,r2,128
1000caf0:	20001226 	beq	r4,zero,1000cb3c <__muldf3+0x7bc>
1000caf4:	b039883a 	mov	fp,r22
1000caf8:	00800044 	movi	r2,1
1000cafc:	0027883a 	mov	r19,zero
1000cb00:	002f883a 	mov	r23,zero
1000cb04:	003e7b06 	br	1000c4f4 <__alt_data_end+0xf800c4f4>
1000cb08:	d9400017 	ldw	r5,0(sp)
1000cb0c:	00fef884 	movi	r3,-1054
1000cb10:	01000804 	movi	r4,32
1000cb14:	1947c83a 	sub	r3,r3,r5
1000cb18:	98c6d83a 	srl	r3,r19,r3
1000cb1c:	11000f26 	beq	r2,r4,1000cb5c <__muldf3+0x7dc>
1000cb20:	28810f84 	addi	r2,r5,1086
1000cb24:	9884983a 	sll	r2,r19,r2
1000cb28:	15c4b03a 	or	r2,r2,r23
1000cb2c:	1004c03a 	cmpne	r2,r2,zero
1000cb30:	10c6b03a 	or	r3,r2,r3
1000cb34:	0005883a 	mov	r2,zero
1000cb38:	003fe306 	br	1000cac8 <__alt_data_end+0xf800cac8>
1000cb3c:	102e977a 	slli	r23,r2,29
1000cb40:	1806d0fa 	srli	r3,r3,3
1000cb44:	1004927a 	slli	r2,r2,9
1000cb48:	b039883a 	mov	fp,r22
1000cb4c:	b8eeb03a 	or	r23,r23,r3
1000cb50:	1026d33a 	srli	r19,r2,12
1000cb54:	0005883a 	mov	r2,zero
1000cb58:	003e6606 	br	1000c4f4 <__alt_data_end+0xf800c4f4>
1000cb5c:	0005883a 	mov	r2,zero
1000cb60:	003ff106 	br	1000cb28 <__alt_data_end+0xf800cb28>
1000cb64:	00800434 	movhi	r2,16
1000cb68:	10bfffc4 	addi	r2,r2,-1
1000cb6c:	9cc00234 	orhi	r19,r19,8
1000cb70:	98a6703a 	and	r19,r19,r2
1000cb74:	b039883a 	mov	fp,r22
1000cb78:	0081ffc4 	movi	r2,2047
1000cb7c:	003e5d06 	br	1000c4f4 <__alt_data_end+0xf800c4f4>

1000cb80 <__subdf3>:
1000cb80:	02000434 	movhi	r8,16
1000cb84:	423fffc4 	addi	r8,r8,-1
1000cb88:	defffb04 	addi	sp,sp,-20
1000cb8c:	2a06703a 	and	r3,r5,r8
1000cb90:	3a10703a 	and	r8,r7,r8
1000cb94:	3804d53a 	srli	r2,r7,20
1000cb98:	dc800215 	stw	r18,8(sp)
1000cb9c:	dc400115 	stw	r17,4(sp)
1000cba0:	2824d7fa 	srli	r18,r5,31
1000cba4:	2822d53a 	srli	r17,r5,20
1000cba8:	401090fa 	slli	r8,r8,3
1000cbac:	180a90fa 	slli	r5,r3,3
1000cbb0:	3006d77a 	srli	r3,r6,29
1000cbb4:	2014d77a 	srli	r10,r4,29
1000cbb8:	dc000015 	stw	r16,0(sp)
1000cbbc:	40d0b03a 	or	r8,r8,r3
1000cbc0:	dfc00415 	stw	ra,16(sp)
1000cbc4:	dcc00315 	stw	r19,12(sp)
1000cbc8:	1081ffcc 	andi	r2,r2,2047
1000cbcc:	00c1ffc4 	movi	r3,2047
1000cbd0:	9013883a 	mov	r9,r18
1000cbd4:	8c41ffcc 	andi	r17,r17,2047
1000cbd8:	94803fcc 	andi	r18,r18,255
1000cbdc:	2a8ab03a 	or	r5,r5,r10
1000cbe0:	202090fa 	slli	r16,r4,3
1000cbe4:	380ed7fa 	srli	r7,r7,31
1000cbe8:	300c90fa 	slli	r6,r6,3
1000cbec:	10c02e26 	beq	r2,r3,1000cca8 <__subdf3+0x128>
1000cbf0:	39c0005c 	xori	r7,r7,1
1000cbf4:	8887c83a 	sub	r3,r17,r2
1000cbf8:	91c03026 	beq	r18,r7,1000ccbc <__subdf3+0x13c>
1000cbfc:	00c0a40e 	bge	zero,r3,1000ce90 <__subdf3+0x310>
1000cc00:	10004c1e 	bne	r2,zero,1000cd34 <__subdf3+0x1b4>
1000cc04:	4184b03a 	or	r2,r8,r6
1000cc08:	10008f1e 	bne	r2,zero,1000ce48 <__subdf3+0x2c8>
1000cc0c:	808001cc 	andi	r2,r16,7
1000cc10:	10007d26 	beq	r2,zero,1000ce08 <__subdf3+0x288>
1000cc14:	80c003cc 	andi	r3,r16,15
1000cc18:	00800104 	movi	r2,4
1000cc1c:	18807a26 	beq	r3,r2,1000ce08 <__subdf3+0x288>
1000cc20:	80c00104 	addi	r3,r16,4
1000cc24:	1c21803a 	cmpltu	r16,r3,r16
1000cc28:	2c0b883a 	add	r5,r5,r16
1000cc2c:	2880202c 	andhi	r2,r5,128
1000cc30:	9240004c 	andi	r9,r18,1
1000cc34:	1821883a 	mov	r16,r3
1000cc38:	10007626 	beq	r2,zero,1000ce14 <__subdf3+0x294>
1000cc3c:	8c400044 	addi	r17,r17,1
1000cc40:	0081ffc4 	movi	r2,2047
1000cc44:	8880b226 	beq	r17,r2,1000cf10 <__subdf3+0x390>
1000cc48:	00bfe034 	movhi	r2,65408
1000cc4c:	10bfffc4 	addi	r2,r2,-1
1000cc50:	288a703a 	and	r5,r5,r2
1000cc54:	2804977a 	slli	r2,r5,29
1000cc58:	280a927a 	slli	r5,r5,9
1000cc5c:	8020d0fa 	srli	r16,r16,3
1000cc60:	280ad33a 	srli	r5,r5,12
1000cc64:	1404b03a 	or	r2,r2,r16
1000cc68:	8c41ffcc 	andi	r17,r17,2047
1000cc6c:	8822953a 	slli	r17,r17,20
1000cc70:	4a403fcc 	andi	r9,r9,255
1000cc74:	481297fa 	slli	r9,r9,31
1000cc78:	00c00434 	movhi	r3,16
1000cc7c:	18ffffc4 	addi	r3,r3,-1
1000cc80:	28c6703a 	and	r3,r5,r3
1000cc84:	1c46b03a 	or	r3,r3,r17
1000cc88:	1a46b03a 	or	r3,r3,r9
1000cc8c:	dfc00417 	ldw	ra,16(sp)
1000cc90:	dcc00317 	ldw	r19,12(sp)
1000cc94:	dc800217 	ldw	r18,8(sp)
1000cc98:	dc400117 	ldw	r17,4(sp)
1000cc9c:	dc000017 	ldw	r16,0(sp)
1000cca0:	dec00504 	addi	sp,sp,20
1000cca4:	f800283a 	ret
1000cca8:	4186b03a 	or	r3,r8,r6
1000ccac:	183fd026 	beq	r3,zero,1000cbf0 <__alt_data_end+0xf800cbf0>
1000ccb0:	39c03fcc 	andi	r7,r7,255
1000ccb4:	8887c83a 	sub	r3,r17,r2
1000ccb8:	91ffd01e 	bne	r18,r7,1000cbfc <__alt_data_end+0xf800cbfc>
1000ccbc:	00c09b0e 	bge	zero,r3,1000cf2c <__subdf3+0x3ac>
1000ccc0:	10006926 	beq	r2,zero,1000ce68 <__subdf3+0x2e8>
1000ccc4:	0081ffc4 	movi	r2,2047
1000ccc8:	88bfd026 	beq	r17,r2,1000cc0c <__alt_data_end+0xf800cc0c>
1000cccc:	42002034 	orhi	r8,r8,128
1000ccd0:	00800e04 	movi	r2,56
1000ccd4:	10c0e20e 	bge	r2,r3,1000d060 <__subdf3+0x4e0>
1000ccd8:	418cb03a 	or	r6,r8,r6
1000ccdc:	300cc03a 	cmpne	r6,r6,zero
1000cce0:	0007883a 	mov	r3,zero
1000cce4:	340d883a 	add	r6,r6,r16
1000cce8:	3421803a 	cmpltu	r16,r6,r16
1000ccec:	194b883a 	add	r5,r3,r5
1000ccf0:	2c0b883a 	add	r5,r5,r16
1000ccf4:	3021883a 	mov	r16,r6
1000ccf8:	2880202c 	andhi	r2,r5,128
1000ccfc:	103fc326 	beq	r2,zero,1000cc0c <__alt_data_end+0xf800cc0c>
1000cd00:	8c400044 	addi	r17,r17,1
1000cd04:	0081ffc4 	movi	r2,2047
1000cd08:	88811026 	beq	r17,r2,1000d14c <__subdf3+0x5cc>
1000cd0c:	00bfe034 	movhi	r2,65408
1000cd10:	10bfffc4 	addi	r2,r2,-1
1000cd14:	288a703a 	and	r5,r5,r2
1000cd18:	8006d07a 	srli	r3,r16,1
1000cd1c:	280497fa 	slli	r2,r5,31
1000cd20:	8400004c 	andi	r16,r16,1
1000cd24:	80e0b03a 	or	r16,r16,r3
1000cd28:	80a0b03a 	or	r16,r16,r2
1000cd2c:	280ad07a 	srli	r5,r5,1
1000cd30:	003fb606 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000cd34:	0081ffc4 	movi	r2,2047
1000cd38:	88bfb426 	beq	r17,r2,1000cc0c <__alt_data_end+0xf800cc0c>
1000cd3c:	42002034 	orhi	r8,r8,128
1000cd40:	00800e04 	movi	r2,56
1000cd44:	10c07516 	blt	r2,r3,1000cf1c <__subdf3+0x39c>
1000cd48:	008007c4 	movi	r2,31
1000cd4c:	10c09816 	blt	r2,r3,1000cfb0 <__subdf3+0x430>
1000cd50:	00800804 	movi	r2,32
1000cd54:	10c5c83a 	sub	r2,r2,r3
1000cd58:	30c8d83a 	srl	r4,r6,r3
1000cd5c:	408e983a 	sll	r7,r8,r2
1000cd60:	3084983a 	sll	r2,r6,r2
1000cd64:	40c6d83a 	srl	r3,r8,r3
1000cd68:	3908b03a 	or	r4,r7,r4
1000cd6c:	1004c03a 	cmpne	r2,r2,zero
1000cd70:	208cb03a 	or	r6,r4,r2
1000cd74:	818dc83a 	sub	r6,r16,r6
1000cd78:	81a1803a 	cmpltu	r16,r16,r6
1000cd7c:	28cbc83a 	sub	r5,r5,r3
1000cd80:	2c0bc83a 	sub	r5,r5,r16
1000cd84:	3021883a 	mov	r16,r6
1000cd88:	2880202c 	andhi	r2,r5,128
1000cd8c:	103f9f26 	beq	r2,zero,1000cc0c <__alt_data_end+0xf800cc0c>
1000cd90:	04c02034 	movhi	r19,128
1000cd94:	9cffffc4 	addi	r19,r19,-1
1000cd98:	2ce6703a 	and	r19,r5,r19
1000cd9c:	98004d26 	beq	r19,zero,1000ced4 <__subdf3+0x354>
1000cda0:	9809883a 	mov	r4,r19
1000cda4:	000d5f80 	call	1000d5f8 <__clzsi2>
1000cda8:	10fffe04 	addi	r3,r2,-8
1000cdac:	010007c4 	movi	r4,31
1000cdb0:	20c04e16 	blt	r4,r3,1000ceec <__subdf3+0x36c>
1000cdb4:	01000a04 	movi	r4,40
1000cdb8:	2085c83a 	sub	r2,r4,r2
1000cdbc:	8084d83a 	srl	r2,r16,r2
1000cdc0:	98e6983a 	sll	r19,r19,r3
1000cdc4:	80e0983a 	sll	r16,r16,r3
1000cdc8:	14c4b03a 	or	r2,r2,r19
1000cdcc:	1c404b16 	blt	r3,r17,1000cefc <__subdf3+0x37c>
1000cdd0:	1c63c83a 	sub	r17,r3,r17
1000cdd4:	89400044 	addi	r5,r17,1
1000cdd8:	00c007c4 	movi	r3,31
1000cddc:	19406716 	blt	r3,r5,1000cf7c <__subdf3+0x3fc>
1000cde0:	1c47c83a 	sub	r3,r3,r17
1000cde4:	8148d83a 	srl	r4,r16,r5
1000cde8:	80e0983a 	sll	r16,r16,r3
1000cdec:	10c6983a 	sll	r3,r2,r3
1000cdf0:	114ad83a 	srl	r5,r2,r5
1000cdf4:	8004c03a 	cmpne	r2,r16,zero
1000cdf8:	20e0b03a 	or	r16,r4,r3
1000cdfc:	80a0b03a 	or	r16,r16,r2
1000ce00:	0023883a 	mov	r17,zero
1000ce04:	003f8106 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000ce08:	2880202c 	andhi	r2,r5,128
1000ce0c:	9240004c 	andi	r9,r18,1
1000ce10:	103f8a1e 	bne	r2,zero,1000cc3c <__alt_data_end+0xf800cc3c>
1000ce14:	2804977a 	slli	r2,r5,29
1000ce18:	8020d0fa 	srli	r16,r16,3
1000ce1c:	00c1ffc4 	movi	r3,2047
1000ce20:	280ad0fa 	srli	r5,r5,3
1000ce24:	1404b03a 	or	r2,r2,r16
1000ce28:	88c0031e 	bne	r17,r3,1000ce38 <__subdf3+0x2b8>
1000ce2c:	1146b03a 	or	r3,r2,r5
1000ce30:	18003726 	beq	r3,zero,1000cf10 <__subdf3+0x390>
1000ce34:	29400234 	orhi	r5,r5,8
1000ce38:	00c00434 	movhi	r3,16
1000ce3c:	18ffffc4 	addi	r3,r3,-1
1000ce40:	28ca703a 	and	r5,r5,r3
1000ce44:	003f8806 	br	1000cc68 <__alt_data_end+0xf800cc68>
1000ce48:	18ffffc4 	addi	r3,r3,-1
1000ce4c:	1800481e 	bne	r3,zero,1000cf70 <__subdf3+0x3f0>
1000ce50:	818dc83a 	sub	r6,r16,r6
1000ce54:	81a1803a 	cmpltu	r16,r16,r6
1000ce58:	2a0bc83a 	sub	r5,r5,r8
1000ce5c:	2c0bc83a 	sub	r5,r5,r16
1000ce60:	3021883a 	mov	r16,r6
1000ce64:	003fc806 	br	1000cd88 <__alt_data_end+0xf800cd88>
1000ce68:	4184b03a 	or	r2,r8,r6
1000ce6c:	103f6726 	beq	r2,zero,1000cc0c <__alt_data_end+0xf800cc0c>
1000ce70:	18ffffc4 	addi	r3,r3,-1
1000ce74:	1800931e 	bne	r3,zero,1000d0c4 <__subdf3+0x544>
1000ce78:	340d883a 	add	r6,r6,r16
1000ce7c:	3421803a 	cmpltu	r16,r6,r16
1000ce80:	414b883a 	add	r5,r8,r5
1000ce84:	2c0b883a 	add	r5,r5,r16
1000ce88:	3021883a 	mov	r16,r6
1000ce8c:	003f9a06 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000ce90:	1800531e 	bne	r3,zero,1000cfe0 <__subdf3+0x460>
1000ce94:	88800044 	addi	r2,r17,1
1000ce98:	1081ffcc 	andi	r2,r2,2047
1000ce9c:	00c00044 	movi	r3,1
1000cea0:	1880a00e 	bge	r3,r2,1000d124 <__subdf3+0x5a4>
1000cea4:	8185c83a 	sub	r2,r16,r6
1000cea8:	8087803a 	cmpltu	r3,r16,r2
1000ceac:	2a27c83a 	sub	r19,r5,r8
1000ceb0:	98e7c83a 	sub	r19,r19,r3
1000ceb4:	98c0202c 	andhi	r3,r19,128
1000ceb8:	18006226 	beq	r3,zero,1000d044 <__subdf3+0x4c4>
1000cebc:	3421c83a 	sub	r16,r6,r16
1000cec0:	414bc83a 	sub	r5,r8,r5
1000cec4:	340d803a 	cmpltu	r6,r6,r16
1000cec8:	29a7c83a 	sub	r19,r5,r6
1000cecc:	3825883a 	mov	r18,r7
1000ced0:	983fb31e 	bne	r19,zero,1000cda0 <__alt_data_end+0xf800cda0>
1000ced4:	8009883a 	mov	r4,r16
1000ced8:	000d5f80 	call	1000d5f8 <__clzsi2>
1000cedc:	10800804 	addi	r2,r2,32
1000cee0:	10fffe04 	addi	r3,r2,-8
1000cee4:	010007c4 	movi	r4,31
1000cee8:	20ffb20e 	bge	r4,r3,1000cdb4 <__alt_data_end+0xf800cdb4>
1000ceec:	10bff604 	addi	r2,r2,-40
1000cef0:	8084983a 	sll	r2,r16,r2
1000cef4:	0021883a 	mov	r16,zero
1000cef8:	1c7fb50e 	bge	r3,r17,1000cdd0 <__alt_data_end+0xf800cdd0>
1000cefc:	017fe034 	movhi	r5,65408
1000cf00:	297fffc4 	addi	r5,r5,-1
1000cf04:	88e3c83a 	sub	r17,r17,r3
1000cf08:	114a703a 	and	r5,r2,r5
1000cf0c:	003f3f06 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000cf10:	000b883a 	mov	r5,zero
1000cf14:	0005883a 	mov	r2,zero
1000cf18:	003f5306 	br	1000cc68 <__alt_data_end+0xf800cc68>
1000cf1c:	418cb03a 	or	r6,r8,r6
1000cf20:	300cc03a 	cmpne	r6,r6,zero
1000cf24:	0007883a 	mov	r3,zero
1000cf28:	003f9206 	br	1000cd74 <__alt_data_end+0xf800cd74>
1000cf2c:	1800961e 	bne	r3,zero,1000d188 <__subdf3+0x608>
1000cf30:	88800044 	addi	r2,r17,1
1000cf34:	1101ffcc 	andi	r4,r2,2047
1000cf38:	00c00044 	movi	r3,1
1000cf3c:	1900680e 	bge	r3,r4,1000d0e0 <__subdf3+0x560>
1000cf40:	00c1ffc4 	movi	r3,2047
1000cf44:	10c0b626 	beq	r2,r3,1000d220 <__subdf3+0x6a0>
1000cf48:	340d883a 	add	r6,r6,r16
1000cf4c:	3421803a 	cmpltu	r16,r6,r16
1000cf50:	414b883a 	add	r5,r8,r5
1000cf54:	2c0b883a 	add	r5,r5,r16
1000cf58:	282097fa 	slli	r16,r5,31
1000cf5c:	300cd07a 	srli	r6,r6,1
1000cf60:	280ad07a 	srli	r5,r5,1
1000cf64:	1023883a 	mov	r17,r2
1000cf68:	81a0b03a 	or	r16,r16,r6
1000cf6c:	003f2706 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000cf70:	0081ffc4 	movi	r2,2047
1000cf74:	88bf721e 	bne	r17,r2,1000cd40 <__alt_data_end+0xf800cd40>
1000cf78:	003f2406 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000cf7c:	893ff844 	addi	r4,r17,-31
1000cf80:	00c00804 	movi	r3,32
1000cf84:	1108d83a 	srl	r4,r2,r4
1000cf88:	28c05126 	beq	r5,r3,1000d0d0 <__subdf3+0x550>
1000cf8c:	00c00fc4 	movi	r3,63
1000cf90:	1c63c83a 	sub	r17,r3,r17
1000cf94:	1444983a 	sll	r2,r2,r17
1000cf98:	1420b03a 	or	r16,r2,r16
1000cf9c:	8020c03a 	cmpne	r16,r16,zero
1000cfa0:	8120b03a 	or	r16,r16,r4
1000cfa4:	000b883a 	mov	r5,zero
1000cfa8:	0023883a 	mov	r17,zero
1000cfac:	003f1706 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000cfb0:	18bff804 	addi	r2,r3,-32
1000cfb4:	01000804 	movi	r4,32
1000cfb8:	4084d83a 	srl	r2,r8,r2
1000cfbc:	19004626 	beq	r3,r4,1000d0d8 <__subdf3+0x558>
1000cfc0:	01001004 	movi	r4,64
1000cfc4:	20c7c83a 	sub	r3,r4,r3
1000cfc8:	40d0983a 	sll	r8,r8,r3
1000cfcc:	418cb03a 	or	r6,r8,r6
1000cfd0:	300cc03a 	cmpne	r6,r6,zero
1000cfd4:	308cb03a 	or	r6,r6,r2
1000cfd8:	0007883a 	mov	r3,zero
1000cfdc:	003f6506 	br	1000cd74 <__alt_data_end+0xf800cd74>
1000cfe0:	88002b26 	beq	r17,zero,1000d090 <__subdf3+0x510>
1000cfe4:	0101ffc4 	movi	r4,2047
1000cfe8:	11002f26 	beq	r2,r4,1000d0a8 <__subdf3+0x528>
1000cfec:	00c7c83a 	sub	r3,zero,r3
1000cff0:	29402034 	orhi	r5,r5,128
1000cff4:	01000e04 	movi	r4,56
1000cff8:	20c08516 	blt	r4,r3,1000d210 <__subdf3+0x690>
1000cffc:	010007c4 	movi	r4,31
1000d000:	20c0cd16 	blt	r4,r3,1000d338 <__subdf3+0x7b8>
1000d004:	01000804 	movi	r4,32
1000d008:	20c9c83a 	sub	r4,r4,r3
1000d00c:	2914983a 	sll	r10,r5,r4
1000d010:	80d2d83a 	srl	r9,r16,r3
1000d014:	8108983a 	sll	r4,r16,r4
1000d018:	28cad83a 	srl	r5,r5,r3
1000d01c:	5252b03a 	or	r9,r10,r9
1000d020:	2006c03a 	cmpne	r3,r4,zero
1000d024:	48e0b03a 	or	r16,r9,r3
1000d028:	3421c83a 	sub	r16,r6,r16
1000d02c:	414bc83a 	sub	r5,r8,r5
1000d030:	340d803a 	cmpltu	r6,r6,r16
1000d034:	298bc83a 	sub	r5,r5,r6
1000d038:	1023883a 	mov	r17,r2
1000d03c:	3825883a 	mov	r18,r7
1000d040:	003f5106 	br	1000cd88 <__alt_data_end+0xf800cd88>
1000d044:	9886b03a 	or	r3,r19,r2
1000d048:	18001c1e 	bne	r3,zero,1000d0bc <__subdf3+0x53c>
1000d04c:	0013883a 	mov	r9,zero
1000d050:	000b883a 	mov	r5,zero
1000d054:	0021883a 	mov	r16,zero
1000d058:	0023883a 	mov	r17,zero
1000d05c:	003f6d06 	br	1000ce14 <__alt_data_end+0xf800ce14>
1000d060:	008007c4 	movi	r2,31
1000d064:	10c03c16 	blt	r2,r3,1000d158 <__subdf3+0x5d8>
1000d068:	00800804 	movi	r2,32
1000d06c:	10c5c83a 	sub	r2,r2,r3
1000d070:	30c8d83a 	srl	r4,r6,r3
1000d074:	408e983a 	sll	r7,r8,r2
1000d078:	3084983a 	sll	r2,r6,r2
1000d07c:	40c6d83a 	srl	r3,r8,r3
1000d080:	3908b03a 	or	r4,r7,r4
1000d084:	1004c03a 	cmpne	r2,r2,zero
1000d088:	208cb03a 	or	r6,r4,r2
1000d08c:	003f1506 	br	1000cce4 <__alt_data_end+0xf800cce4>
1000d090:	2c08b03a 	or	r4,r5,r16
1000d094:	20000426 	beq	r4,zero,1000d0a8 <__subdf3+0x528>
1000d098:	00c6303a 	nor	r3,zero,r3
1000d09c:	183fe226 	beq	r3,zero,1000d028 <__alt_data_end+0xf800d028>
1000d0a0:	0101ffc4 	movi	r4,2047
1000d0a4:	113fd31e 	bne	r2,r4,1000cff4 <__alt_data_end+0xf800cff4>
1000d0a8:	400b883a 	mov	r5,r8
1000d0ac:	3021883a 	mov	r16,r6
1000d0b0:	1023883a 	mov	r17,r2
1000d0b4:	3825883a 	mov	r18,r7
1000d0b8:	003ed406 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d0bc:	1021883a 	mov	r16,r2
1000d0c0:	003f3606 	br	1000cd9c <__alt_data_end+0xf800cd9c>
1000d0c4:	0081ffc4 	movi	r2,2047
1000d0c8:	88bf011e 	bne	r17,r2,1000ccd0 <__alt_data_end+0xf800ccd0>
1000d0cc:	003ecf06 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d0d0:	0005883a 	mov	r2,zero
1000d0d4:	003fb006 	br	1000cf98 <__alt_data_end+0xf800cf98>
1000d0d8:	0011883a 	mov	r8,zero
1000d0dc:	003fbb06 	br	1000cfcc <__alt_data_end+0xf800cfcc>
1000d0e0:	2c04b03a 	or	r2,r5,r16
1000d0e4:	88007f1e 	bne	r17,zero,1000d2e4 <__subdf3+0x764>
1000d0e8:	1000a926 	beq	r2,zero,1000d390 <__subdf3+0x810>
1000d0ec:	4184b03a 	or	r2,r8,r6
1000d0f0:	103ec626 	beq	r2,zero,1000cc0c <__alt_data_end+0xf800cc0c>
1000d0f4:	340d883a 	add	r6,r6,r16
1000d0f8:	414b883a 	add	r5,r8,r5
1000d0fc:	3421803a 	cmpltu	r16,r6,r16
1000d100:	2c0b883a 	add	r5,r5,r16
1000d104:	2880202c 	andhi	r2,r5,128
1000d108:	1000bb26 	beq	r2,zero,1000d3f8 <__subdf3+0x878>
1000d10c:	00bfe034 	movhi	r2,65408
1000d110:	10bfffc4 	addi	r2,r2,-1
1000d114:	288a703a 	and	r5,r5,r2
1000d118:	3021883a 	mov	r16,r6
1000d11c:	1823883a 	mov	r17,r3
1000d120:	003eba06 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d124:	2c04b03a 	or	r2,r5,r16
1000d128:	8800311e 	bne	r17,zero,1000d1f0 <__subdf3+0x670>
1000d12c:	1000451e 	bne	r2,zero,1000d244 <__subdf3+0x6c4>
1000d130:	4184b03a 	or	r2,r8,r6
1000d134:	10000426 	beq	r2,zero,1000d148 <__subdf3+0x5c8>
1000d138:	400b883a 	mov	r5,r8
1000d13c:	3021883a 	mov	r16,r6
1000d140:	3825883a 	mov	r18,r7
1000d144:	003eb106 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d148:	0013883a 	mov	r9,zero
1000d14c:	000b883a 	mov	r5,zero
1000d150:	0021883a 	mov	r16,zero
1000d154:	003f2f06 	br	1000ce14 <__alt_data_end+0xf800ce14>
1000d158:	18bff804 	addi	r2,r3,-32
1000d15c:	01000804 	movi	r4,32
1000d160:	4084d83a 	srl	r2,r8,r2
1000d164:	19007226 	beq	r3,r4,1000d330 <__subdf3+0x7b0>
1000d168:	01001004 	movi	r4,64
1000d16c:	20c7c83a 	sub	r3,r4,r3
1000d170:	40d0983a 	sll	r8,r8,r3
1000d174:	418cb03a 	or	r6,r8,r6
1000d178:	300cc03a 	cmpne	r6,r6,zero
1000d17c:	308cb03a 	or	r6,r6,r2
1000d180:	0007883a 	mov	r3,zero
1000d184:	003ed706 	br	1000cce4 <__alt_data_end+0xf800cce4>
1000d188:	8800291e 	bne	r17,zero,1000d230 <__subdf3+0x6b0>
1000d18c:	2c08b03a 	or	r4,r5,r16
1000d190:	20005026 	beq	r4,zero,1000d2d4 <__subdf3+0x754>
1000d194:	00c6303a 	nor	r3,zero,r3
1000d198:	18000f26 	beq	r3,zero,1000d1d8 <__subdf3+0x658>
1000d19c:	0101ffc4 	movi	r4,2047
1000d1a0:	11004c26 	beq	r2,r4,1000d2d4 <__subdf3+0x754>
1000d1a4:	01000e04 	movi	r4,56
1000d1a8:	20c07516 	blt	r4,r3,1000d380 <__subdf3+0x800>
1000d1ac:	010007c4 	movi	r4,31
1000d1b0:	20c08316 	blt	r4,r3,1000d3c0 <__subdf3+0x840>
1000d1b4:	01000804 	movi	r4,32
1000d1b8:	20c9c83a 	sub	r4,r4,r3
1000d1bc:	2914983a 	sll	r10,r5,r4
1000d1c0:	80ced83a 	srl	r7,r16,r3
1000d1c4:	8108983a 	sll	r4,r16,r4
1000d1c8:	28cad83a 	srl	r5,r5,r3
1000d1cc:	51ceb03a 	or	r7,r10,r7
1000d1d0:	2006c03a 	cmpne	r3,r4,zero
1000d1d4:	38e0b03a 	or	r16,r7,r3
1000d1d8:	81a1883a 	add	r16,r16,r6
1000d1dc:	2a0b883a 	add	r5,r5,r8
1000d1e0:	818d803a 	cmpltu	r6,r16,r6
1000d1e4:	298b883a 	add	r5,r5,r6
1000d1e8:	1023883a 	mov	r17,r2
1000d1ec:	003ec206 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d1f0:	1000221e 	bne	r2,zero,1000d27c <__subdf3+0x6fc>
1000d1f4:	4184b03a 	or	r2,r8,r6
1000d1f8:	10005b26 	beq	r2,zero,1000d368 <__subdf3+0x7e8>
1000d1fc:	400b883a 	mov	r5,r8
1000d200:	3021883a 	mov	r16,r6
1000d204:	3825883a 	mov	r18,r7
1000d208:	0441ffc4 	movi	r17,2047
1000d20c:	003e7f06 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d210:	2c20b03a 	or	r16,r5,r16
1000d214:	8020c03a 	cmpne	r16,r16,zero
1000d218:	000b883a 	mov	r5,zero
1000d21c:	003f8206 	br	1000d028 <__alt_data_end+0xf800d028>
1000d220:	1023883a 	mov	r17,r2
1000d224:	000b883a 	mov	r5,zero
1000d228:	0021883a 	mov	r16,zero
1000d22c:	003ef906 	br	1000ce14 <__alt_data_end+0xf800ce14>
1000d230:	0101ffc4 	movi	r4,2047
1000d234:	11002726 	beq	r2,r4,1000d2d4 <__subdf3+0x754>
1000d238:	00c7c83a 	sub	r3,zero,r3
1000d23c:	29402034 	orhi	r5,r5,128
1000d240:	003fd806 	br	1000d1a4 <__alt_data_end+0xf800d1a4>
1000d244:	4184b03a 	or	r2,r8,r6
1000d248:	103e7026 	beq	r2,zero,1000cc0c <__alt_data_end+0xf800cc0c>
1000d24c:	8185c83a 	sub	r2,r16,r6
1000d250:	8089803a 	cmpltu	r4,r16,r2
1000d254:	2a07c83a 	sub	r3,r5,r8
1000d258:	1907c83a 	sub	r3,r3,r4
1000d25c:	1900202c 	andhi	r4,r3,128
1000d260:	20005226 	beq	r4,zero,1000d3ac <__subdf3+0x82c>
1000d264:	3421c83a 	sub	r16,r6,r16
1000d268:	414bc83a 	sub	r5,r8,r5
1000d26c:	340d803a 	cmpltu	r6,r6,r16
1000d270:	298bc83a 	sub	r5,r5,r6
1000d274:	3825883a 	mov	r18,r7
1000d278:	003e6406 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d27c:	4184b03a 	or	r2,r8,r6
1000d280:	10002926 	beq	r2,zero,1000d328 <__subdf3+0x7a8>
1000d284:	2804d0fa 	srli	r2,r5,3
1000d288:	8020d0fa 	srli	r16,r16,3
1000d28c:	280a977a 	slli	r5,r5,29
1000d290:	10c0022c 	andhi	r3,r2,8
1000d294:	2c20b03a 	or	r16,r5,r16
1000d298:	18000826 	beq	r3,zero,1000d2bc <__subdf3+0x73c>
1000d29c:	4006d0fa 	srli	r3,r8,3
1000d2a0:	1900022c 	andhi	r4,r3,8
1000d2a4:	2000051e 	bne	r4,zero,1000d2bc <__subdf3+0x73c>
1000d2a8:	300cd0fa 	srli	r6,r6,3
1000d2ac:	4010977a 	slli	r8,r8,29
1000d2b0:	1805883a 	mov	r2,r3
1000d2b4:	3825883a 	mov	r18,r7
1000d2b8:	41a0b03a 	or	r16,r8,r6
1000d2bc:	800ad77a 	srli	r5,r16,29
1000d2c0:	100490fa 	slli	r2,r2,3
1000d2c4:	802090fa 	slli	r16,r16,3
1000d2c8:	0441ffc4 	movi	r17,2047
1000d2cc:	288ab03a 	or	r5,r5,r2
1000d2d0:	003e4e06 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d2d4:	400b883a 	mov	r5,r8
1000d2d8:	3021883a 	mov	r16,r6
1000d2dc:	1023883a 	mov	r17,r2
1000d2e0:	003e4a06 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d2e4:	10002d26 	beq	r2,zero,1000d39c <__subdf3+0x81c>
1000d2e8:	4184b03a 	or	r2,r8,r6
1000d2ec:	10000e26 	beq	r2,zero,1000d328 <__subdf3+0x7a8>
1000d2f0:	2804d0fa 	srli	r2,r5,3
1000d2f4:	8020d0fa 	srli	r16,r16,3
1000d2f8:	280a977a 	slli	r5,r5,29
1000d2fc:	10c0022c 	andhi	r3,r2,8
1000d300:	2c20b03a 	or	r16,r5,r16
1000d304:	183fed26 	beq	r3,zero,1000d2bc <__alt_data_end+0xf800d2bc>
1000d308:	4006d0fa 	srli	r3,r8,3
1000d30c:	1900022c 	andhi	r4,r3,8
1000d310:	203fea1e 	bne	r4,zero,1000d2bc <__alt_data_end+0xf800d2bc>
1000d314:	300cd0fa 	srli	r6,r6,3
1000d318:	4010977a 	slli	r8,r8,29
1000d31c:	1805883a 	mov	r2,r3
1000d320:	41a0b03a 	or	r16,r8,r6
1000d324:	003fe506 	br	1000d2bc <__alt_data_end+0xf800d2bc>
1000d328:	0441ffc4 	movi	r17,2047
1000d32c:	003e3706 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d330:	0011883a 	mov	r8,zero
1000d334:	003f8f06 	br	1000d174 <__alt_data_end+0xf800d174>
1000d338:	193ff804 	addi	r4,r3,-32
1000d33c:	02400804 	movi	r9,32
1000d340:	2908d83a 	srl	r4,r5,r4
1000d344:	1a402a26 	beq	r3,r9,1000d3f0 <__subdf3+0x870>
1000d348:	02401004 	movi	r9,64
1000d34c:	48c7c83a 	sub	r3,r9,r3
1000d350:	28ca983a 	sll	r5,r5,r3
1000d354:	2c20b03a 	or	r16,r5,r16
1000d358:	8020c03a 	cmpne	r16,r16,zero
1000d35c:	8120b03a 	or	r16,r16,r4
1000d360:	000b883a 	mov	r5,zero
1000d364:	003f3006 	br	1000d028 <__alt_data_end+0xf800d028>
1000d368:	0013883a 	mov	r9,zero
1000d36c:	01402034 	movhi	r5,128
1000d370:	297fffc4 	addi	r5,r5,-1
1000d374:	043ffe04 	movi	r16,-8
1000d378:	0441ffc4 	movi	r17,2047
1000d37c:	003ea506 	br	1000ce14 <__alt_data_end+0xf800ce14>
1000d380:	2c20b03a 	or	r16,r5,r16
1000d384:	8020c03a 	cmpne	r16,r16,zero
1000d388:	000b883a 	mov	r5,zero
1000d38c:	003f9206 	br	1000d1d8 <__alt_data_end+0xf800d1d8>
1000d390:	400b883a 	mov	r5,r8
1000d394:	3021883a 	mov	r16,r6
1000d398:	003e1c06 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d39c:	400b883a 	mov	r5,r8
1000d3a0:	3021883a 	mov	r16,r6
1000d3a4:	0441ffc4 	movi	r17,2047
1000d3a8:	003e1806 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d3ac:	1888b03a 	or	r4,r3,r2
1000d3b0:	203f6526 	beq	r4,zero,1000d148 <__alt_data_end+0xf800d148>
1000d3b4:	180b883a 	mov	r5,r3
1000d3b8:	1021883a 	mov	r16,r2
1000d3bc:	003e1306 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d3c0:	193ff804 	addi	r4,r3,-32
1000d3c4:	01c00804 	movi	r7,32
1000d3c8:	2908d83a 	srl	r4,r5,r4
1000d3cc:	19c00c26 	beq	r3,r7,1000d400 <__subdf3+0x880>
1000d3d0:	01c01004 	movi	r7,64
1000d3d4:	38c7c83a 	sub	r3,r7,r3
1000d3d8:	28ca983a 	sll	r5,r5,r3
1000d3dc:	2c20b03a 	or	r16,r5,r16
1000d3e0:	8020c03a 	cmpne	r16,r16,zero
1000d3e4:	8120b03a 	or	r16,r16,r4
1000d3e8:	000b883a 	mov	r5,zero
1000d3ec:	003f7a06 	br	1000d1d8 <__alt_data_end+0xf800d1d8>
1000d3f0:	000b883a 	mov	r5,zero
1000d3f4:	003fd706 	br	1000d354 <__alt_data_end+0xf800d354>
1000d3f8:	3021883a 	mov	r16,r6
1000d3fc:	003e0306 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d400:	000b883a 	mov	r5,zero
1000d404:	003ff506 	br	1000d3dc <__alt_data_end+0xf800d3dc>

1000d408 <__fixdfsi>:
1000d408:	2806d53a 	srli	r3,r5,20
1000d40c:	00800434 	movhi	r2,16
1000d410:	10bfffc4 	addi	r2,r2,-1
1000d414:	0180ff84 	movi	r6,1022
1000d418:	18c1ffcc 	andi	r3,r3,2047
1000d41c:	2884703a 	and	r2,r5,r2
1000d420:	280ad7fa 	srli	r5,r5,31
1000d424:	30c0120e 	bge	r6,r3,1000d470 <__fixdfsi+0x68>
1000d428:	01810744 	movi	r6,1053
1000d42c:	30c00c16 	blt	r6,r3,1000d460 <__fixdfsi+0x58>
1000d430:	01810cc4 	movi	r6,1075
1000d434:	30cdc83a 	sub	r6,r6,r3
1000d438:	01c007c4 	movi	r7,31
1000d43c:	10800434 	orhi	r2,r2,16
1000d440:	39800d16 	blt	r7,r6,1000d478 <__fixdfsi+0x70>
1000d444:	18fefb44 	addi	r3,r3,-1043
1000d448:	2188d83a 	srl	r4,r4,r6
1000d44c:	10c4983a 	sll	r2,r2,r3
1000d450:	2084b03a 	or	r2,r4,r2
1000d454:	28000726 	beq	r5,zero,1000d474 <__fixdfsi+0x6c>
1000d458:	0085c83a 	sub	r2,zero,r2
1000d45c:	f800283a 	ret
1000d460:	00a00034 	movhi	r2,32768
1000d464:	10bfffc4 	addi	r2,r2,-1
1000d468:	2885883a 	add	r2,r5,r2
1000d46c:	f800283a 	ret
1000d470:	0005883a 	mov	r2,zero
1000d474:	f800283a 	ret
1000d478:	010104c4 	movi	r4,1043
1000d47c:	20c7c83a 	sub	r3,r4,r3
1000d480:	10c4d83a 	srl	r2,r2,r3
1000d484:	003ff306 	br	1000d454 <__alt_data_end+0xf800d454>

1000d488 <__floatsidf>:
1000d488:	defffd04 	addi	sp,sp,-12
1000d48c:	dc000015 	stw	r16,0(sp)
1000d490:	dfc00215 	stw	ra,8(sp)
1000d494:	dc400115 	stw	r17,4(sp)
1000d498:	2021883a 	mov	r16,r4
1000d49c:	20002926 	beq	r4,zero,1000d544 <__floatsidf+0xbc>
1000d4a0:	2022d7fa 	srli	r17,r4,31
1000d4a4:	88000126 	beq	r17,zero,1000d4ac <__floatsidf+0x24>
1000d4a8:	0121c83a 	sub	r16,zero,r4
1000d4ac:	8009883a 	mov	r4,r16
1000d4b0:	000d5f80 	call	1000d5f8 <__clzsi2>
1000d4b4:	01810784 	movi	r6,1054
1000d4b8:	00c00284 	movi	r3,10
1000d4bc:	308dc83a 	sub	r6,r6,r2
1000d4c0:	1880150e 	bge	r3,r2,1000d518 <__floatsidf+0x90>
1000d4c4:	113ffd44 	addi	r4,r2,-11
1000d4c8:	8108983a 	sll	r4,r16,r4
1000d4cc:	00800434 	movhi	r2,16
1000d4d0:	10bfffc4 	addi	r2,r2,-1
1000d4d4:	3181ffcc 	andi	r6,r6,2047
1000d4d8:	2088703a 	and	r4,r4,r2
1000d4dc:	880b883a 	mov	r5,r17
1000d4e0:	0005883a 	mov	r2,zero
1000d4e4:	300c953a 	slli	r6,r6,20
1000d4e8:	29403fcc 	andi	r5,r5,255
1000d4ec:	280a97fa 	slli	r5,r5,31
1000d4f0:	00c00434 	movhi	r3,16
1000d4f4:	18ffffc4 	addi	r3,r3,-1
1000d4f8:	20c8703a 	and	r4,r4,r3
1000d4fc:	2186b03a 	or	r3,r4,r6
1000d500:	1946b03a 	or	r3,r3,r5
1000d504:	dfc00217 	ldw	ra,8(sp)
1000d508:	dc400117 	ldw	r17,4(sp)
1000d50c:	dc000017 	ldw	r16,0(sp)
1000d510:	dec00304 	addi	sp,sp,12
1000d514:	f800283a 	ret
1000d518:	010002c4 	movi	r4,11
1000d51c:	2089c83a 	sub	r4,r4,r2
1000d520:	8108d83a 	srl	r4,r16,r4
1000d524:	10800544 	addi	r2,r2,21
1000d528:	00c00434 	movhi	r3,16
1000d52c:	18ffffc4 	addi	r3,r3,-1
1000d530:	8084983a 	sll	r2,r16,r2
1000d534:	20c8703a 	and	r4,r4,r3
1000d538:	3181ffcc 	andi	r6,r6,2047
1000d53c:	880b883a 	mov	r5,r17
1000d540:	003fe806 	br	1000d4e4 <__alt_data_end+0xf800d4e4>
1000d544:	000b883a 	mov	r5,zero
1000d548:	000d883a 	mov	r6,zero
1000d54c:	0009883a 	mov	r4,zero
1000d550:	0005883a 	mov	r2,zero
1000d554:	003fe306 	br	1000d4e4 <__alt_data_end+0xf800d4e4>

1000d558 <__floatunsidf>:
1000d558:	defffe04 	addi	sp,sp,-8
1000d55c:	dc000015 	stw	r16,0(sp)
1000d560:	dfc00115 	stw	ra,4(sp)
1000d564:	2021883a 	mov	r16,r4
1000d568:	20001f26 	beq	r4,zero,1000d5e8 <__floatunsidf+0x90>
1000d56c:	000d5f80 	call	1000d5f8 <__clzsi2>
1000d570:	01010784 	movi	r4,1054
1000d574:	00c00284 	movi	r3,10
1000d578:	2089c83a 	sub	r4,r4,r2
1000d57c:	1880100e 	bge	r3,r2,1000d5c0 <__floatunsidf+0x68>
1000d580:	117ffd44 	addi	r5,r2,-11
1000d584:	814a983a 	sll	r5,r16,r5
1000d588:	00800434 	movhi	r2,16
1000d58c:	10bfffc4 	addi	r2,r2,-1
1000d590:	2101ffcc 	andi	r4,r4,2047
1000d594:	288a703a 	and	r5,r5,r2
1000d598:	0005883a 	mov	r2,zero
1000d59c:	2008953a 	slli	r4,r4,20
1000d5a0:	00c00434 	movhi	r3,16
1000d5a4:	18ffffc4 	addi	r3,r3,-1
1000d5a8:	28c6703a 	and	r3,r5,r3
1000d5ac:	1906b03a 	or	r3,r3,r4
1000d5b0:	dfc00117 	ldw	ra,4(sp)
1000d5b4:	dc000017 	ldw	r16,0(sp)
1000d5b8:	dec00204 	addi	sp,sp,8
1000d5bc:	f800283a 	ret
1000d5c0:	014002c4 	movi	r5,11
1000d5c4:	288bc83a 	sub	r5,r5,r2
1000d5c8:	814ad83a 	srl	r5,r16,r5
1000d5cc:	10800544 	addi	r2,r2,21
1000d5d0:	00c00434 	movhi	r3,16
1000d5d4:	18ffffc4 	addi	r3,r3,-1
1000d5d8:	8084983a 	sll	r2,r16,r2
1000d5dc:	28ca703a 	and	r5,r5,r3
1000d5e0:	2101ffcc 	andi	r4,r4,2047
1000d5e4:	003fed06 	br	1000d59c <__alt_data_end+0xf800d59c>
1000d5e8:	0009883a 	mov	r4,zero
1000d5ec:	000b883a 	mov	r5,zero
1000d5f0:	0005883a 	mov	r2,zero
1000d5f4:	003fe906 	br	1000d59c <__alt_data_end+0xf800d59c>

1000d5f8 <__clzsi2>:
1000d5f8:	00bfffd4 	movui	r2,65535
1000d5fc:	11000b36 	bltu	r2,r4,1000d62c <__clzsi2+0x34>
1000d600:	00803fc4 	movi	r2,255
1000d604:	11001e2e 	bgeu	r2,r4,1000d680 <__clzsi2+0x88>
1000d608:	00c00204 	movi	r3,8
1000d60c:	20c8d83a 	srl	r4,r4,r3
1000d610:	00c40074 	movhi	r3,4097
1000d614:	18ffc704 	addi	r3,r3,-228
1000d618:	00800604 	movi	r2,24
1000d61c:	1909883a 	add	r4,r3,r4
1000d620:	20c00003 	ldbu	r3,0(r4)
1000d624:	10c5c83a 	sub	r2,r2,r3
1000d628:	f800283a 	ret
1000d62c:	00804034 	movhi	r2,256
1000d630:	10bfffc4 	addi	r2,r2,-1
1000d634:	11000936 	bltu	r2,r4,1000d65c <__clzsi2+0x64>
1000d638:	00800404 	movi	r2,16
1000d63c:	1007883a 	mov	r3,r2
1000d640:	20c8d83a 	srl	r4,r4,r3
1000d644:	00c40074 	movhi	r3,4097
1000d648:	18ffc704 	addi	r3,r3,-228
1000d64c:	1909883a 	add	r4,r3,r4
1000d650:	20c00003 	ldbu	r3,0(r4)
1000d654:	10c5c83a 	sub	r2,r2,r3
1000d658:	f800283a 	ret
1000d65c:	00c00604 	movi	r3,24
1000d660:	20c8d83a 	srl	r4,r4,r3
1000d664:	00c40074 	movhi	r3,4097
1000d668:	18ffc704 	addi	r3,r3,-228
1000d66c:	00800204 	movi	r2,8
1000d670:	1909883a 	add	r4,r3,r4
1000d674:	20c00003 	ldbu	r3,0(r4)
1000d678:	10c5c83a 	sub	r2,r2,r3
1000d67c:	f800283a 	ret
1000d680:	0007883a 	mov	r3,zero
1000d684:	20c8d83a 	srl	r4,r4,r3
1000d688:	00c40074 	movhi	r3,4097
1000d68c:	18ffc704 	addi	r3,r3,-228
1000d690:	00800804 	movi	r2,32
1000d694:	1909883a 	add	r4,r3,r4
1000d698:	20c00003 	ldbu	r3,0(r4)
1000d69c:	10c5c83a 	sub	r2,r2,r3
1000d6a0:	f800283a 	ret

1000d6a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d6a4:	defffe04 	addi	sp,sp,-8
1000d6a8:	dfc00115 	stw	ra,4(sp)
1000d6ac:	df000015 	stw	fp,0(sp)
1000d6b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d6b4:	00840074 	movhi	r2,4097
1000d6b8:	1086cc04 	addi	r2,r2,6960
1000d6bc:	10800017 	ldw	r2,0(r2)
1000d6c0:	10000526 	beq	r2,zero,1000d6d8 <alt_get_errno+0x34>
1000d6c4:	00840074 	movhi	r2,4097
1000d6c8:	1086cc04 	addi	r2,r2,6960
1000d6cc:	10800017 	ldw	r2,0(r2)
1000d6d0:	103ee83a 	callr	r2
1000d6d4:	00000206 	br	1000d6e0 <alt_get_errno+0x3c>
1000d6d8:	00840074 	movhi	r2,4097
1000d6dc:	108d9404 	addi	r2,r2,13904
}
1000d6e0:	e037883a 	mov	sp,fp
1000d6e4:	dfc00117 	ldw	ra,4(sp)
1000d6e8:	df000017 	ldw	fp,0(sp)
1000d6ec:	dec00204 	addi	sp,sp,8
1000d6f0:	f800283a 	ret

1000d6f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000d6f4:	defffb04 	addi	sp,sp,-20
1000d6f8:	dfc00415 	stw	ra,16(sp)
1000d6fc:	df000315 	stw	fp,12(sp)
1000d700:	df000304 	addi	fp,sp,12
1000d704:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000d708:	e0bfff17 	ldw	r2,-4(fp)
1000d70c:	10000816 	blt	r2,zero,1000d730 <close+0x3c>
1000d710:	e13fff17 	ldw	r4,-4(fp)
1000d714:	01400304 	movi	r5,12
1000d718:	000aef80 	call	1000aef8 <__mulsi3>
1000d71c:	1007883a 	mov	r3,r2
1000d720:	00840074 	movhi	r2,4097
1000d724:	10824704 	addi	r2,r2,2332
1000d728:	1885883a 	add	r2,r3,r2
1000d72c:	00000106 	br	1000d734 <close+0x40>
1000d730:	0005883a 	mov	r2,zero
1000d734:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000d738:	e0bffd17 	ldw	r2,-12(fp)
1000d73c:	10001826 	beq	r2,zero,1000d7a0 <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000d740:	e0bffd17 	ldw	r2,-12(fp)
1000d744:	10800017 	ldw	r2,0(r2)
1000d748:	10800417 	ldw	r2,16(r2)
1000d74c:	10000626 	beq	r2,zero,1000d768 <close+0x74>
1000d750:	e0bffd17 	ldw	r2,-12(fp)
1000d754:	10800017 	ldw	r2,0(r2)
1000d758:	10800417 	ldw	r2,16(r2)
1000d75c:	e13ffd17 	ldw	r4,-12(fp)
1000d760:	103ee83a 	callr	r2
1000d764:	00000106 	br	1000d76c <close+0x78>
1000d768:	0005883a 	mov	r2,zero
1000d76c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000d770:	e13fff17 	ldw	r4,-4(fp)
1000d774:	000de880 	call	1000de88 <alt_release_fd>
    if (rval < 0)
1000d778:	e0bffe17 	ldw	r2,-8(fp)
1000d77c:	1000060e 	bge	r2,zero,1000d798 <close+0xa4>
    {
      ALT_ERRNO = -rval;
1000d780:	000d6a40 	call	1000d6a4 <alt_get_errno>
1000d784:	e0fffe17 	ldw	r3,-8(fp)
1000d788:	00c7c83a 	sub	r3,zero,r3
1000d78c:	10c00015 	stw	r3,0(r2)
      return -1;
1000d790:	00bfffc4 	movi	r2,-1
1000d794:	00000606 	br	1000d7b0 <close+0xbc>
    }
    return 0;
1000d798:	0005883a 	mov	r2,zero
1000d79c:	00000406 	br	1000d7b0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d7a0:	000d6a40 	call	1000d6a4 <alt_get_errno>
1000d7a4:	00c01444 	movi	r3,81
1000d7a8:	10c00015 	stw	r3,0(r2)
    return -1;
1000d7ac:	00bfffc4 	movi	r2,-1
  }
}
1000d7b0:	e037883a 	mov	sp,fp
1000d7b4:	dfc00117 	ldw	ra,4(sp)
1000d7b8:	df000017 	ldw	fp,0(sp)
1000d7bc:	dec00204 	addi	sp,sp,8
1000d7c0:	f800283a 	ret

1000d7c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000d7c4:	defffc04 	addi	sp,sp,-16
1000d7c8:	df000315 	stw	fp,12(sp)
1000d7cc:	df000304 	addi	fp,sp,12
1000d7d0:	e13ffd15 	stw	r4,-12(fp)
1000d7d4:	e17ffe15 	stw	r5,-8(fp)
1000d7d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000d7dc:	e0bfff17 	ldw	r2,-4(fp)
}
1000d7e0:	e037883a 	mov	sp,fp
1000d7e4:	df000017 	ldw	fp,0(sp)
1000d7e8:	dec00104 	addi	sp,sp,4
1000d7ec:	f800283a 	ret

1000d7f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000d7f0:	defffa04 	addi	sp,sp,-24
1000d7f4:	dfc00515 	stw	ra,20(sp)
1000d7f8:	df000415 	stw	fp,16(sp)
1000d7fc:	df000404 	addi	fp,sp,16
1000d800:	e13ffe15 	stw	r4,-8(fp)
1000d804:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000d808:	e0bfff17 	ldw	r2,-4(fp)
1000d80c:	10800017 	ldw	r2,0(r2)
1000d810:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000d814:	e13ffe17 	ldw	r4,-8(fp)
1000d818:	00075e40 	call	100075e4 <strlen>
1000d81c:	10800044 	addi	r2,r2,1
1000d820:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000d824:	00000d06 	br	1000d85c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000d828:	e0bffc17 	ldw	r2,-16(fp)
1000d82c:	10c00217 	ldw	r3,8(r2)
1000d830:	e0bffd17 	ldw	r2,-12(fp)
1000d834:	1809883a 	mov	r4,r3
1000d838:	e17ffe17 	ldw	r5,-8(fp)
1000d83c:	100d883a 	mov	r6,r2
1000d840:	000f9b80 	call	1000f9b8 <memcmp>
1000d844:	1000021e 	bne	r2,zero,1000d850 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000d848:	e0bffc17 	ldw	r2,-16(fp)
1000d84c:	00000706 	br	1000d86c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000d850:	e0bffc17 	ldw	r2,-16(fp)
1000d854:	10800017 	ldw	r2,0(r2)
1000d858:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000d85c:	e0fffc17 	ldw	r3,-16(fp)
1000d860:	e0bfff17 	ldw	r2,-4(fp)
1000d864:	18bff01e 	bne	r3,r2,1000d828 <__alt_data_end+0xf800d828>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000d868:	0005883a 	mov	r2,zero
}
1000d86c:	e037883a 	mov	sp,fp
1000d870:	dfc00117 	ldw	ra,4(sp)
1000d874:	df000017 	ldw	fp,0(sp)
1000d878:	dec00204 	addi	sp,sp,8
1000d87c:	f800283a 	ret

1000d880 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d880:	defffe04 	addi	sp,sp,-8
1000d884:	dfc00115 	stw	ra,4(sp)
1000d888:	df000015 	stw	fp,0(sp)
1000d88c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d890:	00840074 	movhi	r2,4097
1000d894:	1086cc04 	addi	r2,r2,6960
1000d898:	10800017 	ldw	r2,0(r2)
1000d89c:	10000526 	beq	r2,zero,1000d8b4 <alt_get_errno+0x34>
1000d8a0:	00840074 	movhi	r2,4097
1000d8a4:	1086cc04 	addi	r2,r2,6960
1000d8a8:	10800017 	ldw	r2,0(r2)
1000d8ac:	103ee83a 	callr	r2
1000d8b0:	00000206 	br	1000d8bc <alt_get_errno+0x3c>
1000d8b4:	00840074 	movhi	r2,4097
1000d8b8:	108d9404 	addi	r2,r2,13904
}
1000d8bc:	e037883a 	mov	sp,fp
1000d8c0:	dfc00117 	ldw	ra,4(sp)
1000d8c4:	df000017 	ldw	fp,0(sp)
1000d8c8:	dec00204 	addi	sp,sp,8
1000d8cc:	f800283a 	ret

1000d8d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000d8d0:	defffb04 	addi	sp,sp,-20
1000d8d4:	dfc00415 	stw	ra,16(sp)
1000d8d8:	df000315 	stw	fp,12(sp)
1000d8dc:	df000304 	addi	fp,sp,12
1000d8e0:	e13ffe15 	stw	r4,-8(fp)
1000d8e4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d8e8:	e0bffe17 	ldw	r2,-8(fp)
1000d8ec:	10000816 	blt	r2,zero,1000d910 <fstat+0x40>
1000d8f0:	e13ffe17 	ldw	r4,-8(fp)
1000d8f4:	01400304 	movi	r5,12
1000d8f8:	000aef80 	call	1000aef8 <__mulsi3>
1000d8fc:	1007883a 	mov	r3,r2
1000d900:	00840074 	movhi	r2,4097
1000d904:	10824704 	addi	r2,r2,2332
1000d908:	1885883a 	add	r2,r3,r2
1000d90c:	00000106 	br	1000d914 <fstat+0x44>
1000d910:	0005883a 	mov	r2,zero
1000d914:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000d918:	e0bffd17 	ldw	r2,-12(fp)
1000d91c:	10001026 	beq	r2,zero,1000d960 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000d920:	e0bffd17 	ldw	r2,-12(fp)
1000d924:	10800017 	ldw	r2,0(r2)
1000d928:	10800817 	ldw	r2,32(r2)
1000d92c:	10000726 	beq	r2,zero,1000d94c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000d930:	e0bffd17 	ldw	r2,-12(fp)
1000d934:	10800017 	ldw	r2,0(r2)
1000d938:	10800817 	ldw	r2,32(r2)
1000d93c:	e13ffd17 	ldw	r4,-12(fp)
1000d940:	e17fff17 	ldw	r5,-4(fp)
1000d944:	103ee83a 	callr	r2
1000d948:	00000906 	br	1000d970 <fstat+0xa0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000d94c:	e0bfff17 	ldw	r2,-4(fp)
1000d950:	00c80004 	movi	r3,8192
1000d954:	10c00115 	stw	r3,4(r2)
      return 0;
1000d958:	0005883a 	mov	r2,zero
1000d95c:	00000406 	br	1000d970 <fstat+0xa0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d960:	000d8800 	call	1000d880 <alt_get_errno>
1000d964:	00c01444 	movi	r3,81
1000d968:	10c00015 	stw	r3,0(r2)
    return -1;
1000d96c:	00bfffc4 	movi	r2,-1
  }
}
1000d970:	e037883a 	mov	sp,fp
1000d974:	dfc00117 	ldw	ra,4(sp)
1000d978:	df000017 	ldw	fp,0(sp)
1000d97c:	dec00204 	addi	sp,sp,8
1000d980:	f800283a 	ret

1000d984 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d984:	defffe04 	addi	sp,sp,-8
1000d988:	dfc00115 	stw	ra,4(sp)
1000d98c:	df000015 	stw	fp,0(sp)
1000d990:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d994:	00840074 	movhi	r2,4097
1000d998:	1086cc04 	addi	r2,r2,6960
1000d99c:	10800017 	ldw	r2,0(r2)
1000d9a0:	10000526 	beq	r2,zero,1000d9b8 <alt_get_errno+0x34>
1000d9a4:	00840074 	movhi	r2,4097
1000d9a8:	1086cc04 	addi	r2,r2,6960
1000d9ac:	10800017 	ldw	r2,0(r2)
1000d9b0:	103ee83a 	callr	r2
1000d9b4:	00000206 	br	1000d9c0 <alt_get_errno+0x3c>
1000d9b8:	00840074 	movhi	r2,4097
1000d9bc:	108d9404 	addi	r2,r2,13904
}
1000d9c0:	e037883a 	mov	sp,fp
1000d9c4:	dfc00117 	ldw	ra,4(sp)
1000d9c8:	df000017 	ldw	fp,0(sp)
1000d9cc:	dec00204 	addi	sp,sp,8
1000d9d0:	f800283a 	ret

1000d9d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000d9d4:	deffed04 	addi	sp,sp,-76
1000d9d8:	dfc01215 	stw	ra,72(sp)
1000d9dc:	df001115 	stw	fp,68(sp)
1000d9e0:	df001104 	addi	fp,sp,68
1000d9e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d9e8:	e0bfff17 	ldw	r2,-4(fp)
1000d9ec:	10000816 	blt	r2,zero,1000da10 <isatty+0x3c>
1000d9f0:	e13fff17 	ldw	r4,-4(fp)
1000d9f4:	01400304 	movi	r5,12
1000d9f8:	000aef80 	call	1000aef8 <__mulsi3>
1000d9fc:	1007883a 	mov	r3,r2
1000da00:	00840074 	movhi	r2,4097
1000da04:	10824704 	addi	r2,r2,2332
1000da08:	1885883a 	add	r2,r3,r2
1000da0c:	00000106 	br	1000da14 <isatty+0x40>
1000da10:	0005883a 	mov	r2,zero
1000da14:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000da18:	e0bfef17 	ldw	r2,-68(fp)
1000da1c:	10000e26 	beq	r2,zero,1000da58 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000da20:	e0bfef17 	ldw	r2,-68(fp)
1000da24:	10800017 	ldw	r2,0(r2)
1000da28:	10800817 	ldw	r2,32(r2)
1000da2c:	1000021e 	bne	r2,zero,1000da38 <isatty+0x64>
    {
      return 1;
1000da30:	00800044 	movi	r2,1
1000da34:	00000c06 	br	1000da68 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000da38:	e0bff004 	addi	r2,fp,-64
1000da3c:	e13fff17 	ldw	r4,-4(fp)
1000da40:	100b883a 	mov	r5,r2
1000da44:	000d8d00 	call	1000d8d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000da48:	e0bff117 	ldw	r2,-60(fp)
1000da4c:	10880020 	cmpeqi	r2,r2,8192
1000da50:	10803fcc 	andi	r2,r2,255
1000da54:	00000406 	br	1000da68 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000da58:	000d9840 	call	1000d984 <alt_get_errno>
1000da5c:	00c01444 	movi	r3,81
1000da60:	10c00015 	stw	r3,0(r2)
    return 0;
1000da64:	0005883a 	mov	r2,zero
  }
}
1000da68:	e037883a 	mov	sp,fp
1000da6c:	dfc00117 	ldw	ra,4(sp)
1000da70:	df000017 	ldw	fp,0(sp)
1000da74:	dec00204 	addi	sp,sp,8
1000da78:	f800283a 	ret

1000da7c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000da7c:	defffc04 	addi	sp,sp,-16
1000da80:	df000315 	stw	fp,12(sp)
1000da84:	df000304 	addi	fp,sp,12
1000da88:	e13ffd15 	stw	r4,-12(fp)
1000da8c:	e17ffe15 	stw	r5,-8(fp)
1000da90:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000da94:	e0fffe17 	ldw	r3,-8(fp)
1000da98:	e0bffd17 	ldw	r2,-12(fp)
1000da9c:	18800c26 	beq	r3,r2,1000dad0 <alt_load_section+0x54>
  {
    while( to != end )
1000daa0:	00000806 	br	1000dac4 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000daa4:	e0bffe17 	ldw	r2,-8(fp)
1000daa8:	10c00104 	addi	r3,r2,4
1000daac:	e0fffe15 	stw	r3,-8(fp)
1000dab0:	e0fffd17 	ldw	r3,-12(fp)
1000dab4:	19000104 	addi	r4,r3,4
1000dab8:	e13ffd15 	stw	r4,-12(fp)
1000dabc:	18c00017 	ldw	r3,0(r3)
1000dac0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000dac4:	e0fffe17 	ldw	r3,-8(fp)
1000dac8:	e0bfff17 	ldw	r2,-4(fp)
1000dacc:	18bff51e 	bne	r3,r2,1000daa4 <__alt_data_end+0xf800daa4>
    {
      *to++ = *from++;
    }
  }
}
1000dad0:	e037883a 	mov	sp,fp
1000dad4:	df000017 	ldw	fp,0(sp)
1000dad8:	dec00104 	addi	sp,sp,4
1000dadc:	f800283a 	ret

1000dae0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000dae0:	defffe04 	addi	sp,sp,-8
1000dae4:	dfc00115 	stw	ra,4(sp)
1000dae8:	df000015 	stw	fp,0(sp)
1000daec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000daf0:	01040074 	movhi	r4,4097
1000daf4:	2106d104 	addi	r4,r4,6980
1000daf8:	01440074 	movhi	r5,4097
1000dafc:	29401404 	addi	r5,r5,80
1000db00:	01840074 	movhi	r6,4097
1000db04:	3186d104 	addi	r6,r6,6980
1000db08:	000da7c0 	call	1000da7c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000db0c:	01040034 	movhi	r4,4096
1000db10:	21000804 	addi	r4,r4,32
1000db14:	01440034 	movhi	r5,4096
1000db18:	29400804 	addi	r5,r5,32
1000db1c:	01840034 	movhi	r6,4096
1000db20:	31806f04 	addi	r6,r6,444
1000db24:	000da7c0 	call	1000da7c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000db28:	01040074 	movhi	r4,4097
1000db2c:	213f4a04 	addi	r4,r4,-728
1000db30:	01440074 	movhi	r5,4097
1000db34:	297f4a04 	addi	r5,r5,-728
1000db38:	01840074 	movhi	r6,4097
1000db3c:	31801404 	addi	r6,r6,80
1000db40:	000da7c0 	call	1000da7c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000db44:	000ed280 	call	1000ed28 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000db48:	000eeec0 	call	1000eeec <alt_icache_flush_all>
}
1000db4c:	e037883a 	mov	sp,fp
1000db50:	dfc00117 	ldw	ra,4(sp)
1000db54:	df000017 	ldw	fp,0(sp)
1000db58:	dec00204 	addi	sp,sp,8
1000db5c:	f800283a 	ret

1000db60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000db60:	defffe04 	addi	sp,sp,-8
1000db64:	dfc00115 	stw	ra,4(sp)
1000db68:	df000015 	stw	fp,0(sp)
1000db6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000db70:	00840074 	movhi	r2,4097
1000db74:	1086cc04 	addi	r2,r2,6960
1000db78:	10800017 	ldw	r2,0(r2)
1000db7c:	10000526 	beq	r2,zero,1000db94 <alt_get_errno+0x34>
1000db80:	00840074 	movhi	r2,4097
1000db84:	1086cc04 	addi	r2,r2,6960
1000db88:	10800017 	ldw	r2,0(r2)
1000db8c:	103ee83a 	callr	r2
1000db90:	00000206 	br	1000db9c <alt_get_errno+0x3c>
1000db94:	00840074 	movhi	r2,4097
1000db98:	108d9404 	addi	r2,r2,13904
}
1000db9c:	e037883a 	mov	sp,fp
1000dba0:	dfc00117 	ldw	ra,4(sp)
1000dba4:	df000017 	ldw	fp,0(sp)
1000dba8:	dec00204 	addi	sp,sp,8
1000dbac:	f800283a 	ret

1000dbb0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000dbb0:	defff904 	addi	sp,sp,-28
1000dbb4:	dfc00615 	stw	ra,24(sp)
1000dbb8:	df000515 	stw	fp,20(sp)
1000dbbc:	df000504 	addi	fp,sp,20
1000dbc0:	e13ffd15 	stw	r4,-12(fp)
1000dbc4:	e17ffe15 	stw	r5,-8(fp)
1000dbc8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000dbcc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dbd0:	e0bffd17 	ldw	r2,-12(fp)
1000dbd4:	10000816 	blt	r2,zero,1000dbf8 <lseek+0x48>
1000dbd8:	e13ffd17 	ldw	r4,-12(fp)
1000dbdc:	01400304 	movi	r5,12
1000dbe0:	000aef80 	call	1000aef8 <__mulsi3>
1000dbe4:	1007883a 	mov	r3,r2
1000dbe8:	00840074 	movhi	r2,4097
1000dbec:	10824704 	addi	r2,r2,2332
1000dbf0:	1885883a 	add	r2,r3,r2
1000dbf4:	00000106 	br	1000dbfc <lseek+0x4c>
1000dbf8:	0005883a 	mov	r2,zero
1000dbfc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000dc00:	e0bffc17 	ldw	r2,-16(fp)
1000dc04:	10001026 	beq	r2,zero,1000dc48 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000dc08:	e0bffc17 	ldw	r2,-16(fp)
1000dc0c:	10800017 	ldw	r2,0(r2)
1000dc10:	10800717 	ldw	r2,28(r2)
1000dc14:	10000926 	beq	r2,zero,1000dc3c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000dc18:	e0bffc17 	ldw	r2,-16(fp)
1000dc1c:	10800017 	ldw	r2,0(r2)
1000dc20:	10800717 	ldw	r2,28(r2)
1000dc24:	e13ffc17 	ldw	r4,-16(fp)
1000dc28:	e17ffe17 	ldw	r5,-8(fp)
1000dc2c:	e1bfff17 	ldw	r6,-4(fp)
1000dc30:	103ee83a 	callr	r2
1000dc34:	e0bffb15 	stw	r2,-20(fp)
1000dc38:	00000506 	br	1000dc50 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000dc3c:	00bfde84 	movi	r2,-134
1000dc40:	e0bffb15 	stw	r2,-20(fp)
1000dc44:	00000206 	br	1000dc50 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000dc48:	00bfebc4 	movi	r2,-81
1000dc4c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000dc50:	e0bffb17 	ldw	r2,-20(fp)
1000dc54:	1000060e 	bge	r2,zero,1000dc70 <lseek+0xc0>
  {
    ALT_ERRNO = -rc;
1000dc58:	000db600 	call	1000db60 <alt_get_errno>
1000dc5c:	e0fffb17 	ldw	r3,-20(fp)
1000dc60:	00c7c83a 	sub	r3,zero,r3
1000dc64:	10c00015 	stw	r3,0(r2)
    rc = -1;
1000dc68:	00bfffc4 	movi	r2,-1
1000dc6c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000dc70:	e0bffb17 	ldw	r2,-20(fp)
}
1000dc74:	e037883a 	mov	sp,fp
1000dc78:	dfc00117 	ldw	ra,4(sp)
1000dc7c:	df000017 	ldw	fp,0(sp)
1000dc80:	dec00204 	addi	sp,sp,8
1000dc84:	f800283a 	ret

1000dc88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000dc88:	defffd04 	addi	sp,sp,-12
1000dc8c:	dfc00215 	stw	ra,8(sp)
1000dc90:	df000115 	stw	fp,4(sp)
1000dc94:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000dc98:	0009883a 	mov	r4,zero
1000dc9c:	000e1340 	call	1000e134 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000dca0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000dca4:	000e1680 	call	1000e168 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000dca8:	01040074 	movhi	r4,4097
1000dcac:	21000a04 	addi	r4,r4,40
1000dcb0:	01440074 	movhi	r5,4097
1000dcb4:	29400a04 	addi	r5,r5,40
1000dcb8:	01840074 	movhi	r6,4097
1000dcbc:	31800a04 	addi	r6,r6,40
1000dcc0:	000f2b00 	call	1000f2b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000dcc4:	000ee340 	call	1000ee34 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000dcc8:	01040074 	movhi	r4,4097
1000dccc:	213ba404 	addi	r4,r4,-4464
1000dcd0:	000f96c0 	call	1000f96c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000dcd4:	d126d617 	ldw	r4,-25768(gp)
1000dcd8:	d0e6d717 	ldw	r3,-25764(gp)
1000dcdc:	d0a6d817 	ldw	r2,-25760(gp)
1000dce0:	180b883a 	mov	r5,r3
1000dce4:	100d883a 	mov	r6,r2
1000dce8:	0000e400 	call	10000e40 <main>
1000dcec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000dcf0:	01000044 	movi	r4,1
1000dcf4:	000d6f40 	call	1000d6f4 <close>
  exit (result);
1000dcf8:	e13fff17 	ldw	r4,-4(fp)
1000dcfc:	000f9800 	call	1000f980 <exit>

1000dd00 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000dd00:	defffe04 	addi	sp,sp,-8
1000dd04:	df000115 	stw	fp,4(sp)
1000dd08:	df000104 	addi	fp,sp,4
1000dd0c:	e13fff15 	stw	r4,-4(fp)
}
1000dd10:	e037883a 	mov	sp,fp
1000dd14:	df000017 	ldw	fp,0(sp)
1000dd18:	dec00104 	addi	sp,sp,4
1000dd1c:	f800283a 	ret

1000dd20 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000dd20:	defffe04 	addi	sp,sp,-8
1000dd24:	df000115 	stw	fp,4(sp)
1000dd28:	df000104 	addi	fp,sp,4
1000dd2c:	e13fff15 	stw	r4,-4(fp)
}
1000dd30:	e037883a 	mov	sp,fp
1000dd34:	df000017 	ldw	fp,0(sp)
1000dd38:	dec00104 	addi	sp,sp,4
1000dd3c:	f800283a 	ret

1000dd40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dd40:	defffe04 	addi	sp,sp,-8
1000dd44:	dfc00115 	stw	ra,4(sp)
1000dd48:	df000015 	stw	fp,0(sp)
1000dd4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dd50:	00840074 	movhi	r2,4097
1000dd54:	1086cc04 	addi	r2,r2,6960
1000dd58:	10800017 	ldw	r2,0(r2)
1000dd5c:	10000526 	beq	r2,zero,1000dd74 <alt_get_errno+0x34>
1000dd60:	00840074 	movhi	r2,4097
1000dd64:	1086cc04 	addi	r2,r2,6960
1000dd68:	10800017 	ldw	r2,0(r2)
1000dd6c:	103ee83a 	callr	r2
1000dd70:	00000206 	br	1000dd7c <alt_get_errno+0x3c>
1000dd74:	00840074 	movhi	r2,4097
1000dd78:	108d9404 	addi	r2,r2,13904
}
1000dd7c:	e037883a 	mov	sp,fp
1000dd80:	dfc00117 	ldw	ra,4(sp)
1000dd84:	df000017 	ldw	fp,0(sp)
1000dd88:	dec00204 	addi	sp,sp,8
1000dd8c:	f800283a 	ret

1000dd90 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000dd90:	defff904 	addi	sp,sp,-28
1000dd94:	dfc00615 	stw	ra,24(sp)
1000dd98:	df000515 	stw	fp,20(sp)
1000dd9c:	df000504 	addi	fp,sp,20
1000dda0:	e13ffd15 	stw	r4,-12(fp)
1000dda4:	e17ffe15 	stw	r5,-8(fp)
1000dda8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ddac:	e0bffd17 	ldw	r2,-12(fp)
1000ddb0:	10000816 	blt	r2,zero,1000ddd4 <read+0x44>
1000ddb4:	e13ffd17 	ldw	r4,-12(fp)
1000ddb8:	01400304 	movi	r5,12
1000ddbc:	000aef80 	call	1000aef8 <__mulsi3>
1000ddc0:	1007883a 	mov	r3,r2
1000ddc4:	00840074 	movhi	r2,4097
1000ddc8:	10824704 	addi	r2,r2,2332
1000ddcc:	1885883a 	add	r2,r3,r2
1000ddd0:	00000106 	br	1000ddd8 <read+0x48>
1000ddd4:	0005883a 	mov	r2,zero
1000ddd8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000dddc:	e0bffb17 	ldw	r2,-20(fp)
1000dde0:	10002026 	beq	r2,zero,1000de64 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000dde4:	e0bffb17 	ldw	r2,-20(fp)
1000dde8:	10800217 	ldw	r2,8(r2)
1000ddec:	108000cc 	andi	r2,r2,3
1000ddf0:	10800060 	cmpeqi	r2,r2,1
1000ddf4:	1000171e 	bne	r2,zero,1000de54 <read+0xc4>
        (fd->dev->read))
1000ddf8:	e0bffb17 	ldw	r2,-20(fp)
1000ddfc:	10800017 	ldw	r2,0(r2)
1000de00:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000de04:	10001326 	beq	r2,zero,1000de54 <read+0xc4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000de08:	e0bffb17 	ldw	r2,-20(fp)
1000de0c:	10800017 	ldw	r2,0(r2)
1000de10:	10800517 	ldw	r2,20(r2)
1000de14:	e0ffff17 	ldw	r3,-4(fp)
1000de18:	e13ffb17 	ldw	r4,-20(fp)
1000de1c:	e17ffe17 	ldw	r5,-8(fp)
1000de20:	180d883a 	mov	r6,r3
1000de24:	103ee83a 	callr	r2
1000de28:	e0bffc15 	stw	r2,-16(fp)
1000de2c:	e0bffc17 	ldw	r2,-16(fp)
1000de30:	1000060e 	bge	r2,zero,1000de4c <read+0xbc>
        {
          ALT_ERRNO = -rval;
1000de34:	000dd400 	call	1000dd40 <alt_get_errno>
1000de38:	e0fffc17 	ldw	r3,-16(fp)
1000de3c:	00c7c83a 	sub	r3,zero,r3
1000de40:	10c00015 	stw	r3,0(r2)
          return -1;
1000de44:	00bfffc4 	movi	r2,-1
1000de48:	00000a06 	br	1000de74 <read+0xe4>
        }
        return rval;
1000de4c:	e0bffc17 	ldw	r2,-16(fp)
1000de50:	00000806 	br	1000de74 <read+0xe4>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000de54:	000dd400 	call	1000dd40 <alt_get_errno>
1000de58:	00c00344 	movi	r3,13
1000de5c:	10c00015 	stw	r3,0(r2)
1000de60:	00000306 	br	1000de70 <read+0xe0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000de64:	000dd400 	call	1000dd40 <alt_get_errno>
1000de68:	00c01444 	movi	r3,81
1000de6c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000de70:	00bfffc4 	movi	r2,-1
}
1000de74:	e037883a 	mov	sp,fp
1000de78:	dfc00117 	ldw	ra,4(sp)
1000de7c:	df000017 	ldw	fp,0(sp)
1000de80:	dec00204 	addi	sp,sp,8
1000de84:	f800283a 	ret

1000de88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000de88:	defffc04 	addi	sp,sp,-16
1000de8c:	dfc00315 	stw	ra,12(sp)
1000de90:	df000215 	stw	fp,8(sp)
1000de94:	dc000115 	stw	r16,4(sp)
1000de98:	df000204 	addi	fp,sp,8
1000de9c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000dea0:	e0bffe17 	ldw	r2,-8(fp)
1000dea4:	108000d0 	cmplti	r2,r2,3
1000dea8:	1000111e 	bne	r2,zero,1000def0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000deac:	04040074 	movhi	r16,4097
1000deb0:	84024704 	addi	r16,r16,2332
1000deb4:	e0bffe17 	ldw	r2,-8(fp)
1000deb8:	1009883a 	mov	r4,r2
1000debc:	01400304 	movi	r5,12
1000dec0:	000aef80 	call	1000aef8 <__mulsi3>
1000dec4:	8085883a 	add	r2,r16,r2
1000dec8:	10800204 	addi	r2,r2,8
1000decc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000ded0:	04040074 	movhi	r16,4097
1000ded4:	84024704 	addi	r16,r16,2332
1000ded8:	e0bffe17 	ldw	r2,-8(fp)
1000dedc:	1009883a 	mov	r4,r2
1000dee0:	01400304 	movi	r5,12
1000dee4:	000aef80 	call	1000aef8 <__mulsi3>
1000dee8:	8085883a 	add	r2,r16,r2
1000deec:	10000015 	stw	zero,0(r2)
  }
}
1000def0:	e6ffff04 	addi	sp,fp,-4
1000def4:	dfc00217 	ldw	ra,8(sp)
1000def8:	df000117 	ldw	fp,4(sp)
1000defc:	dc000017 	ldw	r16,0(sp)
1000df00:	dec00304 	addi	sp,sp,12
1000df04:	f800283a 	ret

1000df08 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000df08:	defff904 	addi	sp,sp,-28
1000df0c:	df000615 	stw	fp,24(sp)
1000df10:	df000604 	addi	fp,sp,24
1000df14:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000df18:	0005303a 	rdctl	r2,status
1000df1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000df20:	e0fffc17 	ldw	r3,-16(fp)
1000df24:	00bfff84 	movi	r2,-2
1000df28:	1884703a 	and	r2,r3,r2
1000df2c:	1001703a 	wrctl	status,r2
  
  return context;
1000df30:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000df34:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000df38:	d0a00e17 	ldw	r2,-32712(gp)
1000df3c:	10c000c4 	addi	r3,r2,3
1000df40:	00bfff04 	movi	r2,-4
1000df44:	1884703a 	and	r2,r3,r2
1000df48:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000df4c:	d0e00e17 	ldw	r3,-32712(gp)
1000df50:	e0bfff17 	ldw	r2,-4(fp)
1000df54:	1885883a 	add	r2,r3,r2
1000df58:	00c60034 	movhi	r3,6144
1000df5c:	18c00004 	addi	r3,r3,0
1000df60:	1880062e 	bgeu	r3,r2,1000df7c <sbrk+0x74>
1000df64:	e0bffa17 	ldw	r2,-24(fp)
1000df68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000df6c:	e0bffd17 	ldw	r2,-12(fp)
1000df70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000df74:	00bfffc4 	movi	r2,-1
1000df78:	00000b06 	br	1000dfa8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000df7c:	d0a00e17 	ldw	r2,-32712(gp)
1000df80:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000df84:	d0e00e17 	ldw	r3,-32712(gp)
1000df88:	e0bfff17 	ldw	r2,-4(fp)
1000df8c:	1885883a 	add	r2,r3,r2
1000df90:	d0a00e15 	stw	r2,-32712(gp)
1000df94:	e0bffa17 	ldw	r2,-24(fp)
1000df98:	e0bffe15 	stw	r2,-8(fp)
1000df9c:	e0bffe17 	ldw	r2,-8(fp)
1000dfa0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000dfa4:	e0bffb17 	ldw	r2,-20(fp)
} 
1000dfa8:	e037883a 	mov	sp,fp
1000dfac:	df000017 	ldw	fp,0(sp)
1000dfb0:	dec00104 	addi	sp,sp,4
1000dfb4:	f800283a 	ret

1000dfb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dfb8:	defffe04 	addi	sp,sp,-8
1000dfbc:	dfc00115 	stw	ra,4(sp)
1000dfc0:	df000015 	stw	fp,0(sp)
1000dfc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dfc8:	00840074 	movhi	r2,4097
1000dfcc:	1086cc04 	addi	r2,r2,6960
1000dfd0:	10800017 	ldw	r2,0(r2)
1000dfd4:	10000526 	beq	r2,zero,1000dfec <alt_get_errno+0x34>
1000dfd8:	00840074 	movhi	r2,4097
1000dfdc:	1086cc04 	addi	r2,r2,6960
1000dfe0:	10800017 	ldw	r2,0(r2)
1000dfe4:	103ee83a 	callr	r2
1000dfe8:	00000206 	br	1000dff4 <alt_get_errno+0x3c>
1000dfec:	00840074 	movhi	r2,4097
1000dff0:	108d9404 	addi	r2,r2,13904
}
1000dff4:	e037883a 	mov	sp,fp
1000dff8:	dfc00117 	ldw	ra,4(sp)
1000dffc:	df000017 	ldw	fp,0(sp)
1000e000:	dec00204 	addi	sp,sp,8
1000e004:	f800283a 	ret

1000e008 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000e008:	defff904 	addi	sp,sp,-28
1000e00c:	dfc00615 	stw	ra,24(sp)
1000e010:	df000515 	stw	fp,20(sp)
1000e014:	df000504 	addi	fp,sp,20
1000e018:	e13ffd15 	stw	r4,-12(fp)
1000e01c:	e17ffe15 	stw	r5,-8(fp)
1000e020:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e024:	e0bffd17 	ldw	r2,-12(fp)
1000e028:	10000816 	blt	r2,zero,1000e04c <write+0x44>
1000e02c:	e13ffd17 	ldw	r4,-12(fp)
1000e030:	01400304 	movi	r5,12
1000e034:	000aef80 	call	1000aef8 <__mulsi3>
1000e038:	1007883a 	mov	r3,r2
1000e03c:	00840074 	movhi	r2,4097
1000e040:	10824704 	addi	r2,r2,2332
1000e044:	1885883a 	add	r2,r3,r2
1000e048:	00000106 	br	1000e050 <write+0x48>
1000e04c:	0005883a 	mov	r2,zero
1000e050:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e054:	e0bffb17 	ldw	r2,-20(fp)
1000e058:	10001f26 	beq	r2,zero,1000e0d8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000e05c:	e0bffb17 	ldw	r2,-20(fp)
1000e060:	10800217 	ldw	r2,8(r2)
1000e064:	108000cc 	andi	r2,r2,3
1000e068:	10001726 	beq	r2,zero,1000e0c8 <write+0xc0>
1000e06c:	e0bffb17 	ldw	r2,-20(fp)
1000e070:	10800017 	ldw	r2,0(r2)
1000e074:	10800617 	ldw	r2,24(r2)
1000e078:	10001326 	beq	r2,zero,1000e0c8 <write+0xc0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000e07c:	e0bffb17 	ldw	r2,-20(fp)
1000e080:	10800017 	ldw	r2,0(r2)
1000e084:	10800617 	ldw	r2,24(r2)
1000e088:	e0ffff17 	ldw	r3,-4(fp)
1000e08c:	e13ffb17 	ldw	r4,-20(fp)
1000e090:	e17ffe17 	ldw	r5,-8(fp)
1000e094:	180d883a 	mov	r6,r3
1000e098:	103ee83a 	callr	r2
1000e09c:	e0bffc15 	stw	r2,-16(fp)
1000e0a0:	e0bffc17 	ldw	r2,-16(fp)
1000e0a4:	1000060e 	bge	r2,zero,1000e0c0 <write+0xb8>
      {
        ALT_ERRNO = -rval;
1000e0a8:	000dfb80 	call	1000dfb8 <alt_get_errno>
1000e0ac:	e0fffc17 	ldw	r3,-16(fp)
1000e0b0:	00c7c83a 	sub	r3,zero,r3
1000e0b4:	10c00015 	stw	r3,0(r2)
        return -1;
1000e0b8:	00bfffc4 	movi	r2,-1
1000e0bc:	00000a06 	br	1000e0e8 <write+0xe0>
      }
      return rval;
1000e0c0:	e0bffc17 	ldw	r2,-16(fp)
1000e0c4:	00000806 	br	1000e0e8 <write+0xe0>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000e0c8:	000dfb80 	call	1000dfb8 <alt_get_errno>
1000e0cc:	00c00344 	movi	r3,13
1000e0d0:	10c00015 	stw	r3,0(r2)
1000e0d4:	00000306 	br	1000e0e4 <write+0xdc>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000e0d8:	000dfb80 	call	1000dfb8 <alt_get_errno>
1000e0dc:	00c01444 	movi	r3,81
1000e0e0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000e0e4:	00bfffc4 	movi	r2,-1
}
1000e0e8:	e037883a 	mov	sp,fp
1000e0ec:	dfc00117 	ldw	ra,4(sp)
1000e0f0:	df000017 	ldw	fp,0(sp)
1000e0f4:	dec00204 	addi	sp,sp,8
1000e0f8:	f800283a 	ret

1000e0fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000e0fc:	defffd04 	addi	sp,sp,-12
1000e100:	dfc00215 	stw	ra,8(sp)
1000e104:	df000115 	stw	fp,4(sp)
1000e108:	df000104 	addi	fp,sp,4
1000e10c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000e110:	e13fff17 	ldw	r4,-4(fp)
1000e114:	01440074 	movhi	r5,4097
1000e118:	2946c904 	addi	r5,r5,6948
1000e11c:	000ed940 	call	1000ed94 <alt_dev_llist_insert>
}
1000e120:	e037883a 	mov	sp,fp
1000e124:	dfc00117 	ldw	ra,4(sp)
1000e128:	df000017 	ldw	fp,0(sp)
1000e12c:	dec00204 	addi	sp,sp,8
1000e130:	f800283a 	ret

1000e134 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000e134:	defffd04 	addi	sp,sp,-12
1000e138:	dfc00215 	stw	ra,8(sp)
1000e13c:	df000115 	stw	fp,4(sp)
1000e140:	df000104 	addi	fp,sp,4
1000e144:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000e148:	000f7640 	call	1000f764 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000e14c:	00800044 	movi	r2,1
1000e150:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000e154:	e037883a 	mov	sp,fp
1000e158:	dfc00117 	ldw	ra,4(sp)
1000e15c:	df000017 	ldw	fp,0(sp)
1000e160:	dec00204 	addi	sp,sp,8
1000e164:	f800283a 	ret

1000e168 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000e168:	defffe04 	addi	sp,sp,-8
1000e16c:	dfc00115 	stw	ra,4(sp)
1000e170:	df000015 	stw	fp,0(sp)
1000e174:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000e178:	01040074 	movhi	r4,4097
1000e17c:	2102b104 	addi	r4,r4,2756
1000e180:	000b883a 	mov	r5,zero
1000e184:	01800044 	movi	r6,1
1000e188:	000e3140 	call	1000e314 <altera_avalon_jtag_uart_init>
1000e18c:	01040074 	movhi	r4,4097
1000e190:	2102a704 	addi	r4,r4,2716
1000e194:	000e0fc0 	call	1000e0fc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000e198:	0001883a 	nop
}
1000e19c:	e037883a 	mov	sp,fp
1000e1a0:	dfc00117 	ldw	ra,4(sp)
1000e1a4:	df000017 	ldw	fp,0(sp)
1000e1a8:	dec00204 	addi	sp,sp,8
1000e1ac:	f800283a 	ret

1000e1b0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000e1b0:	defffa04 	addi	sp,sp,-24
1000e1b4:	dfc00515 	stw	ra,20(sp)
1000e1b8:	df000415 	stw	fp,16(sp)
1000e1bc:	df000404 	addi	fp,sp,16
1000e1c0:	e13ffd15 	stw	r4,-12(fp)
1000e1c4:	e17ffe15 	stw	r5,-8(fp)
1000e1c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e1cc:	e0bffd17 	ldw	r2,-12(fp)
1000e1d0:	10800017 	ldw	r2,0(r2)
1000e1d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000e1d8:	e0bffc17 	ldw	r2,-16(fp)
1000e1dc:	10c00a04 	addi	r3,r2,40
1000e1e0:	e0bffd17 	ldw	r2,-12(fp)
1000e1e4:	10800217 	ldw	r2,8(r2)
1000e1e8:	1809883a 	mov	r4,r3
1000e1ec:	e17ffe17 	ldw	r5,-8(fp)
1000e1f0:	e1bfff17 	ldw	r6,-4(fp)
1000e1f4:	100f883a 	mov	r7,r2
1000e1f8:	000e7c80 	call	1000e7c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000e1fc:	e037883a 	mov	sp,fp
1000e200:	dfc00117 	ldw	ra,4(sp)
1000e204:	df000017 	ldw	fp,0(sp)
1000e208:	dec00204 	addi	sp,sp,8
1000e20c:	f800283a 	ret

1000e210 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000e210:	defffa04 	addi	sp,sp,-24
1000e214:	dfc00515 	stw	ra,20(sp)
1000e218:	df000415 	stw	fp,16(sp)
1000e21c:	df000404 	addi	fp,sp,16
1000e220:	e13ffd15 	stw	r4,-12(fp)
1000e224:	e17ffe15 	stw	r5,-8(fp)
1000e228:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e22c:	e0bffd17 	ldw	r2,-12(fp)
1000e230:	10800017 	ldw	r2,0(r2)
1000e234:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000e238:	e0bffc17 	ldw	r2,-16(fp)
1000e23c:	10c00a04 	addi	r3,r2,40
1000e240:	e0bffd17 	ldw	r2,-12(fp)
1000e244:	10800217 	ldw	r2,8(r2)
1000e248:	1809883a 	mov	r4,r3
1000e24c:	e17ffe17 	ldw	r5,-8(fp)
1000e250:	e1bfff17 	ldw	r6,-4(fp)
1000e254:	100f883a 	mov	r7,r2
1000e258:	000e9d00 	call	1000e9d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000e25c:	e037883a 	mov	sp,fp
1000e260:	dfc00117 	ldw	ra,4(sp)
1000e264:	df000017 	ldw	fp,0(sp)
1000e268:	dec00204 	addi	sp,sp,8
1000e26c:	f800283a 	ret

1000e270 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000e270:	defffc04 	addi	sp,sp,-16
1000e274:	dfc00315 	stw	ra,12(sp)
1000e278:	df000215 	stw	fp,8(sp)
1000e27c:	df000204 	addi	fp,sp,8
1000e280:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e284:	e0bfff17 	ldw	r2,-4(fp)
1000e288:	10800017 	ldw	r2,0(r2)
1000e28c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000e290:	e0bffe17 	ldw	r2,-8(fp)
1000e294:	10c00a04 	addi	r3,r2,40
1000e298:	e0bfff17 	ldw	r2,-4(fp)
1000e29c:	10800217 	ldw	r2,8(r2)
1000e2a0:	1809883a 	mov	r4,r3
1000e2a4:	100b883a 	mov	r5,r2
1000e2a8:	000e6740 	call	1000e674 <altera_avalon_jtag_uart_close>
}
1000e2ac:	e037883a 	mov	sp,fp
1000e2b0:	dfc00117 	ldw	ra,4(sp)
1000e2b4:	df000017 	ldw	fp,0(sp)
1000e2b8:	dec00204 	addi	sp,sp,8
1000e2bc:	f800283a 	ret

1000e2c0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000e2c0:	defffa04 	addi	sp,sp,-24
1000e2c4:	dfc00515 	stw	ra,20(sp)
1000e2c8:	df000415 	stw	fp,16(sp)
1000e2cc:	df000404 	addi	fp,sp,16
1000e2d0:	e13ffd15 	stw	r4,-12(fp)
1000e2d4:	e17ffe15 	stw	r5,-8(fp)
1000e2d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000e2dc:	e0bffd17 	ldw	r2,-12(fp)
1000e2e0:	10800017 	ldw	r2,0(r2)
1000e2e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000e2e8:	e0bffc17 	ldw	r2,-16(fp)
1000e2ec:	10800a04 	addi	r2,r2,40
1000e2f0:	1009883a 	mov	r4,r2
1000e2f4:	e17ffe17 	ldw	r5,-8(fp)
1000e2f8:	e1bfff17 	ldw	r6,-4(fp)
1000e2fc:	000e6dc0 	call	1000e6dc <altera_avalon_jtag_uart_ioctl>
}
1000e300:	e037883a 	mov	sp,fp
1000e304:	dfc00117 	ldw	ra,4(sp)
1000e308:	df000017 	ldw	fp,0(sp)
1000e30c:	dec00204 	addi	sp,sp,8
1000e310:	f800283a 	ret

1000e314 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000e314:	defffa04 	addi	sp,sp,-24
1000e318:	dfc00515 	stw	ra,20(sp)
1000e31c:	df000415 	stw	fp,16(sp)
1000e320:	df000404 	addi	fp,sp,16
1000e324:	e13ffd15 	stw	r4,-12(fp)
1000e328:	e17ffe15 	stw	r5,-8(fp)
1000e32c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e330:	e0bffd17 	ldw	r2,-12(fp)
1000e334:	00c00044 	movi	r3,1
1000e338:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000e33c:	e0bffd17 	ldw	r2,-12(fp)
1000e340:	10800017 	ldw	r2,0(r2)
1000e344:	10800104 	addi	r2,r2,4
1000e348:	e0fffd17 	ldw	r3,-12(fp)
1000e34c:	18c00817 	ldw	r3,32(r3)
1000e350:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000e354:	e0fffe17 	ldw	r3,-8(fp)
1000e358:	e0bfff17 	ldw	r2,-4(fp)
1000e35c:	d8000015 	stw	zero,0(sp)
1000e360:	1809883a 	mov	r4,r3
1000e364:	100b883a 	mov	r5,r2
1000e368:	01840074 	movhi	r6,4097
1000e36c:	31b8f504 	addi	r6,r6,-7212
1000e370:	e1fffd17 	ldw	r7,-12(fp)
1000e374:	000ef080 	call	1000ef08 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000e378:	e0bffd17 	ldw	r2,-12(fp)
1000e37c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000e380:	e0bffd17 	ldw	r2,-12(fp)
1000e384:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000e388:	00840074 	movhi	r2,4097
1000e38c:	108d9904 	addi	r2,r2,13924
1000e390:	10800017 	ldw	r2,0(r2)
1000e394:	1809883a 	mov	r4,r3
1000e398:	100b883a 	mov	r5,r2
1000e39c:	01840074 	movhi	r6,4097
1000e3a0:	31b97404 	addi	r6,r6,-6704
1000e3a4:	e1fffd17 	ldw	r7,-12(fp)
1000e3a8:	000ebe80 	call	1000ebe8 <alt_alarm_start>
1000e3ac:	1000040e 	bge	r2,zero,1000e3c0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000e3b0:	e0bffd17 	ldw	r2,-12(fp)
1000e3b4:	00e00034 	movhi	r3,32768
1000e3b8:	18ffffc4 	addi	r3,r3,-1
1000e3bc:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000e3c0:	e037883a 	mov	sp,fp
1000e3c4:	dfc00117 	ldw	ra,4(sp)
1000e3c8:	df000017 	ldw	fp,0(sp)
1000e3cc:	dec00204 	addi	sp,sp,8
1000e3d0:	f800283a 	ret

1000e3d4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000e3d4:	defff804 	addi	sp,sp,-32
1000e3d8:	df000715 	stw	fp,28(sp)
1000e3dc:	df000704 	addi	fp,sp,28
1000e3e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000e3e4:	e0bfff17 	ldw	r2,-4(fp)
1000e3e8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000e3ec:	e0bffb17 	ldw	r2,-20(fp)
1000e3f0:	10800017 	ldw	r2,0(r2)
1000e3f4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e3f8:	e0bffc17 	ldw	r2,-16(fp)
1000e3fc:	10800104 	addi	r2,r2,4
1000e400:	10800037 	ldwio	r2,0(r2)
1000e404:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000e408:	e0bffd17 	ldw	r2,-12(fp)
1000e40c:	1080c00c 	andi	r2,r2,768
1000e410:	1000011e 	bne	r2,zero,1000e418 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000e414:	00006a06 	br	1000e5c0 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000e418:	e0bffd17 	ldw	r2,-12(fp)
1000e41c:	1080400c 	andi	r2,r2,256
1000e420:	10003226 	beq	r2,zero,1000e4ec <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000e424:	00800074 	movhi	r2,1
1000e428:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e42c:	e0bffb17 	ldw	r2,-20(fp)
1000e430:	10800a17 	ldw	r2,40(r2)
1000e434:	10800044 	addi	r2,r2,1
1000e438:	1081ffcc 	andi	r2,r2,2047
1000e43c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000e440:	e0bffb17 	ldw	r2,-20(fp)
1000e444:	10c00b17 	ldw	r3,44(r2)
1000e448:	e0bffe17 	ldw	r2,-8(fp)
1000e44c:	1880011e 	bne	r3,r2,1000e454 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000e450:	00001506 	br	1000e4a8 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000e454:	e0bffc17 	ldw	r2,-16(fp)
1000e458:	10800037 	ldwio	r2,0(r2)
1000e45c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000e460:	e0bff917 	ldw	r2,-28(fp)
1000e464:	10a0000c 	andi	r2,r2,32768
1000e468:	1000011e 	bne	r2,zero,1000e470 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000e46c:	00000e06 	br	1000e4a8 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000e470:	e0bffb17 	ldw	r2,-20(fp)
1000e474:	10800a17 	ldw	r2,40(r2)
1000e478:	e0fff917 	ldw	r3,-28(fp)
1000e47c:	e13ffb17 	ldw	r4,-20(fp)
1000e480:	2085883a 	add	r2,r4,r2
1000e484:	10800e04 	addi	r2,r2,56
1000e488:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e48c:	e0bffb17 	ldw	r2,-20(fp)
1000e490:	10800a17 	ldw	r2,40(r2)
1000e494:	10800044 	addi	r2,r2,1
1000e498:	10c1ffcc 	andi	r3,r2,2047
1000e49c:	e0bffb17 	ldw	r2,-20(fp)
1000e4a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000e4a4:	003fe106 	br	1000e42c <__alt_data_end+0xf800e42c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000e4a8:	e0bff917 	ldw	r2,-28(fp)
1000e4ac:	10bfffec 	andhi	r2,r2,65535
1000e4b0:	10000e26 	beq	r2,zero,1000e4ec <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e4b4:	e0bffb17 	ldw	r2,-20(fp)
1000e4b8:	10c00817 	ldw	r3,32(r2)
1000e4bc:	00bfff84 	movi	r2,-2
1000e4c0:	1886703a 	and	r3,r3,r2
1000e4c4:	e0bffb17 	ldw	r2,-20(fp)
1000e4c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000e4cc:	e0bffc17 	ldw	r2,-16(fp)
1000e4d0:	10800104 	addi	r2,r2,4
1000e4d4:	e0fffb17 	ldw	r3,-20(fp)
1000e4d8:	18c00817 	ldw	r3,32(r3)
1000e4dc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e4e0:	e0bffc17 	ldw	r2,-16(fp)
1000e4e4:	10800104 	addi	r2,r2,4
1000e4e8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000e4ec:	e0bffd17 	ldw	r2,-12(fp)
1000e4f0:	1080800c 	andi	r2,r2,512
1000e4f4:	10003126 	beq	r2,zero,1000e5bc <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000e4f8:	e0bffd17 	ldw	r2,-12(fp)
1000e4fc:	1004d43a 	srli	r2,r2,16
1000e500:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e504:	00001406 	br	1000e558 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000e508:	e0bffc17 	ldw	r2,-16(fp)
1000e50c:	e0fffb17 	ldw	r3,-20(fp)
1000e510:	18c00d17 	ldw	r3,52(r3)
1000e514:	e13ffb17 	ldw	r4,-20(fp)
1000e518:	20c7883a 	add	r3,r4,r3
1000e51c:	18c20e04 	addi	r3,r3,2104
1000e520:	18c00003 	ldbu	r3,0(r3)
1000e524:	18c03fcc 	andi	r3,r3,255
1000e528:	18c0201c 	xori	r3,r3,128
1000e52c:	18ffe004 	addi	r3,r3,-128
1000e530:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e534:	e0bffb17 	ldw	r2,-20(fp)
1000e538:	10800d17 	ldw	r2,52(r2)
1000e53c:	10800044 	addi	r2,r2,1
1000e540:	10c1ffcc 	andi	r3,r2,2047
1000e544:	e0bffb17 	ldw	r2,-20(fp)
1000e548:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000e54c:	e0bffa17 	ldw	r2,-24(fp)
1000e550:	10bfffc4 	addi	r2,r2,-1
1000e554:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e558:	e0bffa17 	ldw	r2,-24(fp)
1000e55c:	10000526 	beq	r2,zero,1000e574 <altera_avalon_jtag_uart_irq+0x1a0>
1000e560:	e0bffb17 	ldw	r2,-20(fp)
1000e564:	10c00d17 	ldw	r3,52(r2)
1000e568:	e0bffb17 	ldw	r2,-20(fp)
1000e56c:	10800c17 	ldw	r2,48(r2)
1000e570:	18bfe51e 	bne	r3,r2,1000e508 <__alt_data_end+0xf800e508>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000e574:	e0bffa17 	ldw	r2,-24(fp)
1000e578:	10001026 	beq	r2,zero,1000e5bc <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e57c:	e0bffb17 	ldw	r2,-20(fp)
1000e580:	10c00817 	ldw	r3,32(r2)
1000e584:	00bfff44 	movi	r2,-3
1000e588:	1886703a 	and	r3,r3,r2
1000e58c:	e0bffb17 	ldw	r2,-20(fp)
1000e590:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e594:	e0bffb17 	ldw	r2,-20(fp)
1000e598:	10800017 	ldw	r2,0(r2)
1000e59c:	10800104 	addi	r2,r2,4
1000e5a0:	e0fffb17 	ldw	r3,-20(fp)
1000e5a4:	18c00817 	ldw	r3,32(r3)
1000e5a8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e5ac:	e0bffc17 	ldw	r2,-16(fp)
1000e5b0:	10800104 	addi	r2,r2,4
1000e5b4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000e5b8:	003f8f06 	br	1000e3f8 <__alt_data_end+0xf800e3f8>
1000e5bc:	003f8e06 	br	1000e3f8 <__alt_data_end+0xf800e3f8>
}
1000e5c0:	e037883a 	mov	sp,fp
1000e5c4:	df000017 	ldw	fp,0(sp)
1000e5c8:	dec00104 	addi	sp,sp,4
1000e5cc:	f800283a 	ret

1000e5d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000e5d0:	defff804 	addi	sp,sp,-32
1000e5d4:	df000715 	stw	fp,28(sp)
1000e5d8:	df000704 	addi	fp,sp,28
1000e5dc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000e5e0:	e0bffb17 	ldw	r2,-20(fp)
1000e5e4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000e5e8:	e0bff917 	ldw	r2,-28(fp)
1000e5ec:	10800017 	ldw	r2,0(r2)
1000e5f0:	10800104 	addi	r2,r2,4
1000e5f4:	10800037 	ldwio	r2,0(r2)
1000e5f8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000e5fc:	e0bffa17 	ldw	r2,-24(fp)
1000e600:	1081000c 	andi	r2,r2,1024
1000e604:	10000a26 	beq	r2,zero,1000e630 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000e608:	e0bff917 	ldw	r2,-28(fp)
1000e60c:	10800017 	ldw	r2,0(r2)
1000e610:	10800104 	addi	r2,r2,4
1000e614:	e0fff917 	ldw	r3,-28(fp)
1000e618:	18c00817 	ldw	r3,32(r3)
1000e61c:	18c10014 	ori	r3,r3,1024
1000e620:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
1000e624:	e0bff917 	ldw	r2,-28(fp)
1000e628:	10000915 	stw	zero,36(r2)
1000e62c:	00000a06 	br	1000e658 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000e630:	e0bff917 	ldw	r2,-28(fp)
1000e634:	10800917 	ldw	r2,36(r2)
1000e638:	00e00034 	movhi	r3,32768
1000e63c:	18ffff04 	addi	r3,r3,-4
1000e640:	18800536 	bltu	r3,r2,1000e658 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
1000e644:	e0bff917 	ldw	r2,-28(fp)
1000e648:	10800917 	ldw	r2,36(r2)
1000e64c:	10c00044 	addi	r3,r2,1
1000e650:	e0bff917 	ldw	r2,-28(fp)
1000e654:	10c00915 	stw	r3,36(r2)
1000e658:	00840074 	movhi	r2,4097
1000e65c:	108d9904 	addi	r2,r2,13924
1000e660:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000e664:	e037883a 	mov	sp,fp
1000e668:	df000017 	ldw	fp,0(sp)
1000e66c:	dec00104 	addi	sp,sp,4
1000e670:	f800283a 	ret

1000e674 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000e674:	defffd04 	addi	sp,sp,-12
1000e678:	df000215 	stw	fp,8(sp)
1000e67c:	df000204 	addi	fp,sp,8
1000e680:	e13ffe15 	stw	r4,-8(fp)
1000e684:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e688:	00000506 	br	1000e6a0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000e68c:	e0bfff17 	ldw	r2,-4(fp)
1000e690:	1090000c 	andi	r2,r2,16384
1000e694:	10000226 	beq	r2,zero,1000e6a0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000e698:	00bffd44 	movi	r2,-11
1000e69c:	00000b06 	br	1000e6cc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e6a0:	e0bffe17 	ldw	r2,-8(fp)
1000e6a4:	10c00d17 	ldw	r3,52(r2)
1000e6a8:	e0bffe17 	ldw	r2,-8(fp)
1000e6ac:	10800c17 	ldw	r2,48(r2)
1000e6b0:	18800526 	beq	r3,r2,1000e6c8 <altera_avalon_jtag_uart_close+0x54>
1000e6b4:	e0bffe17 	ldw	r2,-8(fp)
1000e6b8:	10c00917 	ldw	r3,36(r2)
1000e6bc:	e0bffe17 	ldw	r2,-8(fp)
1000e6c0:	10800117 	ldw	r2,4(r2)
1000e6c4:	18bff136 	bltu	r3,r2,1000e68c <__alt_data_end+0xf800e68c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000e6c8:	0005883a 	mov	r2,zero
}
1000e6cc:	e037883a 	mov	sp,fp
1000e6d0:	df000017 	ldw	fp,0(sp)
1000e6d4:	dec00104 	addi	sp,sp,4
1000e6d8:	f800283a 	ret

1000e6dc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000e6dc:	defffa04 	addi	sp,sp,-24
1000e6e0:	df000515 	stw	fp,20(sp)
1000e6e4:	df000504 	addi	fp,sp,20
1000e6e8:	e13ffd15 	stw	r4,-12(fp)
1000e6ec:	e17ffe15 	stw	r5,-8(fp)
1000e6f0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000e6f4:	00bff9c4 	movi	r2,-25
1000e6f8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000e6fc:	e0bffe17 	ldw	r2,-8(fp)
1000e700:	10da8060 	cmpeqi	r3,r2,27137
1000e704:	1800031e 	bne	r3,zero,1000e714 <altera_avalon_jtag_uart_ioctl+0x38>
1000e708:	109a80a0 	cmpeqi	r2,r2,27138
1000e70c:	1000191e 	bne	r2,zero,1000e774 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000e710:	00002806 	br	1000e7b4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000e714:	e0bffd17 	ldw	r2,-12(fp)
1000e718:	10c00117 	ldw	r3,4(r2)
1000e71c:	00a00034 	movhi	r2,32768
1000e720:	10bfffc4 	addi	r2,r2,-1
1000e724:	18801226 	beq	r3,r2,1000e770 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000e728:	e0bfff17 	ldw	r2,-4(fp)
1000e72c:	10800017 	ldw	r2,0(r2)
1000e730:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000e734:	e0bffc17 	ldw	r2,-16(fp)
1000e738:	10800090 	cmplti	r2,r2,2
1000e73c:	1000061e 	bne	r2,zero,1000e758 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e740:	e0fffc17 	ldw	r3,-16(fp)
1000e744:	00a00034 	movhi	r2,32768
1000e748:	10bfffc4 	addi	r2,r2,-1
1000e74c:	18800226 	beq	r3,r2,1000e758 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e750:	e0bffc17 	ldw	r2,-16(fp)
1000e754:	00000206 	br	1000e760 <altera_avalon_jtag_uart_ioctl+0x84>
1000e758:	00a00034 	movhi	r2,32768
1000e75c:	10bfff84 	addi	r2,r2,-2
1000e760:	e0fffd17 	ldw	r3,-12(fp)
1000e764:	18800115 	stw	r2,4(r3)
      rc = 0;
1000e768:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e76c:	00001106 	br	1000e7b4 <altera_avalon_jtag_uart_ioctl+0xd8>
1000e770:	00001006 	br	1000e7b4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000e774:	e0bffd17 	ldw	r2,-12(fp)
1000e778:	10c00117 	ldw	r3,4(r2)
1000e77c:	00a00034 	movhi	r2,32768
1000e780:	10bfffc4 	addi	r2,r2,-1
1000e784:	18800a26 	beq	r3,r2,1000e7b0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000e788:	e0bffd17 	ldw	r2,-12(fp)
1000e78c:	10c00917 	ldw	r3,36(r2)
1000e790:	e0bffd17 	ldw	r2,-12(fp)
1000e794:	10800117 	ldw	r2,4(r2)
1000e798:	1885803a 	cmpltu	r2,r3,r2
1000e79c:	10c03fcc 	andi	r3,r2,255
1000e7a0:	e0bfff17 	ldw	r2,-4(fp)
1000e7a4:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000e7a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e7ac:	00000006 	br	1000e7b0 <altera_avalon_jtag_uart_ioctl+0xd4>
1000e7b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000e7b4:	e0bffb17 	ldw	r2,-20(fp)
}
1000e7b8:	e037883a 	mov	sp,fp
1000e7bc:	df000017 	ldw	fp,0(sp)
1000e7c0:	dec00104 	addi	sp,sp,4
1000e7c4:	f800283a 	ret

1000e7c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000e7c8:	defff304 	addi	sp,sp,-52
1000e7cc:	dfc00c15 	stw	ra,48(sp)
1000e7d0:	df000b15 	stw	fp,44(sp)
1000e7d4:	df000b04 	addi	fp,sp,44
1000e7d8:	e13ffc15 	stw	r4,-16(fp)
1000e7dc:	e17ffd15 	stw	r5,-12(fp)
1000e7e0:	e1bffe15 	stw	r6,-8(fp)
1000e7e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000e7e8:	e0bffd17 	ldw	r2,-12(fp)
1000e7ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e7f0:	00004906 	br	1000e918 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000e7f4:	e0bffc17 	ldw	r2,-16(fp)
1000e7f8:	10800a17 	ldw	r2,40(r2)
1000e7fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000e800:	e0bffc17 	ldw	r2,-16(fp)
1000e804:	10800b17 	ldw	r2,44(r2)
1000e808:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000e80c:	e0fff717 	ldw	r3,-36(fp)
1000e810:	e0bff817 	ldw	r2,-32(fp)
1000e814:	18800536 	bltu	r3,r2,1000e82c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000e818:	e0fff717 	ldw	r3,-36(fp)
1000e81c:	e0bff817 	ldw	r2,-32(fp)
1000e820:	1885c83a 	sub	r2,r3,r2
1000e824:	e0bff615 	stw	r2,-40(fp)
1000e828:	00000406 	br	1000e83c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000e82c:	00c20004 	movi	r3,2048
1000e830:	e0bff817 	ldw	r2,-32(fp)
1000e834:	1885c83a 	sub	r2,r3,r2
1000e838:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e83c:	e0bff617 	ldw	r2,-40(fp)
1000e840:	1000011e 	bne	r2,zero,1000e848 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000e844:	00001d06 	br	1000e8bc <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000e848:	e0fffe17 	ldw	r3,-8(fp)
1000e84c:	e0bff617 	ldw	r2,-40(fp)
1000e850:	1880022e 	bgeu	r3,r2,1000e85c <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000e854:	e0bffe17 	ldw	r2,-8(fp)
1000e858:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000e85c:	e0bff817 	ldw	r2,-32(fp)
1000e860:	10800e04 	addi	r2,r2,56
1000e864:	e0fffc17 	ldw	r3,-16(fp)
1000e868:	1885883a 	add	r2,r3,r2
1000e86c:	e13ff517 	ldw	r4,-44(fp)
1000e870:	100b883a 	mov	r5,r2
1000e874:	e1bff617 	ldw	r6,-40(fp)
1000e878:	00060f00 	call	100060f0 <memcpy>
      ptr   += n;
1000e87c:	e0fff517 	ldw	r3,-44(fp)
1000e880:	e0bff617 	ldw	r2,-40(fp)
1000e884:	1885883a 	add	r2,r3,r2
1000e888:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000e88c:	e0fffe17 	ldw	r3,-8(fp)
1000e890:	e0bff617 	ldw	r2,-40(fp)
1000e894:	1885c83a 	sub	r2,r3,r2
1000e898:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e89c:	e0fff817 	ldw	r3,-32(fp)
1000e8a0:	e0bff617 	ldw	r2,-40(fp)
1000e8a4:	1885883a 	add	r2,r3,r2
1000e8a8:	10c1ffcc 	andi	r3,r2,2047
1000e8ac:	e0bffc17 	ldw	r2,-16(fp)
1000e8b0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000e8b4:	e0bffe17 	ldw	r2,-8(fp)
1000e8b8:	00bfce16 	blt	zero,r2,1000e7f4 <__alt_data_end+0xf800e7f4>

    /* If we read any data then return it */
    if (ptr != buffer)
1000e8bc:	e0fff517 	ldw	r3,-44(fp)
1000e8c0:	e0bffd17 	ldw	r2,-12(fp)
1000e8c4:	18800126 	beq	r3,r2,1000e8cc <altera_avalon_jtag_uart_read+0x104>
      break;
1000e8c8:	00001506 	br	1000e920 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000e8cc:	e0bfff17 	ldw	r2,-4(fp)
1000e8d0:	1090000c 	andi	r2,r2,16384
1000e8d4:	10000126 	beq	r2,zero,1000e8dc <altera_avalon_jtag_uart_read+0x114>
      break;
1000e8d8:	00001106 	br	1000e920 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000e8dc:	0001883a 	nop
1000e8e0:	e0bffc17 	ldw	r2,-16(fp)
1000e8e4:	10c00a17 	ldw	r3,40(r2)
1000e8e8:	e0bff717 	ldw	r2,-36(fp)
1000e8ec:	1880051e 	bne	r3,r2,1000e904 <altera_avalon_jtag_uart_read+0x13c>
1000e8f0:	e0bffc17 	ldw	r2,-16(fp)
1000e8f4:	10c00917 	ldw	r3,36(r2)
1000e8f8:	e0bffc17 	ldw	r2,-16(fp)
1000e8fc:	10800117 	ldw	r2,4(r2)
1000e900:	18bff736 	bltu	r3,r2,1000e8e0 <__alt_data_end+0xf800e8e0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000e904:	e0bffc17 	ldw	r2,-16(fp)
1000e908:	10c00a17 	ldw	r3,40(r2)
1000e90c:	e0bff717 	ldw	r2,-36(fp)
1000e910:	1880011e 	bne	r3,r2,1000e918 <altera_avalon_jtag_uart_read+0x150>
      break;
1000e914:	00000206 	br	1000e920 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e918:	e0bffe17 	ldw	r2,-8(fp)
1000e91c:	00bfb516 	blt	zero,r2,1000e7f4 <__alt_data_end+0xf800e7f4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000e920:	e0fff517 	ldw	r3,-44(fp)
1000e924:	e0bffd17 	ldw	r2,-12(fp)
1000e928:	18801726 	beq	r3,r2,1000e988 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e92c:	0005303a 	rdctl	r2,status
1000e930:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e934:	e0fffa17 	ldw	r3,-24(fp)
1000e938:	00bfff84 	movi	r2,-2
1000e93c:	1884703a 	and	r2,r3,r2
1000e940:	1001703a 	wrctl	status,r2
  
  return context;
1000e944:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000e948:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e94c:	e0bffc17 	ldw	r2,-16(fp)
1000e950:	10800817 	ldw	r2,32(r2)
1000e954:	10c00054 	ori	r3,r2,1
1000e958:	e0bffc17 	ldw	r2,-16(fp)
1000e95c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e960:	e0bffc17 	ldw	r2,-16(fp)
1000e964:	10800017 	ldw	r2,0(r2)
1000e968:	10800104 	addi	r2,r2,4
1000e96c:	e0fffc17 	ldw	r3,-16(fp)
1000e970:	18c00817 	ldw	r3,32(r3)
1000e974:	10c00035 	stwio	r3,0(r2)
1000e978:	e0bff917 	ldw	r2,-28(fp)
1000e97c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e980:	e0bffb17 	ldw	r2,-20(fp)
1000e984:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000e988:	e0fff517 	ldw	r3,-44(fp)
1000e98c:	e0bffd17 	ldw	r2,-12(fp)
1000e990:	18800426 	beq	r3,r2,1000e9a4 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
1000e994:	e0fff517 	ldw	r3,-44(fp)
1000e998:	e0bffd17 	ldw	r2,-12(fp)
1000e99c:	1885c83a 	sub	r2,r3,r2
1000e9a0:	00000606 	br	1000e9bc <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
1000e9a4:	e0bfff17 	ldw	r2,-4(fp)
1000e9a8:	1090000c 	andi	r2,r2,16384
1000e9ac:	10000226 	beq	r2,zero,1000e9b8 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
1000e9b0:	00bffd44 	movi	r2,-11
1000e9b4:	00000106 	br	1000e9bc <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
1000e9b8:	00bffec4 	movi	r2,-5
}
1000e9bc:	e037883a 	mov	sp,fp
1000e9c0:	dfc00117 	ldw	ra,4(sp)
1000e9c4:	df000017 	ldw	fp,0(sp)
1000e9c8:	dec00204 	addi	sp,sp,8
1000e9cc:	f800283a 	ret

1000e9d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000e9d0:	defff304 	addi	sp,sp,-52
1000e9d4:	dfc00c15 	stw	ra,48(sp)
1000e9d8:	df000b15 	stw	fp,44(sp)
1000e9dc:	df000b04 	addi	fp,sp,44
1000e9e0:	e13ffc15 	stw	r4,-16(fp)
1000e9e4:	e17ffd15 	stw	r5,-12(fp)
1000e9e8:	e1bffe15 	stw	r6,-8(fp)
1000e9ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000e9f0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000e9f4:	e0bffd17 	ldw	r2,-12(fp)
1000e9f8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000e9fc:	00003906 	br	1000eae4 <altera_avalon_jtag_uart_write+0x114>
1000ea00:	00003806 	br	1000eae4 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000ea04:	e0bffc17 	ldw	r2,-16(fp)
1000ea08:	10800c17 	ldw	r2,48(r2)
1000ea0c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000ea10:	e0bffc17 	ldw	r2,-16(fp)
1000ea14:	10800d17 	ldw	r2,52(r2)
1000ea18:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000ea1c:	e0fff817 	ldw	r3,-32(fp)
1000ea20:	e0bff517 	ldw	r2,-44(fp)
1000ea24:	1880062e 	bgeu	r3,r2,1000ea40 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
1000ea28:	e0fff517 	ldw	r3,-44(fp)
1000ea2c:	e0bff817 	ldw	r2,-32(fp)
1000ea30:	1885c83a 	sub	r2,r3,r2
1000ea34:	10bfffc4 	addi	r2,r2,-1
1000ea38:	e0bff615 	stw	r2,-40(fp)
1000ea3c:	00000b06 	br	1000ea6c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
1000ea40:	e0bff517 	ldw	r2,-44(fp)
1000ea44:	10000526 	beq	r2,zero,1000ea5c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000ea48:	00c20004 	movi	r3,2048
1000ea4c:	e0bff817 	ldw	r2,-32(fp)
1000ea50:	1885c83a 	sub	r2,r3,r2
1000ea54:	e0bff615 	stw	r2,-40(fp)
1000ea58:	00000406 	br	1000ea6c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000ea5c:	00c1ffc4 	movi	r3,2047
1000ea60:	e0bff817 	ldw	r2,-32(fp)
1000ea64:	1885c83a 	sub	r2,r3,r2
1000ea68:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000ea6c:	e0bff617 	ldw	r2,-40(fp)
1000ea70:	1000011e 	bne	r2,zero,1000ea78 <altera_avalon_jtag_uart_write+0xa8>
        break;
1000ea74:	00001d06 	br	1000eaec <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
1000ea78:	e0fffe17 	ldw	r3,-8(fp)
1000ea7c:	e0bff617 	ldw	r2,-40(fp)
1000ea80:	1880022e 	bgeu	r3,r2,1000ea8c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
1000ea84:	e0bffe17 	ldw	r2,-8(fp)
1000ea88:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000ea8c:	e0bff817 	ldw	r2,-32(fp)
1000ea90:	10820e04 	addi	r2,r2,2104
1000ea94:	e0fffc17 	ldw	r3,-16(fp)
1000ea98:	1885883a 	add	r2,r3,r2
1000ea9c:	1009883a 	mov	r4,r2
1000eaa0:	e17ffd17 	ldw	r5,-12(fp)
1000eaa4:	e1bff617 	ldw	r6,-40(fp)
1000eaa8:	00060f00 	call	100060f0 <memcpy>
      ptr   += n;
1000eaac:	e0fffd17 	ldw	r3,-12(fp)
1000eab0:	e0bff617 	ldw	r2,-40(fp)
1000eab4:	1885883a 	add	r2,r3,r2
1000eab8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000eabc:	e0fffe17 	ldw	r3,-8(fp)
1000eac0:	e0bff617 	ldw	r2,-40(fp)
1000eac4:	1885c83a 	sub	r2,r3,r2
1000eac8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000eacc:	e0fff817 	ldw	r3,-32(fp)
1000ead0:	e0bff617 	ldw	r2,-40(fp)
1000ead4:	1885883a 	add	r2,r3,r2
1000ead8:	10c1ffcc 	andi	r3,r2,2047
1000eadc:	e0bffc17 	ldw	r2,-16(fp)
1000eae0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000eae4:	e0bffe17 	ldw	r2,-8(fp)
1000eae8:	00bfc616 	blt	zero,r2,1000ea04 <__alt_data_end+0xf800ea04>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000eaec:	0005303a 	rdctl	r2,status
1000eaf0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000eaf4:	e0fffa17 	ldw	r3,-24(fp)
1000eaf8:	00bfff84 	movi	r2,-2
1000eafc:	1884703a 	and	r2,r3,r2
1000eb00:	1001703a 	wrctl	status,r2
  
  return context;
1000eb04:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000eb08:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000eb0c:	e0bffc17 	ldw	r2,-16(fp)
1000eb10:	10800817 	ldw	r2,32(r2)
1000eb14:	10c00094 	ori	r3,r2,2
1000eb18:	e0bffc17 	ldw	r2,-16(fp)
1000eb1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000eb20:	e0bffc17 	ldw	r2,-16(fp)
1000eb24:	10800017 	ldw	r2,0(r2)
1000eb28:	10800104 	addi	r2,r2,4
1000eb2c:	e0fffc17 	ldw	r3,-16(fp)
1000eb30:	18c00817 	ldw	r3,32(r3)
1000eb34:	10c00035 	stwio	r3,0(r2)
1000eb38:	e0bff917 	ldw	r2,-28(fp)
1000eb3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000eb40:	e0bffb17 	ldw	r2,-20(fp)
1000eb44:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000eb48:	e0bffe17 	ldw	r2,-8(fp)
1000eb4c:	0080120e 	bge	zero,r2,1000eb98 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000eb50:	e0bfff17 	ldw	r2,-4(fp)
1000eb54:	1090000c 	andi	r2,r2,16384
1000eb58:	10000126 	beq	r2,zero,1000eb60 <altera_avalon_jtag_uart_write+0x190>
        break;
1000eb5c:	00001006 	br	1000eba0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000eb60:	0001883a 	nop
1000eb64:	e0bffc17 	ldw	r2,-16(fp)
1000eb68:	10c00d17 	ldw	r3,52(r2)
1000eb6c:	e0bff517 	ldw	r2,-44(fp)
1000eb70:	1880051e 	bne	r3,r2,1000eb88 <altera_avalon_jtag_uart_write+0x1b8>
1000eb74:	e0bffc17 	ldw	r2,-16(fp)
1000eb78:	10c00917 	ldw	r3,36(r2)
1000eb7c:	e0bffc17 	ldw	r2,-16(fp)
1000eb80:	10800117 	ldw	r2,4(r2)
1000eb84:	18bff736 	bltu	r3,r2,1000eb64 <__alt_data_end+0xf800eb64>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000eb88:	e0bffc17 	ldw	r2,-16(fp)
1000eb8c:	10800917 	ldw	r2,36(r2)
1000eb90:	10000126 	beq	r2,zero,1000eb98 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000eb94:	00000206 	br	1000eba0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000eb98:	e0bffe17 	ldw	r2,-8(fp)
1000eb9c:	00bf9816 	blt	zero,r2,1000ea00 <__alt_data_end+0xf800ea00>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000eba0:	e0fffd17 	ldw	r3,-12(fp)
1000eba4:	e0bff717 	ldw	r2,-36(fp)
1000eba8:	18800426 	beq	r3,r2,1000ebbc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000ebac:	e0fffd17 	ldw	r3,-12(fp)
1000ebb0:	e0bff717 	ldw	r2,-36(fp)
1000ebb4:	1885c83a 	sub	r2,r3,r2
1000ebb8:	00000606 	br	1000ebd4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000ebbc:	e0bfff17 	ldw	r2,-4(fp)
1000ebc0:	1090000c 	andi	r2,r2,16384
1000ebc4:	10000226 	beq	r2,zero,1000ebd0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000ebc8:	00bffd44 	movi	r2,-11
1000ebcc:	00000106 	br	1000ebd4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000ebd0:	00bffec4 	movi	r2,-5
}
1000ebd4:	e037883a 	mov	sp,fp
1000ebd8:	dfc00117 	ldw	ra,4(sp)
1000ebdc:	df000017 	ldw	fp,0(sp)
1000ebe0:	dec00204 	addi	sp,sp,8
1000ebe4:	f800283a 	ret

1000ebe8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000ebe8:	defff504 	addi	sp,sp,-44
1000ebec:	df000a15 	stw	fp,40(sp)
1000ebf0:	df000a04 	addi	fp,sp,40
1000ebf4:	e13ffc15 	stw	r4,-16(fp)
1000ebf8:	e17ffd15 	stw	r5,-12(fp)
1000ebfc:	e1bffe15 	stw	r6,-8(fp)
1000ec00:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000ec04:	e03ff615 	stw	zero,-40(fp)
1000ec08:	00840074 	movhi	r2,4097
1000ec0c:	108d9904 	addi	r2,r2,13924
1000ec10:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000ec14:	10003f26 	beq	r2,zero,1000ed14 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000ec18:	e0bffc17 	ldw	r2,-16(fp)
1000ec1c:	10003b26 	beq	r2,zero,1000ed0c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000ec20:	e0bffc17 	ldw	r2,-16(fp)
1000ec24:	e0fffe17 	ldw	r3,-8(fp)
1000ec28:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000ec2c:	e0bffc17 	ldw	r2,-16(fp)
1000ec30:	e0ffff17 	ldw	r3,-4(fp)
1000ec34:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ec38:	0005303a 	rdctl	r2,status
1000ec3c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ec40:	e0fff817 	ldw	r3,-32(fp)
1000ec44:	00bfff84 	movi	r2,-2
1000ec48:	1884703a 	and	r2,r3,r2
1000ec4c:	1001703a 	wrctl	status,r2
  
  return context;
1000ec50:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000ec54:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000ec58:	00840074 	movhi	r2,4097
1000ec5c:	108d9a04 	addi	r2,r2,13928
1000ec60:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000ec64:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000ec68:	e0fffd17 	ldw	r3,-12(fp)
1000ec6c:	e0bff617 	ldw	r2,-40(fp)
1000ec70:	1885883a 	add	r2,r3,r2
1000ec74:	10c00044 	addi	r3,r2,1
1000ec78:	e0bffc17 	ldw	r2,-16(fp)
1000ec7c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000ec80:	e0bffc17 	ldw	r2,-16(fp)
1000ec84:	10c00217 	ldw	r3,8(r2)
1000ec88:	e0bff617 	ldw	r2,-40(fp)
1000ec8c:	1880042e 	bgeu	r3,r2,1000eca0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000ec90:	e0bffc17 	ldw	r2,-16(fp)
1000ec94:	00c00044 	movi	r3,1
1000ec98:	10c00405 	stb	r3,16(r2)
1000ec9c:	00000206 	br	1000eca8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000eca0:	e0bffc17 	ldw	r2,-16(fp)
1000eca4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000eca8:	e0bffc17 	ldw	r2,-16(fp)
1000ecac:	00c40074 	movhi	r3,4097
1000ecb0:	18c6cf04 	addi	r3,r3,6972
1000ecb4:	e0fff915 	stw	r3,-28(fp)
1000ecb8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ecbc:	e0bffa17 	ldw	r2,-24(fp)
1000ecc0:	e0fff917 	ldw	r3,-28(fp)
1000ecc4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ecc8:	e0bff917 	ldw	r2,-28(fp)
1000eccc:	10c00017 	ldw	r3,0(r2)
1000ecd0:	e0bffa17 	ldw	r2,-24(fp)
1000ecd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ecd8:	e0bff917 	ldw	r2,-28(fp)
1000ecdc:	10800017 	ldw	r2,0(r2)
1000ece0:	e0fffa17 	ldw	r3,-24(fp)
1000ece4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ece8:	e0bff917 	ldw	r2,-28(fp)
1000ecec:	e0fffa17 	ldw	r3,-24(fp)
1000ecf0:	10c00015 	stw	r3,0(r2)
1000ecf4:	e0bff717 	ldw	r2,-36(fp)
1000ecf8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ecfc:	e0bffb17 	ldw	r2,-20(fp)
1000ed00:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000ed04:	0005883a 	mov	r2,zero
1000ed08:	00000306 	br	1000ed18 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000ed0c:	00bffa84 	movi	r2,-22
1000ed10:	00000106 	br	1000ed18 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000ed14:	00bfde84 	movi	r2,-134
  }
}
1000ed18:	e037883a 	mov	sp,fp
1000ed1c:	df000017 	ldw	fp,0(sp)
1000ed20:	dec00104 	addi	sp,sp,4
1000ed24:	f800283a 	ret

1000ed28 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000ed28:	deffff04 	addi	sp,sp,-4
1000ed2c:	df000015 	stw	fp,0(sp)
1000ed30:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000ed34:	e037883a 	mov	sp,fp
1000ed38:	df000017 	ldw	fp,0(sp)
1000ed3c:	dec00104 	addi	sp,sp,4
1000ed40:	f800283a 	ret

1000ed44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ed44:	defffe04 	addi	sp,sp,-8
1000ed48:	dfc00115 	stw	ra,4(sp)
1000ed4c:	df000015 	stw	fp,0(sp)
1000ed50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ed54:	00840074 	movhi	r2,4097
1000ed58:	1086cc04 	addi	r2,r2,6960
1000ed5c:	10800017 	ldw	r2,0(r2)
1000ed60:	10000526 	beq	r2,zero,1000ed78 <alt_get_errno+0x34>
1000ed64:	00840074 	movhi	r2,4097
1000ed68:	1086cc04 	addi	r2,r2,6960
1000ed6c:	10800017 	ldw	r2,0(r2)
1000ed70:	103ee83a 	callr	r2
1000ed74:	00000206 	br	1000ed80 <alt_get_errno+0x3c>
1000ed78:	00840074 	movhi	r2,4097
1000ed7c:	108d9404 	addi	r2,r2,13904
}
1000ed80:	e037883a 	mov	sp,fp
1000ed84:	dfc00117 	ldw	ra,4(sp)
1000ed88:	df000017 	ldw	fp,0(sp)
1000ed8c:	dec00204 	addi	sp,sp,8
1000ed90:	f800283a 	ret

1000ed94 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000ed94:	defffa04 	addi	sp,sp,-24
1000ed98:	dfc00515 	stw	ra,20(sp)
1000ed9c:	df000415 	stw	fp,16(sp)
1000eda0:	df000404 	addi	fp,sp,16
1000eda4:	e13ffe15 	stw	r4,-8(fp)
1000eda8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000edac:	e0bffe17 	ldw	r2,-8(fp)
1000edb0:	10000326 	beq	r2,zero,1000edc0 <alt_dev_llist_insert+0x2c>
1000edb4:	e0bffe17 	ldw	r2,-8(fp)
1000edb8:	10800217 	ldw	r2,8(r2)
1000edbc:	1000051e 	bne	r2,zero,1000edd4 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
1000edc0:	000ed440 	call	1000ed44 <alt_get_errno>
1000edc4:	00c00584 	movi	r3,22
1000edc8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
1000edcc:	00bffa84 	movi	r2,-22
1000edd0:	00001306 	br	1000ee20 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000edd4:	e0bffe17 	ldw	r2,-8(fp)
1000edd8:	e0ffff17 	ldw	r3,-4(fp)
1000eddc:	e0fffc15 	stw	r3,-16(fp)
1000ede0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ede4:	e0bffd17 	ldw	r2,-12(fp)
1000ede8:	e0fffc17 	ldw	r3,-16(fp)
1000edec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000edf0:	e0bffc17 	ldw	r2,-16(fp)
1000edf4:	10c00017 	ldw	r3,0(r2)
1000edf8:	e0bffd17 	ldw	r2,-12(fp)
1000edfc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ee00:	e0bffc17 	ldw	r2,-16(fp)
1000ee04:	10800017 	ldw	r2,0(r2)
1000ee08:	e0fffd17 	ldw	r3,-12(fp)
1000ee0c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ee10:	e0bffc17 	ldw	r2,-16(fp)
1000ee14:	e0fffd17 	ldw	r3,-12(fp)
1000ee18:	10c00015 	stw	r3,0(r2)

  return 0;  
1000ee1c:	0005883a 	mov	r2,zero
}
1000ee20:	e037883a 	mov	sp,fp
1000ee24:	dfc00117 	ldw	ra,4(sp)
1000ee28:	df000017 	ldw	fp,0(sp)
1000ee2c:	dec00204 	addi	sp,sp,8
1000ee30:	f800283a 	ret

1000ee34 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000ee34:	defffd04 	addi	sp,sp,-12
1000ee38:	dfc00215 	stw	ra,8(sp)
1000ee3c:	df000115 	stw	fp,4(sp)
1000ee40:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ee44:	00840074 	movhi	r2,4097
1000ee48:	10bf4904 	addi	r2,r2,-732
1000ee4c:	e0bfff15 	stw	r2,-4(fp)
1000ee50:	00000606 	br	1000ee6c <_do_ctors+0x38>
        (*ctor) (); 
1000ee54:	e0bfff17 	ldw	r2,-4(fp)
1000ee58:	10800017 	ldw	r2,0(r2)
1000ee5c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ee60:	e0bfff17 	ldw	r2,-4(fp)
1000ee64:	10bfff04 	addi	r2,r2,-4
1000ee68:	e0bfff15 	stw	r2,-4(fp)
1000ee6c:	e0ffff17 	ldw	r3,-4(fp)
1000ee70:	00840074 	movhi	r2,4097
1000ee74:	10bf4a04 	addi	r2,r2,-728
1000ee78:	18bff62e 	bgeu	r3,r2,1000ee54 <__alt_data_end+0xf800ee54>
        (*ctor) (); 
}
1000ee7c:	e037883a 	mov	sp,fp
1000ee80:	dfc00117 	ldw	ra,4(sp)
1000ee84:	df000017 	ldw	fp,0(sp)
1000ee88:	dec00204 	addi	sp,sp,8
1000ee8c:	f800283a 	ret

1000ee90 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000ee90:	defffd04 	addi	sp,sp,-12
1000ee94:	dfc00215 	stw	ra,8(sp)
1000ee98:	df000115 	stw	fp,4(sp)
1000ee9c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000eea0:	00840074 	movhi	r2,4097
1000eea4:	10bf4904 	addi	r2,r2,-732
1000eea8:	e0bfff15 	stw	r2,-4(fp)
1000eeac:	00000606 	br	1000eec8 <_do_dtors+0x38>
        (*dtor) (); 
1000eeb0:	e0bfff17 	ldw	r2,-4(fp)
1000eeb4:	10800017 	ldw	r2,0(r2)
1000eeb8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000eebc:	e0bfff17 	ldw	r2,-4(fp)
1000eec0:	10bfff04 	addi	r2,r2,-4
1000eec4:	e0bfff15 	stw	r2,-4(fp)
1000eec8:	e0ffff17 	ldw	r3,-4(fp)
1000eecc:	00840074 	movhi	r2,4097
1000eed0:	10bf4a04 	addi	r2,r2,-728
1000eed4:	18bff62e 	bgeu	r3,r2,1000eeb0 <__alt_data_end+0xf800eeb0>
        (*dtor) (); 
}
1000eed8:	e037883a 	mov	sp,fp
1000eedc:	dfc00117 	ldw	ra,4(sp)
1000eee0:	df000017 	ldw	fp,0(sp)
1000eee4:	dec00204 	addi	sp,sp,8
1000eee8:	f800283a 	ret

1000eeec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000eeec:	deffff04 	addi	sp,sp,-4
1000eef0:	df000015 	stw	fp,0(sp)
1000eef4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000eef8:	e037883a 	mov	sp,fp
1000eefc:	df000017 	ldw	fp,0(sp)
1000ef00:	dec00104 	addi	sp,sp,4
1000ef04:	f800283a 	ret

1000ef08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000ef08:	defff904 	addi	sp,sp,-28
1000ef0c:	dfc00615 	stw	ra,24(sp)
1000ef10:	df000515 	stw	fp,20(sp)
1000ef14:	df000504 	addi	fp,sp,20
1000ef18:	e13ffc15 	stw	r4,-16(fp)
1000ef1c:	e17ffd15 	stw	r5,-12(fp)
1000ef20:	e1bffe15 	stw	r6,-8(fp)
1000ef24:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000ef28:	e0800217 	ldw	r2,8(fp)
1000ef2c:	d8800015 	stw	r2,0(sp)
1000ef30:	e13ffc17 	ldw	r4,-16(fp)
1000ef34:	e17ffd17 	ldw	r5,-12(fp)
1000ef38:	e1bffe17 	ldw	r6,-8(fp)
1000ef3c:	e1ffff17 	ldw	r7,-4(fp)
1000ef40:	000f0e00 	call	1000f0e0 <alt_iic_isr_register>
}  
1000ef44:	e037883a 	mov	sp,fp
1000ef48:	dfc00117 	ldw	ra,4(sp)
1000ef4c:	df000017 	ldw	fp,0(sp)
1000ef50:	dec00204 	addi	sp,sp,8
1000ef54:	f800283a 	ret

1000ef58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000ef58:	defff904 	addi	sp,sp,-28
1000ef5c:	df000615 	stw	fp,24(sp)
1000ef60:	df000604 	addi	fp,sp,24
1000ef64:	e13ffe15 	stw	r4,-8(fp)
1000ef68:	e17fff15 	stw	r5,-4(fp)
1000ef6c:	e0bfff17 	ldw	r2,-4(fp)
1000ef70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ef74:	0005303a 	rdctl	r2,status
1000ef78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ef7c:	e0fffb17 	ldw	r3,-20(fp)
1000ef80:	00bfff84 	movi	r2,-2
1000ef84:	1884703a 	and	r2,r3,r2
1000ef88:	1001703a 	wrctl	status,r2
  
  return context;
1000ef8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000ef90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000ef94:	e0bffa17 	ldw	r2,-24(fp)
1000ef98:	00c00044 	movi	r3,1
1000ef9c:	1884983a 	sll	r2,r3,r2
1000efa0:	1007883a 	mov	r3,r2
1000efa4:	00840074 	movhi	r2,4097
1000efa8:	108d9804 	addi	r2,r2,13920
1000efac:	10800017 	ldw	r2,0(r2)
1000efb0:	1886b03a 	or	r3,r3,r2
1000efb4:	00840074 	movhi	r2,4097
1000efb8:	108d9804 	addi	r2,r2,13920
1000efbc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000efc0:	00840074 	movhi	r2,4097
1000efc4:	108d9804 	addi	r2,r2,13920
1000efc8:	10800017 	ldw	r2,0(r2)
1000efcc:	100170fa 	wrctl	ienable,r2
1000efd0:	e0bffc17 	ldw	r2,-16(fp)
1000efd4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000efd8:	e0bffd17 	ldw	r2,-12(fp)
1000efdc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000efe0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
1000efe4:	e037883a 	mov	sp,fp
1000efe8:	df000017 	ldw	fp,0(sp)
1000efec:	dec00104 	addi	sp,sp,4
1000eff0:	f800283a 	ret

1000eff4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000eff4:	defff904 	addi	sp,sp,-28
1000eff8:	df000615 	stw	fp,24(sp)
1000effc:	df000604 	addi	fp,sp,24
1000f000:	e13ffe15 	stw	r4,-8(fp)
1000f004:	e17fff15 	stw	r5,-4(fp)
1000f008:	e0bfff17 	ldw	r2,-4(fp)
1000f00c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f010:	0005303a 	rdctl	r2,status
1000f014:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f018:	e0fffb17 	ldw	r3,-20(fp)
1000f01c:	00bfff84 	movi	r2,-2
1000f020:	1884703a 	and	r2,r3,r2
1000f024:	1001703a 	wrctl	status,r2
  
  return context;
1000f028:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f02c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000f030:	e0bffa17 	ldw	r2,-24(fp)
1000f034:	00c00044 	movi	r3,1
1000f038:	1884983a 	sll	r2,r3,r2
1000f03c:	0084303a 	nor	r2,zero,r2
1000f040:	1007883a 	mov	r3,r2
1000f044:	00840074 	movhi	r2,4097
1000f048:	108d9804 	addi	r2,r2,13920
1000f04c:	10800017 	ldw	r2,0(r2)
1000f050:	1886703a 	and	r3,r3,r2
1000f054:	00840074 	movhi	r2,4097
1000f058:	108d9804 	addi	r2,r2,13920
1000f05c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f060:	00840074 	movhi	r2,4097
1000f064:	108d9804 	addi	r2,r2,13920
1000f068:	10800017 	ldw	r2,0(r2)
1000f06c:	100170fa 	wrctl	ienable,r2
1000f070:	e0bffc17 	ldw	r2,-16(fp)
1000f074:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f078:	e0bffd17 	ldw	r2,-12(fp)
1000f07c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f080:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
1000f084:	e037883a 	mov	sp,fp
1000f088:	df000017 	ldw	fp,0(sp)
1000f08c:	dec00104 	addi	sp,sp,4
1000f090:	f800283a 	ret

1000f094 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000f094:	defffc04 	addi	sp,sp,-16
1000f098:	df000315 	stw	fp,12(sp)
1000f09c:	df000304 	addi	fp,sp,12
1000f0a0:	e13ffe15 	stw	r4,-8(fp)
1000f0a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000f0a8:	000530fa 	rdctl	r2,ienable
1000f0ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000f0b0:	e0bfff17 	ldw	r2,-4(fp)
1000f0b4:	00c00044 	movi	r3,1
1000f0b8:	1884983a 	sll	r2,r3,r2
1000f0bc:	1007883a 	mov	r3,r2
1000f0c0:	e0bffd17 	ldw	r2,-12(fp)
1000f0c4:	1884703a 	and	r2,r3,r2
1000f0c8:	1004c03a 	cmpne	r2,r2,zero
1000f0cc:	10803fcc 	andi	r2,r2,255
}
1000f0d0:	e037883a 	mov	sp,fp
1000f0d4:	df000017 	ldw	fp,0(sp)
1000f0d8:	dec00104 	addi	sp,sp,4
1000f0dc:	f800283a 	ret

1000f0e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f0e0:	defff504 	addi	sp,sp,-44
1000f0e4:	dfc00a15 	stw	ra,40(sp)
1000f0e8:	df000915 	stw	fp,36(sp)
1000f0ec:	df000904 	addi	fp,sp,36
1000f0f0:	e13ffc15 	stw	r4,-16(fp)
1000f0f4:	e17ffd15 	stw	r5,-12(fp)
1000f0f8:	e1bffe15 	stw	r6,-8(fp)
1000f0fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000f100:	00bffa84 	movi	r2,-22
1000f104:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000f108:	e0bffd17 	ldw	r2,-12(fp)
1000f10c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000f110:	e0bff817 	ldw	r2,-32(fp)
1000f114:	10800808 	cmpgei	r2,r2,32
1000f118:	1000271e 	bne	r2,zero,1000f1b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f11c:	0005303a 	rdctl	r2,status
1000f120:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f124:	e0fffa17 	ldw	r3,-24(fp)
1000f128:	00bfff84 	movi	r2,-2
1000f12c:	1884703a 	and	r2,r3,r2
1000f130:	1001703a 	wrctl	status,r2
  
  return context;
1000f134:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000f138:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000f13c:	00c40074 	movhi	r3,4097
1000f140:	18cda504 	addi	r3,r3,13972
1000f144:	e0bff817 	ldw	r2,-32(fp)
1000f148:	100490fa 	slli	r2,r2,3
1000f14c:	1885883a 	add	r2,r3,r2
1000f150:	e0fffe17 	ldw	r3,-8(fp)
1000f154:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000f158:	00c40074 	movhi	r3,4097
1000f15c:	18cda504 	addi	r3,r3,13972
1000f160:	e0bff817 	ldw	r2,-32(fp)
1000f164:	100490fa 	slli	r2,r2,3
1000f168:	1885883a 	add	r2,r3,r2
1000f16c:	10800104 	addi	r2,r2,4
1000f170:	e0ffff17 	ldw	r3,-4(fp)
1000f174:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000f178:	e0bffe17 	ldw	r2,-8(fp)
1000f17c:	10000526 	beq	r2,zero,1000f194 <alt_iic_isr_register+0xb4>
1000f180:	e0bff817 	ldw	r2,-32(fp)
1000f184:	e13ffc17 	ldw	r4,-16(fp)
1000f188:	100b883a 	mov	r5,r2
1000f18c:	000ef580 	call	1000ef58 <alt_ic_irq_enable>
1000f190:	00000406 	br	1000f1a4 <alt_iic_isr_register+0xc4>
1000f194:	e0bff817 	ldw	r2,-32(fp)
1000f198:	e13ffc17 	ldw	r4,-16(fp)
1000f19c:	100b883a 	mov	r5,r2
1000f1a0:	000eff40 	call	1000eff4 <alt_ic_irq_disable>
1000f1a4:	e0bff715 	stw	r2,-36(fp)
1000f1a8:	e0bff917 	ldw	r2,-28(fp)
1000f1ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f1b0:	e0bffb17 	ldw	r2,-20(fp)
1000f1b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000f1b8:	e0bff717 	ldw	r2,-36(fp)
}
1000f1bc:	e037883a 	mov	sp,fp
1000f1c0:	dfc00117 	ldw	ra,4(sp)
1000f1c4:	df000017 	ldw	fp,0(sp)
1000f1c8:	dec00204 	addi	sp,sp,8
1000f1cc:	f800283a 	ret

1000f1d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000f1d0:	defff804 	addi	sp,sp,-32
1000f1d4:	dfc00715 	stw	ra,28(sp)
1000f1d8:	df000615 	stw	fp,24(sp)
1000f1dc:	dc000515 	stw	r16,20(sp)
1000f1e0:	df000604 	addi	fp,sp,24
1000f1e4:	e13ffb15 	stw	r4,-20(fp)
1000f1e8:	e17ffc15 	stw	r5,-16(fp)
1000f1ec:	e1bffd15 	stw	r6,-12(fp)
1000f1f0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000f1f4:	e13ffc17 	ldw	r4,-16(fp)
1000f1f8:	e17ffd17 	ldw	r5,-12(fp)
1000f1fc:	e1bffe17 	ldw	r6,-8(fp)
1000f200:	000f46c0 	call	1000f46c <open>
1000f204:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000f208:	e0bffa17 	ldw	r2,-24(fp)
1000f20c:	10002216 	blt	r2,zero,1000f298 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000f210:	04040074 	movhi	r16,4097
1000f214:	84024704 	addi	r16,r16,2332
1000f218:	e0bffa17 	ldw	r2,-24(fp)
1000f21c:	1009883a 	mov	r4,r2
1000f220:	01400304 	movi	r5,12
1000f224:	000aef80 	call	1000aef8 <__mulsi3>
1000f228:	8085883a 	add	r2,r16,r2
1000f22c:	10c00017 	ldw	r3,0(r2)
1000f230:	e0bffb17 	ldw	r2,-20(fp)
1000f234:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000f238:	04040074 	movhi	r16,4097
1000f23c:	84024704 	addi	r16,r16,2332
1000f240:	e0bffa17 	ldw	r2,-24(fp)
1000f244:	1009883a 	mov	r4,r2
1000f248:	01400304 	movi	r5,12
1000f24c:	000aef80 	call	1000aef8 <__mulsi3>
1000f250:	8085883a 	add	r2,r16,r2
1000f254:	10800104 	addi	r2,r2,4
1000f258:	10c00017 	ldw	r3,0(r2)
1000f25c:	e0bffb17 	ldw	r2,-20(fp)
1000f260:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000f264:	04040074 	movhi	r16,4097
1000f268:	84024704 	addi	r16,r16,2332
1000f26c:	e0bffa17 	ldw	r2,-24(fp)
1000f270:	1009883a 	mov	r4,r2
1000f274:	01400304 	movi	r5,12
1000f278:	000aef80 	call	1000aef8 <__mulsi3>
1000f27c:	8085883a 	add	r2,r16,r2
1000f280:	10800204 	addi	r2,r2,8
1000f284:	10c00017 	ldw	r3,0(r2)
1000f288:	e0bffb17 	ldw	r2,-20(fp)
1000f28c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000f290:	e13ffa17 	ldw	r4,-24(fp)
1000f294:	000de880 	call	1000de88 <alt_release_fd>
  }
} 
1000f298:	e6ffff04 	addi	sp,fp,-4
1000f29c:	dfc00217 	ldw	ra,8(sp)
1000f2a0:	df000117 	ldw	fp,4(sp)
1000f2a4:	dc000017 	ldw	r16,0(sp)
1000f2a8:	dec00304 	addi	sp,sp,12
1000f2ac:	f800283a 	ret

1000f2b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000f2b0:	defffb04 	addi	sp,sp,-20
1000f2b4:	dfc00415 	stw	ra,16(sp)
1000f2b8:	df000315 	stw	fp,12(sp)
1000f2bc:	df000304 	addi	fp,sp,12
1000f2c0:	e13ffd15 	stw	r4,-12(fp)
1000f2c4:	e17ffe15 	stw	r5,-8(fp)
1000f2c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000f2cc:	01040074 	movhi	r4,4097
1000f2d0:	21024a04 	addi	r4,r4,2344
1000f2d4:	e17ffd17 	ldw	r5,-12(fp)
1000f2d8:	01800044 	movi	r6,1
1000f2dc:	01c07fc4 	movi	r7,511
1000f2e0:	000f1d00 	call	1000f1d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000f2e4:	01040074 	movhi	r4,4097
1000f2e8:	21024704 	addi	r4,r4,2332
1000f2ec:	e17ffe17 	ldw	r5,-8(fp)
1000f2f0:	000d883a 	mov	r6,zero
1000f2f4:	01c07fc4 	movi	r7,511
1000f2f8:	000f1d00 	call	1000f1d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000f2fc:	01040074 	movhi	r4,4097
1000f300:	21024d04 	addi	r4,r4,2356
1000f304:	e17fff17 	ldw	r5,-4(fp)
1000f308:	01800044 	movi	r6,1
1000f30c:	01c07fc4 	movi	r7,511
1000f310:	000f1d00 	call	1000f1d0 <alt_open_fd>
}  
1000f314:	e037883a 	mov	sp,fp
1000f318:	dfc00117 	ldw	ra,4(sp)
1000f31c:	df000017 	ldw	fp,0(sp)
1000f320:	dec00204 	addi	sp,sp,8
1000f324:	f800283a 	ret

1000f328 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f328:	defffe04 	addi	sp,sp,-8
1000f32c:	dfc00115 	stw	ra,4(sp)
1000f330:	df000015 	stw	fp,0(sp)
1000f334:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f338:	00840074 	movhi	r2,4097
1000f33c:	1086cc04 	addi	r2,r2,6960
1000f340:	10800017 	ldw	r2,0(r2)
1000f344:	10000526 	beq	r2,zero,1000f35c <alt_get_errno+0x34>
1000f348:	00840074 	movhi	r2,4097
1000f34c:	1086cc04 	addi	r2,r2,6960
1000f350:	10800017 	ldw	r2,0(r2)
1000f354:	103ee83a 	callr	r2
1000f358:	00000206 	br	1000f364 <alt_get_errno+0x3c>
1000f35c:	00840074 	movhi	r2,4097
1000f360:	108d9404 	addi	r2,r2,13904
}
1000f364:	e037883a 	mov	sp,fp
1000f368:	dfc00117 	ldw	ra,4(sp)
1000f36c:	df000017 	ldw	fp,0(sp)
1000f370:	dec00204 	addi	sp,sp,8
1000f374:	f800283a 	ret

1000f378 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000f378:	defffb04 	addi	sp,sp,-20
1000f37c:	dfc00415 	stw	ra,16(sp)
1000f380:	df000315 	stw	fp,12(sp)
1000f384:	dc000215 	stw	r16,8(sp)
1000f388:	df000304 	addi	fp,sp,12
1000f38c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000f390:	e0bffe17 	ldw	r2,-8(fp)
1000f394:	10800217 	ldw	r2,8(r2)
1000f398:	10d00034 	orhi	r3,r2,16384
1000f39c:	e0bffe17 	ldw	r2,-8(fp)
1000f3a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f3a4:	e03ffd15 	stw	zero,-12(fp)
1000f3a8:	00002306 	br	1000f438 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f3ac:	04040074 	movhi	r16,4097
1000f3b0:	84024704 	addi	r16,r16,2332
1000f3b4:	e0bffd17 	ldw	r2,-12(fp)
1000f3b8:	1009883a 	mov	r4,r2
1000f3bc:	01400304 	movi	r5,12
1000f3c0:	000aef80 	call	1000aef8 <__mulsi3>
1000f3c4:	8085883a 	add	r2,r16,r2
1000f3c8:	10c00017 	ldw	r3,0(r2)
1000f3cc:	e0bffe17 	ldw	r2,-8(fp)
1000f3d0:	10800017 	ldw	r2,0(r2)
1000f3d4:	1880151e 	bne	r3,r2,1000f42c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f3d8:	04040074 	movhi	r16,4097
1000f3dc:	84024704 	addi	r16,r16,2332
1000f3e0:	e0bffd17 	ldw	r2,-12(fp)
1000f3e4:	1009883a 	mov	r4,r2
1000f3e8:	01400304 	movi	r5,12
1000f3ec:	000aef80 	call	1000aef8 <__mulsi3>
1000f3f0:	8085883a 	add	r2,r16,r2
1000f3f4:	10800204 	addi	r2,r2,8
1000f3f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f3fc:	10000b0e 	bge	r2,zero,1000f42c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000f400:	e13ffd17 	ldw	r4,-12(fp)
1000f404:	01400304 	movi	r5,12
1000f408:	000aef80 	call	1000aef8 <__mulsi3>
1000f40c:	1007883a 	mov	r3,r2
1000f410:	00840074 	movhi	r2,4097
1000f414:	10824704 	addi	r2,r2,2332
1000f418:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f41c:	e0bffe17 	ldw	r2,-8(fp)
1000f420:	18800226 	beq	r3,r2,1000f42c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000f424:	00bffcc4 	movi	r2,-13
1000f428:	00000a06 	br	1000f454 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f42c:	e0bffd17 	ldw	r2,-12(fp)
1000f430:	10800044 	addi	r2,r2,1
1000f434:	e0bffd15 	stw	r2,-12(fp)
1000f438:	00840074 	movhi	r2,4097
1000f43c:	1086cb04 	addi	r2,r2,6956
1000f440:	10800017 	ldw	r2,0(r2)
1000f444:	1007883a 	mov	r3,r2
1000f448:	e0bffd17 	ldw	r2,-12(fp)
1000f44c:	18bfd72e 	bgeu	r3,r2,1000f3ac <__alt_data_end+0xf800f3ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000f450:	0005883a 	mov	r2,zero
}
1000f454:	e6ffff04 	addi	sp,fp,-4
1000f458:	dfc00217 	ldw	ra,8(sp)
1000f45c:	df000117 	ldw	fp,4(sp)
1000f460:	dc000017 	ldw	r16,0(sp)
1000f464:	dec00304 	addi	sp,sp,12
1000f468:	f800283a 	ret

1000f46c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000f46c:	defff604 	addi	sp,sp,-40
1000f470:	dfc00915 	stw	ra,36(sp)
1000f474:	df000815 	stw	fp,32(sp)
1000f478:	df000804 	addi	fp,sp,32
1000f47c:	e13ffd15 	stw	r4,-12(fp)
1000f480:	e17ffe15 	stw	r5,-8(fp)
1000f484:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000f488:	00bfffc4 	movi	r2,-1
1000f48c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000f490:	00bffb44 	movi	r2,-19
1000f494:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000f498:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000f49c:	e13ffd17 	ldw	r4,-12(fp)
1000f4a0:	01440074 	movhi	r5,4097
1000f4a4:	2946c904 	addi	r5,r5,6948
1000f4a8:	000d7f00 	call	1000d7f0 <alt_find_dev>
1000f4ac:	e0bff815 	stw	r2,-32(fp)
1000f4b0:	e0bff817 	ldw	r2,-32(fp)
1000f4b4:	1000051e 	bne	r2,zero,1000f4cc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000f4b8:	e13ffd17 	ldw	r4,-12(fp)
1000f4bc:	000f7840 	call	1000f784 <alt_find_file>
1000f4c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000f4c4:	00800044 	movi	r2,1
1000f4c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000f4cc:	e0bff817 	ldw	r2,-32(fp)
1000f4d0:	10002b26 	beq	r2,zero,1000f580 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000f4d4:	e13ff817 	ldw	r4,-32(fp)
1000f4d8:	000f8980 	call	1000f898 <alt_get_fd>
1000f4dc:	e0bff915 	stw	r2,-28(fp)
1000f4e0:	e0bff917 	ldw	r2,-28(fp)
1000f4e4:	1000030e 	bge	r2,zero,1000f4f4 <open+0x88>
    {
      status = index;
1000f4e8:	e0bff917 	ldw	r2,-28(fp)
1000f4ec:	e0bffa15 	stw	r2,-24(fp)
1000f4f0:	00002506 	br	1000f588 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000f4f4:	e13ff917 	ldw	r4,-28(fp)
1000f4f8:	01400304 	movi	r5,12
1000f4fc:	000aef80 	call	1000aef8 <__mulsi3>
1000f500:	1007883a 	mov	r3,r2
1000f504:	00840074 	movhi	r2,4097
1000f508:	10824704 	addi	r2,r2,2332
1000f50c:	1885883a 	add	r2,r3,r2
1000f510:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000f514:	e0fffe17 	ldw	r3,-8(fp)
1000f518:	00900034 	movhi	r2,16384
1000f51c:	10bfffc4 	addi	r2,r2,-1
1000f520:	1886703a 	and	r3,r3,r2
1000f524:	e0bffc17 	ldw	r2,-16(fp)
1000f528:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000f52c:	e0bffb17 	ldw	r2,-20(fp)
1000f530:	1000051e 	bne	r2,zero,1000f548 <open+0xdc>
1000f534:	e13ffc17 	ldw	r4,-16(fp)
1000f538:	000f3780 	call	1000f378 <alt_file_locked>
1000f53c:	e0bffa15 	stw	r2,-24(fp)
1000f540:	e0bffa17 	ldw	r2,-24(fp)
1000f544:	10001016 	blt	r2,zero,1000f588 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000f548:	e0bff817 	ldw	r2,-32(fp)
1000f54c:	10800317 	ldw	r2,12(r2)
1000f550:	10000826 	beq	r2,zero,1000f574 <open+0x108>
1000f554:	e0bff817 	ldw	r2,-32(fp)
1000f558:	10800317 	ldw	r2,12(r2)
1000f55c:	e13ffc17 	ldw	r4,-16(fp)
1000f560:	e17ffd17 	ldw	r5,-12(fp)
1000f564:	e1bffe17 	ldw	r6,-8(fp)
1000f568:	e1ffff17 	ldw	r7,-4(fp)
1000f56c:	103ee83a 	callr	r2
1000f570:	00000106 	br	1000f578 <open+0x10c>
1000f574:	0005883a 	mov	r2,zero
1000f578:	e0bffa15 	stw	r2,-24(fp)
1000f57c:	00000206 	br	1000f588 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000f580:	00bffb44 	movi	r2,-19
1000f584:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000f588:	e0bffa17 	ldw	r2,-24(fp)
1000f58c:	1000080e 	bge	r2,zero,1000f5b0 <open+0x144>
  {
    alt_release_fd (index);  
1000f590:	e13ff917 	ldw	r4,-28(fp)
1000f594:	000de880 	call	1000de88 <alt_release_fd>
    ALT_ERRNO = -status;
1000f598:	000f3280 	call	1000f328 <alt_get_errno>
1000f59c:	e0fffa17 	ldw	r3,-24(fp)
1000f5a0:	00c7c83a 	sub	r3,zero,r3
1000f5a4:	10c00015 	stw	r3,0(r2)
    return -1;
1000f5a8:	00bfffc4 	movi	r2,-1
1000f5ac:	00000106 	br	1000f5b4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1000f5b0:	e0bff917 	ldw	r2,-28(fp)
}
1000f5b4:	e037883a 	mov	sp,fp
1000f5b8:	dfc00117 	ldw	ra,4(sp)
1000f5bc:	df000017 	ldw	fp,0(sp)
1000f5c0:	dec00204 	addi	sp,sp,8
1000f5c4:	f800283a 	ret

1000f5c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000f5c8:	defffa04 	addi	sp,sp,-24
1000f5cc:	df000515 	stw	fp,20(sp)
1000f5d0:	df000504 	addi	fp,sp,20
1000f5d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f5d8:	0005303a 	rdctl	r2,status
1000f5dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f5e0:	e0fffc17 	ldw	r3,-16(fp)
1000f5e4:	00bfff84 	movi	r2,-2
1000f5e8:	1884703a 	and	r2,r3,r2
1000f5ec:	1001703a 	wrctl	status,r2
  
  return context;
1000f5f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000f5f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000f5f8:	e0bfff17 	ldw	r2,-4(fp)
1000f5fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000f600:	e0bffd17 	ldw	r2,-12(fp)
1000f604:	10800017 	ldw	r2,0(r2)
1000f608:	e0fffd17 	ldw	r3,-12(fp)
1000f60c:	18c00117 	ldw	r3,4(r3)
1000f610:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000f614:	e0bffd17 	ldw	r2,-12(fp)
1000f618:	10800117 	ldw	r2,4(r2)
1000f61c:	e0fffd17 	ldw	r3,-12(fp)
1000f620:	18c00017 	ldw	r3,0(r3)
1000f624:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000f628:	e0bffd17 	ldw	r2,-12(fp)
1000f62c:	e0fffd17 	ldw	r3,-12(fp)
1000f630:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000f634:	e0bffd17 	ldw	r2,-12(fp)
1000f638:	e0fffd17 	ldw	r3,-12(fp)
1000f63c:	10c00015 	stw	r3,0(r2)
1000f640:	e0bffb17 	ldw	r2,-20(fp)
1000f644:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f648:	e0bffe17 	ldw	r2,-8(fp)
1000f64c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000f650:	e037883a 	mov	sp,fp
1000f654:	df000017 	ldw	fp,0(sp)
1000f658:	dec00104 	addi	sp,sp,4
1000f65c:	f800283a 	ret

1000f660 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000f660:	defffb04 	addi	sp,sp,-20
1000f664:	dfc00415 	stw	ra,16(sp)
1000f668:	df000315 	stw	fp,12(sp)
1000f66c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000f670:	d0a01017 	ldw	r2,-32704(gp)
1000f674:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000f678:	d0a6db17 	ldw	r2,-25748(gp)
1000f67c:	10800044 	addi	r2,r2,1
1000f680:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f684:	00002e06 	br	1000f740 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000f688:	e0bffd17 	ldw	r2,-12(fp)
1000f68c:	10800017 	ldw	r2,0(r2)
1000f690:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000f694:	e0bffd17 	ldw	r2,-12(fp)
1000f698:	10800403 	ldbu	r2,16(r2)
1000f69c:	10803fcc 	andi	r2,r2,255
1000f6a0:	10000426 	beq	r2,zero,1000f6b4 <alt_tick+0x54>
1000f6a4:	d0a6db17 	ldw	r2,-25748(gp)
1000f6a8:	1000021e 	bne	r2,zero,1000f6b4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000f6ac:	e0bffd17 	ldw	r2,-12(fp)
1000f6b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000f6b4:	e0bffd17 	ldw	r2,-12(fp)
1000f6b8:	10800217 	ldw	r2,8(r2)
1000f6bc:	d0e6db17 	ldw	r3,-25748(gp)
1000f6c0:	18801d36 	bltu	r3,r2,1000f738 <alt_tick+0xd8>
1000f6c4:	e0bffd17 	ldw	r2,-12(fp)
1000f6c8:	10800403 	ldbu	r2,16(r2)
1000f6cc:	10803fcc 	andi	r2,r2,255
1000f6d0:	1000191e 	bne	r2,zero,1000f738 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000f6d4:	e0bffd17 	ldw	r2,-12(fp)
1000f6d8:	10800317 	ldw	r2,12(r2)
1000f6dc:	e0fffd17 	ldw	r3,-12(fp)
1000f6e0:	18c00517 	ldw	r3,20(r3)
1000f6e4:	1809883a 	mov	r4,r3
1000f6e8:	103ee83a 	callr	r2
1000f6ec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000f6f0:	e0bfff17 	ldw	r2,-4(fp)
1000f6f4:	1000031e 	bne	r2,zero,1000f704 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000f6f8:	e13ffd17 	ldw	r4,-12(fp)
1000f6fc:	000f5c80 	call	1000f5c8 <alt_alarm_stop>
1000f700:	00000d06 	br	1000f738 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000f704:	e0bffd17 	ldw	r2,-12(fp)
1000f708:	10c00217 	ldw	r3,8(r2)
1000f70c:	e0bfff17 	ldw	r2,-4(fp)
1000f710:	1887883a 	add	r3,r3,r2
1000f714:	e0bffd17 	ldw	r2,-12(fp)
1000f718:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000f71c:	e0bffd17 	ldw	r2,-12(fp)
1000f720:	10c00217 	ldw	r3,8(r2)
1000f724:	d0a6db17 	ldw	r2,-25748(gp)
1000f728:	1880032e 	bgeu	r3,r2,1000f738 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000f72c:	e0bffd17 	ldw	r2,-12(fp)
1000f730:	00c00044 	movi	r3,1
1000f734:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000f738:	e0bffe17 	ldw	r2,-8(fp)
1000f73c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f740:	e0fffd17 	ldw	r3,-12(fp)
1000f744:	d0a01004 	addi	r2,gp,-32704
1000f748:	18bfcf1e 	bne	r3,r2,1000f688 <__alt_data_end+0xf800f688>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000f74c:	0001883a 	nop
}
1000f750:	e037883a 	mov	sp,fp
1000f754:	dfc00117 	ldw	ra,4(sp)
1000f758:	df000017 	ldw	fp,0(sp)
1000f75c:	dec00204 	addi	sp,sp,8
1000f760:	f800283a 	ret

1000f764 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000f764:	deffff04 	addi	sp,sp,-4
1000f768:	df000015 	stw	fp,0(sp)
1000f76c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000f770:	000170fa 	wrctl	ienable,zero
}
1000f774:	e037883a 	mov	sp,fp
1000f778:	df000017 	ldw	fp,0(sp)
1000f77c:	dec00104 	addi	sp,sp,4
1000f780:	f800283a 	ret

1000f784 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000f784:	defffb04 	addi	sp,sp,-20
1000f788:	dfc00415 	stw	ra,16(sp)
1000f78c:	df000315 	stw	fp,12(sp)
1000f790:	df000304 	addi	fp,sp,12
1000f794:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000f798:	00840074 	movhi	r2,4097
1000f79c:	1086c704 	addi	r2,r2,6940
1000f7a0:	10800017 	ldw	r2,0(r2)
1000f7a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f7a8:	00003106 	br	1000f870 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000f7ac:	e0bffd17 	ldw	r2,-12(fp)
1000f7b0:	10800217 	ldw	r2,8(r2)
1000f7b4:	1009883a 	mov	r4,r2
1000f7b8:	00075e40 	call	100075e4 <strlen>
1000f7bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000f7c0:	e0bffd17 	ldw	r2,-12(fp)
1000f7c4:	10c00217 	ldw	r3,8(r2)
1000f7c8:	e0bffe17 	ldw	r2,-8(fp)
1000f7cc:	10bfffc4 	addi	r2,r2,-1
1000f7d0:	1885883a 	add	r2,r3,r2
1000f7d4:	10800003 	ldbu	r2,0(r2)
1000f7d8:	10803fcc 	andi	r2,r2,255
1000f7dc:	1080201c 	xori	r2,r2,128
1000f7e0:	10bfe004 	addi	r2,r2,-128
1000f7e4:	10800bd8 	cmpnei	r2,r2,47
1000f7e8:	1000031e 	bne	r2,zero,1000f7f8 <alt_find_file+0x74>
    {
      len -= 1;
1000f7ec:	e0bffe17 	ldw	r2,-8(fp)
1000f7f0:	10bfffc4 	addi	r2,r2,-1
1000f7f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f7f8:	e0bffe17 	ldw	r2,-8(fp)
1000f7fc:	e0ffff17 	ldw	r3,-4(fp)
1000f800:	1885883a 	add	r2,r3,r2
1000f804:	10800003 	ldbu	r2,0(r2)
1000f808:	10803fcc 	andi	r2,r2,255
1000f80c:	1080201c 	xori	r2,r2,128
1000f810:	10bfe004 	addi	r2,r2,-128
1000f814:	10800be0 	cmpeqi	r2,r2,47
1000f818:	1000081e 	bne	r2,zero,1000f83c <alt_find_file+0xb8>
1000f81c:	e0bffe17 	ldw	r2,-8(fp)
1000f820:	e0ffff17 	ldw	r3,-4(fp)
1000f824:	1885883a 	add	r2,r3,r2
1000f828:	10800003 	ldbu	r2,0(r2)
1000f82c:	10803fcc 	andi	r2,r2,255
1000f830:	1080201c 	xori	r2,r2,128
1000f834:	10bfe004 	addi	r2,r2,-128
1000f838:	10000a1e 	bne	r2,zero,1000f864 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000f83c:	e0bffd17 	ldw	r2,-12(fp)
1000f840:	10c00217 	ldw	r3,8(r2)
1000f844:	e0bffe17 	ldw	r2,-8(fp)
1000f848:	1809883a 	mov	r4,r3
1000f84c:	e17fff17 	ldw	r5,-4(fp)
1000f850:	100d883a 	mov	r6,r2
1000f854:	000f9b80 	call	1000f9b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f858:	1000021e 	bne	r2,zero,1000f864 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000f85c:	e0bffd17 	ldw	r2,-12(fp)
1000f860:	00000806 	br	1000f884 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000f864:	e0bffd17 	ldw	r2,-12(fp)
1000f868:	10800017 	ldw	r2,0(r2)
1000f86c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f870:	e0fffd17 	ldw	r3,-12(fp)
1000f874:	00840074 	movhi	r2,4097
1000f878:	1086c704 	addi	r2,r2,6940
1000f87c:	18bfcb1e 	bne	r3,r2,1000f7ac <__alt_data_end+0xf800f7ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000f880:	0005883a 	mov	r2,zero
}
1000f884:	e037883a 	mov	sp,fp
1000f888:	dfc00117 	ldw	ra,4(sp)
1000f88c:	df000017 	ldw	fp,0(sp)
1000f890:	dec00204 	addi	sp,sp,8
1000f894:	f800283a 	ret

1000f898 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000f898:	defffa04 	addi	sp,sp,-24
1000f89c:	dfc00515 	stw	ra,20(sp)
1000f8a0:	df000415 	stw	fp,16(sp)
1000f8a4:	dc000315 	stw	r16,12(sp)
1000f8a8:	df000404 	addi	fp,sp,16
1000f8ac:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000f8b0:	00bffa04 	movi	r2,-24
1000f8b4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f8b8:	e03ffc15 	stw	zero,-16(fp)
1000f8bc:	00002106 	br	1000f944 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000f8c0:	04040074 	movhi	r16,4097
1000f8c4:	84024704 	addi	r16,r16,2332
1000f8c8:	e0bffc17 	ldw	r2,-16(fp)
1000f8cc:	1009883a 	mov	r4,r2
1000f8d0:	01400304 	movi	r5,12
1000f8d4:	000aef80 	call	1000aef8 <__mulsi3>
1000f8d8:	8085883a 	add	r2,r16,r2
1000f8dc:	10800017 	ldw	r2,0(r2)
1000f8e0:	1000151e 	bne	r2,zero,1000f938 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000f8e4:	04040074 	movhi	r16,4097
1000f8e8:	84024704 	addi	r16,r16,2332
1000f8ec:	e0bffc17 	ldw	r2,-16(fp)
1000f8f0:	1009883a 	mov	r4,r2
1000f8f4:	01400304 	movi	r5,12
1000f8f8:	000aef80 	call	1000aef8 <__mulsi3>
1000f8fc:	8085883a 	add	r2,r16,r2
1000f900:	e0fffe17 	ldw	r3,-8(fp)
1000f904:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000f908:	00840074 	movhi	r2,4097
1000f90c:	1086cb04 	addi	r2,r2,6956
1000f910:	10c00017 	ldw	r3,0(r2)
1000f914:	e0bffc17 	ldw	r2,-16(fp)
1000f918:	1880040e 	bge	r3,r2,1000f92c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000f91c:	00840074 	movhi	r2,4097
1000f920:	1086cb04 	addi	r2,r2,6956
1000f924:	e0fffc17 	ldw	r3,-16(fp)
1000f928:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000f92c:	e0bffc17 	ldw	r2,-16(fp)
1000f930:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000f934:	00000606 	br	1000f950 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f938:	e0bffc17 	ldw	r2,-16(fp)
1000f93c:	10800044 	addi	r2,r2,1
1000f940:	e0bffc15 	stw	r2,-16(fp)
1000f944:	e0bffc17 	ldw	r2,-16(fp)
1000f948:	10800810 	cmplti	r2,r2,32
1000f94c:	103fdc1e 	bne	r2,zero,1000f8c0 <__alt_data_end+0xf800f8c0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000f950:	e0bffd17 	ldw	r2,-12(fp)
}
1000f954:	e6ffff04 	addi	sp,fp,-4
1000f958:	dfc00217 	ldw	ra,8(sp)
1000f95c:	df000117 	ldw	fp,4(sp)
1000f960:	dc000017 	ldw	r16,0(sp)
1000f964:	dec00304 	addi	sp,sp,12
1000f968:	f800283a 	ret

1000f96c <atexit>:
1000f96c:	200b883a 	mov	r5,r4
1000f970:	000d883a 	mov	r6,zero
1000f974:	0009883a 	mov	r4,zero
1000f978:	000f883a 	mov	r7,zero
1000f97c:	000fa341 	jmpi	1000fa34 <__register_exitproc>

1000f980 <exit>:
1000f980:	defffe04 	addi	sp,sp,-8
1000f984:	000b883a 	mov	r5,zero
1000f988:	dc000015 	stw	r16,0(sp)
1000f98c:	dfc00115 	stw	ra,4(sp)
1000f990:	2021883a 	mov	r16,r4
1000f994:	000fb500 	call	1000fb50 <__call_exitprocs>
1000f998:	00840074 	movhi	r2,4097
1000f99c:	1086c104 	addi	r2,r2,6916
1000f9a0:	11000017 	ldw	r4,0(r2)
1000f9a4:	20800f17 	ldw	r2,60(r4)
1000f9a8:	10000126 	beq	r2,zero,1000f9b0 <exit+0x30>
1000f9ac:	103ee83a 	callr	r2
1000f9b0:	8009883a 	mov	r4,r16
1000f9b4:	000fcf40 	call	1000fcf4 <_exit>

1000f9b8 <memcmp>:
1000f9b8:	01c000c4 	movi	r7,3
1000f9bc:	3980192e 	bgeu	r7,r6,1000fa24 <memcmp+0x6c>
1000f9c0:	2144b03a 	or	r2,r4,r5
1000f9c4:	11c4703a 	and	r2,r2,r7
1000f9c8:	10000f26 	beq	r2,zero,1000fa08 <memcmp+0x50>
1000f9cc:	21c00003 	ldbu	r7,0(r4)
1000f9d0:	28800003 	ldbu	r2,0(r5)
1000f9d4:	3880151e 	bne	r7,r2,1000fa2c <memcmp+0x74>
1000f9d8:	30ffff84 	addi	r3,r6,-2
1000f9dc:	01bfffc4 	movi	r6,-1
1000f9e0:	00000406 	br	1000f9f4 <memcmp+0x3c>
1000f9e4:	21c00003 	ldbu	r7,0(r4)
1000f9e8:	28800003 	ldbu	r2,0(r5)
1000f9ec:	18ffffc4 	addi	r3,r3,-1
1000f9f0:	38800e1e 	bne	r7,r2,1000fa2c <memcmp+0x74>
1000f9f4:	21000044 	addi	r4,r4,1
1000f9f8:	29400044 	addi	r5,r5,1
1000f9fc:	19bff91e 	bne	r3,r6,1000f9e4 <__alt_data_end+0xf800f9e4>
1000fa00:	0005883a 	mov	r2,zero
1000fa04:	f800283a 	ret
1000fa08:	20c00017 	ldw	r3,0(r4)
1000fa0c:	28800017 	ldw	r2,0(r5)
1000fa10:	1880041e 	bne	r3,r2,1000fa24 <memcmp+0x6c>
1000fa14:	31bfff04 	addi	r6,r6,-4
1000fa18:	21000104 	addi	r4,r4,4
1000fa1c:	29400104 	addi	r5,r5,4
1000fa20:	39bff936 	bltu	r7,r6,1000fa08 <__alt_data_end+0xf800fa08>
1000fa24:	303fe91e 	bne	r6,zero,1000f9cc <__alt_data_end+0xf800f9cc>
1000fa28:	003ff506 	br	1000fa00 <__alt_data_end+0xf800fa00>
1000fa2c:	3885c83a 	sub	r2,r7,r2
1000fa30:	f800283a 	ret

1000fa34 <__register_exitproc>:
1000fa34:	defffa04 	addi	sp,sp,-24
1000fa38:	00840074 	movhi	r2,4097
1000fa3c:	1086c104 	addi	r2,r2,6916
1000fa40:	dc000315 	stw	r16,12(sp)
1000fa44:	14000017 	ldw	r16,0(r2)
1000fa48:	dc400415 	stw	r17,16(sp)
1000fa4c:	dfc00515 	stw	ra,20(sp)
1000fa50:	80805217 	ldw	r2,328(r16)
1000fa54:	2023883a 	mov	r17,r4
1000fa58:	10003a26 	beq	r2,zero,1000fb44 <__register_exitproc+0x110>
1000fa5c:	10c00117 	ldw	r3,4(r2)
1000fa60:	020007c4 	movi	r8,31
1000fa64:	40c0190e 	bge	r8,r3,1000facc <__register_exitproc+0x98>
1000fa68:	00800034 	movhi	r2,0
1000fa6c:	10800004 	addi	r2,r2,0
1000fa70:	1000061e 	bne	r2,zero,1000fa8c <__register_exitproc+0x58>
1000fa74:	00bfffc4 	movi	r2,-1
1000fa78:	dfc00517 	ldw	ra,20(sp)
1000fa7c:	dc400417 	ldw	r17,16(sp)
1000fa80:	dc000317 	ldw	r16,12(sp)
1000fa84:	dec00604 	addi	sp,sp,24
1000fa88:	f800283a 	ret
1000fa8c:	01006404 	movi	r4,400
1000fa90:	d9400015 	stw	r5,0(sp)
1000fa94:	d9800115 	stw	r6,4(sp)
1000fa98:	d9c00215 	stw	r7,8(sp)
1000fa9c:	00000000 	call	10000000 <__reset>
1000faa0:	d9400017 	ldw	r5,0(sp)
1000faa4:	d9800117 	ldw	r6,4(sp)
1000faa8:	d9c00217 	ldw	r7,8(sp)
1000faac:	103ff126 	beq	r2,zero,1000fa74 <__alt_data_end+0xf800fa74>
1000fab0:	81005217 	ldw	r4,328(r16)
1000fab4:	10000115 	stw	zero,4(r2)
1000fab8:	0007883a 	mov	r3,zero
1000fabc:	11000015 	stw	r4,0(r2)
1000fac0:	80805215 	stw	r2,328(r16)
1000fac4:	10006215 	stw	zero,392(r2)
1000fac8:	10006315 	stw	zero,396(r2)
1000facc:	88000d1e 	bne	r17,zero,1000fb04 <__register_exitproc+0xd0>
1000fad0:	19000084 	addi	r4,r3,2
1000fad4:	2109883a 	add	r4,r4,r4
1000fad8:	18c00044 	addi	r3,r3,1
1000fadc:	2109883a 	add	r4,r4,r4
1000fae0:	10c00115 	stw	r3,4(r2)
1000fae4:	1105883a 	add	r2,r2,r4
1000fae8:	11400015 	stw	r5,0(r2)
1000faec:	0005883a 	mov	r2,zero
1000faf0:	dfc00517 	ldw	ra,20(sp)
1000faf4:	dc400417 	ldw	r17,16(sp)
1000faf8:	dc000317 	ldw	r16,12(sp)
1000fafc:	dec00604 	addi	sp,sp,24
1000fb00:	f800283a 	ret
1000fb04:	18c9883a 	add	r4,r3,r3
1000fb08:	2109883a 	add	r4,r4,r4
1000fb0c:	1109883a 	add	r4,r2,r4
1000fb10:	21802215 	stw	r6,136(r4)
1000fb14:	01800044 	movi	r6,1
1000fb18:	12006217 	ldw	r8,392(r2)
1000fb1c:	30cc983a 	sll	r6,r6,r3
1000fb20:	4190b03a 	or	r8,r8,r6
1000fb24:	12006215 	stw	r8,392(r2)
1000fb28:	21c04215 	stw	r7,264(r4)
1000fb2c:	01000084 	movi	r4,2
1000fb30:	893fe71e 	bne	r17,r4,1000fad0 <__alt_data_end+0xf800fad0>
1000fb34:	11006317 	ldw	r4,396(r2)
1000fb38:	218cb03a 	or	r6,r4,r6
1000fb3c:	11806315 	stw	r6,396(r2)
1000fb40:	003fe306 	br	1000fad0 <__alt_data_end+0xf800fad0>
1000fb44:	80805304 	addi	r2,r16,332
1000fb48:	80805215 	stw	r2,328(r16)
1000fb4c:	003fc306 	br	1000fa5c <__alt_data_end+0xf800fa5c>

1000fb50 <__call_exitprocs>:
1000fb50:	00840074 	movhi	r2,4097
1000fb54:	1086c104 	addi	r2,r2,6916
1000fb58:	10800017 	ldw	r2,0(r2)
1000fb5c:	defff304 	addi	sp,sp,-52
1000fb60:	df000b15 	stw	fp,44(sp)
1000fb64:	d8800015 	stw	r2,0(sp)
1000fb68:	10805204 	addi	r2,r2,328
1000fb6c:	dd400815 	stw	r21,32(sp)
1000fb70:	dfc00c15 	stw	ra,48(sp)
1000fb74:	ddc00a15 	stw	r23,40(sp)
1000fb78:	dd800915 	stw	r22,36(sp)
1000fb7c:	dd000715 	stw	r20,28(sp)
1000fb80:	dcc00615 	stw	r19,24(sp)
1000fb84:	dc800515 	stw	r18,20(sp)
1000fb88:	dc400415 	stw	r17,16(sp)
1000fb8c:	dc000315 	stw	r16,12(sp)
1000fb90:	d9000115 	stw	r4,4(sp)
1000fb94:	2839883a 	mov	fp,r5
1000fb98:	d8800215 	stw	r2,8(sp)
1000fb9c:	057fffc4 	movi	r21,-1
1000fba0:	d8800017 	ldw	r2,0(sp)
1000fba4:	14805217 	ldw	r18,328(r2)
1000fba8:	90001826 	beq	r18,zero,1000fc0c <__call_exitprocs+0xbc>
1000fbac:	ddc00217 	ldw	r23,8(sp)
1000fbb0:	90c00117 	ldw	r3,4(r18)
1000fbb4:	1c3fffc4 	addi	r16,r3,-1
1000fbb8:	80001116 	blt	r16,zero,1000fc00 <__call_exitprocs+0xb0>
1000fbbc:	18c00044 	addi	r3,r3,1
1000fbc0:	8427883a 	add	r19,r16,r16
1000fbc4:	18c7883a 	add	r3,r3,r3
1000fbc8:	95802204 	addi	r22,r18,136
1000fbcc:	9ce7883a 	add	r19,r19,r19
1000fbd0:	18c7883a 	add	r3,r3,r3
1000fbd4:	b4e7883a 	add	r19,r22,r19
1000fbd8:	90e3883a 	add	r17,r18,r3
1000fbdc:	e0001726 	beq	fp,zero,1000fc3c <__call_exitprocs+0xec>
1000fbe0:	8c87c83a 	sub	r3,r17,r18
1000fbe4:	b0c7883a 	add	r3,r22,r3
1000fbe8:	18c01e17 	ldw	r3,120(r3)
1000fbec:	1f001326 	beq	r3,fp,1000fc3c <__call_exitprocs+0xec>
1000fbf0:	843fffc4 	addi	r16,r16,-1
1000fbf4:	9cffff04 	addi	r19,r19,-4
1000fbf8:	8c7fff04 	addi	r17,r17,-4
1000fbfc:	857ff71e 	bne	r16,r21,1000fbdc <__alt_data_end+0xf800fbdc>
1000fc00:	00800034 	movhi	r2,0
1000fc04:	10800004 	addi	r2,r2,0
1000fc08:	10002a1e 	bne	r2,zero,1000fcb4 <__call_exitprocs+0x164>
1000fc0c:	dfc00c17 	ldw	ra,48(sp)
1000fc10:	df000b17 	ldw	fp,44(sp)
1000fc14:	ddc00a17 	ldw	r23,40(sp)
1000fc18:	dd800917 	ldw	r22,36(sp)
1000fc1c:	dd400817 	ldw	r21,32(sp)
1000fc20:	dd000717 	ldw	r20,28(sp)
1000fc24:	dcc00617 	ldw	r19,24(sp)
1000fc28:	dc800517 	ldw	r18,20(sp)
1000fc2c:	dc400417 	ldw	r17,16(sp)
1000fc30:	dc000317 	ldw	r16,12(sp)
1000fc34:	dec00d04 	addi	sp,sp,52
1000fc38:	f800283a 	ret
1000fc3c:	91000117 	ldw	r4,4(r18)
1000fc40:	88c00017 	ldw	r3,0(r17)
1000fc44:	213fffc4 	addi	r4,r4,-1
1000fc48:	24001526 	beq	r4,r16,1000fca0 <__call_exitprocs+0x150>
1000fc4c:	88000015 	stw	zero,0(r17)
1000fc50:	183fe726 	beq	r3,zero,1000fbf0 <__alt_data_end+0xf800fbf0>
1000fc54:	00800044 	movi	r2,1
1000fc58:	1408983a 	sll	r4,r2,r16
1000fc5c:	91406217 	ldw	r5,392(r18)
1000fc60:	95000117 	ldw	r20,4(r18)
1000fc64:	214a703a 	and	r5,r4,r5
1000fc68:	28000b26 	beq	r5,zero,1000fc98 <__call_exitprocs+0x148>
1000fc6c:	91406317 	ldw	r5,396(r18)
1000fc70:	2148703a 	and	r4,r4,r5
1000fc74:	20000c1e 	bne	r4,zero,1000fca8 <__call_exitprocs+0x158>
1000fc78:	99400017 	ldw	r5,0(r19)
1000fc7c:	d9000117 	ldw	r4,4(sp)
1000fc80:	183ee83a 	callr	r3
1000fc84:	90c00117 	ldw	r3,4(r18)
1000fc88:	1d3fc51e 	bne	r3,r20,1000fba0 <__alt_data_end+0xf800fba0>
1000fc8c:	b8c00017 	ldw	r3,0(r23)
1000fc90:	1cbfd726 	beq	r3,r18,1000fbf0 <__alt_data_end+0xf800fbf0>
1000fc94:	003fc206 	br	1000fba0 <__alt_data_end+0xf800fba0>
1000fc98:	183ee83a 	callr	r3
1000fc9c:	003ff906 	br	1000fc84 <__alt_data_end+0xf800fc84>
1000fca0:	94000115 	stw	r16,4(r18)
1000fca4:	003fea06 	br	1000fc50 <__alt_data_end+0xf800fc50>
1000fca8:	99000017 	ldw	r4,0(r19)
1000fcac:	183ee83a 	callr	r3
1000fcb0:	003ff406 	br	1000fc84 <__alt_data_end+0xf800fc84>
1000fcb4:	90c00117 	ldw	r3,4(r18)
1000fcb8:	1800081e 	bne	r3,zero,1000fcdc <__call_exitprocs+0x18c>
1000fcbc:	90c00017 	ldw	r3,0(r18)
1000fcc0:	18000a26 	beq	r3,zero,1000fcec <__call_exitprocs+0x19c>
1000fcc4:	9009883a 	mov	r4,r18
1000fcc8:	b8c00015 	stw	r3,0(r23)
1000fccc:	00000000 	call	10000000 <__reset>
1000fcd0:	bc800017 	ldw	r18,0(r23)
1000fcd4:	903fb61e 	bne	r18,zero,1000fbb0 <__alt_data_end+0xf800fbb0>
1000fcd8:	003fcc06 	br	1000fc0c <__alt_data_end+0xf800fc0c>
1000fcdc:	90c00017 	ldw	r3,0(r18)
1000fce0:	902f883a 	mov	r23,r18
1000fce4:	1825883a 	mov	r18,r3
1000fce8:	003ffa06 	br	1000fcd4 <__alt_data_end+0xf800fcd4>
1000fcec:	0007883a 	mov	r3,zero
1000fcf0:	003ffb06 	br	1000fce0 <__alt_data_end+0xf800fce0>

1000fcf4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000fcf4:	defffd04 	addi	sp,sp,-12
1000fcf8:	df000215 	stw	fp,8(sp)
1000fcfc:	df000204 	addi	fp,sp,8
1000fd00:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000fd04:	0001883a 	nop
1000fd08:	e0bfff17 	ldw	r2,-4(fp)
1000fd0c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000fd10:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000fd14:	10000226 	beq	r2,zero,1000fd20 <_exit+0x2c>
    ALT_SIM_FAIL();
1000fd18:	002af070 	cmpltui	zero,zero,43969
1000fd1c:	00000106 	br	1000fd24 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000fd20:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000fd24:	003fff06 	br	1000fd24 <__alt_data_end+0xf800fd24>
