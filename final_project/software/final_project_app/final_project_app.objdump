
final_project_app.elf:     file format elf32-littlenios2
final_project_app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0000fc30 memsz 0x0000fc30 flags r-x
    LOAD off    0x00010c50 vaddr 0x1000fc50 paddr 0x10011744 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013238 vaddr 0x10013238 paddr 0x10013238 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f778  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000031c  1000f934  1000f934  00010934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  1000fc50  10011744  00010c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  10013238  10013238  00013238  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00012744  2**0
                  CONTENTS
  7 .sdram        00000000  10013394  10013394  00012744  2**0
                  CONTENTS
  8 .comment      00000039  00000000  00000000  00012744  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ce8  00000000  00000000  00012780  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002396a  00000000  00000000  00013468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008e83  00000000  00000000  00036dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aeab  00000000  00000000  0003fc55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002270  00000000  00000000  0004ab00  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000345c  00000000  00000000  0004cd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001704e  00000000  00000000  000501cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0006721c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001338  00000000  00000000  00067230  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006b9b6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006b9b9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006b9c5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006b9c6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006b9c7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006b9cb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006b9cf  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006b9d3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006b9de  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006b9e9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0006b9f4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003c  00000000  00000000  0006ba05  2**0
                  CONTENTS, READONLY
 30 .jdi          000047d7  00000000  00000000  0006ba41  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00063454  00000000  00000000  00070218  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
1000f934 l    d  .rodata	00000000 .rodata
1000fc50 l    d  .rwdata	00000000 .rwdata
10013238 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10013394 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_app_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 audIO.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000f996 l     O .rodata	00000010 zeroes.4155
1000f9a6 l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10002e6c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10004944 l     F .text	00000008 __fp_lock
1000494c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1000fc50 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10010094 l     O .rwdata	00000020 lc_ctype_charset
10010074 l     O .rwdata	00000020 lc_message_charset
100100b4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1000f9d8 l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10007dc8 l     F .text	000000fc __sprint_r.part.0
1000fb0c l     O .rodata	00000010 blanks.4099
1000fafc l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000a9f0 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000d2b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000d3d0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000d48c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000d590 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000d688 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000d76c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000d94c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10011734 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000dbc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000dd08 l     F .text	00000038 alt_dev_reg
1001069c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000dfe0 l     F .text	000001fc altera_avalon_jtag_uart_irq
1000e1dc l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000e950 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000eddc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000ef34 l     F .text	00000050 alt_get_errno
1000ef84 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10007444 g     F .text	00000074 _mprec_log10
10007530 g     F .text	00000088 __any_on
10009890 g     F .text	00000064 _isatty_r
1000f9e4 g     O .rodata	00000028 __mprec_tinytens
1000d894 g     F .text	00000078 alt_main
10000a64 g     F .text	000000b8 _puts_r
10013294 g     O .bss	00000100 alt_irq
100098f4 g     F .text	0000006c _lseek_r
10011744 g       *ABS*	00000000 __flash_rwdata_start
1000bd44 g     F .text	00000084 .hidden __eqdf2
10000478 g     F .text	00000060 alt_up_audio_read_fifo_avail
10013394 g       *ABS*	00000000 __alt_heap_start
10000a28 g     F .text	0000003c printf
100004d8 g     F .text	00000068 alt_up_audio_record_r
10009b68 g     F .text	0000009c _wcrtomb_r
10007cc0 g     F .text	0000005c __sseek
100049f0 g     F .text	0000019c __sinit
100099cc g     F .text	00000180 __swbuf_r
10005700 g     F .text	00000070 _setlocale_r
10004960 g     F .text	00000078 __sfmoreglue
1000d92c g     F .text	00000020 __malloc_unlock
100003f0 g     F .text	00000088 alt_up_audio_reset_audio_core
10006340 g     F .text	0000013c memmove
100049d8 g     F .text	00000018 _cleanup
10006590 g     F .text	000000a8 _Balloc
1000bdc8 g     F .text	000000d8 .hidden __gtdf2
1000f370 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10009828 g     F .text	00000068 _fstat_r
10013250 g     O .bss	00000004 errno
10007c3c g     F .text	00000008 __seofread
100003b0 g     F .text	00000040 alt_up_audio_write_interrupt_pending
10013258 g     O .bss	00000004 alt_argv
100196fc g       *ABS*	00000000 _gp
1001051c g     O .rwdata	00000180 alt_fd_list
1000d3fc g     F .text	00000090 alt_find_dev
10006234 g     F .text	0000010c memcpy
10004954 g     F .text	0000000c _cleanup_r
1000d094 g     F .text	000000d0 .hidden __floatsidf
1000eebc g     F .text	00000078 alt_io_redirect
1000bea0 g     F .text	000000ec .hidden __ltdf2
1000f934 g       *ABS*	00000000 __DTOR_END__
10011700 g     O .rwdata	00000004 AUDIO_CONFIG
10000b1c g     F .text	00000014 puts
10007b1c g     F .text	00000068 __fpclassifyd
100073a4 g     F .text	000000a0 __ratio
10009324 g     F .text	00000024 __vfiprintf_internal
100008b4 g     F .text	00000050 alt_up_audio_read_fifo_head
1000e3d4 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
100009fc g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000aaf4 g     F .text	00000008 .hidden __udivsi3
1000d5e0 g     F .text	000000a8 isatty
1000fa34 g     O .rodata	000000c8 __mprec_tens
10005770 g     F .text	0000000c __locale_charset
1001324c g     O .bss	00000004 __malloc_top_pad
1001170c g     O .rwdata	00000004 __mb_cur_max
100057a0 g     F .text	0000000c _localeconv_r
100069c0 g     F .text	0000003c __i2b
100050f4 g     F .text	000004ac __sfvwrite_r
10007b84 g     F .text	00000064 _sbrk_r
10009960 g     F .text	0000006c _read_r
1001172c g     O .rwdata	00000004 alt_max_fd
10000904 g     F .text	0000005c alt_up_audio_write_fifo_head
100094f0 g     F .text	00000128 _fclose_r
10004914 g     F .text	00000030 fflush
10013248 g     O .bss	00000004 __malloc_max_sbrked_mem
1000ab2c g     F .text	0000087c .hidden __adddf3
10007170 g     F .text	000000f0 __b2d
1000a3bc g     F .text	00000634 .hidden __umoddi3
1000d7bc g     F .text	000000d8 lseek
10011704 g     O .rwdata	00000004 _global_impure_ptr
100075b8 g     F .text	00000564 _realloc_r
10013394 g       *ABS*	00000000 __bss_end
1000ecec g     F .text	000000f0 alt_iic_isr_register
1000f26c g     F .text	00000104 alt_tick
10009d68 g     F .text	00000654 .hidden __udivdi3
1000962c g     F .text	00000184 _fputwc_r
1000fa0c g     O .rodata	00000028 __mprec_bigtens
100067a4 g     F .text	00000104 __s2b
1000d164 g     F .text	000000a0 .hidden __floatunsidf
10006f00 g     F .text	00000060 __mcmp
100001f8 g     F .text	00000040 alt_up_audio_open_dev
10004cb8 g     F .text	00000018 __fp_lock_all
1000eca0 g     F .text	0000004c alt_ic_irq_enabled
10000608 g     F .text	00000068 alt_up_audio_play_r
1000f1d4 g     F .text	00000098 alt_alarm_stop
10013260 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
100104f4 g     O .rwdata	00000028 alt_dev_null
1000e934 g     F .text	0000001c alt_dcache_flush_all
100068a8 g     F .text	00000068 __hi0bits
100116fc g     O .rwdata	00000004 AUDIO_DEVICE
1000d014 g     F .text	00000080 .hidden __fixdfsi
10011744 g       *ABS*	00000000 __ram_rwdata_end
10011724 g     O .rwdata	00000008 alt_dev_list
1000dc14 g     F .text	000000f4 write
1000fc50 g       *ABS*	00000000 __ram_rodata_end
1000d4dc g     F .text	000000b4 fstat
1000bea0 g     F .text	000000ec .hidden __ledf2
10006c68 g     F .text	00000148 __pow5mult
10007edc g     F .text	00001448 ___vfiprintf_internal_r
10013240 g     O .bss	00000004 __nlocale_changed
1000aafc g     F .text	00000008 .hidden __umodsi3
10013394 g       *ABS*	00000000 end
1000df20 g     F .text	000000c0 altera_avalon_jtag_uart_init
1000f934 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000d204 g     F .text	000000ac .hidden __clzsi2
1000e5dc g     F .text	00000218 altera_avalon_jtag_uart_write
10004ca8 g     F .text	00000004 __sfp_lock_acquire
1000614c g     F .text	000000e8 memchr
10000bbc g     F .text	00002154 ___vfprintf_internal_r
10004e24 g     F .text	000002d0 _free_r
1000577c g     F .text	00000010 __locale_mb_cur_max
1000f75c g     F .text	000001a4 __call_exitprocs
1001323c g     O .bss	00000004 __mlocale_changed
10011710 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
10013264 g     O .bss	00000004 _alt_tick_rate
10000960 g     F .text	0000005c audio_read_fifo_avail
100007b4 g     F .text	00000100 alt_up_audio_write_fifo
10006db0 g     F .text	00000150 __lshift
10013268 g     O .bss	00000004 _alt_nticks
1000d99c g     F .text	000000f8 read
1000dd74 g     F .text	00000048 alt_sys_init
100006d8 g     F .text	000000dc alt_up_audio_read_fifo
1000f640 g     F .text	0000011c __register_exitproc
10000320 g     F .text	00000050 alt_up_audio_disable_write_interrupt
100069fc g     F .text	0000026c __multiply
1000e280 g     F .text	00000068 altera_avalon_jtag_uart_close
1000ab04 g     F .text	00000028 .hidden __mulsi3
1000fc50 g       *ABS*	00000000 __ram_rwdata_start
1000f934 g       *ABS*	00000000 __ram_rodata_start
1001326c g     O .bss	00000028 __malloc_current_mallinfo
10007260 g     F .text	00000144 __d2b
1000ddbc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000f4a4 g     F .text	000000d4 alt_get_fd
100093b4 g     F .text	00000064 _close_r
100002d4 g     F .text	0000004c alt_up_audio_enable_write_interrupt
1000f5c4 g     F .text	0000007c memcmp
1000de7c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10013394 g       *ABS*	00000000 __alt_stack_base
1000decc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10002d34 g     F .text	00000138 __swsetup_r
1000b3a8 g     F .text	0000099c .hidden __divdf3
10000284 g     F .text	00000050 alt_up_audio_disable_read_interrupt
10004b8c g     F .text	0000011c __sfp
100074b8 g     F .text	00000078 __copybits
100100ec g     O .rwdata	00000408 __malloc_av_
10004cb4 g     F .text	00000004 __sinit_lock_release
1000bf8c g     F .text	00000800 .hidden __muldf3
10007be8 g     F .text	00000054 __sread
1000f390 g     F .text	00000114 alt_find_file
1000e9a0 g     F .text	000000a0 alt_dev_llist_insert
1000d90c g     F .text	00000020 __malloc_lock
1000db14 g     F .text	000000b0 sbrk
100046d0 g     F .text	00000244 _fflush_r
10009418 g     F .text	000000d8 _calloc_r
10013238 g       *ABS*	00000000 __bss_start
1000647c g     F .text	00000114 memset
100009bc g     F .text	00000040 main
100005a8 g     F .text	00000060 alt_up_audio_write_fifo_space
1001325c g     O .bss	00000004 alt_envp
10013244 g     O .bss	00000004 __malloc_max_total_mem
1000de1c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10009b4c g     F .text	0000001c __swbuf
10007d1c g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10009618 g     F .text	00000014 fclose
10003094 g     F .text	0000163c _dtoa_r
10005988 g     F .text	000007c4 _malloc_r
10009cdc g     F .text	00000030 __ascii_wctomb
10011730 g     O .rwdata	00000004 alt_errno
100055a0 g     F .text	000000a8 _fwalk
1000aa60 g     F .text	00000048 .hidden __divsi3
10004ce8 g     F .text	0000013c _malloc_trim_r
1000f934 g       *ABS*	00000000 __CTOR_END__
10007d24 g     F .text	000000a4 strcmp
1000f934 g       *ABS*	00000000 __flash_rodata_start
1000f934 g       *ABS*	00000000 __DTOR_LIST__
1000bd44 g     F .text	00000084 .hidden __nedf2
1000dd40 g     F .text	00000034 alt_irq_init
1000da94 g     F .text	00000080 alt_release_fd
1000fb1c g     O .rodata	00000100 .hidden __clz_tab
10013238 g     O .bss	00000004 _PathLocale
1000f578 g     F .text	00000014 atexit
10009348 g     F .text	0000006c _write_r
100057ac g     F .text	0000001c setlocale
10011708 g     O .rwdata	00000004 _impure_ptr
10013254 g     O .bss	00000004 alt_argc
1000ea9c g     F .text	0000005c _do_dtors
10005798 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10007110 g     F .text	00000060 __ulp
10004cd0 g     F .text	00000018 __fp_unlock_all
1001171c g     O .rwdata	00000008 alt_fs_list
10000540 g     F .text	00000068 alt_up_audio_record_l
10000020 g       *ABS*	00000000 __ram_exceptions_start
100057c8 g     F .text	0000000c localeconv
1000eb14 g     F .text	00000050 alt_ic_isr_register
10011744 g       *ABS*	00000000 _edata
10013394 g       *ABS*	00000000 _end
100001bc g       *ABS*	00000000 __ram_exceptions_end
1000e2e8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10000670 g     F .text	00000068 alt_up_audio_play_l
1000ec00 g     F .text	000000a0 alt_ic_irq_disable
10007c44 g     F .text	0000007c __swrite
10011714 g     O .rwdata	00000004 __malloc_trim_threshold
1000578c g     F .text	0000000c __locale_msgcharset
1000f58c g     F .text	00000038 exit
10005648 g     F .text	000000b8 _fwalk_reent
10006f60 g     F .text	000001b0 __mdiff
1000aaa8 g     F .text	0000004c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10004cac g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000f900 g     F .text	00000034 _exit
1000e7f4 g     F .text	00000140 alt_alarm_start
100057d4 g     F .text	000001b4 __smakebuf_r
10000b30 g     F .text	0000008c strlen
1000f078 g     F .text	0000015c open
1000bdc8 g     F .text	000000d8 .hidden __gedf2
10011718 g     O .rwdata	00000004 __wctomb
10007ec4 g     F .text	00000018 __sprint_r
1000eaf8 g     F .text	0000001c alt_icache_flush_all
10011738 g     O .rwdata	00000004 alt_priority_mask
1000eb64 g     F .text	0000009c alt_ic_irq_enable
10002d10 g     F .text	00000024 __vfprintf_internal
10009d0c g     F .text	0000005c _wctomb_r
1000c78c g     F .text	00000888 .hidden __subdf3
10006910 g     F .text	000000b0 __lo0bits
1001173c g     O .rwdata	00000008 alt_alarm_list
1000ea40 g     F .text	0000005c _do_ctors
10009c04 g     F .text	000000d8 wcrtomb
1000d300 g     F .text	000000d0 close
1000d6ec g     F .text	00000080 alt_load
10000238 g     F .text	0000004c alt_up_audio_enable_read_interrupt
100097b0 g     F .text	00000078 fputwc
00000000  w      *UND*	00000000 free
10004cb0 g     F .text	00000004 __sinit_lock_acquire
10006660 g     F .text	00000144 __multadd
10006638 g     F .text	00000028 _Bfree
10000370 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40074 	movhi	r3,4097
10000130:	18cca504 	addi	r3,r3,12948
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10800017 	ldw	r2,0(r2)
10000144:	01040074 	movhi	r4,4097
10000148:	210ca504 	addi	r4,r4,12948
1000014c:	e0fffd17 	ldw	r3,-12(fp)
10000150:	180690fa 	slli	r3,r3,3
10000154:	20c7883a 	add	r3,r4,r3
10000158:	18c00104 	addi	r3,r3,4
1000015c:	18c00017 	ldw	r3,0(r3)
10000160:	1809883a 	mov	r4,r3
10000164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6a5bf14 	ori	gp,gp,38652
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	108c8e14 	ori	r2,r2,12856

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18cce514 	ori	r3,r3,13204

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	000d6ec0 	call	1000d6ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	000d8940 	call	1000d894 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
100001f8:	defffc04 	addi	sp,sp,-16
100001fc:	dfc00315 	stw	ra,12(sp)
10000200:	df000215 	stw	fp,8(sp)
10000204:	df000204 	addi	fp,sp,8
10000208:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
1000020c:	e13fff17 	ldw	r4,-4(fp)
10000210:	01440074 	movhi	r5,4097
10000214:	2945c904 	addi	r5,r5,5924
10000218:	000d3fc0 	call	1000d3fc <alt_find_dev>
1000021c:	e0bffe15 	stw	r2,-8(fp)
  return dev;
10000220:	e0bffe17 	ldw	r2,-8(fp)
}
10000224:	e037883a 	mov	sp,fp
10000228:	dfc00117 	ldw	ra,4(sp)
1000022c:	df000017 	ldw	fp,0(sp)
10000230:	dec00204 	addi	sp,sp,8
10000234:	f800283a 	ret

10000238 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
10000238:	defffd04 	addi	sp,sp,-12
1000023c:	df000215 	stw	fp,8(sp)
10000240:	df000204 	addi	fp,sp,8
10000244:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000248:	e0bfff17 	ldw	r2,-4(fp)
1000024c:	10800a17 	ldw	r2,40(r2)
10000250:	10800037 	ldwio	r2,0(r2)
10000254:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
10000258:	e0bffe17 	ldw	r2,-8(fp)
1000025c:	10800054 	ori	r2,r2,1
10000260:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000264:	e0bfff17 	ldw	r2,-4(fp)
10000268:	10800a17 	ldw	r2,40(r2)
1000026c:	e0fffe17 	ldw	r3,-8(fp)
10000270:	10c00035 	stwio	r3,0(r2)
}
10000274:	e037883a 	mov	sp,fp
10000278:	df000017 	ldw	fp,0(sp)
1000027c:	dec00104 	addi	sp,sp,4
10000280:	f800283a 	ret

10000284 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
10000284:	defffd04 	addi	sp,sp,-12
10000288:	df000215 	stw	fp,8(sp)
1000028c:	df000204 	addi	fp,sp,8
10000290:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000294:	e0bfff17 	ldw	r2,-4(fp)
10000298:	10800a17 	ldw	r2,40(r2)
1000029c:	10800037 	ldwio	r2,0(r2)
100002a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
100002a4:	e0fffe17 	ldw	r3,-8(fp)
100002a8:	00bfff84 	movi	r2,-2
100002ac:	1884703a 	and	r2,r3,r2
100002b0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
100002b4:	e0bfff17 	ldw	r2,-4(fp)
100002b8:	10800a17 	ldw	r2,40(r2)
100002bc:	e0fffe17 	ldw	r3,-8(fp)
100002c0:	10c00035 	stwio	r3,0(r2)
}
100002c4:	e037883a 	mov	sp,fp
100002c8:	df000017 	ldw	fp,0(sp)
100002cc:	dec00104 	addi	sp,sp,4
100002d0:	f800283a 	ret

100002d4 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
100002d4:	defffd04 	addi	sp,sp,-12
100002d8:	df000215 	stw	fp,8(sp)
100002dc:	df000204 	addi	fp,sp,8
100002e0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
100002e4:	e0bfff17 	ldw	r2,-4(fp)
100002e8:	10800a17 	ldw	r2,40(r2)
100002ec:	10800037 	ldwio	r2,0(r2)
100002f0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
100002f4:	e0bffe17 	ldw	r2,-8(fp)
100002f8:	10800094 	ori	r2,r2,2
100002fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000300:	e0bfff17 	ldw	r2,-4(fp)
10000304:	10800a17 	ldw	r2,40(r2)
10000308:	e0fffe17 	ldw	r3,-8(fp)
1000030c:	10c00035 	stwio	r3,0(r2)
}
10000310:	e037883a 	mov	sp,fp
10000314:	df000017 	ldw	fp,0(sp)
10000318:	dec00104 	addi	sp,sp,4
1000031c:	f800283a 	ret

10000320 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
10000320:	defffd04 	addi	sp,sp,-12
10000324:	df000215 	stw	fp,8(sp)
10000328:	df000204 	addi	fp,sp,8
1000032c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000330:	e0bfff17 	ldw	r2,-4(fp)
10000334:	10800a17 	ldw	r2,40(r2)
10000338:	10800037 	ldwio	r2,0(r2)
1000033c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
10000340:	e0fffe17 	ldw	r3,-8(fp)
10000344:	00bfff44 	movi	r2,-3
10000348:	1884703a 	and	r2,r3,r2
1000034c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000350:	e0bfff17 	ldw	r2,-4(fp)
10000354:	10800a17 	ldw	r2,40(r2)
10000358:	e0fffe17 	ldw	r3,-8(fp)
1000035c:	10c00035 	stwio	r3,0(r2)
}
10000360:	e037883a 	mov	sp,fp
10000364:	df000017 	ldw	fp,0(sp)
10000368:	dec00104 	addi	sp,sp,4
1000036c:	f800283a 	ret

10000370 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
10000370:	defffd04 	addi	sp,sp,-12
10000374:	df000215 	stw	fp,8(sp)
10000378:	df000204 	addi	fp,sp,8
1000037c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000380:	e0bfff17 	ldw	r2,-4(fp)
10000384:	10800a17 	ldw	r2,40(r2)
10000388:	10800037 	ldwio	r2,0(r2)
1000038c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
10000390:	e0bffe17 	ldw	r2,-8(fp)
10000394:	1080400c 	andi	r2,r2,256
10000398:	1004c03a 	cmpne	r2,r2,zero
1000039c:	10803fcc 	andi	r2,r2,255
}
100003a0:	e037883a 	mov	sp,fp
100003a4:	df000017 	ldw	fp,0(sp)
100003a8:	dec00104 	addi	sp,sp,4
100003ac:	f800283a 	ret

100003b0 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
100003b0:	defffd04 	addi	sp,sp,-12
100003b4:	df000215 	stw	fp,8(sp)
100003b8:	df000204 	addi	fp,sp,8
100003bc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
100003c0:	e0bfff17 	ldw	r2,-4(fp)
100003c4:	10800a17 	ldw	r2,40(r2)
100003c8:	10800037 	ldwio	r2,0(r2)
100003cc:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
100003d0:	e0bffe17 	ldw	r2,-8(fp)
100003d4:	1080800c 	andi	r2,r2,512
100003d8:	1004c03a 	cmpne	r2,r2,zero
100003dc:	10803fcc 	andi	r2,r2,255
}
100003e0:	e037883a 	mov	sp,fp
100003e4:	df000017 	ldw	fp,0(sp)
100003e8:	dec00104 	addi	sp,sp,4
100003ec:	f800283a 	ret

100003f0 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
100003f0:	defffd04 	addi	sp,sp,-12
100003f4:	df000215 	stw	fp,8(sp)
100003f8:	df000204 	addi	fp,sp,8
100003fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
10000400:	e0bfff17 	ldw	r2,-4(fp)
10000404:	10800a17 	ldw	r2,40(r2)
10000408:	10800037 	ldwio	r2,0(r2)
1000040c:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
10000410:	e0bffe17 	ldw	r2,-8(fp)
10000414:	10800114 	ori	r2,r2,4
10000418:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
1000041c:	e0bffe17 	ldw	r2,-8(fp)
10000420:	10800214 	ori	r2,r2,8
10000424:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000428:	e0bfff17 	ldw	r2,-4(fp)
1000042c:	10800a17 	ldw	r2,40(r2)
10000430:	e0fffe17 	ldw	r3,-8(fp)
10000434:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
10000438:	e0fffe17 	ldw	r3,-8(fp)
1000043c:	00bffec4 	movi	r2,-5
10000440:	1884703a 	and	r2,r3,r2
10000444:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
10000448:	e0fffe17 	ldw	r3,-8(fp)
1000044c:	00bffdc4 	movi	r2,-9
10000450:	1884703a 	and	r2,r3,r2
10000454:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
10000458:	e0bfff17 	ldw	r2,-4(fp)
1000045c:	10800a17 	ldw	r2,40(r2)
10000460:	e0fffe17 	ldw	r3,-8(fp)
10000464:	10c00035 	stwio	r3,0(r2)
}
10000468:	e037883a 	mov	sp,fp
1000046c:	df000017 	ldw	fp,0(sp)
10000470:	dec00104 	addi	sp,sp,4
10000474:	f800283a 	ret

10000478 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
10000478:	defffc04 	addi	sp,sp,-16
1000047c:	df000315 	stw	fp,12(sp)
10000480:	df000304 	addi	fp,sp,12
10000484:	e13ffe15 	stw	r4,-8(fp)
10000488:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
1000048c:	e0bffe17 	ldw	r2,-8(fp)
10000490:	10800a17 	ldw	r2,40(r2)
10000494:	10800104 	addi	r2,r2,4
10000498:	10800037 	ldwio	r2,0(r2)
1000049c:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
100004a0:	e0bfff17 	ldw	r2,-4(fp)
100004a4:	1000041e 	bne	r2,zero,100004b8 <alt_up_audio_read_fifo_avail+0x40>
100004a8:	e0bffd17 	ldw	r2,-12(fp)
100004ac:	10bfc00c 	andi	r2,r2,65280
100004b0:	1004d23a 	srli	r2,r2,8
100004b4:	00000206 	br	100004c0 <alt_up_audio_read_fifo_avail+0x48>
100004b8:	e0bffd17 	ldw	r2,-12(fp)
100004bc:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
100004c0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
100004c4:	e0bffd17 	ldw	r2,-12(fp)
}
100004c8:	e037883a 	mov	sp,fp
100004cc:	df000017 	ldw	fp,0(sp)
100004d0:	dec00104 	addi	sp,sp,4
100004d4:	f800283a 	ret

100004d8 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
100004d8:	defffa04 	addi	sp,sp,-24
100004dc:	dfc00515 	stw	ra,20(sp)
100004e0:	df000415 	stw	fp,16(sp)
100004e4:	df000404 	addi	fp,sp,16
100004e8:	e13ffd15 	stw	r4,-12(fp)
100004ec:	e17ffe15 	stw	r5,-8(fp)
100004f0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
100004f4:	e13ffd17 	ldw	r4,-12(fp)
100004f8:	01400044 	movi	r5,1
100004fc:	00004780 	call	10000478 <alt_up_audio_read_fifo_avail>
10000500:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
10000504:	e0bffc17 	ldw	r2,-16(fp)
10000508:	10801868 	cmpgeui	r2,r2,97
1000050c:	1000021e 	bne	r2,zero,10000518 <alt_up_audio_record_r+0x40>
		return 0;
10000510:	0005883a 	mov	r2,zero
10000514:	00000506 	br	1000052c <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
10000518:	e13ffd17 	ldw	r4,-12(fp)
1000051c:	e17ffe17 	ldw	r5,-8(fp)
10000520:	e1bfff17 	ldw	r6,-4(fp)
10000524:	01c00044 	movi	r7,1
10000528:	00006d80 	call	100006d8 <alt_up_audio_read_fifo>
}
1000052c:	e037883a 	mov	sp,fp
10000530:	dfc00117 	ldw	ra,4(sp)
10000534:	df000017 	ldw	fp,0(sp)
10000538:	dec00204 	addi	sp,sp,8
1000053c:	f800283a 	ret

10000540 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000540:	defffa04 	addi	sp,sp,-24
10000544:	dfc00515 	stw	ra,20(sp)
10000548:	df000415 	stw	fp,16(sp)
1000054c:	df000404 	addi	fp,sp,16
10000550:	e13ffd15 	stw	r4,-12(fp)
10000554:	e17ffe15 	stw	r5,-8(fp)
10000558:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
1000055c:	e13ffd17 	ldw	r4,-12(fp)
10000560:	000b883a 	mov	r5,zero
10000564:	00004780 	call	10000478 <alt_up_audio_read_fifo_avail>
10000568:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
1000056c:	e0bffc17 	ldw	r2,-16(fp)
10000570:	10801868 	cmpgeui	r2,r2,97
10000574:	1000021e 	bne	r2,zero,10000580 <alt_up_audio_record_l+0x40>
		return 0;
10000578:	0005883a 	mov	r2,zero
1000057c:	00000506 	br	10000594 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
10000580:	e13ffd17 	ldw	r4,-12(fp)
10000584:	e17ffe17 	ldw	r5,-8(fp)
10000588:	e1bfff17 	ldw	r6,-4(fp)
1000058c:	000f883a 	mov	r7,zero
10000590:	00006d80 	call	100006d8 <alt_up_audio_read_fifo>
}
10000594:	e037883a 	mov	sp,fp
10000598:	dfc00117 	ldw	ra,4(sp)
1000059c:	df000017 	ldw	fp,0(sp)
100005a0:	dec00204 	addi	sp,sp,8
100005a4:	f800283a 	ret

100005a8 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
100005a8:	defffc04 	addi	sp,sp,-16
100005ac:	df000315 	stw	fp,12(sp)
100005b0:	df000304 	addi	fp,sp,12
100005b4:	e13ffe15 	stw	r4,-8(fp)
100005b8:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100005bc:	e0bffe17 	ldw	r2,-8(fp)
100005c0:	10800a17 	ldw	r2,40(r2)
100005c4:	10800104 	addi	r2,r2,4
100005c8:	10800037 	ldwio	r2,0(r2)
100005cc:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100005d0:	e0bfff17 	ldw	r2,-4(fp)
100005d4:	1000031e 	bne	r2,zero,100005e4 <alt_up_audio_write_fifo_space+0x3c>
100005d8:	e0bffd17 	ldw	r2,-12(fp)
100005dc:	1004d63a 	srli	r2,r2,24
100005e0:	00000306 	br	100005f0 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
100005e4:	e0bffd17 	ldw	r2,-12(fp)
100005e8:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100005ec:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
100005f0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
100005f4:	e0bffd17 	ldw	r2,-12(fp)
}
100005f8:	e037883a 	mov	sp,fp
100005fc:	df000017 	ldw	fp,0(sp)
10000600:	dec00104 	addi	sp,sp,4
10000604:	f800283a 	ret

10000608 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000608:	defffa04 	addi	sp,sp,-24
1000060c:	dfc00515 	stw	ra,20(sp)
10000610:	df000415 	stw	fp,16(sp)
10000614:	df000404 	addi	fp,sp,16
10000618:	e13ffd15 	stw	r4,-12(fp)
1000061c:	e17ffe15 	stw	r5,-8(fp)
10000620:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
10000624:	e13ffd17 	ldw	r4,-12(fp)
10000628:	01400044 	movi	r5,1
1000062c:	00005a80 	call	100005a8 <alt_up_audio_write_fifo_space>
10000630:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
10000634:	e0bffc17 	ldw	r2,-16(fp)
10000638:	10801868 	cmpgeui	r2,r2,97
1000063c:	1000021e 	bne	r2,zero,10000648 <alt_up_audio_play_r+0x40>
		return 0;
10000640:	0005883a 	mov	r2,zero
10000644:	00000506 	br	1000065c <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
10000648:	e13ffd17 	ldw	r4,-12(fp)
1000064c:	e17ffe17 	ldw	r5,-8(fp)
10000650:	e1bfff17 	ldw	r6,-4(fp)
10000654:	01c00044 	movi	r7,1
10000658:	00007b40 	call	100007b4 <alt_up_audio_write_fifo>
}
1000065c:	e037883a 	mov	sp,fp
10000660:	dfc00117 	ldw	ra,4(sp)
10000664:	df000017 	ldw	fp,0(sp)
10000668:	dec00204 	addi	sp,sp,8
1000066c:	f800283a 	ret

10000670 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
10000670:	defffa04 	addi	sp,sp,-24
10000674:	dfc00515 	stw	ra,20(sp)
10000678:	df000415 	stw	fp,16(sp)
1000067c:	df000404 	addi	fp,sp,16
10000680:	e13ffd15 	stw	r4,-12(fp)
10000684:	e17ffe15 	stw	r5,-8(fp)
10000688:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
1000068c:	e13ffd17 	ldw	r4,-12(fp)
10000690:	000b883a 	mov	r5,zero
10000694:	00005a80 	call	100005a8 <alt_up_audio_write_fifo_space>
10000698:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
1000069c:	e0bffc17 	ldw	r2,-16(fp)
100006a0:	10801868 	cmpgeui	r2,r2,97
100006a4:	1000021e 	bne	r2,zero,100006b0 <alt_up_audio_play_l+0x40>
		return 0;
100006a8:	0005883a 	mov	r2,zero
100006ac:	00000506 	br	100006c4 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
100006b0:	e13ffd17 	ldw	r4,-12(fp)
100006b4:	e17ffe17 	ldw	r5,-8(fp)
100006b8:	e1bfff17 	ldw	r6,-4(fp)
100006bc:	000f883a 	mov	r7,zero
100006c0:	00007b40 	call	100007b4 <alt_up_audio_write_fifo>
}
100006c4:	e037883a 	mov	sp,fp
100006c8:	dfc00117 	ldw	ra,4(sp)
100006cc:	df000017 	ldw	fp,0(sp)
100006d0:	dec00204 	addi	sp,sp,8
100006d4:	f800283a 	ret

100006d8 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
100006d8:	defff904 	addi	sp,sp,-28
100006dc:	df000615 	stw	fp,24(sp)
100006e0:	df000604 	addi	fp,sp,24
100006e4:	e13ffc15 	stw	r4,-16(fp)
100006e8:	e17ffd15 	stw	r5,-12(fp)
100006ec:	e1bffe15 	stw	r6,-8(fp)
100006f0:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
100006f4:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
100006f8:	00002606 	br	10000794 <alt_up_audio_read_fifo+0xbc>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100006fc:	e0bffc17 	ldw	r2,-16(fp)
10000700:	10800a17 	ldw	r2,40(r2)
10000704:	10800104 	addi	r2,r2,4
10000708:	10800037 	ldwio	r2,0(r2)
1000070c:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
10000710:	e0bfff17 	ldw	r2,-4(fp)
10000714:	1000041e 	bne	r2,zero,10000728 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
10000718:	e0bffb17 	ldw	r2,-20(fp)
1000071c:	10bfc00c 	andi	r2,r2,65280
			:
10000720:	1004d23a 	srli	r2,r2,8
10000724:	00000206 	br	10000730 <alt_up_audio_read_fifo+0x58>
10000728:	e0bffb17 	ldw	r2,-20(fp)
1000072c:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
10000730:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
10000734:	e0bffb17 	ldw	r2,-20(fp)
10000738:	10001526 	beq	r2,zero,10000790 <alt_up_audio_read_fifo+0xb8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
1000073c:	e0bffa17 	ldw	r2,-24(fp)
10000740:	1085883a 	add	r2,r2,r2
10000744:	1085883a 	add	r2,r2,r2
10000748:	e0fffd17 	ldw	r3,-12(fp)
1000074c:	1887883a 	add	r3,r3,r2
10000750:	e0bfff17 	ldw	r2,-4(fp)
10000754:	1000051e 	bne	r2,zero,1000076c <alt_up_audio_read_fifo+0x94>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
10000758:	e0bffc17 	ldw	r2,-16(fp)
1000075c:	10800a17 	ldw	r2,40(r2)
10000760:	10800204 	addi	r2,r2,8
10000764:	10800037 	ldwio	r2,0(r2)
10000768:	00000406 	br	1000077c <alt_up_audio_read_fifo+0xa4>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
1000076c:	e0bffc17 	ldw	r2,-16(fp)
10000770:	10800a17 	ldw	r2,40(r2)
10000774:	10800304 	addi	r2,r2,12
10000778:	10800037 	ldwio	r2,0(r2)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
1000077c:	18800015 	stw	r2,0(r3)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
10000780:	e0bffa17 	ldw	r2,-24(fp)
10000784:	10800044 	addi	r2,r2,1
10000788:	e0bffa15 	stw	r2,-24(fp)
1000078c:	00000106 	br	10000794 <alt_up_audio_read_fifo+0xbc>
		}
		else
		{
			// no more data to read
			break;
10000790:	00000306 	br	100007a0 <alt_up_audio_read_fifo+0xc8>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
10000794:	e0fffa17 	ldw	r3,-24(fp)
10000798:	e0bffe17 	ldw	r2,-8(fp)
1000079c:	18bfd716 	blt	r3,r2,100006fc <__alt_data_end+0xf80006fc>
		{
			// no more data to read
			break;
		}
	}
	return count;
100007a0:	e0bffa17 	ldw	r2,-24(fp)
}
100007a4:	e037883a 	mov	sp,fp
100007a8:	df000017 	ldw	fp,0(sp)
100007ac:	dec00104 	addi	sp,sp,4
100007b0:	f800283a 	ret

100007b4 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
100007b4:	defff904 	addi	sp,sp,-28
100007b8:	df000615 	stw	fp,24(sp)
100007bc:	df000604 	addi	fp,sp,24
100007c0:	e13ffc15 	stw	r4,-16(fp)
100007c4:	e17ffd15 	stw	r5,-12(fp)
100007c8:	e1bffe15 	stw	r6,-8(fp)
100007cc:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
100007d0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
100007d4:	00002f06 	br	10000894 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
100007d8:	e0bffc17 	ldw	r2,-16(fp)
100007dc:	10800a17 	ldw	r2,40(r2)
100007e0:	10800104 	addi	r2,r2,4
100007e4:	10800037 	ldwio	r2,0(r2)
100007e8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
100007ec:	e0bfff17 	ldw	r2,-4(fp)
100007f0:	1000031e 	bne	r2,zero,10000800 <alt_up_audio_write_fifo+0x4c>
100007f4:	e0bffb17 	ldw	r2,-20(fp)
100007f8:	1004d63a 	srli	r2,r2,24
100007fc:	00000306 	br	1000080c <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
10000800:	e0bffb17 	ldw	r2,-20(fp)
10000804:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
10000808:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
1000080c:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
10000810:	e0bffb17 	ldw	r2,-20(fp)
10000814:	10001e26 	beq	r2,zero,10000890 <alt_up_audio_write_fifo+0xdc>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
10000818:	e0bfff17 	ldw	r2,-4(fp)
1000081c:	10000e1e 	bne	r2,zero,10000858 <alt_up_audio_write_fifo+0xa4>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
10000820:	e0bffc17 	ldw	r2,-16(fp)
10000824:	10800a17 	ldw	r2,40(r2)
10000828:	10800204 	addi	r2,r2,8
1000082c:	1007883a 	mov	r3,r2
10000830:	e0bffa17 	ldw	r2,-24(fp)
10000834:	11000044 	addi	r4,r2,1
10000838:	e13ffa15 	stw	r4,-24(fp)
1000083c:	1085883a 	add	r2,r2,r2
10000840:	1085883a 	add	r2,r2,r2
10000844:	e13ffd17 	ldw	r4,-12(fp)
10000848:	2085883a 	add	r2,r4,r2
1000084c:	10800017 	ldw	r2,0(r2)
10000850:	18800035 	stwio	r2,0(r3)
10000854:	00000f06 	br	10000894 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
10000858:	e0bffc17 	ldw	r2,-16(fp)
1000085c:	10800a17 	ldw	r2,40(r2)
10000860:	10800304 	addi	r2,r2,12
10000864:	1007883a 	mov	r3,r2
10000868:	e0bffa17 	ldw	r2,-24(fp)
1000086c:	11000044 	addi	r4,r2,1
10000870:	e13ffa15 	stw	r4,-24(fp)
10000874:	1085883a 	add	r2,r2,r2
10000878:	1085883a 	add	r2,r2,r2
1000087c:	e13ffd17 	ldw	r4,-12(fp)
10000880:	2085883a 	add	r2,r4,r2
10000884:	10800017 	ldw	r2,0(r2)
10000888:	18800035 	stwio	r2,0(r3)
1000088c:	00000106 	br	10000894 <alt_up_audio_write_fifo+0xe0>
		}
		else
		{
			// no more space to write
			break;
10000890:	00000306 	br	100008a0 <alt_up_audio_write_fifo+0xec>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
10000894:	e0fffa17 	ldw	r3,-24(fp)
10000898:	e0bffe17 	ldw	r2,-8(fp)
1000089c:	18bfce16 	blt	r3,r2,100007d8 <__alt_data_end+0xf80007d8>
		{
			// no more space to write
			break;
		}
	}
	return count;
100008a0:	e0bffa17 	ldw	r2,-24(fp)
}
100008a4:	e037883a 	mov	sp,fp
100008a8:	df000017 	ldw	fp,0(sp)
100008ac:	dec00104 	addi	sp,sp,4
100008b0:	f800283a 	ret

100008b4 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
100008b4:	defffd04 	addi	sp,sp,-12
100008b8:	df000215 	stw	fp,8(sp)
100008bc:	df000204 	addi	fp,sp,8
100008c0:	e13ffe15 	stw	r4,-8(fp)
100008c4:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
100008c8:	e0bfff17 	ldw	r2,-4(fp)
100008cc:	1000051e 	bne	r2,zero,100008e4 <alt_up_audio_read_fifo_head+0x30>
100008d0:	e0bffe17 	ldw	r2,-8(fp)
100008d4:	10800a17 	ldw	r2,40(r2)
100008d8:	10800204 	addi	r2,r2,8
100008dc:	10800037 	ldwio	r2,0(r2)
100008e0:	00000406 	br	100008f4 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
100008e4:	e0bffe17 	ldw	r2,-8(fp)
100008e8:	10800a17 	ldw	r2,40(r2)
100008ec:	10800304 	addi	r2,r2,12
100008f0:	10800037 	ldwio	r2,0(r2)
}
100008f4:	e037883a 	mov	sp,fp
100008f8:	df000017 	ldw	fp,0(sp)
100008fc:	dec00104 	addi	sp,sp,4
10000900:	f800283a 	ret

10000904 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
10000904:	defffc04 	addi	sp,sp,-16
10000908:	df000315 	stw	fp,12(sp)
1000090c:	df000304 	addi	fp,sp,12
10000910:	e13ffd15 	stw	r4,-12(fp)
10000914:	e17ffe15 	stw	r5,-8(fp)
10000918:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
1000091c:	e0bfff17 	ldw	r2,-4(fp)
10000920:	1000061e 	bne	r2,zero,1000093c <alt_up_audio_write_fifo_head+0x38>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
10000924:	e0bffd17 	ldw	r2,-12(fp)
10000928:	10800a17 	ldw	r2,40(r2)
1000092c:	10800204 	addi	r2,r2,8
10000930:	e0fffe17 	ldw	r3,-8(fp)
10000934:	10c00035 	stwio	r3,0(r2)
10000938:	00000506 	br	10000950 <alt_up_audio_write_fifo_head+0x4c>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
1000093c:	e0bffd17 	ldw	r2,-12(fp)
10000940:	10800a17 	ldw	r2,40(r2)
10000944:	10800304 	addi	r2,r2,12
10000948:	e0fffe17 	ldw	r3,-8(fp)
1000094c:	10c00035 	stwio	r3,0(r2)
}
10000950:	e037883a 	mov	sp,fp
10000954:	df000017 	ldw	fp,0(sp)
10000958:	dec00104 	addi	sp,sp,4
1000095c:	f800283a 	ret

10000960 <audio_read_fifo_avail>:
#define FIFOSPACE	((volatile unsigned int *const)(AUDIO_DEVICE + 1));
#define LEFT_DATA	((volatile unsigned int *const)(AUDIO_DEVICE + 2));
#define RIGHT_DATA	((volatile unsigned int *const)(AUDIO_DEVICE + 3));

unsigned int audio_read_fifo_avail(int channel)
{
10000960:	defffd04 	addi	sp,sp,-12
10000964:	df000215 	stw	fp,8(sp)
10000968:	df000204 	addi	fp,sp,8
1000096c:	e13fff15 	stw	r4,-4(fp)
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
10000970:	00801004 	movi	r2,64
10000974:	10800104 	addi	r2,r2,4
10000978:	10800037 	ldwio	r2,0(r2)
1000097c:	e0bffe15 	stw	r2,-8(fp)
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
10000980:	e0bfff17 	ldw	r2,-4(fp)
10000984:	10800098 	cmpnei	r2,r2,2
10000988:	1000041e 	bne	r2,zero,1000099c <audio_read_fifo_avail+0x3c>
{
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
1000098c:	e0bffe17 	ldw	r2,-8(fp)
10000990:	10bfc00c 	andi	r2,r2,65280
			:
10000994:	1004d23a 	srli	r2,r2,8
10000998:	00000206 	br	100009a4 <audio_read_fifo_avail+0x44>
1000099c:	e0bffe17 	ldw	r2,-8(fp)
100009a0:	10803fcc 	andi	r2,r2,255
unsigned int audio_read_fifo_avail(int channel)
{
	// read the whole fifospace register
	unsigned int fifospace = IORD_AUDIO_FIFOSPACE();
	// extract the part for proper channel read space
	fifospace = (channel == AUDIO_LEFT) ?
100009a4:	e0bffe15 	stw	r2,-8(fp)
			(fifospace & AUDIO_FIFOSPACE_RALC_MASK) >> AUDIO_FIFOSPACE_RALC_OFFSET
			:
			(fifospace & AUDIO_FIFOSPACE_RARC_MASK) >> AUDIO_FIFOSPACE_RARC_OFFSET;
	return fifospace;
100009a8:	e0bffe17 	ldw	r2,-8(fp)
}
100009ac:	e037883a 	mov	sp,fp
100009b0:	df000017 	ldw	fp,0(sp)
100009b4:	dec00104 	addi	sp,sp,4
100009b8:	f800283a 	ret

100009bc <main>:
//#include "priv/alt_file.h"
#include "audIO.h"


int main()
{
100009bc:	defc1604 	addi	sp,sp,-4008
100009c0:	dfc3e915 	stw	ra,4004(sp)
100009c4:	df03e815 	stw	fp,4000(sp)
100009c8:	df03e804 	addi	fp,sp,4000
  
  // Check how many data words the read FIFO for the right channel has.
  
  
  unsigned int buf[1000];
  printf("Reading buffer...");
100009cc:	01040074 	movhi	r4,4097
100009d0:	213e4d04 	addi	r4,r4,-1740
100009d4:	0000a280 	call	10000a28 <printf>
//  alt_up_audio_record_r(audio, buf, sizeof(buf));
  printf(" Done.\n");
100009d8:	01040074 	movhi	r4,4097
100009dc:	213e5204 	addi	r4,r4,-1720
100009e0:	0000b1c0 	call	10000b1c <puts>
	  // delay
	  for (i = 0; i < 100; i++)
		  ;
  }
  //*/
  return 0;
100009e4:	0005883a 	mov	r2,zero
}
100009e8:	e037883a 	mov	sp,fp
100009ec:	dfc00117 	ldw	ra,4(sp)
100009f0:	df000017 	ldw	fp,0(sp)
100009f4:	dec00204 	addi	sp,sp,8
100009f8:	f800283a 	ret

100009fc <_printf_r>:
100009fc:	defffd04 	addi	sp,sp,-12
10000a00:	dfc00015 	stw	ra,0(sp)
10000a04:	d9800115 	stw	r6,4(sp)
10000a08:	d9c00215 	stw	r7,8(sp)
10000a0c:	280d883a 	mov	r6,r5
10000a10:	21400217 	ldw	r5,8(r4)
10000a14:	d9c00104 	addi	r7,sp,4
10000a18:	0000bbc0 	call	10000bbc <___vfprintf_internal_r>
10000a1c:	dfc00017 	ldw	ra,0(sp)
10000a20:	dec00304 	addi	sp,sp,12
10000a24:	f800283a 	ret

10000a28 <printf>:
10000a28:	defffc04 	addi	sp,sp,-16
10000a2c:	dfc00015 	stw	ra,0(sp)
10000a30:	d9400115 	stw	r5,4(sp)
10000a34:	d9800215 	stw	r6,8(sp)
10000a38:	d9c00315 	stw	r7,12(sp)
10000a3c:	00840074 	movhi	r2,4097
10000a40:	1085c204 	addi	r2,r2,5896
10000a44:	10800017 	ldw	r2,0(r2)
10000a48:	200b883a 	mov	r5,r4
10000a4c:	d9800104 	addi	r6,sp,4
10000a50:	11000217 	ldw	r4,8(r2)
10000a54:	0002d100 	call	10002d10 <__vfprintf_internal>
10000a58:	dfc00017 	ldw	ra,0(sp)
10000a5c:	dec00404 	addi	sp,sp,16
10000a60:	f800283a 	ret

10000a64 <_puts_r>:
10000a64:	defff604 	addi	sp,sp,-40
10000a68:	dc400815 	stw	r17,32(sp)
10000a6c:	2023883a 	mov	r17,r4
10000a70:	2809883a 	mov	r4,r5
10000a74:	dc000715 	stw	r16,28(sp)
10000a78:	dfc00915 	stw	ra,36(sp)
10000a7c:	2821883a 	mov	r16,r5
10000a80:	0000b300 	call	10000b30 <strlen>
10000a84:	00c40074 	movhi	r3,4097
10000a88:	18c5c204 	addi	r3,r3,5896
10000a8c:	18c00017 	ldw	r3,0(r3)
10000a90:	11000044 	addi	r4,r2,1
10000a94:	d8800115 	stw	r2,4(sp)
10000a98:	18c00217 	ldw	r3,8(r3)
10000a9c:	00840074 	movhi	r2,4097
10000aa0:	10be5404 	addi	r2,r2,-1712
10000aa4:	d8800215 	stw	r2,8(sp)
10000aa8:	1940030b 	ldhu	r5,12(r3)
10000aac:	00800044 	movi	r2,1
10000ab0:	d8800315 	stw	r2,12(sp)
10000ab4:	00800084 	movi	r2,2
10000ab8:	d8800515 	stw	r2,20(sp)
10000abc:	dc000015 	stw	r16,0(sp)
10000ac0:	d9000615 	stw	r4,24(sp)
10000ac4:	dec00415 	stw	sp,16(sp)
10000ac8:	2888000c 	andi	r2,r5,8192
10000acc:	1000061e 	bne	r2,zero,10000ae8 <_puts_r+0x84>
10000ad0:	19001917 	ldw	r4,100(r3)
10000ad4:	00b7ffc4 	movi	r2,-8193
10000ad8:	29480014 	ori	r5,r5,8192
10000adc:	2084703a 	and	r2,r4,r2
10000ae0:	1940030d 	sth	r5,12(r3)
10000ae4:	18801915 	stw	r2,100(r3)
10000ae8:	89400217 	ldw	r5,8(r17)
10000aec:	8809883a 	mov	r4,r17
10000af0:	d9800404 	addi	r6,sp,16
10000af4:	00050f40 	call	100050f4 <__sfvwrite_r>
10000af8:	1000061e 	bne	r2,zero,10000b14 <_puts_r+0xb0>
10000afc:	00800284 	movi	r2,10
10000b00:	dfc00917 	ldw	ra,36(sp)
10000b04:	dc400817 	ldw	r17,32(sp)
10000b08:	dc000717 	ldw	r16,28(sp)
10000b0c:	dec00a04 	addi	sp,sp,40
10000b10:	f800283a 	ret
10000b14:	00bfffc4 	movi	r2,-1
10000b18:	003ff906 	br	10000b00 <__alt_data_end+0xf8000b00>

10000b1c <puts>:
10000b1c:	00840074 	movhi	r2,4097
10000b20:	1085c204 	addi	r2,r2,5896
10000b24:	200b883a 	mov	r5,r4
10000b28:	11000017 	ldw	r4,0(r2)
10000b2c:	0000a641 	jmpi	10000a64 <_puts_r>

10000b30 <strlen>:
10000b30:	208000cc 	andi	r2,r4,3
10000b34:	10001d26 	beq	r2,zero,10000bac <strlen+0x7c>
10000b38:	20800007 	ldb	r2,0(r4)
10000b3c:	10001d26 	beq	r2,zero,10000bb4 <strlen+0x84>
10000b40:	2005883a 	mov	r2,r4
10000b44:	00000206 	br	10000b50 <strlen+0x20>
10000b48:	10c00007 	ldb	r3,0(r2)
10000b4c:	18001526 	beq	r3,zero,10000ba4 <strlen+0x74>
10000b50:	10800044 	addi	r2,r2,1
10000b54:	10c000cc 	andi	r3,r2,3
10000b58:	183ffb1e 	bne	r3,zero,10000b48 <__alt_data_end+0xf8000b48>
10000b5c:	10c00017 	ldw	r3,0(r2)
10000b60:	01ffbff4 	movhi	r7,65279
10000b64:	39ffbfc4 	addi	r7,r7,-257
10000b68:	01a02074 	movhi	r6,32897
10000b6c:	31a02004 	addi	r6,r6,-32640
10000b70:	00000206 	br	10000b7c <strlen+0x4c>
10000b74:	10800104 	addi	r2,r2,4
10000b78:	10c00017 	ldw	r3,0(r2)
10000b7c:	19cb883a 	add	r5,r3,r7
10000b80:	00c6303a 	nor	r3,zero,r3
10000b84:	28c6703a 	and	r3,r5,r3
10000b88:	1986703a 	and	r3,r3,r6
10000b8c:	183ff926 	beq	r3,zero,10000b74 <__alt_data_end+0xf8000b74>
10000b90:	10c00007 	ldb	r3,0(r2)
10000b94:	18000326 	beq	r3,zero,10000ba4 <strlen+0x74>
10000b98:	10800044 	addi	r2,r2,1
10000b9c:	10c00007 	ldb	r3,0(r2)
10000ba0:	183ffd1e 	bne	r3,zero,10000b98 <__alt_data_end+0xf8000b98>
10000ba4:	1105c83a 	sub	r2,r2,r4
10000ba8:	f800283a 	ret
10000bac:	2005883a 	mov	r2,r4
10000bb0:	003fea06 	br	10000b5c <__alt_data_end+0xf8000b5c>
10000bb4:	0005883a 	mov	r2,zero
10000bb8:	f800283a 	ret

10000bbc <___vfprintf_internal_r>:
10000bbc:	defeb604 	addi	sp,sp,-1320
10000bc0:	dfc14915 	stw	ra,1316(sp)
10000bc4:	dcc14315 	stw	r19,1292(sp)
10000bc8:	dc414115 	stw	r17,1284(sp)
10000bcc:	d9012c15 	stw	r4,1200(sp)
10000bd0:	2827883a 	mov	r19,r5
10000bd4:	3023883a 	mov	r17,r6
10000bd8:	d9c12f15 	stw	r7,1212(sp)
10000bdc:	df014815 	stw	fp,1312(sp)
10000be0:	ddc14715 	stw	r23,1308(sp)
10000be4:	dd814615 	stw	r22,1304(sp)
10000be8:	dd414515 	stw	r21,1300(sp)
10000bec:	dd014415 	stw	r20,1296(sp)
10000bf0:	dc814215 	stw	r18,1288(sp)
10000bf4:	dc014015 	stw	r16,1280(sp)
10000bf8:	00057a00 	call	100057a0 <_localeconv_r>
10000bfc:	10800017 	ldw	r2,0(r2)
10000c00:	1009883a 	mov	r4,r2
10000c04:	d8813415 	stw	r2,1232(sp)
10000c08:	0000b300 	call	10000b30 <strlen>
10000c0c:	d8813815 	stw	r2,1248(sp)
10000c10:	d8812c17 	ldw	r2,1200(sp)
10000c14:	10000226 	beq	r2,zero,10000c20 <___vfprintf_internal_r+0x64>
10000c18:	10800e17 	ldw	r2,56(r2)
10000c1c:	10010826 	beq	r2,zero,10001040 <___vfprintf_internal_r+0x484>
10000c20:	9880030b 	ldhu	r2,12(r19)
10000c24:	1108000c 	andi	r4,r2,8192
10000c28:	1007883a 	mov	r3,r2
10000c2c:	2000071e 	bne	r4,zero,10000c4c <___vfprintf_internal_r+0x90>
10000c30:	99001917 	ldw	r4,100(r19)
10000c34:	10c80014 	ori	r3,r2,8192
10000c38:	00b7ffc4 	movi	r2,-8193
10000c3c:	2088703a 	and	r4,r4,r2
10000c40:	98c0030d 	sth	r3,12(r19)
10000c44:	1805883a 	mov	r2,r3
10000c48:	99001915 	stw	r4,100(r19)
10000c4c:	1900020c 	andi	r4,r3,8
10000c50:	2000ab26 	beq	r4,zero,10000f00 <___vfprintf_internal_r+0x344>
10000c54:	99000417 	ldw	r4,16(r19)
10000c58:	2000a926 	beq	r4,zero,10000f00 <___vfprintf_internal_r+0x344>
10000c5c:	18c0068c 	andi	r3,r3,26
10000c60:	01000284 	movi	r4,10
10000c64:	1900af26 	beq	r3,r4,10000f24 <___vfprintf_internal_r+0x368>
10000c68:	d9010dc4 	addi	r4,sp,1079
10000c6c:	d9410e04 	addi	r5,sp,1080
10000c70:	d8800404 	addi	r2,sp,16
10000c74:	2907c83a 	sub	r3,r5,r4
10000c78:	d9012815 	stw	r4,1184(sp)
10000c7c:	d9412915 	stw	r5,1188(sp)
10000c80:	d8811e15 	stw	r2,1144(sp)
10000c84:	d8012015 	stw	zero,1152(sp)
10000c88:	d8011f15 	stw	zero,1148(sp)
10000c8c:	d8013515 	stw	zero,1236(sp)
10000c90:	d8013715 	stw	zero,1244(sp)
10000c94:	d8013915 	stw	zero,1252(sp)
10000c98:	d8013b15 	stw	zero,1260(sp)
10000c9c:	d8013a15 	stw	zero,1256(sp)
10000ca0:	d8013115 	stw	zero,1220(sp)
10000ca4:	1011883a 	mov	r8,r2
10000ca8:	05c40074 	movhi	r23,4097
10000cac:	bdfe6584 	addi	r23,r23,-1642
10000cb0:	d8c13d15 	stw	r3,1268(sp)
10000cb4:	88800007 	ldb	r2,0(r17)
10000cb8:	10021126 	beq	r2,zero,10001500 <___vfprintf_internal_r+0x944>
10000cbc:	00c00944 	movi	r3,37
10000cc0:	8821883a 	mov	r16,r17
10000cc4:	10c0021e 	bne	r2,r3,10000cd0 <___vfprintf_internal_r+0x114>
10000cc8:	00001406 	br	10000d1c <___vfprintf_internal_r+0x160>
10000ccc:	10c00326 	beq	r2,r3,10000cdc <___vfprintf_internal_r+0x120>
10000cd0:	84000044 	addi	r16,r16,1
10000cd4:	80800007 	ldb	r2,0(r16)
10000cd8:	103ffc1e 	bne	r2,zero,10000ccc <__alt_data_end+0xf8000ccc>
10000cdc:	8465c83a 	sub	r18,r16,r17
10000ce0:	90000e26 	beq	r18,zero,10000d1c <___vfprintf_internal_r+0x160>
10000ce4:	d8c12017 	ldw	r3,1152(sp)
10000ce8:	d8811f17 	ldw	r2,1148(sp)
10000cec:	44400015 	stw	r17,0(r8)
10000cf0:	1c87883a 	add	r3,r3,r18
10000cf4:	10800044 	addi	r2,r2,1
10000cf8:	d8c12015 	stw	r3,1152(sp)
10000cfc:	44800115 	stw	r18,4(r8)
10000d00:	d8811f15 	stw	r2,1148(sp)
10000d04:	00c001c4 	movi	r3,7
10000d08:	1880bb16 	blt	r3,r2,10000ff8 <___vfprintf_internal_r+0x43c>
10000d0c:	42000204 	addi	r8,r8,8
10000d10:	d9013117 	ldw	r4,1220(sp)
10000d14:	2489883a 	add	r4,r4,r18
10000d18:	d9013115 	stw	r4,1220(sp)
10000d1c:	80800007 	ldb	r2,0(r16)
10000d20:	1000bc26 	beq	r2,zero,10001014 <___vfprintf_internal_r+0x458>
10000d24:	053fffc4 	movi	r20,-1
10000d28:	84400044 	addi	r17,r16,1
10000d2c:	84800047 	ldb	r18,1(r16)
10000d30:	d8012785 	stb	zero,1182(sp)
10000d34:	002d883a 	mov	r22,zero
10000d38:	d8013015 	stw	zero,1216(sp)
10000d3c:	d8012a15 	stw	zero,1192(sp)
10000d40:	04001604 	movi	r16,88
10000d44:	05400244 	movi	r21,9
10000d48:	4039883a 	mov	fp,r8
10000d4c:	a007883a 	mov	r3,r20
10000d50:	8c400044 	addi	r17,r17,1
10000d54:	90bff804 	addi	r2,r18,-32
10000d58:	80832036 	bltu	r16,r2,100019dc <___vfprintf_internal_r+0xe20>
10000d5c:	1085883a 	add	r2,r2,r2
10000d60:	1085883a 	add	r2,r2,r2
10000d64:	01440034 	movhi	r5,4096
10000d68:	29435e04 	addi	r5,r5,3448
10000d6c:	1145883a 	add	r2,r2,r5
10000d70:	10800017 	ldw	r2,0(r2)
10000d74:	1000683a 	jmp	r2
10000d78:	1000177c 	xorhi	zero,r2,93
10000d7c:	100019dc 	xori	zero,r2,103
10000d80:	100019dc 	xori	zero,r2,103
10000d84:	10001798 	cmpnei	zero,r2,94
10000d88:	100019dc 	xori	zero,r2,103
10000d8c:	100019dc 	xori	zero,r2,103
10000d90:	100019dc 	xori	zero,r2,103
10000d94:	100019dc 	xori	zero,r2,103
10000d98:	100019dc 	xori	zero,r2,103
10000d9c:	100019dc 	xori	zero,r2,103
10000da0:	100017ac 	andhi	zero,r2,94
10000da4:	1000104c 	andi	zero,r2,65
10000da8:	100019dc 	xori	zero,r2,103
10000dac:	10000eec 	andhi	zero,r2,59
10000db0:	10001058 	cmpnei	zero,r2,65
10000db4:	100019dc 	xori	zero,r2,103
10000db8:	100010a8 	cmpgeui	zero,r2,66
10000dbc:	100015b8 	rdprs	zero,r2,86
10000dc0:	100015b8 	rdprs	zero,r2,86
10000dc4:	100015b8 	rdprs	zero,r2,86
10000dc8:	100015b8 	rdprs	zero,r2,86
10000dcc:	100015b8 	rdprs	zero,r2,86
10000dd0:	100015b8 	rdprs	zero,r2,86
10000dd4:	100015b8 	rdprs	zero,r2,86
10000dd8:	100015b8 	rdprs	zero,r2,86
10000ddc:	100015b8 	rdprs	zero,r2,86
10000de0:	100019dc 	xori	zero,r2,103
10000de4:	100019dc 	xori	zero,r2,103
10000de8:	100019dc 	xori	zero,r2,103
10000dec:	100019dc 	xori	zero,r2,103
10000df0:	100019dc 	xori	zero,r2,103
10000df4:	100019dc 	xori	zero,r2,103
10000df8:	100019dc 	xori	zero,r2,103
10000dfc:	100019dc 	xori	zero,r2,103
10000e00:	100019dc 	xori	zero,r2,103
10000e04:	100019dc 	xori	zero,r2,103
10000e08:	100010bc 	xorhi	zero,r2,66
10000e0c:	10001508 	cmpgei	zero,r2,84
10000e10:	100019dc 	xori	zero,r2,103
10000e14:	10001508 	cmpgei	zero,r2,84
10000e18:	100019dc 	xori	zero,r2,103
10000e1c:	100019dc 	xori	zero,r2,103
10000e20:	100019dc 	xori	zero,r2,103
10000e24:	100019dc 	xori	zero,r2,103
10000e28:	10001600 	call	11000160 <_gp+0xfe6a64>
10000e2c:	100019dc 	xori	zero,r2,103
10000e30:	100019dc 	xori	zero,r2,103
10000e34:	10001614 	ori	zero,r2,88
10000e38:	100019dc 	xori	zero,r2,103
10000e3c:	100019dc 	xori	zero,r2,103
10000e40:	100019dc 	xori	zero,r2,103
10000e44:	100019dc 	xori	zero,r2,103
10000e48:	100019dc 	xori	zero,r2,103
10000e4c:	1000165c 	xori	zero,r2,89
10000e50:	100019dc 	xori	zero,r2,103
10000e54:	100019dc 	xori	zero,r2,103
10000e58:	100017d0 	cmplti	zero,r2,95
10000e5c:	100019dc 	xori	zero,r2,103
10000e60:	100019dc 	xori	zero,r2,103
10000e64:	100019dc 	xori	zero,r2,103
10000e68:	100019dc 	xori	zero,r2,103
10000e6c:	100019dc 	xori	zero,r2,103
10000e70:	100019dc 	xori	zero,r2,103
10000e74:	100019dc 	xori	zero,r2,103
10000e78:	100019dc 	xori	zero,r2,103
10000e7c:	100019dc 	xori	zero,r2,103
10000e80:	100019dc 	xori	zero,r2,103
10000e84:	100016d4 	ori	zero,r2,91
10000e88:	1000184c 	andi	zero,r2,97
10000e8c:	10001508 	cmpgei	zero,r2,84
10000e90:	10001508 	cmpgei	zero,r2,84
10000e94:	10001508 	cmpgei	zero,r2,84
10000e98:	10001818 	cmpnei	zero,r2,96
10000e9c:	1000184c 	andi	zero,r2,97
10000ea0:	100019dc 	xori	zero,r2,103
10000ea4:	100019dc 	xori	zero,r2,103
10000ea8:	1000182c 	andhi	zero,r2,96
10000eac:	100019dc 	xori	zero,r2,103
10000eb0:	1000169c 	xori	zero,r2,90
10000eb4:	1000195c 	xori	zero,r2,101
10000eb8:	10001908 	cmpgei	zero,r2,100
10000ebc:	1000188c 	andi	zero,r2,98
10000ec0:	100019dc 	xori	zero,r2,103
10000ec4:	100018a0 	cmpeqi	zero,r2,98
10000ec8:	100019dc 	xori	zero,r2,103
10000ecc:	1000199c 	xori	zero,r2,102
10000ed0:	100019dc 	xori	zero,r2,103
10000ed4:	100019dc 	xori	zero,r2,103
10000ed8:	10001714 	ori	zero,r2,92
10000edc:	d9413017 	ldw	r5,1216(sp)
10000ee0:	d8812f15 	stw	r2,1212(sp)
10000ee4:	014bc83a 	sub	r5,zero,r5
10000ee8:	d9413015 	stw	r5,1216(sp)
10000eec:	d8812a17 	ldw	r2,1192(sp)
10000ef0:	10800114 	ori	r2,r2,4
10000ef4:	d8812a15 	stw	r2,1192(sp)
10000ef8:	8c800007 	ldb	r18,0(r17)
10000efc:	003f9406 	br	10000d50 <__alt_data_end+0xf8000d50>
10000f00:	d9012c17 	ldw	r4,1200(sp)
10000f04:	980b883a 	mov	r5,r19
10000f08:	0002d340 	call	10002d34 <__swsetup_r>
10000f0c:	10002d1e 	bne	r2,zero,10000fc4 <___vfprintf_internal_r+0x408>
10000f10:	9880030b 	ldhu	r2,12(r19)
10000f14:	01000284 	movi	r4,10
10000f18:	1007883a 	mov	r3,r2
10000f1c:	18c0068c 	andi	r3,r3,26
10000f20:	193f511e 	bne	r3,r4,10000c68 <__alt_data_end+0xf8000c68>
10000f24:	98c0038b 	ldhu	r3,14(r19)
10000f28:	193fffcc 	andi	r4,r3,65535
10000f2c:	2120001c 	xori	r4,r4,32768
10000f30:	21200004 	addi	r4,r4,-32768
10000f34:	203f4c16 	blt	r4,zero,10000c68 <__alt_data_end+0xf8000c68>
10000f38:	9ac01917 	ldw	r11,100(r19)
10000f3c:	9a800717 	ldw	r10,28(r19)
10000f40:	9a400917 	ldw	r9,36(r19)
10000f44:	d9012c17 	ldw	r4,1200(sp)
10000f48:	d9c12f17 	ldw	r7,1212(sp)
10000f4c:	02010004 	movi	r8,1024
10000f50:	10bfff4c 	andi	r2,r2,65533
10000f54:	d8c1078d 	sth	r3,1054(sp)
10000f58:	d9410404 	addi	r5,sp,1040
10000f5c:	d8c00404 	addi	r3,sp,16
10000f60:	880d883a 	mov	r6,r17
10000f64:	d881070d 	sth	r2,1052(sp)
10000f68:	dac11d15 	stw	r11,1140(sp)
10000f6c:	da810b15 	stw	r10,1068(sp)
10000f70:	da410d15 	stw	r9,1076(sp)
10000f74:	d8c10415 	stw	r3,1040(sp)
10000f78:	d8c10815 	stw	r3,1056(sp)
10000f7c:	da010615 	stw	r8,1048(sp)
10000f80:	da010915 	stw	r8,1060(sp)
10000f84:	d8010a15 	stw	zero,1064(sp)
10000f88:	0000bbc0 	call	10000bbc <___vfprintf_internal_r>
10000f8c:	1021883a 	mov	r16,r2
10000f90:	10000416 	blt	r2,zero,10000fa4 <___vfprintf_internal_r+0x3e8>
10000f94:	d9012c17 	ldw	r4,1200(sp)
10000f98:	d9410404 	addi	r5,sp,1040
10000f9c:	00046d00 	call	100046d0 <_fflush_r>
10000fa0:	10072a1e 	bne	r2,zero,10002c4c <___vfprintf_internal_r+0x2090>
10000fa4:	d881070b 	ldhu	r2,1052(sp)
10000fa8:	1080100c 	andi	r2,r2,64
10000fac:	10000326 	beq	r2,zero,10000fbc <___vfprintf_internal_r+0x400>
10000fb0:	9880030b 	ldhu	r2,12(r19)
10000fb4:	10801014 	ori	r2,r2,64
10000fb8:	9880030d 	sth	r2,12(r19)
10000fbc:	8005883a 	mov	r2,r16
10000fc0:	00000106 	br	10000fc8 <___vfprintf_internal_r+0x40c>
10000fc4:	00bfffc4 	movi	r2,-1
10000fc8:	dfc14917 	ldw	ra,1316(sp)
10000fcc:	df014817 	ldw	fp,1312(sp)
10000fd0:	ddc14717 	ldw	r23,1308(sp)
10000fd4:	dd814617 	ldw	r22,1304(sp)
10000fd8:	dd414517 	ldw	r21,1300(sp)
10000fdc:	dd014417 	ldw	r20,1296(sp)
10000fe0:	dcc14317 	ldw	r19,1292(sp)
10000fe4:	dc814217 	ldw	r18,1288(sp)
10000fe8:	dc414117 	ldw	r17,1284(sp)
10000fec:	dc014017 	ldw	r16,1280(sp)
10000ff0:	dec14a04 	addi	sp,sp,1320
10000ff4:	f800283a 	ret
10000ff8:	d9012c17 	ldw	r4,1200(sp)
10000ffc:	980b883a 	mov	r5,r19
10001000:	d9811e04 	addi	r6,sp,1144
10001004:	0007ec40 	call	10007ec4 <__sprint_r>
10001008:	1000081e 	bne	r2,zero,1000102c <___vfprintf_internal_r+0x470>
1000100c:	da000404 	addi	r8,sp,16
10001010:	003f3f06 	br	10000d10 <__alt_data_end+0xf8000d10>
10001014:	d8812017 	ldw	r2,1152(sp)
10001018:	10000426 	beq	r2,zero,1000102c <___vfprintf_internal_r+0x470>
1000101c:	d9012c17 	ldw	r4,1200(sp)
10001020:	980b883a 	mov	r5,r19
10001024:	d9811e04 	addi	r6,sp,1144
10001028:	0007ec40 	call	10007ec4 <__sprint_r>
1000102c:	9880030b 	ldhu	r2,12(r19)
10001030:	1080100c 	andi	r2,r2,64
10001034:	103fe31e 	bne	r2,zero,10000fc4 <__alt_data_end+0xf8000fc4>
10001038:	d8813117 	ldw	r2,1220(sp)
1000103c:	003fe206 	br	10000fc8 <__alt_data_end+0xf8000fc8>
10001040:	d9012c17 	ldw	r4,1200(sp)
10001044:	00049f00 	call	100049f0 <__sinit>
10001048:	003ef506 	br	10000c20 <__alt_data_end+0xf8000c20>
1000104c:	05800ac4 	movi	r22,43
10001050:	8c800007 	ldb	r18,0(r17)
10001054:	003f3e06 	br	10000d50 <__alt_data_end+0xf8000d50>
10001058:	8c800007 	ldb	r18,0(r17)
1000105c:	00c00a84 	movi	r3,42
10001060:	88800044 	addi	r2,r17,1
10001064:	90c6fb26 	beq	r18,r3,10002c54 <___vfprintf_internal_r+0x2098>
10001068:	953ff404 	addi	r20,r18,-48
1000106c:	1023883a 	mov	r17,r2
10001070:	0007883a 	mov	r3,zero
10001074:	ad3f3736 	bltu	r21,r20,10000d54 <__alt_data_end+0xf8000d54>
10001078:	0009883a 	mov	r4,zero
1000107c:	01400284 	movi	r5,10
10001080:	000ab040 	call	1000ab04 <__mulsi3>
10001084:	8c800007 	ldb	r18,0(r17)
10001088:	a089883a 	add	r4,r20,r2
1000108c:	8c400044 	addi	r17,r17,1
10001090:	953ff404 	addi	r20,r18,-48
10001094:	ad3ff92e 	bgeu	r21,r20,1000107c <__alt_data_end+0xf800107c>
10001098:	2007883a 	mov	r3,r4
1000109c:	203f2d0e 	bge	r4,zero,10000d54 <__alt_data_end+0xf8000d54>
100010a0:	00ffffc4 	movi	r3,-1
100010a4:	003f2b06 	br	10000d54 <__alt_data_end+0xf8000d54>
100010a8:	d9412a17 	ldw	r5,1192(sp)
100010ac:	29402014 	ori	r5,r5,128
100010b0:	d9412a15 	stw	r5,1192(sp)
100010b4:	8c800007 	ldb	r18,0(r17)
100010b8:	003f2506 	br	10000d50 <__alt_data_end+0xf8000d50>
100010bc:	d9412a17 	ldw	r5,1192(sp)
100010c0:	1829883a 	mov	r20,r3
100010c4:	dd812785 	stb	r22,1182(sp)
100010c8:	29400414 	ori	r5,r5,16
100010cc:	d9412a15 	stw	r5,1192(sp)
100010d0:	d8c12a17 	ldw	r3,1192(sp)
100010d4:	e011883a 	mov	r8,fp
100010d8:	1880080c 	andi	r2,r3,32
100010dc:	1001e126 	beq	r2,zero,10001864 <___vfprintf_internal_r+0xca8>
100010e0:	d9012f17 	ldw	r4,1212(sp)
100010e4:	20800117 	ldw	r2,4(r4)
100010e8:	25400017 	ldw	r21,0(r4)
100010ec:	21000204 	addi	r4,r4,8
100010f0:	d9012f15 	stw	r4,1212(sp)
100010f4:	102d883a 	mov	r22,r2
100010f8:	10046916 	blt	r2,zero,100022a0 <___vfprintf_internal_r+0x16e4>
100010fc:	df012783 	ldbu	fp,1182(sp)
10001100:	00c00044 	movi	r3,1
10001104:	ad84b03a 	or	r2,r21,r22
10001108:	a0000416 	blt	r20,zero,1000111c <___vfprintf_internal_r+0x560>
1000110c:	d9412a17 	ldw	r5,1192(sp)
10001110:	013fdfc4 	movi	r4,-129
10001114:	290a703a 	and	r5,r5,r4
10001118:	d9412a15 	stw	r5,1192(sp)
1000111c:	1002491e 	bne	r2,zero,10001a44 <___vfprintf_internal_r+0xe88>
10001120:	a002481e 	bne	r20,zero,10001a44 <___vfprintf_internal_r+0xe88>
10001124:	18c03fcc 	andi	r3,r3,255
10001128:	1803871e 	bne	r3,zero,10001f48 <___vfprintf_internal_r+0x138c>
1000112c:	d9012a17 	ldw	r4,1192(sp)
10001130:	2080004c 	andi	r2,r4,1
10001134:	10038426 	beq	r2,zero,10001f48 <___vfprintf_internal_r+0x138c>
10001138:	d9413d17 	ldw	r5,1268(sp)
1000113c:	00800c04 	movi	r2,48
10001140:	d8810dc5 	stb	r2,1079(sp)
10001144:	d9412e15 	stw	r5,1208(sp)
10001148:	dc010dc4 	addi	r16,sp,1079
1000114c:	d8812e17 	ldw	r2,1208(sp)
10001150:	1500010e 	bge	r2,r20,10001158 <___vfprintf_internal_r+0x59c>
10001154:	a005883a 	mov	r2,r20
10001158:	d8812b15 	stw	r2,1196(sp)
1000115c:	d8013315 	stw	zero,1228(sp)
10001160:	e0803fcc 	andi	r2,fp,255
10001164:	1080201c 	xori	r2,r2,128
10001168:	10bfe004 	addi	r2,r2,-128
1000116c:	10000326 	beq	r2,zero,1000117c <___vfprintf_internal_r+0x5c0>
10001170:	d8c12b17 	ldw	r3,1196(sp)
10001174:	18c00044 	addi	r3,r3,1
10001178:	d8c12b15 	stw	r3,1196(sp)
1000117c:	d8c12a17 	ldw	r3,1192(sp)
10001180:	18c0008c 	andi	r3,r3,2
10001184:	d8c12d15 	stw	r3,1204(sp)
10001188:	18000326 	beq	r3,zero,10001198 <___vfprintf_internal_r+0x5dc>
1000118c:	d8c12b17 	ldw	r3,1196(sp)
10001190:	18c00084 	addi	r3,r3,2
10001194:	d8c12b15 	stw	r3,1196(sp)
10001198:	d8c12a17 	ldw	r3,1192(sp)
1000119c:	18c0210c 	andi	r3,r3,132
100011a0:	d8c13215 	stw	r3,1224(sp)
100011a4:	1802151e 	bne	r3,zero,100019fc <___vfprintf_internal_r+0xe40>
100011a8:	d9013017 	ldw	r4,1216(sp)
100011ac:	d8c12b17 	ldw	r3,1196(sp)
100011b0:	20f9c83a 	sub	fp,r4,r3
100011b4:	0702110e 	bge	zero,fp,100019fc <___vfprintf_internal_r+0xe40>
100011b8:	02400404 	movi	r9,16
100011bc:	d8c12017 	ldw	r3,1152(sp)
100011c0:	d8811f17 	ldw	r2,1148(sp)
100011c4:	4f059a0e 	bge	r9,fp,10002830 <___vfprintf_internal_r+0x1c74>
100011c8:	8809883a 	mov	r4,r17
100011cc:	01440074 	movhi	r5,4097
100011d0:	297e6984 	addi	r5,r5,-1626
100011d4:	dc013c15 	stw	r16,1264(sp)
100011d8:	e023883a 	mov	r17,fp
100011dc:	d9413615 	stw	r5,1240(sp)
100011e0:	482d883a 	mov	r22,r9
100011e4:	054001c4 	movi	r21,7
100011e8:	dc012c17 	ldw	r16,1200(sp)
100011ec:	2039883a 	mov	fp,r4
100011f0:	00000306 	br	10001200 <___vfprintf_internal_r+0x644>
100011f4:	8c7ffc04 	addi	r17,r17,-16
100011f8:	42000204 	addi	r8,r8,8
100011fc:	b440130e 	bge	r22,r17,1000124c <___vfprintf_internal_r+0x690>
10001200:	18c00404 	addi	r3,r3,16
10001204:	10800044 	addi	r2,r2,1
10001208:	01040074 	movhi	r4,4097
1000120c:	213e6984 	addi	r4,r4,-1626
10001210:	41000015 	stw	r4,0(r8)
10001214:	45800115 	stw	r22,4(r8)
10001218:	d8c12015 	stw	r3,1152(sp)
1000121c:	d8811f15 	stw	r2,1148(sp)
10001220:	a8bff40e 	bge	r21,r2,100011f4 <__alt_data_end+0xf80011f4>
10001224:	8009883a 	mov	r4,r16
10001228:	980b883a 	mov	r5,r19
1000122c:	d9811e04 	addi	r6,sp,1144
10001230:	0007ec40 	call	10007ec4 <__sprint_r>
10001234:	103f7d1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10001238:	8c7ffc04 	addi	r17,r17,-16
1000123c:	d8c12017 	ldw	r3,1152(sp)
10001240:	d8811f17 	ldw	r2,1148(sp)
10001244:	da000404 	addi	r8,sp,16
10001248:	b47fed16 	blt	r22,r17,10001200 <__alt_data_end+0xf8001200>
1000124c:	dc013c17 	ldw	r16,1264(sp)
10001250:	e009883a 	mov	r4,fp
10001254:	8839883a 	mov	fp,r17
10001258:	2023883a 	mov	r17,r4
1000125c:	d9413617 	ldw	r5,1240(sp)
10001260:	e0c7883a 	add	r3,fp,r3
10001264:	10800044 	addi	r2,r2,1
10001268:	41400015 	stw	r5,0(r8)
1000126c:	47000115 	stw	fp,4(r8)
10001270:	d8c12015 	stw	r3,1152(sp)
10001274:	d8811f15 	stw	r2,1148(sp)
10001278:	010001c4 	movi	r4,7
1000127c:	20836b16 	blt	r4,r2,1000202c <___vfprintf_internal_r+0x1470>
10001280:	d8812787 	ldb	r2,1182(sp)
10001284:	42000204 	addi	r8,r8,8
10001288:	10000c26 	beq	r2,zero,100012bc <___vfprintf_internal_r+0x700>
1000128c:	d8811f17 	ldw	r2,1148(sp)
10001290:	d9012784 	addi	r4,sp,1182
10001294:	18c00044 	addi	r3,r3,1
10001298:	10800044 	addi	r2,r2,1
1000129c:	41000015 	stw	r4,0(r8)
100012a0:	01000044 	movi	r4,1
100012a4:	41000115 	stw	r4,4(r8)
100012a8:	d8c12015 	stw	r3,1152(sp)
100012ac:	d8811f15 	stw	r2,1148(sp)
100012b0:	010001c4 	movi	r4,7
100012b4:	2082ef16 	blt	r4,r2,10001e74 <___vfprintf_internal_r+0x12b8>
100012b8:	42000204 	addi	r8,r8,8
100012bc:	d8812d17 	ldw	r2,1204(sp)
100012c0:	10000c26 	beq	r2,zero,100012f4 <___vfprintf_internal_r+0x738>
100012c4:	d8811f17 	ldw	r2,1148(sp)
100012c8:	d9012704 	addi	r4,sp,1180
100012cc:	18c00084 	addi	r3,r3,2
100012d0:	10800044 	addi	r2,r2,1
100012d4:	41000015 	stw	r4,0(r8)
100012d8:	01000084 	movi	r4,2
100012dc:	41000115 	stw	r4,4(r8)
100012e0:	d8c12015 	stw	r3,1152(sp)
100012e4:	d8811f15 	stw	r2,1148(sp)
100012e8:	010001c4 	movi	r4,7
100012ec:	2082e916 	blt	r4,r2,10001e94 <___vfprintf_internal_r+0x12d8>
100012f0:	42000204 	addi	r8,r8,8
100012f4:	d9013217 	ldw	r4,1224(sp)
100012f8:	00802004 	movi	r2,128
100012fc:	20823226 	beq	r4,r2,10001bc8 <___vfprintf_internal_r+0x100c>
10001300:	d9012e17 	ldw	r4,1208(sp)
10001304:	a129c83a 	sub	r20,r20,r4
10001308:	05002d0e 	bge	zero,r20,100013c0 <___vfprintf_internal_r+0x804>
1000130c:	05800404 	movi	r22,16
10001310:	d8811f17 	ldw	r2,1148(sp)
10001314:	05440074 	movhi	r21,4097
10001318:	ad7e6584 	addi	r21,r21,-1642
1000131c:	b5001f0e 	bge	r22,r20,1000139c <___vfprintf_internal_r+0x7e0>
10001320:	8809883a 	mov	r4,r17
10001324:	dc012d15 	stw	r16,1204(sp)
10001328:	a023883a 	mov	r17,r20
1000132c:	070001c4 	movi	fp,7
10001330:	dc012c17 	ldw	r16,1200(sp)
10001334:	2029883a 	mov	r20,r4
10001338:	00000306 	br	10001348 <___vfprintf_internal_r+0x78c>
1000133c:	8c7ffc04 	addi	r17,r17,-16
10001340:	42000204 	addi	r8,r8,8
10001344:	b440110e 	bge	r22,r17,1000138c <___vfprintf_internal_r+0x7d0>
10001348:	18c00404 	addi	r3,r3,16
1000134c:	10800044 	addi	r2,r2,1
10001350:	45c00015 	stw	r23,0(r8)
10001354:	45800115 	stw	r22,4(r8)
10001358:	d8c12015 	stw	r3,1152(sp)
1000135c:	d8811f15 	stw	r2,1148(sp)
10001360:	e0bff60e 	bge	fp,r2,1000133c <__alt_data_end+0xf800133c>
10001364:	8009883a 	mov	r4,r16
10001368:	980b883a 	mov	r5,r19
1000136c:	d9811e04 	addi	r6,sp,1144
10001370:	0007ec40 	call	10007ec4 <__sprint_r>
10001374:	103f2d1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10001378:	8c7ffc04 	addi	r17,r17,-16
1000137c:	d8c12017 	ldw	r3,1152(sp)
10001380:	d8811f17 	ldw	r2,1148(sp)
10001384:	da000404 	addi	r8,sp,16
10001388:	b47fef16 	blt	r22,r17,10001348 <__alt_data_end+0xf8001348>
1000138c:	dc012d17 	ldw	r16,1204(sp)
10001390:	a009883a 	mov	r4,r20
10001394:	8829883a 	mov	r20,r17
10001398:	2023883a 	mov	r17,r4
1000139c:	1d07883a 	add	r3,r3,r20
100013a0:	10800044 	addi	r2,r2,1
100013a4:	45400015 	stw	r21,0(r8)
100013a8:	45000115 	stw	r20,4(r8)
100013ac:	d8c12015 	stw	r3,1152(sp)
100013b0:	d8811f15 	stw	r2,1148(sp)
100013b4:	010001c4 	movi	r4,7
100013b8:	2082a616 	blt	r4,r2,10001e54 <___vfprintf_internal_r+0x1298>
100013bc:	42000204 	addi	r8,r8,8
100013c0:	d9412a17 	ldw	r5,1192(sp)
100013c4:	2880400c 	andi	r2,r5,256
100013c8:	1001b51e 	bne	r2,zero,10001aa0 <___vfprintf_internal_r+0xee4>
100013cc:	d8812e17 	ldw	r2,1208(sp)
100013d0:	d9012e17 	ldw	r4,1208(sp)
100013d4:	44000015 	stw	r16,0(r8)
100013d8:	1887883a 	add	r3,r3,r2
100013dc:	d8811f17 	ldw	r2,1148(sp)
100013e0:	10800044 	addi	r2,r2,1
100013e4:	41000115 	stw	r4,4(r8)
100013e8:	d8c12015 	stw	r3,1152(sp)
100013ec:	d8811f15 	stw	r2,1148(sp)
100013f0:	010001c4 	movi	r4,7
100013f4:	20818b16 	blt	r4,r2,10001a24 <___vfprintf_internal_r+0xe68>
100013f8:	42000204 	addi	r8,r8,8
100013fc:	d9412a17 	ldw	r5,1192(sp)
10001400:	2880010c 	andi	r2,r5,4
10001404:	10003226 	beq	r2,zero,100014d0 <___vfprintf_internal_r+0x914>
10001408:	d8813017 	ldw	r2,1216(sp)
1000140c:	d9012b17 	ldw	r4,1196(sp)
10001410:	1121c83a 	sub	r16,r2,r4
10001414:	04002e0e 	bge	zero,r16,100014d0 <___vfprintf_internal_r+0x914>
10001418:	04800404 	movi	r18,16
1000141c:	d8811f17 	ldw	r2,1148(sp)
10001420:	9405240e 	bge	r18,r16,100028b4 <___vfprintf_internal_r+0x1cf8>
10001424:	01040074 	movhi	r4,4097
10001428:	213e6984 	addi	r4,r4,-1626
1000142c:	d9013615 	stw	r4,1240(sp)
10001430:	050001c4 	movi	r20,7
10001434:	dd412c17 	ldw	r21,1200(sp)
10001438:	00000306 	br	10001448 <___vfprintf_internal_r+0x88c>
1000143c:	843ffc04 	addi	r16,r16,-16
10001440:	42000204 	addi	r8,r8,8
10001444:	9400130e 	bge	r18,r16,10001494 <___vfprintf_internal_r+0x8d8>
10001448:	18c00404 	addi	r3,r3,16
1000144c:	10800044 	addi	r2,r2,1
10001450:	01440074 	movhi	r5,4097
10001454:	297e6984 	addi	r5,r5,-1626
10001458:	41400015 	stw	r5,0(r8)
1000145c:	44800115 	stw	r18,4(r8)
10001460:	d8c12015 	stw	r3,1152(sp)
10001464:	d8811f15 	stw	r2,1148(sp)
10001468:	a0bff40e 	bge	r20,r2,1000143c <__alt_data_end+0xf800143c>
1000146c:	a809883a 	mov	r4,r21
10001470:	980b883a 	mov	r5,r19
10001474:	d9811e04 	addi	r6,sp,1144
10001478:	0007ec40 	call	10007ec4 <__sprint_r>
1000147c:	103eeb1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10001480:	843ffc04 	addi	r16,r16,-16
10001484:	d8c12017 	ldw	r3,1152(sp)
10001488:	d8811f17 	ldw	r2,1148(sp)
1000148c:	da000404 	addi	r8,sp,16
10001490:	943fed16 	blt	r18,r16,10001448 <__alt_data_end+0xf8001448>
10001494:	d9013617 	ldw	r4,1240(sp)
10001498:	1c07883a 	add	r3,r3,r16
1000149c:	10800044 	addi	r2,r2,1
100014a0:	41000015 	stw	r4,0(r8)
100014a4:	44000115 	stw	r16,4(r8)
100014a8:	d8c12015 	stw	r3,1152(sp)
100014ac:	d8811f15 	stw	r2,1148(sp)
100014b0:	010001c4 	movi	r4,7
100014b4:	2080060e 	bge	r4,r2,100014d0 <___vfprintf_internal_r+0x914>
100014b8:	d9012c17 	ldw	r4,1200(sp)
100014bc:	980b883a 	mov	r5,r19
100014c0:	d9811e04 	addi	r6,sp,1144
100014c4:	0007ec40 	call	10007ec4 <__sprint_r>
100014c8:	103ed81e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
100014cc:	d8c12017 	ldw	r3,1152(sp)
100014d0:	d8812b17 	ldw	r2,1196(sp)
100014d4:	d9413017 	ldw	r5,1216(sp)
100014d8:	1140010e 	bge	r2,r5,100014e0 <___vfprintf_internal_r+0x924>
100014dc:	2805883a 	mov	r2,r5
100014e0:	d9013117 	ldw	r4,1220(sp)
100014e4:	2089883a 	add	r4,r4,r2
100014e8:	d9013115 	stw	r4,1220(sp)
100014ec:	1802381e 	bne	r3,zero,10001dd0 <___vfprintf_internal_r+0x1214>
100014f0:	88800007 	ldb	r2,0(r17)
100014f4:	d8011f15 	stw	zero,1148(sp)
100014f8:	da000404 	addi	r8,sp,16
100014fc:	103def1e 	bne	r2,zero,10000cbc <__alt_data_end+0xf8000cbc>
10001500:	8821883a 	mov	r16,r17
10001504:	003e0506 	br	10000d1c <__alt_data_end+0xf8000d1c>
10001508:	1829883a 	mov	r20,r3
1000150c:	d8c12a17 	ldw	r3,1192(sp)
10001510:	dd812785 	stb	r22,1182(sp)
10001514:	e011883a 	mov	r8,fp
10001518:	1880020c 	andi	r2,r3,8
1000151c:	1003c926 	beq	r2,zero,10002444 <___vfprintf_internal_r+0x1888>
10001520:	d9012f17 	ldw	r4,1212(sp)
10001524:	d9412f17 	ldw	r5,1212(sp)
10001528:	d8812f17 	ldw	r2,1212(sp)
1000152c:	21000017 	ldw	r4,0(r4)
10001530:	29400117 	ldw	r5,4(r5)
10001534:	10800204 	addi	r2,r2,8
10001538:	d9013715 	stw	r4,1244(sp)
1000153c:	d9413915 	stw	r5,1252(sp)
10001540:	d8812f15 	stw	r2,1212(sp)
10001544:	d9013717 	ldw	r4,1244(sp)
10001548:	d9413917 	ldw	r5,1252(sp)
1000154c:	da013f15 	stw	r8,1276(sp)
10001550:	04000044 	movi	r16,1
10001554:	0007b1c0 	call	10007b1c <__fpclassifyd>
10001558:	da013f17 	ldw	r8,1276(sp)
1000155c:	d9013717 	ldw	r4,1244(sp)
10001560:	d9413917 	ldw	r5,1252(sp)
10001564:	1403571e 	bne	r2,r16,100022c4 <___vfprintf_internal_r+0x1708>
10001568:	000d883a 	mov	r6,zero
1000156c:	000f883a 	mov	r7,zero
10001570:	000bea00 	call	1000bea0 <__ledf2>
10001574:	da013f17 	ldw	r8,1276(sp)
10001578:	1004f416 	blt	r2,zero,1000294c <___vfprintf_internal_r+0x1d90>
1000157c:	df012783 	ldbu	fp,1182(sp)
10001580:	008011c4 	movi	r2,71
10001584:	14847a0e 	bge	r2,r18,10002770 <___vfprintf_internal_r+0x1bb4>
10001588:	04040074 	movhi	r16,4097
1000158c:	843e5604 	addi	r16,r16,-1704
10001590:	d9012a17 	ldw	r4,1192(sp)
10001594:	00bfdfc4 	movi	r2,-129
10001598:	00c000c4 	movi	r3,3
1000159c:	2088703a 	and	r4,r4,r2
100015a0:	d8c12b15 	stw	r3,1196(sp)
100015a4:	d9012a15 	stw	r4,1192(sp)
100015a8:	d8c12e15 	stw	r3,1208(sp)
100015ac:	0029883a 	mov	r20,zero
100015b0:	d8013315 	stw	zero,1228(sp)
100015b4:	003eea06 	br	10001160 <__alt_data_end+0xf8001160>
100015b8:	953ff404 	addi	r20,r18,-48
100015bc:	d8013015 	stw	zero,1216(sp)
100015c0:	0009883a 	mov	r4,zero
100015c4:	1825883a 	mov	r18,r3
100015c8:	01400284 	movi	r5,10
100015cc:	000ab040 	call	1000ab04 <__mulsi3>
100015d0:	88c00007 	ldb	r3,0(r17)
100015d4:	1509883a 	add	r4,r2,r20
100015d8:	8c400044 	addi	r17,r17,1
100015dc:	1d3ff404 	addi	r20,r3,-48
100015e0:	8805883a 	mov	r2,r17
100015e4:	ad3ff82e 	bgeu	r21,r20,100015c8 <__alt_data_end+0xf80015c8>
100015e8:	d9013015 	stw	r4,1216(sp)
100015ec:	9009883a 	mov	r4,r18
100015f0:	1023883a 	mov	r17,r2
100015f4:	1825883a 	mov	r18,r3
100015f8:	2007883a 	mov	r3,r4
100015fc:	003dd506 	br	10000d54 <__alt_data_end+0xf8000d54>
10001600:	d8812a17 	ldw	r2,1192(sp)
10001604:	10800214 	ori	r2,r2,8
10001608:	d8812a15 	stw	r2,1192(sp)
1000160c:	8c800007 	ldb	r18,0(r17)
10001610:	003dcf06 	br	10000d50 <__alt_data_end+0xf8000d50>
10001614:	d9012a17 	ldw	r4,1192(sp)
10001618:	e011883a 	mov	r8,fp
1000161c:	1829883a 	mov	r20,r3
10001620:	21000414 	ori	r4,r4,16
10001624:	d9012a15 	stw	r4,1192(sp)
10001628:	d9412a17 	ldw	r5,1192(sp)
1000162c:	2880080c 	andi	r2,r5,32
10001630:	1000cf26 	beq	r2,zero,10001970 <___vfprintf_internal_r+0xdb4>
10001634:	d8812f17 	ldw	r2,1212(sp)
10001638:	0007883a 	mov	r3,zero
1000163c:	15400017 	ldw	r21,0(r2)
10001640:	15800117 	ldw	r22,4(r2)
10001644:	10800204 	addi	r2,r2,8
10001648:	d8812f15 	stw	r2,1212(sp)
1000164c:	ad84b03a 	or	r2,r21,r22
10001650:	d8012785 	stb	zero,1182(sp)
10001654:	0039883a 	mov	fp,zero
10001658:	003eab06 	br	10001108 <__alt_data_end+0xf8001108>
1000165c:	d9012a17 	ldw	r4,1192(sp)
10001660:	e011883a 	mov	r8,fp
10001664:	1829883a 	mov	r20,r3
10001668:	21000414 	ori	r4,r4,16
1000166c:	d9012a15 	stw	r4,1192(sp)
10001670:	d9412a17 	ldw	r5,1192(sp)
10001674:	2880080c 	andi	r2,r5,32
10001678:	1000cd26 	beq	r2,zero,100019b0 <___vfprintf_internal_r+0xdf4>
1000167c:	d8812f17 	ldw	r2,1212(sp)
10001680:	00c00044 	movi	r3,1
10001684:	15400017 	ldw	r21,0(r2)
10001688:	15800117 	ldw	r22,4(r2)
1000168c:	10800204 	addi	r2,r2,8
10001690:	d8812f15 	stw	r2,1212(sp)
10001694:	ad84b03a 	or	r2,r21,r22
10001698:	003fed06 	br	10001650 <__alt_data_end+0xf8001650>
1000169c:	d9012a17 	ldw	r4,1192(sp)
100016a0:	dd812785 	stb	r22,1182(sp)
100016a4:	e011883a 	mov	r8,fp
100016a8:	2080080c 	andi	r2,r4,32
100016ac:	10039226 	beq	r2,zero,100024f8 <___vfprintf_internal_r+0x193c>
100016b0:	d9412f17 	ldw	r5,1212(sp)
100016b4:	d9013117 	ldw	r4,1220(sp)
100016b8:	28800017 	ldw	r2,0(r5)
100016bc:	2007d7fa 	srai	r3,r4,31
100016c0:	29400104 	addi	r5,r5,4
100016c4:	d9412f15 	stw	r5,1212(sp)
100016c8:	11000015 	stw	r4,0(r2)
100016cc:	10c00115 	stw	r3,4(r2)
100016d0:	003d7806 	br	10000cb4 <__alt_data_end+0xf8000cb4>
100016d4:	d8c12f17 	ldw	r3,1212(sp)
100016d8:	d9012f17 	ldw	r4,1212(sp)
100016dc:	e011883a 	mov	r8,fp
100016e0:	18800017 	ldw	r2,0(r3)
100016e4:	21000104 	addi	r4,r4,4
100016e8:	00c00044 	movi	r3,1
100016ec:	d8c12b15 	stw	r3,1196(sp)
100016f0:	d8012785 	stb	zero,1182(sp)
100016f4:	d8810405 	stb	r2,1040(sp)
100016f8:	d9012f15 	stw	r4,1212(sp)
100016fc:	d8c12e15 	stw	r3,1208(sp)
10001700:	0029883a 	mov	r20,zero
10001704:	d8013315 	stw	zero,1228(sp)
10001708:	dc010404 	addi	r16,sp,1040
1000170c:	0005883a 	mov	r2,zero
10001710:	003e9a06 	br	1000117c <__alt_data_end+0xf800117c>
10001714:	d9412a17 	ldw	r5,1192(sp)
10001718:	01040074 	movhi	r4,4097
1000171c:	213e5e04 	addi	r4,r4,-1672
10001720:	dd812785 	stb	r22,1182(sp)
10001724:	d9013b15 	stw	r4,1260(sp)
10001728:	2880080c 	andi	r2,r5,32
1000172c:	e011883a 	mov	r8,fp
10001730:	1829883a 	mov	r20,r3
10001734:	10002f26 	beq	r2,zero,100017f4 <___vfprintf_internal_r+0xc38>
10001738:	d8812f17 	ldw	r2,1212(sp)
1000173c:	15400017 	ldw	r21,0(r2)
10001740:	15800117 	ldw	r22,4(r2)
10001744:	10800204 	addi	r2,r2,8
10001748:	d8812f15 	stw	r2,1212(sp)
1000174c:	d9012a17 	ldw	r4,1192(sp)
10001750:	2080004c 	andi	r2,r4,1
10001754:	10025f26 	beq	r2,zero,100020d4 <___vfprintf_internal_r+0x1518>
10001758:	ad84b03a 	or	r2,r21,r22
1000175c:	10034e26 	beq	r2,zero,10002498 <___vfprintf_internal_r+0x18dc>
10001760:	00c00c04 	movi	r3,48
10001764:	21000094 	ori	r4,r4,2
10001768:	d8c12705 	stb	r3,1180(sp)
1000176c:	dc812745 	stb	r18,1181(sp)
10001770:	d9012a15 	stw	r4,1192(sp)
10001774:	00c00084 	movi	r3,2
10001778:	003fb506 	br	10001650 <__alt_data_end+0xf8001650>
1000177c:	b0803fcc 	andi	r2,r22,255
10001780:	1080201c 	xori	r2,r2,128
10001784:	10bfe004 	addi	r2,r2,-128
10001788:	1003501e 	bne	r2,zero,100024cc <___vfprintf_internal_r+0x1910>
1000178c:	05800804 	movi	r22,32
10001790:	8c800007 	ldb	r18,0(r17)
10001794:	003d6e06 	br	10000d50 <__alt_data_end+0xf8000d50>
10001798:	d9012a17 	ldw	r4,1192(sp)
1000179c:	21000054 	ori	r4,r4,1
100017a0:	d9012a15 	stw	r4,1192(sp)
100017a4:	8c800007 	ldb	r18,0(r17)
100017a8:	003d6906 	br	10000d50 <__alt_data_end+0xf8000d50>
100017ac:	d9412f17 	ldw	r5,1212(sp)
100017b0:	d9012f17 	ldw	r4,1212(sp)
100017b4:	29400017 	ldw	r5,0(r5)
100017b8:	20800104 	addi	r2,r4,4
100017bc:	d9413015 	stw	r5,1216(sp)
100017c0:	283dc616 	blt	r5,zero,10000edc <__alt_data_end+0xf8000edc>
100017c4:	d8812f15 	stw	r2,1212(sp)
100017c8:	8c800007 	ldb	r18,0(r17)
100017cc:	003d6006 	br	10000d50 <__alt_data_end+0xf8000d50>
100017d0:	d9412a17 	ldw	r5,1192(sp)
100017d4:	00840074 	movhi	r2,4097
100017d8:	10be5904 	addi	r2,r2,-1692
100017dc:	d8813b15 	stw	r2,1260(sp)
100017e0:	dd812785 	stb	r22,1182(sp)
100017e4:	2880080c 	andi	r2,r5,32
100017e8:	e011883a 	mov	r8,fp
100017ec:	1829883a 	mov	r20,r3
100017f0:	103fd11e 	bne	r2,zero,10001738 <__alt_data_end+0xf8001738>
100017f4:	d8c12a17 	ldw	r3,1192(sp)
100017f8:	1880040c 	andi	r2,r3,16
100017fc:	10033526 	beq	r2,zero,100024d4 <___vfprintf_internal_r+0x1918>
10001800:	d9012f17 	ldw	r4,1212(sp)
10001804:	002d883a 	mov	r22,zero
10001808:	25400017 	ldw	r21,0(r4)
1000180c:	21000104 	addi	r4,r4,4
10001810:	d9012f15 	stw	r4,1212(sp)
10001814:	003fcd06 	br	1000174c <__alt_data_end+0xf800174c>
10001818:	d9012a17 	ldw	r4,1192(sp)
1000181c:	21001014 	ori	r4,r4,64
10001820:	d9012a15 	stw	r4,1192(sp)
10001824:	8c800007 	ldb	r18,0(r17)
10001828:	003d4906 	br	10000d50 <__alt_data_end+0xf8000d50>
1000182c:	8c800007 	ldb	r18,0(r17)
10001830:	01401b04 	movi	r5,108
10001834:	8805883a 	mov	r2,r17
10001838:	9143db26 	beq	r18,r5,100027a8 <___vfprintf_internal_r+0x1bec>
1000183c:	d9412a17 	ldw	r5,1192(sp)
10001840:	29400414 	ori	r5,r5,16
10001844:	d9412a15 	stw	r5,1192(sp)
10001848:	003d4106 	br	10000d50 <__alt_data_end+0xf8000d50>
1000184c:	1829883a 	mov	r20,r3
10001850:	d8c12a17 	ldw	r3,1192(sp)
10001854:	dd812785 	stb	r22,1182(sp)
10001858:	e011883a 	mov	r8,fp
1000185c:	1880080c 	andi	r2,r3,32
10001860:	103e1f1e 	bne	r2,zero,100010e0 <__alt_data_end+0xf80010e0>
10001864:	d9412a17 	ldw	r5,1192(sp)
10001868:	2880040c 	andi	r2,r5,16
1000186c:	10032f26 	beq	r2,zero,1000252c <___vfprintf_internal_r+0x1970>
10001870:	d8812f17 	ldw	r2,1212(sp)
10001874:	15400017 	ldw	r21,0(r2)
10001878:	10800104 	addi	r2,r2,4
1000187c:	d8812f15 	stw	r2,1212(sp)
10001880:	a82dd7fa 	srai	r22,r21,31
10001884:	b005883a 	mov	r2,r22
10001888:	003e1b06 	br	100010f8 <__alt_data_end+0xf80010f8>
1000188c:	d8812a17 	ldw	r2,1192(sp)
10001890:	10800814 	ori	r2,r2,32
10001894:	d8812a15 	stw	r2,1192(sp)
10001898:	8c800007 	ldb	r18,0(r17)
1000189c:	003d2c06 	br	10000d50 <__alt_data_end+0xf8000d50>
100018a0:	1829883a 	mov	r20,r3
100018a4:	d8c12f17 	ldw	r3,1212(sp)
100018a8:	d8012785 	stb	zero,1182(sp)
100018ac:	e011883a 	mov	r8,fp
100018b0:	1c000017 	ldw	r16,0(r3)
100018b4:	1d400104 	addi	r21,r3,4
100018b8:	80040226 	beq	r16,zero,100028c4 <___vfprintf_internal_r+0x1d08>
100018bc:	8009883a 	mov	r4,r16
100018c0:	a003c716 	blt	r20,zero,100027e0 <___vfprintf_internal_r+0x1c24>
100018c4:	000b883a 	mov	r5,zero
100018c8:	a00d883a 	mov	r6,r20
100018cc:	df013f15 	stw	fp,1276(sp)
100018d0:	000614c0 	call	1000614c <memchr>
100018d4:	da013f17 	ldw	r8,1276(sp)
100018d8:	10044326 	beq	r2,zero,100029e8 <___vfprintf_internal_r+0x1e2c>
100018dc:	1405c83a 	sub	r2,r2,r16
100018e0:	d8812e15 	stw	r2,1208(sp)
100018e4:	a0837c16 	blt	r20,r2,100026d8 <___vfprintf_internal_r+0x1b1c>
100018e8:	d8812e17 	ldw	r2,1208(sp)
100018ec:	1003c116 	blt	r2,zero,100027f4 <___vfprintf_internal_r+0x1c38>
100018f0:	df012783 	ldbu	fp,1182(sp)
100018f4:	d8812b15 	stw	r2,1196(sp)
100018f8:	dd412f15 	stw	r21,1212(sp)
100018fc:	0029883a 	mov	r20,zero
10001900:	d8013315 	stw	zero,1228(sp)
10001904:	003e1606 	br	10001160 <__alt_data_end+0xf8001160>
10001908:	d9012f17 	ldw	r4,1212(sp)
1000190c:	d9412a17 	ldw	r5,1192(sp)
10001910:	00800c04 	movi	r2,48
10001914:	25400017 	ldw	r21,0(r4)
10001918:	d8812705 	stb	r2,1180(sp)
1000191c:	00801e04 	movi	r2,120
10001920:	29400094 	ori	r5,r5,2
10001924:	d8812745 	stb	r2,1181(sp)
10001928:	21000104 	addi	r4,r4,4
1000192c:	00840074 	movhi	r2,4097
10001930:	10be5e04 	addi	r2,r2,-1672
10001934:	1829883a 	mov	r20,r3
10001938:	d8813b15 	stw	r2,1260(sp)
1000193c:	e011883a 	mov	r8,fp
10001940:	002d883a 	mov	r22,zero
10001944:	d9412a15 	stw	r5,1192(sp)
10001948:	d9012f15 	stw	r4,1212(sp)
1000194c:	00c00084 	movi	r3,2
10001950:	04801e04 	movi	r18,120
10001954:	a805883a 	mov	r2,r21
10001958:	003f3d06 	br	10001650 <__alt_data_end+0xf8001650>
1000195c:	d9412a17 	ldw	r5,1192(sp)
10001960:	e011883a 	mov	r8,fp
10001964:	1829883a 	mov	r20,r3
10001968:	2880080c 	andi	r2,r5,32
1000196c:	103f311e 	bne	r2,zero,10001634 <__alt_data_end+0xf8001634>
10001970:	d8c12a17 	ldw	r3,1192(sp)
10001974:	1880040c 	andi	r2,r3,16
10001978:	1002c926 	beq	r2,zero,100024a0 <___vfprintf_internal_r+0x18e4>
1000197c:	d9012f17 	ldw	r4,1212(sp)
10001980:	002d883a 	mov	r22,zero
10001984:	0007883a 	mov	r3,zero
10001988:	25400017 	ldw	r21,0(r4)
1000198c:	21000104 	addi	r4,r4,4
10001990:	d9012f15 	stw	r4,1212(sp)
10001994:	a805883a 	mov	r2,r21
10001998:	003f2d06 	br	10001650 <__alt_data_end+0xf8001650>
1000199c:	d9412a17 	ldw	r5,1192(sp)
100019a0:	e011883a 	mov	r8,fp
100019a4:	1829883a 	mov	r20,r3
100019a8:	2880080c 	andi	r2,r5,32
100019ac:	103f331e 	bne	r2,zero,1000167c <__alt_data_end+0xf800167c>
100019b0:	d8c12a17 	ldw	r3,1192(sp)
100019b4:	1880040c 	andi	r2,r3,16
100019b8:	1002ac26 	beq	r2,zero,1000246c <___vfprintf_internal_r+0x18b0>
100019bc:	d9012f17 	ldw	r4,1212(sp)
100019c0:	002d883a 	mov	r22,zero
100019c4:	00c00044 	movi	r3,1
100019c8:	25400017 	ldw	r21,0(r4)
100019cc:	21000104 	addi	r4,r4,4
100019d0:	d9012f15 	stw	r4,1212(sp)
100019d4:	a805883a 	mov	r2,r21
100019d8:	003f1d06 	br	10001650 <__alt_data_end+0xf8001650>
100019dc:	dd812785 	stb	r22,1182(sp)
100019e0:	e011883a 	mov	r8,fp
100019e4:	903d8b26 	beq	r18,zero,10001014 <__alt_data_end+0xf8001014>
100019e8:	00c00044 	movi	r3,1
100019ec:	d8c12b15 	stw	r3,1196(sp)
100019f0:	dc810405 	stb	r18,1040(sp)
100019f4:	d8012785 	stb	zero,1182(sp)
100019f8:	003f4006 	br	100016fc <__alt_data_end+0xf80016fc>
100019fc:	d8c12017 	ldw	r3,1152(sp)
10001a00:	003e2106 	br	10001288 <__alt_data_end+0xf8001288>
10001a04:	45400015 	stw	r21,0(r8)
10001a08:	44000115 	stw	r16,4(r8)
10001a0c:	1c07883a 	add	r3,r3,r16
10001a10:	10800044 	addi	r2,r2,1
10001a14:	d8c12015 	stw	r3,1152(sp)
10001a18:	d8811f15 	stw	r2,1148(sp)
10001a1c:	010001c4 	movi	r4,7
10001a20:	20be750e 	bge	r4,r2,100013f8 <__alt_data_end+0xf80013f8>
10001a24:	d9012c17 	ldw	r4,1200(sp)
10001a28:	980b883a 	mov	r5,r19
10001a2c:	d9811e04 	addi	r6,sp,1144
10001a30:	0007ec40 	call	10007ec4 <__sprint_r>
10001a34:	103d7d1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10001a38:	d8c12017 	ldw	r3,1152(sp)
10001a3c:	da000404 	addi	r8,sp,16
10001a40:	003e6e06 	br	100013fc <__alt_data_end+0xf80013fc>
10001a44:	18803fcc 	andi	r2,r3,255
10001a48:	00c00044 	movi	r3,1
10001a4c:	10c11926 	beq	r2,r3,10001eb4 <___vfprintf_internal_r+0x12f8>
10001a50:	00c00084 	movi	r3,2
10001a54:	10c0e41e 	bne	r2,r3,10001de8 <___vfprintf_internal_r+0x122c>
10001a58:	d9413b17 	ldw	r5,1260(sp)
10001a5c:	d8c10dc4 	addi	r3,sp,1079
10001a60:	a88003cc 	andi	r2,r21,15
10001a64:	b008973a 	slli	r4,r22,28
10001a68:	2885883a 	add	r2,r5,r2
10001a6c:	a82ad13a 	srli	r21,r21,4
10001a70:	10800003 	ldbu	r2,0(r2)
10001a74:	b02cd13a 	srli	r22,r22,4
10001a78:	256ab03a 	or	r21,r4,r21
10001a7c:	18800005 	stb	r2,0(r3)
10001a80:	ad84b03a 	or	r2,r21,r22
10001a84:	1821883a 	mov	r16,r3
10001a88:	18ffffc4 	addi	r3,r3,-1
10001a8c:	103ff41e 	bne	r2,zero,10001a60 <__alt_data_end+0xf8001a60>
10001a90:	d8c12917 	ldw	r3,1188(sp)
10001a94:	1c07c83a 	sub	r3,r3,r16
10001a98:	d8c12e15 	stw	r3,1208(sp)
10001a9c:	003dab06 	br	1000114c <__alt_data_end+0xf800114c>
10001aa0:	00801944 	movi	r2,101
10001aa4:	14807e0e 	bge	r2,r18,10001ca0 <___vfprintf_internal_r+0x10e4>
10001aa8:	d9013717 	ldw	r4,1244(sp)
10001aac:	d9413917 	ldw	r5,1252(sp)
10001ab0:	000d883a 	mov	r6,zero
10001ab4:	000f883a 	mov	r7,zero
10001ab8:	d8c13e15 	stw	r3,1272(sp)
10001abc:	da013f15 	stw	r8,1276(sp)
10001ac0:	000bd440 	call	1000bd44 <__eqdf2>
10001ac4:	d8c13e17 	ldw	r3,1272(sp)
10001ac8:	da013f17 	ldw	r8,1276(sp)
10001acc:	1001211e 	bne	r2,zero,10001f54 <___vfprintf_internal_r+0x1398>
10001ad0:	d8811f17 	ldw	r2,1148(sp)
10001ad4:	01000044 	movi	r4,1
10001ad8:	18c00044 	addi	r3,r3,1
10001adc:	10800044 	addi	r2,r2,1
10001ae0:	01440074 	movhi	r5,4097
10001ae4:	297e6504 	addi	r5,r5,-1644
10001ae8:	41000115 	stw	r4,4(r8)
10001aec:	41400015 	stw	r5,0(r8)
10001af0:	d8c12015 	stw	r3,1152(sp)
10001af4:	d8811f15 	stw	r2,1148(sp)
10001af8:	010001c4 	movi	r4,7
10001afc:	2082a316 	blt	r4,r2,1000258c <___vfprintf_internal_r+0x19d0>
10001b00:	42000204 	addi	r8,r8,8
10001b04:	d8812617 	ldw	r2,1176(sp)
10001b08:	d9013517 	ldw	r4,1236(sp)
10001b0c:	11000316 	blt	r2,r4,10001b1c <___vfprintf_internal_r+0xf60>
10001b10:	d9412a17 	ldw	r5,1192(sp)
10001b14:	2880004c 	andi	r2,r5,1
10001b18:	103e3826 	beq	r2,zero,100013fc <__alt_data_end+0xf80013fc>
10001b1c:	d8813817 	ldw	r2,1248(sp)
10001b20:	d9013417 	ldw	r4,1232(sp)
10001b24:	d9413817 	ldw	r5,1248(sp)
10001b28:	1887883a 	add	r3,r3,r2
10001b2c:	d8811f17 	ldw	r2,1148(sp)
10001b30:	41000015 	stw	r4,0(r8)
10001b34:	41400115 	stw	r5,4(r8)
10001b38:	10800044 	addi	r2,r2,1
10001b3c:	d8c12015 	stw	r3,1152(sp)
10001b40:	d8811f15 	stw	r2,1148(sp)
10001b44:	010001c4 	movi	r4,7
10001b48:	20831d16 	blt	r4,r2,100027c0 <___vfprintf_internal_r+0x1c04>
10001b4c:	42000204 	addi	r8,r8,8
10001b50:	d8813517 	ldw	r2,1236(sp)
10001b54:	143fffc4 	addi	r16,r2,-1
10001b58:	043e280e 	bge	zero,r16,100013fc <__alt_data_end+0xf80013fc>
10001b5c:	04800404 	movi	r18,16
10001b60:	d8811f17 	ldw	r2,1148(sp)
10001b64:	05440074 	movhi	r21,4097
10001b68:	ad7e6584 	addi	r21,r21,-1642
10001b6c:	943fa50e 	bge	r18,r16,10001a04 <__alt_data_end+0xf8001a04>
10001b70:	050001c4 	movi	r20,7
10001b74:	dd812c17 	ldw	r22,1200(sp)
10001b78:	00000306 	br	10001b88 <___vfprintf_internal_r+0xfcc>
10001b7c:	42000204 	addi	r8,r8,8
10001b80:	843ffc04 	addi	r16,r16,-16
10001b84:	943f9f0e 	bge	r18,r16,10001a04 <__alt_data_end+0xf8001a04>
10001b88:	18c00404 	addi	r3,r3,16
10001b8c:	10800044 	addi	r2,r2,1
10001b90:	45c00015 	stw	r23,0(r8)
10001b94:	44800115 	stw	r18,4(r8)
10001b98:	d8c12015 	stw	r3,1152(sp)
10001b9c:	d8811f15 	stw	r2,1148(sp)
10001ba0:	a0bff60e 	bge	r20,r2,10001b7c <__alt_data_end+0xf8001b7c>
10001ba4:	b009883a 	mov	r4,r22
10001ba8:	980b883a 	mov	r5,r19
10001bac:	d9811e04 	addi	r6,sp,1144
10001bb0:	0007ec40 	call	10007ec4 <__sprint_r>
10001bb4:	103d1d1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10001bb8:	d8c12017 	ldw	r3,1152(sp)
10001bbc:	d8811f17 	ldw	r2,1148(sp)
10001bc0:	da000404 	addi	r8,sp,16
10001bc4:	003fee06 	br	10001b80 <__alt_data_end+0xf8001b80>
10001bc8:	d9413017 	ldw	r5,1216(sp)
10001bcc:	d8812b17 	ldw	r2,1196(sp)
10001bd0:	28adc83a 	sub	r22,r5,r2
10001bd4:	05bdca0e 	bge	zero,r22,10001300 <__alt_data_end+0xf8001300>
10001bd8:	07000404 	movi	fp,16
10001bdc:	d8811f17 	ldw	r2,1148(sp)
10001be0:	05440074 	movhi	r21,4097
10001be4:	ad7e6584 	addi	r21,r21,-1642
10001be8:	e580230e 	bge	fp,r22,10001c78 <___vfprintf_internal_r+0x10bc>
10001bec:	a809883a 	mov	r4,r21
10001bf0:	dc012d15 	stw	r16,1204(sp)
10001bf4:	882b883a 	mov	r21,r17
10001bf8:	01c001c4 	movi	r7,7
10001bfc:	b023883a 	mov	r17,r22
10001c00:	dc012c17 	ldw	r16,1200(sp)
10001c04:	202d883a 	mov	r22,r4
10001c08:	00000306 	br	10001c18 <___vfprintf_internal_r+0x105c>
10001c0c:	8c7ffc04 	addi	r17,r17,-16
10001c10:	42000204 	addi	r8,r8,8
10001c14:	e440130e 	bge	fp,r17,10001c64 <___vfprintf_internal_r+0x10a8>
10001c18:	18c00404 	addi	r3,r3,16
10001c1c:	10800044 	addi	r2,r2,1
10001c20:	45c00015 	stw	r23,0(r8)
10001c24:	47000115 	stw	fp,4(r8)
10001c28:	d8c12015 	stw	r3,1152(sp)
10001c2c:	d8811f15 	stw	r2,1148(sp)
10001c30:	38bff60e 	bge	r7,r2,10001c0c <__alt_data_end+0xf8001c0c>
10001c34:	8009883a 	mov	r4,r16
10001c38:	980b883a 	mov	r5,r19
10001c3c:	d9811e04 	addi	r6,sp,1144
10001c40:	d9c13e15 	stw	r7,1272(sp)
10001c44:	0007ec40 	call	10007ec4 <__sprint_r>
10001c48:	d9c13e17 	ldw	r7,1272(sp)
10001c4c:	103cf71e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10001c50:	8c7ffc04 	addi	r17,r17,-16
10001c54:	d8c12017 	ldw	r3,1152(sp)
10001c58:	d8811f17 	ldw	r2,1148(sp)
10001c5c:	da000404 	addi	r8,sp,16
10001c60:	e47fed16 	blt	fp,r17,10001c18 <__alt_data_end+0xf8001c18>
10001c64:	dc012d17 	ldw	r16,1204(sp)
10001c68:	b009883a 	mov	r4,r22
10001c6c:	882d883a 	mov	r22,r17
10001c70:	a823883a 	mov	r17,r21
10001c74:	202b883a 	mov	r21,r4
10001c78:	1d87883a 	add	r3,r3,r22
10001c7c:	10800044 	addi	r2,r2,1
10001c80:	45400015 	stw	r21,0(r8)
10001c84:	45800115 	stw	r22,4(r8)
10001c88:	d8c12015 	stw	r3,1152(sp)
10001c8c:	d8811f15 	stw	r2,1148(sp)
10001c90:	010001c4 	movi	r4,7
10001c94:	20817a16 	blt	r4,r2,10002280 <___vfprintf_internal_r+0x16c4>
10001c98:	42000204 	addi	r8,r8,8
10001c9c:	003d9806 	br	10001300 <__alt_data_end+0xf8001300>
10001ca0:	d9013517 	ldw	r4,1236(sp)
10001ca4:	00800044 	movi	r2,1
10001ca8:	1100340e 	bge	r2,r4,10001d7c <___vfprintf_internal_r+0x11c0>
10001cac:	dc811f17 	ldw	r18,1148(sp)
10001cb0:	00800044 	movi	r2,1
10001cb4:	18c00044 	addi	r3,r3,1
10001cb8:	94800044 	addi	r18,r18,1
10001cbc:	40800115 	stw	r2,4(r8)
10001cc0:	44000015 	stw	r16,0(r8)
10001cc4:	d8c12015 	stw	r3,1152(sp)
10001cc8:	dc811f15 	stw	r18,1148(sp)
10001ccc:	008001c4 	movi	r2,7
10001cd0:	14814e16 	blt	r2,r18,1000220c <___vfprintf_internal_r+0x1650>
10001cd4:	42000204 	addi	r8,r8,8
10001cd8:	d8813817 	ldw	r2,1248(sp)
10001cdc:	94800044 	addi	r18,r18,1
10001ce0:	dc811f15 	stw	r18,1148(sp)
10001ce4:	18ad883a 	add	r22,r3,r2
10001ce8:	d8c13417 	ldw	r3,1232(sp)
10001cec:	40800115 	stw	r2,4(r8)
10001cf0:	dd812015 	stw	r22,1152(sp)
10001cf4:	40c00015 	stw	r3,0(r8)
10001cf8:	008001c4 	movi	r2,7
10001cfc:	14814c16 	blt	r2,r18,10002230 <___vfprintf_internal_r+0x1674>
10001d00:	45000204 	addi	r20,r8,8
10001d04:	d9013717 	ldw	r4,1244(sp)
10001d08:	d9413917 	ldw	r5,1252(sp)
10001d0c:	000d883a 	mov	r6,zero
10001d10:	000f883a 	mov	r7,zero
10001d14:	000bd440 	call	1000bd44 <__eqdf2>
10001d18:	1000cd26 	beq	r2,zero,10002050 <___vfprintf_internal_r+0x1494>
10001d1c:	d9013517 	ldw	r4,1236(sp)
10001d20:	84000044 	addi	r16,r16,1
10001d24:	94800044 	addi	r18,r18,1
10001d28:	20bfffc4 	addi	r2,r4,-1
10001d2c:	b0ad883a 	add	r22,r22,r2
10001d30:	a0800115 	stw	r2,4(r20)
10001d34:	a4000015 	stw	r16,0(r20)
10001d38:	dd812015 	stw	r22,1152(sp)
10001d3c:	dc811f15 	stw	r18,1148(sp)
10001d40:	008001c4 	movi	r2,7
10001d44:	14801916 	blt	r2,r18,10001dac <___vfprintf_internal_r+0x11f0>
10001d48:	a5000204 	addi	r20,r20,8
10001d4c:	d9013a17 	ldw	r4,1256(sp)
10001d50:	d88122c4 	addi	r2,sp,1163
10001d54:	94800044 	addi	r18,r18,1
10001d58:	2587883a 	add	r3,r4,r22
10001d5c:	a0800015 	stw	r2,0(r20)
10001d60:	a1000115 	stw	r4,4(r20)
10001d64:	d8c12015 	stw	r3,1152(sp)
10001d68:	dc811f15 	stw	r18,1148(sp)
10001d6c:	008001c4 	movi	r2,7
10001d70:	14bf2c16 	blt	r2,r18,10001a24 <__alt_data_end+0xf8001a24>
10001d74:	a2000204 	addi	r8,r20,8
10001d78:	003da006 	br	100013fc <__alt_data_end+0xf80013fc>
10001d7c:	d9412a17 	ldw	r5,1192(sp)
10001d80:	2888703a 	and	r4,r5,r2
10001d84:	203fc91e 	bne	r4,zero,10001cac <__alt_data_end+0xf8001cac>
10001d88:	dc811f17 	ldw	r18,1148(sp)
10001d8c:	1d800044 	addi	r22,r3,1
10001d90:	40800115 	stw	r2,4(r8)
10001d94:	94800044 	addi	r18,r18,1
10001d98:	44000015 	stw	r16,0(r8)
10001d9c:	dd812015 	stw	r22,1152(sp)
10001da0:	dc811f15 	stw	r18,1148(sp)
10001da4:	008001c4 	movi	r2,7
10001da8:	1482740e 	bge	r2,r18,1000277c <___vfprintf_internal_r+0x1bc0>
10001dac:	d9012c17 	ldw	r4,1200(sp)
10001db0:	980b883a 	mov	r5,r19
10001db4:	d9811e04 	addi	r6,sp,1144
10001db8:	0007ec40 	call	10007ec4 <__sprint_r>
10001dbc:	103c9b1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10001dc0:	dd812017 	ldw	r22,1152(sp)
10001dc4:	dc811f17 	ldw	r18,1148(sp)
10001dc8:	dd000404 	addi	r20,sp,16
10001dcc:	003fdf06 	br	10001d4c <__alt_data_end+0xf8001d4c>
10001dd0:	d9012c17 	ldw	r4,1200(sp)
10001dd4:	980b883a 	mov	r5,r19
10001dd8:	d9811e04 	addi	r6,sp,1144
10001ddc:	0007ec40 	call	10007ec4 <__sprint_r>
10001de0:	103dc326 	beq	r2,zero,100014f0 <__alt_data_end+0xf80014f0>
10001de4:	003c9106 	br	1000102c <__alt_data_end+0xf800102c>
10001de8:	d8c10dc4 	addi	r3,sp,1079
10001dec:	a808d0fa 	srli	r4,r21,3
10001df0:	b00a977a 	slli	r5,r22,29
10001df4:	b02cd0fa 	srli	r22,r22,3
10001df8:	ad4001cc 	andi	r21,r21,7
10001dfc:	a8800c04 	addi	r2,r21,48
10001e00:	292ab03a 	or	r21,r5,r4
10001e04:	18800005 	stb	r2,0(r3)
10001e08:	ad88b03a 	or	r4,r21,r22
10001e0c:	1821883a 	mov	r16,r3
10001e10:	18ffffc4 	addi	r3,r3,-1
10001e14:	203ff51e 	bne	r4,zero,10001dec <__alt_data_end+0xf8001dec>
10001e18:	d9412a17 	ldw	r5,1192(sp)
10001e1c:	2900004c 	andi	r4,r5,1
10001e20:	800b883a 	mov	r5,r16
10001e24:	203f1a26 	beq	r4,zero,10001a90 <__alt_data_end+0xf8001a90>
10001e28:	10803fcc 	andi	r2,r2,255
10001e2c:	1080201c 	xori	r2,r2,128
10001e30:	10bfe004 	addi	r2,r2,-128
10001e34:	01000c04 	movi	r4,48
10001e38:	113f1526 	beq	r2,r4,10001a90 <__alt_data_end+0xf8001a90>
10001e3c:	1821883a 	mov	r16,r3
10001e40:	d8c12917 	ldw	r3,1188(sp)
10001e44:	293fffc5 	stb	r4,-1(r5)
10001e48:	1c07c83a 	sub	r3,r3,r16
10001e4c:	d8c12e15 	stw	r3,1208(sp)
10001e50:	003cbe06 	br	1000114c <__alt_data_end+0xf800114c>
10001e54:	d9012c17 	ldw	r4,1200(sp)
10001e58:	980b883a 	mov	r5,r19
10001e5c:	d9811e04 	addi	r6,sp,1144
10001e60:	0007ec40 	call	10007ec4 <__sprint_r>
10001e64:	103c711e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10001e68:	d8c12017 	ldw	r3,1152(sp)
10001e6c:	da000404 	addi	r8,sp,16
10001e70:	003d5306 	br	100013c0 <__alt_data_end+0xf80013c0>
10001e74:	d9012c17 	ldw	r4,1200(sp)
10001e78:	980b883a 	mov	r5,r19
10001e7c:	d9811e04 	addi	r6,sp,1144
10001e80:	0007ec40 	call	10007ec4 <__sprint_r>
10001e84:	103c691e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10001e88:	d8c12017 	ldw	r3,1152(sp)
10001e8c:	da000404 	addi	r8,sp,16
10001e90:	003d0a06 	br	100012bc <__alt_data_end+0xf80012bc>
10001e94:	d9012c17 	ldw	r4,1200(sp)
10001e98:	980b883a 	mov	r5,r19
10001e9c:	d9811e04 	addi	r6,sp,1144
10001ea0:	0007ec40 	call	10007ec4 <__sprint_r>
10001ea4:	103c611e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10001ea8:	d8c12017 	ldw	r3,1152(sp)
10001eac:	da000404 	addi	r8,sp,16
10001eb0:	003d1006 	br	100012f4 <__alt_data_end+0xf80012f4>
10001eb4:	b000021e 	bne	r22,zero,10001ec0 <___vfprintf_internal_r+0x1304>
10001eb8:	00800244 	movi	r2,9
10001ebc:	15401c2e 	bgeu	r2,r21,10001f30 <___vfprintf_internal_r+0x1374>
10001ec0:	dc412b15 	stw	r17,1196(sp)
10001ec4:	d8810dc4 	addi	r2,sp,1079
10001ec8:	b023883a 	mov	r17,r22
10001ecc:	402d883a 	mov	r22,r8
10001ed0:	a809883a 	mov	r4,r21
10001ed4:	880b883a 	mov	r5,r17
10001ed8:	01800284 	movi	r6,10
10001edc:	000f883a 	mov	r7,zero
10001ee0:	1021883a 	mov	r16,r2
10001ee4:	000a3bc0 	call	1000a3bc <__umoddi3>
10001ee8:	10800c04 	addi	r2,r2,48
10001eec:	a809883a 	mov	r4,r21
10001ef0:	880b883a 	mov	r5,r17
10001ef4:	80800005 	stb	r2,0(r16)
10001ef8:	01800284 	movi	r6,10
10001efc:	000f883a 	mov	r7,zero
10001f00:	0009d680 	call	10009d68 <__udivdi3>
10001f04:	1823883a 	mov	r17,r3
10001f08:	10c6b03a 	or	r3,r2,r3
10001f0c:	102b883a 	mov	r21,r2
10001f10:	80bfffc4 	addi	r2,r16,-1
10001f14:	183fee1e 	bne	r3,zero,10001ed0 <__alt_data_end+0xf8001ed0>
10001f18:	d8c12917 	ldw	r3,1188(sp)
10001f1c:	b011883a 	mov	r8,r22
10001f20:	dc412b17 	ldw	r17,1196(sp)
10001f24:	1c07c83a 	sub	r3,r3,r16
10001f28:	d8c12e15 	stw	r3,1208(sp)
10001f2c:	003c8706 	br	1000114c <__alt_data_end+0xf800114c>
10001f30:	d9013d17 	ldw	r4,1268(sp)
10001f34:	ad400c04 	addi	r21,r21,48
10001f38:	dd410dc5 	stb	r21,1079(sp)
10001f3c:	d9012e15 	stw	r4,1208(sp)
10001f40:	dc010dc4 	addi	r16,sp,1079
10001f44:	003c8106 	br	1000114c <__alt_data_end+0xf800114c>
10001f48:	d8012e15 	stw	zero,1208(sp)
10001f4c:	dc010e04 	addi	r16,sp,1080
10001f50:	003c7e06 	br	1000114c <__alt_data_end+0xf800114c>
10001f54:	d8812617 	ldw	r2,1176(sp)
10001f58:	0081940e 	bge	zero,r2,100025ac <___vfprintf_internal_r+0x19f0>
10001f5c:	d9413517 	ldw	r5,1236(sp)
10001f60:	d8813317 	ldw	r2,1228(sp)
10001f64:	8165883a 	add	r18,r16,r5
10001f68:	9429c83a 	sub	r20,r18,r16
10001f6c:	1500010e 	bge	r2,r20,10001f74 <___vfprintf_internal_r+0x13b8>
10001f70:	1029883a 	mov	r20,r2
10001f74:	05000a0e 	bge	zero,r20,10001fa0 <___vfprintf_internal_r+0x13e4>
10001f78:	d8811f17 	ldw	r2,1148(sp)
10001f7c:	1d07883a 	add	r3,r3,r20
10001f80:	44000015 	stw	r16,0(r8)
10001f84:	10800044 	addi	r2,r2,1
10001f88:	45000115 	stw	r20,4(r8)
10001f8c:	d8c12015 	stw	r3,1152(sp)
10001f90:	d8811f15 	stw	r2,1148(sp)
10001f94:	010001c4 	movi	r4,7
10001f98:	20822b16 	blt	r4,r2,10002848 <___vfprintf_internal_r+0x1c8c>
10001f9c:	42000204 	addi	r8,r8,8
10001fa0:	a0022716 	blt	r20,zero,10002840 <___vfprintf_internal_r+0x1c84>
10001fa4:	d9013317 	ldw	r4,1228(sp)
10001fa8:	2529c83a 	sub	r20,r4,r20
10001fac:	0500530e 	bge	zero,r20,100020fc <___vfprintf_internal_r+0x1540>
10001fb0:	05800404 	movi	r22,16
10001fb4:	d8811f17 	ldw	r2,1148(sp)
10001fb8:	05440074 	movhi	r21,4097
10001fbc:	ad7e6584 	addi	r21,r21,-1642
10001fc0:	b501680e 	bge	r22,r20,10002564 <___vfprintf_internal_r+0x19a8>
10001fc4:	8809883a 	mov	r4,r17
10001fc8:	dc012e15 	stw	r16,1208(sp)
10001fcc:	a023883a 	mov	r17,r20
10001fd0:	070001c4 	movi	fp,7
10001fd4:	dc012c17 	ldw	r16,1200(sp)
10001fd8:	2029883a 	mov	r20,r4
10001fdc:	00000306 	br	10001fec <___vfprintf_internal_r+0x1430>
10001fe0:	42000204 	addi	r8,r8,8
10001fe4:	8c7ffc04 	addi	r17,r17,-16
10001fe8:	b4415a0e 	bge	r22,r17,10002554 <___vfprintf_internal_r+0x1998>
10001fec:	18c00404 	addi	r3,r3,16
10001ff0:	10800044 	addi	r2,r2,1
10001ff4:	45c00015 	stw	r23,0(r8)
10001ff8:	45800115 	stw	r22,4(r8)
10001ffc:	d8c12015 	stw	r3,1152(sp)
10002000:	d8811f15 	stw	r2,1148(sp)
10002004:	e0bff60e 	bge	fp,r2,10001fe0 <__alt_data_end+0xf8001fe0>
10002008:	8009883a 	mov	r4,r16
1000200c:	980b883a 	mov	r5,r19
10002010:	d9811e04 	addi	r6,sp,1144
10002014:	0007ec40 	call	10007ec4 <__sprint_r>
10002018:	103c041e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
1000201c:	d8c12017 	ldw	r3,1152(sp)
10002020:	d8811f17 	ldw	r2,1148(sp)
10002024:	da000404 	addi	r8,sp,16
10002028:	003fee06 	br	10001fe4 <__alt_data_end+0xf8001fe4>
1000202c:	d9012c17 	ldw	r4,1200(sp)
10002030:	980b883a 	mov	r5,r19
10002034:	d9811e04 	addi	r6,sp,1144
10002038:	0007ec40 	call	10007ec4 <__sprint_r>
1000203c:	103bfb1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10002040:	d8c12017 	ldw	r3,1152(sp)
10002044:	d8812787 	ldb	r2,1182(sp)
10002048:	da000404 	addi	r8,sp,16
1000204c:	003c8e06 	br	10001288 <__alt_data_end+0xf8001288>
10002050:	d9413517 	ldw	r5,1236(sp)
10002054:	2c3fffc4 	addi	r16,r5,-1
10002058:	043f3c0e 	bge	zero,r16,10001d4c <__alt_data_end+0xf8001d4c>
1000205c:	07000404 	movi	fp,16
10002060:	05440074 	movhi	r21,4097
10002064:	ad7e6584 	addi	r21,r21,-1642
10002068:	e4007c0e 	bge	fp,r16,1000225c <___vfprintf_internal_r+0x16a0>
1000206c:	dc412e15 	stw	r17,1208(sp)
10002070:	00c001c4 	movi	r3,7
10002074:	8023883a 	mov	r17,r16
10002078:	dc012c17 	ldw	r16,1200(sp)
1000207c:	00000306 	br	1000208c <___vfprintf_internal_r+0x14d0>
10002080:	a5000204 	addi	r20,r20,8
10002084:	8c7ffc04 	addi	r17,r17,-16
10002088:	e440720e 	bge	fp,r17,10002254 <___vfprintf_internal_r+0x1698>
1000208c:	b5800404 	addi	r22,r22,16
10002090:	94800044 	addi	r18,r18,1
10002094:	a5c00015 	stw	r23,0(r20)
10002098:	a7000115 	stw	fp,4(r20)
1000209c:	dd812015 	stw	r22,1152(sp)
100020a0:	dc811f15 	stw	r18,1148(sp)
100020a4:	1cbff60e 	bge	r3,r18,10002080 <__alt_data_end+0xf8002080>
100020a8:	8009883a 	mov	r4,r16
100020ac:	980b883a 	mov	r5,r19
100020b0:	d9811e04 	addi	r6,sp,1144
100020b4:	d8c13e15 	stw	r3,1272(sp)
100020b8:	0007ec40 	call	10007ec4 <__sprint_r>
100020bc:	d8c13e17 	ldw	r3,1272(sp)
100020c0:	103bda1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
100020c4:	dd812017 	ldw	r22,1152(sp)
100020c8:	dc811f17 	ldw	r18,1148(sp)
100020cc:	dd000404 	addi	r20,sp,16
100020d0:	003fec06 	br	10002084 <__alt_data_end+0xf8002084>
100020d4:	00c00084 	movi	r3,2
100020d8:	ad84b03a 	or	r2,r21,r22
100020dc:	003d5c06 	br	10001650 <__alt_data_end+0xf8001650>
100020e0:	d9012c17 	ldw	r4,1200(sp)
100020e4:	980b883a 	mov	r5,r19
100020e8:	d9811e04 	addi	r6,sp,1144
100020ec:	0007ec40 	call	10007ec4 <__sprint_r>
100020f0:	103bce1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
100020f4:	d8c12017 	ldw	r3,1152(sp)
100020f8:	da000404 	addi	r8,sp,16
100020fc:	d9413317 	ldw	r5,1228(sp)
10002100:	d8812617 	ldw	r2,1176(sp)
10002104:	d9013517 	ldw	r4,1236(sp)
10002108:	8161883a 	add	r16,r16,r5
1000210c:	11000316 	blt	r2,r4,1000211c <___vfprintf_internal_r+0x1560>
10002110:	d9412a17 	ldw	r5,1192(sp)
10002114:	2900004c 	andi	r4,r5,1
10002118:	20000d26 	beq	r4,zero,10002150 <___vfprintf_internal_r+0x1594>
1000211c:	d9013817 	ldw	r4,1248(sp)
10002120:	d9413417 	ldw	r5,1232(sp)
10002124:	1907883a 	add	r3,r3,r4
10002128:	d9011f17 	ldw	r4,1148(sp)
1000212c:	41400015 	stw	r5,0(r8)
10002130:	d9413817 	ldw	r5,1248(sp)
10002134:	21000044 	addi	r4,r4,1
10002138:	d8c12015 	stw	r3,1152(sp)
1000213c:	41400115 	stw	r5,4(r8)
10002140:	d9011f15 	stw	r4,1148(sp)
10002144:	014001c4 	movi	r5,7
10002148:	2901c716 	blt	r5,r4,10002868 <___vfprintf_internal_r+0x1cac>
1000214c:	42000204 	addi	r8,r8,8
10002150:	d9013517 	ldw	r4,1236(sp)
10002154:	9425c83a 	sub	r18,r18,r16
10002158:	2085c83a 	sub	r2,r4,r2
1000215c:	1029883a 	mov	r20,r2
10002160:	9080010e 	bge	r18,r2,10002168 <___vfprintf_internal_r+0x15ac>
10002164:	9029883a 	mov	r20,r18
10002168:	05000a0e 	bge	zero,r20,10002194 <___vfprintf_internal_r+0x15d8>
1000216c:	d9011f17 	ldw	r4,1148(sp)
10002170:	1d07883a 	add	r3,r3,r20
10002174:	44000015 	stw	r16,0(r8)
10002178:	21000044 	addi	r4,r4,1
1000217c:	45000115 	stw	r20,4(r8)
10002180:	d8c12015 	stw	r3,1152(sp)
10002184:	d9011f15 	stw	r4,1148(sp)
10002188:	014001c4 	movi	r5,7
1000218c:	2901dd16 	blt	r5,r4,10002904 <___vfprintf_internal_r+0x1d48>
10002190:	42000204 	addi	r8,r8,8
10002194:	a001d916 	blt	r20,zero,100028fc <___vfprintf_internal_r+0x1d40>
10002198:	1521c83a 	sub	r16,r2,r20
1000219c:	043c970e 	bge	zero,r16,100013fc <__alt_data_end+0xf80013fc>
100021a0:	04800404 	movi	r18,16
100021a4:	d8811f17 	ldw	r2,1148(sp)
100021a8:	05440074 	movhi	r21,4097
100021ac:	ad7e6584 	addi	r21,r21,-1642
100021b0:	943e140e 	bge	r18,r16,10001a04 <__alt_data_end+0xf8001a04>
100021b4:	050001c4 	movi	r20,7
100021b8:	dd812c17 	ldw	r22,1200(sp)
100021bc:	00000306 	br	100021cc <___vfprintf_internal_r+0x1610>
100021c0:	42000204 	addi	r8,r8,8
100021c4:	843ffc04 	addi	r16,r16,-16
100021c8:	943e0e0e 	bge	r18,r16,10001a04 <__alt_data_end+0xf8001a04>
100021cc:	18c00404 	addi	r3,r3,16
100021d0:	10800044 	addi	r2,r2,1
100021d4:	45c00015 	stw	r23,0(r8)
100021d8:	44800115 	stw	r18,4(r8)
100021dc:	d8c12015 	stw	r3,1152(sp)
100021e0:	d8811f15 	stw	r2,1148(sp)
100021e4:	a0bff60e 	bge	r20,r2,100021c0 <__alt_data_end+0xf80021c0>
100021e8:	b009883a 	mov	r4,r22
100021ec:	980b883a 	mov	r5,r19
100021f0:	d9811e04 	addi	r6,sp,1144
100021f4:	0007ec40 	call	10007ec4 <__sprint_r>
100021f8:	103b8c1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
100021fc:	d8c12017 	ldw	r3,1152(sp)
10002200:	d8811f17 	ldw	r2,1148(sp)
10002204:	da000404 	addi	r8,sp,16
10002208:	003fee06 	br	100021c4 <__alt_data_end+0xf80021c4>
1000220c:	d9012c17 	ldw	r4,1200(sp)
10002210:	980b883a 	mov	r5,r19
10002214:	d9811e04 	addi	r6,sp,1144
10002218:	0007ec40 	call	10007ec4 <__sprint_r>
1000221c:	103b831e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10002220:	d8c12017 	ldw	r3,1152(sp)
10002224:	dc811f17 	ldw	r18,1148(sp)
10002228:	da000404 	addi	r8,sp,16
1000222c:	003eaa06 	br	10001cd8 <__alt_data_end+0xf8001cd8>
10002230:	d9012c17 	ldw	r4,1200(sp)
10002234:	980b883a 	mov	r5,r19
10002238:	d9811e04 	addi	r6,sp,1144
1000223c:	0007ec40 	call	10007ec4 <__sprint_r>
10002240:	103b7a1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10002244:	dd812017 	ldw	r22,1152(sp)
10002248:	dc811f17 	ldw	r18,1148(sp)
1000224c:	dd000404 	addi	r20,sp,16
10002250:	003eac06 	br	10001d04 <__alt_data_end+0xf8001d04>
10002254:	8821883a 	mov	r16,r17
10002258:	dc412e17 	ldw	r17,1208(sp)
1000225c:	b42d883a 	add	r22,r22,r16
10002260:	94800044 	addi	r18,r18,1
10002264:	a5400015 	stw	r21,0(r20)
10002268:	a4000115 	stw	r16,4(r20)
1000226c:	dd812015 	stw	r22,1152(sp)
10002270:	dc811f15 	stw	r18,1148(sp)
10002274:	008001c4 	movi	r2,7
10002278:	14beb30e 	bge	r2,r18,10001d48 <__alt_data_end+0xf8001d48>
1000227c:	003ecb06 	br	10001dac <__alt_data_end+0xf8001dac>
10002280:	d9012c17 	ldw	r4,1200(sp)
10002284:	980b883a 	mov	r5,r19
10002288:	d9811e04 	addi	r6,sp,1144
1000228c:	0007ec40 	call	10007ec4 <__sprint_r>
10002290:	103b661e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10002294:	d8c12017 	ldw	r3,1152(sp)
10002298:	da000404 	addi	r8,sp,16
1000229c:	003c1806 	br	10001300 <__alt_data_end+0xf8001300>
100022a0:	056bc83a 	sub	r21,zero,r21
100022a4:	a804c03a 	cmpne	r2,r21,zero
100022a8:	05adc83a 	sub	r22,zero,r22
100022ac:	07000b44 	movi	fp,45
100022b0:	b0adc83a 	sub	r22,r22,r2
100022b4:	df012785 	stb	fp,1182(sp)
100022b8:	00c00044 	movi	r3,1
100022bc:	ad84b03a 	or	r2,r21,r22
100022c0:	003b9106 	br	10001108 <__alt_data_end+0xf8001108>
100022c4:	da013f15 	stw	r8,1276(sp)
100022c8:	0007b1c0 	call	10007b1c <__fpclassifyd>
100022cc:	da013f17 	ldw	r8,1276(sp)
100022d0:	1000f226 	beq	r2,zero,1000269c <___vfprintf_internal_r+0x1ae0>
100022d4:	05bff7c4 	movi	r22,-33
100022d8:	00bfffc4 	movi	r2,-1
100022dc:	95ac703a 	and	r22,r18,r22
100022e0:	a0820b26 	beq	r20,r2,10002b10 <___vfprintf_internal_r+0x1f54>
100022e4:	008011c4 	movi	r2,71
100022e8:	b081fc26 	beq	r22,r2,10002adc <___vfprintf_internal_r+0x1f20>
100022ec:	d8c12a17 	ldw	r3,1192(sp)
100022f0:	d9013917 	ldw	r4,1252(sp)
100022f4:	18c04014 	ori	r3,r3,256
100022f8:	d8c12d15 	stw	r3,1204(sp)
100022fc:	20020616 	blt	r4,zero,10002b18 <___vfprintf_internal_r+0x1f5c>
10002300:	dd413917 	ldw	r21,1252(sp)
10002304:	d8012b05 	stb	zero,1196(sp)
10002308:	00801984 	movi	r2,102
1000230c:	9081a526 	beq	r18,r2,100029a4 <___vfprintf_internal_r+0x1de8>
10002310:	00801184 	movi	r2,70
10002314:	9081a326 	beq	r18,r2,100029a4 <___vfprintf_internal_r+0x1de8>
10002318:	00801144 	movi	r2,69
1000231c:	b0820226 	beq	r22,r2,10002b28 <___vfprintf_internal_r+0x1f6c>
10002320:	a039883a 	mov	fp,r20
10002324:	d8812604 	addi	r2,sp,1176
10002328:	d8800115 	stw	r2,4(sp)
1000232c:	d9012c17 	ldw	r4,1200(sp)
10002330:	d8812504 	addi	r2,sp,1172
10002334:	d9413717 	ldw	r5,1244(sp)
10002338:	d8800215 	stw	r2,8(sp)
1000233c:	d8812104 	addi	r2,sp,1156
10002340:	df000015 	stw	fp,0(sp)
10002344:	d8800315 	stw	r2,12(sp)
10002348:	a80d883a 	mov	r6,r21
1000234c:	01c00084 	movi	r7,2
10002350:	da013f15 	stw	r8,1276(sp)
10002354:	00030940 	call	10003094 <_dtoa_r>
10002358:	1021883a 	mov	r16,r2
1000235c:	008019c4 	movi	r2,103
10002360:	da013f17 	ldw	r8,1276(sp)
10002364:	90800226 	beq	r18,r2,10002370 <___vfprintf_internal_r+0x17b4>
10002368:	008011c4 	movi	r2,71
1000236c:	9080031e 	bne	r18,r2,1000237c <___vfprintf_internal_r+0x17c0>
10002370:	d9012a17 	ldw	r4,1192(sp)
10002374:	2080004c 	andi	r2,r4,1
10002378:	1001fe26 	beq	r2,zero,10002b74 <___vfprintf_internal_r+0x1fb8>
1000237c:	00801184 	movi	r2,70
10002380:	8713883a 	add	r9,r16,fp
10002384:	b0819f26 	beq	r22,r2,10002a04 <___vfprintf_internal_r+0x1e48>
10002388:	d9013717 	ldw	r4,1244(sp)
1000238c:	a80b883a 	mov	r5,r21
10002390:	000d883a 	mov	r6,zero
10002394:	000f883a 	mov	r7,zero
10002398:	da013f15 	stw	r8,1276(sp)
1000239c:	da413e15 	stw	r9,1272(sp)
100023a0:	000bd440 	call	1000bd44 <__eqdf2>
100023a4:	da013f17 	ldw	r8,1276(sp)
100023a8:	da413e17 	ldw	r9,1272(sp)
100023ac:	10017b26 	beq	r2,zero,1000299c <___vfprintf_internal_r+0x1de0>
100023b0:	d8812117 	ldw	r2,1156(sp)
100023b4:	1240062e 	bgeu	r2,r9,100023d0 <___vfprintf_internal_r+0x1814>
100023b8:	01000c04 	movi	r4,48
100023bc:	10c00044 	addi	r3,r2,1
100023c0:	d8c12115 	stw	r3,1156(sp)
100023c4:	11000005 	stb	r4,0(r2)
100023c8:	d8812117 	ldw	r2,1156(sp)
100023cc:	127ffb36 	bltu	r2,r9,100023bc <__alt_data_end+0xf80023bc>
100023d0:	1405c83a 	sub	r2,r2,r16
100023d4:	d8813515 	stw	r2,1236(sp)
100023d8:	008011c4 	movi	r2,71
100023dc:	b0816926 	beq	r22,r2,10002984 <___vfprintf_internal_r+0x1dc8>
100023e0:	00801944 	movi	r2,101
100023e4:	14823f0e 	bge	r2,r18,10002ce4 <___vfprintf_internal_r+0x2128>
100023e8:	d8c12617 	ldw	r3,1176(sp)
100023ec:	00801984 	movi	r2,102
100023f0:	d8c13315 	stw	r3,1228(sp)
100023f4:	9081e126 	beq	r18,r2,10002b7c <___vfprintf_internal_r+0x1fc0>
100023f8:	d8c13317 	ldw	r3,1228(sp)
100023fc:	d9013517 	ldw	r4,1236(sp)
10002400:	1901cb16 	blt	r3,r4,10002b30 <___vfprintf_internal_r+0x1f74>
10002404:	d9412a17 	ldw	r5,1192(sp)
10002408:	2880004c 	andi	r2,r5,1
1000240c:	1001d11e 	bne	r2,zero,10002b54 <___vfprintf_internal_r+0x1f98>
10002410:	1805883a 	mov	r2,r3
10002414:	18023116 	blt	r3,zero,10002cdc <___vfprintf_internal_r+0x2120>
10002418:	d8c13317 	ldw	r3,1228(sp)
1000241c:	048019c4 	movi	r18,103
10002420:	d8c12e15 	stw	r3,1208(sp)
10002424:	df012b07 	ldb	fp,1196(sp)
10002428:	e0014e1e 	bne	fp,zero,10002964 <___vfprintf_internal_r+0x1da8>
1000242c:	d8c12d17 	ldw	r3,1204(sp)
10002430:	df012783 	ldbu	fp,1182(sp)
10002434:	d8812b15 	stw	r2,1196(sp)
10002438:	d8c12a15 	stw	r3,1192(sp)
1000243c:	0029883a 	mov	r20,zero
10002440:	003b4706 	br	10001160 <__alt_data_end+0xf8001160>
10002444:	d8c12f17 	ldw	r3,1212(sp)
10002448:	d9012f17 	ldw	r4,1212(sp)
1000244c:	d9412f17 	ldw	r5,1212(sp)
10002450:	18c00017 	ldw	r3,0(r3)
10002454:	21000117 	ldw	r4,4(r4)
10002458:	29400204 	addi	r5,r5,8
1000245c:	d8c13715 	stw	r3,1244(sp)
10002460:	d9013915 	stw	r4,1252(sp)
10002464:	d9412f15 	stw	r5,1212(sp)
10002468:	003c3606 	br	10001544 <__alt_data_end+0xf8001544>
1000246c:	d9412a17 	ldw	r5,1192(sp)
10002470:	2880100c 	andi	r2,r5,64
10002474:	1000b026 	beq	r2,zero,10002738 <___vfprintf_internal_r+0x1b7c>
10002478:	d8812f17 	ldw	r2,1212(sp)
1000247c:	002d883a 	mov	r22,zero
10002480:	00c00044 	movi	r3,1
10002484:	1540000b 	ldhu	r21,0(r2)
10002488:	10800104 	addi	r2,r2,4
1000248c:	d8812f15 	stw	r2,1212(sp)
10002490:	a805883a 	mov	r2,r21
10002494:	003c6e06 	br	10001650 <__alt_data_end+0xf8001650>
10002498:	00c00084 	movi	r3,2
1000249c:	003c6c06 	br	10001650 <__alt_data_end+0xf8001650>
100024a0:	d9412a17 	ldw	r5,1192(sp)
100024a4:	2880100c 	andi	r2,r5,64
100024a8:	10009b26 	beq	r2,zero,10002718 <___vfprintf_internal_r+0x1b5c>
100024ac:	d8812f17 	ldw	r2,1212(sp)
100024b0:	002d883a 	mov	r22,zero
100024b4:	0007883a 	mov	r3,zero
100024b8:	1540000b 	ldhu	r21,0(r2)
100024bc:	10800104 	addi	r2,r2,4
100024c0:	d8812f15 	stw	r2,1212(sp)
100024c4:	a805883a 	mov	r2,r21
100024c8:	003c6106 	br	10001650 <__alt_data_end+0xf8001650>
100024cc:	8c800007 	ldb	r18,0(r17)
100024d0:	003a1f06 	br	10000d50 <__alt_data_end+0xf8000d50>
100024d4:	d9412a17 	ldw	r5,1192(sp)
100024d8:	2880100c 	andi	r2,r5,64
100024dc:	10009e26 	beq	r2,zero,10002758 <___vfprintf_internal_r+0x1b9c>
100024e0:	d8812f17 	ldw	r2,1212(sp)
100024e4:	002d883a 	mov	r22,zero
100024e8:	1540000b 	ldhu	r21,0(r2)
100024ec:	10800104 	addi	r2,r2,4
100024f0:	d8812f15 	stw	r2,1212(sp)
100024f4:	003c9506 	br	1000174c <__alt_data_end+0xf800174c>
100024f8:	d9412a17 	ldw	r5,1192(sp)
100024fc:	2880040c 	andi	r2,r5,16
10002500:	10007e1e 	bne	r2,zero,100026fc <___vfprintf_internal_r+0x1b40>
10002504:	d9412a17 	ldw	r5,1192(sp)
10002508:	2880100c 	andi	r2,r5,64
1000250c:	10010826 	beq	r2,zero,10002930 <___vfprintf_internal_r+0x1d74>
10002510:	d8c12f17 	ldw	r3,1212(sp)
10002514:	d9013117 	ldw	r4,1220(sp)
10002518:	18800017 	ldw	r2,0(r3)
1000251c:	18c00104 	addi	r3,r3,4
10002520:	d8c12f15 	stw	r3,1212(sp)
10002524:	1100000d 	sth	r4,0(r2)
10002528:	0039e206 	br	10000cb4 <__alt_data_end+0xf8000cb4>
1000252c:	d8c12a17 	ldw	r3,1192(sp)
10002530:	1880100c 	andi	r2,r3,64
10002534:	10006a26 	beq	r2,zero,100026e0 <___vfprintf_internal_r+0x1b24>
10002538:	d9012f17 	ldw	r4,1212(sp)
1000253c:	2540000f 	ldh	r21,0(r4)
10002540:	21000104 	addi	r4,r4,4
10002544:	d9012f15 	stw	r4,1212(sp)
10002548:	a82dd7fa 	srai	r22,r21,31
1000254c:	b005883a 	mov	r2,r22
10002550:	003ae906 	br	100010f8 <__alt_data_end+0xf80010f8>
10002554:	dc012e17 	ldw	r16,1208(sp)
10002558:	a009883a 	mov	r4,r20
1000255c:	8829883a 	mov	r20,r17
10002560:	2023883a 	mov	r17,r4
10002564:	1d07883a 	add	r3,r3,r20
10002568:	10800044 	addi	r2,r2,1
1000256c:	45400015 	stw	r21,0(r8)
10002570:	45000115 	stw	r20,4(r8)
10002574:	d8c12015 	stw	r3,1152(sp)
10002578:	d8811f15 	stw	r2,1148(sp)
1000257c:	010001c4 	movi	r4,7
10002580:	20bed716 	blt	r4,r2,100020e0 <__alt_data_end+0xf80020e0>
10002584:	42000204 	addi	r8,r8,8
10002588:	003edc06 	br	100020fc <__alt_data_end+0xf80020fc>
1000258c:	d9012c17 	ldw	r4,1200(sp)
10002590:	980b883a 	mov	r5,r19
10002594:	d9811e04 	addi	r6,sp,1144
10002598:	0007ec40 	call	10007ec4 <__sprint_r>
1000259c:	103aa31e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
100025a0:	d8c12017 	ldw	r3,1152(sp)
100025a4:	da000404 	addi	r8,sp,16
100025a8:	003d5606 	br	10001b04 <__alt_data_end+0xf8001b04>
100025ac:	d9011f17 	ldw	r4,1148(sp)
100025b0:	01440074 	movhi	r5,4097
100025b4:	297e6504 	addi	r5,r5,-1644
100025b8:	18c00044 	addi	r3,r3,1
100025bc:	21000044 	addi	r4,r4,1
100025c0:	41400015 	stw	r5,0(r8)
100025c4:	01400044 	movi	r5,1
100025c8:	41400115 	stw	r5,4(r8)
100025cc:	d8c12015 	stw	r3,1152(sp)
100025d0:	d9011f15 	stw	r4,1148(sp)
100025d4:	014001c4 	movi	r5,7
100025d8:	29006a16 	blt	r5,r4,10002784 <___vfprintf_internal_r+0x1bc8>
100025dc:	42000204 	addi	r8,r8,8
100025e0:	1025883a 	mov	r18,r2
100025e4:	9000051e 	bne	r18,zero,100025fc <___vfprintf_internal_r+0x1a40>
100025e8:	d8813517 	ldw	r2,1236(sp)
100025ec:	1000031e 	bne	r2,zero,100025fc <___vfprintf_internal_r+0x1a40>
100025f0:	d9012a17 	ldw	r4,1192(sp)
100025f4:	2080004c 	andi	r2,r4,1
100025f8:	103b8026 	beq	r2,zero,100013fc <__alt_data_end+0xf80013fc>
100025fc:	d8813417 	ldw	r2,1232(sp)
10002600:	d9413817 	ldw	r5,1248(sp)
10002604:	010001c4 	movi	r4,7
10002608:	40800015 	stw	r2,0(r8)
1000260c:	d8811f17 	ldw	r2,1148(sp)
10002610:	1947883a 	add	r3,r3,r5
10002614:	41400115 	stw	r5,4(r8)
10002618:	10800044 	addi	r2,r2,1
1000261c:	d8c12015 	stw	r3,1152(sp)
10002620:	d8811f15 	stw	r2,1148(sp)
10002624:	20813016 	blt	r4,r2,10002ae8 <___vfprintf_internal_r+0x1f2c>
10002628:	42000204 	addi	r8,r8,8
1000262c:	04a5c83a 	sub	r18,zero,r18
10002630:	04807a0e 	bge	zero,r18,1000281c <___vfprintf_internal_r+0x1c60>
10002634:	05000404 	movi	r20,16
10002638:	05440074 	movhi	r21,4097
1000263c:	ad7e6584 	addi	r21,r21,-1642
10002640:	a480920e 	bge	r20,r18,1000288c <___vfprintf_internal_r+0x1cd0>
10002644:	058001c4 	movi	r22,7
10002648:	df012c17 	ldw	fp,1200(sp)
1000264c:	00000306 	br	1000265c <___vfprintf_internal_r+0x1aa0>
10002650:	42000204 	addi	r8,r8,8
10002654:	94bffc04 	addi	r18,r18,-16
10002658:	a4808c0e 	bge	r20,r18,1000288c <___vfprintf_internal_r+0x1cd0>
1000265c:	18c00404 	addi	r3,r3,16
10002660:	10800044 	addi	r2,r2,1
10002664:	45c00015 	stw	r23,0(r8)
10002668:	45000115 	stw	r20,4(r8)
1000266c:	d8c12015 	stw	r3,1152(sp)
10002670:	d8811f15 	stw	r2,1148(sp)
10002674:	b0bff60e 	bge	r22,r2,10002650 <__alt_data_end+0xf8002650>
10002678:	e009883a 	mov	r4,fp
1000267c:	980b883a 	mov	r5,r19
10002680:	d9811e04 	addi	r6,sp,1144
10002684:	0007ec40 	call	10007ec4 <__sprint_r>
10002688:	103a681e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
1000268c:	d8c12017 	ldw	r3,1152(sp)
10002690:	d8811f17 	ldw	r2,1148(sp)
10002694:	da000404 	addi	r8,sp,16
10002698:	003fee06 	br	10002654 <__alt_data_end+0xf8002654>
1000269c:	008011c4 	movi	r2,71
100026a0:	1480ad16 	blt	r2,r18,10002958 <___vfprintf_internal_r+0x1d9c>
100026a4:	04040074 	movhi	r16,4097
100026a8:	843e5704 	addi	r16,r16,-1700
100026ac:	d9012a17 	ldw	r4,1192(sp)
100026b0:	00bfdfc4 	movi	r2,-129
100026b4:	00c000c4 	movi	r3,3
100026b8:	2088703a 	and	r4,r4,r2
100026bc:	d8c12b15 	stw	r3,1196(sp)
100026c0:	d9012a15 	stw	r4,1192(sp)
100026c4:	df012783 	ldbu	fp,1182(sp)
100026c8:	d8c12e15 	stw	r3,1208(sp)
100026cc:	0029883a 	mov	r20,zero
100026d0:	d8013315 	stw	zero,1228(sp)
100026d4:	003aa206 	br	10001160 <__alt_data_end+0xf8001160>
100026d8:	dd012e15 	stw	r20,1208(sp)
100026dc:	003c8206 	br	100018e8 <__alt_data_end+0xf80018e8>
100026e0:	d9412f17 	ldw	r5,1212(sp)
100026e4:	2d400017 	ldw	r21,0(r5)
100026e8:	29400104 	addi	r5,r5,4
100026ec:	d9412f15 	stw	r5,1212(sp)
100026f0:	a82dd7fa 	srai	r22,r21,31
100026f4:	b005883a 	mov	r2,r22
100026f8:	003a7f06 	br	100010f8 <__alt_data_end+0xf80010f8>
100026fc:	d8c12f17 	ldw	r3,1212(sp)
10002700:	d9013117 	ldw	r4,1220(sp)
10002704:	18800017 	ldw	r2,0(r3)
10002708:	18c00104 	addi	r3,r3,4
1000270c:	d8c12f15 	stw	r3,1212(sp)
10002710:	11000015 	stw	r4,0(r2)
10002714:	00396706 	br	10000cb4 <__alt_data_end+0xf8000cb4>
10002718:	d8c12f17 	ldw	r3,1212(sp)
1000271c:	002d883a 	mov	r22,zero
10002720:	1d400017 	ldw	r21,0(r3)
10002724:	18c00104 	addi	r3,r3,4
10002728:	d8c12f15 	stw	r3,1212(sp)
1000272c:	a805883a 	mov	r2,r21
10002730:	0007883a 	mov	r3,zero
10002734:	003bc606 	br	10001650 <__alt_data_end+0xf8001650>
10002738:	d8c12f17 	ldw	r3,1212(sp)
1000273c:	002d883a 	mov	r22,zero
10002740:	1d400017 	ldw	r21,0(r3)
10002744:	18c00104 	addi	r3,r3,4
10002748:	d8c12f15 	stw	r3,1212(sp)
1000274c:	a805883a 	mov	r2,r21
10002750:	00c00044 	movi	r3,1
10002754:	003bbe06 	br	10001650 <__alt_data_end+0xf8001650>
10002758:	d8c12f17 	ldw	r3,1212(sp)
1000275c:	002d883a 	mov	r22,zero
10002760:	1d400017 	ldw	r21,0(r3)
10002764:	18c00104 	addi	r3,r3,4
10002768:	d8c12f15 	stw	r3,1212(sp)
1000276c:	003bf706 	br	1000174c <__alt_data_end+0xf800174c>
10002770:	04040074 	movhi	r16,4097
10002774:	843e5504 	addi	r16,r16,-1708
10002778:	003b8506 	br	10001590 <__alt_data_end+0xf8001590>
1000277c:	45000204 	addi	r20,r8,8
10002780:	003d7206 	br	10001d4c <__alt_data_end+0xf8001d4c>
10002784:	d9012c17 	ldw	r4,1200(sp)
10002788:	980b883a 	mov	r5,r19
1000278c:	d9811e04 	addi	r6,sp,1144
10002790:	0007ec40 	call	10007ec4 <__sprint_r>
10002794:	103a251e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10002798:	dc812617 	ldw	r18,1176(sp)
1000279c:	d8c12017 	ldw	r3,1152(sp)
100027a0:	da000404 	addi	r8,sp,16
100027a4:	003f8f06 	br	100025e4 <__alt_data_end+0xf80025e4>
100027a8:	d9012a17 	ldw	r4,1192(sp)
100027ac:	8c400044 	addi	r17,r17,1
100027b0:	14800047 	ldb	r18,1(r2)
100027b4:	21000814 	ori	r4,r4,32
100027b8:	d9012a15 	stw	r4,1192(sp)
100027bc:	00396406 	br	10000d50 <__alt_data_end+0xf8000d50>
100027c0:	d9012c17 	ldw	r4,1200(sp)
100027c4:	980b883a 	mov	r5,r19
100027c8:	d9811e04 	addi	r6,sp,1144
100027cc:	0007ec40 	call	10007ec4 <__sprint_r>
100027d0:	103a161e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
100027d4:	d8c12017 	ldw	r3,1152(sp)
100027d8:	da000404 	addi	r8,sp,16
100027dc:	003cdc06 	br	10001b50 <__alt_data_end+0xf8001b50>
100027e0:	df013f15 	stw	fp,1276(sp)
100027e4:	0000b300 	call	10000b30 <strlen>
100027e8:	d8812e15 	stw	r2,1208(sp)
100027ec:	da013f17 	ldw	r8,1276(sp)
100027f0:	103c3f0e 	bge	r2,zero,100018f0 <__alt_data_end+0xf80018f0>
100027f4:	0005883a 	mov	r2,zero
100027f8:	003c3d06 	br	100018f0 <__alt_data_end+0xf80018f0>
100027fc:	d9012c17 	ldw	r4,1200(sp)
10002800:	980b883a 	mov	r5,r19
10002804:	d9811e04 	addi	r6,sp,1144
10002808:	0007ec40 	call	10007ec4 <__sprint_r>
1000280c:	103a071e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10002810:	d8c12017 	ldw	r3,1152(sp)
10002814:	d8811f17 	ldw	r2,1148(sp)
10002818:	da000404 	addi	r8,sp,16
1000281c:	d9013517 	ldw	r4,1236(sp)
10002820:	10800044 	addi	r2,r2,1
10002824:	44000015 	stw	r16,0(r8)
10002828:	20c7883a 	add	r3,r4,r3
1000282c:	003aed06 	br	100013e4 <__alt_data_end+0xf80013e4>
10002830:	01040074 	movhi	r4,4097
10002834:	213e6984 	addi	r4,r4,-1626
10002838:	d9013615 	stw	r4,1240(sp)
1000283c:	003a8706 	br	1000125c <__alt_data_end+0xf800125c>
10002840:	0029883a 	mov	r20,zero
10002844:	003dd706 	br	10001fa4 <__alt_data_end+0xf8001fa4>
10002848:	d9012c17 	ldw	r4,1200(sp)
1000284c:	980b883a 	mov	r5,r19
10002850:	d9811e04 	addi	r6,sp,1144
10002854:	0007ec40 	call	10007ec4 <__sprint_r>
10002858:	1039f41e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
1000285c:	d8c12017 	ldw	r3,1152(sp)
10002860:	da000404 	addi	r8,sp,16
10002864:	003dce06 	br	10001fa0 <__alt_data_end+0xf8001fa0>
10002868:	d9012c17 	ldw	r4,1200(sp)
1000286c:	980b883a 	mov	r5,r19
10002870:	d9811e04 	addi	r6,sp,1144
10002874:	0007ec40 	call	10007ec4 <__sprint_r>
10002878:	1039ec1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
1000287c:	d8812617 	ldw	r2,1176(sp)
10002880:	d8c12017 	ldw	r3,1152(sp)
10002884:	da000404 	addi	r8,sp,16
10002888:	003e3106 	br	10002150 <__alt_data_end+0xf8002150>
1000288c:	1c87883a 	add	r3,r3,r18
10002890:	10800044 	addi	r2,r2,1
10002894:	45400015 	stw	r21,0(r8)
10002898:	44800115 	stw	r18,4(r8)
1000289c:	d8c12015 	stw	r3,1152(sp)
100028a0:	d8811f15 	stw	r2,1148(sp)
100028a4:	010001c4 	movi	r4,7
100028a8:	20bfd416 	blt	r4,r2,100027fc <__alt_data_end+0xf80027fc>
100028ac:	42000204 	addi	r8,r8,8
100028b0:	003fda06 	br	1000281c <__alt_data_end+0xf800281c>
100028b4:	01440074 	movhi	r5,4097
100028b8:	297e6984 	addi	r5,r5,-1626
100028bc:	d9413615 	stw	r5,1240(sp)
100028c0:	003af406 	br	10001494 <__alt_data_end+0xf8001494>
100028c4:	00800184 	movi	r2,6
100028c8:	1500012e 	bgeu	r2,r20,100028d0 <___vfprintf_internal_r+0x1d14>
100028cc:	1029883a 	mov	r20,r2
100028d0:	dd012e15 	stw	r20,1208(sp)
100028d4:	a005883a 	mov	r2,r20
100028d8:	a000d216 	blt	r20,zero,10002c24 <___vfprintf_internal_r+0x2068>
100028dc:	d8812b15 	stw	r2,1196(sp)
100028e0:	dd412f15 	stw	r21,1212(sp)
100028e4:	0029883a 	mov	r20,zero
100028e8:	d8013315 	stw	zero,1228(sp)
100028ec:	04040074 	movhi	r16,4097
100028f0:	843e6304 	addi	r16,r16,-1652
100028f4:	0005883a 	mov	r2,zero
100028f8:	003a2006 	br	1000117c <__alt_data_end+0xf800117c>
100028fc:	0029883a 	mov	r20,zero
10002900:	003e2506 	br	10002198 <__alt_data_end+0xf8002198>
10002904:	d9012c17 	ldw	r4,1200(sp)
10002908:	980b883a 	mov	r5,r19
1000290c:	d9811e04 	addi	r6,sp,1144
10002910:	0007ec40 	call	10007ec4 <__sprint_r>
10002914:	1039c51e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10002918:	d8812617 	ldw	r2,1176(sp)
1000291c:	d9413517 	ldw	r5,1236(sp)
10002920:	d8c12017 	ldw	r3,1152(sp)
10002924:	da000404 	addi	r8,sp,16
10002928:	2885c83a 	sub	r2,r5,r2
1000292c:	003e1906 	br	10002194 <__alt_data_end+0xf8002194>
10002930:	d9412f17 	ldw	r5,1212(sp)
10002934:	d8c13117 	ldw	r3,1220(sp)
10002938:	28800017 	ldw	r2,0(r5)
1000293c:	29400104 	addi	r5,r5,4
10002940:	d9412f15 	stw	r5,1212(sp)
10002944:	10c00015 	stw	r3,0(r2)
10002948:	0038da06 	br	10000cb4 <__alt_data_end+0xf8000cb4>
1000294c:	07000b44 	movi	fp,45
10002950:	df012785 	stb	fp,1182(sp)
10002954:	003b0a06 	br	10001580 <__alt_data_end+0xf8001580>
10002958:	04040074 	movhi	r16,4097
1000295c:	843e5804 	addi	r16,r16,-1696
10002960:	003f5206 	br	100026ac <__alt_data_end+0xf80026ac>
10002964:	00c00b44 	movi	r3,45
10002968:	d8c12785 	stb	r3,1182(sp)
1000296c:	d8c12d17 	ldw	r3,1204(sp)
10002970:	d8812b15 	stw	r2,1196(sp)
10002974:	0029883a 	mov	r20,zero
10002978:	d8c12a15 	stw	r3,1192(sp)
1000297c:	00800b44 	movi	r2,45
10002980:	0039fb06 	br	10001170 <__alt_data_end+0xf8001170>
10002984:	d8812617 	ldw	r2,1176(sp)
10002988:	00ffff44 	movi	r3,-3
1000298c:	10c03216 	blt	r2,r3,10002a58 <___vfprintf_internal_r+0x1e9c>
10002990:	a0803116 	blt	r20,r2,10002a58 <___vfprintf_internal_r+0x1e9c>
10002994:	d8813315 	stw	r2,1228(sp)
10002998:	003e9706 	br	100023f8 <__alt_data_end+0xf80023f8>
1000299c:	4805883a 	mov	r2,r9
100029a0:	003e8b06 	br	100023d0 <__alt_data_end+0xf80023d0>
100029a4:	d8812604 	addi	r2,sp,1176
100029a8:	d8800115 	stw	r2,4(sp)
100029ac:	d9012c17 	ldw	r4,1200(sp)
100029b0:	d8812504 	addi	r2,sp,1172
100029b4:	d9413717 	ldw	r5,1244(sp)
100029b8:	d8800215 	stw	r2,8(sp)
100029bc:	d8812104 	addi	r2,sp,1156
100029c0:	dd000015 	stw	r20,0(sp)
100029c4:	d8800315 	stw	r2,12(sp)
100029c8:	a80d883a 	mov	r6,r21
100029cc:	01c000c4 	movi	r7,3
100029d0:	da013f15 	stw	r8,1276(sp)
100029d4:	00030940 	call	10003094 <_dtoa_r>
100029d8:	1021883a 	mov	r16,r2
100029dc:	a039883a 	mov	fp,r20
100029e0:	da013f17 	ldw	r8,1276(sp)
100029e4:	003e6506 	br	1000237c <__alt_data_end+0xf800237c>
100029e8:	dd012b15 	stw	r20,1196(sp)
100029ec:	dd012e15 	stw	r20,1208(sp)
100029f0:	df012783 	ldbu	fp,1182(sp)
100029f4:	dd412f15 	stw	r21,1212(sp)
100029f8:	0029883a 	mov	r20,zero
100029fc:	d8013315 	stw	zero,1228(sp)
10002a00:	0039d706 	br	10001160 <__alt_data_end+0xf8001160>
10002a04:	81000007 	ldb	r4,0(r16)
10002a08:	00800c04 	movi	r2,48
10002a0c:	20800326 	beq	r4,r2,10002a1c <___vfprintf_internal_r+0x1e60>
10002a10:	d8c12617 	ldw	r3,1176(sp)
10002a14:	48d3883a 	add	r9,r9,r3
10002a18:	003e5b06 	br	10002388 <__alt_data_end+0xf8002388>
10002a1c:	d9013717 	ldw	r4,1244(sp)
10002a20:	a80b883a 	mov	r5,r21
10002a24:	000d883a 	mov	r6,zero
10002a28:	000f883a 	mov	r7,zero
10002a2c:	da013f15 	stw	r8,1276(sp)
10002a30:	da413e15 	stw	r9,1272(sp)
10002a34:	000bd440 	call	1000bd44 <__eqdf2>
10002a38:	da013f17 	ldw	r8,1276(sp)
10002a3c:	da413e17 	ldw	r9,1272(sp)
10002a40:	103ff326 	beq	r2,zero,10002a10 <__alt_data_end+0xf8002a10>
10002a44:	00800044 	movi	r2,1
10002a48:	1707c83a 	sub	r3,r2,fp
10002a4c:	d8c12615 	stw	r3,1176(sp)
10002a50:	48d3883a 	add	r9,r9,r3
10002a54:	003e4c06 	br	10002388 <__alt_data_end+0xf8002388>
10002a58:	94bfff84 	addi	r18,r18,-2
10002a5c:	157fffc4 	addi	r21,r2,-1
10002a60:	dd412615 	stw	r21,1176(sp)
10002a64:	dc8122c5 	stb	r18,1163(sp)
10002a68:	a8009016 	blt	r21,zero,10002cac <___vfprintf_internal_r+0x20f0>
10002a6c:	00800ac4 	movi	r2,43
10002a70:	d8812305 	stb	r2,1164(sp)
10002a74:	05000244 	movi	r20,9
10002a78:	a5404a16 	blt	r20,r21,10002ba4 <___vfprintf_internal_r+0x1fe8>
10002a7c:	00800c04 	movi	r2,48
10002a80:	ad400c04 	addi	r21,r21,48
10002a84:	d8812345 	stb	r2,1165(sp)
10002a88:	dd412385 	stb	r21,1166(sp)
10002a8c:	d8c123c4 	addi	r3,sp,1167
10002a90:	d88122c4 	addi	r2,sp,1163
10002a94:	1885c83a 	sub	r2,r3,r2
10002a98:	d8c13517 	ldw	r3,1236(sp)
10002a9c:	d9013517 	ldw	r4,1236(sp)
10002aa0:	d8813a15 	stw	r2,1256(sp)
10002aa4:	1887883a 	add	r3,r3,r2
10002aa8:	d8c12e15 	stw	r3,1208(sp)
10002aac:	00800044 	movi	r2,1
10002ab0:	11007a0e 	bge	r2,r4,10002c9c <___vfprintf_internal_r+0x20e0>
10002ab4:	d8c12e17 	ldw	r3,1208(sp)
10002ab8:	18c00044 	addi	r3,r3,1
10002abc:	d8c12e15 	stw	r3,1208(sp)
10002ac0:	1805883a 	mov	r2,r3
10002ac4:	18000216 	blt	r3,zero,10002ad0 <___vfprintf_internal_r+0x1f14>
10002ac8:	d8013315 	stw	zero,1228(sp)
10002acc:	003e5506 	br	10002424 <__alt_data_end+0xf8002424>
10002ad0:	0005883a 	mov	r2,zero
10002ad4:	d8013315 	stw	zero,1228(sp)
10002ad8:	003e5206 	br	10002424 <__alt_data_end+0xf8002424>
10002adc:	a03e031e 	bne	r20,zero,100022ec <__alt_data_end+0xf80022ec>
10002ae0:	8029883a 	mov	r20,r16
10002ae4:	003e0106 	br	100022ec <__alt_data_end+0xf80022ec>
10002ae8:	d9012c17 	ldw	r4,1200(sp)
10002aec:	980b883a 	mov	r5,r19
10002af0:	d9811e04 	addi	r6,sp,1144
10002af4:	0007ec40 	call	10007ec4 <__sprint_r>
10002af8:	10394c1e 	bne	r2,zero,1000102c <__alt_data_end+0xf800102c>
10002afc:	dc812617 	ldw	r18,1176(sp)
10002b00:	d8c12017 	ldw	r3,1152(sp)
10002b04:	d8811f17 	ldw	r2,1148(sp)
10002b08:	da000404 	addi	r8,sp,16
10002b0c:	003ec706 	br	1000262c <__alt_data_end+0xf800262c>
10002b10:	05000184 	movi	r20,6
10002b14:	003df506 	br	100022ec <__alt_data_end+0xf80022ec>
10002b18:	00c00b44 	movi	r3,45
10002b1c:	2560003c 	xorhi	r21,r4,32768
10002b20:	d8c12b05 	stb	r3,1196(sp)
10002b24:	003df806 	br	10002308 <__alt_data_end+0xf8002308>
10002b28:	a7000044 	addi	fp,r20,1
10002b2c:	003dfd06 	br	10002324 <__alt_data_end+0xf8002324>
10002b30:	d8c13317 	ldw	r3,1228(sp)
10002b34:	00c0610e 	bge	zero,r3,10002cbc <___vfprintf_internal_r+0x2100>
10002b38:	00800044 	movi	r2,1
10002b3c:	d9013517 	ldw	r4,1236(sp)
10002b40:	1105883a 	add	r2,r2,r4
10002b44:	d8812e15 	stw	r2,1208(sp)
10002b48:	10000716 	blt	r2,zero,10002b68 <___vfprintf_internal_r+0x1fac>
10002b4c:	048019c4 	movi	r18,103
10002b50:	003e3406 	br	10002424 <__alt_data_end+0xf8002424>
10002b54:	d8c13317 	ldw	r3,1228(sp)
10002b58:	18c00044 	addi	r3,r3,1
10002b5c:	d8c12e15 	stw	r3,1208(sp)
10002b60:	1805883a 	mov	r2,r3
10002b64:	183ff90e 	bge	r3,zero,10002b4c <__alt_data_end+0xf8002b4c>
10002b68:	0005883a 	mov	r2,zero
10002b6c:	048019c4 	movi	r18,103
10002b70:	003e2c06 	br	10002424 <__alt_data_end+0xf8002424>
10002b74:	d8812117 	ldw	r2,1156(sp)
10002b78:	003e1506 	br	100023d0 <__alt_data_end+0xf80023d0>
10002b7c:	00c0400e 	bge	zero,r3,10002c80 <___vfprintf_internal_r+0x20c4>
10002b80:	a0002a1e 	bne	r20,zero,10002c2c <___vfprintf_internal_r+0x2070>
10002b84:	d9012a17 	ldw	r4,1192(sp)
10002b88:	2080004c 	andi	r2,r4,1
10002b8c:	1000271e 	bne	r2,zero,10002c2c <___vfprintf_internal_r+0x2070>
10002b90:	1805883a 	mov	r2,r3
10002b94:	18005a16 	blt	r3,zero,10002d00 <___vfprintf_internal_r+0x2144>
10002b98:	d8c13317 	ldw	r3,1228(sp)
10002b9c:	d8c12e15 	stw	r3,1208(sp)
10002ba0:	003e2006 	br	10002424 <__alt_data_end+0xf8002424>
10002ba4:	d8c12284 	addi	r3,sp,1162
10002ba8:	4039883a 	mov	fp,r8
10002bac:	a809883a 	mov	r4,r21
10002bb0:	01400284 	movi	r5,10
10002bb4:	182d883a 	mov	r22,r3
10002bb8:	000aaa80 	call	1000aaa8 <__modsi3>
10002bbc:	10800c04 	addi	r2,r2,48
10002bc0:	a809883a 	mov	r4,r21
10002bc4:	b0800005 	stb	r2,0(r22)
10002bc8:	01400284 	movi	r5,10
10002bcc:	000aa600 	call	1000aa60 <__divsi3>
10002bd0:	102b883a 	mov	r21,r2
10002bd4:	b0ffffc4 	addi	r3,r22,-1
10002bd8:	a0bff416 	blt	r20,r2,10002bac <__alt_data_end+0xf8002bac>
10002bdc:	11400c04 	addi	r5,r2,48
10002be0:	b17fffc5 	stb	r5,-1(r22)
10002be4:	d88122c4 	addi	r2,sp,1163
10002be8:	e011883a 	mov	r8,fp
10002bec:	1880462e 	bgeu	r3,r2,10002d08 <___vfprintf_internal_r+0x214c>
10002bf0:	d9012344 	addi	r4,sp,1165
10002bf4:	b007883a 	mov	r3,r22
10002bf8:	00000206 	br	10002c04 <___vfprintf_internal_r+0x2048>
10002bfc:	19400003 	ldbu	r5,0(r3)
10002c00:	18c00044 	addi	r3,r3,1
10002c04:	21400005 	stb	r5,0(r4)
10002c08:	21000044 	addi	r4,r4,1
10002c0c:	10fffb1e 	bne	r2,r3,10002bfc <__alt_data_end+0xf8002bfc>
10002c10:	d8c12304 	addi	r3,sp,1164
10002c14:	1d87c83a 	sub	r3,r3,r22
10002c18:	d9412344 	addi	r5,sp,1165
10002c1c:	28c7883a 	add	r3,r5,r3
10002c20:	003f9c06 	br	10002a94 <__alt_data_end+0xf8002a94>
10002c24:	0005883a 	mov	r2,zero
10002c28:	003f2c06 	br	100028dc <__alt_data_end+0xf80028dc>
10002c2c:	d8c13317 	ldw	r3,1228(sp)
10002c30:	a5000044 	addi	r20,r20,1
10002c34:	1d29883a 	add	r20,r3,r20
10002c38:	dd012e15 	stw	r20,1208(sp)
10002c3c:	a005883a 	mov	r2,r20
10002c40:	a03df80e 	bge	r20,zero,10002424 <__alt_data_end+0xf8002424>
10002c44:	0005883a 	mov	r2,zero
10002c48:	003df606 	br	10002424 <__alt_data_end+0xf8002424>
10002c4c:	043fffc4 	movi	r16,-1
10002c50:	0038d406 	br	10000fa4 <__alt_data_end+0xf8000fa4>
10002c54:	d9012f17 	ldw	r4,1212(sp)
10002c58:	8c800043 	ldbu	r18,1(r17)
10002c5c:	1023883a 	mov	r17,r2
10002c60:	20c00017 	ldw	r3,0(r4)
10002c64:	21000104 	addi	r4,r4,4
10002c68:	d9012f15 	stw	r4,1212(sp)
10002c6c:	18001f16 	blt	r3,zero,10002cec <___vfprintf_internal_r+0x2130>
10002c70:	94803fcc 	andi	r18,r18,255
10002c74:	9480201c 	xori	r18,r18,128
10002c78:	94bfe004 	addi	r18,r18,-128
10002c7c:	00383406 	br	10000d50 <__alt_data_end+0xf8000d50>
10002c80:	a000111e 	bne	r20,zero,10002cc8 <___vfprintf_internal_r+0x210c>
10002c84:	d9012a17 	ldw	r4,1192(sp)
10002c88:	2080004c 	andi	r2,r4,1
10002c8c:	10000e1e 	bne	r2,zero,10002cc8 <___vfprintf_internal_r+0x210c>
10002c90:	00800044 	movi	r2,1
10002c94:	d8812e15 	stw	r2,1208(sp)
10002c98:	003de206 	br	10002424 <__alt_data_end+0xf8002424>
10002c9c:	d9412a17 	ldw	r5,1192(sp)
10002ca0:	2884703a 	and	r2,r5,r2
10002ca4:	103f831e 	bne	r2,zero,10002ab4 <__alt_data_end+0xf8002ab4>
10002ca8:	003f8506 	br	10002ac0 <__alt_data_end+0xf8002ac0>
10002cac:	00800b44 	movi	r2,45
10002cb0:	056bc83a 	sub	r21,zero,r21
10002cb4:	d8812305 	stb	r2,1164(sp)
10002cb8:	003f6e06 	br	10002a74 <__alt_data_end+0xf8002a74>
10002cbc:	00800084 	movi	r2,2
10002cc0:	10c5c83a 	sub	r2,r2,r3
10002cc4:	003f9d06 	br	10002b3c <__alt_data_end+0xf8002b3c>
10002cc8:	a5000084 	addi	r20,r20,2
10002ccc:	dd012e15 	stw	r20,1208(sp)
10002cd0:	a005883a 	mov	r2,r20
10002cd4:	a03dd30e 	bge	r20,zero,10002424 <__alt_data_end+0xf8002424>
10002cd8:	003fda06 	br	10002c44 <__alt_data_end+0xf8002c44>
10002cdc:	0005883a 	mov	r2,zero
10002ce0:	003dcd06 	br	10002418 <__alt_data_end+0xf8002418>
10002ce4:	d8812617 	ldw	r2,1176(sp)
10002ce8:	003f5c06 	br	10002a5c <__alt_data_end+0xf8002a5c>
10002cec:	94803fcc 	andi	r18,r18,255
10002cf0:	9480201c 	xori	r18,r18,128
10002cf4:	00ffffc4 	movi	r3,-1
10002cf8:	94bfe004 	addi	r18,r18,-128
10002cfc:	00381406 	br	10000d50 <__alt_data_end+0xf8000d50>
10002d00:	0005883a 	mov	r2,zero
10002d04:	003fa406 	br	10002b98 <__alt_data_end+0xf8002b98>
10002d08:	d8c12344 	addi	r3,sp,1165
10002d0c:	003f6106 	br	10002a94 <__alt_data_end+0xf8002a94>

10002d10 <__vfprintf_internal>:
10002d10:	00840074 	movhi	r2,4097
10002d14:	1085c204 	addi	r2,r2,5896
10002d18:	2007883a 	mov	r3,r4
10002d1c:	11000017 	ldw	r4,0(r2)
10002d20:	2805883a 	mov	r2,r5
10002d24:	300f883a 	mov	r7,r6
10002d28:	180b883a 	mov	r5,r3
10002d2c:	100d883a 	mov	r6,r2
10002d30:	0000bbc1 	jmpi	10000bbc <___vfprintf_internal_r>

10002d34 <__swsetup_r>:
10002d34:	00840074 	movhi	r2,4097
10002d38:	1085c204 	addi	r2,r2,5896
10002d3c:	10800017 	ldw	r2,0(r2)
10002d40:	defffd04 	addi	sp,sp,-12
10002d44:	dc400115 	stw	r17,4(sp)
10002d48:	dc000015 	stw	r16,0(sp)
10002d4c:	dfc00215 	stw	ra,8(sp)
10002d50:	2023883a 	mov	r17,r4
10002d54:	2821883a 	mov	r16,r5
10002d58:	10000226 	beq	r2,zero,10002d64 <__swsetup_r+0x30>
10002d5c:	10c00e17 	ldw	r3,56(r2)
10002d60:	18002e26 	beq	r3,zero,10002e1c <__swsetup_r+0xe8>
10002d64:	8080030b 	ldhu	r2,12(r16)
10002d68:	10c0020c 	andi	r3,r2,8
10002d6c:	100d883a 	mov	r6,r2
10002d70:	18000f26 	beq	r3,zero,10002db0 <__swsetup_r+0x7c>
10002d74:	80c00417 	ldw	r3,16(r16)
10002d78:	18001526 	beq	r3,zero,10002dd0 <__swsetup_r+0x9c>
10002d7c:	1100004c 	andi	r4,r2,1
10002d80:	20001c1e 	bne	r4,zero,10002df4 <__swsetup_r+0xc0>
10002d84:	1080008c 	andi	r2,r2,2
10002d88:	1000271e 	bne	r2,zero,10002e28 <__swsetup_r+0xf4>
10002d8c:	80800517 	ldw	r2,20(r16)
10002d90:	80800215 	stw	r2,8(r16)
10002d94:	18001c26 	beq	r3,zero,10002e08 <__swsetup_r+0xd4>
10002d98:	0005883a 	mov	r2,zero
10002d9c:	dfc00217 	ldw	ra,8(sp)
10002da0:	dc400117 	ldw	r17,4(sp)
10002da4:	dc000017 	ldw	r16,0(sp)
10002da8:	dec00304 	addi	sp,sp,12
10002dac:	f800283a 	ret
10002db0:	3080040c 	andi	r2,r6,16
10002db4:	10001726 	beq	r2,zero,10002e14 <__swsetup_r+0xe0>
10002db8:	3080010c 	andi	r2,r6,4
10002dbc:	10001d1e 	bne	r2,zero,10002e34 <__swsetup_r+0x100>
10002dc0:	80c00417 	ldw	r3,16(r16)
10002dc4:	30800214 	ori	r2,r6,8
10002dc8:	8080030d 	sth	r2,12(r16)
10002dcc:	183feb1e 	bne	r3,zero,10002d7c <__alt_data_end+0xf8002d7c>
10002dd0:	1140a00c 	andi	r5,r2,640
10002dd4:	01008004 	movi	r4,512
10002dd8:	293fe826 	beq	r5,r4,10002d7c <__alt_data_end+0xf8002d7c>
10002ddc:	8809883a 	mov	r4,r17
10002de0:	800b883a 	mov	r5,r16
10002de4:	00057d40 	call	100057d4 <__smakebuf_r>
10002de8:	8080030b 	ldhu	r2,12(r16)
10002dec:	80c00417 	ldw	r3,16(r16)
10002df0:	003fe206 	br	10002d7c <__alt_data_end+0xf8002d7c>
10002df4:	80800517 	ldw	r2,20(r16)
10002df8:	80000215 	stw	zero,8(r16)
10002dfc:	0085c83a 	sub	r2,zero,r2
10002e00:	80800615 	stw	r2,24(r16)
10002e04:	183fe41e 	bne	r3,zero,10002d98 <__alt_data_end+0xf8002d98>
10002e08:	8080030b 	ldhu	r2,12(r16)
10002e0c:	1080200c 	andi	r2,r2,128
10002e10:	103fe226 	beq	r2,zero,10002d9c <__alt_data_end+0xf8002d9c>
10002e14:	00bfffc4 	movi	r2,-1
10002e18:	003fe006 	br	10002d9c <__alt_data_end+0xf8002d9c>
10002e1c:	1009883a 	mov	r4,r2
10002e20:	00049f00 	call	100049f0 <__sinit>
10002e24:	003fcf06 	br	10002d64 <__alt_data_end+0xf8002d64>
10002e28:	0005883a 	mov	r2,zero
10002e2c:	80800215 	stw	r2,8(r16)
10002e30:	003fd806 	br	10002d94 <__alt_data_end+0xf8002d94>
10002e34:	81400c17 	ldw	r5,48(r16)
10002e38:	28000626 	beq	r5,zero,10002e54 <__swsetup_r+0x120>
10002e3c:	80801004 	addi	r2,r16,64
10002e40:	28800326 	beq	r5,r2,10002e50 <__swsetup_r+0x11c>
10002e44:	8809883a 	mov	r4,r17
10002e48:	0004e240 	call	10004e24 <_free_r>
10002e4c:	8180030b 	ldhu	r6,12(r16)
10002e50:	80000c15 	stw	zero,48(r16)
10002e54:	80c00417 	ldw	r3,16(r16)
10002e58:	00bff6c4 	movi	r2,-37
10002e5c:	118c703a 	and	r6,r2,r6
10002e60:	80000115 	stw	zero,4(r16)
10002e64:	80c00015 	stw	r3,0(r16)
10002e68:	003fd606 	br	10002dc4 <__alt_data_end+0xf8002dc4>

10002e6c <quorem>:
10002e6c:	defff204 	addi	sp,sp,-56
10002e70:	dd400915 	stw	r21,36(sp)
10002e74:	20800417 	ldw	r2,16(r4)
10002e78:	2d400417 	ldw	r21,16(r5)
10002e7c:	dfc00d15 	stw	ra,52(sp)
10002e80:	df000c15 	stw	fp,48(sp)
10002e84:	ddc00b15 	stw	r23,44(sp)
10002e88:	dd800a15 	stw	r22,40(sp)
10002e8c:	dd000815 	stw	r20,32(sp)
10002e90:	dcc00715 	stw	r19,28(sp)
10002e94:	dc800615 	stw	r18,24(sp)
10002e98:	dc400515 	stw	r17,20(sp)
10002e9c:	dc000415 	stw	r16,16(sp)
10002ea0:	d9000015 	stw	r4,0(sp)
10002ea4:	d9400115 	stw	r5,4(sp)
10002ea8:	15407816 	blt	r2,r21,1000308c <quorem+0x220>
10002eac:	ad7fffc4 	addi	r21,r21,-1
10002eb0:	ad79883a 	add	fp,r21,r21
10002eb4:	28c00504 	addi	r3,r5,20
10002eb8:	e739883a 	add	fp,fp,fp
10002ebc:	1f2f883a 	add	r23,r3,fp
10002ec0:	24400504 	addi	r17,r4,20
10002ec4:	8f39883a 	add	fp,r17,fp
10002ec8:	b9400017 	ldw	r5,0(r23)
10002ecc:	e1000017 	ldw	r4,0(fp)
10002ed0:	d8c00215 	stw	r3,8(sp)
10002ed4:	29400044 	addi	r5,r5,1
10002ed8:	df000315 	stw	fp,12(sp)
10002edc:	000aaf40 	call	1000aaf4 <__udivsi3>
10002ee0:	1021883a 	mov	r16,r2
10002ee4:	10003026 	beq	r2,zero,10002fa8 <quorem+0x13c>
10002ee8:	dcc00217 	ldw	r19,8(sp)
10002eec:	8829883a 	mov	r20,r17
10002ef0:	002d883a 	mov	r22,zero
10002ef4:	0039883a 	mov	fp,zero
10002ef8:	9c800017 	ldw	r18,0(r19)
10002efc:	800b883a 	mov	r5,r16
10002f00:	9cc00104 	addi	r19,r19,4
10002f04:	913fffcc 	andi	r4,r18,65535
10002f08:	000ab040 	call	1000ab04 <__mulsi3>
10002f0c:	9008d43a 	srli	r4,r18,16
10002f10:	800b883a 	mov	r5,r16
10002f14:	b0ad883a 	add	r22,r22,r2
10002f18:	000ab040 	call	1000ab04 <__mulsi3>
10002f1c:	a1400017 	ldw	r5,0(r20)
10002f20:	b010d43a 	srli	r8,r22,16
10002f24:	b0ffffcc 	andi	r3,r22,65535
10002f28:	293fffcc 	andi	r4,r5,65535
10002f2c:	2709883a 	add	r4,r4,fp
10002f30:	280cd43a 	srli	r6,r5,16
10002f34:	20c9c83a 	sub	r4,r4,r3
10002f38:	4085883a 	add	r2,r8,r2
10002f3c:	2007d43a 	srai	r3,r4,16
10002f40:	117fffcc 	andi	r5,r2,65535
10002f44:	314bc83a 	sub	r5,r6,r5
10002f48:	28cb883a 	add	r5,r5,r3
10002f4c:	280c943a 	slli	r6,r5,16
10002f50:	213fffcc 	andi	r4,r4,65535
10002f54:	102cd43a 	srli	r22,r2,16
10002f58:	3108b03a 	or	r4,r6,r4
10002f5c:	a1000015 	stw	r4,0(r20)
10002f60:	2839d43a 	srai	fp,r5,16
10002f64:	a5000104 	addi	r20,r20,4
10002f68:	bcffe32e 	bgeu	r23,r19,10002ef8 <__alt_data_end+0xf8002ef8>
10002f6c:	d8c00317 	ldw	r3,12(sp)
10002f70:	18800017 	ldw	r2,0(r3)
10002f74:	10000c1e 	bne	r2,zero,10002fa8 <quorem+0x13c>
10002f78:	18bfff04 	addi	r2,r3,-4
10002f7c:	8880082e 	bgeu	r17,r2,10002fa0 <quorem+0x134>
10002f80:	18ffff17 	ldw	r3,-4(r3)
10002f84:	18000326 	beq	r3,zero,10002f94 <quorem+0x128>
10002f88:	00000506 	br	10002fa0 <quorem+0x134>
10002f8c:	10c00017 	ldw	r3,0(r2)
10002f90:	1800031e 	bne	r3,zero,10002fa0 <quorem+0x134>
10002f94:	10bfff04 	addi	r2,r2,-4
10002f98:	ad7fffc4 	addi	r21,r21,-1
10002f9c:	88bffb36 	bltu	r17,r2,10002f8c <__alt_data_end+0xf8002f8c>
10002fa0:	d8c00017 	ldw	r3,0(sp)
10002fa4:	1d400415 	stw	r21,16(r3)
10002fa8:	d9000017 	ldw	r4,0(sp)
10002fac:	d9400117 	ldw	r5,4(sp)
10002fb0:	0006f000 	call	10006f00 <__mcmp>
10002fb4:	10002816 	blt	r2,zero,10003058 <quorem+0x1ec>
10002fb8:	d8c00217 	ldw	r3,8(sp)
10002fbc:	84000044 	addi	r16,r16,1
10002fc0:	880d883a 	mov	r6,r17
10002fc4:	000f883a 	mov	r7,zero
10002fc8:	32800017 	ldw	r10,0(r6)
10002fcc:	1a400017 	ldw	r9,0(r3)
10002fd0:	31800104 	addi	r6,r6,4
10002fd4:	523fffcc 	andi	r8,r10,65535
10002fd8:	48bfffcc 	andi	r2,r9,65535
10002fdc:	41cf883a 	add	r7,r8,r7
10002fe0:	3891c83a 	sub	r8,r7,r2
10002fe4:	4812d43a 	srli	r9,r9,16
10002fe8:	500ed43a 	srli	r7,r10,16
10002fec:	4005d43a 	srai	r2,r8,16
10002ff0:	423fffcc 	andi	r8,r8,65535
10002ff4:	3a4fc83a 	sub	r7,r7,r9
10002ff8:	388f883a 	add	r7,r7,r2
10002ffc:	3804943a 	slli	r2,r7,16
10003000:	18c00104 	addi	r3,r3,4
10003004:	380fd43a 	srai	r7,r7,16
10003008:	1210b03a 	or	r8,r2,r8
1000300c:	323fff15 	stw	r8,-4(r6)
10003010:	b8ffed2e 	bgeu	r23,r3,10002fc8 <__alt_data_end+0xf8002fc8>
10003014:	ad45883a 	add	r2,r21,r21
10003018:	1085883a 	add	r2,r2,r2
1000301c:	8887883a 	add	r3,r17,r2
10003020:	18800017 	ldw	r2,0(r3)
10003024:	10000c1e 	bne	r2,zero,10003058 <quorem+0x1ec>
10003028:	18bfff04 	addi	r2,r3,-4
1000302c:	8880082e 	bgeu	r17,r2,10003050 <quorem+0x1e4>
10003030:	18ffff17 	ldw	r3,-4(r3)
10003034:	18000326 	beq	r3,zero,10003044 <quorem+0x1d8>
10003038:	00000506 	br	10003050 <quorem+0x1e4>
1000303c:	10c00017 	ldw	r3,0(r2)
10003040:	1800031e 	bne	r3,zero,10003050 <quorem+0x1e4>
10003044:	10bfff04 	addi	r2,r2,-4
10003048:	ad7fffc4 	addi	r21,r21,-1
1000304c:	88bffb36 	bltu	r17,r2,1000303c <__alt_data_end+0xf800303c>
10003050:	d8c00017 	ldw	r3,0(sp)
10003054:	1d400415 	stw	r21,16(r3)
10003058:	8005883a 	mov	r2,r16
1000305c:	dfc00d17 	ldw	ra,52(sp)
10003060:	df000c17 	ldw	fp,48(sp)
10003064:	ddc00b17 	ldw	r23,44(sp)
10003068:	dd800a17 	ldw	r22,40(sp)
1000306c:	dd400917 	ldw	r21,36(sp)
10003070:	dd000817 	ldw	r20,32(sp)
10003074:	dcc00717 	ldw	r19,28(sp)
10003078:	dc800617 	ldw	r18,24(sp)
1000307c:	dc400517 	ldw	r17,20(sp)
10003080:	dc000417 	ldw	r16,16(sp)
10003084:	dec00e04 	addi	sp,sp,56
10003088:	f800283a 	ret
1000308c:	0005883a 	mov	r2,zero
10003090:	003ff206 	br	1000305c <__alt_data_end+0xf800305c>

10003094 <_dtoa_r>:
10003094:	20801017 	ldw	r2,64(r4)
10003098:	deffdf04 	addi	sp,sp,-132
1000309c:	dcc01a15 	stw	r19,104(sp)
100030a0:	dc801915 	stw	r18,100(sp)
100030a4:	dc401815 	stw	r17,96(sp)
100030a8:	dc001715 	stw	r16,92(sp)
100030ac:	dfc02015 	stw	ra,128(sp)
100030b0:	df001f15 	stw	fp,124(sp)
100030b4:	ddc01e15 	stw	r23,120(sp)
100030b8:	dd801d15 	stw	r22,116(sp)
100030bc:	dd401c15 	stw	r21,112(sp)
100030c0:	dd001b15 	stw	r20,108(sp)
100030c4:	d9400315 	stw	r5,12(sp)
100030c8:	d9c00415 	stw	r7,16(sp)
100030cc:	2021883a 	mov	r16,r4
100030d0:	3023883a 	mov	r17,r6
100030d4:	dcc02317 	ldw	r19,140(sp)
100030d8:	3025883a 	mov	r18,r6
100030dc:	10000826 	beq	r2,zero,10003100 <_dtoa_r+0x6c>
100030e0:	20c01117 	ldw	r3,68(r4)
100030e4:	01800044 	movi	r6,1
100030e8:	100b883a 	mov	r5,r2
100030ec:	30cc983a 	sll	r6,r6,r3
100030f0:	10c00115 	stw	r3,4(r2)
100030f4:	11800215 	stw	r6,8(r2)
100030f8:	00066380 	call	10006638 <_Bfree>
100030fc:	80001015 	stw	zero,64(r16)
10003100:	88002e16 	blt	r17,zero,100031bc <_dtoa_r+0x128>
10003104:	98000015 	stw	zero,0(r19)
10003108:	88dffc2c 	andhi	r3,r17,32752
1000310c:	009ffc34 	movhi	r2,32752
10003110:	18801b26 	beq	r3,r2,10003180 <_dtoa_r+0xec>
10003114:	d9000317 	ldw	r4,12(sp)
10003118:	900b883a 	mov	r5,r18
1000311c:	000d883a 	mov	r6,zero
10003120:	000f883a 	mov	r7,zero
10003124:	000bd440 	call	1000bd44 <__eqdf2>
10003128:	10002b1e 	bne	r2,zero,100031d8 <_dtoa_r+0x144>
1000312c:	d8c02217 	ldw	r3,136(sp)
10003130:	d9002417 	ldw	r4,144(sp)
10003134:	00800044 	movi	r2,1
10003138:	18800015 	stw	r2,0(r3)
1000313c:	2001a026 	beq	r4,zero,100037c0 <_dtoa_r+0x72c>
10003140:	00840074 	movhi	r2,4097
10003144:	10be6544 	addi	r2,r2,-1643
10003148:	20800015 	stw	r2,0(r4)
1000314c:	10bfffc4 	addi	r2,r2,-1
10003150:	dfc02017 	ldw	ra,128(sp)
10003154:	df001f17 	ldw	fp,124(sp)
10003158:	ddc01e17 	ldw	r23,120(sp)
1000315c:	dd801d17 	ldw	r22,116(sp)
10003160:	dd401c17 	ldw	r21,112(sp)
10003164:	dd001b17 	ldw	r20,108(sp)
10003168:	dcc01a17 	ldw	r19,104(sp)
1000316c:	dc801917 	ldw	r18,100(sp)
10003170:	dc401817 	ldw	r17,96(sp)
10003174:	dc001717 	ldw	r16,92(sp)
10003178:	dec02104 	addi	sp,sp,132
1000317c:	f800283a 	ret
10003180:	d8c02217 	ldw	r3,136(sp)
10003184:	d9000317 	ldw	r4,12(sp)
10003188:	0089c3c4 	movi	r2,9999
1000318c:	18800015 	stw	r2,0(r3)
10003190:	20017926 	beq	r4,zero,10003778 <_dtoa_r+0x6e4>
10003194:	00840074 	movhi	r2,4097
10003198:	10be7104 	addi	r2,r2,-1596
1000319c:	d9802417 	ldw	r6,144(sp)
100031a0:	303feb26 	beq	r6,zero,10003150 <__alt_data_end+0xf8003150>
100031a4:	10c000c7 	ldb	r3,3(r2)
100031a8:	18017a1e 	bne	r3,zero,10003794 <_dtoa_r+0x700>
100031ac:	10c000c4 	addi	r3,r2,3
100031b0:	d9c02417 	ldw	r7,144(sp)
100031b4:	38c00015 	stw	r3,0(r7)
100031b8:	003fe506 	br	10003150 <__alt_data_end+0xf8003150>
100031bc:	04a00034 	movhi	r18,32768
100031c0:	94bfffc4 	addi	r18,r18,-1
100031c4:	8ca4703a 	and	r18,r17,r18
100031c8:	00800044 	movi	r2,1
100031cc:	98800015 	stw	r2,0(r19)
100031d0:	9023883a 	mov	r17,r18
100031d4:	003fcc06 	br	10003108 <__alt_data_end+0xf8003108>
100031d8:	d9400317 	ldw	r5,12(sp)
100031dc:	d8800204 	addi	r2,sp,8
100031e0:	8828d53a 	srli	r20,r17,20
100031e4:	d8800015 	stw	r2,0(sp)
100031e8:	8009883a 	mov	r4,r16
100031ec:	900d883a 	mov	r6,r18
100031f0:	d9c00104 	addi	r7,sp,4
100031f4:	00072600 	call	10007260 <__d2b>
100031f8:	1039883a 	mov	fp,r2
100031fc:	a001671e 	bne	r20,zero,1000379c <_dtoa_r+0x708>
10003200:	dd400217 	ldw	r21,8(sp)
10003204:	dd000117 	ldw	r20,4(sp)
10003208:	00befbc4 	movi	r2,-1041
1000320c:	ad29883a 	add	r20,r21,r20
10003210:	a082d616 	blt	r20,r2,10003d6c <_dtoa_r+0xcd8>
10003214:	d9800317 	ldw	r6,12(sp)
10003218:	013f0384 	movi	r4,-1010
1000321c:	2509c83a 	sub	r4,r4,r20
10003220:	a0810484 	addi	r2,r20,1042
10003224:	8922983a 	sll	r17,r17,r4
10003228:	3084d83a 	srl	r2,r6,r2
1000322c:	8888b03a 	or	r4,r17,r2
10003230:	000d1640 	call	1000d164 <__floatunsidf>
10003234:	1009883a 	mov	r4,r2
10003238:	017f8434 	movhi	r5,65040
1000323c:	00800044 	movi	r2,1
10003240:	194b883a 	add	r5,r3,r5
10003244:	a53fffc4 	addi	r20,r20,-1
10003248:	d8800f15 	stw	r2,60(sp)
1000324c:	000d883a 	mov	r6,zero
10003250:	01cffe34 	movhi	r7,16376
10003254:	000c78c0 	call	1000c78c <__subdf3>
10003258:	1009883a 	mov	r4,r2
1000325c:	180b883a 	mov	r5,r3
10003260:	0198dbf4 	movhi	r6,25455
10003264:	3190d844 	addi	r6,r6,17249
10003268:	01cff4f4 	movhi	r7,16339
1000326c:	39e1e9c4 	addi	r7,r7,-30809
10003270:	000bf8c0 	call	1000bf8c <__muldf3>
10003274:	180b883a 	mov	r5,r3
10003278:	01a2d874 	movhi	r6,35681
1000327c:	31b22cc4 	addi	r6,r6,-14157
10003280:	01cff1f4 	movhi	r7,16327
10003284:	39e28a04 	addi	r7,r7,-30168
10003288:	1009883a 	mov	r4,r2
1000328c:	000ab2c0 	call	1000ab2c <__adddf3>
10003290:	a009883a 	mov	r4,r20
10003294:	1027883a 	mov	r19,r2
10003298:	1823883a 	mov	r17,r3
1000329c:	000d0940 	call	1000d094 <__floatsidf>
100032a0:	1009883a 	mov	r4,r2
100032a4:	180b883a 	mov	r5,r3
100032a8:	019427f4 	movhi	r6,20639
100032ac:	319e7ec4 	addi	r6,r6,31227
100032b0:	01cff4f4 	movhi	r7,16339
100032b4:	39d104c4 	addi	r7,r7,17427
100032b8:	000bf8c0 	call	1000bf8c <__muldf3>
100032bc:	9809883a 	mov	r4,r19
100032c0:	880b883a 	mov	r5,r17
100032c4:	100d883a 	mov	r6,r2
100032c8:	180f883a 	mov	r7,r3
100032cc:	000ab2c0 	call	1000ab2c <__adddf3>
100032d0:	1009883a 	mov	r4,r2
100032d4:	180b883a 	mov	r5,r3
100032d8:	1027883a 	mov	r19,r2
100032dc:	1823883a 	mov	r17,r3
100032e0:	000d0140 	call	1000d014 <__fixdfsi>
100032e4:	9809883a 	mov	r4,r19
100032e8:	880b883a 	mov	r5,r17
100032ec:	000d883a 	mov	r6,zero
100032f0:	000f883a 	mov	r7,zero
100032f4:	d8800615 	stw	r2,24(sp)
100032f8:	000bea00 	call	1000bea0 <__ledf2>
100032fc:	10028416 	blt	r2,zero,10003d10 <_dtoa_r+0xc7c>
10003300:	d9000617 	ldw	r4,24(sp)
10003304:	00800584 	movi	r2,22
10003308:	11027236 	bltu	r2,r4,10003cd4 <_dtoa_r+0xc40>
1000330c:	200490fa 	slli	r2,r4,3
10003310:	00c40074 	movhi	r3,4097
10003314:	18fe8d04 	addi	r3,r3,-1484
10003318:	d9800317 	ldw	r6,12(sp)
1000331c:	1885883a 	add	r2,r3,r2
10003320:	11000017 	ldw	r4,0(r2)
10003324:	11400117 	ldw	r5,4(r2)
10003328:	900f883a 	mov	r7,r18
1000332c:	000bdc80 	call	1000bdc8 <__gedf2>
10003330:	0082930e 	bge	zero,r2,10003d80 <_dtoa_r+0xcec>
10003334:	d9800617 	ldw	r6,24(sp)
10003338:	d8000e15 	stw	zero,56(sp)
1000333c:	31bfffc4 	addi	r6,r6,-1
10003340:	d9800615 	stw	r6,24(sp)
10003344:	ad2bc83a 	sub	r21,r21,r20
10003348:	ad7fffc4 	addi	r21,r21,-1
1000334c:	a8026c16 	blt	r21,zero,10003d00 <_dtoa_r+0xc6c>
10003350:	d8000815 	stw	zero,32(sp)
10003354:	d8800617 	ldw	r2,24(sp)
10003358:	10026116 	blt	r2,zero,10003ce0 <_dtoa_r+0xc4c>
1000335c:	a8ab883a 	add	r21,r21,r2
10003360:	d8800b15 	stw	r2,44(sp)
10003364:	d8000a15 	stw	zero,40(sp)
10003368:	d9c00417 	ldw	r7,16(sp)
1000336c:	00800244 	movi	r2,9
10003370:	11c11636 	bltu	r2,r7,100037cc <_dtoa_r+0x738>
10003374:	00800144 	movi	r2,5
10003378:	11c4cc0e 	bge	r2,r7,100046ac <_dtoa_r+0x1618>
1000337c:	39ffff04 	addi	r7,r7,-4
10003380:	d9c00415 	stw	r7,16(sp)
10003384:	0027883a 	mov	r19,zero
10003388:	d8c00417 	ldw	r3,16(sp)
1000338c:	008000c4 	movi	r2,3
10003390:	1883aa26 	beq	r3,r2,1000423c <_dtoa_r+0x11a8>
10003394:	10c35b0e 	bge	r2,r3,10004104 <_dtoa_r+0x1070>
10003398:	d9000417 	ldw	r4,16(sp)
1000339c:	00800104 	movi	r2,4
100033a0:	2082da26 	beq	r4,r2,10003f0c <_dtoa_r+0xe78>
100033a4:	00800144 	movi	r2,5
100033a8:	2081091e 	bne	r4,r2,100037d0 <_dtoa_r+0x73c>
100033ac:	01c00044 	movi	r7,1
100033b0:	d9c00c15 	stw	r7,48(sp)
100033b4:	d8c02117 	ldw	r3,132(sp)
100033b8:	d9000617 	ldw	r4,24(sp)
100033bc:	1907883a 	add	r3,r3,r4
100033c0:	19800044 	addi	r6,r3,1
100033c4:	d8c00d15 	stw	r3,52(sp)
100033c8:	d9800915 	stw	r6,36(sp)
100033cc:	0183a90e 	bge	zero,r6,10004274 <_dtoa_r+0x11e0>
100033d0:	d9800917 	ldw	r6,36(sp)
100033d4:	80001115 	stw	zero,68(r16)
100033d8:	008005c4 	movi	r2,23
100033dc:	1184b52e 	bgeu	r2,r6,100046b4 <_dtoa_r+0x1620>
100033e0:	00c00044 	movi	r3,1
100033e4:	00800104 	movi	r2,4
100033e8:	1085883a 	add	r2,r2,r2
100033ec:	11000504 	addi	r4,r2,20
100033f0:	180b883a 	mov	r5,r3
100033f4:	18c00044 	addi	r3,r3,1
100033f8:	313ffb2e 	bgeu	r6,r4,100033e8 <__alt_data_end+0xf80033e8>
100033fc:	81401115 	stw	r5,68(r16)
10003400:	3023883a 	mov	r17,r6
10003404:	8009883a 	mov	r4,r16
10003408:	00065900 	call	10006590 <_Balloc>
1000340c:	d8800715 	stw	r2,28(sp)
10003410:	80801015 	stw	r2,64(r16)
10003414:	00800384 	movi	r2,14
10003418:	1440f936 	bltu	r2,r17,10003800 <_dtoa_r+0x76c>
1000341c:	9800f826 	beq	r19,zero,10003800 <_dtoa_r+0x76c>
10003420:	d9c00617 	ldw	r7,24(sp)
10003424:	01c39c0e 	bge	zero,r7,10004298 <_dtoa_r+0x1204>
10003428:	388003cc 	andi	r2,r7,15
1000342c:	100490fa 	slli	r2,r2,3
10003430:	382dd13a 	srai	r22,r7,4
10003434:	00c40074 	movhi	r3,4097
10003438:	18fe8d04 	addi	r3,r3,-1484
1000343c:	1885883a 	add	r2,r3,r2
10003440:	b0c0040c 	andi	r3,r22,16
10003444:	12800017 	ldw	r10,0(r2)
10003448:	12400117 	ldw	r9,4(r2)
1000344c:	18038526 	beq	r3,zero,10004264 <_dtoa_r+0x11d0>
10003450:	00840074 	movhi	r2,4097
10003454:	10be8304 	addi	r2,r2,-1524
10003458:	11800817 	ldw	r6,32(r2)
1000345c:	11c00917 	ldw	r7,36(r2)
10003460:	d9000317 	ldw	r4,12(sp)
10003464:	900b883a 	mov	r5,r18
10003468:	da401515 	stw	r9,84(sp)
1000346c:	da801615 	stw	r10,88(sp)
10003470:	000b3a80 	call	1000b3a8 <__divdf3>
10003474:	da401517 	ldw	r9,84(sp)
10003478:	da801617 	ldw	r10,88(sp)
1000347c:	1027883a 	mov	r19,r2
10003480:	1829883a 	mov	r20,r3
10003484:	b58003cc 	andi	r22,r22,15
10003488:	044000c4 	movi	r17,3
1000348c:	b0001126 	beq	r22,zero,100034d4 <_dtoa_r+0x440>
10003490:	05c40074 	movhi	r23,4097
10003494:	bdfe8304 	addi	r23,r23,-1524
10003498:	5005883a 	mov	r2,r10
1000349c:	4807883a 	mov	r3,r9
100034a0:	b180004c 	andi	r6,r22,1
100034a4:	1009883a 	mov	r4,r2
100034a8:	b02dd07a 	srai	r22,r22,1
100034ac:	180b883a 	mov	r5,r3
100034b0:	30000426 	beq	r6,zero,100034c4 <_dtoa_r+0x430>
100034b4:	b9800017 	ldw	r6,0(r23)
100034b8:	b9c00117 	ldw	r7,4(r23)
100034bc:	8c400044 	addi	r17,r17,1
100034c0:	000bf8c0 	call	1000bf8c <__muldf3>
100034c4:	bdc00204 	addi	r23,r23,8
100034c8:	b03ff51e 	bne	r22,zero,100034a0 <__alt_data_end+0xf80034a0>
100034cc:	1015883a 	mov	r10,r2
100034d0:	1813883a 	mov	r9,r3
100034d4:	9809883a 	mov	r4,r19
100034d8:	a00b883a 	mov	r5,r20
100034dc:	500d883a 	mov	r6,r10
100034e0:	480f883a 	mov	r7,r9
100034e4:	000b3a80 	call	1000b3a8 <__divdf3>
100034e8:	1027883a 	mov	r19,r2
100034ec:	1829883a 	mov	r20,r3
100034f0:	d8c00e17 	ldw	r3,56(sp)
100034f4:	18000626 	beq	r3,zero,10003510 <_dtoa_r+0x47c>
100034f8:	9809883a 	mov	r4,r19
100034fc:	a00b883a 	mov	r5,r20
10003500:	000d883a 	mov	r6,zero
10003504:	01cffc34 	movhi	r7,16368
10003508:	000bea00 	call	1000bea0 <__ledf2>
1000350c:	10041516 	blt	r2,zero,10004564 <_dtoa_r+0x14d0>
10003510:	8809883a 	mov	r4,r17
10003514:	000d0940 	call	1000d094 <__floatsidf>
10003518:	1009883a 	mov	r4,r2
1000351c:	180b883a 	mov	r5,r3
10003520:	980d883a 	mov	r6,r19
10003524:	a00f883a 	mov	r7,r20
10003528:	000bf8c0 	call	1000bf8c <__muldf3>
1000352c:	1009883a 	mov	r4,r2
10003530:	180b883a 	mov	r5,r3
10003534:	000d883a 	mov	r6,zero
10003538:	01d00734 	movhi	r7,16412
1000353c:	000ab2c0 	call	1000ab2c <__adddf3>
10003540:	1023883a 	mov	r17,r2
10003544:	d8800917 	ldw	r2,36(sp)
10003548:	05bf3034 	movhi	r22,64704
1000354c:	1daf883a 	add	r23,r3,r22
10003550:	10031e26 	beq	r2,zero,100041cc <_dtoa_r+0x1138>
10003554:	d8c00617 	ldw	r3,24(sp)
10003558:	dac00917 	ldw	r11,36(sp)
1000355c:	d8c01315 	stw	r3,76(sp)
10003560:	d9000c17 	ldw	r4,48(sp)
10003564:	20039626 	beq	r4,zero,100043c0 <_dtoa_r+0x132c>
10003568:	58bfffc4 	addi	r2,r11,-1
1000356c:	100490fa 	slli	r2,r2,3
10003570:	00c40074 	movhi	r3,4097
10003574:	18fe8d04 	addi	r3,r3,-1484
10003578:	0009883a 	mov	r4,zero
1000357c:	1885883a 	add	r2,r3,r2
10003580:	11800017 	ldw	r6,0(r2)
10003584:	11c00117 	ldw	r7,4(r2)
10003588:	d8800717 	ldw	r2,28(sp)
1000358c:	014ff834 	movhi	r5,16352
10003590:	dac01615 	stw	r11,88(sp)
10003594:	15800044 	addi	r22,r2,1
10003598:	000b3a80 	call	1000b3a8 <__divdf3>
1000359c:	880d883a 	mov	r6,r17
100035a0:	b80f883a 	mov	r7,r23
100035a4:	1009883a 	mov	r4,r2
100035a8:	180b883a 	mov	r5,r3
100035ac:	000c78c0 	call	1000c78c <__subdf3>
100035b0:	a00b883a 	mov	r5,r20
100035b4:	9809883a 	mov	r4,r19
100035b8:	102f883a 	mov	r23,r2
100035bc:	d8c01015 	stw	r3,64(sp)
100035c0:	000d0140 	call	1000d014 <__fixdfsi>
100035c4:	1009883a 	mov	r4,r2
100035c8:	d8801515 	stw	r2,84(sp)
100035cc:	000d0940 	call	1000d094 <__floatsidf>
100035d0:	9809883a 	mov	r4,r19
100035d4:	a00b883a 	mov	r5,r20
100035d8:	100d883a 	mov	r6,r2
100035dc:	180f883a 	mov	r7,r3
100035e0:	000c78c0 	call	1000c78c <__subdf3>
100035e4:	da401517 	ldw	r9,84(sp)
100035e8:	1827883a 	mov	r19,r3
100035ec:	d8c00717 	ldw	r3,28(sp)
100035f0:	d9401017 	ldw	r5,64(sp)
100035f4:	4a400c04 	addi	r9,r9,48
100035f8:	1023883a 	mov	r17,r2
100035fc:	1a400005 	stb	r9,0(r3)
10003600:	b809883a 	mov	r4,r23
10003604:	880d883a 	mov	r6,r17
10003608:	980f883a 	mov	r7,r19
1000360c:	4829883a 	mov	r20,r9
10003610:	000bdc80 	call	1000bdc8 <__gedf2>
10003614:	00842216 	blt	zero,r2,100046a0 <_dtoa_r+0x160c>
10003618:	0009883a 	mov	r4,zero
1000361c:	014ffc34 	movhi	r5,16368
10003620:	880d883a 	mov	r6,r17
10003624:	980f883a 	mov	r7,r19
10003628:	000c78c0 	call	1000c78c <__subdf3>
1000362c:	d9401017 	ldw	r5,64(sp)
10003630:	b809883a 	mov	r4,r23
10003634:	100d883a 	mov	r6,r2
10003638:	180f883a 	mov	r7,r3
1000363c:	000bdc80 	call	1000bdc8 <__gedf2>
10003640:	dac01617 	ldw	r11,88(sp)
10003644:	00841316 	blt	zero,r2,10004694 <_dtoa_r+0x1600>
10003648:	00800044 	movi	r2,1
1000364c:	12c06c0e 	bge	r2,r11,10003800 <_dtoa_r+0x76c>
10003650:	d9000717 	ldw	r4,28(sp)
10003654:	dd401215 	stw	r21,72(sp)
10003658:	dc001115 	stw	r16,68(sp)
1000365c:	22d7883a 	add	r11,r4,r11
10003660:	dc801415 	stw	r18,80(sp)
10003664:	582b883a 	mov	r21,r11
10003668:	b021883a 	mov	r16,r22
1000366c:	dc801017 	ldw	r18,64(sp)
10003670:	00000906 	br	10003698 <_dtoa_r+0x604>
10003674:	000c78c0 	call	1000c78c <__subdf3>
10003678:	1009883a 	mov	r4,r2
1000367c:	180b883a 	mov	r5,r3
10003680:	b80d883a 	mov	r6,r23
10003684:	900f883a 	mov	r7,r18
10003688:	000bea00 	call	1000bea0 <__ledf2>
1000368c:	1003ea16 	blt	r2,zero,10004638 <_dtoa_r+0x15a4>
10003690:	b543ed26 	beq	r22,r21,10004648 <_dtoa_r+0x15b4>
10003694:	b021883a 	mov	r16,r22
10003698:	b809883a 	mov	r4,r23
1000369c:	900b883a 	mov	r5,r18
100036a0:	000d883a 	mov	r6,zero
100036a4:	01d00934 	movhi	r7,16420
100036a8:	000bf8c0 	call	1000bf8c <__muldf3>
100036ac:	000d883a 	mov	r6,zero
100036b0:	01d00934 	movhi	r7,16420
100036b4:	8809883a 	mov	r4,r17
100036b8:	980b883a 	mov	r5,r19
100036bc:	102f883a 	mov	r23,r2
100036c0:	1825883a 	mov	r18,r3
100036c4:	000bf8c0 	call	1000bf8c <__muldf3>
100036c8:	180b883a 	mov	r5,r3
100036cc:	1009883a 	mov	r4,r2
100036d0:	1823883a 	mov	r17,r3
100036d4:	1027883a 	mov	r19,r2
100036d8:	000d0140 	call	1000d014 <__fixdfsi>
100036dc:	1009883a 	mov	r4,r2
100036e0:	1029883a 	mov	r20,r2
100036e4:	000d0940 	call	1000d094 <__floatsidf>
100036e8:	9809883a 	mov	r4,r19
100036ec:	880b883a 	mov	r5,r17
100036f0:	100d883a 	mov	r6,r2
100036f4:	180f883a 	mov	r7,r3
100036f8:	000c78c0 	call	1000c78c <__subdf3>
100036fc:	a5000c04 	addi	r20,r20,48
10003700:	1009883a 	mov	r4,r2
10003704:	180b883a 	mov	r5,r3
10003708:	b80d883a 	mov	r6,r23
1000370c:	900f883a 	mov	r7,r18
10003710:	85000005 	stb	r20,0(r16)
10003714:	1023883a 	mov	r17,r2
10003718:	1827883a 	mov	r19,r3
1000371c:	000bea00 	call	1000bea0 <__ledf2>
10003720:	b5800044 	addi	r22,r22,1
10003724:	0009883a 	mov	r4,zero
10003728:	014ffc34 	movhi	r5,16368
1000372c:	880d883a 	mov	r6,r17
10003730:	980f883a 	mov	r7,r19
10003734:	103fcf0e 	bge	r2,zero,10003674 <__alt_data_end+0xf8003674>
10003738:	d8c01317 	ldw	r3,76(sp)
1000373c:	dc001117 	ldw	r16,68(sp)
10003740:	d8c00615 	stw	r3,24(sp)
10003744:	8009883a 	mov	r4,r16
10003748:	e00b883a 	mov	r5,fp
1000374c:	00066380 	call	10006638 <_Bfree>
10003750:	d9800617 	ldw	r6,24(sp)
10003754:	d9c02217 	ldw	r7,136(sp)
10003758:	b0000005 	stb	zero,0(r22)
1000375c:	30800044 	addi	r2,r6,1
10003760:	38800015 	stw	r2,0(r7)
10003764:	d8802417 	ldw	r2,144(sp)
10003768:	10026426 	beq	r2,zero,100040fc <_dtoa_r+0x1068>
1000376c:	15800015 	stw	r22,0(r2)
10003770:	d8800717 	ldw	r2,28(sp)
10003774:	003e7606 	br	10003150 <__alt_data_end+0xf8003150>
10003778:	00800434 	movhi	r2,16
1000377c:	10bfffc4 	addi	r2,r2,-1
10003780:	88a2703a 	and	r17,r17,r2
10003784:	883e831e 	bne	r17,zero,10003194 <__alt_data_end+0xf8003194>
10003788:	00840074 	movhi	r2,4097
1000378c:	10be6e04 	addi	r2,r2,-1608
10003790:	003e8206 	br	1000319c <__alt_data_end+0xf800319c>
10003794:	10c00204 	addi	r3,r2,8
10003798:	003e8506 	br	100031b0 <__alt_data_end+0xf80031b0>
1000379c:	01400434 	movhi	r5,16
100037a0:	297fffc4 	addi	r5,r5,-1
100037a4:	914a703a 	and	r5,r18,r5
100037a8:	d9000317 	ldw	r4,12(sp)
100037ac:	294ffc34 	orhi	r5,r5,16368
100037b0:	a53f0044 	addi	r20,r20,-1023
100037b4:	dd400217 	ldw	r21,8(sp)
100037b8:	d8000f15 	stw	zero,60(sp)
100037bc:	003ea306 	br	1000324c <__alt_data_end+0xf800324c>
100037c0:	00840074 	movhi	r2,4097
100037c4:	10be6504 	addi	r2,r2,-1644
100037c8:	003e6106 	br	10003150 <__alt_data_end+0xf8003150>
100037cc:	d8000415 	stw	zero,16(sp)
100037d0:	8009883a 	mov	r4,r16
100037d4:	80001115 	stw	zero,68(r16)
100037d8:	000b883a 	mov	r5,zero
100037dc:	00065900 	call	10006590 <_Balloc>
100037e0:	00ffffc4 	movi	r3,-1
100037e4:	01000044 	movi	r4,1
100037e8:	d8800715 	stw	r2,28(sp)
100037ec:	d8c00d15 	stw	r3,52(sp)
100037f0:	80801015 	stw	r2,64(r16)
100037f4:	d8002115 	stw	zero,132(sp)
100037f8:	d8c00915 	stw	r3,36(sp)
100037fc:	d9000c15 	stw	r4,48(sp)
10003800:	d8800117 	ldw	r2,4(sp)
10003804:	10008e16 	blt	r2,zero,10003a40 <_dtoa_r+0x9ac>
10003808:	d9000617 	ldw	r4,24(sp)
1000380c:	00c00384 	movi	r3,14
10003810:	19008b16 	blt	r3,r4,10003a40 <_dtoa_r+0x9ac>
10003814:	200490fa 	slli	r2,r4,3
10003818:	d9802117 	ldw	r6,132(sp)
1000381c:	00c40074 	movhi	r3,4097
10003820:	18fe8d04 	addi	r3,r3,-1484
10003824:	1885883a 	add	r2,r3,r2
10003828:	14400017 	ldw	r17,0(r2)
1000382c:	14c00117 	ldw	r19,4(r2)
10003830:	3001be16 	blt	r6,zero,10003f2c <_dtoa_r+0xe98>
10003834:	d9000317 	ldw	r4,12(sp)
10003838:	880d883a 	mov	r6,r17
1000383c:	980f883a 	mov	r7,r19
10003840:	900b883a 	mov	r5,r18
10003844:	000b3a80 	call	1000b3a8 <__divdf3>
10003848:	180b883a 	mov	r5,r3
1000384c:	1009883a 	mov	r4,r2
10003850:	000d0140 	call	1000d014 <__fixdfsi>
10003854:	1009883a 	mov	r4,r2
10003858:	102f883a 	mov	r23,r2
1000385c:	000d0940 	call	1000d094 <__floatsidf>
10003860:	1009883a 	mov	r4,r2
10003864:	180b883a 	mov	r5,r3
10003868:	880d883a 	mov	r6,r17
1000386c:	980f883a 	mov	r7,r19
10003870:	000bf8c0 	call	1000bf8c <__muldf3>
10003874:	d9000317 	ldw	r4,12(sp)
10003878:	900b883a 	mov	r5,r18
1000387c:	100d883a 	mov	r6,r2
10003880:	180f883a 	mov	r7,r3
10003884:	000c78c0 	call	1000c78c <__subdf3>
10003888:	d9c00717 	ldw	r7,28(sp)
1000388c:	1009883a 	mov	r4,r2
10003890:	b8800c04 	addi	r2,r23,48
10003894:	38800005 	stb	r2,0(r7)
10003898:	3d800044 	addi	r22,r7,1
1000389c:	d9c00917 	ldw	r7,36(sp)
100038a0:	01800044 	movi	r6,1
100038a4:	180b883a 	mov	r5,r3
100038a8:	2005883a 	mov	r2,r4
100038ac:	39803e26 	beq	r7,r6,100039a8 <_dtoa_r+0x914>
100038b0:	000d883a 	mov	r6,zero
100038b4:	01d00934 	movhi	r7,16420
100038b8:	000bf8c0 	call	1000bf8c <__muldf3>
100038bc:	1009883a 	mov	r4,r2
100038c0:	180b883a 	mov	r5,r3
100038c4:	000d883a 	mov	r6,zero
100038c8:	000f883a 	mov	r7,zero
100038cc:	1029883a 	mov	r20,r2
100038d0:	182b883a 	mov	r21,r3
100038d4:	000bd440 	call	1000bd44 <__eqdf2>
100038d8:	103f9a26 	beq	r2,zero,10003744 <__alt_data_end+0xf8003744>
100038dc:	d8c00717 	ldw	r3,28(sp)
100038e0:	d9000917 	ldw	r4,36(sp)
100038e4:	b025883a 	mov	r18,r22
100038e8:	df000415 	stw	fp,16(sp)
100038ec:	1905883a 	add	r2,r3,r4
100038f0:	15ffffc4 	addi	r23,r2,-1
100038f4:	dc000315 	stw	r16,12(sp)
100038f8:	00000a06 	br	10003924 <_dtoa_r+0x890>
100038fc:	000bf8c0 	call	1000bf8c <__muldf3>
10003900:	1009883a 	mov	r4,r2
10003904:	180b883a 	mov	r5,r3
10003908:	000d883a 	mov	r6,zero
1000390c:	000f883a 	mov	r7,zero
10003910:	1029883a 	mov	r20,r2
10003914:	182b883a 	mov	r21,r3
10003918:	000bd440 	call	1000bd44 <__eqdf2>
1000391c:	10021926 	beq	r2,zero,10004184 <_dtoa_r+0x10f0>
10003920:	e025883a 	mov	r18,fp
10003924:	880d883a 	mov	r6,r17
10003928:	980f883a 	mov	r7,r19
1000392c:	a009883a 	mov	r4,r20
10003930:	a80b883a 	mov	r5,r21
10003934:	000b3a80 	call	1000b3a8 <__divdf3>
10003938:	180b883a 	mov	r5,r3
1000393c:	1009883a 	mov	r4,r2
10003940:	000d0140 	call	1000d014 <__fixdfsi>
10003944:	1009883a 	mov	r4,r2
10003948:	1021883a 	mov	r16,r2
1000394c:	000d0940 	call	1000d094 <__floatsidf>
10003950:	1009883a 	mov	r4,r2
10003954:	180b883a 	mov	r5,r3
10003958:	880d883a 	mov	r6,r17
1000395c:	980f883a 	mov	r7,r19
10003960:	000bf8c0 	call	1000bf8c <__muldf3>
10003964:	a009883a 	mov	r4,r20
10003968:	a80b883a 	mov	r5,r21
1000396c:	100d883a 	mov	r6,r2
10003970:	180f883a 	mov	r7,r3
10003974:	000c78c0 	call	1000c78c <__subdf3>
10003978:	82800c04 	addi	r10,r16,48
1000397c:	97000044 	addi	fp,r18,1
10003980:	92800005 	stb	r10,0(r18)
10003984:	000d883a 	mov	r6,zero
10003988:	01d00934 	movhi	r7,16420
1000398c:	1009883a 	mov	r4,r2
10003990:	180b883a 	mov	r5,r3
10003994:	e02d883a 	mov	r22,fp
10003998:	95ffd81e 	bne	r18,r23,100038fc <__alt_data_end+0xf80038fc>
1000399c:	802f883a 	mov	r23,r16
100039a0:	df000417 	ldw	fp,16(sp)
100039a4:	dc000317 	ldw	r16,12(sp)
100039a8:	1009883a 	mov	r4,r2
100039ac:	180b883a 	mov	r5,r3
100039b0:	100d883a 	mov	r6,r2
100039b4:	180f883a 	mov	r7,r3
100039b8:	000ab2c0 	call	1000ab2c <__adddf3>
100039bc:	8809883a 	mov	r4,r17
100039c0:	980b883a 	mov	r5,r19
100039c4:	100d883a 	mov	r6,r2
100039c8:	180f883a 	mov	r7,r3
100039cc:	1025883a 	mov	r18,r2
100039d0:	1829883a 	mov	r20,r3
100039d4:	000bea00 	call	1000bea0 <__ledf2>
100039d8:	10000816 	blt	r2,zero,100039fc <_dtoa_r+0x968>
100039dc:	8809883a 	mov	r4,r17
100039e0:	980b883a 	mov	r5,r19
100039e4:	900d883a 	mov	r6,r18
100039e8:	a00f883a 	mov	r7,r20
100039ec:	000bd440 	call	1000bd44 <__eqdf2>
100039f0:	103f541e 	bne	r2,zero,10003744 <__alt_data_end+0xf8003744>
100039f4:	bdc0004c 	andi	r23,r23,1
100039f8:	b83f5226 	beq	r23,zero,10003744 <__alt_data_end+0xf8003744>
100039fc:	b53fffc3 	ldbu	r20,-1(r22)
10003a00:	b0ffff84 	addi	r3,r22,-2
10003a04:	01400e44 	movi	r5,57
10003a08:	d9800717 	ldw	r6,28(sp)
10003a0c:	00000406 	br	10003a20 <_dtoa_r+0x98c>
10003a10:	30824326 	beq	r6,r2,10004320 <_dtoa_r+0x128c>
10003a14:	1d000003 	ldbu	r20,0(r3)
10003a18:	102d883a 	mov	r22,r2
10003a1c:	18ffffc4 	addi	r3,r3,-1
10003a20:	a1003fcc 	andi	r4,r20,255
10003a24:	2100201c 	xori	r4,r4,128
10003a28:	213fe004 	addi	r4,r4,-128
10003a2c:	b0bfffc4 	addi	r2,r22,-1
10003a30:	217ff726 	beq	r4,r5,10003a10 <__alt_data_end+0xf8003a10>
10003a34:	a2400044 	addi	r9,r20,1
10003a38:	12400005 	stb	r9,0(r2)
10003a3c:	003f4106 	br	10003744 <__alt_data_end+0xf8003744>
10003a40:	d9000c17 	ldw	r4,48(sp)
10003a44:	2000be26 	beq	r4,zero,10003d40 <_dtoa_r+0xcac>
10003a48:	d9800417 	ldw	r6,16(sp)
10003a4c:	00c00044 	movi	r3,1
10003a50:	19815e0e 	bge	r3,r6,10003fcc <_dtoa_r+0xf38>
10003a54:	d8800917 	ldw	r2,36(sp)
10003a58:	d8c00a17 	ldw	r3,40(sp)
10003a5c:	153fffc4 	addi	r20,r2,-1
10003a60:	1d01f816 	blt	r3,r20,10004244 <_dtoa_r+0x11b0>
10003a64:	1d29c83a 	sub	r20,r3,r20
10003a68:	d9c00917 	ldw	r7,36(sp)
10003a6c:	3802ad16 	blt	r7,zero,10004524 <_dtoa_r+0x1490>
10003a70:	dcc00817 	ldw	r19,32(sp)
10003a74:	d8800917 	ldw	r2,36(sp)
10003a78:	d8c00817 	ldw	r3,32(sp)
10003a7c:	8009883a 	mov	r4,r16
10003a80:	01400044 	movi	r5,1
10003a84:	1887883a 	add	r3,r3,r2
10003a88:	d8c00815 	stw	r3,32(sp)
10003a8c:	a8ab883a 	add	r21,r21,r2
10003a90:	00069c00 	call	100069c0 <__i2b>
10003a94:	1023883a 	mov	r17,r2
10003a98:	98000826 	beq	r19,zero,10003abc <_dtoa_r+0xa28>
10003a9c:	0540070e 	bge	zero,r21,10003abc <_dtoa_r+0xa28>
10003aa0:	a805883a 	mov	r2,r21
10003aa4:	9d411716 	blt	r19,r21,10003f04 <_dtoa_r+0xe70>
10003aa8:	d9000817 	ldw	r4,32(sp)
10003aac:	98a7c83a 	sub	r19,r19,r2
10003ab0:	a8abc83a 	sub	r21,r21,r2
10003ab4:	2089c83a 	sub	r4,r4,r2
10003ab8:	d9000815 	stw	r4,32(sp)
10003abc:	d9800a17 	ldw	r6,40(sp)
10003ac0:	0180140e 	bge	zero,r6,10003b14 <_dtoa_r+0xa80>
10003ac4:	d9c00c17 	ldw	r7,48(sp)
10003ac8:	3801d626 	beq	r7,zero,10004224 <_dtoa_r+0x1190>
10003acc:	05000e0e 	bge	zero,r20,10003b08 <_dtoa_r+0xa74>
10003ad0:	880b883a 	mov	r5,r17
10003ad4:	8009883a 	mov	r4,r16
10003ad8:	a00d883a 	mov	r6,r20
10003adc:	0006c680 	call	10006c68 <__pow5mult>
10003ae0:	e00d883a 	mov	r6,fp
10003ae4:	8009883a 	mov	r4,r16
10003ae8:	100b883a 	mov	r5,r2
10003aec:	1023883a 	mov	r17,r2
10003af0:	00069fc0 	call	100069fc <__multiply>
10003af4:	102d883a 	mov	r22,r2
10003af8:	e00b883a 	mov	r5,fp
10003afc:	8009883a 	mov	r4,r16
10003b00:	00066380 	call	10006638 <_Bfree>
10003b04:	b039883a 	mov	fp,r22
10003b08:	d8800a17 	ldw	r2,40(sp)
10003b0c:	150dc83a 	sub	r6,r2,r20
10003b10:	30011f1e 	bne	r6,zero,10003f90 <_dtoa_r+0xefc>
10003b14:	8009883a 	mov	r4,r16
10003b18:	01400044 	movi	r5,1
10003b1c:	00069c00 	call	100069c0 <__i2b>
10003b20:	d8c00b17 	ldw	r3,44(sp)
10003b24:	1029883a 	mov	r20,r2
10003b28:	00c0050e 	bge	zero,r3,10003b40 <_dtoa_r+0xaac>
10003b2c:	8009883a 	mov	r4,r16
10003b30:	100b883a 	mov	r5,r2
10003b34:	180d883a 	mov	r6,r3
10003b38:	0006c680 	call	10006c68 <__pow5mult>
10003b3c:	1029883a 	mov	r20,r2
10003b40:	d9000417 	ldw	r4,16(sp)
10003b44:	00800044 	movi	r2,1
10003b48:	1100e00e 	bge	r2,r4,10003ecc <_dtoa_r+0xe38>
10003b4c:	0025883a 	mov	r18,zero
10003b50:	d8800b17 	ldw	r2,44(sp)
10003b54:	10015f1e 	bne	r2,zero,100040d4 <_dtoa_r+0x1040>
10003b58:	00800044 	movi	r2,1
10003b5c:	1545883a 	add	r2,r2,r21
10003b60:	108007cc 	andi	r2,r2,31
10003b64:	10007a26 	beq	r2,zero,10003d50 <_dtoa_r+0xcbc>
10003b68:	01000804 	movi	r4,32
10003b6c:	2089c83a 	sub	r4,r4,r2
10003b70:	00c00104 	movi	r3,4
10003b74:	1902d20e 	bge	r3,r4,100046c0 <_dtoa_r+0x162c>
10003b78:	00c00704 	movi	r3,28
10003b7c:	1885c83a 	sub	r2,r3,r2
10003b80:	d8c00817 	ldw	r3,32(sp)
10003b84:	98a7883a 	add	r19,r19,r2
10003b88:	a8ab883a 	add	r21,r21,r2
10003b8c:	1887883a 	add	r3,r3,r2
10003b90:	d8c00815 	stw	r3,32(sp)
10003b94:	d9800817 	ldw	r6,32(sp)
10003b98:	0180040e 	bge	zero,r6,10003bac <_dtoa_r+0xb18>
10003b9c:	e00b883a 	mov	r5,fp
10003ba0:	8009883a 	mov	r4,r16
10003ba4:	0006db00 	call	10006db0 <__lshift>
10003ba8:	1039883a 	mov	fp,r2
10003bac:	0540050e 	bge	zero,r21,10003bc4 <_dtoa_r+0xb30>
10003bb0:	a00b883a 	mov	r5,r20
10003bb4:	8009883a 	mov	r4,r16
10003bb8:	a80d883a 	mov	r6,r21
10003bbc:	0006db00 	call	10006db0 <__lshift>
10003bc0:	1029883a 	mov	r20,r2
10003bc4:	d9c00e17 	ldw	r7,56(sp)
10003bc8:	3801301e 	bne	r7,zero,1000408c <_dtoa_r+0xff8>
10003bcc:	d9c00917 	ldw	r7,36(sp)
10003bd0:	01c1500e 	bge	zero,r7,10004114 <_dtoa_r+0x1080>
10003bd4:	d8800c17 	ldw	r2,48(sp)
10003bd8:	10006b1e 	bne	r2,zero,10003d88 <_dtoa_r+0xcf4>
10003bdc:	dc800717 	ldw	r18,28(sp)
10003be0:	dcc00917 	ldw	r19,36(sp)
10003be4:	902b883a 	mov	r21,r18
10003be8:	00000206 	br	10003bf4 <_dtoa_r+0xb60>
10003bec:	00066600 	call	10006660 <__multadd>
10003bf0:	1039883a 	mov	fp,r2
10003bf4:	e009883a 	mov	r4,fp
10003bf8:	a00b883a 	mov	r5,r20
10003bfc:	0002e6c0 	call	10002e6c <quorem>
10003c00:	10800c04 	addi	r2,r2,48
10003c04:	90800005 	stb	r2,0(r18)
10003c08:	94800044 	addi	r18,r18,1
10003c0c:	9547c83a 	sub	r3,r18,r21
10003c10:	8009883a 	mov	r4,r16
10003c14:	e00b883a 	mov	r5,fp
10003c18:	01800284 	movi	r6,10
10003c1c:	000f883a 	mov	r7,zero
10003c20:	1cfff216 	blt	r3,r19,10003bec <__alt_data_end+0xf8003bec>
10003c24:	102f883a 	mov	r23,r2
10003c28:	d8800917 	ldw	r2,36(sp)
10003c2c:	0082410e 	bge	zero,r2,10004534 <_dtoa_r+0x14a0>
10003c30:	d9000717 	ldw	r4,28(sp)
10003c34:	002b883a 	mov	r21,zero
10003c38:	20ad883a 	add	r22,r4,r2
10003c3c:	e00b883a 	mov	r5,fp
10003c40:	8009883a 	mov	r4,r16
10003c44:	01800044 	movi	r6,1
10003c48:	0006db00 	call	10006db0 <__lshift>
10003c4c:	1009883a 	mov	r4,r2
10003c50:	a00b883a 	mov	r5,r20
10003c54:	1039883a 	mov	fp,r2
10003c58:	0006f000 	call	10006f00 <__mcmp>
10003c5c:	0080d10e 	bge	zero,r2,10003fa4 <_dtoa_r+0xf10>
10003c60:	b13fffc3 	ldbu	r4,-1(r22)
10003c64:	b0ffff84 	addi	r3,r22,-2
10003c68:	01800e44 	movi	r6,57
10003c6c:	d9c00717 	ldw	r7,28(sp)
10003c70:	00000406 	br	10003c84 <_dtoa_r+0xbf0>
10003c74:	38813c26 	beq	r7,r2,10004168 <_dtoa_r+0x10d4>
10003c78:	19000003 	ldbu	r4,0(r3)
10003c7c:	102d883a 	mov	r22,r2
10003c80:	18ffffc4 	addi	r3,r3,-1
10003c84:	21403fcc 	andi	r5,r4,255
10003c88:	2940201c 	xori	r5,r5,128
10003c8c:	297fe004 	addi	r5,r5,-128
10003c90:	b0bfffc4 	addi	r2,r22,-1
10003c94:	29bff726 	beq	r5,r6,10003c74 <__alt_data_end+0xf8003c74>
10003c98:	21000044 	addi	r4,r4,1
10003c9c:	11000005 	stb	r4,0(r2)
10003ca0:	8009883a 	mov	r4,r16
10003ca4:	a00b883a 	mov	r5,r20
10003ca8:	00066380 	call	10006638 <_Bfree>
10003cac:	883ea526 	beq	r17,zero,10003744 <__alt_data_end+0xf8003744>
10003cb0:	a8000426 	beq	r21,zero,10003cc4 <_dtoa_r+0xc30>
10003cb4:	ac400326 	beq	r21,r17,10003cc4 <_dtoa_r+0xc30>
10003cb8:	8009883a 	mov	r4,r16
10003cbc:	a80b883a 	mov	r5,r21
10003cc0:	00066380 	call	10006638 <_Bfree>
10003cc4:	8009883a 	mov	r4,r16
10003cc8:	880b883a 	mov	r5,r17
10003ccc:	00066380 	call	10006638 <_Bfree>
10003cd0:	003e9c06 	br	10003744 <__alt_data_end+0xf8003744>
10003cd4:	01c00044 	movi	r7,1
10003cd8:	d9c00e15 	stw	r7,56(sp)
10003cdc:	003d9906 	br	10003344 <__alt_data_end+0xf8003344>
10003ce0:	d8c00817 	ldw	r3,32(sp)
10003ce4:	d9000617 	ldw	r4,24(sp)
10003ce8:	d8000b15 	stw	zero,44(sp)
10003cec:	1907c83a 	sub	r3,r3,r4
10003cf0:	010dc83a 	sub	r6,zero,r4
10003cf4:	d8c00815 	stw	r3,32(sp)
10003cf8:	d9800a15 	stw	r6,40(sp)
10003cfc:	003d9a06 	br	10003368 <__alt_data_end+0xf8003368>
10003d00:	056bc83a 	sub	r21,zero,r21
10003d04:	dd400815 	stw	r21,32(sp)
10003d08:	002b883a 	mov	r21,zero
10003d0c:	003d9106 	br	10003354 <__alt_data_end+0xf8003354>
10003d10:	d9000617 	ldw	r4,24(sp)
10003d14:	000d0940 	call	1000d094 <__floatsidf>
10003d18:	1009883a 	mov	r4,r2
10003d1c:	180b883a 	mov	r5,r3
10003d20:	980d883a 	mov	r6,r19
10003d24:	880f883a 	mov	r7,r17
10003d28:	000bd440 	call	1000bd44 <__eqdf2>
10003d2c:	103d7426 	beq	r2,zero,10003300 <__alt_data_end+0xf8003300>
10003d30:	d8c00617 	ldw	r3,24(sp)
10003d34:	18ffffc4 	addi	r3,r3,-1
10003d38:	d8c00615 	stw	r3,24(sp)
10003d3c:	003d7006 	br	10003300 <__alt_data_end+0xf8003300>
10003d40:	dd000a17 	ldw	r20,40(sp)
10003d44:	dcc00817 	ldw	r19,32(sp)
10003d48:	0023883a 	mov	r17,zero
10003d4c:	003f5206 	br	10003a98 <__alt_data_end+0xf8003a98>
10003d50:	00800704 	movi	r2,28
10003d54:	d9000817 	ldw	r4,32(sp)
10003d58:	98a7883a 	add	r19,r19,r2
10003d5c:	a8ab883a 	add	r21,r21,r2
10003d60:	2089883a 	add	r4,r4,r2
10003d64:	d9000815 	stw	r4,32(sp)
10003d68:	003f8a06 	br	10003b94 <__alt_data_end+0xf8003b94>
10003d6c:	d9c00317 	ldw	r7,12(sp)
10003d70:	013efb84 	movi	r4,-1042
10003d74:	2509c83a 	sub	r4,r4,r20
10003d78:	3908983a 	sll	r4,r7,r4
10003d7c:	003d2c06 	br	10003230 <__alt_data_end+0xf8003230>
10003d80:	d8000e15 	stw	zero,56(sp)
10003d84:	003d6f06 	br	10003344 <__alt_data_end+0xf8003344>
10003d88:	04c0050e 	bge	zero,r19,10003da0 <_dtoa_r+0xd0c>
10003d8c:	880b883a 	mov	r5,r17
10003d90:	8009883a 	mov	r4,r16
10003d94:	980d883a 	mov	r6,r19
10003d98:	0006db00 	call	10006db0 <__lshift>
10003d9c:	1023883a 	mov	r17,r2
10003da0:	9001681e 	bne	r18,zero,10004344 <_dtoa_r+0x12b0>
10003da4:	8827883a 	mov	r19,r17
10003da8:	d8c00717 	ldw	r3,28(sp)
10003dac:	d9000917 	ldw	r4,36(sp)
10003db0:	1dffffc4 	addi	r23,r3,-1
10003db4:	1825883a 	mov	r18,r3
10003db8:	d8c00317 	ldw	r3,12(sp)
10003dbc:	b92f883a 	add	r23,r23,r4
10003dc0:	ddc00515 	stw	r23,20(sp)
10003dc4:	18c0004c 	andi	r3,r3,1
10003dc8:	d8c00315 	stw	r3,12(sp)
10003dcc:	e009883a 	mov	r4,fp
10003dd0:	a00b883a 	mov	r5,r20
10003dd4:	0002e6c0 	call	10002e6c <quorem>
10003dd8:	e009883a 	mov	r4,fp
10003ddc:	880b883a 	mov	r5,r17
10003de0:	102d883a 	mov	r22,r2
10003de4:	0006f000 	call	10006f00 <__mcmp>
10003de8:	8009883a 	mov	r4,r16
10003dec:	a00b883a 	mov	r5,r20
10003df0:	980d883a 	mov	r6,r19
10003df4:	102b883a 	mov	r21,r2
10003df8:	0006f600 	call	10006f60 <__mdiff>
10003dfc:	1007883a 	mov	r3,r2
10003e00:	10800317 	ldw	r2,12(r2)
10003e04:	b5c00c04 	addi	r23,r22,48
10003e08:	10009b1e 	bne	r2,zero,10004078 <_dtoa_r+0xfe4>
10003e0c:	180b883a 	mov	r5,r3
10003e10:	e009883a 	mov	r4,fp
10003e14:	d8c01515 	stw	r3,84(sp)
10003e18:	0006f000 	call	10006f00 <__mcmp>
10003e1c:	d8c01517 	ldw	r3,84(sp)
10003e20:	8009883a 	mov	r4,r16
10003e24:	d8801515 	stw	r2,84(sp)
10003e28:	180b883a 	mov	r5,r3
10003e2c:	00066380 	call	10006638 <_Bfree>
10003e30:	d8801517 	ldw	r2,84(sp)
10003e34:	1000041e 	bne	r2,zero,10003e48 <_dtoa_r+0xdb4>
10003e38:	d9000417 	ldw	r4,16(sp)
10003e3c:	2000021e 	bne	r4,zero,10003e48 <_dtoa_r+0xdb4>
10003e40:	d8c00317 	ldw	r3,12(sp)
10003e44:	18007926 	beq	r3,zero,1000402c <_dtoa_r+0xf98>
10003e48:	a8006616 	blt	r21,zero,10003fe4 <_dtoa_r+0xf50>
10003e4c:	a800041e 	bne	r21,zero,10003e60 <_dtoa_r+0xdcc>
10003e50:	d9000417 	ldw	r4,16(sp)
10003e54:	2000021e 	bne	r4,zero,10003e60 <_dtoa_r+0xdcc>
10003e58:	d8c00317 	ldw	r3,12(sp)
10003e5c:	18006126 	beq	r3,zero,10003fe4 <_dtoa_r+0xf50>
10003e60:	00814916 	blt	zero,r2,10004388 <_dtoa_r+0x12f4>
10003e64:	d8c00517 	ldw	r3,20(sp)
10003e68:	95400044 	addi	r21,r18,1
10003e6c:	95c00005 	stb	r23,0(r18)
10003e70:	a82d883a 	mov	r22,r21
10003e74:	90c14c26 	beq	r18,r3,100043a8 <_dtoa_r+0x1314>
10003e78:	e00b883a 	mov	r5,fp
10003e7c:	8009883a 	mov	r4,r16
10003e80:	01800284 	movi	r6,10
10003e84:	000f883a 	mov	r7,zero
10003e88:	00066600 	call	10006660 <__multadd>
10003e8c:	1039883a 	mov	fp,r2
10003e90:	8cc07026 	beq	r17,r19,10004054 <_dtoa_r+0xfc0>
10003e94:	880b883a 	mov	r5,r17
10003e98:	01800284 	movi	r6,10
10003e9c:	000f883a 	mov	r7,zero
10003ea0:	8009883a 	mov	r4,r16
10003ea4:	00066600 	call	10006660 <__multadd>
10003ea8:	980b883a 	mov	r5,r19
10003eac:	8009883a 	mov	r4,r16
10003eb0:	01800284 	movi	r6,10
10003eb4:	000f883a 	mov	r7,zero
10003eb8:	1023883a 	mov	r17,r2
10003ebc:	00066600 	call	10006660 <__multadd>
10003ec0:	1027883a 	mov	r19,r2
10003ec4:	a825883a 	mov	r18,r21
10003ec8:	003fc006 	br	10003dcc <__alt_data_end+0xf8003dcc>
10003ecc:	d9800317 	ldw	r6,12(sp)
10003ed0:	303f1e1e 	bne	r6,zero,10003b4c <__alt_data_end+0xf8003b4c>
10003ed4:	00c00434 	movhi	r3,16
10003ed8:	18ffffc4 	addi	r3,r3,-1
10003edc:	90c6703a 	and	r3,r18,r3
10003ee0:	183f1a1e 	bne	r3,zero,10003b4c <__alt_data_end+0xf8003b4c>
10003ee4:	949ffc2c 	andhi	r18,r18,32752
10003ee8:	903f1826 	beq	r18,zero,10003b4c <__alt_data_end+0xf8003b4c>
10003eec:	d9c00817 	ldw	r7,32(sp)
10003ef0:	a8ab883a 	add	r21,r21,r2
10003ef4:	1025883a 	mov	r18,r2
10003ef8:	388f883a 	add	r7,r7,r2
10003efc:	d9c00815 	stw	r7,32(sp)
10003f00:	003f1306 	br	10003b50 <__alt_data_end+0xf8003b50>
10003f04:	9805883a 	mov	r2,r19
10003f08:	003ee706 	br	10003aa8 <__alt_data_end+0xf8003aa8>
10003f0c:	01800044 	movi	r6,1
10003f10:	d9800c15 	stw	r6,48(sp)
10003f14:	d8802117 	ldw	r2,132(sp)
10003f18:	0080da0e 	bge	zero,r2,10004284 <_dtoa_r+0x11f0>
10003f1c:	100d883a 	mov	r6,r2
10003f20:	d8800d15 	stw	r2,52(sp)
10003f24:	d8800915 	stw	r2,36(sp)
10003f28:	003d2a06 	br	100033d4 <__alt_data_end+0xf80033d4>
10003f2c:	d8800917 	ldw	r2,36(sp)
10003f30:	00be4016 	blt	zero,r2,10003834 <__alt_data_end+0xf8003834>
10003f34:	1000b81e 	bne	r2,zero,10004218 <_dtoa_r+0x1184>
10003f38:	8809883a 	mov	r4,r17
10003f3c:	980b883a 	mov	r5,r19
10003f40:	000d883a 	mov	r6,zero
10003f44:	01d00534 	movhi	r7,16404
10003f48:	000bf8c0 	call	1000bf8c <__muldf3>
10003f4c:	d9800317 	ldw	r6,12(sp)
10003f50:	1009883a 	mov	r4,r2
10003f54:	180b883a 	mov	r5,r3
10003f58:	900f883a 	mov	r7,r18
10003f5c:	000bdc80 	call	1000bdc8 <__gedf2>
10003f60:	0029883a 	mov	r20,zero
10003f64:	0023883a 	mov	r17,zero
10003f68:	10007716 	blt	r2,zero,10004148 <_dtoa_r+0x10b4>
10003f6c:	d9002117 	ldw	r4,132(sp)
10003f70:	dd800717 	ldw	r22,28(sp)
10003f74:	0108303a 	nor	r4,zero,r4
10003f78:	d9000615 	stw	r4,24(sp)
10003f7c:	8009883a 	mov	r4,r16
10003f80:	a00b883a 	mov	r5,r20
10003f84:	00066380 	call	10006638 <_Bfree>
10003f88:	883f4e1e 	bne	r17,zero,10003cc4 <__alt_data_end+0xf8003cc4>
10003f8c:	003ded06 	br	10003744 <__alt_data_end+0xf8003744>
10003f90:	e00b883a 	mov	r5,fp
10003f94:	8009883a 	mov	r4,r16
10003f98:	0006c680 	call	10006c68 <__pow5mult>
10003f9c:	1039883a 	mov	fp,r2
10003fa0:	003edc06 	br	10003b14 <__alt_data_end+0xf8003b14>
10003fa4:	1000021e 	bne	r2,zero,10003fb0 <_dtoa_r+0xf1c>
10003fa8:	ba40004c 	andi	r9,r23,1
10003fac:	483f2c1e 	bne	r9,zero,10003c60 <__alt_data_end+0xf8003c60>
10003fb0:	01000c04 	movi	r4,48
10003fb4:	00000106 	br	10003fbc <_dtoa_r+0xf28>
10003fb8:	102d883a 	mov	r22,r2
10003fbc:	b0bfffc4 	addi	r2,r22,-1
10003fc0:	10c00007 	ldb	r3,0(r2)
10003fc4:	193ffc26 	beq	r3,r4,10003fb8 <__alt_data_end+0xf8003fb8>
10003fc8:	003f3506 	br	10003ca0 <__alt_data_end+0xf8003ca0>
10003fcc:	d9c00f17 	ldw	r7,60(sp)
10003fd0:	38015a26 	beq	r7,zero,1000453c <_dtoa_r+0x14a8>
10003fd4:	10810cc4 	addi	r2,r2,1075
10003fd8:	dd000a17 	ldw	r20,40(sp)
10003fdc:	dcc00817 	ldw	r19,32(sp)
10003fe0:	003ea506 	br	10003a78 <__alt_data_end+0xf8003a78>
10003fe4:	00800c0e 	bge	zero,r2,10004018 <_dtoa_r+0xf84>
10003fe8:	e00b883a 	mov	r5,fp
10003fec:	8009883a 	mov	r4,r16
10003ff0:	01800044 	movi	r6,1
10003ff4:	0006db00 	call	10006db0 <__lshift>
10003ff8:	1009883a 	mov	r4,r2
10003ffc:	a00b883a 	mov	r5,r20
10004000:	1039883a 	mov	fp,r2
10004004:	0006f000 	call	10006f00 <__mcmp>
10004008:	0081930e 	bge	zero,r2,10004658 <_dtoa_r+0x15c4>
1000400c:	00800e44 	movi	r2,57
10004010:	b8800a26 	beq	r23,r2,1000403c <_dtoa_r+0xfa8>
10004014:	b5c00c44 	addi	r23,r22,49
10004018:	882b883a 	mov	r21,r17
1000401c:	95800044 	addi	r22,r18,1
10004020:	95c00005 	stb	r23,0(r18)
10004024:	9823883a 	mov	r17,r19
10004028:	003f1d06 	br	10003ca0 <__alt_data_end+0xf8003ca0>
1000402c:	00800e44 	movi	r2,57
10004030:	b8800226 	beq	r23,r2,1000403c <_dtoa_r+0xfa8>
10004034:	057ff716 	blt	zero,r21,10004014 <__alt_data_end+0xf8004014>
10004038:	003ff706 	br	10004018 <__alt_data_end+0xf8004018>
1000403c:	01000e44 	movi	r4,57
10004040:	882b883a 	mov	r21,r17
10004044:	95800044 	addi	r22,r18,1
10004048:	91000005 	stb	r4,0(r18)
1000404c:	9823883a 	mov	r17,r19
10004050:	003f0406 	br	10003c64 <__alt_data_end+0xf8003c64>
10004054:	880b883a 	mov	r5,r17
10004058:	8009883a 	mov	r4,r16
1000405c:	01800284 	movi	r6,10
10004060:	000f883a 	mov	r7,zero
10004064:	00066600 	call	10006660 <__multadd>
10004068:	1023883a 	mov	r17,r2
1000406c:	1027883a 	mov	r19,r2
10004070:	a825883a 	mov	r18,r21
10004074:	003f5506 	br	10003dcc <__alt_data_end+0xf8003dcc>
10004078:	8009883a 	mov	r4,r16
1000407c:	180b883a 	mov	r5,r3
10004080:	00066380 	call	10006638 <_Bfree>
10004084:	00800044 	movi	r2,1
10004088:	003f6f06 	br	10003e48 <__alt_data_end+0xf8003e48>
1000408c:	e009883a 	mov	r4,fp
10004090:	a00b883a 	mov	r5,r20
10004094:	0006f000 	call	10006f00 <__mcmp>
10004098:	103ecc0e 	bge	r2,zero,10003bcc <__alt_data_end+0xf8003bcc>
1000409c:	e00b883a 	mov	r5,fp
100040a0:	8009883a 	mov	r4,r16
100040a4:	01800284 	movi	r6,10
100040a8:	000f883a 	mov	r7,zero
100040ac:	00066600 	call	10006660 <__multadd>
100040b0:	1039883a 	mov	fp,r2
100040b4:	d8800617 	ldw	r2,24(sp)
100040b8:	d8c00c17 	ldw	r3,48(sp)
100040bc:	10bfffc4 	addi	r2,r2,-1
100040c0:	d8800615 	stw	r2,24(sp)
100040c4:	1801681e 	bne	r3,zero,10004668 <_dtoa_r+0x15d4>
100040c8:	d9800d17 	ldw	r6,52(sp)
100040cc:	d9800915 	stw	r6,36(sp)
100040d0:	003ebe06 	br	10003bcc <__alt_data_end+0xf8003bcc>
100040d4:	a0800417 	ldw	r2,16(r20)
100040d8:	10800104 	addi	r2,r2,4
100040dc:	1085883a 	add	r2,r2,r2
100040e0:	1085883a 	add	r2,r2,r2
100040e4:	a085883a 	add	r2,r20,r2
100040e8:	11000017 	ldw	r4,0(r2)
100040ec:	00068a80 	call	100068a8 <__hi0bits>
100040f0:	00c00804 	movi	r3,32
100040f4:	1885c83a 	sub	r2,r3,r2
100040f8:	003e9806 	br	10003b5c <__alt_data_end+0xf8003b5c>
100040fc:	d8800717 	ldw	r2,28(sp)
10004100:	003c1306 	br	10003150 <__alt_data_end+0xf8003150>
10004104:	00800084 	movi	r2,2
10004108:	18bdb11e 	bne	r3,r2,100037d0 <__alt_data_end+0xf80037d0>
1000410c:	d8000c15 	stw	zero,48(sp)
10004110:	003f8006 	br	10003f14 <__alt_data_end+0xf8003f14>
10004114:	d8c00417 	ldw	r3,16(sp)
10004118:	00800084 	movi	r2,2
1000411c:	10fead0e 	bge	r2,r3,10003bd4 <__alt_data_end+0xf8003bd4>
10004120:	383f921e 	bne	r7,zero,10003f6c <__alt_data_end+0xf8003f6c>
10004124:	a00b883a 	mov	r5,r20
10004128:	8009883a 	mov	r4,r16
1000412c:	01800144 	movi	r6,5
10004130:	00066600 	call	10006660 <__multadd>
10004134:	e009883a 	mov	r4,fp
10004138:	100b883a 	mov	r5,r2
1000413c:	1029883a 	mov	r20,r2
10004140:	0006f000 	call	10006f00 <__mcmp>
10004144:	00bf890e 	bge	zero,r2,10003f6c <__alt_data_end+0xf8003f6c>
10004148:	d9c00617 	ldw	r7,24(sp)
1000414c:	d9800717 	ldw	r6,28(sp)
10004150:	00800c44 	movi	r2,49
10004154:	39c00044 	addi	r7,r7,1
10004158:	35800044 	addi	r22,r6,1
1000415c:	30800005 	stb	r2,0(r6)
10004160:	d9c00615 	stw	r7,24(sp)
10004164:	003f8506 	br	10003f7c <__alt_data_end+0xf8003f7c>
10004168:	d9800617 	ldw	r6,24(sp)
1000416c:	d9c00717 	ldw	r7,28(sp)
10004170:	00800c44 	movi	r2,49
10004174:	31800044 	addi	r6,r6,1
10004178:	d9800615 	stw	r6,24(sp)
1000417c:	38800005 	stb	r2,0(r7)
10004180:	003ec706 	br	10003ca0 <__alt_data_end+0xf8003ca0>
10004184:	df000417 	ldw	fp,16(sp)
10004188:	dc000317 	ldw	r16,12(sp)
1000418c:	003d6d06 	br	10003744 <__alt_data_end+0xf8003744>
10004190:	8809883a 	mov	r4,r17
10004194:	000d0940 	call	1000d094 <__floatsidf>
10004198:	9809883a 	mov	r4,r19
1000419c:	a00b883a 	mov	r5,r20
100041a0:	100d883a 	mov	r6,r2
100041a4:	180f883a 	mov	r7,r3
100041a8:	000bf8c0 	call	1000bf8c <__muldf3>
100041ac:	1009883a 	mov	r4,r2
100041b0:	180b883a 	mov	r5,r3
100041b4:	000d883a 	mov	r6,zero
100041b8:	01d00734 	movhi	r7,16412
100041bc:	000ab2c0 	call	1000ab2c <__adddf3>
100041c0:	05bf3034 	movhi	r22,64704
100041c4:	1023883a 	mov	r17,r2
100041c8:	1daf883a 	add	r23,r3,r22
100041cc:	9809883a 	mov	r4,r19
100041d0:	a00b883a 	mov	r5,r20
100041d4:	000d883a 	mov	r6,zero
100041d8:	01d00534 	movhi	r7,16404
100041dc:	000c78c0 	call	1000c78c <__subdf3>
100041e0:	1009883a 	mov	r4,r2
100041e4:	180b883a 	mov	r5,r3
100041e8:	880d883a 	mov	r6,r17
100041ec:	b80f883a 	mov	r7,r23
100041f0:	1027883a 	mov	r19,r2
100041f4:	1829883a 	mov	r20,r3
100041f8:	000bdc80 	call	1000bdc8 <__gedf2>
100041fc:	00806d16 	blt	zero,r2,100043b4 <_dtoa_r+0x1320>
10004200:	b9e0003c 	xorhi	r7,r23,32768
10004204:	9809883a 	mov	r4,r19
10004208:	a00b883a 	mov	r5,r20
1000420c:	880d883a 	mov	r6,r17
10004210:	000bea00 	call	1000bea0 <__ledf2>
10004214:	103d7a0e 	bge	r2,zero,10003800 <__alt_data_end+0xf8003800>
10004218:	0029883a 	mov	r20,zero
1000421c:	0023883a 	mov	r17,zero
10004220:	003f5206 	br	10003f6c <__alt_data_end+0xf8003f6c>
10004224:	d9800a17 	ldw	r6,40(sp)
10004228:	e00b883a 	mov	r5,fp
1000422c:	8009883a 	mov	r4,r16
10004230:	0006c680 	call	10006c68 <__pow5mult>
10004234:	1039883a 	mov	fp,r2
10004238:	003e3606 	br	10003b14 <__alt_data_end+0xf8003b14>
1000423c:	d8000c15 	stw	zero,48(sp)
10004240:	003c5c06 	br	100033b4 <__alt_data_end+0xf80033b4>
10004244:	d9000a17 	ldw	r4,40(sp)
10004248:	d9800b17 	ldw	r6,44(sp)
1000424c:	dd000a15 	stw	r20,40(sp)
10004250:	a105c83a 	sub	r2,r20,r4
10004254:	308d883a 	add	r6,r6,r2
10004258:	d9800b15 	stw	r6,44(sp)
1000425c:	0029883a 	mov	r20,zero
10004260:	003e0106 	br	10003a68 <__alt_data_end+0xf8003a68>
10004264:	dcc00317 	ldw	r19,12(sp)
10004268:	9029883a 	mov	r20,r18
1000426c:	04400084 	movi	r17,2
10004270:	003c8606 	br	1000348c <__alt_data_end+0xf800348c>
10004274:	3023883a 	mov	r17,r6
10004278:	80001115 	stw	zero,68(r16)
1000427c:	000b883a 	mov	r5,zero
10004280:	003c6006 	br	10003404 <__alt_data_end+0xf8003404>
10004284:	04400044 	movi	r17,1
10004288:	dc400d15 	stw	r17,52(sp)
1000428c:	dc400915 	stw	r17,36(sp)
10004290:	dc402115 	stw	r17,132(sp)
10004294:	003ff806 	br	10004278 <__alt_data_end+0xf8004278>
10004298:	d8800617 	ldw	r2,24(sp)
1000429c:	00adc83a 	sub	r22,zero,r2
100042a0:	b000ac26 	beq	r22,zero,10004554 <_dtoa_r+0x14c0>
100042a4:	b08003cc 	andi	r2,r22,15
100042a8:	100490fa 	slli	r2,r2,3
100042ac:	00c40074 	movhi	r3,4097
100042b0:	18fe8d04 	addi	r3,r3,-1484
100042b4:	d9000317 	ldw	r4,12(sp)
100042b8:	1885883a 	add	r2,r3,r2
100042bc:	11800017 	ldw	r6,0(r2)
100042c0:	11c00117 	ldw	r7,4(r2)
100042c4:	b02dd13a 	srai	r22,r22,4
100042c8:	900b883a 	mov	r5,r18
100042cc:	000bf8c0 	call	1000bf8c <__muldf3>
100042d0:	1027883a 	mov	r19,r2
100042d4:	1829883a 	mov	r20,r3
100042d8:	b000ec26 	beq	r22,zero,1000468c <_dtoa_r+0x15f8>
100042dc:	05c40074 	movhi	r23,4097
100042e0:	bdfe8304 	addi	r23,r23,-1524
100042e4:	04400084 	movi	r17,2
100042e8:	b180004c 	andi	r6,r22,1
100042ec:	1009883a 	mov	r4,r2
100042f0:	b02dd07a 	srai	r22,r22,1
100042f4:	180b883a 	mov	r5,r3
100042f8:	30000426 	beq	r6,zero,1000430c <_dtoa_r+0x1278>
100042fc:	b9800017 	ldw	r6,0(r23)
10004300:	b9c00117 	ldw	r7,4(r23)
10004304:	8c400044 	addi	r17,r17,1
10004308:	000bf8c0 	call	1000bf8c <__muldf3>
1000430c:	bdc00204 	addi	r23,r23,8
10004310:	b03ff51e 	bne	r22,zero,100042e8 <__alt_data_end+0xf80042e8>
10004314:	1027883a 	mov	r19,r2
10004318:	1829883a 	mov	r20,r3
1000431c:	003c7406 	br	100034f0 <__alt_data_end+0xf80034f0>
10004320:	d9800617 	ldw	r6,24(sp)
10004324:	d9c00717 	ldw	r7,28(sp)
10004328:	00c00c04 	movi	r3,48
1000432c:	31800044 	addi	r6,r6,1
10004330:	38c00005 	stb	r3,0(r7)
10004334:	02400c44 	movi	r9,49
10004338:	d9800615 	stw	r6,24(sp)
1000433c:	12400005 	stb	r9,0(r2)
10004340:	003d0006 	br	10003744 <__alt_data_end+0xf8003744>
10004344:	89400117 	ldw	r5,4(r17)
10004348:	8009883a 	mov	r4,r16
1000434c:	00065900 	call	10006590 <_Balloc>
10004350:	89800417 	ldw	r6,16(r17)
10004354:	11000304 	addi	r4,r2,12
10004358:	89400304 	addi	r5,r17,12
1000435c:	31800084 	addi	r6,r6,2
10004360:	318d883a 	add	r6,r6,r6
10004364:	318d883a 	add	r6,r6,r6
10004368:	1025883a 	mov	r18,r2
1000436c:	00062340 	call	10006234 <memcpy>
10004370:	8009883a 	mov	r4,r16
10004374:	900b883a 	mov	r5,r18
10004378:	01800044 	movi	r6,1
1000437c:	0006db00 	call	10006db0 <__lshift>
10004380:	1027883a 	mov	r19,r2
10004384:	003e8806 	br	10003da8 <__alt_data_end+0xf8003da8>
10004388:	00800e44 	movi	r2,57
1000438c:	b8bf2b26 	beq	r23,r2,1000403c <__alt_data_end+0xf800403c>
10004390:	ba400044 	addi	r9,r23,1
10004394:	882b883a 	mov	r21,r17
10004398:	95800044 	addi	r22,r18,1
1000439c:	92400005 	stb	r9,0(r18)
100043a0:	9823883a 	mov	r17,r19
100043a4:	003e3e06 	br	10003ca0 <__alt_data_end+0xf8003ca0>
100043a8:	882b883a 	mov	r21,r17
100043ac:	9823883a 	mov	r17,r19
100043b0:	003e2206 	br	10003c3c <__alt_data_end+0xf8003c3c>
100043b4:	0029883a 	mov	r20,zero
100043b8:	0023883a 	mov	r17,zero
100043bc:	003f6206 	br	10004148 <__alt_data_end+0xf8004148>
100043c0:	59bfffc4 	addi	r6,r11,-1
100043c4:	300490fa 	slli	r2,r6,3
100043c8:	00c40074 	movhi	r3,4097
100043cc:	18fe8d04 	addi	r3,r3,-1484
100043d0:	b80f883a 	mov	r7,r23
100043d4:	1885883a 	add	r2,r3,r2
100043d8:	11000017 	ldw	r4,0(r2)
100043dc:	11400117 	ldw	r5,4(r2)
100043e0:	d8800717 	ldw	r2,28(sp)
100043e4:	d9801015 	stw	r6,64(sp)
100043e8:	880d883a 	mov	r6,r17
100043ec:	dac01615 	stw	r11,88(sp)
100043f0:	15800044 	addi	r22,r2,1
100043f4:	000bf8c0 	call	1000bf8c <__muldf3>
100043f8:	a00b883a 	mov	r5,r20
100043fc:	9809883a 	mov	r4,r19
10004400:	d8c01215 	stw	r3,72(sp)
10004404:	d8801115 	stw	r2,68(sp)
10004408:	000d0140 	call	1000d014 <__fixdfsi>
1000440c:	1009883a 	mov	r4,r2
10004410:	1023883a 	mov	r17,r2
10004414:	000d0940 	call	1000d094 <__floatsidf>
10004418:	9809883a 	mov	r4,r19
1000441c:	a00b883a 	mov	r5,r20
10004420:	100d883a 	mov	r6,r2
10004424:	180f883a 	mov	r7,r3
10004428:	000c78c0 	call	1000c78c <__subdf3>
1000442c:	1815883a 	mov	r10,r3
10004430:	d8c00717 	ldw	r3,28(sp)
10004434:	8c400c04 	addi	r17,r17,48
10004438:	102f883a 	mov	r23,r2
1000443c:	1c400005 	stb	r17,0(r3)
10004440:	dac01617 	ldw	r11,88(sp)
10004444:	00800044 	movi	r2,1
10004448:	58802426 	beq	r11,r2,100044dc <_dtoa_r+0x1448>
1000444c:	d9800717 	ldw	r6,28(sp)
10004450:	dc001415 	stw	r16,80(sp)
10004454:	b805883a 	mov	r2,r23
10004458:	32d7883a 	add	r11,r6,r11
1000445c:	b027883a 	mov	r19,r22
10004460:	5821883a 	mov	r16,r11
10004464:	5007883a 	mov	r3,r10
10004468:	902f883a 	mov	r23,r18
1000446c:	000d883a 	mov	r6,zero
10004470:	01d00934 	movhi	r7,16420
10004474:	1009883a 	mov	r4,r2
10004478:	180b883a 	mov	r5,r3
1000447c:	000bf8c0 	call	1000bf8c <__muldf3>
10004480:	180b883a 	mov	r5,r3
10004484:	1009883a 	mov	r4,r2
10004488:	1829883a 	mov	r20,r3
1000448c:	1025883a 	mov	r18,r2
10004490:	000d0140 	call	1000d014 <__fixdfsi>
10004494:	1009883a 	mov	r4,r2
10004498:	1023883a 	mov	r17,r2
1000449c:	000d0940 	call	1000d094 <__floatsidf>
100044a0:	9009883a 	mov	r4,r18
100044a4:	a00b883a 	mov	r5,r20
100044a8:	100d883a 	mov	r6,r2
100044ac:	180f883a 	mov	r7,r3
100044b0:	8c400c04 	addi	r17,r17,48
100044b4:	000c78c0 	call	1000c78c <__subdf3>
100044b8:	9cc00044 	addi	r19,r19,1
100044bc:	9c7fffc5 	stb	r17,-1(r19)
100044c0:	9c3fea1e 	bne	r19,r16,1000446c <__alt_data_end+0xf800446c>
100044c4:	d9c01017 	ldw	r7,64(sp)
100044c8:	dc001417 	ldw	r16,80(sp)
100044cc:	b825883a 	mov	r18,r23
100044d0:	1815883a 	mov	r10,r3
100044d4:	102f883a 	mov	r23,r2
100044d8:	b1ed883a 	add	r22,r22,r7
100044dc:	d9001117 	ldw	r4,68(sp)
100044e0:	d9401217 	ldw	r5,72(sp)
100044e4:	000d883a 	mov	r6,zero
100044e8:	01cff834 	movhi	r7,16352
100044ec:	da801615 	stw	r10,88(sp)
100044f0:	000ab2c0 	call	1000ab2c <__adddf3>
100044f4:	da801617 	ldw	r10,88(sp)
100044f8:	1009883a 	mov	r4,r2
100044fc:	180b883a 	mov	r5,r3
10004500:	500f883a 	mov	r7,r10
10004504:	b80d883a 	mov	r6,r23
10004508:	000bea00 	call	1000bea0 <__ledf2>
1000450c:	da801617 	ldw	r10,88(sp)
10004510:	1000330e 	bge	r2,zero,100045e0 <_dtoa_r+0x154c>
10004514:	d9001317 	ldw	r4,76(sp)
10004518:	b53fffc3 	ldbu	r20,-1(r22)
1000451c:	d9000615 	stw	r4,24(sp)
10004520:	003d3706 	br	10003a00 <__alt_data_end+0xf8003a00>
10004524:	d8800817 	ldw	r2,32(sp)
10004528:	11e7c83a 	sub	r19,r2,r7
1000452c:	0005883a 	mov	r2,zero
10004530:	003d5106 	br	10003a78 <__alt_data_end+0xf8003a78>
10004534:	00800044 	movi	r2,1
10004538:	003dbd06 	br	10003c30 <__alt_data_end+0xf8003c30>
1000453c:	d8800217 	ldw	r2,8(sp)
10004540:	00c00d84 	movi	r3,54
10004544:	dd000a17 	ldw	r20,40(sp)
10004548:	1885c83a 	sub	r2,r3,r2
1000454c:	dcc00817 	ldw	r19,32(sp)
10004550:	003d4906 	br	10003a78 <__alt_data_end+0xf8003a78>
10004554:	dcc00317 	ldw	r19,12(sp)
10004558:	9029883a 	mov	r20,r18
1000455c:	04400084 	movi	r17,2
10004560:	003be306 	br	100034f0 <__alt_data_end+0xf80034f0>
10004564:	d9000917 	ldw	r4,36(sp)
10004568:	203f0926 	beq	r4,zero,10004190 <__alt_data_end+0xf8004190>
1000456c:	d9800d17 	ldw	r6,52(sp)
10004570:	01bca30e 	bge	zero,r6,10003800 <__alt_data_end+0xf8003800>
10004574:	a00b883a 	mov	r5,r20
10004578:	9809883a 	mov	r4,r19
1000457c:	000d883a 	mov	r6,zero
10004580:	01d00934 	movhi	r7,16420
10004584:	000bf8c0 	call	1000bf8c <__muldf3>
10004588:	89000044 	addi	r4,r17,1
1000458c:	1027883a 	mov	r19,r2
10004590:	1829883a 	mov	r20,r3
10004594:	000d0940 	call	1000d094 <__floatsidf>
10004598:	9809883a 	mov	r4,r19
1000459c:	a00b883a 	mov	r5,r20
100045a0:	100d883a 	mov	r6,r2
100045a4:	180f883a 	mov	r7,r3
100045a8:	000bf8c0 	call	1000bf8c <__muldf3>
100045ac:	01d00734 	movhi	r7,16412
100045b0:	1009883a 	mov	r4,r2
100045b4:	180b883a 	mov	r5,r3
100045b8:	000d883a 	mov	r6,zero
100045bc:	000ab2c0 	call	1000ab2c <__adddf3>
100045c0:	d9c00617 	ldw	r7,24(sp)
100045c4:	05bf3034 	movhi	r22,64704
100045c8:	1023883a 	mov	r17,r2
100045cc:	39ffffc4 	addi	r7,r7,-1
100045d0:	d9c01315 	stw	r7,76(sp)
100045d4:	1daf883a 	add	r23,r3,r22
100045d8:	dac00d17 	ldw	r11,52(sp)
100045dc:	003be006 	br	10003560 <__alt_data_end+0xf8003560>
100045e0:	d9801117 	ldw	r6,68(sp)
100045e4:	d9c01217 	ldw	r7,72(sp)
100045e8:	0009883a 	mov	r4,zero
100045ec:	014ff834 	movhi	r5,16352
100045f0:	da801615 	stw	r10,88(sp)
100045f4:	000c78c0 	call	1000c78c <__subdf3>
100045f8:	da801617 	ldw	r10,88(sp)
100045fc:	1009883a 	mov	r4,r2
10004600:	180b883a 	mov	r5,r3
10004604:	b80d883a 	mov	r6,r23
10004608:	500f883a 	mov	r7,r10
1000460c:	000bdc80 	call	1000bdc8 <__gedf2>
10004610:	00bc7b0e 	bge	zero,r2,10003800 <__alt_data_end+0xf8003800>
10004614:	01000c04 	movi	r4,48
10004618:	00000106 	br	10004620 <_dtoa_r+0x158c>
1000461c:	102d883a 	mov	r22,r2
10004620:	b0bfffc4 	addi	r2,r22,-1
10004624:	10c00007 	ldb	r3,0(r2)
10004628:	193ffc26 	beq	r3,r4,1000461c <__alt_data_end+0xf800461c>
1000462c:	d9001317 	ldw	r4,76(sp)
10004630:	d9000615 	stw	r4,24(sp)
10004634:	003c4306 	br	10003744 <__alt_data_end+0xf8003744>
10004638:	d8c01317 	ldw	r3,76(sp)
1000463c:	dc001117 	ldw	r16,68(sp)
10004640:	d8c00615 	stw	r3,24(sp)
10004644:	003cee06 	br	10003a00 <__alt_data_end+0xf8003a00>
10004648:	dd401217 	ldw	r21,72(sp)
1000464c:	dc001117 	ldw	r16,68(sp)
10004650:	dc801417 	ldw	r18,80(sp)
10004654:	003c6a06 	br	10003800 <__alt_data_end+0xf8003800>
10004658:	103e6f1e 	bne	r2,zero,10004018 <__alt_data_end+0xf8004018>
1000465c:	b880004c 	andi	r2,r23,1
10004660:	103e6d26 	beq	r2,zero,10004018 <__alt_data_end+0xf8004018>
10004664:	003e6906 	br	1000400c <__alt_data_end+0xf800400c>
10004668:	8009883a 	mov	r4,r16
1000466c:	880b883a 	mov	r5,r17
10004670:	01800284 	movi	r6,10
10004674:	000f883a 	mov	r7,zero
10004678:	00066600 	call	10006660 <__multadd>
1000467c:	d9000d17 	ldw	r4,52(sp)
10004680:	1023883a 	mov	r17,r2
10004684:	d9000915 	stw	r4,36(sp)
10004688:	003d5006 	br	10003bcc <__alt_data_end+0xf8003bcc>
1000468c:	04400084 	movi	r17,2
10004690:	003b9706 	br	100034f0 <__alt_data_end+0xf80034f0>
10004694:	d8801317 	ldw	r2,76(sp)
10004698:	d8800615 	stw	r2,24(sp)
1000469c:	003cd806 	br	10003a00 <__alt_data_end+0xf8003a00>
100046a0:	d8801317 	ldw	r2,76(sp)
100046a4:	d8800615 	stw	r2,24(sp)
100046a8:	003c2606 	br	10003744 <__alt_data_end+0xf8003744>
100046ac:	04c00044 	movi	r19,1
100046b0:	003b3506 	br	10003388 <__alt_data_end+0xf8003388>
100046b4:	3023883a 	mov	r17,r6
100046b8:	000b883a 	mov	r5,zero
100046bc:	003b5106 	br	10003404 <__alt_data_end+0xf8003404>
100046c0:	20fd3426 	beq	r4,r3,10003b94 <__alt_data_end+0xf8003b94>
100046c4:	00c00f04 	movi	r3,60
100046c8:	1885c83a 	sub	r2,r3,r2
100046cc:	003da106 	br	10003d54 <__alt_data_end+0xf8003d54>

100046d0 <_fflush_r>:
100046d0:	defffb04 	addi	sp,sp,-20
100046d4:	dcc00315 	stw	r19,12(sp)
100046d8:	dc400115 	stw	r17,4(sp)
100046dc:	dfc00415 	stw	ra,16(sp)
100046e0:	dc800215 	stw	r18,8(sp)
100046e4:	dc000015 	stw	r16,0(sp)
100046e8:	2027883a 	mov	r19,r4
100046ec:	2823883a 	mov	r17,r5
100046f0:	20000226 	beq	r4,zero,100046fc <_fflush_r+0x2c>
100046f4:	20800e17 	ldw	r2,56(r4)
100046f8:	10005826 	beq	r2,zero,1000485c <_fflush_r+0x18c>
100046fc:	8880030b 	ldhu	r2,12(r17)
10004700:	10ffffcc 	andi	r3,r2,65535
10004704:	18e0001c 	xori	r3,r3,32768
10004708:	18e00004 	addi	r3,r3,-32768
1000470c:	18002b26 	beq	r3,zero,100047bc <_fflush_r+0xec>
10004710:	10c0020c 	andi	r3,r2,8
10004714:	1800311e 	bne	r3,zero,100047dc <_fflush_r+0x10c>
10004718:	88c00117 	ldw	r3,4(r17)
1000471c:	10820014 	ori	r2,r2,2048
10004720:	8880030d 	sth	r2,12(r17)
10004724:	00c05c0e 	bge	zero,r3,10004898 <_fflush_r+0x1c8>
10004728:	88c00a17 	ldw	r3,40(r17)
1000472c:	18002326 	beq	r3,zero,100047bc <_fflush_r+0xec>
10004730:	9c000017 	ldw	r16,0(r19)
10004734:	1104000c 	andi	r4,r2,4096
10004738:	98000015 	stw	zero,0(r19)
1000473c:	20004b26 	beq	r4,zero,1000486c <_fflush_r+0x19c>
10004740:	89801417 	ldw	r6,80(r17)
10004744:	1080010c 	andi	r2,r2,4
10004748:	10000626 	beq	r2,zero,10004764 <_fflush_r+0x94>
1000474c:	89000117 	ldw	r4,4(r17)
10004750:	88800c17 	ldw	r2,48(r17)
10004754:	310dc83a 	sub	r6,r6,r4
10004758:	10000226 	beq	r2,zero,10004764 <_fflush_r+0x94>
1000475c:	88800f17 	ldw	r2,60(r17)
10004760:	308dc83a 	sub	r6,r6,r2
10004764:	89400717 	ldw	r5,28(r17)
10004768:	9809883a 	mov	r4,r19
1000476c:	000f883a 	mov	r7,zero
10004770:	183ee83a 	callr	r3
10004774:	00ffffc4 	movi	r3,-1
10004778:	10c04a26 	beq	r2,r3,100048a4 <_fflush_r+0x1d4>
1000477c:	88c0030b 	ldhu	r3,12(r17)
10004780:	89000417 	ldw	r4,16(r17)
10004784:	88000115 	stw	zero,4(r17)
10004788:	197dffcc 	andi	r5,r3,63487
1000478c:	8940030d 	sth	r5,12(r17)
10004790:	89000015 	stw	r4,0(r17)
10004794:	18c4000c 	andi	r3,r3,4096
10004798:	1800581e 	bne	r3,zero,100048fc <_fflush_r+0x22c>
1000479c:	89400c17 	ldw	r5,48(r17)
100047a0:	9c000015 	stw	r16,0(r19)
100047a4:	28000526 	beq	r5,zero,100047bc <_fflush_r+0xec>
100047a8:	88801004 	addi	r2,r17,64
100047ac:	28800226 	beq	r5,r2,100047b8 <_fflush_r+0xe8>
100047b0:	9809883a 	mov	r4,r19
100047b4:	0004e240 	call	10004e24 <_free_r>
100047b8:	88000c15 	stw	zero,48(r17)
100047bc:	0005883a 	mov	r2,zero
100047c0:	dfc00417 	ldw	ra,16(sp)
100047c4:	dcc00317 	ldw	r19,12(sp)
100047c8:	dc800217 	ldw	r18,8(sp)
100047cc:	dc400117 	ldw	r17,4(sp)
100047d0:	dc000017 	ldw	r16,0(sp)
100047d4:	dec00504 	addi	sp,sp,20
100047d8:	f800283a 	ret
100047dc:	8c800417 	ldw	r18,16(r17)
100047e0:	903ff626 	beq	r18,zero,100047bc <__alt_data_end+0xf80047bc>
100047e4:	8c000017 	ldw	r16,0(r17)
100047e8:	108000cc 	andi	r2,r2,3
100047ec:	8c800015 	stw	r18,0(r17)
100047f0:	84a1c83a 	sub	r16,r16,r18
100047f4:	10001b26 	beq	r2,zero,10004864 <_fflush_r+0x194>
100047f8:	0005883a 	mov	r2,zero
100047fc:	88800215 	stw	r2,8(r17)
10004800:	04000316 	blt	zero,r16,10004810 <_fflush_r+0x140>
10004804:	003fed06 	br	100047bc <__alt_data_end+0xf80047bc>
10004808:	90a5883a 	add	r18,r18,r2
1000480c:	043feb0e 	bge	zero,r16,100047bc <__alt_data_end+0xf80047bc>
10004810:	88800917 	ldw	r2,36(r17)
10004814:	89400717 	ldw	r5,28(r17)
10004818:	800f883a 	mov	r7,r16
1000481c:	900d883a 	mov	r6,r18
10004820:	9809883a 	mov	r4,r19
10004824:	103ee83a 	callr	r2
10004828:	80a1c83a 	sub	r16,r16,r2
1000482c:	00bff616 	blt	zero,r2,10004808 <__alt_data_end+0xf8004808>
10004830:	88c0030b 	ldhu	r3,12(r17)
10004834:	00bfffc4 	movi	r2,-1
10004838:	18c01014 	ori	r3,r3,64
1000483c:	88c0030d 	sth	r3,12(r17)
10004840:	dfc00417 	ldw	ra,16(sp)
10004844:	dcc00317 	ldw	r19,12(sp)
10004848:	dc800217 	ldw	r18,8(sp)
1000484c:	dc400117 	ldw	r17,4(sp)
10004850:	dc000017 	ldw	r16,0(sp)
10004854:	dec00504 	addi	sp,sp,20
10004858:	f800283a 	ret
1000485c:	00049f00 	call	100049f0 <__sinit>
10004860:	003fa606 	br	100046fc <__alt_data_end+0xf80046fc>
10004864:	88800517 	ldw	r2,20(r17)
10004868:	003fe406 	br	100047fc <__alt_data_end+0xf80047fc>
1000486c:	89400717 	ldw	r5,28(r17)
10004870:	000d883a 	mov	r6,zero
10004874:	9809883a 	mov	r4,r19
10004878:	01c00044 	movi	r7,1
1000487c:	183ee83a 	callr	r3
10004880:	100d883a 	mov	r6,r2
10004884:	00bfffc4 	movi	r2,-1
10004888:	30801326 	beq	r6,r2,100048d8 <_fflush_r+0x208>
1000488c:	8880030b 	ldhu	r2,12(r17)
10004890:	88c00a17 	ldw	r3,40(r17)
10004894:	003fab06 	br	10004744 <__alt_data_end+0xf8004744>
10004898:	88c00f17 	ldw	r3,60(r17)
1000489c:	00ffa216 	blt	zero,r3,10004728 <__alt_data_end+0xf8004728>
100048a0:	003fc606 	br	100047bc <__alt_data_end+0xf80047bc>
100048a4:	98c00017 	ldw	r3,0(r19)
100048a8:	183fb426 	beq	r3,zero,1000477c <__alt_data_end+0xf800477c>
100048ac:	01000744 	movi	r4,29
100048b0:	19000226 	beq	r3,r4,100048bc <_fflush_r+0x1ec>
100048b4:	01000584 	movi	r4,22
100048b8:	1900121e 	bne	r3,r4,10004904 <_fflush_r+0x234>
100048bc:	88c0030b 	ldhu	r3,12(r17)
100048c0:	88800417 	ldw	r2,16(r17)
100048c4:	88000115 	stw	zero,4(r17)
100048c8:	18fdffcc 	andi	r3,r3,63487
100048cc:	88c0030d 	sth	r3,12(r17)
100048d0:	88800015 	stw	r2,0(r17)
100048d4:	003fb106 	br	1000479c <__alt_data_end+0xf800479c>
100048d8:	98800017 	ldw	r2,0(r19)
100048dc:	103feb26 	beq	r2,zero,1000488c <__alt_data_end+0xf800488c>
100048e0:	00c00744 	movi	r3,29
100048e4:	10c00226 	beq	r2,r3,100048f0 <_fflush_r+0x220>
100048e8:	00c00584 	movi	r3,22
100048ec:	10ffd01e 	bne	r2,r3,10004830 <__alt_data_end+0xf8004830>
100048f0:	9c000015 	stw	r16,0(r19)
100048f4:	0005883a 	mov	r2,zero
100048f8:	003fb106 	br	100047c0 <__alt_data_end+0xf80047c0>
100048fc:	88801415 	stw	r2,80(r17)
10004900:	003fa606 	br	1000479c <__alt_data_end+0xf800479c>
10004904:	88c0030b 	ldhu	r3,12(r17)
10004908:	18c01014 	ori	r3,r3,64
1000490c:	88c0030d 	sth	r3,12(r17)
10004910:	003fab06 	br	100047c0 <__alt_data_end+0xf80047c0>

10004914 <fflush>:
10004914:	200b883a 	mov	r5,r4
10004918:	20000426 	beq	r4,zero,1000492c <fflush+0x18>
1000491c:	00840074 	movhi	r2,4097
10004920:	1085c204 	addi	r2,r2,5896
10004924:	11000017 	ldw	r4,0(r2)
10004928:	00046d01 	jmpi	100046d0 <_fflush_r>
1000492c:	00840074 	movhi	r2,4097
10004930:	1085c104 	addi	r2,r2,5892
10004934:	11000017 	ldw	r4,0(r2)
10004938:	01440034 	movhi	r5,4096
1000493c:	2951b404 	addi	r5,r5,18128
10004940:	00056481 	jmpi	10005648 <_fwalk_reent>

10004944 <__fp_lock>:
10004944:	0005883a 	mov	r2,zero
10004948:	f800283a 	ret

1000494c <__fp_unlock>:
1000494c:	0005883a 	mov	r2,zero
10004950:	f800283a 	ret

10004954 <_cleanup_r>:
10004954:	01440074 	movhi	r5,4097
10004958:	29658604 	addi	r5,r5,-27112
1000495c:	00055a01 	jmpi	100055a0 <_fwalk>

10004960 <__sfmoreglue>:
10004960:	defffc04 	addi	sp,sp,-16
10004964:	dc800215 	stw	r18,8(sp)
10004968:	2825883a 	mov	r18,r5
1000496c:	dc000015 	stw	r16,0(sp)
10004970:	01401a04 	movi	r5,104
10004974:	2021883a 	mov	r16,r4
10004978:	9009883a 	mov	r4,r18
1000497c:	dfc00315 	stw	ra,12(sp)
10004980:	dc400115 	stw	r17,4(sp)
10004984:	000ab040 	call	1000ab04 <__mulsi3>
10004988:	8009883a 	mov	r4,r16
1000498c:	11400304 	addi	r5,r2,12
10004990:	1023883a 	mov	r17,r2
10004994:	00059880 	call	10005988 <_malloc_r>
10004998:	1021883a 	mov	r16,r2
1000499c:	10000726 	beq	r2,zero,100049bc <__sfmoreglue+0x5c>
100049a0:	11000304 	addi	r4,r2,12
100049a4:	10000015 	stw	zero,0(r2)
100049a8:	14800115 	stw	r18,4(r2)
100049ac:	11000215 	stw	r4,8(r2)
100049b0:	000b883a 	mov	r5,zero
100049b4:	880d883a 	mov	r6,r17
100049b8:	000647c0 	call	1000647c <memset>
100049bc:	8005883a 	mov	r2,r16
100049c0:	dfc00317 	ldw	ra,12(sp)
100049c4:	dc800217 	ldw	r18,8(sp)
100049c8:	dc400117 	ldw	r17,4(sp)
100049cc:	dc000017 	ldw	r16,0(sp)
100049d0:	dec00404 	addi	sp,sp,16
100049d4:	f800283a 	ret

100049d8 <_cleanup>:
100049d8:	00840074 	movhi	r2,4097
100049dc:	1085c104 	addi	r2,r2,5892
100049e0:	11000017 	ldw	r4,0(r2)
100049e4:	01440074 	movhi	r5,4097
100049e8:	29658604 	addi	r5,r5,-27112
100049ec:	00055a01 	jmpi	100055a0 <_fwalk>

100049f0 <__sinit>:
100049f0:	20800e17 	ldw	r2,56(r4)
100049f4:	defff704 	addi	sp,sp,-36
100049f8:	dc800215 	stw	r18,8(sp)
100049fc:	dfc00815 	stw	ra,32(sp)
10004a00:	ddc00715 	stw	r23,28(sp)
10004a04:	dd800615 	stw	r22,24(sp)
10004a08:	dd400515 	stw	r21,20(sp)
10004a0c:	dd000415 	stw	r20,16(sp)
10004a10:	dcc00315 	stw	r19,12(sp)
10004a14:	dc400115 	stw	r17,4(sp)
10004a18:	dc000015 	stw	r16,0(sp)
10004a1c:	2025883a 	mov	r18,r4
10004a20:	10004f1e 	bne	r2,zero,10004b60 <__sinit+0x170>
10004a24:	24000117 	ldw	r16,4(r4)
10004a28:	00c40034 	movhi	r3,4096
10004a2c:	18d25504 	addi	r3,r3,18772
10004a30:	20c00f15 	stw	r3,60(r4)
10004a34:	2080bb04 	addi	r2,r4,748
10004a38:	00c000c4 	movi	r3,3
10004a3c:	05c00044 	movi	r23,1
10004a40:	20c0b915 	stw	r3,740(r4)
10004a44:	2080ba15 	stw	r2,744(r4)
10004a48:	25c00e15 	stw	r23,56(r4)
10004a4c:	2000b815 	stw	zero,736(r4)
10004a50:	00800104 	movi	r2,4
10004a54:	81001704 	addi	r4,r16,92
10004a58:	000b883a 	mov	r5,zero
10004a5c:	01800204 	movi	r6,8
10004a60:	80000015 	stw	zero,0(r16)
10004a64:	80000115 	stw	zero,4(r16)
10004a68:	80000215 	stw	zero,8(r16)
10004a6c:	8080030d 	sth	r2,12(r16)
10004a70:	80001915 	stw	zero,100(r16)
10004a74:	8000038d 	sth	zero,14(r16)
10004a78:	80000415 	stw	zero,16(r16)
10004a7c:	80000515 	stw	zero,20(r16)
10004a80:	80000615 	stw	zero,24(r16)
10004a84:	000647c0 	call	1000647c <memset>
10004a88:	94400217 	ldw	r17,8(r18)
10004a8c:	05840034 	movhi	r22,4096
10004a90:	b59efa04 	addi	r22,r22,31720
10004a94:	05440034 	movhi	r21,4096
10004a98:	ad5f1104 	addi	r21,r21,31812
10004a9c:	05040034 	movhi	r20,4096
10004aa0:	a51f3004 	addi	r20,r20,31936
10004aa4:	04c40034 	movhi	r19,4096
10004aa8:	9cdf4704 	addi	r19,r19,32028
10004aac:	84000715 	stw	r16,28(r16)
10004ab0:	85800815 	stw	r22,32(r16)
10004ab4:	85400915 	stw	r21,36(r16)
10004ab8:	85000a15 	stw	r20,40(r16)
10004abc:	84c00b15 	stw	r19,44(r16)
10004ac0:	00800284 	movi	r2,10
10004ac4:	89001704 	addi	r4,r17,92
10004ac8:	000b883a 	mov	r5,zero
10004acc:	01800204 	movi	r6,8
10004ad0:	88000015 	stw	zero,0(r17)
10004ad4:	88000115 	stw	zero,4(r17)
10004ad8:	88000215 	stw	zero,8(r17)
10004adc:	8880030d 	sth	r2,12(r17)
10004ae0:	88001915 	stw	zero,100(r17)
10004ae4:	8dc0038d 	sth	r23,14(r17)
10004ae8:	88000415 	stw	zero,16(r17)
10004aec:	88000515 	stw	zero,20(r17)
10004af0:	88000615 	stw	zero,24(r17)
10004af4:	000647c0 	call	1000647c <memset>
10004af8:	94000317 	ldw	r16,12(r18)
10004afc:	00800484 	movi	r2,18
10004b00:	8c400715 	stw	r17,28(r17)
10004b04:	8d800815 	stw	r22,32(r17)
10004b08:	8d400915 	stw	r21,36(r17)
10004b0c:	8d000a15 	stw	r20,40(r17)
10004b10:	8cc00b15 	stw	r19,44(r17)
10004b14:	8080030d 	sth	r2,12(r16)
10004b18:	00800084 	movi	r2,2
10004b1c:	80000015 	stw	zero,0(r16)
10004b20:	80000115 	stw	zero,4(r16)
10004b24:	80000215 	stw	zero,8(r16)
10004b28:	80001915 	stw	zero,100(r16)
10004b2c:	8080038d 	sth	r2,14(r16)
10004b30:	80000415 	stw	zero,16(r16)
10004b34:	80000515 	stw	zero,20(r16)
10004b38:	80000615 	stw	zero,24(r16)
10004b3c:	81001704 	addi	r4,r16,92
10004b40:	000b883a 	mov	r5,zero
10004b44:	01800204 	movi	r6,8
10004b48:	000647c0 	call	1000647c <memset>
10004b4c:	84000715 	stw	r16,28(r16)
10004b50:	85800815 	stw	r22,32(r16)
10004b54:	85400915 	stw	r21,36(r16)
10004b58:	85000a15 	stw	r20,40(r16)
10004b5c:	84c00b15 	stw	r19,44(r16)
10004b60:	dfc00817 	ldw	ra,32(sp)
10004b64:	ddc00717 	ldw	r23,28(sp)
10004b68:	dd800617 	ldw	r22,24(sp)
10004b6c:	dd400517 	ldw	r21,20(sp)
10004b70:	dd000417 	ldw	r20,16(sp)
10004b74:	dcc00317 	ldw	r19,12(sp)
10004b78:	dc800217 	ldw	r18,8(sp)
10004b7c:	dc400117 	ldw	r17,4(sp)
10004b80:	dc000017 	ldw	r16,0(sp)
10004b84:	dec00904 	addi	sp,sp,36
10004b88:	f800283a 	ret

10004b8c <__sfp>:
10004b8c:	defffb04 	addi	sp,sp,-20
10004b90:	00840074 	movhi	r2,4097
10004b94:	1085c104 	addi	r2,r2,5892
10004b98:	dc800215 	stw	r18,8(sp)
10004b9c:	14800017 	ldw	r18,0(r2)
10004ba0:	dcc00315 	stw	r19,12(sp)
10004ba4:	dfc00415 	stw	ra,16(sp)
10004ba8:	90800e17 	ldw	r2,56(r18)
10004bac:	dc400115 	stw	r17,4(sp)
10004bb0:	dc000015 	stw	r16,0(sp)
10004bb4:	2027883a 	mov	r19,r4
10004bb8:	10002f26 	beq	r2,zero,10004c78 <__sfp+0xec>
10004bbc:	9480b804 	addi	r18,r18,736
10004bc0:	047fffc4 	movi	r17,-1
10004bc4:	91400117 	ldw	r5,4(r18)
10004bc8:	94000217 	ldw	r16,8(r18)
10004bcc:	297fffc4 	addi	r5,r5,-1
10004bd0:	28000a16 	blt	r5,zero,10004bfc <__sfp+0x70>
10004bd4:	8080030f 	ldh	r2,12(r16)
10004bd8:	10000c26 	beq	r2,zero,10004c0c <__sfp+0x80>
10004bdc:	80c01d04 	addi	r3,r16,116
10004be0:	00000206 	br	10004bec <__sfp+0x60>
10004be4:	18bfe60f 	ldh	r2,-104(r3)
10004be8:	10000826 	beq	r2,zero,10004c0c <__sfp+0x80>
10004bec:	297fffc4 	addi	r5,r5,-1
10004bf0:	1c3ffd04 	addi	r16,r3,-12
10004bf4:	18c01a04 	addi	r3,r3,104
10004bf8:	2c7ffa1e 	bne	r5,r17,10004be4 <__alt_data_end+0xf8004be4>
10004bfc:	90800017 	ldw	r2,0(r18)
10004c00:	10002026 	beq	r2,zero,10004c84 <__sfp+0xf8>
10004c04:	1025883a 	mov	r18,r2
10004c08:	003fee06 	br	10004bc4 <__alt_data_end+0xf8004bc4>
10004c0c:	00bfffc4 	movi	r2,-1
10004c10:	8080038d 	sth	r2,14(r16)
10004c14:	00800044 	movi	r2,1
10004c18:	8080030d 	sth	r2,12(r16)
10004c1c:	80001915 	stw	zero,100(r16)
10004c20:	80000015 	stw	zero,0(r16)
10004c24:	80000215 	stw	zero,8(r16)
10004c28:	80000115 	stw	zero,4(r16)
10004c2c:	80000415 	stw	zero,16(r16)
10004c30:	80000515 	stw	zero,20(r16)
10004c34:	80000615 	stw	zero,24(r16)
10004c38:	81001704 	addi	r4,r16,92
10004c3c:	000b883a 	mov	r5,zero
10004c40:	01800204 	movi	r6,8
10004c44:	000647c0 	call	1000647c <memset>
10004c48:	8005883a 	mov	r2,r16
10004c4c:	80000c15 	stw	zero,48(r16)
10004c50:	80000d15 	stw	zero,52(r16)
10004c54:	80001115 	stw	zero,68(r16)
10004c58:	80001215 	stw	zero,72(r16)
10004c5c:	dfc00417 	ldw	ra,16(sp)
10004c60:	dcc00317 	ldw	r19,12(sp)
10004c64:	dc800217 	ldw	r18,8(sp)
10004c68:	dc400117 	ldw	r17,4(sp)
10004c6c:	dc000017 	ldw	r16,0(sp)
10004c70:	dec00504 	addi	sp,sp,20
10004c74:	f800283a 	ret
10004c78:	9009883a 	mov	r4,r18
10004c7c:	00049f00 	call	100049f0 <__sinit>
10004c80:	003fce06 	br	10004bbc <__alt_data_end+0xf8004bbc>
10004c84:	9809883a 	mov	r4,r19
10004c88:	01400104 	movi	r5,4
10004c8c:	00049600 	call	10004960 <__sfmoreglue>
10004c90:	90800015 	stw	r2,0(r18)
10004c94:	103fdb1e 	bne	r2,zero,10004c04 <__alt_data_end+0xf8004c04>
10004c98:	00800304 	movi	r2,12
10004c9c:	98800015 	stw	r2,0(r19)
10004ca0:	0005883a 	mov	r2,zero
10004ca4:	003fed06 	br	10004c5c <__alt_data_end+0xf8004c5c>

10004ca8 <__sfp_lock_acquire>:
10004ca8:	f800283a 	ret

10004cac <__sfp_lock_release>:
10004cac:	f800283a 	ret

10004cb0 <__sinit_lock_acquire>:
10004cb0:	f800283a 	ret

10004cb4 <__sinit_lock_release>:
10004cb4:	f800283a 	ret

10004cb8 <__fp_lock_all>:
10004cb8:	00840074 	movhi	r2,4097
10004cbc:	1085c204 	addi	r2,r2,5896
10004cc0:	11000017 	ldw	r4,0(r2)
10004cc4:	01440034 	movhi	r5,4096
10004cc8:	29525104 	addi	r5,r5,18756
10004ccc:	00055a01 	jmpi	100055a0 <_fwalk>

10004cd0 <__fp_unlock_all>:
10004cd0:	00840074 	movhi	r2,4097
10004cd4:	1085c204 	addi	r2,r2,5896
10004cd8:	11000017 	ldw	r4,0(r2)
10004cdc:	01440034 	movhi	r5,4096
10004ce0:	29525304 	addi	r5,r5,18764
10004ce4:	00055a01 	jmpi	100055a0 <_fwalk>

10004ce8 <_malloc_trim_r>:
10004ce8:	defffb04 	addi	sp,sp,-20
10004cec:	dcc00315 	stw	r19,12(sp)
10004cf0:	dc800215 	stw	r18,8(sp)
10004cf4:	dc400115 	stw	r17,4(sp)
10004cf8:	dc000015 	stw	r16,0(sp)
10004cfc:	2827883a 	mov	r19,r5
10004d00:	dfc00415 	stw	ra,16(sp)
10004d04:	04440074 	movhi	r17,4097
10004d08:	8c403b04 	addi	r17,r17,236
10004d0c:	2021883a 	mov	r16,r4
10004d10:	000d90c0 	call	1000d90c <__malloc_lock>
10004d14:	88800217 	ldw	r2,8(r17)
10004d18:	14800117 	ldw	r18,4(r2)
10004d1c:	00bfff04 	movi	r2,-4
10004d20:	90a4703a 	and	r18,r18,r2
10004d24:	94e7c83a 	sub	r19,r18,r19
10004d28:	9cc3fbc4 	addi	r19,r19,4079
10004d2c:	9826d33a 	srli	r19,r19,12
10004d30:	0083ffc4 	movi	r2,4095
10004d34:	9cffffc4 	addi	r19,r19,-1
10004d38:	9826933a 	slli	r19,r19,12
10004d3c:	14c0060e 	bge	r2,r19,10004d58 <_malloc_trim_r+0x70>
10004d40:	8009883a 	mov	r4,r16
10004d44:	000b883a 	mov	r5,zero
10004d48:	0007b840 	call	10007b84 <_sbrk_r>
10004d4c:	88c00217 	ldw	r3,8(r17)
10004d50:	1c87883a 	add	r3,r3,r18
10004d54:	10c00a26 	beq	r2,r3,10004d80 <_malloc_trim_r+0x98>
10004d58:	8009883a 	mov	r4,r16
10004d5c:	000d92c0 	call	1000d92c <__malloc_unlock>
10004d60:	0005883a 	mov	r2,zero
10004d64:	dfc00417 	ldw	ra,16(sp)
10004d68:	dcc00317 	ldw	r19,12(sp)
10004d6c:	dc800217 	ldw	r18,8(sp)
10004d70:	dc400117 	ldw	r17,4(sp)
10004d74:	dc000017 	ldw	r16,0(sp)
10004d78:	dec00504 	addi	sp,sp,20
10004d7c:	f800283a 	ret
10004d80:	8009883a 	mov	r4,r16
10004d84:	04cbc83a 	sub	r5,zero,r19
10004d88:	0007b840 	call	10007b84 <_sbrk_r>
10004d8c:	00ffffc4 	movi	r3,-1
10004d90:	10c01326 	beq	r2,r3,10004de0 <_malloc_trim_r+0xf8>
10004d94:	00840074 	movhi	r2,4097
10004d98:	108c9b04 	addi	r2,r2,12908
10004d9c:	11000017 	ldw	r4,0(r2)
10004da0:	88c00217 	ldw	r3,8(r17)
10004da4:	94e5c83a 	sub	r18,r18,r19
10004da8:	94800054 	ori	r18,r18,1
10004dac:	24e7c83a 	sub	r19,r4,r19
10004db0:	1c800115 	stw	r18,4(r3)
10004db4:	8009883a 	mov	r4,r16
10004db8:	14c00015 	stw	r19,0(r2)
10004dbc:	000d92c0 	call	1000d92c <__malloc_unlock>
10004dc0:	00800044 	movi	r2,1
10004dc4:	dfc00417 	ldw	ra,16(sp)
10004dc8:	dcc00317 	ldw	r19,12(sp)
10004dcc:	dc800217 	ldw	r18,8(sp)
10004dd0:	dc400117 	ldw	r17,4(sp)
10004dd4:	dc000017 	ldw	r16,0(sp)
10004dd8:	dec00504 	addi	sp,sp,20
10004ddc:	f800283a 	ret
10004de0:	8009883a 	mov	r4,r16
10004de4:	000b883a 	mov	r5,zero
10004de8:	0007b840 	call	10007b84 <_sbrk_r>
10004dec:	88c00217 	ldw	r3,8(r17)
10004df0:	014003c4 	movi	r5,15
10004df4:	10c9c83a 	sub	r4,r2,r3
10004df8:	293fd70e 	bge	r5,r4,10004d58 <__alt_data_end+0xf8004d58>
10004dfc:	01440074 	movhi	r5,4097
10004e00:	2945c404 	addi	r5,r5,5904
10004e04:	29400017 	ldw	r5,0(r5)
10004e08:	21000054 	ori	r4,r4,1
10004e0c:	19000115 	stw	r4,4(r3)
10004e10:	1145c83a 	sub	r2,r2,r5
10004e14:	01440074 	movhi	r5,4097
10004e18:	294c9b04 	addi	r5,r5,12908
10004e1c:	28800015 	stw	r2,0(r5)
10004e20:	003fcd06 	br	10004d58 <__alt_data_end+0xf8004d58>

10004e24 <_free_r>:
10004e24:	defffd04 	addi	sp,sp,-12
10004e28:	dc000015 	stw	r16,0(sp)
10004e2c:	dfc00215 	stw	ra,8(sp)
10004e30:	dc400115 	stw	r17,4(sp)
10004e34:	2821883a 	mov	r16,r5
10004e38:	28004c26 	beq	r5,zero,10004f6c <_free_r+0x148>
10004e3c:	2023883a 	mov	r17,r4
10004e40:	000d90c0 	call	1000d90c <__malloc_lock>
10004e44:	823fff17 	ldw	r8,-4(r16)
10004e48:	00bfff84 	movi	r2,-2
10004e4c:	81bffe04 	addi	r6,r16,-8
10004e50:	4084703a 	and	r2,r8,r2
10004e54:	3087883a 	add	r3,r6,r2
10004e58:	01440074 	movhi	r5,4097
10004e5c:	29403b04 	addi	r5,r5,236
10004e60:	1a400117 	ldw	r9,4(r3)
10004e64:	29000217 	ldw	r4,8(r5)
10004e68:	01ffff04 	movi	r7,-4
10004e6c:	49ce703a 	and	r7,r9,r7
10004e70:	20c06526 	beq	r4,r3,10005008 <_free_r+0x1e4>
10004e74:	19c00115 	stw	r7,4(r3)
10004e78:	4200004c 	andi	r8,r8,1
10004e7c:	40003026 	beq	r8,zero,10004f40 <_free_r+0x11c>
10004e80:	0009883a 	mov	r4,zero
10004e84:	19d1883a 	add	r8,r3,r7
10004e88:	42000117 	ldw	r8,4(r8)
10004e8c:	4200004c 	andi	r8,r8,1
10004e90:	4000061e 	bne	r8,zero,10004eac <_free_r+0x88>
10004e94:	11c5883a 	add	r2,r2,r7
10004e98:	19c00217 	ldw	r7,8(r3)
10004e9c:	20004e26 	beq	r4,zero,10004fd8 <_free_r+0x1b4>
10004ea0:	18c00317 	ldw	r3,12(r3)
10004ea4:	38c00315 	stw	r3,12(r7)
10004ea8:	19c00215 	stw	r7,8(r3)
10004eac:	10c00054 	ori	r3,r2,1
10004eb0:	30c00115 	stw	r3,4(r6)
10004eb4:	3087883a 	add	r3,r6,r2
10004eb8:	18800015 	stw	r2,0(r3)
10004ebc:	20001a1e 	bne	r4,zero,10004f28 <_free_r+0x104>
10004ec0:	00c07fc4 	movi	r3,511
10004ec4:	18802e2e 	bgeu	r3,r2,10004f80 <_free_r+0x15c>
10004ec8:	1006d27a 	srli	r3,r2,9
10004ecc:	01000104 	movi	r4,4
10004ed0:	20c06636 	bltu	r4,r3,1000506c <_free_r+0x248>
10004ed4:	1008d1ba 	srli	r4,r2,6
10004ed8:	21000e04 	addi	r4,r4,56
10004edc:	210f883a 	add	r7,r4,r4
10004ee0:	39cf883a 	add	r7,r7,r7
10004ee4:	39cf883a 	add	r7,r7,r7
10004ee8:	29cf883a 	add	r7,r5,r7
10004eec:	38c00217 	ldw	r3,8(r7)
10004ef0:	01440074 	movhi	r5,4097
10004ef4:	29403b04 	addi	r5,r5,236
10004ef8:	19c06126 	beq	r3,r7,10005080 <_free_r+0x25c>
10004efc:	013fff04 	movi	r4,-4
10004f00:	19400117 	ldw	r5,4(r3)
10004f04:	290a703a 	and	r5,r5,r4
10004f08:	1140022e 	bgeu	r2,r5,10004f14 <_free_r+0xf0>
10004f0c:	18c00217 	ldw	r3,8(r3)
10004f10:	38fffb1e 	bne	r7,r3,10004f00 <__alt_data_end+0xf8004f00>
10004f14:	18800317 	ldw	r2,12(r3)
10004f18:	30800315 	stw	r2,12(r6)
10004f1c:	30c00215 	stw	r3,8(r6)
10004f20:	11800215 	stw	r6,8(r2)
10004f24:	19800315 	stw	r6,12(r3)
10004f28:	8809883a 	mov	r4,r17
10004f2c:	dfc00217 	ldw	ra,8(sp)
10004f30:	dc400117 	ldw	r17,4(sp)
10004f34:	dc000017 	ldw	r16,0(sp)
10004f38:	dec00304 	addi	sp,sp,12
10004f3c:	000d92c1 	jmpi	1000d92c <__malloc_unlock>
10004f40:	813ffe17 	ldw	r4,-8(r16)
10004f44:	2a400204 	addi	r9,r5,8
10004f48:	310dc83a 	sub	r6,r6,r4
10004f4c:	32000217 	ldw	r8,8(r6)
10004f50:	1105883a 	add	r2,r2,r4
10004f54:	42404326 	beq	r8,r9,10005064 <_free_r+0x240>
10004f58:	32400317 	ldw	r9,12(r6)
10004f5c:	0009883a 	mov	r4,zero
10004f60:	42400315 	stw	r9,12(r8)
10004f64:	4a000215 	stw	r8,8(r9)
10004f68:	003fc606 	br	10004e84 <__alt_data_end+0xf8004e84>
10004f6c:	dfc00217 	ldw	ra,8(sp)
10004f70:	dc400117 	ldw	r17,4(sp)
10004f74:	dc000017 	ldw	r16,0(sp)
10004f78:	dec00304 	addi	sp,sp,12
10004f7c:	f800283a 	ret
10004f80:	1004d0fa 	srli	r2,r2,3
10004f84:	02000044 	movi	r8,1
10004f88:	29c00117 	ldw	r7,4(r5)
10004f8c:	1087883a 	add	r3,r2,r2
10004f90:	18c7883a 	add	r3,r3,r3
10004f94:	18c7883a 	add	r3,r3,r3
10004f98:	28c7883a 	add	r3,r5,r3
10004f9c:	1005d0ba 	srai	r2,r2,2
10004fa0:	19000217 	ldw	r4,8(r3)
10004fa4:	30c00315 	stw	r3,12(r6)
10004fa8:	4084983a 	sll	r2,r8,r2
10004fac:	31000215 	stw	r4,8(r6)
10004fb0:	19800215 	stw	r6,8(r3)
10004fb4:	11c4b03a 	or	r2,r2,r7
10004fb8:	21800315 	stw	r6,12(r4)
10004fbc:	8809883a 	mov	r4,r17
10004fc0:	28800115 	stw	r2,4(r5)
10004fc4:	dfc00217 	ldw	ra,8(sp)
10004fc8:	dc400117 	ldw	r17,4(sp)
10004fcc:	dc000017 	ldw	r16,0(sp)
10004fd0:	dec00304 	addi	sp,sp,12
10004fd4:	000d92c1 	jmpi	1000d92c <__malloc_unlock>
10004fd8:	02040074 	movhi	r8,4097
10004fdc:	42003d04 	addi	r8,r8,244
10004fe0:	3a3faf1e 	bne	r7,r8,10004ea0 <__alt_data_end+0xf8004ea0>
10004fe4:	29800515 	stw	r6,20(r5)
10004fe8:	29800415 	stw	r6,16(r5)
10004fec:	10c00054 	ori	r3,r2,1
10004ff0:	31c00315 	stw	r7,12(r6)
10004ff4:	31c00215 	stw	r7,8(r6)
10004ff8:	30c00115 	stw	r3,4(r6)
10004ffc:	308d883a 	add	r6,r6,r2
10005000:	30800015 	stw	r2,0(r6)
10005004:	003fc806 	br	10004f28 <__alt_data_end+0xf8004f28>
10005008:	4200004c 	andi	r8,r8,1
1000500c:	3885883a 	add	r2,r7,r2
10005010:	4000071e 	bne	r8,zero,10005030 <_free_r+0x20c>
10005014:	81fffe17 	ldw	r7,-8(r16)
10005018:	31cdc83a 	sub	r6,r6,r7
1000501c:	30c00317 	ldw	r3,12(r6)
10005020:	31000217 	ldw	r4,8(r6)
10005024:	11c5883a 	add	r2,r2,r7
10005028:	20c00315 	stw	r3,12(r4)
1000502c:	19000215 	stw	r4,8(r3)
10005030:	00c40074 	movhi	r3,4097
10005034:	18c5c504 	addi	r3,r3,5908
10005038:	11000054 	ori	r4,r2,1
1000503c:	18c00017 	ldw	r3,0(r3)
10005040:	31000115 	stw	r4,4(r6)
10005044:	29800215 	stw	r6,8(r5)
10005048:	10ffb736 	bltu	r2,r3,10004f28 <__alt_data_end+0xf8004f28>
1000504c:	00840074 	movhi	r2,4097
10005050:	108c9304 	addi	r2,r2,12876
10005054:	11400017 	ldw	r5,0(r2)
10005058:	8809883a 	mov	r4,r17
1000505c:	0004ce80 	call	10004ce8 <_malloc_trim_r>
10005060:	003fb106 	br	10004f28 <__alt_data_end+0xf8004f28>
10005064:	01000044 	movi	r4,1
10005068:	003f8606 	br	10004e84 <__alt_data_end+0xf8004e84>
1000506c:	01000504 	movi	r4,20
10005070:	20c00b36 	bltu	r4,r3,100050a0 <_free_r+0x27c>
10005074:	190016c4 	addi	r4,r3,91
10005078:	210f883a 	add	r7,r4,r4
1000507c:	003f9806 	br	10004ee0 <__alt_data_end+0xf8004ee0>
10005080:	2009d0ba 	srai	r4,r4,2
10005084:	00800044 	movi	r2,1
10005088:	29c00117 	ldw	r7,4(r5)
1000508c:	1108983a 	sll	r4,r2,r4
10005090:	1805883a 	mov	r2,r3
10005094:	21c8b03a 	or	r4,r4,r7
10005098:	29000115 	stw	r4,4(r5)
1000509c:	003f9e06 	br	10004f18 <__alt_data_end+0xf8004f18>
100050a0:	01001504 	movi	r4,84
100050a4:	20c00436 	bltu	r4,r3,100050b8 <_free_r+0x294>
100050a8:	1008d33a 	srli	r4,r2,12
100050ac:	21001b84 	addi	r4,r4,110
100050b0:	210f883a 	add	r7,r4,r4
100050b4:	003f8a06 	br	10004ee0 <__alt_data_end+0xf8004ee0>
100050b8:	01005504 	movi	r4,340
100050bc:	20c00436 	bltu	r4,r3,100050d0 <_free_r+0x2ac>
100050c0:	1008d3fa 	srli	r4,r2,15
100050c4:	21001dc4 	addi	r4,r4,119
100050c8:	210f883a 	add	r7,r4,r4
100050cc:	003f8406 	br	10004ee0 <__alt_data_end+0xf8004ee0>
100050d0:	01015504 	movi	r4,1364
100050d4:	20c00436 	bltu	r4,r3,100050e8 <_free_r+0x2c4>
100050d8:	1008d4ba 	srli	r4,r2,18
100050dc:	21001f04 	addi	r4,r4,124
100050e0:	210f883a 	add	r7,r4,r4
100050e4:	003f7e06 	br	10004ee0 <__alt_data_end+0xf8004ee0>
100050e8:	01c03f04 	movi	r7,252
100050ec:	01001f84 	movi	r4,126
100050f0:	003f7b06 	br	10004ee0 <__alt_data_end+0xf8004ee0>

100050f4 <__sfvwrite_r>:
100050f4:	30800217 	ldw	r2,8(r6)
100050f8:	defff404 	addi	sp,sp,-48
100050fc:	dcc00515 	stw	r19,20(sp)
10005100:	dfc00b15 	stw	ra,44(sp)
10005104:	df000a15 	stw	fp,40(sp)
10005108:	ddc00915 	stw	r23,36(sp)
1000510c:	dd800815 	stw	r22,32(sp)
10005110:	dd400715 	stw	r21,28(sp)
10005114:	dd000615 	stw	r20,24(sp)
10005118:	dc800415 	stw	r18,16(sp)
1000511c:	dc400315 	stw	r17,12(sp)
10005120:	dc000215 	stw	r16,8(sp)
10005124:	3027883a 	mov	r19,r6
10005128:	10001d26 	beq	r2,zero,100051a0 <__sfvwrite_r+0xac>
1000512c:	2880030b 	ldhu	r2,12(r5)
10005130:	202b883a 	mov	r21,r4
10005134:	2821883a 	mov	r16,r5
10005138:	10c0020c 	andi	r3,r2,8
1000513c:	18002526 	beq	r3,zero,100051d4 <__sfvwrite_r+0xe0>
10005140:	28c00417 	ldw	r3,16(r5)
10005144:	18002326 	beq	r3,zero,100051d4 <__sfvwrite_r+0xe0>
10005148:	10c0008c 	andi	r3,r2,2
1000514c:	9c400017 	ldw	r17,0(r19)
10005150:	18002826 	beq	r3,zero,100051f4 <__sfvwrite_r+0x100>
10005154:	0029883a 	mov	r20,zero
10005158:	0025883a 	mov	r18,zero
1000515c:	05810004 	movi	r22,1024
10005160:	a00d883a 	mov	r6,r20
10005164:	a809883a 	mov	r4,r21
10005168:	90004726 	beq	r18,zero,10005288 <__sfvwrite_r+0x194>
1000516c:	900f883a 	mov	r7,r18
10005170:	81400717 	ldw	r5,28(r16)
10005174:	b480012e 	bgeu	r22,r18,1000517c <__sfvwrite_r+0x88>
10005178:	01c10004 	movi	r7,1024
1000517c:	80800917 	ldw	r2,36(r16)
10005180:	103ee83a 	callr	r2
10005184:	00804c0e 	bge	zero,r2,100052b8 <__sfvwrite_r+0x1c4>
10005188:	98c00217 	ldw	r3,8(r19)
1000518c:	a0a9883a 	add	r20,r20,r2
10005190:	90a5c83a 	sub	r18,r18,r2
10005194:	1885c83a 	sub	r2,r3,r2
10005198:	98800215 	stw	r2,8(r19)
1000519c:	103ff01e 	bne	r2,zero,10005160 <__alt_data_end+0xf8005160>
100051a0:	0005883a 	mov	r2,zero
100051a4:	dfc00b17 	ldw	ra,44(sp)
100051a8:	df000a17 	ldw	fp,40(sp)
100051ac:	ddc00917 	ldw	r23,36(sp)
100051b0:	dd800817 	ldw	r22,32(sp)
100051b4:	dd400717 	ldw	r21,28(sp)
100051b8:	dd000617 	ldw	r20,24(sp)
100051bc:	dcc00517 	ldw	r19,20(sp)
100051c0:	dc800417 	ldw	r18,16(sp)
100051c4:	dc400317 	ldw	r17,12(sp)
100051c8:	dc000217 	ldw	r16,8(sp)
100051cc:	dec00c04 	addi	sp,sp,48
100051d0:	f800283a 	ret
100051d4:	a809883a 	mov	r4,r21
100051d8:	800b883a 	mov	r5,r16
100051dc:	0002d340 	call	10002d34 <__swsetup_r>
100051e0:	1000e81e 	bne	r2,zero,10005584 <__sfvwrite_r+0x490>
100051e4:	8080030b 	ldhu	r2,12(r16)
100051e8:	9c400017 	ldw	r17,0(r19)
100051ec:	10c0008c 	andi	r3,r2,2
100051f0:	183fd81e 	bne	r3,zero,10005154 <__alt_data_end+0xf8005154>
100051f4:	10c0004c 	andi	r3,r2,1
100051f8:	002d883a 	mov	r22,zero
100051fc:	1800331e 	bne	r3,zero,100052cc <__sfvwrite_r+0x1d8>
10005200:	0025883a 	mov	r18,zero
10005204:	90001c26 	beq	r18,zero,10005278 <__sfvwrite_r+0x184>
10005208:	10c0800c 	andi	r3,r2,512
1000520c:	85000217 	ldw	r20,8(r16)
10005210:	18006f26 	beq	r3,zero,100053d0 <__sfvwrite_r+0x2dc>
10005214:	95008936 	bltu	r18,r20,1000543c <__sfvwrite_r+0x348>
10005218:	10c1200c 	andi	r3,r2,1152
1000521c:	1800a11e 	bne	r3,zero,100054a4 <__sfvwrite_r+0x3b0>
10005220:	81000017 	ldw	r4,0(r16)
10005224:	a02f883a 	mov	r23,r20
10005228:	a039883a 	mov	fp,r20
1000522c:	9029883a 	mov	r20,r18
10005230:	b00b883a 	mov	r5,r22
10005234:	b80d883a 	mov	r6,r23
10005238:	00063400 	call	10006340 <memmove>
1000523c:	81400217 	ldw	r5,8(r16)
10005240:	81000017 	ldw	r4,0(r16)
10005244:	9005883a 	mov	r2,r18
10005248:	2f39c83a 	sub	fp,r5,fp
1000524c:	25c7883a 	add	r3,r4,r23
10005250:	87000215 	stw	fp,8(r16)
10005254:	80c00015 	stw	r3,0(r16)
10005258:	98c00217 	ldw	r3,8(r19)
1000525c:	b0ad883a 	add	r22,r22,r2
10005260:	90a5c83a 	sub	r18,r18,r2
10005264:	1d29c83a 	sub	r20,r3,r20
10005268:	9d000215 	stw	r20,8(r19)
1000526c:	a03fcc26 	beq	r20,zero,100051a0 <__alt_data_end+0xf80051a0>
10005270:	8080030b 	ldhu	r2,12(r16)
10005274:	903fe41e 	bne	r18,zero,10005208 <__alt_data_end+0xf8005208>
10005278:	8d800017 	ldw	r22,0(r17)
1000527c:	8c800117 	ldw	r18,4(r17)
10005280:	8c400204 	addi	r17,r17,8
10005284:	003fdf06 	br	10005204 <__alt_data_end+0xf8005204>
10005288:	8d000017 	ldw	r20,0(r17)
1000528c:	8c800117 	ldw	r18,4(r17)
10005290:	8c400204 	addi	r17,r17,8
10005294:	003fb206 	br	10005160 <__alt_data_end+0xf8005160>
10005298:	00075b80 	call	100075b8 <_realloc_r>
1000529c:	1039883a 	mov	fp,r2
100052a0:	10009d1e 	bne	r2,zero,10005518 <__sfvwrite_r+0x424>
100052a4:	81400417 	ldw	r5,16(r16)
100052a8:	a809883a 	mov	r4,r21
100052ac:	0004e240 	call	10004e24 <_free_r>
100052b0:	00800304 	movi	r2,12
100052b4:	a8800015 	stw	r2,0(r21)
100052b8:	80c0030b 	ldhu	r3,12(r16)
100052bc:	00bfffc4 	movi	r2,-1
100052c0:	18c01014 	ori	r3,r3,64
100052c4:	80c0030d 	sth	r3,12(r16)
100052c8:	003fb606 	br	100051a4 <__alt_data_end+0xf80051a4>
100052cc:	0007883a 	mov	r3,zero
100052d0:	0039883a 	mov	fp,zero
100052d4:	0025883a 	mov	r18,zero
100052d8:	90001f26 	beq	r18,zero,10005358 <__sfvwrite_r+0x264>
100052dc:	18006826 	beq	r3,zero,10005480 <__sfvwrite_r+0x38c>
100052e0:	b02f883a 	mov	r23,r22
100052e4:	9580012e 	bgeu	r18,r22,100052ec <__sfvwrite_r+0x1f8>
100052e8:	902f883a 	mov	r23,r18
100052ec:	81000017 	ldw	r4,0(r16)
100052f0:	80800417 	ldw	r2,16(r16)
100052f4:	b829883a 	mov	r20,r23
100052f8:	81800217 	ldw	r6,8(r16)
100052fc:	81c00517 	ldw	r7,20(r16)
10005300:	1100022e 	bgeu	r2,r4,1000530c <__sfvwrite_r+0x218>
10005304:	31d1883a 	add	r8,r6,r7
10005308:	45c01816 	blt	r8,r23,1000536c <__sfvwrite_r+0x278>
1000530c:	b9c03f16 	blt	r23,r7,1000540c <__sfvwrite_r+0x318>
10005310:	80800917 	ldw	r2,36(r16)
10005314:	81400717 	ldw	r5,28(r16)
10005318:	a809883a 	mov	r4,r21
1000531c:	d8c00115 	stw	r3,4(sp)
10005320:	e00d883a 	mov	r6,fp
10005324:	103ee83a 	callr	r2
10005328:	1029883a 	mov	r20,r2
1000532c:	d8c00117 	ldw	r3,4(sp)
10005330:	00bfe10e 	bge	zero,r2,100052b8 <__alt_data_end+0xf80052b8>
10005334:	b52dc83a 	sub	r22,r22,r20
10005338:	b0001f26 	beq	r22,zero,100053b8 <__sfvwrite_r+0x2c4>
1000533c:	98800217 	ldw	r2,8(r19)
10005340:	e539883a 	add	fp,fp,r20
10005344:	9525c83a 	sub	r18,r18,r20
10005348:	1529c83a 	sub	r20,r2,r20
1000534c:	9d000215 	stw	r20,8(r19)
10005350:	a03f9326 	beq	r20,zero,100051a0 <__alt_data_end+0xf80051a0>
10005354:	903fe11e 	bne	r18,zero,100052dc <__alt_data_end+0xf80052dc>
10005358:	8f000017 	ldw	fp,0(r17)
1000535c:	8c800117 	ldw	r18,4(r17)
10005360:	0007883a 	mov	r3,zero
10005364:	8c400204 	addi	r17,r17,8
10005368:	003fdb06 	br	100052d8 <__alt_data_end+0xf80052d8>
1000536c:	400d883a 	mov	r6,r8
10005370:	e00b883a 	mov	r5,fp
10005374:	d8c00115 	stw	r3,4(sp)
10005378:	da000015 	stw	r8,0(sp)
1000537c:	00063400 	call	10006340 <memmove>
10005380:	da000017 	ldw	r8,0(sp)
10005384:	80800017 	ldw	r2,0(r16)
10005388:	a809883a 	mov	r4,r21
1000538c:	800b883a 	mov	r5,r16
10005390:	1205883a 	add	r2,r2,r8
10005394:	80800015 	stw	r2,0(r16)
10005398:	da000015 	stw	r8,0(sp)
1000539c:	00046d00 	call	100046d0 <_fflush_r>
100053a0:	d8c00117 	ldw	r3,4(sp)
100053a4:	da000017 	ldw	r8,0(sp)
100053a8:	103fc31e 	bne	r2,zero,100052b8 <__alt_data_end+0xf80052b8>
100053ac:	4029883a 	mov	r20,r8
100053b0:	b52dc83a 	sub	r22,r22,r20
100053b4:	b03fe11e 	bne	r22,zero,1000533c <__alt_data_end+0xf800533c>
100053b8:	a809883a 	mov	r4,r21
100053bc:	800b883a 	mov	r5,r16
100053c0:	00046d00 	call	100046d0 <_fflush_r>
100053c4:	103fbc1e 	bne	r2,zero,100052b8 <__alt_data_end+0xf80052b8>
100053c8:	0007883a 	mov	r3,zero
100053cc:	003fdb06 	br	1000533c <__alt_data_end+0xf800533c>
100053d0:	81000017 	ldw	r4,0(r16)
100053d4:	80800417 	ldw	r2,16(r16)
100053d8:	1100012e 	bgeu	r2,r4,100053e0 <__sfvwrite_r+0x2ec>
100053dc:	a4805836 	bltu	r20,r18,10005540 <__sfvwrite_r+0x44c>
100053e0:	81c00517 	ldw	r7,20(r16)
100053e4:	91c01a36 	bltu	r18,r7,10005450 <__sfvwrite_r+0x35c>
100053e8:	80800917 	ldw	r2,36(r16)
100053ec:	81400717 	ldw	r5,28(r16)
100053f0:	a809883a 	mov	r4,r21
100053f4:	b00d883a 	mov	r6,r22
100053f8:	103ee83a 	callr	r2
100053fc:	1029883a 	mov	r20,r2
10005400:	00bfad0e 	bge	zero,r2,100052b8 <__alt_data_end+0xf80052b8>
10005404:	a005883a 	mov	r2,r20
10005408:	003f9306 	br	10005258 <__alt_data_end+0xf8005258>
1000540c:	b80d883a 	mov	r6,r23
10005410:	e00b883a 	mov	r5,fp
10005414:	d8c00115 	stw	r3,4(sp)
10005418:	00063400 	call	10006340 <memmove>
1000541c:	80800217 	ldw	r2,8(r16)
10005420:	81000017 	ldw	r4,0(r16)
10005424:	d8c00117 	ldw	r3,4(sp)
10005428:	15c5c83a 	sub	r2,r2,r23
1000542c:	25ef883a 	add	r23,r4,r23
10005430:	80800215 	stw	r2,8(r16)
10005434:	85c00015 	stw	r23,0(r16)
10005438:	003fbe06 	br	10005334 <__alt_data_end+0xf8005334>
1000543c:	81000017 	ldw	r4,0(r16)
10005440:	9039883a 	mov	fp,r18
10005444:	9029883a 	mov	r20,r18
10005448:	902f883a 	mov	r23,r18
1000544c:	003f7806 	br	10005230 <__alt_data_end+0xf8005230>
10005450:	b00b883a 	mov	r5,r22
10005454:	900d883a 	mov	r6,r18
10005458:	00063400 	call	10006340 <memmove>
1000545c:	80c00217 	ldw	r3,8(r16)
10005460:	80800017 	ldw	r2,0(r16)
10005464:	9029883a 	mov	r20,r18
10005468:	1c87c83a 	sub	r3,r3,r18
1000546c:	1485883a 	add	r2,r2,r18
10005470:	80800015 	stw	r2,0(r16)
10005474:	80c00215 	stw	r3,8(r16)
10005478:	9005883a 	mov	r2,r18
1000547c:	003f7606 	br	10005258 <__alt_data_end+0xf8005258>
10005480:	e009883a 	mov	r4,fp
10005484:	01400284 	movi	r5,10
10005488:	900d883a 	mov	r6,r18
1000548c:	000614c0 	call	1000614c <memchr>
10005490:	10003926 	beq	r2,zero,10005578 <__sfvwrite_r+0x484>
10005494:	15800044 	addi	r22,r2,1
10005498:	b72dc83a 	sub	r22,r22,fp
1000549c:	00c00044 	movi	r3,1
100054a0:	003f8f06 	br	100052e0 <__alt_data_end+0xf80052e0>
100054a4:	81000517 	ldw	r4,20(r16)
100054a8:	81400417 	ldw	r5,16(r16)
100054ac:	80c00017 	ldw	r3,0(r16)
100054b0:	210d883a 	add	r6,r4,r4
100054b4:	3109883a 	add	r4,r6,r4
100054b8:	2028d7fa 	srli	r20,r4,31
100054bc:	196fc83a 	sub	r23,r3,r5
100054c0:	b9800044 	addi	r6,r23,1
100054c4:	a109883a 	add	r4,r20,r4
100054c8:	2029d07a 	srai	r20,r4,1
100054cc:	348d883a 	add	r6,r6,r18
100054d0:	a180272e 	bgeu	r20,r6,10005570 <__sfvwrite_r+0x47c>
100054d4:	3029883a 	mov	r20,r6
100054d8:	1081000c 	andi	r2,r2,1024
100054dc:	a809883a 	mov	r4,r21
100054e0:	103f6d26 	beq	r2,zero,10005298 <__alt_data_end+0xf8005298>
100054e4:	300b883a 	mov	r5,r6
100054e8:	00059880 	call	10005988 <_malloc_r>
100054ec:	1039883a 	mov	fp,r2
100054f0:	103f6f26 	beq	r2,zero,100052b0 <__alt_data_end+0xf80052b0>
100054f4:	81400417 	ldw	r5,16(r16)
100054f8:	1009883a 	mov	r4,r2
100054fc:	b80d883a 	mov	r6,r23
10005500:	00062340 	call	10006234 <memcpy>
10005504:	8080030b 	ldhu	r2,12(r16)
10005508:	00fedfc4 	movi	r3,-1153
1000550c:	10c4703a 	and	r2,r2,r3
10005510:	10802014 	ori	r2,r2,128
10005514:	8080030d 	sth	r2,12(r16)
10005518:	e5c9883a 	add	r4,fp,r23
1000551c:	a5c7c83a 	sub	r3,r20,r23
10005520:	87000415 	stw	fp,16(r16)
10005524:	85000515 	stw	r20,20(r16)
10005528:	81000015 	stw	r4,0(r16)
1000552c:	9039883a 	mov	fp,r18
10005530:	80c00215 	stw	r3,8(r16)
10005534:	9029883a 	mov	r20,r18
10005538:	902f883a 	mov	r23,r18
1000553c:	003f3c06 	br	10005230 <__alt_data_end+0xf8005230>
10005540:	b00b883a 	mov	r5,r22
10005544:	a00d883a 	mov	r6,r20
10005548:	00063400 	call	10006340 <memmove>
1000554c:	80800017 	ldw	r2,0(r16)
10005550:	a809883a 	mov	r4,r21
10005554:	800b883a 	mov	r5,r16
10005558:	1505883a 	add	r2,r2,r20
1000555c:	80800015 	stw	r2,0(r16)
10005560:	00046d00 	call	100046d0 <_fflush_r>
10005564:	103f541e 	bne	r2,zero,100052b8 <__alt_data_end+0xf80052b8>
10005568:	a005883a 	mov	r2,r20
1000556c:	003f3a06 	br	10005258 <__alt_data_end+0xf8005258>
10005570:	a00d883a 	mov	r6,r20
10005574:	003fd806 	br	100054d8 <__alt_data_end+0xf80054d8>
10005578:	95800044 	addi	r22,r18,1
1000557c:	00c00044 	movi	r3,1
10005580:	003f5706 	br	100052e0 <__alt_data_end+0xf80052e0>
10005584:	80c0030b 	ldhu	r3,12(r16)
10005588:	00bfffc4 	movi	r2,-1
1000558c:	18c01014 	ori	r3,r3,64
10005590:	80c0030d 	sth	r3,12(r16)
10005594:	00c00244 	movi	r3,9
10005598:	a8c00015 	stw	r3,0(r21)
1000559c:	003f0106 	br	100051a4 <__alt_data_end+0xf80051a4>

100055a0 <_fwalk>:
100055a0:	defff904 	addi	sp,sp,-28
100055a4:	dcc00315 	stw	r19,12(sp)
100055a8:	24c0b804 	addi	r19,r4,736
100055ac:	dd400515 	stw	r21,20(sp)
100055b0:	dd000415 	stw	r20,16(sp)
100055b4:	dfc00615 	stw	ra,24(sp)
100055b8:	dc800215 	stw	r18,8(sp)
100055bc:	dc400115 	stw	r17,4(sp)
100055c0:	dc000015 	stw	r16,0(sp)
100055c4:	282b883a 	mov	r21,r5
100055c8:	0029883a 	mov	r20,zero
100055cc:	0004ca80 	call	10004ca8 <__sfp_lock_acquire>
100055d0:	98001226 	beq	r19,zero,1000561c <_fwalk+0x7c>
100055d4:	04bfffc4 	movi	r18,-1
100055d8:	9c400117 	ldw	r17,4(r19)
100055dc:	9c000217 	ldw	r16,8(r19)
100055e0:	8c7fffc4 	addi	r17,r17,-1
100055e4:	88000b16 	blt	r17,zero,10005614 <_fwalk+0x74>
100055e8:	84000304 	addi	r16,r16,12
100055ec:	80c0000f 	ldh	r3,0(r16)
100055f0:	8c7fffc4 	addi	r17,r17,-1
100055f4:	813ffd04 	addi	r4,r16,-12
100055f8:	18000426 	beq	r3,zero,1000560c <_fwalk+0x6c>
100055fc:	80c0008f 	ldh	r3,2(r16)
10005600:	1c800226 	beq	r3,r18,1000560c <_fwalk+0x6c>
10005604:	a83ee83a 	callr	r21
10005608:	a0a8b03a 	or	r20,r20,r2
1000560c:	84001a04 	addi	r16,r16,104
10005610:	8cbff61e 	bne	r17,r18,100055ec <__alt_data_end+0xf80055ec>
10005614:	9cc00017 	ldw	r19,0(r19)
10005618:	983fef1e 	bne	r19,zero,100055d8 <__alt_data_end+0xf80055d8>
1000561c:	0004cac0 	call	10004cac <__sfp_lock_release>
10005620:	a005883a 	mov	r2,r20
10005624:	dfc00617 	ldw	ra,24(sp)
10005628:	dd400517 	ldw	r21,20(sp)
1000562c:	dd000417 	ldw	r20,16(sp)
10005630:	dcc00317 	ldw	r19,12(sp)
10005634:	dc800217 	ldw	r18,8(sp)
10005638:	dc400117 	ldw	r17,4(sp)
1000563c:	dc000017 	ldw	r16,0(sp)
10005640:	dec00704 	addi	sp,sp,28
10005644:	f800283a 	ret

10005648 <_fwalk_reent>:
10005648:	defff804 	addi	sp,sp,-32
1000564c:	dcc00315 	stw	r19,12(sp)
10005650:	24c0b804 	addi	r19,r4,736
10005654:	dd800615 	stw	r22,24(sp)
10005658:	dd400515 	stw	r21,20(sp)
1000565c:	dd000415 	stw	r20,16(sp)
10005660:	dfc00715 	stw	ra,28(sp)
10005664:	dc800215 	stw	r18,8(sp)
10005668:	dc400115 	stw	r17,4(sp)
1000566c:	dc000015 	stw	r16,0(sp)
10005670:	2029883a 	mov	r20,r4
10005674:	282b883a 	mov	r21,r5
10005678:	002d883a 	mov	r22,zero
1000567c:	0004ca80 	call	10004ca8 <__sfp_lock_acquire>
10005680:	98001326 	beq	r19,zero,100056d0 <_fwalk_reent+0x88>
10005684:	04bfffc4 	movi	r18,-1
10005688:	9c400117 	ldw	r17,4(r19)
1000568c:	9c000217 	ldw	r16,8(r19)
10005690:	8c7fffc4 	addi	r17,r17,-1
10005694:	88000c16 	blt	r17,zero,100056c8 <_fwalk_reent+0x80>
10005698:	84000304 	addi	r16,r16,12
1000569c:	80c0000f 	ldh	r3,0(r16)
100056a0:	8c7fffc4 	addi	r17,r17,-1
100056a4:	817ffd04 	addi	r5,r16,-12
100056a8:	18000526 	beq	r3,zero,100056c0 <_fwalk_reent+0x78>
100056ac:	80c0008f 	ldh	r3,2(r16)
100056b0:	a009883a 	mov	r4,r20
100056b4:	1c800226 	beq	r3,r18,100056c0 <_fwalk_reent+0x78>
100056b8:	a83ee83a 	callr	r21
100056bc:	b0acb03a 	or	r22,r22,r2
100056c0:	84001a04 	addi	r16,r16,104
100056c4:	8cbff51e 	bne	r17,r18,1000569c <__alt_data_end+0xf800569c>
100056c8:	9cc00017 	ldw	r19,0(r19)
100056cc:	983fee1e 	bne	r19,zero,10005688 <__alt_data_end+0xf8005688>
100056d0:	0004cac0 	call	10004cac <__sfp_lock_release>
100056d4:	b005883a 	mov	r2,r22
100056d8:	dfc00717 	ldw	ra,28(sp)
100056dc:	dd800617 	ldw	r22,24(sp)
100056e0:	dd400517 	ldw	r21,20(sp)
100056e4:	dd000417 	ldw	r20,16(sp)
100056e8:	dcc00317 	ldw	r19,12(sp)
100056ec:	dc800217 	ldw	r18,8(sp)
100056f0:	dc400117 	ldw	r17,4(sp)
100056f4:	dc000017 	ldw	r16,0(sp)
100056f8:	dec00804 	addi	sp,sp,32
100056fc:	f800283a 	ret

10005700 <_setlocale_r>:
10005700:	defffe04 	addi	sp,sp,-8
10005704:	dc000015 	stw	r16,0(sp)
10005708:	dfc00115 	stw	ra,4(sp)
1000570c:	3021883a 	mov	r16,r6
10005710:	30000526 	beq	r6,zero,10005728 <_setlocale_r+0x28>
10005714:	3009883a 	mov	r4,r6
10005718:	01440074 	movhi	r5,4097
1000571c:	297e7304 	addi	r5,r5,-1588
10005720:	0007d240 	call	10007d24 <strcmp>
10005724:	1000061e 	bne	r2,zero,10005740 <_setlocale_r+0x40>
10005728:	00840074 	movhi	r2,4097
1000572c:	10be7204 	addi	r2,r2,-1592
10005730:	dfc00117 	ldw	ra,4(sp)
10005734:	dc000017 	ldw	r16,0(sp)
10005738:	dec00204 	addi	sp,sp,8
1000573c:	f800283a 	ret
10005740:	8009883a 	mov	r4,r16
10005744:	01440074 	movhi	r5,4097
10005748:	297e7204 	addi	r5,r5,-1592
1000574c:	0007d240 	call	10007d24 <strcmp>
10005750:	103ff526 	beq	r2,zero,10005728 <__alt_data_end+0xf8005728>
10005754:	8009883a 	mov	r4,r16
10005758:	01440074 	movhi	r5,4097
1000575c:	297e5d04 	addi	r5,r5,-1676
10005760:	0007d240 	call	10007d24 <strcmp>
10005764:	103ff026 	beq	r2,zero,10005728 <__alt_data_end+0xf8005728>
10005768:	0005883a 	mov	r2,zero
1000576c:	003ff006 	br	10005730 <__alt_data_end+0xf8005730>

10005770 <__locale_charset>:
10005770:	00840074 	movhi	r2,4097
10005774:	10802504 	addi	r2,r2,148
10005778:	f800283a 	ret

1000577c <__locale_mb_cur_max>:
1000577c:	00840074 	movhi	r2,4097
10005780:	1085c304 	addi	r2,r2,5900
10005784:	10800017 	ldw	r2,0(r2)
10005788:	f800283a 	ret

1000578c <__locale_msgcharset>:
1000578c:	00840074 	movhi	r2,4097
10005790:	10801d04 	addi	r2,r2,116
10005794:	f800283a 	ret

10005798 <__locale_cjk_lang>:
10005798:	0005883a 	mov	r2,zero
1000579c:	f800283a 	ret

100057a0 <_localeconv_r>:
100057a0:	00840074 	movhi	r2,4097
100057a4:	10802d04 	addi	r2,r2,180
100057a8:	f800283a 	ret

100057ac <setlocale>:
100057ac:	00c40074 	movhi	r3,4097
100057b0:	18c5c204 	addi	r3,r3,5896
100057b4:	2005883a 	mov	r2,r4
100057b8:	19000017 	ldw	r4,0(r3)
100057bc:	280d883a 	mov	r6,r5
100057c0:	100b883a 	mov	r5,r2
100057c4:	00057001 	jmpi	10005700 <_setlocale_r>

100057c8 <localeconv>:
100057c8:	00840074 	movhi	r2,4097
100057cc:	10802d04 	addi	r2,r2,180
100057d0:	f800283a 	ret

100057d4 <__smakebuf_r>:
100057d4:	2880030b 	ldhu	r2,12(r5)
100057d8:	deffec04 	addi	sp,sp,-80
100057dc:	dc000f15 	stw	r16,60(sp)
100057e0:	dfc01315 	stw	ra,76(sp)
100057e4:	dcc01215 	stw	r19,72(sp)
100057e8:	dc801115 	stw	r18,68(sp)
100057ec:	dc401015 	stw	r17,64(sp)
100057f0:	10c0008c 	andi	r3,r2,2
100057f4:	2821883a 	mov	r16,r5
100057f8:	18003a1e 	bne	r3,zero,100058e4 <__smakebuf_r+0x110>
100057fc:	2940038f 	ldh	r5,14(r5)
10005800:	2023883a 	mov	r17,r4
10005804:	28001b16 	blt	r5,zero,10005874 <__smakebuf_r+0xa0>
10005808:	d80d883a 	mov	r6,sp
1000580c:	00098280 	call	10009828 <_fstat_r>
10005810:	10001716 	blt	r2,zero,10005870 <__smakebuf_r+0x9c>
10005814:	d8800117 	ldw	r2,4(sp)
10005818:	00e00014 	movui	r3,32768
1000581c:	10bc000c 	andi	r2,r2,61440
10005820:	10c03e26 	beq	r2,r3,1000591c <__smakebuf_r+0x148>
10005824:	80c0030b 	ldhu	r3,12(r16)
10005828:	18c20014 	ori	r3,r3,2048
1000582c:	80c0030d 	sth	r3,12(r16)
10005830:	00c80004 	movi	r3,8192
10005834:	10c0431e 	bne	r2,r3,10005944 <__smakebuf_r+0x170>
10005838:	8140038f 	ldh	r5,14(r16)
1000583c:	8809883a 	mov	r4,r17
10005840:	00098900 	call	10009890 <_isatty_r>
10005844:	10004d26 	beq	r2,zero,1000597c <__smakebuf_r+0x1a8>
10005848:	80c0030b 	ldhu	r3,12(r16)
1000584c:	04c00044 	movi	r19,1
10005850:	808010c4 	addi	r2,r16,67
10005854:	1cc6b03a 	or	r3,r3,r19
10005858:	80c0030d 	sth	r3,12(r16)
1000585c:	80800015 	stw	r2,0(r16)
10005860:	80800415 	stw	r2,16(r16)
10005864:	84c00515 	stw	r19,20(r16)
10005868:	04810004 	movi	r18,1024
1000586c:	00000706 	br	1000588c <__smakebuf_r+0xb8>
10005870:	8080030b 	ldhu	r2,12(r16)
10005874:	10c0200c 	andi	r3,r2,128
10005878:	1800261e 	bne	r3,zero,10005914 <__smakebuf_r+0x140>
1000587c:	04810004 	movi	r18,1024
10005880:	10820014 	ori	r2,r2,2048
10005884:	8080030d 	sth	r2,12(r16)
10005888:	0027883a 	mov	r19,zero
1000588c:	8809883a 	mov	r4,r17
10005890:	900b883a 	mov	r5,r18
10005894:	00059880 	call	10005988 <_malloc_r>
10005898:	10002d26 	beq	r2,zero,10005950 <__smakebuf_r+0x17c>
1000589c:	80c0030b 	ldhu	r3,12(r16)
100058a0:	01040034 	movhi	r4,4096
100058a4:	21125504 	addi	r4,r4,18772
100058a8:	89000f15 	stw	r4,60(r17)
100058ac:	18c02014 	ori	r3,r3,128
100058b0:	80c0030d 	sth	r3,12(r16)
100058b4:	80800015 	stw	r2,0(r16)
100058b8:	80800415 	stw	r2,16(r16)
100058bc:	84800515 	stw	r18,20(r16)
100058c0:	98000d26 	beq	r19,zero,100058f8 <__smakebuf_r+0x124>
100058c4:	8140038f 	ldh	r5,14(r16)
100058c8:	8809883a 	mov	r4,r17
100058cc:	00098900 	call	10009890 <_isatty_r>
100058d0:	10000926 	beq	r2,zero,100058f8 <__smakebuf_r+0x124>
100058d4:	8080030b 	ldhu	r2,12(r16)
100058d8:	10800054 	ori	r2,r2,1
100058dc:	8080030d 	sth	r2,12(r16)
100058e0:	00000506 	br	100058f8 <__smakebuf_r+0x124>
100058e4:	288010c4 	addi	r2,r5,67
100058e8:	28800015 	stw	r2,0(r5)
100058ec:	28800415 	stw	r2,16(r5)
100058f0:	00800044 	movi	r2,1
100058f4:	28800515 	stw	r2,20(r5)
100058f8:	dfc01317 	ldw	ra,76(sp)
100058fc:	dcc01217 	ldw	r19,72(sp)
10005900:	dc801117 	ldw	r18,68(sp)
10005904:	dc401017 	ldw	r17,64(sp)
10005908:	dc000f17 	ldw	r16,60(sp)
1000590c:	dec01404 	addi	sp,sp,80
10005910:	f800283a 	ret
10005914:	04801004 	movi	r18,64
10005918:	003fd906 	br	10005880 <__alt_data_end+0xf8005880>
1000591c:	81000a17 	ldw	r4,40(r16)
10005920:	00c40034 	movhi	r3,4096
10005924:	18df3004 	addi	r3,r3,31936
10005928:	20ffbe1e 	bne	r4,r3,10005824 <__alt_data_end+0xf8005824>
1000592c:	80c0030b 	ldhu	r3,12(r16)
10005930:	01010004 	movi	r4,1024
10005934:	81001315 	stw	r4,76(r16)
10005938:	1906b03a 	or	r3,r3,r4
1000593c:	80c0030d 	sth	r3,12(r16)
10005940:	003fbb06 	br	10005830 <__alt_data_end+0xf8005830>
10005944:	0027883a 	mov	r19,zero
10005948:	04810004 	movi	r18,1024
1000594c:	003fcf06 	br	1000588c <__alt_data_end+0xf800588c>
10005950:	8080030b 	ldhu	r2,12(r16)
10005954:	10c0800c 	andi	r3,r2,512
10005958:	183fe71e 	bne	r3,zero,100058f8 <__alt_data_end+0xf80058f8>
1000595c:	10800094 	ori	r2,r2,2
10005960:	80c010c4 	addi	r3,r16,67
10005964:	8080030d 	sth	r2,12(r16)
10005968:	00800044 	movi	r2,1
1000596c:	80c00015 	stw	r3,0(r16)
10005970:	80c00415 	stw	r3,16(r16)
10005974:	80800515 	stw	r2,20(r16)
10005978:	003fdf06 	br	100058f8 <__alt_data_end+0xf80058f8>
1000597c:	04c00044 	movi	r19,1
10005980:	04810004 	movi	r18,1024
10005984:	003fc106 	br	1000588c <__alt_data_end+0xf800588c>

10005988 <_malloc_r>:
10005988:	defff504 	addi	sp,sp,-44
1000598c:	dc800315 	stw	r18,12(sp)
10005990:	dfc00a15 	stw	ra,40(sp)
10005994:	df000915 	stw	fp,36(sp)
10005998:	ddc00815 	stw	r23,32(sp)
1000599c:	dd800715 	stw	r22,28(sp)
100059a0:	dd400615 	stw	r21,24(sp)
100059a4:	dd000515 	stw	r20,20(sp)
100059a8:	dcc00415 	stw	r19,16(sp)
100059ac:	dc400215 	stw	r17,8(sp)
100059b0:	dc000115 	stw	r16,4(sp)
100059b4:	288002c4 	addi	r2,r5,11
100059b8:	00c00584 	movi	r3,22
100059bc:	2025883a 	mov	r18,r4
100059c0:	18802b2e 	bgeu	r3,r2,10005a70 <_malloc_r+0xe8>
100059c4:	047ffe04 	movi	r17,-8
100059c8:	1462703a 	and	r17,r2,r17
100059cc:	88002a16 	blt	r17,zero,10005a78 <_malloc_r+0xf0>
100059d0:	89402936 	bltu	r17,r5,10005a78 <_malloc_r+0xf0>
100059d4:	9009883a 	mov	r4,r18
100059d8:	000d90c0 	call	1000d90c <__malloc_lock>
100059dc:	00807dc4 	movi	r2,503
100059e0:	14402936 	bltu	r2,r17,10005a88 <_malloc_r+0x100>
100059e4:	8808d0fa 	srli	r4,r17,3
100059e8:	04c40074 	movhi	r19,4097
100059ec:	9cc03b04 	addi	r19,r19,236
100059f0:	2105883a 	add	r2,r4,r4
100059f4:	1085883a 	add	r2,r2,r2
100059f8:	1085883a 	add	r2,r2,r2
100059fc:	9885883a 	add	r2,r19,r2
10005a00:	14000317 	ldw	r16,12(r2)
10005a04:	80815226 	beq	r16,r2,10005f50 <_malloc_r+0x5c8>
10005a08:	81000117 	ldw	r4,4(r16)
10005a0c:	00bfff04 	movi	r2,-4
10005a10:	80c00317 	ldw	r3,12(r16)
10005a14:	2084703a 	and	r2,r4,r2
10005a18:	8085883a 	add	r2,r16,r2
10005a1c:	81000217 	ldw	r4,8(r16)
10005a20:	11400117 	ldw	r5,4(r2)
10005a24:	20c00315 	stw	r3,12(r4)
10005a28:	19000215 	stw	r4,8(r3)
10005a2c:	28c00054 	ori	r3,r5,1
10005a30:	10c00115 	stw	r3,4(r2)
10005a34:	9009883a 	mov	r4,r18
10005a38:	000d92c0 	call	1000d92c <__malloc_unlock>
10005a3c:	80800204 	addi	r2,r16,8
10005a40:	dfc00a17 	ldw	ra,40(sp)
10005a44:	df000917 	ldw	fp,36(sp)
10005a48:	ddc00817 	ldw	r23,32(sp)
10005a4c:	dd800717 	ldw	r22,28(sp)
10005a50:	dd400617 	ldw	r21,24(sp)
10005a54:	dd000517 	ldw	r20,20(sp)
10005a58:	dcc00417 	ldw	r19,16(sp)
10005a5c:	dc800317 	ldw	r18,12(sp)
10005a60:	dc400217 	ldw	r17,8(sp)
10005a64:	dc000117 	ldw	r16,4(sp)
10005a68:	dec00b04 	addi	sp,sp,44
10005a6c:	f800283a 	ret
10005a70:	04400404 	movi	r17,16
10005a74:	897fd72e 	bgeu	r17,r5,100059d4 <__alt_data_end+0xf80059d4>
10005a78:	00800304 	movi	r2,12
10005a7c:	90800015 	stw	r2,0(r18)
10005a80:	0005883a 	mov	r2,zero
10005a84:	003fee06 	br	10005a40 <__alt_data_end+0xf8005a40>
10005a88:	8808d27a 	srli	r4,r17,9
10005a8c:	20007126 	beq	r4,zero,10005c54 <_malloc_r+0x2cc>
10005a90:	00800104 	movi	r2,4
10005a94:	1100f536 	bltu	r2,r4,10005e6c <_malloc_r+0x4e4>
10005a98:	8808d1ba 	srli	r4,r17,6
10005a9c:	21000e04 	addi	r4,r4,56
10005aa0:	210b883a 	add	r5,r4,r4
10005aa4:	294b883a 	add	r5,r5,r5
10005aa8:	294b883a 	add	r5,r5,r5
10005aac:	04c40074 	movhi	r19,4097
10005ab0:	9cc03b04 	addi	r19,r19,236
10005ab4:	994b883a 	add	r5,r19,r5
10005ab8:	2c000317 	ldw	r16,12(r5)
10005abc:	2c000e26 	beq	r5,r16,10005af8 <_malloc_r+0x170>
10005ac0:	80c00117 	ldw	r3,4(r16)
10005ac4:	01ffff04 	movi	r7,-4
10005ac8:	018003c4 	movi	r6,15
10005acc:	19c6703a 	and	r3,r3,r7
10005ad0:	1c45c83a 	sub	r2,r3,r17
10005ad4:	30800716 	blt	r6,r2,10005af4 <_malloc_r+0x16c>
10005ad8:	1000610e 	bge	r2,zero,10005c60 <_malloc_r+0x2d8>
10005adc:	84000317 	ldw	r16,12(r16)
10005ae0:	2c000526 	beq	r5,r16,10005af8 <_malloc_r+0x170>
10005ae4:	80c00117 	ldw	r3,4(r16)
10005ae8:	19c6703a 	and	r3,r3,r7
10005aec:	1c45c83a 	sub	r2,r3,r17
10005af0:	30bff90e 	bge	r6,r2,10005ad8 <__alt_data_end+0xf8005ad8>
10005af4:	213fffc4 	addi	r4,r4,-1
10005af8:	21000044 	addi	r4,r4,1
10005afc:	9c000417 	ldw	r16,16(r19)
10005b00:	00c40074 	movhi	r3,4097
10005b04:	18c03b04 	addi	r3,r3,236
10005b08:	1a400204 	addi	r9,r3,8
10005b0c:	82410926 	beq	r16,r9,10005f34 <_malloc_r+0x5ac>
10005b10:	81400117 	ldw	r5,4(r16)
10005b14:	00bfff04 	movi	r2,-4
10005b18:	018003c4 	movi	r6,15
10005b1c:	2884703a 	and	r2,r5,r2
10005b20:	144bc83a 	sub	r5,r2,r17
10005b24:	3140f416 	blt	r6,r5,10005ef8 <_malloc_r+0x570>
10005b28:	1a400515 	stw	r9,20(r3)
10005b2c:	1a400415 	stw	r9,16(r3)
10005b30:	2800570e 	bge	r5,zero,10005c90 <_malloc_r+0x308>
10005b34:	01407fc4 	movi	r5,511
10005b38:	2880d436 	bltu	r5,r2,10005e8c <_malloc_r+0x504>
10005b3c:	1004d0fa 	srli	r2,r2,3
10005b40:	02000044 	movi	r8,1
10005b44:	19c00117 	ldw	r7,4(r3)
10005b48:	108b883a 	add	r5,r2,r2
10005b4c:	294b883a 	add	r5,r5,r5
10005b50:	1005d0ba 	srai	r2,r2,2
10005b54:	294b883a 	add	r5,r5,r5
10005b58:	28cb883a 	add	r5,r5,r3
10005b5c:	29800217 	ldw	r6,8(r5)
10005b60:	4084983a 	sll	r2,r8,r2
10005b64:	81400315 	stw	r5,12(r16)
10005b68:	81800215 	stw	r6,8(r16)
10005b6c:	11c4b03a 	or	r2,r2,r7
10005b70:	2c000215 	stw	r16,8(r5)
10005b74:	18800115 	stw	r2,4(r3)
10005b78:	34000315 	stw	r16,12(r6)
10005b7c:	2007d0ba 	srai	r3,r4,2
10005b80:	01400044 	movi	r5,1
10005b84:	28ca983a 	sll	r5,r5,r3
10005b88:	11404936 	bltu	r2,r5,10005cb0 <_malloc_r+0x328>
10005b8c:	1146703a 	and	r3,r2,r5
10005b90:	18000a1e 	bne	r3,zero,10005bbc <_malloc_r+0x234>
10005b94:	00ffff04 	movi	r3,-4
10005b98:	294b883a 	add	r5,r5,r5
10005b9c:	20c8703a 	and	r4,r4,r3
10005ba0:	1146703a 	and	r3,r2,r5
10005ba4:	21000104 	addi	r4,r4,4
10005ba8:	1800041e 	bne	r3,zero,10005bbc <_malloc_r+0x234>
10005bac:	294b883a 	add	r5,r5,r5
10005bb0:	1146703a 	and	r3,r2,r5
10005bb4:	21000104 	addi	r4,r4,4
10005bb8:	183ffc26 	beq	r3,zero,10005bac <__alt_data_end+0xf8005bac>
10005bbc:	023fff04 	movi	r8,-4
10005bc0:	01c003c4 	movi	r7,15
10005bc4:	2105883a 	add	r2,r4,r4
10005bc8:	1085883a 	add	r2,r2,r2
10005bcc:	1085883a 	add	r2,r2,r2
10005bd0:	9897883a 	add	r11,r19,r2
10005bd4:	5a800304 	addi	r10,r11,12
10005bd8:	2019883a 	mov	r12,r4
10005bdc:	54000017 	ldw	r16,0(r10)
10005be0:	51bffd04 	addi	r6,r10,-12
10005be4:	8180041e 	bne	r16,r6,10005bf8 <_malloc_r+0x270>
10005be8:	0000d406 	br	10005f3c <_malloc_r+0x5b4>
10005bec:	1000dd0e 	bge	r2,zero,10005f64 <_malloc_r+0x5dc>
10005bf0:	84000317 	ldw	r16,12(r16)
10005bf4:	8180d126 	beq	r16,r6,10005f3c <_malloc_r+0x5b4>
10005bf8:	80c00117 	ldw	r3,4(r16)
10005bfc:	1a06703a 	and	r3,r3,r8
10005c00:	1c45c83a 	sub	r2,r3,r17
10005c04:	38bff90e 	bge	r7,r2,10005bec <__alt_data_end+0xf8005bec>
10005c08:	80c00317 	ldw	r3,12(r16)
10005c0c:	81000217 	ldw	r4,8(r16)
10005c10:	89400054 	ori	r5,r17,1
10005c14:	81400115 	stw	r5,4(r16)
10005c18:	20c00315 	stw	r3,12(r4)
10005c1c:	19000215 	stw	r4,8(r3)
10005c20:	8463883a 	add	r17,r16,r17
10005c24:	9c400515 	stw	r17,20(r19)
10005c28:	9c400415 	stw	r17,16(r19)
10005c2c:	10c00054 	ori	r3,r2,1
10005c30:	8a400315 	stw	r9,12(r17)
10005c34:	8a400215 	stw	r9,8(r17)
10005c38:	88c00115 	stw	r3,4(r17)
10005c3c:	88a3883a 	add	r17,r17,r2
10005c40:	88800015 	stw	r2,0(r17)
10005c44:	9009883a 	mov	r4,r18
10005c48:	000d92c0 	call	1000d92c <__malloc_unlock>
10005c4c:	80800204 	addi	r2,r16,8
10005c50:	003f7b06 	br	10005a40 <__alt_data_end+0xf8005a40>
10005c54:	01401f84 	movi	r5,126
10005c58:	01000fc4 	movi	r4,63
10005c5c:	003f9106 	br	10005aa4 <__alt_data_end+0xf8005aa4>
10005c60:	80800317 	ldw	r2,12(r16)
10005c64:	81000217 	ldw	r4,8(r16)
10005c68:	80c7883a 	add	r3,r16,r3
10005c6c:	19400117 	ldw	r5,4(r3)
10005c70:	20800315 	stw	r2,12(r4)
10005c74:	11000215 	stw	r4,8(r2)
10005c78:	28800054 	ori	r2,r5,1
10005c7c:	18800115 	stw	r2,4(r3)
10005c80:	9009883a 	mov	r4,r18
10005c84:	000d92c0 	call	1000d92c <__malloc_unlock>
10005c88:	80800204 	addi	r2,r16,8
10005c8c:	003f6c06 	br	10005a40 <__alt_data_end+0xf8005a40>
10005c90:	8085883a 	add	r2,r16,r2
10005c94:	10c00117 	ldw	r3,4(r2)
10005c98:	9009883a 	mov	r4,r18
10005c9c:	18c00054 	ori	r3,r3,1
10005ca0:	10c00115 	stw	r3,4(r2)
10005ca4:	000d92c0 	call	1000d92c <__malloc_unlock>
10005ca8:	80800204 	addi	r2,r16,8
10005cac:	003f6406 	br	10005a40 <__alt_data_end+0xf8005a40>
10005cb0:	9c000217 	ldw	r16,8(r19)
10005cb4:	00bfff04 	movi	r2,-4
10005cb8:	85400117 	ldw	r21,4(r16)
10005cbc:	a8aa703a 	and	r21,r21,r2
10005cc0:	ac400336 	bltu	r21,r17,10005cd0 <_malloc_r+0x348>
10005cc4:	ac45c83a 	sub	r2,r21,r17
10005cc8:	00c003c4 	movi	r3,15
10005ccc:	18805d16 	blt	r3,r2,10005e44 <_malloc_r+0x4bc>
10005cd0:	00840074 	movhi	r2,4097
10005cd4:	108c9304 	addi	r2,r2,12876
10005cd8:	00c40074 	movhi	r3,4097
10005cdc:	18c5c404 	addi	r3,r3,5904
10005ce0:	15c00017 	ldw	r23,0(r2)
10005ce4:	19000017 	ldw	r4,0(r3)
10005ce8:	00bfffc4 	movi	r2,-1
10005cec:	8579883a 	add	fp,r16,r21
10005cf0:	8def883a 	add	r23,r17,r23
10005cf4:	2080e426 	beq	r4,r2,10006088 <_malloc_r+0x700>
10005cf8:	bdc403c4 	addi	r23,r23,4111
10005cfc:	00bc0004 	movi	r2,-4096
10005d00:	b8ae703a 	and	r23,r23,r2
10005d04:	9009883a 	mov	r4,r18
10005d08:	b80b883a 	mov	r5,r23
10005d0c:	d8c00015 	stw	r3,0(sp)
10005d10:	0007b840 	call	10007b84 <_sbrk_r>
10005d14:	1029883a 	mov	r20,r2
10005d18:	00bfffc4 	movi	r2,-1
10005d1c:	d8c00017 	ldw	r3,0(sp)
10005d20:	a080a426 	beq	r20,r2,10005fb4 <_malloc_r+0x62c>
10005d24:	a700a236 	bltu	r20,fp,10005fb0 <_malloc_r+0x628>
10005d28:	05840074 	movhi	r22,4097
10005d2c:	b58c9b04 	addi	r22,r22,12908
10005d30:	b0800017 	ldw	r2,0(r22)
10005d34:	b885883a 	add	r2,r23,r2
10005d38:	b0800015 	stw	r2,0(r22)
10005d3c:	e500da26 	beq	fp,r20,100060a8 <_malloc_r+0x720>
10005d40:	19000017 	ldw	r4,0(r3)
10005d44:	00ffffc4 	movi	r3,-1
10005d48:	20c0e426 	beq	r4,r3,100060dc <_malloc_r+0x754>
10005d4c:	a739c83a 	sub	fp,r20,fp
10005d50:	1705883a 	add	r2,r2,fp
10005d54:	b0800015 	stw	r2,0(r22)
10005d58:	a08001cc 	andi	r2,r20,7
10005d5c:	1000b526 	beq	r2,zero,10006034 <_malloc_r+0x6ac>
10005d60:	a0a9c83a 	sub	r20,r20,r2
10005d64:	00c40204 	movi	r3,4104
10005d68:	a5000204 	addi	r20,r20,8
10005d6c:	1885c83a 	sub	r2,r3,r2
10005d70:	a5c7883a 	add	r3,r20,r23
10005d74:	18c3ffcc 	andi	r3,r3,4095
10005d78:	10efc83a 	sub	r23,r2,r3
10005d7c:	9009883a 	mov	r4,r18
10005d80:	b80b883a 	mov	r5,r23
10005d84:	0007b840 	call	10007b84 <_sbrk_r>
10005d88:	00ffffc4 	movi	r3,-1
10005d8c:	10c0d026 	beq	r2,r3,100060d0 <_malloc_r+0x748>
10005d90:	1505c83a 	sub	r2,r2,r20
10005d94:	b887883a 	add	r3,r23,r2
10005d98:	18c00054 	ori	r3,r3,1
10005d9c:	b0800017 	ldw	r2,0(r22)
10005da0:	9d000215 	stw	r20,8(r19)
10005da4:	a0c00115 	stw	r3,4(r20)
10005da8:	b885883a 	add	r2,r23,r2
10005dac:	b0800015 	stw	r2,0(r22)
10005db0:	84c00e26 	beq	r16,r19,10005dec <_malloc_r+0x464>
10005db4:	00c003c4 	movi	r3,15
10005db8:	1d40a02e 	bgeu	r3,r21,1000603c <_malloc_r+0x6b4>
10005dbc:	81400117 	ldw	r5,4(r16)
10005dc0:	ad7ffd04 	addi	r21,r21,-12
10005dc4:	013ffe04 	movi	r4,-8
10005dc8:	a908703a 	and	r4,r21,r4
10005dcc:	2940004c 	andi	r5,r5,1
10005dd0:	214ab03a 	or	r5,r4,r5
10005dd4:	81400115 	stw	r5,4(r16)
10005dd8:	01800144 	movi	r6,5
10005ddc:	810b883a 	add	r5,r16,r4
10005de0:	29800115 	stw	r6,4(r5)
10005de4:	29800215 	stw	r6,8(r5)
10005de8:	1900c036 	bltu	r3,r4,100060ec <_malloc_r+0x764>
10005dec:	00c40074 	movhi	r3,4097
10005df0:	18cc9204 	addi	r3,r3,12872
10005df4:	19000017 	ldw	r4,0(r3)
10005df8:	2080012e 	bgeu	r4,r2,10005e00 <_malloc_r+0x478>
10005dfc:	18800015 	stw	r2,0(r3)
10005e00:	00c40074 	movhi	r3,4097
10005e04:	18cc9104 	addi	r3,r3,12868
10005e08:	19000017 	ldw	r4,0(r3)
10005e0c:	9c000217 	ldw	r16,8(r19)
10005e10:	2080012e 	bgeu	r4,r2,10005e18 <_malloc_r+0x490>
10005e14:	18800015 	stw	r2,0(r3)
10005e18:	80c00117 	ldw	r3,4(r16)
10005e1c:	00bfff04 	movi	r2,-4
10005e20:	1886703a 	and	r3,r3,r2
10005e24:	1c45c83a 	sub	r2,r3,r17
10005e28:	1c400236 	bltu	r3,r17,10005e34 <_malloc_r+0x4ac>
10005e2c:	00c003c4 	movi	r3,15
10005e30:	18800416 	blt	r3,r2,10005e44 <_malloc_r+0x4bc>
10005e34:	9009883a 	mov	r4,r18
10005e38:	000d92c0 	call	1000d92c <__malloc_unlock>
10005e3c:	0005883a 	mov	r2,zero
10005e40:	003eff06 	br	10005a40 <__alt_data_end+0xf8005a40>
10005e44:	88c00054 	ori	r3,r17,1
10005e48:	80c00115 	stw	r3,4(r16)
10005e4c:	8463883a 	add	r17,r16,r17
10005e50:	10800054 	ori	r2,r2,1
10005e54:	9c400215 	stw	r17,8(r19)
10005e58:	88800115 	stw	r2,4(r17)
10005e5c:	9009883a 	mov	r4,r18
10005e60:	000d92c0 	call	1000d92c <__malloc_unlock>
10005e64:	80800204 	addi	r2,r16,8
10005e68:	003ef506 	br	10005a40 <__alt_data_end+0xf8005a40>
10005e6c:	00800504 	movi	r2,20
10005e70:	1100482e 	bgeu	r2,r4,10005f94 <_malloc_r+0x60c>
10005e74:	00801504 	movi	r2,84
10005e78:	11006836 	bltu	r2,r4,1000601c <_malloc_r+0x694>
10005e7c:	8808d33a 	srli	r4,r17,12
10005e80:	21001b84 	addi	r4,r4,110
10005e84:	210b883a 	add	r5,r4,r4
10005e88:	003f0606 	br	10005aa4 <__alt_data_end+0xf8005aa4>
10005e8c:	1006d27a 	srli	r3,r2,9
10005e90:	01400104 	movi	r5,4
10005e94:	28c0422e 	bgeu	r5,r3,10005fa0 <_malloc_r+0x618>
10005e98:	01400504 	movi	r5,20
10005e9c:	28c07c36 	bltu	r5,r3,10006090 <_malloc_r+0x708>
10005ea0:	194016c4 	addi	r5,r3,91
10005ea4:	294d883a 	add	r6,r5,r5
10005ea8:	318d883a 	add	r6,r6,r6
10005eac:	318d883a 	add	r6,r6,r6
10005eb0:	998d883a 	add	r6,r19,r6
10005eb4:	30c00217 	ldw	r3,8(r6)
10005eb8:	01c40074 	movhi	r7,4097
10005ebc:	39c03b04 	addi	r7,r7,236
10005ec0:	19806326 	beq	r3,r6,10006050 <_malloc_r+0x6c8>
10005ec4:	01ffff04 	movi	r7,-4
10005ec8:	19400117 	ldw	r5,4(r3)
10005ecc:	29ca703a 	and	r5,r5,r7
10005ed0:	1140022e 	bgeu	r2,r5,10005edc <_malloc_r+0x554>
10005ed4:	18c00217 	ldw	r3,8(r3)
10005ed8:	30fffb1e 	bne	r6,r3,10005ec8 <__alt_data_end+0xf8005ec8>
10005edc:	19400317 	ldw	r5,12(r3)
10005ee0:	98800117 	ldw	r2,4(r19)
10005ee4:	81400315 	stw	r5,12(r16)
10005ee8:	80c00215 	stw	r3,8(r16)
10005eec:	2c000215 	stw	r16,8(r5)
10005ef0:	1c000315 	stw	r16,12(r3)
10005ef4:	003f2106 	br	10005b7c <__alt_data_end+0xf8005b7c>
10005ef8:	88800054 	ori	r2,r17,1
10005efc:	80800115 	stw	r2,4(r16)
10005f00:	8463883a 	add	r17,r16,r17
10005f04:	1c400515 	stw	r17,20(r3)
10005f08:	1c400415 	stw	r17,16(r3)
10005f0c:	28800054 	ori	r2,r5,1
10005f10:	88800115 	stw	r2,4(r17)
10005f14:	8a400315 	stw	r9,12(r17)
10005f18:	8a400215 	stw	r9,8(r17)
10005f1c:	8963883a 	add	r17,r17,r5
10005f20:	89400015 	stw	r5,0(r17)
10005f24:	9009883a 	mov	r4,r18
10005f28:	000d92c0 	call	1000d92c <__malloc_unlock>
10005f2c:	80800204 	addi	r2,r16,8
10005f30:	003ec306 	br	10005a40 <__alt_data_end+0xf8005a40>
10005f34:	18800117 	ldw	r2,4(r3)
10005f38:	003f1006 	br	10005b7c <__alt_data_end+0xf8005b7c>
10005f3c:	63000044 	addi	r12,r12,1
10005f40:	608000cc 	andi	r2,r12,3
10005f44:	52800204 	addi	r10,r10,8
10005f48:	103f241e 	bne	r2,zero,10005bdc <__alt_data_end+0xf8005bdc>
10005f4c:	00002106 	br	10005fd4 <_malloc_r+0x64c>
10005f50:	80800204 	addi	r2,r16,8
10005f54:	84000517 	ldw	r16,20(r16)
10005f58:	143eab1e 	bne	r2,r16,10005a08 <__alt_data_end+0xf8005a08>
10005f5c:	21000084 	addi	r4,r4,2
10005f60:	003ee606 	br	10005afc <__alt_data_end+0xf8005afc>
10005f64:	80c7883a 	add	r3,r16,r3
10005f68:	19400117 	ldw	r5,4(r3)
10005f6c:	80800317 	ldw	r2,12(r16)
10005f70:	81000217 	ldw	r4,8(r16)
10005f74:	29400054 	ori	r5,r5,1
10005f78:	19400115 	stw	r5,4(r3)
10005f7c:	20800315 	stw	r2,12(r4)
10005f80:	11000215 	stw	r4,8(r2)
10005f84:	9009883a 	mov	r4,r18
10005f88:	000d92c0 	call	1000d92c <__malloc_unlock>
10005f8c:	80800204 	addi	r2,r16,8
10005f90:	003eab06 	br	10005a40 <__alt_data_end+0xf8005a40>
10005f94:	210016c4 	addi	r4,r4,91
10005f98:	210b883a 	add	r5,r4,r4
10005f9c:	003ec106 	br	10005aa4 <__alt_data_end+0xf8005aa4>
10005fa0:	100ad1ba 	srli	r5,r2,6
10005fa4:	29400e04 	addi	r5,r5,56
10005fa8:	294d883a 	add	r6,r5,r5
10005fac:	003fbe06 	br	10005ea8 <__alt_data_end+0xf8005ea8>
10005fb0:	84ff5d26 	beq	r16,r19,10005d28 <__alt_data_end+0xf8005d28>
10005fb4:	9c000217 	ldw	r16,8(r19)
10005fb8:	00bfff04 	movi	r2,-4
10005fbc:	80c00117 	ldw	r3,4(r16)
10005fc0:	1886703a 	and	r3,r3,r2
10005fc4:	003f9706 	br	10005e24 <__alt_data_end+0xf8005e24>
10005fc8:	5ac00017 	ldw	r11,0(r11)
10005fcc:	213fffc4 	addi	r4,r4,-1
10005fd0:	58805c1e 	bne	r11,r2,10006144 <_malloc_r+0x7bc>
10005fd4:	20c000cc 	andi	r3,r4,3
10005fd8:	58bffe04 	addi	r2,r11,-8
10005fdc:	183ffa1e 	bne	r3,zero,10005fc8 <__alt_data_end+0xf8005fc8>
10005fe0:	98800117 	ldw	r2,4(r19)
10005fe4:	0146303a 	nor	r3,zero,r5
10005fe8:	1884703a 	and	r2,r3,r2
10005fec:	98800115 	stw	r2,4(r19)
10005ff0:	294b883a 	add	r5,r5,r5
10005ff4:	117f2e36 	bltu	r2,r5,10005cb0 <__alt_data_end+0xf8005cb0>
10005ff8:	283f2d26 	beq	r5,zero,10005cb0 <__alt_data_end+0xf8005cb0>
10005ffc:	1146703a 	and	r3,r2,r5
10006000:	6009883a 	mov	r4,r12
10006004:	183eef1e 	bne	r3,zero,10005bc4 <__alt_data_end+0xf8005bc4>
10006008:	294b883a 	add	r5,r5,r5
1000600c:	1146703a 	and	r3,r2,r5
10006010:	21000104 	addi	r4,r4,4
10006014:	183ffc26 	beq	r3,zero,10006008 <__alt_data_end+0xf8006008>
10006018:	003eea06 	br	10005bc4 <__alt_data_end+0xf8005bc4>
1000601c:	00805504 	movi	r2,340
10006020:	11001336 	bltu	r2,r4,10006070 <_malloc_r+0x6e8>
10006024:	8808d3fa 	srli	r4,r17,15
10006028:	21001dc4 	addi	r4,r4,119
1000602c:	210b883a 	add	r5,r4,r4
10006030:	003e9c06 	br	10005aa4 <__alt_data_end+0xf8005aa4>
10006034:	00840004 	movi	r2,4096
10006038:	003f4d06 	br	10005d70 <__alt_data_end+0xf8005d70>
1000603c:	00800044 	movi	r2,1
10006040:	a0800115 	stw	r2,4(r20)
10006044:	a021883a 	mov	r16,r20
10006048:	0007883a 	mov	r3,zero
1000604c:	003f7506 	br	10005e24 <__alt_data_end+0xf8005e24>
10006050:	280bd0ba 	srai	r5,r5,2
10006054:	01800044 	movi	r6,1
10006058:	38800117 	ldw	r2,4(r7)
1000605c:	314c983a 	sll	r6,r6,r5
10006060:	180b883a 	mov	r5,r3
10006064:	3084b03a 	or	r2,r6,r2
10006068:	38800115 	stw	r2,4(r7)
1000606c:	003f9d06 	br	10005ee4 <__alt_data_end+0xf8005ee4>
10006070:	00815504 	movi	r2,1364
10006074:	11001336 	bltu	r2,r4,100060c4 <_malloc_r+0x73c>
10006078:	8808d4ba 	srli	r4,r17,18
1000607c:	21001f04 	addi	r4,r4,124
10006080:	210b883a 	add	r5,r4,r4
10006084:	003e8706 	br	10005aa4 <__alt_data_end+0xf8005aa4>
10006088:	bdc00404 	addi	r23,r23,16
1000608c:	003f1d06 	br	10005d04 <__alt_data_end+0xf8005d04>
10006090:	01401504 	movi	r5,84
10006094:	28c01c36 	bltu	r5,r3,10006108 <_malloc_r+0x780>
10006098:	100ad33a 	srli	r5,r2,12
1000609c:	29401b84 	addi	r5,r5,110
100060a0:	294d883a 	add	r6,r5,r5
100060a4:	003f8006 	br	10005ea8 <__alt_data_end+0xf8005ea8>
100060a8:	e103ffcc 	andi	r4,fp,4095
100060ac:	203f241e 	bne	r4,zero,10005d40 <__alt_data_end+0xf8005d40>
100060b0:	98c00217 	ldw	r3,8(r19)
100060b4:	bd49883a 	add	r4,r23,r21
100060b8:	21000054 	ori	r4,r4,1
100060bc:	19000115 	stw	r4,4(r3)
100060c0:	003f4a06 	br	10005dec <__alt_data_end+0xf8005dec>
100060c4:	01403f04 	movi	r5,252
100060c8:	01001f84 	movi	r4,126
100060cc:	003e7506 	br	10005aa4 <__alt_data_end+0xf8005aa4>
100060d0:	00c00044 	movi	r3,1
100060d4:	002f883a 	mov	r23,zero
100060d8:	003f3006 	br	10005d9c <__alt_data_end+0xf8005d9c>
100060dc:	00840074 	movhi	r2,4097
100060e0:	1085c404 	addi	r2,r2,5904
100060e4:	15000015 	stw	r20,0(r2)
100060e8:	003f1b06 	br	10005d58 <__alt_data_end+0xf8005d58>
100060ec:	9009883a 	mov	r4,r18
100060f0:	81400204 	addi	r5,r16,8
100060f4:	0004e240 	call	10004e24 <_free_r>
100060f8:	00840074 	movhi	r2,4097
100060fc:	108c9b04 	addi	r2,r2,12908
10006100:	10800017 	ldw	r2,0(r2)
10006104:	003f3906 	br	10005dec <__alt_data_end+0xf8005dec>
10006108:	01405504 	movi	r5,340
1000610c:	28c00436 	bltu	r5,r3,10006120 <_malloc_r+0x798>
10006110:	100ad3fa 	srli	r5,r2,15
10006114:	29401dc4 	addi	r5,r5,119
10006118:	294d883a 	add	r6,r5,r5
1000611c:	003f6206 	br	10005ea8 <__alt_data_end+0xf8005ea8>
10006120:	01415504 	movi	r5,1364
10006124:	28c00436 	bltu	r5,r3,10006138 <_malloc_r+0x7b0>
10006128:	100ad4ba 	srli	r5,r2,18
1000612c:	29401f04 	addi	r5,r5,124
10006130:	294d883a 	add	r6,r5,r5
10006134:	003f5c06 	br	10005ea8 <__alt_data_end+0xf8005ea8>
10006138:	01803f04 	movi	r6,252
1000613c:	01401f84 	movi	r5,126
10006140:	003f5906 	br	10005ea8 <__alt_data_end+0xf8005ea8>
10006144:	98800117 	ldw	r2,4(r19)
10006148:	003fa906 	br	10005ff0 <__alt_data_end+0xf8005ff0>

1000614c <memchr>:
1000614c:	208000cc 	andi	r2,r4,3
10006150:	2811883a 	mov	r8,r5
10006154:	10003526 	beq	r2,zero,1000622c <memchr+0xe0>
10006158:	30bfffc4 	addi	r2,r6,-1
1000615c:	30001b26 	beq	r6,zero,100061cc <memchr+0x80>
10006160:	21800003 	ldbu	r6,0(r4)
10006164:	28c03fcc 	andi	r3,r5,255
10006168:	30c01a26 	beq	r6,r3,100061d4 <memchr+0x88>
1000616c:	180d883a 	mov	r6,r3
10006170:	00000406 	br	10006184 <memchr+0x38>
10006174:	10001526 	beq	r2,zero,100061cc <memchr+0x80>
10006178:	20c00003 	ldbu	r3,0(r4)
1000617c:	10bfffc4 	addi	r2,r2,-1
10006180:	19801426 	beq	r3,r6,100061d4 <memchr+0x88>
10006184:	21000044 	addi	r4,r4,1
10006188:	20c000cc 	andi	r3,r4,3
1000618c:	183ff91e 	bne	r3,zero,10006174 <__alt_data_end+0xf8006174>
10006190:	02c000c4 	movi	r11,3
10006194:	58801136 	bltu	r11,r2,100061dc <memchr+0x90>
10006198:	10000c26 	beq	r2,zero,100061cc <memchr+0x80>
1000619c:	20c00003 	ldbu	r3,0(r4)
100061a0:	29403fcc 	andi	r5,r5,255
100061a4:	19400b26 	beq	r3,r5,100061d4 <memchr+0x88>
100061a8:	20c00044 	addi	r3,r4,1
100061ac:	2085883a 	add	r2,r4,r2
100061b0:	41803fcc 	andi	r6,r8,255
100061b4:	00000306 	br	100061c4 <memchr+0x78>
100061b8:	18c00044 	addi	r3,r3,1
100061bc:	197fffc3 	ldbu	r5,-1(r3)
100061c0:	29800426 	beq	r5,r6,100061d4 <memchr+0x88>
100061c4:	1809883a 	mov	r4,r3
100061c8:	18bffb1e 	bne	r3,r2,100061b8 <__alt_data_end+0xf80061b8>
100061cc:	0005883a 	mov	r2,zero
100061d0:	f800283a 	ret
100061d4:	2005883a 	mov	r2,r4
100061d8:	f800283a 	ret
100061dc:	28c03fcc 	andi	r3,r5,255
100061e0:	180c923a 	slli	r6,r3,8
100061e4:	02bfbff4 	movhi	r10,65279
100061e8:	52bfbfc4 	addi	r10,r10,-257
100061ec:	02602074 	movhi	r9,32897
100061f0:	4a602004 	addi	r9,r9,-32640
100061f4:	30c6b03a 	or	r3,r6,r3
100061f8:	180c943a 	slli	r6,r3,16
100061fc:	30ccb03a 	or	r6,r6,r3
10006200:	20c00017 	ldw	r3,0(r4)
10006204:	30c6f03a 	xor	r3,r6,r3
10006208:	1a8f883a 	add	r7,r3,r10
1000620c:	00c6303a 	nor	r3,zero,r3
10006210:	38c6703a 	and	r3,r7,r3
10006214:	1a46703a 	and	r3,r3,r9
10006218:	183fdf1e 	bne	r3,zero,10006198 <__alt_data_end+0xf8006198>
1000621c:	10bfff04 	addi	r2,r2,-4
10006220:	21000104 	addi	r4,r4,4
10006224:	58bff636 	bltu	r11,r2,10006200 <__alt_data_end+0xf8006200>
10006228:	003fdb06 	br	10006198 <__alt_data_end+0xf8006198>
1000622c:	3005883a 	mov	r2,r6
10006230:	003fd706 	br	10006190 <__alt_data_end+0xf8006190>

10006234 <memcpy>:
10006234:	00c003c4 	movi	r3,15
10006238:	2005883a 	mov	r2,r4
1000623c:	1980372e 	bgeu	r3,r6,1000631c <memcpy+0xe8>
10006240:	2146b03a 	or	r3,r4,r5
10006244:	18c000cc 	andi	r3,r3,3
10006248:	1800371e 	bne	r3,zero,10006328 <memcpy+0xf4>
1000624c:	327ffc04 	addi	r9,r6,-16
10006250:	4812d13a 	srli	r9,r9,4
10006254:	2007883a 	mov	r3,r4
10006258:	280f883a 	mov	r7,r5
1000625c:	4808913a 	slli	r4,r9,4
10006260:	1109883a 	add	r4,r2,r4
10006264:	21000404 	addi	r4,r4,16
10006268:	3a000017 	ldw	r8,0(r7)
1000626c:	18c00404 	addi	r3,r3,16
10006270:	39c00404 	addi	r7,r7,16
10006274:	1a3ffc15 	stw	r8,-16(r3)
10006278:	3a3ffd17 	ldw	r8,-12(r7)
1000627c:	1a3ffd15 	stw	r8,-12(r3)
10006280:	3a3ffe17 	ldw	r8,-8(r7)
10006284:	1a3ffe15 	stw	r8,-8(r3)
10006288:	3a3fff17 	ldw	r8,-4(r7)
1000628c:	1a3fff15 	stw	r8,-4(r3)
10006290:	193ff51e 	bne	r3,r4,10006268 <__alt_data_end+0xf8006268>
10006294:	49000044 	addi	r4,r9,1
10006298:	2008913a 	slli	r4,r4,4
1000629c:	328003cc 	andi	r10,r6,15
100062a0:	1107883a 	add	r3,r2,r4
100062a4:	290b883a 	add	r5,r5,r4
100062a8:	010000c4 	movi	r4,3
100062ac:	2280212e 	bgeu	r4,r10,10006334 <memcpy+0x100>
100062b0:	52bfff04 	addi	r10,r10,-4
100062b4:	5014d0ba 	srli	r10,r10,2
100062b8:	180f883a 	mov	r7,r3
100062bc:	2811883a 	mov	r8,r5
100062c0:	5289883a 	add	r4,r10,r10
100062c4:	2109883a 	add	r4,r4,r4
100062c8:	21000104 	addi	r4,r4,4
100062cc:	1909883a 	add	r4,r3,r4
100062d0:	42400017 	ldw	r9,0(r8)
100062d4:	39c00104 	addi	r7,r7,4
100062d8:	42000104 	addi	r8,r8,4
100062dc:	3a7fff15 	stw	r9,-4(r7)
100062e0:	393ffb1e 	bne	r7,r4,100062d0 <__alt_data_end+0xf80062d0>
100062e4:	51000044 	addi	r4,r10,1
100062e8:	2109883a 	add	r4,r4,r4
100062ec:	2109883a 	add	r4,r4,r4
100062f0:	318000cc 	andi	r6,r6,3
100062f4:	1907883a 	add	r3,r3,r4
100062f8:	290b883a 	add	r5,r5,r4
100062fc:	30000c26 	beq	r6,zero,10006330 <memcpy+0xfc>
10006300:	298d883a 	add	r6,r5,r6
10006304:	29c00003 	ldbu	r7,0(r5)
10006308:	18c00044 	addi	r3,r3,1
1000630c:	29400044 	addi	r5,r5,1
10006310:	19ffffc5 	stb	r7,-1(r3)
10006314:	29bffb1e 	bne	r5,r6,10006304 <__alt_data_end+0xf8006304>
10006318:	f800283a 	ret
1000631c:	2007883a 	mov	r3,r4
10006320:	303ff71e 	bne	r6,zero,10006300 <__alt_data_end+0xf8006300>
10006324:	00000206 	br	10006330 <memcpy+0xfc>
10006328:	2007883a 	mov	r3,r4
1000632c:	003ff406 	br	10006300 <__alt_data_end+0xf8006300>
10006330:	f800283a 	ret
10006334:	500d883a 	mov	r6,r10
10006338:	303ff11e 	bne	r6,zero,10006300 <__alt_data_end+0xf8006300>
1000633c:	003ffc06 	br	10006330 <__alt_data_end+0xf8006330>

10006340 <memmove>:
10006340:	2005883a 	mov	r2,r4
10006344:	29000b2e 	bgeu	r5,r4,10006374 <memmove+0x34>
10006348:	298f883a 	add	r7,r5,r6
1000634c:	21c0092e 	bgeu	r4,r7,10006374 <memmove+0x34>
10006350:	2187883a 	add	r3,r4,r6
10006354:	198bc83a 	sub	r5,r3,r6
10006358:	30003e26 	beq	r6,zero,10006454 <memmove+0x114>
1000635c:	39ffffc4 	addi	r7,r7,-1
10006360:	39000003 	ldbu	r4,0(r7)
10006364:	18ffffc4 	addi	r3,r3,-1
10006368:	19000005 	stb	r4,0(r3)
1000636c:	197ffb1e 	bne	r3,r5,1000635c <__alt_data_end+0xf800635c>
10006370:	f800283a 	ret
10006374:	00c003c4 	movi	r3,15
10006378:	1980372e 	bgeu	r3,r6,10006458 <memmove+0x118>
1000637c:	1146b03a 	or	r3,r2,r5
10006380:	18c000cc 	andi	r3,r3,3
10006384:	1800371e 	bne	r3,zero,10006464 <memmove+0x124>
10006388:	327ffc04 	addi	r9,r6,-16
1000638c:	4812d13a 	srli	r9,r9,4
10006390:	280f883a 	mov	r7,r5
10006394:	1007883a 	mov	r3,r2
10006398:	4810913a 	slli	r8,r9,4
1000639c:	1211883a 	add	r8,r2,r8
100063a0:	42000404 	addi	r8,r8,16
100063a4:	39000017 	ldw	r4,0(r7)
100063a8:	18c00404 	addi	r3,r3,16
100063ac:	39c00404 	addi	r7,r7,16
100063b0:	193ffc15 	stw	r4,-16(r3)
100063b4:	393ffd17 	ldw	r4,-12(r7)
100063b8:	193ffd15 	stw	r4,-12(r3)
100063bc:	393ffe17 	ldw	r4,-8(r7)
100063c0:	193ffe15 	stw	r4,-8(r3)
100063c4:	393fff17 	ldw	r4,-4(r7)
100063c8:	193fff15 	stw	r4,-4(r3)
100063cc:	1a3ff51e 	bne	r3,r8,100063a4 <__alt_data_end+0xf80063a4>
100063d0:	49000044 	addi	r4,r9,1
100063d4:	2008913a 	slli	r4,r4,4
100063d8:	328003cc 	andi	r10,r6,15
100063dc:	1107883a 	add	r3,r2,r4
100063e0:	290b883a 	add	r5,r5,r4
100063e4:	010000c4 	movi	r4,3
100063e8:	2280212e 	bgeu	r4,r10,10006470 <memmove+0x130>
100063ec:	52bfff04 	addi	r10,r10,-4
100063f0:	5014d0ba 	srli	r10,r10,2
100063f4:	180f883a 	mov	r7,r3
100063f8:	2809883a 	mov	r4,r5
100063fc:	5291883a 	add	r8,r10,r10
10006400:	4211883a 	add	r8,r8,r8
10006404:	42400104 	addi	r9,r8,4
10006408:	1a53883a 	add	r9,r3,r9
1000640c:	22000017 	ldw	r8,0(r4)
10006410:	39c00104 	addi	r7,r7,4
10006414:	21000104 	addi	r4,r4,4
10006418:	3a3fff15 	stw	r8,-4(r7)
1000641c:	3a7ffb1e 	bne	r7,r9,1000640c <__alt_data_end+0xf800640c>
10006420:	51000044 	addi	r4,r10,1
10006424:	2109883a 	add	r4,r4,r4
10006428:	2109883a 	add	r4,r4,r4
1000642c:	318000cc 	andi	r6,r6,3
10006430:	1907883a 	add	r3,r3,r4
10006434:	290b883a 	add	r5,r5,r4
10006438:	30000c26 	beq	r6,zero,1000646c <memmove+0x12c>
1000643c:	198d883a 	add	r6,r3,r6
10006440:	29c00003 	ldbu	r7,0(r5)
10006444:	18c00044 	addi	r3,r3,1
10006448:	29400044 	addi	r5,r5,1
1000644c:	19ffffc5 	stb	r7,-1(r3)
10006450:	19bffb1e 	bne	r3,r6,10006440 <__alt_data_end+0xf8006440>
10006454:	f800283a 	ret
10006458:	1007883a 	mov	r3,r2
1000645c:	303ff71e 	bne	r6,zero,1000643c <__alt_data_end+0xf800643c>
10006460:	00000206 	br	1000646c <memmove+0x12c>
10006464:	1007883a 	mov	r3,r2
10006468:	003ff406 	br	1000643c <__alt_data_end+0xf800643c>
1000646c:	f800283a 	ret
10006470:	500d883a 	mov	r6,r10
10006474:	303ff11e 	bne	r6,zero,1000643c <__alt_data_end+0xf800643c>
10006478:	003ffc06 	br	1000646c <__alt_data_end+0xf800646c>

1000647c <memset>:
1000647c:	20c000cc 	andi	r3,r4,3
10006480:	2005883a 	mov	r2,r4
10006484:	18003f26 	beq	r3,zero,10006584 <memset+0x108>
10006488:	31ffffc4 	addi	r7,r6,-1
1000648c:	30003b26 	beq	r6,zero,1000657c <memset+0x100>
10006490:	2813883a 	mov	r9,r5
10006494:	200d883a 	mov	r6,r4
10006498:	2007883a 	mov	r3,r4
1000649c:	00000406 	br	100064b0 <memset+0x34>
100064a0:	3a3fffc4 	addi	r8,r7,-1
100064a4:	31800044 	addi	r6,r6,1
100064a8:	38003426 	beq	r7,zero,1000657c <memset+0x100>
100064ac:	400f883a 	mov	r7,r8
100064b0:	18c00044 	addi	r3,r3,1
100064b4:	32400005 	stb	r9,0(r6)
100064b8:	1a0000cc 	andi	r8,r3,3
100064bc:	403ff81e 	bne	r8,zero,100064a0 <__alt_data_end+0xf80064a0>
100064c0:	010000c4 	movi	r4,3
100064c4:	21c0282e 	bgeu	r4,r7,10006568 <memset+0xec>
100064c8:	29003fcc 	andi	r4,r5,255
100064cc:	2010923a 	slli	r8,r4,8
100064d0:	4108b03a 	or	r4,r8,r4
100064d4:	2010943a 	slli	r8,r4,16
100064d8:	4110b03a 	or	r8,r8,r4
100064dc:	010003c4 	movi	r4,15
100064e0:	21c0122e 	bgeu	r4,r7,1000652c <memset+0xb0>
100064e4:	3a7ffc04 	addi	r9,r7,-16
100064e8:	4812d13a 	srli	r9,r9,4
100064ec:	19000404 	addi	r4,r3,16
100064f0:	180d883a 	mov	r6,r3
100064f4:	4814913a 	slli	r10,r9,4
100064f8:	2289883a 	add	r4,r4,r10
100064fc:	32000015 	stw	r8,0(r6)
10006500:	32000115 	stw	r8,4(r6)
10006504:	32000215 	stw	r8,8(r6)
10006508:	32000315 	stw	r8,12(r6)
1000650c:	31800404 	addi	r6,r6,16
10006510:	313ffa1e 	bne	r6,r4,100064fc <__alt_data_end+0xf80064fc>
10006514:	4a400044 	addi	r9,r9,1
10006518:	4812913a 	slli	r9,r9,4
1000651c:	39c003cc 	andi	r7,r7,15
10006520:	010000c4 	movi	r4,3
10006524:	1a47883a 	add	r3,r3,r9
10006528:	21c00f2e 	bgeu	r4,r7,10006568 <memset+0xec>
1000652c:	3a7fff04 	addi	r9,r7,-4
10006530:	4812d0ba 	srli	r9,r9,2
10006534:	19000104 	addi	r4,r3,4
10006538:	180d883a 	mov	r6,r3
1000653c:	4a55883a 	add	r10,r9,r9
10006540:	5295883a 	add	r10,r10,r10
10006544:	2289883a 	add	r4,r4,r10
10006548:	32000015 	stw	r8,0(r6)
1000654c:	31800104 	addi	r6,r6,4
10006550:	313ffd1e 	bne	r6,r4,10006548 <__alt_data_end+0xf8006548>
10006554:	4a400044 	addi	r9,r9,1
10006558:	4a53883a 	add	r9,r9,r9
1000655c:	4a53883a 	add	r9,r9,r9
10006560:	1a47883a 	add	r3,r3,r9
10006564:	39c000cc 	andi	r7,r7,3
10006568:	38000526 	beq	r7,zero,10006580 <memset+0x104>
1000656c:	19cf883a 	add	r7,r3,r7
10006570:	19400005 	stb	r5,0(r3)
10006574:	18c00044 	addi	r3,r3,1
10006578:	19fffd1e 	bne	r3,r7,10006570 <__alt_data_end+0xf8006570>
1000657c:	f800283a 	ret
10006580:	f800283a 	ret
10006584:	2007883a 	mov	r3,r4
10006588:	300f883a 	mov	r7,r6
1000658c:	003fcc06 	br	100064c0 <__alt_data_end+0xf80064c0>

10006590 <_Balloc>:
10006590:	20801317 	ldw	r2,76(r4)
10006594:	defffc04 	addi	sp,sp,-16
10006598:	dc400115 	stw	r17,4(sp)
1000659c:	dc000015 	stw	r16,0(sp)
100065a0:	dfc00315 	stw	ra,12(sp)
100065a4:	dc800215 	stw	r18,8(sp)
100065a8:	2023883a 	mov	r17,r4
100065ac:	2821883a 	mov	r16,r5
100065b0:	10000f26 	beq	r2,zero,100065f0 <_Balloc+0x60>
100065b4:	8407883a 	add	r3,r16,r16
100065b8:	18c7883a 	add	r3,r3,r3
100065bc:	10c7883a 	add	r3,r2,r3
100065c0:	18800017 	ldw	r2,0(r3)
100065c4:	10001126 	beq	r2,zero,1000660c <_Balloc+0x7c>
100065c8:	11000017 	ldw	r4,0(r2)
100065cc:	19000015 	stw	r4,0(r3)
100065d0:	10000415 	stw	zero,16(r2)
100065d4:	10000315 	stw	zero,12(r2)
100065d8:	dfc00317 	ldw	ra,12(sp)
100065dc:	dc800217 	ldw	r18,8(sp)
100065e0:	dc400117 	ldw	r17,4(sp)
100065e4:	dc000017 	ldw	r16,0(sp)
100065e8:	dec00404 	addi	sp,sp,16
100065ec:	f800283a 	ret
100065f0:	01400104 	movi	r5,4
100065f4:	01800844 	movi	r6,33
100065f8:	00094180 	call	10009418 <_calloc_r>
100065fc:	88801315 	stw	r2,76(r17)
10006600:	103fec1e 	bne	r2,zero,100065b4 <__alt_data_end+0xf80065b4>
10006604:	0005883a 	mov	r2,zero
10006608:	003ff306 	br	100065d8 <__alt_data_end+0xf80065d8>
1000660c:	01400044 	movi	r5,1
10006610:	2c24983a 	sll	r18,r5,r16
10006614:	8809883a 	mov	r4,r17
10006618:	91800144 	addi	r6,r18,5
1000661c:	318d883a 	add	r6,r6,r6
10006620:	318d883a 	add	r6,r6,r6
10006624:	00094180 	call	10009418 <_calloc_r>
10006628:	103ff626 	beq	r2,zero,10006604 <__alt_data_end+0xf8006604>
1000662c:	14000115 	stw	r16,4(r2)
10006630:	14800215 	stw	r18,8(r2)
10006634:	003fe606 	br	100065d0 <__alt_data_end+0xf80065d0>

10006638 <_Bfree>:
10006638:	28000826 	beq	r5,zero,1000665c <_Bfree+0x24>
1000663c:	28c00117 	ldw	r3,4(r5)
10006640:	20801317 	ldw	r2,76(r4)
10006644:	18c7883a 	add	r3,r3,r3
10006648:	18c7883a 	add	r3,r3,r3
1000664c:	10c5883a 	add	r2,r2,r3
10006650:	10c00017 	ldw	r3,0(r2)
10006654:	28c00015 	stw	r3,0(r5)
10006658:	11400015 	stw	r5,0(r2)
1000665c:	f800283a 	ret

10006660 <__multadd>:
10006660:	defff604 	addi	sp,sp,-40
10006664:	dd400515 	stw	r21,20(sp)
10006668:	2d400417 	ldw	r21,16(r5)
1000666c:	df000815 	stw	fp,32(sp)
10006670:	ddc00715 	stw	r23,28(sp)
10006674:	dd800615 	stw	r22,24(sp)
10006678:	dd000415 	stw	r20,16(sp)
1000667c:	dc400115 	stw	r17,4(sp)
10006680:	dc000015 	stw	r16,0(sp)
10006684:	dfc00915 	stw	ra,36(sp)
10006688:	dcc00315 	stw	r19,12(sp)
1000668c:	dc800215 	stw	r18,8(sp)
10006690:	282d883a 	mov	r22,r5
10006694:	202f883a 	mov	r23,r4
10006698:	3029883a 	mov	r20,r6
1000669c:	3839883a 	mov	fp,r7
100066a0:	2c000504 	addi	r16,r5,20
100066a4:	0023883a 	mov	r17,zero
100066a8:	84c00017 	ldw	r19,0(r16)
100066ac:	a00b883a 	mov	r5,r20
100066b0:	8c400044 	addi	r17,r17,1
100066b4:	993fffcc 	andi	r4,r19,65535
100066b8:	000ab040 	call	1000ab04 <__mulsi3>
100066bc:	1725883a 	add	r18,r2,fp
100066c0:	9808d43a 	srli	r4,r19,16
100066c4:	9026d43a 	srli	r19,r18,16
100066c8:	a00b883a 	mov	r5,r20
100066cc:	000ab040 	call	1000ab04 <__mulsi3>
100066d0:	988f883a 	add	r7,r19,r2
100066d4:	3804943a 	slli	r2,r7,16
100066d8:	94bfffcc 	andi	r18,r18,65535
100066dc:	3838d43a 	srli	fp,r7,16
100066e0:	14a5883a 	add	r18,r2,r18
100066e4:	84800015 	stw	r18,0(r16)
100066e8:	84000104 	addi	r16,r16,4
100066ec:	8d7fee16 	blt	r17,r21,100066a8 <__alt_data_end+0xf80066a8>
100066f0:	e0000926 	beq	fp,zero,10006718 <__multadd+0xb8>
100066f4:	b0800217 	ldw	r2,8(r22)
100066f8:	a880140e 	bge	r21,r2,1000674c <__multadd+0xec>
100066fc:	a8800144 	addi	r2,r21,5
10006700:	1085883a 	add	r2,r2,r2
10006704:	1085883a 	add	r2,r2,r2
10006708:	b085883a 	add	r2,r22,r2
1000670c:	17000015 	stw	fp,0(r2)
10006710:	ad400044 	addi	r21,r21,1
10006714:	b5400415 	stw	r21,16(r22)
10006718:	b005883a 	mov	r2,r22
1000671c:	dfc00917 	ldw	ra,36(sp)
10006720:	df000817 	ldw	fp,32(sp)
10006724:	ddc00717 	ldw	r23,28(sp)
10006728:	dd800617 	ldw	r22,24(sp)
1000672c:	dd400517 	ldw	r21,20(sp)
10006730:	dd000417 	ldw	r20,16(sp)
10006734:	dcc00317 	ldw	r19,12(sp)
10006738:	dc800217 	ldw	r18,8(sp)
1000673c:	dc400117 	ldw	r17,4(sp)
10006740:	dc000017 	ldw	r16,0(sp)
10006744:	dec00a04 	addi	sp,sp,40
10006748:	f800283a 	ret
1000674c:	b1400117 	ldw	r5,4(r22)
10006750:	b809883a 	mov	r4,r23
10006754:	29400044 	addi	r5,r5,1
10006758:	00065900 	call	10006590 <_Balloc>
1000675c:	b1800417 	ldw	r6,16(r22)
10006760:	b1400304 	addi	r5,r22,12
10006764:	11000304 	addi	r4,r2,12
10006768:	31800084 	addi	r6,r6,2
1000676c:	318d883a 	add	r6,r6,r6
10006770:	318d883a 	add	r6,r6,r6
10006774:	1021883a 	mov	r16,r2
10006778:	00062340 	call	10006234 <memcpy>
1000677c:	b0c00117 	ldw	r3,4(r22)
10006780:	b8801317 	ldw	r2,76(r23)
10006784:	18c7883a 	add	r3,r3,r3
10006788:	18c7883a 	add	r3,r3,r3
1000678c:	10c5883a 	add	r2,r2,r3
10006790:	10c00017 	ldw	r3,0(r2)
10006794:	b0c00015 	stw	r3,0(r22)
10006798:	15800015 	stw	r22,0(r2)
1000679c:	802d883a 	mov	r22,r16
100067a0:	003fd606 	br	100066fc <__alt_data_end+0xf80066fc>

100067a4 <__s2b>:
100067a4:	defff904 	addi	sp,sp,-28
100067a8:	dd000415 	stw	r20,16(sp)
100067ac:	dc400115 	stw	r17,4(sp)
100067b0:	2829883a 	mov	r20,r5
100067b4:	2023883a 	mov	r17,r4
100067b8:	01400244 	movi	r5,9
100067bc:	39000204 	addi	r4,r7,8
100067c0:	dcc00315 	stw	r19,12(sp)
100067c4:	dc800215 	stw	r18,8(sp)
100067c8:	dfc00615 	stw	ra,24(sp)
100067cc:	dd400515 	stw	r21,20(sp)
100067d0:	dc000015 	stw	r16,0(sp)
100067d4:	3827883a 	mov	r19,r7
100067d8:	3025883a 	mov	r18,r6
100067dc:	000aa600 	call	1000aa60 <__divsi3>
100067e0:	00c00044 	movi	r3,1
100067e4:	000b883a 	mov	r5,zero
100067e8:	1880030e 	bge	r3,r2,100067f8 <__s2b+0x54>
100067ec:	18c7883a 	add	r3,r3,r3
100067f0:	29400044 	addi	r5,r5,1
100067f4:	18bffd16 	blt	r3,r2,100067ec <__alt_data_end+0xf80067ec>
100067f8:	8809883a 	mov	r4,r17
100067fc:	00065900 	call	10006590 <_Balloc>
10006800:	d8c00717 	ldw	r3,28(sp)
10006804:	10c00515 	stw	r3,20(r2)
10006808:	00c00044 	movi	r3,1
1000680c:	10c00415 	stw	r3,16(r2)
10006810:	00c00244 	movi	r3,9
10006814:	1c80210e 	bge	r3,r18,1000689c <__s2b+0xf8>
10006818:	a0eb883a 	add	r21,r20,r3
1000681c:	a821883a 	mov	r16,r21
10006820:	a4a9883a 	add	r20,r20,r18
10006824:	81c00007 	ldb	r7,0(r16)
10006828:	8809883a 	mov	r4,r17
1000682c:	84000044 	addi	r16,r16,1
10006830:	100b883a 	mov	r5,r2
10006834:	01800284 	movi	r6,10
10006838:	39fff404 	addi	r7,r7,-48
1000683c:	00066600 	call	10006660 <__multadd>
10006840:	853ff81e 	bne	r16,r20,10006824 <__alt_data_end+0xf8006824>
10006844:	aca1883a 	add	r16,r21,r18
10006848:	843ffe04 	addi	r16,r16,-8
1000684c:	94c00a0e 	bge	r18,r19,10006878 <__s2b+0xd4>
10006850:	84e7883a 	add	r19,r16,r19
10006854:	9ca5c83a 	sub	r18,r19,r18
10006858:	81c00007 	ldb	r7,0(r16)
1000685c:	8809883a 	mov	r4,r17
10006860:	84000044 	addi	r16,r16,1
10006864:	100b883a 	mov	r5,r2
10006868:	01800284 	movi	r6,10
1000686c:	39fff404 	addi	r7,r7,-48
10006870:	00066600 	call	10006660 <__multadd>
10006874:	84bff81e 	bne	r16,r18,10006858 <__alt_data_end+0xf8006858>
10006878:	dfc00617 	ldw	ra,24(sp)
1000687c:	dd400517 	ldw	r21,20(sp)
10006880:	dd000417 	ldw	r20,16(sp)
10006884:	dcc00317 	ldw	r19,12(sp)
10006888:	dc800217 	ldw	r18,8(sp)
1000688c:	dc400117 	ldw	r17,4(sp)
10006890:	dc000017 	ldw	r16,0(sp)
10006894:	dec00704 	addi	sp,sp,28
10006898:	f800283a 	ret
1000689c:	a4000284 	addi	r16,r20,10
100068a0:	1825883a 	mov	r18,r3
100068a4:	003fe906 	br	1000684c <__alt_data_end+0xf800684c>

100068a8 <__hi0bits>:
100068a8:	20bfffec 	andhi	r2,r4,65535
100068ac:	1000141e 	bne	r2,zero,10006900 <__hi0bits+0x58>
100068b0:	2008943a 	slli	r4,r4,16
100068b4:	00800404 	movi	r2,16
100068b8:	20ffc02c 	andhi	r3,r4,65280
100068bc:	1800021e 	bne	r3,zero,100068c8 <__hi0bits+0x20>
100068c0:	2008923a 	slli	r4,r4,8
100068c4:	10800204 	addi	r2,r2,8
100068c8:	20fc002c 	andhi	r3,r4,61440
100068cc:	1800021e 	bne	r3,zero,100068d8 <__hi0bits+0x30>
100068d0:	2008913a 	slli	r4,r4,4
100068d4:	10800104 	addi	r2,r2,4
100068d8:	20f0002c 	andhi	r3,r4,49152
100068dc:	1800031e 	bne	r3,zero,100068ec <__hi0bits+0x44>
100068e0:	2109883a 	add	r4,r4,r4
100068e4:	10800084 	addi	r2,r2,2
100068e8:	2109883a 	add	r4,r4,r4
100068ec:	20000316 	blt	r4,zero,100068fc <__hi0bits+0x54>
100068f0:	2110002c 	andhi	r4,r4,16384
100068f4:	2000041e 	bne	r4,zero,10006908 <__hi0bits+0x60>
100068f8:	00800804 	movi	r2,32
100068fc:	f800283a 	ret
10006900:	0005883a 	mov	r2,zero
10006904:	003fec06 	br	100068b8 <__alt_data_end+0xf80068b8>
10006908:	10800044 	addi	r2,r2,1
1000690c:	f800283a 	ret

10006910 <__lo0bits>:
10006910:	20c00017 	ldw	r3,0(r4)
10006914:	188001cc 	andi	r2,r3,7
10006918:	10000826 	beq	r2,zero,1000693c <__lo0bits+0x2c>
1000691c:	1880004c 	andi	r2,r3,1
10006920:	1000211e 	bne	r2,zero,100069a8 <__lo0bits+0x98>
10006924:	1880008c 	andi	r2,r3,2
10006928:	1000211e 	bne	r2,zero,100069b0 <__lo0bits+0xa0>
1000692c:	1806d0ba 	srli	r3,r3,2
10006930:	00800084 	movi	r2,2
10006934:	20c00015 	stw	r3,0(r4)
10006938:	f800283a 	ret
1000693c:	18bfffcc 	andi	r2,r3,65535
10006940:	10001326 	beq	r2,zero,10006990 <__lo0bits+0x80>
10006944:	0005883a 	mov	r2,zero
10006948:	19403fcc 	andi	r5,r3,255
1000694c:	2800021e 	bne	r5,zero,10006958 <__lo0bits+0x48>
10006950:	1806d23a 	srli	r3,r3,8
10006954:	10800204 	addi	r2,r2,8
10006958:	194003cc 	andi	r5,r3,15
1000695c:	2800021e 	bne	r5,zero,10006968 <__lo0bits+0x58>
10006960:	1806d13a 	srli	r3,r3,4
10006964:	10800104 	addi	r2,r2,4
10006968:	194000cc 	andi	r5,r3,3
1000696c:	2800021e 	bne	r5,zero,10006978 <__lo0bits+0x68>
10006970:	1806d0ba 	srli	r3,r3,2
10006974:	10800084 	addi	r2,r2,2
10006978:	1940004c 	andi	r5,r3,1
1000697c:	2800081e 	bne	r5,zero,100069a0 <__lo0bits+0x90>
10006980:	1806d07a 	srli	r3,r3,1
10006984:	1800051e 	bne	r3,zero,1000699c <__lo0bits+0x8c>
10006988:	00800804 	movi	r2,32
1000698c:	f800283a 	ret
10006990:	1806d43a 	srli	r3,r3,16
10006994:	00800404 	movi	r2,16
10006998:	003feb06 	br	10006948 <__alt_data_end+0xf8006948>
1000699c:	10800044 	addi	r2,r2,1
100069a0:	20c00015 	stw	r3,0(r4)
100069a4:	f800283a 	ret
100069a8:	0005883a 	mov	r2,zero
100069ac:	f800283a 	ret
100069b0:	1806d07a 	srli	r3,r3,1
100069b4:	00800044 	movi	r2,1
100069b8:	20c00015 	stw	r3,0(r4)
100069bc:	f800283a 	ret

100069c0 <__i2b>:
100069c0:	defffd04 	addi	sp,sp,-12
100069c4:	dc000015 	stw	r16,0(sp)
100069c8:	04000044 	movi	r16,1
100069cc:	dc400115 	stw	r17,4(sp)
100069d0:	2823883a 	mov	r17,r5
100069d4:	800b883a 	mov	r5,r16
100069d8:	dfc00215 	stw	ra,8(sp)
100069dc:	00065900 	call	10006590 <_Balloc>
100069e0:	14400515 	stw	r17,20(r2)
100069e4:	14000415 	stw	r16,16(r2)
100069e8:	dfc00217 	ldw	ra,8(sp)
100069ec:	dc400117 	ldw	r17,4(sp)
100069f0:	dc000017 	ldw	r16,0(sp)
100069f4:	dec00304 	addi	sp,sp,12
100069f8:	f800283a 	ret

100069fc <__multiply>:
100069fc:	defff004 	addi	sp,sp,-64
10006a00:	dc400715 	stw	r17,28(sp)
10006a04:	dc000615 	stw	r16,24(sp)
10006a08:	34400417 	ldw	r17,16(r6)
10006a0c:	2c000417 	ldw	r16,16(r5)
10006a10:	df000e15 	stw	fp,56(sp)
10006a14:	dd000a15 	stw	r20,40(sp)
10006a18:	dfc00f15 	stw	ra,60(sp)
10006a1c:	ddc00d15 	stw	r23,52(sp)
10006a20:	dd800c15 	stw	r22,48(sp)
10006a24:	dd400b15 	stw	r21,44(sp)
10006a28:	dcc00915 	stw	r19,36(sp)
10006a2c:	dc800815 	stw	r18,32(sp)
10006a30:	2839883a 	mov	fp,r5
10006a34:	3029883a 	mov	r20,r6
10006a38:	8440050e 	bge	r16,r17,10006a50 <__multiply+0x54>
10006a3c:	8007883a 	mov	r3,r16
10006a40:	3039883a 	mov	fp,r6
10006a44:	8821883a 	mov	r16,r17
10006a48:	2829883a 	mov	r20,r5
10006a4c:	1823883a 	mov	r17,r3
10006a50:	e0800217 	ldw	r2,8(fp)
10006a54:	8447883a 	add	r3,r16,r17
10006a58:	d8c00115 	stw	r3,4(sp)
10006a5c:	e1400117 	ldw	r5,4(fp)
10006a60:	10c0010e 	bge	r2,r3,10006a68 <__multiply+0x6c>
10006a64:	29400044 	addi	r5,r5,1
10006a68:	00065900 	call	10006590 <_Balloc>
10006a6c:	d8c00117 	ldw	r3,4(sp)
10006a70:	d8800515 	stw	r2,20(sp)
10006a74:	18ef883a 	add	r23,r3,r3
10006a78:	bdef883a 	add	r23,r23,r23
10006a7c:	10c00504 	addi	r3,r2,20
10006a80:	1def883a 	add	r23,r3,r23
10006a84:	d8c00015 	stw	r3,0(sp)
10006a88:	ddc00215 	stw	r23,8(sp)
10006a8c:	1805883a 	mov	r2,r3
10006a90:	1dc0042e 	bgeu	r3,r23,10006aa4 <__multiply+0xa8>
10006a94:	d8c00217 	ldw	r3,8(sp)
10006a98:	10000015 	stw	zero,0(r2)
10006a9c:	10800104 	addi	r2,r2,4
10006aa0:	10fffc36 	bltu	r2,r3,10006a94 <__alt_data_end+0xf8006a94>
10006aa4:	8c63883a 	add	r17,r17,r17
10006aa8:	a5000504 	addi	r20,r20,20
10006aac:	8c63883a 	add	r17,r17,r17
10006ab0:	e7000504 	addi	fp,fp,20
10006ab4:	8421883a 	add	r16,r16,r16
10006ab8:	a463883a 	add	r17,r20,r17
10006abc:	8421883a 	add	r16,r16,r16
10006ac0:	df000315 	stw	fp,12(sp)
10006ac4:	dc400415 	stw	r17,16(sp)
10006ac8:	e425883a 	add	r18,fp,r16
10006acc:	a440482e 	bgeu	r20,r17,10006bf0 <__multiply+0x1f4>
10006ad0:	a4000017 	ldw	r16,0(r20)
10006ad4:	847fffcc 	andi	r17,r16,65535
10006ad8:	88001d26 	beq	r17,zero,10006b50 <__multiply+0x154>
10006adc:	dc000017 	ldw	r16,0(sp)
10006ae0:	dcc00317 	ldw	r19,12(sp)
10006ae4:	002b883a 	mov	r21,zero
10006ae8:	9dc00017 	ldw	r23,0(r19)
10006aec:	85800017 	ldw	r22,0(r16)
10006af0:	880b883a 	mov	r5,r17
10006af4:	b93fffcc 	andi	r4,r23,65535
10006af8:	000ab040 	call	1000ab04 <__mulsi3>
10006afc:	b808d43a 	srli	r4,r23,16
10006b00:	b0ffffcc 	andi	r3,r22,65535
10006b04:	1885883a 	add	r2,r3,r2
10006b08:	880b883a 	mov	r5,r17
10006b0c:	156b883a 	add	r21,r2,r21
10006b10:	b02cd43a 	srli	r22,r22,16
10006b14:	000ab040 	call	1000ab04 <__mulsi3>
10006b18:	a808d43a 	srli	r4,r21,16
10006b1c:	b085883a 	add	r2,r22,r2
10006b20:	a8ffffcc 	andi	r3,r21,65535
10006b24:	110d883a 	add	r6,r2,r4
10006b28:	3004943a 	slli	r2,r6,16
10006b2c:	9cc00104 	addi	r19,r19,4
10006b30:	8009883a 	mov	r4,r16
10006b34:	10c6b03a 	or	r3,r2,r3
10006b38:	80c00015 	stw	r3,0(r16)
10006b3c:	302ad43a 	srli	r21,r6,16
10006b40:	84000104 	addi	r16,r16,4
10006b44:	9cbfe836 	bltu	r19,r18,10006ae8 <__alt_data_end+0xf8006ae8>
10006b48:	25400115 	stw	r21,4(r4)
10006b4c:	a4000017 	ldw	r16,0(r20)
10006b50:	8020d43a 	srli	r16,r16,16
10006b54:	80002026 	beq	r16,zero,10006bd8 <__multiply+0x1dc>
10006b58:	d8c00017 	ldw	r3,0(sp)
10006b5c:	dd400317 	ldw	r21,12(sp)
10006b60:	002f883a 	mov	r23,zero
10006b64:	1f000017 	ldw	fp,0(r3)
10006b68:	182d883a 	mov	r22,r3
10006b6c:	e023883a 	mov	r17,fp
10006b70:	a900000b 	ldhu	r4,0(r21)
10006b74:	8822d43a 	srli	r17,r17,16
10006b78:	800b883a 	mov	r5,r16
10006b7c:	000ab040 	call	1000ab04 <__mulsi3>
10006b80:	1445883a 	add	r2,r2,r17
10006b84:	15ef883a 	add	r23,r2,r23
10006b88:	b804943a 	slli	r2,r23,16
10006b8c:	e1ffffcc 	andi	r7,fp,65535
10006b90:	ad400104 	addi	r21,r21,4
10006b94:	11ceb03a 	or	r7,r2,r7
10006b98:	b1c00015 	stw	r7,0(r22)
10006b9c:	a93fff17 	ldw	r4,-4(r21)
10006ba0:	b7000117 	ldw	fp,4(r22)
10006ba4:	800b883a 	mov	r5,r16
10006ba8:	2008d43a 	srli	r4,r4,16
10006bac:	e023883a 	mov	r17,fp
10006bb0:	b027883a 	mov	r19,r22
10006bb4:	000ab040 	call	1000ab04 <__mulsi3>
10006bb8:	b812d43a 	srli	r9,r23,16
10006bbc:	e23fffcc 	andi	r8,fp,65535
10006bc0:	1205883a 	add	r2,r2,r8
10006bc4:	1279883a 	add	fp,r2,r9
10006bc8:	b5800104 	addi	r22,r22,4
10006bcc:	e02ed43a 	srli	r23,fp,16
10006bd0:	acbfe736 	bltu	r21,r18,10006b70 <__alt_data_end+0xf8006b70>
10006bd4:	9f000115 	stw	fp,4(r19)
10006bd8:	d8c00017 	ldw	r3,0(sp)
10006bdc:	a5000104 	addi	r20,r20,4
10006be0:	18c00104 	addi	r3,r3,4
10006be4:	d8c00015 	stw	r3,0(sp)
10006be8:	d8c00417 	ldw	r3,16(sp)
10006bec:	a0ffb836 	bltu	r20,r3,10006ad0 <__alt_data_end+0xf8006ad0>
10006bf0:	d8c00117 	ldw	r3,4(sp)
10006bf4:	00c00c0e 	bge	zero,r3,10006c28 <__multiply+0x22c>
10006bf8:	d8c00217 	ldw	r3,8(sp)
10006bfc:	18bfff17 	ldw	r2,-4(r3)
10006c00:	1dffff04 	addi	r23,r3,-4
10006c04:	10000326 	beq	r2,zero,10006c14 <__multiply+0x218>
10006c08:	00000706 	br	10006c28 <__multiply+0x22c>
10006c0c:	b8800017 	ldw	r2,0(r23)
10006c10:	1000051e 	bne	r2,zero,10006c28 <__multiply+0x22c>
10006c14:	d8c00117 	ldw	r3,4(sp)
10006c18:	bdffff04 	addi	r23,r23,-4
10006c1c:	18ffffc4 	addi	r3,r3,-1
10006c20:	d8c00115 	stw	r3,4(sp)
10006c24:	183ff91e 	bne	r3,zero,10006c0c <__alt_data_end+0xf8006c0c>
10006c28:	d8c00517 	ldw	r3,20(sp)
10006c2c:	d9000117 	ldw	r4,4(sp)
10006c30:	1805883a 	mov	r2,r3
10006c34:	19000415 	stw	r4,16(r3)
10006c38:	dfc00f17 	ldw	ra,60(sp)
10006c3c:	df000e17 	ldw	fp,56(sp)
10006c40:	ddc00d17 	ldw	r23,52(sp)
10006c44:	dd800c17 	ldw	r22,48(sp)
10006c48:	dd400b17 	ldw	r21,44(sp)
10006c4c:	dd000a17 	ldw	r20,40(sp)
10006c50:	dcc00917 	ldw	r19,36(sp)
10006c54:	dc800817 	ldw	r18,32(sp)
10006c58:	dc400717 	ldw	r17,28(sp)
10006c5c:	dc000617 	ldw	r16,24(sp)
10006c60:	dec01004 	addi	sp,sp,64
10006c64:	f800283a 	ret

10006c68 <__pow5mult>:
10006c68:	defffa04 	addi	sp,sp,-24
10006c6c:	dcc00315 	stw	r19,12(sp)
10006c70:	dc800215 	stw	r18,8(sp)
10006c74:	dc000015 	stw	r16,0(sp)
10006c78:	dfc00515 	stw	ra,20(sp)
10006c7c:	dd000415 	stw	r20,16(sp)
10006c80:	dc400115 	stw	r17,4(sp)
10006c84:	308000cc 	andi	r2,r6,3
10006c88:	3021883a 	mov	r16,r6
10006c8c:	2027883a 	mov	r19,r4
10006c90:	2825883a 	mov	r18,r5
10006c94:	1000301e 	bne	r2,zero,10006d58 <__pow5mult+0xf0>
10006c98:	8021d0ba 	srai	r16,r16,2
10006c9c:	80001b26 	beq	r16,zero,10006d0c <__pow5mult+0xa4>
10006ca0:	9c401217 	ldw	r17,72(r19)
10006ca4:	88003726 	beq	r17,zero,10006d84 <__pow5mult+0x11c>
10006ca8:	80c0004c 	andi	r3,r16,1
10006cac:	1800071e 	bne	r3,zero,10006ccc <__pow5mult+0x64>
10006cb0:	8021d07a 	srai	r16,r16,1
10006cb4:	80001526 	beq	r16,zero,10006d0c <__pow5mult+0xa4>
10006cb8:	88800017 	ldw	r2,0(r17)
10006cbc:	10001c26 	beq	r2,zero,10006d30 <__pow5mult+0xc8>
10006cc0:	1023883a 	mov	r17,r2
10006cc4:	80c0004c 	andi	r3,r16,1
10006cc8:	183ff926 	beq	r3,zero,10006cb0 <__alt_data_end+0xf8006cb0>
10006ccc:	900b883a 	mov	r5,r18
10006cd0:	880d883a 	mov	r6,r17
10006cd4:	9809883a 	mov	r4,r19
10006cd8:	00069fc0 	call	100069fc <__multiply>
10006cdc:	90001c26 	beq	r18,zero,10006d50 <__pow5mult+0xe8>
10006ce0:	91000117 	ldw	r4,4(r18)
10006ce4:	98c01317 	ldw	r3,76(r19)
10006ce8:	8021d07a 	srai	r16,r16,1
10006cec:	2109883a 	add	r4,r4,r4
10006cf0:	2109883a 	add	r4,r4,r4
10006cf4:	1907883a 	add	r3,r3,r4
10006cf8:	19000017 	ldw	r4,0(r3)
10006cfc:	91000015 	stw	r4,0(r18)
10006d00:	1c800015 	stw	r18,0(r3)
10006d04:	1025883a 	mov	r18,r2
10006d08:	803feb1e 	bne	r16,zero,10006cb8 <__alt_data_end+0xf8006cb8>
10006d0c:	9005883a 	mov	r2,r18
10006d10:	dfc00517 	ldw	ra,20(sp)
10006d14:	dd000417 	ldw	r20,16(sp)
10006d18:	dcc00317 	ldw	r19,12(sp)
10006d1c:	dc800217 	ldw	r18,8(sp)
10006d20:	dc400117 	ldw	r17,4(sp)
10006d24:	dc000017 	ldw	r16,0(sp)
10006d28:	dec00604 	addi	sp,sp,24
10006d2c:	f800283a 	ret
10006d30:	880b883a 	mov	r5,r17
10006d34:	880d883a 	mov	r6,r17
10006d38:	9809883a 	mov	r4,r19
10006d3c:	00069fc0 	call	100069fc <__multiply>
10006d40:	88800015 	stw	r2,0(r17)
10006d44:	10000015 	stw	zero,0(r2)
10006d48:	1023883a 	mov	r17,r2
10006d4c:	003fdd06 	br	10006cc4 <__alt_data_end+0xf8006cc4>
10006d50:	1025883a 	mov	r18,r2
10006d54:	003fd606 	br	10006cb0 <__alt_data_end+0xf8006cb0>
10006d58:	10bfffc4 	addi	r2,r2,-1
10006d5c:	1085883a 	add	r2,r2,r2
10006d60:	00c40074 	movhi	r3,4097
10006d64:	18fe7604 	addi	r3,r3,-1576
10006d68:	1085883a 	add	r2,r2,r2
10006d6c:	1885883a 	add	r2,r3,r2
10006d70:	11800017 	ldw	r6,0(r2)
10006d74:	000f883a 	mov	r7,zero
10006d78:	00066600 	call	10006660 <__multadd>
10006d7c:	1025883a 	mov	r18,r2
10006d80:	003fc506 	br	10006c98 <__alt_data_end+0xf8006c98>
10006d84:	05000044 	movi	r20,1
10006d88:	9809883a 	mov	r4,r19
10006d8c:	a00b883a 	mov	r5,r20
10006d90:	00065900 	call	10006590 <_Balloc>
10006d94:	1023883a 	mov	r17,r2
10006d98:	00809c44 	movi	r2,625
10006d9c:	88800515 	stw	r2,20(r17)
10006da0:	8d000415 	stw	r20,16(r17)
10006da4:	9c401215 	stw	r17,72(r19)
10006da8:	88000015 	stw	zero,0(r17)
10006dac:	003fbe06 	br	10006ca8 <__alt_data_end+0xf8006ca8>

10006db0 <__lshift>:
10006db0:	defff904 	addi	sp,sp,-28
10006db4:	dd000415 	stw	r20,16(sp)
10006db8:	dc400115 	stw	r17,4(sp)
10006dbc:	2d000417 	ldw	r20,16(r5)
10006dc0:	3023d17a 	srai	r17,r6,5
10006dc4:	28800217 	ldw	r2,8(r5)
10006dc8:	dd400515 	stw	r21,20(sp)
10006dcc:	8d29883a 	add	r20,r17,r20
10006dd0:	dcc00315 	stw	r19,12(sp)
10006dd4:	dc800215 	stw	r18,8(sp)
10006dd8:	dc000015 	stw	r16,0(sp)
10006ddc:	dfc00615 	stw	ra,24(sp)
10006de0:	a4000044 	addi	r16,r20,1
10006de4:	2825883a 	mov	r18,r5
10006de8:	302b883a 	mov	r21,r6
10006dec:	2027883a 	mov	r19,r4
10006df0:	29400117 	ldw	r5,4(r5)
10006df4:	1400030e 	bge	r2,r16,10006e04 <__lshift+0x54>
10006df8:	1085883a 	add	r2,r2,r2
10006dfc:	29400044 	addi	r5,r5,1
10006e00:	143ffd16 	blt	r2,r16,10006df8 <__alt_data_end+0xf8006df8>
10006e04:	9809883a 	mov	r4,r19
10006e08:	00065900 	call	10006590 <_Balloc>
10006e0c:	11000504 	addi	r4,r2,20
10006e10:	0440090e 	bge	zero,r17,10006e38 <__lshift+0x88>
10006e14:	200f883a 	mov	r7,r4
10006e18:	0007883a 	mov	r3,zero
10006e1c:	38000015 	stw	zero,0(r7)
10006e20:	18c00044 	addi	r3,r3,1
10006e24:	39c00104 	addi	r7,r7,4
10006e28:	1c7ffc1e 	bne	r3,r17,10006e1c <__alt_data_end+0xf8006e1c>
10006e2c:	18c7883a 	add	r3,r3,r3
10006e30:	18c7883a 	add	r3,r3,r3
10006e34:	20c9883a 	add	r4,r4,r3
10006e38:	92400417 	ldw	r9,16(r18)
10006e3c:	90c00504 	addi	r3,r18,20
10006e40:	a98007cc 	andi	r6,r21,31
10006e44:	4a53883a 	add	r9,r9,r9
10006e48:	4a53883a 	add	r9,r9,r9
10006e4c:	1a53883a 	add	r9,r3,r9
10006e50:	30002426 	beq	r6,zero,10006ee4 <__lshift+0x134>
10006e54:	01400804 	movi	r5,32
10006e58:	298bc83a 	sub	r5,r5,r6
10006e5c:	200f883a 	mov	r7,r4
10006e60:	0011883a 	mov	r8,zero
10006e64:	1a800017 	ldw	r10,0(r3)
10006e68:	3809883a 	mov	r4,r7
10006e6c:	39c00104 	addi	r7,r7,4
10006e70:	5194983a 	sll	r10,r10,r6
10006e74:	18c00104 	addi	r3,r3,4
10006e78:	4290b03a 	or	r8,r8,r10
10006e7c:	3a3fff15 	stw	r8,-4(r7)
10006e80:	1a3fff17 	ldw	r8,-4(r3)
10006e84:	4150d83a 	srl	r8,r8,r5
10006e88:	1a7ff636 	bltu	r3,r9,10006e64 <__alt_data_end+0xf8006e64>
10006e8c:	22000115 	stw	r8,4(r4)
10006e90:	40000126 	beq	r8,zero,10006e98 <__lshift+0xe8>
10006e94:	a4000084 	addi	r16,r20,2
10006e98:	91000117 	ldw	r4,4(r18)
10006e9c:	98c01317 	ldw	r3,76(r19)
10006ea0:	843fffc4 	addi	r16,r16,-1
10006ea4:	2109883a 	add	r4,r4,r4
10006ea8:	2109883a 	add	r4,r4,r4
10006eac:	1907883a 	add	r3,r3,r4
10006eb0:	19000017 	ldw	r4,0(r3)
10006eb4:	14000415 	stw	r16,16(r2)
10006eb8:	91000015 	stw	r4,0(r18)
10006ebc:	1c800015 	stw	r18,0(r3)
10006ec0:	dfc00617 	ldw	ra,24(sp)
10006ec4:	dd400517 	ldw	r21,20(sp)
10006ec8:	dd000417 	ldw	r20,16(sp)
10006ecc:	dcc00317 	ldw	r19,12(sp)
10006ed0:	dc800217 	ldw	r18,8(sp)
10006ed4:	dc400117 	ldw	r17,4(sp)
10006ed8:	dc000017 	ldw	r16,0(sp)
10006edc:	dec00704 	addi	sp,sp,28
10006ee0:	f800283a 	ret
10006ee4:	200f883a 	mov	r7,r4
10006ee8:	19800017 	ldw	r6,0(r3)
10006eec:	39c00104 	addi	r7,r7,4
10006ef0:	18c00104 	addi	r3,r3,4
10006ef4:	39bfff15 	stw	r6,-4(r7)
10006ef8:	1a7ffb36 	bltu	r3,r9,10006ee8 <__alt_data_end+0xf8006ee8>
10006efc:	003fe606 	br	10006e98 <__alt_data_end+0xf8006e98>

10006f00 <__mcmp>:
10006f00:	20800417 	ldw	r2,16(r4)
10006f04:	28c00417 	ldw	r3,16(r5)
10006f08:	10c5c83a 	sub	r2,r2,r3
10006f0c:	1000111e 	bne	r2,zero,10006f54 <__mcmp+0x54>
10006f10:	18c7883a 	add	r3,r3,r3
10006f14:	18c7883a 	add	r3,r3,r3
10006f18:	21000504 	addi	r4,r4,20
10006f1c:	29400504 	addi	r5,r5,20
10006f20:	20c5883a 	add	r2,r4,r3
10006f24:	28cb883a 	add	r5,r5,r3
10006f28:	00000106 	br	10006f30 <__mcmp+0x30>
10006f2c:	2080082e 	bgeu	r4,r2,10006f50 <__mcmp+0x50>
10006f30:	10bfff04 	addi	r2,r2,-4
10006f34:	297fff04 	addi	r5,r5,-4
10006f38:	11800017 	ldw	r6,0(r2)
10006f3c:	28c00017 	ldw	r3,0(r5)
10006f40:	30fffa26 	beq	r6,r3,10006f2c <__alt_data_end+0xf8006f2c>
10006f44:	30c00436 	bltu	r6,r3,10006f58 <__mcmp+0x58>
10006f48:	00800044 	movi	r2,1
10006f4c:	f800283a 	ret
10006f50:	0005883a 	mov	r2,zero
10006f54:	f800283a 	ret
10006f58:	00bfffc4 	movi	r2,-1
10006f5c:	f800283a 	ret

10006f60 <__mdiff>:
10006f60:	defffc04 	addi	sp,sp,-16
10006f64:	dc000015 	stw	r16,0(sp)
10006f68:	2821883a 	mov	r16,r5
10006f6c:	200f883a 	mov	r7,r4
10006f70:	300b883a 	mov	r5,r6
10006f74:	8009883a 	mov	r4,r16
10006f78:	dc400115 	stw	r17,4(sp)
10006f7c:	dfc00315 	stw	ra,12(sp)
10006f80:	dc800215 	stw	r18,8(sp)
10006f84:	3023883a 	mov	r17,r6
10006f88:	0006f000 	call	10006f00 <__mcmp>
10006f8c:	10005226 	beq	r2,zero,100070d8 <__mdiff+0x178>
10006f90:	10004c16 	blt	r2,zero,100070c4 <__mdiff+0x164>
10006f94:	0025883a 	mov	r18,zero
10006f98:	81400117 	ldw	r5,4(r16)
10006f9c:	3809883a 	mov	r4,r7
10006fa0:	00065900 	call	10006590 <_Balloc>
10006fa4:	82800417 	ldw	r10,16(r16)
10006fa8:	8b400417 	ldw	r13,16(r17)
10006fac:	81000504 	addi	r4,r16,20
10006fb0:	5299883a 	add	r12,r10,r10
10006fb4:	6b5b883a 	add	r13,r13,r13
10006fb8:	6319883a 	add	r12,r12,r12
10006fbc:	89800504 	addi	r6,r17,20
10006fc0:	6b5b883a 	add	r13,r13,r13
10006fc4:	14800315 	stw	r18,12(r2)
10006fc8:	2319883a 	add	r12,r4,r12
10006fcc:	335b883a 	add	r13,r6,r13
10006fd0:	11400504 	addi	r5,r2,20
10006fd4:	0007883a 	mov	r3,zero
10006fd8:	00000106 	br	10006fe0 <__mdiff+0x80>
10006fdc:	400b883a 	mov	r5,r8
10006fe0:	22400017 	ldw	r9,0(r4)
10006fe4:	32000017 	ldw	r8,0(r6)
10006fe8:	31800104 	addi	r6,r6,4
10006fec:	49ffffcc 	andi	r7,r9,65535
10006ff0:	42ffffcc 	andi	r11,r8,65535
10006ff4:	38c7883a 	add	r3,r7,r3
10006ff8:	1acfc83a 	sub	r7,r3,r11
10006ffc:	4010d43a 	srli	r8,r8,16
10007000:	4806d43a 	srli	r3,r9,16
10007004:	3817d43a 	srai	r11,r7,16
10007008:	39ffffcc 	andi	r7,r7,65535
1000700c:	1a07c83a 	sub	r3,r3,r8
10007010:	1ac7883a 	add	r3,r3,r11
10007014:	1812943a 	slli	r9,r3,16
10007018:	2a000104 	addi	r8,r5,4
1000701c:	21000104 	addi	r4,r4,4
10007020:	49ceb03a 	or	r7,r9,r7
10007024:	29c00015 	stw	r7,0(r5)
10007028:	1807d43a 	srai	r3,r3,16
1000702c:	337feb36 	bltu	r6,r13,10006fdc <__alt_data_end+0xf8006fdc>
10007030:	2013883a 	mov	r9,r4
10007034:	2300342e 	bgeu	r4,r12,10007108 <__mdiff+0x1a8>
10007038:	400b883a 	mov	r5,r8
1000703c:	21c00017 	ldw	r7,0(r4)
10007040:	29400104 	addi	r5,r5,4
10007044:	21000104 	addi	r4,r4,4
10007048:	39bfffcc 	andi	r6,r7,65535
1000704c:	30cd883a 	add	r6,r6,r3
10007050:	3007d43a 	srai	r3,r6,16
10007054:	380ed43a 	srli	r7,r7,16
10007058:	31bfffcc 	andi	r6,r6,65535
1000705c:	19c7883a 	add	r3,r3,r7
10007060:	180e943a 	slli	r7,r3,16
10007064:	1807d43a 	srai	r3,r3,16
10007068:	398cb03a 	or	r6,r7,r6
1000706c:	29bfff15 	stw	r6,-4(r5)
10007070:	233ff236 	bltu	r4,r12,1000703c <__alt_data_end+0xf800703c>
10007074:	0248303a 	nor	r4,zero,r9
10007078:	2309883a 	add	r4,r4,r12
1000707c:	2008d0ba 	srli	r4,r4,2
10007080:	21000044 	addi	r4,r4,1
10007084:	2109883a 	add	r4,r4,r4
10007088:	2109883a 	add	r4,r4,r4
1000708c:	4111883a 	add	r8,r8,r4
10007090:	413fff04 	addi	r4,r8,-4
10007094:	3000041e 	bne	r6,zero,100070a8 <__mdiff+0x148>
10007098:	213fff04 	addi	r4,r4,-4
1000709c:	20c00017 	ldw	r3,0(r4)
100070a0:	52bfffc4 	addi	r10,r10,-1
100070a4:	183ffc26 	beq	r3,zero,10007098 <__alt_data_end+0xf8007098>
100070a8:	12800415 	stw	r10,16(r2)
100070ac:	dfc00317 	ldw	ra,12(sp)
100070b0:	dc800217 	ldw	r18,8(sp)
100070b4:	dc400117 	ldw	r17,4(sp)
100070b8:	dc000017 	ldw	r16,0(sp)
100070bc:	dec00404 	addi	sp,sp,16
100070c0:	f800283a 	ret
100070c4:	8005883a 	mov	r2,r16
100070c8:	04800044 	movi	r18,1
100070cc:	8821883a 	mov	r16,r17
100070d0:	1023883a 	mov	r17,r2
100070d4:	003fb006 	br	10006f98 <__alt_data_end+0xf8006f98>
100070d8:	3809883a 	mov	r4,r7
100070dc:	000b883a 	mov	r5,zero
100070e0:	00065900 	call	10006590 <_Balloc>
100070e4:	00c00044 	movi	r3,1
100070e8:	10c00415 	stw	r3,16(r2)
100070ec:	10000515 	stw	zero,20(r2)
100070f0:	dfc00317 	ldw	ra,12(sp)
100070f4:	dc800217 	ldw	r18,8(sp)
100070f8:	dc400117 	ldw	r17,4(sp)
100070fc:	dc000017 	ldw	r16,0(sp)
10007100:	dec00404 	addi	sp,sp,16
10007104:	f800283a 	ret
10007108:	380d883a 	mov	r6,r7
1000710c:	003fe006 	br	10007090 <__alt_data_end+0xf8007090>

10007110 <__ulp>:
10007110:	295ffc2c 	andhi	r5,r5,32752
10007114:	00bf3034 	movhi	r2,64704
10007118:	2887883a 	add	r3,r5,r2
1000711c:	00c0020e 	bge	zero,r3,10007128 <__ulp+0x18>
10007120:	0005883a 	mov	r2,zero
10007124:	f800283a 	ret
10007128:	00c7c83a 	sub	r3,zero,r3
1000712c:	1805d53a 	srai	r2,r3,20
10007130:	00c004c4 	movi	r3,19
10007134:	18800a0e 	bge	r3,r2,10007160 <__ulp+0x50>
10007138:	01000c84 	movi	r4,50
1000713c:	0007883a 	mov	r3,zero
10007140:	20800516 	blt	r4,r2,10007158 <__ulp+0x48>
10007144:	01000cc4 	movi	r4,51
10007148:	2085c83a 	sub	r2,r4,r2
1000714c:	01000044 	movi	r4,1
10007150:	2084983a 	sll	r2,r4,r2
10007154:	f800283a 	ret
10007158:	00800044 	movi	r2,1
1000715c:	f800283a 	ret
10007160:	00c00234 	movhi	r3,8
10007164:	1887d83a 	sra	r3,r3,r2
10007168:	0005883a 	mov	r2,zero
1000716c:	f800283a 	ret

10007170 <__b2d>:
10007170:	21800417 	ldw	r6,16(r4)
10007174:	22000504 	addi	r8,r4,20
10007178:	deffff04 	addi	sp,sp,-4
1000717c:	318d883a 	add	r6,r6,r6
10007180:	318d883a 	add	r6,r6,r6
10007184:	418d883a 	add	r6,r8,r6
10007188:	31ffff17 	ldw	r7,-4(r6)
1000718c:	327fff04 	addi	r9,r6,-4
10007190:	dfc00015 	stw	ra,0(sp)
10007194:	3809883a 	mov	r4,r7
10007198:	00068a80 	call	100068a8 <__hi0bits>
1000719c:	00c00804 	movi	r3,32
100071a0:	1887c83a 	sub	r3,r3,r2
100071a4:	28c00015 	stw	r3,0(r5)
100071a8:	00c00284 	movi	r3,10
100071ac:	18800d16 	blt	r3,r2,100071e4 <__b2d+0x74>
100071b0:	010002c4 	movi	r4,11
100071b4:	2089c83a 	sub	r4,r4,r2
100071b8:	3906d83a 	srl	r3,r7,r4
100071bc:	18cffc34 	orhi	r3,r3,16368
100071c0:	4240232e 	bgeu	r8,r9,10007250 <__b2d+0xe0>
100071c4:	317ffe17 	ldw	r5,-8(r6)
100071c8:	2908d83a 	srl	r4,r5,r4
100071cc:	10800544 	addi	r2,r2,21
100071d0:	388e983a 	sll	r7,r7,r2
100071d4:	21c4b03a 	or	r2,r4,r7
100071d8:	dfc00017 	ldw	ra,0(sp)
100071dc:	dec00104 	addi	sp,sp,4
100071e0:	f800283a 	ret
100071e4:	42401136 	bltu	r8,r9,1000722c <__b2d+0xbc>
100071e8:	113ffd44 	addi	r4,r2,-11
100071ec:	000b883a 	mov	r5,zero
100071f0:	20001226 	beq	r4,zero,1000723c <__b2d+0xcc>
100071f4:	00c00ac4 	movi	r3,43
100071f8:	1885c83a 	sub	r2,r3,r2
100071fc:	3906983a 	sll	r3,r7,r4
10007200:	288cd83a 	srl	r6,r5,r2
10007204:	18cffc34 	orhi	r3,r3,16368
10007208:	1986b03a 	or	r3,r3,r6
1000720c:	4240122e 	bgeu	r8,r9,10007258 <__b2d+0xe8>
10007210:	49bfff17 	ldw	r6,-4(r9)
10007214:	3084d83a 	srl	r2,r6,r2
10007218:	2908983a 	sll	r4,r5,r4
1000721c:	1104b03a 	or	r2,r2,r4
10007220:	dfc00017 	ldw	ra,0(sp)
10007224:	dec00104 	addi	sp,sp,4
10007228:	f800283a 	ret
1000722c:	113ffd44 	addi	r4,r2,-11
10007230:	327ffe04 	addi	r9,r6,-8
10007234:	317ffe17 	ldw	r5,-8(r6)
10007238:	203fee1e 	bne	r4,zero,100071f4 <__alt_data_end+0xf80071f4>
1000723c:	38cffc34 	orhi	r3,r7,16368
10007240:	2805883a 	mov	r2,r5
10007244:	dfc00017 	ldw	ra,0(sp)
10007248:	dec00104 	addi	sp,sp,4
1000724c:	f800283a 	ret
10007250:	0009883a 	mov	r4,zero
10007254:	003fdd06 	br	100071cc <__alt_data_end+0xf80071cc>
10007258:	0005883a 	mov	r2,zero
1000725c:	003fee06 	br	10007218 <__alt_data_end+0xf8007218>

10007260 <__d2b>:
10007260:	defffa04 	addi	sp,sp,-24
10007264:	dc400315 	stw	r17,12(sp)
10007268:	2823883a 	mov	r17,r5
1000726c:	01400044 	movi	r5,1
10007270:	dc800415 	stw	r18,16(sp)
10007274:	dc000215 	stw	r16,8(sp)
10007278:	dfc00515 	stw	ra,20(sp)
1000727c:	3021883a 	mov	r16,r6
10007280:	3825883a 	mov	r18,r7
10007284:	00065900 	call	10006590 <_Balloc>
10007288:	8012907a 	slli	r9,r16,1
1000728c:	1011883a 	mov	r8,r2
10007290:	00800434 	movhi	r2,16
10007294:	10bfffc4 	addi	r2,r2,-1
10007298:	4812d57a 	srli	r9,r9,21
1000729c:	80a0703a 	and	r16,r16,r2
100072a0:	48000126 	beq	r9,zero,100072a8 <__d2b+0x48>
100072a4:	84000434 	orhi	r16,r16,16
100072a8:	dc000015 	stw	r16,0(sp)
100072ac:	88001e26 	beq	r17,zero,10007328 <__d2b+0xc8>
100072b0:	d9000104 	addi	r4,sp,4
100072b4:	dc400115 	stw	r17,4(sp)
100072b8:	00069100 	call	10006910 <__lo0bits>
100072bc:	d8c00017 	ldw	r3,0(sp)
100072c0:	10002f1e 	bne	r2,zero,10007380 <__d2b+0x120>
100072c4:	d9000117 	ldw	r4,4(sp)
100072c8:	41000515 	stw	r4,20(r8)
100072cc:	180b003a 	cmpeq	r5,r3,zero
100072d0:	01000084 	movi	r4,2
100072d4:	214bc83a 	sub	r5,r4,r5
100072d8:	40c00615 	stw	r3,24(r8)
100072dc:	41400415 	stw	r5,16(r8)
100072e0:	4800191e 	bne	r9,zero,10007348 <__d2b+0xe8>
100072e4:	280690ba 	slli	r3,r5,2
100072e8:	10bef384 	addi	r2,r2,-1074
100072ec:	90800015 	stw	r2,0(r18)
100072f0:	40c5883a 	add	r2,r8,r3
100072f4:	11000417 	ldw	r4,16(r2)
100072f8:	00068a80 	call	100068a8 <__hi0bits>
100072fc:	280a917a 	slli	r5,r5,5
10007300:	d8c00617 	ldw	r3,24(sp)
10007304:	2885c83a 	sub	r2,r5,r2
10007308:	18800015 	stw	r2,0(r3)
1000730c:	4005883a 	mov	r2,r8
10007310:	dfc00517 	ldw	ra,20(sp)
10007314:	dc800417 	ldw	r18,16(sp)
10007318:	dc400317 	ldw	r17,12(sp)
1000731c:	dc000217 	ldw	r16,8(sp)
10007320:	dec00604 	addi	sp,sp,24
10007324:	f800283a 	ret
10007328:	d809883a 	mov	r4,sp
1000732c:	00069100 	call	10006910 <__lo0bits>
10007330:	d8c00017 	ldw	r3,0(sp)
10007334:	01400044 	movi	r5,1
10007338:	41400415 	stw	r5,16(r8)
1000733c:	40c00515 	stw	r3,20(r8)
10007340:	10800804 	addi	r2,r2,32
10007344:	483fe726 	beq	r9,zero,100072e4 <__alt_data_end+0xf80072e4>
10007348:	00c00d44 	movi	r3,53
1000734c:	4a7ef344 	addi	r9,r9,-1075
10007350:	4893883a 	add	r9,r9,r2
10007354:	1885c83a 	sub	r2,r3,r2
10007358:	d8c00617 	ldw	r3,24(sp)
1000735c:	92400015 	stw	r9,0(r18)
10007360:	18800015 	stw	r2,0(r3)
10007364:	4005883a 	mov	r2,r8
10007368:	dfc00517 	ldw	ra,20(sp)
1000736c:	dc800417 	ldw	r18,16(sp)
10007370:	dc400317 	ldw	r17,12(sp)
10007374:	dc000217 	ldw	r16,8(sp)
10007378:	dec00604 	addi	sp,sp,24
1000737c:	f800283a 	ret
10007380:	01000804 	movi	r4,32
10007384:	2089c83a 	sub	r4,r4,r2
10007388:	1908983a 	sll	r4,r3,r4
1000738c:	d9400117 	ldw	r5,4(sp)
10007390:	1886d83a 	srl	r3,r3,r2
10007394:	2148b03a 	or	r4,r4,r5
10007398:	41000515 	stw	r4,20(r8)
1000739c:	d8c00015 	stw	r3,0(sp)
100073a0:	003fca06 	br	100072cc <__alt_data_end+0xf80072cc>

100073a4 <__ratio>:
100073a4:	defffd04 	addi	sp,sp,-12
100073a8:	2817883a 	mov	r11,r5
100073ac:	201b883a 	mov	r13,r4
100073b0:	d9400104 	addi	r5,sp,4
100073b4:	dfc00215 	stw	ra,8(sp)
100073b8:	00071700 	call	10007170 <__b2d>
100073bc:	5809883a 	mov	r4,r11
100073c0:	d80b883a 	mov	r5,sp
100073c4:	1019883a 	mov	r12,r2
100073c8:	1815883a 	mov	r10,r3
100073cc:	00071700 	call	10007170 <__b2d>
100073d0:	69400417 	ldw	r5,16(r13)
100073d4:	59000417 	ldw	r4,16(r11)
100073d8:	d9800117 	ldw	r6,4(sp)
100073dc:	2909c83a 	sub	r4,r5,r4
100073e0:	d9400017 	ldw	r5,0(sp)
100073e4:	2008917a 	slli	r4,r4,5
100073e8:	314bc83a 	sub	r5,r6,r5
100073ec:	290b883a 	add	r5,r5,r4
100073f0:	01400a0e 	bge	zero,r5,1000741c <__ratio+0x78>
100073f4:	280a953a 	slli	r5,r5,20
100073f8:	6009883a 	mov	r4,r12
100073fc:	100d883a 	mov	r6,r2
10007400:	2a95883a 	add	r10,r5,r10
10007404:	500b883a 	mov	r5,r10
10007408:	180f883a 	mov	r7,r3
1000740c:	000b3a80 	call	1000b3a8 <__divdf3>
10007410:	dfc00217 	ldw	ra,8(sp)
10007414:	dec00304 	addi	sp,sp,12
10007418:	f800283a 	ret
1000741c:	280a953a 	slli	r5,r5,20
10007420:	6009883a 	mov	r4,r12
10007424:	100d883a 	mov	r6,r2
10007428:	1947c83a 	sub	r3,r3,r5
1000742c:	180f883a 	mov	r7,r3
10007430:	500b883a 	mov	r5,r10
10007434:	000b3a80 	call	1000b3a8 <__divdf3>
10007438:	dfc00217 	ldw	ra,8(sp)
1000743c:	dec00304 	addi	sp,sp,12
10007440:	f800283a 	ret

10007444 <_mprec_log10>:
10007444:	defffe04 	addi	sp,sp,-8
10007448:	dc000015 	stw	r16,0(sp)
1000744c:	dfc00115 	stw	ra,4(sp)
10007450:	008005c4 	movi	r2,23
10007454:	2021883a 	mov	r16,r4
10007458:	11000d0e 	bge	r2,r4,10007490 <_mprec_log10+0x4c>
1000745c:	0005883a 	mov	r2,zero
10007460:	00cffc34 	movhi	r3,16368
10007464:	843fffc4 	addi	r16,r16,-1
10007468:	1009883a 	mov	r4,r2
1000746c:	180b883a 	mov	r5,r3
10007470:	000d883a 	mov	r6,zero
10007474:	01d00934 	movhi	r7,16420
10007478:	000bf8c0 	call	1000bf8c <__muldf3>
1000747c:	803ff91e 	bne	r16,zero,10007464 <__alt_data_end+0xf8007464>
10007480:	dfc00117 	ldw	ra,4(sp)
10007484:	dc000017 	ldw	r16,0(sp)
10007488:	dec00204 	addi	sp,sp,8
1000748c:	f800283a 	ret
10007490:	202090fa 	slli	r16,r4,3
10007494:	00840074 	movhi	r2,4097
10007498:	10be8d04 	addi	r2,r2,-1484
1000749c:	1421883a 	add	r16,r2,r16
100074a0:	80800017 	ldw	r2,0(r16)
100074a4:	80c00117 	ldw	r3,4(r16)
100074a8:	dfc00117 	ldw	ra,4(sp)
100074ac:	dc000017 	ldw	r16,0(sp)
100074b0:	dec00204 	addi	sp,sp,8
100074b4:	f800283a 	ret

100074b8 <__copybits>:
100074b8:	297fffc4 	addi	r5,r5,-1
100074bc:	2811d17a 	srai	r8,r5,5
100074c0:	31c00417 	ldw	r7,16(r6)
100074c4:	30800504 	addi	r2,r6,20
100074c8:	42000044 	addi	r8,r8,1
100074cc:	39cf883a 	add	r7,r7,r7
100074d0:	4211883a 	add	r8,r8,r8
100074d4:	39cf883a 	add	r7,r7,r7
100074d8:	4211883a 	add	r8,r8,r8
100074dc:	11cf883a 	add	r7,r2,r7
100074e0:	2211883a 	add	r8,r4,r8
100074e4:	11c00d2e 	bgeu	r2,r7,1000751c <__copybits+0x64>
100074e8:	2007883a 	mov	r3,r4
100074ec:	11400017 	ldw	r5,0(r2)
100074f0:	18c00104 	addi	r3,r3,4
100074f4:	10800104 	addi	r2,r2,4
100074f8:	197fff15 	stw	r5,-4(r3)
100074fc:	11fffb36 	bltu	r2,r7,100074ec <__alt_data_end+0xf80074ec>
10007500:	3985c83a 	sub	r2,r7,r6
10007504:	10bffac4 	addi	r2,r2,-21
10007508:	1004d0ba 	srli	r2,r2,2
1000750c:	10800044 	addi	r2,r2,1
10007510:	1085883a 	add	r2,r2,r2
10007514:	1085883a 	add	r2,r2,r2
10007518:	2089883a 	add	r4,r4,r2
1000751c:	2200032e 	bgeu	r4,r8,1000752c <__copybits+0x74>
10007520:	20000015 	stw	zero,0(r4)
10007524:	21000104 	addi	r4,r4,4
10007528:	223ffd36 	bltu	r4,r8,10007520 <__alt_data_end+0xf8007520>
1000752c:	f800283a 	ret

10007530 <__any_on>:
10007530:	20800417 	ldw	r2,16(r4)
10007534:	2807d17a 	srai	r3,r5,5
10007538:	21000504 	addi	r4,r4,20
1000753c:	10c00d0e 	bge	r2,r3,10007574 <__any_on+0x44>
10007540:	1085883a 	add	r2,r2,r2
10007544:	1085883a 	add	r2,r2,r2
10007548:	2085883a 	add	r2,r4,r2
1000754c:	2080182e 	bgeu	r4,r2,100075b0 <__any_on+0x80>
10007550:	10ffff17 	ldw	r3,-4(r2)
10007554:	10bfff04 	addi	r2,r2,-4
10007558:	1800041e 	bne	r3,zero,1000756c <__any_on+0x3c>
1000755c:	2080142e 	bgeu	r4,r2,100075b0 <__any_on+0x80>
10007560:	10bfff04 	addi	r2,r2,-4
10007564:	10c00017 	ldw	r3,0(r2)
10007568:	183ffc26 	beq	r3,zero,1000755c <__alt_data_end+0xf800755c>
1000756c:	00800044 	movi	r2,1
10007570:	f800283a 	ret
10007574:	18800a0e 	bge	r3,r2,100075a0 <__any_on+0x70>
10007578:	18c7883a 	add	r3,r3,r3
1000757c:	18c7883a 	add	r3,r3,r3
10007580:	294007cc 	andi	r5,r5,31
10007584:	20c5883a 	add	r2,r4,r3
10007588:	283ff026 	beq	r5,zero,1000754c <__alt_data_end+0xf800754c>
1000758c:	10c00017 	ldw	r3,0(r2)
10007590:	194cd83a 	srl	r6,r3,r5
10007594:	314a983a 	sll	r5,r6,r5
10007598:	28fff41e 	bne	r5,r3,1000756c <__alt_data_end+0xf800756c>
1000759c:	003feb06 	br	1000754c <__alt_data_end+0xf800754c>
100075a0:	18c7883a 	add	r3,r3,r3
100075a4:	18c7883a 	add	r3,r3,r3
100075a8:	20c5883a 	add	r2,r4,r3
100075ac:	003fe706 	br	1000754c <__alt_data_end+0xf800754c>
100075b0:	0005883a 	mov	r2,zero
100075b4:	f800283a 	ret

100075b8 <_realloc_r>:
100075b8:	defff604 	addi	sp,sp,-40
100075bc:	dd000415 	stw	r20,16(sp)
100075c0:	dc000015 	stw	r16,0(sp)
100075c4:	dfc00915 	stw	ra,36(sp)
100075c8:	df000815 	stw	fp,32(sp)
100075cc:	ddc00715 	stw	r23,28(sp)
100075d0:	dd800615 	stw	r22,24(sp)
100075d4:	dd400515 	stw	r21,20(sp)
100075d8:	dcc00315 	stw	r19,12(sp)
100075dc:	dc800215 	stw	r18,8(sp)
100075e0:	dc400115 	stw	r17,4(sp)
100075e4:	2821883a 	mov	r16,r5
100075e8:	3029883a 	mov	r20,r6
100075ec:	28009a26 	beq	r5,zero,10007858 <_realloc_r+0x2a0>
100075f0:	202b883a 	mov	r21,r4
100075f4:	000d90c0 	call	1000d90c <__malloc_lock>
100075f8:	80ffff17 	ldw	r3,-4(r16)
100075fc:	047fff04 	movi	r17,-4
10007600:	a08002c4 	addi	r2,r20,11
10007604:	01000584 	movi	r4,22
10007608:	84fffe04 	addi	r19,r16,-8
1000760c:	1c62703a 	and	r17,r3,r17
10007610:	2080372e 	bgeu	r4,r2,100076f0 <_realloc_r+0x138>
10007614:	04bffe04 	movi	r18,-8
10007618:	14a4703a 	and	r18,r2,r18
1000761c:	9005883a 	mov	r2,r18
10007620:	90005b16 	blt	r18,zero,10007790 <_realloc_r+0x1d8>
10007624:	95005a36 	bltu	r18,r20,10007790 <_realloc_r+0x1d8>
10007628:	8880340e 	bge	r17,r2,100076fc <_realloc_r+0x144>
1000762c:	05c40074 	movhi	r23,4097
10007630:	bdc03b04 	addi	r23,r23,236
10007634:	b9000217 	ldw	r4,8(r23)
10007638:	9c4b883a 	add	r5,r19,r17
1000763c:	21409626 	beq	r4,r5,10007898 <_realloc_r+0x2e0>
10007640:	29800117 	ldw	r6,4(r5)
10007644:	01ffff84 	movi	r7,-2
10007648:	31ce703a 	and	r7,r6,r7
1000764c:	29cf883a 	add	r7,r5,r7
10007650:	39c00117 	ldw	r7,4(r7)
10007654:	39c0004c 	andi	r7,r7,1
10007658:	38004226 	beq	r7,zero,10007764 <_realloc_r+0x1ac>
1000765c:	000d883a 	mov	r6,zero
10007660:	000b883a 	mov	r5,zero
10007664:	18c0004c 	andi	r3,r3,1
10007668:	18005c1e 	bne	r3,zero,100077dc <_realloc_r+0x224>
1000766c:	85bffe17 	ldw	r22,-8(r16)
10007670:	00ffff04 	movi	r3,-4
10007674:	9dadc83a 	sub	r22,r19,r22
10007678:	b1c00117 	ldw	r7,4(r22)
1000767c:	38c6703a 	and	r3,r7,r3
10007680:	28005426 	beq	r5,zero,100077d4 <_realloc_r+0x21c>
10007684:	1c47883a 	add	r3,r3,r17
10007688:	2900bf26 	beq	r5,r4,10007988 <_realloc_r+0x3d0>
1000768c:	30ef883a 	add	r23,r6,r3
10007690:	b8807e16 	blt	r23,r2,1000788c <_realloc_r+0x2d4>
10007694:	28800317 	ldw	r2,12(r5)
10007698:	28c00217 	ldw	r3,8(r5)
1000769c:	89bfff04 	addi	r6,r17,-4
100076a0:	01000904 	movi	r4,36
100076a4:	18800315 	stw	r2,12(r3)
100076a8:	10c00215 	stw	r3,8(r2)
100076ac:	b1400217 	ldw	r5,8(r22)
100076b0:	b0c00317 	ldw	r3,12(r22)
100076b4:	b5000204 	addi	r20,r22,8
100076b8:	28c00315 	stw	r3,12(r5)
100076bc:	19400215 	stw	r5,8(r3)
100076c0:	21808536 	bltu	r4,r6,100078d8 <_realloc_r+0x320>
100076c4:	008004c4 	movi	r2,19
100076c8:	1180932e 	bgeu	r2,r6,10007918 <_realloc_r+0x360>
100076cc:	80800017 	ldw	r2,0(r16)
100076d0:	b0800215 	stw	r2,8(r22)
100076d4:	80800117 	ldw	r2,4(r16)
100076d8:	b0800315 	stw	r2,12(r22)
100076dc:	008006c4 	movi	r2,27
100076e0:	1180df36 	bltu	r2,r6,10007a60 <_realloc_r+0x4a8>
100076e4:	b0c00404 	addi	r3,r22,16
100076e8:	84000204 	addi	r16,r16,8
100076ec:	00008b06 	br	1000791c <_realloc_r+0x364>
100076f0:	00800404 	movi	r2,16
100076f4:	1025883a 	mov	r18,r2
100076f8:	003fca06 	br	10007624 <__alt_data_end+0xf8007624>
100076fc:	8029883a 	mov	r20,r16
10007700:	8c8dc83a 	sub	r6,r17,r18
10007704:	008003c4 	movi	r2,15
10007708:	18c0004c 	andi	r3,r3,1
1000770c:	11802436 	bltu	r2,r6,100077a0 <_realloc_r+0x1e8>
10007710:	1c46b03a 	or	r3,r3,r17
10007714:	98c00115 	stw	r3,4(r19)
10007718:	9c63883a 	add	r17,r19,r17
1000771c:	88800117 	ldw	r2,4(r17)
10007720:	10800054 	ori	r2,r2,1
10007724:	88800115 	stw	r2,4(r17)
10007728:	a809883a 	mov	r4,r21
1000772c:	000d92c0 	call	1000d92c <__malloc_unlock>
10007730:	a005883a 	mov	r2,r20
10007734:	dfc00917 	ldw	ra,36(sp)
10007738:	df000817 	ldw	fp,32(sp)
1000773c:	ddc00717 	ldw	r23,28(sp)
10007740:	dd800617 	ldw	r22,24(sp)
10007744:	dd400517 	ldw	r21,20(sp)
10007748:	dd000417 	ldw	r20,16(sp)
1000774c:	dcc00317 	ldw	r19,12(sp)
10007750:	dc800217 	ldw	r18,8(sp)
10007754:	dc400117 	ldw	r17,4(sp)
10007758:	dc000017 	ldw	r16,0(sp)
1000775c:	dec00a04 	addi	sp,sp,40
10007760:	f800283a 	ret
10007764:	01ffff04 	movi	r7,-4
10007768:	31cc703a 	and	r6,r6,r7
1000776c:	344f883a 	add	r7,r6,r17
10007770:	38bfbc16 	blt	r7,r2,10007664 <__alt_data_end+0xf8007664>
10007774:	28800317 	ldw	r2,12(r5)
10007778:	29000217 	ldw	r4,8(r5)
1000777c:	8029883a 	mov	r20,r16
10007780:	3823883a 	mov	r17,r7
10007784:	20800315 	stw	r2,12(r4)
10007788:	11000215 	stw	r4,8(r2)
1000778c:	003fdc06 	br	10007700 <__alt_data_end+0xf8007700>
10007790:	00800304 	movi	r2,12
10007794:	a8800015 	stw	r2,0(r21)
10007798:	0005883a 	mov	r2,zero
1000779c:	003fe506 	br	10007734 <__alt_data_end+0xf8007734>
100077a0:	1c86b03a 	or	r3,r3,r18
100077a4:	9c8b883a 	add	r5,r19,r18
100077a8:	98c00115 	stw	r3,4(r19)
100077ac:	30800054 	ori	r2,r6,1
100077b0:	28800115 	stw	r2,4(r5)
100077b4:	298d883a 	add	r6,r5,r6
100077b8:	30800117 	ldw	r2,4(r6)
100077bc:	a809883a 	mov	r4,r21
100077c0:	29400204 	addi	r5,r5,8
100077c4:	10800054 	ori	r2,r2,1
100077c8:	30800115 	stw	r2,4(r6)
100077cc:	0004e240 	call	10004e24 <_free_r>
100077d0:	003fd506 	br	10007728 <__alt_data_end+0xf8007728>
100077d4:	1c6f883a 	add	r23,r3,r17
100077d8:	b880370e 	bge	r23,r2,100078b8 <_realloc_r+0x300>
100077dc:	a00b883a 	mov	r5,r20
100077e0:	a809883a 	mov	r4,r21
100077e4:	00059880 	call	10005988 <_malloc_r>
100077e8:	1029883a 	mov	r20,r2
100077ec:	1000c026 	beq	r2,zero,10007af0 <_realloc_r+0x538>
100077f0:	80ffff17 	ldw	r3,-4(r16)
100077f4:	113ffe04 	addi	r4,r2,-8
100077f8:	00bfff84 	movi	r2,-2
100077fc:	1884703a 	and	r2,r3,r2
10007800:	9885883a 	add	r2,r19,r2
10007804:	20809026 	beq	r4,r2,10007a48 <_realloc_r+0x490>
10007808:	89bfff04 	addi	r6,r17,-4
1000780c:	00800904 	movi	r2,36
10007810:	11805936 	bltu	r2,r6,10007978 <_realloc_r+0x3c0>
10007814:	00c004c4 	movi	r3,19
10007818:	19803636 	bltu	r3,r6,100078f4 <_realloc_r+0x33c>
1000781c:	a005883a 	mov	r2,r20
10007820:	8007883a 	mov	r3,r16
10007824:	19000017 	ldw	r4,0(r3)
10007828:	11000015 	stw	r4,0(r2)
1000782c:	19000117 	ldw	r4,4(r3)
10007830:	11000115 	stw	r4,4(r2)
10007834:	18c00217 	ldw	r3,8(r3)
10007838:	10c00215 	stw	r3,8(r2)
1000783c:	800b883a 	mov	r5,r16
10007840:	a809883a 	mov	r4,r21
10007844:	0004e240 	call	10004e24 <_free_r>
10007848:	a809883a 	mov	r4,r21
1000784c:	000d92c0 	call	1000d92c <__malloc_unlock>
10007850:	a005883a 	mov	r2,r20
10007854:	003fb706 	br	10007734 <__alt_data_end+0xf8007734>
10007858:	300b883a 	mov	r5,r6
1000785c:	dfc00917 	ldw	ra,36(sp)
10007860:	df000817 	ldw	fp,32(sp)
10007864:	ddc00717 	ldw	r23,28(sp)
10007868:	dd800617 	ldw	r22,24(sp)
1000786c:	dd400517 	ldw	r21,20(sp)
10007870:	dd000417 	ldw	r20,16(sp)
10007874:	dcc00317 	ldw	r19,12(sp)
10007878:	dc800217 	ldw	r18,8(sp)
1000787c:	dc400117 	ldw	r17,4(sp)
10007880:	dc000017 	ldw	r16,0(sp)
10007884:	dec00a04 	addi	sp,sp,40
10007888:	00059881 	jmpi	10005988 <_malloc_r>
1000788c:	182f883a 	mov	r23,r3
10007890:	b8bfd216 	blt	r23,r2,100077dc <__alt_data_end+0xf80077dc>
10007894:	00000806 	br	100078b8 <_realloc_r+0x300>
10007898:	21800117 	ldw	r6,4(r4)
1000789c:	017fff04 	movi	r5,-4
100078a0:	91c00404 	addi	r7,r18,16
100078a4:	314c703a 	and	r6,r6,r5
100078a8:	344b883a 	add	r5,r6,r17
100078ac:	29c0250e 	bge	r5,r7,10007944 <_realloc_r+0x38c>
100078b0:	200b883a 	mov	r5,r4
100078b4:	003f6b06 	br	10007664 <__alt_data_end+0xf8007664>
100078b8:	b0800317 	ldw	r2,12(r22)
100078bc:	b0c00217 	ldw	r3,8(r22)
100078c0:	89bfff04 	addi	r6,r17,-4
100078c4:	01000904 	movi	r4,36
100078c8:	18800315 	stw	r2,12(r3)
100078cc:	10c00215 	stw	r3,8(r2)
100078d0:	b5000204 	addi	r20,r22,8
100078d4:	21bf7b2e 	bgeu	r4,r6,100076c4 <__alt_data_end+0xf80076c4>
100078d8:	a009883a 	mov	r4,r20
100078dc:	800b883a 	mov	r5,r16
100078e0:	00063400 	call	10006340 <memmove>
100078e4:	b0c00117 	ldw	r3,4(r22)
100078e8:	b823883a 	mov	r17,r23
100078ec:	b027883a 	mov	r19,r22
100078f0:	003f8306 	br	10007700 <__alt_data_end+0xf8007700>
100078f4:	80c00017 	ldw	r3,0(r16)
100078f8:	a0c00015 	stw	r3,0(r20)
100078fc:	80c00117 	ldw	r3,4(r16)
10007900:	a0c00115 	stw	r3,4(r20)
10007904:	00c006c4 	movi	r3,27
10007908:	19804736 	bltu	r3,r6,10007a28 <_realloc_r+0x470>
1000790c:	a0800204 	addi	r2,r20,8
10007910:	80c00204 	addi	r3,r16,8
10007914:	003fc306 	br	10007824 <__alt_data_end+0xf8007824>
10007918:	a007883a 	mov	r3,r20
1000791c:	80800017 	ldw	r2,0(r16)
10007920:	b823883a 	mov	r17,r23
10007924:	b027883a 	mov	r19,r22
10007928:	18800015 	stw	r2,0(r3)
1000792c:	80800117 	ldw	r2,4(r16)
10007930:	18800115 	stw	r2,4(r3)
10007934:	80800217 	ldw	r2,8(r16)
10007938:	18800215 	stw	r2,8(r3)
1000793c:	b0c00117 	ldw	r3,4(r22)
10007940:	003f6f06 	br	10007700 <__alt_data_end+0xf8007700>
10007944:	9ca7883a 	add	r19,r19,r18
10007948:	2c85c83a 	sub	r2,r5,r18
1000794c:	bcc00215 	stw	r19,8(r23)
10007950:	10800054 	ori	r2,r2,1
10007954:	98800115 	stw	r2,4(r19)
10007958:	80bfff17 	ldw	r2,-4(r16)
1000795c:	a809883a 	mov	r4,r21
10007960:	1080004c 	andi	r2,r2,1
10007964:	90a4b03a 	or	r18,r18,r2
10007968:	84bfff15 	stw	r18,-4(r16)
1000796c:	000d92c0 	call	1000d92c <__malloc_unlock>
10007970:	8005883a 	mov	r2,r16
10007974:	003f6f06 	br	10007734 <__alt_data_end+0xf8007734>
10007978:	a009883a 	mov	r4,r20
1000797c:	800b883a 	mov	r5,r16
10007980:	00063400 	call	10006340 <memmove>
10007984:	003fad06 	br	1000783c <__alt_data_end+0xf800783c>
10007988:	30f9883a 	add	fp,r6,r3
1000798c:	91000404 	addi	r4,r18,16
10007990:	e13fbe16 	blt	fp,r4,1000788c <__alt_data_end+0xf800788c>
10007994:	b0800317 	ldw	r2,12(r22)
10007998:	b0c00217 	ldw	r3,8(r22)
1000799c:	89bfff04 	addi	r6,r17,-4
100079a0:	01000904 	movi	r4,36
100079a4:	18800315 	stw	r2,12(r3)
100079a8:	10c00215 	stw	r3,8(r2)
100079ac:	b4400204 	addi	r17,r22,8
100079b0:	21804336 	bltu	r4,r6,10007ac0 <_realloc_r+0x508>
100079b4:	008004c4 	movi	r2,19
100079b8:	11803f2e 	bgeu	r2,r6,10007ab8 <_realloc_r+0x500>
100079bc:	80800017 	ldw	r2,0(r16)
100079c0:	b0800215 	stw	r2,8(r22)
100079c4:	80800117 	ldw	r2,4(r16)
100079c8:	b0800315 	stw	r2,12(r22)
100079cc:	008006c4 	movi	r2,27
100079d0:	11803f36 	bltu	r2,r6,10007ad0 <_realloc_r+0x518>
100079d4:	b0c00404 	addi	r3,r22,16
100079d8:	84000204 	addi	r16,r16,8
100079dc:	80800017 	ldw	r2,0(r16)
100079e0:	18800015 	stw	r2,0(r3)
100079e4:	80800117 	ldw	r2,4(r16)
100079e8:	18800115 	stw	r2,4(r3)
100079ec:	80800217 	ldw	r2,8(r16)
100079f0:	18800215 	stw	r2,8(r3)
100079f4:	b487883a 	add	r3,r22,r18
100079f8:	e485c83a 	sub	r2,fp,r18
100079fc:	b8c00215 	stw	r3,8(r23)
10007a00:	10800054 	ori	r2,r2,1
10007a04:	18800115 	stw	r2,4(r3)
10007a08:	b0800117 	ldw	r2,4(r22)
10007a0c:	a809883a 	mov	r4,r21
10007a10:	1080004c 	andi	r2,r2,1
10007a14:	90a4b03a 	or	r18,r18,r2
10007a18:	b4800115 	stw	r18,4(r22)
10007a1c:	000d92c0 	call	1000d92c <__malloc_unlock>
10007a20:	8805883a 	mov	r2,r17
10007a24:	003f4306 	br	10007734 <__alt_data_end+0xf8007734>
10007a28:	80c00217 	ldw	r3,8(r16)
10007a2c:	a0c00215 	stw	r3,8(r20)
10007a30:	80c00317 	ldw	r3,12(r16)
10007a34:	a0c00315 	stw	r3,12(r20)
10007a38:	30801126 	beq	r6,r2,10007a80 <_realloc_r+0x4c8>
10007a3c:	a0800404 	addi	r2,r20,16
10007a40:	80c00404 	addi	r3,r16,16
10007a44:	003f7706 	br	10007824 <__alt_data_end+0xf8007824>
10007a48:	a13fff17 	ldw	r4,-4(r20)
10007a4c:	00bfff04 	movi	r2,-4
10007a50:	8029883a 	mov	r20,r16
10007a54:	2084703a 	and	r2,r4,r2
10007a58:	88a3883a 	add	r17,r17,r2
10007a5c:	003f2806 	br	10007700 <__alt_data_end+0xf8007700>
10007a60:	80800217 	ldw	r2,8(r16)
10007a64:	b0800415 	stw	r2,16(r22)
10007a68:	80800317 	ldw	r2,12(r16)
10007a6c:	b0800515 	stw	r2,20(r22)
10007a70:	31000a26 	beq	r6,r4,10007a9c <_realloc_r+0x4e4>
10007a74:	b0c00604 	addi	r3,r22,24
10007a78:	84000404 	addi	r16,r16,16
10007a7c:	003fa706 	br	1000791c <__alt_data_end+0xf800791c>
10007a80:	81000417 	ldw	r4,16(r16)
10007a84:	a0800604 	addi	r2,r20,24
10007a88:	80c00604 	addi	r3,r16,24
10007a8c:	a1000415 	stw	r4,16(r20)
10007a90:	81000517 	ldw	r4,20(r16)
10007a94:	a1000515 	stw	r4,20(r20)
10007a98:	003f6206 	br	10007824 <__alt_data_end+0xf8007824>
10007a9c:	80800417 	ldw	r2,16(r16)
10007aa0:	84000604 	addi	r16,r16,24
10007aa4:	b0c00804 	addi	r3,r22,32
10007aa8:	b0800615 	stw	r2,24(r22)
10007aac:	80bfff17 	ldw	r2,-4(r16)
10007ab0:	b0800715 	stw	r2,28(r22)
10007ab4:	003f9906 	br	1000791c <__alt_data_end+0xf800791c>
10007ab8:	8807883a 	mov	r3,r17
10007abc:	003fc706 	br	100079dc <__alt_data_end+0xf80079dc>
10007ac0:	8809883a 	mov	r4,r17
10007ac4:	800b883a 	mov	r5,r16
10007ac8:	00063400 	call	10006340 <memmove>
10007acc:	003fc906 	br	100079f4 <__alt_data_end+0xf80079f4>
10007ad0:	80800217 	ldw	r2,8(r16)
10007ad4:	b0800415 	stw	r2,16(r22)
10007ad8:	80800317 	ldw	r2,12(r16)
10007adc:	b0800515 	stw	r2,20(r22)
10007ae0:	31000726 	beq	r6,r4,10007b00 <_realloc_r+0x548>
10007ae4:	b0c00604 	addi	r3,r22,24
10007ae8:	84000404 	addi	r16,r16,16
10007aec:	003fbb06 	br	100079dc <__alt_data_end+0xf80079dc>
10007af0:	a809883a 	mov	r4,r21
10007af4:	000d92c0 	call	1000d92c <__malloc_unlock>
10007af8:	0005883a 	mov	r2,zero
10007afc:	003f0d06 	br	10007734 <__alt_data_end+0xf8007734>
10007b00:	80800417 	ldw	r2,16(r16)
10007b04:	84000604 	addi	r16,r16,24
10007b08:	b0c00804 	addi	r3,r22,32
10007b0c:	b0800615 	stw	r2,24(r22)
10007b10:	80bfff17 	ldw	r2,-4(r16)
10007b14:	b0800715 	stw	r2,28(r22)
10007b18:	003fb006 	br	100079dc <__alt_data_end+0xf80079dc>

10007b1c <__fpclassifyd>:
10007b1c:	00a00034 	movhi	r2,32768
10007b20:	10bfffc4 	addi	r2,r2,-1
10007b24:	288a703a 	and	r5,r5,r2
10007b28:	28000726 	beq	r5,zero,10007b48 <__fpclassifyd+0x2c>
10007b2c:	00bffc34 	movhi	r2,65520
10007b30:	2885883a 	add	r2,r5,r2
10007b34:	00dff834 	movhi	r3,32736
10007b38:	18ffffc4 	addi	r3,r3,-1
10007b3c:	18800636 	bltu	r3,r2,10007b58 <__fpclassifyd+0x3c>
10007b40:	00800104 	movi	r2,4
10007b44:	f800283a 	ret
10007b48:	2005003a 	cmpeq	r2,r4,zero
10007b4c:	00c000c4 	movi	r3,3
10007b50:	1885c83a 	sub	r2,r3,r2
10007b54:	f800283a 	ret
10007b58:	00800434 	movhi	r2,16
10007b5c:	10bfffc4 	addi	r2,r2,-1
10007b60:	11400236 	bltu	r2,r5,10007b6c <__fpclassifyd+0x50>
10007b64:	008000c4 	movi	r2,3
10007b68:	f800283a 	ret
10007b6c:	009ffc34 	movhi	r2,32752
10007b70:	28800226 	beq	r5,r2,10007b7c <__fpclassifyd+0x60>
10007b74:	0005883a 	mov	r2,zero
10007b78:	f800283a 	ret
10007b7c:	2005003a 	cmpeq	r2,r4,zero
10007b80:	f800283a 	ret

10007b84 <_sbrk_r>:
10007b84:	defffd04 	addi	sp,sp,-12
10007b88:	dc400115 	stw	r17,4(sp)
10007b8c:	dc000015 	stw	r16,0(sp)
10007b90:	2023883a 	mov	r17,r4
10007b94:	04040074 	movhi	r16,4097
10007b98:	840c9404 	addi	r16,r16,12880
10007b9c:	2809883a 	mov	r4,r5
10007ba0:	dfc00215 	stw	ra,8(sp)
10007ba4:	80000015 	stw	zero,0(r16)
10007ba8:	000db140 	call	1000db14 <sbrk>
10007bac:	00ffffc4 	movi	r3,-1
10007bb0:	10c00526 	beq	r2,r3,10007bc8 <_sbrk_r+0x44>
10007bb4:	dfc00217 	ldw	ra,8(sp)
10007bb8:	dc400117 	ldw	r17,4(sp)
10007bbc:	dc000017 	ldw	r16,0(sp)
10007bc0:	dec00304 	addi	sp,sp,12
10007bc4:	f800283a 	ret
10007bc8:	80c00017 	ldw	r3,0(r16)
10007bcc:	183ff926 	beq	r3,zero,10007bb4 <__alt_data_end+0xf8007bb4>
10007bd0:	88c00015 	stw	r3,0(r17)
10007bd4:	dfc00217 	ldw	ra,8(sp)
10007bd8:	dc400117 	ldw	r17,4(sp)
10007bdc:	dc000017 	ldw	r16,0(sp)
10007be0:	dec00304 	addi	sp,sp,12
10007be4:	f800283a 	ret

10007be8 <__sread>:
10007be8:	defffe04 	addi	sp,sp,-8
10007bec:	dc000015 	stw	r16,0(sp)
10007bf0:	2821883a 	mov	r16,r5
10007bf4:	2940038f 	ldh	r5,14(r5)
10007bf8:	dfc00115 	stw	ra,4(sp)
10007bfc:	00099600 	call	10009960 <_read_r>
10007c00:	10000716 	blt	r2,zero,10007c20 <__sread+0x38>
10007c04:	80c01417 	ldw	r3,80(r16)
10007c08:	1887883a 	add	r3,r3,r2
10007c0c:	80c01415 	stw	r3,80(r16)
10007c10:	dfc00117 	ldw	ra,4(sp)
10007c14:	dc000017 	ldw	r16,0(sp)
10007c18:	dec00204 	addi	sp,sp,8
10007c1c:	f800283a 	ret
10007c20:	80c0030b 	ldhu	r3,12(r16)
10007c24:	18fbffcc 	andi	r3,r3,61439
10007c28:	80c0030d 	sth	r3,12(r16)
10007c2c:	dfc00117 	ldw	ra,4(sp)
10007c30:	dc000017 	ldw	r16,0(sp)
10007c34:	dec00204 	addi	sp,sp,8
10007c38:	f800283a 	ret

10007c3c <__seofread>:
10007c3c:	0005883a 	mov	r2,zero
10007c40:	f800283a 	ret

10007c44 <__swrite>:
10007c44:	2880030b 	ldhu	r2,12(r5)
10007c48:	defffb04 	addi	sp,sp,-20
10007c4c:	dcc00315 	stw	r19,12(sp)
10007c50:	dc800215 	stw	r18,8(sp)
10007c54:	dc400115 	stw	r17,4(sp)
10007c58:	dc000015 	stw	r16,0(sp)
10007c5c:	dfc00415 	stw	ra,16(sp)
10007c60:	10c0400c 	andi	r3,r2,256
10007c64:	2821883a 	mov	r16,r5
10007c68:	2027883a 	mov	r19,r4
10007c6c:	3025883a 	mov	r18,r6
10007c70:	3823883a 	mov	r17,r7
10007c74:	18000526 	beq	r3,zero,10007c8c <__swrite+0x48>
10007c78:	2940038f 	ldh	r5,14(r5)
10007c7c:	000d883a 	mov	r6,zero
10007c80:	01c00084 	movi	r7,2
10007c84:	00098f40 	call	100098f4 <_lseek_r>
10007c88:	8080030b 	ldhu	r2,12(r16)
10007c8c:	8140038f 	ldh	r5,14(r16)
10007c90:	10bbffcc 	andi	r2,r2,61439
10007c94:	9809883a 	mov	r4,r19
10007c98:	900d883a 	mov	r6,r18
10007c9c:	880f883a 	mov	r7,r17
10007ca0:	8080030d 	sth	r2,12(r16)
10007ca4:	dfc00417 	ldw	ra,16(sp)
10007ca8:	dcc00317 	ldw	r19,12(sp)
10007cac:	dc800217 	ldw	r18,8(sp)
10007cb0:	dc400117 	ldw	r17,4(sp)
10007cb4:	dc000017 	ldw	r16,0(sp)
10007cb8:	dec00504 	addi	sp,sp,20
10007cbc:	00093481 	jmpi	10009348 <_write_r>

10007cc0 <__sseek>:
10007cc0:	defffe04 	addi	sp,sp,-8
10007cc4:	dc000015 	stw	r16,0(sp)
10007cc8:	2821883a 	mov	r16,r5
10007ccc:	2940038f 	ldh	r5,14(r5)
10007cd0:	dfc00115 	stw	ra,4(sp)
10007cd4:	00098f40 	call	100098f4 <_lseek_r>
10007cd8:	00ffffc4 	movi	r3,-1
10007cdc:	10c00826 	beq	r2,r3,10007d00 <__sseek+0x40>
10007ce0:	80c0030b 	ldhu	r3,12(r16)
10007ce4:	80801415 	stw	r2,80(r16)
10007ce8:	18c40014 	ori	r3,r3,4096
10007cec:	80c0030d 	sth	r3,12(r16)
10007cf0:	dfc00117 	ldw	ra,4(sp)
10007cf4:	dc000017 	ldw	r16,0(sp)
10007cf8:	dec00204 	addi	sp,sp,8
10007cfc:	f800283a 	ret
10007d00:	80c0030b 	ldhu	r3,12(r16)
10007d04:	18fbffcc 	andi	r3,r3,61439
10007d08:	80c0030d 	sth	r3,12(r16)
10007d0c:	dfc00117 	ldw	ra,4(sp)
10007d10:	dc000017 	ldw	r16,0(sp)
10007d14:	dec00204 	addi	sp,sp,8
10007d18:	f800283a 	ret

10007d1c <__sclose>:
10007d1c:	2940038f 	ldh	r5,14(r5)
10007d20:	00093b41 	jmpi	100093b4 <_close_r>

10007d24 <strcmp>:
10007d24:	2144b03a 	or	r2,r4,r5
10007d28:	108000cc 	andi	r2,r2,3
10007d2c:	1000171e 	bne	r2,zero,10007d8c <strcmp+0x68>
10007d30:	20800017 	ldw	r2,0(r4)
10007d34:	28c00017 	ldw	r3,0(r5)
10007d38:	10c0141e 	bne	r2,r3,10007d8c <strcmp+0x68>
10007d3c:	027fbff4 	movhi	r9,65279
10007d40:	4a7fbfc4 	addi	r9,r9,-257
10007d44:	1247883a 	add	r3,r2,r9
10007d48:	0084303a 	nor	r2,zero,r2
10007d4c:	1884703a 	and	r2,r3,r2
10007d50:	02202074 	movhi	r8,32897
10007d54:	42202004 	addi	r8,r8,-32640
10007d58:	1204703a 	and	r2,r2,r8
10007d5c:	10000226 	beq	r2,zero,10007d68 <strcmp+0x44>
10007d60:	00001706 	br	10007dc0 <strcmp+0x9c>
10007d64:	3000161e 	bne	r6,zero,10007dc0 <strcmp+0x9c>
10007d68:	21000104 	addi	r4,r4,4
10007d6c:	20800017 	ldw	r2,0(r4)
10007d70:	29400104 	addi	r5,r5,4
10007d74:	28c00017 	ldw	r3,0(r5)
10007d78:	124f883a 	add	r7,r2,r9
10007d7c:	008c303a 	nor	r6,zero,r2
10007d80:	398c703a 	and	r6,r7,r6
10007d84:	320c703a 	and	r6,r6,r8
10007d88:	10fff626 	beq	r2,r3,10007d64 <__alt_data_end+0xf8007d64>
10007d8c:	20800007 	ldb	r2,0(r4)
10007d90:	1000051e 	bne	r2,zero,10007da8 <strcmp+0x84>
10007d94:	00000606 	br	10007db0 <strcmp+0x8c>
10007d98:	21000044 	addi	r4,r4,1
10007d9c:	20800007 	ldb	r2,0(r4)
10007da0:	29400044 	addi	r5,r5,1
10007da4:	10000226 	beq	r2,zero,10007db0 <strcmp+0x8c>
10007da8:	28c00007 	ldb	r3,0(r5)
10007dac:	10fffa26 	beq	r2,r3,10007d98 <__alt_data_end+0xf8007d98>
10007db0:	20c00003 	ldbu	r3,0(r4)
10007db4:	28800003 	ldbu	r2,0(r5)
10007db8:	1885c83a 	sub	r2,r3,r2
10007dbc:	f800283a 	ret
10007dc0:	0005883a 	mov	r2,zero
10007dc4:	f800283a 	ret

10007dc8 <__sprint_r.part.0>:
10007dc8:	28801917 	ldw	r2,100(r5)
10007dcc:	defff604 	addi	sp,sp,-40
10007dd0:	dd800615 	stw	r22,24(sp)
10007dd4:	dcc00315 	stw	r19,12(sp)
10007dd8:	dfc00915 	stw	ra,36(sp)
10007ddc:	df000815 	stw	fp,32(sp)
10007de0:	ddc00715 	stw	r23,28(sp)
10007de4:	dd400515 	stw	r21,20(sp)
10007de8:	dd000415 	stw	r20,16(sp)
10007dec:	dc800215 	stw	r18,8(sp)
10007df0:	dc400115 	stw	r17,4(sp)
10007df4:	dc000015 	stw	r16,0(sp)
10007df8:	1088000c 	andi	r2,r2,8192
10007dfc:	2827883a 	mov	r19,r5
10007e00:	302d883a 	mov	r22,r6
10007e04:	10002d26 	beq	r2,zero,10007ebc <__sprint_r.part.0+0xf4>
10007e08:	30800217 	ldw	r2,8(r6)
10007e0c:	35c00017 	ldw	r23,0(r6)
10007e10:	10002826 	beq	r2,zero,10007eb4 <__sprint_r.part.0+0xec>
10007e14:	202b883a 	mov	r21,r4
10007e18:	bf000104 	addi	fp,r23,4
10007e1c:	053fffc4 	movi	r20,-1
10007e20:	e4800017 	ldw	r18,0(fp)
10007e24:	bc400017 	ldw	r17,0(r23)
10007e28:	0021883a 	mov	r16,zero
10007e2c:	9024d0ba 	srli	r18,r18,2
10007e30:	04800316 	blt	zero,r18,10007e40 <__sprint_r.part.0+0x78>
10007e34:	00001806 	br	10007e98 <__sprint_r.part.0+0xd0>
10007e38:	8c400104 	addi	r17,r17,4
10007e3c:	94001526 	beq	r18,r16,10007e94 <__sprint_r.part.0+0xcc>
10007e40:	89400017 	ldw	r5,0(r17)
10007e44:	a809883a 	mov	r4,r21
10007e48:	980d883a 	mov	r6,r19
10007e4c:	000962c0 	call	1000962c <_fputwc_r>
10007e50:	84000044 	addi	r16,r16,1
10007e54:	153ff81e 	bne	r2,r20,10007e38 <__alt_data_end+0xf8007e38>
10007e58:	a005883a 	mov	r2,r20
10007e5c:	b0000215 	stw	zero,8(r22)
10007e60:	b0000115 	stw	zero,4(r22)
10007e64:	dfc00917 	ldw	ra,36(sp)
10007e68:	df000817 	ldw	fp,32(sp)
10007e6c:	ddc00717 	ldw	r23,28(sp)
10007e70:	dd800617 	ldw	r22,24(sp)
10007e74:	dd400517 	ldw	r21,20(sp)
10007e78:	dd000417 	ldw	r20,16(sp)
10007e7c:	dcc00317 	ldw	r19,12(sp)
10007e80:	dc800217 	ldw	r18,8(sp)
10007e84:	dc400117 	ldw	r17,4(sp)
10007e88:	dc000017 	ldw	r16,0(sp)
10007e8c:	dec00a04 	addi	sp,sp,40
10007e90:	f800283a 	ret
10007e94:	b0800217 	ldw	r2,8(r22)
10007e98:	94a5883a 	add	r18,r18,r18
10007e9c:	94a5883a 	add	r18,r18,r18
10007ea0:	1485c83a 	sub	r2,r2,r18
10007ea4:	b0800215 	stw	r2,8(r22)
10007ea8:	bdc00204 	addi	r23,r23,8
10007eac:	e7000204 	addi	fp,fp,8
10007eb0:	103fdb1e 	bne	r2,zero,10007e20 <__alt_data_end+0xf8007e20>
10007eb4:	0005883a 	mov	r2,zero
10007eb8:	003fe806 	br	10007e5c <__alt_data_end+0xf8007e5c>
10007ebc:	00050f40 	call	100050f4 <__sfvwrite_r>
10007ec0:	003fe606 	br	10007e5c <__alt_data_end+0xf8007e5c>

10007ec4 <__sprint_r>:
10007ec4:	30c00217 	ldw	r3,8(r6)
10007ec8:	18000126 	beq	r3,zero,10007ed0 <__sprint_r+0xc>
10007ecc:	0007dc81 	jmpi	10007dc8 <__sprint_r.part.0>
10007ed0:	30000115 	stw	zero,4(r6)
10007ed4:	0005883a 	mov	r2,zero
10007ed8:	f800283a 	ret

10007edc <___vfiprintf_internal_r>:
10007edc:	defec804 	addi	sp,sp,-1248
10007ee0:	dfc13715 	stw	ra,1244(sp)
10007ee4:	df013615 	stw	fp,1240(sp)
10007ee8:	ddc13515 	stw	r23,1236(sp)
10007eec:	dd813415 	stw	r22,1232(sp)
10007ef0:	dd413315 	stw	r21,1228(sp)
10007ef4:	dd013215 	stw	r20,1224(sp)
10007ef8:	dcc13115 	stw	r19,1220(sp)
10007efc:	dc813015 	stw	r18,1216(sp)
10007f00:	dc412f15 	stw	r17,1212(sp)
10007f04:	dc012e15 	stw	r16,1208(sp)
10007f08:	d9012215 	stw	r4,1160(sp)
10007f0c:	d9412015 	stw	r5,1152(sp)
10007f10:	d9c12315 	stw	r7,1164(sp)
10007f14:	3013883a 	mov	r9,r6
10007f18:	20000226 	beq	r4,zero,10007f24 <___vfiprintf_internal_r+0x48>
10007f1c:	20800e17 	ldw	r2,56(r4)
10007f20:	1000f926 	beq	r2,zero,10008308 <___vfiprintf_internal_r+0x42c>
10007f24:	d8c12017 	ldw	r3,1152(sp)
10007f28:	1880030b 	ldhu	r2,12(r3)
10007f2c:	1108000c 	andi	r4,r2,8192
10007f30:	1007883a 	mov	r3,r2
10007f34:	2000081e 	bne	r4,zero,10007f58 <___vfiprintf_internal_r+0x7c>
10007f38:	d9412017 	ldw	r5,1152(sp)
10007f3c:	10c80014 	ori	r3,r2,8192
10007f40:	00b7ffc4 	movi	r2,-8193
10007f44:	29001917 	ldw	r4,100(r5)
10007f48:	28c0030d 	sth	r3,12(r5)
10007f4c:	2088703a 	and	r4,r4,r2
10007f50:	29001915 	stw	r4,100(r5)
10007f54:	1805883a 	mov	r2,r3
10007f58:	1900020c 	andi	r4,r3,8
10007f5c:	2000a726 	beq	r4,zero,100081fc <___vfiprintf_internal_r+0x320>
10007f60:	d9412017 	ldw	r5,1152(sp)
10007f64:	29000417 	ldw	r4,16(r5)
10007f68:	2000a426 	beq	r4,zero,100081fc <___vfiprintf_internal_r+0x320>
10007f6c:	18c0068c 	andi	r3,r3,26
10007f70:	01000284 	movi	r4,10
10007f74:	1900ad26 	beq	r3,r4,1000822c <___vfiprintf_internal_r+0x350>
10007f78:	d90109c4 	addi	r4,sp,1063
10007f7c:	d9410a04 	addi	r5,sp,1064
10007f80:	2905c83a 	sub	r2,r5,r4
10007f84:	d9011e15 	stw	r4,1144(sp)
10007f88:	d9411f15 	stw	r5,1148(sp)
10007f8c:	dec11a15 	stw	sp,1128(sp)
10007f90:	d8011c15 	stw	zero,1136(sp)
10007f94:	d8011b15 	stw	zero,1132(sp)
10007f98:	d8012715 	stw	zero,1180(sp)
10007f9c:	d8012415 	stw	zero,1168(sp)
10007fa0:	d811883a 	mov	r8,sp
10007fa4:	04c40074 	movhi	r19,4097
10007fa8:	9cfec304 	addi	r19,r19,-1268
10007fac:	04040074 	movhi	r16,4097
10007fb0:	843ebf04 	addi	r16,r16,-1284
10007fb4:	d8812815 	stw	r2,1184(sp)
10007fb8:	48800007 	ldb	r2,0(r9)
10007fbc:	10040126 	beq	r2,zero,10008fc4 <___vfiprintf_internal_r+0x10e8>
10007fc0:	00c00944 	movi	r3,37
10007fc4:	4829883a 	mov	r20,r9
10007fc8:	10c0021e 	bne	r2,r3,10007fd4 <___vfiprintf_internal_r+0xf8>
10007fcc:	00001606 	br	10008028 <___vfiprintf_internal_r+0x14c>
10007fd0:	10c00326 	beq	r2,r3,10007fe0 <___vfiprintf_internal_r+0x104>
10007fd4:	a5000044 	addi	r20,r20,1
10007fd8:	a0800007 	ldb	r2,0(r20)
10007fdc:	103ffc1e 	bne	r2,zero,10007fd0 <__alt_data_end+0xf8007fd0>
10007fe0:	a263c83a 	sub	r17,r20,r9
10007fe4:	88001026 	beq	r17,zero,10008028 <___vfiprintf_internal_r+0x14c>
10007fe8:	d8c11c17 	ldw	r3,1136(sp)
10007fec:	d8811b17 	ldw	r2,1132(sp)
10007ff0:	42400015 	stw	r9,0(r8)
10007ff4:	88c7883a 	add	r3,r17,r3
10007ff8:	10800044 	addi	r2,r2,1
10007ffc:	44400115 	stw	r17,4(r8)
10008000:	d8c11c15 	stw	r3,1136(sp)
10008004:	d8811b15 	stw	r2,1132(sp)
10008008:	010001c4 	movi	r4,7
1000800c:	2080760e 	bge	r4,r2,100081e8 <___vfiprintf_internal_r+0x30c>
10008010:	1803b41e 	bne	r3,zero,10008ee4 <___vfiprintf_internal_r+0x1008>
10008014:	d8c12417 	ldw	r3,1168(sp)
10008018:	d8011b15 	stw	zero,1132(sp)
1000801c:	d811883a 	mov	r8,sp
10008020:	1c47883a 	add	r3,r3,r17
10008024:	d8c12415 	stw	r3,1168(sp)
10008028:	a0800007 	ldb	r2,0(r20)
1000802c:	1002dc26 	beq	r2,zero,10008ba0 <___vfiprintf_internal_r+0xcc4>
10008030:	04bfffc4 	movi	r18,-1
10008034:	a2400044 	addi	r9,r20,1
10008038:	a0c00047 	ldb	r3,1(r20)
1000803c:	d8011d85 	stb	zero,1142(sp)
10008040:	002d883a 	mov	r22,zero
10008044:	d8012115 	stw	zero,1156(sp)
10008048:	0023883a 	mov	r17,zero
1000804c:	05001604 	movi	r20,88
10008050:	05400244 	movi	r21,9
10008054:	402f883a 	mov	r23,r8
10008058:	900d883a 	mov	r6,r18
1000805c:	4a400044 	addi	r9,r9,1
10008060:	18bff804 	addi	r2,r3,-32
10008064:	a0828736 	bltu	r20,r2,10008a84 <___vfiprintf_internal_r+0xba8>
10008068:	1085883a 	add	r2,r2,r2
1000806c:	1085883a 	add	r2,r2,r2
10008070:	01040074 	movhi	r4,4097
10008074:	21202104 	addi	r4,r4,-32636
10008078:	1105883a 	add	r2,r2,r4
1000807c:	10800017 	ldw	r2,0(r2)
10008080:	1000683a 	jmp	r2
10008084:	100087e4 	muli	zero,r2,543
10008088:	10008a84 	addi	zero,r2,554
1000808c:	10008a84 	addi	zero,r2,554
10008090:	10008800 	call	11000880 <_gp+0xfe7184>
10008094:	10008a84 	addi	zero,r2,554
10008098:	10008a84 	addi	zero,r2,554
1000809c:	10008a84 	addi	zero,r2,554
100080a0:	10008a84 	addi	zero,r2,554
100080a4:	10008a84 	addi	zero,r2,554
100080a8:	10008a84 	addi	zero,r2,554
100080ac:	10008894 	ori	zero,r2,546
100080b0:	100088bc 	xorhi	zero,r2,546
100080b4:	10008a84 	addi	zero,r2,554
100080b8:	10008328 	cmpgeui	zero,r2,524
100080bc:	100088c8 	cmpgei	zero,r2,547
100080c0:	10008a84 	addi	zero,r2,554
100080c4:	10008334 	orhi	zero,r2,524
100080c8:	10008340 	call	11000834 <_gp+0xfe7138>
100080cc:	10008340 	call	11000834 <_gp+0xfe7138>
100080d0:	10008340 	call	11000834 <_gp+0xfe7138>
100080d4:	10008340 	call	11000834 <_gp+0xfe7138>
100080d8:	10008340 	call	11000834 <_gp+0xfe7138>
100080dc:	10008340 	call	11000834 <_gp+0xfe7138>
100080e0:	10008340 	call	11000834 <_gp+0xfe7138>
100080e4:	10008340 	call	11000834 <_gp+0xfe7138>
100080e8:	10008340 	call	11000834 <_gp+0xfe7138>
100080ec:	10008a84 	addi	zero,r2,554
100080f0:	10008a84 	addi	zero,r2,554
100080f4:	10008a84 	addi	zero,r2,554
100080f8:	10008a84 	addi	zero,r2,554
100080fc:	10008a84 	addi	zero,r2,554
10008100:	10008a84 	addi	zero,r2,554
10008104:	10008a84 	addi	zero,r2,554
10008108:	10008a84 	addi	zero,r2,554
1000810c:	10008a84 	addi	zero,r2,554
10008110:	10008a84 	addi	zero,r2,554
10008114:	10008388 	cmpgei	zero,r2,526
10008118:	10008a84 	addi	zero,r2,554
1000811c:	10008a84 	addi	zero,r2,554
10008120:	10008a84 	addi	zero,r2,554
10008124:	10008a84 	addi	zero,r2,554
10008128:	10008a84 	addi	zero,r2,554
1000812c:	10008a84 	addi	zero,r2,554
10008130:	10008a84 	addi	zero,r2,554
10008134:	10008a84 	addi	zero,r2,554
10008138:	10008a84 	addi	zero,r2,554
1000813c:	10008a84 	addi	zero,r2,554
10008140:	100086dc 	xori	zero,r2,539
10008144:	10008a84 	addi	zero,r2,554
10008148:	10008a84 	addi	zero,r2,554
1000814c:	10008a84 	addi	zero,r2,554
10008150:	10008a84 	addi	zero,r2,554
10008154:	10008a84 	addi	zero,r2,554
10008158:	10008720 	cmpeqi	zero,r2,540
1000815c:	10008a84 	addi	zero,r2,554
10008160:	10008a84 	addi	zero,r2,554
10008164:	10008758 	cmpnei	zero,r2,541
10008168:	10008a84 	addi	zero,r2,554
1000816c:	10008a84 	addi	zero,r2,554
10008170:	10008a84 	addi	zero,r2,554
10008174:	10008a84 	addi	zero,r2,554
10008178:	10008a84 	addi	zero,r2,554
1000817c:	10008a84 	addi	zero,r2,554
10008180:	10008a84 	addi	zero,r2,554
10008184:	10008a84 	addi	zero,r2,554
10008188:	10008a84 	addi	zero,r2,554
1000818c:	10008a84 	addi	zero,r2,554
10008190:	100087b4 	orhi	zero,r2,542
10008194:	10008928 	cmpgeui	zero,r2,548
10008198:	10008a84 	addi	zero,r2,554
1000819c:	10008a84 	addi	zero,r2,554
100081a0:	10008a84 	addi	zero,r2,554
100081a4:	1000891c 	xori	zero,r2,548
100081a8:	10008928 	cmpgeui	zero,r2,548
100081ac:	10008a84 	addi	zero,r2,554
100081b0:	10008a84 	addi	zero,r2,554
100081b4:	1000880c 	andi	zero,r2,544
100081b8:	10008a84 	addi	zero,r2,554
100081bc:	10008824 	muli	zero,r2,544
100081c0:	1000885c 	xori	zero,r2,545
100081c4:	10008a3c 	xorhi	zero,r2,552
100081c8:	10008960 	cmpeqi	zero,r2,549
100081cc:	10008a84 	addi	zero,r2,554
100081d0:	1000896c 	andhi	zero,r2,549
100081d4:	10008a84 	addi	zero,r2,554
100081d8:	100089c4 	addi	zero,r2,551
100081dc:	10008a84 	addi	zero,r2,554
100081e0:	10008a84 	addi	zero,r2,554
100081e4:	100089fc 	xorhi	zero,r2,551
100081e8:	42000204 	addi	r8,r8,8
100081ec:	d8c12417 	ldw	r3,1168(sp)
100081f0:	1c47883a 	add	r3,r3,r17
100081f4:	d8c12415 	stw	r3,1168(sp)
100081f8:	003f8b06 	br	10008028 <__alt_data_end+0xf8008028>
100081fc:	d9012217 	ldw	r4,1160(sp)
10008200:	d9412017 	ldw	r5,1152(sp)
10008204:	da412d15 	stw	r9,1204(sp)
10008208:	0002d340 	call	10002d34 <__swsetup_r>
1000820c:	da412d17 	ldw	r9,1204(sp)
10008210:	1000301e 	bne	r2,zero,100082d4 <___vfiprintf_internal_r+0x3f8>
10008214:	d8c12017 	ldw	r3,1152(sp)
10008218:	01000284 	movi	r4,10
1000821c:	1880030b 	ldhu	r2,12(r3)
10008220:	1007883a 	mov	r3,r2
10008224:	18c0068c 	andi	r3,r3,26
10008228:	193f531e 	bne	r3,r4,10007f78 <__alt_data_end+0xf8007f78>
1000822c:	d9012017 	ldw	r4,1152(sp)
10008230:	20c0038b 	ldhu	r3,14(r4)
10008234:	193fffcc 	andi	r4,r3,65535
10008238:	2120001c 	xori	r4,r4,32768
1000823c:	21200004 	addi	r4,r4,-32768
10008240:	203f4d16 	blt	r4,zero,10007f78 <__alt_data_end+0xf8007f78>
10008244:	d9412017 	ldw	r5,1152(sp)
10008248:	d9012217 	ldw	r4,1160(sp)
1000824c:	d9c12317 	ldw	r7,1164(sp)
10008250:	2b001917 	ldw	r12,100(r5)
10008254:	2ac00717 	ldw	r11,28(r5)
10008258:	2a800917 	ldw	r10,36(r5)
1000825c:	02010004 	movi	r8,1024
10008260:	10bfff4c 	andi	r2,r2,65533
10008264:	da0b883a 	add	r5,sp,r8
10008268:	480d883a 	mov	r6,r9
1000826c:	d881030d 	sth	r2,1036(sp)
10008270:	db011915 	stw	r12,1124(sp)
10008274:	d8c1038d 	sth	r3,1038(sp)
10008278:	dac10715 	stw	r11,1052(sp)
1000827c:	da810915 	stw	r10,1060(sp)
10008280:	dec10015 	stw	sp,1024(sp)
10008284:	dec10415 	stw	sp,1040(sp)
10008288:	da010215 	stw	r8,1032(sp)
1000828c:	da010515 	stw	r8,1044(sp)
10008290:	d8010615 	stw	zero,1048(sp)
10008294:	0007edc0 	call	10007edc <___vfiprintf_internal_r>
10008298:	1021883a 	mov	r16,r2
1000829c:	10000416 	blt	r2,zero,100082b0 <___vfiprintf_internal_r+0x3d4>
100082a0:	d9012217 	ldw	r4,1160(sp)
100082a4:	d9410004 	addi	r5,sp,1024
100082a8:	00046d00 	call	100046d0 <_fflush_r>
100082ac:	10040b1e 	bne	r2,zero,100092dc <___vfiprintf_internal_r+0x1400>
100082b0:	d881030b 	ldhu	r2,1036(sp)
100082b4:	1080100c 	andi	r2,r2,64
100082b8:	10000426 	beq	r2,zero,100082cc <___vfiprintf_internal_r+0x3f0>
100082bc:	d8c12017 	ldw	r3,1152(sp)
100082c0:	1880030b 	ldhu	r2,12(r3)
100082c4:	10801014 	ori	r2,r2,64
100082c8:	1880030d 	sth	r2,12(r3)
100082cc:	8005883a 	mov	r2,r16
100082d0:	00000106 	br	100082d8 <___vfiprintf_internal_r+0x3fc>
100082d4:	00bfffc4 	movi	r2,-1
100082d8:	dfc13717 	ldw	ra,1244(sp)
100082dc:	df013617 	ldw	fp,1240(sp)
100082e0:	ddc13517 	ldw	r23,1236(sp)
100082e4:	dd813417 	ldw	r22,1232(sp)
100082e8:	dd413317 	ldw	r21,1228(sp)
100082ec:	dd013217 	ldw	r20,1224(sp)
100082f0:	dcc13117 	ldw	r19,1220(sp)
100082f4:	dc813017 	ldw	r18,1216(sp)
100082f8:	dc412f17 	ldw	r17,1212(sp)
100082fc:	dc012e17 	ldw	r16,1208(sp)
10008300:	dec13804 	addi	sp,sp,1248
10008304:	f800283a 	ret
10008308:	d9812d15 	stw	r6,1204(sp)
1000830c:	00049f00 	call	100049f0 <__sinit>
10008310:	da412d17 	ldw	r9,1204(sp)
10008314:	003f0306 	br	10007f24 <__alt_data_end+0xf8007f24>
10008318:	d9412117 	ldw	r5,1156(sp)
1000831c:	d8812315 	stw	r2,1164(sp)
10008320:	014bc83a 	sub	r5,zero,r5
10008324:	d9412115 	stw	r5,1156(sp)
10008328:	8c400114 	ori	r17,r17,4
1000832c:	48c00007 	ldb	r3,0(r9)
10008330:	003f4a06 	br	1000805c <__alt_data_end+0xf800805c>
10008334:	8c402014 	ori	r17,r17,128
10008338:	48c00007 	ldb	r3,0(r9)
1000833c:	003f4706 	br	1000805c <__alt_data_end+0xf800805c>
10008340:	4825883a 	mov	r18,r9
10008344:	d8012115 	stw	zero,1156(sp)
10008348:	1f3ff404 	addi	fp,r3,-48
1000834c:	00000106 	br	10008354 <___vfiprintf_internal_r+0x478>
10008350:	1025883a 	mov	r18,r2
10008354:	d9012117 	ldw	r4,1156(sp)
10008358:	01400284 	movi	r5,10
1000835c:	d9812b15 	stw	r6,1196(sp)
10008360:	000ab040 	call	1000ab04 <__mulsi3>
10008364:	90c00007 	ldb	r3,0(r18)
10008368:	1739883a 	add	fp,r2,fp
1000836c:	df012115 	stw	fp,1156(sp)
10008370:	90800044 	addi	r2,r18,1
10008374:	1f3ff404 	addi	fp,r3,-48
10008378:	1013883a 	mov	r9,r2
1000837c:	d9812b17 	ldw	r6,1196(sp)
10008380:	af3ff32e 	bgeu	r21,fp,10008350 <__alt_data_end+0xf8008350>
10008384:	003f3606 	br	10008060 <__alt_data_end+0xf8008060>
10008388:	8c400414 	ori	r17,r17,16
1000838c:	dd811d85 	stb	r22,1142(sp)
10008390:	8880080c 	andi	r2,r17,32
10008394:	b811883a 	mov	r8,r23
10008398:	3025883a 	mov	r18,r6
1000839c:	10016726 	beq	r2,zero,1000893c <___vfiprintf_internal_r+0xa60>
100083a0:	d8c12317 	ldw	r3,1164(sp)
100083a4:	18800117 	ldw	r2,4(r3)
100083a8:	1d000017 	ldw	r20,0(r3)
100083ac:	18c00204 	addi	r3,r3,8
100083b0:	d8c12315 	stw	r3,1164(sp)
100083b4:	102b883a 	mov	r21,r2
100083b8:	10030416 	blt	r2,zero,10008fcc <___vfiprintf_internal_r+0x10f0>
100083bc:	dd811d83 	ldbu	r22,1142(sp)
100083c0:	900f883a 	mov	r7,r18
100083c4:	00800044 	movi	r2,1
100083c8:	a548b03a 	or	r4,r20,r21
100083cc:	90000216 	blt	r18,zero,100083d8 <___vfiprintf_internal_r+0x4fc>
100083d0:	00ffdfc4 	movi	r3,-129
100083d4:	88e2703a 	and	r17,r17,r3
100083d8:	10803fcc 	andi	r2,r2,255
100083dc:	2001db1e 	bne	r4,zero,10008b4c <___vfiprintf_internal_r+0xc70>
100083e0:	9001da1e 	bne	r18,zero,10008b4c <___vfiprintf_internal_r+0xc70>
100083e4:	1002ab1e 	bne	r2,zero,10008e94 <___vfiprintf_internal_r+0xfb8>
100083e8:	8880004c 	andi	r2,r17,1
100083ec:	1002a926 	beq	r2,zero,10008e94 <___vfiprintf_internal_r+0xfb8>
100083f0:	d9c12817 	ldw	r7,1184(sp)
100083f4:	00800c04 	movi	r2,48
100083f8:	d88109c5 	stb	r2,1063(sp)
100083fc:	ddc109c4 	addi	r23,sp,1063
10008400:	3829883a 	mov	r20,r7
10008404:	3c80010e 	bge	r7,r18,1000840c <___vfiprintf_internal_r+0x530>
10008408:	9029883a 	mov	r20,r18
1000840c:	b5803fcc 	andi	r22,r22,255
10008410:	b580201c 	xori	r22,r22,128
10008414:	b5bfe004 	addi	r22,r22,-128
10008418:	b0000126 	beq	r22,zero,10008420 <___vfiprintf_internal_r+0x544>
1000841c:	a5000044 	addi	r20,r20,1
10008420:	8a80008c 	andi	r10,r17,2
10008424:	50000126 	beq	r10,zero,1000842c <___vfiprintf_internal_r+0x550>
10008428:	a5000084 	addi	r20,r20,2
1000842c:	8d40210c 	andi	r21,r17,132
10008430:	a801aa1e 	bne	r21,zero,10008adc <___vfiprintf_internal_r+0xc00>
10008434:	d8c12117 	ldw	r3,1156(sp)
10008438:	1d2dc83a 	sub	r22,r3,r20
1000843c:	0581a70e 	bge	zero,r22,10008adc <___vfiprintf_internal_r+0xc00>
10008440:	07000404 	movi	fp,16
10008444:	d8c11c17 	ldw	r3,1136(sp)
10008448:	e583780e 	bge	fp,r22,1000922c <___vfiprintf_internal_r+0x1350>
1000844c:	01440074 	movhi	r5,4097
10008450:	297ec304 	addi	r5,r5,-1268
10008454:	dc412615 	stw	r17,1176(sp)
10008458:	d9011b17 	ldw	r4,1132(sp)
1000845c:	b023883a 	mov	r17,r22
10008460:	d9412515 	stw	r5,1172(sp)
10008464:	030001c4 	movi	r12,7
10008468:	d9c12915 	stw	r7,1188(sp)
1000846c:	da812a15 	stw	r10,1192(sp)
10008470:	482d883a 	mov	r22,r9
10008474:	00000506 	br	1000848c <___vfiprintf_internal_r+0x5b0>
10008478:	21400084 	addi	r5,r4,2
1000847c:	42000204 	addi	r8,r8,8
10008480:	1009883a 	mov	r4,r2
10008484:	8c7ffc04 	addi	r17,r17,-16
10008488:	e4400d0e 	bge	fp,r17,100084c0 <___vfiprintf_internal_r+0x5e4>
1000848c:	18c00404 	addi	r3,r3,16
10008490:	20800044 	addi	r2,r4,1
10008494:	44c00015 	stw	r19,0(r8)
10008498:	47000115 	stw	fp,4(r8)
1000849c:	d8c11c15 	stw	r3,1136(sp)
100084a0:	d8811b15 	stw	r2,1132(sp)
100084a4:	60bff40e 	bge	r12,r2,10008478 <__alt_data_end+0xf8008478>
100084a8:	1801801e 	bne	r3,zero,10008aac <___vfiprintf_internal_r+0xbd0>
100084ac:	8c7ffc04 	addi	r17,r17,-16
100084b0:	0009883a 	mov	r4,zero
100084b4:	01400044 	movi	r5,1
100084b8:	d811883a 	mov	r8,sp
100084bc:	e47ff316 	blt	fp,r17,1000848c <__alt_data_end+0xf800848c>
100084c0:	b013883a 	mov	r9,r22
100084c4:	d9c12917 	ldw	r7,1188(sp)
100084c8:	882d883a 	mov	r22,r17
100084cc:	da812a17 	ldw	r10,1192(sp)
100084d0:	dc412617 	ldw	r17,1176(sp)
100084d4:	d8812517 	ldw	r2,1172(sp)
100084d8:	b0c7883a 	add	r3,r22,r3
100084dc:	45800115 	stw	r22,4(r8)
100084e0:	40800015 	stw	r2,0(r8)
100084e4:	d8c11c15 	stw	r3,1136(sp)
100084e8:	d9411b15 	stw	r5,1132(sp)
100084ec:	008001c4 	movi	r2,7
100084f0:	11426a16 	blt	r2,r5,10008e9c <___vfiprintf_internal_r+0xfc0>
100084f4:	d9011d87 	ldb	r4,1142(sp)
100084f8:	42000204 	addi	r8,r8,8
100084fc:	28800044 	addi	r2,r5,1
10008500:	20017b1e 	bne	r4,zero,10008af0 <___vfiprintf_internal_r+0xc14>
10008504:	50000c26 	beq	r10,zero,10008538 <___vfiprintf_internal_r+0x65c>
10008508:	d9011d04 	addi	r4,sp,1140
1000850c:	18c00084 	addi	r3,r3,2
10008510:	41000015 	stw	r4,0(r8)
10008514:	01000084 	movi	r4,2
10008518:	41000115 	stw	r4,4(r8)
1000851c:	d8c11c15 	stw	r3,1136(sp)
10008520:	d8811b15 	stw	r2,1132(sp)
10008524:	010001c4 	movi	r4,7
10008528:	20821716 	blt	r4,r2,10008d88 <___vfiprintf_internal_r+0xeac>
1000852c:	100b883a 	mov	r5,r2
10008530:	42000204 	addi	r8,r8,8
10008534:	10800044 	addi	r2,r2,1
10008538:	01002004 	movi	r4,128
1000853c:	a901d126 	beq	r21,r4,10008c84 <___vfiprintf_internal_r+0xda8>
10008540:	91e5c83a 	sub	r18,r18,r7
10008544:	0480290e 	bge	zero,r18,100085ec <___vfiprintf_internal_r+0x710>
10008548:	05800404 	movi	r22,16
1000854c:	05440074 	movhi	r21,4097
10008550:	ad7ebf04 	addi	r21,r21,-1284
10008554:	b4801c0e 	bge	r22,r18,100085c8 <___vfiprintf_internal_r+0x6ec>
10008558:	dc412515 	stw	r17,1172(sp)
1000855c:	070001c4 	movi	fp,7
10008560:	9023883a 	mov	r17,r18
10008564:	d9c12615 	stw	r7,1176(sp)
10008568:	4825883a 	mov	r18,r9
1000856c:	00000506 	br	10008584 <___vfiprintf_internal_r+0x6a8>
10008570:	28800084 	addi	r2,r5,2
10008574:	42000204 	addi	r8,r8,8
10008578:	200b883a 	mov	r5,r4
1000857c:	8c7ffc04 	addi	r17,r17,-16
10008580:	b4400d0e 	bge	r22,r17,100085b8 <___vfiprintf_internal_r+0x6dc>
10008584:	18c00404 	addi	r3,r3,16
10008588:	29000044 	addi	r4,r5,1
1000858c:	44000015 	stw	r16,0(r8)
10008590:	45800115 	stw	r22,4(r8)
10008594:	d8c11c15 	stw	r3,1136(sp)
10008598:	d9011b15 	stw	r4,1132(sp)
1000859c:	e13ff40e 	bge	fp,r4,10008570 <__alt_data_end+0xf8008570>
100085a0:	1801601e 	bne	r3,zero,10008b24 <___vfiprintf_internal_r+0xc48>
100085a4:	8c7ffc04 	addi	r17,r17,-16
100085a8:	000b883a 	mov	r5,zero
100085ac:	00800044 	movi	r2,1
100085b0:	d811883a 	mov	r8,sp
100085b4:	b47ff316 	blt	r22,r17,10008584 <__alt_data_end+0xf8008584>
100085b8:	9013883a 	mov	r9,r18
100085bc:	d9c12617 	ldw	r7,1176(sp)
100085c0:	8825883a 	mov	r18,r17
100085c4:	dc412517 	ldw	r17,1172(sp)
100085c8:	1c87883a 	add	r3,r3,r18
100085cc:	45400015 	stw	r21,0(r8)
100085d0:	44800115 	stw	r18,4(r8)
100085d4:	d8c11c15 	stw	r3,1136(sp)
100085d8:	d8811b15 	stw	r2,1132(sp)
100085dc:	010001c4 	movi	r4,7
100085e0:	20819e16 	blt	r4,r2,10008c5c <___vfiprintf_internal_r+0xd80>
100085e4:	42000204 	addi	r8,r8,8
100085e8:	10800044 	addi	r2,r2,1
100085ec:	38c7883a 	add	r3,r7,r3
100085f0:	45c00015 	stw	r23,0(r8)
100085f4:	41c00115 	stw	r7,4(r8)
100085f8:	d8c11c15 	stw	r3,1136(sp)
100085fc:	d8811b15 	stw	r2,1132(sp)
10008600:	010001c4 	movi	r4,7
10008604:	20819d0e 	bge	r4,r2,10008c7c <___vfiprintf_internal_r+0xda0>
10008608:	1802291e 	bne	r3,zero,10008eb0 <___vfiprintf_internal_r+0xfd4>
1000860c:	d8011b15 	stw	zero,1132(sp)
10008610:	d811883a 	mov	r8,sp
10008614:	8c40010c 	andi	r17,r17,4
10008618:	88017526 	beq	r17,zero,10008bf0 <___vfiprintf_internal_r+0xd14>
1000861c:	d9412117 	ldw	r5,1156(sp)
10008620:	2d23c83a 	sub	r17,r5,r20
10008624:	0441720e 	bge	zero,r17,10008bf0 <___vfiprintf_internal_r+0xd14>
10008628:	04800404 	movi	r18,16
1000862c:	9443170e 	bge	r18,r17,1000928c <___vfiprintf_internal_r+0x13b0>
10008630:	01440074 	movhi	r5,4097
10008634:	297ec304 	addi	r5,r5,-1268
10008638:	d9011b17 	ldw	r4,1132(sp)
1000863c:	d9412515 	stw	r5,1172(sp)
10008640:	058001c4 	movi	r22,7
10008644:	dd412217 	ldw	r21,1160(sp)
10008648:	ddc12017 	ldw	r23,1152(sp)
1000864c:	4839883a 	mov	fp,r9
10008650:	00000506 	br	10008668 <___vfiprintf_internal_r+0x78c>
10008654:	21400084 	addi	r5,r4,2
10008658:	42000204 	addi	r8,r8,8
1000865c:	1009883a 	mov	r4,r2
10008660:	8c7ffc04 	addi	r17,r17,-16
10008664:	94400d0e 	bge	r18,r17,1000869c <___vfiprintf_internal_r+0x7c0>
10008668:	18c00404 	addi	r3,r3,16
1000866c:	20800044 	addi	r2,r4,1
10008670:	44c00015 	stw	r19,0(r8)
10008674:	44800115 	stw	r18,4(r8)
10008678:	d8c11c15 	stw	r3,1136(sp)
1000867c:	d8811b15 	stw	r2,1132(sp)
10008680:	b0bff40e 	bge	r22,r2,10008654 <__alt_data_end+0xf8008654>
10008684:	18016b1e 	bne	r3,zero,10008c34 <___vfiprintf_internal_r+0xd58>
10008688:	8c7ffc04 	addi	r17,r17,-16
1000868c:	0009883a 	mov	r4,zero
10008690:	01400044 	movi	r5,1
10008694:	d811883a 	mov	r8,sp
10008698:	947ff316 	blt	r18,r17,10008668 <__alt_data_end+0xf8008668>
1000869c:	e013883a 	mov	r9,fp
100086a0:	d8812517 	ldw	r2,1172(sp)
100086a4:	1c47883a 	add	r3,r3,r17
100086a8:	44400115 	stw	r17,4(r8)
100086ac:	40800015 	stw	r2,0(r8)
100086b0:	d8c11c15 	stw	r3,1136(sp)
100086b4:	d9411b15 	stw	r5,1132(sp)
100086b8:	008001c4 	movi	r2,7
100086bc:	11414c0e 	bge	r2,r5,10008bf0 <___vfiprintf_internal_r+0xd14>
100086c0:	1801431e 	bne	r3,zero,10008bd0 <___vfiprintf_internal_r+0xcf4>
100086c4:	d8c12117 	ldw	r3,1156(sp)
100086c8:	a0c28e16 	blt	r20,r3,10009104 <___vfiprintf_internal_r+0x1228>
100086cc:	d9012417 	ldw	r4,1168(sp)
100086d0:	2509883a 	add	r4,r4,r20
100086d4:	d9012415 	stw	r4,1168(sp)
100086d8:	00015306 	br	10008c28 <___vfiprintf_internal_r+0xd4c>
100086dc:	8c400414 	ori	r17,r17,16
100086e0:	8880080c 	andi	r2,r17,32
100086e4:	b811883a 	mov	r8,r23
100086e8:	3025883a 	mov	r18,r6
100086ec:	10005f26 	beq	r2,zero,1000886c <___vfiprintf_internal_r+0x990>
100086f0:	d8812317 	ldw	r2,1164(sp)
100086f4:	d8c12317 	ldw	r3,1164(sp)
100086f8:	15000017 	ldw	r20,0(r2)
100086fc:	15400117 	ldw	r21,4(r2)
10008700:	18c00204 	addi	r3,r3,8
10008704:	0005883a 	mov	r2,zero
10008708:	d8c12315 	stw	r3,1164(sp)
1000870c:	a548b03a 	or	r4,r20,r21
10008710:	d8011d85 	stb	zero,1142(sp)
10008714:	900f883a 	mov	r7,r18
10008718:	002d883a 	mov	r22,zero
1000871c:	003f2b06 	br	100083cc <__alt_data_end+0xf80083cc>
10008720:	8c400414 	ori	r17,r17,16
10008724:	8880080c 	andi	r2,r17,32
10008728:	b811883a 	mov	r8,r23
1000872c:	3025883a 	mov	r18,r6
10008730:	1000a826 	beq	r2,zero,100089d4 <___vfiprintf_internal_r+0xaf8>
10008734:	d8812317 	ldw	r2,1164(sp)
10008738:	d8c12317 	ldw	r3,1164(sp)
1000873c:	15000017 	ldw	r20,0(r2)
10008740:	15400117 	ldw	r21,4(r2)
10008744:	18c00204 	addi	r3,r3,8
10008748:	00800044 	movi	r2,1
1000874c:	d8c12315 	stw	r3,1164(sp)
10008750:	a548b03a 	or	r4,r20,r21
10008754:	003fee06 	br	10008710 <__alt_data_end+0xf8008710>
10008758:	01440074 	movhi	r5,4097
1000875c:	297e5904 	addi	r5,r5,-1692
10008760:	dd811d85 	stb	r22,1142(sp)
10008764:	d9412715 	stw	r5,1180(sp)
10008768:	8880080c 	andi	r2,r17,32
1000876c:	b811883a 	mov	r8,r23
10008770:	3025883a 	mov	r18,r6
10008774:	1000a926 	beq	r2,zero,10008a1c <___vfiprintf_internal_r+0xb40>
10008778:	d9412317 	ldw	r5,1164(sp)
1000877c:	2d000017 	ldw	r20,0(r5)
10008780:	2d400117 	ldw	r21,4(r5)
10008784:	29400204 	addi	r5,r5,8
10008788:	d9412315 	stw	r5,1164(sp)
1000878c:	8880004c 	andi	r2,r17,1
10008790:	1001d126 	beq	r2,zero,10008ed8 <___vfiprintf_internal_r+0xffc>
10008794:	a548b03a 	or	r4,r20,r21
10008798:	20021626 	beq	r4,zero,10008ff4 <___vfiprintf_internal_r+0x1118>
1000879c:	00800c04 	movi	r2,48
100087a0:	d8811d05 	stb	r2,1140(sp)
100087a4:	d8c11d45 	stb	r3,1141(sp)
100087a8:	8c400094 	ori	r17,r17,2
100087ac:	00800084 	movi	r2,2
100087b0:	003fd706 	br	10008710 <__alt_data_end+0xf8008710>
100087b4:	d9412317 	ldw	r5,1164(sp)
100087b8:	05000044 	movi	r20,1
100087bc:	b811883a 	mov	r8,r23
100087c0:	28800017 	ldw	r2,0(r5)
100087c4:	29400104 	addi	r5,r5,4
100087c8:	d8011d85 	stb	zero,1142(sp)
100087cc:	d8810005 	stb	r2,1024(sp)
100087d0:	d9412315 	stw	r5,1164(sp)
100087d4:	a00f883a 	mov	r7,r20
100087d8:	ddc10004 	addi	r23,sp,1024
100087dc:	0025883a 	mov	r18,zero
100087e0:	003f0f06 	br	10008420 <__alt_data_end+0xf8008420>
100087e4:	b0803fcc 	andi	r2,r22,255
100087e8:	1080201c 	xori	r2,r2,128
100087ec:	10bfe004 	addi	r2,r2,-128
100087f0:	10021f1e 	bne	r2,zero,10009070 <___vfiprintf_internal_r+0x1194>
100087f4:	05800804 	movi	r22,32
100087f8:	48c00007 	ldb	r3,0(r9)
100087fc:	003e1706 	br	1000805c <__alt_data_end+0xf800805c>
10008800:	8c400054 	ori	r17,r17,1
10008804:	48c00007 	ldb	r3,0(r9)
10008808:	003e1406 	br	1000805c <__alt_data_end+0xf800805c>
1000880c:	48c00007 	ldb	r3,0(r9)
10008810:	01001b04 	movi	r4,108
10008814:	4805883a 	mov	r2,r9
10008818:	19026526 	beq	r3,r4,100091b0 <___vfiprintf_internal_r+0x12d4>
1000881c:	8c400414 	ori	r17,r17,16
10008820:	003e0e06 	br	1000805c <__alt_data_end+0xf800805c>
10008824:	dd811d85 	stb	r22,1142(sp)
10008828:	8880080c 	andi	r2,r17,32
1000882c:	b811883a 	mov	r8,r23
10008830:	10020426 	beq	r2,zero,10009044 <___vfiprintf_internal_r+0x1168>
10008834:	d8c12317 	ldw	r3,1164(sp)
10008838:	d9012417 	ldw	r4,1168(sp)
1000883c:	d9412317 	ldw	r5,1164(sp)
10008840:	18800017 	ldw	r2,0(r3)
10008844:	2007d7fa 	srai	r3,r4,31
10008848:	29400104 	addi	r5,r5,4
1000884c:	d9412315 	stw	r5,1164(sp)
10008850:	11000015 	stw	r4,0(r2)
10008854:	10c00115 	stw	r3,4(r2)
10008858:	003dd706 	br	10007fb8 <__alt_data_end+0xf8007fb8>
1000885c:	8880080c 	andi	r2,r17,32
10008860:	b811883a 	mov	r8,r23
10008864:	3025883a 	mov	r18,r6
10008868:	103fa11e 	bne	r2,zero,100086f0 <__alt_data_end+0xf80086f0>
1000886c:	8880040c 	andi	r2,r17,16
10008870:	1001ea26 	beq	r2,zero,1000901c <___vfiprintf_internal_r+0x1140>
10008874:	d9012317 	ldw	r4,1164(sp)
10008878:	002b883a 	mov	r21,zero
1000887c:	0005883a 	mov	r2,zero
10008880:	25000017 	ldw	r20,0(r4)
10008884:	21000104 	addi	r4,r4,4
10008888:	d9012315 	stw	r4,1164(sp)
1000888c:	a009883a 	mov	r4,r20
10008890:	003f9f06 	br	10008710 <__alt_data_end+0xf8008710>
10008894:	d8812317 	ldw	r2,1164(sp)
10008898:	d8c12317 	ldw	r3,1164(sp)
1000889c:	10800017 	ldw	r2,0(r2)
100088a0:	d8812115 	stw	r2,1156(sp)
100088a4:	d9012117 	ldw	r4,1156(sp)
100088a8:	18800104 	addi	r2,r3,4
100088ac:	203e9a16 	blt	r4,zero,10008318 <__alt_data_end+0xf8008318>
100088b0:	d8812315 	stw	r2,1164(sp)
100088b4:	48c00007 	ldb	r3,0(r9)
100088b8:	003de806 	br	1000805c <__alt_data_end+0xf800805c>
100088bc:	05800ac4 	movi	r22,43
100088c0:	48c00007 	ldb	r3,0(r9)
100088c4:	003de506 	br	1000805c <__alt_data_end+0xf800805c>
100088c8:	48c00007 	ldb	r3,0(r9)
100088cc:	01000a84 	movi	r4,42
100088d0:	48800044 	addi	r2,r9,1
100088d4:	19028326 	beq	r3,r4,100092e4 <___vfiprintf_internal_r+0x1408>
100088d8:	1f3ff404 	addi	fp,r3,-48
100088dc:	af027a36 	bltu	r21,fp,100092c8 <___vfiprintf_internal_r+0x13ec>
100088e0:	1025883a 	mov	r18,r2
100088e4:	0009883a 	mov	r4,zero
100088e8:	00000106 	br	100088f0 <___vfiprintf_internal_r+0xa14>
100088ec:	4825883a 	mov	r18,r9
100088f0:	01400284 	movi	r5,10
100088f4:	000ab040 	call	1000ab04 <__mulsi3>
100088f8:	90c00007 	ldb	r3,0(r18)
100088fc:	e089883a 	add	r4,fp,r2
10008900:	92400044 	addi	r9,r18,1
10008904:	1f3ff404 	addi	fp,r3,-48
10008908:	af3ff82e 	bgeu	r21,fp,100088ec <__alt_data_end+0xf80088ec>
1000890c:	2025883a 	mov	r18,r4
10008910:	20022416 	blt	r4,zero,100091a4 <___vfiprintf_internal_r+0x12c8>
10008914:	900d883a 	mov	r6,r18
10008918:	003dd106 	br	10008060 <__alt_data_end+0xf8008060>
1000891c:	8c401014 	ori	r17,r17,64
10008920:	48c00007 	ldb	r3,0(r9)
10008924:	003dcd06 	br	1000805c <__alt_data_end+0xf800805c>
10008928:	dd811d85 	stb	r22,1142(sp)
1000892c:	8880080c 	andi	r2,r17,32
10008930:	b811883a 	mov	r8,r23
10008934:	3025883a 	mov	r18,r6
10008938:	103e991e 	bne	r2,zero,100083a0 <__alt_data_end+0xf80083a0>
1000893c:	8880040c 	andi	r2,r17,16
10008940:	1001d726 	beq	r2,zero,100090a0 <___vfiprintf_internal_r+0x11c4>
10008944:	d9012317 	ldw	r4,1164(sp)
10008948:	25000017 	ldw	r20,0(r4)
1000894c:	21000104 	addi	r4,r4,4
10008950:	d9012315 	stw	r4,1164(sp)
10008954:	a02bd7fa 	srai	r21,r20,31
10008958:	a805883a 	mov	r2,r21
1000895c:	003e9606 	br	100083b8 <__alt_data_end+0xf80083b8>
10008960:	8c400814 	ori	r17,r17,32
10008964:	48c00007 	ldb	r3,0(r9)
10008968:	003dbc06 	br	1000805c <__alt_data_end+0xf800805c>
1000896c:	d9412317 	ldw	r5,1164(sp)
10008970:	b811883a 	mov	r8,r23
10008974:	d8011d85 	stb	zero,1142(sp)
10008978:	2dc00017 	ldw	r23,0(r5)
1000897c:	3025883a 	mov	r18,r6
10008980:	2d400104 	addi	r21,r5,4
10008984:	b8022f26 	beq	r23,zero,10009244 <___vfiprintf_internal_r+0x1368>
10008988:	b809883a 	mov	r4,r23
1000898c:	30020f16 	blt	r6,zero,100091cc <___vfiprintf_internal_r+0x12f0>
10008990:	000b883a 	mov	r5,zero
10008994:	da012b15 	stw	r8,1196(sp)
10008998:	da412d15 	stw	r9,1204(sp)
1000899c:	000614c0 	call	1000614c <memchr>
100089a0:	da012b17 	ldw	r8,1196(sp)
100089a4:	da412d17 	ldw	r9,1204(sp)
100089a8:	10024226 	beq	r2,zero,100092b4 <___vfiprintf_internal_r+0x13d8>
100089ac:	15cfc83a 	sub	r7,r2,r23
100089b0:	91c1d616 	blt	r18,r7,1000910c <___vfiprintf_internal_r+0x1230>
100089b4:	dd811d83 	ldbu	r22,1142(sp)
100089b8:	dd412315 	stw	r21,1164(sp)
100089bc:	0025883a 	mov	r18,zero
100089c0:	003e8f06 	br	10008400 <__alt_data_end+0xf8008400>
100089c4:	8880080c 	andi	r2,r17,32
100089c8:	b811883a 	mov	r8,r23
100089cc:	3025883a 	mov	r18,r6
100089d0:	103f581e 	bne	r2,zero,10008734 <__alt_data_end+0xf8008734>
100089d4:	8880040c 	andi	r2,r17,16
100089d8:	1001a726 	beq	r2,zero,10009078 <___vfiprintf_internal_r+0x119c>
100089dc:	d9012317 	ldw	r4,1164(sp)
100089e0:	002b883a 	mov	r21,zero
100089e4:	00800044 	movi	r2,1
100089e8:	25000017 	ldw	r20,0(r4)
100089ec:	21000104 	addi	r4,r4,4
100089f0:	d9012315 	stw	r4,1164(sp)
100089f4:	a009883a 	mov	r4,r20
100089f8:	003f4506 	br	10008710 <__alt_data_end+0xf8008710>
100089fc:	01040074 	movhi	r4,4097
10008a00:	213e5e04 	addi	r4,r4,-1672
10008a04:	dd811d85 	stb	r22,1142(sp)
10008a08:	d9012715 	stw	r4,1180(sp)
10008a0c:	8880080c 	andi	r2,r17,32
10008a10:	b811883a 	mov	r8,r23
10008a14:	3025883a 	mov	r18,r6
10008a18:	103f571e 	bne	r2,zero,10008778 <__alt_data_end+0xf8008778>
10008a1c:	8880040c 	andi	r2,r17,16
10008a20:	10017626 	beq	r2,zero,10008ffc <___vfiprintf_internal_r+0x1120>
10008a24:	d8812317 	ldw	r2,1164(sp)
10008a28:	002b883a 	mov	r21,zero
10008a2c:	15000017 	ldw	r20,0(r2)
10008a30:	10800104 	addi	r2,r2,4
10008a34:	d8812315 	stw	r2,1164(sp)
10008a38:	003f5406 	br	1000878c <__alt_data_end+0xf800878c>
10008a3c:	d8c12317 	ldw	r3,1164(sp)
10008a40:	00800c04 	movi	r2,48
10008a44:	01040074 	movhi	r4,4097
10008a48:	213e5e04 	addi	r4,r4,-1672
10008a4c:	1d000017 	ldw	r20,0(r3)
10008a50:	d8811d05 	stb	r2,1140(sp)
10008a54:	18c00104 	addi	r3,r3,4
10008a58:	00801e04 	movi	r2,120
10008a5c:	d8811d45 	stb	r2,1141(sp)
10008a60:	d9012715 	stw	r4,1180(sp)
10008a64:	b811883a 	mov	r8,r23
10008a68:	3025883a 	mov	r18,r6
10008a6c:	002b883a 	mov	r21,zero
10008a70:	8c400094 	ori	r17,r17,2
10008a74:	d8c12315 	stw	r3,1164(sp)
10008a78:	00800084 	movi	r2,2
10008a7c:	a009883a 	mov	r4,r20
10008a80:	003f2306 	br	10008710 <__alt_data_end+0xf8008710>
10008a84:	dd811d85 	stb	r22,1142(sp)
10008a88:	b811883a 	mov	r8,r23
10008a8c:	18004426 	beq	r3,zero,10008ba0 <___vfiprintf_internal_r+0xcc4>
10008a90:	05000044 	movi	r20,1
10008a94:	d8c10005 	stb	r3,1024(sp)
10008a98:	d8011d85 	stb	zero,1142(sp)
10008a9c:	a00f883a 	mov	r7,r20
10008aa0:	ddc10004 	addi	r23,sp,1024
10008aa4:	0025883a 	mov	r18,zero
10008aa8:	003e5d06 	br	10008420 <__alt_data_end+0xf8008420>
10008aac:	d9012217 	ldw	r4,1160(sp)
10008ab0:	d9412017 	ldw	r5,1152(sp)
10008ab4:	d9811a04 	addi	r6,sp,1128
10008ab8:	db012b15 	stw	r12,1196(sp)
10008abc:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
10008ac0:	db012b17 	ldw	r12,1196(sp)
10008ac4:	10003c1e 	bne	r2,zero,10008bb8 <___vfiprintf_internal_r+0xcdc>
10008ac8:	d9011b17 	ldw	r4,1132(sp)
10008acc:	d8c11c17 	ldw	r3,1136(sp)
10008ad0:	d811883a 	mov	r8,sp
10008ad4:	21400044 	addi	r5,r4,1
10008ad8:	003e6a06 	br	10008484 <__alt_data_end+0xf8008484>
10008adc:	d9411b17 	ldw	r5,1132(sp)
10008ae0:	d8c11c17 	ldw	r3,1136(sp)
10008ae4:	28800044 	addi	r2,r5,1
10008ae8:	d9011d87 	ldb	r4,1142(sp)
10008aec:	203e8526 	beq	r4,zero,10008504 <__alt_data_end+0xf8008504>
10008af0:	01000044 	movi	r4,1
10008af4:	d9411d84 	addi	r5,sp,1142
10008af8:	1907883a 	add	r3,r3,r4
10008afc:	41400015 	stw	r5,0(r8)
10008b00:	41000115 	stw	r4,4(r8)
10008b04:	d8c11c15 	stw	r3,1136(sp)
10008b08:	d8811b15 	stw	r2,1132(sp)
10008b0c:	014001c4 	movi	r5,7
10008b10:	28809816 	blt	r5,r2,10008d74 <___vfiprintf_internal_r+0xe98>
10008b14:	100b883a 	mov	r5,r2
10008b18:	42000204 	addi	r8,r8,8
10008b1c:	1105883a 	add	r2,r2,r4
10008b20:	003e7806 	br	10008504 <__alt_data_end+0xf8008504>
10008b24:	d9012217 	ldw	r4,1160(sp)
10008b28:	d9412017 	ldw	r5,1152(sp)
10008b2c:	d9811a04 	addi	r6,sp,1128
10008b30:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
10008b34:	1000201e 	bne	r2,zero,10008bb8 <___vfiprintf_internal_r+0xcdc>
10008b38:	d9411b17 	ldw	r5,1132(sp)
10008b3c:	d8c11c17 	ldw	r3,1136(sp)
10008b40:	d811883a 	mov	r8,sp
10008b44:	28800044 	addi	r2,r5,1
10008b48:	003e8c06 	br	1000857c <__alt_data_end+0xf800857c>
10008b4c:	00c00044 	movi	r3,1
10008b50:	10c0ab26 	beq	r2,r3,10008e00 <___vfiprintf_internal_r+0xf24>
10008b54:	00c00084 	movi	r3,2
10008b58:	10c0901e 	bne	r2,r3,10008d9c <___vfiprintf_internal_r+0xec0>
10008b5c:	d9412717 	ldw	r5,1180(sp)
10008b60:	d88109c4 	addi	r2,sp,1063
10008b64:	a0c003cc 	andi	r3,r20,15
10008b68:	a808973a 	slli	r4,r21,28
10008b6c:	28c7883a 	add	r3,r5,r3
10008b70:	a028d13a 	srli	r20,r20,4
10008b74:	18c00003 	ldbu	r3,0(r3)
10008b78:	a82ad13a 	srli	r21,r21,4
10008b7c:	2528b03a 	or	r20,r4,r20
10008b80:	10c00005 	stb	r3,0(r2)
10008b84:	a546b03a 	or	r3,r20,r21
10008b88:	102f883a 	mov	r23,r2
10008b8c:	10bfffc4 	addi	r2,r2,-1
10008b90:	183ff41e 	bne	r3,zero,10008b64 <__alt_data_end+0xf8008b64>
10008b94:	d8811f17 	ldw	r2,1148(sp)
10008b98:	15cfc83a 	sub	r7,r2,r23
10008b9c:	003e1806 	br	10008400 <__alt_data_end+0xf8008400>
10008ba0:	d8811c17 	ldw	r2,1136(sp)
10008ba4:	10000426 	beq	r2,zero,10008bb8 <___vfiprintf_internal_r+0xcdc>
10008ba8:	d9012217 	ldw	r4,1160(sp)
10008bac:	d9412017 	ldw	r5,1152(sp)
10008bb0:	d9811a04 	addi	r6,sp,1128
10008bb4:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
10008bb8:	d8c12017 	ldw	r3,1152(sp)
10008bbc:	1880030b 	ldhu	r2,12(r3)
10008bc0:	1080100c 	andi	r2,r2,64
10008bc4:	103dc31e 	bne	r2,zero,100082d4 <__alt_data_end+0xf80082d4>
10008bc8:	d8812417 	ldw	r2,1168(sp)
10008bcc:	003dc206 	br	100082d8 <__alt_data_end+0xf80082d8>
10008bd0:	d9012217 	ldw	r4,1160(sp)
10008bd4:	d9412017 	ldw	r5,1152(sp)
10008bd8:	d9811a04 	addi	r6,sp,1128
10008bdc:	da412d15 	stw	r9,1204(sp)
10008be0:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
10008be4:	da412d17 	ldw	r9,1204(sp)
10008be8:	103ff31e 	bne	r2,zero,10008bb8 <__alt_data_end+0xf8008bb8>
10008bec:	d8c11c17 	ldw	r3,1136(sp)
10008bf0:	d9412117 	ldw	r5,1156(sp)
10008bf4:	a140010e 	bge	r20,r5,10008bfc <___vfiprintf_internal_r+0xd20>
10008bf8:	2829883a 	mov	r20,r5
10008bfc:	d8812417 	ldw	r2,1168(sp)
10008c00:	1505883a 	add	r2,r2,r20
10008c04:	d8812415 	stw	r2,1168(sp)
10008c08:	18000726 	beq	r3,zero,10008c28 <___vfiprintf_internal_r+0xd4c>
10008c0c:	d9012217 	ldw	r4,1160(sp)
10008c10:	d9412017 	ldw	r5,1152(sp)
10008c14:	d9811a04 	addi	r6,sp,1128
10008c18:	da412d15 	stw	r9,1204(sp)
10008c1c:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
10008c20:	da412d17 	ldw	r9,1204(sp)
10008c24:	103fe41e 	bne	r2,zero,10008bb8 <__alt_data_end+0xf8008bb8>
10008c28:	d8011b15 	stw	zero,1132(sp)
10008c2c:	d811883a 	mov	r8,sp
10008c30:	003ce106 	br	10007fb8 <__alt_data_end+0xf8007fb8>
10008c34:	a809883a 	mov	r4,r21
10008c38:	b80b883a 	mov	r5,r23
10008c3c:	d9811a04 	addi	r6,sp,1128
10008c40:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
10008c44:	103fdc1e 	bne	r2,zero,10008bb8 <__alt_data_end+0xf8008bb8>
10008c48:	d9011b17 	ldw	r4,1132(sp)
10008c4c:	d8c11c17 	ldw	r3,1136(sp)
10008c50:	d811883a 	mov	r8,sp
10008c54:	21400044 	addi	r5,r4,1
10008c58:	003e8106 	br	10008660 <__alt_data_end+0xf8008660>
10008c5c:	1800cb1e 	bne	r3,zero,10008f8c <___vfiprintf_internal_r+0x10b0>
10008c60:	00800044 	movi	r2,1
10008c64:	ddc00015 	stw	r23,0(sp)
10008c68:	d9c00115 	stw	r7,4(sp)
10008c6c:	d9c11c15 	stw	r7,1136(sp)
10008c70:	d8811b15 	stw	r2,1132(sp)
10008c74:	3807883a 	mov	r3,r7
10008c78:	d811883a 	mov	r8,sp
10008c7c:	42000204 	addi	r8,r8,8
10008c80:	003e6406 	br	10008614 <__alt_data_end+0xf8008614>
10008c84:	d9012117 	ldw	r4,1156(sp)
10008c88:	252dc83a 	sub	r22,r4,r20
10008c8c:	05be2c0e 	bge	zero,r22,10008540 <__alt_data_end+0xf8008540>
10008c90:	07000404 	movi	fp,16
10008c94:	e581830e 	bge	fp,r22,100092a4 <___vfiprintf_internal_r+0x13c8>
10008c98:	05440074 	movhi	r21,4097
10008c9c:	ad7ebf04 	addi	r21,r21,-1284
10008ca0:	dc412515 	stw	r17,1172(sp)
10008ca4:	028001c4 	movi	r10,7
10008ca8:	b023883a 	mov	r17,r22
10008cac:	d9c12615 	stw	r7,1176(sp)
10008cb0:	a82d883a 	mov	r22,r21
10008cb4:	482b883a 	mov	r21,r9
10008cb8:	00000506 	br	10008cd0 <___vfiprintf_internal_r+0xdf4>
10008cbc:	29000084 	addi	r4,r5,2
10008cc0:	42000204 	addi	r8,r8,8
10008cc4:	100b883a 	mov	r5,r2
10008cc8:	8c7ffc04 	addi	r17,r17,-16
10008ccc:	e4400d0e 	bge	fp,r17,10008d04 <___vfiprintf_internal_r+0xe28>
10008cd0:	18c00404 	addi	r3,r3,16
10008cd4:	28800044 	addi	r2,r5,1
10008cd8:	44000015 	stw	r16,0(r8)
10008cdc:	47000115 	stw	fp,4(r8)
10008ce0:	d8c11c15 	stw	r3,1136(sp)
10008ce4:	d8811b15 	stw	r2,1132(sp)
10008ce8:	50bff40e 	bge	r10,r2,10008cbc <__alt_data_end+0xf8008cbc>
10008cec:	1800151e 	bne	r3,zero,10008d44 <___vfiprintf_internal_r+0xe68>
10008cf0:	8c7ffc04 	addi	r17,r17,-16
10008cf4:	000b883a 	mov	r5,zero
10008cf8:	01000044 	movi	r4,1
10008cfc:	d811883a 	mov	r8,sp
10008d00:	e47ff316 	blt	fp,r17,10008cd0 <__alt_data_end+0xf8008cd0>
10008d04:	a813883a 	mov	r9,r21
10008d08:	d9c12617 	ldw	r7,1176(sp)
10008d0c:	b02b883a 	mov	r21,r22
10008d10:	882d883a 	mov	r22,r17
10008d14:	dc412517 	ldw	r17,1172(sp)
10008d18:	1d87883a 	add	r3,r3,r22
10008d1c:	45400015 	stw	r21,0(r8)
10008d20:	45800115 	stw	r22,4(r8)
10008d24:	d8c11c15 	stw	r3,1136(sp)
10008d28:	d9011b15 	stw	r4,1132(sp)
10008d2c:	008001c4 	movi	r2,7
10008d30:	11009116 	blt	r2,r4,10008f78 <___vfiprintf_internal_r+0x109c>
10008d34:	42000204 	addi	r8,r8,8
10008d38:	20800044 	addi	r2,r4,1
10008d3c:	200b883a 	mov	r5,r4
10008d40:	003dff06 	br	10008540 <__alt_data_end+0xf8008540>
10008d44:	d9012217 	ldw	r4,1160(sp)
10008d48:	d9412017 	ldw	r5,1152(sp)
10008d4c:	d9811a04 	addi	r6,sp,1128
10008d50:	da812c15 	stw	r10,1200(sp)
10008d54:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
10008d58:	da812c17 	ldw	r10,1200(sp)
10008d5c:	103f961e 	bne	r2,zero,10008bb8 <__alt_data_end+0xf8008bb8>
10008d60:	d9411b17 	ldw	r5,1132(sp)
10008d64:	d8c11c17 	ldw	r3,1136(sp)
10008d68:	d811883a 	mov	r8,sp
10008d6c:	29000044 	addi	r4,r5,1
10008d70:	003fd506 	br	10008cc8 <__alt_data_end+0xf8008cc8>
10008d74:	1800701e 	bne	r3,zero,10008f38 <___vfiprintf_internal_r+0x105c>
10008d78:	000b883a 	mov	r5,zero
10008d7c:	2005883a 	mov	r2,r4
10008d80:	d811883a 	mov	r8,sp
10008d84:	003ddf06 	br	10008504 <__alt_data_end+0xf8008504>
10008d88:	18005d1e 	bne	r3,zero,10008f00 <___vfiprintf_internal_r+0x1024>
10008d8c:	000b883a 	mov	r5,zero
10008d90:	00800044 	movi	r2,1
10008d94:	d811883a 	mov	r8,sp
10008d98:	003de706 	br	10008538 <__alt_data_end+0xf8008538>
10008d9c:	d8c109c4 	addi	r3,sp,1063
10008da0:	a008d0fa 	srli	r4,r20,3
10008da4:	a80a977a 	slli	r5,r21,29
10008da8:	a82ad0fa 	srli	r21,r21,3
10008dac:	a50001cc 	andi	r20,r20,7
10008db0:	a0800c04 	addi	r2,r20,48
10008db4:	2928b03a 	or	r20,r5,r4
10008db8:	18800005 	stb	r2,0(r3)
10008dbc:	a548b03a 	or	r4,r20,r21
10008dc0:	182f883a 	mov	r23,r3
10008dc4:	18ffffc4 	addi	r3,r3,-1
10008dc8:	203ff51e 	bne	r4,zero,10008da0 <__alt_data_end+0xf8008da0>
10008dcc:	8900004c 	andi	r4,r17,1
10008dd0:	b80b883a 	mov	r5,r23
10008dd4:	203f6f26 	beq	r4,zero,10008b94 <__alt_data_end+0xf8008b94>
10008dd8:	10803fcc 	andi	r2,r2,255
10008ddc:	1080201c 	xori	r2,r2,128
10008de0:	10bfe004 	addi	r2,r2,-128
10008de4:	01000c04 	movi	r4,48
10008de8:	1100f526 	beq	r2,r4,100091c0 <___vfiprintf_internal_r+0x12e4>
10008dec:	293fffc5 	stb	r4,-1(r5)
10008df0:	d9011f17 	ldw	r4,1148(sp)
10008df4:	182f883a 	mov	r23,r3
10008df8:	20cfc83a 	sub	r7,r4,r3
10008dfc:	003d8006 	br	10008400 <__alt_data_end+0xf8008400>
10008e00:	a800021e 	bne	r21,zero,10008e0c <___vfiprintf_internal_r+0xf30>
10008e04:	00800244 	movi	r2,9
10008e08:	15001d2e 	bgeu	r2,r20,10008e80 <___vfiprintf_internal_r+0xfa4>
10008e0c:	dc412515 	stw	r17,1172(sp)
10008e10:	d88109c4 	addi	r2,sp,1063
10008e14:	a823883a 	mov	r17,r21
10008e18:	4039883a 	mov	fp,r8
10008e1c:	482b883a 	mov	r21,r9
10008e20:	a009883a 	mov	r4,r20
10008e24:	880b883a 	mov	r5,r17
10008e28:	01800284 	movi	r6,10
10008e2c:	000f883a 	mov	r7,zero
10008e30:	102f883a 	mov	r23,r2
10008e34:	000a3bc0 	call	1000a3bc <__umoddi3>
10008e38:	10800c04 	addi	r2,r2,48
10008e3c:	a009883a 	mov	r4,r20
10008e40:	880b883a 	mov	r5,r17
10008e44:	b8800005 	stb	r2,0(r23)
10008e48:	01800284 	movi	r6,10
10008e4c:	000f883a 	mov	r7,zero
10008e50:	0009d680 	call	10009d68 <__udivdi3>
10008e54:	1823883a 	mov	r17,r3
10008e58:	10c6b03a 	or	r3,r2,r3
10008e5c:	1029883a 	mov	r20,r2
10008e60:	b8bfffc4 	addi	r2,r23,-1
10008e64:	183fee1e 	bne	r3,zero,10008e20 <__alt_data_end+0xf8008e20>
10008e68:	d9411f17 	ldw	r5,1148(sp)
10008e6c:	e011883a 	mov	r8,fp
10008e70:	dc412517 	ldw	r17,1172(sp)
10008e74:	a813883a 	mov	r9,r21
10008e78:	2dcfc83a 	sub	r7,r5,r23
10008e7c:	003d6006 	br	10008400 <__alt_data_end+0xf8008400>
10008e80:	a5000c04 	addi	r20,r20,48
10008e84:	dd0109c5 	stb	r20,1063(sp)
10008e88:	d9c12817 	ldw	r7,1184(sp)
10008e8c:	ddc109c4 	addi	r23,sp,1063
10008e90:	003d5b06 	br	10008400 <__alt_data_end+0xf8008400>
10008e94:	ddc10a04 	addi	r23,sp,1064
10008e98:	003d5906 	br	10008400 <__alt_data_end+0xf8008400>
10008e9c:	1800891e 	bne	r3,zero,100090c4 <___vfiprintf_internal_r+0x11e8>
10008ea0:	000b883a 	mov	r5,zero
10008ea4:	00800044 	movi	r2,1
10008ea8:	d811883a 	mov	r8,sp
10008eac:	003f0e06 	br	10008ae8 <__alt_data_end+0xf8008ae8>
10008eb0:	d9012217 	ldw	r4,1160(sp)
10008eb4:	d9412017 	ldw	r5,1152(sp)
10008eb8:	d9811a04 	addi	r6,sp,1128
10008ebc:	da412d15 	stw	r9,1204(sp)
10008ec0:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
10008ec4:	da412d17 	ldw	r9,1204(sp)
10008ec8:	103f3b1e 	bne	r2,zero,10008bb8 <__alt_data_end+0xf8008bb8>
10008ecc:	d8c11c17 	ldw	r3,1136(sp)
10008ed0:	d811883a 	mov	r8,sp
10008ed4:	003dcf06 	br	10008614 <__alt_data_end+0xf8008614>
10008ed8:	00800084 	movi	r2,2
10008edc:	a548b03a 	or	r4,r20,r21
10008ee0:	003e0b06 	br	10008710 <__alt_data_end+0xf8008710>
10008ee4:	d9012217 	ldw	r4,1160(sp)
10008ee8:	d9412017 	ldw	r5,1152(sp)
10008eec:	d9811a04 	addi	r6,sp,1128
10008ef0:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
10008ef4:	103f301e 	bne	r2,zero,10008bb8 <__alt_data_end+0xf8008bb8>
10008ef8:	d811883a 	mov	r8,sp
10008efc:	003cbb06 	br	100081ec <__alt_data_end+0xf80081ec>
10008f00:	d9012217 	ldw	r4,1160(sp)
10008f04:	d9412017 	ldw	r5,1152(sp)
10008f08:	d9811a04 	addi	r6,sp,1128
10008f0c:	d9c12b15 	stw	r7,1196(sp)
10008f10:	da412d15 	stw	r9,1204(sp)
10008f14:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
10008f18:	d9c12b17 	ldw	r7,1196(sp)
10008f1c:	da412d17 	ldw	r9,1204(sp)
10008f20:	103f251e 	bne	r2,zero,10008bb8 <__alt_data_end+0xf8008bb8>
10008f24:	d9411b17 	ldw	r5,1132(sp)
10008f28:	d8c11c17 	ldw	r3,1136(sp)
10008f2c:	d811883a 	mov	r8,sp
10008f30:	28800044 	addi	r2,r5,1
10008f34:	003d8006 	br	10008538 <__alt_data_end+0xf8008538>
10008f38:	d9012217 	ldw	r4,1160(sp)
10008f3c:	d9412017 	ldw	r5,1152(sp)
10008f40:	d9811a04 	addi	r6,sp,1128
10008f44:	d9c12b15 	stw	r7,1196(sp)
10008f48:	da412d15 	stw	r9,1204(sp)
10008f4c:	da812c15 	stw	r10,1200(sp)
10008f50:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
10008f54:	d9c12b17 	ldw	r7,1196(sp)
10008f58:	da412d17 	ldw	r9,1204(sp)
10008f5c:	da812c17 	ldw	r10,1200(sp)
10008f60:	103f151e 	bne	r2,zero,10008bb8 <__alt_data_end+0xf8008bb8>
10008f64:	d9411b17 	ldw	r5,1132(sp)
10008f68:	d8c11c17 	ldw	r3,1136(sp)
10008f6c:	d811883a 	mov	r8,sp
10008f70:	28800044 	addi	r2,r5,1
10008f74:	003d6306 	br	10008504 <__alt_data_end+0xf8008504>
10008f78:	18009e1e 	bne	r3,zero,100091f4 <___vfiprintf_internal_r+0x1318>
10008f7c:	000b883a 	mov	r5,zero
10008f80:	00800044 	movi	r2,1
10008f84:	d811883a 	mov	r8,sp
10008f88:	003d6d06 	br	10008540 <__alt_data_end+0xf8008540>
10008f8c:	d9012217 	ldw	r4,1160(sp)
10008f90:	d9412017 	ldw	r5,1152(sp)
10008f94:	d9811a04 	addi	r6,sp,1128
10008f98:	d9c12b15 	stw	r7,1196(sp)
10008f9c:	da412d15 	stw	r9,1204(sp)
10008fa0:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
10008fa4:	d9c12b17 	ldw	r7,1196(sp)
10008fa8:	da412d17 	ldw	r9,1204(sp)
10008fac:	103f021e 	bne	r2,zero,10008bb8 <__alt_data_end+0xf8008bb8>
10008fb0:	d8811b17 	ldw	r2,1132(sp)
10008fb4:	d8c11c17 	ldw	r3,1136(sp)
10008fb8:	d811883a 	mov	r8,sp
10008fbc:	10800044 	addi	r2,r2,1
10008fc0:	003d8a06 	br	100085ec <__alt_data_end+0xf80085ec>
10008fc4:	4829883a 	mov	r20,r9
10008fc8:	003c1706 	br	10008028 <__alt_data_end+0xf8008028>
10008fcc:	0529c83a 	sub	r20,zero,r20
10008fd0:	a004c03a 	cmpne	r2,r20,zero
10008fd4:	056bc83a 	sub	r21,zero,r21
10008fd8:	a8abc83a 	sub	r21,r21,r2
10008fdc:	05800b44 	movi	r22,45
10008fe0:	dd811d85 	stb	r22,1142(sp)
10008fe4:	900f883a 	mov	r7,r18
10008fe8:	00800044 	movi	r2,1
10008fec:	a548b03a 	or	r4,r20,r21
10008ff0:	003cf606 	br	100083cc <__alt_data_end+0xf80083cc>
10008ff4:	00800084 	movi	r2,2
10008ff8:	003dc506 	br	10008710 <__alt_data_end+0xf8008710>
10008ffc:	8880100c 	andi	r2,r17,64
10009000:	10005a26 	beq	r2,zero,1000916c <___vfiprintf_internal_r+0x1290>
10009004:	d9012317 	ldw	r4,1164(sp)
10009008:	002b883a 	mov	r21,zero
1000900c:	2500000b 	ldhu	r20,0(r4)
10009010:	21000104 	addi	r4,r4,4
10009014:	d9012315 	stw	r4,1164(sp)
10009018:	003ddc06 	br	1000878c <__alt_data_end+0xf800878c>
1000901c:	8880100c 	andi	r2,r17,64
10009020:	10005826 	beq	r2,zero,10009184 <___vfiprintf_internal_r+0x12a8>
10009024:	d9412317 	ldw	r5,1164(sp)
10009028:	002b883a 	mov	r21,zero
1000902c:	0005883a 	mov	r2,zero
10009030:	2d00000b 	ldhu	r20,0(r5)
10009034:	29400104 	addi	r5,r5,4
10009038:	d9412315 	stw	r5,1164(sp)
1000903c:	a009883a 	mov	r4,r20
10009040:	003db306 	br	10008710 <__alt_data_end+0xf8008710>
10009044:	8880040c 	andi	r2,r17,16
10009048:	1000411e 	bne	r2,zero,10009150 <___vfiprintf_internal_r+0x1274>
1000904c:	8c40100c 	andi	r17,r17,64
10009050:	88008726 	beq	r17,zero,10009270 <___vfiprintf_internal_r+0x1394>
10009054:	d9412317 	ldw	r5,1164(sp)
10009058:	d8c12417 	ldw	r3,1168(sp)
1000905c:	28800017 	ldw	r2,0(r5)
10009060:	29400104 	addi	r5,r5,4
10009064:	d9412315 	stw	r5,1164(sp)
10009068:	10c0000d 	sth	r3,0(r2)
1000906c:	003bd206 	br	10007fb8 <__alt_data_end+0xf8007fb8>
10009070:	48c00007 	ldb	r3,0(r9)
10009074:	003bf906 	br	1000805c <__alt_data_end+0xf800805c>
10009078:	8880100c 	andi	r2,r17,64
1000907c:	10002c26 	beq	r2,zero,10009130 <___vfiprintf_internal_r+0x1254>
10009080:	d9412317 	ldw	r5,1164(sp)
10009084:	002b883a 	mov	r21,zero
10009088:	00800044 	movi	r2,1
1000908c:	2d00000b 	ldhu	r20,0(r5)
10009090:	29400104 	addi	r5,r5,4
10009094:	d9412315 	stw	r5,1164(sp)
10009098:	a009883a 	mov	r4,r20
1000909c:	003d9c06 	br	10008710 <__alt_data_end+0xf8008710>
100090a0:	8880100c 	andi	r2,r17,64
100090a4:	10001b26 	beq	r2,zero,10009114 <___vfiprintf_internal_r+0x1238>
100090a8:	d9412317 	ldw	r5,1164(sp)
100090ac:	2d00000f 	ldh	r20,0(r5)
100090b0:	29400104 	addi	r5,r5,4
100090b4:	d9412315 	stw	r5,1164(sp)
100090b8:	a02bd7fa 	srai	r21,r20,31
100090bc:	a805883a 	mov	r2,r21
100090c0:	003cbd06 	br	100083b8 <__alt_data_end+0xf80083b8>
100090c4:	d9012217 	ldw	r4,1160(sp)
100090c8:	d9412017 	ldw	r5,1152(sp)
100090cc:	d9811a04 	addi	r6,sp,1128
100090d0:	d9c12b15 	stw	r7,1196(sp)
100090d4:	da412d15 	stw	r9,1204(sp)
100090d8:	da812c15 	stw	r10,1200(sp)
100090dc:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
100090e0:	d9c12b17 	ldw	r7,1196(sp)
100090e4:	da412d17 	ldw	r9,1204(sp)
100090e8:	da812c17 	ldw	r10,1200(sp)
100090ec:	103eb21e 	bne	r2,zero,10008bb8 <__alt_data_end+0xf8008bb8>
100090f0:	d9411b17 	ldw	r5,1132(sp)
100090f4:	d8c11c17 	ldw	r3,1136(sp)
100090f8:	d811883a 	mov	r8,sp
100090fc:	28800044 	addi	r2,r5,1
10009100:	003e7906 	br	10008ae8 <__alt_data_end+0xf8008ae8>
10009104:	1829883a 	mov	r20,r3
10009108:	003d7006 	br	100086cc <__alt_data_end+0xf80086cc>
1000910c:	900f883a 	mov	r7,r18
10009110:	003e2806 	br	100089b4 <__alt_data_end+0xf80089b4>
10009114:	d8812317 	ldw	r2,1164(sp)
10009118:	15000017 	ldw	r20,0(r2)
1000911c:	10800104 	addi	r2,r2,4
10009120:	d8812315 	stw	r2,1164(sp)
10009124:	a02bd7fa 	srai	r21,r20,31
10009128:	a805883a 	mov	r2,r21
1000912c:	003ca206 	br	100083b8 <__alt_data_end+0xf80083b8>
10009130:	d8812317 	ldw	r2,1164(sp)
10009134:	002b883a 	mov	r21,zero
10009138:	15000017 	ldw	r20,0(r2)
1000913c:	10800104 	addi	r2,r2,4
10009140:	d8812315 	stw	r2,1164(sp)
10009144:	a009883a 	mov	r4,r20
10009148:	00800044 	movi	r2,1
1000914c:	003d7006 	br	10008710 <__alt_data_end+0xf8008710>
10009150:	d8c12317 	ldw	r3,1164(sp)
10009154:	d9012417 	ldw	r4,1168(sp)
10009158:	18800017 	ldw	r2,0(r3)
1000915c:	18c00104 	addi	r3,r3,4
10009160:	d8c12315 	stw	r3,1164(sp)
10009164:	11000015 	stw	r4,0(r2)
10009168:	003b9306 	br	10007fb8 <__alt_data_end+0xf8007fb8>
1000916c:	d9412317 	ldw	r5,1164(sp)
10009170:	002b883a 	mov	r21,zero
10009174:	2d000017 	ldw	r20,0(r5)
10009178:	29400104 	addi	r5,r5,4
1000917c:	d9412315 	stw	r5,1164(sp)
10009180:	003d8206 	br	1000878c <__alt_data_end+0xf800878c>
10009184:	d8812317 	ldw	r2,1164(sp)
10009188:	002b883a 	mov	r21,zero
1000918c:	15000017 	ldw	r20,0(r2)
10009190:	10800104 	addi	r2,r2,4
10009194:	d8812315 	stw	r2,1164(sp)
10009198:	a009883a 	mov	r4,r20
1000919c:	0005883a 	mov	r2,zero
100091a0:	003d5b06 	br	10008710 <__alt_data_end+0xf8008710>
100091a4:	04bfffc4 	movi	r18,-1
100091a8:	900d883a 	mov	r6,r18
100091ac:	003bac06 	br	10008060 <__alt_data_end+0xf8008060>
100091b0:	4a400044 	addi	r9,r9,1
100091b4:	8c400814 	ori	r17,r17,32
100091b8:	10c00047 	ldb	r3,1(r2)
100091bc:	003ba706 	br	1000805c <__alt_data_end+0xf800805c>
100091c0:	d8c11f17 	ldw	r3,1148(sp)
100091c4:	1dcfc83a 	sub	r7,r3,r23
100091c8:	003c8d06 	br	10008400 <__alt_data_end+0xf8008400>
100091cc:	da012b15 	stw	r8,1196(sp)
100091d0:	da412d15 	stw	r9,1204(sp)
100091d4:	0000b300 	call	10000b30 <strlen>
100091d8:	100f883a 	mov	r7,r2
100091dc:	dd811d83 	ldbu	r22,1142(sp)
100091e0:	dd412315 	stw	r21,1164(sp)
100091e4:	0025883a 	mov	r18,zero
100091e8:	da012b17 	ldw	r8,1196(sp)
100091ec:	da412d17 	ldw	r9,1204(sp)
100091f0:	003c8306 	br	10008400 <__alt_data_end+0xf8008400>
100091f4:	d9012217 	ldw	r4,1160(sp)
100091f8:	d9412017 	ldw	r5,1152(sp)
100091fc:	d9811a04 	addi	r6,sp,1128
10009200:	d9c12b15 	stw	r7,1196(sp)
10009204:	da412d15 	stw	r9,1204(sp)
10009208:	0007dc80 	call	10007dc8 <__sprint_r.part.0>
1000920c:	d9c12b17 	ldw	r7,1196(sp)
10009210:	da412d17 	ldw	r9,1204(sp)
10009214:	103e681e 	bne	r2,zero,10008bb8 <__alt_data_end+0xf8008bb8>
10009218:	d9411b17 	ldw	r5,1132(sp)
1000921c:	d8c11c17 	ldw	r3,1136(sp)
10009220:	d811883a 	mov	r8,sp
10009224:	28800044 	addi	r2,r5,1
10009228:	003cc506 	br	10008540 <__alt_data_end+0xf8008540>
1000922c:	d9411b17 	ldw	r5,1132(sp)
10009230:	01040074 	movhi	r4,4097
10009234:	213ec304 	addi	r4,r4,-1268
10009238:	d9012515 	stw	r4,1172(sp)
1000923c:	29400044 	addi	r5,r5,1
10009240:	003ca406 	br	100084d4 <__alt_data_end+0xf80084d4>
10009244:	00800184 	movi	r2,6
10009248:	300f883a 	mov	r7,r6
1000924c:	1180012e 	bgeu	r2,r6,10009254 <___vfiprintf_internal_r+0x1378>
10009250:	100f883a 	mov	r7,r2
10009254:	3829883a 	mov	r20,r7
10009258:	38001e16 	blt	r7,zero,100092d4 <___vfiprintf_internal_r+0x13f8>
1000925c:	dd412315 	stw	r21,1164(sp)
10009260:	05c40074 	movhi	r23,4097
10009264:	bdfe6304 	addi	r23,r23,-1652
10009268:	0025883a 	mov	r18,zero
1000926c:	003c6c06 	br	10008420 <__alt_data_end+0xf8008420>
10009270:	d9012317 	ldw	r4,1164(sp)
10009274:	d9412417 	ldw	r5,1168(sp)
10009278:	20800017 	ldw	r2,0(r4)
1000927c:	21000104 	addi	r4,r4,4
10009280:	d9012315 	stw	r4,1164(sp)
10009284:	11400015 	stw	r5,0(r2)
10009288:	003b4b06 	br	10007fb8 <__alt_data_end+0xf8007fb8>
1000928c:	d9411b17 	ldw	r5,1132(sp)
10009290:	00840074 	movhi	r2,4097
10009294:	10bec304 	addi	r2,r2,-1268
10009298:	d8812515 	stw	r2,1172(sp)
1000929c:	29400044 	addi	r5,r5,1
100092a0:	003cff06 	br	100086a0 <__alt_data_end+0xf80086a0>
100092a4:	1009883a 	mov	r4,r2
100092a8:	05440074 	movhi	r21,4097
100092ac:	ad7ebf04 	addi	r21,r21,-1284
100092b0:	003e9906 	br	10008d18 <__alt_data_end+0xf8008d18>
100092b4:	900f883a 	mov	r7,r18
100092b8:	dd811d83 	ldbu	r22,1142(sp)
100092bc:	dd412315 	stw	r21,1164(sp)
100092c0:	0025883a 	mov	r18,zero
100092c4:	003c4e06 	br	10008400 <__alt_data_end+0xf8008400>
100092c8:	1013883a 	mov	r9,r2
100092cc:	000d883a 	mov	r6,zero
100092d0:	003b6306 	br	10008060 <__alt_data_end+0xf8008060>
100092d4:	0029883a 	mov	r20,zero
100092d8:	003fe006 	br	1000925c <__alt_data_end+0xf800925c>
100092dc:	043fffc4 	movi	r16,-1
100092e0:	003bf306 	br	100082b0 <__alt_data_end+0xf80082b0>
100092e4:	d9412317 	ldw	r5,1164(sp)
100092e8:	48c00043 	ldbu	r3,1(r9)
100092ec:	1013883a 	mov	r9,r2
100092f0:	29800017 	ldw	r6,0(r5)
100092f4:	29000104 	addi	r4,r5,4
100092f8:	d9012315 	stw	r4,1164(sp)
100092fc:	30000416 	blt	r6,zero,10009310 <___vfiprintf_internal_r+0x1434>
10009300:	18c03fcc 	andi	r3,r3,255
10009304:	18c0201c 	xori	r3,r3,128
10009308:	18ffe004 	addi	r3,r3,-128
1000930c:	003b5306 	br	1000805c <__alt_data_end+0xf800805c>
10009310:	18c03fcc 	andi	r3,r3,255
10009314:	18c0201c 	xori	r3,r3,128
10009318:	01bfffc4 	movi	r6,-1
1000931c:	18ffe004 	addi	r3,r3,-128
10009320:	003b4e06 	br	1000805c <__alt_data_end+0xf800805c>

10009324 <__vfiprintf_internal>:
10009324:	00840074 	movhi	r2,4097
10009328:	1085c204 	addi	r2,r2,5896
1000932c:	2007883a 	mov	r3,r4
10009330:	11000017 	ldw	r4,0(r2)
10009334:	2805883a 	mov	r2,r5
10009338:	300f883a 	mov	r7,r6
1000933c:	180b883a 	mov	r5,r3
10009340:	100d883a 	mov	r6,r2
10009344:	0007edc1 	jmpi	10007edc <___vfiprintf_internal_r>

10009348 <_write_r>:
10009348:	defffd04 	addi	sp,sp,-12
1000934c:	dc400115 	stw	r17,4(sp)
10009350:	dc000015 	stw	r16,0(sp)
10009354:	2023883a 	mov	r17,r4
10009358:	04040074 	movhi	r16,4097
1000935c:	840c9404 	addi	r16,r16,12880
10009360:	2809883a 	mov	r4,r5
10009364:	300b883a 	mov	r5,r6
10009368:	380d883a 	mov	r6,r7
1000936c:	dfc00215 	stw	ra,8(sp)
10009370:	80000015 	stw	zero,0(r16)
10009374:	000dc140 	call	1000dc14 <write>
10009378:	00ffffc4 	movi	r3,-1
1000937c:	10c00526 	beq	r2,r3,10009394 <_write_r+0x4c>
10009380:	dfc00217 	ldw	ra,8(sp)
10009384:	dc400117 	ldw	r17,4(sp)
10009388:	dc000017 	ldw	r16,0(sp)
1000938c:	dec00304 	addi	sp,sp,12
10009390:	f800283a 	ret
10009394:	80c00017 	ldw	r3,0(r16)
10009398:	183ff926 	beq	r3,zero,10009380 <__alt_data_end+0xf8009380>
1000939c:	88c00015 	stw	r3,0(r17)
100093a0:	dfc00217 	ldw	ra,8(sp)
100093a4:	dc400117 	ldw	r17,4(sp)
100093a8:	dc000017 	ldw	r16,0(sp)
100093ac:	dec00304 	addi	sp,sp,12
100093b0:	f800283a 	ret

100093b4 <_close_r>:
100093b4:	defffd04 	addi	sp,sp,-12
100093b8:	dc400115 	stw	r17,4(sp)
100093bc:	dc000015 	stw	r16,0(sp)
100093c0:	2023883a 	mov	r17,r4
100093c4:	04040074 	movhi	r16,4097
100093c8:	840c9404 	addi	r16,r16,12880
100093cc:	2809883a 	mov	r4,r5
100093d0:	dfc00215 	stw	ra,8(sp)
100093d4:	80000015 	stw	zero,0(r16)
100093d8:	000d3000 	call	1000d300 <close>
100093dc:	00ffffc4 	movi	r3,-1
100093e0:	10c00526 	beq	r2,r3,100093f8 <_close_r+0x44>
100093e4:	dfc00217 	ldw	ra,8(sp)
100093e8:	dc400117 	ldw	r17,4(sp)
100093ec:	dc000017 	ldw	r16,0(sp)
100093f0:	dec00304 	addi	sp,sp,12
100093f4:	f800283a 	ret
100093f8:	80c00017 	ldw	r3,0(r16)
100093fc:	183ff926 	beq	r3,zero,100093e4 <__alt_data_end+0xf80093e4>
10009400:	88c00015 	stw	r3,0(r17)
10009404:	dfc00217 	ldw	ra,8(sp)
10009408:	dc400117 	ldw	r17,4(sp)
1000940c:	dc000017 	ldw	r16,0(sp)
10009410:	dec00304 	addi	sp,sp,12
10009414:	f800283a 	ret

10009418 <_calloc_r>:
10009418:	defffe04 	addi	sp,sp,-8
1000941c:	dc000015 	stw	r16,0(sp)
10009420:	2021883a 	mov	r16,r4
10009424:	2809883a 	mov	r4,r5
10009428:	300b883a 	mov	r5,r6
1000942c:	dfc00115 	stw	ra,4(sp)
10009430:	000ab040 	call	1000ab04 <__mulsi3>
10009434:	8009883a 	mov	r4,r16
10009438:	100b883a 	mov	r5,r2
1000943c:	00059880 	call	10005988 <_malloc_r>
10009440:	1021883a 	mov	r16,r2
10009444:	10002826 	beq	r2,zero,100094e8 <_calloc_r+0xd0>
10009448:	11bfff17 	ldw	r6,-4(r2)
1000944c:	00ffff04 	movi	r3,-4
10009450:	00800904 	movi	r2,36
10009454:	30cc703a 	and	r6,r6,r3
10009458:	30cd883a 	add	r6,r6,r3
1000945c:	11801436 	bltu	r2,r6,100094b0 <_calloc_r+0x98>
10009460:	00c004c4 	movi	r3,19
10009464:	19800936 	bltu	r3,r6,1000948c <_calloc_r+0x74>
10009468:	8005883a 	mov	r2,r16
1000946c:	10000015 	stw	zero,0(r2)
10009470:	10000115 	stw	zero,4(r2)
10009474:	10000215 	stw	zero,8(r2)
10009478:	8005883a 	mov	r2,r16
1000947c:	dfc00117 	ldw	ra,4(sp)
10009480:	dc000017 	ldw	r16,0(sp)
10009484:	dec00204 	addi	sp,sp,8
10009488:	f800283a 	ret
1000948c:	80000015 	stw	zero,0(r16)
10009490:	80000115 	stw	zero,4(r16)
10009494:	00c006c4 	movi	r3,27
10009498:	19800d2e 	bgeu	r3,r6,100094d0 <_calloc_r+0xb8>
1000949c:	80000215 	stw	zero,8(r16)
100094a0:	80000315 	stw	zero,12(r16)
100094a4:	30800c26 	beq	r6,r2,100094d8 <_calloc_r+0xc0>
100094a8:	80800404 	addi	r2,r16,16
100094ac:	003fef06 	br	1000946c <__alt_data_end+0xf800946c>
100094b0:	8009883a 	mov	r4,r16
100094b4:	000b883a 	mov	r5,zero
100094b8:	000647c0 	call	1000647c <memset>
100094bc:	8005883a 	mov	r2,r16
100094c0:	dfc00117 	ldw	ra,4(sp)
100094c4:	dc000017 	ldw	r16,0(sp)
100094c8:	dec00204 	addi	sp,sp,8
100094cc:	f800283a 	ret
100094d0:	80800204 	addi	r2,r16,8
100094d4:	003fe506 	br	1000946c <__alt_data_end+0xf800946c>
100094d8:	80000415 	stw	zero,16(r16)
100094dc:	80800604 	addi	r2,r16,24
100094e0:	80000515 	stw	zero,20(r16)
100094e4:	003fe106 	br	1000946c <__alt_data_end+0xf800946c>
100094e8:	0005883a 	mov	r2,zero
100094ec:	003fe306 	br	1000947c <__alt_data_end+0xf800947c>

100094f0 <_fclose_r>:
100094f0:	defffc04 	addi	sp,sp,-16
100094f4:	dc000015 	stw	r16,0(sp)
100094f8:	dfc00315 	stw	ra,12(sp)
100094fc:	dc800215 	stw	r18,8(sp)
10009500:	dc400115 	stw	r17,4(sp)
10009504:	2821883a 	mov	r16,r5
10009508:	28003126 	beq	r5,zero,100095d0 <_fclose_r+0xe0>
1000950c:	2023883a 	mov	r17,r4
10009510:	0004ca80 	call	10004ca8 <__sfp_lock_acquire>
10009514:	88000226 	beq	r17,zero,10009520 <_fclose_r+0x30>
10009518:	88800e17 	ldw	r2,56(r17)
1000951c:	10003326 	beq	r2,zero,100095ec <_fclose_r+0xfc>
10009520:	8080030f 	ldh	r2,12(r16)
10009524:	10002226 	beq	r2,zero,100095b0 <_fclose_r+0xc0>
10009528:	8809883a 	mov	r4,r17
1000952c:	800b883a 	mov	r5,r16
10009530:	00046d00 	call	100046d0 <_fflush_r>
10009534:	80c00b17 	ldw	r3,44(r16)
10009538:	1025883a 	mov	r18,r2
1000953c:	18000426 	beq	r3,zero,10009550 <_fclose_r+0x60>
10009540:	81400717 	ldw	r5,28(r16)
10009544:	8809883a 	mov	r4,r17
10009548:	183ee83a 	callr	r3
1000954c:	10003016 	blt	r2,zero,10009610 <_fclose_r+0x120>
10009550:	8080030b 	ldhu	r2,12(r16)
10009554:	1080200c 	andi	r2,r2,128
10009558:	1000291e 	bne	r2,zero,10009600 <_fclose_r+0x110>
1000955c:	81400c17 	ldw	r5,48(r16)
10009560:	28000526 	beq	r5,zero,10009578 <_fclose_r+0x88>
10009564:	80801004 	addi	r2,r16,64
10009568:	28800226 	beq	r5,r2,10009574 <_fclose_r+0x84>
1000956c:	8809883a 	mov	r4,r17
10009570:	0004e240 	call	10004e24 <_free_r>
10009574:	80000c15 	stw	zero,48(r16)
10009578:	81401117 	ldw	r5,68(r16)
1000957c:	28000326 	beq	r5,zero,1000958c <_fclose_r+0x9c>
10009580:	8809883a 	mov	r4,r17
10009584:	0004e240 	call	10004e24 <_free_r>
10009588:	80001115 	stw	zero,68(r16)
1000958c:	8000030d 	sth	zero,12(r16)
10009590:	0004cac0 	call	10004cac <__sfp_lock_release>
10009594:	9005883a 	mov	r2,r18
10009598:	dfc00317 	ldw	ra,12(sp)
1000959c:	dc800217 	ldw	r18,8(sp)
100095a0:	dc400117 	ldw	r17,4(sp)
100095a4:	dc000017 	ldw	r16,0(sp)
100095a8:	dec00404 	addi	sp,sp,16
100095ac:	f800283a 	ret
100095b0:	0004cac0 	call	10004cac <__sfp_lock_release>
100095b4:	0005883a 	mov	r2,zero
100095b8:	dfc00317 	ldw	ra,12(sp)
100095bc:	dc800217 	ldw	r18,8(sp)
100095c0:	dc400117 	ldw	r17,4(sp)
100095c4:	dc000017 	ldw	r16,0(sp)
100095c8:	dec00404 	addi	sp,sp,16
100095cc:	f800283a 	ret
100095d0:	0005883a 	mov	r2,zero
100095d4:	dfc00317 	ldw	ra,12(sp)
100095d8:	dc800217 	ldw	r18,8(sp)
100095dc:	dc400117 	ldw	r17,4(sp)
100095e0:	dc000017 	ldw	r16,0(sp)
100095e4:	dec00404 	addi	sp,sp,16
100095e8:	f800283a 	ret
100095ec:	8809883a 	mov	r4,r17
100095f0:	00049f00 	call	100049f0 <__sinit>
100095f4:	8080030f 	ldh	r2,12(r16)
100095f8:	103fcb1e 	bne	r2,zero,10009528 <__alt_data_end+0xf8009528>
100095fc:	003fec06 	br	100095b0 <__alt_data_end+0xf80095b0>
10009600:	81400417 	ldw	r5,16(r16)
10009604:	8809883a 	mov	r4,r17
10009608:	0004e240 	call	10004e24 <_free_r>
1000960c:	003fd306 	br	1000955c <__alt_data_end+0xf800955c>
10009610:	04bfffc4 	movi	r18,-1
10009614:	003fce06 	br	10009550 <__alt_data_end+0xf8009550>

10009618 <fclose>:
10009618:	00840074 	movhi	r2,4097
1000961c:	1085c204 	addi	r2,r2,5896
10009620:	200b883a 	mov	r5,r4
10009624:	11000017 	ldw	r4,0(r2)
10009628:	00094f01 	jmpi	100094f0 <_fclose_r>

1000962c <_fputwc_r>:
1000962c:	3080030b 	ldhu	r2,12(r6)
10009630:	defff804 	addi	sp,sp,-32
10009634:	dcc00415 	stw	r19,16(sp)
10009638:	dc800315 	stw	r18,12(sp)
1000963c:	dc000115 	stw	r16,4(sp)
10009640:	dfc00715 	stw	ra,28(sp)
10009644:	dd400615 	stw	r21,24(sp)
10009648:	dd000515 	stw	r20,20(sp)
1000964c:	dc400215 	stw	r17,8(sp)
10009650:	10c8000c 	andi	r3,r2,8192
10009654:	3021883a 	mov	r16,r6
10009658:	2027883a 	mov	r19,r4
1000965c:	2825883a 	mov	r18,r5
10009660:	1800051e 	bne	r3,zero,10009678 <_fputwc_r+0x4c>
10009664:	30c01917 	ldw	r3,100(r6)
10009668:	10880014 	ori	r2,r2,8192
1000966c:	3080030d 	sth	r2,12(r6)
10009670:	18880014 	ori	r2,r3,8192
10009674:	30801915 	stw	r2,100(r6)
10009678:	000577c0 	call	1000577c <__locale_mb_cur_max>
1000967c:	00c00044 	movi	r3,1
10009680:	10c03e26 	beq	r2,r3,1000977c <_fputwc_r+0x150>
10009684:	9809883a 	mov	r4,r19
10009688:	d80b883a 	mov	r5,sp
1000968c:	900d883a 	mov	r6,r18
10009690:	81c01704 	addi	r7,r16,92
10009694:	0009b680 	call	10009b68 <_wcrtomb_r>
10009698:	1029883a 	mov	r20,r2
1000969c:	00bfffc4 	movi	r2,-1
100096a0:	a0802026 	beq	r20,r2,10009724 <_fputwc_r+0xf8>
100096a4:	d9400003 	ldbu	r5,0(sp)
100096a8:	a0001c26 	beq	r20,zero,1000971c <_fputwc_r+0xf0>
100096ac:	0023883a 	mov	r17,zero
100096b0:	05400284 	movi	r21,10
100096b4:	00000906 	br	100096dc <_fputwc_r+0xb0>
100096b8:	80c00017 	ldw	r3,0(r16)
100096bc:	19400005 	stb	r5,0(r3)
100096c0:	80c00017 	ldw	r3,0(r16)
100096c4:	18c00044 	addi	r3,r3,1
100096c8:	80c00015 	stw	r3,0(r16)
100096cc:	8c400044 	addi	r17,r17,1
100096d0:	dc47883a 	add	r3,sp,r17
100096d4:	8d00112e 	bgeu	r17,r20,1000971c <_fputwc_r+0xf0>
100096d8:	19400003 	ldbu	r5,0(r3)
100096dc:	80c00217 	ldw	r3,8(r16)
100096e0:	18ffffc4 	addi	r3,r3,-1
100096e4:	80c00215 	stw	r3,8(r16)
100096e8:	183ff30e 	bge	r3,zero,100096b8 <__alt_data_end+0xf80096b8>
100096ec:	80800617 	ldw	r2,24(r16)
100096f0:	18801916 	blt	r3,r2,10009758 <_fputwc_r+0x12c>
100096f4:	80800017 	ldw	r2,0(r16)
100096f8:	11400005 	stb	r5,0(r2)
100096fc:	80800017 	ldw	r2,0(r16)
10009700:	10c00003 	ldbu	r3,0(r2)
10009704:	10800044 	addi	r2,r2,1
10009708:	1d402326 	beq	r3,r21,10009798 <_fputwc_r+0x16c>
1000970c:	8c400044 	addi	r17,r17,1
10009710:	80800015 	stw	r2,0(r16)
10009714:	dc47883a 	add	r3,sp,r17
10009718:	8d3fef36 	bltu	r17,r20,100096d8 <__alt_data_end+0xf80096d8>
1000971c:	9005883a 	mov	r2,r18
10009720:	00000406 	br	10009734 <_fputwc_r+0x108>
10009724:	80c0030b 	ldhu	r3,12(r16)
10009728:	a005883a 	mov	r2,r20
1000972c:	18c01014 	ori	r3,r3,64
10009730:	80c0030d 	sth	r3,12(r16)
10009734:	dfc00717 	ldw	ra,28(sp)
10009738:	dd400617 	ldw	r21,24(sp)
1000973c:	dd000517 	ldw	r20,20(sp)
10009740:	dcc00417 	ldw	r19,16(sp)
10009744:	dc800317 	ldw	r18,12(sp)
10009748:	dc400217 	ldw	r17,8(sp)
1000974c:	dc000117 	ldw	r16,4(sp)
10009750:	dec00804 	addi	sp,sp,32
10009754:	f800283a 	ret
10009758:	9809883a 	mov	r4,r19
1000975c:	29403fcc 	andi	r5,r5,255
10009760:	800d883a 	mov	r6,r16
10009764:	00099cc0 	call	100099cc <__swbuf_r>
10009768:	10bfffe0 	cmpeqi	r2,r2,-1
1000976c:	10803fcc 	andi	r2,r2,255
10009770:	103fd626 	beq	r2,zero,100096cc <__alt_data_end+0xf80096cc>
10009774:	00bfffc4 	movi	r2,-1
10009778:	003fee06 	br	10009734 <__alt_data_end+0xf8009734>
1000977c:	90ffffc4 	addi	r3,r18,-1
10009780:	01003f84 	movi	r4,254
10009784:	20ffbf36 	bltu	r4,r3,10009684 <__alt_data_end+0xf8009684>
10009788:	900b883a 	mov	r5,r18
1000978c:	dc800005 	stb	r18,0(sp)
10009790:	1029883a 	mov	r20,r2
10009794:	003fc506 	br	100096ac <__alt_data_end+0xf80096ac>
10009798:	9809883a 	mov	r4,r19
1000979c:	a80b883a 	mov	r5,r21
100097a0:	800d883a 	mov	r6,r16
100097a4:	00099cc0 	call	100099cc <__swbuf_r>
100097a8:	10bfffe0 	cmpeqi	r2,r2,-1
100097ac:	003fef06 	br	1000976c <__alt_data_end+0xf800976c>

100097b0 <fputwc>:
100097b0:	defffc04 	addi	sp,sp,-16
100097b4:	dc000115 	stw	r16,4(sp)
100097b8:	04040074 	movhi	r16,4097
100097bc:	8405c204 	addi	r16,r16,5896
100097c0:	80800017 	ldw	r2,0(r16)
100097c4:	dc400215 	stw	r17,8(sp)
100097c8:	dfc00315 	stw	ra,12(sp)
100097cc:	2023883a 	mov	r17,r4
100097d0:	280d883a 	mov	r6,r5
100097d4:	10000d26 	beq	r2,zero,1000980c <fputwc+0x5c>
100097d8:	10c00e17 	ldw	r3,56(r2)
100097dc:	1009883a 	mov	r4,r2
100097e0:	1800041e 	bne	r3,zero,100097f4 <fputwc+0x44>
100097e4:	d9400015 	stw	r5,0(sp)
100097e8:	00049f00 	call	100049f0 <__sinit>
100097ec:	81000017 	ldw	r4,0(r16)
100097f0:	d9800017 	ldw	r6,0(sp)
100097f4:	880b883a 	mov	r5,r17
100097f8:	dfc00317 	ldw	ra,12(sp)
100097fc:	dc400217 	ldw	r17,8(sp)
10009800:	dc000117 	ldw	r16,4(sp)
10009804:	dec00404 	addi	sp,sp,16
10009808:	000962c1 	jmpi	1000962c <_fputwc_r>
1000980c:	0009883a 	mov	r4,zero
10009810:	880b883a 	mov	r5,r17
10009814:	dfc00317 	ldw	ra,12(sp)
10009818:	dc400217 	ldw	r17,8(sp)
1000981c:	dc000117 	ldw	r16,4(sp)
10009820:	dec00404 	addi	sp,sp,16
10009824:	000962c1 	jmpi	1000962c <_fputwc_r>

10009828 <_fstat_r>:
10009828:	defffd04 	addi	sp,sp,-12
1000982c:	dc400115 	stw	r17,4(sp)
10009830:	dc000015 	stw	r16,0(sp)
10009834:	2023883a 	mov	r17,r4
10009838:	04040074 	movhi	r16,4097
1000983c:	840c9404 	addi	r16,r16,12880
10009840:	2809883a 	mov	r4,r5
10009844:	300b883a 	mov	r5,r6
10009848:	dfc00215 	stw	ra,8(sp)
1000984c:	80000015 	stw	zero,0(r16)
10009850:	000d4dc0 	call	1000d4dc <fstat>
10009854:	00ffffc4 	movi	r3,-1
10009858:	10c00526 	beq	r2,r3,10009870 <_fstat_r+0x48>
1000985c:	dfc00217 	ldw	ra,8(sp)
10009860:	dc400117 	ldw	r17,4(sp)
10009864:	dc000017 	ldw	r16,0(sp)
10009868:	dec00304 	addi	sp,sp,12
1000986c:	f800283a 	ret
10009870:	80c00017 	ldw	r3,0(r16)
10009874:	183ff926 	beq	r3,zero,1000985c <__alt_data_end+0xf800985c>
10009878:	88c00015 	stw	r3,0(r17)
1000987c:	dfc00217 	ldw	ra,8(sp)
10009880:	dc400117 	ldw	r17,4(sp)
10009884:	dc000017 	ldw	r16,0(sp)
10009888:	dec00304 	addi	sp,sp,12
1000988c:	f800283a 	ret

10009890 <_isatty_r>:
10009890:	defffd04 	addi	sp,sp,-12
10009894:	dc400115 	stw	r17,4(sp)
10009898:	dc000015 	stw	r16,0(sp)
1000989c:	2023883a 	mov	r17,r4
100098a0:	04040074 	movhi	r16,4097
100098a4:	840c9404 	addi	r16,r16,12880
100098a8:	2809883a 	mov	r4,r5
100098ac:	dfc00215 	stw	ra,8(sp)
100098b0:	80000015 	stw	zero,0(r16)
100098b4:	000d5e00 	call	1000d5e0 <isatty>
100098b8:	00ffffc4 	movi	r3,-1
100098bc:	10c00526 	beq	r2,r3,100098d4 <_isatty_r+0x44>
100098c0:	dfc00217 	ldw	ra,8(sp)
100098c4:	dc400117 	ldw	r17,4(sp)
100098c8:	dc000017 	ldw	r16,0(sp)
100098cc:	dec00304 	addi	sp,sp,12
100098d0:	f800283a 	ret
100098d4:	80c00017 	ldw	r3,0(r16)
100098d8:	183ff926 	beq	r3,zero,100098c0 <__alt_data_end+0xf80098c0>
100098dc:	88c00015 	stw	r3,0(r17)
100098e0:	dfc00217 	ldw	ra,8(sp)
100098e4:	dc400117 	ldw	r17,4(sp)
100098e8:	dc000017 	ldw	r16,0(sp)
100098ec:	dec00304 	addi	sp,sp,12
100098f0:	f800283a 	ret

100098f4 <_lseek_r>:
100098f4:	defffd04 	addi	sp,sp,-12
100098f8:	dc400115 	stw	r17,4(sp)
100098fc:	dc000015 	stw	r16,0(sp)
10009900:	2023883a 	mov	r17,r4
10009904:	04040074 	movhi	r16,4097
10009908:	840c9404 	addi	r16,r16,12880
1000990c:	2809883a 	mov	r4,r5
10009910:	300b883a 	mov	r5,r6
10009914:	380d883a 	mov	r6,r7
10009918:	dfc00215 	stw	ra,8(sp)
1000991c:	80000015 	stw	zero,0(r16)
10009920:	000d7bc0 	call	1000d7bc <lseek>
10009924:	00ffffc4 	movi	r3,-1
10009928:	10c00526 	beq	r2,r3,10009940 <_lseek_r+0x4c>
1000992c:	dfc00217 	ldw	ra,8(sp)
10009930:	dc400117 	ldw	r17,4(sp)
10009934:	dc000017 	ldw	r16,0(sp)
10009938:	dec00304 	addi	sp,sp,12
1000993c:	f800283a 	ret
10009940:	80c00017 	ldw	r3,0(r16)
10009944:	183ff926 	beq	r3,zero,1000992c <__alt_data_end+0xf800992c>
10009948:	88c00015 	stw	r3,0(r17)
1000994c:	dfc00217 	ldw	ra,8(sp)
10009950:	dc400117 	ldw	r17,4(sp)
10009954:	dc000017 	ldw	r16,0(sp)
10009958:	dec00304 	addi	sp,sp,12
1000995c:	f800283a 	ret

10009960 <_read_r>:
10009960:	defffd04 	addi	sp,sp,-12
10009964:	dc400115 	stw	r17,4(sp)
10009968:	dc000015 	stw	r16,0(sp)
1000996c:	2023883a 	mov	r17,r4
10009970:	04040074 	movhi	r16,4097
10009974:	840c9404 	addi	r16,r16,12880
10009978:	2809883a 	mov	r4,r5
1000997c:	300b883a 	mov	r5,r6
10009980:	380d883a 	mov	r6,r7
10009984:	dfc00215 	stw	ra,8(sp)
10009988:	80000015 	stw	zero,0(r16)
1000998c:	000d99c0 	call	1000d99c <read>
10009990:	00ffffc4 	movi	r3,-1
10009994:	10c00526 	beq	r2,r3,100099ac <_read_r+0x4c>
10009998:	dfc00217 	ldw	ra,8(sp)
1000999c:	dc400117 	ldw	r17,4(sp)
100099a0:	dc000017 	ldw	r16,0(sp)
100099a4:	dec00304 	addi	sp,sp,12
100099a8:	f800283a 	ret
100099ac:	80c00017 	ldw	r3,0(r16)
100099b0:	183ff926 	beq	r3,zero,10009998 <__alt_data_end+0xf8009998>
100099b4:	88c00015 	stw	r3,0(r17)
100099b8:	dfc00217 	ldw	ra,8(sp)
100099bc:	dc400117 	ldw	r17,4(sp)
100099c0:	dc000017 	ldw	r16,0(sp)
100099c4:	dec00304 	addi	sp,sp,12
100099c8:	f800283a 	ret

100099cc <__swbuf_r>:
100099cc:	defffc04 	addi	sp,sp,-16
100099d0:	dc800215 	stw	r18,8(sp)
100099d4:	dc400115 	stw	r17,4(sp)
100099d8:	dc000015 	stw	r16,0(sp)
100099dc:	dfc00315 	stw	ra,12(sp)
100099e0:	2023883a 	mov	r17,r4
100099e4:	2825883a 	mov	r18,r5
100099e8:	3021883a 	mov	r16,r6
100099ec:	20000226 	beq	r4,zero,100099f8 <__swbuf_r+0x2c>
100099f0:	20800e17 	ldw	r2,56(r4)
100099f4:	10004d26 	beq	r2,zero,10009b2c <__swbuf_r+0x160>
100099f8:	80800617 	ldw	r2,24(r16)
100099fc:	80c0030b 	ldhu	r3,12(r16)
10009a00:	80800215 	stw	r2,8(r16)
10009a04:	1880020c 	andi	r2,r3,8
10009a08:	10004126 	beq	r2,zero,10009b10 <__swbuf_r+0x144>
10009a0c:	80800417 	ldw	r2,16(r16)
10009a10:	10003f26 	beq	r2,zero,10009b10 <__swbuf_r+0x144>
10009a14:	1908000c 	andi	r4,r3,8192
10009a18:	94803fcc 	andi	r18,r18,255
10009a1c:	20001726 	beq	r4,zero,10009a7c <__swbuf_r+0xb0>
10009a20:	80c00017 	ldw	r3,0(r16)
10009a24:	81000517 	ldw	r4,20(r16)
10009a28:	1885c83a 	sub	r2,r3,r2
10009a2c:	11001d0e 	bge	r2,r4,10009aa4 <__swbuf_r+0xd8>
10009a30:	81000217 	ldw	r4,8(r16)
10009a34:	19400044 	addi	r5,r3,1
10009a38:	81400015 	stw	r5,0(r16)
10009a3c:	213fffc4 	addi	r4,r4,-1
10009a40:	81000215 	stw	r4,8(r16)
10009a44:	1c800005 	stb	r18,0(r3)
10009a48:	80c00517 	ldw	r3,20(r16)
10009a4c:	10800044 	addi	r2,r2,1
10009a50:	18802226 	beq	r3,r2,10009adc <__swbuf_r+0x110>
10009a54:	8080030b 	ldhu	r2,12(r16)
10009a58:	1080004c 	andi	r2,r2,1
10009a5c:	1000251e 	bne	r2,zero,10009af4 <__swbuf_r+0x128>
10009a60:	9005883a 	mov	r2,r18
10009a64:	dfc00317 	ldw	ra,12(sp)
10009a68:	dc800217 	ldw	r18,8(sp)
10009a6c:	dc400117 	ldw	r17,4(sp)
10009a70:	dc000017 	ldw	r16,0(sp)
10009a74:	dec00404 	addi	sp,sp,16
10009a78:	f800283a 	ret
10009a7c:	81401917 	ldw	r5,100(r16)
10009a80:	18c80014 	ori	r3,r3,8192
10009a84:	0137ffc4 	movi	r4,-8193
10009a88:	2908703a 	and	r4,r5,r4
10009a8c:	80c0030d 	sth	r3,12(r16)
10009a90:	80c00017 	ldw	r3,0(r16)
10009a94:	81001915 	stw	r4,100(r16)
10009a98:	81000517 	ldw	r4,20(r16)
10009a9c:	1885c83a 	sub	r2,r3,r2
10009aa0:	113fe316 	blt	r2,r4,10009a30 <__alt_data_end+0xf8009a30>
10009aa4:	8809883a 	mov	r4,r17
10009aa8:	800b883a 	mov	r5,r16
10009aac:	00046d00 	call	100046d0 <_fflush_r>
10009ab0:	10000e1e 	bne	r2,zero,10009aec <__swbuf_r+0x120>
10009ab4:	80c00017 	ldw	r3,0(r16)
10009ab8:	81000217 	ldw	r4,8(r16)
10009abc:	00800044 	movi	r2,1
10009ac0:	19400044 	addi	r5,r3,1
10009ac4:	213fffc4 	addi	r4,r4,-1
10009ac8:	81400015 	stw	r5,0(r16)
10009acc:	81000215 	stw	r4,8(r16)
10009ad0:	1c800005 	stb	r18,0(r3)
10009ad4:	80c00517 	ldw	r3,20(r16)
10009ad8:	18bfde1e 	bne	r3,r2,10009a54 <__alt_data_end+0xf8009a54>
10009adc:	8809883a 	mov	r4,r17
10009ae0:	800b883a 	mov	r5,r16
10009ae4:	00046d00 	call	100046d0 <_fflush_r>
10009ae8:	103fdd26 	beq	r2,zero,10009a60 <__alt_data_end+0xf8009a60>
10009aec:	00bfffc4 	movi	r2,-1
10009af0:	003fdc06 	br	10009a64 <__alt_data_end+0xf8009a64>
10009af4:	00800284 	movi	r2,10
10009af8:	90bfd91e 	bne	r18,r2,10009a60 <__alt_data_end+0xf8009a60>
10009afc:	8809883a 	mov	r4,r17
10009b00:	800b883a 	mov	r5,r16
10009b04:	00046d00 	call	100046d0 <_fflush_r>
10009b08:	103fd526 	beq	r2,zero,10009a60 <__alt_data_end+0xf8009a60>
10009b0c:	003ff706 	br	10009aec <__alt_data_end+0xf8009aec>
10009b10:	8809883a 	mov	r4,r17
10009b14:	800b883a 	mov	r5,r16
10009b18:	0002d340 	call	10002d34 <__swsetup_r>
10009b1c:	80c0030b 	ldhu	r3,12(r16)
10009b20:	1000041e 	bne	r2,zero,10009b34 <__swbuf_r+0x168>
10009b24:	80800417 	ldw	r2,16(r16)
10009b28:	003fba06 	br	10009a14 <__alt_data_end+0xf8009a14>
10009b2c:	00049f00 	call	100049f0 <__sinit>
10009b30:	003fb106 	br	100099f8 <__alt_data_end+0xf80099f8>
10009b34:	18c01014 	ori	r3,r3,64
10009b38:	80c0030d 	sth	r3,12(r16)
10009b3c:	00c00244 	movi	r3,9
10009b40:	00bfffc4 	movi	r2,-1
10009b44:	88c00015 	stw	r3,0(r17)
10009b48:	003fc606 	br	10009a64 <__alt_data_end+0xf8009a64>

10009b4c <__swbuf>:
10009b4c:	00c40074 	movhi	r3,4097
10009b50:	18c5c204 	addi	r3,r3,5896
10009b54:	2005883a 	mov	r2,r4
10009b58:	19000017 	ldw	r4,0(r3)
10009b5c:	280d883a 	mov	r6,r5
10009b60:	100b883a 	mov	r5,r2
10009b64:	00099cc1 	jmpi	100099cc <__swbuf_r>

10009b68 <_wcrtomb_r>:
10009b68:	defff604 	addi	sp,sp,-40
10009b6c:	dc800815 	stw	r18,32(sp)
10009b70:	dc400715 	stw	r17,28(sp)
10009b74:	dc000615 	stw	r16,24(sp)
10009b78:	00840074 	movhi	r2,4097
10009b7c:	1085c604 	addi	r2,r2,5912
10009b80:	dfc00915 	stw	ra,36(sp)
10009b84:	2021883a 	mov	r16,r4
10009b88:	3823883a 	mov	r17,r7
10009b8c:	14800017 	ldw	r18,0(r2)
10009b90:	28001426 	beq	r5,zero,10009be4 <_wcrtomb_r+0x7c>
10009b94:	d9400415 	stw	r5,16(sp)
10009b98:	d9800515 	stw	r6,20(sp)
10009b9c:	00057700 	call	10005770 <__locale_charset>
10009ba0:	d9400417 	ldw	r5,16(sp)
10009ba4:	d9800517 	ldw	r6,20(sp)
10009ba8:	8009883a 	mov	r4,r16
10009bac:	dc400015 	stw	r17,0(sp)
10009bb0:	100f883a 	mov	r7,r2
10009bb4:	903ee83a 	callr	r18
10009bb8:	00ffffc4 	movi	r3,-1
10009bbc:	10c0031e 	bne	r2,r3,10009bcc <_wcrtomb_r+0x64>
10009bc0:	88000015 	stw	zero,0(r17)
10009bc4:	00c02284 	movi	r3,138
10009bc8:	80c00015 	stw	r3,0(r16)
10009bcc:	dfc00917 	ldw	ra,36(sp)
10009bd0:	dc800817 	ldw	r18,32(sp)
10009bd4:	dc400717 	ldw	r17,28(sp)
10009bd8:	dc000617 	ldw	r16,24(sp)
10009bdc:	dec00a04 	addi	sp,sp,40
10009be0:	f800283a 	ret
10009be4:	00057700 	call	10005770 <__locale_charset>
10009be8:	8009883a 	mov	r4,r16
10009bec:	dc400015 	stw	r17,0(sp)
10009bf0:	d9400104 	addi	r5,sp,4
10009bf4:	000d883a 	mov	r6,zero
10009bf8:	100f883a 	mov	r7,r2
10009bfc:	903ee83a 	callr	r18
10009c00:	003fed06 	br	10009bb8 <__alt_data_end+0xf8009bb8>

10009c04 <wcrtomb>:
10009c04:	defff504 	addi	sp,sp,-44
10009c08:	dc400515 	stw	r17,20(sp)
10009c0c:	dc000415 	stw	r16,16(sp)
10009c10:	dfc00a15 	stw	ra,40(sp)
10009c14:	dd400915 	stw	r21,36(sp)
10009c18:	dd000815 	stw	r20,32(sp)
10009c1c:	dcc00715 	stw	r19,28(sp)
10009c20:	dc800615 	stw	r18,24(sp)
10009c24:	2021883a 	mov	r16,r4
10009c28:	3023883a 	mov	r17,r6
10009c2c:	20001d26 	beq	r4,zero,10009ca4 <wcrtomb+0xa0>
10009c30:	04840074 	movhi	r18,4097
10009c34:	9485c204 	addi	r18,r18,5896
10009c38:	95400017 	ldw	r21,0(r18)
10009c3c:	00840074 	movhi	r2,4097
10009c40:	1085c604 	addi	r2,r2,5912
10009c44:	15000017 	ldw	r20,0(r2)
10009c48:	2827883a 	mov	r19,r5
10009c4c:	00057700 	call	10005770 <__locale_charset>
10009c50:	a809883a 	mov	r4,r21
10009c54:	dc400015 	stw	r17,0(sp)
10009c58:	800b883a 	mov	r5,r16
10009c5c:	980d883a 	mov	r6,r19
10009c60:	100f883a 	mov	r7,r2
10009c64:	a03ee83a 	callr	r20
10009c68:	00ffffc4 	movi	r3,-1
10009c6c:	10c0041e 	bne	r2,r3,10009c80 <wcrtomb+0x7c>
10009c70:	90c00017 	ldw	r3,0(r18)
10009c74:	01002284 	movi	r4,138
10009c78:	88000015 	stw	zero,0(r17)
10009c7c:	19000015 	stw	r4,0(r3)
10009c80:	dfc00a17 	ldw	ra,40(sp)
10009c84:	dd400917 	ldw	r21,36(sp)
10009c88:	dd000817 	ldw	r20,32(sp)
10009c8c:	dcc00717 	ldw	r19,28(sp)
10009c90:	dc800617 	ldw	r18,24(sp)
10009c94:	dc400517 	ldw	r17,20(sp)
10009c98:	dc000417 	ldw	r16,16(sp)
10009c9c:	dec00b04 	addi	sp,sp,44
10009ca0:	f800283a 	ret
10009ca4:	04840074 	movhi	r18,4097
10009ca8:	9485c204 	addi	r18,r18,5896
10009cac:	94c00017 	ldw	r19,0(r18)
10009cb0:	00840074 	movhi	r2,4097
10009cb4:	1085c604 	addi	r2,r2,5912
10009cb8:	14000017 	ldw	r16,0(r2)
10009cbc:	00057700 	call	10005770 <__locale_charset>
10009cc0:	9809883a 	mov	r4,r19
10009cc4:	dc400015 	stw	r17,0(sp)
10009cc8:	d9400104 	addi	r5,sp,4
10009ccc:	000d883a 	mov	r6,zero
10009cd0:	100f883a 	mov	r7,r2
10009cd4:	803ee83a 	callr	r16
10009cd8:	003fe306 	br	10009c68 <__alt_data_end+0xf8009c68>

10009cdc <__ascii_wctomb>:
10009cdc:	28000526 	beq	r5,zero,10009cf4 <__ascii_wctomb+0x18>
10009ce0:	00803fc4 	movi	r2,255
10009ce4:	11800536 	bltu	r2,r6,10009cfc <__ascii_wctomb+0x20>
10009ce8:	29800005 	stb	r6,0(r5)
10009cec:	00800044 	movi	r2,1
10009cf0:	f800283a 	ret
10009cf4:	0005883a 	mov	r2,zero
10009cf8:	f800283a 	ret
10009cfc:	00802284 	movi	r2,138
10009d00:	20800015 	stw	r2,0(r4)
10009d04:	00bfffc4 	movi	r2,-1
10009d08:	f800283a 	ret

10009d0c <_wctomb_r>:
10009d0c:	defff904 	addi	sp,sp,-28
10009d10:	00840074 	movhi	r2,4097
10009d14:	1085c604 	addi	r2,r2,5912
10009d18:	dfc00615 	stw	ra,24(sp)
10009d1c:	dc400515 	stw	r17,20(sp)
10009d20:	dc000415 	stw	r16,16(sp)
10009d24:	3823883a 	mov	r17,r7
10009d28:	14000017 	ldw	r16,0(r2)
10009d2c:	d9000115 	stw	r4,4(sp)
10009d30:	d9400215 	stw	r5,8(sp)
10009d34:	d9800315 	stw	r6,12(sp)
10009d38:	00057700 	call	10005770 <__locale_charset>
10009d3c:	d9000117 	ldw	r4,4(sp)
10009d40:	d9400217 	ldw	r5,8(sp)
10009d44:	d9800317 	ldw	r6,12(sp)
10009d48:	dc400015 	stw	r17,0(sp)
10009d4c:	100f883a 	mov	r7,r2
10009d50:	803ee83a 	callr	r16
10009d54:	dfc00617 	ldw	ra,24(sp)
10009d58:	dc400517 	ldw	r17,20(sp)
10009d5c:	dc000417 	ldw	r16,16(sp)
10009d60:	dec00704 	addi	sp,sp,28
10009d64:	f800283a 	ret

10009d68 <__udivdi3>:
10009d68:	defff504 	addi	sp,sp,-44
10009d6c:	dc800315 	stw	r18,12(sp)
10009d70:	dc400215 	stw	r17,8(sp)
10009d74:	dfc00a15 	stw	ra,40(sp)
10009d78:	df000915 	stw	fp,36(sp)
10009d7c:	ddc00815 	stw	r23,32(sp)
10009d80:	dd800715 	stw	r22,28(sp)
10009d84:	dd400615 	stw	r21,24(sp)
10009d88:	dd000515 	stw	r20,20(sp)
10009d8c:	dcc00415 	stw	r19,16(sp)
10009d90:	dc000115 	stw	r16,4(sp)
10009d94:	2025883a 	mov	r18,r4
10009d98:	2823883a 	mov	r17,r5
10009d9c:	3800481e 	bne	r7,zero,10009ec0 <__udivdi3+0x158>
10009da0:	3021883a 	mov	r16,r6
10009da4:	2027883a 	mov	r19,r4
10009da8:	29805a2e 	bgeu	r5,r6,10009f14 <__udivdi3+0x1ac>
10009dac:	00bfffd4 	movui	r2,65535
10009db0:	2829883a 	mov	r20,r5
10009db4:	1180b436 	bltu	r2,r6,1000a088 <__udivdi3+0x320>
10009db8:	00803fc4 	movi	r2,255
10009dbc:	11816736 	bltu	r2,r6,1000a35c <__udivdi3+0x5f4>
10009dc0:	0005883a 	mov	r2,zero
10009dc4:	0007883a 	mov	r3,zero
10009dc8:	3084d83a 	srl	r2,r6,r2
10009dcc:	01040074 	movhi	r4,4097
10009dd0:	213ec704 	addi	r4,r4,-1252
10009dd4:	2085883a 	add	r2,r4,r2
10009dd8:	10800003 	ldbu	r2,0(r2)
10009ddc:	10c7883a 	add	r3,r2,r3
10009de0:	00800804 	movi	r2,32
10009de4:	10c5c83a 	sub	r2,r2,r3
10009de8:	10000526 	beq	r2,zero,10009e00 <__udivdi3+0x98>
10009dec:	88a2983a 	sll	r17,r17,r2
10009df0:	90c6d83a 	srl	r3,r18,r3
10009df4:	30a0983a 	sll	r16,r6,r2
10009df8:	90a6983a 	sll	r19,r18,r2
10009dfc:	88e8b03a 	or	r20,r17,r3
10009e00:	8022d43a 	srli	r17,r16,16
10009e04:	a009883a 	mov	r4,r20
10009e08:	857fffcc 	andi	r21,r16,65535
10009e0c:	880b883a 	mov	r5,r17
10009e10:	000aafc0 	call	1000aafc <__umodsi3>
10009e14:	a009883a 	mov	r4,r20
10009e18:	880b883a 	mov	r5,r17
10009e1c:	102d883a 	mov	r22,r2
10009e20:	000aaf40 	call	1000aaf4 <__udivsi3>
10009e24:	1009883a 	mov	r4,r2
10009e28:	a80b883a 	mov	r5,r21
10009e2c:	1025883a 	mov	r18,r2
10009e30:	000ab040 	call	1000ab04 <__mulsi3>
10009e34:	1009883a 	mov	r4,r2
10009e38:	b006943a 	slli	r3,r22,16
10009e3c:	9804d43a 	srli	r2,r19,16
10009e40:	1886b03a 	or	r3,r3,r2
10009e44:	1900052e 	bgeu	r3,r4,10009e5c <__udivdi3+0xf4>
10009e48:	1c07883a 	add	r3,r3,r16
10009e4c:	90bfffc4 	addi	r2,r18,-1
10009e50:	1c000136 	bltu	r3,r16,10009e58 <__udivdi3+0xf0>
10009e54:	19015636 	bltu	r3,r4,1000a3b0 <__udivdi3+0x648>
10009e58:	1025883a 	mov	r18,r2
10009e5c:	1929c83a 	sub	r20,r3,r4
10009e60:	880b883a 	mov	r5,r17
10009e64:	a009883a 	mov	r4,r20
10009e68:	000aafc0 	call	1000aafc <__umodsi3>
10009e6c:	102d883a 	mov	r22,r2
10009e70:	880b883a 	mov	r5,r17
10009e74:	a009883a 	mov	r4,r20
10009e78:	b02c943a 	slli	r22,r22,16
10009e7c:	000aaf40 	call	1000aaf4 <__udivsi3>
10009e80:	1009883a 	mov	r4,r2
10009e84:	a80b883a 	mov	r5,r21
10009e88:	9cffffcc 	andi	r19,r19,65535
10009e8c:	1023883a 	mov	r17,r2
10009e90:	b4e6b03a 	or	r19,r22,r19
10009e94:	000ab040 	call	1000ab04 <__mulsi3>
10009e98:	9880052e 	bgeu	r19,r2,10009eb0 <__udivdi3+0x148>
10009e9c:	9c27883a 	add	r19,r19,r16
10009ea0:	88ffffc4 	addi	r3,r17,-1
10009ea4:	9c011436 	bltu	r19,r16,1000a2f8 <__udivdi3+0x590>
10009ea8:	9881132e 	bgeu	r19,r2,1000a2f8 <__udivdi3+0x590>
10009eac:	8c7fff84 	addi	r17,r17,-2
10009eb0:	9024943a 	slli	r18,r18,16
10009eb4:	0007883a 	mov	r3,zero
10009eb8:	8c84b03a 	or	r2,r17,r18
10009ebc:	00006106 	br	1000a044 <__udivdi3+0x2dc>
10009ec0:	29c05e36 	bltu	r5,r7,1000a03c <__udivdi3+0x2d4>
10009ec4:	00bfffd4 	movui	r2,65535
10009ec8:	11c06a2e 	bgeu	r2,r7,1000a074 <__udivdi3+0x30c>
10009ecc:	00804034 	movhi	r2,256
10009ed0:	10bfffc4 	addi	r2,r2,-1
10009ed4:	11c11236 	bltu	r2,r7,1000a320 <__udivdi3+0x5b8>
10009ed8:	00c00404 	movi	r3,16
10009edc:	180b883a 	mov	r5,r3
10009ee0:	38c6d83a 	srl	r3,r7,r3
10009ee4:	01040074 	movhi	r4,4097
10009ee8:	213ec704 	addi	r4,r4,-1252
10009eec:	04000804 	movi	r16,32
10009ef0:	20c7883a 	add	r3,r4,r3
10009ef4:	18800003 	ldbu	r2,0(r3)
10009ef8:	1145883a 	add	r2,r2,r5
10009efc:	80a1c83a 	sub	r16,r16,r2
10009f00:	80006c1e 	bne	r16,zero,1000a0b4 <__udivdi3+0x34c>
10009f04:	3c411836 	bltu	r7,r17,1000a368 <__udivdi3+0x600>
10009f08:	9185403a 	cmpgeu	r2,r18,r6
10009f0c:	0007883a 	mov	r3,zero
10009f10:	00004c06 	br	1000a044 <__udivdi3+0x2dc>
10009f14:	3000041e 	bne	r6,zero,10009f28 <__udivdi3+0x1c0>
10009f18:	01000044 	movi	r4,1
10009f1c:	000b883a 	mov	r5,zero
10009f20:	000aaf40 	call	1000aaf4 <__udivsi3>
10009f24:	1021883a 	mov	r16,r2
10009f28:	00bfffd4 	movui	r2,65535
10009f2c:	14005c2e 	bgeu	r2,r16,1000a0a0 <__udivdi3+0x338>
10009f30:	00804034 	movhi	r2,256
10009f34:	10bfffc4 	addi	r2,r2,-1
10009f38:	14010236 	bltu	r2,r16,1000a344 <__udivdi3+0x5dc>
10009f3c:	00800404 	movi	r2,16
10009f40:	1007883a 	mov	r3,r2
10009f44:	8084d83a 	srl	r2,r16,r2
10009f48:	01040074 	movhi	r4,4097
10009f4c:	213ec704 	addi	r4,r4,-1252
10009f50:	2085883a 	add	r2,r4,r2
10009f54:	10800003 	ldbu	r2,0(r2)
10009f58:	10c7883a 	add	r3,r2,r3
10009f5c:	00800804 	movi	r2,32
10009f60:	10c5c83a 	sub	r2,r2,r3
10009f64:	1000aa1e 	bne	r2,zero,1000a210 <__udivdi3+0x4a8>
10009f68:	8028d43a 	srli	r20,r16,16
10009f6c:	8c23c83a 	sub	r17,r17,r16
10009f70:	857fffcc 	andi	r21,r16,65535
10009f74:	00c00044 	movi	r3,1
10009f78:	8809883a 	mov	r4,r17
10009f7c:	a00b883a 	mov	r5,r20
10009f80:	d8c00015 	stw	r3,0(sp)
10009f84:	000aafc0 	call	1000aafc <__umodsi3>
10009f88:	8809883a 	mov	r4,r17
10009f8c:	a00b883a 	mov	r5,r20
10009f90:	102d883a 	mov	r22,r2
10009f94:	000aaf40 	call	1000aaf4 <__udivsi3>
10009f98:	1009883a 	mov	r4,r2
10009f9c:	a80b883a 	mov	r5,r21
10009fa0:	1025883a 	mov	r18,r2
10009fa4:	000ab040 	call	1000ab04 <__mulsi3>
10009fa8:	1009883a 	mov	r4,r2
10009fac:	b00e943a 	slli	r7,r22,16
10009fb0:	9804d43a 	srli	r2,r19,16
10009fb4:	d8c00017 	ldw	r3,0(sp)
10009fb8:	388eb03a 	or	r7,r7,r2
10009fbc:	3900052e 	bgeu	r7,r4,10009fd4 <__udivdi3+0x26c>
10009fc0:	3c0f883a 	add	r7,r7,r16
10009fc4:	90bfffc4 	addi	r2,r18,-1
10009fc8:	3c000136 	bltu	r7,r16,10009fd0 <__udivdi3+0x268>
10009fcc:	3900f536 	bltu	r7,r4,1000a3a4 <__udivdi3+0x63c>
10009fd0:	1025883a 	mov	r18,r2
10009fd4:	3923c83a 	sub	r17,r7,r4
10009fd8:	8809883a 	mov	r4,r17
10009fdc:	a00b883a 	mov	r5,r20
10009fe0:	d8c00015 	stw	r3,0(sp)
10009fe4:	000aafc0 	call	1000aafc <__umodsi3>
10009fe8:	102d883a 	mov	r22,r2
10009fec:	8809883a 	mov	r4,r17
10009ff0:	a00b883a 	mov	r5,r20
10009ff4:	b02c943a 	slli	r22,r22,16
10009ff8:	000aaf40 	call	1000aaf4 <__udivsi3>
10009ffc:	1009883a 	mov	r4,r2
1000a000:	a80b883a 	mov	r5,r21
1000a004:	9cffffcc 	andi	r19,r19,65535
1000a008:	1023883a 	mov	r17,r2
1000a00c:	b4e6b03a 	or	r19,r22,r19
1000a010:	000ab040 	call	1000ab04 <__mulsi3>
1000a014:	d8c00017 	ldw	r3,0(sp)
1000a018:	9880052e 	bgeu	r19,r2,1000a030 <__udivdi3+0x2c8>
1000a01c:	9c27883a 	add	r19,r19,r16
1000a020:	893fffc4 	addi	r4,r17,-1
1000a024:	9c00b236 	bltu	r19,r16,1000a2f0 <__udivdi3+0x588>
1000a028:	9880b12e 	bgeu	r19,r2,1000a2f0 <__udivdi3+0x588>
1000a02c:	8c7fff84 	addi	r17,r17,-2
1000a030:	9024943a 	slli	r18,r18,16
1000a034:	8c84b03a 	or	r2,r17,r18
1000a038:	00000206 	br	1000a044 <__udivdi3+0x2dc>
1000a03c:	0007883a 	mov	r3,zero
1000a040:	0005883a 	mov	r2,zero
1000a044:	dfc00a17 	ldw	ra,40(sp)
1000a048:	df000917 	ldw	fp,36(sp)
1000a04c:	ddc00817 	ldw	r23,32(sp)
1000a050:	dd800717 	ldw	r22,28(sp)
1000a054:	dd400617 	ldw	r21,24(sp)
1000a058:	dd000517 	ldw	r20,20(sp)
1000a05c:	dcc00417 	ldw	r19,16(sp)
1000a060:	dc800317 	ldw	r18,12(sp)
1000a064:	dc400217 	ldw	r17,8(sp)
1000a068:	dc000117 	ldw	r16,4(sp)
1000a06c:	dec00b04 	addi	sp,sp,44
1000a070:	f800283a 	ret
1000a074:	00803fc4 	movi	r2,255
1000a078:	11c0ac36 	bltu	r2,r7,1000a32c <__udivdi3+0x5c4>
1000a07c:	0007883a 	mov	r3,zero
1000a080:	000b883a 	mov	r5,zero
1000a084:	003f9606 	br	10009ee0 <__alt_data_end+0xf8009ee0>
1000a088:	00804034 	movhi	r2,256
1000a08c:	10bfffc4 	addi	r2,r2,-1
1000a090:	1180a936 	bltu	r2,r6,1000a338 <__udivdi3+0x5d0>
1000a094:	00800404 	movi	r2,16
1000a098:	1007883a 	mov	r3,r2
1000a09c:	003f4a06 	br	10009dc8 <__alt_data_end+0xf8009dc8>
1000a0a0:	00803fc4 	movi	r2,255
1000a0a4:	1400aa36 	bltu	r2,r16,1000a350 <__udivdi3+0x5e8>
1000a0a8:	0005883a 	mov	r2,zero
1000a0ac:	0007883a 	mov	r3,zero
1000a0b0:	003fa406 	br	10009f44 <__alt_data_end+0xf8009f44>
1000a0b4:	3c0e983a 	sll	r7,r7,r16
1000a0b8:	3086d83a 	srl	r3,r6,r2
1000a0bc:	88aed83a 	srl	r23,r17,r2
1000a0c0:	9084d83a 	srl	r2,r18,r2
1000a0c4:	38e6b03a 	or	r19,r7,r3
1000a0c8:	9828d43a 	srli	r20,r19,16
1000a0cc:	8c22983a 	sll	r17,r17,r16
1000a0d0:	b809883a 	mov	r4,r23
1000a0d4:	a00b883a 	mov	r5,r20
1000a0d8:	342a983a 	sll	r21,r6,r16
1000a0dc:	88a2b03a 	or	r17,r17,r2
1000a0e0:	000aafc0 	call	1000aafc <__umodsi3>
1000a0e4:	b809883a 	mov	r4,r23
1000a0e8:	a00b883a 	mov	r5,r20
1000a0ec:	1039883a 	mov	fp,r2
1000a0f0:	9dbfffcc 	andi	r22,r19,65535
1000a0f4:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a0f8:	1009883a 	mov	r4,r2
1000a0fc:	b00b883a 	mov	r5,r22
1000a100:	102f883a 	mov	r23,r2
1000a104:	000ab040 	call	1000ab04 <__mulsi3>
1000a108:	1009883a 	mov	r4,r2
1000a10c:	e00e943a 	slli	r7,fp,16
1000a110:	8804d43a 	srli	r2,r17,16
1000a114:	388eb03a 	or	r7,r7,r2
1000a118:	3900042e 	bgeu	r7,r4,1000a12c <__udivdi3+0x3c4>
1000a11c:	3ccf883a 	add	r7,r7,r19
1000a120:	b8bfffc4 	addi	r2,r23,-1
1000a124:	3cc0972e 	bgeu	r7,r19,1000a384 <__udivdi3+0x61c>
1000a128:	102f883a 	mov	r23,r2
1000a12c:	3939c83a 	sub	fp,r7,r4
1000a130:	a00b883a 	mov	r5,r20
1000a134:	e009883a 	mov	r4,fp
1000a138:	000aafc0 	call	1000aafc <__umodsi3>
1000a13c:	a00b883a 	mov	r5,r20
1000a140:	e009883a 	mov	r4,fp
1000a144:	d8800015 	stw	r2,0(sp)
1000a148:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a14c:	1009883a 	mov	r4,r2
1000a150:	b00b883a 	mov	r5,r22
1000a154:	1029883a 	mov	r20,r2
1000a158:	000ab040 	call	1000ab04 <__mulsi3>
1000a15c:	d8c00017 	ldw	r3,0(sp)
1000a160:	8c7fffcc 	andi	r17,r17,65535
1000a164:	1806943a 	slli	r3,r3,16
1000a168:	1c46b03a 	or	r3,r3,r17
1000a16c:	1880042e 	bgeu	r3,r2,1000a180 <__udivdi3+0x418>
1000a170:	1cc7883a 	add	r3,r3,r19
1000a174:	a13fffc4 	addi	r4,r20,-1
1000a178:	1cc07e2e 	bgeu	r3,r19,1000a374 <__udivdi3+0x60c>
1000a17c:	2029883a 	mov	r20,r4
1000a180:	b82e943a 	slli	r23,r23,16
1000a184:	a822d43a 	srli	r17,r21,16
1000a188:	ad7fffcc 	andi	r21,r21,65535
1000a18c:	a5e8b03a 	or	r20,r20,r23
1000a190:	a5bfffcc 	andi	r22,r20,65535
1000a194:	b009883a 	mov	r4,r22
1000a198:	a80b883a 	mov	r5,r21
1000a19c:	18afc83a 	sub	r23,r3,r2
1000a1a0:	a026d43a 	srli	r19,r20,16
1000a1a4:	000ab040 	call	1000ab04 <__mulsi3>
1000a1a8:	b009883a 	mov	r4,r22
1000a1ac:	880b883a 	mov	r5,r17
1000a1b0:	1039883a 	mov	fp,r2
1000a1b4:	000ab040 	call	1000ab04 <__mulsi3>
1000a1b8:	a80b883a 	mov	r5,r21
1000a1bc:	9809883a 	mov	r4,r19
1000a1c0:	102d883a 	mov	r22,r2
1000a1c4:	000ab040 	call	1000ab04 <__mulsi3>
1000a1c8:	9809883a 	mov	r4,r19
1000a1cc:	880b883a 	mov	r5,r17
1000a1d0:	102b883a 	mov	r21,r2
1000a1d4:	000ab040 	call	1000ab04 <__mulsi3>
1000a1d8:	100b883a 	mov	r5,r2
1000a1dc:	e004d43a 	srli	r2,fp,16
1000a1e0:	ad89883a 	add	r4,r21,r22
1000a1e4:	2089883a 	add	r4,r4,r2
1000a1e8:	2540022e 	bgeu	r4,r21,1000a1f4 <__udivdi3+0x48c>
1000a1ec:	00800074 	movhi	r2,1
1000a1f0:	288b883a 	add	r5,r5,r2
1000a1f4:	2004d43a 	srli	r2,r4,16
1000a1f8:	288b883a 	add	r5,r5,r2
1000a1fc:	b9404536 	bltu	r23,r5,1000a314 <__udivdi3+0x5ac>
1000a200:	b9403f26 	beq	r23,r5,1000a300 <__udivdi3+0x598>
1000a204:	a005883a 	mov	r2,r20
1000a208:	0007883a 	mov	r3,zero
1000a20c:	003f8d06 	br	1000a044 <__alt_data_end+0xf800a044>
1000a210:	80a0983a 	sll	r16,r16,r2
1000a214:	88eed83a 	srl	r23,r17,r3
1000a218:	90c6d83a 	srl	r3,r18,r3
1000a21c:	8028d43a 	srli	r20,r16,16
1000a220:	88a2983a 	sll	r17,r17,r2
1000a224:	b809883a 	mov	r4,r23
1000a228:	a00b883a 	mov	r5,r20
1000a22c:	88ecb03a 	or	r22,r17,r3
1000a230:	90a6983a 	sll	r19,r18,r2
1000a234:	000aafc0 	call	1000aafc <__umodsi3>
1000a238:	b809883a 	mov	r4,r23
1000a23c:	a00b883a 	mov	r5,r20
1000a240:	1023883a 	mov	r17,r2
1000a244:	857fffcc 	andi	r21,r16,65535
1000a248:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a24c:	1009883a 	mov	r4,r2
1000a250:	a80b883a 	mov	r5,r21
1000a254:	102f883a 	mov	r23,r2
1000a258:	000ab040 	call	1000ab04 <__mulsi3>
1000a25c:	1009883a 	mov	r4,r2
1000a260:	880c943a 	slli	r6,r17,16
1000a264:	b004d43a 	srli	r2,r22,16
1000a268:	308cb03a 	or	r6,r6,r2
1000a26c:	3100062e 	bgeu	r6,r4,1000a288 <__udivdi3+0x520>
1000a270:	340d883a 	add	r6,r6,r16
1000a274:	b8bfffc4 	addi	r2,r23,-1
1000a278:	34004836 	bltu	r6,r16,1000a39c <__udivdi3+0x634>
1000a27c:	3100472e 	bgeu	r6,r4,1000a39c <__udivdi3+0x634>
1000a280:	bdffff84 	addi	r23,r23,-2
1000a284:	340d883a 	add	r6,r6,r16
1000a288:	3125c83a 	sub	r18,r6,r4
1000a28c:	9009883a 	mov	r4,r18
1000a290:	a00b883a 	mov	r5,r20
1000a294:	000aafc0 	call	1000aafc <__umodsi3>
1000a298:	1023883a 	mov	r17,r2
1000a29c:	9009883a 	mov	r4,r18
1000a2a0:	a00b883a 	mov	r5,r20
1000a2a4:	8822943a 	slli	r17,r17,16
1000a2a8:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a2ac:	1009883a 	mov	r4,r2
1000a2b0:	a80b883a 	mov	r5,r21
1000a2b4:	b5bfffcc 	andi	r22,r22,65535
1000a2b8:	1025883a 	mov	r18,r2
1000a2bc:	8da2b03a 	or	r17,r17,r22
1000a2c0:	000ab040 	call	1000ab04 <__mulsi3>
1000a2c4:	8880062e 	bgeu	r17,r2,1000a2e0 <__udivdi3+0x578>
1000a2c8:	8c23883a 	add	r17,r17,r16
1000a2cc:	90ffffc4 	addi	r3,r18,-1
1000a2d0:	8c003036 	bltu	r17,r16,1000a394 <__udivdi3+0x62c>
1000a2d4:	88802f2e 	bgeu	r17,r2,1000a394 <__udivdi3+0x62c>
1000a2d8:	94bfff84 	addi	r18,r18,-2
1000a2dc:	8c23883a 	add	r17,r17,r16
1000a2e0:	b806943a 	slli	r3,r23,16
1000a2e4:	88a3c83a 	sub	r17,r17,r2
1000a2e8:	90c6b03a 	or	r3,r18,r3
1000a2ec:	003f2206 	br	10009f78 <__alt_data_end+0xf8009f78>
1000a2f0:	2023883a 	mov	r17,r4
1000a2f4:	003f4e06 	br	1000a030 <__alt_data_end+0xf800a030>
1000a2f8:	1823883a 	mov	r17,r3
1000a2fc:	003eec06 	br	10009eb0 <__alt_data_end+0xf8009eb0>
1000a300:	2008943a 	slli	r4,r4,16
1000a304:	9420983a 	sll	r16,r18,r16
1000a308:	e73fffcc 	andi	fp,fp,65535
1000a30c:	2709883a 	add	r4,r4,fp
1000a310:	813fbc2e 	bgeu	r16,r4,1000a204 <__alt_data_end+0xf800a204>
1000a314:	a0bfffc4 	addi	r2,r20,-1
1000a318:	0007883a 	mov	r3,zero
1000a31c:	003f4906 	br	1000a044 <__alt_data_end+0xf800a044>
1000a320:	00c00604 	movi	r3,24
1000a324:	180b883a 	mov	r5,r3
1000a328:	003eed06 	br	10009ee0 <__alt_data_end+0xf8009ee0>
1000a32c:	00c00204 	movi	r3,8
1000a330:	180b883a 	mov	r5,r3
1000a334:	003eea06 	br	10009ee0 <__alt_data_end+0xf8009ee0>
1000a338:	00800604 	movi	r2,24
1000a33c:	1007883a 	mov	r3,r2
1000a340:	003ea106 	br	10009dc8 <__alt_data_end+0xf8009dc8>
1000a344:	00800604 	movi	r2,24
1000a348:	1007883a 	mov	r3,r2
1000a34c:	003efd06 	br	10009f44 <__alt_data_end+0xf8009f44>
1000a350:	00800204 	movi	r2,8
1000a354:	1007883a 	mov	r3,r2
1000a358:	003efa06 	br	10009f44 <__alt_data_end+0xf8009f44>
1000a35c:	00800204 	movi	r2,8
1000a360:	1007883a 	mov	r3,r2
1000a364:	003e9806 	br	10009dc8 <__alt_data_end+0xf8009dc8>
1000a368:	0007883a 	mov	r3,zero
1000a36c:	00800044 	movi	r2,1
1000a370:	003f3406 	br	1000a044 <__alt_data_end+0xf800a044>
1000a374:	18bf812e 	bgeu	r3,r2,1000a17c <__alt_data_end+0xf800a17c>
1000a378:	a53fff84 	addi	r20,r20,-2
1000a37c:	1cc7883a 	add	r3,r3,r19
1000a380:	003f7f06 	br	1000a180 <__alt_data_end+0xf800a180>
1000a384:	393f682e 	bgeu	r7,r4,1000a128 <__alt_data_end+0xf800a128>
1000a388:	bdffff84 	addi	r23,r23,-2
1000a38c:	3ccf883a 	add	r7,r7,r19
1000a390:	003f6606 	br	1000a12c <__alt_data_end+0xf800a12c>
1000a394:	1825883a 	mov	r18,r3
1000a398:	003fd106 	br	1000a2e0 <__alt_data_end+0xf800a2e0>
1000a39c:	102f883a 	mov	r23,r2
1000a3a0:	003fb906 	br	1000a288 <__alt_data_end+0xf800a288>
1000a3a4:	94bfff84 	addi	r18,r18,-2
1000a3a8:	3c0f883a 	add	r7,r7,r16
1000a3ac:	003f0906 	br	10009fd4 <__alt_data_end+0xf8009fd4>
1000a3b0:	94bfff84 	addi	r18,r18,-2
1000a3b4:	1c07883a 	add	r3,r3,r16
1000a3b8:	003ea806 	br	10009e5c <__alt_data_end+0xf8009e5c>

1000a3bc <__umoddi3>:
1000a3bc:	defff304 	addi	sp,sp,-52
1000a3c0:	dd000715 	stw	r20,28(sp)
1000a3c4:	dc800515 	stw	r18,20(sp)
1000a3c8:	dc400415 	stw	r17,16(sp)
1000a3cc:	dfc00c15 	stw	ra,48(sp)
1000a3d0:	df000b15 	stw	fp,44(sp)
1000a3d4:	ddc00a15 	stw	r23,40(sp)
1000a3d8:	dd800915 	stw	r22,36(sp)
1000a3dc:	dd400815 	stw	r21,32(sp)
1000a3e0:	dcc00615 	stw	r19,24(sp)
1000a3e4:	dc000315 	stw	r16,12(sp)
1000a3e8:	2025883a 	mov	r18,r4
1000a3ec:	2823883a 	mov	r17,r5
1000a3f0:	2829883a 	mov	r20,r5
1000a3f4:	38003d1e 	bne	r7,zero,1000a4ec <__umoddi3+0x130>
1000a3f8:	3021883a 	mov	r16,r6
1000a3fc:	2027883a 	mov	r19,r4
1000a400:	2980532e 	bgeu	r5,r6,1000a550 <__umoddi3+0x194>
1000a404:	00bfffd4 	movui	r2,65535
1000a408:	1180a636 	bltu	r2,r6,1000a6a4 <__umoddi3+0x2e8>
1000a40c:	00803fc4 	movi	r2,255
1000a410:	11816336 	bltu	r2,r6,1000a9a0 <__umoddi3+0x5e4>
1000a414:	0005883a 	mov	r2,zero
1000a418:	0009883a 	mov	r4,zero
1000a41c:	3084d83a 	srl	r2,r6,r2
1000a420:	00c40074 	movhi	r3,4097
1000a424:	18fec704 	addi	r3,r3,-1252
1000a428:	1885883a 	add	r2,r3,r2
1000a42c:	10800003 	ldbu	r2,0(r2)
1000a430:	1109883a 	add	r4,r2,r4
1000a434:	00800804 	movi	r2,32
1000a438:	1105c83a 	sub	r2,r2,r4
1000a43c:	10011026 	beq	r2,zero,1000a880 <__umoddi3+0x4c4>
1000a440:	9108d83a 	srl	r4,r18,r4
1000a444:	88a2983a 	sll	r17,r17,r2
1000a448:	30a0983a 	sll	r16,r6,r2
1000a44c:	90a6983a 	sll	r19,r18,r2
1000a450:	8928b03a 	or	r20,r17,r4
1000a454:	1025883a 	mov	r18,r2
1000a458:	8022d43a 	srli	r17,r16,16
1000a45c:	a009883a 	mov	r4,r20
1000a460:	857fffcc 	andi	r21,r16,65535
1000a464:	880b883a 	mov	r5,r17
1000a468:	000aafc0 	call	1000aafc <__umodsi3>
1000a46c:	a009883a 	mov	r4,r20
1000a470:	880b883a 	mov	r5,r17
1000a474:	102d883a 	mov	r22,r2
1000a478:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a47c:	1009883a 	mov	r4,r2
1000a480:	a80b883a 	mov	r5,r21
1000a484:	000ab040 	call	1000ab04 <__mulsi3>
1000a488:	1009883a 	mov	r4,r2
1000a48c:	b006943a 	slli	r3,r22,16
1000a490:	9804d43a 	srli	r2,r19,16
1000a494:	1886b03a 	or	r3,r3,r2
1000a498:	1900042e 	bgeu	r3,r4,1000a4ac <__umoddi3+0xf0>
1000a49c:	1c07883a 	add	r3,r3,r16
1000a4a0:	1c000236 	bltu	r3,r16,1000a4ac <__umoddi3+0xf0>
1000a4a4:	1900012e 	bgeu	r3,r4,1000a4ac <__umoddi3+0xf0>
1000a4a8:	1c07883a 	add	r3,r3,r16
1000a4ac:	1929c83a 	sub	r20,r3,r4
1000a4b0:	a009883a 	mov	r4,r20
1000a4b4:	880b883a 	mov	r5,r17
1000a4b8:	000aafc0 	call	1000aafc <__umodsi3>
1000a4bc:	102d883a 	mov	r22,r2
1000a4c0:	a009883a 	mov	r4,r20
1000a4c4:	880b883a 	mov	r5,r17
1000a4c8:	b02c943a 	slli	r22,r22,16
1000a4cc:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a4d0:	1009883a 	mov	r4,r2
1000a4d4:	a80b883a 	mov	r5,r21
1000a4d8:	9cffffcc 	andi	r19,r19,65535
1000a4dc:	000ab040 	call	1000ab04 <__mulsi3>
1000a4e0:	b4e6b03a 	or	r19,r22,r19
1000a4e4:	9880582e 	bgeu	r19,r2,1000a648 <__umoddi3+0x28c>
1000a4e8:	00005306 	br	1000a638 <__umoddi3+0x27c>
1000a4ec:	29c05a36 	bltu	r5,r7,1000a658 <__umoddi3+0x29c>
1000a4f0:	00bfffd4 	movui	r2,65535
1000a4f4:	11c0662e 	bgeu	r2,r7,1000a690 <__umoddi3+0x2d4>
1000a4f8:	00804034 	movhi	r2,256
1000a4fc:	10bfffc4 	addi	r2,r2,-1
1000a500:	11c11b36 	bltu	r2,r7,1000a970 <__umoddi3+0x5b4>
1000a504:	00c00404 	movi	r3,16
1000a508:	1827883a 	mov	r19,r3
1000a50c:	38c6d83a 	srl	r3,r7,r3
1000a510:	01040074 	movhi	r4,4097
1000a514:	213ec704 	addi	r4,r4,-1252
1000a518:	04000804 	movi	r16,32
1000a51c:	20c7883a 	add	r3,r4,r3
1000a520:	18800003 	ldbu	r2,0(r3)
1000a524:	14e7883a 	add	r19,r2,r19
1000a528:	84e1c83a 	sub	r16,r16,r19
1000a52c:	8000681e 	bne	r16,zero,1000a6d0 <__umoddi3+0x314>
1000a530:	3c400136 	bltu	r7,r17,1000a538 <__umoddi3+0x17c>
1000a534:	91812736 	bltu	r18,r6,1000a9d4 <__umoddi3+0x618>
1000a538:	9185c83a 	sub	r2,r18,r6
1000a53c:	89e3c83a 	sub	r17,r17,r7
1000a540:	90a5803a 	cmpltu	r18,r18,r2
1000a544:	8ca9c83a 	sub	r20,r17,r18
1000a548:	a007883a 	mov	r3,r20
1000a54c:	00004406 	br	1000a660 <__umoddi3+0x2a4>
1000a550:	3000041e 	bne	r6,zero,1000a564 <__umoddi3+0x1a8>
1000a554:	01000044 	movi	r4,1
1000a558:	000b883a 	mov	r5,zero
1000a55c:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a560:	1021883a 	mov	r16,r2
1000a564:	00bfffd4 	movui	r2,65535
1000a568:	1400542e 	bgeu	r2,r16,1000a6bc <__umoddi3+0x300>
1000a56c:	00804034 	movhi	r2,256
1000a570:	10bfffc4 	addi	r2,r2,-1
1000a574:	14010736 	bltu	r2,r16,1000a994 <__umoddi3+0x5d8>
1000a578:	00800404 	movi	r2,16
1000a57c:	1007883a 	mov	r3,r2
1000a580:	8084d83a 	srl	r2,r16,r2
1000a584:	01040074 	movhi	r4,4097
1000a588:	213ec704 	addi	r4,r4,-1252
1000a58c:	05400804 	movi	r21,32
1000a590:	2085883a 	add	r2,r4,r2
1000a594:	10800003 	ldbu	r2,0(r2)
1000a598:	10c7883a 	add	r3,r2,r3
1000a59c:	a8ebc83a 	sub	r21,r21,r3
1000a5a0:	a800b91e 	bne	r21,zero,1000a888 <__umoddi3+0x4cc>
1000a5a4:	8028d43a 	srli	r20,r16,16
1000a5a8:	8c23c83a 	sub	r17,r17,r16
1000a5ac:	85bfffcc 	andi	r22,r16,65535
1000a5b0:	0025883a 	mov	r18,zero
1000a5b4:	8809883a 	mov	r4,r17
1000a5b8:	a00b883a 	mov	r5,r20
1000a5bc:	000aafc0 	call	1000aafc <__umodsi3>
1000a5c0:	8809883a 	mov	r4,r17
1000a5c4:	a00b883a 	mov	r5,r20
1000a5c8:	102b883a 	mov	r21,r2
1000a5cc:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a5d0:	1009883a 	mov	r4,r2
1000a5d4:	b00b883a 	mov	r5,r22
1000a5d8:	000ab040 	call	1000ab04 <__mulsi3>
1000a5dc:	1009883a 	mov	r4,r2
1000a5e0:	a806943a 	slli	r3,r21,16
1000a5e4:	9804d43a 	srli	r2,r19,16
1000a5e8:	1886b03a 	or	r3,r3,r2
1000a5ec:	1900032e 	bgeu	r3,r4,1000a5fc <__umoddi3+0x240>
1000a5f0:	1c07883a 	add	r3,r3,r16
1000a5f4:	1c000136 	bltu	r3,r16,1000a5fc <__umoddi3+0x240>
1000a5f8:	1900f436 	bltu	r3,r4,1000a9cc <__umoddi3+0x610>
1000a5fc:	1923c83a 	sub	r17,r3,r4
1000a600:	8809883a 	mov	r4,r17
1000a604:	a00b883a 	mov	r5,r20
1000a608:	000aafc0 	call	1000aafc <__umodsi3>
1000a60c:	102b883a 	mov	r21,r2
1000a610:	8809883a 	mov	r4,r17
1000a614:	a00b883a 	mov	r5,r20
1000a618:	a82a943a 	slli	r21,r21,16
1000a61c:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a620:	1009883a 	mov	r4,r2
1000a624:	b00b883a 	mov	r5,r22
1000a628:	9cffffcc 	andi	r19,r19,65535
1000a62c:	000ab040 	call	1000ab04 <__mulsi3>
1000a630:	ace6b03a 	or	r19,r21,r19
1000a634:	9880042e 	bgeu	r19,r2,1000a648 <__umoddi3+0x28c>
1000a638:	9c27883a 	add	r19,r19,r16
1000a63c:	9c000236 	bltu	r19,r16,1000a648 <__umoddi3+0x28c>
1000a640:	9880012e 	bgeu	r19,r2,1000a648 <__umoddi3+0x28c>
1000a644:	9c27883a 	add	r19,r19,r16
1000a648:	9885c83a 	sub	r2,r19,r2
1000a64c:	1484d83a 	srl	r2,r2,r18
1000a650:	0007883a 	mov	r3,zero
1000a654:	00000206 	br	1000a660 <__umoddi3+0x2a4>
1000a658:	2005883a 	mov	r2,r4
1000a65c:	2807883a 	mov	r3,r5
1000a660:	dfc00c17 	ldw	ra,48(sp)
1000a664:	df000b17 	ldw	fp,44(sp)
1000a668:	ddc00a17 	ldw	r23,40(sp)
1000a66c:	dd800917 	ldw	r22,36(sp)
1000a670:	dd400817 	ldw	r21,32(sp)
1000a674:	dd000717 	ldw	r20,28(sp)
1000a678:	dcc00617 	ldw	r19,24(sp)
1000a67c:	dc800517 	ldw	r18,20(sp)
1000a680:	dc400417 	ldw	r17,16(sp)
1000a684:	dc000317 	ldw	r16,12(sp)
1000a688:	dec00d04 	addi	sp,sp,52
1000a68c:	f800283a 	ret
1000a690:	00803fc4 	movi	r2,255
1000a694:	11c0b336 	bltu	r2,r7,1000a964 <__umoddi3+0x5a8>
1000a698:	0007883a 	mov	r3,zero
1000a69c:	0027883a 	mov	r19,zero
1000a6a0:	003f9a06 	br	1000a50c <__alt_data_end+0xf800a50c>
1000a6a4:	00804034 	movhi	r2,256
1000a6a8:	10bfffc4 	addi	r2,r2,-1
1000a6ac:	1180b336 	bltu	r2,r6,1000a97c <__umoddi3+0x5c0>
1000a6b0:	00800404 	movi	r2,16
1000a6b4:	1009883a 	mov	r4,r2
1000a6b8:	003f5806 	br	1000a41c <__alt_data_end+0xf800a41c>
1000a6bc:	00803fc4 	movi	r2,255
1000a6c0:	1400b136 	bltu	r2,r16,1000a988 <__umoddi3+0x5cc>
1000a6c4:	0005883a 	mov	r2,zero
1000a6c8:	0007883a 	mov	r3,zero
1000a6cc:	003fac06 	br	1000a580 <__alt_data_end+0xf800a580>
1000a6d0:	34c4d83a 	srl	r2,r6,r19
1000a6d4:	3c0e983a 	sll	r7,r7,r16
1000a6d8:	8cf8d83a 	srl	fp,r17,r19
1000a6dc:	8c22983a 	sll	r17,r17,r16
1000a6e0:	38a8b03a 	or	r20,r7,r2
1000a6e4:	a02ad43a 	srli	r21,r20,16
1000a6e8:	94c4d83a 	srl	r2,r18,r19
1000a6ec:	e009883a 	mov	r4,fp
1000a6f0:	a80b883a 	mov	r5,r21
1000a6f4:	342c983a 	sll	r22,r6,r16
1000a6f8:	88a2b03a 	or	r17,r17,r2
1000a6fc:	000aafc0 	call	1000aafc <__umodsi3>
1000a700:	e009883a 	mov	r4,fp
1000a704:	a80b883a 	mov	r5,r21
1000a708:	a5ffffcc 	andi	r23,r20,65535
1000a70c:	d8800215 	stw	r2,8(sp)
1000a710:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a714:	1009883a 	mov	r4,r2
1000a718:	b80b883a 	mov	r5,r23
1000a71c:	1039883a 	mov	fp,r2
1000a720:	000ab040 	call	1000ab04 <__mulsi3>
1000a724:	d8c00217 	ldw	r3,8(sp)
1000a728:	1009883a 	mov	r4,r2
1000a72c:	8804d43a 	srli	r2,r17,16
1000a730:	1806943a 	slli	r3,r3,16
1000a734:	9424983a 	sll	r18,r18,r16
1000a738:	1886b03a 	or	r3,r3,r2
1000a73c:	1900042e 	bgeu	r3,r4,1000a750 <__umoddi3+0x394>
1000a740:	1d07883a 	add	r3,r3,r20
1000a744:	e0bfffc4 	addi	r2,fp,-1
1000a748:	1d009c2e 	bgeu	r3,r20,1000a9bc <__umoddi3+0x600>
1000a74c:	1039883a 	mov	fp,r2
1000a750:	1907c83a 	sub	r3,r3,r4
1000a754:	1809883a 	mov	r4,r3
1000a758:	a80b883a 	mov	r5,r21
1000a75c:	d8c00215 	stw	r3,8(sp)
1000a760:	000aafc0 	call	1000aafc <__umodsi3>
1000a764:	d8c00217 	ldw	r3,8(sp)
1000a768:	a80b883a 	mov	r5,r21
1000a76c:	d8800015 	stw	r2,0(sp)
1000a770:	1809883a 	mov	r4,r3
1000a774:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a778:	1009883a 	mov	r4,r2
1000a77c:	b80b883a 	mov	r5,r23
1000a780:	102b883a 	mov	r21,r2
1000a784:	000ab040 	call	1000ab04 <__mulsi3>
1000a788:	d9c00017 	ldw	r7,0(sp)
1000a78c:	8c7fffcc 	andi	r17,r17,65535
1000a790:	380e943a 	slli	r7,r7,16
1000a794:	3c4eb03a 	or	r7,r7,r17
1000a798:	3880042e 	bgeu	r7,r2,1000a7ac <__umoddi3+0x3f0>
1000a79c:	3d0f883a 	add	r7,r7,r20
1000a7a0:	a8ffffc4 	addi	r3,r21,-1
1000a7a4:	3d00812e 	bgeu	r7,r20,1000a9ac <__umoddi3+0x5f0>
1000a7a8:	182b883a 	mov	r21,r3
1000a7ac:	e038943a 	slli	fp,fp,16
1000a7b0:	b010d43a 	srli	r8,r22,16
1000a7b4:	b1bfffcc 	andi	r6,r22,65535
1000a7b8:	af2ab03a 	or	r21,r21,fp
1000a7bc:	a82ed43a 	srli	r23,r21,16
1000a7c0:	ad7fffcc 	andi	r21,r21,65535
1000a7c4:	300b883a 	mov	r5,r6
1000a7c8:	a809883a 	mov	r4,r21
1000a7cc:	38a3c83a 	sub	r17,r7,r2
1000a7d0:	d9800115 	stw	r6,4(sp)
1000a7d4:	da000015 	stw	r8,0(sp)
1000a7d8:	000ab040 	call	1000ab04 <__mulsi3>
1000a7dc:	da000017 	ldw	r8,0(sp)
1000a7e0:	a809883a 	mov	r4,r21
1000a7e4:	1039883a 	mov	fp,r2
1000a7e8:	400b883a 	mov	r5,r8
1000a7ec:	da000215 	stw	r8,8(sp)
1000a7f0:	000ab040 	call	1000ab04 <__mulsi3>
1000a7f4:	d9800117 	ldw	r6,4(sp)
1000a7f8:	b809883a 	mov	r4,r23
1000a7fc:	d8800015 	stw	r2,0(sp)
1000a800:	300b883a 	mov	r5,r6
1000a804:	000ab040 	call	1000ab04 <__mulsi3>
1000a808:	d8c00217 	ldw	r3,8(sp)
1000a80c:	b809883a 	mov	r4,r23
1000a810:	102b883a 	mov	r21,r2
1000a814:	180b883a 	mov	r5,r3
1000a818:	000ab040 	call	1000ab04 <__mulsi3>
1000a81c:	d9c00017 	ldw	r7,0(sp)
1000a820:	1007883a 	mov	r3,r2
1000a824:	e004d43a 	srli	r2,fp,16
1000a828:	a9c9883a 	add	r4,r21,r7
1000a82c:	2089883a 	add	r4,r4,r2
1000a830:	2540022e 	bgeu	r4,r21,1000a83c <__umoddi3+0x480>
1000a834:	00800074 	movhi	r2,1
1000a838:	1887883a 	add	r3,r3,r2
1000a83c:	2004d43a 	srli	r2,r4,16
1000a840:	2008943a 	slli	r4,r4,16
1000a844:	e73fffcc 	andi	fp,fp,65535
1000a848:	1887883a 	add	r3,r3,r2
1000a84c:	2709883a 	add	r4,r4,fp
1000a850:	88c03e36 	bltu	r17,r3,1000a94c <__umoddi3+0x590>
1000a854:	88c06226 	beq	r17,r3,1000a9e0 <__umoddi3+0x624>
1000a858:	88c7c83a 	sub	r3,r17,r3
1000a85c:	202d883a 	mov	r22,r4
1000a860:	95adc83a 	sub	r22,r18,r22
1000a864:	95a5803a 	cmpltu	r18,r18,r22
1000a868:	1c87c83a 	sub	r3,r3,r18
1000a86c:	1cc4983a 	sll	r2,r3,r19
1000a870:	b42cd83a 	srl	r22,r22,r16
1000a874:	1c06d83a 	srl	r3,r3,r16
1000a878:	1584b03a 	or	r2,r2,r22
1000a87c:	003f7806 	br	1000a660 <__alt_data_end+0xf800a660>
1000a880:	0025883a 	mov	r18,zero
1000a884:	003ef406 	br	1000a458 <__alt_data_end+0xf800a458>
1000a888:	8560983a 	sll	r16,r16,r21
1000a88c:	88e6d83a 	srl	r19,r17,r3
1000a890:	90c6d83a 	srl	r3,r18,r3
1000a894:	8028d43a 	srli	r20,r16,16
1000a898:	8d62983a 	sll	r17,r17,r21
1000a89c:	9809883a 	mov	r4,r19
1000a8a0:	a00b883a 	mov	r5,r20
1000a8a4:	88eeb03a 	or	r23,r17,r3
1000a8a8:	000aafc0 	call	1000aafc <__umodsi3>
1000a8ac:	9809883a 	mov	r4,r19
1000a8b0:	a00b883a 	mov	r5,r20
1000a8b4:	1023883a 	mov	r17,r2
1000a8b8:	85bfffcc 	andi	r22,r16,65535
1000a8bc:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a8c0:	1009883a 	mov	r4,r2
1000a8c4:	b00b883a 	mov	r5,r22
1000a8c8:	000ab040 	call	1000ab04 <__mulsi3>
1000a8cc:	1007883a 	mov	r3,r2
1000a8d0:	8808943a 	slli	r4,r17,16
1000a8d4:	b804d43a 	srli	r2,r23,16
1000a8d8:	9566983a 	sll	r19,r18,r21
1000a8dc:	2088b03a 	or	r4,r4,r2
1000a8e0:	20c0042e 	bgeu	r4,r3,1000a8f4 <__umoddi3+0x538>
1000a8e4:	2409883a 	add	r4,r4,r16
1000a8e8:	24000236 	bltu	r4,r16,1000a8f4 <__umoddi3+0x538>
1000a8ec:	20c0012e 	bgeu	r4,r3,1000a8f4 <__umoddi3+0x538>
1000a8f0:	2409883a 	add	r4,r4,r16
1000a8f4:	20e5c83a 	sub	r18,r4,r3
1000a8f8:	9009883a 	mov	r4,r18
1000a8fc:	a00b883a 	mov	r5,r20
1000a900:	000aafc0 	call	1000aafc <__umodsi3>
1000a904:	1023883a 	mov	r17,r2
1000a908:	9009883a 	mov	r4,r18
1000a90c:	a00b883a 	mov	r5,r20
1000a910:	8822943a 	slli	r17,r17,16
1000a914:	000aaf40 	call	1000aaf4 <__udivsi3>
1000a918:	1009883a 	mov	r4,r2
1000a91c:	b00b883a 	mov	r5,r22
1000a920:	bdffffcc 	andi	r23,r23,65535
1000a924:	000ab040 	call	1000ab04 <__mulsi3>
1000a928:	8de2b03a 	or	r17,r17,r23
1000a92c:	8880042e 	bgeu	r17,r2,1000a940 <__umoddi3+0x584>
1000a930:	8c23883a 	add	r17,r17,r16
1000a934:	8c000236 	bltu	r17,r16,1000a940 <__umoddi3+0x584>
1000a938:	8880012e 	bgeu	r17,r2,1000a940 <__umoddi3+0x584>
1000a93c:	8c23883a 	add	r17,r17,r16
1000a940:	88a3c83a 	sub	r17,r17,r2
1000a944:	a825883a 	mov	r18,r21
1000a948:	003f1a06 	br	1000a5b4 <__alt_data_end+0xf800a5b4>
1000a94c:	25adc83a 	sub	r22,r4,r22
1000a950:	1d07c83a 	sub	r3,r3,r20
1000a954:	2589803a 	cmpltu	r4,r4,r22
1000a958:	1907c83a 	sub	r3,r3,r4
1000a95c:	88c7c83a 	sub	r3,r17,r3
1000a960:	003fbf06 	br	1000a860 <__alt_data_end+0xf800a860>
1000a964:	00c00204 	movi	r3,8
1000a968:	1827883a 	mov	r19,r3
1000a96c:	003ee706 	br	1000a50c <__alt_data_end+0xf800a50c>
1000a970:	00c00604 	movi	r3,24
1000a974:	1827883a 	mov	r19,r3
1000a978:	003ee406 	br	1000a50c <__alt_data_end+0xf800a50c>
1000a97c:	00800604 	movi	r2,24
1000a980:	1009883a 	mov	r4,r2
1000a984:	003ea506 	br	1000a41c <__alt_data_end+0xf800a41c>
1000a988:	00800204 	movi	r2,8
1000a98c:	1007883a 	mov	r3,r2
1000a990:	003efb06 	br	1000a580 <__alt_data_end+0xf800a580>
1000a994:	00800604 	movi	r2,24
1000a998:	1007883a 	mov	r3,r2
1000a99c:	003ef806 	br	1000a580 <__alt_data_end+0xf800a580>
1000a9a0:	00800204 	movi	r2,8
1000a9a4:	1009883a 	mov	r4,r2
1000a9a8:	003e9c06 	br	1000a41c <__alt_data_end+0xf800a41c>
1000a9ac:	38bf7e2e 	bgeu	r7,r2,1000a7a8 <__alt_data_end+0xf800a7a8>
1000a9b0:	ad7fff84 	addi	r21,r21,-2
1000a9b4:	3d0f883a 	add	r7,r7,r20
1000a9b8:	003f7c06 	br	1000a7ac <__alt_data_end+0xf800a7ac>
1000a9bc:	193f632e 	bgeu	r3,r4,1000a74c <__alt_data_end+0xf800a74c>
1000a9c0:	e73fff84 	addi	fp,fp,-2
1000a9c4:	1d07883a 	add	r3,r3,r20
1000a9c8:	003f6106 	br	1000a750 <__alt_data_end+0xf800a750>
1000a9cc:	1c07883a 	add	r3,r3,r16
1000a9d0:	003f0a06 	br	1000a5fc <__alt_data_end+0xf800a5fc>
1000a9d4:	9005883a 	mov	r2,r18
1000a9d8:	a007883a 	mov	r3,r20
1000a9dc:	003f2006 	br	1000a660 <__alt_data_end+0xf800a660>
1000a9e0:	913fda36 	bltu	r18,r4,1000a94c <__alt_data_end+0xf800a94c>
1000a9e4:	202d883a 	mov	r22,r4
1000a9e8:	0007883a 	mov	r3,zero
1000a9ec:	003f9c06 	br	1000a860 <__alt_data_end+0xf800a860>

1000a9f0 <udivmodsi4>:
1000a9f0:	2900182e 	bgeu	r5,r4,1000aa54 <udivmodsi4+0x64>
1000a9f4:	28001716 	blt	r5,zero,1000aa54 <udivmodsi4+0x64>
1000a9f8:	00800804 	movi	r2,32
1000a9fc:	00c00044 	movi	r3,1
1000aa00:	00000206 	br	1000aa0c <udivmodsi4+0x1c>
1000aa04:	10001126 	beq	r2,zero,1000aa4c <udivmodsi4+0x5c>
1000aa08:	28000516 	blt	r5,zero,1000aa20 <udivmodsi4+0x30>
1000aa0c:	294b883a 	add	r5,r5,r5
1000aa10:	10bfffc4 	addi	r2,r2,-1
1000aa14:	18c7883a 	add	r3,r3,r3
1000aa18:	293ffa36 	bltu	r5,r4,1000aa04 <__alt_data_end+0xf800aa04>
1000aa1c:	18000b26 	beq	r3,zero,1000aa4c <udivmodsi4+0x5c>
1000aa20:	0005883a 	mov	r2,zero
1000aa24:	21400236 	bltu	r4,r5,1000aa30 <udivmodsi4+0x40>
1000aa28:	2149c83a 	sub	r4,r4,r5
1000aa2c:	10c4b03a 	or	r2,r2,r3
1000aa30:	1806d07a 	srli	r3,r3,1
1000aa34:	280ad07a 	srli	r5,r5,1
1000aa38:	183ffa1e 	bne	r3,zero,1000aa24 <__alt_data_end+0xf800aa24>
1000aa3c:	3000011e 	bne	r6,zero,1000aa44 <udivmodsi4+0x54>
1000aa40:	f800283a 	ret
1000aa44:	2005883a 	mov	r2,r4
1000aa48:	f800283a 	ret
1000aa4c:	0005883a 	mov	r2,zero
1000aa50:	003ffa06 	br	1000aa3c <__alt_data_end+0xf800aa3c>
1000aa54:	00c00044 	movi	r3,1
1000aa58:	0005883a 	mov	r2,zero
1000aa5c:	003ff106 	br	1000aa24 <__alt_data_end+0xf800aa24>

1000aa60 <__divsi3>:
1000aa60:	deffff04 	addi	sp,sp,-4
1000aa64:	dfc00015 	stw	ra,0(sp)
1000aa68:	20000916 	blt	r4,zero,1000aa90 <__divsi3+0x30>
1000aa6c:	000f883a 	mov	r7,zero
1000aa70:	28000a16 	blt	r5,zero,1000aa9c <__divsi3+0x3c>
1000aa74:	000d883a 	mov	r6,zero
1000aa78:	000a9f00 	call	1000a9f0 <udivmodsi4>
1000aa7c:	38000126 	beq	r7,zero,1000aa84 <__divsi3+0x24>
1000aa80:	0085c83a 	sub	r2,zero,r2
1000aa84:	dfc00017 	ldw	ra,0(sp)
1000aa88:	dec00104 	addi	sp,sp,4
1000aa8c:	f800283a 	ret
1000aa90:	0109c83a 	sub	r4,zero,r4
1000aa94:	01c00044 	movi	r7,1
1000aa98:	283ff60e 	bge	r5,zero,1000aa74 <__alt_data_end+0xf800aa74>
1000aa9c:	014bc83a 	sub	r5,zero,r5
1000aaa0:	39c0005c 	xori	r7,r7,1
1000aaa4:	003ff306 	br	1000aa74 <__alt_data_end+0xf800aa74>

1000aaa8 <__modsi3>:
1000aaa8:	20000316 	blt	r4,zero,1000aab8 <__modsi3+0x10>
1000aaac:	28000c16 	blt	r5,zero,1000aae0 <__modsi3+0x38>
1000aab0:	01800044 	movi	r6,1
1000aab4:	000a9f01 	jmpi	1000a9f0 <udivmodsi4>
1000aab8:	deffff04 	addi	sp,sp,-4
1000aabc:	dfc00015 	stw	ra,0(sp)
1000aac0:	0109c83a 	sub	r4,zero,r4
1000aac4:	28000916 	blt	r5,zero,1000aaec <__modsi3+0x44>
1000aac8:	01800044 	movi	r6,1
1000aacc:	000a9f00 	call	1000a9f0 <udivmodsi4>
1000aad0:	0085c83a 	sub	r2,zero,r2
1000aad4:	dfc00017 	ldw	ra,0(sp)
1000aad8:	dec00104 	addi	sp,sp,4
1000aadc:	f800283a 	ret
1000aae0:	014bc83a 	sub	r5,zero,r5
1000aae4:	01800044 	movi	r6,1
1000aae8:	000a9f01 	jmpi	1000a9f0 <udivmodsi4>
1000aaec:	014bc83a 	sub	r5,zero,r5
1000aaf0:	003ff506 	br	1000aac8 <__alt_data_end+0xf800aac8>

1000aaf4 <__udivsi3>:
1000aaf4:	000d883a 	mov	r6,zero
1000aaf8:	000a9f01 	jmpi	1000a9f0 <udivmodsi4>

1000aafc <__umodsi3>:
1000aafc:	01800044 	movi	r6,1
1000ab00:	000a9f01 	jmpi	1000a9f0 <udivmodsi4>

1000ab04 <__mulsi3>:
1000ab04:	0005883a 	mov	r2,zero
1000ab08:	20000726 	beq	r4,zero,1000ab28 <__mulsi3+0x24>
1000ab0c:	20c0004c 	andi	r3,r4,1
1000ab10:	2008d07a 	srli	r4,r4,1
1000ab14:	18000126 	beq	r3,zero,1000ab1c <__mulsi3+0x18>
1000ab18:	1145883a 	add	r2,r2,r5
1000ab1c:	294b883a 	add	r5,r5,r5
1000ab20:	203ffa1e 	bne	r4,zero,1000ab0c <__alt_data_end+0xf800ab0c>
1000ab24:	f800283a 	ret
1000ab28:	f800283a 	ret

1000ab2c <__adddf3>:
1000ab2c:	00800434 	movhi	r2,16
1000ab30:	10bfffc4 	addi	r2,r2,-1
1000ab34:	defffb04 	addi	sp,sp,-20
1000ab38:	2890703a 	and	r8,r5,r2
1000ab3c:	2806d7fa 	srli	r3,r5,31
1000ab40:	3884703a 	and	r2,r7,r2
1000ab44:	2014d77a 	srli	r10,r4,29
1000ab48:	3812d53a 	srli	r9,r7,20
1000ab4c:	dc400115 	stw	r17,4(sp)
1000ab50:	100490fa 	slli	r2,r2,3
1000ab54:	2822d53a 	srli	r17,r5,20
1000ab58:	380ed7fa 	srli	r7,r7,31
1000ab5c:	400a90fa 	slli	r5,r8,3
1000ab60:	3010d77a 	srli	r8,r6,29
1000ab64:	dc800215 	stw	r18,8(sp)
1000ab68:	dc000015 	stw	r16,0(sp)
1000ab6c:	dfc00415 	stw	ra,16(sp)
1000ab70:	dcc00315 	stw	r19,12(sp)
1000ab74:	1c803fcc 	andi	r18,r3,255
1000ab78:	202090fa 	slli	r16,r4,3
1000ab7c:	8c41ffcc 	andi	r17,r17,2047
1000ab80:	2a8ab03a 	or	r5,r5,r10
1000ab84:	4901ffcc 	andi	r4,r9,2047
1000ab88:	1204b03a 	or	r2,r2,r8
1000ab8c:	300c90fa 	slli	r6,r6,3
1000ab90:	91c07126 	beq	r18,r7,1000ad58 <__adddf3+0x22c>
1000ab94:	8907c83a 	sub	r3,r17,r4
1000ab98:	00c0a00e 	bge	zero,r3,1000ae1c <__adddf3+0x2f0>
1000ab9c:	2000291e 	bne	r4,zero,1000ac44 <__adddf3+0x118>
1000aba0:	1188b03a 	or	r4,r2,r6
1000aba4:	20008b1e 	bne	r4,zero,1000add4 <__adddf3+0x2a8>
1000aba8:	808001cc 	andi	r2,r16,7
1000abac:	10005a26 	beq	r2,zero,1000ad18 <__adddf3+0x1ec>
1000abb0:	80c003cc 	andi	r3,r16,15
1000abb4:	00800104 	movi	r2,4
1000abb8:	18805726 	beq	r3,r2,1000ad18 <__adddf3+0x1ec>
1000abbc:	81000104 	addi	r4,r16,4
1000abc0:	2421803a 	cmpltu	r16,r4,r16
1000abc4:	2c0b883a 	add	r5,r5,r16
1000abc8:	2880202c 	andhi	r2,r5,128
1000abcc:	9007883a 	mov	r3,r18
1000abd0:	2021883a 	mov	r16,r4
1000abd4:	10005326 	beq	r2,zero,1000ad24 <__adddf3+0x1f8>
1000abd8:	8c400044 	addi	r17,r17,1
1000abdc:	0081ffc4 	movi	r2,2047
1000abe0:	8880ae26 	beq	r17,r2,1000ae9c <__adddf3+0x370>
1000abe4:	00bfe034 	movhi	r2,65408
1000abe8:	10bfffc4 	addi	r2,r2,-1
1000abec:	288a703a 	and	r5,r5,r2
1000abf0:	2804977a 	slli	r2,r5,29
1000abf4:	280a927a 	slli	r5,r5,9
1000abf8:	8020d0fa 	srli	r16,r16,3
1000abfc:	280ad33a 	srli	r5,r5,12
1000ac00:	1404b03a 	or	r2,r2,r16
1000ac04:	8c41ffcc 	andi	r17,r17,2047
1000ac08:	8822953a 	slli	r17,r17,20
1000ac0c:	18c03fcc 	andi	r3,r3,255
1000ac10:	180897fa 	slli	r4,r3,31
1000ac14:	00c00434 	movhi	r3,16
1000ac18:	18ffffc4 	addi	r3,r3,-1
1000ac1c:	28c6703a 	and	r3,r5,r3
1000ac20:	1c46b03a 	or	r3,r3,r17
1000ac24:	1906b03a 	or	r3,r3,r4
1000ac28:	dfc00417 	ldw	ra,16(sp)
1000ac2c:	dcc00317 	ldw	r19,12(sp)
1000ac30:	dc800217 	ldw	r18,8(sp)
1000ac34:	dc400117 	ldw	r17,4(sp)
1000ac38:	dc000017 	ldw	r16,0(sp)
1000ac3c:	dec00504 	addi	sp,sp,20
1000ac40:	f800283a 	ret
1000ac44:	0101ffc4 	movi	r4,2047
1000ac48:	893fd726 	beq	r17,r4,1000aba8 <__alt_data_end+0xf800aba8>
1000ac4c:	10802034 	orhi	r2,r2,128
1000ac50:	01000e04 	movi	r4,56
1000ac54:	20c09416 	blt	r4,r3,1000aea8 <__adddf3+0x37c>
1000ac58:	010007c4 	movi	r4,31
1000ac5c:	20c0b716 	blt	r4,r3,1000af3c <__adddf3+0x410>
1000ac60:	01000804 	movi	r4,32
1000ac64:	20c9c83a 	sub	r4,r4,r3
1000ac68:	30ced83a 	srl	r7,r6,r3
1000ac6c:	1110983a 	sll	r8,r2,r4
1000ac70:	3108983a 	sll	r4,r6,r4
1000ac74:	10c6d83a 	srl	r3,r2,r3
1000ac78:	41c4b03a 	or	r2,r8,r7
1000ac7c:	2008c03a 	cmpne	r4,r4,zero
1000ac80:	110cb03a 	or	r6,r2,r4
1000ac84:	818dc83a 	sub	r6,r16,r6
1000ac88:	81a1803a 	cmpltu	r16,r16,r6
1000ac8c:	28cbc83a 	sub	r5,r5,r3
1000ac90:	2c0bc83a 	sub	r5,r5,r16
1000ac94:	3021883a 	mov	r16,r6
1000ac98:	2880202c 	andhi	r2,r5,128
1000ac9c:	103fc226 	beq	r2,zero,1000aba8 <__alt_data_end+0xf800aba8>
1000aca0:	04c02034 	movhi	r19,128
1000aca4:	9cffffc4 	addi	r19,r19,-1
1000aca8:	2ce6703a 	and	r19,r5,r19
1000acac:	98006c26 	beq	r19,zero,1000ae60 <__adddf3+0x334>
1000acb0:	9809883a 	mov	r4,r19
1000acb4:	000d2040 	call	1000d204 <__clzsi2>
1000acb8:	10fffe04 	addi	r3,r2,-8
1000acbc:	010007c4 	movi	r4,31
1000acc0:	20c06d16 	blt	r4,r3,1000ae78 <__adddf3+0x34c>
1000acc4:	01000a04 	movi	r4,40
1000acc8:	2085c83a 	sub	r2,r4,r2
1000accc:	8084d83a 	srl	r2,r16,r2
1000acd0:	98e6983a 	sll	r19,r19,r3
1000acd4:	80e0983a 	sll	r16,r16,r3
1000acd8:	14c4b03a 	or	r2,r2,r19
1000acdc:	1c406a16 	blt	r3,r17,1000ae88 <__adddf3+0x35c>
1000ace0:	1c63c83a 	sub	r17,r3,r17
1000ace4:	89400044 	addi	r5,r17,1
1000ace8:	00c007c4 	movi	r3,31
1000acec:	19408616 	blt	r3,r5,1000af08 <__adddf3+0x3dc>
1000acf0:	1c47c83a 	sub	r3,r3,r17
1000acf4:	8148d83a 	srl	r4,r16,r5
1000acf8:	80e0983a 	sll	r16,r16,r3
1000acfc:	10c6983a 	sll	r3,r2,r3
1000ad00:	114ad83a 	srl	r5,r2,r5
1000ad04:	8004c03a 	cmpne	r2,r16,zero
1000ad08:	20e0b03a 	or	r16,r4,r3
1000ad0c:	80a0b03a 	or	r16,r16,r2
1000ad10:	0023883a 	mov	r17,zero
1000ad14:	003fa406 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000ad18:	2880202c 	andhi	r2,r5,128
1000ad1c:	9007883a 	mov	r3,r18
1000ad20:	103fad1e 	bne	r2,zero,1000abd8 <__alt_data_end+0xf800abd8>
1000ad24:	2804977a 	slli	r2,r5,29
1000ad28:	8020d0fa 	srli	r16,r16,3
1000ad2c:	0101ffc4 	movi	r4,2047
1000ad30:	280ad0fa 	srli	r5,r5,3
1000ad34:	1404b03a 	or	r2,r2,r16
1000ad38:	8900031e 	bne	r17,r4,1000ad48 <__adddf3+0x21c>
1000ad3c:	1148b03a 	or	r4,r2,r5
1000ad40:	20005626 	beq	r4,zero,1000ae9c <__adddf3+0x370>
1000ad44:	29400234 	orhi	r5,r5,8
1000ad48:	01000434 	movhi	r4,16
1000ad4c:	213fffc4 	addi	r4,r4,-1
1000ad50:	290a703a 	and	r5,r5,r4
1000ad54:	003fab06 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000ad58:	890fc83a 	sub	r7,r17,r4
1000ad5c:	01c0560e 	bge	zero,r7,1000aeb8 <__adddf3+0x38c>
1000ad60:	20002426 	beq	r4,zero,1000adf4 <__adddf3+0x2c8>
1000ad64:	0101ffc4 	movi	r4,2047
1000ad68:	893f8f26 	beq	r17,r4,1000aba8 <__alt_data_end+0xf800aba8>
1000ad6c:	10802034 	orhi	r2,r2,128
1000ad70:	01000e04 	movi	r4,56
1000ad74:	21c09d0e 	bge	r4,r7,1000afec <__adddf3+0x4c0>
1000ad78:	118cb03a 	or	r6,r2,r6
1000ad7c:	300cc03a 	cmpne	r6,r6,zero
1000ad80:	000f883a 	mov	r7,zero
1000ad84:	340d883a 	add	r6,r6,r16
1000ad88:	3421803a 	cmpltu	r16,r6,r16
1000ad8c:	394b883a 	add	r5,r7,r5
1000ad90:	2c0b883a 	add	r5,r5,r16
1000ad94:	3021883a 	mov	r16,r6
1000ad98:	2880202c 	andhi	r2,r5,128
1000ad9c:	103f8226 	beq	r2,zero,1000aba8 <__alt_data_end+0xf800aba8>
1000ada0:	8c400044 	addi	r17,r17,1
1000ada4:	0081ffc4 	movi	r2,2047
1000ada8:	8880cb26 	beq	r17,r2,1000b0d8 <__adddf3+0x5ac>
1000adac:	00bfe034 	movhi	r2,65408
1000adb0:	10bfffc4 	addi	r2,r2,-1
1000adb4:	288a703a 	and	r5,r5,r2
1000adb8:	8006d07a 	srli	r3,r16,1
1000adbc:	280497fa 	slli	r2,r5,31
1000adc0:	8400004c 	andi	r16,r16,1
1000adc4:	80e0b03a 	or	r16,r16,r3
1000adc8:	80a0b03a 	or	r16,r16,r2
1000adcc:	280ad07a 	srli	r5,r5,1
1000add0:	003f7506 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000add4:	18ffffc4 	addi	r3,r3,-1
1000add8:	1800481e 	bne	r3,zero,1000aefc <__adddf3+0x3d0>
1000addc:	818dc83a 	sub	r6,r16,r6
1000ade0:	81a1803a 	cmpltu	r16,r16,r6
1000ade4:	288bc83a 	sub	r5,r5,r2
1000ade8:	2c0bc83a 	sub	r5,r5,r16
1000adec:	3021883a 	mov	r16,r6
1000adf0:	003fa906 	br	1000ac98 <__alt_data_end+0xf800ac98>
1000adf4:	1188b03a 	or	r4,r2,r6
1000adf8:	203f6b26 	beq	r4,zero,1000aba8 <__alt_data_end+0xf800aba8>
1000adfc:	39ffffc4 	addi	r7,r7,-1
1000ae00:	3800931e 	bne	r7,zero,1000b050 <__adddf3+0x524>
1000ae04:	340d883a 	add	r6,r6,r16
1000ae08:	3421803a 	cmpltu	r16,r6,r16
1000ae0c:	114b883a 	add	r5,r2,r5
1000ae10:	2c0b883a 	add	r5,r5,r16
1000ae14:	3021883a 	mov	r16,r6
1000ae18:	003fdf06 	br	1000ad98 <__alt_data_end+0xf800ad98>
1000ae1c:	1800531e 	bne	r3,zero,1000af6c <__adddf3+0x440>
1000ae20:	88c00044 	addi	r3,r17,1
1000ae24:	18c1ffcc 	andi	r3,r3,2047
1000ae28:	01000044 	movi	r4,1
1000ae2c:	20c0a00e 	bge	r4,r3,1000b0b0 <__adddf3+0x584>
1000ae30:	8187c83a 	sub	r3,r16,r6
1000ae34:	80c9803a 	cmpltu	r4,r16,r3
1000ae38:	28a7c83a 	sub	r19,r5,r2
1000ae3c:	9927c83a 	sub	r19,r19,r4
1000ae40:	9900202c 	andhi	r4,r19,128
1000ae44:	20006226 	beq	r4,zero,1000afd0 <__adddf3+0x4a4>
1000ae48:	3421c83a 	sub	r16,r6,r16
1000ae4c:	1145c83a 	sub	r2,r2,r5
1000ae50:	340d803a 	cmpltu	r6,r6,r16
1000ae54:	11a7c83a 	sub	r19,r2,r6
1000ae58:	3825883a 	mov	r18,r7
1000ae5c:	983f941e 	bne	r19,zero,1000acb0 <__alt_data_end+0xf800acb0>
1000ae60:	8009883a 	mov	r4,r16
1000ae64:	000d2040 	call	1000d204 <__clzsi2>
1000ae68:	10800804 	addi	r2,r2,32
1000ae6c:	10fffe04 	addi	r3,r2,-8
1000ae70:	010007c4 	movi	r4,31
1000ae74:	20ff930e 	bge	r4,r3,1000acc4 <__alt_data_end+0xf800acc4>
1000ae78:	10bff604 	addi	r2,r2,-40
1000ae7c:	8084983a 	sll	r2,r16,r2
1000ae80:	0021883a 	mov	r16,zero
1000ae84:	1c7f960e 	bge	r3,r17,1000ace0 <__alt_data_end+0xf800ace0>
1000ae88:	017fe034 	movhi	r5,65408
1000ae8c:	297fffc4 	addi	r5,r5,-1
1000ae90:	88e3c83a 	sub	r17,r17,r3
1000ae94:	114a703a 	and	r5,r2,r5
1000ae98:	003f4306 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000ae9c:	000b883a 	mov	r5,zero
1000aea0:	0005883a 	mov	r2,zero
1000aea4:	003f5706 	br	1000ac04 <__alt_data_end+0xf800ac04>
1000aea8:	118cb03a 	or	r6,r2,r6
1000aeac:	300cc03a 	cmpne	r6,r6,zero
1000aeb0:	0007883a 	mov	r3,zero
1000aeb4:	003f7306 	br	1000ac84 <__alt_data_end+0xf800ac84>
1000aeb8:	3800961e 	bne	r7,zero,1000b114 <__adddf3+0x5e8>
1000aebc:	89000044 	addi	r4,r17,1
1000aec0:	2201ffcc 	andi	r8,r4,2047
1000aec4:	01c00044 	movi	r7,1
1000aec8:	3a00680e 	bge	r7,r8,1000b06c <__adddf3+0x540>
1000aecc:	01c1ffc4 	movi	r7,2047
1000aed0:	21c0a726 	beq	r4,r7,1000b170 <__adddf3+0x644>
1000aed4:	340d883a 	add	r6,r6,r16
1000aed8:	3421803a 	cmpltu	r16,r6,r16
1000aedc:	114b883a 	add	r5,r2,r5
1000aee0:	2c0b883a 	add	r5,r5,r16
1000aee4:	282097fa 	slli	r16,r5,31
1000aee8:	300cd07a 	srli	r6,r6,1
1000aeec:	280ad07a 	srli	r5,r5,1
1000aef0:	2023883a 	mov	r17,r4
1000aef4:	81a0b03a 	or	r16,r16,r6
1000aef8:	003f2b06 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000aefc:	0101ffc4 	movi	r4,2047
1000af00:	893f531e 	bne	r17,r4,1000ac50 <__alt_data_end+0xf800ac50>
1000af04:	003f2806 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000af08:	893ff844 	addi	r4,r17,-31
1000af0c:	00c00804 	movi	r3,32
1000af10:	1108d83a 	srl	r4,r2,r4
1000af14:	28c05126 	beq	r5,r3,1000b05c <__adddf3+0x530>
1000af18:	00c00fc4 	movi	r3,63
1000af1c:	1c63c83a 	sub	r17,r3,r17
1000af20:	1444983a 	sll	r2,r2,r17
1000af24:	1420b03a 	or	r16,r2,r16
1000af28:	8020c03a 	cmpne	r16,r16,zero
1000af2c:	8120b03a 	or	r16,r16,r4
1000af30:	000b883a 	mov	r5,zero
1000af34:	0023883a 	mov	r17,zero
1000af38:	003f1b06 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000af3c:	193ff804 	addi	r4,r3,-32
1000af40:	01c00804 	movi	r7,32
1000af44:	1108d83a 	srl	r4,r2,r4
1000af48:	19c04626 	beq	r3,r7,1000b064 <__adddf3+0x538>
1000af4c:	01c01004 	movi	r7,64
1000af50:	38c7c83a 	sub	r3,r7,r3
1000af54:	10c4983a 	sll	r2,r2,r3
1000af58:	118cb03a 	or	r6,r2,r6
1000af5c:	300cc03a 	cmpne	r6,r6,zero
1000af60:	310cb03a 	or	r6,r6,r4
1000af64:	0007883a 	mov	r3,zero
1000af68:	003f4606 	br	1000ac84 <__alt_data_end+0xf800ac84>
1000af6c:	88002b26 	beq	r17,zero,1000b01c <__adddf3+0x4f0>
1000af70:	0201ffc4 	movi	r8,2047
1000af74:	22002f26 	beq	r4,r8,1000b034 <__adddf3+0x508>
1000af78:	00c7c83a 	sub	r3,zero,r3
1000af7c:	29402034 	orhi	r5,r5,128
1000af80:	02000e04 	movi	r8,56
1000af84:	40c07616 	blt	r8,r3,1000b160 <__adddf3+0x634>
1000af88:	020007c4 	movi	r8,31
1000af8c:	40c0d216 	blt	r8,r3,1000b2d8 <__adddf3+0x7ac>
1000af90:	02000804 	movi	r8,32
1000af94:	40d1c83a 	sub	r8,r8,r3
1000af98:	2a14983a 	sll	r10,r5,r8
1000af9c:	80d2d83a 	srl	r9,r16,r3
1000afa0:	8210983a 	sll	r8,r16,r8
1000afa4:	28cad83a 	srl	r5,r5,r3
1000afa8:	5252b03a 	or	r9,r10,r9
1000afac:	4006c03a 	cmpne	r3,r8,zero
1000afb0:	48e0b03a 	or	r16,r9,r3
1000afb4:	3421c83a 	sub	r16,r6,r16
1000afb8:	114bc83a 	sub	r5,r2,r5
1000afbc:	340d803a 	cmpltu	r6,r6,r16
1000afc0:	298bc83a 	sub	r5,r5,r6
1000afc4:	2023883a 	mov	r17,r4
1000afc8:	3825883a 	mov	r18,r7
1000afcc:	003f3206 	br	1000ac98 <__alt_data_end+0xf800ac98>
1000afd0:	98c4b03a 	or	r2,r19,r3
1000afd4:	10001c1e 	bne	r2,zero,1000b048 <__adddf3+0x51c>
1000afd8:	0007883a 	mov	r3,zero
1000afdc:	000b883a 	mov	r5,zero
1000afe0:	0021883a 	mov	r16,zero
1000afe4:	0023883a 	mov	r17,zero
1000afe8:	003f4e06 	br	1000ad24 <__alt_data_end+0xf800ad24>
1000afec:	010007c4 	movi	r4,31
1000aff0:	21c03c16 	blt	r4,r7,1000b0e4 <__adddf3+0x5b8>
1000aff4:	01000804 	movi	r4,32
1000aff8:	21c9c83a 	sub	r4,r4,r7
1000affc:	31d0d83a 	srl	r8,r6,r7
1000b000:	1112983a 	sll	r9,r2,r4
1000b004:	3108983a 	sll	r4,r6,r4
1000b008:	11ced83a 	srl	r7,r2,r7
1000b00c:	4a04b03a 	or	r2,r9,r8
1000b010:	2008c03a 	cmpne	r4,r4,zero
1000b014:	110cb03a 	or	r6,r2,r4
1000b018:	003f5a06 	br	1000ad84 <__alt_data_end+0xf800ad84>
1000b01c:	2c10b03a 	or	r8,r5,r16
1000b020:	40000426 	beq	r8,zero,1000b034 <__adddf3+0x508>
1000b024:	00c6303a 	nor	r3,zero,r3
1000b028:	183fe226 	beq	r3,zero,1000afb4 <__alt_data_end+0xf800afb4>
1000b02c:	0201ffc4 	movi	r8,2047
1000b030:	223fd31e 	bne	r4,r8,1000af80 <__alt_data_end+0xf800af80>
1000b034:	100b883a 	mov	r5,r2
1000b038:	3021883a 	mov	r16,r6
1000b03c:	2023883a 	mov	r17,r4
1000b040:	3825883a 	mov	r18,r7
1000b044:	003ed806 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b048:	1821883a 	mov	r16,r3
1000b04c:	003f1706 	br	1000acac <__alt_data_end+0xf800acac>
1000b050:	0101ffc4 	movi	r4,2047
1000b054:	893f461e 	bne	r17,r4,1000ad70 <__alt_data_end+0xf800ad70>
1000b058:	003ed306 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b05c:	0005883a 	mov	r2,zero
1000b060:	003fb006 	br	1000af24 <__alt_data_end+0xf800af24>
1000b064:	0005883a 	mov	r2,zero
1000b068:	003fbb06 	br	1000af58 <__alt_data_end+0xf800af58>
1000b06c:	2c06b03a 	or	r3,r5,r16
1000b070:	8800841e 	bne	r17,zero,1000b284 <__adddf3+0x758>
1000b074:	1800b226 	beq	r3,zero,1000b340 <__adddf3+0x814>
1000b078:	1186b03a 	or	r3,r2,r6
1000b07c:	183eca26 	beq	r3,zero,1000aba8 <__alt_data_end+0xf800aba8>
1000b080:	340d883a 	add	r6,r6,r16
1000b084:	114b883a 	add	r5,r2,r5
1000b088:	3421803a 	cmpltu	r16,r6,r16
1000b08c:	2c0b883a 	add	r5,r5,r16
1000b090:	2880202c 	andhi	r2,r5,128
1000b094:	1000c026 	beq	r2,zero,1000b398 <__adddf3+0x86c>
1000b098:	00bfe034 	movhi	r2,65408
1000b09c:	10bfffc4 	addi	r2,r2,-1
1000b0a0:	288a703a 	and	r5,r5,r2
1000b0a4:	3021883a 	mov	r16,r6
1000b0a8:	3823883a 	mov	r17,r7
1000b0ac:	003ebe06 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b0b0:	2c06b03a 	or	r3,r5,r16
1000b0b4:	8800221e 	bne	r17,zero,1000b140 <__adddf3+0x614>
1000b0b8:	1800481e 	bne	r3,zero,1000b1dc <__adddf3+0x6b0>
1000b0bc:	1186b03a 	or	r3,r2,r6
1000b0c0:	18000426 	beq	r3,zero,1000b0d4 <__adddf3+0x5a8>
1000b0c4:	100b883a 	mov	r5,r2
1000b0c8:	3021883a 	mov	r16,r6
1000b0cc:	3825883a 	mov	r18,r7
1000b0d0:	003eb506 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b0d4:	0007883a 	mov	r3,zero
1000b0d8:	000b883a 	mov	r5,zero
1000b0dc:	0021883a 	mov	r16,zero
1000b0e0:	003f1006 	br	1000ad24 <__alt_data_end+0xf800ad24>
1000b0e4:	393ff804 	addi	r4,r7,-32
1000b0e8:	02000804 	movi	r8,32
1000b0ec:	1108d83a 	srl	r4,r2,r4
1000b0f0:	3a007726 	beq	r7,r8,1000b2d0 <__adddf3+0x7a4>
1000b0f4:	02001004 	movi	r8,64
1000b0f8:	41cfc83a 	sub	r7,r8,r7
1000b0fc:	11c4983a 	sll	r2,r2,r7
1000b100:	118cb03a 	or	r6,r2,r6
1000b104:	300cc03a 	cmpne	r6,r6,zero
1000b108:	310cb03a 	or	r6,r6,r4
1000b10c:	000f883a 	mov	r7,zero
1000b110:	003f1c06 	br	1000ad84 <__alt_data_end+0xf800ad84>
1000b114:	88001a1e 	bne	r17,zero,1000b180 <__adddf3+0x654>
1000b118:	2c10b03a 	or	r8,r5,r16
1000b11c:	40005526 	beq	r8,zero,1000b274 <__adddf3+0x748>
1000b120:	01ce303a 	nor	r7,zero,r7
1000b124:	3800511e 	bne	r7,zero,1000b26c <__adddf3+0x740>
1000b128:	81a1883a 	add	r16,r16,r6
1000b12c:	114b883a 	add	r5,r2,r5
1000b130:	818d803a 	cmpltu	r6,r16,r6
1000b134:	298b883a 	add	r5,r5,r6
1000b138:	2023883a 	mov	r17,r4
1000b13c:	003f1606 	br	1000ad98 <__alt_data_end+0xf800ad98>
1000b140:	1800341e 	bne	r3,zero,1000b214 <__adddf3+0x6e8>
1000b144:	1186b03a 	or	r3,r2,r6
1000b148:	18006f26 	beq	r3,zero,1000b308 <__adddf3+0x7dc>
1000b14c:	100b883a 	mov	r5,r2
1000b150:	3021883a 	mov	r16,r6
1000b154:	3825883a 	mov	r18,r7
1000b158:	0441ffc4 	movi	r17,2047
1000b15c:	003e9206 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b160:	2c20b03a 	or	r16,r5,r16
1000b164:	8020c03a 	cmpne	r16,r16,zero
1000b168:	000b883a 	mov	r5,zero
1000b16c:	003f9106 	br	1000afb4 <__alt_data_end+0xf800afb4>
1000b170:	2023883a 	mov	r17,r4
1000b174:	000b883a 	mov	r5,zero
1000b178:	0021883a 	mov	r16,zero
1000b17c:	003ee906 	br	1000ad24 <__alt_data_end+0xf800ad24>
1000b180:	0201ffc4 	movi	r8,2047
1000b184:	22003b26 	beq	r4,r8,1000b274 <__adddf3+0x748>
1000b188:	01cfc83a 	sub	r7,zero,r7
1000b18c:	29402034 	orhi	r5,r5,128
1000b190:	02000e04 	movi	r8,56
1000b194:	41c06216 	blt	r8,r7,1000b320 <__adddf3+0x7f4>
1000b198:	020007c4 	movi	r8,31
1000b19c:	41c07016 	blt	r8,r7,1000b360 <__adddf3+0x834>
1000b1a0:	02000804 	movi	r8,32
1000b1a4:	41d1c83a 	sub	r8,r8,r7
1000b1a8:	2a14983a 	sll	r10,r5,r8
1000b1ac:	81d2d83a 	srl	r9,r16,r7
1000b1b0:	8210983a 	sll	r8,r16,r8
1000b1b4:	29cad83a 	srl	r5,r5,r7
1000b1b8:	5252b03a 	or	r9,r10,r9
1000b1bc:	400ec03a 	cmpne	r7,r8,zero
1000b1c0:	49e0b03a 	or	r16,r9,r7
1000b1c4:	81a1883a 	add	r16,r16,r6
1000b1c8:	2885883a 	add	r2,r5,r2
1000b1cc:	818d803a 	cmpltu	r6,r16,r6
1000b1d0:	118b883a 	add	r5,r2,r6
1000b1d4:	2023883a 	mov	r17,r4
1000b1d8:	003eef06 	br	1000ad98 <__alt_data_end+0xf800ad98>
1000b1dc:	1186b03a 	or	r3,r2,r6
1000b1e0:	183e7126 	beq	r3,zero,1000aba8 <__alt_data_end+0xf800aba8>
1000b1e4:	8187c83a 	sub	r3,r16,r6
1000b1e8:	80d1803a 	cmpltu	r8,r16,r3
1000b1ec:	2889c83a 	sub	r4,r5,r2
1000b1f0:	2209c83a 	sub	r4,r4,r8
1000b1f4:	2200202c 	andhi	r8,r4,128
1000b1f8:	40005426 	beq	r8,zero,1000b34c <__adddf3+0x820>
1000b1fc:	3421c83a 	sub	r16,r6,r16
1000b200:	114bc83a 	sub	r5,r2,r5
1000b204:	340d803a 	cmpltu	r6,r6,r16
1000b208:	298bc83a 	sub	r5,r5,r6
1000b20c:	3825883a 	mov	r18,r7
1000b210:	003e6506 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b214:	1186b03a 	or	r3,r2,r6
1000b218:	18002b26 	beq	r3,zero,1000b2c8 <__adddf3+0x79c>
1000b21c:	2806d0fa 	srli	r3,r5,3
1000b220:	8020d0fa 	srli	r16,r16,3
1000b224:	280a977a 	slli	r5,r5,29
1000b228:	1900022c 	andhi	r4,r3,8
1000b22c:	2c20b03a 	or	r16,r5,r16
1000b230:	20000826 	beq	r4,zero,1000b254 <__adddf3+0x728>
1000b234:	1008d0fa 	srli	r4,r2,3
1000b238:	2140022c 	andhi	r5,r4,8
1000b23c:	2800051e 	bne	r5,zero,1000b254 <__adddf3+0x728>
1000b240:	300cd0fa 	srli	r6,r6,3
1000b244:	1004977a 	slli	r2,r2,29
1000b248:	2007883a 	mov	r3,r4
1000b24c:	3825883a 	mov	r18,r7
1000b250:	11a0b03a 	or	r16,r2,r6
1000b254:	800ad77a 	srli	r5,r16,29
1000b258:	180690fa 	slli	r3,r3,3
1000b25c:	802090fa 	slli	r16,r16,3
1000b260:	0441ffc4 	movi	r17,2047
1000b264:	28cab03a 	or	r5,r5,r3
1000b268:	003e4f06 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b26c:	0201ffc4 	movi	r8,2047
1000b270:	223fc71e 	bne	r4,r8,1000b190 <__alt_data_end+0xf800b190>
1000b274:	100b883a 	mov	r5,r2
1000b278:	3021883a 	mov	r16,r6
1000b27c:	2023883a 	mov	r17,r4
1000b280:	003e4906 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b284:	18002a26 	beq	r3,zero,1000b330 <__adddf3+0x804>
1000b288:	1186b03a 	or	r3,r2,r6
1000b28c:	18000e26 	beq	r3,zero,1000b2c8 <__adddf3+0x79c>
1000b290:	2806d0fa 	srli	r3,r5,3
1000b294:	8020d0fa 	srli	r16,r16,3
1000b298:	280a977a 	slli	r5,r5,29
1000b29c:	1900022c 	andhi	r4,r3,8
1000b2a0:	2c20b03a 	or	r16,r5,r16
1000b2a4:	203feb26 	beq	r4,zero,1000b254 <__alt_data_end+0xf800b254>
1000b2a8:	1008d0fa 	srli	r4,r2,3
1000b2ac:	2140022c 	andhi	r5,r4,8
1000b2b0:	283fe81e 	bne	r5,zero,1000b254 <__alt_data_end+0xf800b254>
1000b2b4:	300cd0fa 	srli	r6,r6,3
1000b2b8:	1004977a 	slli	r2,r2,29
1000b2bc:	2007883a 	mov	r3,r4
1000b2c0:	11a0b03a 	or	r16,r2,r6
1000b2c4:	003fe306 	br	1000b254 <__alt_data_end+0xf800b254>
1000b2c8:	0441ffc4 	movi	r17,2047
1000b2cc:	003e3606 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b2d0:	0005883a 	mov	r2,zero
1000b2d4:	003f8a06 	br	1000b100 <__alt_data_end+0xf800b100>
1000b2d8:	1a3ff804 	addi	r8,r3,-32
1000b2dc:	02400804 	movi	r9,32
1000b2e0:	2a10d83a 	srl	r8,r5,r8
1000b2e4:	1a402a26 	beq	r3,r9,1000b390 <__adddf3+0x864>
1000b2e8:	02401004 	movi	r9,64
1000b2ec:	48c7c83a 	sub	r3,r9,r3
1000b2f0:	28ca983a 	sll	r5,r5,r3
1000b2f4:	2c20b03a 	or	r16,r5,r16
1000b2f8:	8020c03a 	cmpne	r16,r16,zero
1000b2fc:	8220b03a 	or	r16,r16,r8
1000b300:	000b883a 	mov	r5,zero
1000b304:	003f2b06 	br	1000afb4 <__alt_data_end+0xf800afb4>
1000b308:	0007883a 	mov	r3,zero
1000b30c:	01402034 	movhi	r5,128
1000b310:	297fffc4 	addi	r5,r5,-1
1000b314:	043ffe04 	movi	r16,-8
1000b318:	0441ffc4 	movi	r17,2047
1000b31c:	003e8106 	br	1000ad24 <__alt_data_end+0xf800ad24>
1000b320:	2c20b03a 	or	r16,r5,r16
1000b324:	8020c03a 	cmpne	r16,r16,zero
1000b328:	000b883a 	mov	r5,zero
1000b32c:	003fa506 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b330:	100b883a 	mov	r5,r2
1000b334:	3021883a 	mov	r16,r6
1000b338:	0441ffc4 	movi	r17,2047
1000b33c:	003e1a06 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b340:	100b883a 	mov	r5,r2
1000b344:	3021883a 	mov	r16,r6
1000b348:	003e1706 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b34c:	20c4b03a 	or	r2,r4,r3
1000b350:	103f6026 	beq	r2,zero,1000b0d4 <__alt_data_end+0xf800b0d4>
1000b354:	200b883a 	mov	r5,r4
1000b358:	1821883a 	mov	r16,r3
1000b35c:	003e1206 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b360:	3a3ff804 	addi	r8,r7,-32
1000b364:	02400804 	movi	r9,32
1000b368:	2a10d83a 	srl	r8,r5,r8
1000b36c:	3a400c26 	beq	r7,r9,1000b3a0 <__adddf3+0x874>
1000b370:	02401004 	movi	r9,64
1000b374:	49cfc83a 	sub	r7,r9,r7
1000b378:	29ca983a 	sll	r5,r5,r7
1000b37c:	2c20b03a 	or	r16,r5,r16
1000b380:	8020c03a 	cmpne	r16,r16,zero
1000b384:	8220b03a 	or	r16,r16,r8
1000b388:	000b883a 	mov	r5,zero
1000b38c:	003f8d06 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b390:	000b883a 	mov	r5,zero
1000b394:	003fd706 	br	1000b2f4 <__alt_data_end+0xf800b2f4>
1000b398:	3021883a 	mov	r16,r6
1000b39c:	003e0206 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b3a0:	000b883a 	mov	r5,zero
1000b3a4:	003ff506 	br	1000b37c <__alt_data_end+0xf800b37c>

1000b3a8 <__divdf3>:
1000b3a8:	defff004 	addi	sp,sp,-64
1000b3ac:	dd000a15 	stw	r20,40(sp)
1000b3b0:	2828d53a 	srli	r20,r5,20
1000b3b4:	dd800c15 	stw	r22,48(sp)
1000b3b8:	282cd7fa 	srli	r22,r5,31
1000b3bc:	df000e15 	stw	fp,56(sp)
1000b3c0:	dcc00915 	stw	r19,36(sp)
1000b3c4:	dc800815 	stw	r18,32(sp)
1000b3c8:	04c00434 	movhi	r19,16
1000b3cc:	9cffffc4 	addi	r19,r19,-1
1000b3d0:	dfc00f15 	stw	ra,60(sp)
1000b3d4:	ddc00d15 	stw	r23,52(sp)
1000b3d8:	dd400b15 	stw	r21,44(sp)
1000b3dc:	dc400715 	stw	r17,28(sp)
1000b3e0:	dc000615 	stw	r16,24(sp)
1000b3e4:	a501ffcc 	andi	r20,r20,2047
1000b3e8:	2025883a 	mov	r18,r4
1000b3ec:	2ce6703a 	and	r19,r5,r19
1000b3f0:	b7003fcc 	andi	fp,r22,255
1000b3f4:	a0006a26 	beq	r20,zero,1000b5a0 <__divdf3+0x1f8>
1000b3f8:	0081ffc4 	movi	r2,2047
1000b3fc:	2021883a 	mov	r16,r4
1000b400:	a0803726 	beq	r20,r2,1000b4e0 <__divdf3+0x138>
1000b404:	98800434 	orhi	r2,r19,16
1000b408:	100490fa 	slli	r2,r2,3
1000b40c:	2026d77a 	srli	r19,r4,29
1000b410:	202090fa 	slli	r16,r4,3
1000b414:	a53f0044 	addi	r20,r20,-1023
1000b418:	14e6b03a 	or	r19,r2,r19
1000b41c:	002b883a 	mov	r21,zero
1000b420:	0013883a 	mov	r9,zero
1000b424:	3804d53a 	srli	r2,r7,20
1000b428:	382ed7fa 	srli	r23,r7,31
1000b42c:	04400434 	movhi	r17,16
1000b430:	8c7fffc4 	addi	r17,r17,-1
1000b434:	1081ffcc 	andi	r2,r2,2047
1000b438:	3025883a 	mov	r18,r6
1000b43c:	3c62703a 	and	r17,r7,r17
1000b440:	ba803fcc 	andi	r10,r23,255
1000b444:	10007326 	beq	r2,zero,1000b614 <__divdf3+0x26c>
1000b448:	0101ffc4 	movi	r4,2047
1000b44c:	11006b26 	beq	r2,r4,1000b5fc <__divdf3+0x254>
1000b450:	89000434 	orhi	r4,r17,16
1000b454:	200890fa 	slli	r4,r4,3
1000b458:	3022d77a 	srli	r17,r6,29
1000b45c:	302490fa 	slli	r18,r6,3
1000b460:	10bf0044 	addi	r2,r2,-1023
1000b464:	2462b03a 	or	r17,r4,r17
1000b468:	000f883a 	mov	r7,zero
1000b46c:	b5caf03a 	xor	r5,r22,r23
1000b470:	3d48b03a 	or	r4,r7,r21
1000b474:	00c003c4 	movi	r3,15
1000b478:	2811883a 	mov	r8,r5
1000b47c:	2d403fcc 	andi	r21,r5,255
1000b480:	19009436 	bltu	r3,r4,1000b6d4 <__divdf3+0x32c>
1000b484:	2109883a 	add	r4,r4,r4
1000b488:	00c40074 	movhi	r3,4097
1000b48c:	18ed2804 	addi	r3,r3,-19296
1000b490:	2109883a 	add	r4,r4,r4
1000b494:	20c9883a 	add	r4,r4,r3
1000b498:	20c00017 	ldw	r3,0(r4)
1000b49c:	1800683a 	jmp	r3
1000b4a0:	1000b6d4 	ori	zero,r2,731
1000b4a4:	1000b53c 	xorhi	zero,r2,724
1000b4a8:	1000b6c4 	addi	zero,r2,731
1000b4ac:	1000b50c 	andi	zero,r2,724
1000b4b0:	1000b6c4 	addi	zero,r2,731
1000b4b4:	1000b6ac 	andhi	zero,r2,730
1000b4b8:	1000b6c4 	addi	zero,r2,731
1000b4bc:	1000b50c 	andi	zero,r2,724
1000b4c0:	1000b53c 	xorhi	zero,r2,724
1000b4c4:	1000b53c 	xorhi	zero,r2,724
1000b4c8:	1000b6ac 	andhi	zero,r2,730
1000b4cc:	1000b50c 	andi	zero,r2,724
1000b4d0:	1000b4fc 	xorhi	zero,r2,723
1000b4d4:	1000b4fc 	xorhi	zero,r2,723
1000b4d8:	1000b4fc 	xorhi	zero,r2,723
1000b4dc:	1000ba64 	muli	zero,r2,745
1000b4e0:	9904b03a 	or	r2,r19,r4
1000b4e4:	10006e1e 	bne	r2,zero,1000b6a0 <__divdf3+0x2f8>
1000b4e8:	05400204 	movi	r21,8
1000b4ec:	0027883a 	mov	r19,zero
1000b4f0:	0021883a 	mov	r16,zero
1000b4f4:	02400084 	movi	r9,2
1000b4f8:	003fca06 	br	1000b424 <__alt_data_end+0xf800b424>
1000b4fc:	9823883a 	mov	r17,r19
1000b500:	8025883a 	mov	r18,r16
1000b504:	e015883a 	mov	r10,fp
1000b508:	480f883a 	mov	r7,r9
1000b50c:	00800084 	movi	r2,2
1000b510:	38800926 	beq	r7,r2,1000b538 <__divdf3+0x190>
1000b514:	008000c4 	movi	r2,3
1000b518:	38820226 	beq	r7,r2,1000bd24 <__divdf3+0x97c>
1000b51c:	00800044 	movi	r2,1
1000b520:	3881b81e 	bne	r7,r2,1000bc04 <__divdf3+0x85c>
1000b524:	5011883a 	mov	r8,r10
1000b528:	0005883a 	mov	r2,zero
1000b52c:	0027883a 	mov	r19,zero
1000b530:	0021883a 	mov	r16,zero
1000b534:	00000506 	br	1000b54c <__divdf3+0x1a4>
1000b538:	502b883a 	mov	r21,r10
1000b53c:	aa00004c 	andi	r8,r21,1
1000b540:	0081ffc4 	movi	r2,2047
1000b544:	0027883a 	mov	r19,zero
1000b548:	0021883a 	mov	r16,zero
1000b54c:	1004953a 	slli	r2,r2,20
1000b550:	42003fcc 	andi	r8,r8,255
1000b554:	401097fa 	slli	r8,r8,31
1000b558:	00c00434 	movhi	r3,16
1000b55c:	18ffffc4 	addi	r3,r3,-1
1000b560:	98e6703a 	and	r19,r19,r3
1000b564:	9886b03a 	or	r3,r19,r2
1000b568:	1a06b03a 	or	r3,r3,r8
1000b56c:	8005883a 	mov	r2,r16
1000b570:	dfc00f17 	ldw	ra,60(sp)
1000b574:	df000e17 	ldw	fp,56(sp)
1000b578:	ddc00d17 	ldw	r23,52(sp)
1000b57c:	dd800c17 	ldw	r22,48(sp)
1000b580:	dd400b17 	ldw	r21,44(sp)
1000b584:	dd000a17 	ldw	r20,40(sp)
1000b588:	dcc00917 	ldw	r19,36(sp)
1000b58c:	dc800817 	ldw	r18,32(sp)
1000b590:	dc400717 	ldw	r17,28(sp)
1000b594:	dc000617 	ldw	r16,24(sp)
1000b598:	dec01004 	addi	sp,sp,64
1000b59c:	f800283a 	ret
1000b5a0:	9904b03a 	or	r2,r19,r4
1000b5a4:	10003926 	beq	r2,zero,1000b68c <__divdf3+0x2e4>
1000b5a8:	98015326 	beq	r19,zero,1000baf8 <__divdf3+0x750>
1000b5ac:	9809883a 	mov	r4,r19
1000b5b0:	d9800215 	stw	r6,8(sp)
1000b5b4:	d9c00515 	stw	r7,20(sp)
1000b5b8:	000d2040 	call	1000d204 <__clzsi2>
1000b5bc:	d9800217 	ldw	r6,8(sp)
1000b5c0:	d9c00517 	ldw	r7,20(sp)
1000b5c4:	00c009c4 	movi	r3,39
1000b5c8:	18814716 	blt	r3,r2,1000bae8 <__divdf3+0x740>
1000b5cc:	01400a04 	movi	r5,40
1000b5d0:	143ffe04 	addi	r16,r2,-8
1000b5d4:	288bc83a 	sub	r5,r5,r2
1000b5d8:	9c26983a 	sll	r19,r19,r16
1000b5dc:	914ad83a 	srl	r5,r18,r5
1000b5e0:	9420983a 	sll	r16,r18,r16
1000b5e4:	2ce6b03a 	or	r19,r5,r19
1000b5e8:	053f0344 	movi	r20,-1011
1000b5ec:	a0a9c83a 	sub	r20,r20,r2
1000b5f0:	002b883a 	mov	r21,zero
1000b5f4:	0013883a 	mov	r9,zero
1000b5f8:	003f8a06 	br	1000b424 <__alt_data_end+0xf800b424>
1000b5fc:	8988b03a 	or	r4,r17,r6
1000b600:	2000201e 	bne	r4,zero,1000b684 <__divdf3+0x2dc>
1000b604:	0023883a 	mov	r17,zero
1000b608:	0025883a 	mov	r18,zero
1000b60c:	01c00084 	movi	r7,2
1000b610:	003f9606 	br	1000b46c <__alt_data_end+0xf800b46c>
1000b614:	8988b03a 	or	r4,r17,r6
1000b618:	20001626 	beq	r4,zero,1000b674 <__divdf3+0x2cc>
1000b61c:	88012826 	beq	r17,zero,1000bac0 <__divdf3+0x718>
1000b620:	8809883a 	mov	r4,r17
1000b624:	d9800215 	stw	r6,8(sp)
1000b628:	da400315 	stw	r9,12(sp)
1000b62c:	da800415 	stw	r10,16(sp)
1000b630:	000d2040 	call	1000d204 <__clzsi2>
1000b634:	d9800217 	ldw	r6,8(sp)
1000b638:	da400317 	ldw	r9,12(sp)
1000b63c:	da800417 	ldw	r10,16(sp)
1000b640:	010009c4 	movi	r4,39
1000b644:	20811a16 	blt	r4,r2,1000bab0 <__divdf3+0x708>
1000b648:	01000a04 	movi	r4,40
1000b64c:	14bffe04 	addi	r18,r2,-8
1000b650:	2089c83a 	sub	r4,r4,r2
1000b654:	8ca2983a 	sll	r17,r17,r18
1000b658:	3108d83a 	srl	r4,r6,r4
1000b65c:	34a4983a 	sll	r18,r6,r18
1000b660:	2462b03a 	or	r17,r4,r17
1000b664:	013f0344 	movi	r4,-1011
1000b668:	2085c83a 	sub	r2,r4,r2
1000b66c:	000f883a 	mov	r7,zero
1000b670:	003f7e06 	br	1000b46c <__alt_data_end+0xf800b46c>
1000b674:	0023883a 	mov	r17,zero
1000b678:	0025883a 	mov	r18,zero
1000b67c:	01c00044 	movi	r7,1
1000b680:	003f7a06 	br	1000b46c <__alt_data_end+0xf800b46c>
1000b684:	01c000c4 	movi	r7,3
1000b688:	003f7806 	br	1000b46c <__alt_data_end+0xf800b46c>
1000b68c:	05400104 	movi	r21,4
1000b690:	0027883a 	mov	r19,zero
1000b694:	0021883a 	mov	r16,zero
1000b698:	02400044 	movi	r9,1
1000b69c:	003f6106 	br	1000b424 <__alt_data_end+0xf800b424>
1000b6a0:	05400304 	movi	r21,12
1000b6a4:	024000c4 	movi	r9,3
1000b6a8:	003f5e06 	br	1000b424 <__alt_data_end+0xf800b424>
1000b6ac:	0011883a 	mov	r8,zero
1000b6b0:	04c00434 	movhi	r19,16
1000b6b4:	9cffffc4 	addi	r19,r19,-1
1000b6b8:	043fffc4 	movi	r16,-1
1000b6bc:	0081ffc4 	movi	r2,2047
1000b6c0:	003fa206 	br	1000b54c <__alt_data_end+0xf800b54c>
1000b6c4:	0005883a 	mov	r2,zero
1000b6c8:	0027883a 	mov	r19,zero
1000b6cc:	0021883a 	mov	r16,zero
1000b6d0:	003f9e06 	br	1000b54c <__alt_data_end+0xf800b54c>
1000b6d4:	a085c83a 	sub	r2,r20,r2
1000b6d8:	d8800115 	stw	r2,4(sp)
1000b6dc:	8cc11b36 	bltu	r17,r19,1000bb4c <__divdf3+0x7a4>
1000b6e0:	9c411926 	beq	r19,r17,1000bb48 <__divdf3+0x7a0>
1000b6e4:	d8c00117 	ldw	r3,4(sp)
1000b6e8:	002d883a 	mov	r22,zero
1000b6ec:	18ffffc4 	addi	r3,r3,-1
1000b6f0:	d8c00115 	stw	r3,4(sp)
1000b6f4:	9006d63a 	srli	r3,r18,24
1000b6f8:	8822923a 	slli	r17,r17,8
1000b6fc:	9024923a 	slli	r18,r18,8
1000b700:	9809883a 	mov	r4,r19
1000b704:	1c6eb03a 	or	r23,r3,r17
1000b708:	b828d43a 	srli	r20,r23,16
1000b70c:	dc800015 	stw	r18,0(sp)
1000b710:	bcbfffcc 	andi	r18,r23,65535
1000b714:	a00b883a 	mov	r5,r20
1000b718:	000aaf40 	call	1000aaf4 <__udivsi3>
1000b71c:	1009883a 	mov	r4,r2
1000b720:	900b883a 	mov	r5,r18
1000b724:	1039883a 	mov	fp,r2
1000b728:	000ab040 	call	1000ab04 <__mulsi3>
1000b72c:	9809883a 	mov	r4,r19
1000b730:	a00b883a 	mov	r5,r20
1000b734:	1023883a 	mov	r17,r2
1000b738:	000aafc0 	call	1000aafc <__umodsi3>
1000b73c:	1004943a 	slli	r2,r2,16
1000b740:	8008d43a 	srli	r4,r16,16
1000b744:	110ab03a 	or	r5,r2,r4
1000b748:	2c40062e 	bgeu	r5,r17,1000b764 <__divdf3+0x3bc>
1000b74c:	2dcb883a 	add	r5,r5,r23
1000b750:	e0bfffc4 	addi	r2,fp,-1
1000b754:	2dc11136 	bltu	r5,r23,1000bb9c <__divdf3+0x7f4>
1000b758:	2c41102e 	bgeu	r5,r17,1000bb9c <__divdf3+0x7f4>
1000b75c:	e73fff84 	addi	fp,fp,-2
1000b760:	2dcb883a 	add	r5,r5,r23
1000b764:	2c67c83a 	sub	r19,r5,r17
1000b768:	9809883a 	mov	r4,r19
1000b76c:	a00b883a 	mov	r5,r20
1000b770:	000aaf40 	call	1000aaf4 <__udivsi3>
1000b774:	1009883a 	mov	r4,r2
1000b778:	900b883a 	mov	r5,r18
1000b77c:	1023883a 	mov	r17,r2
1000b780:	000ab040 	call	1000ab04 <__mulsi3>
1000b784:	9809883a 	mov	r4,r19
1000b788:	a00b883a 	mov	r5,r20
1000b78c:	d8800215 	stw	r2,8(sp)
1000b790:	000aafc0 	call	1000aafc <__umodsi3>
1000b794:	1004943a 	slli	r2,r2,16
1000b798:	da000217 	ldw	r8,8(sp)
1000b79c:	843fffcc 	andi	r16,r16,65535
1000b7a0:	140eb03a 	or	r7,r2,r16
1000b7a4:	3a00062e 	bgeu	r7,r8,1000b7c0 <__divdf3+0x418>
1000b7a8:	3dcf883a 	add	r7,r7,r23
1000b7ac:	88bfffc4 	addi	r2,r17,-1
1000b7b0:	3dc0f836 	bltu	r7,r23,1000bb94 <__divdf3+0x7ec>
1000b7b4:	3a00f72e 	bgeu	r7,r8,1000bb94 <__divdf3+0x7ec>
1000b7b8:	8c7fff84 	addi	r17,r17,-2
1000b7bc:	3dcf883a 	add	r7,r7,r23
1000b7c0:	e004943a 	slli	r2,fp,16
1000b7c4:	d8c00017 	ldw	r3,0(sp)
1000b7c8:	3a0fc83a 	sub	r7,r7,r8
1000b7cc:	88a2b03a 	or	r17,r17,r2
1000b7d0:	1f3fffcc 	andi	fp,r3,65535
1000b7d4:	8a7fffcc 	andi	r9,r17,65535
1000b7d8:	4809883a 	mov	r4,r9
1000b7dc:	e00b883a 	mov	r5,fp
1000b7e0:	1826d43a 	srli	r19,r3,16
1000b7e4:	d9c00515 	stw	r7,20(sp)
1000b7e8:	da400315 	stw	r9,12(sp)
1000b7ec:	000ab040 	call	1000ab04 <__mulsi3>
1000b7f0:	da400317 	ldw	r9,12(sp)
1000b7f4:	8820d43a 	srli	r16,r17,16
1000b7f8:	980b883a 	mov	r5,r19
1000b7fc:	4809883a 	mov	r4,r9
1000b800:	d8800215 	stw	r2,8(sp)
1000b804:	000ab040 	call	1000ab04 <__mulsi3>
1000b808:	8009883a 	mov	r4,r16
1000b80c:	e00b883a 	mov	r5,fp
1000b810:	d8800415 	stw	r2,16(sp)
1000b814:	000ab040 	call	1000ab04 <__mulsi3>
1000b818:	8009883a 	mov	r4,r16
1000b81c:	980b883a 	mov	r5,r19
1000b820:	d8800315 	stw	r2,12(sp)
1000b824:	000ab040 	call	1000ab04 <__mulsi3>
1000b828:	da000217 	ldw	r8,8(sp)
1000b82c:	da400317 	ldw	r9,12(sp)
1000b830:	da800417 	ldw	r10,16(sp)
1000b834:	100b883a 	mov	r5,r2
1000b838:	4004d43a 	srli	r2,r8,16
1000b83c:	4a89883a 	add	r4,r9,r10
1000b840:	d9c00517 	ldw	r7,20(sp)
1000b844:	2089883a 	add	r4,r4,r2
1000b848:	2240022e 	bgeu	r4,r9,1000b854 <__divdf3+0x4ac>
1000b84c:	00800074 	movhi	r2,1
1000b850:	288b883a 	add	r5,r5,r2
1000b854:	2004d43a 	srli	r2,r4,16
1000b858:	2020943a 	slli	r16,r4,16
1000b85c:	423fffcc 	andi	r8,r8,65535
1000b860:	288b883a 	add	r5,r5,r2
1000b864:	8221883a 	add	r16,r16,r8
1000b868:	3940ab36 	bltu	r7,r5,1000bb18 <__divdf3+0x770>
1000b86c:	3940a926 	beq	r7,r5,1000bb14 <__divdf3+0x76c>
1000b870:	394bc83a 	sub	r5,r7,r5
1000b874:	b421c83a 	sub	r16,r22,r16
1000b878:	b42d803a 	cmpltu	r22,r22,r16
1000b87c:	2dadc83a 	sub	r22,r5,r22
1000b880:	b5c0da26 	beq	r22,r23,1000bbec <__divdf3+0x844>
1000b884:	b009883a 	mov	r4,r22
1000b888:	a00b883a 	mov	r5,r20
1000b88c:	000aaf40 	call	1000aaf4 <__udivsi3>
1000b890:	1009883a 	mov	r4,r2
1000b894:	900b883a 	mov	r5,r18
1000b898:	d8800215 	stw	r2,8(sp)
1000b89c:	000ab040 	call	1000ab04 <__mulsi3>
1000b8a0:	b009883a 	mov	r4,r22
1000b8a4:	a00b883a 	mov	r5,r20
1000b8a8:	d8800515 	stw	r2,20(sp)
1000b8ac:	000aafc0 	call	1000aafc <__umodsi3>
1000b8b0:	1004943a 	slli	r2,r2,16
1000b8b4:	8008d43a 	srli	r4,r16,16
1000b8b8:	d9c00517 	ldw	r7,20(sp)
1000b8bc:	da000217 	ldw	r8,8(sp)
1000b8c0:	110ab03a 	or	r5,r2,r4
1000b8c4:	29c0062e 	bgeu	r5,r7,1000b8e0 <__divdf3+0x538>
1000b8c8:	2dcb883a 	add	r5,r5,r23
1000b8cc:	40bfffc4 	addi	r2,r8,-1
1000b8d0:	2dc0ca36 	bltu	r5,r23,1000bbfc <__divdf3+0x854>
1000b8d4:	29c0c92e 	bgeu	r5,r7,1000bbfc <__divdf3+0x854>
1000b8d8:	423fff84 	addi	r8,r8,-2
1000b8dc:	2dcb883a 	add	r5,r5,r23
1000b8e0:	29cfc83a 	sub	r7,r5,r7
1000b8e4:	3809883a 	mov	r4,r7
1000b8e8:	a00b883a 	mov	r5,r20
1000b8ec:	da000215 	stw	r8,8(sp)
1000b8f0:	d9c00515 	stw	r7,20(sp)
1000b8f4:	000aaf40 	call	1000aaf4 <__udivsi3>
1000b8f8:	900b883a 	mov	r5,r18
1000b8fc:	1009883a 	mov	r4,r2
1000b900:	102d883a 	mov	r22,r2
1000b904:	000ab040 	call	1000ab04 <__mulsi3>
1000b908:	d9c00517 	ldw	r7,20(sp)
1000b90c:	a00b883a 	mov	r5,r20
1000b910:	1025883a 	mov	r18,r2
1000b914:	3809883a 	mov	r4,r7
1000b918:	000aafc0 	call	1000aafc <__umodsi3>
1000b91c:	1004943a 	slli	r2,r2,16
1000b920:	843fffcc 	andi	r16,r16,65535
1000b924:	da000217 	ldw	r8,8(sp)
1000b928:	140eb03a 	or	r7,r2,r16
1000b92c:	3c80062e 	bgeu	r7,r18,1000b948 <__divdf3+0x5a0>
1000b930:	3dcf883a 	add	r7,r7,r23
1000b934:	b0bfffc4 	addi	r2,r22,-1
1000b938:	3dc0ae36 	bltu	r7,r23,1000bbf4 <__divdf3+0x84c>
1000b93c:	3c80ad2e 	bgeu	r7,r18,1000bbf4 <__divdf3+0x84c>
1000b940:	b5bfff84 	addi	r22,r22,-2
1000b944:	3dcf883a 	add	r7,r7,r23
1000b948:	4010943a 	slli	r8,r8,16
1000b94c:	3ca9c83a 	sub	r20,r7,r18
1000b950:	e00b883a 	mov	r5,fp
1000b954:	b224b03a 	or	r18,r22,r8
1000b958:	91ffffcc 	andi	r7,r18,65535
1000b95c:	3809883a 	mov	r4,r7
1000b960:	d9c00515 	stw	r7,20(sp)
1000b964:	000ab040 	call	1000ab04 <__mulsi3>
1000b968:	d9c00517 	ldw	r7,20(sp)
1000b96c:	9020d43a 	srli	r16,r18,16
1000b970:	980b883a 	mov	r5,r19
1000b974:	3809883a 	mov	r4,r7
1000b978:	102d883a 	mov	r22,r2
1000b97c:	000ab040 	call	1000ab04 <__mulsi3>
1000b980:	e00b883a 	mov	r5,fp
1000b984:	8009883a 	mov	r4,r16
1000b988:	d8800515 	stw	r2,20(sp)
1000b98c:	000ab040 	call	1000ab04 <__mulsi3>
1000b990:	8009883a 	mov	r4,r16
1000b994:	980b883a 	mov	r5,r19
1000b998:	1039883a 	mov	fp,r2
1000b99c:	000ab040 	call	1000ab04 <__mulsi3>
1000b9a0:	d9c00517 	ldw	r7,20(sp)
1000b9a4:	100b883a 	mov	r5,r2
1000b9a8:	b004d43a 	srli	r2,r22,16
1000b9ac:	e1c9883a 	add	r4,fp,r7
1000b9b0:	2089883a 	add	r4,r4,r2
1000b9b4:	2700022e 	bgeu	r4,fp,1000b9c0 <__divdf3+0x618>
1000b9b8:	00800074 	movhi	r2,1
1000b9bc:	288b883a 	add	r5,r5,r2
1000b9c0:	2004d43a 	srli	r2,r4,16
1000b9c4:	2008943a 	slli	r4,r4,16
1000b9c8:	b5bfffcc 	andi	r22,r22,65535
1000b9cc:	288b883a 	add	r5,r5,r2
1000b9d0:	25ad883a 	add	r22,r4,r22
1000b9d4:	a140632e 	bgeu	r20,r5,1000bb64 <__divdf3+0x7bc>
1000b9d8:	a5e9883a 	add	r20,r20,r23
1000b9dc:	90bfffc4 	addi	r2,r18,-1
1000b9e0:	a5c0702e 	bgeu	r20,r23,1000bba4 <__divdf3+0x7fc>
1000b9e4:	1025883a 	mov	r18,r2
1000b9e8:	a1406126 	beq	r20,r5,1000bb70 <__divdf3+0x7c8>
1000b9ec:	94800054 	ori	r18,r18,1
1000b9f0:	d8c00117 	ldw	r3,4(sp)
1000b9f4:	1880ffc4 	addi	r2,r3,1023
1000b9f8:	0080720e 	bge	zero,r2,1000bbc4 <__divdf3+0x81c>
1000b9fc:	90c001cc 	andi	r3,r18,7
1000ba00:	18000726 	beq	r3,zero,1000ba20 <__divdf3+0x678>
1000ba04:	910003cc 	andi	r4,r18,15
1000ba08:	00c00104 	movi	r3,4
1000ba0c:	20c00426 	beq	r4,r3,1000ba20 <__divdf3+0x678>
1000ba10:	90c7883a 	add	r3,r18,r3
1000ba14:	1ca5803a 	cmpltu	r18,r3,r18
1000ba18:	8ca3883a 	add	r17,r17,r18
1000ba1c:	1825883a 	mov	r18,r3
1000ba20:	88c0402c 	andhi	r3,r17,256
1000ba24:	18000526 	beq	r3,zero,1000ba3c <__divdf3+0x694>
1000ba28:	d8c00117 	ldw	r3,4(sp)
1000ba2c:	00bfc034 	movhi	r2,65280
1000ba30:	10bfffc4 	addi	r2,r2,-1
1000ba34:	88a2703a 	and	r17,r17,r2
1000ba38:	18810004 	addi	r2,r3,1024
1000ba3c:	00c1ff84 	movi	r3,2046
1000ba40:	18bebe16 	blt	r3,r2,1000b53c <__alt_data_end+0xf800b53c>
1000ba44:	8820977a 	slli	r16,r17,29
1000ba48:	9024d0fa 	srli	r18,r18,3
1000ba4c:	8822927a 	slli	r17,r17,9
1000ba50:	1081ffcc 	andi	r2,r2,2047
1000ba54:	84a0b03a 	or	r16,r16,r18
1000ba58:	8826d33a 	srli	r19,r17,12
1000ba5c:	aa00004c 	andi	r8,r21,1
1000ba60:	003eba06 	br	1000b54c <__alt_data_end+0xf800b54c>
1000ba64:	9880022c 	andhi	r2,r19,8
1000ba68:	10000a26 	beq	r2,zero,1000ba94 <__divdf3+0x6ec>
1000ba6c:	8880022c 	andhi	r2,r17,8
1000ba70:	1000081e 	bne	r2,zero,1000ba94 <__divdf3+0x6ec>
1000ba74:	00800434 	movhi	r2,16
1000ba78:	10bfffc4 	addi	r2,r2,-1
1000ba7c:	8cc00234 	orhi	r19,r17,8
1000ba80:	98a6703a 	and	r19,r19,r2
1000ba84:	b811883a 	mov	r8,r23
1000ba88:	9021883a 	mov	r16,r18
1000ba8c:	0081ffc4 	movi	r2,2047
1000ba90:	003eae06 	br	1000b54c <__alt_data_end+0xf800b54c>
1000ba94:	00800434 	movhi	r2,16
1000ba98:	10bfffc4 	addi	r2,r2,-1
1000ba9c:	9cc00234 	orhi	r19,r19,8
1000baa0:	98a6703a 	and	r19,r19,r2
1000baa4:	b011883a 	mov	r8,r22
1000baa8:	0081ffc4 	movi	r2,2047
1000baac:	003ea706 	br	1000b54c <__alt_data_end+0xf800b54c>
1000bab0:	147ff604 	addi	r17,r2,-40
1000bab4:	3462983a 	sll	r17,r6,r17
1000bab8:	0025883a 	mov	r18,zero
1000babc:	003ee906 	br	1000b664 <__alt_data_end+0xf800b664>
1000bac0:	3009883a 	mov	r4,r6
1000bac4:	d9800215 	stw	r6,8(sp)
1000bac8:	da400315 	stw	r9,12(sp)
1000bacc:	da800415 	stw	r10,16(sp)
1000bad0:	000d2040 	call	1000d204 <__clzsi2>
1000bad4:	10800804 	addi	r2,r2,32
1000bad8:	da800417 	ldw	r10,16(sp)
1000badc:	da400317 	ldw	r9,12(sp)
1000bae0:	d9800217 	ldw	r6,8(sp)
1000bae4:	003ed606 	br	1000b640 <__alt_data_end+0xf800b640>
1000bae8:	14fff604 	addi	r19,r2,-40
1000baec:	94e6983a 	sll	r19,r18,r19
1000baf0:	0021883a 	mov	r16,zero
1000baf4:	003ebc06 	br	1000b5e8 <__alt_data_end+0xf800b5e8>
1000baf8:	d9800215 	stw	r6,8(sp)
1000bafc:	d9c00515 	stw	r7,20(sp)
1000bb00:	000d2040 	call	1000d204 <__clzsi2>
1000bb04:	10800804 	addi	r2,r2,32
1000bb08:	d9c00517 	ldw	r7,20(sp)
1000bb0c:	d9800217 	ldw	r6,8(sp)
1000bb10:	003eac06 	br	1000b5c4 <__alt_data_end+0xf800b5c4>
1000bb14:	b400292e 	bgeu	r22,r16,1000bbbc <__divdf3+0x814>
1000bb18:	d8c00017 	ldw	r3,0(sp)
1000bb1c:	b0ed883a 	add	r22,r22,r3
1000bb20:	b0c5803a 	cmpltu	r2,r22,r3
1000bb24:	15c5883a 	add	r2,r2,r23
1000bb28:	11cf883a 	add	r7,r2,r7
1000bb2c:	88bfffc4 	addi	r2,r17,-1
1000bb30:	b9c0122e 	bgeu	r23,r7,1000bb7c <__divdf3+0x7d4>
1000bb34:	39405036 	bltu	r7,r5,1000bc78 <__divdf3+0x8d0>
1000bb38:	29c01e26 	beq	r5,r7,1000bbb4 <__divdf3+0x80c>
1000bb3c:	394bc83a 	sub	r5,r7,r5
1000bb40:	1023883a 	mov	r17,r2
1000bb44:	003f4b06 	br	1000b874 <__alt_data_end+0xf800b874>
1000bb48:	943ee62e 	bgeu	r18,r16,1000b6e4 <__alt_data_end+0xf800b6e4>
1000bb4c:	980497fa 	slli	r2,r19,31
1000bb50:	8006d07a 	srli	r3,r16,1
1000bb54:	802c97fa 	slli	r22,r16,31
1000bb58:	9826d07a 	srli	r19,r19,1
1000bb5c:	18a0b03a 	or	r16,r3,r2
1000bb60:	003ee406 	br	1000b6f4 <__alt_data_end+0xf800b6f4>
1000bb64:	a17fa11e 	bne	r20,r5,1000b9ec <__alt_data_end+0xf800b9ec>
1000bb68:	b03f9b1e 	bne	r22,zero,1000b9d8 <__alt_data_end+0xf800b9d8>
1000bb6c:	d8000015 	stw	zero,0(sp)
1000bb70:	d8c00017 	ldw	r3,0(sp)
1000bb74:	1dbf9d1e 	bne	r3,r22,1000b9ec <__alt_data_end+0xf800b9ec>
1000bb78:	003f9d06 	br	1000b9f0 <__alt_data_end+0xf800b9f0>
1000bb7c:	3dffef1e 	bne	r7,r23,1000bb3c <__alt_data_end+0xf800bb3c>
1000bb80:	d8c00017 	ldw	r3,0(sp)
1000bb84:	b0ffeb2e 	bgeu	r22,r3,1000bb34 <__alt_data_end+0xf800bb34>
1000bb88:	b94bc83a 	sub	r5,r23,r5
1000bb8c:	1023883a 	mov	r17,r2
1000bb90:	003f3806 	br	1000b874 <__alt_data_end+0xf800b874>
1000bb94:	1023883a 	mov	r17,r2
1000bb98:	003f0906 	br	1000b7c0 <__alt_data_end+0xf800b7c0>
1000bb9c:	1039883a 	mov	fp,r2
1000bba0:	003ef006 	br	1000b764 <__alt_data_end+0xf800b764>
1000bba4:	a1403b36 	bltu	r20,r5,1000bc94 <__divdf3+0x8ec>
1000bba8:	2d005826 	beq	r5,r20,1000bd0c <__divdf3+0x964>
1000bbac:	1025883a 	mov	r18,r2
1000bbb0:	003f8e06 	br	1000b9ec <__alt_data_end+0xf800b9ec>
1000bbb4:	b4003036 	bltu	r22,r16,1000bc78 <__divdf3+0x8d0>
1000bbb8:	1023883a 	mov	r17,r2
1000bbbc:	000b883a 	mov	r5,zero
1000bbc0:	003f2c06 	br	1000b874 <__alt_data_end+0xf800b874>
1000bbc4:	d8c00117 	ldw	r3,4(sp)
1000bbc8:	00bf0084 	movi	r2,-1022
1000bbcc:	10c5c83a 	sub	r2,r2,r3
1000bbd0:	00c00e04 	movi	r3,56
1000bbd4:	18800d0e 	bge	r3,r2,1000bc0c <__divdf3+0x864>
1000bbd8:	aa00004c 	andi	r8,r21,1
1000bbdc:	0005883a 	mov	r2,zero
1000bbe0:	0027883a 	mov	r19,zero
1000bbe4:	0021883a 	mov	r16,zero
1000bbe8:	003e5806 	br	1000b54c <__alt_data_end+0xf800b54c>
1000bbec:	04bfffc4 	movi	r18,-1
1000bbf0:	003f7f06 	br	1000b9f0 <__alt_data_end+0xf800b9f0>
1000bbf4:	102d883a 	mov	r22,r2
1000bbf8:	003f5306 	br	1000b948 <__alt_data_end+0xf800b948>
1000bbfc:	1011883a 	mov	r8,r2
1000bc00:	003f3706 	br	1000b8e0 <__alt_data_end+0xf800b8e0>
1000bc04:	502b883a 	mov	r21,r10
1000bc08:	003f7906 	br	1000b9f0 <__alt_data_end+0xf800b9f0>
1000bc0c:	00c007c4 	movi	r3,31
1000bc10:	18802816 	blt	r3,r2,1000bcb4 <__divdf3+0x90c>
1000bc14:	d9000117 	ldw	r4,4(sp)
1000bc18:	908ad83a 	srl	r5,r18,r2
1000bc1c:	8884d83a 	srl	r2,r17,r2
1000bc20:	20c10784 	addi	r3,r4,1054
1000bc24:	88c8983a 	sll	r4,r17,r3
1000bc28:	90c6983a 	sll	r3,r18,r3
1000bc2c:	2908b03a 	or	r4,r5,r4
1000bc30:	1806c03a 	cmpne	r3,r3,zero
1000bc34:	20c6b03a 	or	r3,r4,r3
1000bc38:	190001cc 	andi	r4,r3,7
1000bc3c:	20000726 	beq	r4,zero,1000bc5c <__divdf3+0x8b4>
1000bc40:	194003cc 	andi	r5,r3,15
1000bc44:	01000104 	movi	r4,4
1000bc48:	29000426 	beq	r5,r4,1000bc5c <__divdf3+0x8b4>
1000bc4c:	1909883a 	add	r4,r3,r4
1000bc50:	20c7803a 	cmpltu	r3,r4,r3
1000bc54:	10c5883a 	add	r2,r2,r3
1000bc58:	2007883a 	mov	r3,r4
1000bc5c:	1100202c 	andhi	r4,r2,128
1000bc60:	20002226 	beq	r4,zero,1000bcec <__divdf3+0x944>
1000bc64:	aa00004c 	andi	r8,r21,1
1000bc68:	00800044 	movi	r2,1
1000bc6c:	0027883a 	mov	r19,zero
1000bc70:	0021883a 	mov	r16,zero
1000bc74:	003e3506 	br	1000b54c <__alt_data_end+0xf800b54c>
1000bc78:	d8c00017 	ldw	r3,0(sp)
1000bc7c:	8c7fff84 	addi	r17,r17,-2
1000bc80:	b0ed883a 	add	r22,r22,r3
1000bc84:	b0c5803a 	cmpltu	r2,r22,r3
1000bc88:	15c5883a 	add	r2,r2,r23
1000bc8c:	11cf883a 	add	r7,r2,r7
1000bc90:	003ef706 	br	1000b870 <__alt_data_end+0xf800b870>
1000bc94:	d8c00017 	ldw	r3,0(sp)
1000bc98:	18c9883a 	add	r4,r3,r3
1000bc9c:	20c5803a 	cmpltu	r2,r4,r3
1000bca0:	15c7883a 	add	r3,r2,r23
1000bca4:	a0e9883a 	add	r20,r20,r3
1000bca8:	90bfff84 	addi	r2,r18,-2
1000bcac:	d9000015 	stw	r4,0(sp)
1000bcb0:	003f4c06 	br	1000b9e4 <__alt_data_end+0xf800b9e4>
1000bcb4:	d9000117 	ldw	r4,4(sp)
1000bcb8:	00fef884 	movi	r3,-1054
1000bcbc:	1907c83a 	sub	r3,r3,r4
1000bcc0:	01000804 	movi	r4,32
1000bcc4:	88c6d83a 	srl	r3,r17,r3
1000bcc8:	11001426 	beq	r2,r4,1000bd1c <__divdf3+0x974>
1000bccc:	d9000117 	ldw	r4,4(sp)
1000bcd0:	20810f84 	addi	r2,r4,1086
1000bcd4:	8884983a 	sll	r2,r17,r2
1000bcd8:	1484b03a 	or	r2,r2,r18
1000bcdc:	1004c03a 	cmpne	r2,r2,zero
1000bce0:	10c6b03a 	or	r3,r2,r3
1000bce4:	0005883a 	mov	r2,zero
1000bce8:	003fd306 	br	1000bc38 <__alt_data_end+0xf800bc38>
1000bcec:	1020977a 	slli	r16,r2,29
1000bcf0:	1806d0fa 	srli	r3,r3,3
1000bcf4:	1004927a 	slli	r2,r2,9
1000bcf8:	aa00004c 	andi	r8,r21,1
1000bcfc:	80e0b03a 	or	r16,r16,r3
1000bd00:	1026d33a 	srli	r19,r2,12
1000bd04:	0005883a 	mov	r2,zero
1000bd08:	003e1006 	br	1000b54c <__alt_data_end+0xf800b54c>
1000bd0c:	d8c00017 	ldw	r3,0(sp)
1000bd10:	1dbfe036 	bltu	r3,r22,1000bc94 <__alt_data_end+0xf800bc94>
1000bd14:	1025883a 	mov	r18,r2
1000bd18:	003f9506 	br	1000bb70 <__alt_data_end+0xf800bb70>
1000bd1c:	0005883a 	mov	r2,zero
1000bd20:	003fed06 	br	1000bcd8 <__alt_data_end+0xf800bcd8>
1000bd24:	00800434 	movhi	r2,16
1000bd28:	10bfffc4 	addi	r2,r2,-1
1000bd2c:	8cc00234 	orhi	r19,r17,8
1000bd30:	98a6703a 	and	r19,r19,r2
1000bd34:	5011883a 	mov	r8,r10
1000bd38:	9021883a 	mov	r16,r18
1000bd3c:	0081ffc4 	movi	r2,2047
1000bd40:	003e0206 	br	1000b54c <__alt_data_end+0xf800b54c>

1000bd44 <__eqdf2>:
1000bd44:	2806d53a 	srli	r3,r5,20
1000bd48:	3810d53a 	srli	r8,r7,20
1000bd4c:	00800434 	movhi	r2,16
1000bd50:	10bfffc4 	addi	r2,r2,-1
1000bd54:	18c1ffcc 	andi	r3,r3,2047
1000bd58:	0241ffc4 	movi	r9,2047
1000bd5c:	2894703a 	and	r10,r5,r2
1000bd60:	4201ffcc 	andi	r8,r8,2047
1000bd64:	3884703a 	and	r2,r7,r2
1000bd68:	280ad7fa 	srli	r5,r5,31
1000bd6c:	380ed7fa 	srli	r7,r7,31
1000bd70:	1a400f26 	beq	r3,r9,1000bdb0 <__eqdf2+0x6c>
1000bd74:	0241ffc4 	movi	r9,2047
1000bd78:	42400326 	beq	r8,r9,1000bd88 <__eqdf2+0x44>
1000bd7c:	1a000526 	beq	r3,r8,1000bd94 <__eqdf2+0x50>
1000bd80:	00800044 	movi	r2,1
1000bd84:	f800283a 	ret
1000bd88:	1192b03a 	or	r9,r2,r6
1000bd8c:	483ffc1e 	bne	r9,zero,1000bd80 <__alt_data_end+0xf800bd80>
1000bd90:	1a3ffb1e 	bne	r3,r8,1000bd80 <__alt_data_end+0xf800bd80>
1000bd94:	50bffa1e 	bne	r10,r2,1000bd80 <__alt_data_end+0xf800bd80>
1000bd98:	21bff91e 	bne	r4,r6,1000bd80 <__alt_data_end+0xf800bd80>
1000bd9c:	29c00826 	beq	r5,r7,1000bdc0 <__eqdf2+0x7c>
1000bda0:	183ff71e 	bne	r3,zero,1000bd80 <__alt_data_end+0xf800bd80>
1000bda4:	5104b03a 	or	r2,r10,r4
1000bda8:	1004c03a 	cmpne	r2,r2,zero
1000bdac:	f800283a 	ret
1000bdb0:	5112b03a 	or	r9,r10,r4
1000bdb4:	483fef26 	beq	r9,zero,1000bd74 <__alt_data_end+0xf800bd74>
1000bdb8:	00800044 	movi	r2,1
1000bdbc:	f800283a 	ret
1000bdc0:	0005883a 	mov	r2,zero
1000bdc4:	f800283a 	ret

1000bdc8 <__gedf2>:
1000bdc8:	2804d53a 	srli	r2,r5,20
1000bdcc:	3810d53a 	srli	r8,r7,20
1000bdd0:	00c00434 	movhi	r3,16
1000bdd4:	18ffffc4 	addi	r3,r3,-1
1000bdd8:	1081ffcc 	andi	r2,r2,2047
1000bddc:	0241ffc4 	movi	r9,2047
1000bde0:	28d4703a 	and	r10,r5,r3
1000bde4:	4201ffcc 	andi	r8,r8,2047
1000bde8:	38c6703a 	and	r3,r7,r3
1000bdec:	280ad7fa 	srli	r5,r5,31
1000bdf0:	380ed7fa 	srli	r7,r7,31
1000bdf4:	12401b26 	beq	r2,r9,1000be64 <__gedf2+0x9c>
1000bdf8:	0241ffc4 	movi	r9,2047
1000bdfc:	42400926 	beq	r8,r9,1000be24 <__gedf2+0x5c>
1000be00:	10000c1e 	bne	r2,zero,1000be34 <__gedf2+0x6c>
1000be04:	5112b03a 	or	r9,r10,r4
1000be08:	4813003a 	cmpeq	r9,r9,zero
1000be0c:	4817883a 	mov	r11,r9
1000be10:	40000a26 	beq	r8,zero,1000be3c <__gedf2+0x74>
1000be14:	48001626 	beq	r9,zero,1000be70 <__gedf2+0xa8>
1000be18:	38000d1e 	bne	r7,zero,1000be50 <__gedf2+0x88>
1000be1c:	00bfffc4 	movi	r2,-1
1000be20:	f800283a 	ret
1000be24:	1992b03a 	or	r9,r3,r6
1000be28:	483ff526 	beq	r9,zero,1000be00 <__alt_data_end+0xf800be00>
1000be2c:	00bfff84 	movi	r2,-2
1000be30:	f800283a 	ret
1000be34:	40000e1e 	bne	r8,zero,1000be70 <__gedf2+0xa8>
1000be38:	0017883a 	mov	r11,zero
1000be3c:	1992b03a 	or	r9,r3,r6
1000be40:	4813003a 	cmpeq	r9,r9,zero
1000be44:	5800041e 	bne	r11,zero,1000be58 <__gedf2+0x90>
1000be48:	48000926 	beq	r9,zero,1000be70 <__gedf2+0xa8>
1000be4c:	283ff31e 	bne	r5,zero,1000be1c <__alt_data_end+0xf800be1c>
1000be50:	00800044 	movi	r2,1
1000be54:	f800283a 	ret
1000be58:	483fef26 	beq	r9,zero,1000be18 <__alt_data_end+0xf800be18>
1000be5c:	0005883a 	mov	r2,zero
1000be60:	f800283a 	ret
1000be64:	5112b03a 	or	r9,r10,r4
1000be68:	483fe326 	beq	r9,zero,1000bdf8 <__alt_data_end+0xf800bdf8>
1000be6c:	003fef06 	br	1000be2c <__alt_data_end+0xf800be2c>
1000be70:	29fff61e 	bne	r5,r7,1000be4c <__alt_data_end+0xf800be4c>
1000be74:	40bff516 	blt	r8,r2,1000be4c <__alt_data_end+0xf800be4c>
1000be78:	12000316 	blt	r2,r8,1000be88 <__gedf2+0xc0>
1000be7c:	1abff336 	bltu	r3,r10,1000be4c <__alt_data_end+0xf800be4c>
1000be80:	50c00326 	beq	r10,r3,1000be90 <__gedf2+0xc8>
1000be84:	50fff52e 	bgeu	r10,r3,1000be5c <__alt_data_end+0xf800be5c>
1000be88:	283fe426 	beq	r5,zero,1000be1c <__alt_data_end+0xf800be1c>
1000be8c:	003ff006 	br	1000be50 <__alt_data_end+0xf800be50>
1000be90:	313fee36 	bltu	r6,r4,1000be4c <__alt_data_end+0xf800be4c>
1000be94:	21bff12e 	bgeu	r4,r6,1000be5c <__alt_data_end+0xf800be5c>
1000be98:	283fe026 	beq	r5,zero,1000be1c <__alt_data_end+0xf800be1c>
1000be9c:	003fec06 	br	1000be50 <__alt_data_end+0xf800be50>

1000bea0 <__ledf2>:
1000bea0:	2806d53a 	srli	r3,r5,20
1000bea4:	3810d53a 	srli	r8,r7,20
1000bea8:	00800434 	movhi	r2,16
1000beac:	10bfffc4 	addi	r2,r2,-1
1000beb0:	18c1ffcc 	andi	r3,r3,2047
1000beb4:	0241ffc4 	movi	r9,2047
1000beb8:	2894703a 	and	r10,r5,r2
1000bebc:	4201ffcc 	andi	r8,r8,2047
1000bec0:	3884703a 	and	r2,r7,r2
1000bec4:	280ad7fa 	srli	r5,r5,31
1000bec8:	380ed7fa 	srli	r7,r7,31
1000becc:	1a402026 	beq	r3,r9,1000bf50 <__ledf2+0xb0>
1000bed0:	0241ffc4 	movi	r9,2047
1000bed4:	42401726 	beq	r8,r9,1000bf34 <__ledf2+0x94>
1000bed8:	18000b26 	beq	r3,zero,1000bf08 <__ledf2+0x68>
1000bedc:	29403fcc 	andi	r5,r5,255
1000bee0:	39c03fcc 	andi	r7,r7,255
1000bee4:	40000f1e 	bne	r8,zero,1000bf24 <__ledf2+0x84>
1000bee8:	0017883a 	mov	r11,zero
1000beec:	1192b03a 	or	r9,r2,r6
1000bef0:	4813003a 	cmpeq	r9,r9,zero
1000bef4:	58001326 	beq	r11,zero,1000bf44 <__ledf2+0xa4>
1000bef8:	48001e1e 	bne	r9,zero,1000bf74 <__ledf2+0xd4>
1000befc:	38000b1e 	bne	r7,zero,1000bf2c <__ledf2+0x8c>
1000bf00:	00bfffc4 	movi	r2,-1
1000bf04:	f800283a 	ret
1000bf08:	5112b03a 	or	r9,r10,r4
1000bf0c:	4813003a 	cmpeq	r9,r9,zero
1000bf10:	4817883a 	mov	r11,r9
1000bf14:	29403fcc 	andi	r5,r5,255
1000bf18:	39c03fcc 	andi	r7,r7,255
1000bf1c:	403ff326 	beq	r8,zero,1000beec <__alt_data_end+0xf800beec>
1000bf20:	483ff61e 	bne	r9,zero,1000befc <__alt_data_end+0xf800befc>
1000bf24:	29c00e26 	beq	r5,r7,1000bf60 <__ledf2+0xc0>
1000bf28:	283ff51e 	bne	r5,zero,1000bf00 <__alt_data_end+0xf800bf00>
1000bf2c:	00800044 	movi	r2,1
1000bf30:	f800283a 	ret
1000bf34:	1192b03a 	or	r9,r2,r6
1000bf38:	483fe726 	beq	r9,zero,1000bed8 <__alt_data_end+0xf800bed8>
1000bf3c:	00800084 	movi	r2,2
1000bf40:	f800283a 	ret
1000bf44:	483ff726 	beq	r9,zero,1000bf24 <__alt_data_end+0xf800bf24>
1000bf48:	283ff826 	beq	r5,zero,1000bf2c <__alt_data_end+0xf800bf2c>
1000bf4c:	003fec06 	br	1000bf00 <__alt_data_end+0xf800bf00>
1000bf50:	5112b03a 	or	r9,r10,r4
1000bf54:	483fde26 	beq	r9,zero,1000bed0 <__alt_data_end+0xf800bed0>
1000bf58:	00800084 	movi	r2,2
1000bf5c:	f800283a 	ret
1000bf60:	40fff116 	blt	r8,r3,1000bf28 <__alt_data_end+0xf800bf28>
1000bf64:	1a000716 	blt	r3,r8,1000bf84 <__ledf2+0xe4>
1000bf68:	12bfef36 	bltu	r2,r10,1000bf28 <__alt_data_end+0xf800bf28>
1000bf6c:	50800326 	beq	r10,r2,1000bf7c <__ledf2+0xdc>
1000bf70:	50800436 	bltu	r10,r2,1000bf84 <__ledf2+0xe4>
1000bf74:	0005883a 	mov	r2,zero
1000bf78:	f800283a 	ret
1000bf7c:	313fea36 	bltu	r6,r4,1000bf28 <__alt_data_end+0xf800bf28>
1000bf80:	21bffc2e 	bgeu	r4,r6,1000bf74 <__alt_data_end+0xf800bf74>
1000bf84:	283fde26 	beq	r5,zero,1000bf00 <__alt_data_end+0xf800bf00>
1000bf88:	003fe806 	br	1000bf2c <__alt_data_end+0xf800bf2c>

1000bf8c <__muldf3>:
1000bf8c:	deffee04 	addi	sp,sp,-72
1000bf90:	dc400915 	stw	r17,36(sp)
1000bf94:	2822d53a 	srli	r17,r5,20
1000bf98:	dc000815 	stw	r16,32(sp)
1000bf9c:	2820d7fa 	srli	r16,r5,31
1000bfa0:	df001015 	stw	fp,64(sp)
1000bfa4:	dd000c15 	stw	r20,48(sp)
1000bfa8:	dcc00b15 	stw	r19,44(sp)
1000bfac:	dfc01115 	stw	ra,68(sp)
1000bfb0:	04c00434 	movhi	r19,16
1000bfb4:	9cffffc4 	addi	r19,r19,-1
1000bfb8:	ddc00f15 	stw	r23,60(sp)
1000bfbc:	dd800e15 	stw	r22,56(sp)
1000bfc0:	dd400d15 	stw	r21,52(sp)
1000bfc4:	dc800a15 	stw	r18,40(sp)
1000bfc8:	8c41ffcc 	andi	r17,r17,2047
1000bfcc:	2029883a 	mov	r20,r4
1000bfd0:	2ce6703a 	and	r19,r5,r19
1000bfd4:	8039883a 	mov	fp,r16
1000bfd8:	82003fcc 	andi	r8,r16,255
1000bfdc:	88005d26 	beq	r17,zero,1000c154 <__muldf3+0x1c8>
1000bfe0:	0081ffc4 	movi	r2,2047
1000bfe4:	202f883a 	mov	r23,r4
1000bfe8:	88803326 	beq	r17,r2,1000c0b8 <__muldf3+0x12c>
1000bfec:	98800434 	orhi	r2,r19,16
1000bff0:	100490fa 	slli	r2,r2,3
1000bff4:	2026d77a 	srli	r19,r4,29
1000bff8:	202e90fa 	slli	r23,r4,3
1000bffc:	8c7f0044 	addi	r17,r17,-1023
1000c000:	14e6b03a 	or	r19,r2,r19
1000c004:	002d883a 	mov	r22,zero
1000c008:	000b883a 	mov	r5,zero
1000c00c:	3804d53a 	srli	r2,r7,20
1000c010:	3828d7fa 	srli	r20,r7,31
1000c014:	04800434 	movhi	r18,16
1000c018:	94bfffc4 	addi	r18,r18,-1
1000c01c:	1081ffcc 	andi	r2,r2,2047
1000c020:	302b883a 	mov	r21,r6
1000c024:	3ca4703a 	and	r18,r7,r18
1000c028:	a2403fcc 	andi	r9,r20,255
1000c02c:	10006826 	beq	r2,zero,1000c1d0 <__muldf3+0x244>
1000c030:	00c1ffc4 	movi	r3,2047
1000c034:	10c06026 	beq	r2,r3,1000c1b8 <__muldf3+0x22c>
1000c038:	90c00434 	orhi	r3,r18,16
1000c03c:	180690fa 	slli	r3,r3,3
1000c040:	3024d77a 	srli	r18,r6,29
1000c044:	302a90fa 	slli	r21,r6,3
1000c048:	10bf0044 	addi	r2,r2,-1023
1000c04c:	1ca4b03a 	or	r18,r3,r18
1000c050:	0007883a 	mov	r3,zero
1000c054:	1d88b03a 	or	r4,r3,r22
1000c058:	2109883a 	add	r4,r4,r4
1000c05c:	2109883a 	add	r4,r4,r4
1000c060:	01840074 	movhi	r6,4097
1000c064:	31b01e04 	addi	r6,r6,-16264
1000c068:	2189883a 	add	r4,r4,r6
1000c06c:	21000017 	ldw	r4,0(r4)
1000c070:	852cf03a 	xor	r22,r16,r20
1000c074:	2000683a 	jmp	r4
1000c078:	1000c2c0 	call	11000c2c <_gp+0xfe7530>
1000c07c:	1000c2b0 	cmpltui	zero,r2,778
1000c080:	1000c2b0 	cmpltui	zero,r2,778
1000c084:	1000c29c 	xori	zero,r2,778
1000c088:	1000c0d8 	cmpnei	zero,r2,771
1000c08c:	1000c0d8 	cmpnei	zero,r2,771
1000c090:	1000c284 	addi	zero,r2,778
1000c094:	1000c29c 	xori	zero,r2,778
1000c098:	1000c0d8 	cmpnei	zero,r2,771
1000c09c:	1000c284 	addi	zero,r2,778
1000c0a0:	1000c0d8 	cmpnei	zero,r2,771
1000c0a4:	1000c29c 	xori	zero,r2,778
1000c0a8:	1000c0d4 	ori	zero,r2,771
1000c0ac:	1000c0d4 	ori	zero,r2,771
1000c0b0:	1000c0d4 	ori	zero,r2,771
1000c0b4:	1000c5d8 	cmpnei	zero,r2,791
1000c0b8:	9904b03a 	or	r2,r19,r4
1000c0bc:	10006e1e 	bne	r2,zero,1000c278 <__muldf3+0x2ec>
1000c0c0:	05800204 	movi	r22,8
1000c0c4:	0027883a 	mov	r19,zero
1000c0c8:	002f883a 	mov	r23,zero
1000c0cc:	01400084 	movi	r5,2
1000c0d0:	003fce06 	br	1000c00c <__alt_data_end+0xf800c00c>
1000c0d4:	402d883a 	mov	r22,r8
1000c0d8:	00800084 	movi	r2,2
1000c0dc:	28805626 	beq	r5,r2,1000c238 <__muldf3+0x2ac>
1000c0e0:	008000c4 	movi	r2,3
1000c0e4:	2881a226 	beq	r5,r2,1000c770 <__muldf3+0x7e4>
1000c0e8:	00800044 	movi	r2,1
1000c0ec:	28811d1e 	bne	r5,r2,1000c564 <__muldf3+0x5d8>
1000c0f0:	b039883a 	mov	fp,r22
1000c0f4:	0005883a 	mov	r2,zero
1000c0f8:	0027883a 	mov	r19,zero
1000c0fc:	002f883a 	mov	r23,zero
1000c100:	1004953a 	slli	r2,r2,20
1000c104:	e7003fcc 	andi	fp,fp,255
1000c108:	e03897fa 	slli	fp,fp,31
1000c10c:	00c00434 	movhi	r3,16
1000c110:	18ffffc4 	addi	r3,r3,-1
1000c114:	98e6703a 	and	r19,r19,r3
1000c118:	9886b03a 	or	r3,r19,r2
1000c11c:	1f06b03a 	or	r3,r3,fp
1000c120:	b805883a 	mov	r2,r23
1000c124:	dfc01117 	ldw	ra,68(sp)
1000c128:	df001017 	ldw	fp,64(sp)
1000c12c:	ddc00f17 	ldw	r23,60(sp)
1000c130:	dd800e17 	ldw	r22,56(sp)
1000c134:	dd400d17 	ldw	r21,52(sp)
1000c138:	dd000c17 	ldw	r20,48(sp)
1000c13c:	dcc00b17 	ldw	r19,44(sp)
1000c140:	dc800a17 	ldw	r18,40(sp)
1000c144:	dc400917 	ldw	r17,36(sp)
1000c148:	dc000817 	ldw	r16,32(sp)
1000c14c:	dec01204 	addi	sp,sp,72
1000c150:	f800283a 	ret
1000c154:	9904b03a 	or	r2,r19,r4
1000c158:	10004226 	beq	r2,zero,1000c264 <__muldf3+0x2d8>
1000c15c:	98013426 	beq	r19,zero,1000c630 <__muldf3+0x6a4>
1000c160:	9809883a 	mov	r4,r19
1000c164:	d9800515 	stw	r6,20(sp)
1000c168:	d9c00415 	stw	r7,16(sp)
1000c16c:	da000615 	stw	r8,24(sp)
1000c170:	000d2040 	call	1000d204 <__clzsi2>
1000c174:	d9800517 	ldw	r6,20(sp)
1000c178:	d9c00417 	ldw	r7,16(sp)
1000c17c:	da000617 	ldw	r8,24(sp)
1000c180:	00c009c4 	movi	r3,39
1000c184:	18812616 	blt	r3,r2,1000c620 <__muldf3+0x694>
1000c188:	00c00a04 	movi	r3,40
1000c18c:	15fffe04 	addi	r23,r2,-8
1000c190:	1887c83a 	sub	r3,r3,r2
1000c194:	9de6983a 	sll	r19,r19,r23
1000c198:	a0c6d83a 	srl	r3,r20,r3
1000c19c:	a5ee983a 	sll	r23,r20,r23
1000c1a0:	1ce6b03a 	or	r19,r3,r19
1000c1a4:	047f0344 	movi	r17,-1011
1000c1a8:	88a3c83a 	sub	r17,r17,r2
1000c1ac:	002d883a 	mov	r22,zero
1000c1b0:	000b883a 	mov	r5,zero
1000c1b4:	003f9506 	br	1000c00c <__alt_data_end+0xf800c00c>
1000c1b8:	9186b03a 	or	r3,r18,r6
1000c1bc:	1800271e 	bne	r3,zero,1000c25c <__muldf3+0x2d0>
1000c1c0:	0025883a 	mov	r18,zero
1000c1c4:	002b883a 	mov	r21,zero
1000c1c8:	00c00084 	movi	r3,2
1000c1cc:	003fa106 	br	1000c054 <__alt_data_end+0xf800c054>
1000c1d0:	9186b03a 	or	r3,r18,r6
1000c1d4:	18001d26 	beq	r3,zero,1000c24c <__muldf3+0x2c0>
1000c1d8:	90012226 	beq	r18,zero,1000c664 <__muldf3+0x6d8>
1000c1dc:	9009883a 	mov	r4,r18
1000c1e0:	d9400415 	stw	r5,16(sp)
1000c1e4:	d9800515 	stw	r6,20(sp)
1000c1e8:	da000615 	stw	r8,24(sp)
1000c1ec:	da400715 	stw	r9,28(sp)
1000c1f0:	000d2040 	call	1000d204 <__clzsi2>
1000c1f4:	d9400417 	ldw	r5,16(sp)
1000c1f8:	d9800517 	ldw	r6,20(sp)
1000c1fc:	da000617 	ldw	r8,24(sp)
1000c200:	da400717 	ldw	r9,28(sp)
1000c204:	00c009c4 	movi	r3,39
1000c208:	18811216 	blt	r3,r2,1000c654 <__muldf3+0x6c8>
1000c20c:	01c00a04 	movi	r7,40
1000c210:	157ffe04 	addi	r21,r2,-8
1000c214:	388fc83a 	sub	r7,r7,r2
1000c218:	9564983a 	sll	r18,r18,r21
1000c21c:	31ced83a 	srl	r7,r6,r7
1000c220:	356a983a 	sll	r21,r6,r21
1000c224:	3ca4b03a 	or	r18,r7,r18
1000c228:	00ff0344 	movi	r3,-1011
1000c22c:	1885c83a 	sub	r2,r3,r2
1000c230:	0007883a 	mov	r3,zero
1000c234:	003f8706 	br	1000c054 <__alt_data_end+0xf800c054>
1000c238:	b039883a 	mov	fp,r22
1000c23c:	0081ffc4 	movi	r2,2047
1000c240:	0027883a 	mov	r19,zero
1000c244:	002f883a 	mov	r23,zero
1000c248:	003fad06 	br	1000c100 <__alt_data_end+0xf800c100>
1000c24c:	0025883a 	mov	r18,zero
1000c250:	002b883a 	mov	r21,zero
1000c254:	00c00044 	movi	r3,1
1000c258:	003f7e06 	br	1000c054 <__alt_data_end+0xf800c054>
1000c25c:	00c000c4 	movi	r3,3
1000c260:	003f7c06 	br	1000c054 <__alt_data_end+0xf800c054>
1000c264:	05800104 	movi	r22,4
1000c268:	0027883a 	mov	r19,zero
1000c26c:	002f883a 	mov	r23,zero
1000c270:	01400044 	movi	r5,1
1000c274:	003f6506 	br	1000c00c <__alt_data_end+0xf800c00c>
1000c278:	05800304 	movi	r22,12
1000c27c:	014000c4 	movi	r5,3
1000c280:	003f6206 	br	1000c00c <__alt_data_end+0xf800c00c>
1000c284:	0039883a 	mov	fp,zero
1000c288:	04c00434 	movhi	r19,16
1000c28c:	9cffffc4 	addi	r19,r19,-1
1000c290:	05ffffc4 	movi	r23,-1
1000c294:	0081ffc4 	movi	r2,2047
1000c298:	003f9906 	br	1000c100 <__alt_data_end+0xf800c100>
1000c29c:	9027883a 	mov	r19,r18
1000c2a0:	a82f883a 	mov	r23,r21
1000c2a4:	482d883a 	mov	r22,r9
1000c2a8:	180b883a 	mov	r5,r3
1000c2ac:	003f8a06 	br	1000c0d8 <__alt_data_end+0xf800c0d8>
1000c2b0:	9027883a 	mov	r19,r18
1000c2b4:	a82f883a 	mov	r23,r21
1000c2b8:	180b883a 	mov	r5,r3
1000c2bc:	003f8606 	br	1000c0d8 <__alt_data_end+0xf800c0d8>
1000c2c0:	a828d43a 	srli	r20,r21,16
1000c2c4:	b820d43a 	srli	r16,r23,16
1000c2c8:	ad7fffcc 	andi	r21,r21,65535
1000c2cc:	bdffffcc 	andi	r23,r23,65535
1000c2d0:	8885883a 	add	r2,r17,r2
1000c2d4:	a809883a 	mov	r4,r21
1000c2d8:	b80b883a 	mov	r5,r23
1000c2dc:	d8800015 	stw	r2,0(sp)
1000c2e0:	000ab040 	call	1000ab04 <__mulsi3>
1000c2e4:	a009883a 	mov	r4,r20
1000c2e8:	b80b883a 	mov	r5,r23
1000c2ec:	d8800415 	stw	r2,16(sp)
1000c2f0:	000ab040 	call	1000ab04 <__mulsi3>
1000c2f4:	a809883a 	mov	r4,r21
1000c2f8:	800b883a 	mov	r5,r16
1000c2fc:	d8800615 	stw	r2,24(sp)
1000c300:	000ab040 	call	1000ab04 <__mulsi3>
1000c304:	a009883a 	mov	r4,r20
1000c308:	800b883a 	mov	r5,r16
1000c30c:	1023883a 	mov	r17,r2
1000c310:	000ab040 	call	1000ab04 <__mulsi3>
1000c314:	d9c00417 	ldw	r7,16(sp)
1000c318:	da000617 	ldw	r8,24(sp)
1000c31c:	1039883a 	mov	fp,r2
1000c320:	3804d43a 	srli	r2,r7,16
1000c324:	8a07883a 	add	r3,r17,r8
1000c328:	1887883a 	add	r3,r3,r2
1000c32c:	1c40022e 	bgeu	r3,r17,1000c338 <__muldf3+0x3ac>
1000c330:	00800074 	movhi	r2,1
1000c334:	e0b9883a 	add	fp,fp,r2
1000c338:	1804943a 	slli	r2,r3,16
1000c33c:	1806d43a 	srli	r3,r3,16
1000c340:	9022d43a 	srli	r17,r18,16
1000c344:	39ffffcc 	andi	r7,r7,65535
1000c348:	94bfffcc 	andi	r18,r18,65535
1000c34c:	11cf883a 	add	r7,r2,r7
1000c350:	b80b883a 	mov	r5,r23
1000c354:	9009883a 	mov	r4,r18
1000c358:	d8c00215 	stw	r3,8(sp)
1000c35c:	d9c00315 	stw	r7,12(sp)
1000c360:	000ab040 	call	1000ab04 <__mulsi3>
1000c364:	b80b883a 	mov	r5,r23
1000c368:	8809883a 	mov	r4,r17
1000c36c:	d8800415 	stw	r2,16(sp)
1000c370:	000ab040 	call	1000ab04 <__mulsi3>
1000c374:	9009883a 	mov	r4,r18
1000c378:	800b883a 	mov	r5,r16
1000c37c:	d8800715 	stw	r2,28(sp)
1000c380:	000ab040 	call	1000ab04 <__mulsi3>
1000c384:	8809883a 	mov	r4,r17
1000c388:	800b883a 	mov	r5,r16
1000c38c:	102f883a 	mov	r23,r2
1000c390:	000ab040 	call	1000ab04 <__mulsi3>
1000c394:	d9c00417 	ldw	r7,16(sp)
1000c398:	da400717 	ldw	r9,28(sp)
1000c39c:	1011883a 	mov	r8,r2
1000c3a0:	3804d43a 	srli	r2,r7,16
1000c3a4:	ba47883a 	add	r3,r23,r9
1000c3a8:	1887883a 	add	r3,r3,r2
1000c3ac:	1dc0022e 	bgeu	r3,r23,1000c3b8 <__muldf3+0x42c>
1000c3b0:	00800074 	movhi	r2,1
1000c3b4:	4091883a 	add	r8,r8,r2
1000c3b8:	1804d43a 	srli	r2,r3,16
1000c3bc:	182e943a 	slli	r23,r3,16
1000c3c0:	9820d43a 	srli	r16,r19,16
1000c3c4:	9cffffcc 	andi	r19,r19,65535
1000c3c8:	39ffffcc 	andi	r7,r7,65535
1000c3cc:	4085883a 	add	r2,r8,r2
1000c3d0:	a809883a 	mov	r4,r21
1000c3d4:	980b883a 	mov	r5,r19
1000c3d8:	b9ef883a 	add	r23,r23,r7
1000c3dc:	d8800115 	stw	r2,4(sp)
1000c3e0:	000ab040 	call	1000ab04 <__mulsi3>
1000c3e4:	a009883a 	mov	r4,r20
1000c3e8:	980b883a 	mov	r5,r19
1000c3ec:	d8800415 	stw	r2,16(sp)
1000c3f0:	000ab040 	call	1000ab04 <__mulsi3>
1000c3f4:	a809883a 	mov	r4,r21
1000c3f8:	800b883a 	mov	r5,r16
1000c3fc:	d8800715 	stw	r2,28(sp)
1000c400:	000ab040 	call	1000ab04 <__mulsi3>
1000c404:	a009883a 	mov	r4,r20
1000c408:	800b883a 	mov	r5,r16
1000c40c:	102b883a 	mov	r21,r2
1000c410:	000ab040 	call	1000ab04 <__mulsi3>
1000c414:	d9c00417 	ldw	r7,16(sp)
1000c418:	da400717 	ldw	r9,28(sp)
1000c41c:	1011883a 	mov	r8,r2
1000c420:	3804d43a 	srli	r2,r7,16
1000c424:	aa47883a 	add	r3,r21,r9
1000c428:	1887883a 	add	r3,r3,r2
1000c42c:	1d40022e 	bgeu	r3,r21,1000c438 <__muldf3+0x4ac>
1000c430:	00800074 	movhi	r2,1
1000c434:	4091883a 	add	r8,r8,r2
1000c438:	1828d43a 	srli	r20,r3,16
1000c43c:	1806943a 	slli	r3,r3,16
1000c440:	39ffffcc 	andi	r7,r7,65535
1000c444:	9009883a 	mov	r4,r18
1000c448:	980b883a 	mov	r5,r19
1000c44c:	19eb883a 	add	r21,r3,r7
1000c450:	4529883a 	add	r20,r8,r20
1000c454:	000ab040 	call	1000ab04 <__mulsi3>
1000c458:	980b883a 	mov	r5,r19
1000c45c:	8809883a 	mov	r4,r17
1000c460:	d8800415 	stw	r2,16(sp)
1000c464:	000ab040 	call	1000ab04 <__mulsi3>
1000c468:	9009883a 	mov	r4,r18
1000c46c:	800b883a 	mov	r5,r16
1000c470:	1027883a 	mov	r19,r2
1000c474:	000ab040 	call	1000ab04 <__mulsi3>
1000c478:	8809883a 	mov	r4,r17
1000c47c:	800b883a 	mov	r5,r16
1000c480:	1025883a 	mov	r18,r2
1000c484:	000ab040 	call	1000ab04 <__mulsi3>
1000c488:	d9c00417 	ldw	r7,16(sp)
1000c48c:	1011883a 	mov	r8,r2
1000c490:	94c7883a 	add	r3,r18,r19
1000c494:	3804d43a 	srli	r2,r7,16
1000c498:	1887883a 	add	r3,r3,r2
1000c49c:	1c80022e 	bgeu	r3,r18,1000c4a8 <__muldf3+0x51c>
1000c4a0:	00800074 	movhi	r2,1
1000c4a4:	4091883a 	add	r8,r8,r2
1000c4a8:	1804943a 	slli	r2,r3,16
1000c4ac:	d9400217 	ldw	r5,8(sp)
1000c4b0:	39ffffcc 	andi	r7,r7,65535
1000c4b4:	11cf883a 	add	r7,r2,r7
1000c4b8:	d8800117 	ldw	r2,4(sp)
1000c4bc:	b949883a 	add	r4,r23,r5
1000c4c0:	2739883a 	add	fp,r4,fp
1000c4c4:	e5ef803a 	cmpltu	r23,fp,r23
1000c4c8:	388f883a 	add	r7,r7,r2
1000c4cc:	3dcb883a 	add	r5,r7,r23
1000c4d0:	a149883a 	add	r4,r20,r5
1000c4d4:	2def803a 	cmpltu	r23,r5,r23
1000c4d8:	d9400117 	ldw	r5,4(sp)
1000c4dc:	e579883a 	add	fp,fp,r21
1000c4e0:	e56b803a 	cmpltu	r21,fp,r21
1000c4e4:	1804d43a 	srli	r2,r3,16
1000c4e8:	394f803a 	cmpltu	r7,r7,r5
1000c4ec:	2547883a 	add	r3,r4,r21
1000c4f0:	b9e6b03a 	or	r19,r23,r7
1000c4f4:	1d6b803a 	cmpltu	r21,r3,r21
1000c4f8:	2529803a 	cmpltu	r20,r4,r20
1000c4fc:	98a7883a 	add	r19,r19,r2
1000c500:	ad2ab03a 	or	r21,r21,r20
1000c504:	9d67883a 	add	r19,r19,r21
1000c508:	e02e927a 	slli	r23,fp,9
1000c50c:	9a27883a 	add	r19,r19,r8
1000c510:	d9000317 	ldw	r4,12(sp)
1000c514:	1804d5fa 	srli	r2,r3,23
1000c518:	9826927a 	slli	r19,r19,9
1000c51c:	e038d5fa 	srli	fp,fp,23
1000c520:	b92eb03a 	or	r23,r23,r4
1000c524:	1806927a 	slli	r3,r3,9
1000c528:	98a6b03a 	or	r19,r19,r2
1000c52c:	b82ec03a 	cmpne	r23,r23,zero
1000c530:	bf2eb03a 	or	r23,r23,fp
1000c534:	9880402c 	andhi	r2,r19,256
1000c538:	b8eeb03a 	or	r23,r23,r3
1000c53c:	10000926 	beq	r2,zero,1000c564 <__muldf3+0x5d8>
1000c540:	b806d07a 	srli	r3,r23,1
1000c544:	bdc0004c 	andi	r23,r23,1
1000c548:	980497fa 	slli	r2,r19,31
1000c54c:	b8eeb03a 	or	r23,r23,r3
1000c550:	d8c00017 	ldw	r3,0(sp)
1000c554:	9826d07a 	srli	r19,r19,1
1000c558:	b8aeb03a 	or	r23,r23,r2
1000c55c:	18c00044 	addi	r3,r3,1
1000c560:	d8c00015 	stw	r3,0(sp)
1000c564:	d8c00017 	ldw	r3,0(sp)
1000c568:	1880ffc4 	addi	r2,r3,1023
1000c56c:	0080490e 	bge	zero,r2,1000c694 <__muldf3+0x708>
1000c570:	b8c001cc 	andi	r3,r23,7
1000c574:	18000726 	beq	r3,zero,1000c594 <__muldf3+0x608>
1000c578:	b90003cc 	andi	r4,r23,15
1000c57c:	00c00104 	movi	r3,4
1000c580:	20c00426 	beq	r4,r3,1000c594 <__muldf3+0x608>
1000c584:	b8c7883a 	add	r3,r23,r3
1000c588:	1def803a 	cmpltu	r23,r3,r23
1000c58c:	9de7883a 	add	r19,r19,r23
1000c590:	182f883a 	mov	r23,r3
1000c594:	98c0402c 	andhi	r3,r19,256
1000c598:	18000526 	beq	r3,zero,1000c5b0 <__muldf3+0x624>
1000c59c:	d8c00017 	ldw	r3,0(sp)
1000c5a0:	00bfc034 	movhi	r2,65280
1000c5a4:	10bfffc4 	addi	r2,r2,-1
1000c5a8:	98a6703a 	and	r19,r19,r2
1000c5ac:	18810004 	addi	r2,r3,1024
1000c5b0:	00c1ff84 	movi	r3,2046
1000c5b4:	18bf2016 	blt	r3,r2,1000c238 <__alt_data_end+0xf800c238>
1000c5b8:	9806977a 	slli	r3,r19,29
1000c5bc:	b82ed0fa 	srli	r23,r23,3
1000c5c0:	9826927a 	slli	r19,r19,9
1000c5c4:	1081ffcc 	andi	r2,r2,2047
1000c5c8:	1deeb03a 	or	r23,r3,r23
1000c5cc:	9826d33a 	srli	r19,r19,12
1000c5d0:	b039883a 	mov	fp,r22
1000c5d4:	003eca06 	br	1000c100 <__alt_data_end+0xf800c100>
1000c5d8:	9880022c 	andhi	r2,r19,8
1000c5dc:	10000a26 	beq	r2,zero,1000c608 <__muldf3+0x67c>
1000c5e0:	9080022c 	andhi	r2,r18,8
1000c5e4:	1000081e 	bne	r2,zero,1000c608 <__muldf3+0x67c>
1000c5e8:	00800434 	movhi	r2,16
1000c5ec:	10bfffc4 	addi	r2,r2,-1
1000c5f0:	94c00234 	orhi	r19,r18,8
1000c5f4:	98a6703a 	and	r19,r19,r2
1000c5f8:	a039883a 	mov	fp,r20
1000c5fc:	a82f883a 	mov	r23,r21
1000c600:	0081ffc4 	movi	r2,2047
1000c604:	003ebe06 	br	1000c100 <__alt_data_end+0xf800c100>
1000c608:	00800434 	movhi	r2,16
1000c60c:	10bfffc4 	addi	r2,r2,-1
1000c610:	9cc00234 	orhi	r19,r19,8
1000c614:	98a6703a 	and	r19,r19,r2
1000c618:	0081ffc4 	movi	r2,2047
1000c61c:	003eb806 	br	1000c100 <__alt_data_end+0xf800c100>
1000c620:	14fff604 	addi	r19,r2,-40
1000c624:	a4e6983a 	sll	r19,r20,r19
1000c628:	002f883a 	mov	r23,zero
1000c62c:	003edd06 	br	1000c1a4 <__alt_data_end+0xf800c1a4>
1000c630:	d9800515 	stw	r6,20(sp)
1000c634:	d9c00415 	stw	r7,16(sp)
1000c638:	da000615 	stw	r8,24(sp)
1000c63c:	000d2040 	call	1000d204 <__clzsi2>
1000c640:	10800804 	addi	r2,r2,32
1000c644:	da000617 	ldw	r8,24(sp)
1000c648:	d9c00417 	ldw	r7,16(sp)
1000c64c:	d9800517 	ldw	r6,20(sp)
1000c650:	003ecb06 	br	1000c180 <__alt_data_end+0xf800c180>
1000c654:	14bff604 	addi	r18,r2,-40
1000c658:	34a4983a 	sll	r18,r6,r18
1000c65c:	002b883a 	mov	r21,zero
1000c660:	003ef106 	br	1000c228 <__alt_data_end+0xf800c228>
1000c664:	3009883a 	mov	r4,r6
1000c668:	d9400415 	stw	r5,16(sp)
1000c66c:	d9800515 	stw	r6,20(sp)
1000c670:	da000615 	stw	r8,24(sp)
1000c674:	da400715 	stw	r9,28(sp)
1000c678:	000d2040 	call	1000d204 <__clzsi2>
1000c67c:	10800804 	addi	r2,r2,32
1000c680:	da400717 	ldw	r9,28(sp)
1000c684:	da000617 	ldw	r8,24(sp)
1000c688:	d9800517 	ldw	r6,20(sp)
1000c68c:	d9400417 	ldw	r5,16(sp)
1000c690:	003edc06 	br	1000c204 <__alt_data_end+0xf800c204>
1000c694:	d8c00017 	ldw	r3,0(sp)
1000c698:	00bf0084 	movi	r2,-1022
1000c69c:	10c5c83a 	sub	r2,r2,r3
1000c6a0:	00c00e04 	movi	r3,56
1000c6a4:	18be9216 	blt	r3,r2,1000c0f0 <__alt_data_end+0xf800c0f0>
1000c6a8:	00c007c4 	movi	r3,31
1000c6ac:	18801916 	blt	r3,r2,1000c714 <__muldf3+0x788>
1000c6b0:	d9000017 	ldw	r4,0(sp)
1000c6b4:	b88ad83a 	srl	r5,r23,r2
1000c6b8:	9884d83a 	srl	r2,r19,r2
1000c6bc:	20c10784 	addi	r3,r4,1054
1000c6c0:	98c8983a 	sll	r4,r19,r3
1000c6c4:	b8c6983a 	sll	r3,r23,r3
1000c6c8:	2908b03a 	or	r4,r5,r4
1000c6cc:	1806c03a 	cmpne	r3,r3,zero
1000c6d0:	20c6b03a 	or	r3,r4,r3
1000c6d4:	190001cc 	andi	r4,r3,7
1000c6d8:	20000726 	beq	r4,zero,1000c6f8 <__muldf3+0x76c>
1000c6dc:	194003cc 	andi	r5,r3,15
1000c6e0:	01000104 	movi	r4,4
1000c6e4:	29000426 	beq	r5,r4,1000c6f8 <__muldf3+0x76c>
1000c6e8:	1909883a 	add	r4,r3,r4
1000c6ec:	20c7803a 	cmpltu	r3,r4,r3
1000c6f0:	10c5883a 	add	r2,r2,r3
1000c6f4:	2007883a 	mov	r3,r4
1000c6f8:	1100202c 	andhi	r4,r2,128
1000c6fc:	20001226 	beq	r4,zero,1000c748 <__muldf3+0x7bc>
1000c700:	b039883a 	mov	fp,r22
1000c704:	00800044 	movi	r2,1
1000c708:	0027883a 	mov	r19,zero
1000c70c:	002f883a 	mov	r23,zero
1000c710:	003e7b06 	br	1000c100 <__alt_data_end+0xf800c100>
1000c714:	d9400017 	ldw	r5,0(sp)
1000c718:	00fef884 	movi	r3,-1054
1000c71c:	01000804 	movi	r4,32
1000c720:	1947c83a 	sub	r3,r3,r5
1000c724:	98c6d83a 	srl	r3,r19,r3
1000c728:	11000f26 	beq	r2,r4,1000c768 <__muldf3+0x7dc>
1000c72c:	28810f84 	addi	r2,r5,1086
1000c730:	9884983a 	sll	r2,r19,r2
1000c734:	15c4b03a 	or	r2,r2,r23
1000c738:	1004c03a 	cmpne	r2,r2,zero
1000c73c:	10c6b03a 	or	r3,r2,r3
1000c740:	0005883a 	mov	r2,zero
1000c744:	003fe306 	br	1000c6d4 <__alt_data_end+0xf800c6d4>
1000c748:	102e977a 	slli	r23,r2,29
1000c74c:	1806d0fa 	srli	r3,r3,3
1000c750:	1004927a 	slli	r2,r2,9
1000c754:	b039883a 	mov	fp,r22
1000c758:	b8eeb03a 	or	r23,r23,r3
1000c75c:	1026d33a 	srli	r19,r2,12
1000c760:	0005883a 	mov	r2,zero
1000c764:	003e6606 	br	1000c100 <__alt_data_end+0xf800c100>
1000c768:	0005883a 	mov	r2,zero
1000c76c:	003ff106 	br	1000c734 <__alt_data_end+0xf800c734>
1000c770:	00800434 	movhi	r2,16
1000c774:	10bfffc4 	addi	r2,r2,-1
1000c778:	9cc00234 	orhi	r19,r19,8
1000c77c:	98a6703a 	and	r19,r19,r2
1000c780:	b039883a 	mov	fp,r22
1000c784:	0081ffc4 	movi	r2,2047
1000c788:	003e5d06 	br	1000c100 <__alt_data_end+0xf800c100>

1000c78c <__subdf3>:
1000c78c:	02000434 	movhi	r8,16
1000c790:	423fffc4 	addi	r8,r8,-1
1000c794:	defffb04 	addi	sp,sp,-20
1000c798:	2a06703a 	and	r3,r5,r8
1000c79c:	3a10703a 	and	r8,r7,r8
1000c7a0:	3804d53a 	srli	r2,r7,20
1000c7a4:	dc800215 	stw	r18,8(sp)
1000c7a8:	dc400115 	stw	r17,4(sp)
1000c7ac:	2824d7fa 	srli	r18,r5,31
1000c7b0:	2822d53a 	srli	r17,r5,20
1000c7b4:	401090fa 	slli	r8,r8,3
1000c7b8:	180a90fa 	slli	r5,r3,3
1000c7bc:	3006d77a 	srli	r3,r6,29
1000c7c0:	2014d77a 	srli	r10,r4,29
1000c7c4:	dc000015 	stw	r16,0(sp)
1000c7c8:	40d0b03a 	or	r8,r8,r3
1000c7cc:	dfc00415 	stw	ra,16(sp)
1000c7d0:	dcc00315 	stw	r19,12(sp)
1000c7d4:	1081ffcc 	andi	r2,r2,2047
1000c7d8:	00c1ffc4 	movi	r3,2047
1000c7dc:	9013883a 	mov	r9,r18
1000c7e0:	8c41ffcc 	andi	r17,r17,2047
1000c7e4:	94803fcc 	andi	r18,r18,255
1000c7e8:	2a8ab03a 	or	r5,r5,r10
1000c7ec:	202090fa 	slli	r16,r4,3
1000c7f0:	380ed7fa 	srli	r7,r7,31
1000c7f4:	300c90fa 	slli	r6,r6,3
1000c7f8:	10c02e26 	beq	r2,r3,1000c8b4 <__subdf3+0x128>
1000c7fc:	39c0005c 	xori	r7,r7,1
1000c800:	8887c83a 	sub	r3,r17,r2
1000c804:	91c03026 	beq	r18,r7,1000c8c8 <__subdf3+0x13c>
1000c808:	00c0a40e 	bge	zero,r3,1000ca9c <__subdf3+0x310>
1000c80c:	10004c1e 	bne	r2,zero,1000c940 <__subdf3+0x1b4>
1000c810:	4184b03a 	or	r2,r8,r6
1000c814:	10008f1e 	bne	r2,zero,1000ca54 <__subdf3+0x2c8>
1000c818:	808001cc 	andi	r2,r16,7
1000c81c:	10007d26 	beq	r2,zero,1000ca14 <__subdf3+0x288>
1000c820:	80c003cc 	andi	r3,r16,15
1000c824:	00800104 	movi	r2,4
1000c828:	18807a26 	beq	r3,r2,1000ca14 <__subdf3+0x288>
1000c82c:	80c00104 	addi	r3,r16,4
1000c830:	1c21803a 	cmpltu	r16,r3,r16
1000c834:	2c0b883a 	add	r5,r5,r16
1000c838:	2880202c 	andhi	r2,r5,128
1000c83c:	9240004c 	andi	r9,r18,1
1000c840:	1821883a 	mov	r16,r3
1000c844:	10007626 	beq	r2,zero,1000ca20 <__subdf3+0x294>
1000c848:	8c400044 	addi	r17,r17,1
1000c84c:	0081ffc4 	movi	r2,2047
1000c850:	8880b226 	beq	r17,r2,1000cb1c <__subdf3+0x390>
1000c854:	00bfe034 	movhi	r2,65408
1000c858:	10bfffc4 	addi	r2,r2,-1
1000c85c:	288a703a 	and	r5,r5,r2
1000c860:	2804977a 	slli	r2,r5,29
1000c864:	280a927a 	slli	r5,r5,9
1000c868:	8020d0fa 	srli	r16,r16,3
1000c86c:	280ad33a 	srli	r5,r5,12
1000c870:	1404b03a 	or	r2,r2,r16
1000c874:	8c41ffcc 	andi	r17,r17,2047
1000c878:	8822953a 	slli	r17,r17,20
1000c87c:	4a403fcc 	andi	r9,r9,255
1000c880:	481297fa 	slli	r9,r9,31
1000c884:	00c00434 	movhi	r3,16
1000c888:	18ffffc4 	addi	r3,r3,-1
1000c88c:	28c6703a 	and	r3,r5,r3
1000c890:	1c46b03a 	or	r3,r3,r17
1000c894:	1a46b03a 	or	r3,r3,r9
1000c898:	dfc00417 	ldw	ra,16(sp)
1000c89c:	dcc00317 	ldw	r19,12(sp)
1000c8a0:	dc800217 	ldw	r18,8(sp)
1000c8a4:	dc400117 	ldw	r17,4(sp)
1000c8a8:	dc000017 	ldw	r16,0(sp)
1000c8ac:	dec00504 	addi	sp,sp,20
1000c8b0:	f800283a 	ret
1000c8b4:	4186b03a 	or	r3,r8,r6
1000c8b8:	183fd026 	beq	r3,zero,1000c7fc <__alt_data_end+0xf800c7fc>
1000c8bc:	39c03fcc 	andi	r7,r7,255
1000c8c0:	8887c83a 	sub	r3,r17,r2
1000c8c4:	91ffd01e 	bne	r18,r7,1000c808 <__alt_data_end+0xf800c808>
1000c8c8:	00c09b0e 	bge	zero,r3,1000cb38 <__subdf3+0x3ac>
1000c8cc:	10006926 	beq	r2,zero,1000ca74 <__subdf3+0x2e8>
1000c8d0:	0081ffc4 	movi	r2,2047
1000c8d4:	88bfd026 	beq	r17,r2,1000c818 <__alt_data_end+0xf800c818>
1000c8d8:	42002034 	orhi	r8,r8,128
1000c8dc:	00800e04 	movi	r2,56
1000c8e0:	10c0e20e 	bge	r2,r3,1000cc6c <__subdf3+0x4e0>
1000c8e4:	418cb03a 	or	r6,r8,r6
1000c8e8:	300cc03a 	cmpne	r6,r6,zero
1000c8ec:	0007883a 	mov	r3,zero
1000c8f0:	340d883a 	add	r6,r6,r16
1000c8f4:	3421803a 	cmpltu	r16,r6,r16
1000c8f8:	194b883a 	add	r5,r3,r5
1000c8fc:	2c0b883a 	add	r5,r5,r16
1000c900:	3021883a 	mov	r16,r6
1000c904:	2880202c 	andhi	r2,r5,128
1000c908:	103fc326 	beq	r2,zero,1000c818 <__alt_data_end+0xf800c818>
1000c90c:	8c400044 	addi	r17,r17,1
1000c910:	0081ffc4 	movi	r2,2047
1000c914:	88811026 	beq	r17,r2,1000cd58 <__subdf3+0x5cc>
1000c918:	00bfe034 	movhi	r2,65408
1000c91c:	10bfffc4 	addi	r2,r2,-1
1000c920:	288a703a 	and	r5,r5,r2
1000c924:	8006d07a 	srli	r3,r16,1
1000c928:	280497fa 	slli	r2,r5,31
1000c92c:	8400004c 	andi	r16,r16,1
1000c930:	80e0b03a 	or	r16,r16,r3
1000c934:	80a0b03a 	or	r16,r16,r2
1000c938:	280ad07a 	srli	r5,r5,1
1000c93c:	003fb606 	br	1000c818 <__alt_data_end+0xf800c818>
1000c940:	0081ffc4 	movi	r2,2047
1000c944:	88bfb426 	beq	r17,r2,1000c818 <__alt_data_end+0xf800c818>
1000c948:	42002034 	orhi	r8,r8,128
1000c94c:	00800e04 	movi	r2,56
1000c950:	10c07516 	blt	r2,r3,1000cb28 <__subdf3+0x39c>
1000c954:	008007c4 	movi	r2,31
1000c958:	10c09816 	blt	r2,r3,1000cbbc <__subdf3+0x430>
1000c95c:	00800804 	movi	r2,32
1000c960:	10c5c83a 	sub	r2,r2,r3
1000c964:	30c8d83a 	srl	r4,r6,r3
1000c968:	408e983a 	sll	r7,r8,r2
1000c96c:	3084983a 	sll	r2,r6,r2
1000c970:	40c6d83a 	srl	r3,r8,r3
1000c974:	3908b03a 	or	r4,r7,r4
1000c978:	1004c03a 	cmpne	r2,r2,zero
1000c97c:	208cb03a 	or	r6,r4,r2
1000c980:	818dc83a 	sub	r6,r16,r6
1000c984:	81a1803a 	cmpltu	r16,r16,r6
1000c988:	28cbc83a 	sub	r5,r5,r3
1000c98c:	2c0bc83a 	sub	r5,r5,r16
1000c990:	3021883a 	mov	r16,r6
1000c994:	2880202c 	andhi	r2,r5,128
1000c998:	103f9f26 	beq	r2,zero,1000c818 <__alt_data_end+0xf800c818>
1000c99c:	04c02034 	movhi	r19,128
1000c9a0:	9cffffc4 	addi	r19,r19,-1
1000c9a4:	2ce6703a 	and	r19,r5,r19
1000c9a8:	98004d26 	beq	r19,zero,1000cae0 <__subdf3+0x354>
1000c9ac:	9809883a 	mov	r4,r19
1000c9b0:	000d2040 	call	1000d204 <__clzsi2>
1000c9b4:	10fffe04 	addi	r3,r2,-8
1000c9b8:	010007c4 	movi	r4,31
1000c9bc:	20c04e16 	blt	r4,r3,1000caf8 <__subdf3+0x36c>
1000c9c0:	01000a04 	movi	r4,40
1000c9c4:	2085c83a 	sub	r2,r4,r2
1000c9c8:	8084d83a 	srl	r2,r16,r2
1000c9cc:	98e6983a 	sll	r19,r19,r3
1000c9d0:	80e0983a 	sll	r16,r16,r3
1000c9d4:	14c4b03a 	or	r2,r2,r19
1000c9d8:	1c404b16 	blt	r3,r17,1000cb08 <__subdf3+0x37c>
1000c9dc:	1c63c83a 	sub	r17,r3,r17
1000c9e0:	89400044 	addi	r5,r17,1
1000c9e4:	00c007c4 	movi	r3,31
1000c9e8:	19406716 	blt	r3,r5,1000cb88 <__subdf3+0x3fc>
1000c9ec:	1c47c83a 	sub	r3,r3,r17
1000c9f0:	8148d83a 	srl	r4,r16,r5
1000c9f4:	80e0983a 	sll	r16,r16,r3
1000c9f8:	10c6983a 	sll	r3,r2,r3
1000c9fc:	114ad83a 	srl	r5,r2,r5
1000ca00:	8004c03a 	cmpne	r2,r16,zero
1000ca04:	20e0b03a 	or	r16,r4,r3
1000ca08:	80a0b03a 	or	r16,r16,r2
1000ca0c:	0023883a 	mov	r17,zero
1000ca10:	003f8106 	br	1000c818 <__alt_data_end+0xf800c818>
1000ca14:	2880202c 	andhi	r2,r5,128
1000ca18:	9240004c 	andi	r9,r18,1
1000ca1c:	103f8a1e 	bne	r2,zero,1000c848 <__alt_data_end+0xf800c848>
1000ca20:	2804977a 	slli	r2,r5,29
1000ca24:	8020d0fa 	srli	r16,r16,3
1000ca28:	00c1ffc4 	movi	r3,2047
1000ca2c:	280ad0fa 	srli	r5,r5,3
1000ca30:	1404b03a 	or	r2,r2,r16
1000ca34:	88c0031e 	bne	r17,r3,1000ca44 <__subdf3+0x2b8>
1000ca38:	1146b03a 	or	r3,r2,r5
1000ca3c:	18003726 	beq	r3,zero,1000cb1c <__subdf3+0x390>
1000ca40:	29400234 	orhi	r5,r5,8
1000ca44:	00c00434 	movhi	r3,16
1000ca48:	18ffffc4 	addi	r3,r3,-1
1000ca4c:	28ca703a 	and	r5,r5,r3
1000ca50:	003f8806 	br	1000c874 <__alt_data_end+0xf800c874>
1000ca54:	18ffffc4 	addi	r3,r3,-1
1000ca58:	1800481e 	bne	r3,zero,1000cb7c <__subdf3+0x3f0>
1000ca5c:	818dc83a 	sub	r6,r16,r6
1000ca60:	81a1803a 	cmpltu	r16,r16,r6
1000ca64:	2a0bc83a 	sub	r5,r5,r8
1000ca68:	2c0bc83a 	sub	r5,r5,r16
1000ca6c:	3021883a 	mov	r16,r6
1000ca70:	003fc806 	br	1000c994 <__alt_data_end+0xf800c994>
1000ca74:	4184b03a 	or	r2,r8,r6
1000ca78:	103f6726 	beq	r2,zero,1000c818 <__alt_data_end+0xf800c818>
1000ca7c:	18ffffc4 	addi	r3,r3,-1
1000ca80:	1800931e 	bne	r3,zero,1000ccd0 <__subdf3+0x544>
1000ca84:	340d883a 	add	r6,r6,r16
1000ca88:	3421803a 	cmpltu	r16,r6,r16
1000ca8c:	414b883a 	add	r5,r8,r5
1000ca90:	2c0b883a 	add	r5,r5,r16
1000ca94:	3021883a 	mov	r16,r6
1000ca98:	003f9a06 	br	1000c904 <__alt_data_end+0xf800c904>
1000ca9c:	1800531e 	bne	r3,zero,1000cbec <__subdf3+0x460>
1000caa0:	88800044 	addi	r2,r17,1
1000caa4:	1081ffcc 	andi	r2,r2,2047
1000caa8:	00c00044 	movi	r3,1
1000caac:	1880a00e 	bge	r3,r2,1000cd30 <__subdf3+0x5a4>
1000cab0:	8185c83a 	sub	r2,r16,r6
1000cab4:	8087803a 	cmpltu	r3,r16,r2
1000cab8:	2a27c83a 	sub	r19,r5,r8
1000cabc:	98e7c83a 	sub	r19,r19,r3
1000cac0:	98c0202c 	andhi	r3,r19,128
1000cac4:	18006226 	beq	r3,zero,1000cc50 <__subdf3+0x4c4>
1000cac8:	3421c83a 	sub	r16,r6,r16
1000cacc:	414bc83a 	sub	r5,r8,r5
1000cad0:	340d803a 	cmpltu	r6,r6,r16
1000cad4:	29a7c83a 	sub	r19,r5,r6
1000cad8:	3825883a 	mov	r18,r7
1000cadc:	983fb31e 	bne	r19,zero,1000c9ac <__alt_data_end+0xf800c9ac>
1000cae0:	8009883a 	mov	r4,r16
1000cae4:	000d2040 	call	1000d204 <__clzsi2>
1000cae8:	10800804 	addi	r2,r2,32
1000caec:	10fffe04 	addi	r3,r2,-8
1000caf0:	010007c4 	movi	r4,31
1000caf4:	20ffb20e 	bge	r4,r3,1000c9c0 <__alt_data_end+0xf800c9c0>
1000caf8:	10bff604 	addi	r2,r2,-40
1000cafc:	8084983a 	sll	r2,r16,r2
1000cb00:	0021883a 	mov	r16,zero
1000cb04:	1c7fb50e 	bge	r3,r17,1000c9dc <__alt_data_end+0xf800c9dc>
1000cb08:	017fe034 	movhi	r5,65408
1000cb0c:	297fffc4 	addi	r5,r5,-1
1000cb10:	88e3c83a 	sub	r17,r17,r3
1000cb14:	114a703a 	and	r5,r2,r5
1000cb18:	003f3f06 	br	1000c818 <__alt_data_end+0xf800c818>
1000cb1c:	000b883a 	mov	r5,zero
1000cb20:	0005883a 	mov	r2,zero
1000cb24:	003f5306 	br	1000c874 <__alt_data_end+0xf800c874>
1000cb28:	418cb03a 	or	r6,r8,r6
1000cb2c:	300cc03a 	cmpne	r6,r6,zero
1000cb30:	0007883a 	mov	r3,zero
1000cb34:	003f9206 	br	1000c980 <__alt_data_end+0xf800c980>
1000cb38:	1800961e 	bne	r3,zero,1000cd94 <__subdf3+0x608>
1000cb3c:	88800044 	addi	r2,r17,1
1000cb40:	1101ffcc 	andi	r4,r2,2047
1000cb44:	00c00044 	movi	r3,1
1000cb48:	1900680e 	bge	r3,r4,1000ccec <__subdf3+0x560>
1000cb4c:	00c1ffc4 	movi	r3,2047
1000cb50:	10c0b626 	beq	r2,r3,1000ce2c <__subdf3+0x6a0>
1000cb54:	340d883a 	add	r6,r6,r16
1000cb58:	3421803a 	cmpltu	r16,r6,r16
1000cb5c:	414b883a 	add	r5,r8,r5
1000cb60:	2c0b883a 	add	r5,r5,r16
1000cb64:	282097fa 	slli	r16,r5,31
1000cb68:	300cd07a 	srli	r6,r6,1
1000cb6c:	280ad07a 	srli	r5,r5,1
1000cb70:	1023883a 	mov	r17,r2
1000cb74:	81a0b03a 	or	r16,r16,r6
1000cb78:	003f2706 	br	1000c818 <__alt_data_end+0xf800c818>
1000cb7c:	0081ffc4 	movi	r2,2047
1000cb80:	88bf721e 	bne	r17,r2,1000c94c <__alt_data_end+0xf800c94c>
1000cb84:	003f2406 	br	1000c818 <__alt_data_end+0xf800c818>
1000cb88:	893ff844 	addi	r4,r17,-31
1000cb8c:	00c00804 	movi	r3,32
1000cb90:	1108d83a 	srl	r4,r2,r4
1000cb94:	28c05126 	beq	r5,r3,1000ccdc <__subdf3+0x550>
1000cb98:	00c00fc4 	movi	r3,63
1000cb9c:	1c63c83a 	sub	r17,r3,r17
1000cba0:	1444983a 	sll	r2,r2,r17
1000cba4:	1420b03a 	or	r16,r2,r16
1000cba8:	8020c03a 	cmpne	r16,r16,zero
1000cbac:	8120b03a 	or	r16,r16,r4
1000cbb0:	000b883a 	mov	r5,zero
1000cbb4:	0023883a 	mov	r17,zero
1000cbb8:	003f1706 	br	1000c818 <__alt_data_end+0xf800c818>
1000cbbc:	18bff804 	addi	r2,r3,-32
1000cbc0:	01000804 	movi	r4,32
1000cbc4:	4084d83a 	srl	r2,r8,r2
1000cbc8:	19004626 	beq	r3,r4,1000cce4 <__subdf3+0x558>
1000cbcc:	01001004 	movi	r4,64
1000cbd0:	20c7c83a 	sub	r3,r4,r3
1000cbd4:	40d0983a 	sll	r8,r8,r3
1000cbd8:	418cb03a 	or	r6,r8,r6
1000cbdc:	300cc03a 	cmpne	r6,r6,zero
1000cbe0:	308cb03a 	or	r6,r6,r2
1000cbe4:	0007883a 	mov	r3,zero
1000cbe8:	003f6506 	br	1000c980 <__alt_data_end+0xf800c980>
1000cbec:	88002b26 	beq	r17,zero,1000cc9c <__subdf3+0x510>
1000cbf0:	0101ffc4 	movi	r4,2047
1000cbf4:	11002f26 	beq	r2,r4,1000ccb4 <__subdf3+0x528>
1000cbf8:	00c7c83a 	sub	r3,zero,r3
1000cbfc:	29402034 	orhi	r5,r5,128
1000cc00:	01000e04 	movi	r4,56
1000cc04:	20c08516 	blt	r4,r3,1000ce1c <__subdf3+0x690>
1000cc08:	010007c4 	movi	r4,31
1000cc0c:	20c0cd16 	blt	r4,r3,1000cf44 <__subdf3+0x7b8>
1000cc10:	01000804 	movi	r4,32
1000cc14:	20c9c83a 	sub	r4,r4,r3
1000cc18:	2914983a 	sll	r10,r5,r4
1000cc1c:	80d2d83a 	srl	r9,r16,r3
1000cc20:	8108983a 	sll	r4,r16,r4
1000cc24:	28cad83a 	srl	r5,r5,r3
1000cc28:	5252b03a 	or	r9,r10,r9
1000cc2c:	2006c03a 	cmpne	r3,r4,zero
1000cc30:	48e0b03a 	or	r16,r9,r3
1000cc34:	3421c83a 	sub	r16,r6,r16
1000cc38:	414bc83a 	sub	r5,r8,r5
1000cc3c:	340d803a 	cmpltu	r6,r6,r16
1000cc40:	298bc83a 	sub	r5,r5,r6
1000cc44:	1023883a 	mov	r17,r2
1000cc48:	3825883a 	mov	r18,r7
1000cc4c:	003f5106 	br	1000c994 <__alt_data_end+0xf800c994>
1000cc50:	9886b03a 	or	r3,r19,r2
1000cc54:	18001c1e 	bne	r3,zero,1000ccc8 <__subdf3+0x53c>
1000cc58:	0013883a 	mov	r9,zero
1000cc5c:	000b883a 	mov	r5,zero
1000cc60:	0021883a 	mov	r16,zero
1000cc64:	0023883a 	mov	r17,zero
1000cc68:	003f6d06 	br	1000ca20 <__alt_data_end+0xf800ca20>
1000cc6c:	008007c4 	movi	r2,31
1000cc70:	10c03c16 	blt	r2,r3,1000cd64 <__subdf3+0x5d8>
1000cc74:	00800804 	movi	r2,32
1000cc78:	10c5c83a 	sub	r2,r2,r3
1000cc7c:	30c8d83a 	srl	r4,r6,r3
1000cc80:	408e983a 	sll	r7,r8,r2
1000cc84:	3084983a 	sll	r2,r6,r2
1000cc88:	40c6d83a 	srl	r3,r8,r3
1000cc8c:	3908b03a 	or	r4,r7,r4
1000cc90:	1004c03a 	cmpne	r2,r2,zero
1000cc94:	208cb03a 	or	r6,r4,r2
1000cc98:	003f1506 	br	1000c8f0 <__alt_data_end+0xf800c8f0>
1000cc9c:	2c08b03a 	or	r4,r5,r16
1000cca0:	20000426 	beq	r4,zero,1000ccb4 <__subdf3+0x528>
1000cca4:	00c6303a 	nor	r3,zero,r3
1000cca8:	183fe226 	beq	r3,zero,1000cc34 <__alt_data_end+0xf800cc34>
1000ccac:	0101ffc4 	movi	r4,2047
1000ccb0:	113fd31e 	bne	r2,r4,1000cc00 <__alt_data_end+0xf800cc00>
1000ccb4:	400b883a 	mov	r5,r8
1000ccb8:	3021883a 	mov	r16,r6
1000ccbc:	1023883a 	mov	r17,r2
1000ccc0:	3825883a 	mov	r18,r7
1000ccc4:	003ed406 	br	1000c818 <__alt_data_end+0xf800c818>
1000ccc8:	1021883a 	mov	r16,r2
1000cccc:	003f3606 	br	1000c9a8 <__alt_data_end+0xf800c9a8>
1000ccd0:	0081ffc4 	movi	r2,2047
1000ccd4:	88bf011e 	bne	r17,r2,1000c8dc <__alt_data_end+0xf800c8dc>
1000ccd8:	003ecf06 	br	1000c818 <__alt_data_end+0xf800c818>
1000ccdc:	0005883a 	mov	r2,zero
1000cce0:	003fb006 	br	1000cba4 <__alt_data_end+0xf800cba4>
1000cce4:	0011883a 	mov	r8,zero
1000cce8:	003fbb06 	br	1000cbd8 <__alt_data_end+0xf800cbd8>
1000ccec:	2c04b03a 	or	r2,r5,r16
1000ccf0:	88007f1e 	bne	r17,zero,1000cef0 <__subdf3+0x764>
1000ccf4:	1000a926 	beq	r2,zero,1000cf9c <__subdf3+0x810>
1000ccf8:	4184b03a 	or	r2,r8,r6
1000ccfc:	103ec626 	beq	r2,zero,1000c818 <__alt_data_end+0xf800c818>
1000cd00:	340d883a 	add	r6,r6,r16
1000cd04:	414b883a 	add	r5,r8,r5
1000cd08:	3421803a 	cmpltu	r16,r6,r16
1000cd0c:	2c0b883a 	add	r5,r5,r16
1000cd10:	2880202c 	andhi	r2,r5,128
1000cd14:	1000bb26 	beq	r2,zero,1000d004 <__subdf3+0x878>
1000cd18:	00bfe034 	movhi	r2,65408
1000cd1c:	10bfffc4 	addi	r2,r2,-1
1000cd20:	288a703a 	and	r5,r5,r2
1000cd24:	3021883a 	mov	r16,r6
1000cd28:	1823883a 	mov	r17,r3
1000cd2c:	003eba06 	br	1000c818 <__alt_data_end+0xf800c818>
1000cd30:	2c04b03a 	or	r2,r5,r16
1000cd34:	8800311e 	bne	r17,zero,1000cdfc <__subdf3+0x670>
1000cd38:	1000451e 	bne	r2,zero,1000ce50 <__subdf3+0x6c4>
1000cd3c:	4184b03a 	or	r2,r8,r6
1000cd40:	10000426 	beq	r2,zero,1000cd54 <__subdf3+0x5c8>
1000cd44:	400b883a 	mov	r5,r8
1000cd48:	3021883a 	mov	r16,r6
1000cd4c:	3825883a 	mov	r18,r7
1000cd50:	003eb106 	br	1000c818 <__alt_data_end+0xf800c818>
1000cd54:	0013883a 	mov	r9,zero
1000cd58:	000b883a 	mov	r5,zero
1000cd5c:	0021883a 	mov	r16,zero
1000cd60:	003f2f06 	br	1000ca20 <__alt_data_end+0xf800ca20>
1000cd64:	18bff804 	addi	r2,r3,-32
1000cd68:	01000804 	movi	r4,32
1000cd6c:	4084d83a 	srl	r2,r8,r2
1000cd70:	19007226 	beq	r3,r4,1000cf3c <__subdf3+0x7b0>
1000cd74:	01001004 	movi	r4,64
1000cd78:	20c7c83a 	sub	r3,r4,r3
1000cd7c:	40d0983a 	sll	r8,r8,r3
1000cd80:	418cb03a 	or	r6,r8,r6
1000cd84:	300cc03a 	cmpne	r6,r6,zero
1000cd88:	308cb03a 	or	r6,r6,r2
1000cd8c:	0007883a 	mov	r3,zero
1000cd90:	003ed706 	br	1000c8f0 <__alt_data_end+0xf800c8f0>
1000cd94:	8800291e 	bne	r17,zero,1000ce3c <__subdf3+0x6b0>
1000cd98:	2c08b03a 	or	r4,r5,r16
1000cd9c:	20005026 	beq	r4,zero,1000cee0 <__subdf3+0x754>
1000cda0:	00c6303a 	nor	r3,zero,r3
1000cda4:	18000f26 	beq	r3,zero,1000cde4 <__subdf3+0x658>
1000cda8:	0101ffc4 	movi	r4,2047
1000cdac:	11004c26 	beq	r2,r4,1000cee0 <__subdf3+0x754>
1000cdb0:	01000e04 	movi	r4,56
1000cdb4:	20c07516 	blt	r4,r3,1000cf8c <__subdf3+0x800>
1000cdb8:	010007c4 	movi	r4,31
1000cdbc:	20c08316 	blt	r4,r3,1000cfcc <__subdf3+0x840>
1000cdc0:	01000804 	movi	r4,32
1000cdc4:	20c9c83a 	sub	r4,r4,r3
1000cdc8:	2914983a 	sll	r10,r5,r4
1000cdcc:	80ced83a 	srl	r7,r16,r3
1000cdd0:	8108983a 	sll	r4,r16,r4
1000cdd4:	28cad83a 	srl	r5,r5,r3
1000cdd8:	51ceb03a 	or	r7,r10,r7
1000cddc:	2006c03a 	cmpne	r3,r4,zero
1000cde0:	38e0b03a 	or	r16,r7,r3
1000cde4:	81a1883a 	add	r16,r16,r6
1000cde8:	2a0b883a 	add	r5,r5,r8
1000cdec:	818d803a 	cmpltu	r6,r16,r6
1000cdf0:	298b883a 	add	r5,r5,r6
1000cdf4:	1023883a 	mov	r17,r2
1000cdf8:	003ec206 	br	1000c904 <__alt_data_end+0xf800c904>
1000cdfc:	1000221e 	bne	r2,zero,1000ce88 <__subdf3+0x6fc>
1000ce00:	4184b03a 	or	r2,r8,r6
1000ce04:	10005b26 	beq	r2,zero,1000cf74 <__subdf3+0x7e8>
1000ce08:	400b883a 	mov	r5,r8
1000ce0c:	3021883a 	mov	r16,r6
1000ce10:	3825883a 	mov	r18,r7
1000ce14:	0441ffc4 	movi	r17,2047
1000ce18:	003e7f06 	br	1000c818 <__alt_data_end+0xf800c818>
1000ce1c:	2c20b03a 	or	r16,r5,r16
1000ce20:	8020c03a 	cmpne	r16,r16,zero
1000ce24:	000b883a 	mov	r5,zero
1000ce28:	003f8206 	br	1000cc34 <__alt_data_end+0xf800cc34>
1000ce2c:	1023883a 	mov	r17,r2
1000ce30:	000b883a 	mov	r5,zero
1000ce34:	0021883a 	mov	r16,zero
1000ce38:	003ef906 	br	1000ca20 <__alt_data_end+0xf800ca20>
1000ce3c:	0101ffc4 	movi	r4,2047
1000ce40:	11002726 	beq	r2,r4,1000cee0 <__subdf3+0x754>
1000ce44:	00c7c83a 	sub	r3,zero,r3
1000ce48:	29402034 	orhi	r5,r5,128
1000ce4c:	003fd806 	br	1000cdb0 <__alt_data_end+0xf800cdb0>
1000ce50:	4184b03a 	or	r2,r8,r6
1000ce54:	103e7026 	beq	r2,zero,1000c818 <__alt_data_end+0xf800c818>
1000ce58:	8185c83a 	sub	r2,r16,r6
1000ce5c:	8089803a 	cmpltu	r4,r16,r2
1000ce60:	2a07c83a 	sub	r3,r5,r8
1000ce64:	1907c83a 	sub	r3,r3,r4
1000ce68:	1900202c 	andhi	r4,r3,128
1000ce6c:	20005226 	beq	r4,zero,1000cfb8 <__subdf3+0x82c>
1000ce70:	3421c83a 	sub	r16,r6,r16
1000ce74:	414bc83a 	sub	r5,r8,r5
1000ce78:	340d803a 	cmpltu	r6,r6,r16
1000ce7c:	298bc83a 	sub	r5,r5,r6
1000ce80:	3825883a 	mov	r18,r7
1000ce84:	003e6406 	br	1000c818 <__alt_data_end+0xf800c818>
1000ce88:	4184b03a 	or	r2,r8,r6
1000ce8c:	10002926 	beq	r2,zero,1000cf34 <__subdf3+0x7a8>
1000ce90:	2804d0fa 	srli	r2,r5,3
1000ce94:	8020d0fa 	srli	r16,r16,3
1000ce98:	280a977a 	slli	r5,r5,29
1000ce9c:	10c0022c 	andhi	r3,r2,8
1000cea0:	2c20b03a 	or	r16,r5,r16
1000cea4:	18000826 	beq	r3,zero,1000cec8 <__subdf3+0x73c>
1000cea8:	4006d0fa 	srli	r3,r8,3
1000ceac:	1900022c 	andhi	r4,r3,8
1000ceb0:	2000051e 	bne	r4,zero,1000cec8 <__subdf3+0x73c>
1000ceb4:	300cd0fa 	srli	r6,r6,3
1000ceb8:	4010977a 	slli	r8,r8,29
1000cebc:	1805883a 	mov	r2,r3
1000cec0:	3825883a 	mov	r18,r7
1000cec4:	41a0b03a 	or	r16,r8,r6
1000cec8:	800ad77a 	srli	r5,r16,29
1000cecc:	100490fa 	slli	r2,r2,3
1000ced0:	802090fa 	slli	r16,r16,3
1000ced4:	0441ffc4 	movi	r17,2047
1000ced8:	288ab03a 	or	r5,r5,r2
1000cedc:	003e4e06 	br	1000c818 <__alt_data_end+0xf800c818>
1000cee0:	400b883a 	mov	r5,r8
1000cee4:	3021883a 	mov	r16,r6
1000cee8:	1023883a 	mov	r17,r2
1000ceec:	003e4a06 	br	1000c818 <__alt_data_end+0xf800c818>
1000cef0:	10002d26 	beq	r2,zero,1000cfa8 <__subdf3+0x81c>
1000cef4:	4184b03a 	or	r2,r8,r6
1000cef8:	10000e26 	beq	r2,zero,1000cf34 <__subdf3+0x7a8>
1000cefc:	2804d0fa 	srli	r2,r5,3
1000cf00:	8020d0fa 	srli	r16,r16,3
1000cf04:	280a977a 	slli	r5,r5,29
1000cf08:	10c0022c 	andhi	r3,r2,8
1000cf0c:	2c20b03a 	or	r16,r5,r16
1000cf10:	183fed26 	beq	r3,zero,1000cec8 <__alt_data_end+0xf800cec8>
1000cf14:	4006d0fa 	srli	r3,r8,3
1000cf18:	1900022c 	andhi	r4,r3,8
1000cf1c:	203fea1e 	bne	r4,zero,1000cec8 <__alt_data_end+0xf800cec8>
1000cf20:	300cd0fa 	srli	r6,r6,3
1000cf24:	4010977a 	slli	r8,r8,29
1000cf28:	1805883a 	mov	r2,r3
1000cf2c:	41a0b03a 	or	r16,r8,r6
1000cf30:	003fe506 	br	1000cec8 <__alt_data_end+0xf800cec8>
1000cf34:	0441ffc4 	movi	r17,2047
1000cf38:	003e3706 	br	1000c818 <__alt_data_end+0xf800c818>
1000cf3c:	0011883a 	mov	r8,zero
1000cf40:	003f8f06 	br	1000cd80 <__alt_data_end+0xf800cd80>
1000cf44:	193ff804 	addi	r4,r3,-32
1000cf48:	02400804 	movi	r9,32
1000cf4c:	2908d83a 	srl	r4,r5,r4
1000cf50:	1a402a26 	beq	r3,r9,1000cffc <__subdf3+0x870>
1000cf54:	02401004 	movi	r9,64
1000cf58:	48c7c83a 	sub	r3,r9,r3
1000cf5c:	28ca983a 	sll	r5,r5,r3
1000cf60:	2c20b03a 	or	r16,r5,r16
1000cf64:	8020c03a 	cmpne	r16,r16,zero
1000cf68:	8120b03a 	or	r16,r16,r4
1000cf6c:	000b883a 	mov	r5,zero
1000cf70:	003f3006 	br	1000cc34 <__alt_data_end+0xf800cc34>
1000cf74:	0013883a 	mov	r9,zero
1000cf78:	01402034 	movhi	r5,128
1000cf7c:	297fffc4 	addi	r5,r5,-1
1000cf80:	043ffe04 	movi	r16,-8
1000cf84:	0441ffc4 	movi	r17,2047
1000cf88:	003ea506 	br	1000ca20 <__alt_data_end+0xf800ca20>
1000cf8c:	2c20b03a 	or	r16,r5,r16
1000cf90:	8020c03a 	cmpne	r16,r16,zero
1000cf94:	000b883a 	mov	r5,zero
1000cf98:	003f9206 	br	1000cde4 <__alt_data_end+0xf800cde4>
1000cf9c:	400b883a 	mov	r5,r8
1000cfa0:	3021883a 	mov	r16,r6
1000cfa4:	003e1c06 	br	1000c818 <__alt_data_end+0xf800c818>
1000cfa8:	400b883a 	mov	r5,r8
1000cfac:	3021883a 	mov	r16,r6
1000cfb0:	0441ffc4 	movi	r17,2047
1000cfb4:	003e1806 	br	1000c818 <__alt_data_end+0xf800c818>
1000cfb8:	1888b03a 	or	r4,r3,r2
1000cfbc:	203f6526 	beq	r4,zero,1000cd54 <__alt_data_end+0xf800cd54>
1000cfc0:	180b883a 	mov	r5,r3
1000cfc4:	1021883a 	mov	r16,r2
1000cfc8:	003e1306 	br	1000c818 <__alt_data_end+0xf800c818>
1000cfcc:	193ff804 	addi	r4,r3,-32
1000cfd0:	01c00804 	movi	r7,32
1000cfd4:	2908d83a 	srl	r4,r5,r4
1000cfd8:	19c00c26 	beq	r3,r7,1000d00c <__subdf3+0x880>
1000cfdc:	01c01004 	movi	r7,64
1000cfe0:	38c7c83a 	sub	r3,r7,r3
1000cfe4:	28ca983a 	sll	r5,r5,r3
1000cfe8:	2c20b03a 	or	r16,r5,r16
1000cfec:	8020c03a 	cmpne	r16,r16,zero
1000cff0:	8120b03a 	or	r16,r16,r4
1000cff4:	000b883a 	mov	r5,zero
1000cff8:	003f7a06 	br	1000cde4 <__alt_data_end+0xf800cde4>
1000cffc:	000b883a 	mov	r5,zero
1000d000:	003fd706 	br	1000cf60 <__alt_data_end+0xf800cf60>
1000d004:	3021883a 	mov	r16,r6
1000d008:	003e0306 	br	1000c818 <__alt_data_end+0xf800c818>
1000d00c:	000b883a 	mov	r5,zero
1000d010:	003ff506 	br	1000cfe8 <__alt_data_end+0xf800cfe8>

1000d014 <__fixdfsi>:
1000d014:	2806d53a 	srli	r3,r5,20
1000d018:	00800434 	movhi	r2,16
1000d01c:	10bfffc4 	addi	r2,r2,-1
1000d020:	0180ff84 	movi	r6,1022
1000d024:	18c1ffcc 	andi	r3,r3,2047
1000d028:	2884703a 	and	r2,r5,r2
1000d02c:	280ad7fa 	srli	r5,r5,31
1000d030:	30c0120e 	bge	r6,r3,1000d07c <__fixdfsi+0x68>
1000d034:	01810744 	movi	r6,1053
1000d038:	30c00c16 	blt	r6,r3,1000d06c <__fixdfsi+0x58>
1000d03c:	01810cc4 	movi	r6,1075
1000d040:	30cdc83a 	sub	r6,r6,r3
1000d044:	01c007c4 	movi	r7,31
1000d048:	10800434 	orhi	r2,r2,16
1000d04c:	39800d16 	blt	r7,r6,1000d084 <__fixdfsi+0x70>
1000d050:	18fefb44 	addi	r3,r3,-1043
1000d054:	2188d83a 	srl	r4,r4,r6
1000d058:	10c4983a 	sll	r2,r2,r3
1000d05c:	2084b03a 	or	r2,r4,r2
1000d060:	28000726 	beq	r5,zero,1000d080 <__fixdfsi+0x6c>
1000d064:	0085c83a 	sub	r2,zero,r2
1000d068:	f800283a 	ret
1000d06c:	00a00034 	movhi	r2,32768
1000d070:	10bfffc4 	addi	r2,r2,-1
1000d074:	2885883a 	add	r2,r5,r2
1000d078:	f800283a 	ret
1000d07c:	0005883a 	mov	r2,zero
1000d080:	f800283a 	ret
1000d084:	010104c4 	movi	r4,1043
1000d088:	20c7c83a 	sub	r3,r4,r3
1000d08c:	10c4d83a 	srl	r2,r2,r3
1000d090:	003ff306 	br	1000d060 <__alt_data_end+0xf800d060>

1000d094 <__floatsidf>:
1000d094:	defffd04 	addi	sp,sp,-12
1000d098:	dc000015 	stw	r16,0(sp)
1000d09c:	dfc00215 	stw	ra,8(sp)
1000d0a0:	dc400115 	stw	r17,4(sp)
1000d0a4:	2021883a 	mov	r16,r4
1000d0a8:	20002926 	beq	r4,zero,1000d150 <__floatsidf+0xbc>
1000d0ac:	2022d7fa 	srli	r17,r4,31
1000d0b0:	88000126 	beq	r17,zero,1000d0b8 <__floatsidf+0x24>
1000d0b4:	0121c83a 	sub	r16,zero,r4
1000d0b8:	8009883a 	mov	r4,r16
1000d0bc:	000d2040 	call	1000d204 <__clzsi2>
1000d0c0:	01810784 	movi	r6,1054
1000d0c4:	00c00284 	movi	r3,10
1000d0c8:	308dc83a 	sub	r6,r6,r2
1000d0cc:	1880150e 	bge	r3,r2,1000d124 <__floatsidf+0x90>
1000d0d0:	113ffd44 	addi	r4,r2,-11
1000d0d4:	8108983a 	sll	r4,r16,r4
1000d0d8:	00800434 	movhi	r2,16
1000d0dc:	10bfffc4 	addi	r2,r2,-1
1000d0e0:	3181ffcc 	andi	r6,r6,2047
1000d0e4:	2088703a 	and	r4,r4,r2
1000d0e8:	880b883a 	mov	r5,r17
1000d0ec:	0005883a 	mov	r2,zero
1000d0f0:	300c953a 	slli	r6,r6,20
1000d0f4:	29403fcc 	andi	r5,r5,255
1000d0f8:	280a97fa 	slli	r5,r5,31
1000d0fc:	00c00434 	movhi	r3,16
1000d100:	18ffffc4 	addi	r3,r3,-1
1000d104:	20c8703a 	and	r4,r4,r3
1000d108:	2186b03a 	or	r3,r4,r6
1000d10c:	1946b03a 	or	r3,r3,r5
1000d110:	dfc00217 	ldw	ra,8(sp)
1000d114:	dc400117 	ldw	r17,4(sp)
1000d118:	dc000017 	ldw	r16,0(sp)
1000d11c:	dec00304 	addi	sp,sp,12
1000d120:	f800283a 	ret
1000d124:	010002c4 	movi	r4,11
1000d128:	2089c83a 	sub	r4,r4,r2
1000d12c:	8108d83a 	srl	r4,r16,r4
1000d130:	10800544 	addi	r2,r2,21
1000d134:	00c00434 	movhi	r3,16
1000d138:	18ffffc4 	addi	r3,r3,-1
1000d13c:	8084983a 	sll	r2,r16,r2
1000d140:	20c8703a 	and	r4,r4,r3
1000d144:	3181ffcc 	andi	r6,r6,2047
1000d148:	880b883a 	mov	r5,r17
1000d14c:	003fe806 	br	1000d0f0 <__alt_data_end+0xf800d0f0>
1000d150:	000b883a 	mov	r5,zero
1000d154:	000d883a 	mov	r6,zero
1000d158:	0009883a 	mov	r4,zero
1000d15c:	0005883a 	mov	r2,zero
1000d160:	003fe306 	br	1000d0f0 <__alt_data_end+0xf800d0f0>

1000d164 <__floatunsidf>:
1000d164:	defffe04 	addi	sp,sp,-8
1000d168:	dc000015 	stw	r16,0(sp)
1000d16c:	dfc00115 	stw	ra,4(sp)
1000d170:	2021883a 	mov	r16,r4
1000d174:	20001f26 	beq	r4,zero,1000d1f4 <__floatunsidf+0x90>
1000d178:	000d2040 	call	1000d204 <__clzsi2>
1000d17c:	01010784 	movi	r4,1054
1000d180:	00c00284 	movi	r3,10
1000d184:	2089c83a 	sub	r4,r4,r2
1000d188:	1880100e 	bge	r3,r2,1000d1cc <__floatunsidf+0x68>
1000d18c:	117ffd44 	addi	r5,r2,-11
1000d190:	814a983a 	sll	r5,r16,r5
1000d194:	00800434 	movhi	r2,16
1000d198:	10bfffc4 	addi	r2,r2,-1
1000d19c:	2101ffcc 	andi	r4,r4,2047
1000d1a0:	288a703a 	and	r5,r5,r2
1000d1a4:	0005883a 	mov	r2,zero
1000d1a8:	2008953a 	slli	r4,r4,20
1000d1ac:	00c00434 	movhi	r3,16
1000d1b0:	18ffffc4 	addi	r3,r3,-1
1000d1b4:	28c6703a 	and	r3,r5,r3
1000d1b8:	1906b03a 	or	r3,r3,r4
1000d1bc:	dfc00117 	ldw	ra,4(sp)
1000d1c0:	dc000017 	ldw	r16,0(sp)
1000d1c4:	dec00204 	addi	sp,sp,8
1000d1c8:	f800283a 	ret
1000d1cc:	014002c4 	movi	r5,11
1000d1d0:	288bc83a 	sub	r5,r5,r2
1000d1d4:	814ad83a 	srl	r5,r16,r5
1000d1d8:	10800544 	addi	r2,r2,21
1000d1dc:	00c00434 	movhi	r3,16
1000d1e0:	18ffffc4 	addi	r3,r3,-1
1000d1e4:	8084983a 	sll	r2,r16,r2
1000d1e8:	28ca703a 	and	r5,r5,r3
1000d1ec:	2101ffcc 	andi	r4,r4,2047
1000d1f0:	003fed06 	br	1000d1a8 <__alt_data_end+0xf800d1a8>
1000d1f4:	0009883a 	mov	r4,zero
1000d1f8:	000b883a 	mov	r5,zero
1000d1fc:	0005883a 	mov	r2,zero
1000d200:	003fe906 	br	1000d1a8 <__alt_data_end+0xf800d1a8>

1000d204 <__clzsi2>:
1000d204:	00bfffd4 	movui	r2,65535
1000d208:	11000b36 	bltu	r2,r4,1000d238 <__clzsi2+0x34>
1000d20c:	00803fc4 	movi	r2,255
1000d210:	11001e2e 	bgeu	r2,r4,1000d28c <__clzsi2+0x88>
1000d214:	00c00204 	movi	r3,8
1000d218:	20c8d83a 	srl	r4,r4,r3
1000d21c:	00c40074 	movhi	r3,4097
1000d220:	18fec704 	addi	r3,r3,-1252
1000d224:	00800604 	movi	r2,24
1000d228:	1909883a 	add	r4,r3,r4
1000d22c:	20c00003 	ldbu	r3,0(r4)
1000d230:	10c5c83a 	sub	r2,r2,r3
1000d234:	f800283a 	ret
1000d238:	00804034 	movhi	r2,256
1000d23c:	10bfffc4 	addi	r2,r2,-1
1000d240:	11000936 	bltu	r2,r4,1000d268 <__clzsi2+0x64>
1000d244:	00800404 	movi	r2,16
1000d248:	1007883a 	mov	r3,r2
1000d24c:	20c8d83a 	srl	r4,r4,r3
1000d250:	00c40074 	movhi	r3,4097
1000d254:	18fec704 	addi	r3,r3,-1252
1000d258:	1909883a 	add	r4,r3,r4
1000d25c:	20c00003 	ldbu	r3,0(r4)
1000d260:	10c5c83a 	sub	r2,r2,r3
1000d264:	f800283a 	ret
1000d268:	00c00604 	movi	r3,24
1000d26c:	20c8d83a 	srl	r4,r4,r3
1000d270:	00c40074 	movhi	r3,4097
1000d274:	18fec704 	addi	r3,r3,-1252
1000d278:	00800204 	movi	r2,8
1000d27c:	1909883a 	add	r4,r3,r4
1000d280:	20c00003 	ldbu	r3,0(r4)
1000d284:	10c5c83a 	sub	r2,r2,r3
1000d288:	f800283a 	ret
1000d28c:	0007883a 	mov	r3,zero
1000d290:	20c8d83a 	srl	r4,r4,r3
1000d294:	00c40074 	movhi	r3,4097
1000d298:	18fec704 	addi	r3,r3,-1252
1000d29c:	00800804 	movi	r2,32
1000d2a0:	1909883a 	add	r4,r3,r4
1000d2a4:	20c00003 	ldbu	r3,0(r4)
1000d2a8:	10c5c83a 	sub	r2,r2,r3
1000d2ac:	f800283a 	ret

1000d2b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d2b0:	defffe04 	addi	sp,sp,-8
1000d2b4:	dfc00115 	stw	ra,4(sp)
1000d2b8:	df000015 	stw	fp,0(sp)
1000d2bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d2c0:	00840074 	movhi	r2,4097
1000d2c4:	1085cc04 	addi	r2,r2,5936
1000d2c8:	10800017 	ldw	r2,0(r2)
1000d2cc:	10000526 	beq	r2,zero,1000d2e4 <alt_get_errno+0x34>
1000d2d0:	00840074 	movhi	r2,4097
1000d2d4:	1085cc04 	addi	r2,r2,5936
1000d2d8:	10800017 	ldw	r2,0(r2)
1000d2dc:	103ee83a 	callr	r2
1000d2e0:	00000206 	br	1000d2ec <alt_get_errno+0x3c>
1000d2e4:	00840074 	movhi	r2,4097
1000d2e8:	108c9404 	addi	r2,r2,12880
}
1000d2ec:	e037883a 	mov	sp,fp
1000d2f0:	dfc00117 	ldw	ra,4(sp)
1000d2f4:	df000017 	ldw	fp,0(sp)
1000d2f8:	dec00204 	addi	sp,sp,8
1000d2fc:	f800283a 	ret

1000d300 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000d300:	defffb04 	addi	sp,sp,-20
1000d304:	dfc00415 	stw	ra,16(sp)
1000d308:	df000315 	stw	fp,12(sp)
1000d30c:	df000304 	addi	fp,sp,12
1000d310:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000d314:	e0bfff17 	ldw	r2,-4(fp)
1000d318:	10000816 	blt	r2,zero,1000d33c <close+0x3c>
1000d31c:	e13fff17 	ldw	r4,-4(fp)
1000d320:	01400304 	movi	r5,12
1000d324:	000ab040 	call	1000ab04 <__mulsi3>
1000d328:	1007883a 	mov	r3,r2
1000d32c:	00840074 	movhi	r2,4097
1000d330:	10814704 	addi	r2,r2,1308
1000d334:	1885883a 	add	r2,r3,r2
1000d338:	00000106 	br	1000d340 <close+0x40>
1000d33c:	0005883a 	mov	r2,zero
1000d340:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000d344:	e0bffd17 	ldw	r2,-12(fp)
1000d348:	10001826 	beq	r2,zero,1000d3ac <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000d34c:	e0bffd17 	ldw	r2,-12(fp)
1000d350:	10800017 	ldw	r2,0(r2)
1000d354:	10800417 	ldw	r2,16(r2)
1000d358:	10000626 	beq	r2,zero,1000d374 <close+0x74>
1000d35c:	e0bffd17 	ldw	r2,-12(fp)
1000d360:	10800017 	ldw	r2,0(r2)
1000d364:	10800417 	ldw	r2,16(r2)
1000d368:	e13ffd17 	ldw	r4,-12(fp)
1000d36c:	103ee83a 	callr	r2
1000d370:	00000106 	br	1000d378 <close+0x78>
1000d374:	0005883a 	mov	r2,zero
1000d378:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000d37c:	e13fff17 	ldw	r4,-4(fp)
1000d380:	000da940 	call	1000da94 <alt_release_fd>
    if (rval < 0)
1000d384:	e0bffe17 	ldw	r2,-8(fp)
1000d388:	1000060e 	bge	r2,zero,1000d3a4 <close+0xa4>
    {
      ALT_ERRNO = -rval;
1000d38c:	000d2b00 	call	1000d2b0 <alt_get_errno>
1000d390:	e0fffe17 	ldw	r3,-8(fp)
1000d394:	00c7c83a 	sub	r3,zero,r3
1000d398:	10c00015 	stw	r3,0(r2)
      return -1;
1000d39c:	00bfffc4 	movi	r2,-1
1000d3a0:	00000606 	br	1000d3bc <close+0xbc>
    }
    return 0;
1000d3a4:	0005883a 	mov	r2,zero
1000d3a8:	00000406 	br	1000d3bc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d3ac:	000d2b00 	call	1000d2b0 <alt_get_errno>
1000d3b0:	00c01444 	movi	r3,81
1000d3b4:	10c00015 	stw	r3,0(r2)
    return -1;
1000d3b8:	00bfffc4 	movi	r2,-1
  }
}
1000d3bc:	e037883a 	mov	sp,fp
1000d3c0:	dfc00117 	ldw	ra,4(sp)
1000d3c4:	df000017 	ldw	fp,0(sp)
1000d3c8:	dec00204 	addi	sp,sp,8
1000d3cc:	f800283a 	ret

1000d3d0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000d3d0:	defffc04 	addi	sp,sp,-16
1000d3d4:	df000315 	stw	fp,12(sp)
1000d3d8:	df000304 	addi	fp,sp,12
1000d3dc:	e13ffd15 	stw	r4,-12(fp)
1000d3e0:	e17ffe15 	stw	r5,-8(fp)
1000d3e4:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000d3e8:	e0bfff17 	ldw	r2,-4(fp)
}
1000d3ec:	e037883a 	mov	sp,fp
1000d3f0:	df000017 	ldw	fp,0(sp)
1000d3f4:	dec00104 	addi	sp,sp,4
1000d3f8:	f800283a 	ret

1000d3fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000d3fc:	defffa04 	addi	sp,sp,-24
1000d400:	dfc00515 	stw	ra,20(sp)
1000d404:	df000415 	stw	fp,16(sp)
1000d408:	df000404 	addi	fp,sp,16
1000d40c:	e13ffe15 	stw	r4,-8(fp)
1000d410:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000d414:	e0bfff17 	ldw	r2,-4(fp)
1000d418:	10800017 	ldw	r2,0(r2)
1000d41c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000d420:	e13ffe17 	ldw	r4,-8(fp)
1000d424:	0000b300 	call	10000b30 <strlen>
1000d428:	10800044 	addi	r2,r2,1
1000d42c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000d430:	00000d06 	br	1000d468 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000d434:	e0bffc17 	ldw	r2,-16(fp)
1000d438:	10c00217 	ldw	r3,8(r2)
1000d43c:	e0bffd17 	ldw	r2,-12(fp)
1000d440:	1809883a 	mov	r4,r3
1000d444:	e17ffe17 	ldw	r5,-8(fp)
1000d448:	100d883a 	mov	r6,r2
1000d44c:	000f5c40 	call	1000f5c4 <memcmp>
1000d450:	1000021e 	bne	r2,zero,1000d45c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000d454:	e0bffc17 	ldw	r2,-16(fp)
1000d458:	00000706 	br	1000d478 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000d45c:	e0bffc17 	ldw	r2,-16(fp)
1000d460:	10800017 	ldw	r2,0(r2)
1000d464:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000d468:	e0fffc17 	ldw	r3,-16(fp)
1000d46c:	e0bfff17 	ldw	r2,-4(fp)
1000d470:	18bff01e 	bne	r3,r2,1000d434 <__alt_data_end+0xf800d434>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000d474:	0005883a 	mov	r2,zero
}
1000d478:	e037883a 	mov	sp,fp
1000d47c:	dfc00117 	ldw	ra,4(sp)
1000d480:	df000017 	ldw	fp,0(sp)
1000d484:	dec00204 	addi	sp,sp,8
1000d488:	f800283a 	ret

1000d48c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d48c:	defffe04 	addi	sp,sp,-8
1000d490:	dfc00115 	stw	ra,4(sp)
1000d494:	df000015 	stw	fp,0(sp)
1000d498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d49c:	00840074 	movhi	r2,4097
1000d4a0:	1085cc04 	addi	r2,r2,5936
1000d4a4:	10800017 	ldw	r2,0(r2)
1000d4a8:	10000526 	beq	r2,zero,1000d4c0 <alt_get_errno+0x34>
1000d4ac:	00840074 	movhi	r2,4097
1000d4b0:	1085cc04 	addi	r2,r2,5936
1000d4b4:	10800017 	ldw	r2,0(r2)
1000d4b8:	103ee83a 	callr	r2
1000d4bc:	00000206 	br	1000d4c8 <alt_get_errno+0x3c>
1000d4c0:	00840074 	movhi	r2,4097
1000d4c4:	108c9404 	addi	r2,r2,12880
}
1000d4c8:	e037883a 	mov	sp,fp
1000d4cc:	dfc00117 	ldw	ra,4(sp)
1000d4d0:	df000017 	ldw	fp,0(sp)
1000d4d4:	dec00204 	addi	sp,sp,8
1000d4d8:	f800283a 	ret

1000d4dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000d4dc:	defffb04 	addi	sp,sp,-20
1000d4e0:	dfc00415 	stw	ra,16(sp)
1000d4e4:	df000315 	stw	fp,12(sp)
1000d4e8:	df000304 	addi	fp,sp,12
1000d4ec:	e13ffe15 	stw	r4,-8(fp)
1000d4f0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d4f4:	e0bffe17 	ldw	r2,-8(fp)
1000d4f8:	10000816 	blt	r2,zero,1000d51c <fstat+0x40>
1000d4fc:	e13ffe17 	ldw	r4,-8(fp)
1000d500:	01400304 	movi	r5,12
1000d504:	000ab040 	call	1000ab04 <__mulsi3>
1000d508:	1007883a 	mov	r3,r2
1000d50c:	00840074 	movhi	r2,4097
1000d510:	10814704 	addi	r2,r2,1308
1000d514:	1885883a 	add	r2,r3,r2
1000d518:	00000106 	br	1000d520 <fstat+0x44>
1000d51c:	0005883a 	mov	r2,zero
1000d520:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000d524:	e0bffd17 	ldw	r2,-12(fp)
1000d528:	10001026 	beq	r2,zero,1000d56c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000d52c:	e0bffd17 	ldw	r2,-12(fp)
1000d530:	10800017 	ldw	r2,0(r2)
1000d534:	10800817 	ldw	r2,32(r2)
1000d538:	10000726 	beq	r2,zero,1000d558 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000d53c:	e0bffd17 	ldw	r2,-12(fp)
1000d540:	10800017 	ldw	r2,0(r2)
1000d544:	10800817 	ldw	r2,32(r2)
1000d548:	e13ffd17 	ldw	r4,-12(fp)
1000d54c:	e17fff17 	ldw	r5,-4(fp)
1000d550:	103ee83a 	callr	r2
1000d554:	00000906 	br	1000d57c <fstat+0xa0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000d558:	e0bfff17 	ldw	r2,-4(fp)
1000d55c:	00c80004 	movi	r3,8192
1000d560:	10c00115 	stw	r3,4(r2)
      return 0;
1000d564:	0005883a 	mov	r2,zero
1000d568:	00000406 	br	1000d57c <fstat+0xa0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d56c:	000d48c0 	call	1000d48c <alt_get_errno>
1000d570:	00c01444 	movi	r3,81
1000d574:	10c00015 	stw	r3,0(r2)
    return -1;
1000d578:	00bfffc4 	movi	r2,-1
  }
}
1000d57c:	e037883a 	mov	sp,fp
1000d580:	dfc00117 	ldw	ra,4(sp)
1000d584:	df000017 	ldw	fp,0(sp)
1000d588:	dec00204 	addi	sp,sp,8
1000d58c:	f800283a 	ret

1000d590 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d590:	defffe04 	addi	sp,sp,-8
1000d594:	dfc00115 	stw	ra,4(sp)
1000d598:	df000015 	stw	fp,0(sp)
1000d59c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d5a0:	00840074 	movhi	r2,4097
1000d5a4:	1085cc04 	addi	r2,r2,5936
1000d5a8:	10800017 	ldw	r2,0(r2)
1000d5ac:	10000526 	beq	r2,zero,1000d5c4 <alt_get_errno+0x34>
1000d5b0:	00840074 	movhi	r2,4097
1000d5b4:	1085cc04 	addi	r2,r2,5936
1000d5b8:	10800017 	ldw	r2,0(r2)
1000d5bc:	103ee83a 	callr	r2
1000d5c0:	00000206 	br	1000d5cc <alt_get_errno+0x3c>
1000d5c4:	00840074 	movhi	r2,4097
1000d5c8:	108c9404 	addi	r2,r2,12880
}
1000d5cc:	e037883a 	mov	sp,fp
1000d5d0:	dfc00117 	ldw	ra,4(sp)
1000d5d4:	df000017 	ldw	fp,0(sp)
1000d5d8:	dec00204 	addi	sp,sp,8
1000d5dc:	f800283a 	ret

1000d5e0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000d5e0:	deffed04 	addi	sp,sp,-76
1000d5e4:	dfc01215 	stw	ra,72(sp)
1000d5e8:	df001115 	stw	fp,68(sp)
1000d5ec:	df001104 	addi	fp,sp,68
1000d5f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d5f4:	e0bfff17 	ldw	r2,-4(fp)
1000d5f8:	10000816 	blt	r2,zero,1000d61c <isatty+0x3c>
1000d5fc:	e13fff17 	ldw	r4,-4(fp)
1000d600:	01400304 	movi	r5,12
1000d604:	000ab040 	call	1000ab04 <__mulsi3>
1000d608:	1007883a 	mov	r3,r2
1000d60c:	00840074 	movhi	r2,4097
1000d610:	10814704 	addi	r2,r2,1308
1000d614:	1885883a 	add	r2,r3,r2
1000d618:	00000106 	br	1000d620 <isatty+0x40>
1000d61c:	0005883a 	mov	r2,zero
1000d620:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000d624:	e0bfef17 	ldw	r2,-68(fp)
1000d628:	10000e26 	beq	r2,zero,1000d664 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000d62c:	e0bfef17 	ldw	r2,-68(fp)
1000d630:	10800017 	ldw	r2,0(r2)
1000d634:	10800817 	ldw	r2,32(r2)
1000d638:	1000021e 	bne	r2,zero,1000d644 <isatty+0x64>
    {
      return 1;
1000d63c:	00800044 	movi	r2,1
1000d640:	00000c06 	br	1000d674 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000d644:	e0bff004 	addi	r2,fp,-64
1000d648:	e13fff17 	ldw	r4,-4(fp)
1000d64c:	100b883a 	mov	r5,r2
1000d650:	000d4dc0 	call	1000d4dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000d654:	e0bff117 	ldw	r2,-60(fp)
1000d658:	10880020 	cmpeqi	r2,r2,8192
1000d65c:	10803fcc 	andi	r2,r2,255
1000d660:	00000406 	br	1000d674 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d664:	000d5900 	call	1000d590 <alt_get_errno>
1000d668:	00c01444 	movi	r3,81
1000d66c:	10c00015 	stw	r3,0(r2)
    return 0;
1000d670:	0005883a 	mov	r2,zero
  }
}
1000d674:	e037883a 	mov	sp,fp
1000d678:	dfc00117 	ldw	ra,4(sp)
1000d67c:	df000017 	ldw	fp,0(sp)
1000d680:	dec00204 	addi	sp,sp,8
1000d684:	f800283a 	ret

1000d688 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000d688:	defffc04 	addi	sp,sp,-16
1000d68c:	df000315 	stw	fp,12(sp)
1000d690:	df000304 	addi	fp,sp,12
1000d694:	e13ffd15 	stw	r4,-12(fp)
1000d698:	e17ffe15 	stw	r5,-8(fp)
1000d69c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000d6a0:	e0fffe17 	ldw	r3,-8(fp)
1000d6a4:	e0bffd17 	ldw	r2,-12(fp)
1000d6a8:	18800c26 	beq	r3,r2,1000d6dc <alt_load_section+0x54>
  {
    while( to != end )
1000d6ac:	00000806 	br	1000d6d0 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000d6b0:	e0bffe17 	ldw	r2,-8(fp)
1000d6b4:	10c00104 	addi	r3,r2,4
1000d6b8:	e0fffe15 	stw	r3,-8(fp)
1000d6bc:	e0fffd17 	ldw	r3,-12(fp)
1000d6c0:	19000104 	addi	r4,r3,4
1000d6c4:	e13ffd15 	stw	r4,-12(fp)
1000d6c8:	18c00017 	ldw	r3,0(r3)
1000d6cc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000d6d0:	e0fffe17 	ldw	r3,-8(fp)
1000d6d4:	e0bfff17 	ldw	r2,-4(fp)
1000d6d8:	18bff51e 	bne	r3,r2,1000d6b0 <__alt_data_end+0xf800d6b0>
    {
      *to++ = *from++;
    }
  }
}
1000d6dc:	e037883a 	mov	sp,fp
1000d6e0:	df000017 	ldw	fp,0(sp)
1000d6e4:	dec00104 	addi	sp,sp,4
1000d6e8:	f800283a 	ret

1000d6ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000d6ec:	defffe04 	addi	sp,sp,-8
1000d6f0:	dfc00115 	stw	ra,4(sp)
1000d6f4:	df000015 	stw	fp,0(sp)
1000d6f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000d6fc:	01040074 	movhi	r4,4097
1000d700:	2105d104 	addi	r4,r4,5956
1000d704:	01440074 	movhi	r5,4097
1000d708:	297f1404 	addi	r5,r5,-944
1000d70c:	01840074 	movhi	r6,4097
1000d710:	3185d104 	addi	r6,r6,5956
1000d714:	000d6880 	call	1000d688 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000d718:	01040034 	movhi	r4,4096
1000d71c:	21000804 	addi	r4,r4,32
1000d720:	01440034 	movhi	r5,4096
1000d724:	29400804 	addi	r5,r5,32
1000d728:	01840034 	movhi	r6,4096
1000d72c:	31806f04 	addi	r6,r6,444
1000d730:	000d6880 	call	1000d688 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000d734:	01040074 	movhi	r4,4097
1000d738:	213e4d04 	addi	r4,r4,-1740
1000d73c:	01440074 	movhi	r5,4097
1000d740:	297e4d04 	addi	r5,r5,-1740
1000d744:	01840074 	movhi	r6,4097
1000d748:	31bf1404 	addi	r6,r6,-944
1000d74c:	000d6880 	call	1000d688 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000d750:	000e9340 	call	1000e934 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000d754:	000eaf80 	call	1000eaf8 <alt_icache_flush_all>
}
1000d758:	e037883a 	mov	sp,fp
1000d75c:	dfc00117 	ldw	ra,4(sp)
1000d760:	df000017 	ldw	fp,0(sp)
1000d764:	dec00204 	addi	sp,sp,8
1000d768:	f800283a 	ret

1000d76c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d76c:	defffe04 	addi	sp,sp,-8
1000d770:	dfc00115 	stw	ra,4(sp)
1000d774:	df000015 	stw	fp,0(sp)
1000d778:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d77c:	00840074 	movhi	r2,4097
1000d780:	1085cc04 	addi	r2,r2,5936
1000d784:	10800017 	ldw	r2,0(r2)
1000d788:	10000526 	beq	r2,zero,1000d7a0 <alt_get_errno+0x34>
1000d78c:	00840074 	movhi	r2,4097
1000d790:	1085cc04 	addi	r2,r2,5936
1000d794:	10800017 	ldw	r2,0(r2)
1000d798:	103ee83a 	callr	r2
1000d79c:	00000206 	br	1000d7a8 <alt_get_errno+0x3c>
1000d7a0:	00840074 	movhi	r2,4097
1000d7a4:	108c9404 	addi	r2,r2,12880
}
1000d7a8:	e037883a 	mov	sp,fp
1000d7ac:	dfc00117 	ldw	ra,4(sp)
1000d7b0:	df000017 	ldw	fp,0(sp)
1000d7b4:	dec00204 	addi	sp,sp,8
1000d7b8:	f800283a 	ret

1000d7bc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000d7bc:	defff904 	addi	sp,sp,-28
1000d7c0:	dfc00615 	stw	ra,24(sp)
1000d7c4:	df000515 	stw	fp,20(sp)
1000d7c8:	df000504 	addi	fp,sp,20
1000d7cc:	e13ffd15 	stw	r4,-12(fp)
1000d7d0:	e17ffe15 	stw	r5,-8(fp)
1000d7d4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000d7d8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d7dc:	e0bffd17 	ldw	r2,-12(fp)
1000d7e0:	10000816 	blt	r2,zero,1000d804 <lseek+0x48>
1000d7e4:	e13ffd17 	ldw	r4,-12(fp)
1000d7e8:	01400304 	movi	r5,12
1000d7ec:	000ab040 	call	1000ab04 <__mulsi3>
1000d7f0:	1007883a 	mov	r3,r2
1000d7f4:	00840074 	movhi	r2,4097
1000d7f8:	10814704 	addi	r2,r2,1308
1000d7fc:	1885883a 	add	r2,r3,r2
1000d800:	00000106 	br	1000d808 <lseek+0x4c>
1000d804:	0005883a 	mov	r2,zero
1000d808:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000d80c:	e0bffc17 	ldw	r2,-16(fp)
1000d810:	10001026 	beq	r2,zero,1000d854 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000d814:	e0bffc17 	ldw	r2,-16(fp)
1000d818:	10800017 	ldw	r2,0(r2)
1000d81c:	10800717 	ldw	r2,28(r2)
1000d820:	10000926 	beq	r2,zero,1000d848 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000d824:	e0bffc17 	ldw	r2,-16(fp)
1000d828:	10800017 	ldw	r2,0(r2)
1000d82c:	10800717 	ldw	r2,28(r2)
1000d830:	e13ffc17 	ldw	r4,-16(fp)
1000d834:	e17ffe17 	ldw	r5,-8(fp)
1000d838:	e1bfff17 	ldw	r6,-4(fp)
1000d83c:	103ee83a 	callr	r2
1000d840:	e0bffb15 	stw	r2,-20(fp)
1000d844:	00000506 	br	1000d85c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000d848:	00bfde84 	movi	r2,-134
1000d84c:	e0bffb15 	stw	r2,-20(fp)
1000d850:	00000206 	br	1000d85c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000d854:	00bfebc4 	movi	r2,-81
1000d858:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000d85c:	e0bffb17 	ldw	r2,-20(fp)
1000d860:	1000060e 	bge	r2,zero,1000d87c <lseek+0xc0>
  {
    ALT_ERRNO = -rc;
1000d864:	000d76c0 	call	1000d76c <alt_get_errno>
1000d868:	e0fffb17 	ldw	r3,-20(fp)
1000d86c:	00c7c83a 	sub	r3,zero,r3
1000d870:	10c00015 	stw	r3,0(r2)
    rc = -1;
1000d874:	00bfffc4 	movi	r2,-1
1000d878:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000d87c:	e0bffb17 	ldw	r2,-20(fp)
}
1000d880:	e037883a 	mov	sp,fp
1000d884:	dfc00117 	ldw	ra,4(sp)
1000d888:	df000017 	ldw	fp,0(sp)
1000d88c:	dec00204 	addi	sp,sp,8
1000d890:	f800283a 	ret

1000d894 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000d894:	defffd04 	addi	sp,sp,-12
1000d898:	dfc00215 	stw	ra,8(sp)
1000d89c:	df000115 	stw	fp,4(sp)
1000d8a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000d8a4:	0009883a 	mov	r4,zero
1000d8a8:	000dd400 	call	1000dd40 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000d8ac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000d8b0:	000dd740 	call	1000dd74 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000d8b4:	01040074 	movhi	r4,4097
1000d8b8:	213f0a04 	addi	r4,r4,-984
1000d8bc:	01440074 	movhi	r5,4097
1000d8c0:	297f0a04 	addi	r5,r5,-984
1000d8c4:	01840074 	movhi	r6,4097
1000d8c8:	31bf0a04 	addi	r6,r6,-984
1000d8cc:	000eebc0 	call	1000eebc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000d8d0:	000ea400 	call	1000ea40 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000d8d4:	01040074 	movhi	r4,4097
1000d8d8:	213aa704 	addi	r4,r4,-5476
1000d8dc:	000f5780 	call	1000f578 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000d8e0:	d126d617 	ldw	r4,-25768(gp)
1000d8e4:	d0e6d717 	ldw	r3,-25764(gp)
1000d8e8:	d0a6d817 	ldw	r2,-25760(gp)
1000d8ec:	180b883a 	mov	r5,r3
1000d8f0:	100d883a 	mov	r6,r2
1000d8f4:	00009bc0 	call	100009bc <main>
1000d8f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000d8fc:	01000044 	movi	r4,1
1000d900:	000d3000 	call	1000d300 <close>
  exit (result);
1000d904:	e13fff17 	ldw	r4,-4(fp)
1000d908:	000f58c0 	call	1000f58c <exit>

1000d90c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000d90c:	defffe04 	addi	sp,sp,-8
1000d910:	df000115 	stw	fp,4(sp)
1000d914:	df000104 	addi	fp,sp,4
1000d918:	e13fff15 	stw	r4,-4(fp)
}
1000d91c:	e037883a 	mov	sp,fp
1000d920:	df000017 	ldw	fp,0(sp)
1000d924:	dec00104 	addi	sp,sp,4
1000d928:	f800283a 	ret

1000d92c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000d92c:	defffe04 	addi	sp,sp,-8
1000d930:	df000115 	stw	fp,4(sp)
1000d934:	df000104 	addi	fp,sp,4
1000d938:	e13fff15 	stw	r4,-4(fp)
}
1000d93c:	e037883a 	mov	sp,fp
1000d940:	df000017 	ldw	fp,0(sp)
1000d944:	dec00104 	addi	sp,sp,4
1000d948:	f800283a 	ret

1000d94c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d94c:	defffe04 	addi	sp,sp,-8
1000d950:	dfc00115 	stw	ra,4(sp)
1000d954:	df000015 	stw	fp,0(sp)
1000d958:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d95c:	00840074 	movhi	r2,4097
1000d960:	1085cc04 	addi	r2,r2,5936
1000d964:	10800017 	ldw	r2,0(r2)
1000d968:	10000526 	beq	r2,zero,1000d980 <alt_get_errno+0x34>
1000d96c:	00840074 	movhi	r2,4097
1000d970:	1085cc04 	addi	r2,r2,5936
1000d974:	10800017 	ldw	r2,0(r2)
1000d978:	103ee83a 	callr	r2
1000d97c:	00000206 	br	1000d988 <alt_get_errno+0x3c>
1000d980:	00840074 	movhi	r2,4097
1000d984:	108c9404 	addi	r2,r2,12880
}
1000d988:	e037883a 	mov	sp,fp
1000d98c:	dfc00117 	ldw	ra,4(sp)
1000d990:	df000017 	ldw	fp,0(sp)
1000d994:	dec00204 	addi	sp,sp,8
1000d998:	f800283a 	ret

1000d99c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000d99c:	defff904 	addi	sp,sp,-28
1000d9a0:	dfc00615 	stw	ra,24(sp)
1000d9a4:	df000515 	stw	fp,20(sp)
1000d9a8:	df000504 	addi	fp,sp,20
1000d9ac:	e13ffd15 	stw	r4,-12(fp)
1000d9b0:	e17ffe15 	stw	r5,-8(fp)
1000d9b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d9b8:	e0bffd17 	ldw	r2,-12(fp)
1000d9bc:	10000816 	blt	r2,zero,1000d9e0 <read+0x44>
1000d9c0:	e13ffd17 	ldw	r4,-12(fp)
1000d9c4:	01400304 	movi	r5,12
1000d9c8:	000ab040 	call	1000ab04 <__mulsi3>
1000d9cc:	1007883a 	mov	r3,r2
1000d9d0:	00840074 	movhi	r2,4097
1000d9d4:	10814704 	addi	r2,r2,1308
1000d9d8:	1885883a 	add	r2,r3,r2
1000d9dc:	00000106 	br	1000d9e4 <read+0x48>
1000d9e0:	0005883a 	mov	r2,zero
1000d9e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000d9e8:	e0bffb17 	ldw	r2,-20(fp)
1000d9ec:	10002026 	beq	r2,zero,1000da70 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000d9f0:	e0bffb17 	ldw	r2,-20(fp)
1000d9f4:	10800217 	ldw	r2,8(r2)
1000d9f8:	108000cc 	andi	r2,r2,3
1000d9fc:	10800060 	cmpeqi	r2,r2,1
1000da00:	1000171e 	bne	r2,zero,1000da60 <read+0xc4>
        (fd->dev->read))
1000da04:	e0bffb17 	ldw	r2,-20(fp)
1000da08:	10800017 	ldw	r2,0(r2)
1000da0c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000da10:	10001326 	beq	r2,zero,1000da60 <read+0xc4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000da14:	e0bffb17 	ldw	r2,-20(fp)
1000da18:	10800017 	ldw	r2,0(r2)
1000da1c:	10800517 	ldw	r2,20(r2)
1000da20:	e0ffff17 	ldw	r3,-4(fp)
1000da24:	e13ffb17 	ldw	r4,-20(fp)
1000da28:	e17ffe17 	ldw	r5,-8(fp)
1000da2c:	180d883a 	mov	r6,r3
1000da30:	103ee83a 	callr	r2
1000da34:	e0bffc15 	stw	r2,-16(fp)
1000da38:	e0bffc17 	ldw	r2,-16(fp)
1000da3c:	1000060e 	bge	r2,zero,1000da58 <read+0xbc>
        {
          ALT_ERRNO = -rval;
1000da40:	000d94c0 	call	1000d94c <alt_get_errno>
1000da44:	e0fffc17 	ldw	r3,-16(fp)
1000da48:	00c7c83a 	sub	r3,zero,r3
1000da4c:	10c00015 	stw	r3,0(r2)
          return -1;
1000da50:	00bfffc4 	movi	r2,-1
1000da54:	00000a06 	br	1000da80 <read+0xe4>
        }
        return rval;
1000da58:	e0bffc17 	ldw	r2,-16(fp)
1000da5c:	00000806 	br	1000da80 <read+0xe4>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000da60:	000d94c0 	call	1000d94c <alt_get_errno>
1000da64:	00c00344 	movi	r3,13
1000da68:	10c00015 	stw	r3,0(r2)
1000da6c:	00000306 	br	1000da7c <read+0xe0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000da70:	000d94c0 	call	1000d94c <alt_get_errno>
1000da74:	00c01444 	movi	r3,81
1000da78:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000da7c:	00bfffc4 	movi	r2,-1
}
1000da80:	e037883a 	mov	sp,fp
1000da84:	dfc00117 	ldw	ra,4(sp)
1000da88:	df000017 	ldw	fp,0(sp)
1000da8c:	dec00204 	addi	sp,sp,8
1000da90:	f800283a 	ret

1000da94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000da94:	defffc04 	addi	sp,sp,-16
1000da98:	dfc00315 	stw	ra,12(sp)
1000da9c:	df000215 	stw	fp,8(sp)
1000daa0:	dc000115 	stw	r16,4(sp)
1000daa4:	df000204 	addi	fp,sp,8
1000daa8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000daac:	e0bffe17 	ldw	r2,-8(fp)
1000dab0:	108000d0 	cmplti	r2,r2,3
1000dab4:	1000111e 	bne	r2,zero,1000dafc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000dab8:	04040074 	movhi	r16,4097
1000dabc:	84014704 	addi	r16,r16,1308
1000dac0:	e0bffe17 	ldw	r2,-8(fp)
1000dac4:	1009883a 	mov	r4,r2
1000dac8:	01400304 	movi	r5,12
1000dacc:	000ab040 	call	1000ab04 <__mulsi3>
1000dad0:	8085883a 	add	r2,r16,r2
1000dad4:	10800204 	addi	r2,r2,8
1000dad8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000dadc:	04040074 	movhi	r16,4097
1000dae0:	84014704 	addi	r16,r16,1308
1000dae4:	e0bffe17 	ldw	r2,-8(fp)
1000dae8:	1009883a 	mov	r4,r2
1000daec:	01400304 	movi	r5,12
1000daf0:	000ab040 	call	1000ab04 <__mulsi3>
1000daf4:	8085883a 	add	r2,r16,r2
1000daf8:	10000015 	stw	zero,0(r2)
  }
}
1000dafc:	e6ffff04 	addi	sp,fp,-4
1000db00:	dfc00217 	ldw	ra,8(sp)
1000db04:	df000117 	ldw	fp,4(sp)
1000db08:	dc000017 	ldw	r16,0(sp)
1000db0c:	dec00304 	addi	sp,sp,12
1000db10:	f800283a 	ret

1000db14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000db14:	defff904 	addi	sp,sp,-28
1000db18:	df000615 	stw	fp,24(sp)
1000db1c:	df000604 	addi	fp,sp,24
1000db20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000db24:	0005303a 	rdctl	r2,status
1000db28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000db2c:	e0fffc17 	ldw	r3,-16(fp)
1000db30:	00bfff84 	movi	r2,-2
1000db34:	1884703a 	and	r2,r3,r2
1000db38:	1001703a 	wrctl	status,r2
  
  return context;
1000db3c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000db40:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000db44:	d0a00e17 	ldw	r2,-32712(gp)
1000db48:	10c000c4 	addi	r3,r2,3
1000db4c:	00bfff04 	movi	r2,-4
1000db50:	1884703a 	and	r2,r3,r2
1000db54:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000db58:	d0e00e17 	ldw	r3,-32712(gp)
1000db5c:	e0bfff17 	ldw	r2,-4(fp)
1000db60:	1885883a 	add	r2,r3,r2
1000db64:	00c60034 	movhi	r3,6144
1000db68:	18c00004 	addi	r3,r3,0
1000db6c:	1880062e 	bgeu	r3,r2,1000db88 <sbrk+0x74>
1000db70:	e0bffa17 	ldw	r2,-24(fp)
1000db74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000db78:	e0bffd17 	ldw	r2,-12(fp)
1000db7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000db80:	00bfffc4 	movi	r2,-1
1000db84:	00000b06 	br	1000dbb4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000db88:	d0a00e17 	ldw	r2,-32712(gp)
1000db8c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000db90:	d0e00e17 	ldw	r3,-32712(gp)
1000db94:	e0bfff17 	ldw	r2,-4(fp)
1000db98:	1885883a 	add	r2,r3,r2
1000db9c:	d0a00e15 	stw	r2,-32712(gp)
1000dba0:	e0bffa17 	ldw	r2,-24(fp)
1000dba4:	e0bffe15 	stw	r2,-8(fp)
1000dba8:	e0bffe17 	ldw	r2,-8(fp)
1000dbac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000dbb0:	e0bffb17 	ldw	r2,-20(fp)
} 
1000dbb4:	e037883a 	mov	sp,fp
1000dbb8:	df000017 	ldw	fp,0(sp)
1000dbbc:	dec00104 	addi	sp,sp,4
1000dbc0:	f800283a 	ret

1000dbc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dbc4:	defffe04 	addi	sp,sp,-8
1000dbc8:	dfc00115 	stw	ra,4(sp)
1000dbcc:	df000015 	stw	fp,0(sp)
1000dbd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dbd4:	00840074 	movhi	r2,4097
1000dbd8:	1085cc04 	addi	r2,r2,5936
1000dbdc:	10800017 	ldw	r2,0(r2)
1000dbe0:	10000526 	beq	r2,zero,1000dbf8 <alt_get_errno+0x34>
1000dbe4:	00840074 	movhi	r2,4097
1000dbe8:	1085cc04 	addi	r2,r2,5936
1000dbec:	10800017 	ldw	r2,0(r2)
1000dbf0:	103ee83a 	callr	r2
1000dbf4:	00000206 	br	1000dc00 <alt_get_errno+0x3c>
1000dbf8:	00840074 	movhi	r2,4097
1000dbfc:	108c9404 	addi	r2,r2,12880
}
1000dc00:	e037883a 	mov	sp,fp
1000dc04:	dfc00117 	ldw	ra,4(sp)
1000dc08:	df000017 	ldw	fp,0(sp)
1000dc0c:	dec00204 	addi	sp,sp,8
1000dc10:	f800283a 	ret

1000dc14 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000dc14:	defff904 	addi	sp,sp,-28
1000dc18:	dfc00615 	stw	ra,24(sp)
1000dc1c:	df000515 	stw	fp,20(sp)
1000dc20:	df000504 	addi	fp,sp,20
1000dc24:	e13ffd15 	stw	r4,-12(fp)
1000dc28:	e17ffe15 	stw	r5,-8(fp)
1000dc2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dc30:	e0bffd17 	ldw	r2,-12(fp)
1000dc34:	10000816 	blt	r2,zero,1000dc58 <write+0x44>
1000dc38:	e13ffd17 	ldw	r4,-12(fp)
1000dc3c:	01400304 	movi	r5,12
1000dc40:	000ab040 	call	1000ab04 <__mulsi3>
1000dc44:	1007883a 	mov	r3,r2
1000dc48:	00840074 	movhi	r2,4097
1000dc4c:	10814704 	addi	r2,r2,1308
1000dc50:	1885883a 	add	r2,r3,r2
1000dc54:	00000106 	br	1000dc5c <write+0x48>
1000dc58:	0005883a 	mov	r2,zero
1000dc5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000dc60:	e0bffb17 	ldw	r2,-20(fp)
1000dc64:	10001f26 	beq	r2,zero,1000dce4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000dc68:	e0bffb17 	ldw	r2,-20(fp)
1000dc6c:	10800217 	ldw	r2,8(r2)
1000dc70:	108000cc 	andi	r2,r2,3
1000dc74:	10001726 	beq	r2,zero,1000dcd4 <write+0xc0>
1000dc78:	e0bffb17 	ldw	r2,-20(fp)
1000dc7c:	10800017 	ldw	r2,0(r2)
1000dc80:	10800617 	ldw	r2,24(r2)
1000dc84:	10001326 	beq	r2,zero,1000dcd4 <write+0xc0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000dc88:	e0bffb17 	ldw	r2,-20(fp)
1000dc8c:	10800017 	ldw	r2,0(r2)
1000dc90:	10800617 	ldw	r2,24(r2)
1000dc94:	e0ffff17 	ldw	r3,-4(fp)
1000dc98:	e13ffb17 	ldw	r4,-20(fp)
1000dc9c:	e17ffe17 	ldw	r5,-8(fp)
1000dca0:	180d883a 	mov	r6,r3
1000dca4:	103ee83a 	callr	r2
1000dca8:	e0bffc15 	stw	r2,-16(fp)
1000dcac:	e0bffc17 	ldw	r2,-16(fp)
1000dcb0:	1000060e 	bge	r2,zero,1000dccc <write+0xb8>
      {
        ALT_ERRNO = -rval;
1000dcb4:	000dbc40 	call	1000dbc4 <alt_get_errno>
1000dcb8:	e0fffc17 	ldw	r3,-16(fp)
1000dcbc:	00c7c83a 	sub	r3,zero,r3
1000dcc0:	10c00015 	stw	r3,0(r2)
        return -1;
1000dcc4:	00bfffc4 	movi	r2,-1
1000dcc8:	00000a06 	br	1000dcf4 <write+0xe0>
      }
      return rval;
1000dccc:	e0bffc17 	ldw	r2,-16(fp)
1000dcd0:	00000806 	br	1000dcf4 <write+0xe0>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000dcd4:	000dbc40 	call	1000dbc4 <alt_get_errno>
1000dcd8:	00c00344 	movi	r3,13
1000dcdc:	10c00015 	stw	r3,0(r2)
1000dce0:	00000306 	br	1000dcf0 <write+0xdc>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000dce4:	000dbc40 	call	1000dbc4 <alt_get_errno>
1000dce8:	00c01444 	movi	r3,81
1000dcec:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000dcf0:	00bfffc4 	movi	r2,-1
}
1000dcf4:	e037883a 	mov	sp,fp
1000dcf8:	dfc00117 	ldw	ra,4(sp)
1000dcfc:	df000017 	ldw	fp,0(sp)
1000dd00:	dec00204 	addi	sp,sp,8
1000dd04:	f800283a 	ret

1000dd08 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000dd08:	defffd04 	addi	sp,sp,-12
1000dd0c:	dfc00215 	stw	ra,8(sp)
1000dd10:	df000115 	stw	fp,4(sp)
1000dd14:	df000104 	addi	fp,sp,4
1000dd18:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000dd1c:	e13fff17 	ldw	r4,-4(fp)
1000dd20:	01440074 	movhi	r5,4097
1000dd24:	2945c904 	addi	r5,r5,5924
1000dd28:	000e9a00 	call	1000e9a0 <alt_dev_llist_insert>
}
1000dd2c:	e037883a 	mov	sp,fp
1000dd30:	dfc00117 	ldw	ra,4(sp)
1000dd34:	df000017 	ldw	fp,0(sp)
1000dd38:	dec00204 	addi	sp,sp,8
1000dd3c:	f800283a 	ret

1000dd40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000dd40:	defffd04 	addi	sp,sp,-12
1000dd44:	dfc00215 	stw	ra,8(sp)
1000dd48:	df000115 	stw	fp,4(sp)
1000dd4c:	df000104 	addi	fp,sp,4
1000dd50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000dd54:	000f3700 	call	1000f370 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000dd58:	00800044 	movi	r2,1
1000dd5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000dd60:	e037883a 	mov	sp,fp
1000dd64:	dfc00117 	ldw	ra,4(sp)
1000dd68:	df000017 	ldw	fp,0(sp)
1000dd6c:	dec00204 	addi	sp,sp,8
1000dd70:	f800283a 	ret

1000dd74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000dd74:	defffe04 	addi	sp,sp,-8
1000dd78:	dfc00115 	stw	ra,4(sp)
1000dd7c:	df000015 	stw	fp,0(sp)
1000dd80:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000dd84:	01040074 	movhi	r4,4097
1000dd88:	2101b104 	addi	r4,r4,1732
1000dd8c:	000b883a 	mov	r5,zero
1000dd90:	01800044 	movi	r6,1
1000dd94:	000df200 	call	1000df20 <altera_avalon_jtag_uart_init>
1000dd98:	01040074 	movhi	r4,4097
1000dd9c:	2101a704 	addi	r4,r4,1692
1000dda0:	000dd080 	call	1000dd08 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000dda4:	0001883a 	nop
}
1000dda8:	e037883a 	mov	sp,fp
1000ddac:	dfc00117 	ldw	ra,4(sp)
1000ddb0:	df000017 	ldw	fp,0(sp)
1000ddb4:	dec00204 	addi	sp,sp,8
1000ddb8:	f800283a 	ret

1000ddbc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000ddbc:	defffa04 	addi	sp,sp,-24
1000ddc0:	dfc00515 	stw	ra,20(sp)
1000ddc4:	df000415 	stw	fp,16(sp)
1000ddc8:	df000404 	addi	fp,sp,16
1000ddcc:	e13ffd15 	stw	r4,-12(fp)
1000ddd0:	e17ffe15 	stw	r5,-8(fp)
1000ddd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000ddd8:	e0bffd17 	ldw	r2,-12(fp)
1000dddc:	10800017 	ldw	r2,0(r2)
1000dde0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000dde4:	e0bffc17 	ldw	r2,-16(fp)
1000dde8:	10c00a04 	addi	r3,r2,40
1000ddec:	e0bffd17 	ldw	r2,-12(fp)
1000ddf0:	10800217 	ldw	r2,8(r2)
1000ddf4:	1809883a 	mov	r4,r3
1000ddf8:	e17ffe17 	ldw	r5,-8(fp)
1000ddfc:	e1bfff17 	ldw	r6,-4(fp)
1000de00:	100f883a 	mov	r7,r2
1000de04:	000e3d40 	call	1000e3d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000de08:	e037883a 	mov	sp,fp
1000de0c:	dfc00117 	ldw	ra,4(sp)
1000de10:	df000017 	ldw	fp,0(sp)
1000de14:	dec00204 	addi	sp,sp,8
1000de18:	f800283a 	ret

1000de1c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000de1c:	defffa04 	addi	sp,sp,-24
1000de20:	dfc00515 	stw	ra,20(sp)
1000de24:	df000415 	stw	fp,16(sp)
1000de28:	df000404 	addi	fp,sp,16
1000de2c:	e13ffd15 	stw	r4,-12(fp)
1000de30:	e17ffe15 	stw	r5,-8(fp)
1000de34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000de38:	e0bffd17 	ldw	r2,-12(fp)
1000de3c:	10800017 	ldw	r2,0(r2)
1000de40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000de44:	e0bffc17 	ldw	r2,-16(fp)
1000de48:	10c00a04 	addi	r3,r2,40
1000de4c:	e0bffd17 	ldw	r2,-12(fp)
1000de50:	10800217 	ldw	r2,8(r2)
1000de54:	1809883a 	mov	r4,r3
1000de58:	e17ffe17 	ldw	r5,-8(fp)
1000de5c:	e1bfff17 	ldw	r6,-4(fp)
1000de60:	100f883a 	mov	r7,r2
1000de64:	000e5dc0 	call	1000e5dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000de68:	e037883a 	mov	sp,fp
1000de6c:	dfc00117 	ldw	ra,4(sp)
1000de70:	df000017 	ldw	fp,0(sp)
1000de74:	dec00204 	addi	sp,sp,8
1000de78:	f800283a 	ret

1000de7c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000de7c:	defffc04 	addi	sp,sp,-16
1000de80:	dfc00315 	stw	ra,12(sp)
1000de84:	df000215 	stw	fp,8(sp)
1000de88:	df000204 	addi	fp,sp,8
1000de8c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000de90:	e0bfff17 	ldw	r2,-4(fp)
1000de94:	10800017 	ldw	r2,0(r2)
1000de98:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000de9c:	e0bffe17 	ldw	r2,-8(fp)
1000dea0:	10c00a04 	addi	r3,r2,40
1000dea4:	e0bfff17 	ldw	r2,-4(fp)
1000dea8:	10800217 	ldw	r2,8(r2)
1000deac:	1809883a 	mov	r4,r3
1000deb0:	100b883a 	mov	r5,r2
1000deb4:	000e2800 	call	1000e280 <altera_avalon_jtag_uart_close>
}
1000deb8:	e037883a 	mov	sp,fp
1000debc:	dfc00117 	ldw	ra,4(sp)
1000dec0:	df000017 	ldw	fp,0(sp)
1000dec4:	dec00204 	addi	sp,sp,8
1000dec8:	f800283a 	ret

1000decc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000decc:	defffa04 	addi	sp,sp,-24
1000ded0:	dfc00515 	stw	ra,20(sp)
1000ded4:	df000415 	stw	fp,16(sp)
1000ded8:	df000404 	addi	fp,sp,16
1000dedc:	e13ffd15 	stw	r4,-12(fp)
1000dee0:	e17ffe15 	stw	r5,-8(fp)
1000dee4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000dee8:	e0bffd17 	ldw	r2,-12(fp)
1000deec:	10800017 	ldw	r2,0(r2)
1000def0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000def4:	e0bffc17 	ldw	r2,-16(fp)
1000def8:	10800a04 	addi	r2,r2,40
1000defc:	1009883a 	mov	r4,r2
1000df00:	e17ffe17 	ldw	r5,-8(fp)
1000df04:	e1bfff17 	ldw	r6,-4(fp)
1000df08:	000e2e80 	call	1000e2e8 <altera_avalon_jtag_uart_ioctl>
}
1000df0c:	e037883a 	mov	sp,fp
1000df10:	dfc00117 	ldw	ra,4(sp)
1000df14:	df000017 	ldw	fp,0(sp)
1000df18:	dec00204 	addi	sp,sp,8
1000df1c:	f800283a 	ret

1000df20 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000df20:	defffa04 	addi	sp,sp,-24
1000df24:	dfc00515 	stw	ra,20(sp)
1000df28:	df000415 	stw	fp,16(sp)
1000df2c:	df000404 	addi	fp,sp,16
1000df30:	e13ffd15 	stw	r4,-12(fp)
1000df34:	e17ffe15 	stw	r5,-8(fp)
1000df38:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000df3c:	e0bffd17 	ldw	r2,-12(fp)
1000df40:	00c00044 	movi	r3,1
1000df44:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000df48:	e0bffd17 	ldw	r2,-12(fp)
1000df4c:	10800017 	ldw	r2,0(r2)
1000df50:	10800104 	addi	r2,r2,4
1000df54:	e0fffd17 	ldw	r3,-12(fp)
1000df58:	18c00817 	ldw	r3,32(r3)
1000df5c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000df60:	e0fffe17 	ldw	r3,-8(fp)
1000df64:	e0bfff17 	ldw	r2,-4(fp)
1000df68:	d8000015 	stw	zero,0(sp)
1000df6c:	1809883a 	mov	r4,r3
1000df70:	100b883a 	mov	r5,r2
1000df74:	01840074 	movhi	r6,4097
1000df78:	31b7f804 	addi	r6,r6,-8224
1000df7c:	e1fffd17 	ldw	r7,-12(fp)
1000df80:	000eb140 	call	1000eb14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000df84:	e0bffd17 	ldw	r2,-12(fp)
1000df88:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000df8c:	e0bffd17 	ldw	r2,-12(fp)
1000df90:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000df94:	00840074 	movhi	r2,4097
1000df98:	108c9904 	addi	r2,r2,12900
1000df9c:	10800017 	ldw	r2,0(r2)
1000dfa0:	1809883a 	mov	r4,r3
1000dfa4:	100b883a 	mov	r5,r2
1000dfa8:	01840074 	movhi	r6,4097
1000dfac:	31b87704 	addi	r6,r6,-7716
1000dfb0:	e1fffd17 	ldw	r7,-12(fp)
1000dfb4:	000e7f40 	call	1000e7f4 <alt_alarm_start>
1000dfb8:	1000040e 	bge	r2,zero,1000dfcc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000dfbc:	e0bffd17 	ldw	r2,-12(fp)
1000dfc0:	00e00034 	movhi	r3,32768
1000dfc4:	18ffffc4 	addi	r3,r3,-1
1000dfc8:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000dfcc:	e037883a 	mov	sp,fp
1000dfd0:	dfc00117 	ldw	ra,4(sp)
1000dfd4:	df000017 	ldw	fp,0(sp)
1000dfd8:	dec00204 	addi	sp,sp,8
1000dfdc:	f800283a 	ret

1000dfe0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000dfe0:	defff804 	addi	sp,sp,-32
1000dfe4:	df000715 	stw	fp,28(sp)
1000dfe8:	df000704 	addi	fp,sp,28
1000dfec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000dff0:	e0bfff17 	ldw	r2,-4(fp)
1000dff4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000dff8:	e0bffb17 	ldw	r2,-20(fp)
1000dffc:	10800017 	ldw	r2,0(r2)
1000e000:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e004:	e0bffc17 	ldw	r2,-16(fp)
1000e008:	10800104 	addi	r2,r2,4
1000e00c:	10800037 	ldwio	r2,0(r2)
1000e010:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000e014:	e0bffd17 	ldw	r2,-12(fp)
1000e018:	1080c00c 	andi	r2,r2,768
1000e01c:	1000011e 	bne	r2,zero,1000e024 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000e020:	00006a06 	br	1000e1cc <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000e024:	e0bffd17 	ldw	r2,-12(fp)
1000e028:	1080400c 	andi	r2,r2,256
1000e02c:	10003226 	beq	r2,zero,1000e0f8 <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000e030:	00800074 	movhi	r2,1
1000e034:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e038:	e0bffb17 	ldw	r2,-20(fp)
1000e03c:	10800a17 	ldw	r2,40(r2)
1000e040:	10800044 	addi	r2,r2,1
1000e044:	1081ffcc 	andi	r2,r2,2047
1000e048:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000e04c:	e0bffb17 	ldw	r2,-20(fp)
1000e050:	10c00b17 	ldw	r3,44(r2)
1000e054:	e0bffe17 	ldw	r2,-8(fp)
1000e058:	1880011e 	bne	r3,r2,1000e060 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000e05c:	00001506 	br	1000e0b4 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000e060:	e0bffc17 	ldw	r2,-16(fp)
1000e064:	10800037 	ldwio	r2,0(r2)
1000e068:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000e06c:	e0bff917 	ldw	r2,-28(fp)
1000e070:	10a0000c 	andi	r2,r2,32768
1000e074:	1000011e 	bne	r2,zero,1000e07c <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000e078:	00000e06 	br	1000e0b4 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000e07c:	e0bffb17 	ldw	r2,-20(fp)
1000e080:	10800a17 	ldw	r2,40(r2)
1000e084:	e0fff917 	ldw	r3,-28(fp)
1000e088:	e13ffb17 	ldw	r4,-20(fp)
1000e08c:	2085883a 	add	r2,r4,r2
1000e090:	10800e04 	addi	r2,r2,56
1000e094:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e098:	e0bffb17 	ldw	r2,-20(fp)
1000e09c:	10800a17 	ldw	r2,40(r2)
1000e0a0:	10800044 	addi	r2,r2,1
1000e0a4:	10c1ffcc 	andi	r3,r2,2047
1000e0a8:	e0bffb17 	ldw	r2,-20(fp)
1000e0ac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000e0b0:	003fe106 	br	1000e038 <__alt_data_end+0xf800e038>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000e0b4:	e0bff917 	ldw	r2,-28(fp)
1000e0b8:	10bfffec 	andhi	r2,r2,65535
1000e0bc:	10000e26 	beq	r2,zero,1000e0f8 <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e0c0:	e0bffb17 	ldw	r2,-20(fp)
1000e0c4:	10c00817 	ldw	r3,32(r2)
1000e0c8:	00bfff84 	movi	r2,-2
1000e0cc:	1886703a 	and	r3,r3,r2
1000e0d0:	e0bffb17 	ldw	r2,-20(fp)
1000e0d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000e0d8:	e0bffc17 	ldw	r2,-16(fp)
1000e0dc:	10800104 	addi	r2,r2,4
1000e0e0:	e0fffb17 	ldw	r3,-20(fp)
1000e0e4:	18c00817 	ldw	r3,32(r3)
1000e0e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e0ec:	e0bffc17 	ldw	r2,-16(fp)
1000e0f0:	10800104 	addi	r2,r2,4
1000e0f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000e0f8:	e0bffd17 	ldw	r2,-12(fp)
1000e0fc:	1080800c 	andi	r2,r2,512
1000e100:	10003126 	beq	r2,zero,1000e1c8 <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000e104:	e0bffd17 	ldw	r2,-12(fp)
1000e108:	1004d43a 	srli	r2,r2,16
1000e10c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e110:	00001406 	br	1000e164 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000e114:	e0bffc17 	ldw	r2,-16(fp)
1000e118:	e0fffb17 	ldw	r3,-20(fp)
1000e11c:	18c00d17 	ldw	r3,52(r3)
1000e120:	e13ffb17 	ldw	r4,-20(fp)
1000e124:	20c7883a 	add	r3,r4,r3
1000e128:	18c20e04 	addi	r3,r3,2104
1000e12c:	18c00003 	ldbu	r3,0(r3)
1000e130:	18c03fcc 	andi	r3,r3,255
1000e134:	18c0201c 	xori	r3,r3,128
1000e138:	18ffe004 	addi	r3,r3,-128
1000e13c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e140:	e0bffb17 	ldw	r2,-20(fp)
1000e144:	10800d17 	ldw	r2,52(r2)
1000e148:	10800044 	addi	r2,r2,1
1000e14c:	10c1ffcc 	andi	r3,r2,2047
1000e150:	e0bffb17 	ldw	r2,-20(fp)
1000e154:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000e158:	e0bffa17 	ldw	r2,-24(fp)
1000e15c:	10bfffc4 	addi	r2,r2,-1
1000e160:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e164:	e0bffa17 	ldw	r2,-24(fp)
1000e168:	10000526 	beq	r2,zero,1000e180 <altera_avalon_jtag_uart_irq+0x1a0>
1000e16c:	e0bffb17 	ldw	r2,-20(fp)
1000e170:	10c00d17 	ldw	r3,52(r2)
1000e174:	e0bffb17 	ldw	r2,-20(fp)
1000e178:	10800c17 	ldw	r2,48(r2)
1000e17c:	18bfe51e 	bne	r3,r2,1000e114 <__alt_data_end+0xf800e114>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000e180:	e0bffa17 	ldw	r2,-24(fp)
1000e184:	10001026 	beq	r2,zero,1000e1c8 <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e188:	e0bffb17 	ldw	r2,-20(fp)
1000e18c:	10c00817 	ldw	r3,32(r2)
1000e190:	00bfff44 	movi	r2,-3
1000e194:	1886703a 	and	r3,r3,r2
1000e198:	e0bffb17 	ldw	r2,-20(fp)
1000e19c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e1a0:	e0bffb17 	ldw	r2,-20(fp)
1000e1a4:	10800017 	ldw	r2,0(r2)
1000e1a8:	10800104 	addi	r2,r2,4
1000e1ac:	e0fffb17 	ldw	r3,-20(fp)
1000e1b0:	18c00817 	ldw	r3,32(r3)
1000e1b4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e1b8:	e0bffc17 	ldw	r2,-16(fp)
1000e1bc:	10800104 	addi	r2,r2,4
1000e1c0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000e1c4:	003f8f06 	br	1000e004 <__alt_data_end+0xf800e004>
1000e1c8:	003f8e06 	br	1000e004 <__alt_data_end+0xf800e004>
}
1000e1cc:	e037883a 	mov	sp,fp
1000e1d0:	df000017 	ldw	fp,0(sp)
1000e1d4:	dec00104 	addi	sp,sp,4
1000e1d8:	f800283a 	ret

1000e1dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000e1dc:	defff804 	addi	sp,sp,-32
1000e1e0:	df000715 	stw	fp,28(sp)
1000e1e4:	df000704 	addi	fp,sp,28
1000e1e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000e1ec:	e0bffb17 	ldw	r2,-20(fp)
1000e1f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000e1f4:	e0bff917 	ldw	r2,-28(fp)
1000e1f8:	10800017 	ldw	r2,0(r2)
1000e1fc:	10800104 	addi	r2,r2,4
1000e200:	10800037 	ldwio	r2,0(r2)
1000e204:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000e208:	e0bffa17 	ldw	r2,-24(fp)
1000e20c:	1081000c 	andi	r2,r2,1024
1000e210:	10000a26 	beq	r2,zero,1000e23c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000e214:	e0bff917 	ldw	r2,-28(fp)
1000e218:	10800017 	ldw	r2,0(r2)
1000e21c:	10800104 	addi	r2,r2,4
1000e220:	e0fff917 	ldw	r3,-28(fp)
1000e224:	18c00817 	ldw	r3,32(r3)
1000e228:	18c10014 	ori	r3,r3,1024
1000e22c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
1000e230:	e0bff917 	ldw	r2,-28(fp)
1000e234:	10000915 	stw	zero,36(r2)
1000e238:	00000a06 	br	1000e264 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000e23c:	e0bff917 	ldw	r2,-28(fp)
1000e240:	10800917 	ldw	r2,36(r2)
1000e244:	00e00034 	movhi	r3,32768
1000e248:	18ffff04 	addi	r3,r3,-4
1000e24c:	18800536 	bltu	r3,r2,1000e264 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
1000e250:	e0bff917 	ldw	r2,-28(fp)
1000e254:	10800917 	ldw	r2,36(r2)
1000e258:	10c00044 	addi	r3,r2,1
1000e25c:	e0bff917 	ldw	r2,-28(fp)
1000e260:	10c00915 	stw	r3,36(r2)
1000e264:	00840074 	movhi	r2,4097
1000e268:	108c9904 	addi	r2,r2,12900
1000e26c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000e270:	e037883a 	mov	sp,fp
1000e274:	df000017 	ldw	fp,0(sp)
1000e278:	dec00104 	addi	sp,sp,4
1000e27c:	f800283a 	ret

1000e280 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000e280:	defffd04 	addi	sp,sp,-12
1000e284:	df000215 	stw	fp,8(sp)
1000e288:	df000204 	addi	fp,sp,8
1000e28c:	e13ffe15 	stw	r4,-8(fp)
1000e290:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e294:	00000506 	br	1000e2ac <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000e298:	e0bfff17 	ldw	r2,-4(fp)
1000e29c:	1090000c 	andi	r2,r2,16384
1000e2a0:	10000226 	beq	r2,zero,1000e2ac <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000e2a4:	00bffd44 	movi	r2,-11
1000e2a8:	00000b06 	br	1000e2d8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e2ac:	e0bffe17 	ldw	r2,-8(fp)
1000e2b0:	10c00d17 	ldw	r3,52(r2)
1000e2b4:	e0bffe17 	ldw	r2,-8(fp)
1000e2b8:	10800c17 	ldw	r2,48(r2)
1000e2bc:	18800526 	beq	r3,r2,1000e2d4 <altera_avalon_jtag_uart_close+0x54>
1000e2c0:	e0bffe17 	ldw	r2,-8(fp)
1000e2c4:	10c00917 	ldw	r3,36(r2)
1000e2c8:	e0bffe17 	ldw	r2,-8(fp)
1000e2cc:	10800117 	ldw	r2,4(r2)
1000e2d0:	18bff136 	bltu	r3,r2,1000e298 <__alt_data_end+0xf800e298>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000e2d4:	0005883a 	mov	r2,zero
}
1000e2d8:	e037883a 	mov	sp,fp
1000e2dc:	df000017 	ldw	fp,0(sp)
1000e2e0:	dec00104 	addi	sp,sp,4
1000e2e4:	f800283a 	ret

1000e2e8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000e2e8:	defffa04 	addi	sp,sp,-24
1000e2ec:	df000515 	stw	fp,20(sp)
1000e2f0:	df000504 	addi	fp,sp,20
1000e2f4:	e13ffd15 	stw	r4,-12(fp)
1000e2f8:	e17ffe15 	stw	r5,-8(fp)
1000e2fc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000e300:	00bff9c4 	movi	r2,-25
1000e304:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000e308:	e0bffe17 	ldw	r2,-8(fp)
1000e30c:	10da8060 	cmpeqi	r3,r2,27137
1000e310:	1800031e 	bne	r3,zero,1000e320 <altera_avalon_jtag_uart_ioctl+0x38>
1000e314:	109a80a0 	cmpeqi	r2,r2,27138
1000e318:	1000191e 	bne	r2,zero,1000e380 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000e31c:	00002806 	br	1000e3c0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000e320:	e0bffd17 	ldw	r2,-12(fp)
1000e324:	10c00117 	ldw	r3,4(r2)
1000e328:	00a00034 	movhi	r2,32768
1000e32c:	10bfffc4 	addi	r2,r2,-1
1000e330:	18801226 	beq	r3,r2,1000e37c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000e334:	e0bfff17 	ldw	r2,-4(fp)
1000e338:	10800017 	ldw	r2,0(r2)
1000e33c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000e340:	e0bffc17 	ldw	r2,-16(fp)
1000e344:	10800090 	cmplti	r2,r2,2
1000e348:	1000061e 	bne	r2,zero,1000e364 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e34c:	e0fffc17 	ldw	r3,-16(fp)
1000e350:	00a00034 	movhi	r2,32768
1000e354:	10bfffc4 	addi	r2,r2,-1
1000e358:	18800226 	beq	r3,r2,1000e364 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e35c:	e0bffc17 	ldw	r2,-16(fp)
1000e360:	00000206 	br	1000e36c <altera_avalon_jtag_uart_ioctl+0x84>
1000e364:	00a00034 	movhi	r2,32768
1000e368:	10bfff84 	addi	r2,r2,-2
1000e36c:	e0fffd17 	ldw	r3,-12(fp)
1000e370:	18800115 	stw	r2,4(r3)
      rc = 0;
1000e374:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e378:	00001106 	br	1000e3c0 <altera_avalon_jtag_uart_ioctl+0xd8>
1000e37c:	00001006 	br	1000e3c0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000e380:	e0bffd17 	ldw	r2,-12(fp)
1000e384:	10c00117 	ldw	r3,4(r2)
1000e388:	00a00034 	movhi	r2,32768
1000e38c:	10bfffc4 	addi	r2,r2,-1
1000e390:	18800a26 	beq	r3,r2,1000e3bc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000e394:	e0bffd17 	ldw	r2,-12(fp)
1000e398:	10c00917 	ldw	r3,36(r2)
1000e39c:	e0bffd17 	ldw	r2,-12(fp)
1000e3a0:	10800117 	ldw	r2,4(r2)
1000e3a4:	1885803a 	cmpltu	r2,r3,r2
1000e3a8:	10c03fcc 	andi	r3,r2,255
1000e3ac:	e0bfff17 	ldw	r2,-4(fp)
1000e3b0:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000e3b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e3b8:	00000006 	br	1000e3bc <altera_avalon_jtag_uart_ioctl+0xd4>
1000e3bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000e3c0:	e0bffb17 	ldw	r2,-20(fp)
}
1000e3c4:	e037883a 	mov	sp,fp
1000e3c8:	df000017 	ldw	fp,0(sp)
1000e3cc:	dec00104 	addi	sp,sp,4
1000e3d0:	f800283a 	ret

1000e3d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000e3d4:	defff304 	addi	sp,sp,-52
1000e3d8:	dfc00c15 	stw	ra,48(sp)
1000e3dc:	df000b15 	stw	fp,44(sp)
1000e3e0:	df000b04 	addi	fp,sp,44
1000e3e4:	e13ffc15 	stw	r4,-16(fp)
1000e3e8:	e17ffd15 	stw	r5,-12(fp)
1000e3ec:	e1bffe15 	stw	r6,-8(fp)
1000e3f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000e3f4:	e0bffd17 	ldw	r2,-12(fp)
1000e3f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e3fc:	00004906 	br	1000e524 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000e400:	e0bffc17 	ldw	r2,-16(fp)
1000e404:	10800a17 	ldw	r2,40(r2)
1000e408:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000e40c:	e0bffc17 	ldw	r2,-16(fp)
1000e410:	10800b17 	ldw	r2,44(r2)
1000e414:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000e418:	e0fff717 	ldw	r3,-36(fp)
1000e41c:	e0bff817 	ldw	r2,-32(fp)
1000e420:	18800536 	bltu	r3,r2,1000e438 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000e424:	e0fff717 	ldw	r3,-36(fp)
1000e428:	e0bff817 	ldw	r2,-32(fp)
1000e42c:	1885c83a 	sub	r2,r3,r2
1000e430:	e0bff615 	stw	r2,-40(fp)
1000e434:	00000406 	br	1000e448 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000e438:	00c20004 	movi	r3,2048
1000e43c:	e0bff817 	ldw	r2,-32(fp)
1000e440:	1885c83a 	sub	r2,r3,r2
1000e444:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e448:	e0bff617 	ldw	r2,-40(fp)
1000e44c:	1000011e 	bne	r2,zero,1000e454 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000e450:	00001d06 	br	1000e4c8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000e454:	e0fffe17 	ldw	r3,-8(fp)
1000e458:	e0bff617 	ldw	r2,-40(fp)
1000e45c:	1880022e 	bgeu	r3,r2,1000e468 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000e460:	e0bffe17 	ldw	r2,-8(fp)
1000e464:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000e468:	e0bff817 	ldw	r2,-32(fp)
1000e46c:	10800e04 	addi	r2,r2,56
1000e470:	e0fffc17 	ldw	r3,-16(fp)
1000e474:	1885883a 	add	r2,r3,r2
1000e478:	e13ff517 	ldw	r4,-44(fp)
1000e47c:	100b883a 	mov	r5,r2
1000e480:	e1bff617 	ldw	r6,-40(fp)
1000e484:	00062340 	call	10006234 <memcpy>
      ptr   += n;
1000e488:	e0fff517 	ldw	r3,-44(fp)
1000e48c:	e0bff617 	ldw	r2,-40(fp)
1000e490:	1885883a 	add	r2,r3,r2
1000e494:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000e498:	e0fffe17 	ldw	r3,-8(fp)
1000e49c:	e0bff617 	ldw	r2,-40(fp)
1000e4a0:	1885c83a 	sub	r2,r3,r2
1000e4a4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e4a8:	e0fff817 	ldw	r3,-32(fp)
1000e4ac:	e0bff617 	ldw	r2,-40(fp)
1000e4b0:	1885883a 	add	r2,r3,r2
1000e4b4:	10c1ffcc 	andi	r3,r2,2047
1000e4b8:	e0bffc17 	ldw	r2,-16(fp)
1000e4bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000e4c0:	e0bffe17 	ldw	r2,-8(fp)
1000e4c4:	00bfce16 	blt	zero,r2,1000e400 <__alt_data_end+0xf800e400>

    /* If we read any data then return it */
    if (ptr != buffer)
1000e4c8:	e0fff517 	ldw	r3,-44(fp)
1000e4cc:	e0bffd17 	ldw	r2,-12(fp)
1000e4d0:	18800126 	beq	r3,r2,1000e4d8 <altera_avalon_jtag_uart_read+0x104>
      break;
1000e4d4:	00001506 	br	1000e52c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000e4d8:	e0bfff17 	ldw	r2,-4(fp)
1000e4dc:	1090000c 	andi	r2,r2,16384
1000e4e0:	10000126 	beq	r2,zero,1000e4e8 <altera_avalon_jtag_uart_read+0x114>
      break;
1000e4e4:	00001106 	br	1000e52c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000e4e8:	0001883a 	nop
1000e4ec:	e0bffc17 	ldw	r2,-16(fp)
1000e4f0:	10c00a17 	ldw	r3,40(r2)
1000e4f4:	e0bff717 	ldw	r2,-36(fp)
1000e4f8:	1880051e 	bne	r3,r2,1000e510 <altera_avalon_jtag_uart_read+0x13c>
1000e4fc:	e0bffc17 	ldw	r2,-16(fp)
1000e500:	10c00917 	ldw	r3,36(r2)
1000e504:	e0bffc17 	ldw	r2,-16(fp)
1000e508:	10800117 	ldw	r2,4(r2)
1000e50c:	18bff736 	bltu	r3,r2,1000e4ec <__alt_data_end+0xf800e4ec>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000e510:	e0bffc17 	ldw	r2,-16(fp)
1000e514:	10c00a17 	ldw	r3,40(r2)
1000e518:	e0bff717 	ldw	r2,-36(fp)
1000e51c:	1880011e 	bne	r3,r2,1000e524 <altera_avalon_jtag_uart_read+0x150>
      break;
1000e520:	00000206 	br	1000e52c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e524:	e0bffe17 	ldw	r2,-8(fp)
1000e528:	00bfb516 	blt	zero,r2,1000e400 <__alt_data_end+0xf800e400>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000e52c:	e0fff517 	ldw	r3,-44(fp)
1000e530:	e0bffd17 	ldw	r2,-12(fp)
1000e534:	18801726 	beq	r3,r2,1000e594 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e538:	0005303a 	rdctl	r2,status
1000e53c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e540:	e0fffa17 	ldw	r3,-24(fp)
1000e544:	00bfff84 	movi	r2,-2
1000e548:	1884703a 	and	r2,r3,r2
1000e54c:	1001703a 	wrctl	status,r2
  
  return context;
1000e550:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000e554:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e558:	e0bffc17 	ldw	r2,-16(fp)
1000e55c:	10800817 	ldw	r2,32(r2)
1000e560:	10c00054 	ori	r3,r2,1
1000e564:	e0bffc17 	ldw	r2,-16(fp)
1000e568:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e56c:	e0bffc17 	ldw	r2,-16(fp)
1000e570:	10800017 	ldw	r2,0(r2)
1000e574:	10800104 	addi	r2,r2,4
1000e578:	e0fffc17 	ldw	r3,-16(fp)
1000e57c:	18c00817 	ldw	r3,32(r3)
1000e580:	10c00035 	stwio	r3,0(r2)
1000e584:	e0bff917 	ldw	r2,-28(fp)
1000e588:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e58c:	e0bffb17 	ldw	r2,-20(fp)
1000e590:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000e594:	e0fff517 	ldw	r3,-44(fp)
1000e598:	e0bffd17 	ldw	r2,-12(fp)
1000e59c:	18800426 	beq	r3,r2,1000e5b0 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
1000e5a0:	e0fff517 	ldw	r3,-44(fp)
1000e5a4:	e0bffd17 	ldw	r2,-12(fp)
1000e5a8:	1885c83a 	sub	r2,r3,r2
1000e5ac:	00000606 	br	1000e5c8 <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
1000e5b0:	e0bfff17 	ldw	r2,-4(fp)
1000e5b4:	1090000c 	andi	r2,r2,16384
1000e5b8:	10000226 	beq	r2,zero,1000e5c4 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
1000e5bc:	00bffd44 	movi	r2,-11
1000e5c0:	00000106 	br	1000e5c8 <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
1000e5c4:	00bffec4 	movi	r2,-5
}
1000e5c8:	e037883a 	mov	sp,fp
1000e5cc:	dfc00117 	ldw	ra,4(sp)
1000e5d0:	df000017 	ldw	fp,0(sp)
1000e5d4:	dec00204 	addi	sp,sp,8
1000e5d8:	f800283a 	ret

1000e5dc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000e5dc:	defff304 	addi	sp,sp,-52
1000e5e0:	dfc00c15 	stw	ra,48(sp)
1000e5e4:	df000b15 	stw	fp,44(sp)
1000e5e8:	df000b04 	addi	fp,sp,44
1000e5ec:	e13ffc15 	stw	r4,-16(fp)
1000e5f0:	e17ffd15 	stw	r5,-12(fp)
1000e5f4:	e1bffe15 	stw	r6,-8(fp)
1000e5f8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000e5fc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000e600:	e0bffd17 	ldw	r2,-12(fp)
1000e604:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000e608:	00003906 	br	1000e6f0 <altera_avalon_jtag_uart_write+0x114>
1000e60c:	00003806 	br	1000e6f0 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000e610:	e0bffc17 	ldw	r2,-16(fp)
1000e614:	10800c17 	ldw	r2,48(r2)
1000e618:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000e61c:	e0bffc17 	ldw	r2,-16(fp)
1000e620:	10800d17 	ldw	r2,52(r2)
1000e624:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000e628:	e0fff817 	ldw	r3,-32(fp)
1000e62c:	e0bff517 	ldw	r2,-44(fp)
1000e630:	1880062e 	bgeu	r3,r2,1000e64c <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
1000e634:	e0fff517 	ldw	r3,-44(fp)
1000e638:	e0bff817 	ldw	r2,-32(fp)
1000e63c:	1885c83a 	sub	r2,r3,r2
1000e640:	10bfffc4 	addi	r2,r2,-1
1000e644:	e0bff615 	stw	r2,-40(fp)
1000e648:	00000b06 	br	1000e678 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
1000e64c:	e0bff517 	ldw	r2,-44(fp)
1000e650:	10000526 	beq	r2,zero,1000e668 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000e654:	00c20004 	movi	r3,2048
1000e658:	e0bff817 	ldw	r2,-32(fp)
1000e65c:	1885c83a 	sub	r2,r3,r2
1000e660:	e0bff615 	stw	r2,-40(fp)
1000e664:	00000406 	br	1000e678 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000e668:	00c1ffc4 	movi	r3,2047
1000e66c:	e0bff817 	ldw	r2,-32(fp)
1000e670:	1885c83a 	sub	r2,r3,r2
1000e674:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e678:	e0bff617 	ldw	r2,-40(fp)
1000e67c:	1000011e 	bne	r2,zero,1000e684 <altera_avalon_jtag_uart_write+0xa8>
        break;
1000e680:	00001d06 	br	1000e6f8 <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
1000e684:	e0fffe17 	ldw	r3,-8(fp)
1000e688:	e0bff617 	ldw	r2,-40(fp)
1000e68c:	1880022e 	bgeu	r3,r2,1000e698 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
1000e690:	e0bffe17 	ldw	r2,-8(fp)
1000e694:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000e698:	e0bff817 	ldw	r2,-32(fp)
1000e69c:	10820e04 	addi	r2,r2,2104
1000e6a0:	e0fffc17 	ldw	r3,-16(fp)
1000e6a4:	1885883a 	add	r2,r3,r2
1000e6a8:	1009883a 	mov	r4,r2
1000e6ac:	e17ffd17 	ldw	r5,-12(fp)
1000e6b0:	e1bff617 	ldw	r6,-40(fp)
1000e6b4:	00062340 	call	10006234 <memcpy>
      ptr   += n;
1000e6b8:	e0fffd17 	ldw	r3,-12(fp)
1000e6bc:	e0bff617 	ldw	r2,-40(fp)
1000e6c0:	1885883a 	add	r2,r3,r2
1000e6c4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000e6c8:	e0fffe17 	ldw	r3,-8(fp)
1000e6cc:	e0bff617 	ldw	r2,-40(fp)
1000e6d0:	1885c83a 	sub	r2,r3,r2
1000e6d4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e6d8:	e0fff817 	ldw	r3,-32(fp)
1000e6dc:	e0bff617 	ldw	r2,-40(fp)
1000e6e0:	1885883a 	add	r2,r3,r2
1000e6e4:	10c1ffcc 	andi	r3,r2,2047
1000e6e8:	e0bffc17 	ldw	r2,-16(fp)
1000e6ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000e6f0:	e0bffe17 	ldw	r2,-8(fp)
1000e6f4:	00bfc616 	blt	zero,r2,1000e610 <__alt_data_end+0xf800e610>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e6f8:	0005303a 	rdctl	r2,status
1000e6fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e700:	e0fffa17 	ldw	r3,-24(fp)
1000e704:	00bfff84 	movi	r2,-2
1000e708:	1884703a 	and	r2,r3,r2
1000e70c:	1001703a 	wrctl	status,r2
  
  return context;
1000e710:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000e714:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e718:	e0bffc17 	ldw	r2,-16(fp)
1000e71c:	10800817 	ldw	r2,32(r2)
1000e720:	10c00094 	ori	r3,r2,2
1000e724:	e0bffc17 	ldw	r2,-16(fp)
1000e728:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e72c:	e0bffc17 	ldw	r2,-16(fp)
1000e730:	10800017 	ldw	r2,0(r2)
1000e734:	10800104 	addi	r2,r2,4
1000e738:	e0fffc17 	ldw	r3,-16(fp)
1000e73c:	18c00817 	ldw	r3,32(r3)
1000e740:	10c00035 	stwio	r3,0(r2)
1000e744:	e0bff917 	ldw	r2,-28(fp)
1000e748:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e74c:	e0bffb17 	ldw	r2,-20(fp)
1000e750:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000e754:	e0bffe17 	ldw	r2,-8(fp)
1000e758:	0080120e 	bge	zero,r2,1000e7a4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000e75c:	e0bfff17 	ldw	r2,-4(fp)
1000e760:	1090000c 	andi	r2,r2,16384
1000e764:	10000126 	beq	r2,zero,1000e76c <altera_avalon_jtag_uart_write+0x190>
        break;
1000e768:	00001006 	br	1000e7ac <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000e76c:	0001883a 	nop
1000e770:	e0bffc17 	ldw	r2,-16(fp)
1000e774:	10c00d17 	ldw	r3,52(r2)
1000e778:	e0bff517 	ldw	r2,-44(fp)
1000e77c:	1880051e 	bne	r3,r2,1000e794 <altera_avalon_jtag_uart_write+0x1b8>
1000e780:	e0bffc17 	ldw	r2,-16(fp)
1000e784:	10c00917 	ldw	r3,36(r2)
1000e788:	e0bffc17 	ldw	r2,-16(fp)
1000e78c:	10800117 	ldw	r2,4(r2)
1000e790:	18bff736 	bltu	r3,r2,1000e770 <__alt_data_end+0xf800e770>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000e794:	e0bffc17 	ldw	r2,-16(fp)
1000e798:	10800917 	ldw	r2,36(r2)
1000e79c:	10000126 	beq	r2,zero,1000e7a4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000e7a0:	00000206 	br	1000e7ac <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000e7a4:	e0bffe17 	ldw	r2,-8(fp)
1000e7a8:	00bf9816 	blt	zero,r2,1000e60c <__alt_data_end+0xf800e60c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000e7ac:	e0fffd17 	ldw	r3,-12(fp)
1000e7b0:	e0bff717 	ldw	r2,-36(fp)
1000e7b4:	18800426 	beq	r3,r2,1000e7c8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000e7b8:	e0fffd17 	ldw	r3,-12(fp)
1000e7bc:	e0bff717 	ldw	r2,-36(fp)
1000e7c0:	1885c83a 	sub	r2,r3,r2
1000e7c4:	00000606 	br	1000e7e0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000e7c8:	e0bfff17 	ldw	r2,-4(fp)
1000e7cc:	1090000c 	andi	r2,r2,16384
1000e7d0:	10000226 	beq	r2,zero,1000e7dc <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000e7d4:	00bffd44 	movi	r2,-11
1000e7d8:	00000106 	br	1000e7e0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000e7dc:	00bffec4 	movi	r2,-5
}
1000e7e0:	e037883a 	mov	sp,fp
1000e7e4:	dfc00117 	ldw	ra,4(sp)
1000e7e8:	df000017 	ldw	fp,0(sp)
1000e7ec:	dec00204 	addi	sp,sp,8
1000e7f0:	f800283a 	ret

1000e7f4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000e7f4:	defff504 	addi	sp,sp,-44
1000e7f8:	df000a15 	stw	fp,40(sp)
1000e7fc:	df000a04 	addi	fp,sp,40
1000e800:	e13ffc15 	stw	r4,-16(fp)
1000e804:	e17ffd15 	stw	r5,-12(fp)
1000e808:	e1bffe15 	stw	r6,-8(fp)
1000e80c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000e810:	e03ff615 	stw	zero,-40(fp)
1000e814:	00840074 	movhi	r2,4097
1000e818:	108c9904 	addi	r2,r2,12900
1000e81c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000e820:	10003f26 	beq	r2,zero,1000e920 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000e824:	e0bffc17 	ldw	r2,-16(fp)
1000e828:	10003b26 	beq	r2,zero,1000e918 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000e82c:	e0bffc17 	ldw	r2,-16(fp)
1000e830:	e0fffe17 	ldw	r3,-8(fp)
1000e834:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000e838:	e0bffc17 	ldw	r2,-16(fp)
1000e83c:	e0ffff17 	ldw	r3,-4(fp)
1000e840:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e844:	0005303a 	rdctl	r2,status
1000e848:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e84c:	e0fff817 	ldw	r3,-32(fp)
1000e850:	00bfff84 	movi	r2,-2
1000e854:	1884703a 	and	r2,r3,r2
1000e858:	1001703a 	wrctl	status,r2
  
  return context;
1000e85c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000e860:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000e864:	00840074 	movhi	r2,4097
1000e868:	108c9a04 	addi	r2,r2,12904
1000e86c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000e870:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000e874:	e0fffd17 	ldw	r3,-12(fp)
1000e878:	e0bff617 	ldw	r2,-40(fp)
1000e87c:	1885883a 	add	r2,r3,r2
1000e880:	10c00044 	addi	r3,r2,1
1000e884:	e0bffc17 	ldw	r2,-16(fp)
1000e888:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000e88c:	e0bffc17 	ldw	r2,-16(fp)
1000e890:	10c00217 	ldw	r3,8(r2)
1000e894:	e0bff617 	ldw	r2,-40(fp)
1000e898:	1880042e 	bgeu	r3,r2,1000e8ac <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000e89c:	e0bffc17 	ldw	r2,-16(fp)
1000e8a0:	00c00044 	movi	r3,1
1000e8a4:	10c00405 	stb	r3,16(r2)
1000e8a8:	00000206 	br	1000e8b4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000e8ac:	e0bffc17 	ldw	r2,-16(fp)
1000e8b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000e8b4:	e0bffc17 	ldw	r2,-16(fp)
1000e8b8:	00c40074 	movhi	r3,4097
1000e8bc:	18c5cf04 	addi	r3,r3,5948
1000e8c0:	e0fff915 	stw	r3,-28(fp)
1000e8c4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000e8c8:	e0bffa17 	ldw	r2,-24(fp)
1000e8cc:	e0fff917 	ldw	r3,-28(fp)
1000e8d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000e8d4:	e0bff917 	ldw	r2,-28(fp)
1000e8d8:	10c00017 	ldw	r3,0(r2)
1000e8dc:	e0bffa17 	ldw	r2,-24(fp)
1000e8e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000e8e4:	e0bff917 	ldw	r2,-28(fp)
1000e8e8:	10800017 	ldw	r2,0(r2)
1000e8ec:	e0fffa17 	ldw	r3,-24(fp)
1000e8f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000e8f4:	e0bff917 	ldw	r2,-28(fp)
1000e8f8:	e0fffa17 	ldw	r3,-24(fp)
1000e8fc:	10c00015 	stw	r3,0(r2)
1000e900:	e0bff717 	ldw	r2,-36(fp)
1000e904:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e908:	e0bffb17 	ldw	r2,-20(fp)
1000e90c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000e910:	0005883a 	mov	r2,zero
1000e914:	00000306 	br	1000e924 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000e918:	00bffa84 	movi	r2,-22
1000e91c:	00000106 	br	1000e924 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000e920:	00bfde84 	movi	r2,-134
  }
}
1000e924:	e037883a 	mov	sp,fp
1000e928:	df000017 	ldw	fp,0(sp)
1000e92c:	dec00104 	addi	sp,sp,4
1000e930:	f800283a 	ret

1000e934 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000e934:	deffff04 	addi	sp,sp,-4
1000e938:	df000015 	stw	fp,0(sp)
1000e93c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000e940:	e037883a 	mov	sp,fp
1000e944:	df000017 	ldw	fp,0(sp)
1000e948:	dec00104 	addi	sp,sp,4
1000e94c:	f800283a 	ret

1000e950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e950:	defffe04 	addi	sp,sp,-8
1000e954:	dfc00115 	stw	ra,4(sp)
1000e958:	df000015 	stw	fp,0(sp)
1000e95c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e960:	00840074 	movhi	r2,4097
1000e964:	1085cc04 	addi	r2,r2,5936
1000e968:	10800017 	ldw	r2,0(r2)
1000e96c:	10000526 	beq	r2,zero,1000e984 <alt_get_errno+0x34>
1000e970:	00840074 	movhi	r2,4097
1000e974:	1085cc04 	addi	r2,r2,5936
1000e978:	10800017 	ldw	r2,0(r2)
1000e97c:	103ee83a 	callr	r2
1000e980:	00000206 	br	1000e98c <alt_get_errno+0x3c>
1000e984:	00840074 	movhi	r2,4097
1000e988:	108c9404 	addi	r2,r2,12880
}
1000e98c:	e037883a 	mov	sp,fp
1000e990:	dfc00117 	ldw	ra,4(sp)
1000e994:	df000017 	ldw	fp,0(sp)
1000e998:	dec00204 	addi	sp,sp,8
1000e99c:	f800283a 	ret

1000e9a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000e9a0:	defffa04 	addi	sp,sp,-24
1000e9a4:	dfc00515 	stw	ra,20(sp)
1000e9a8:	df000415 	stw	fp,16(sp)
1000e9ac:	df000404 	addi	fp,sp,16
1000e9b0:	e13ffe15 	stw	r4,-8(fp)
1000e9b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000e9b8:	e0bffe17 	ldw	r2,-8(fp)
1000e9bc:	10000326 	beq	r2,zero,1000e9cc <alt_dev_llist_insert+0x2c>
1000e9c0:	e0bffe17 	ldw	r2,-8(fp)
1000e9c4:	10800217 	ldw	r2,8(r2)
1000e9c8:	1000051e 	bne	r2,zero,1000e9e0 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
1000e9cc:	000e9500 	call	1000e950 <alt_get_errno>
1000e9d0:	00c00584 	movi	r3,22
1000e9d4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
1000e9d8:	00bffa84 	movi	r2,-22
1000e9dc:	00001306 	br	1000ea2c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000e9e0:	e0bffe17 	ldw	r2,-8(fp)
1000e9e4:	e0ffff17 	ldw	r3,-4(fp)
1000e9e8:	e0fffc15 	stw	r3,-16(fp)
1000e9ec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000e9f0:	e0bffd17 	ldw	r2,-12(fp)
1000e9f4:	e0fffc17 	ldw	r3,-16(fp)
1000e9f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000e9fc:	e0bffc17 	ldw	r2,-16(fp)
1000ea00:	10c00017 	ldw	r3,0(r2)
1000ea04:	e0bffd17 	ldw	r2,-12(fp)
1000ea08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ea0c:	e0bffc17 	ldw	r2,-16(fp)
1000ea10:	10800017 	ldw	r2,0(r2)
1000ea14:	e0fffd17 	ldw	r3,-12(fp)
1000ea18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ea1c:	e0bffc17 	ldw	r2,-16(fp)
1000ea20:	e0fffd17 	ldw	r3,-12(fp)
1000ea24:	10c00015 	stw	r3,0(r2)

  return 0;  
1000ea28:	0005883a 	mov	r2,zero
}
1000ea2c:	e037883a 	mov	sp,fp
1000ea30:	dfc00117 	ldw	ra,4(sp)
1000ea34:	df000017 	ldw	fp,0(sp)
1000ea38:	dec00204 	addi	sp,sp,8
1000ea3c:	f800283a 	ret

1000ea40 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000ea40:	defffd04 	addi	sp,sp,-12
1000ea44:	dfc00215 	stw	ra,8(sp)
1000ea48:	df000115 	stw	fp,4(sp)
1000ea4c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ea50:	00840074 	movhi	r2,4097
1000ea54:	10be4c04 	addi	r2,r2,-1744
1000ea58:	e0bfff15 	stw	r2,-4(fp)
1000ea5c:	00000606 	br	1000ea78 <_do_ctors+0x38>
        (*ctor) (); 
1000ea60:	e0bfff17 	ldw	r2,-4(fp)
1000ea64:	10800017 	ldw	r2,0(r2)
1000ea68:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000ea6c:	e0bfff17 	ldw	r2,-4(fp)
1000ea70:	10bfff04 	addi	r2,r2,-4
1000ea74:	e0bfff15 	stw	r2,-4(fp)
1000ea78:	e0ffff17 	ldw	r3,-4(fp)
1000ea7c:	00840074 	movhi	r2,4097
1000ea80:	10be4d04 	addi	r2,r2,-1740
1000ea84:	18bff62e 	bgeu	r3,r2,1000ea60 <__alt_data_end+0xf800ea60>
        (*ctor) (); 
}
1000ea88:	e037883a 	mov	sp,fp
1000ea8c:	dfc00117 	ldw	ra,4(sp)
1000ea90:	df000017 	ldw	fp,0(sp)
1000ea94:	dec00204 	addi	sp,sp,8
1000ea98:	f800283a 	ret

1000ea9c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000ea9c:	defffd04 	addi	sp,sp,-12
1000eaa0:	dfc00215 	stw	ra,8(sp)
1000eaa4:	df000115 	stw	fp,4(sp)
1000eaa8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000eaac:	00840074 	movhi	r2,4097
1000eab0:	10be4c04 	addi	r2,r2,-1744
1000eab4:	e0bfff15 	stw	r2,-4(fp)
1000eab8:	00000606 	br	1000ead4 <_do_dtors+0x38>
        (*dtor) (); 
1000eabc:	e0bfff17 	ldw	r2,-4(fp)
1000eac0:	10800017 	ldw	r2,0(r2)
1000eac4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000eac8:	e0bfff17 	ldw	r2,-4(fp)
1000eacc:	10bfff04 	addi	r2,r2,-4
1000ead0:	e0bfff15 	stw	r2,-4(fp)
1000ead4:	e0ffff17 	ldw	r3,-4(fp)
1000ead8:	00840074 	movhi	r2,4097
1000eadc:	10be4d04 	addi	r2,r2,-1740
1000eae0:	18bff62e 	bgeu	r3,r2,1000eabc <__alt_data_end+0xf800eabc>
        (*dtor) (); 
}
1000eae4:	e037883a 	mov	sp,fp
1000eae8:	dfc00117 	ldw	ra,4(sp)
1000eaec:	df000017 	ldw	fp,0(sp)
1000eaf0:	dec00204 	addi	sp,sp,8
1000eaf4:	f800283a 	ret

1000eaf8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000eaf8:	deffff04 	addi	sp,sp,-4
1000eafc:	df000015 	stw	fp,0(sp)
1000eb00:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000eb04:	e037883a 	mov	sp,fp
1000eb08:	df000017 	ldw	fp,0(sp)
1000eb0c:	dec00104 	addi	sp,sp,4
1000eb10:	f800283a 	ret

1000eb14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000eb14:	defff904 	addi	sp,sp,-28
1000eb18:	dfc00615 	stw	ra,24(sp)
1000eb1c:	df000515 	stw	fp,20(sp)
1000eb20:	df000504 	addi	fp,sp,20
1000eb24:	e13ffc15 	stw	r4,-16(fp)
1000eb28:	e17ffd15 	stw	r5,-12(fp)
1000eb2c:	e1bffe15 	stw	r6,-8(fp)
1000eb30:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000eb34:	e0800217 	ldw	r2,8(fp)
1000eb38:	d8800015 	stw	r2,0(sp)
1000eb3c:	e13ffc17 	ldw	r4,-16(fp)
1000eb40:	e17ffd17 	ldw	r5,-12(fp)
1000eb44:	e1bffe17 	ldw	r6,-8(fp)
1000eb48:	e1ffff17 	ldw	r7,-4(fp)
1000eb4c:	000ecec0 	call	1000ecec <alt_iic_isr_register>
}  
1000eb50:	e037883a 	mov	sp,fp
1000eb54:	dfc00117 	ldw	ra,4(sp)
1000eb58:	df000017 	ldw	fp,0(sp)
1000eb5c:	dec00204 	addi	sp,sp,8
1000eb60:	f800283a 	ret

1000eb64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000eb64:	defff904 	addi	sp,sp,-28
1000eb68:	df000615 	stw	fp,24(sp)
1000eb6c:	df000604 	addi	fp,sp,24
1000eb70:	e13ffe15 	stw	r4,-8(fp)
1000eb74:	e17fff15 	stw	r5,-4(fp)
1000eb78:	e0bfff17 	ldw	r2,-4(fp)
1000eb7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000eb80:	0005303a 	rdctl	r2,status
1000eb84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000eb88:	e0fffb17 	ldw	r3,-20(fp)
1000eb8c:	00bfff84 	movi	r2,-2
1000eb90:	1884703a 	and	r2,r3,r2
1000eb94:	1001703a 	wrctl	status,r2
  
  return context;
1000eb98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000eb9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000eba0:	e0bffa17 	ldw	r2,-24(fp)
1000eba4:	00c00044 	movi	r3,1
1000eba8:	1884983a 	sll	r2,r3,r2
1000ebac:	1007883a 	mov	r3,r2
1000ebb0:	00840074 	movhi	r2,4097
1000ebb4:	108c9804 	addi	r2,r2,12896
1000ebb8:	10800017 	ldw	r2,0(r2)
1000ebbc:	1886b03a 	or	r3,r3,r2
1000ebc0:	00840074 	movhi	r2,4097
1000ebc4:	108c9804 	addi	r2,r2,12896
1000ebc8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000ebcc:	00840074 	movhi	r2,4097
1000ebd0:	108c9804 	addi	r2,r2,12896
1000ebd4:	10800017 	ldw	r2,0(r2)
1000ebd8:	100170fa 	wrctl	ienable,r2
1000ebdc:	e0bffc17 	ldw	r2,-16(fp)
1000ebe0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ebe4:	e0bffd17 	ldw	r2,-12(fp)
1000ebe8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000ebec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
1000ebf0:	e037883a 	mov	sp,fp
1000ebf4:	df000017 	ldw	fp,0(sp)
1000ebf8:	dec00104 	addi	sp,sp,4
1000ebfc:	f800283a 	ret

1000ec00 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000ec00:	defff904 	addi	sp,sp,-28
1000ec04:	df000615 	stw	fp,24(sp)
1000ec08:	df000604 	addi	fp,sp,24
1000ec0c:	e13ffe15 	stw	r4,-8(fp)
1000ec10:	e17fff15 	stw	r5,-4(fp)
1000ec14:	e0bfff17 	ldw	r2,-4(fp)
1000ec18:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ec1c:	0005303a 	rdctl	r2,status
1000ec20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ec24:	e0fffb17 	ldw	r3,-20(fp)
1000ec28:	00bfff84 	movi	r2,-2
1000ec2c:	1884703a 	and	r2,r3,r2
1000ec30:	1001703a 	wrctl	status,r2
  
  return context;
1000ec34:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000ec38:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000ec3c:	e0bffa17 	ldw	r2,-24(fp)
1000ec40:	00c00044 	movi	r3,1
1000ec44:	1884983a 	sll	r2,r3,r2
1000ec48:	0084303a 	nor	r2,zero,r2
1000ec4c:	1007883a 	mov	r3,r2
1000ec50:	00840074 	movhi	r2,4097
1000ec54:	108c9804 	addi	r2,r2,12896
1000ec58:	10800017 	ldw	r2,0(r2)
1000ec5c:	1886703a 	and	r3,r3,r2
1000ec60:	00840074 	movhi	r2,4097
1000ec64:	108c9804 	addi	r2,r2,12896
1000ec68:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000ec6c:	00840074 	movhi	r2,4097
1000ec70:	108c9804 	addi	r2,r2,12896
1000ec74:	10800017 	ldw	r2,0(r2)
1000ec78:	100170fa 	wrctl	ienable,r2
1000ec7c:	e0bffc17 	ldw	r2,-16(fp)
1000ec80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ec84:	e0bffd17 	ldw	r2,-12(fp)
1000ec88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000ec8c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
1000ec90:	e037883a 	mov	sp,fp
1000ec94:	df000017 	ldw	fp,0(sp)
1000ec98:	dec00104 	addi	sp,sp,4
1000ec9c:	f800283a 	ret

1000eca0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000eca0:	defffc04 	addi	sp,sp,-16
1000eca4:	df000315 	stw	fp,12(sp)
1000eca8:	df000304 	addi	fp,sp,12
1000ecac:	e13ffe15 	stw	r4,-8(fp)
1000ecb0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000ecb4:	000530fa 	rdctl	r2,ienable
1000ecb8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000ecbc:	e0bfff17 	ldw	r2,-4(fp)
1000ecc0:	00c00044 	movi	r3,1
1000ecc4:	1884983a 	sll	r2,r3,r2
1000ecc8:	1007883a 	mov	r3,r2
1000eccc:	e0bffd17 	ldw	r2,-12(fp)
1000ecd0:	1884703a 	and	r2,r3,r2
1000ecd4:	1004c03a 	cmpne	r2,r2,zero
1000ecd8:	10803fcc 	andi	r2,r2,255
}
1000ecdc:	e037883a 	mov	sp,fp
1000ece0:	df000017 	ldw	fp,0(sp)
1000ece4:	dec00104 	addi	sp,sp,4
1000ece8:	f800283a 	ret

1000ecec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000ecec:	defff504 	addi	sp,sp,-44
1000ecf0:	dfc00a15 	stw	ra,40(sp)
1000ecf4:	df000915 	stw	fp,36(sp)
1000ecf8:	df000904 	addi	fp,sp,36
1000ecfc:	e13ffc15 	stw	r4,-16(fp)
1000ed00:	e17ffd15 	stw	r5,-12(fp)
1000ed04:	e1bffe15 	stw	r6,-8(fp)
1000ed08:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000ed0c:	00bffa84 	movi	r2,-22
1000ed10:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000ed14:	e0bffd17 	ldw	r2,-12(fp)
1000ed18:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000ed1c:	e0bff817 	ldw	r2,-32(fp)
1000ed20:	10800808 	cmpgei	r2,r2,32
1000ed24:	1000271e 	bne	r2,zero,1000edc4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ed28:	0005303a 	rdctl	r2,status
1000ed2c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ed30:	e0fffa17 	ldw	r3,-24(fp)
1000ed34:	00bfff84 	movi	r2,-2
1000ed38:	1884703a 	and	r2,r3,r2
1000ed3c:	1001703a 	wrctl	status,r2
  
  return context;
1000ed40:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000ed44:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000ed48:	00c40074 	movhi	r3,4097
1000ed4c:	18cca504 	addi	r3,r3,12948
1000ed50:	e0bff817 	ldw	r2,-32(fp)
1000ed54:	100490fa 	slli	r2,r2,3
1000ed58:	1885883a 	add	r2,r3,r2
1000ed5c:	e0fffe17 	ldw	r3,-8(fp)
1000ed60:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000ed64:	00c40074 	movhi	r3,4097
1000ed68:	18cca504 	addi	r3,r3,12948
1000ed6c:	e0bff817 	ldw	r2,-32(fp)
1000ed70:	100490fa 	slli	r2,r2,3
1000ed74:	1885883a 	add	r2,r3,r2
1000ed78:	10800104 	addi	r2,r2,4
1000ed7c:	e0ffff17 	ldw	r3,-4(fp)
1000ed80:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000ed84:	e0bffe17 	ldw	r2,-8(fp)
1000ed88:	10000526 	beq	r2,zero,1000eda0 <alt_iic_isr_register+0xb4>
1000ed8c:	e0bff817 	ldw	r2,-32(fp)
1000ed90:	e13ffc17 	ldw	r4,-16(fp)
1000ed94:	100b883a 	mov	r5,r2
1000ed98:	000eb640 	call	1000eb64 <alt_ic_irq_enable>
1000ed9c:	00000406 	br	1000edb0 <alt_iic_isr_register+0xc4>
1000eda0:	e0bff817 	ldw	r2,-32(fp)
1000eda4:	e13ffc17 	ldw	r4,-16(fp)
1000eda8:	100b883a 	mov	r5,r2
1000edac:	000ec000 	call	1000ec00 <alt_ic_irq_disable>
1000edb0:	e0bff715 	stw	r2,-36(fp)
1000edb4:	e0bff917 	ldw	r2,-28(fp)
1000edb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000edbc:	e0bffb17 	ldw	r2,-20(fp)
1000edc0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000edc4:	e0bff717 	ldw	r2,-36(fp)
}
1000edc8:	e037883a 	mov	sp,fp
1000edcc:	dfc00117 	ldw	ra,4(sp)
1000edd0:	df000017 	ldw	fp,0(sp)
1000edd4:	dec00204 	addi	sp,sp,8
1000edd8:	f800283a 	ret

1000eddc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000eddc:	defff804 	addi	sp,sp,-32
1000ede0:	dfc00715 	stw	ra,28(sp)
1000ede4:	df000615 	stw	fp,24(sp)
1000ede8:	dc000515 	stw	r16,20(sp)
1000edec:	df000604 	addi	fp,sp,24
1000edf0:	e13ffb15 	stw	r4,-20(fp)
1000edf4:	e17ffc15 	stw	r5,-16(fp)
1000edf8:	e1bffd15 	stw	r6,-12(fp)
1000edfc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000ee00:	e13ffc17 	ldw	r4,-16(fp)
1000ee04:	e17ffd17 	ldw	r5,-12(fp)
1000ee08:	e1bffe17 	ldw	r6,-8(fp)
1000ee0c:	000f0780 	call	1000f078 <open>
1000ee10:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000ee14:	e0bffa17 	ldw	r2,-24(fp)
1000ee18:	10002216 	blt	r2,zero,1000eea4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000ee1c:	04040074 	movhi	r16,4097
1000ee20:	84014704 	addi	r16,r16,1308
1000ee24:	e0bffa17 	ldw	r2,-24(fp)
1000ee28:	1009883a 	mov	r4,r2
1000ee2c:	01400304 	movi	r5,12
1000ee30:	000ab040 	call	1000ab04 <__mulsi3>
1000ee34:	8085883a 	add	r2,r16,r2
1000ee38:	10c00017 	ldw	r3,0(r2)
1000ee3c:	e0bffb17 	ldw	r2,-20(fp)
1000ee40:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000ee44:	04040074 	movhi	r16,4097
1000ee48:	84014704 	addi	r16,r16,1308
1000ee4c:	e0bffa17 	ldw	r2,-24(fp)
1000ee50:	1009883a 	mov	r4,r2
1000ee54:	01400304 	movi	r5,12
1000ee58:	000ab040 	call	1000ab04 <__mulsi3>
1000ee5c:	8085883a 	add	r2,r16,r2
1000ee60:	10800104 	addi	r2,r2,4
1000ee64:	10c00017 	ldw	r3,0(r2)
1000ee68:	e0bffb17 	ldw	r2,-20(fp)
1000ee6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000ee70:	04040074 	movhi	r16,4097
1000ee74:	84014704 	addi	r16,r16,1308
1000ee78:	e0bffa17 	ldw	r2,-24(fp)
1000ee7c:	1009883a 	mov	r4,r2
1000ee80:	01400304 	movi	r5,12
1000ee84:	000ab040 	call	1000ab04 <__mulsi3>
1000ee88:	8085883a 	add	r2,r16,r2
1000ee8c:	10800204 	addi	r2,r2,8
1000ee90:	10c00017 	ldw	r3,0(r2)
1000ee94:	e0bffb17 	ldw	r2,-20(fp)
1000ee98:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000ee9c:	e13ffa17 	ldw	r4,-24(fp)
1000eea0:	000da940 	call	1000da94 <alt_release_fd>
  }
} 
1000eea4:	e6ffff04 	addi	sp,fp,-4
1000eea8:	dfc00217 	ldw	ra,8(sp)
1000eeac:	df000117 	ldw	fp,4(sp)
1000eeb0:	dc000017 	ldw	r16,0(sp)
1000eeb4:	dec00304 	addi	sp,sp,12
1000eeb8:	f800283a 	ret

1000eebc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000eebc:	defffb04 	addi	sp,sp,-20
1000eec0:	dfc00415 	stw	ra,16(sp)
1000eec4:	df000315 	stw	fp,12(sp)
1000eec8:	df000304 	addi	fp,sp,12
1000eecc:	e13ffd15 	stw	r4,-12(fp)
1000eed0:	e17ffe15 	stw	r5,-8(fp)
1000eed4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000eed8:	01040074 	movhi	r4,4097
1000eedc:	21014a04 	addi	r4,r4,1320
1000eee0:	e17ffd17 	ldw	r5,-12(fp)
1000eee4:	01800044 	movi	r6,1
1000eee8:	01c07fc4 	movi	r7,511
1000eeec:	000eddc0 	call	1000eddc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000eef0:	01040074 	movhi	r4,4097
1000eef4:	21014704 	addi	r4,r4,1308
1000eef8:	e17ffe17 	ldw	r5,-8(fp)
1000eefc:	000d883a 	mov	r6,zero
1000ef00:	01c07fc4 	movi	r7,511
1000ef04:	000eddc0 	call	1000eddc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000ef08:	01040074 	movhi	r4,4097
1000ef0c:	21014d04 	addi	r4,r4,1332
1000ef10:	e17fff17 	ldw	r5,-4(fp)
1000ef14:	01800044 	movi	r6,1
1000ef18:	01c07fc4 	movi	r7,511
1000ef1c:	000eddc0 	call	1000eddc <alt_open_fd>
}  
1000ef20:	e037883a 	mov	sp,fp
1000ef24:	dfc00117 	ldw	ra,4(sp)
1000ef28:	df000017 	ldw	fp,0(sp)
1000ef2c:	dec00204 	addi	sp,sp,8
1000ef30:	f800283a 	ret

1000ef34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ef34:	defffe04 	addi	sp,sp,-8
1000ef38:	dfc00115 	stw	ra,4(sp)
1000ef3c:	df000015 	stw	fp,0(sp)
1000ef40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ef44:	00840074 	movhi	r2,4097
1000ef48:	1085cc04 	addi	r2,r2,5936
1000ef4c:	10800017 	ldw	r2,0(r2)
1000ef50:	10000526 	beq	r2,zero,1000ef68 <alt_get_errno+0x34>
1000ef54:	00840074 	movhi	r2,4097
1000ef58:	1085cc04 	addi	r2,r2,5936
1000ef5c:	10800017 	ldw	r2,0(r2)
1000ef60:	103ee83a 	callr	r2
1000ef64:	00000206 	br	1000ef70 <alt_get_errno+0x3c>
1000ef68:	00840074 	movhi	r2,4097
1000ef6c:	108c9404 	addi	r2,r2,12880
}
1000ef70:	e037883a 	mov	sp,fp
1000ef74:	dfc00117 	ldw	ra,4(sp)
1000ef78:	df000017 	ldw	fp,0(sp)
1000ef7c:	dec00204 	addi	sp,sp,8
1000ef80:	f800283a 	ret

1000ef84 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000ef84:	defffb04 	addi	sp,sp,-20
1000ef88:	dfc00415 	stw	ra,16(sp)
1000ef8c:	df000315 	stw	fp,12(sp)
1000ef90:	dc000215 	stw	r16,8(sp)
1000ef94:	df000304 	addi	fp,sp,12
1000ef98:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000ef9c:	e0bffe17 	ldw	r2,-8(fp)
1000efa0:	10800217 	ldw	r2,8(r2)
1000efa4:	10d00034 	orhi	r3,r2,16384
1000efa8:	e0bffe17 	ldw	r2,-8(fp)
1000efac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000efb0:	e03ffd15 	stw	zero,-12(fp)
1000efb4:	00002306 	br	1000f044 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000efb8:	04040074 	movhi	r16,4097
1000efbc:	84014704 	addi	r16,r16,1308
1000efc0:	e0bffd17 	ldw	r2,-12(fp)
1000efc4:	1009883a 	mov	r4,r2
1000efc8:	01400304 	movi	r5,12
1000efcc:	000ab040 	call	1000ab04 <__mulsi3>
1000efd0:	8085883a 	add	r2,r16,r2
1000efd4:	10c00017 	ldw	r3,0(r2)
1000efd8:	e0bffe17 	ldw	r2,-8(fp)
1000efdc:	10800017 	ldw	r2,0(r2)
1000efe0:	1880151e 	bne	r3,r2,1000f038 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000efe4:	04040074 	movhi	r16,4097
1000efe8:	84014704 	addi	r16,r16,1308
1000efec:	e0bffd17 	ldw	r2,-12(fp)
1000eff0:	1009883a 	mov	r4,r2
1000eff4:	01400304 	movi	r5,12
1000eff8:	000ab040 	call	1000ab04 <__mulsi3>
1000effc:	8085883a 	add	r2,r16,r2
1000f000:	10800204 	addi	r2,r2,8
1000f004:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f008:	10000b0e 	bge	r2,zero,1000f038 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000f00c:	e13ffd17 	ldw	r4,-12(fp)
1000f010:	01400304 	movi	r5,12
1000f014:	000ab040 	call	1000ab04 <__mulsi3>
1000f018:	1007883a 	mov	r3,r2
1000f01c:	00840074 	movhi	r2,4097
1000f020:	10814704 	addi	r2,r2,1308
1000f024:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f028:	e0bffe17 	ldw	r2,-8(fp)
1000f02c:	18800226 	beq	r3,r2,1000f038 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000f030:	00bffcc4 	movi	r2,-13
1000f034:	00000a06 	br	1000f060 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f038:	e0bffd17 	ldw	r2,-12(fp)
1000f03c:	10800044 	addi	r2,r2,1
1000f040:	e0bffd15 	stw	r2,-12(fp)
1000f044:	00840074 	movhi	r2,4097
1000f048:	1085cb04 	addi	r2,r2,5932
1000f04c:	10800017 	ldw	r2,0(r2)
1000f050:	1007883a 	mov	r3,r2
1000f054:	e0bffd17 	ldw	r2,-12(fp)
1000f058:	18bfd72e 	bgeu	r3,r2,1000efb8 <__alt_data_end+0xf800efb8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000f05c:	0005883a 	mov	r2,zero
}
1000f060:	e6ffff04 	addi	sp,fp,-4
1000f064:	dfc00217 	ldw	ra,8(sp)
1000f068:	df000117 	ldw	fp,4(sp)
1000f06c:	dc000017 	ldw	r16,0(sp)
1000f070:	dec00304 	addi	sp,sp,12
1000f074:	f800283a 	ret

1000f078 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000f078:	defff604 	addi	sp,sp,-40
1000f07c:	dfc00915 	stw	ra,36(sp)
1000f080:	df000815 	stw	fp,32(sp)
1000f084:	df000804 	addi	fp,sp,32
1000f088:	e13ffd15 	stw	r4,-12(fp)
1000f08c:	e17ffe15 	stw	r5,-8(fp)
1000f090:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000f094:	00bfffc4 	movi	r2,-1
1000f098:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000f09c:	00bffb44 	movi	r2,-19
1000f0a0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000f0a4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000f0a8:	e13ffd17 	ldw	r4,-12(fp)
1000f0ac:	01440074 	movhi	r5,4097
1000f0b0:	2945c904 	addi	r5,r5,5924
1000f0b4:	000d3fc0 	call	1000d3fc <alt_find_dev>
1000f0b8:	e0bff815 	stw	r2,-32(fp)
1000f0bc:	e0bff817 	ldw	r2,-32(fp)
1000f0c0:	1000051e 	bne	r2,zero,1000f0d8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000f0c4:	e13ffd17 	ldw	r4,-12(fp)
1000f0c8:	000f3900 	call	1000f390 <alt_find_file>
1000f0cc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000f0d0:	00800044 	movi	r2,1
1000f0d4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000f0d8:	e0bff817 	ldw	r2,-32(fp)
1000f0dc:	10002b26 	beq	r2,zero,1000f18c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000f0e0:	e13ff817 	ldw	r4,-32(fp)
1000f0e4:	000f4a40 	call	1000f4a4 <alt_get_fd>
1000f0e8:	e0bff915 	stw	r2,-28(fp)
1000f0ec:	e0bff917 	ldw	r2,-28(fp)
1000f0f0:	1000030e 	bge	r2,zero,1000f100 <open+0x88>
    {
      status = index;
1000f0f4:	e0bff917 	ldw	r2,-28(fp)
1000f0f8:	e0bffa15 	stw	r2,-24(fp)
1000f0fc:	00002506 	br	1000f194 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000f100:	e13ff917 	ldw	r4,-28(fp)
1000f104:	01400304 	movi	r5,12
1000f108:	000ab040 	call	1000ab04 <__mulsi3>
1000f10c:	1007883a 	mov	r3,r2
1000f110:	00840074 	movhi	r2,4097
1000f114:	10814704 	addi	r2,r2,1308
1000f118:	1885883a 	add	r2,r3,r2
1000f11c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000f120:	e0fffe17 	ldw	r3,-8(fp)
1000f124:	00900034 	movhi	r2,16384
1000f128:	10bfffc4 	addi	r2,r2,-1
1000f12c:	1886703a 	and	r3,r3,r2
1000f130:	e0bffc17 	ldw	r2,-16(fp)
1000f134:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000f138:	e0bffb17 	ldw	r2,-20(fp)
1000f13c:	1000051e 	bne	r2,zero,1000f154 <open+0xdc>
1000f140:	e13ffc17 	ldw	r4,-16(fp)
1000f144:	000ef840 	call	1000ef84 <alt_file_locked>
1000f148:	e0bffa15 	stw	r2,-24(fp)
1000f14c:	e0bffa17 	ldw	r2,-24(fp)
1000f150:	10001016 	blt	r2,zero,1000f194 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000f154:	e0bff817 	ldw	r2,-32(fp)
1000f158:	10800317 	ldw	r2,12(r2)
1000f15c:	10000826 	beq	r2,zero,1000f180 <open+0x108>
1000f160:	e0bff817 	ldw	r2,-32(fp)
1000f164:	10800317 	ldw	r2,12(r2)
1000f168:	e13ffc17 	ldw	r4,-16(fp)
1000f16c:	e17ffd17 	ldw	r5,-12(fp)
1000f170:	e1bffe17 	ldw	r6,-8(fp)
1000f174:	e1ffff17 	ldw	r7,-4(fp)
1000f178:	103ee83a 	callr	r2
1000f17c:	00000106 	br	1000f184 <open+0x10c>
1000f180:	0005883a 	mov	r2,zero
1000f184:	e0bffa15 	stw	r2,-24(fp)
1000f188:	00000206 	br	1000f194 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000f18c:	00bffb44 	movi	r2,-19
1000f190:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000f194:	e0bffa17 	ldw	r2,-24(fp)
1000f198:	1000080e 	bge	r2,zero,1000f1bc <open+0x144>
  {
    alt_release_fd (index);  
1000f19c:	e13ff917 	ldw	r4,-28(fp)
1000f1a0:	000da940 	call	1000da94 <alt_release_fd>
    ALT_ERRNO = -status;
1000f1a4:	000ef340 	call	1000ef34 <alt_get_errno>
1000f1a8:	e0fffa17 	ldw	r3,-24(fp)
1000f1ac:	00c7c83a 	sub	r3,zero,r3
1000f1b0:	10c00015 	stw	r3,0(r2)
    return -1;
1000f1b4:	00bfffc4 	movi	r2,-1
1000f1b8:	00000106 	br	1000f1c0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1000f1bc:	e0bff917 	ldw	r2,-28(fp)
}
1000f1c0:	e037883a 	mov	sp,fp
1000f1c4:	dfc00117 	ldw	ra,4(sp)
1000f1c8:	df000017 	ldw	fp,0(sp)
1000f1cc:	dec00204 	addi	sp,sp,8
1000f1d0:	f800283a 	ret

1000f1d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000f1d4:	defffa04 	addi	sp,sp,-24
1000f1d8:	df000515 	stw	fp,20(sp)
1000f1dc:	df000504 	addi	fp,sp,20
1000f1e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f1e4:	0005303a 	rdctl	r2,status
1000f1e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f1ec:	e0fffc17 	ldw	r3,-16(fp)
1000f1f0:	00bfff84 	movi	r2,-2
1000f1f4:	1884703a 	and	r2,r3,r2
1000f1f8:	1001703a 	wrctl	status,r2
  
  return context;
1000f1fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000f200:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000f204:	e0bfff17 	ldw	r2,-4(fp)
1000f208:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000f20c:	e0bffd17 	ldw	r2,-12(fp)
1000f210:	10800017 	ldw	r2,0(r2)
1000f214:	e0fffd17 	ldw	r3,-12(fp)
1000f218:	18c00117 	ldw	r3,4(r3)
1000f21c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000f220:	e0bffd17 	ldw	r2,-12(fp)
1000f224:	10800117 	ldw	r2,4(r2)
1000f228:	e0fffd17 	ldw	r3,-12(fp)
1000f22c:	18c00017 	ldw	r3,0(r3)
1000f230:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000f234:	e0bffd17 	ldw	r2,-12(fp)
1000f238:	e0fffd17 	ldw	r3,-12(fp)
1000f23c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000f240:	e0bffd17 	ldw	r2,-12(fp)
1000f244:	e0fffd17 	ldw	r3,-12(fp)
1000f248:	10c00015 	stw	r3,0(r2)
1000f24c:	e0bffb17 	ldw	r2,-20(fp)
1000f250:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f254:	e0bffe17 	ldw	r2,-8(fp)
1000f258:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000f25c:	e037883a 	mov	sp,fp
1000f260:	df000017 	ldw	fp,0(sp)
1000f264:	dec00104 	addi	sp,sp,4
1000f268:	f800283a 	ret

1000f26c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000f26c:	defffb04 	addi	sp,sp,-20
1000f270:	dfc00415 	stw	ra,16(sp)
1000f274:	df000315 	stw	fp,12(sp)
1000f278:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000f27c:	d0a01017 	ldw	r2,-32704(gp)
1000f280:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000f284:	d0a6db17 	ldw	r2,-25748(gp)
1000f288:	10800044 	addi	r2,r2,1
1000f28c:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f290:	00002e06 	br	1000f34c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000f294:	e0bffd17 	ldw	r2,-12(fp)
1000f298:	10800017 	ldw	r2,0(r2)
1000f29c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000f2a0:	e0bffd17 	ldw	r2,-12(fp)
1000f2a4:	10800403 	ldbu	r2,16(r2)
1000f2a8:	10803fcc 	andi	r2,r2,255
1000f2ac:	10000426 	beq	r2,zero,1000f2c0 <alt_tick+0x54>
1000f2b0:	d0a6db17 	ldw	r2,-25748(gp)
1000f2b4:	1000021e 	bne	r2,zero,1000f2c0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000f2b8:	e0bffd17 	ldw	r2,-12(fp)
1000f2bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000f2c0:	e0bffd17 	ldw	r2,-12(fp)
1000f2c4:	10800217 	ldw	r2,8(r2)
1000f2c8:	d0e6db17 	ldw	r3,-25748(gp)
1000f2cc:	18801d36 	bltu	r3,r2,1000f344 <alt_tick+0xd8>
1000f2d0:	e0bffd17 	ldw	r2,-12(fp)
1000f2d4:	10800403 	ldbu	r2,16(r2)
1000f2d8:	10803fcc 	andi	r2,r2,255
1000f2dc:	1000191e 	bne	r2,zero,1000f344 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000f2e0:	e0bffd17 	ldw	r2,-12(fp)
1000f2e4:	10800317 	ldw	r2,12(r2)
1000f2e8:	e0fffd17 	ldw	r3,-12(fp)
1000f2ec:	18c00517 	ldw	r3,20(r3)
1000f2f0:	1809883a 	mov	r4,r3
1000f2f4:	103ee83a 	callr	r2
1000f2f8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000f2fc:	e0bfff17 	ldw	r2,-4(fp)
1000f300:	1000031e 	bne	r2,zero,1000f310 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000f304:	e13ffd17 	ldw	r4,-12(fp)
1000f308:	000f1d40 	call	1000f1d4 <alt_alarm_stop>
1000f30c:	00000d06 	br	1000f344 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000f310:	e0bffd17 	ldw	r2,-12(fp)
1000f314:	10c00217 	ldw	r3,8(r2)
1000f318:	e0bfff17 	ldw	r2,-4(fp)
1000f31c:	1887883a 	add	r3,r3,r2
1000f320:	e0bffd17 	ldw	r2,-12(fp)
1000f324:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000f328:	e0bffd17 	ldw	r2,-12(fp)
1000f32c:	10c00217 	ldw	r3,8(r2)
1000f330:	d0a6db17 	ldw	r2,-25748(gp)
1000f334:	1880032e 	bgeu	r3,r2,1000f344 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000f338:	e0bffd17 	ldw	r2,-12(fp)
1000f33c:	00c00044 	movi	r3,1
1000f340:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000f344:	e0bffe17 	ldw	r2,-8(fp)
1000f348:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f34c:	e0fffd17 	ldw	r3,-12(fp)
1000f350:	d0a01004 	addi	r2,gp,-32704
1000f354:	18bfcf1e 	bne	r3,r2,1000f294 <__alt_data_end+0xf800f294>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000f358:	0001883a 	nop
}
1000f35c:	e037883a 	mov	sp,fp
1000f360:	dfc00117 	ldw	ra,4(sp)
1000f364:	df000017 	ldw	fp,0(sp)
1000f368:	dec00204 	addi	sp,sp,8
1000f36c:	f800283a 	ret

1000f370 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000f370:	deffff04 	addi	sp,sp,-4
1000f374:	df000015 	stw	fp,0(sp)
1000f378:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000f37c:	000170fa 	wrctl	ienable,zero
}
1000f380:	e037883a 	mov	sp,fp
1000f384:	df000017 	ldw	fp,0(sp)
1000f388:	dec00104 	addi	sp,sp,4
1000f38c:	f800283a 	ret

1000f390 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000f390:	defffb04 	addi	sp,sp,-20
1000f394:	dfc00415 	stw	ra,16(sp)
1000f398:	df000315 	stw	fp,12(sp)
1000f39c:	df000304 	addi	fp,sp,12
1000f3a0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000f3a4:	00840074 	movhi	r2,4097
1000f3a8:	1085c704 	addi	r2,r2,5916
1000f3ac:	10800017 	ldw	r2,0(r2)
1000f3b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f3b4:	00003106 	br	1000f47c <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000f3b8:	e0bffd17 	ldw	r2,-12(fp)
1000f3bc:	10800217 	ldw	r2,8(r2)
1000f3c0:	1009883a 	mov	r4,r2
1000f3c4:	0000b300 	call	10000b30 <strlen>
1000f3c8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000f3cc:	e0bffd17 	ldw	r2,-12(fp)
1000f3d0:	10c00217 	ldw	r3,8(r2)
1000f3d4:	e0bffe17 	ldw	r2,-8(fp)
1000f3d8:	10bfffc4 	addi	r2,r2,-1
1000f3dc:	1885883a 	add	r2,r3,r2
1000f3e0:	10800003 	ldbu	r2,0(r2)
1000f3e4:	10803fcc 	andi	r2,r2,255
1000f3e8:	1080201c 	xori	r2,r2,128
1000f3ec:	10bfe004 	addi	r2,r2,-128
1000f3f0:	10800bd8 	cmpnei	r2,r2,47
1000f3f4:	1000031e 	bne	r2,zero,1000f404 <alt_find_file+0x74>
    {
      len -= 1;
1000f3f8:	e0bffe17 	ldw	r2,-8(fp)
1000f3fc:	10bfffc4 	addi	r2,r2,-1
1000f400:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f404:	e0bffe17 	ldw	r2,-8(fp)
1000f408:	e0ffff17 	ldw	r3,-4(fp)
1000f40c:	1885883a 	add	r2,r3,r2
1000f410:	10800003 	ldbu	r2,0(r2)
1000f414:	10803fcc 	andi	r2,r2,255
1000f418:	1080201c 	xori	r2,r2,128
1000f41c:	10bfe004 	addi	r2,r2,-128
1000f420:	10800be0 	cmpeqi	r2,r2,47
1000f424:	1000081e 	bne	r2,zero,1000f448 <alt_find_file+0xb8>
1000f428:	e0bffe17 	ldw	r2,-8(fp)
1000f42c:	e0ffff17 	ldw	r3,-4(fp)
1000f430:	1885883a 	add	r2,r3,r2
1000f434:	10800003 	ldbu	r2,0(r2)
1000f438:	10803fcc 	andi	r2,r2,255
1000f43c:	1080201c 	xori	r2,r2,128
1000f440:	10bfe004 	addi	r2,r2,-128
1000f444:	10000a1e 	bne	r2,zero,1000f470 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000f448:	e0bffd17 	ldw	r2,-12(fp)
1000f44c:	10c00217 	ldw	r3,8(r2)
1000f450:	e0bffe17 	ldw	r2,-8(fp)
1000f454:	1809883a 	mov	r4,r3
1000f458:	e17fff17 	ldw	r5,-4(fp)
1000f45c:	100d883a 	mov	r6,r2
1000f460:	000f5c40 	call	1000f5c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000f464:	1000021e 	bne	r2,zero,1000f470 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000f468:	e0bffd17 	ldw	r2,-12(fp)
1000f46c:	00000806 	br	1000f490 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000f470:	e0bffd17 	ldw	r2,-12(fp)
1000f474:	10800017 	ldw	r2,0(r2)
1000f478:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f47c:	e0fffd17 	ldw	r3,-12(fp)
1000f480:	00840074 	movhi	r2,4097
1000f484:	1085c704 	addi	r2,r2,5916
1000f488:	18bfcb1e 	bne	r3,r2,1000f3b8 <__alt_data_end+0xf800f3b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000f48c:	0005883a 	mov	r2,zero
}
1000f490:	e037883a 	mov	sp,fp
1000f494:	dfc00117 	ldw	ra,4(sp)
1000f498:	df000017 	ldw	fp,0(sp)
1000f49c:	dec00204 	addi	sp,sp,8
1000f4a0:	f800283a 	ret

1000f4a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000f4a4:	defffa04 	addi	sp,sp,-24
1000f4a8:	dfc00515 	stw	ra,20(sp)
1000f4ac:	df000415 	stw	fp,16(sp)
1000f4b0:	dc000315 	stw	r16,12(sp)
1000f4b4:	df000404 	addi	fp,sp,16
1000f4b8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000f4bc:	00bffa04 	movi	r2,-24
1000f4c0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f4c4:	e03ffc15 	stw	zero,-16(fp)
1000f4c8:	00002106 	br	1000f550 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000f4cc:	04040074 	movhi	r16,4097
1000f4d0:	84014704 	addi	r16,r16,1308
1000f4d4:	e0bffc17 	ldw	r2,-16(fp)
1000f4d8:	1009883a 	mov	r4,r2
1000f4dc:	01400304 	movi	r5,12
1000f4e0:	000ab040 	call	1000ab04 <__mulsi3>
1000f4e4:	8085883a 	add	r2,r16,r2
1000f4e8:	10800017 	ldw	r2,0(r2)
1000f4ec:	1000151e 	bne	r2,zero,1000f544 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000f4f0:	04040074 	movhi	r16,4097
1000f4f4:	84014704 	addi	r16,r16,1308
1000f4f8:	e0bffc17 	ldw	r2,-16(fp)
1000f4fc:	1009883a 	mov	r4,r2
1000f500:	01400304 	movi	r5,12
1000f504:	000ab040 	call	1000ab04 <__mulsi3>
1000f508:	8085883a 	add	r2,r16,r2
1000f50c:	e0fffe17 	ldw	r3,-8(fp)
1000f510:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000f514:	00840074 	movhi	r2,4097
1000f518:	1085cb04 	addi	r2,r2,5932
1000f51c:	10c00017 	ldw	r3,0(r2)
1000f520:	e0bffc17 	ldw	r2,-16(fp)
1000f524:	1880040e 	bge	r3,r2,1000f538 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000f528:	00840074 	movhi	r2,4097
1000f52c:	1085cb04 	addi	r2,r2,5932
1000f530:	e0fffc17 	ldw	r3,-16(fp)
1000f534:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000f538:	e0bffc17 	ldw	r2,-16(fp)
1000f53c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000f540:	00000606 	br	1000f55c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000f544:	e0bffc17 	ldw	r2,-16(fp)
1000f548:	10800044 	addi	r2,r2,1
1000f54c:	e0bffc15 	stw	r2,-16(fp)
1000f550:	e0bffc17 	ldw	r2,-16(fp)
1000f554:	10800810 	cmplti	r2,r2,32
1000f558:	103fdc1e 	bne	r2,zero,1000f4cc <__alt_data_end+0xf800f4cc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000f55c:	e0bffd17 	ldw	r2,-12(fp)
}
1000f560:	e6ffff04 	addi	sp,fp,-4
1000f564:	dfc00217 	ldw	ra,8(sp)
1000f568:	df000117 	ldw	fp,4(sp)
1000f56c:	dc000017 	ldw	r16,0(sp)
1000f570:	dec00304 	addi	sp,sp,12
1000f574:	f800283a 	ret

1000f578 <atexit>:
1000f578:	200b883a 	mov	r5,r4
1000f57c:	000d883a 	mov	r6,zero
1000f580:	0009883a 	mov	r4,zero
1000f584:	000f883a 	mov	r7,zero
1000f588:	000f6401 	jmpi	1000f640 <__register_exitproc>

1000f58c <exit>:
1000f58c:	defffe04 	addi	sp,sp,-8
1000f590:	000b883a 	mov	r5,zero
1000f594:	dc000015 	stw	r16,0(sp)
1000f598:	dfc00115 	stw	ra,4(sp)
1000f59c:	2021883a 	mov	r16,r4
1000f5a0:	000f75c0 	call	1000f75c <__call_exitprocs>
1000f5a4:	00840074 	movhi	r2,4097
1000f5a8:	1085c104 	addi	r2,r2,5892
1000f5ac:	11000017 	ldw	r4,0(r2)
1000f5b0:	20800f17 	ldw	r2,60(r4)
1000f5b4:	10000126 	beq	r2,zero,1000f5bc <exit+0x30>
1000f5b8:	103ee83a 	callr	r2
1000f5bc:	8009883a 	mov	r4,r16
1000f5c0:	000f9000 	call	1000f900 <_exit>

1000f5c4 <memcmp>:
1000f5c4:	01c000c4 	movi	r7,3
1000f5c8:	3980192e 	bgeu	r7,r6,1000f630 <memcmp+0x6c>
1000f5cc:	2144b03a 	or	r2,r4,r5
1000f5d0:	11c4703a 	and	r2,r2,r7
1000f5d4:	10000f26 	beq	r2,zero,1000f614 <memcmp+0x50>
1000f5d8:	21c00003 	ldbu	r7,0(r4)
1000f5dc:	28800003 	ldbu	r2,0(r5)
1000f5e0:	3880151e 	bne	r7,r2,1000f638 <memcmp+0x74>
1000f5e4:	30ffff84 	addi	r3,r6,-2
1000f5e8:	01bfffc4 	movi	r6,-1
1000f5ec:	00000406 	br	1000f600 <memcmp+0x3c>
1000f5f0:	21c00003 	ldbu	r7,0(r4)
1000f5f4:	28800003 	ldbu	r2,0(r5)
1000f5f8:	18ffffc4 	addi	r3,r3,-1
1000f5fc:	38800e1e 	bne	r7,r2,1000f638 <memcmp+0x74>
1000f600:	21000044 	addi	r4,r4,1
1000f604:	29400044 	addi	r5,r5,1
1000f608:	19bff91e 	bne	r3,r6,1000f5f0 <__alt_data_end+0xf800f5f0>
1000f60c:	0005883a 	mov	r2,zero
1000f610:	f800283a 	ret
1000f614:	20c00017 	ldw	r3,0(r4)
1000f618:	28800017 	ldw	r2,0(r5)
1000f61c:	1880041e 	bne	r3,r2,1000f630 <memcmp+0x6c>
1000f620:	31bfff04 	addi	r6,r6,-4
1000f624:	21000104 	addi	r4,r4,4
1000f628:	29400104 	addi	r5,r5,4
1000f62c:	39bff936 	bltu	r7,r6,1000f614 <__alt_data_end+0xf800f614>
1000f630:	303fe91e 	bne	r6,zero,1000f5d8 <__alt_data_end+0xf800f5d8>
1000f634:	003ff506 	br	1000f60c <__alt_data_end+0xf800f60c>
1000f638:	3885c83a 	sub	r2,r7,r2
1000f63c:	f800283a 	ret

1000f640 <__register_exitproc>:
1000f640:	defffa04 	addi	sp,sp,-24
1000f644:	00840074 	movhi	r2,4097
1000f648:	1085c104 	addi	r2,r2,5892
1000f64c:	dc000315 	stw	r16,12(sp)
1000f650:	14000017 	ldw	r16,0(r2)
1000f654:	dc400415 	stw	r17,16(sp)
1000f658:	dfc00515 	stw	ra,20(sp)
1000f65c:	80805217 	ldw	r2,328(r16)
1000f660:	2023883a 	mov	r17,r4
1000f664:	10003a26 	beq	r2,zero,1000f750 <__register_exitproc+0x110>
1000f668:	10c00117 	ldw	r3,4(r2)
1000f66c:	020007c4 	movi	r8,31
1000f670:	40c0190e 	bge	r8,r3,1000f6d8 <__register_exitproc+0x98>
1000f674:	00800034 	movhi	r2,0
1000f678:	10800004 	addi	r2,r2,0
1000f67c:	1000061e 	bne	r2,zero,1000f698 <__register_exitproc+0x58>
1000f680:	00bfffc4 	movi	r2,-1
1000f684:	dfc00517 	ldw	ra,20(sp)
1000f688:	dc400417 	ldw	r17,16(sp)
1000f68c:	dc000317 	ldw	r16,12(sp)
1000f690:	dec00604 	addi	sp,sp,24
1000f694:	f800283a 	ret
1000f698:	01006404 	movi	r4,400
1000f69c:	d9400015 	stw	r5,0(sp)
1000f6a0:	d9800115 	stw	r6,4(sp)
1000f6a4:	d9c00215 	stw	r7,8(sp)
1000f6a8:	00000000 	call	10000000 <__reset>
1000f6ac:	d9400017 	ldw	r5,0(sp)
1000f6b0:	d9800117 	ldw	r6,4(sp)
1000f6b4:	d9c00217 	ldw	r7,8(sp)
1000f6b8:	103ff126 	beq	r2,zero,1000f680 <__alt_data_end+0xf800f680>
1000f6bc:	81005217 	ldw	r4,328(r16)
1000f6c0:	10000115 	stw	zero,4(r2)
1000f6c4:	0007883a 	mov	r3,zero
1000f6c8:	11000015 	stw	r4,0(r2)
1000f6cc:	80805215 	stw	r2,328(r16)
1000f6d0:	10006215 	stw	zero,392(r2)
1000f6d4:	10006315 	stw	zero,396(r2)
1000f6d8:	88000d1e 	bne	r17,zero,1000f710 <__register_exitproc+0xd0>
1000f6dc:	19000084 	addi	r4,r3,2
1000f6e0:	2109883a 	add	r4,r4,r4
1000f6e4:	18c00044 	addi	r3,r3,1
1000f6e8:	2109883a 	add	r4,r4,r4
1000f6ec:	10c00115 	stw	r3,4(r2)
1000f6f0:	1105883a 	add	r2,r2,r4
1000f6f4:	11400015 	stw	r5,0(r2)
1000f6f8:	0005883a 	mov	r2,zero
1000f6fc:	dfc00517 	ldw	ra,20(sp)
1000f700:	dc400417 	ldw	r17,16(sp)
1000f704:	dc000317 	ldw	r16,12(sp)
1000f708:	dec00604 	addi	sp,sp,24
1000f70c:	f800283a 	ret
1000f710:	18c9883a 	add	r4,r3,r3
1000f714:	2109883a 	add	r4,r4,r4
1000f718:	1109883a 	add	r4,r2,r4
1000f71c:	21802215 	stw	r6,136(r4)
1000f720:	01800044 	movi	r6,1
1000f724:	12006217 	ldw	r8,392(r2)
1000f728:	30cc983a 	sll	r6,r6,r3
1000f72c:	4190b03a 	or	r8,r8,r6
1000f730:	12006215 	stw	r8,392(r2)
1000f734:	21c04215 	stw	r7,264(r4)
1000f738:	01000084 	movi	r4,2
1000f73c:	893fe71e 	bne	r17,r4,1000f6dc <__alt_data_end+0xf800f6dc>
1000f740:	11006317 	ldw	r4,396(r2)
1000f744:	218cb03a 	or	r6,r4,r6
1000f748:	11806315 	stw	r6,396(r2)
1000f74c:	003fe306 	br	1000f6dc <__alt_data_end+0xf800f6dc>
1000f750:	80805304 	addi	r2,r16,332
1000f754:	80805215 	stw	r2,328(r16)
1000f758:	003fc306 	br	1000f668 <__alt_data_end+0xf800f668>

1000f75c <__call_exitprocs>:
1000f75c:	00840074 	movhi	r2,4097
1000f760:	1085c104 	addi	r2,r2,5892
1000f764:	10800017 	ldw	r2,0(r2)
1000f768:	defff304 	addi	sp,sp,-52
1000f76c:	df000b15 	stw	fp,44(sp)
1000f770:	d8800015 	stw	r2,0(sp)
1000f774:	10805204 	addi	r2,r2,328
1000f778:	dd400815 	stw	r21,32(sp)
1000f77c:	dfc00c15 	stw	ra,48(sp)
1000f780:	ddc00a15 	stw	r23,40(sp)
1000f784:	dd800915 	stw	r22,36(sp)
1000f788:	dd000715 	stw	r20,28(sp)
1000f78c:	dcc00615 	stw	r19,24(sp)
1000f790:	dc800515 	stw	r18,20(sp)
1000f794:	dc400415 	stw	r17,16(sp)
1000f798:	dc000315 	stw	r16,12(sp)
1000f79c:	d9000115 	stw	r4,4(sp)
1000f7a0:	2839883a 	mov	fp,r5
1000f7a4:	d8800215 	stw	r2,8(sp)
1000f7a8:	057fffc4 	movi	r21,-1
1000f7ac:	d8800017 	ldw	r2,0(sp)
1000f7b0:	14805217 	ldw	r18,328(r2)
1000f7b4:	90001826 	beq	r18,zero,1000f818 <__call_exitprocs+0xbc>
1000f7b8:	ddc00217 	ldw	r23,8(sp)
1000f7bc:	90c00117 	ldw	r3,4(r18)
1000f7c0:	1c3fffc4 	addi	r16,r3,-1
1000f7c4:	80001116 	blt	r16,zero,1000f80c <__call_exitprocs+0xb0>
1000f7c8:	18c00044 	addi	r3,r3,1
1000f7cc:	8427883a 	add	r19,r16,r16
1000f7d0:	18c7883a 	add	r3,r3,r3
1000f7d4:	95802204 	addi	r22,r18,136
1000f7d8:	9ce7883a 	add	r19,r19,r19
1000f7dc:	18c7883a 	add	r3,r3,r3
1000f7e0:	b4e7883a 	add	r19,r22,r19
1000f7e4:	90e3883a 	add	r17,r18,r3
1000f7e8:	e0001726 	beq	fp,zero,1000f848 <__call_exitprocs+0xec>
1000f7ec:	8c87c83a 	sub	r3,r17,r18
1000f7f0:	b0c7883a 	add	r3,r22,r3
1000f7f4:	18c01e17 	ldw	r3,120(r3)
1000f7f8:	1f001326 	beq	r3,fp,1000f848 <__call_exitprocs+0xec>
1000f7fc:	843fffc4 	addi	r16,r16,-1
1000f800:	9cffff04 	addi	r19,r19,-4
1000f804:	8c7fff04 	addi	r17,r17,-4
1000f808:	857ff71e 	bne	r16,r21,1000f7e8 <__alt_data_end+0xf800f7e8>
1000f80c:	00800034 	movhi	r2,0
1000f810:	10800004 	addi	r2,r2,0
1000f814:	10002a1e 	bne	r2,zero,1000f8c0 <__call_exitprocs+0x164>
1000f818:	dfc00c17 	ldw	ra,48(sp)
1000f81c:	df000b17 	ldw	fp,44(sp)
1000f820:	ddc00a17 	ldw	r23,40(sp)
1000f824:	dd800917 	ldw	r22,36(sp)
1000f828:	dd400817 	ldw	r21,32(sp)
1000f82c:	dd000717 	ldw	r20,28(sp)
1000f830:	dcc00617 	ldw	r19,24(sp)
1000f834:	dc800517 	ldw	r18,20(sp)
1000f838:	dc400417 	ldw	r17,16(sp)
1000f83c:	dc000317 	ldw	r16,12(sp)
1000f840:	dec00d04 	addi	sp,sp,52
1000f844:	f800283a 	ret
1000f848:	91000117 	ldw	r4,4(r18)
1000f84c:	88c00017 	ldw	r3,0(r17)
1000f850:	213fffc4 	addi	r4,r4,-1
1000f854:	24001526 	beq	r4,r16,1000f8ac <__call_exitprocs+0x150>
1000f858:	88000015 	stw	zero,0(r17)
1000f85c:	183fe726 	beq	r3,zero,1000f7fc <__alt_data_end+0xf800f7fc>
1000f860:	00800044 	movi	r2,1
1000f864:	1408983a 	sll	r4,r2,r16
1000f868:	91406217 	ldw	r5,392(r18)
1000f86c:	95000117 	ldw	r20,4(r18)
1000f870:	214a703a 	and	r5,r4,r5
1000f874:	28000b26 	beq	r5,zero,1000f8a4 <__call_exitprocs+0x148>
1000f878:	91406317 	ldw	r5,396(r18)
1000f87c:	2148703a 	and	r4,r4,r5
1000f880:	20000c1e 	bne	r4,zero,1000f8b4 <__call_exitprocs+0x158>
1000f884:	99400017 	ldw	r5,0(r19)
1000f888:	d9000117 	ldw	r4,4(sp)
1000f88c:	183ee83a 	callr	r3
1000f890:	90c00117 	ldw	r3,4(r18)
1000f894:	1d3fc51e 	bne	r3,r20,1000f7ac <__alt_data_end+0xf800f7ac>
1000f898:	b8c00017 	ldw	r3,0(r23)
1000f89c:	1cbfd726 	beq	r3,r18,1000f7fc <__alt_data_end+0xf800f7fc>
1000f8a0:	003fc206 	br	1000f7ac <__alt_data_end+0xf800f7ac>
1000f8a4:	183ee83a 	callr	r3
1000f8a8:	003ff906 	br	1000f890 <__alt_data_end+0xf800f890>
1000f8ac:	94000115 	stw	r16,4(r18)
1000f8b0:	003fea06 	br	1000f85c <__alt_data_end+0xf800f85c>
1000f8b4:	99000017 	ldw	r4,0(r19)
1000f8b8:	183ee83a 	callr	r3
1000f8bc:	003ff406 	br	1000f890 <__alt_data_end+0xf800f890>
1000f8c0:	90c00117 	ldw	r3,4(r18)
1000f8c4:	1800081e 	bne	r3,zero,1000f8e8 <__call_exitprocs+0x18c>
1000f8c8:	90c00017 	ldw	r3,0(r18)
1000f8cc:	18000a26 	beq	r3,zero,1000f8f8 <__call_exitprocs+0x19c>
1000f8d0:	9009883a 	mov	r4,r18
1000f8d4:	b8c00015 	stw	r3,0(r23)
1000f8d8:	00000000 	call	10000000 <__reset>
1000f8dc:	bc800017 	ldw	r18,0(r23)
1000f8e0:	903fb61e 	bne	r18,zero,1000f7bc <__alt_data_end+0xf800f7bc>
1000f8e4:	003fcc06 	br	1000f818 <__alt_data_end+0xf800f818>
1000f8e8:	90c00017 	ldw	r3,0(r18)
1000f8ec:	902f883a 	mov	r23,r18
1000f8f0:	1825883a 	mov	r18,r3
1000f8f4:	003ffa06 	br	1000f8e0 <__alt_data_end+0xf800f8e0>
1000f8f8:	0007883a 	mov	r3,zero
1000f8fc:	003ffb06 	br	1000f8ec <__alt_data_end+0xf800f8ec>

1000f900 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000f900:	defffd04 	addi	sp,sp,-12
1000f904:	df000215 	stw	fp,8(sp)
1000f908:	df000204 	addi	fp,sp,8
1000f90c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000f910:	0001883a 	nop
1000f914:	e0bfff17 	ldw	r2,-4(fp)
1000f918:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000f91c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000f920:	10000226 	beq	r2,zero,1000f92c <_exit+0x2c>
    ALT_SIM_FAIL();
1000f924:	002af070 	cmpltui	zero,zero,43969
1000f928:	00000106 	br	1000f930 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000f92c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000f930:	003fff06 	br	1000f930 <__alt_data_end+0xf800f930>
