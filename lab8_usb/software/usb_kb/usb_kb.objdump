
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011d64 memsz 0x00011d64 flags r-x
    LOAD off    0x00012d84 vaddr 0x08011d84 paddr 0x0801387c align 2**12
         filesz 0x00001af8 memsz 0x00001af8 flags rw-
    LOAD off    0x00015374 vaddr 0x08015374 paddr 0x08015374 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011158  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a70  08011314  08011314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af8  08011d84  0801387c  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  08015374  08015374  00015374  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  080154dc  080154dc  0001487c  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  0001487c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d08  00000000  00000000  000148b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000235c8  00000000  00000000  000155c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008ef7  00000000  00000000  00038b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b132  00000000  00000000  00041a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022c0  00000000  00000000  0004cbb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000341d  00000000  00000000  0004ee74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001704e  00000000  00000000  00052291  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000692e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001338  00000000  00000000  00069320  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006d963  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006d966  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006d969  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006d96a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006d96b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006d96f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006d973  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006d977  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006d980  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006d989  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0006d992  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000037  00000000  00000000  0006d99c  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00069ce4  00000000  00000000  0006d9d3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08011314 l    d  .rodata	00000000 .rodata
08011d84 l    d  .rwdata	00000000 .rwdata
08015374 l    d  .bss	00000000 .bss
080154dc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
08013830 l     O .rwdata	00000004 LEDG
08013834 l     O .rwdata	00000004 ALL_SW
08013838 l     O .rwdata	00000004 LEDR
08015374 l     O .bss	00000008 state
080001f8 l     F .text	00000040 delay
08000238 l     F .text	00000048 reset
08000280 l     F .text	000000f8 update_state
0801537c l     O .bss	00000002 ctl_reg.3307
0801537e l     O .bss	00000002 no_device.3308
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011ad2 l     O .rodata	00000010 zeroes.4155
08011ae2 l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080046c8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080061a0 l     F .text	00000008 __fp_lock
080061a8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08011d84 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
080121c8 l     O .rwdata	00000020 lc_ctype_charset
080121a8 l     O .rwdata	00000020 lc_message_charset
080121e8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08011b14 l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08009624 l     F .text	000000fc __sprint_r.part.0
08011c48 l     O .rodata	00000010 blanks.4099
08011c38 l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800c24c l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800eb0c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800ec2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800ec58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800ed5c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800ee54 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800ef38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800f118 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801386c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800f3c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800f504 l     F .text	00000038 alt_dev_reg
080127d0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800f7dc l     F .text	000001fc altera_avalon_jtag_uart_irq
0800f9d8 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080102a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801072c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08010884 l     F .text	00000050 alt_get_errno
080108d4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08008ca0 g     F .text	00000074 _mprec_log10
08008d8c g     F .text	00000088 __any_on
0800b0ec g     F .text	00000064 _isatty_r
08011b20 g     O .rodata	00000028 __mprec_tinytens
0800f060 g     F .text	00000078 alt_main
080022c0 g     F .text	000000b8 _puts_r
080153dc g     O .bss	00000100 alt_irq
0800b150 g     F .text	0000006c _lseek_r
0801387c g       *ABS*	00000000 __flash_rwdata_start
0800d5a0 g     F .text	00000084 .hidden __eqdf2
080154dc g       *ABS*	00000000 __alt_heap_start
08002284 g     F .text	0000003c printf
0800b3c4 g     F .text	0000009c _wcrtomb_r
0800951c g     F .text	0000005c __sseek
0800624c g     F .text	0000019c __sinit
0800b228 g     F .text	00000180 __swbuf_r
08006f5c g     F .text	00000070 _setlocale_r
080061bc g     F .text	00000078 __sfmoreglue
0800f0f8 g     F .text	00000020 __malloc_unlock
08002154 g     F .text	00000088 UsbGetRetryCnt
08007b9c g     F .text	0000013c memmove
08006234 g     F .text	00000018 _cleanup
08007dec g     F .text	000000a8 _Balloc
0800d624 g     F .text	000000d8 .hidden __gtdf2
08010cc0 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800b084 g     F .text	00000068 _fstat_r
08015398 g     O .bss	00000004 errno
08009498 g     F .text	00000008 __seofread
080153a0 g     O .bss	00000004 alt_argv
0801b830 g       *ABS*	00000000 _gp
0800f390 g     F .text	00000030 usleep
08012650 g     O .rwdata	00000180 alt_fd_list
08010ce0 g     F .text	00000090 alt_find_dev
08007a90 g     F .text	0000010c memcpy
080061b0 g     F .text	0000000c _cleanup_r
0800e8f0 g     F .text	000000d0 .hidden __floatsidf
0801080c g     F .text	00000078 alt_io_redirect
0800d6fc g     F .text	000000ec .hidden __ltdf2
08011314 g       *ABS*	00000000 __DTOR_END__
08002378 g     F .text	00000014 puts
08009378 g     F .text	00000068 __fpclassifyd
08008c00 g     F .text	000000a0 __ratio
0800ab80 g     F .text	00000024 __vfiprintf_internal
0800fbd0 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08002258 g     F .text	0000002c _printf_r
0800c350 g     F .text	00000008 .hidden __udivsi3
0800edac g     F .text	000000a8 isatty
08011b70 g     O .rodata	000000c8 __mprec_tens
08006fcc g     F .text	0000000c __locale_charset
08015394 g     O .bss	00000004 __malloc_top_pad
080017e0 g     F .text	00000268 UsbGetConfigDesc2
08013844 g     O .rwdata	00000004 __mb_cur_max
08006ffc g     F .text	0000000c _localeconv_r
0800821c g     F .text	0000003c __i2b
08006950 g     F .text	000004ac __sfvwrite_r
080093e0 g     F .text	00000064 _sbrk_r
0800b1bc g     F .text	0000006c _read_r
08013864 g     O .rwdata	00000004 alt_max_fd
0800ad4c g     F .text	00000128 _fclose_r
08006170 g     F .text	00000030 fflush
08015390 g     O .bss	00000004 __malloc_max_sbrked_mem
0800c388 g     F .text	0000087c .hidden __adddf3
080089cc g     F .text	000000f0 __b2d
0800bc18 g     F .text	00000634 .hidden __umoddi3
0800ef88 g     F .text	000000d8 lseek
0801383c g     O .rwdata	00000004 _global_impure_ptr
08008e14 g     F .text	00000564 _realloc_r
080154dc g       *ABS*	00000000 __bss_end
0801063c g     F .text	000000f0 alt_iic_isr_register
08010bbc g     F .text	00000104 alt_tick
0800b5c4 g     F .text	00000654 .hidden __udivdi3
0800ae88 g     F .text	00000184 _fputwc_r
08011b48 g     O .rodata	00000028 __mprec_bigtens
08008000 g     F .text	00000104 __s2b
0800e9c0 g     F .text	000000a0 .hidden __floatunsidf
0800875c g     F .text	00000060 __mcmp
08001230 g     F .text	00000100 UsbSetAddress
08006514 g     F .text	00000018 __fp_lock_all
080105f0 g     F .text	0000004c alt_ic_irq_enabled
08010b24 g     F .text	00000098 alt_alarm_stop
080153a8 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08012628 g     O .rwdata	00000028 alt_dev_null
08010284 g     F .text	0000001c alt_dcache_flush_all
08008104 g     F .text	00000068 __hi0bits
0800e870 g     F .text	00000080 .hidden __fixdfsi
0801387c g       *ABS*	00000000 __ram_rwdata_end
0801385c g     O .rwdata	00000008 alt_dev_list
0800f410 g     F .text	000000f4 write
08011d84 g       *ABS*	00000000 __ram_rodata_end
0800eca8 g     F .text	000000b4 fstat
0800d6fc g     F .text	000000ec .hidden __ledf2
080021dc g     F .text	0000007c UsbPrintMem
080084c4 g     F .text	00000148 __pow5mult
08009738 g     F .text	00001448 ___vfiprintf_internal_r
08015388 g     O .bss	00000004 __nlocale_changed
0800c358 g     F .text	00000008 .hidden __umodsi3
080154dc g       *ABS*	00000000 end
0800f71c g     F .text	000000c0 altera_avalon_jtag_uart_init
08011314 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800ea60 g     F .text	000000ac .hidden __clzsi2
0800fdd8 g     F .text	00000218 altera_avalon_jtag_uart_write
08006504 g     F .text	00000004 __sfp_lock_acquire
080079a8 g     F .text	000000e8 memchr
08002418 g     F .text	00002154 ___vfprintf_internal_r
08001b48 g     F .text	00000100 UsbClassRequest
08006680 g     F .text	000002d0 _free_r
08006fd8 g     F .text	00000010 __locale_mb_cur_max
0801113c g     F .text	000001a4 __call_exitprocs
08015384 g     O .bss	00000004 __mlocale_changed
08013848 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
080153ac g     O .bss	00000004 _alt_tick_rate
0800860c g     F .text	00000150 __lshift
080153b0 g     O .bss	00000004 _alt_nticks
0800f168 g     F .text	000000f8 read
0800f570 g     F .text	00000048 alt_sys_init
08011020 g     F .text	0000011c __register_exitproc
08008258 g     F .text	0000026c __multiply
0800fa7c g     F .text	00000068 altera_avalon_jtag_uart_close
0800c360 g     F .text	00000028 .hidden __mulsi3
08011d84 g       *ABS*	00000000 __ram_rwdata_start
08011314 g       *ABS*	00000000 __ram_rodata_start
080153b4 g     O .bss	00000028 __malloc_current_mallinfo
08008abc g     F .text	00000144 __d2b
08001330 g     F .text	00000148 UsbGetDeviceDesc1
0800f5b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08010e84 g     F .text	000000d4 alt_get_fd
08010130 g     F .text	00000154 alt_busy_sleep
0800ac10 g     F .text	00000064 _close_r
08010fa4 g     F .text	0000007c memcmp
0800f678 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080154dc g       *ABS*	00000000 __alt_stack_base
0800f6c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08004590 g     F .text	00000138 __swsetup_r
0800cc04 g     F .text	0000099c .hidden __divdf3
080063e8 g     F .text	0000011c __sfp
08008d14 g     F .text	00000078 __copybits
08012220 g     O .rwdata	00000408 __malloc_av_
08006510 g     F .text	00000004 __sinit_lock_release
0800d7e8 g     F .text	00000800 .hidden __muldf3
08009444 g     F .text	00000054 __sread
080020d0 g     F .text	00000084 UsbWaitTDListDone
08010d70 g     F .text	00000114 alt_find_file
080102f0 g     F .text	000000a0 alt_dev_llist_insert
0800f0d8 g     F .text	00000020 __malloc_lock
0800f2e0 g     F .text	000000b0 sbrk
08005f2c g     F .text	00000244 _fflush_r
0800ac74 g     F .text	000000d8 _calloc_r
08015374 g       *ABS*	00000000 __bss_start
08007cd8 g     F .text	00000114 memset
08000378 g     F .text	00000d78 main
080153a4 g     O .bss	00000004 alt_envp
0801538c g     O .bss	00000004 __malloc_max_total_mem
0800f618 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08001a48 g     F .text	00000100 UsbSetConfig
0800b3a8 g     F .text	0000001c __swbuf
08009578 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0800ae74 g     F .text	00000014 fclose
080048f0 g     F .text	0000163c _dtoa_r
080071e4 g     F .text	000007c4 _malloc_r
0800b538 g     F .text	00000030 __ascii_wctomb
08013868 g     O .rwdata	00000004 alt_errno
08006dfc g     F .text	000000a8 _fwalk
0800c2bc g     F .text	00000048 .hidden __divsi3
08006544 g     F .text	0000013c _malloc_trim_r
08001c48 g     F .text	00000148 UsbGetHidDesc
08011314 g       *ABS*	00000000 __CTOR_END__
08009580 g     F .text	000000a4 strcmp
08011314 g       *ABS*	00000000 __flash_rodata_start
08011314 g       *ABS*	00000000 __DTOR_LIST__
0800d5a0 g     F .text	00000084 .hidden __nedf2
08001138 g     F .text	0000003c UsbRead
0800f53c g     F .text	00000034 alt_irq_init
0800f260 g     F .text	00000080 alt_release_fd
08011c58 g     O .rodata	00000100 .hidden __clz_tab
08015380 g     O .bss	00000004 _PathLocale
08010f58 g     F .text	00000014 atexit
0800aba4 g     F .text	0000006c _write_r
08007008 g     F .text	0000001c setlocale
08013840 g     O .rwdata	00000004 _impure_ptr
0801539c g     O .bss	00000004 alt_argc
080103ec g     F .text	0000005c _do_dtors
08006ff4 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
0800896c g     F .text	00000060 __ulp
0800652c g     F .text	00000018 __fp_unlock_all
08013854 g     O .rwdata	00000008 alt_fs_list
08001d90 g     F .text	00000340 UsbGetReportDesc
08000020 g       *ABS*	00000000 __ram_exceptions_start
08007024 g     F .text	0000000c localeconv
08010464 g     F .text	00000050 alt_ic_isr_register
0801387c g       *ABS*	00000000 _edata
080154dc g       *ABS*	00000000 _end
080010f0 g     F .text	00000048 UsbWrite
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800fae4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08010550 g     F .text	000000a0 alt_ic_irq_disable
080094a0 g     F .text	0000007c __swrite
0801384c g     O .rwdata	00000004 __malloc_trim_threshold
08006fe8 g     F .text	0000000c __locale_msgcharset
08010f6c g     F .text	00000038 exit
08006ea4 g     F .text	000000b8 _fwalk_reent
080087bc g     F .text	000001b0 __mdiff
0800c304 g     F .text	0000004c .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08006508 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080112e0 g     F .text	00000034 _exit
0800fff0 g     F .text	00000140 alt_alarm_start
08007030 g     F .text	000001b4 __smakebuf_r
0800238c g     F .text	0000008c strlen
080109c8 g     F .text	0000015c open
0800d624 g     F .text	000000d8 .hidden __gedf2
08013850 g     O .rwdata	00000004 __wctomb
08009720 g     F .text	00000018 __sprint_r
08010448 g     F .text	0000001c alt_icache_flush_all
08013870 g     O .rwdata	00000004 alt_priority_mask
080104b4 g     F .text	0000009c alt_ic_irq_enable
0800456c g     F .text	00000024 __vfprintf_internal
0800b568 g     F .text	0000005c _wctomb_r
0800dfe8 g     F .text	00000888 .hidden __subdf3
0800816c g     F .text	000000b0 __lo0bits
08001650 g     F .text	00000190 UsbGetConfigDesc1
08013874 g     O .rwdata	00000008 alt_alarm_list
08010390 g     F .text	0000005c _do_ctors
08001174 g     F .text	000000bc UsbSoftReset
0800b460 g     F .text	000000d8 wcrtomb
0800eb5c g     F .text	000000d0 close
08001478 g     F .text	000001d8 UsbGetDeviceDesc2
0800eeb8 g     F .text	00000080 alt_load
0800b00c g     F .text	00000078 fputwc
00000000  w      *UND*	00000000 free
0800650c g     F .text	00000004 __sinit_lock_acquire
08007ebc g     F .text	00000144 __multadd
08007e94 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001726 	beq	r2,zero,8000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00c20074 	movhi	r3,2049
 8000130:	18d4f704 	addi	r3,r3,21468
 8000134:	e0bffd17 	ldw	r2,-12(fp)
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	1885883a 	add	r2,r3,r2
 8000140:	10800017 	ldw	r2,0(r2)
 8000144:	01020074 	movhi	r4,2049
 8000148:	2114f704 	addi	r4,r4,21468
 800014c:	e0fffd17 	ldw	r3,-12(fp)
 8000150:	180690fa 	slli	r3,r3,3
 8000154:	20c7883a 	add	r3,r4,r3
 8000158:	18c00104 	addi	r3,r3,4
 800015c:	18c00017 	ldw	r3,0(r3)
 8000160:	1809883a 	mov	r4,r3
 8000164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800017c:	e0bffb17 	ldw	r2,-20(fp)
 8000180:	103fe31e 	bne	r2,zero,8000110 <__alt_data_end+0xf8000110>
 8000184:	00000706 	br	80001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000188:	e0bffc17 	ldw	r2,-16(fp)
 800018c:	1085883a 	add	r2,r2,r2
 8000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000194:	e0bffd17 	ldw	r2,-12(fp)
 8000198:	10800044 	addi	r2,r2,1
 800019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a0:	003fde06 	br	800011c <__alt_data_end+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6ae0c14 	ori	gp,gp,47152
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	1094dd14 	ori	r2,r2,21364

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18d53714 	ori	r3,r3,21724

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800eeb80 	call	800eeb8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800f0600 	call	800f060 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xf80001f4>

080001f8 <delay>:
static void delay(unsigned int cycles);
static void reset();
static void update_state();

static void delay(unsigned int cycles)
{
 80001f8:	defffd04 	addi	sp,sp,-12
 80001fc:	df000215 	stw	fp,8(sp)
 8000200:	df000204 	addi	fp,sp,8
 8000204:	e13fff15 	stw	r4,-4(fp)
	unsigned int i;
	for (i = 0; i < cycles; i++)
 8000208:	e03ffe15 	stw	zero,-8(fp)
 800020c:	00000306 	br	800021c <delay+0x24>
 8000210:	e0bffe17 	ldw	r2,-8(fp)
 8000214:	10800044 	addi	r2,r2,1
 8000218:	e0bffe15 	stw	r2,-8(fp)
 800021c:	e0fffe17 	ldw	r3,-8(fp)
 8000220:	e0bfff17 	ldw	r2,-4(fp)
 8000224:	18bffa36 	bltu	r3,r2,8000210 <__alt_data_end+0xf8000210>
		;
}
 8000228:	e037883a 	mov	sp,fp
 800022c:	df000017 	ldw	fp,0(sp)
 8000230:	dec00104 	addi	sp,sp,4
 8000234:	f800283a 	ret

08000238 <reset>:

static void reset()
{
 8000238:	deffff04 	addi	sp,sp,-4
 800023c:	df000015 	stw	fp,0(sp)
 8000240:	d839883a 	mov	fp,sp
	state.ball_is_traveling_right = 1;
 8000244:	d0a6d103 	ldbu	r2,-25788(gp)
 8000248:	10800054 	ori	r2,r2,1
 800024c:	d0a6d105 	stb	r2,-25788(gp)
	state.ball_position = 8;
 8000250:	00820074 	movhi	r2,2049
 8000254:	1094de04 	addi	r2,r2,21368
 8000258:	00c00204 	movi	r3,8
 800025c:	10c00015 	stw	r3,0(r2)
	// reset LEDs
	*LEDG = 0;
 8000260:	d0a00017 	ldw	r2,-32768(gp)
 8000264:	10000015 	stw	zero,0(r2)
	*LEDR = 0;
 8000268:	d0a00217 	ldw	r2,-32760(gp)
 800026c:	10000015 	stw	zero,0(r2)
}
 8000270:	e037883a 	mov	sp,fp
 8000274:	df000017 	ldw	fp,0(sp)
 8000278:	dec00104 	addi	sp,sp,4
 800027c:	f800283a 	ret

08000280 <update_state>:

static void update_state()
{
 8000280:	deffff04 	addi	sp,sp,-4
 8000284:	df000015 	stw	fp,0(sp)
 8000288:	d839883a 	mov	fp,sp
	// update ball position
	if (state.ball_is_traveling_right)
 800028c:	d0a6d117 	ldw	r2,-25788(gp)
 8000290:	1080004c 	andi	r2,r2,1
 8000294:	10000826 	beq	r2,zero,80002b8 <update_state+0x38>
		state.ball_position--;
 8000298:	00820074 	movhi	r2,2049
 800029c:	1094de04 	addi	r2,r2,21368
 80002a0:	10800017 	ldw	r2,0(r2)
 80002a4:	10ffffc4 	addi	r3,r2,-1
 80002a8:	00820074 	movhi	r2,2049
 80002ac:	1094de04 	addi	r2,r2,21368
 80002b0:	10c00015 	stw	r3,0(r2)
 80002b4:	00000706 	br	80002d4 <update_state+0x54>
	else
		state.ball_position++;
 80002b8:	00820074 	movhi	r2,2049
 80002bc:	1094de04 	addi	r2,r2,21368
 80002c0:	10800017 	ldw	r2,0(r2)
 80002c4:	10c00044 	addi	r3,r2,1
 80002c8:	00820074 	movhi	r2,2049
 80002cc:	1094de04 	addi	r2,r2,21368
 80002d0:	10c00015 	stw	r3,0(r2)
	// update ball direction
	if (state.ball_position == 0)
 80002d4:	00820074 	movhi	r2,2049
 80002d8:	1094de04 	addi	r2,r2,21368
 80002dc:	10800017 	ldw	r2,0(r2)
 80002e0:	1000051e 	bne	r2,zero,80002f8 <update_state+0x78>
		state.ball_is_traveling_right = 0;
 80002e4:	d0e6d103 	ldbu	r3,-25788(gp)
 80002e8:	00bfff84 	movi	r2,-2
 80002ec:	1884703a 	and	r2,r3,r2
 80002f0:	d0a6d105 	stb	r2,-25788(gp)
 80002f4:	00001c06 	br	8000368 <update_state+0xe8>
	else if (state.ball_position == 17)
 80002f8:	00820074 	movhi	r2,2049
 80002fc:	1094de04 	addi	r2,r2,21368
 8000300:	10800017 	ldw	r2,0(r2)
 8000304:	10800458 	cmpnei	r2,r2,17
 8000308:	1000041e 	bne	r2,zero,800031c <update_state+0x9c>
		state.ball_is_traveling_right = 1;
 800030c:	d0a6d103 	ldbu	r2,-25788(gp)
 8000310:	10800054 	ori	r2,r2,1
 8000314:	d0a6d105 	stb	r2,-25788(gp)
 8000318:	00001306 	br	8000368 <update_state+0xe8>
	else if (*ALL_SW & (1 << state.ball_position)) // bounce off switches
 800031c:	d0a00117 	ldw	r2,-32764(gp)
 8000320:	10c00017 	ldw	r3,0(r2)
 8000324:	00820074 	movhi	r2,2049
 8000328:	1094de04 	addi	r2,r2,21368
 800032c:	10800017 	ldw	r2,0(r2)
 8000330:	01000044 	movi	r4,1
 8000334:	2084983a 	sll	r2,r4,r2
 8000338:	1884703a 	and	r2,r3,r2
 800033c:	10000a26 	beq	r2,zero,8000368 <update_state+0xe8>
		state.ball_is_traveling_right = ~state.ball_is_traveling_right;
 8000340:	d0a6d117 	ldw	r2,-25788(gp)
 8000344:	1080004c 	andi	r2,r2,1
 8000348:	0084303a 	nor	r2,zero,r2
 800034c:	1080004c 	andi	r2,r2,1
 8000350:	1080004c 	andi	r2,r2,1
 8000354:	d126d103 	ldbu	r4,-25788(gp)
 8000358:	00ffff84 	movi	r3,-2
 800035c:	20c6703a 	and	r3,r4,r3
 8000360:	1884b03a 	or	r2,r3,r2
 8000364:	d0a6d105 	stb	r2,-25788(gp)
}
 8000368:	e037883a 	mov	sp,fp
 800036c:	df000017 	ldw	fp,0(sp)
 8000370:	dec00104 	addi	sp,sp,4
 8000374:	f800283a 	ret

08000378 <main>:

int main(void)
{
 8000378:	defff804 	addi	sp,sp,-32
 800037c:	dfc00715 	stw	ra,28(sp)
 8000380:	df000615 	stw	fp,24(sp)
 8000384:	df000604 	addi	fp,sp,24
	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 8000388:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 800038c:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 8000390:	e03ffa85 	stb	zero,-22(fp)

	alt_u16 code;
	int i,hot_plug_count;
	
	
	reset(); // ball game
 8000394:	80002380 	call	8000238 <reset>
	

	printf("USB keyboard setup...\n\n");
 8000398:	01020074 	movhi	r4,2049
 800039c:	2104c504 	addi	r4,r4,4884
 80003a0:	80023780 	call	8002378 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 80003a4:	80011740 	call	8001174 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 80003a8:	01005104 	movi	r4,324
 80003ac:	000b883a 	mov	r5,zero
 80003b0:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 80003b4:	01302414 	movui	r4,49296
 80003b8:	017fffd4 	movui	r5,65535
 80003bc:	80010f00 	call	80010f0 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 80003c0:	01006d04 	movi	r4,436
 80003c4:	01409604 	movi	r5,600
 80003c8:	80010f00 	call	80010f0 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 80003cc:	00811004 	movi	r2,1088
 80003d0:	e0bffa0d 	sth	r2,-24(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 80003d4:	e0bffa0b 	ldhu	r2,-24(fp)
 80003d8:	01005084 	movi	r4,322
 80003dc:	100b883a 	mov	r5,r2
 80003e0:	80010f00 	call	80010f0 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 80003e4:	00808404 	movi	r2,528
 80003e8:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 80003ec:	e0bffe0b 	ldhu	r2,-8(fp)
 80003f0:	01302314 	movui	r4,49292
 80003f4:	100b883a 	mov	r5,r2
 80003f8:	80010f00 	call	80010f0 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 80003fc:	01007104 	movi	r4,452
 8000400:	000b883a 	mov	r5,zero
 8000404:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 8000408:	01007184 	movi	r4,454
 800040c:	000b883a 	mov	r5,zero
 8000410:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 8000414:	01007204 	movi	r4,456
 8000418:	000b883a 	mov	r5,zero
 800041c:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 8000420:	01007284 	movi	r4,458
 8000424:	000b883a 	mov	r5,zero
 8000428:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 800042c:	01007304 	movi	r4,460
 8000430:	000b883a 	mov	r5,zero
 8000434:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 8000438:	01007384 	movi	r4,462
 800043c:	000b883a 	mov	r5,zero
 8000440:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 8000444:	01007404 	movi	r4,464
 8000448:	000b883a 	mov	r5,zero
 800044c:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 8000450:	01007484 	movi	r4,466
 8000454:	000b883a 	mov	r5,zero
 8000458:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 800045c:	01007504 	movi	r4,468
 8000460:	000b883a 	mov	r5,zero
 8000464:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 8000468:	01007584 	movi	r4,470
 800046c:	000b883a 	mov	r5,zero
 8000470:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 8000474:	01007604 	movi	r4,472
 8000478:	000b883a 	mov	r5,zero
 800047c:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000480:	01007684 	movi	r4,474
 8000484:	000b883a 	mov	r5,zero
 8000488:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 800048c:	01007704 	movi	r4,476
 8000490:	000b883a 	mov	r5,zero
 8000494:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000498:	01007784 	movi	r4,478
 800049c:	000b883a 	mov	r5,zero
 80004a0:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 80004a4:	01007084 	movi	r4,450
 80004a8:	01401c84 	movi	r5,114
 80004ac:	80010f00 	call	80010f0 <UsbWrite>
	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_EXEC_INT);
 80004b0:	00f38054 	movui	r3,52737
 80004b4:	00840034 	movhi	r2,4096
 80004b8:	10800104 	addi	r2,r2,4
 80004bc:	10c00035 	stwio	r3,0(r2)

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 80004c0:	0001883a 	nop
 80004c4:	00840034 	movhi	r2,4096
 80004c8:	10800304 	addi	r2,r2,12
 80004cc:	10800037 	ldwio	r2,0(r2)
 80004d0:	10bfffcc 	andi	r2,r2,65535
 80004d4:	103ffb26 	beq	r2,zero,80004c4 <__alt_data_end+0xf80004c4>
	{
	}
	while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK)
 80004d8:	0001883a 	nop
 80004dc:	00840034 	movhi	r2,4096
 80004e0:	10800104 	addi	r2,r2,4
 80004e4:	10800037 	ldwio	r2,0(r2)
 80004e8:	1083fb58 	cmpnei	r2,r2,4077
 80004ec:	10000826 	beq	r2,zero,8000510 <main+0x198>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
 80004f0:	00840034 	movhi	r2,4096
 80004f4:	10800104 	addi	r2,r2,4
 80004f8:	10800037 	ldwio	r2,0(r2)
 80004fc:	01020074 	movhi	r4,2049
 8000500:	2104cb04 	addi	r4,r4,4908
 8000504:	100b883a 	mov	r5,r2
 8000508:	80022840 	call	8002284 <printf>
		goto USB_HOT_PLUG;
 800050c:	003fa506 	br	80003a4 <__alt_data_end+0xf80003a4>
	}
	// STEP 1b end


	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 8000510:	01007084 	movi	r4,450
 8000514:	01401d04 	movi	r5,116
 8000518:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 800051c:	01007104 	movi	r4,452
 8000520:	01400f04 	movi	r5,60
 8000524:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 8000528:	01007184 	movi	r4,454
 800052c:	000b883a 	mov	r5,zero
 8000530:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 8000534:	01007204 	movi	r4,456
 8000538:	000b883a 	mov	r5,zero
 800053c:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 8000540:	01007284 	movi	r4,458
 8000544:	000b883a 	mov	r5,zero
 8000548:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 800054c:	01007304 	movi	r4,460
 8000550:	000b883a 	mov	r5,zero
 8000554:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 8000558:	01007384 	movi	r4,462
 800055c:	000b883a 	mov	r5,zero
 8000560:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 8000564:	01007404 	movi	r4,464
 8000568:	000b883a 	mov	r5,zero
 800056c:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 8000570:	01007484 	movi	r4,466
 8000574:	000b883a 	mov	r5,zero
 8000578:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 800057c:	01007504 	movi	r4,468
 8000580:	000b883a 	mov	r5,zero
 8000584:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 8000588:	01007584 	movi	r4,470
 800058c:	000b883a 	mov	r5,zero
 8000590:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 8000594:	01007604 	movi	r4,472
 8000598:	000b883a 	mov	r5,zero
 800059c:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 80005a0:	01007684 	movi	r4,474
 80005a4:	000b883a 	mov	r5,zero
 80005a8:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 80005ac:	01007704 	movi	r4,476
 80005b0:	000b883a 	mov	r5,zero
 80005b4:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 80005b8:	01007784 	movi	r4,478
 80005bc:	000b883a 	mov	r5,zero
 80005c0:	80010f00 	call	80010f0 <UsbWrite>

	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_EXEC_INT);
 80005c4:	00f38054 	movui	r3,52737
 80005c8:	00840034 	movhi	r2,4096
 80005cc:	10800104 	addi	r2,r2,4
 80005d0:	10c00035 	stwio	r3,0(r2)

	while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK)
 80005d4:	0001883a 	nop
 80005d8:	00840034 	movhi	r2,4096
 80005dc:	10800104 	addi	r2,r2,4
 80005e0:	10800037 	ldwio	r2,0(r2)
 80005e4:	1083fb58 	cmpnei	r2,r2,4077
 80005e8:	10000826 	beq	r2,zero,800060c <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
 80005ec:	00840034 	movhi	r2,4096
 80005f0:	10800104 	addi	r2,r2,4
 80005f4:	10800037 	ldwio	r2,0(r2)
 80005f8:	01020074 	movhi	r4,2049
 80005fc:	2104cb04 	addi	r4,r4,4908
 8000600:	100b883a 	mov	r5,r2
 8000604:	80022840 	call	8002284 <printf>
		goto USB_HOT_PLUG;
 8000608:	003f6606 	br	80003a4 <__alt_data_end+0xf80003a4>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 800060c:	00b02284 	movi	r2,-16246
 8000610:	d0a6d30d 	sth	r2,-25780(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 8000614:	008c0004 	movi	r2,12288
 8000618:	d0a6d38d 	sth	r2,-25778(gp)
	fs_device = A_DP_STAT;
 800061c:	00880004 	movi	r2,8192
 8000620:	e0bffc0d 	sth	r2,-16(fp)

	usb_ctl_val = UsbRead(ctl_reg);
 8000624:	d0a6d30b 	ldhu	r2,-25780(gp)
 8000628:	10bfffcc 	andi	r2,r2,65535
 800062c:	1009883a 	mov	r4,r2
 8000630:	80011380 	call	8001138 <UsbRead>
 8000634:	e0bffa0d 	sth	r2,-24(fp)

	if (!(usb_ctl_val & no_device))
 8000638:	d0a6d38b 	ldhu	r2,-25778(gp)
 800063c:	e0fffa0b 	ldhu	r3,-24(fp)
 8000640:	1884703a 	and	r2,r3,r2
 8000644:	10bfffcc 	andi	r2,r2,65535
 8000648:	1000341e 	bne	r2,zero,800071c <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 800064c:	e03ffb15 	stw	zero,-20(fp)
 8000650:	00001006 	br	8000694 <main+0x31c>
		{
			usleep(5*1000);
 8000654:	0104e204 	movi	r4,5000
 8000658:	800f3900 	call	800f390 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 800065c:	d0a6d30b 	ldhu	r2,-25780(gp)
 8000660:	10bfffcc 	andi	r2,r2,65535
 8000664:	1009883a 	mov	r4,r2
 8000668:	80011380 	call	8001138 <UsbRead>
 800066c:	e0bffa0d 	sth	r2,-24(fp)
			if(usb_ctl_val & no_device) break;
 8000670:	d0a6d38b 	ldhu	r2,-25778(gp)
 8000674:	e0fffa0b 	ldhu	r3,-24(fp)
 8000678:	1884703a 	and	r2,r3,r2
 800067c:	10bfffcc 	andi	r2,r2,65535
 8000680:	10000126 	beq	r2,zero,8000688 <main+0x310>
 8000684:	00000606 	br	80006a0 <main+0x328>

	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 8000688:	e0bffb17 	ldw	r2,-20(fp)
 800068c:	10800044 	addi	r2,r2,1
 8000690:	e0bffb15 	stw	r2,-20(fp)
 8000694:	e0bffb17 	ldw	r2,-20(fp)
 8000698:	10800150 	cmplti	r2,r2,5
 800069c:	103fed1e 	bne	r2,zero,8000654 <__alt_data_end+0xf8000654>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
 80006a0:	d0a6d38b 	ldhu	r2,-25778(gp)
 80006a4:	e0fffa0b 	ldhu	r3,-24(fp)
 80006a8:	1884703a 	and	r2,r3,r2
 80006ac:	10bfffcc 	andi	r2,r2,65535
 80006b0:	1000261e 	bne	r2,zero,800074c <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 80006b4:	01020074 	movhi	r4,2049
 80006b8:	2104d404 	addi	r4,r4,4944
 80006bc:	80023780 	call	8002378 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 80006c0:	01020074 	movhi	r4,2049
 80006c4:	2104de04 	addi	r4,r4,4984
 80006c8:	80023780 	call	8002378 <puts>
			while (!(usb_ctl_val & no_device))
 80006cc:	00000d06 	br	8000704 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 80006d0:	d0a6d30b 	ldhu	r2,-25780(gp)
 80006d4:	10bfffcc 	andi	r2,r2,65535
 80006d8:	1009883a 	mov	r4,r2
 80006dc:	80011380 	call	8001138 <UsbRead>
 80006e0:	e0bffa0d 	sth	r2,-24(fp)
				if(usb_ctl_val & no_device)
 80006e4:	d0a6d38b 	ldhu	r2,-25778(gp)
 80006e8:	e0fffa0b 	ldhu	r3,-24(fp)
 80006ec:	1884703a 	and	r2,r3,r2
 80006f0:	10bfffcc 	andi	r2,r2,65535
 80006f4:	10000126 	beq	r2,zero,80006fc <main+0x384>
					goto USB_HOT_PLUG;
 80006f8:	003f2a06 	br	80003a4 <__alt_data_end+0xf80003a4>

				usleep(2000);
 80006fc:	0101f404 	movi	r4,2000
 8000700:	800f3900 	call	800f390 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 8000704:	d0a6d38b 	ldhu	r2,-25778(gp)
 8000708:	e0fffa0b 	ldhu	r3,-24(fp)
 800070c:	1884703a 	and	r2,r3,r2
 8000710:	10bfffcc 	andi	r2,r2,65535
 8000714:	103fee26 	beq	r2,zero,80006d0 <__alt_data_end+0xf80006d0>
 8000718:	00000c06 	br	800074c <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 800071c:	e0fffa0b 	ldhu	r3,-24(fp)
 8000720:	e0bffc0b 	ldhu	r2,-16(fp)
 8000724:	1884703a 	and	r2,r3,r2
 8000728:	10bfffcc 	andi	r2,r2,65535
 800072c:	10000426 	beq	r2,zero,8000740 <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
 8000730:	01020074 	movhi	r4,2049
 8000734:	2104ea04 	addi	r4,r4,5032
 8000738:	80023780 	call	8002378 <puts>
 800073c:	00000306 	br	800074c <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 8000740:	01020074 	movhi	r4,2049
 8000744:	2104f104 	addi	r4,r4,5060
 8000748:	80023780 	call	8002378 <puts>
		}
	}

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 800074c:	80012300 	call	8001230 <UsbSetAddress>

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000750:	00000306 	br	8000760 <main+0x3e8>
	{
		UsbSetAddress();
 8000754:	80012300 	call	8001230 <UsbSetAddress>
		usleep(10*1000);
 8000758:	0109c404 	movi	r4,10000
 800075c:	800f3900 	call	800f390 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000760:	00840034 	movhi	r2,4096
 8000764:	10800304 	addi	r2,r2,12
 8000768:	10800037 	ldwio	r2,0(r2)
 800076c:	1080040c 	andi	r2,r2,16
 8000770:	103ff826 	beq	r2,zero,8000754 <__alt_data_end+0xf8000754>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000774:	80020d00 	call	80020d0 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506); // i
 8000778:	00c14184 	movi	r3,1286
 800077c:	00840034 	movhi	r2,4096
 8000780:	10800204 	addi	r2,r2,8
 8000784:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000788:	00840034 	movhi	r2,4096
 800078c:	10800037 	ldwio	r2,0(r2)
 8000790:	01020074 	movhi	r4,2049
 8000794:	2104f804 	addi	r4,r4,5088
 8000798:	100b883a 	mov	r5,r2
 800079c:	80022840 	call	8002284 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508); // n
 80007a0:	00c14204 	movi	r3,1288
 80007a4:	00840034 	movhi	r2,4096
 80007a8:	10800204 	addi	r2,r2,8
 80007ac:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 80007b0:	00840034 	movhi	r2,4096
 80007b4:	10800037 	ldwio	r2,0(r2)
 80007b8:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 80007bc:	e0bffa0b 	ldhu	r2,-24(fp)
 80007c0:	01020074 	movhi	r4,2049
 80007c4:	21050304 	addi	r4,r4,5132
 80007c8:	100b883a 	mov	r5,r2
 80007cc:	80022840 	call	8002284 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 80007d0:	e0bffa0b 	ldhu	r2,-24(fp)
 80007d4:	108000e0 	cmpeqi	r2,r2,3
 80007d8:	1000031e 	bne	r2,zero,80007e8 <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80007dc:	80021540 	call	8002154 <UsbGetRetryCnt>
 80007e0:	e0bffa0d 	sth	r2,-24(fp)

		goto USB_HOT_PLUG;
 80007e4:	003eef06 	br	80003a4 <__alt_data_end+0xf80003a4>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 80007e8:	01020074 	movhi	r4,2049
 80007ec:	21050f04 	addi	r4,r4,5180
 80007f0:	80023780 	call	8002378 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1();
 80007f4:	80013300 	call	8001330 <UsbGetDeviceDesc1>
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007f8:	00000306 	br	8000808 <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 80007fc:	80013300 	call	8001330 <UsbGetDeviceDesc1>
		usleep(10*1000);
 8000800:	0109c404 	movi	r4,10000
 8000804:	800f3900 	call	800f390 <usleep>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1();
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000808:	00840034 	movhi	r2,4096
 800080c:	10800304 	addi	r2,r2,12
 8000810:	10800037 	ldwio	r2,0(r2)
 8000814:	1080040c 	andi	r2,r2,16
 8000818:	103ff826 	beq	r2,zero,80007fc <__alt_data_end+0xf80007fc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 800081c:	80020d00 	call	80020d0 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000820:	00c14184 	movi	r3,1286
 8000824:	00840034 	movhi	r2,4096
 8000828:	10800204 	addi	r2,r2,8
 800082c:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000830:	00840034 	movhi	r2,4096
 8000834:	10800037 	ldwio	r2,0(r2)
 8000838:	01020074 	movhi	r4,2049
 800083c:	21051e04 	addi	r4,r4,5240
 8000840:	100b883a 	mov	r5,r2
 8000844:	80022840 	call	8002284 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000848:	00c14204 	movi	r3,1288
 800084c:	00840034 	movhi	r2,4096
 8000850:	10800204 	addi	r2,r2,8
 8000854:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000858:	00840034 	movhi	r2,4096
 800085c:	10800037 	ldwio	r2,0(r2)
 8000860:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 8000864:	e0bffa0b 	ldhu	r2,-24(fp)
 8000868:	01020074 	movhi	r4,2049
 800086c:	21052904 	addi	r4,r4,5284
 8000870:	100b883a 	mov	r5,r2
 8000874:	80022840 	call	8002284 <printf>
	while (usb_ctl_val != 0x03)
 8000878:	00000206 	br	8000884 <main+0x50c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 800087c:	80021540 	call	8002154 <UsbGetRetryCnt>
 8000880:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000884:	e0bffa0b 	ldhu	r2,-24(fp)
 8000888:	108000d8 	cmpnei	r2,r2,3
 800088c:	103ffb1e 	bne	r2,zero,800087c <__alt_data_end+0xf800087c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 8000890:	01020074 	movhi	r4,2049
 8000894:	21053504 	addi	r4,r4,5332
 8000898:	80023780 	call	8002378 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2();
 800089c:	80014780 	call	8001478 <UsbGetDeviceDesc2>
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80008a0:	00000306 	br	80008b0 <main+0x538>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 80008a4:	80014780 	call	8001478 <UsbGetDeviceDesc2>
		usleep(10*1000);
 80008a8:	0109c404 	movi	r4,10000
 80008ac:	800f3900 	call	800f390 <usleep>
	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2();
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80008b0:	00840034 	movhi	r2,4096
 80008b4:	10800304 	addi	r2,r2,12
 80008b8:	10800037 	ldwio	r2,0(r2)
 80008bc:	1080040c 	andi	r2,r2,16
 80008c0:	103ff826 	beq	r2,zero,80008a4 <__alt_data_end+0xf80008a4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80008c4:	80020d00 	call	80020d0 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 80008c8:	00c14184 	movi	r3,1286
 80008cc:	00840034 	movhi	r2,4096
 80008d0:	10800204 	addi	r2,r2,8
 80008d4:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 80008d8:	00840034 	movhi	r2,4096
 80008dc:	10800037 	ldwio	r2,0(r2)
 80008e0:	01020074 	movhi	r4,2049
 80008e4:	21051e04 	addi	r4,r4,5240
 80008e8:	100b883a 	mov	r5,r2
 80008ec:	80022840 	call	8002284 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 80008f0:	00c14204 	movi	r3,1288
 80008f4:	00840034 	movhi	r2,4096
 80008f8:	10800204 	addi	r2,r2,8
 80008fc:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000900:	00840034 	movhi	r2,4096
 8000904:	10800037 	ldwio	r2,0(r2)
 8000908:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 800090c:	e0bffa0b 	ldhu	r2,-24(fp)
 8000910:	01020074 	movhi	r4,2049
 8000914:	21052904 	addi	r4,r4,5284
 8000918:	100b883a 	mov	r5,r2
 800091c:	80022840 	call	8002284 <printf>
	while (usb_ctl_val != 0x03)
 8000920:	00000206 	br	800092c <main+0x5b4>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000924:	80021540 	call	8002154 <UsbGetRetryCnt>
 8000928:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 800092c:	e0bffa0b 	ldhu	r2,-24(fp)
 8000930:	108000d8 	cmpnei	r2,r2,3
 8000934:	103ffb1e 	bne	r2,zero,8000924 <__alt_data_end+0xf8000924>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 8000938:	01020074 	movhi	r4,2049
 800093c:	21054904 	addi	r4,r4,5412
 8000940:	80023780 	call	8002378 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1();
 8000944:	80016500 	call	8001650 <UsbGetConfigDesc1>
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000948:	00000306 	br	8000958 <main+0x5e0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 800094c:	80016500 	call	8001650 <UsbGetConfigDesc1>
		usleep(10*1000);
 8000950:	0109c404 	movi	r4,10000
 8000954:	800f3900 	call	800f390 <usleep>
	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1();
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000958:	00840034 	movhi	r2,4096
 800095c:	10800304 	addi	r2,r2,12
 8000960:	10800037 	ldwio	r2,0(r2)
 8000964:	1080040c 	andi	r2,r2,16
 8000968:	103ff826 	beq	r2,zero,800094c <__alt_data_end+0xf800094c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 800096c:	80020d00 	call	80020d0 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000970:	00c14184 	movi	r3,1286
 8000974:	00840034 	movhi	r2,4096
 8000978:	10800204 	addi	r2,r2,8
 800097c:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000980:	00840034 	movhi	r2,4096
 8000984:	10800037 	ldwio	r2,0(r2)
 8000988:	01020074 	movhi	r4,2049
 800098c:	21055b04 	addi	r4,r4,5484
 8000990:	100b883a 	mov	r5,r2
 8000994:	80022840 	call	8002284 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000998:	00c14204 	movi	r3,1288
 800099c:	00840034 	movhi	r2,4096
 80009a0:	10800204 	addi	r2,r2,8
 80009a4:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 80009a8:	00840034 	movhi	r2,4096
 80009ac:	10800037 	ldwio	r2,0(r2)
 80009b0:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 80009b4:	e0bffa0b 	ldhu	r2,-24(fp)
 80009b8:	01020074 	movhi	r4,2049
 80009bc:	21056604 	addi	r4,r4,5528
 80009c0:	100b883a 	mov	r5,r2
 80009c4:	80022840 	call	8002284 <printf>
	while (usb_ctl_val != 0x03)
 80009c8:	00000206 	br	80009d4 <main+0x65c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80009cc:	80021540 	call	8002154 <UsbGetRetryCnt>
 80009d0:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 80009d4:	e0bffa0b 	ldhu	r2,-24(fp)
 80009d8:	108000d8 	cmpnei	r2,r2,3
 80009dc:	103ffb1e 	bne	r2,zero,80009cc <__alt_data_end+0xf80009cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 80009e0:	01020074 	movhi	r4,2049
 80009e4:	21057204 	addi	r4,r4,5576
 80009e8:	80023780 	call	8002378 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2();
 80009ec:	80017e00 	call	80017e0 <UsbGetConfigDesc2>
	usleep(100*1000);
 80009f0:	010000b4 	movhi	r4,2
 80009f4:	2121a804 	addi	r4,r4,-31072
 80009f8:	800f3900 	call	800f390 <usleep>
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80009fc:	00000306 	br	8000a0c <main+0x694>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 8000a00:	80017e00 	call	80017e0 <UsbGetConfigDesc2>
		usleep(10*1000);
 8000a04:	0109c404 	movi	r4,10000
 8000a08:	800f3900 	call	800f390 <usleep>
	//-----------------------------------get configuration descriptor-2------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2();
	usleep(100*1000);
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000a0c:	00840034 	movhi	r2,4096
 8000a10:	10800304 	addi	r2,r2,12
 8000a14:	10800037 	ldwio	r2,0(r2)
 8000a18:	1080040c 	andi	r2,r2,16
 8000a1c:	103ff826 	beq	r2,zero,8000a00 <__alt_data_end+0xf8000a00>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000a20:	80020d00 	call	80020d0 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000a24:	00c14184 	movi	r3,1286
 8000a28:	00840034 	movhi	r2,4096
 8000a2c:	10800204 	addi	r2,r2,8
 8000a30:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000a34:	00840034 	movhi	r2,4096
 8000a38:	10800037 	ldwio	r2,0(r2)
 8000a3c:	01020074 	movhi	r4,2049
 8000a40:	21058504 	addi	r4,r4,5652
 8000a44:	100b883a 	mov	r5,r2
 8000a48:	80022840 	call	8002284 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000a4c:	00c14204 	movi	r3,1288
 8000a50:	00840034 	movhi	r2,4096
 8000a54:	10800204 	addi	r2,r2,8
 8000a58:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000a5c:	00840034 	movhi	r2,4096
 8000a60:	10800037 	ldwio	r2,0(r2)
 8000a64:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 8000a68:	e0bffa0b 	ldhu	r2,-24(fp)
 8000a6c:	01020074 	movhi	r4,2049
 8000a70:	21059004 	addi	r4,r4,5696
 8000a74:	100b883a 	mov	r5,r2
 8000a78:	80022840 	call	8002284 <printf>
	while (usb_ctl_val != 0x03)
 8000a7c:	00000206 	br	8000a88 <main+0x710>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000a80:	80021540 	call	8002154 <UsbGetRetryCnt>
 8000a84:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000a88:	e0bffa0b 	ldhu	r2,-24(fp)
 8000a8c:	108000d8 	cmpnei	r2,r2,3
 8000a90:	103ffb1e 	bne	r2,zero,8000a80 <__alt_data_end+0xf8000a80>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 8000a94:	01020074 	movhi	r4,2049
 8000a98:	21059c04 	addi	r4,r4,5744
 8000a9c:	80023780 	call	8002378 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IOWR(CY7C67200_BASE,HPI_ADDR,0x56B);
 8000aa0:	00c15ac4 	movi	r3,1387
 8000aa4:	00840034 	movhi	r2,4096
 8000aa8:	10800204 	addi	r2,r2,8
 8000aac:	10c00035 	stwio	r3,0(r2)
	//UsbPrintMem();
	code = IORD(CY7C67200_BASE,HPI_DATA);
 8000ab0:	00840034 	movhi	r2,4096
 8000ab4:	10800037 	ldwio	r2,0(r2)
 8000ab8:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = +%x\n", code);
 8000abc:	e0bffe8b 	ldhu	r2,-6(fp)
 8000ac0:	01020074 	movhi	r4,2049
 8000ac4:	2105af04 	addi	r4,r4,5820
 8000ac8:	100b883a 	mov	r5,r2
 8000acc:	80022840 	call	8002284 <printf>
	code = code >> 8;
 8000ad0:	e0bffe8b 	ldhu	r2,-6(fp)
 8000ad4:	1004d23a 	srli	r2,r2,8
 8000ad8:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0xff;
 8000adc:	e0bffe8b 	ldhu	r2,-6(fp)
 8000ae0:	10803fcc 	andi	r2,r2,255
 8000ae4:	e0bffe8d 	sth	r2,-6(fp)
	//code = 0x01;
	if (code == 0x01)
 8000ae8:	e0bffe8b 	ldhu	r2,-6(fp)
 8000aec:	10800058 	cmpnei	r2,r2,1
 8000af0:	1000041e 	bne	r2,zero,8000b04 <main+0x78c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 8000af4:	01020074 	movhi	r4,2049
 8000af8:	2105b304 	addi	r4,r4,5836
 8000afc:	80023780 	call	8002378 <puts>
 8000b00:	00000806 	br	8000b24 <main+0x7ac>
	}
	else
	{
		printf("\nvalue= %x\n", code);
 8000b04:	e0bffe8b 	ldhu	r2,-6(fp)
 8000b08:	01020074 	movhi	r4,2049
 8000b0c:	2105c204 	addi	r4,r4,5896
 8000b10:	100b883a 	mov	r5,r2
 8000b14:	80022840 	call	8002284 <printf>
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 8000b18:	01020074 	movhi	r4,2049
 8000b1c:	2105c504 	addi	r4,r4,5908
 8000b20:	80023780 	call	8002378 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.
	//IOWR(CY7C67200_BASE,HPI_ADDR,0x057B);
	//data_size = (IORD(CY7C67200_BASE,HPI_DATA)>>8)&0x0ff;
	data_size = 0x08;
 8000b24:	00800204 	movi	r2,8
 8000b28:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 8000b2c:	e0bfff03 	ldbu	r2,-4(fp)
 8000b30:	01020074 	movhi	r4,2049
 8000b34:	2105ce04 	addi	r4,r4,5944
 8000b38:	100b883a 	mov	r5,r2
 8000b3c:	80022840 	call	8002284 <printf>

	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();
 8000b40:	8001a480 	call	8001a48 <UsbSetConfig>
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b44:	00000306 	br	8000b54 <main+0x7dc>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();
 8000b48:	8001a480 	call	8001a48 <UsbSetConfig>
		usleep(10*1000);
 8000b4c:	0109c404 	movi	r4,10000
 8000b50:	800f3900 	call	800f390 <usleep>

	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b54:	00840034 	movhi	r2,4096
 8000b58:	10800304 	addi	r2,r2,12
 8000b5c:	10800037 	ldwio	r2,0(r2)
 8000b60:	1080040c 	andi	r2,r2,16
 8000b64:	103ff826 	beq	r2,zero,8000b48 <__alt_data_end+0xf8000b48>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000b68:	80020d00 	call	80020d0 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000b6c:	00c14184 	movi	r3,1286
 8000b70:	00840034 	movhi	r2,4096
 8000b74:	10800204 	addi	r2,r2,8
 8000b78:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000b7c:	00840034 	movhi	r2,4096
 8000b80:	10800037 	ldwio	r2,0(r2)
 8000b84:	01020074 	movhi	r4,2049
 8000b88:	2105d804 	addi	r4,r4,5984
 8000b8c:	100b883a 	mov	r5,r2
 8000b90:	80022840 	call	8002284 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000b94:	00c14204 	movi	r3,1288
 8000b98:	00840034 	movhi	r2,4096
 8000b9c:	10800204 	addi	r2,r2,8
 8000ba0:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000ba4:	00840034 	movhi	r2,4096
 8000ba8:	10800037 	ldwio	r2,0(r2)
 8000bac:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 8000bb0:	e0bffa0b 	ldhu	r2,-24(fp)
 8000bb4:	01020074 	movhi	r4,2049
 8000bb8:	2105e304 	addi	r4,r4,6028
 8000bbc:	100b883a 	mov	r5,r2
 8000bc0:	80022840 	call	8002284 <printf>
	while (usb_ctl_val != 0x03)
 8000bc4:	00000206 	br	8000bd0 <main+0x858>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000bc8:	80021540 	call	8002154 <UsbGetRetryCnt>
 8000bcc:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000bd0:	e0bffa0b 	ldhu	r2,-24(fp)
 8000bd4:	108000d8 	cmpnei	r2,r2,3
 8000bd8:	103ffb1e 	bne	r2,zero,8000bc8 <__alt_data_end+0xf8000bc8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 8000bdc:	01020074 	movhi	r4,2049
 8000be0:	2105ef04 	addi	r4,r4,6076
 8000be4:	80023780 	call	8002378 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
 8000be8:	8001b480 	call	8001b48 <UsbClassRequest>
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000bec:	00000306 	br	8000bfc <main+0x884>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 8000bf0:	8001b480 	call	8001b48 <UsbClassRequest>
		usleep(10*1000);
 8000bf4:	0109c404 	movi	r4,10000
 8000bf8:	800f3900 	call	800f390 <usleep>
	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000bfc:	00840034 	movhi	r2,4096
 8000c00:	10800304 	addi	r2,r2,12
 8000c04:	10800037 	ldwio	r2,0(r2)
 8000c08:	1080040c 	andi	r2,r2,16
 8000c0c:	103ff826 	beq	r2,zero,8000bf0 <__alt_data_end+0xf8000bf0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000c10:	80020d00 	call	80020d0 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000c14:	00c14184 	movi	r3,1286
 8000c18:	00840034 	movhi	r2,4096
 8000c1c:	10800204 	addi	r2,r2,8
 8000c20:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000c24:	00840034 	movhi	r2,4096
 8000c28:	10800037 	ldwio	r2,0(r2)
 8000c2c:	01020074 	movhi	r4,2049
 8000c30:	21060104 	addi	r4,r4,6148
 8000c34:	100b883a 	mov	r5,r2
 8000c38:	80022840 	call	8002284 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000c3c:	00c14204 	movi	r3,1288
 8000c40:	00840034 	movhi	r2,4096
 8000c44:	10800204 	addi	r2,r2,8
 8000c48:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000c4c:	00840034 	movhi	r2,4096
 8000c50:	10800037 	ldwio	r2,0(r2)
 8000c54:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000c58:	e0bffa0b 	ldhu	r2,-24(fp)
 8000c5c:	01020074 	movhi	r4,2049
 8000c60:	21060c04 	addi	r4,r4,6192
 8000c64:	100b883a 	mov	r5,r2
 8000c68:	80022840 	call	8002284 <printf>
	while (usb_ctl_val != 0x03)
 8000c6c:	00000206 	br	8000c78 <main+0x900>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000c70:	80021540 	call	8002154 <UsbGetRetryCnt>
 8000c74:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000c78:	e0bffa0b 	ldhu	r2,-24(fp)
 8000c7c:	108000d8 	cmpnei	r2,r2,3
 8000c80:	103ffb1e 	bne	r2,zero,8000c70 <__alt_data_end+0xf8000c70>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 8000c84:	01020074 	movhi	r4,2049
 8000c88:	21061804 	addi	r4,r4,6240
 8000c8c:	80023780 	call	8002378 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
 8000c90:	8001c480 	call	8001c48 <UsbGetHidDesc>

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c94:	00000306 	br	8000ca4 <main+0x92c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 8000c98:	8001c480 	call	8001c48 <UsbGetHidDesc>
		usleep(10*1000);
 8000c9c:	0109c404 	movi	r4,10000
 8000ca0:	800f3900 	call	800f390 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000ca4:	00840034 	movhi	r2,4096
 8000ca8:	10800304 	addi	r2,r2,12
 8000cac:	10800037 	ldwio	r2,0(r2)
 8000cb0:	1080040c 	andi	r2,r2,16
 8000cb4:	103ff826 	beq	r2,zero,8000c98 <__alt_data_end+0xf8000c98>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000cb8:	80020d00 	call	80020d0 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000cbc:	00c14184 	movi	r3,1286
 8000cc0:	00840034 	movhi	r2,4096
 8000cc4:	10800204 	addi	r2,r2,8
 8000cc8:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000ccc:	00840034 	movhi	r2,4096
 8000cd0:	10800037 	ldwio	r2,0(r2)
 8000cd4:	01020074 	movhi	r4,2049
 8000cd8:	21060104 	addi	r4,r4,6148
 8000cdc:	100b883a 	mov	r5,r2
 8000ce0:	80022840 	call	8002284 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000ce4:	00c14204 	movi	r3,1288
 8000ce8:	00840034 	movhi	r2,4096
 8000cec:	10800204 	addi	r2,r2,8
 8000cf0:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000cf4:	00840034 	movhi	r2,4096
 8000cf8:	10800037 	ldwio	r2,0(r2)
 8000cfc:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000d00:	e0bffa0b 	ldhu	r2,-24(fp)
 8000d04:	01020074 	movhi	r4,2049
 8000d08:	21060c04 	addi	r4,r4,6192
 8000d0c:	100b883a 	mov	r5,r2
 8000d10:	80022840 	call	8002284 <printf>
	while (usb_ctl_val != 0x03)
 8000d14:	00000206 	br	8000d20 <main+0x9a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000d18:	80021540 	call	8002154 <UsbGetRetryCnt>
 8000d1c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000d20:	e0bffa0b 	ldhu	r2,-24(fp)
 8000d24:	108000d8 	cmpnei	r2,r2,3
 8000d28:	103ffb1e 	bne	r2,zero,8000d18 <__alt_data_end+0xf8000d18>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 8000d2c:	01020074 	movhi	r4,2049
 8000d30:	21062a04 	addi	r4,r4,6312
 8000d34:	80023780 	call	8002378 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
 8000d38:	8001d900 	call	8001d90 <UsbGetReportDesc>
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d3c:	00000306 	br	8000d4c <main+0x9d4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 8000d40:	8001d900 	call	8001d90 <UsbGetReportDesc>
		usleep(10*1000);
 8000d44:	0109c404 	movi	r4,10000
 8000d48:	800f3900 	call	800f390 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d4c:	00840034 	movhi	r2,4096
 8000d50:	10800304 	addi	r2,r2,12
 8000d54:	10800037 	ldwio	r2,0(r2)
 8000d58:	1080040c 	andi	r2,r2,16
 8000d5c:	103ff826 	beq	r2,zero,8000d40 <__alt_data_end+0xf8000d40>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000d60:	80020d00 	call	80020d0 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000d64:	00c14184 	movi	r3,1286
 8000d68:	00840034 	movhi	r2,4096
 8000d6c:	10800204 	addi	r2,r2,8
 8000d70:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000d74:	00840034 	movhi	r2,4096
 8000d78:	10800037 	ldwio	r2,0(r2)
 8000d7c:	01020074 	movhi	r4,2049
 8000d80:	21063e04 	addi	r4,r4,6392
 8000d84:	100b883a 	mov	r5,r2
 8000d88:	80022840 	call	8002284 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000d8c:	00c14204 	movi	r3,1288
 8000d90:	00840034 	movhi	r2,4096
 8000d94:	10800204 	addi	r2,r2,8
 8000d98:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000d9c:	00840034 	movhi	r2,4096
 8000da0:	10800037 	ldwio	r2,0(r2)
 8000da4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 8000da8:	e0bffa0b 	ldhu	r2,-24(fp)
 8000dac:	01020074 	movhi	r4,2049
 8000db0:	21064a04 	addi	r4,r4,6440
 8000db4:	100b883a 	mov	r5,r2
 8000db8:	80022840 	call	8002284 <printf>
	while (usb_ctl_val != 0x03)
 8000dbc:	00000206 	br	8000dc8 <main+0xa50>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000dc0:	80021540 	call	8002154 <UsbGetRetryCnt>
 8000dc4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000dc8:	e0bffa0b 	ldhu	r2,-24(fp)
 8000dcc:	108000d8 	cmpnei	r2,r2,3
 8000dd0:	103ffb1e 	bne	r2,zero,8000dc0 <__alt_data_end+0xf8000dc0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 8000dd4:	01020074 	movhi	r4,2049
 8000dd8:	21065604 	addi	r4,r4,6488
 8000ddc:	80023780 	call	8002378 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 8000de0:	0109c404 	movi	r4,10000
 8000de4:	800f3900 	call	800f390 <usleep>
	while(1)
	{
		toggle++;
 8000de8:	e0bffa83 	ldbu	r2,-22(fp)
 8000dec:	10800044 	addi	r2,r2,1
 8000df0:	e0bffa85 	stb	r2,-22(fp)
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8000df4:	00c14004 	movi	r3,1280
 8000df8:	00840034 	movhi	r2,4096
 8000dfc:	10800204 	addi	r2,r2,8
 8000e00:	10c00035 	stwio	r3,0(r2)
		//data phase IN-1
		IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
 8000e04:	00c14704 	movi	r3,1308
 8000e08:	00840034 	movhi	r2,4096
 8000e0c:	10c00035 	stwio	r3,0(r2)

		IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
 8000e10:	e0bfff03 	ldbu	r2,-4(fp)
 8000e14:	10c003cc 	andi	r3,r2,15
 8000e18:	00840034 	movhi	r2,4096
 8000e1c:	10c00035 	stwio	r3,0(r2)

		IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
 8000e20:	00c0a444 	movi	r3,657
 8000e24:	00840034 	movhi	r2,4096
 8000e28:	10c00035 	stwio	r3,0(r2)
		if(toggle%2)
 8000e2c:	e0bffa83 	ldbu	r2,-22(fp)
 8000e30:	1080004c 	andi	r2,r2,1
 8000e34:	10803fcc 	andi	r2,r2,255
 8000e38:	10000426 	beq	r2,zero,8000e4c <main+0xad4>
		{
			IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
 8000e3c:	00c00044 	movi	r3,1
 8000e40:	00840034 	movhi	r2,4096
 8000e44:	10c00035 	stwio	r3,0(r2)
 8000e48:	00000306 	br	8000e58 <main+0xae0>
		}
		else
		{
			IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
 8000e4c:	00c01044 	movi	r3,65
 8000e50:	00840034 	movhi	r2,4096
 8000e54:	10c00035 	stwio	r3,0(r2)
		}
		IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8000e58:	00c004c4 	movi	r3,19
 8000e5c:	00840034 	movhi	r2,4096
 8000e60:	10c00035 	stwio	r3,0(r2)
		IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
 8000e64:	0007883a 	mov	r3,zero
 8000e68:	00840034 	movhi	r2,4096
 8000e6c:	10c00035 	stwio	r3,0(r2)
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000e70:	01006c04 	movi	r4,432
 8000e74:	01414004 	movi	r5,1280
 8000e78:	80010f00 	call	80010f0 <UsbWrite>
		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000e7c:	00002406 	br	8000f10 <main+0xb98>
		{
			IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8000e80:	00c14004 	movi	r3,1280
 8000e84:	00840034 	movhi	r2,4096
 8000e88:	10800204 	addi	r2,r2,8
 8000e8c:	10c00035 	stwio	r3,0(r2)
			//data phase IN-1
			IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
 8000e90:	00c14704 	movi	r3,1308
 8000e94:	00840034 	movhi	r2,4096
 8000e98:	10c00035 	stwio	r3,0(r2)

			IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
 8000e9c:	e0bfff03 	ldbu	r2,-4(fp)
 8000ea0:	10c003cc 	andi	r3,r2,15
 8000ea4:	00840034 	movhi	r2,4096
 8000ea8:	10c00035 	stwio	r3,0(r2)

			IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
 8000eac:	00c0a444 	movi	r3,657
 8000eb0:	00840034 	movhi	r2,4096
 8000eb4:	10c00035 	stwio	r3,0(r2)
			if(toggle%2)
 8000eb8:	e0bffa83 	ldbu	r2,-22(fp)
 8000ebc:	1080004c 	andi	r2,r2,1
 8000ec0:	10803fcc 	andi	r2,r2,255
 8000ec4:	10000426 	beq	r2,zero,8000ed8 <main+0xb60>
			{
				IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
 8000ec8:	00c00044 	movi	r3,1
 8000ecc:	00840034 	movhi	r2,4096
 8000ed0:	10c00035 	stwio	r3,0(r2)
 8000ed4:	00000306 	br	8000ee4 <main+0xb6c>
			}
			else
			{
				IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
 8000ed8:	00c01044 	movi	r3,65
 8000edc:	00840034 	movhi	r2,4096
 8000ee0:	10c00035 	stwio	r3,0(r2)
			}
			IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8000ee4:	00c004c4 	movi	r3,19
 8000ee8:	00840034 	movhi	r2,4096
 8000eec:	10c00035 	stwio	r3,0(r2)
			IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//
 8000ef0:	0007883a 	mov	r3,zero
 8000ef4:	00840034 	movhi	r2,4096
 8000ef8:	10c00035 	stwio	r3,0(r2)
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000efc:	01006c04 	movi	r4,432
 8000f00:	01414004 	movi	r5,1280
 8000f04:	80010f00 	call	80010f0 <UsbWrite>
			usleep(10*1000);
 8000f08:	0109c404 	movi	r4,10000
 8000f0c:	800f3900 	call	800f390 <usleep>
			IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
		}
		IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
		IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000f10:	00840034 	movhi	r2,4096
 8000f14:	10800304 	addi	r2,r2,12
 8000f18:	10800037 	ldwio	r2,0(r2)
 8000f1c:	1080040c 	andi	r2,r2,16
 8000f20:	103fd726 	beq	r2,zero,8000e80 <__alt_data_end+0xf8000e80>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while


		usb_ctl_val = UsbWaitTDListDone();
 8000f24:	80020d00 	call	80020d0 <UsbWaitTDListDone>
 8000f28:	e0bffa0d 	sth	r2,-24(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IOWR(CY7C67200_BASE,HPI_ADDR,0x051e);
 8000f2c:	00c14784 	movi	r3,1310
 8000f30:	00840034 	movhi	r2,4096
 8000f34:	10800204 	addi	r2,r2,8
 8000f38:	10c00035 	stwio	r3,0(r2)
		keycode = IORD(CY7C67200_BASE,HPI_DATA);
 8000f3c:	00840034 	movhi	r2,4096
 8000f40:	10800037 	ldwio	r2,0(r2)
 8000f44:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
 8000f48:	01020074 	movhi	r4,2049
 8000f4c:	21066a04 	addi	r4,r4,6568
 8000f50:	e17ffd17 	ldw	r5,-12(fp)
 8000f54:	80022840 	call	8002284 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
 8000f58:	e0bffd17 	ldw	r2,-12(fp)
 8000f5c:	10c03fcc 	andi	r3,r2,255
 8000f60:	00844034 	movhi	r2,4352
 8000f64:	10842004 	addi	r2,r2,4224
 8000f68:	10c00035 	stwio	r3,0(r2)
		
		
		usleep(200);//usleep(5000);
 8000f6c:	01003204 	movi	r4,200
 8000f70:	800f3900 	call	800f390 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 8000f74:	d0a6d30b 	ldhu	r2,-25780(gp)
 8000f78:	10bfffcc 	andi	r2,r2,65535
 8000f7c:	1009883a 	mov	r4,r2
 8000f80:	80011380 	call	8001138 <UsbRead>
 8000f84:	e0bffa0d 	sth	r2,-24(fp)

		if(!(usb_ctl_val & no_device))
 8000f88:	d0a6d38b 	ldhu	r2,-25778(gp)
 8000f8c:	e0fffa0b 	ldhu	r3,-24(fp)
 8000f90:	1884703a 	and	r2,r3,r2
 8000f94:	10bfffcc 	andi	r2,r2,65535
 8000f98:	1000211e 	bne	r2,zero,8001020 <main+0xca8>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000f9c:	e03ffb15 	stw	zero,-20(fp)
 8000fa0:	00001006 	br	8000fe4 <main+0xc6c>
			{
				usleep(5*1000);
 8000fa4:	0104e204 	movi	r4,5000
 8000fa8:	800f3900 	call	800f390 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 8000fac:	d0a6d30b 	ldhu	r2,-25780(gp)
 8000fb0:	10bfffcc 	andi	r2,r2,65535
 8000fb4:	1009883a 	mov	r4,r2
 8000fb8:	80011380 	call	8001138 <UsbRead>
 8000fbc:	e0bffa0d 	sth	r2,-24(fp)
				if(usb_ctl_val & no_device) break;
 8000fc0:	d0a6d38b 	ldhu	r2,-25778(gp)
 8000fc4:	e0fffa0b 	ldhu	r3,-24(fp)
 8000fc8:	1884703a 	and	r2,r3,r2
 8000fcc:	10bfffcc 	andi	r2,r2,65535
 8000fd0:	10000126 	beq	r2,zero,8000fd8 <main+0xc60>
 8000fd4:	00000606 	br	8000ff0 <main+0xc78>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000fd8:	e0bffb17 	ldw	r2,-20(fp)
 8000fdc:	10800044 	addi	r2,r2,1
 8000fe0:	e0bffb15 	stw	r2,-20(fp)
 8000fe4:	e0bffb17 	ldw	r2,-20(fp)
 8000fe8:	108001d0 	cmplti	r2,r2,7
 8000fec:	103fed1e 	bne	r2,zero,8000fa4 <__alt_data_end+0xf8000fa4>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
 8000ff0:	d0a6d38b 	ldhu	r2,-25778(gp)
 8000ff4:	e0fffa0b 	ldhu	r3,-24(fp)
 8000ff8:	1884703a 	and	r2,r3,r2
 8000ffc:	10bfffcc 	andi	r2,r2,65535
 8001000:	1000071e 	bne	r2,zero,8001020 <main+0xca8>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 8001004:	01020074 	movhi	r4,2049
 8001008:	21067304 	addi	r4,r4,6604
 800100c:	80023780 	call	8002378 <puts>
				printf("[INFO]: please insert again!!! \n");
 8001010:	01020074 	movhi	r4,2049
 8001014:	21067e04 	addi	r4,r4,6648
 8001018:	80023780 	call	8002378 <puts>
			}
		}
		
		while (!(usb_ctl_val & no_device))
 800101c:	00001e06 	br	8001098 <main+0xd20>
 8001020:	00001d06 	br	8001098 <main+0xd20>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 8001024:	d0a6d30b 	ldhu	r2,-25780(gp)
 8001028:	10bfffcc 	andi	r2,r2,65535
 800102c:	1009883a 	mov	r4,r2
 8001030:	80011380 	call	8001138 <UsbRead>
 8001034:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
 8001038:	0104e204 	movi	r4,5000
 800103c:	800f3900 	call	800f390 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8001040:	d0a6d30b 	ldhu	r2,-25780(gp)
 8001044:	10bfffcc 	andi	r2,r2,65535
 8001048:	1009883a 	mov	r4,r2
 800104c:	80011380 	call	8001138 <UsbRead>
 8001050:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
 8001054:	0104e204 	movi	r4,5000
 8001058:	800f3900 	call	800f390 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 800105c:	d0a6d30b 	ldhu	r2,-25780(gp)
 8001060:	10bfffcc 	andi	r2,r2,65535
 8001064:	1009883a 	mov	r4,r2
 8001068:	80011380 	call	8001138 <UsbRead>
 800106c:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
 8001070:	0104e204 	movi	r4,5000
 8001074:	800f3900 	call	800f390 <usleep>

			if(usb_ctl_val & no_device)
 8001078:	d0a6d38b 	ldhu	r2,-25778(gp)
 800107c:	e0fffa0b 	ldhu	r3,-24(fp)
 8001080:	1884703a 	and	r2,r3,r2
 8001084:	10bfffcc 	andi	r2,r2,65535
 8001088:	10000126 	beq	r2,zero,8001090 <main+0xd18>
				goto USB_HOT_PLUG;
 800108c:	003cc506 	br	80003a4 <__alt_data_end+0xf80003a4>

			usleep(200);
 8001090:	01003204 	movi	r4,200
 8001094:	800f3900 	call	800f390 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}
		
		while (!(usb_ctl_val & no_device))
 8001098:	d0a6d38b 	ldhu	r2,-25778(gp)
 800109c:	e0fffa0b 	ldhu	r3,-24(fp)
 80010a0:	1884703a 	and	r2,r3,r2
 80010a4:	10bfffcc 	andi	r2,r2,65535
 80010a8:	103fde26 	beq	r2,zero,8001024 <__alt_data_end+0xf8001024>

		}
		
		
		// ball game
		update_state();
 80010ac:	80002800 	call	8000280 <update_state>
		*LEDG = 0xAA;
 80010b0:	d0a00017 	ldw	r2,-32768(gp)
 80010b4:	00c02a84 	movi	r3,170
 80010b8:	10c00015 	stw	r3,0(r2)
		*LEDR = *ALL_SW | (1 << state.ball_position);
 80010bc:	d0a00217 	ldw	r2,-32760(gp)
 80010c0:	d0e00117 	ldw	r3,-32764(gp)
 80010c4:	19000017 	ldw	r4,0(r3)
 80010c8:	00c20074 	movhi	r3,2049
 80010cc:	18d4de04 	addi	r3,r3,21368
 80010d0:	18c00017 	ldw	r3,0(r3)
 80010d4:	01400044 	movi	r5,1
 80010d8:	28c6983a 	sll	r3,r5,r3
 80010dc:	20c6b03a 	or	r3,r4,r3
 80010e0:	10c00015 	stw	r3,0(r2)
		delay(10000);
 80010e4:	0109c404 	movi	r4,10000
 80010e8:	80001f80 	call	80001f8 <delay>
		

	}//end while
 80010ec:	003f3e06 	br	8000de8 <__alt_data_end+0xf8000de8>

080010f0 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 80010f0:	defffd04 	addi	sp,sp,-12
 80010f4:	df000215 	stw	fp,8(sp)
 80010f8:	df000204 	addi	fp,sp,8
 80010fc:	2007883a 	mov	r3,r4
 8001100:	2805883a 	mov	r2,r5
 8001104:	e0fffe0d 	sth	r3,-8(fp)
 8001108:	e0bfff0d 	sth	r2,-4(fp)
	//XIo_Out16(USB_ADDRESS, Address);
	IOWR(CY7C67200_BASE,HPI_ADDR,Address);
 800110c:	e0fffe0b 	ldhu	r3,-8(fp)
 8001110:	00840034 	movhi	r2,4096
 8001114:	10800204 	addi	r2,r2,8
 8001118:	10c00035 	stwio	r3,0(r2)
	//usleep(10);

	//XIo_Out16(USB_DATA, Data);
	IOWR(CY7C67200_BASE,HPI_DATA,Data);
 800111c:	e0ffff0b 	ldhu	r3,-4(fp)
 8001120:	00840034 	movhi	r2,4096
 8001124:	10c00035 	stwio	r3,0(r2)
}
 8001128:	e037883a 	mov	sp,fp
 800112c:	df000017 	ldw	fp,0(sp)
 8001130:	dec00104 	addi	sp,sp,4
 8001134:	f800283a 	ret

08001138 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 8001138:	defffe04 	addi	sp,sp,-8
 800113c:	df000115 	stw	fp,4(sp)
 8001140:	df000104 	addi	fp,sp,4
 8001144:	2005883a 	mov	r2,r4
 8001148:	e0bfff0d 	sth	r2,-4(fp)
	//XIo_Out16(HPI_ADDR, Address);
	IOWR(CY7C67200_BASE,HPI_ADDR,Address);
 800114c:	e0ffff0b 	ldhu	r3,-4(fp)
 8001150:	00840034 	movhi	r2,4096
 8001154:	10800204 	addi	r2,r2,8
 8001158:	10c00035 	stwio	r3,0(r2)
	//usleep(20);
	return IORD(CY7C67200_BASE,HPI_DATA);
 800115c:	00840034 	movhi	r2,4096
 8001160:	10800037 	ldwio	r2,0(r2)
}
 8001164:	e037883a 	mov	sp,fp
 8001168:	df000017 	ldw	fp,0(sp)
 800116c:	dec00104 	addi	sp,sp,4
 8001170:	f800283a 	ret

08001174 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 8001174:	defffe04 	addi	sp,sp,-8
 8001178:	dfc00115 	stw	ra,4(sp)
 800117c:	df000015 	stw	fp,0(sp)
 8001180:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 8001184:	00fe9414 	movui	r3,64080
 8001188:	00840034 	movhi	r2,4096
 800118c:	10800104 	addi	r2,r2,4
 8001190:	10c00035 	stwio	r3,0(r2)
	usleep(100000);
 8001194:	010000b4 	movhi	r4,2
 8001198:	2121a804 	addi	r4,r4,-31072
 800119c:	800f3900 	call	800f390 <usleep>
	printf("[USB INIT]:reset finished!\n");
 80011a0:	01020074 	movhi	r4,2049
 80011a4:	21068604 	addi	r4,r4,6680
 80011a8:	80023780 	call	8002378 <puts>

	usleep(500000);
 80011ac:	01000234 	movhi	r4,8
 80011b0:	21284804 	addi	r4,r4,-24288
 80011b4:	800f3900 	call	800f390 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 80011b8:	01020074 	movhi	r4,2049
 80011bc:	21068d04 	addi	r4,r4,6708
 80011c0:	80023780 	call	8002378 <puts>
	IORD(CY7C67200_BASE,HPI_MAILBOX);
 80011c4:	00840034 	movhi	r2,4096
 80011c8:	10800104 	addi	r2,r2,4
 80011cc:	10800037 	ldwio	r2,0(r2)
	IORD(CY7C67200_BASE,HPI_STATUS);
 80011d0:	00840034 	movhi	r2,4096
 80011d4:	10800304 	addi	r2,r2,12
 80011d8:	10800037 	ldwio	r2,0(r2)

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 80011dc:	01005104 	movi	r4,324
 80011e0:	80011380 	call	8001138 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 80011e4:	01005104 	movi	r4,324
 80011e8:	000b883a 	mov	r5,zero
 80011ec:	80010f00 	call	80010f0 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 80011f0:	01005204 	movi	r4,328
 80011f4:	80011380 	call	8001138 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 80011f8:	01005204 	movi	r4,328
 80011fc:	000b883a 	mov	r5,zero
 8001200:	80010f00 	call	80010f0 <UsbWrite>

	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 8001204:	01302414 	movui	r4,49296
 8001208:	017fffd4 	movui	r5,65535
 800120c:	80010f00 	call	80010f0 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 8001210:	01302c14 	movui	r4,49328
 8001214:	017fffd4 	movui	r5,65535
 8001218:	80010f00 	call	80010f0 <UsbWrite>
}
 800121c:	e037883a 	mov	sp,fp
 8001220:	dfc00117 	ldw	ra,4(sp)
 8001224:	df000017 	ldw	fp,0(sp)
 8001228:	dec00204 	addi	sp,sp,8
 800122c:	f800283a 	ret

08001230 <UsbSetAddress>:


void UsbSetAddress()
{
 8001230:	defffe04 	addi	sp,sp,-8
 8001234:	dfc00115 	stw	ra,4(sp)
 8001238:	df000015 	stw	fp,0(sp)
 800123c:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001240:	00c14004 	movi	r3,1280
 8001244:	00840034 	movhi	r2,4096
 8001248:	10800204 	addi	r2,r2,8
 800124c:	10c00035 	stwio	r3,0(r2)
	// TD #1: 6 writes
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001250:	00c14304 	movi	r3,1292
 8001254:	00840034 	movhi	r2,4096
 8001258:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 800125c:	00c00204 	movi	r3,8
 8001260:	00840034 	movhi	r2,4096
 8001264:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x00D0);
 8001268:	00c03404 	movi	r3,208
 800126c:	00840034 	movhi	r2,4096
 8001270:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001274:	00c00044 	movi	r3,1
 8001278:	00840034 	movhi	r2,4096
 800127c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001280:	00c004c4 	movi	r3,19
 8001284:	00840034 	movhi	r2,4096
 8001288:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 800128c:	00c14504 	movi	r3,1300
 8001290:	00840034 	movhi	r2,4096
 8001294:	10c00035 	stwio	r3,0(r2)
	// TASK: Complete with 4 more IOWR functions

	// TD #2: 4 writes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0500);
 8001298:	00c14004 	movi	r3,1280
 800129c:	00840034 	movhi	r2,4096
 80012a0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0002);
 80012a4:	00c00084 	movi	r3,2
 80012a8:	00840034 	movhi	r2,4096
 80012ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 80012b0:	0007883a 	mov	r3,zero
 80012b4:	00840034 	movhi	r2,4096
 80012b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 80012bc:	0007883a 	mov	r3,zero
 80012c0:	00840034 	movhi	r2,4096
 80012c4:	10c00035 	stwio	r3,0(r2)
	// TASK: Complete with 4 IOWR functions
	
	// TD #3: 6 writes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 80012c8:	0007883a 	mov	r3,zero
 80012cc:	00840034 	movhi	r2,4096
 80012d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 80012d4:	0007883a 	mov	r3,zero
 80012d8:	00840034 	movhi	r2,4096
 80012dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0090);
 80012e0:	00c02404 	movi	r3,144
 80012e4:	00840034 	movhi	r2,4096
 80012e8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
 80012ec:	00c01044 	movi	r3,65
 80012f0:	00840034 	movhi	r2,4096
 80012f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80012f8:	00c004c4 	movi	r3,19
 80012fc:	00840034 	movhi	r2,4096
 8001300:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001304:	0007883a 	mov	r3,zero
 8001308:	00840034 	movhi	r2,4096
 800130c:	10c00035 	stwio	r3,0(r2)
	// TASK: Complete with 6 IOWR functions

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001310:	01006c04 	movi	r4,432
 8001314:	01414004 	movi	r5,1280
 8001318:	80010f00 	call	80010f0 <UsbWrite>
}
 800131c:	e037883a 	mov	sp,fp
 8001320:	dfc00117 	ldw	ra,4(sp)
 8001324:	df000017 	ldw	fp,0(sp)
 8001328:	dec00204 	addi	sp,sp,8
 800132c:	f800283a 	ret

08001330 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 8001330:	defffe04 	addi	sp,sp,-8
 8001334:	dfc00115 	stw	ra,4(sp)
 8001338:	df000015 	stw	fp,0(sp)
 800133c:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001340:	00c14004 	movi	r3,1280
 8001344:	00840034 	movhi	r2,4096
 8001348:	10800204 	addi	r2,r2,8
 800134c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001350:	00c14304 	movi	r3,1292
 8001354:	00840034 	movhi	r2,4096
 8001358:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 800135c:	00c00204 	movi	r3,8
 8001360:	00840034 	movhi	r2,4096
 8001364:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 8001368:	00c0b404 	movi	r3,720
 800136c:	00840034 	movhi	r2,4096
 8001370:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001374:	00c00044 	movi	r3,1
 8001378:	00840034 	movhi	r2,4096
 800137c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001380:	00c004c4 	movi	r3,19
 8001384:	00840034 	movhi	r2,4096
 8001388:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 800138c:	00c14504 	movi	r3,1300
 8001390:	00840034 	movhi	r2,4096
 8001394:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 8001398:	00c1a004 	movi	r3,1664
 800139c:	00840034 	movhi	r2,4096
 80013a0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0100); //device 0x01
 80013a4:	00c04004 	movi	r3,256
 80013a8:	00840034 	movhi	r2,4096
 80013ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 80013b0:	0007883a 	mov	r3,zero
 80013b4:	00840034 	movhi	r2,4096
 80013b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);
 80013bc:	00c00204 	movi	r3,8
 80013c0:	00840034 	movhi	r2,4096
 80013c4:	10c00035 	stwio	r3,0(r2)

	//data phase IN
	IOWR(CY7C67200_BASE,HPI_DATA,0x052C); //
 80013c8:	00c14b04 	movi	r3,1324
 80013cc:	00840034 	movhi	r2,4096
 80013d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//
 80013d4:	00c00204 	movi	r3,8
 80013d8:	00840034 	movhi	r2,4096
 80013dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//
 80013e0:	00c0a404 	movi	r3,656
 80013e4:	00840034 	movhi	r2,4096
 80013e8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
 80013ec:	00c01044 	movi	r3,65
 80013f0:	00840034 	movhi	r2,4096
 80013f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80013f8:	00c004c4 	movi	r3,19
 80013fc:	00840034 	movhi	r2,4096
 8001400:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);
 8001404:	00c14804 	movi	r3,1312
 8001408:	00840034 	movhi	r2,4096
 800140c:	10c00035 	stwio	r3,0(r2)

	//    //status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
 8001410:	0007883a 	mov	r3,zero
 8001414:	00840034 	movhi	r2,4096
 8001418:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
 800141c:	0007883a 	mov	r3,zero
 8001420:	00840034 	movhi	r2,4096
 8001424:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//device address
 8001428:	00c08404 	movi	r3,528
 800142c:	00840034 	movhi	r2,4096
 8001430:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
 8001434:	00c01044 	movi	r3,65
 8001438:	00840034 	movhi	r2,4096
 800143c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001440:	00c004c4 	movi	r3,19
 8001444:	00840034 	movhi	r2,4096
 8001448:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 800144c:	0007883a 	mov	r3,zero
 8001450:	00840034 	movhi	r2,4096
 8001454:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001458:	01006c04 	movi	r4,432
 800145c:	01414004 	movi	r5,1280
 8001460:	80010f00 	call	80010f0 <UsbWrite>
}
 8001464:	e037883a 	mov	sp,fp
 8001468:	dfc00117 	ldw	ra,4(sp)
 800146c:	df000017 	ldw	fp,0(sp)
 8001470:	dec00204 	addi	sp,sp,8
 8001474:	f800283a 	ret

08001478 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 8001478:	defffe04 	addi	sp,sp,-8
 800147c:	dfc00115 	stw	ra,4(sp)
 8001480:	df000015 	stw	fp,0(sp)
 8001484:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001488:	00c14004 	movi	r3,1280
 800148c:	00840034 	movhi	r2,4096
 8001490:	10800204 	addi	r2,r2,8
 8001494:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001498:	00c14304 	movi	r3,1292
 800149c:	00840034 	movhi	r2,4096
 80014a0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 80014a4:	00c00204 	movi	r3,8
 80014a8:	00840034 	movhi	r2,4096
 80014ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 80014b0:	00c0b404 	movi	r3,720
 80014b4:	00840034 	movhi	r2,4096
 80014b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 80014bc:	00c00044 	movi	r3,1
 80014c0:	00840034 	movhi	r2,4096
 80014c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80014c8:	00c004c4 	movi	r3,19
 80014cc:	00840034 	movhi	r2,4096
 80014d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 80014d4:	00c14504 	movi	r3,1300
 80014d8:	00840034 	movhi	r2,4096
 80014dc:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 80014e0:	00c1a004 	movi	r3,1664
 80014e4:	00840034 	movhi	r2,4096
 80014e8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0100);//e //device 0x01
 80014ec:	00c04004 	movi	r3,256
 80014f0:	00840034 	movhi	r2,4096
 80014f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 80014f8:	0007883a 	mov	r3,zero
 80014fc:	00840034 	movhi	r2,4096
 8001500:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0012);//2
 8001504:	00c00484 	movi	r3,18
 8001508:	00840034 	movhi	r2,4096
 800150c:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
 8001510:	00c15104 	movi	r3,1348
 8001514:	00840034 	movhi	r2,4096
 8001518:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 800151c:	00c00204 	movi	r3,8
 8001520:	00840034 	movhi	r2,4096
 8001524:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001528:	00c0a404 	movi	r3,656
 800152c:	00840034 	movhi	r2,4096
 8001530:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001534:	00c01044 	movi	r3,65
 8001538:	00840034 	movhi	r2,4096
 800153c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001540:	00c004c4 	movi	r3,19
 8001544:	00840034 	movhi	r2,4096
 8001548:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 800154c:	00c14804 	movi	r3,1312
 8001550:	00840034 	movhi	r2,4096
 8001554:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
 8001558:	00c15304 	movi	r3,1356
 800155c:	00840034 	movhi	r2,4096
 8001560:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001564:	00c00204 	movi	r3,8
 8001568:	00840034 	movhi	r2,4096
 800156c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001570:	00c0a404 	movi	r3,656
 8001574:	00840034 	movhi	r2,4096
 8001578:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6
 800157c:	00c00044 	movi	r3,1
 8001580:	00840034 	movhi	r2,4096
 8001584:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001588:	00c004c4 	movi	r3,19
 800158c:	00840034 	movhi	r2,4096
 8001590:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 8001594:	00c14b04 	movi	r3,1324
 8001598:	00840034 	movhi	r2,4096
 800159c:	10c00035 	stwio	r3,0(r2)

	//data phase IN-3
	IOWR(CY7C67200_BASE,HPI_DATA,0x0554); //c
 80015a0:	00c15504 	movi	r3,1364
 80015a4:	00840034 	movhi	r2,4096
 80015a8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//e
 80015ac:	00c00084 	movi	r3,2
 80015b0:	00840034 	movhi	r2,4096
 80015b4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
 80015b8:	00c0a404 	movi	r3,656
 80015bc:	00840034 	movhi	r2,4096
 80015c0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 80015c4:	00c01044 	movi	r3,65
 80015c8:	00840034 	movhi	r2,4096
 80015cc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 80015d0:	00c004c4 	movi	r3,19
 80015d4:	00840034 	movhi	r2,4096
 80015d8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
 80015dc:	00c14e04 	movi	r3,1336
 80015e0:	00840034 	movhi	r2,4096
 80015e4:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //538
 80015e8:	0007883a 	mov	r3,zero
 80015ec:	00840034 	movhi	r2,4096
 80015f0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
 80015f4:	0007883a 	mov	r3,zero
 80015f8:	00840034 	movhi	r2,4096
 80015fc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//c
 8001600:	00c08404 	movi	r3,528
 8001604:	00840034 	movhi	r2,4096
 8001608:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//e
 800160c:	00c01044 	movi	r3,65
 8001610:	00840034 	movhi	r2,4096
 8001614:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
 8001618:	00c004c4 	movi	r3,19
 800161c:	00840034 	movhi	r2,4096
 8001620:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
 8001624:	0007883a 	mov	r3,zero
 8001628:	00840034 	movhi	r2,4096
 800162c:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001630:	01006c04 	movi	r4,432
 8001634:	01414004 	movi	r5,1280
 8001638:	80010f00 	call	80010f0 <UsbWrite>
}
 800163c:	e037883a 	mov	sp,fp
 8001640:	dfc00117 	ldw	ra,4(sp)
 8001644:	df000017 	ldw	fp,0(sp)
 8001648:	dec00204 	addi	sp,sp,8
 800164c:	f800283a 	ret

08001650 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 8001650:	defffe04 	addi	sp,sp,-8
 8001654:	dfc00115 	stw	ra,4(sp)
 8001658:	df000015 	stw	fp,0(sp)
 800165c:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001660:	00c14004 	movi	r3,1280
 8001664:	00840034 	movhi	r2,4096
 8001668:	10800204 	addi	r2,r2,8
 800166c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001670:	00c14304 	movi	r3,1292
 8001674:	00840034 	movhi	r2,4096
 8001678:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 800167c:	00c00204 	movi	r3,8
 8001680:	00840034 	movhi	r2,4096
 8001684:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 8001688:	00c0b404 	movi	r3,720
 800168c:	00840034 	movhi	r2,4096
 8001690:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001694:	00c00044 	movi	r3,1
 8001698:	00840034 	movhi	r2,4096
 800169c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80016a0:	00c004c4 	movi	r3,19
 80016a4:	00840034 	movhi	r2,4096
 80016a8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 80016ac:	00c14504 	movi	r3,1300
 80016b0:	00840034 	movhi	r2,4096
 80016b4:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 80016b8:	00c1a004 	movi	r3,1664
 80016bc:	00840034 	movhi	r2,4096
 80016c0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 0x02
 80016c4:	00c08004 	movi	r3,512
 80016c8:	00840034 	movhi	r2,4096
 80016cc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 80016d0:	0007883a 	mov	r3,zero
 80016d4:	00840034 	movhi	r2,4096
 80016d8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0009);//2
 80016dc:	00c00244 	movi	r3,9
 80016e0:	00840034 	movhi	r2,4096
 80016e4:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
 80016e8:	00c15104 	movi	r3,1348
 80016ec:	00840034 	movhi	r2,4096
 80016f0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 80016f4:	00c00204 	movi	r3,8
 80016f8:	00840034 	movhi	r2,4096
 80016fc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001700:	00c0a404 	movi	r3,656
 8001704:	00840034 	movhi	r2,4096
 8001708:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 800170c:	00c01044 	movi	r3,65
 8001710:	00840034 	movhi	r2,4096
 8001714:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001718:	00c004c4 	movi	r3,19
 800171c:	00840034 	movhi	r2,4096
 8001720:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001724:	00c14804 	movi	r3,1312
 8001728:	00840034 	movhi	r2,4096
 800172c:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
 8001730:	00c15304 	movi	r3,1356
 8001734:	00840034 	movhi	r2,4096
 8001738:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//2
 800173c:	00c00044 	movi	r3,1
 8001740:	00840034 	movhi	r2,4096
 8001744:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001748:	00c0a404 	movi	r3,656
 800174c:	00840034 	movhi	r2,4096
 8001750:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 8001754:	00c00044 	movi	r3,1
 8001758:	00840034 	movhi	r2,4096
 800175c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001760:	00c004c4 	movi	r3,19
 8001764:	00840034 	movhi	r2,4096
 8001768:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 800176c:	00c14b04 	movi	r3,1324
 8001770:	00840034 	movhi	r2,4096
 8001774:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
 8001778:	0007883a 	mov	r3,zero
 800177c:	00840034 	movhi	r2,4096
 8001780:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
 8001784:	0007883a 	mov	r3,zero
 8001788:	00840034 	movhi	r2,4096
 800178c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
 8001790:	00c08404 	movi	r3,528
 8001794:	00840034 	movhi	r2,4096
 8001798:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 800179c:	00c01044 	movi	r3,65
 80017a0:	00840034 	movhi	r2,4096
 80017a4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 80017a8:	00c004c4 	movi	r3,19
 80017ac:	00840034 	movhi	r2,4096
 80017b0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
 80017b4:	0007883a 	mov	r3,zero
 80017b8:	00840034 	movhi	r2,4096
 80017bc:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80017c0:	01006c04 	movi	r4,432
 80017c4:	01414004 	movi	r5,1280
 80017c8:	80010f00 	call	80010f0 <UsbWrite>
}
 80017cc:	e037883a 	mov	sp,fp
 80017d0:	dfc00117 	ldw	ra,4(sp)
 80017d4:	df000017 	ldw	fp,0(sp)
 80017d8:	dec00204 	addi	sp,sp,8
 80017dc:	f800283a 	ret

080017e0 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 80017e0:	defffe04 	addi	sp,sp,-8
 80017e4:	dfc00115 	stw	ra,4(sp)
 80017e8:	df000015 	stw	fp,0(sp)
 80017ec:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 80017f0:	00c14004 	movi	r3,1280
 80017f4:	00840034 	movhi	r2,4096
 80017f8:	10800204 	addi	r2,r2,8
 80017fc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001800:	00c14304 	movi	r3,1292
 8001804:	00840034 	movhi	r2,4096
 8001808:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 800180c:	00c00204 	movi	r3,8
 8001810:	00840034 	movhi	r2,4096
 8001814:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 8001818:	00c0b404 	movi	r3,720
 800181c:	00840034 	movhi	r2,4096
 8001820:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001824:	00c00044 	movi	r3,1
 8001828:	00840034 	movhi	r2,4096
 800182c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001830:	00c004c4 	movi	r3,19
 8001834:	00840034 	movhi	r2,4096
 8001838:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 800183c:	00c14504 	movi	r3,1300
 8001840:	00840034 	movhi	r2,4096
 8001844:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 8001848:	00c1a004 	movi	r3,1664
 800184c:	00840034 	movhi	r2,4096
 8001850:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 0x02
 8001854:	00c08004 	movi	r3,512
 8001858:	00840034 	movhi	r2,4096
 800185c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001860:	0007883a 	mov	r3,zero
 8001864:	00840034 	movhi	r2,4096
 8001868:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x00FF);//2
 800186c:	00c03fc4 	movi	r3,255
 8001870:	00840034 	movhi	r2,4096
 8001874:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x055c); //514
 8001878:	00c15704 	movi	r3,1372
 800187c:	00840034 	movhi	r2,4096
 8001880:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001884:	00c00204 	movi	r3,8
 8001888:	00840034 	movhi	r2,4096
 800188c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001890:	00c0a404 	movi	r3,656
 8001894:	00840034 	movhi	r2,4096
 8001898:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 800189c:	00c01044 	movi	r3,65
 80018a0:	00840034 	movhi	r2,4096
 80018a4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 80018a8:	00c004c4 	movi	r3,19
 80018ac:	00840034 	movhi	r2,4096
 80018b0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 80018b4:	00c14804 	movi	r3,1312
 80018b8:	00840034 	movhi	r2,4096
 80018bc:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x0564); //520
 80018c0:	00c15904 	movi	r3,1380
 80018c4:	00840034 	movhi	r2,4096
 80018c8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 80018cc:	00c00204 	movi	r3,8
 80018d0:	00840034 	movhi	r2,4096
 80018d4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 80018d8:	00c0a404 	movi	r3,656
 80018dc:	00840034 	movhi	r2,4096
 80018e0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 80018e4:	00c00044 	movi	r3,1
 80018e8:	00840034 	movhi	r2,4096
 80018ec:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 80018f0:	00c004c4 	movi	r3,19
 80018f4:	00840034 	movhi	r2,4096
 80018f8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 80018fc:	00c14b04 	movi	r3,1324
 8001900:	00840034 	movhi	r2,4096
 8001904:	10c00035 	stwio	r3,0(r2)

	//data phase IN-3
	IOWR(CY7C67200_BASE,HPI_DATA,0x056c); //52c
 8001908:	00c15b04 	movi	r3,1388
 800190c:	00840034 	movhi	r2,4096
 8001910:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
 8001914:	00c00204 	movi	r3,8
 8001918:	00840034 	movhi	r2,4096
 800191c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
 8001920:	00c0a404 	movi	r3,656
 8001924:	00840034 	movhi	r2,4096
 8001928:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 800192c:	00c01044 	movi	r3,65
 8001930:	00840034 	movhi	r2,4096
 8001934:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001938:	00c004c4 	movi	r3,19
 800193c:	00840034 	movhi	r2,4096
 8001940:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
 8001944:	00c14e04 	movi	r3,1336
 8001948:	00840034 	movhi	r2,4096
 800194c:	10c00035 	stwio	r3,0(r2)

	//data phase IN-4
	IOWR(CY7C67200_BASE,HPI_DATA,0x0574); //538
 8001950:	00c15d04 	movi	r3,1396
 8001954:	00840034 	movhi	r2,4096
 8001958:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
 800195c:	00c00204 	movi	r3,8
 8001960:	00840034 	movhi	r2,4096
 8001964:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
 8001968:	00c0a404 	movi	r3,656
 800196c:	00840034 	movhi	r2,4096
 8001970:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
 8001974:	00c00044 	movi	r3,1
 8001978:	00840034 	movhi	r2,4096
 800197c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
 8001980:	00c004c4 	movi	r3,19
 8001984:	00840034 	movhi	r2,4096
 8001988:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
 800198c:	00c15104 	movi	r3,1348
 8001990:	00840034 	movhi	r2,4096
 8001994:	10c00035 	stwio	r3,0(r2)

	//data phase IN-5
	IOWR(CY7C67200_BASE,HPI_DATA,0x057c); //544
 8001998:	00c15f04 	movi	r3,1404
 800199c:	00840034 	movhi	r2,4096
 80019a0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//6
 80019a4:	00c00084 	movi	r3,2
 80019a8:	00840034 	movhi	r2,4096
 80019ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 80019b0:	00c0a404 	movi	r3,656
 80019b4:	00840034 	movhi	r2,4096
 80019b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
 80019bc:	00c01044 	movi	r3,65
 80019c0:	00840034 	movhi	r2,4096
 80019c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 80019c8:	00c004c4 	movi	r3,19
 80019cc:	00840034 	movhi	r2,4096
 80019d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
 80019d4:	00c15404 	movi	r3,1360
 80019d8:	00840034 	movhi	r2,4096
 80019dc:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //550
 80019e0:	0007883a 	mov	r3,zero
 80019e4:	00840034 	movhi	r2,4096
 80019e8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
 80019ec:	0007883a 	mov	r3,zero
 80019f0:	00840034 	movhi	r2,4096
 80019f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//4
 80019f8:	00c08404 	movi	r3,528
 80019fc:	00840034 	movhi	r2,4096
 8001a00:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6
 8001a04:	00c01044 	movi	r3,65
 8001a08:	00840034 	movhi	r2,4096
 8001a0c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001a10:	00c004c4 	movi	r3,19
 8001a14:	00840034 	movhi	r2,4096
 8001a18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
 8001a1c:	0007883a 	mov	r3,zero
 8001a20:	00840034 	movhi	r2,4096
 8001a24:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001a28:	01006c04 	movi	r4,432
 8001a2c:	01414004 	movi	r5,1280
 8001a30:	80010f00 	call	80010f0 <UsbWrite>
}
 8001a34:	e037883a 	mov	sp,fp
 8001a38:	dfc00117 	ldw	ra,4(sp)
 8001a3c:	df000017 	ldw	fp,0(sp)
 8001a40:	dec00204 	addi	sp,sp,8
 8001a44:	f800283a 	ret

08001a48 <UsbSetConfig>:

void UsbSetConfig()
{
 8001a48:	defffe04 	addi	sp,sp,-8
 8001a4c:	dfc00115 	stw	ra,4(sp)
 8001a50:	df000015 	stw	fp,0(sp)
 8001a54:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001a58:	00c14004 	movi	r3,1280
 8001a5c:	00840034 	movhi	r2,4096
 8001a60:	10800204 	addi	r2,r2,8
 8001a64:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001a68:	00c14304 	movi	r3,1292
 8001a6c:	00840034 	movhi	r2,4096
 8001a70:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001a74:	00c00204 	movi	r3,8
 8001a78:	00840034 	movhi	r2,4096
 8001a7c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
 8001a80:	00c0b404 	movi	r3,720
 8001a84:	00840034 	movhi	r2,4096
 8001a88:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001a8c:	00c00044 	movi	r3,1
 8001a90:	00840034 	movhi	r2,4096
 8001a94:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001a98:	00c004c4 	movi	r3,19
 8001a9c:	00840034 	movhi	r2,4096
 8001aa0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001aa4:	00c14504 	movi	r3,1300
 8001aa8:	00840034 	movhi	r2,4096
 8001aac:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0900);
 8001ab0:	00c24004 	movi	r3,2304
 8001ab4:	00840034 	movhi	r2,4096
 8001ab8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//device address
 8001abc:	00c00044 	movi	r3,1
 8001ac0:	00840034 	movhi	r2,4096
 8001ac4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001ac8:	0007883a 	mov	r3,zero
 8001acc:	00840034 	movhi	r2,4096
 8001ad0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001ad4:	0007883a 	mov	r3,zero
 8001ad8:	00840034 	movhi	r2,4096
 8001adc:	10c00035 	stwio	r3,0(r2)
	//in packet
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
 8001ae0:	0007883a 	mov	r3,zero
 8001ae4:	00840034 	movhi	r2,4096
 8001ae8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
 8001aec:	0007883a 	mov	r3,zero
 8001af0:	00840034 	movhi	r2,4096
 8001af4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
 8001af8:	00c0a404 	movi	r3,656
 8001afc:	00840034 	movhi	r2,4096
 8001b00:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
 8001b04:	00c01044 	movi	r3,65
 8001b08:	00840034 	movhi	r2,4096
 8001b0c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001b10:	00c004c4 	movi	r3,19
 8001b14:	00840034 	movhi	r2,4096
 8001b18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001b1c:	0007883a 	mov	r3,zero
 8001b20:	00840034 	movhi	r2,4096
 8001b24:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001b28:	01006c04 	movi	r4,432
 8001b2c:	01414004 	movi	r5,1280
 8001b30:	80010f00 	call	80010f0 <UsbWrite>

}
 8001b34:	e037883a 	mov	sp,fp
 8001b38:	dfc00117 	ldw	ra,4(sp)
 8001b3c:	df000017 	ldw	fp,0(sp)
 8001b40:	dec00204 	addi	sp,sp,8
 8001b44:	f800283a 	ret

08001b48 <UsbClassRequest>:

void UsbClassRequest()
{
 8001b48:	defffe04 	addi	sp,sp,-8
 8001b4c:	dfc00115 	stw	ra,4(sp)
 8001b50:	df000015 	stw	fp,0(sp)
 8001b54:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001b58:	00c14004 	movi	r3,1280
 8001b5c:	00840034 	movhi	r2,4096
 8001b60:	10800204 	addi	r2,r2,8
 8001b64:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001b68:	00c14304 	movi	r3,1292
 8001b6c:	00840034 	movhi	r2,4096
 8001b70:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001b74:	00c00204 	movi	r3,8
 8001b78:	00840034 	movhi	r2,4096
 8001b7c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
 8001b80:	00c0b404 	movi	r3,720
 8001b84:	00840034 	movhi	r2,4096
 8001b88:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001b8c:	00c00044 	movi	r3,1
 8001b90:	00840034 	movhi	r2,4096
 8001b94:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001b98:	00c004c4 	movi	r3,19
 8001b9c:	00840034 	movhi	r2,4096
 8001ba0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001ba4:	00c14504 	movi	r3,1300
 8001ba8:	00840034 	movhi	r2,4096
 8001bac:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0A21);
 8001bb0:	00c28844 	movi	r3,2593
 8001bb4:	00840034 	movhi	r2,4096
 8001bb8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//device address
 8001bbc:	0007883a 	mov	r3,zero
 8001bc0:	00840034 	movhi	r2,4096
 8001bc4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001bc8:	0007883a 	mov	r3,zero
 8001bcc:	00840034 	movhi	r2,4096
 8001bd0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001bd4:	0007883a 	mov	r3,zero
 8001bd8:	00840034 	movhi	r2,4096
 8001bdc:	10c00035 	stwio	r3,0(r2)
	//in packet
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
 8001be0:	0007883a 	mov	r3,zero
 8001be4:	00840034 	movhi	r2,4096
 8001be8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number /data length
 8001bec:	0007883a 	mov	r3,zero
 8001bf0:	00840034 	movhi	r2,4096
 8001bf4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
 8001bf8:	00c0a404 	movi	r3,656
 8001bfc:	00840034 	movhi	r2,4096
 8001c00:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
 8001c04:	00c01044 	movi	r3,65
 8001c08:	00840034 	movhi	r2,4096
 8001c0c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001c10:	00c004c4 	movi	r3,19
 8001c14:	00840034 	movhi	r2,4096
 8001c18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001c1c:	0007883a 	mov	r3,zero
 8001c20:	00840034 	movhi	r2,4096
 8001c24:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001c28:	01006c04 	movi	r4,432
 8001c2c:	01414004 	movi	r5,1280
 8001c30:	80010f00 	call	80010f0 <UsbWrite>
}
 8001c34:	e037883a 	mov	sp,fp
 8001c38:	dfc00117 	ldw	ra,4(sp)
 8001c3c:	df000017 	ldw	fp,0(sp)
 8001c40:	dec00204 	addi	sp,sp,8
 8001c44:	f800283a 	ret

08001c48 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 8001c48:	defffe04 	addi	sp,sp,-8
 8001c4c:	dfc00115 	stw	ra,4(sp)
 8001c50:	df000015 	stw	fp,0(sp)
 8001c54:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001c58:	00c14004 	movi	r3,1280
 8001c5c:	00840034 	movhi	r2,4096
 8001c60:	10800204 	addi	r2,r2,8
 8001c64:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001c68:	00c14304 	movi	r3,1292
 8001c6c:	00840034 	movhi	r2,4096
 8001c70:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001c74:	00c00204 	movi	r3,8
 8001c78:	00840034 	movhi	r2,4096
 8001c7c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
 8001c80:	00c0b404 	movi	r3,720
 8001c84:	00840034 	movhi	r2,4096
 8001c88:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001c8c:	00c00044 	movi	r3,1
 8001c90:	00840034 	movhi	r2,4096
 8001c94:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001c98:	00c004c4 	movi	r3,19
 8001c9c:	00840034 	movhi	r2,4096
 8001ca0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001ca4:	00c14504 	movi	r3,1300
 8001ca8:	00840034 	movhi	r2,4096
 8001cac:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
 8001cb0:	00c1a044 	movi	r3,1665
 8001cb4:	00840034 	movhi	r2,4096
 8001cb8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x2100);//e //HID 0x21
 8001cbc:	00c84004 	movi	r3,8448
 8001cc0:	00840034 	movhi	r2,4096
 8001cc4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001cc8:	0007883a 	mov	r3,zero
 8001ccc:	00840034 	movhi	r2,4096
 8001cd0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
 8001cd4:	00c01ec4 	movi	r3,123
 8001cd8:	00840034 	movhi	r2,4096
 8001cdc:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
 8001ce0:	00c15104 	movi	r3,1348
 8001ce4:	00840034 	movhi	r2,4096
 8001ce8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001cec:	00c00204 	movi	r3,8
 8001cf0:	00840034 	movhi	r2,4096
 8001cf4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001cf8:	00c0a404 	movi	r3,656
 8001cfc:	00840034 	movhi	r2,4096
 8001d00:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001d04:	00c01044 	movi	r3,65
 8001d08:	00840034 	movhi	r2,4096
 8001d0c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001d10:	00c004c4 	movi	r3,19
 8001d14:	00840034 	movhi	r2,4096
 8001d18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001d1c:	00c14804 	movi	r3,1312
 8001d20:	00840034 	movhi	r2,4096
 8001d24:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
 8001d28:	0007883a 	mov	r3,zero
 8001d2c:	00840034 	movhi	r2,4096
 8001d30:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
 8001d34:	0007883a 	mov	r3,zero
 8001d38:	00840034 	movhi	r2,4096
 8001d3c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
 8001d40:	00c08404 	movi	r3,528
 8001d44:	00840034 	movhi	r2,4096
 8001d48:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001d4c:	00c01044 	movi	r3,65
 8001d50:	00840034 	movhi	r2,4096
 8001d54:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001d58:	00c004c4 	movi	r3,19
 8001d5c:	00840034 	movhi	r2,4096
 8001d60:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
 8001d64:	0007883a 	mov	r3,zero
 8001d68:	00840034 	movhi	r2,4096
 8001d6c:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001d70:	01006c04 	movi	r4,432
 8001d74:	01414004 	movi	r5,1280
 8001d78:	80010f00 	call	80010f0 <UsbWrite>

}
 8001d7c:	e037883a 	mov	sp,fp
 8001d80:	dfc00117 	ldw	ra,4(sp)
 8001d84:	df000017 	ldw	fp,0(sp)
 8001d88:	dec00204 	addi	sp,sp,8
 8001d8c:	f800283a 	ret

08001d90 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 8001d90:	defffe04 	addi	sp,sp,-8
 8001d94:	dfc00115 	stw	ra,4(sp)
 8001d98:	df000015 	stw	fp,0(sp)
 8001d9c:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001da0:	00c14004 	movi	r3,1280
 8001da4:	00840034 	movhi	r2,4096
 8001da8:	10800204 	addi	r2,r2,8
 8001dac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001db0:	00c14304 	movi	r3,1292
 8001db4:	00840034 	movhi	r2,4096
 8001db8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001dbc:	00c00204 	movi	r3,8
 8001dc0:	00840034 	movhi	r2,4096
 8001dc4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 8001dc8:	00c0b404 	movi	r3,720
 8001dcc:	00840034 	movhi	r2,4096
 8001dd0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001dd4:	00c00044 	movi	r3,1
 8001dd8:	00840034 	movhi	r2,4096
 8001ddc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001de0:	00c004c4 	movi	r3,19
 8001de4:	00840034 	movhi	r2,4096
 8001de8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001dec:	00c14504 	movi	r3,1300
 8001df0:	00840034 	movhi	r2,4096
 8001df4:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
 8001df8:	00c1a044 	movi	r3,1665
 8001dfc:	00840034 	movhi	r2,4096
 8001e00:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x2200);//e //report 0x22
 8001e04:	00c88004 	movi	r3,8704
 8001e08:	00840034 	movhi	r2,4096
 8001e0c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001e10:	0007883a 	mov	r3,zero
 8001e14:	00840034 	movhi	r2,4096
 8001e18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
 8001e1c:	00c01ec4 	movi	r3,123
 8001e20:	00840034 	movhi	r2,4096
 8001e24:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0580); //514
 8001e28:	00c16004 	movi	r3,1408
 8001e2c:	00840034 	movhi	r2,4096
 8001e30:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001e34:	00c00204 	movi	r3,8
 8001e38:	00840034 	movhi	r2,4096
 8001e3c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001e40:	00c0a404 	movi	r3,656
 8001e44:	00840034 	movhi	r2,4096
 8001e48:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001e4c:	00c01044 	movi	r3,65
 8001e50:	00840034 	movhi	r2,4096
 8001e54:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001e58:	00c004c4 	movi	r3,19
 8001e5c:	00840034 	movhi	r2,4096
 8001e60:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001e64:	00c14804 	movi	r3,1312
 8001e68:	00840034 	movhi	r2,4096
 8001e6c:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x0588); //520
 8001e70:	00c16204 	movi	r3,1416
 8001e74:	00840034 	movhi	r2,4096
 8001e78:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001e7c:	00c00204 	movi	r3,8
 8001e80:	00840034 	movhi	r2,4096
 8001e84:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001e88:	00c0a404 	movi	r3,656
 8001e8c:	00840034 	movhi	r2,4096
 8001e90:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 8001e94:	00c00044 	movi	r3,1
 8001e98:	00840034 	movhi	r2,4096
 8001e9c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001ea0:	00c004c4 	movi	r3,19
 8001ea4:	00840034 	movhi	r2,4096
 8001ea8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 8001eac:	00c14b04 	movi	r3,1324
 8001eb0:	00840034 	movhi	r2,4096
 8001eb4:	10c00035 	stwio	r3,0(r2)

	//data phase IN-3
	IOWR(CY7C67200_BASE,HPI_DATA,0x0590); //52c
 8001eb8:	00c16404 	movi	r3,1424
 8001ebc:	00840034 	movhi	r2,4096
 8001ec0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
 8001ec4:	00c00204 	movi	r3,8
 8001ec8:	00840034 	movhi	r2,4096
 8001ecc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
 8001ed0:	00c0a404 	movi	r3,656
 8001ed4:	00840034 	movhi	r2,4096
 8001ed8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001edc:	00c01044 	movi	r3,65
 8001ee0:	00840034 	movhi	r2,4096
 8001ee4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001ee8:	00c004c4 	movi	r3,19
 8001eec:	00840034 	movhi	r2,4096
 8001ef0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
 8001ef4:	00c14e04 	movi	r3,1336
 8001ef8:	00840034 	movhi	r2,4096
 8001efc:	10c00035 	stwio	r3,0(r2)

	//data phase IN-4
	IOWR(CY7C67200_BASE,HPI_DATA,0x0598); //538
 8001f00:	00c16604 	movi	r3,1432
 8001f04:	00840034 	movhi	r2,4096
 8001f08:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
 8001f0c:	00c00204 	movi	r3,8
 8001f10:	00840034 	movhi	r2,4096
 8001f14:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
 8001f18:	00c0a404 	movi	r3,656
 8001f1c:	00840034 	movhi	r2,4096
 8001f20:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
 8001f24:	00c00044 	movi	r3,1
 8001f28:	00840034 	movhi	r2,4096
 8001f2c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
 8001f30:	00c004c4 	movi	r3,19
 8001f34:	00840034 	movhi	r2,4096
 8001f38:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
 8001f3c:	00c15104 	movi	r3,1348
 8001f40:	00840034 	movhi	r2,4096
 8001f44:	10c00035 	stwio	r3,0(r2)

	//data phase IN-5
	IOWR(CY7C67200_BASE,HPI_DATA,0x05a0); //544
 8001f48:	00c16804 	movi	r3,1440
 8001f4c:	00840034 	movhi	r2,4096
 8001f50:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001f54:	00c00204 	movi	r3,8
 8001f58:	00840034 	movhi	r2,4096
 8001f5c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001f60:	00c0a404 	movi	r3,656
 8001f64:	00840034 	movhi	r2,4096
 8001f68:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
 8001f6c:	00c01044 	movi	r3,65
 8001f70:	00840034 	movhi	r2,4096
 8001f74:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001f78:	00c004c4 	movi	r3,19
 8001f7c:	00840034 	movhi	r2,4096
 8001f80:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
 8001f84:	00c15404 	movi	r3,1360
 8001f88:	00840034 	movhi	r2,4096
 8001f8c:	10c00035 	stwio	r3,0(r2)

	//data phase IN-6
	IOWR(CY7C67200_BASE,HPI_DATA,0x05a8); //550
 8001f90:	00c16a04 	movi	r3,1448
 8001f94:	00840034 	movhi	r2,4096
 8001f98:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001f9c:	00c00204 	movi	r3,8
 8001fa0:	00840034 	movhi	r2,4096
 8001fa4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001fa8:	00c0a404 	movi	r3,656
 8001fac:	00840034 	movhi	r2,4096
 8001fb0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 8001fb4:	00c00044 	movi	r3,1
 8001fb8:	00840034 	movhi	r2,4096
 8001fbc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001fc0:	00c004c4 	movi	r3,19
 8001fc4:	00840034 	movhi	r2,4096
 8001fc8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x055c);//a
 8001fcc:	00c15704 	movi	r3,1372
 8001fd0:	00840034 	movhi	r2,4096
 8001fd4:	10c00035 	stwio	r3,0(r2)

	//data phase IN-7
	IOWR(CY7C67200_BASE,HPI_DATA,0x05b0); //c
 8001fd8:	00c16c04 	movi	r3,1456
 8001fdc:	00840034 	movhi	r2,4096
 8001fe0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
 8001fe4:	00c00204 	movi	r3,8
 8001fe8:	00840034 	movhi	r2,4096
 8001fec:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//560
 8001ff0:	00c0a404 	movi	r3,656
 8001ff4:	00840034 	movhi	r2,4096
 8001ff8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2 //data1
 8001ffc:	00c01044 	movi	r3,65
 8002000:	00840034 	movhi	r2,4096
 8002004:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8002008:	00c004c4 	movi	r3,19
 800200c:	00840034 	movhi	r2,4096
 8002010:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0568);//6
 8002014:	00c15a04 	movi	r3,1384
 8002018:	00840034 	movhi	r2,4096
 800201c:	10c00035 	stwio	r3,0(r2)

	//data phase IN-8
	IOWR(CY7C67200_BASE,HPI_DATA,0x05b8); //8
 8002020:	00c16e04 	movi	r3,1464
 8002024:	00840034 	movhi	r2,4096
 8002028:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0003);//a
 800202c:	00c000c4 	movi	r3,3
 8002030:	00840034 	movhi	r2,4096
 8002034:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
 8002038:	00c0a404 	movi	r3,656
 800203c:	00840034 	movhi	r2,4096
 8002040:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
 8002044:	00c00044 	movi	r3,1
 8002048:	00840034 	movhi	r2,4096
 800204c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//570
 8002050:	00c004c4 	movi	r3,19
 8002054:	00840034 	movhi	r2,4096
 8002058:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0574);//2
 800205c:	00c15d04 	movi	r3,1396
 8002060:	00840034 	movhi	r2,4096
 8002064:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //574
 8002068:	0007883a 	mov	r3,zero
 800206c:	00840034 	movhi	r2,4096
 8002070:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
 8002074:	0007883a 	mov	r3,zero
 8002078:	00840034 	movhi	r2,4096
 800207c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//8
 8002080:	00c08404 	movi	r3,528
 8002084:	00840034 	movhi	r2,4096
 8002088:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 800208c:	00c01044 	movi	r3,65
 8002090:	00840034 	movhi	r2,4096
 8002094:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8002098:	00c004c4 	movi	r3,19
 800209c:	00840034 	movhi	r2,4096
 80020a0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
 80020a4:	0007883a 	mov	r3,zero
 80020a8:	00840034 	movhi	r2,4096
 80020ac:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80020b0:	01006c04 	movi	r4,432
 80020b4:	01414004 	movi	r5,1280
 80020b8:	80010f00 	call	80010f0 <UsbWrite>

}
 80020bc:	e037883a 	mov	sp,fp
 80020c0:	dfc00117 	ldw	ra,4(sp)
 80020c4:	df000017 	ldw	fp,0(sp)
 80020c8:	dec00204 	addi	sp,sp,8
 80020cc:	f800283a 	ret

080020d0 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 80020d0:	defffd04 	addi	sp,sp,-12
 80020d4:	dfc00215 	stw	ra,8(sp)
 80020d8:	df000115 	stw	fp,4(sp)
 80020dc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 80020e0:	01005104 	movi	r4,324
 80020e4:	80011380 	call	8001138 <UsbRead>
 80020e8:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 80020ec:	01005104 	movi	r4,324
 80020f0:	000b883a 	mov	r5,zero
 80020f4:	80010f00 	call	80010f0 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 80020f8:	00000d06 	br	8002130 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 80020fc:	e0bfff0b 	ldhu	r2,-4(fp)
 8002100:	10000526 	beq	r2,zero,8002118 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 8002104:	e0bfff0b 	ldhu	r2,-4(fp)
 8002108:	01020074 	movhi	r4,2049
 800210c:	21069604 	addi	r4,r4,6744
 8002110:	100b883a 	mov	r5,r2
 8002114:	80022840 	call	8002284 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 8002118:	01005104 	movi	r4,324
 800211c:	80011380 	call	8001138 <UsbRead>
 8002120:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8002124:	01005104 	movi	r4,324
 8002128:	000b883a 	mov	r5,zero
 800212c:	80010f00 	call	80010f0 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8002130:	e0bfff0b 	ldhu	r2,-4(fp)
 8002134:	10840018 	cmpnei	r2,r2,4096
 8002138:	103ff01e 	bne	r2,zero,80020fc <__alt_data_end+0xf80020fc>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 800213c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8002140:	e037883a 	mov	sp,fp
 8002144:	dfc00117 	ldw	ra,4(sp)
 8002148:	df000017 	ldw	fp,0(sp)
 800214c:	dec00204 	addi	sp,sp,8
 8002150:	f800283a 	ret

08002154 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 8002154:	defffd04 	addi	sp,sp,-12
 8002158:	dfc00215 	stw	ra,8(sp)
 800215c:	df000115 	stw	fp,4(sp)
 8002160:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IORD(CY7C67200_BASE,HPI_STATUS);
 8002164:	00840034 	movhi	r2,4096
 8002168:	10800304 	addi	r2,r2,12
 800216c:	10800037 	ldwio	r2,0(r2)
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 8002170:	01005104 	movi	r4,324
 8002174:	80011380 	call	8001138 <UsbRead>
 8002178:	10bfffcc 	andi	r2,r2,65535
 800217c:	10840018 	cmpnei	r2,r2,4096
 8002180:	1000091e 	bne	r2,zero,80021a8 <UsbGetRetryCnt+0x54>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8002184:	01005104 	movi	r4,324
 8002188:	000b883a 	mov	r5,zero
 800218c:	80010f00 	call	80010f0 <UsbWrite>

		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8002190:	0001883a 	nop
 8002194:	00840034 	movhi	r2,4096
 8002198:	10800304 	addi	r2,r2,12
 800219c:	10800037 	ldwio	r2,0(r2)
 80021a0:	1080040c 	andi	r2,r2,16
 80021a4:	103ffb26 	beq	r2,zero,8002194 <__alt_data_end+0xf8002194>
		{
		}
	}
	//usleep(1000);
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 80021a8:	00c14204 	movi	r3,1288
 80021ac:	00840034 	movhi	r2,4096
 80021b0:	10800204 	addi	r2,r2,8
 80021b4:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 80021b8:	00840034 	movhi	r2,4096
 80021bc:	10800037 	ldwio	r2,0(r2)
 80021c0:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 80021c4:	e0bfff0b 	ldhu	r2,-4(fp)
}
 80021c8:	e037883a 	mov	sp,fp
 80021cc:	dfc00117 	ldw	ra,4(sp)
 80021d0:	df000017 	ldw	fp,0(sp)
 80021d4:	dec00204 	addi	sp,sp,8
 80021d8:	f800283a 	ret

080021dc <UsbPrintMem>:


void UsbPrintMem()
{
 80021dc:	defffc04 	addi	sp,sp,-16
 80021e0:	dfc00315 	stw	ra,12(sp)
 80021e4:	df000215 	stw	fp,8(sp)
 80021e8:	df000204 	addi	fp,sp,8
	int i, code;
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 80021ec:	00c14004 	movi	r3,1280
 80021f0:	00840034 	movhi	r2,4096
 80021f4:	10800204 	addi	r2,r2,8
 80021f8:	10c00035 	stwio	r3,0(r2)
	for (i = 0; i <= 200; i += 2)
 80021fc:	e03ffe15 	stw	zero,-8(fp)
 8002200:	00000d06 	br	8002238 <UsbPrintMem+0x5c>
	{
		code = IORD(CY7C67200_BASE,HPI_DATA);
 8002204:	00840034 	movhi	r2,4096
 8002208:	10800037 	ldwio	r2,0(r2)
 800220c:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 8002210:	e0bffe17 	ldw	r2,-8(fp)
 8002214:	10814004 	addi	r2,r2,1280
 8002218:	01020074 	movhi	r4,2049
 800221c:	21069e04 	addi	r4,r4,6776
 8002220:	100b883a 	mov	r5,r2
 8002224:	e1bfff17 	ldw	r6,-4(fp)
 8002228:	80022840 	call	8002284 <printf>

void UsbPrintMem()
{
	int i, code;
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 800222c:	e0bffe17 	ldw	r2,-8(fp)
 8002230:	10800084 	addi	r2,r2,2
 8002234:	e0bffe15 	stw	r2,-8(fp)
 8002238:	e0bffe17 	ldw	r2,-8(fp)
 800223c:	10803250 	cmplti	r2,r2,201
 8002240:	103ff01e 	bne	r2,zero,8002204 <__alt_data_end+0xf8002204>
	{
		code = IORD(CY7C67200_BASE,HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 8002244:	e037883a 	mov	sp,fp
 8002248:	dfc00117 	ldw	ra,4(sp)
 800224c:	df000017 	ldw	fp,0(sp)
 8002250:	dec00204 	addi	sp,sp,8
 8002254:	f800283a 	ret

08002258 <_printf_r>:
 8002258:	defffd04 	addi	sp,sp,-12
 800225c:	dfc00015 	stw	ra,0(sp)
 8002260:	d9800115 	stw	r6,4(sp)
 8002264:	d9c00215 	stw	r7,8(sp)
 8002268:	280d883a 	mov	r6,r5
 800226c:	21400217 	ldw	r5,8(r4)
 8002270:	d9c00104 	addi	r7,sp,4
 8002274:	80024180 	call	8002418 <___vfprintf_internal_r>
 8002278:	dfc00017 	ldw	ra,0(sp)
 800227c:	dec00304 	addi	sp,sp,12
 8002280:	f800283a 	ret

08002284 <printf>:
 8002284:	defffc04 	addi	sp,sp,-16
 8002288:	dfc00015 	stw	ra,0(sp)
 800228c:	d9400115 	stw	r5,4(sp)
 8002290:	d9800215 	stw	r6,8(sp)
 8002294:	d9c00315 	stw	r7,12(sp)
 8002298:	00820074 	movhi	r2,2049
 800229c:	108e1004 	addi	r2,r2,14400
 80022a0:	10800017 	ldw	r2,0(r2)
 80022a4:	200b883a 	mov	r5,r4
 80022a8:	d9800104 	addi	r6,sp,4
 80022ac:	11000217 	ldw	r4,8(r2)
 80022b0:	800456c0 	call	800456c <__vfprintf_internal>
 80022b4:	dfc00017 	ldw	ra,0(sp)
 80022b8:	dec00404 	addi	sp,sp,16
 80022bc:	f800283a 	ret

080022c0 <_puts_r>:
 80022c0:	defff604 	addi	sp,sp,-40
 80022c4:	dc400815 	stw	r17,32(sp)
 80022c8:	2023883a 	mov	r17,r4
 80022cc:	2809883a 	mov	r4,r5
 80022d0:	dc000715 	stw	r16,28(sp)
 80022d4:	dfc00915 	stw	ra,36(sp)
 80022d8:	2821883a 	mov	r16,r5
 80022dc:	800238c0 	call	800238c <strlen>
 80022e0:	00c20074 	movhi	r3,2049
 80022e4:	18ce1004 	addi	r3,r3,14400
 80022e8:	18c00017 	ldw	r3,0(r3)
 80022ec:	11000044 	addi	r4,r2,1
 80022f0:	d8800115 	stw	r2,4(sp)
 80022f4:	18c00217 	ldw	r3,8(r3)
 80022f8:	00820074 	movhi	r2,2049
 80022fc:	1086a304 	addi	r2,r2,6796
 8002300:	d8800215 	stw	r2,8(sp)
 8002304:	1940030b 	ldhu	r5,12(r3)
 8002308:	00800044 	movi	r2,1
 800230c:	d8800315 	stw	r2,12(sp)
 8002310:	00800084 	movi	r2,2
 8002314:	d8800515 	stw	r2,20(sp)
 8002318:	dc000015 	stw	r16,0(sp)
 800231c:	d9000615 	stw	r4,24(sp)
 8002320:	dec00415 	stw	sp,16(sp)
 8002324:	2888000c 	andi	r2,r5,8192
 8002328:	1000061e 	bne	r2,zero,8002344 <_puts_r+0x84>
 800232c:	19001917 	ldw	r4,100(r3)
 8002330:	00b7ffc4 	movi	r2,-8193
 8002334:	29480014 	ori	r5,r5,8192
 8002338:	2084703a 	and	r2,r4,r2
 800233c:	1940030d 	sth	r5,12(r3)
 8002340:	18801915 	stw	r2,100(r3)
 8002344:	89400217 	ldw	r5,8(r17)
 8002348:	8809883a 	mov	r4,r17
 800234c:	d9800404 	addi	r6,sp,16
 8002350:	80069500 	call	8006950 <__sfvwrite_r>
 8002354:	1000061e 	bne	r2,zero,8002370 <_puts_r+0xb0>
 8002358:	00800284 	movi	r2,10
 800235c:	dfc00917 	ldw	ra,36(sp)
 8002360:	dc400817 	ldw	r17,32(sp)
 8002364:	dc000717 	ldw	r16,28(sp)
 8002368:	dec00a04 	addi	sp,sp,40
 800236c:	f800283a 	ret
 8002370:	00bfffc4 	movi	r2,-1
 8002374:	003ff906 	br	800235c <__alt_data_end+0xf800235c>

08002378 <puts>:
 8002378:	00820074 	movhi	r2,2049
 800237c:	108e1004 	addi	r2,r2,14400
 8002380:	200b883a 	mov	r5,r4
 8002384:	11000017 	ldw	r4,0(r2)
 8002388:	80022c01 	jmpi	80022c0 <_puts_r>

0800238c <strlen>:
 800238c:	208000cc 	andi	r2,r4,3
 8002390:	10001d26 	beq	r2,zero,8002408 <strlen+0x7c>
 8002394:	20800007 	ldb	r2,0(r4)
 8002398:	10001d26 	beq	r2,zero,8002410 <strlen+0x84>
 800239c:	2005883a 	mov	r2,r4
 80023a0:	00000206 	br	80023ac <strlen+0x20>
 80023a4:	10c00007 	ldb	r3,0(r2)
 80023a8:	18001526 	beq	r3,zero,8002400 <strlen+0x74>
 80023ac:	10800044 	addi	r2,r2,1
 80023b0:	10c000cc 	andi	r3,r2,3
 80023b4:	183ffb1e 	bne	r3,zero,80023a4 <__alt_data_end+0xf80023a4>
 80023b8:	10c00017 	ldw	r3,0(r2)
 80023bc:	01ffbff4 	movhi	r7,65279
 80023c0:	39ffbfc4 	addi	r7,r7,-257
 80023c4:	01a02074 	movhi	r6,32897
 80023c8:	31a02004 	addi	r6,r6,-32640
 80023cc:	00000206 	br	80023d8 <strlen+0x4c>
 80023d0:	10800104 	addi	r2,r2,4
 80023d4:	10c00017 	ldw	r3,0(r2)
 80023d8:	19cb883a 	add	r5,r3,r7
 80023dc:	00c6303a 	nor	r3,zero,r3
 80023e0:	28c6703a 	and	r3,r5,r3
 80023e4:	1986703a 	and	r3,r3,r6
 80023e8:	183ff926 	beq	r3,zero,80023d0 <__alt_data_end+0xf80023d0>
 80023ec:	10c00007 	ldb	r3,0(r2)
 80023f0:	18000326 	beq	r3,zero,8002400 <strlen+0x74>
 80023f4:	10800044 	addi	r2,r2,1
 80023f8:	10c00007 	ldb	r3,0(r2)
 80023fc:	183ffd1e 	bne	r3,zero,80023f4 <__alt_data_end+0xf80023f4>
 8002400:	1105c83a 	sub	r2,r2,r4
 8002404:	f800283a 	ret
 8002408:	2005883a 	mov	r2,r4
 800240c:	003fea06 	br	80023b8 <__alt_data_end+0xf80023b8>
 8002410:	0005883a 	mov	r2,zero
 8002414:	f800283a 	ret

08002418 <___vfprintf_internal_r>:
 8002418:	defeb604 	addi	sp,sp,-1320
 800241c:	dfc14915 	stw	ra,1316(sp)
 8002420:	dcc14315 	stw	r19,1292(sp)
 8002424:	dc414115 	stw	r17,1284(sp)
 8002428:	d9012c15 	stw	r4,1200(sp)
 800242c:	2827883a 	mov	r19,r5
 8002430:	3023883a 	mov	r17,r6
 8002434:	d9c12f15 	stw	r7,1212(sp)
 8002438:	df014815 	stw	fp,1312(sp)
 800243c:	ddc14715 	stw	r23,1308(sp)
 8002440:	dd814615 	stw	r22,1304(sp)
 8002444:	dd414515 	stw	r21,1300(sp)
 8002448:	dd014415 	stw	r20,1296(sp)
 800244c:	dc814215 	stw	r18,1288(sp)
 8002450:	dc014015 	stw	r16,1280(sp)
 8002454:	8006ffc0 	call	8006ffc <_localeconv_r>
 8002458:	10800017 	ldw	r2,0(r2)
 800245c:	1009883a 	mov	r4,r2
 8002460:	d8813415 	stw	r2,1232(sp)
 8002464:	800238c0 	call	800238c <strlen>
 8002468:	d8813815 	stw	r2,1248(sp)
 800246c:	d8812c17 	ldw	r2,1200(sp)
 8002470:	10000226 	beq	r2,zero,800247c <___vfprintf_internal_r+0x64>
 8002474:	10800e17 	ldw	r2,56(r2)
 8002478:	10010826 	beq	r2,zero,800289c <___vfprintf_internal_r+0x484>
 800247c:	9880030b 	ldhu	r2,12(r19)
 8002480:	1108000c 	andi	r4,r2,8192
 8002484:	1007883a 	mov	r3,r2
 8002488:	2000071e 	bne	r4,zero,80024a8 <___vfprintf_internal_r+0x90>
 800248c:	99001917 	ldw	r4,100(r19)
 8002490:	10c80014 	ori	r3,r2,8192
 8002494:	00b7ffc4 	movi	r2,-8193
 8002498:	2088703a 	and	r4,r4,r2
 800249c:	98c0030d 	sth	r3,12(r19)
 80024a0:	1805883a 	mov	r2,r3
 80024a4:	99001915 	stw	r4,100(r19)
 80024a8:	1900020c 	andi	r4,r3,8
 80024ac:	2000ab26 	beq	r4,zero,800275c <___vfprintf_internal_r+0x344>
 80024b0:	99000417 	ldw	r4,16(r19)
 80024b4:	2000a926 	beq	r4,zero,800275c <___vfprintf_internal_r+0x344>
 80024b8:	18c0068c 	andi	r3,r3,26
 80024bc:	01000284 	movi	r4,10
 80024c0:	1900af26 	beq	r3,r4,8002780 <___vfprintf_internal_r+0x368>
 80024c4:	d9010dc4 	addi	r4,sp,1079
 80024c8:	d9410e04 	addi	r5,sp,1080
 80024cc:	d8800404 	addi	r2,sp,16
 80024d0:	2907c83a 	sub	r3,r5,r4
 80024d4:	d9012815 	stw	r4,1184(sp)
 80024d8:	d9412915 	stw	r5,1188(sp)
 80024dc:	d8811e15 	stw	r2,1144(sp)
 80024e0:	d8012015 	stw	zero,1152(sp)
 80024e4:	d8011f15 	stw	zero,1148(sp)
 80024e8:	d8013515 	stw	zero,1236(sp)
 80024ec:	d8013715 	stw	zero,1244(sp)
 80024f0:	d8013915 	stw	zero,1252(sp)
 80024f4:	d8013b15 	stw	zero,1260(sp)
 80024f8:	d8013a15 	stw	zero,1256(sp)
 80024fc:	d8013115 	stw	zero,1220(sp)
 8002500:	1011883a 	mov	r8,r2
 8002504:	05c20074 	movhi	r23,2049
 8002508:	bdc6b484 	addi	r23,r23,6866
 800250c:	d8c13d15 	stw	r3,1268(sp)
 8002510:	88800007 	ldb	r2,0(r17)
 8002514:	10021126 	beq	r2,zero,8002d5c <___vfprintf_internal_r+0x944>
 8002518:	00c00944 	movi	r3,37
 800251c:	8821883a 	mov	r16,r17
 8002520:	10c0021e 	bne	r2,r3,800252c <___vfprintf_internal_r+0x114>
 8002524:	00001406 	br	8002578 <___vfprintf_internal_r+0x160>
 8002528:	10c00326 	beq	r2,r3,8002538 <___vfprintf_internal_r+0x120>
 800252c:	84000044 	addi	r16,r16,1
 8002530:	80800007 	ldb	r2,0(r16)
 8002534:	103ffc1e 	bne	r2,zero,8002528 <__alt_data_end+0xf8002528>
 8002538:	8465c83a 	sub	r18,r16,r17
 800253c:	90000e26 	beq	r18,zero,8002578 <___vfprintf_internal_r+0x160>
 8002540:	d8c12017 	ldw	r3,1152(sp)
 8002544:	d8811f17 	ldw	r2,1148(sp)
 8002548:	44400015 	stw	r17,0(r8)
 800254c:	1c87883a 	add	r3,r3,r18
 8002550:	10800044 	addi	r2,r2,1
 8002554:	d8c12015 	stw	r3,1152(sp)
 8002558:	44800115 	stw	r18,4(r8)
 800255c:	d8811f15 	stw	r2,1148(sp)
 8002560:	00c001c4 	movi	r3,7
 8002564:	1880bb16 	blt	r3,r2,8002854 <___vfprintf_internal_r+0x43c>
 8002568:	42000204 	addi	r8,r8,8
 800256c:	d9013117 	ldw	r4,1220(sp)
 8002570:	2489883a 	add	r4,r4,r18
 8002574:	d9013115 	stw	r4,1220(sp)
 8002578:	80800007 	ldb	r2,0(r16)
 800257c:	1000bc26 	beq	r2,zero,8002870 <___vfprintf_internal_r+0x458>
 8002580:	053fffc4 	movi	r20,-1
 8002584:	84400044 	addi	r17,r16,1
 8002588:	84800047 	ldb	r18,1(r16)
 800258c:	d8012785 	stb	zero,1182(sp)
 8002590:	002d883a 	mov	r22,zero
 8002594:	d8013015 	stw	zero,1216(sp)
 8002598:	d8012a15 	stw	zero,1192(sp)
 800259c:	04001604 	movi	r16,88
 80025a0:	05400244 	movi	r21,9
 80025a4:	4039883a 	mov	fp,r8
 80025a8:	a007883a 	mov	r3,r20
 80025ac:	8c400044 	addi	r17,r17,1
 80025b0:	90bff804 	addi	r2,r18,-32
 80025b4:	80832036 	bltu	r16,r2,8003238 <___vfprintf_internal_r+0xe20>
 80025b8:	1085883a 	add	r2,r2,r2
 80025bc:	1085883a 	add	r2,r2,r2
 80025c0:	01420034 	movhi	r5,2048
 80025c4:	29497504 	addi	r5,r5,9684
 80025c8:	1145883a 	add	r2,r2,r5
 80025cc:	10800017 	ldw	r2,0(r2)
 80025d0:	1000683a 	jmp	r2
 80025d4:	08002fd8 	cmpnei	zero,at,191
 80025d8:	08003238 	rdprs	zero,at,200
 80025dc:	08003238 	rdprs	zero,at,200
 80025e0:	08002ff4 	orhi	zero,at,191
 80025e4:	08003238 	rdprs	zero,at,200
 80025e8:	08003238 	rdprs	zero,at,200
 80025ec:	08003238 	rdprs	zero,at,200
 80025f0:	08003238 	rdprs	zero,at,200
 80025f4:	08003238 	rdprs	zero,at,200
 80025f8:	08003238 	rdprs	zero,at,200
 80025fc:	08003008 	cmpgei	zero,at,192
 8002600:	080028a8 	cmpgeui	zero,at,162
 8002604:	08003238 	rdprs	zero,at,200
 8002608:	08002748 	cmpgei	zero,at,157
 800260c:	080028b4 	orhi	zero,at,162
 8002610:	08003238 	rdprs	zero,at,200
 8002614:	08002904 	addi	zero,at,164
 8002618:	08002e14 	ori	zero,at,184
 800261c:	08002e14 	ori	zero,at,184
 8002620:	08002e14 	ori	zero,at,184
 8002624:	08002e14 	ori	zero,at,184
 8002628:	08002e14 	ori	zero,at,184
 800262c:	08002e14 	ori	zero,at,184
 8002630:	08002e14 	ori	zero,at,184
 8002634:	08002e14 	ori	zero,at,184
 8002638:	08002e14 	ori	zero,at,184
 800263c:	08003238 	rdprs	zero,at,200
 8002640:	08003238 	rdprs	zero,at,200
 8002644:	08003238 	rdprs	zero,at,200
 8002648:	08003238 	rdprs	zero,at,200
 800264c:	08003238 	rdprs	zero,at,200
 8002650:	08003238 	rdprs	zero,at,200
 8002654:	08003238 	rdprs	zero,at,200
 8002658:	08003238 	rdprs	zero,at,200
 800265c:	08003238 	rdprs	zero,at,200
 8002660:	08003238 	rdprs	zero,at,200
 8002664:	08002918 	cmpnei	zero,at,164
 8002668:	08002d64 	muli	zero,at,181
 800266c:	08003238 	rdprs	zero,at,200
 8002670:	08002d64 	muli	zero,at,181
 8002674:	08003238 	rdprs	zero,at,200
 8002678:	08003238 	rdprs	zero,at,200
 800267c:	08003238 	rdprs	zero,at,200
 8002680:	08003238 	rdprs	zero,at,200
 8002684:	08002e5c 	xori	zero,at,185
 8002688:	08003238 	rdprs	zero,at,200
 800268c:	08003238 	rdprs	zero,at,200
 8002690:	08002e70 	cmpltui	zero,at,185
 8002694:	08003238 	rdprs	zero,at,200
 8002698:	08003238 	rdprs	zero,at,200
 800269c:	08003238 	rdprs	zero,at,200
 80026a0:	08003238 	rdprs	zero,at,200
 80026a4:	08003238 	rdprs	zero,at,200
 80026a8:	08002eb8 	rdprs	zero,at,186
 80026ac:	08003238 	rdprs	zero,at,200
 80026b0:	08003238 	rdprs	zero,at,200
 80026b4:	0800302c 	andhi	zero,at,192
 80026b8:	08003238 	rdprs	zero,at,200
 80026bc:	08003238 	rdprs	zero,at,200
 80026c0:	08003238 	rdprs	zero,at,200
 80026c4:	08003238 	rdprs	zero,at,200
 80026c8:	08003238 	rdprs	zero,at,200
 80026cc:	08003238 	rdprs	zero,at,200
 80026d0:	08003238 	rdprs	zero,at,200
 80026d4:	08003238 	rdprs	zero,at,200
 80026d8:	08003238 	rdprs	zero,at,200
 80026dc:	08003238 	rdprs	zero,at,200
 80026e0:	08002f30 	cmpltui	zero,at,188
 80026e4:	080030a8 	cmpgeui	zero,at,194
 80026e8:	08002d64 	muli	zero,at,181
 80026ec:	08002d64 	muli	zero,at,181
 80026f0:	08002d64 	muli	zero,at,181
 80026f4:	08003074 	orhi	zero,at,193
 80026f8:	080030a8 	cmpgeui	zero,at,194
 80026fc:	08003238 	rdprs	zero,at,200
 8002700:	08003238 	rdprs	zero,at,200
 8002704:	08003088 	cmpgei	zero,at,194
 8002708:	08003238 	rdprs	zero,at,200
 800270c:	08002ef8 	rdprs	zero,at,187
 8002710:	080031b8 	rdprs	zero,at,198
 8002714:	08003164 	muli	zero,at,197
 8002718:	080030e8 	cmpgeui	zero,at,195
 800271c:	08003238 	rdprs	zero,at,200
 8002720:	080030fc 	xorhi	zero,at,195
 8002724:	08003238 	rdprs	zero,at,200
 8002728:	080031f8 	rdprs	zero,at,199
 800272c:	08003238 	rdprs	zero,at,200
 8002730:	08003238 	rdprs	zero,at,200
 8002734:	08002f70 	cmpltui	zero,at,189
 8002738:	d9413017 	ldw	r5,1216(sp)
 800273c:	d8812f15 	stw	r2,1212(sp)
 8002740:	014bc83a 	sub	r5,zero,r5
 8002744:	d9413015 	stw	r5,1216(sp)
 8002748:	d8812a17 	ldw	r2,1192(sp)
 800274c:	10800114 	ori	r2,r2,4
 8002750:	d8812a15 	stw	r2,1192(sp)
 8002754:	8c800007 	ldb	r18,0(r17)
 8002758:	003f9406 	br	80025ac <__alt_data_end+0xf80025ac>
 800275c:	d9012c17 	ldw	r4,1200(sp)
 8002760:	980b883a 	mov	r5,r19
 8002764:	80045900 	call	8004590 <__swsetup_r>
 8002768:	10002d1e 	bne	r2,zero,8002820 <___vfprintf_internal_r+0x408>
 800276c:	9880030b 	ldhu	r2,12(r19)
 8002770:	01000284 	movi	r4,10
 8002774:	1007883a 	mov	r3,r2
 8002778:	18c0068c 	andi	r3,r3,26
 800277c:	193f511e 	bne	r3,r4,80024c4 <__alt_data_end+0xf80024c4>
 8002780:	98c0038b 	ldhu	r3,14(r19)
 8002784:	193fffcc 	andi	r4,r3,65535
 8002788:	2120001c 	xori	r4,r4,32768
 800278c:	21200004 	addi	r4,r4,-32768
 8002790:	203f4c16 	blt	r4,zero,80024c4 <__alt_data_end+0xf80024c4>
 8002794:	9ac01917 	ldw	r11,100(r19)
 8002798:	9a800717 	ldw	r10,28(r19)
 800279c:	9a400917 	ldw	r9,36(r19)
 80027a0:	d9012c17 	ldw	r4,1200(sp)
 80027a4:	d9c12f17 	ldw	r7,1212(sp)
 80027a8:	02010004 	movi	r8,1024
 80027ac:	10bfff4c 	andi	r2,r2,65533
 80027b0:	d8c1078d 	sth	r3,1054(sp)
 80027b4:	d9410404 	addi	r5,sp,1040
 80027b8:	d8c00404 	addi	r3,sp,16
 80027bc:	880d883a 	mov	r6,r17
 80027c0:	d881070d 	sth	r2,1052(sp)
 80027c4:	dac11d15 	stw	r11,1140(sp)
 80027c8:	da810b15 	stw	r10,1068(sp)
 80027cc:	da410d15 	stw	r9,1076(sp)
 80027d0:	d8c10415 	stw	r3,1040(sp)
 80027d4:	d8c10815 	stw	r3,1056(sp)
 80027d8:	da010615 	stw	r8,1048(sp)
 80027dc:	da010915 	stw	r8,1060(sp)
 80027e0:	d8010a15 	stw	zero,1064(sp)
 80027e4:	80024180 	call	8002418 <___vfprintf_internal_r>
 80027e8:	1021883a 	mov	r16,r2
 80027ec:	10000416 	blt	r2,zero,8002800 <___vfprintf_internal_r+0x3e8>
 80027f0:	d9012c17 	ldw	r4,1200(sp)
 80027f4:	d9410404 	addi	r5,sp,1040
 80027f8:	8005f2c0 	call	8005f2c <_fflush_r>
 80027fc:	10072a1e 	bne	r2,zero,80044a8 <___vfprintf_internal_r+0x2090>
 8002800:	d881070b 	ldhu	r2,1052(sp)
 8002804:	1080100c 	andi	r2,r2,64
 8002808:	10000326 	beq	r2,zero,8002818 <___vfprintf_internal_r+0x400>
 800280c:	9880030b 	ldhu	r2,12(r19)
 8002810:	10801014 	ori	r2,r2,64
 8002814:	9880030d 	sth	r2,12(r19)
 8002818:	8005883a 	mov	r2,r16
 800281c:	00000106 	br	8002824 <___vfprintf_internal_r+0x40c>
 8002820:	00bfffc4 	movi	r2,-1
 8002824:	dfc14917 	ldw	ra,1316(sp)
 8002828:	df014817 	ldw	fp,1312(sp)
 800282c:	ddc14717 	ldw	r23,1308(sp)
 8002830:	dd814617 	ldw	r22,1304(sp)
 8002834:	dd414517 	ldw	r21,1300(sp)
 8002838:	dd014417 	ldw	r20,1296(sp)
 800283c:	dcc14317 	ldw	r19,1292(sp)
 8002840:	dc814217 	ldw	r18,1288(sp)
 8002844:	dc414117 	ldw	r17,1284(sp)
 8002848:	dc014017 	ldw	r16,1280(sp)
 800284c:	dec14a04 	addi	sp,sp,1320
 8002850:	f800283a 	ret
 8002854:	d9012c17 	ldw	r4,1200(sp)
 8002858:	980b883a 	mov	r5,r19
 800285c:	d9811e04 	addi	r6,sp,1144
 8002860:	80097200 	call	8009720 <__sprint_r>
 8002864:	1000081e 	bne	r2,zero,8002888 <___vfprintf_internal_r+0x470>
 8002868:	da000404 	addi	r8,sp,16
 800286c:	003f3f06 	br	800256c <__alt_data_end+0xf800256c>
 8002870:	d8812017 	ldw	r2,1152(sp)
 8002874:	10000426 	beq	r2,zero,8002888 <___vfprintf_internal_r+0x470>
 8002878:	d9012c17 	ldw	r4,1200(sp)
 800287c:	980b883a 	mov	r5,r19
 8002880:	d9811e04 	addi	r6,sp,1144
 8002884:	80097200 	call	8009720 <__sprint_r>
 8002888:	9880030b 	ldhu	r2,12(r19)
 800288c:	1080100c 	andi	r2,r2,64
 8002890:	103fe31e 	bne	r2,zero,8002820 <__alt_data_end+0xf8002820>
 8002894:	d8813117 	ldw	r2,1220(sp)
 8002898:	003fe206 	br	8002824 <__alt_data_end+0xf8002824>
 800289c:	d9012c17 	ldw	r4,1200(sp)
 80028a0:	800624c0 	call	800624c <__sinit>
 80028a4:	003ef506 	br	800247c <__alt_data_end+0xf800247c>
 80028a8:	05800ac4 	movi	r22,43
 80028ac:	8c800007 	ldb	r18,0(r17)
 80028b0:	003f3e06 	br	80025ac <__alt_data_end+0xf80025ac>
 80028b4:	8c800007 	ldb	r18,0(r17)
 80028b8:	00c00a84 	movi	r3,42
 80028bc:	88800044 	addi	r2,r17,1
 80028c0:	90c6fb26 	beq	r18,r3,80044b0 <___vfprintf_internal_r+0x2098>
 80028c4:	953ff404 	addi	r20,r18,-48
 80028c8:	1023883a 	mov	r17,r2
 80028cc:	0007883a 	mov	r3,zero
 80028d0:	ad3f3736 	bltu	r21,r20,80025b0 <__alt_data_end+0xf80025b0>
 80028d4:	0009883a 	mov	r4,zero
 80028d8:	01400284 	movi	r5,10
 80028dc:	800c3600 	call	800c360 <__mulsi3>
 80028e0:	8c800007 	ldb	r18,0(r17)
 80028e4:	a089883a 	add	r4,r20,r2
 80028e8:	8c400044 	addi	r17,r17,1
 80028ec:	953ff404 	addi	r20,r18,-48
 80028f0:	ad3ff92e 	bgeu	r21,r20,80028d8 <__alt_data_end+0xf80028d8>
 80028f4:	2007883a 	mov	r3,r4
 80028f8:	203f2d0e 	bge	r4,zero,80025b0 <__alt_data_end+0xf80025b0>
 80028fc:	00ffffc4 	movi	r3,-1
 8002900:	003f2b06 	br	80025b0 <__alt_data_end+0xf80025b0>
 8002904:	d9412a17 	ldw	r5,1192(sp)
 8002908:	29402014 	ori	r5,r5,128
 800290c:	d9412a15 	stw	r5,1192(sp)
 8002910:	8c800007 	ldb	r18,0(r17)
 8002914:	003f2506 	br	80025ac <__alt_data_end+0xf80025ac>
 8002918:	d9412a17 	ldw	r5,1192(sp)
 800291c:	1829883a 	mov	r20,r3
 8002920:	dd812785 	stb	r22,1182(sp)
 8002924:	29400414 	ori	r5,r5,16
 8002928:	d9412a15 	stw	r5,1192(sp)
 800292c:	d8c12a17 	ldw	r3,1192(sp)
 8002930:	e011883a 	mov	r8,fp
 8002934:	1880080c 	andi	r2,r3,32
 8002938:	1001e126 	beq	r2,zero,80030c0 <___vfprintf_internal_r+0xca8>
 800293c:	d9012f17 	ldw	r4,1212(sp)
 8002940:	20800117 	ldw	r2,4(r4)
 8002944:	25400017 	ldw	r21,0(r4)
 8002948:	21000204 	addi	r4,r4,8
 800294c:	d9012f15 	stw	r4,1212(sp)
 8002950:	102d883a 	mov	r22,r2
 8002954:	10046916 	blt	r2,zero,8003afc <___vfprintf_internal_r+0x16e4>
 8002958:	df012783 	ldbu	fp,1182(sp)
 800295c:	00c00044 	movi	r3,1
 8002960:	ad84b03a 	or	r2,r21,r22
 8002964:	a0000416 	blt	r20,zero,8002978 <___vfprintf_internal_r+0x560>
 8002968:	d9412a17 	ldw	r5,1192(sp)
 800296c:	013fdfc4 	movi	r4,-129
 8002970:	290a703a 	and	r5,r5,r4
 8002974:	d9412a15 	stw	r5,1192(sp)
 8002978:	1002491e 	bne	r2,zero,80032a0 <___vfprintf_internal_r+0xe88>
 800297c:	a002481e 	bne	r20,zero,80032a0 <___vfprintf_internal_r+0xe88>
 8002980:	18c03fcc 	andi	r3,r3,255
 8002984:	1803871e 	bne	r3,zero,80037a4 <___vfprintf_internal_r+0x138c>
 8002988:	d9012a17 	ldw	r4,1192(sp)
 800298c:	2080004c 	andi	r2,r4,1
 8002990:	10038426 	beq	r2,zero,80037a4 <___vfprintf_internal_r+0x138c>
 8002994:	d9413d17 	ldw	r5,1268(sp)
 8002998:	00800c04 	movi	r2,48
 800299c:	d8810dc5 	stb	r2,1079(sp)
 80029a0:	d9412e15 	stw	r5,1208(sp)
 80029a4:	dc010dc4 	addi	r16,sp,1079
 80029a8:	d8812e17 	ldw	r2,1208(sp)
 80029ac:	1500010e 	bge	r2,r20,80029b4 <___vfprintf_internal_r+0x59c>
 80029b0:	a005883a 	mov	r2,r20
 80029b4:	d8812b15 	stw	r2,1196(sp)
 80029b8:	d8013315 	stw	zero,1228(sp)
 80029bc:	e0803fcc 	andi	r2,fp,255
 80029c0:	1080201c 	xori	r2,r2,128
 80029c4:	10bfe004 	addi	r2,r2,-128
 80029c8:	10000326 	beq	r2,zero,80029d8 <___vfprintf_internal_r+0x5c0>
 80029cc:	d8c12b17 	ldw	r3,1196(sp)
 80029d0:	18c00044 	addi	r3,r3,1
 80029d4:	d8c12b15 	stw	r3,1196(sp)
 80029d8:	d8c12a17 	ldw	r3,1192(sp)
 80029dc:	18c0008c 	andi	r3,r3,2
 80029e0:	d8c12d15 	stw	r3,1204(sp)
 80029e4:	18000326 	beq	r3,zero,80029f4 <___vfprintf_internal_r+0x5dc>
 80029e8:	d8c12b17 	ldw	r3,1196(sp)
 80029ec:	18c00084 	addi	r3,r3,2
 80029f0:	d8c12b15 	stw	r3,1196(sp)
 80029f4:	d8c12a17 	ldw	r3,1192(sp)
 80029f8:	18c0210c 	andi	r3,r3,132
 80029fc:	d8c13215 	stw	r3,1224(sp)
 8002a00:	1802151e 	bne	r3,zero,8003258 <___vfprintf_internal_r+0xe40>
 8002a04:	d9013017 	ldw	r4,1216(sp)
 8002a08:	d8c12b17 	ldw	r3,1196(sp)
 8002a0c:	20f9c83a 	sub	fp,r4,r3
 8002a10:	0702110e 	bge	zero,fp,8003258 <___vfprintf_internal_r+0xe40>
 8002a14:	02400404 	movi	r9,16
 8002a18:	d8c12017 	ldw	r3,1152(sp)
 8002a1c:	d8811f17 	ldw	r2,1148(sp)
 8002a20:	4f059a0e 	bge	r9,fp,800408c <___vfprintf_internal_r+0x1c74>
 8002a24:	8809883a 	mov	r4,r17
 8002a28:	01420074 	movhi	r5,2049
 8002a2c:	2946b884 	addi	r5,r5,6882
 8002a30:	dc013c15 	stw	r16,1264(sp)
 8002a34:	e023883a 	mov	r17,fp
 8002a38:	d9413615 	stw	r5,1240(sp)
 8002a3c:	482d883a 	mov	r22,r9
 8002a40:	054001c4 	movi	r21,7
 8002a44:	dc012c17 	ldw	r16,1200(sp)
 8002a48:	2039883a 	mov	fp,r4
 8002a4c:	00000306 	br	8002a5c <___vfprintf_internal_r+0x644>
 8002a50:	8c7ffc04 	addi	r17,r17,-16
 8002a54:	42000204 	addi	r8,r8,8
 8002a58:	b440130e 	bge	r22,r17,8002aa8 <___vfprintf_internal_r+0x690>
 8002a5c:	18c00404 	addi	r3,r3,16
 8002a60:	10800044 	addi	r2,r2,1
 8002a64:	01020074 	movhi	r4,2049
 8002a68:	2106b884 	addi	r4,r4,6882
 8002a6c:	41000015 	stw	r4,0(r8)
 8002a70:	45800115 	stw	r22,4(r8)
 8002a74:	d8c12015 	stw	r3,1152(sp)
 8002a78:	d8811f15 	stw	r2,1148(sp)
 8002a7c:	a8bff40e 	bge	r21,r2,8002a50 <__alt_data_end+0xf8002a50>
 8002a80:	8009883a 	mov	r4,r16
 8002a84:	980b883a 	mov	r5,r19
 8002a88:	d9811e04 	addi	r6,sp,1144
 8002a8c:	80097200 	call	8009720 <__sprint_r>
 8002a90:	103f7d1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8002a94:	8c7ffc04 	addi	r17,r17,-16
 8002a98:	d8c12017 	ldw	r3,1152(sp)
 8002a9c:	d8811f17 	ldw	r2,1148(sp)
 8002aa0:	da000404 	addi	r8,sp,16
 8002aa4:	b47fed16 	blt	r22,r17,8002a5c <__alt_data_end+0xf8002a5c>
 8002aa8:	dc013c17 	ldw	r16,1264(sp)
 8002aac:	e009883a 	mov	r4,fp
 8002ab0:	8839883a 	mov	fp,r17
 8002ab4:	2023883a 	mov	r17,r4
 8002ab8:	d9413617 	ldw	r5,1240(sp)
 8002abc:	e0c7883a 	add	r3,fp,r3
 8002ac0:	10800044 	addi	r2,r2,1
 8002ac4:	41400015 	stw	r5,0(r8)
 8002ac8:	47000115 	stw	fp,4(r8)
 8002acc:	d8c12015 	stw	r3,1152(sp)
 8002ad0:	d8811f15 	stw	r2,1148(sp)
 8002ad4:	010001c4 	movi	r4,7
 8002ad8:	20836b16 	blt	r4,r2,8003888 <___vfprintf_internal_r+0x1470>
 8002adc:	d8812787 	ldb	r2,1182(sp)
 8002ae0:	42000204 	addi	r8,r8,8
 8002ae4:	10000c26 	beq	r2,zero,8002b18 <___vfprintf_internal_r+0x700>
 8002ae8:	d8811f17 	ldw	r2,1148(sp)
 8002aec:	d9012784 	addi	r4,sp,1182
 8002af0:	18c00044 	addi	r3,r3,1
 8002af4:	10800044 	addi	r2,r2,1
 8002af8:	41000015 	stw	r4,0(r8)
 8002afc:	01000044 	movi	r4,1
 8002b00:	41000115 	stw	r4,4(r8)
 8002b04:	d8c12015 	stw	r3,1152(sp)
 8002b08:	d8811f15 	stw	r2,1148(sp)
 8002b0c:	010001c4 	movi	r4,7
 8002b10:	2082ef16 	blt	r4,r2,80036d0 <___vfprintf_internal_r+0x12b8>
 8002b14:	42000204 	addi	r8,r8,8
 8002b18:	d8812d17 	ldw	r2,1204(sp)
 8002b1c:	10000c26 	beq	r2,zero,8002b50 <___vfprintf_internal_r+0x738>
 8002b20:	d8811f17 	ldw	r2,1148(sp)
 8002b24:	d9012704 	addi	r4,sp,1180
 8002b28:	18c00084 	addi	r3,r3,2
 8002b2c:	10800044 	addi	r2,r2,1
 8002b30:	41000015 	stw	r4,0(r8)
 8002b34:	01000084 	movi	r4,2
 8002b38:	41000115 	stw	r4,4(r8)
 8002b3c:	d8c12015 	stw	r3,1152(sp)
 8002b40:	d8811f15 	stw	r2,1148(sp)
 8002b44:	010001c4 	movi	r4,7
 8002b48:	2082e916 	blt	r4,r2,80036f0 <___vfprintf_internal_r+0x12d8>
 8002b4c:	42000204 	addi	r8,r8,8
 8002b50:	d9013217 	ldw	r4,1224(sp)
 8002b54:	00802004 	movi	r2,128
 8002b58:	20823226 	beq	r4,r2,8003424 <___vfprintf_internal_r+0x100c>
 8002b5c:	d9012e17 	ldw	r4,1208(sp)
 8002b60:	a129c83a 	sub	r20,r20,r4
 8002b64:	05002d0e 	bge	zero,r20,8002c1c <___vfprintf_internal_r+0x804>
 8002b68:	05800404 	movi	r22,16
 8002b6c:	d8811f17 	ldw	r2,1148(sp)
 8002b70:	05420074 	movhi	r21,2049
 8002b74:	ad46b484 	addi	r21,r21,6866
 8002b78:	b5001f0e 	bge	r22,r20,8002bf8 <___vfprintf_internal_r+0x7e0>
 8002b7c:	8809883a 	mov	r4,r17
 8002b80:	dc012d15 	stw	r16,1204(sp)
 8002b84:	a023883a 	mov	r17,r20
 8002b88:	070001c4 	movi	fp,7
 8002b8c:	dc012c17 	ldw	r16,1200(sp)
 8002b90:	2029883a 	mov	r20,r4
 8002b94:	00000306 	br	8002ba4 <___vfprintf_internal_r+0x78c>
 8002b98:	8c7ffc04 	addi	r17,r17,-16
 8002b9c:	42000204 	addi	r8,r8,8
 8002ba0:	b440110e 	bge	r22,r17,8002be8 <___vfprintf_internal_r+0x7d0>
 8002ba4:	18c00404 	addi	r3,r3,16
 8002ba8:	10800044 	addi	r2,r2,1
 8002bac:	45c00015 	stw	r23,0(r8)
 8002bb0:	45800115 	stw	r22,4(r8)
 8002bb4:	d8c12015 	stw	r3,1152(sp)
 8002bb8:	d8811f15 	stw	r2,1148(sp)
 8002bbc:	e0bff60e 	bge	fp,r2,8002b98 <__alt_data_end+0xf8002b98>
 8002bc0:	8009883a 	mov	r4,r16
 8002bc4:	980b883a 	mov	r5,r19
 8002bc8:	d9811e04 	addi	r6,sp,1144
 8002bcc:	80097200 	call	8009720 <__sprint_r>
 8002bd0:	103f2d1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8002bd4:	8c7ffc04 	addi	r17,r17,-16
 8002bd8:	d8c12017 	ldw	r3,1152(sp)
 8002bdc:	d8811f17 	ldw	r2,1148(sp)
 8002be0:	da000404 	addi	r8,sp,16
 8002be4:	b47fef16 	blt	r22,r17,8002ba4 <__alt_data_end+0xf8002ba4>
 8002be8:	dc012d17 	ldw	r16,1204(sp)
 8002bec:	a009883a 	mov	r4,r20
 8002bf0:	8829883a 	mov	r20,r17
 8002bf4:	2023883a 	mov	r17,r4
 8002bf8:	1d07883a 	add	r3,r3,r20
 8002bfc:	10800044 	addi	r2,r2,1
 8002c00:	45400015 	stw	r21,0(r8)
 8002c04:	45000115 	stw	r20,4(r8)
 8002c08:	d8c12015 	stw	r3,1152(sp)
 8002c0c:	d8811f15 	stw	r2,1148(sp)
 8002c10:	010001c4 	movi	r4,7
 8002c14:	2082a616 	blt	r4,r2,80036b0 <___vfprintf_internal_r+0x1298>
 8002c18:	42000204 	addi	r8,r8,8
 8002c1c:	d9412a17 	ldw	r5,1192(sp)
 8002c20:	2880400c 	andi	r2,r5,256
 8002c24:	1001b51e 	bne	r2,zero,80032fc <___vfprintf_internal_r+0xee4>
 8002c28:	d8812e17 	ldw	r2,1208(sp)
 8002c2c:	d9012e17 	ldw	r4,1208(sp)
 8002c30:	44000015 	stw	r16,0(r8)
 8002c34:	1887883a 	add	r3,r3,r2
 8002c38:	d8811f17 	ldw	r2,1148(sp)
 8002c3c:	10800044 	addi	r2,r2,1
 8002c40:	41000115 	stw	r4,4(r8)
 8002c44:	d8c12015 	stw	r3,1152(sp)
 8002c48:	d8811f15 	stw	r2,1148(sp)
 8002c4c:	010001c4 	movi	r4,7
 8002c50:	20818b16 	blt	r4,r2,8003280 <___vfprintf_internal_r+0xe68>
 8002c54:	42000204 	addi	r8,r8,8
 8002c58:	d9412a17 	ldw	r5,1192(sp)
 8002c5c:	2880010c 	andi	r2,r5,4
 8002c60:	10003226 	beq	r2,zero,8002d2c <___vfprintf_internal_r+0x914>
 8002c64:	d8813017 	ldw	r2,1216(sp)
 8002c68:	d9012b17 	ldw	r4,1196(sp)
 8002c6c:	1121c83a 	sub	r16,r2,r4
 8002c70:	04002e0e 	bge	zero,r16,8002d2c <___vfprintf_internal_r+0x914>
 8002c74:	04800404 	movi	r18,16
 8002c78:	d8811f17 	ldw	r2,1148(sp)
 8002c7c:	9405240e 	bge	r18,r16,8004110 <___vfprintf_internal_r+0x1cf8>
 8002c80:	01020074 	movhi	r4,2049
 8002c84:	2106b884 	addi	r4,r4,6882
 8002c88:	d9013615 	stw	r4,1240(sp)
 8002c8c:	050001c4 	movi	r20,7
 8002c90:	dd412c17 	ldw	r21,1200(sp)
 8002c94:	00000306 	br	8002ca4 <___vfprintf_internal_r+0x88c>
 8002c98:	843ffc04 	addi	r16,r16,-16
 8002c9c:	42000204 	addi	r8,r8,8
 8002ca0:	9400130e 	bge	r18,r16,8002cf0 <___vfprintf_internal_r+0x8d8>
 8002ca4:	18c00404 	addi	r3,r3,16
 8002ca8:	10800044 	addi	r2,r2,1
 8002cac:	01420074 	movhi	r5,2049
 8002cb0:	2946b884 	addi	r5,r5,6882
 8002cb4:	41400015 	stw	r5,0(r8)
 8002cb8:	44800115 	stw	r18,4(r8)
 8002cbc:	d8c12015 	stw	r3,1152(sp)
 8002cc0:	d8811f15 	stw	r2,1148(sp)
 8002cc4:	a0bff40e 	bge	r20,r2,8002c98 <__alt_data_end+0xf8002c98>
 8002cc8:	a809883a 	mov	r4,r21
 8002ccc:	980b883a 	mov	r5,r19
 8002cd0:	d9811e04 	addi	r6,sp,1144
 8002cd4:	80097200 	call	8009720 <__sprint_r>
 8002cd8:	103eeb1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8002cdc:	843ffc04 	addi	r16,r16,-16
 8002ce0:	d8c12017 	ldw	r3,1152(sp)
 8002ce4:	d8811f17 	ldw	r2,1148(sp)
 8002ce8:	da000404 	addi	r8,sp,16
 8002cec:	943fed16 	blt	r18,r16,8002ca4 <__alt_data_end+0xf8002ca4>
 8002cf0:	d9013617 	ldw	r4,1240(sp)
 8002cf4:	1c07883a 	add	r3,r3,r16
 8002cf8:	10800044 	addi	r2,r2,1
 8002cfc:	41000015 	stw	r4,0(r8)
 8002d00:	44000115 	stw	r16,4(r8)
 8002d04:	d8c12015 	stw	r3,1152(sp)
 8002d08:	d8811f15 	stw	r2,1148(sp)
 8002d0c:	010001c4 	movi	r4,7
 8002d10:	2080060e 	bge	r4,r2,8002d2c <___vfprintf_internal_r+0x914>
 8002d14:	d9012c17 	ldw	r4,1200(sp)
 8002d18:	980b883a 	mov	r5,r19
 8002d1c:	d9811e04 	addi	r6,sp,1144
 8002d20:	80097200 	call	8009720 <__sprint_r>
 8002d24:	103ed81e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8002d28:	d8c12017 	ldw	r3,1152(sp)
 8002d2c:	d8812b17 	ldw	r2,1196(sp)
 8002d30:	d9413017 	ldw	r5,1216(sp)
 8002d34:	1140010e 	bge	r2,r5,8002d3c <___vfprintf_internal_r+0x924>
 8002d38:	2805883a 	mov	r2,r5
 8002d3c:	d9013117 	ldw	r4,1220(sp)
 8002d40:	2089883a 	add	r4,r4,r2
 8002d44:	d9013115 	stw	r4,1220(sp)
 8002d48:	1802381e 	bne	r3,zero,800362c <___vfprintf_internal_r+0x1214>
 8002d4c:	88800007 	ldb	r2,0(r17)
 8002d50:	d8011f15 	stw	zero,1148(sp)
 8002d54:	da000404 	addi	r8,sp,16
 8002d58:	103def1e 	bne	r2,zero,8002518 <__alt_data_end+0xf8002518>
 8002d5c:	8821883a 	mov	r16,r17
 8002d60:	003e0506 	br	8002578 <__alt_data_end+0xf8002578>
 8002d64:	1829883a 	mov	r20,r3
 8002d68:	d8c12a17 	ldw	r3,1192(sp)
 8002d6c:	dd812785 	stb	r22,1182(sp)
 8002d70:	e011883a 	mov	r8,fp
 8002d74:	1880020c 	andi	r2,r3,8
 8002d78:	1003c926 	beq	r2,zero,8003ca0 <___vfprintf_internal_r+0x1888>
 8002d7c:	d9012f17 	ldw	r4,1212(sp)
 8002d80:	d9412f17 	ldw	r5,1212(sp)
 8002d84:	d8812f17 	ldw	r2,1212(sp)
 8002d88:	21000017 	ldw	r4,0(r4)
 8002d8c:	29400117 	ldw	r5,4(r5)
 8002d90:	10800204 	addi	r2,r2,8
 8002d94:	d9013715 	stw	r4,1244(sp)
 8002d98:	d9413915 	stw	r5,1252(sp)
 8002d9c:	d8812f15 	stw	r2,1212(sp)
 8002da0:	d9013717 	ldw	r4,1244(sp)
 8002da4:	d9413917 	ldw	r5,1252(sp)
 8002da8:	da013f15 	stw	r8,1276(sp)
 8002dac:	04000044 	movi	r16,1
 8002db0:	80093780 	call	8009378 <__fpclassifyd>
 8002db4:	da013f17 	ldw	r8,1276(sp)
 8002db8:	d9013717 	ldw	r4,1244(sp)
 8002dbc:	d9413917 	ldw	r5,1252(sp)
 8002dc0:	1403571e 	bne	r2,r16,8003b20 <___vfprintf_internal_r+0x1708>
 8002dc4:	000d883a 	mov	r6,zero
 8002dc8:	000f883a 	mov	r7,zero
 8002dcc:	800d6fc0 	call	800d6fc <__ledf2>
 8002dd0:	da013f17 	ldw	r8,1276(sp)
 8002dd4:	1004f416 	blt	r2,zero,80041a8 <___vfprintf_internal_r+0x1d90>
 8002dd8:	df012783 	ldbu	fp,1182(sp)
 8002ddc:	008011c4 	movi	r2,71
 8002de0:	14847a0e 	bge	r2,r18,8003fcc <___vfprintf_internal_r+0x1bb4>
 8002de4:	04020074 	movhi	r16,2049
 8002de8:	8406a504 	addi	r16,r16,6804
 8002dec:	d9012a17 	ldw	r4,1192(sp)
 8002df0:	00bfdfc4 	movi	r2,-129
 8002df4:	00c000c4 	movi	r3,3
 8002df8:	2088703a 	and	r4,r4,r2
 8002dfc:	d8c12b15 	stw	r3,1196(sp)
 8002e00:	d9012a15 	stw	r4,1192(sp)
 8002e04:	d8c12e15 	stw	r3,1208(sp)
 8002e08:	0029883a 	mov	r20,zero
 8002e0c:	d8013315 	stw	zero,1228(sp)
 8002e10:	003eea06 	br	80029bc <__alt_data_end+0xf80029bc>
 8002e14:	953ff404 	addi	r20,r18,-48
 8002e18:	d8013015 	stw	zero,1216(sp)
 8002e1c:	0009883a 	mov	r4,zero
 8002e20:	1825883a 	mov	r18,r3
 8002e24:	01400284 	movi	r5,10
 8002e28:	800c3600 	call	800c360 <__mulsi3>
 8002e2c:	88c00007 	ldb	r3,0(r17)
 8002e30:	1509883a 	add	r4,r2,r20
 8002e34:	8c400044 	addi	r17,r17,1
 8002e38:	1d3ff404 	addi	r20,r3,-48
 8002e3c:	8805883a 	mov	r2,r17
 8002e40:	ad3ff82e 	bgeu	r21,r20,8002e24 <__alt_data_end+0xf8002e24>
 8002e44:	d9013015 	stw	r4,1216(sp)
 8002e48:	9009883a 	mov	r4,r18
 8002e4c:	1023883a 	mov	r17,r2
 8002e50:	1825883a 	mov	r18,r3
 8002e54:	2007883a 	mov	r3,r4
 8002e58:	003dd506 	br	80025b0 <__alt_data_end+0xf80025b0>
 8002e5c:	d8812a17 	ldw	r2,1192(sp)
 8002e60:	10800214 	ori	r2,r2,8
 8002e64:	d8812a15 	stw	r2,1192(sp)
 8002e68:	8c800007 	ldb	r18,0(r17)
 8002e6c:	003dcf06 	br	80025ac <__alt_data_end+0xf80025ac>
 8002e70:	d9012a17 	ldw	r4,1192(sp)
 8002e74:	e011883a 	mov	r8,fp
 8002e78:	1829883a 	mov	r20,r3
 8002e7c:	21000414 	ori	r4,r4,16
 8002e80:	d9012a15 	stw	r4,1192(sp)
 8002e84:	d9412a17 	ldw	r5,1192(sp)
 8002e88:	2880080c 	andi	r2,r5,32
 8002e8c:	1000cf26 	beq	r2,zero,80031cc <___vfprintf_internal_r+0xdb4>
 8002e90:	d8812f17 	ldw	r2,1212(sp)
 8002e94:	0007883a 	mov	r3,zero
 8002e98:	15400017 	ldw	r21,0(r2)
 8002e9c:	15800117 	ldw	r22,4(r2)
 8002ea0:	10800204 	addi	r2,r2,8
 8002ea4:	d8812f15 	stw	r2,1212(sp)
 8002ea8:	ad84b03a 	or	r2,r21,r22
 8002eac:	d8012785 	stb	zero,1182(sp)
 8002eb0:	0039883a 	mov	fp,zero
 8002eb4:	003eab06 	br	8002964 <__alt_data_end+0xf8002964>
 8002eb8:	d9012a17 	ldw	r4,1192(sp)
 8002ebc:	e011883a 	mov	r8,fp
 8002ec0:	1829883a 	mov	r20,r3
 8002ec4:	21000414 	ori	r4,r4,16
 8002ec8:	d9012a15 	stw	r4,1192(sp)
 8002ecc:	d9412a17 	ldw	r5,1192(sp)
 8002ed0:	2880080c 	andi	r2,r5,32
 8002ed4:	1000cd26 	beq	r2,zero,800320c <___vfprintf_internal_r+0xdf4>
 8002ed8:	d8812f17 	ldw	r2,1212(sp)
 8002edc:	00c00044 	movi	r3,1
 8002ee0:	15400017 	ldw	r21,0(r2)
 8002ee4:	15800117 	ldw	r22,4(r2)
 8002ee8:	10800204 	addi	r2,r2,8
 8002eec:	d8812f15 	stw	r2,1212(sp)
 8002ef0:	ad84b03a 	or	r2,r21,r22
 8002ef4:	003fed06 	br	8002eac <__alt_data_end+0xf8002eac>
 8002ef8:	d9012a17 	ldw	r4,1192(sp)
 8002efc:	dd812785 	stb	r22,1182(sp)
 8002f00:	e011883a 	mov	r8,fp
 8002f04:	2080080c 	andi	r2,r4,32
 8002f08:	10039226 	beq	r2,zero,8003d54 <___vfprintf_internal_r+0x193c>
 8002f0c:	d9412f17 	ldw	r5,1212(sp)
 8002f10:	d9013117 	ldw	r4,1220(sp)
 8002f14:	28800017 	ldw	r2,0(r5)
 8002f18:	2007d7fa 	srai	r3,r4,31
 8002f1c:	29400104 	addi	r5,r5,4
 8002f20:	d9412f15 	stw	r5,1212(sp)
 8002f24:	11000015 	stw	r4,0(r2)
 8002f28:	10c00115 	stw	r3,4(r2)
 8002f2c:	003d7806 	br	8002510 <__alt_data_end+0xf8002510>
 8002f30:	d8c12f17 	ldw	r3,1212(sp)
 8002f34:	d9012f17 	ldw	r4,1212(sp)
 8002f38:	e011883a 	mov	r8,fp
 8002f3c:	18800017 	ldw	r2,0(r3)
 8002f40:	21000104 	addi	r4,r4,4
 8002f44:	00c00044 	movi	r3,1
 8002f48:	d8c12b15 	stw	r3,1196(sp)
 8002f4c:	d8012785 	stb	zero,1182(sp)
 8002f50:	d8810405 	stb	r2,1040(sp)
 8002f54:	d9012f15 	stw	r4,1212(sp)
 8002f58:	d8c12e15 	stw	r3,1208(sp)
 8002f5c:	0029883a 	mov	r20,zero
 8002f60:	d8013315 	stw	zero,1228(sp)
 8002f64:	dc010404 	addi	r16,sp,1040
 8002f68:	0005883a 	mov	r2,zero
 8002f6c:	003e9a06 	br	80029d8 <__alt_data_end+0xf80029d8>
 8002f70:	d9412a17 	ldw	r5,1192(sp)
 8002f74:	01020074 	movhi	r4,2049
 8002f78:	2106ad04 	addi	r4,r4,6836
 8002f7c:	dd812785 	stb	r22,1182(sp)
 8002f80:	d9013b15 	stw	r4,1260(sp)
 8002f84:	2880080c 	andi	r2,r5,32
 8002f88:	e011883a 	mov	r8,fp
 8002f8c:	1829883a 	mov	r20,r3
 8002f90:	10002f26 	beq	r2,zero,8003050 <___vfprintf_internal_r+0xc38>
 8002f94:	d8812f17 	ldw	r2,1212(sp)
 8002f98:	15400017 	ldw	r21,0(r2)
 8002f9c:	15800117 	ldw	r22,4(r2)
 8002fa0:	10800204 	addi	r2,r2,8
 8002fa4:	d8812f15 	stw	r2,1212(sp)
 8002fa8:	d9012a17 	ldw	r4,1192(sp)
 8002fac:	2080004c 	andi	r2,r4,1
 8002fb0:	10025f26 	beq	r2,zero,8003930 <___vfprintf_internal_r+0x1518>
 8002fb4:	ad84b03a 	or	r2,r21,r22
 8002fb8:	10034e26 	beq	r2,zero,8003cf4 <___vfprintf_internal_r+0x18dc>
 8002fbc:	00c00c04 	movi	r3,48
 8002fc0:	21000094 	ori	r4,r4,2
 8002fc4:	d8c12705 	stb	r3,1180(sp)
 8002fc8:	dc812745 	stb	r18,1181(sp)
 8002fcc:	d9012a15 	stw	r4,1192(sp)
 8002fd0:	00c00084 	movi	r3,2
 8002fd4:	003fb506 	br	8002eac <__alt_data_end+0xf8002eac>
 8002fd8:	b0803fcc 	andi	r2,r22,255
 8002fdc:	1080201c 	xori	r2,r2,128
 8002fe0:	10bfe004 	addi	r2,r2,-128
 8002fe4:	1003501e 	bne	r2,zero,8003d28 <___vfprintf_internal_r+0x1910>
 8002fe8:	05800804 	movi	r22,32
 8002fec:	8c800007 	ldb	r18,0(r17)
 8002ff0:	003d6e06 	br	80025ac <__alt_data_end+0xf80025ac>
 8002ff4:	d9012a17 	ldw	r4,1192(sp)
 8002ff8:	21000054 	ori	r4,r4,1
 8002ffc:	d9012a15 	stw	r4,1192(sp)
 8003000:	8c800007 	ldb	r18,0(r17)
 8003004:	003d6906 	br	80025ac <__alt_data_end+0xf80025ac>
 8003008:	d9412f17 	ldw	r5,1212(sp)
 800300c:	d9012f17 	ldw	r4,1212(sp)
 8003010:	29400017 	ldw	r5,0(r5)
 8003014:	20800104 	addi	r2,r4,4
 8003018:	d9413015 	stw	r5,1216(sp)
 800301c:	283dc616 	blt	r5,zero,8002738 <__alt_data_end+0xf8002738>
 8003020:	d8812f15 	stw	r2,1212(sp)
 8003024:	8c800007 	ldb	r18,0(r17)
 8003028:	003d6006 	br	80025ac <__alt_data_end+0xf80025ac>
 800302c:	d9412a17 	ldw	r5,1192(sp)
 8003030:	00820074 	movhi	r2,2049
 8003034:	1086a804 	addi	r2,r2,6816
 8003038:	d8813b15 	stw	r2,1260(sp)
 800303c:	dd812785 	stb	r22,1182(sp)
 8003040:	2880080c 	andi	r2,r5,32
 8003044:	e011883a 	mov	r8,fp
 8003048:	1829883a 	mov	r20,r3
 800304c:	103fd11e 	bne	r2,zero,8002f94 <__alt_data_end+0xf8002f94>
 8003050:	d8c12a17 	ldw	r3,1192(sp)
 8003054:	1880040c 	andi	r2,r3,16
 8003058:	10033526 	beq	r2,zero,8003d30 <___vfprintf_internal_r+0x1918>
 800305c:	d9012f17 	ldw	r4,1212(sp)
 8003060:	002d883a 	mov	r22,zero
 8003064:	25400017 	ldw	r21,0(r4)
 8003068:	21000104 	addi	r4,r4,4
 800306c:	d9012f15 	stw	r4,1212(sp)
 8003070:	003fcd06 	br	8002fa8 <__alt_data_end+0xf8002fa8>
 8003074:	d9012a17 	ldw	r4,1192(sp)
 8003078:	21001014 	ori	r4,r4,64
 800307c:	d9012a15 	stw	r4,1192(sp)
 8003080:	8c800007 	ldb	r18,0(r17)
 8003084:	003d4906 	br	80025ac <__alt_data_end+0xf80025ac>
 8003088:	8c800007 	ldb	r18,0(r17)
 800308c:	01401b04 	movi	r5,108
 8003090:	8805883a 	mov	r2,r17
 8003094:	9143db26 	beq	r18,r5,8004004 <___vfprintf_internal_r+0x1bec>
 8003098:	d9412a17 	ldw	r5,1192(sp)
 800309c:	29400414 	ori	r5,r5,16
 80030a0:	d9412a15 	stw	r5,1192(sp)
 80030a4:	003d4106 	br	80025ac <__alt_data_end+0xf80025ac>
 80030a8:	1829883a 	mov	r20,r3
 80030ac:	d8c12a17 	ldw	r3,1192(sp)
 80030b0:	dd812785 	stb	r22,1182(sp)
 80030b4:	e011883a 	mov	r8,fp
 80030b8:	1880080c 	andi	r2,r3,32
 80030bc:	103e1f1e 	bne	r2,zero,800293c <__alt_data_end+0xf800293c>
 80030c0:	d9412a17 	ldw	r5,1192(sp)
 80030c4:	2880040c 	andi	r2,r5,16
 80030c8:	10032f26 	beq	r2,zero,8003d88 <___vfprintf_internal_r+0x1970>
 80030cc:	d8812f17 	ldw	r2,1212(sp)
 80030d0:	15400017 	ldw	r21,0(r2)
 80030d4:	10800104 	addi	r2,r2,4
 80030d8:	d8812f15 	stw	r2,1212(sp)
 80030dc:	a82dd7fa 	srai	r22,r21,31
 80030e0:	b005883a 	mov	r2,r22
 80030e4:	003e1b06 	br	8002954 <__alt_data_end+0xf8002954>
 80030e8:	d8812a17 	ldw	r2,1192(sp)
 80030ec:	10800814 	ori	r2,r2,32
 80030f0:	d8812a15 	stw	r2,1192(sp)
 80030f4:	8c800007 	ldb	r18,0(r17)
 80030f8:	003d2c06 	br	80025ac <__alt_data_end+0xf80025ac>
 80030fc:	1829883a 	mov	r20,r3
 8003100:	d8c12f17 	ldw	r3,1212(sp)
 8003104:	d8012785 	stb	zero,1182(sp)
 8003108:	e011883a 	mov	r8,fp
 800310c:	1c000017 	ldw	r16,0(r3)
 8003110:	1d400104 	addi	r21,r3,4
 8003114:	80040226 	beq	r16,zero,8004120 <___vfprintf_internal_r+0x1d08>
 8003118:	8009883a 	mov	r4,r16
 800311c:	a003c716 	blt	r20,zero,800403c <___vfprintf_internal_r+0x1c24>
 8003120:	000b883a 	mov	r5,zero
 8003124:	a00d883a 	mov	r6,r20
 8003128:	df013f15 	stw	fp,1276(sp)
 800312c:	80079a80 	call	80079a8 <memchr>
 8003130:	da013f17 	ldw	r8,1276(sp)
 8003134:	10044326 	beq	r2,zero,8004244 <___vfprintf_internal_r+0x1e2c>
 8003138:	1405c83a 	sub	r2,r2,r16
 800313c:	d8812e15 	stw	r2,1208(sp)
 8003140:	a0837c16 	blt	r20,r2,8003f34 <___vfprintf_internal_r+0x1b1c>
 8003144:	d8812e17 	ldw	r2,1208(sp)
 8003148:	1003c116 	blt	r2,zero,8004050 <___vfprintf_internal_r+0x1c38>
 800314c:	df012783 	ldbu	fp,1182(sp)
 8003150:	d8812b15 	stw	r2,1196(sp)
 8003154:	dd412f15 	stw	r21,1212(sp)
 8003158:	0029883a 	mov	r20,zero
 800315c:	d8013315 	stw	zero,1228(sp)
 8003160:	003e1606 	br	80029bc <__alt_data_end+0xf80029bc>
 8003164:	d9012f17 	ldw	r4,1212(sp)
 8003168:	d9412a17 	ldw	r5,1192(sp)
 800316c:	00800c04 	movi	r2,48
 8003170:	25400017 	ldw	r21,0(r4)
 8003174:	d8812705 	stb	r2,1180(sp)
 8003178:	00801e04 	movi	r2,120
 800317c:	29400094 	ori	r5,r5,2
 8003180:	d8812745 	stb	r2,1181(sp)
 8003184:	21000104 	addi	r4,r4,4
 8003188:	00820074 	movhi	r2,2049
 800318c:	1086ad04 	addi	r2,r2,6836
 8003190:	1829883a 	mov	r20,r3
 8003194:	d8813b15 	stw	r2,1260(sp)
 8003198:	e011883a 	mov	r8,fp
 800319c:	002d883a 	mov	r22,zero
 80031a0:	d9412a15 	stw	r5,1192(sp)
 80031a4:	d9012f15 	stw	r4,1212(sp)
 80031a8:	00c00084 	movi	r3,2
 80031ac:	04801e04 	movi	r18,120
 80031b0:	a805883a 	mov	r2,r21
 80031b4:	003f3d06 	br	8002eac <__alt_data_end+0xf8002eac>
 80031b8:	d9412a17 	ldw	r5,1192(sp)
 80031bc:	e011883a 	mov	r8,fp
 80031c0:	1829883a 	mov	r20,r3
 80031c4:	2880080c 	andi	r2,r5,32
 80031c8:	103f311e 	bne	r2,zero,8002e90 <__alt_data_end+0xf8002e90>
 80031cc:	d8c12a17 	ldw	r3,1192(sp)
 80031d0:	1880040c 	andi	r2,r3,16
 80031d4:	1002c926 	beq	r2,zero,8003cfc <___vfprintf_internal_r+0x18e4>
 80031d8:	d9012f17 	ldw	r4,1212(sp)
 80031dc:	002d883a 	mov	r22,zero
 80031e0:	0007883a 	mov	r3,zero
 80031e4:	25400017 	ldw	r21,0(r4)
 80031e8:	21000104 	addi	r4,r4,4
 80031ec:	d9012f15 	stw	r4,1212(sp)
 80031f0:	a805883a 	mov	r2,r21
 80031f4:	003f2d06 	br	8002eac <__alt_data_end+0xf8002eac>
 80031f8:	d9412a17 	ldw	r5,1192(sp)
 80031fc:	e011883a 	mov	r8,fp
 8003200:	1829883a 	mov	r20,r3
 8003204:	2880080c 	andi	r2,r5,32
 8003208:	103f331e 	bne	r2,zero,8002ed8 <__alt_data_end+0xf8002ed8>
 800320c:	d8c12a17 	ldw	r3,1192(sp)
 8003210:	1880040c 	andi	r2,r3,16
 8003214:	1002ac26 	beq	r2,zero,8003cc8 <___vfprintf_internal_r+0x18b0>
 8003218:	d9012f17 	ldw	r4,1212(sp)
 800321c:	002d883a 	mov	r22,zero
 8003220:	00c00044 	movi	r3,1
 8003224:	25400017 	ldw	r21,0(r4)
 8003228:	21000104 	addi	r4,r4,4
 800322c:	d9012f15 	stw	r4,1212(sp)
 8003230:	a805883a 	mov	r2,r21
 8003234:	003f1d06 	br	8002eac <__alt_data_end+0xf8002eac>
 8003238:	dd812785 	stb	r22,1182(sp)
 800323c:	e011883a 	mov	r8,fp
 8003240:	903d8b26 	beq	r18,zero,8002870 <__alt_data_end+0xf8002870>
 8003244:	00c00044 	movi	r3,1
 8003248:	d8c12b15 	stw	r3,1196(sp)
 800324c:	dc810405 	stb	r18,1040(sp)
 8003250:	d8012785 	stb	zero,1182(sp)
 8003254:	003f4006 	br	8002f58 <__alt_data_end+0xf8002f58>
 8003258:	d8c12017 	ldw	r3,1152(sp)
 800325c:	003e2106 	br	8002ae4 <__alt_data_end+0xf8002ae4>
 8003260:	45400015 	stw	r21,0(r8)
 8003264:	44000115 	stw	r16,4(r8)
 8003268:	1c07883a 	add	r3,r3,r16
 800326c:	10800044 	addi	r2,r2,1
 8003270:	d8c12015 	stw	r3,1152(sp)
 8003274:	d8811f15 	stw	r2,1148(sp)
 8003278:	010001c4 	movi	r4,7
 800327c:	20be750e 	bge	r4,r2,8002c54 <__alt_data_end+0xf8002c54>
 8003280:	d9012c17 	ldw	r4,1200(sp)
 8003284:	980b883a 	mov	r5,r19
 8003288:	d9811e04 	addi	r6,sp,1144
 800328c:	80097200 	call	8009720 <__sprint_r>
 8003290:	103d7d1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003294:	d8c12017 	ldw	r3,1152(sp)
 8003298:	da000404 	addi	r8,sp,16
 800329c:	003e6e06 	br	8002c58 <__alt_data_end+0xf8002c58>
 80032a0:	18803fcc 	andi	r2,r3,255
 80032a4:	00c00044 	movi	r3,1
 80032a8:	10c11926 	beq	r2,r3,8003710 <___vfprintf_internal_r+0x12f8>
 80032ac:	00c00084 	movi	r3,2
 80032b0:	10c0e41e 	bne	r2,r3,8003644 <___vfprintf_internal_r+0x122c>
 80032b4:	d9413b17 	ldw	r5,1260(sp)
 80032b8:	d8c10dc4 	addi	r3,sp,1079
 80032bc:	a88003cc 	andi	r2,r21,15
 80032c0:	b008973a 	slli	r4,r22,28
 80032c4:	2885883a 	add	r2,r5,r2
 80032c8:	a82ad13a 	srli	r21,r21,4
 80032cc:	10800003 	ldbu	r2,0(r2)
 80032d0:	b02cd13a 	srli	r22,r22,4
 80032d4:	256ab03a 	or	r21,r4,r21
 80032d8:	18800005 	stb	r2,0(r3)
 80032dc:	ad84b03a 	or	r2,r21,r22
 80032e0:	1821883a 	mov	r16,r3
 80032e4:	18ffffc4 	addi	r3,r3,-1
 80032e8:	103ff41e 	bne	r2,zero,80032bc <__alt_data_end+0xf80032bc>
 80032ec:	d8c12917 	ldw	r3,1188(sp)
 80032f0:	1c07c83a 	sub	r3,r3,r16
 80032f4:	d8c12e15 	stw	r3,1208(sp)
 80032f8:	003dab06 	br	80029a8 <__alt_data_end+0xf80029a8>
 80032fc:	00801944 	movi	r2,101
 8003300:	14807e0e 	bge	r2,r18,80034fc <___vfprintf_internal_r+0x10e4>
 8003304:	d9013717 	ldw	r4,1244(sp)
 8003308:	d9413917 	ldw	r5,1252(sp)
 800330c:	000d883a 	mov	r6,zero
 8003310:	000f883a 	mov	r7,zero
 8003314:	d8c13e15 	stw	r3,1272(sp)
 8003318:	da013f15 	stw	r8,1276(sp)
 800331c:	800d5a00 	call	800d5a0 <__eqdf2>
 8003320:	d8c13e17 	ldw	r3,1272(sp)
 8003324:	da013f17 	ldw	r8,1276(sp)
 8003328:	1001211e 	bne	r2,zero,80037b0 <___vfprintf_internal_r+0x1398>
 800332c:	d8811f17 	ldw	r2,1148(sp)
 8003330:	01000044 	movi	r4,1
 8003334:	18c00044 	addi	r3,r3,1
 8003338:	10800044 	addi	r2,r2,1
 800333c:	01420074 	movhi	r5,2049
 8003340:	2946b404 	addi	r5,r5,6864
 8003344:	41000115 	stw	r4,4(r8)
 8003348:	41400015 	stw	r5,0(r8)
 800334c:	d8c12015 	stw	r3,1152(sp)
 8003350:	d8811f15 	stw	r2,1148(sp)
 8003354:	010001c4 	movi	r4,7
 8003358:	2082a316 	blt	r4,r2,8003de8 <___vfprintf_internal_r+0x19d0>
 800335c:	42000204 	addi	r8,r8,8
 8003360:	d8812617 	ldw	r2,1176(sp)
 8003364:	d9013517 	ldw	r4,1236(sp)
 8003368:	11000316 	blt	r2,r4,8003378 <___vfprintf_internal_r+0xf60>
 800336c:	d9412a17 	ldw	r5,1192(sp)
 8003370:	2880004c 	andi	r2,r5,1
 8003374:	103e3826 	beq	r2,zero,8002c58 <__alt_data_end+0xf8002c58>
 8003378:	d8813817 	ldw	r2,1248(sp)
 800337c:	d9013417 	ldw	r4,1232(sp)
 8003380:	d9413817 	ldw	r5,1248(sp)
 8003384:	1887883a 	add	r3,r3,r2
 8003388:	d8811f17 	ldw	r2,1148(sp)
 800338c:	41000015 	stw	r4,0(r8)
 8003390:	41400115 	stw	r5,4(r8)
 8003394:	10800044 	addi	r2,r2,1
 8003398:	d8c12015 	stw	r3,1152(sp)
 800339c:	d8811f15 	stw	r2,1148(sp)
 80033a0:	010001c4 	movi	r4,7
 80033a4:	20831d16 	blt	r4,r2,800401c <___vfprintf_internal_r+0x1c04>
 80033a8:	42000204 	addi	r8,r8,8
 80033ac:	d8813517 	ldw	r2,1236(sp)
 80033b0:	143fffc4 	addi	r16,r2,-1
 80033b4:	043e280e 	bge	zero,r16,8002c58 <__alt_data_end+0xf8002c58>
 80033b8:	04800404 	movi	r18,16
 80033bc:	d8811f17 	ldw	r2,1148(sp)
 80033c0:	05420074 	movhi	r21,2049
 80033c4:	ad46b484 	addi	r21,r21,6866
 80033c8:	943fa50e 	bge	r18,r16,8003260 <__alt_data_end+0xf8003260>
 80033cc:	050001c4 	movi	r20,7
 80033d0:	dd812c17 	ldw	r22,1200(sp)
 80033d4:	00000306 	br	80033e4 <___vfprintf_internal_r+0xfcc>
 80033d8:	42000204 	addi	r8,r8,8
 80033dc:	843ffc04 	addi	r16,r16,-16
 80033e0:	943f9f0e 	bge	r18,r16,8003260 <__alt_data_end+0xf8003260>
 80033e4:	18c00404 	addi	r3,r3,16
 80033e8:	10800044 	addi	r2,r2,1
 80033ec:	45c00015 	stw	r23,0(r8)
 80033f0:	44800115 	stw	r18,4(r8)
 80033f4:	d8c12015 	stw	r3,1152(sp)
 80033f8:	d8811f15 	stw	r2,1148(sp)
 80033fc:	a0bff60e 	bge	r20,r2,80033d8 <__alt_data_end+0xf80033d8>
 8003400:	b009883a 	mov	r4,r22
 8003404:	980b883a 	mov	r5,r19
 8003408:	d9811e04 	addi	r6,sp,1144
 800340c:	80097200 	call	8009720 <__sprint_r>
 8003410:	103d1d1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003414:	d8c12017 	ldw	r3,1152(sp)
 8003418:	d8811f17 	ldw	r2,1148(sp)
 800341c:	da000404 	addi	r8,sp,16
 8003420:	003fee06 	br	80033dc <__alt_data_end+0xf80033dc>
 8003424:	d9413017 	ldw	r5,1216(sp)
 8003428:	d8812b17 	ldw	r2,1196(sp)
 800342c:	28adc83a 	sub	r22,r5,r2
 8003430:	05bdca0e 	bge	zero,r22,8002b5c <__alt_data_end+0xf8002b5c>
 8003434:	07000404 	movi	fp,16
 8003438:	d8811f17 	ldw	r2,1148(sp)
 800343c:	05420074 	movhi	r21,2049
 8003440:	ad46b484 	addi	r21,r21,6866
 8003444:	e580230e 	bge	fp,r22,80034d4 <___vfprintf_internal_r+0x10bc>
 8003448:	a809883a 	mov	r4,r21
 800344c:	dc012d15 	stw	r16,1204(sp)
 8003450:	882b883a 	mov	r21,r17
 8003454:	01c001c4 	movi	r7,7
 8003458:	b023883a 	mov	r17,r22
 800345c:	dc012c17 	ldw	r16,1200(sp)
 8003460:	202d883a 	mov	r22,r4
 8003464:	00000306 	br	8003474 <___vfprintf_internal_r+0x105c>
 8003468:	8c7ffc04 	addi	r17,r17,-16
 800346c:	42000204 	addi	r8,r8,8
 8003470:	e440130e 	bge	fp,r17,80034c0 <___vfprintf_internal_r+0x10a8>
 8003474:	18c00404 	addi	r3,r3,16
 8003478:	10800044 	addi	r2,r2,1
 800347c:	45c00015 	stw	r23,0(r8)
 8003480:	47000115 	stw	fp,4(r8)
 8003484:	d8c12015 	stw	r3,1152(sp)
 8003488:	d8811f15 	stw	r2,1148(sp)
 800348c:	38bff60e 	bge	r7,r2,8003468 <__alt_data_end+0xf8003468>
 8003490:	8009883a 	mov	r4,r16
 8003494:	980b883a 	mov	r5,r19
 8003498:	d9811e04 	addi	r6,sp,1144
 800349c:	d9c13e15 	stw	r7,1272(sp)
 80034a0:	80097200 	call	8009720 <__sprint_r>
 80034a4:	d9c13e17 	ldw	r7,1272(sp)
 80034a8:	103cf71e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 80034ac:	8c7ffc04 	addi	r17,r17,-16
 80034b0:	d8c12017 	ldw	r3,1152(sp)
 80034b4:	d8811f17 	ldw	r2,1148(sp)
 80034b8:	da000404 	addi	r8,sp,16
 80034bc:	e47fed16 	blt	fp,r17,8003474 <__alt_data_end+0xf8003474>
 80034c0:	dc012d17 	ldw	r16,1204(sp)
 80034c4:	b009883a 	mov	r4,r22
 80034c8:	882d883a 	mov	r22,r17
 80034cc:	a823883a 	mov	r17,r21
 80034d0:	202b883a 	mov	r21,r4
 80034d4:	1d87883a 	add	r3,r3,r22
 80034d8:	10800044 	addi	r2,r2,1
 80034dc:	45400015 	stw	r21,0(r8)
 80034e0:	45800115 	stw	r22,4(r8)
 80034e4:	d8c12015 	stw	r3,1152(sp)
 80034e8:	d8811f15 	stw	r2,1148(sp)
 80034ec:	010001c4 	movi	r4,7
 80034f0:	20817a16 	blt	r4,r2,8003adc <___vfprintf_internal_r+0x16c4>
 80034f4:	42000204 	addi	r8,r8,8
 80034f8:	003d9806 	br	8002b5c <__alt_data_end+0xf8002b5c>
 80034fc:	d9013517 	ldw	r4,1236(sp)
 8003500:	00800044 	movi	r2,1
 8003504:	1100340e 	bge	r2,r4,80035d8 <___vfprintf_internal_r+0x11c0>
 8003508:	dc811f17 	ldw	r18,1148(sp)
 800350c:	00800044 	movi	r2,1
 8003510:	18c00044 	addi	r3,r3,1
 8003514:	94800044 	addi	r18,r18,1
 8003518:	40800115 	stw	r2,4(r8)
 800351c:	44000015 	stw	r16,0(r8)
 8003520:	d8c12015 	stw	r3,1152(sp)
 8003524:	dc811f15 	stw	r18,1148(sp)
 8003528:	008001c4 	movi	r2,7
 800352c:	14814e16 	blt	r2,r18,8003a68 <___vfprintf_internal_r+0x1650>
 8003530:	42000204 	addi	r8,r8,8
 8003534:	d8813817 	ldw	r2,1248(sp)
 8003538:	94800044 	addi	r18,r18,1
 800353c:	dc811f15 	stw	r18,1148(sp)
 8003540:	18ad883a 	add	r22,r3,r2
 8003544:	d8c13417 	ldw	r3,1232(sp)
 8003548:	40800115 	stw	r2,4(r8)
 800354c:	dd812015 	stw	r22,1152(sp)
 8003550:	40c00015 	stw	r3,0(r8)
 8003554:	008001c4 	movi	r2,7
 8003558:	14814c16 	blt	r2,r18,8003a8c <___vfprintf_internal_r+0x1674>
 800355c:	45000204 	addi	r20,r8,8
 8003560:	d9013717 	ldw	r4,1244(sp)
 8003564:	d9413917 	ldw	r5,1252(sp)
 8003568:	000d883a 	mov	r6,zero
 800356c:	000f883a 	mov	r7,zero
 8003570:	800d5a00 	call	800d5a0 <__eqdf2>
 8003574:	1000cd26 	beq	r2,zero,80038ac <___vfprintf_internal_r+0x1494>
 8003578:	d9013517 	ldw	r4,1236(sp)
 800357c:	84000044 	addi	r16,r16,1
 8003580:	94800044 	addi	r18,r18,1
 8003584:	20bfffc4 	addi	r2,r4,-1
 8003588:	b0ad883a 	add	r22,r22,r2
 800358c:	a0800115 	stw	r2,4(r20)
 8003590:	a4000015 	stw	r16,0(r20)
 8003594:	dd812015 	stw	r22,1152(sp)
 8003598:	dc811f15 	stw	r18,1148(sp)
 800359c:	008001c4 	movi	r2,7
 80035a0:	14801916 	blt	r2,r18,8003608 <___vfprintf_internal_r+0x11f0>
 80035a4:	a5000204 	addi	r20,r20,8
 80035a8:	d9013a17 	ldw	r4,1256(sp)
 80035ac:	d88122c4 	addi	r2,sp,1163
 80035b0:	94800044 	addi	r18,r18,1
 80035b4:	2587883a 	add	r3,r4,r22
 80035b8:	a0800015 	stw	r2,0(r20)
 80035bc:	a1000115 	stw	r4,4(r20)
 80035c0:	d8c12015 	stw	r3,1152(sp)
 80035c4:	dc811f15 	stw	r18,1148(sp)
 80035c8:	008001c4 	movi	r2,7
 80035cc:	14bf2c16 	blt	r2,r18,8003280 <__alt_data_end+0xf8003280>
 80035d0:	a2000204 	addi	r8,r20,8
 80035d4:	003da006 	br	8002c58 <__alt_data_end+0xf8002c58>
 80035d8:	d9412a17 	ldw	r5,1192(sp)
 80035dc:	2888703a 	and	r4,r5,r2
 80035e0:	203fc91e 	bne	r4,zero,8003508 <__alt_data_end+0xf8003508>
 80035e4:	dc811f17 	ldw	r18,1148(sp)
 80035e8:	1d800044 	addi	r22,r3,1
 80035ec:	40800115 	stw	r2,4(r8)
 80035f0:	94800044 	addi	r18,r18,1
 80035f4:	44000015 	stw	r16,0(r8)
 80035f8:	dd812015 	stw	r22,1152(sp)
 80035fc:	dc811f15 	stw	r18,1148(sp)
 8003600:	008001c4 	movi	r2,7
 8003604:	1482740e 	bge	r2,r18,8003fd8 <___vfprintf_internal_r+0x1bc0>
 8003608:	d9012c17 	ldw	r4,1200(sp)
 800360c:	980b883a 	mov	r5,r19
 8003610:	d9811e04 	addi	r6,sp,1144
 8003614:	80097200 	call	8009720 <__sprint_r>
 8003618:	103c9b1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 800361c:	dd812017 	ldw	r22,1152(sp)
 8003620:	dc811f17 	ldw	r18,1148(sp)
 8003624:	dd000404 	addi	r20,sp,16
 8003628:	003fdf06 	br	80035a8 <__alt_data_end+0xf80035a8>
 800362c:	d9012c17 	ldw	r4,1200(sp)
 8003630:	980b883a 	mov	r5,r19
 8003634:	d9811e04 	addi	r6,sp,1144
 8003638:	80097200 	call	8009720 <__sprint_r>
 800363c:	103dc326 	beq	r2,zero,8002d4c <__alt_data_end+0xf8002d4c>
 8003640:	003c9106 	br	8002888 <__alt_data_end+0xf8002888>
 8003644:	d8c10dc4 	addi	r3,sp,1079
 8003648:	a808d0fa 	srli	r4,r21,3
 800364c:	b00a977a 	slli	r5,r22,29
 8003650:	b02cd0fa 	srli	r22,r22,3
 8003654:	ad4001cc 	andi	r21,r21,7
 8003658:	a8800c04 	addi	r2,r21,48
 800365c:	292ab03a 	or	r21,r5,r4
 8003660:	18800005 	stb	r2,0(r3)
 8003664:	ad88b03a 	or	r4,r21,r22
 8003668:	1821883a 	mov	r16,r3
 800366c:	18ffffc4 	addi	r3,r3,-1
 8003670:	203ff51e 	bne	r4,zero,8003648 <__alt_data_end+0xf8003648>
 8003674:	d9412a17 	ldw	r5,1192(sp)
 8003678:	2900004c 	andi	r4,r5,1
 800367c:	800b883a 	mov	r5,r16
 8003680:	203f1a26 	beq	r4,zero,80032ec <__alt_data_end+0xf80032ec>
 8003684:	10803fcc 	andi	r2,r2,255
 8003688:	1080201c 	xori	r2,r2,128
 800368c:	10bfe004 	addi	r2,r2,-128
 8003690:	01000c04 	movi	r4,48
 8003694:	113f1526 	beq	r2,r4,80032ec <__alt_data_end+0xf80032ec>
 8003698:	1821883a 	mov	r16,r3
 800369c:	d8c12917 	ldw	r3,1188(sp)
 80036a0:	293fffc5 	stb	r4,-1(r5)
 80036a4:	1c07c83a 	sub	r3,r3,r16
 80036a8:	d8c12e15 	stw	r3,1208(sp)
 80036ac:	003cbe06 	br	80029a8 <__alt_data_end+0xf80029a8>
 80036b0:	d9012c17 	ldw	r4,1200(sp)
 80036b4:	980b883a 	mov	r5,r19
 80036b8:	d9811e04 	addi	r6,sp,1144
 80036bc:	80097200 	call	8009720 <__sprint_r>
 80036c0:	103c711e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 80036c4:	d8c12017 	ldw	r3,1152(sp)
 80036c8:	da000404 	addi	r8,sp,16
 80036cc:	003d5306 	br	8002c1c <__alt_data_end+0xf8002c1c>
 80036d0:	d9012c17 	ldw	r4,1200(sp)
 80036d4:	980b883a 	mov	r5,r19
 80036d8:	d9811e04 	addi	r6,sp,1144
 80036dc:	80097200 	call	8009720 <__sprint_r>
 80036e0:	103c691e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 80036e4:	d8c12017 	ldw	r3,1152(sp)
 80036e8:	da000404 	addi	r8,sp,16
 80036ec:	003d0a06 	br	8002b18 <__alt_data_end+0xf8002b18>
 80036f0:	d9012c17 	ldw	r4,1200(sp)
 80036f4:	980b883a 	mov	r5,r19
 80036f8:	d9811e04 	addi	r6,sp,1144
 80036fc:	80097200 	call	8009720 <__sprint_r>
 8003700:	103c611e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003704:	d8c12017 	ldw	r3,1152(sp)
 8003708:	da000404 	addi	r8,sp,16
 800370c:	003d1006 	br	8002b50 <__alt_data_end+0xf8002b50>
 8003710:	b000021e 	bne	r22,zero,800371c <___vfprintf_internal_r+0x1304>
 8003714:	00800244 	movi	r2,9
 8003718:	15401c2e 	bgeu	r2,r21,800378c <___vfprintf_internal_r+0x1374>
 800371c:	dc412b15 	stw	r17,1196(sp)
 8003720:	d8810dc4 	addi	r2,sp,1079
 8003724:	b023883a 	mov	r17,r22
 8003728:	402d883a 	mov	r22,r8
 800372c:	a809883a 	mov	r4,r21
 8003730:	880b883a 	mov	r5,r17
 8003734:	01800284 	movi	r6,10
 8003738:	000f883a 	mov	r7,zero
 800373c:	1021883a 	mov	r16,r2
 8003740:	800bc180 	call	800bc18 <__umoddi3>
 8003744:	10800c04 	addi	r2,r2,48
 8003748:	a809883a 	mov	r4,r21
 800374c:	880b883a 	mov	r5,r17
 8003750:	80800005 	stb	r2,0(r16)
 8003754:	01800284 	movi	r6,10
 8003758:	000f883a 	mov	r7,zero
 800375c:	800b5c40 	call	800b5c4 <__udivdi3>
 8003760:	1823883a 	mov	r17,r3
 8003764:	10c6b03a 	or	r3,r2,r3
 8003768:	102b883a 	mov	r21,r2
 800376c:	80bfffc4 	addi	r2,r16,-1
 8003770:	183fee1e 	bne	r3,zero,800372c <__alt_data_end+0xf800372c>
 8003774:	d8c12917 	ldw	r3,1188(sp)
 8003778:	b011883a 	mov	r8,r22
 800377c:	dc412b17 	ldw	r17,1196(sp)
 8003780:	1c07c83a 	sub	r3,r3,r16
 8003784:	d8c12e15 	stw	r3,1208(sp)
 8003788:	003c8706 	br	80029a8 <__alt_data_end+0xf80029a8>
 800378c:	d9013d17 	ldw	r4,1268(sp)
 8003790:	ad400c04 	addi	r21,r21,48
 8003794:	dd410dc5 	stb	r21,1079(sp)
 8003798:	d9012e15 	stw	r4,1208(sp)
 800379c:	dc010dc4 	addi	r16,sp,1079
 80037a0:	003c8106 	br	80029a8 <__alt_data_end+0xf80029a8>
 80037a4:	d8012e15 	stw	zero,1208(sp)
 80037a8:	dc010e04 	addi	r16,sp,1080
 80037ac:	003c7e06 	br	80029a8 <__alt_data_end+0xf80029a8>
 80037b0:	d8812617 	ldw	r2,1176(sp)
 80037b4:	0081940e 	bge	zero,r2,8003e08 <___vfprintf_internal_r+0x19f0>
 80037b8:	d9413517 	ldw	r5,1236(sp)
 80037bc:	d8813317 	ldw	r2,1228(sp)
 80037c0:	8165883a 	add	r18,r16,r5
 80037c4:	9429c83a 	sub	r20,r18,r16
 80037c8:	1500010e 	bge	r2,r20,80037d0 <___vfprintf_internal_r+0x13b8>
 80037cc:	1029883a 	mov	r20,r2
 80037d0:	05000a0e 	bge	zero,r20,80037fc <___vfprintf_internal_r+0x13e4>
 80037d4:	d8811f17 	ldw	r2,1148(sp)
 80037d8:	1d07883a 	add	r3,r3,r20
 80037dc:	44000015 	stw	r16,0(r8)
 80037e0:	10800044 	addi	r2,r2,1
 80037e4:	45000115 	stw	r20,4(r8)
 80037e8:	d8c12015 	stw	r3,1152(sp)
 80037ec:	d8811f15 	stw	r2,1148(sp)
 80037f0:	010001c4 	movi	r4,7
 80037f4:	20822b16 	blt	r4,r2,80040a4 <___vfprintf_internal_r+0x1c8c>
 80037f8:	42000204 	addi	r8,r8,8
 80037fc:	a0022716 	blt	r20,zero,800409c <___vfprintf_internal_r+0x1c84>
 8003800:	d9013317 	ldw	r4,1228(sp)
 8003804:	2529c83a 	sub	r20,r4,r20
 8003808:	0500530e 	bge	zero,r20,8003958 <___vfprintf_internal_r+0x1540>
 800380c:	05800404 	movi	r22,16
 8003810:	d8811f17 	ldw	r2,1148(sp)
 8003814:	05420074 	movhi	r21,2049
 8003818:	ad46b484 	addi	r21,r21,6866
 800381c:	b501680e 	bge	r22,r20,8003dc0 <___vfprintf_internal_r+0x19a8>
 8003820:	8809883a 	mov	r4,r17
 8003824:	dc012e15 	stw	r16,1208(sp)
 8003828:	a023883a 	mov	r17,r20
 800382c:	070001c4 	movi	fp,7
 8003830:	dc012c17 	ldw	r16,1200(sp)
 8003834:	2029883a 	mov	r20,r4
 8003838:	00000306 	br	8003848 <___vfprintf_internal_r+0x1430>
 800383c:	42000204 	addi	r8,r8,8
 8003840:	8c7ffc04 	addi	r17,r17,-16
 8003844:	b4415a0e 	bge	r22,r17,8003db0 <___vfprintf_internal_r+0x1998>
 8003848:	18c00404 	addi	r3,r3,16
 800384c:	10800044 	addi	r2,r2,1
 8003850:	45c00015 	stw	r23,0(r8)
 8003854:	45800115 	stw	r22,4(r8)
 8003858:	d8c12015 	stw	r3,1152(sp)
 800385c:	d8811f15 	stw	r2,1148(sp)
 8003860:	e0bff60e 	bge	fp,r2,800383c <__alt_data_end+0xf800383c>
 8003864:	8009883a 	mov	r4,r16
 8003868:	980b883a 	mov	r5,r19
 800386c:	d9811e04 	addi	r6,sp,1144
 8003870:	80097200 	call	8009720 <__sprint_r>
 8003874:	103c041e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003878:	d8c12017 	ldw	r3,1152(sp)
 800387c:	d8811f17 	ldw	r2,1148(sp)
 8003880:	da000404 	addi	r8,sp,16
 8003884:	003fee06 	br	8003840 <__alt_data_end+0xf8003840>
 8003888:	d9012c17 	ldw	r4,1200(sp)
 800388c:	980b883a 	mov	r5,r19
 8003890:	d9811e04 	addi	r6,sp,1144
 8003894:	80097200 	call	8009720 <__sprint_r>
 8003898:	103bfb1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 800389c:	d8c12017 	ldw	r3,1152(sp)
 80038a0:	d8812787 	ldb	r2,1182(sp)
 80038a4:	da000404 	addi	r8,sp,16
 80038a8:	003c8e06 	br	8002ae4 <__alt_data_end+0xf8002ae4>
 80038ac:	d9413517 	ldw	r5,1236(sp)
 80038b0:	2c3fffc4 	addi	r16,r5,-1
 80038b4:	043f3c0e 	bge	zero,r16,80035a8 <__alt_data_end+0xf80035a8>
 80038b8:	07000404 	movi	fp,16
 80038bc:	05420074 	movhi	r21,2049
 80038c0:	ad46b484 	addi	r21,r21,6866
 80038c4:	e4007c0e 	bge	fp,r16,8003ab8 <___vfprintf_internal_r+0x16a0>
 80038c8:	dc412e15 	stw	r17,1208(sp)
 80038cc:	00c001c4 	movi	r3,7
 80038d0:	8023883a 	mov	r17,r16
 80038d4:	dc012c17 	ldw	r16,1200(sp)
 80038d8:	00000306 	br	80038e8 <___vfprintf_internal_r+0x14d0>
 80038dc:	a5000204 	addi	r20,r20,8
 80038e0:	8c7ffc04 	addi	r17,r17,-16
 80038e4:	e440720e 	bge	fp,r17,8003ab0 <___vfprintf_internal_r+0x1698>
 80038e8:	b5800404 	addi	r22,r22,16
 80038ec:	94800044 	addi	r18,r18,1
 80038f0:	a5c00015 	stw	r23,0(r20)
 80038f4:	a7000115 	stw	fp,4(r20)
 80038f8:	dd812015 	stw	r22,1152(sp)
 80038fc:	dc811f15 	stw	r18,1148(sp)
 8003900:	1cbff60e 	bge	r3,r18,80038dc <__alt_data_end+0xf80038dc>
 8003904:	8009883a 	mov	r4,r16
 8003908:	980b883a 	mov	r5,r19
 800390c:	d9811e04 	addi	r6,sp,1144
 8003910:	d8c13e15 	stw	r3,1272(sp)
 8003914:	80097200 	call	8009720 <__sprint_r>
 8003918:	d8c13e17 	ldw	r3,1272(sp)
 800391c:	103bda1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003920:	dd812017 	ldw	r22,1152(sp)
 8003924:	dc811f17 	ldw	r18,1148(sp)
 8003928:	dd000404 	addi	r20,sp,16
 800392c:	003fec06 	br	80038e0 <__alt_data_end+0xf80038e0>
 8003930:	00c00084 	movi	r3,2
 8003934:	ad84b03a 	or	r2,r21,r22
 8003938:	003d5c06 	br	8002eac <__alt_data_end+0xf8002eac>
 800393c:	d9012c17 	ldw	r4,1200(sp)
 8003940:	980b883a 	mov	r5,r19
 8003944:	d9811e04 	addi	r6,sp,1144
 8003948:	80097200 	call	8009720 <__sprint_r>
 800394c:	103bce1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003950:	d8c12017 	ldw	r3,1152(sp)
 8003954:	da000404 	addi	r8,sp,16
 8003958:	d9413317 	ldw	r5,1228(sp)
 800395c:	d8812617 	ldw	r2,1176(sp)
 8003960:	d9013517 	ldw	r4,1236(sp)
 8003964:	8161883a 	add	r16,r16,r5
 8003968:	11000316 	blt	r2,r4,8003978 <___vfprintf_internal_r+0x1560>
 800396c:	d9412a17 	ldw	r5,1192(sp)
 8003970:	2900004c 	andi	r4,r5,1
 8003974:	20000d26 	beq	r4,zero,80039ac <___vfprintf_internal_r+0x1594>
 8003978:	d9013817 	ldw	r4,1248(sp)
 800397c:	d9413417 	ldw	r5,1232(sp)
 8003980:	1907883a 	add	r3,r3,r4
 8003984:	d9011f17 	ldw	r4,1148(sp)
 8003988:	41400015 	stw	r5,0(r8)
 800398c:	d9413817 	ldw	r5,1248(sp)
 8003990:	21000044 	addi	r4,r4,1
 8003994:	d8c12015 	stw	r3,1152(sp)
 8003998:	41400115 	stw	r5,4(r8)
 800399c:	d9011f15 	stw	r4,1148(sp)
 80039a0:	014001c4 	movi	r5,7
 80039a4:	2901c716 	blt	r5,r4,80040c4 <___vfprintf_internal_r+0x1cac>
 80039a8:	42000204 	addi	r8,r8,8
 80039ac:	d9013517 	ldw	r4,1236(sp)
 80039b0:	9425c83a 	sub	r18,r18,r16
 80039b4:	2085c83a 	sub	r2,r4,r2
 80039b8:	1029883a 	mov	r20,r2
 80039bc:	9080010e 	bge	r18,r2,80039c4 <___vfprintf_internal_r+0x15ac>
 80039c0:	9029883a 	mov	r20,r18
 80039c4:	05000a0e 	bge	zero,r20,80039f0 <___vfprintf_internal_r+0x15d8>
 80039c8:	d9011f17 	ldw	r4,1148(sp)
 80039cc:	1d07883a 	add	r3,r3,r20
 80039d0:	44000015 	stw	r16,0(r8)
 80039d4:	21000044 	addi	r4,r4,1
 80039d8:	45000115 	stw	r20,4(r8)
 80039dc:	d8c12015 	stw	r3,1152(sp)
 80039e0:	d9011f15 	stw	r4,1148(sp)
 80039e4:	014001c4 	movi	r5,7
 80039e8:	2901dd16 	blt	r5,r4,8004160 <___vfprintf_internal_r+0x1d48>
 80039ec:	42000204 	addi	r8,r8,8
 80039f0:	a001d916 	blt	r20,zero,8004158 <___vfprintf_internal_r+0x1d40>
 80039f4:	1521c83a 	sub	r16,r2,r20
 80039f8:	043c970e 	bge	zero,r16,8002c58 <__alt_data_end+0xf8002c58>
 80039fc:	04800404 	movi	r18,16
 8003a00:	d8811f17 	ldw	r2,1148(sp)
 8003a04:	05420074 	movhi	r21,2049
 8003a08:	ad46b484 	addi	r21,r21,6866
 8003a0c:	943e140e 	bge	r18,r16,8003260 <__alt_data_end+0xf8003260>
 8003a10:	050001c4 	movi	r20,7
 8003a14:	dd812c17 	ldw	r22,1200(sp)
 8003a18:	00000306 	br	8003a28 <___vfprintf_internal_r+0x1610>
 8003a1c:	42000204 	addi	r8,r8,8
 8003a20:	843ffc04 	addi	r16,r16,-16
 8003a24:	943e0e0e 	bge	r18,r16,8003260 <__alt_data_end+0xf8003260>
 8003a28:	18c00404 	addi	r3,r3,16
 8003a2c:	10800044 	addi	r2,r2,1
 8003a30:	45c00015 	stw	r23,0(r8)
 8003a34:	44800115 	stw	r18,4(r8)
 8003a38:	d8c12015 	stw	r3,1152(sp)
 8003a3c:	d8811f15 	stw	r2,1148(sp)
 8003a40:	a0bff60e 	bge	r20,r2,8003a1c <__alt_data_end+0xf8003a1c>
 8003a44:	b009883a 	mov	r4,r22
 8003a48:	980b883a 	mov	r5,r19
 8003a4c:	d9811e04 	addi	r6,sp,1144
 8003a50:	80097200 	call	8009720 <__sprint_r>
 8003a54:	103b8c1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003a58:	d8c12017 	ldw	r3,1152(sp)
 8003a5c:	d8811f17 	ldw	r2,1148(sp)
 8003a60:	da000404 	addi	r8,sp,16
 8003a64:	003fee06 	br	8003a20 <__alt_data_end+0xf8003a20>
 8003a68:	d9012c17 	ldw	r4,1200(sp)
 8003a6c:	980b883a 	mov	r5,r19
 8003a70:	d9811e04 	addi	r6,sp,1144
 8003a74:	80097200 	call	8009720 <__sprint_r>
 8003a78:	103b831e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003a7c:	d8c12017 	ldw	r3,1152(sp)
 8003a80:	dc811f17 	ldw	r18,1148(sp)
 8003a84:	da000404 	addi	r8,sp,16
 8003a88:	003eaa06 	br	8003534 <__alt_data_end+0xf8003534>
 8003a8c:	d9012c17 	ldw	r4,1200(sp)
 8003a90:	980b883a 	mov	r5,r19
 8003a94:	d9811e04 	addi	r6,sp,1144
 8003a98:	80097200 	call	8009720 <__sprint_r>
 8003a9c:	103b7a1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003aa0:	dd812017 	ldw	r22,1152(sp)
 8003aa4:	dc811f17 	ldw	r18,1148(sp)
 8003aa8:	dd000404 	addi	r20,sp,16
 8003aac:	003eac06 	br	8003560 <__alt_data_end+0xf8003560>
 8003ab0:	8821883a 	mov	r16,r17
 8003ab4:	dc412e17 	ldw	r17,1208(sp)
 8003ab8:	b42d883a 	add	r22,r22,r16
 8003abc:	94800044 	addi	r18,r18,1
 8003ac0:	a5400015 	stw	r21,0(r20)
 8003ac4:	a4000115 	stw	r16,4(r20)
 8003ac8:	dd812015 	stw	r22,1152(sp)
 8003acc:	dc811f15 	stw	r18,1148(sp)
 8003ad0:	008001c4 	movi	r2,7
 8003ad4:	14beb30e 	bge	r2,r18,80035a4 <__alt_data_end+0xf80035a4>
 8003ad8:	003ecb06 	br	8003608 <__alt_data_end+0xf8003608>
 8003adc:	d9012c17 	ldw	r4,1200(sp)
 8003ae0:	980b883a 	mov	r5,r19
 8003ae4:	d9811e04 	addi	r6,sp,1144
 8003ae8:	80097200 	call	8009720 <__sprint_r>
 8003aec:	103b661e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003af0:	d8c12017 	ldw	r3,1152(sp)
 8003af4:	da000404 	addi	r8,sp,16
 8003af8:	003c1806 	br	8002b5c <__alt_data_end+0xf8002b5c>
 8003afc:	056bc83a 	sub	r21,zero,r21
 8003b00:	a804c03a 	cmpne	r2,r21,zero
 8003b04:	05adc83a 	sub	r22,zero,r22
 8003b08:	07000b44 	movi	fp,45
 8003b0c:	b0adc83a 	sub	r22,r22,r2
 8003b10:	df012785 	stb	fp,1182(sp)
 8003b14:	00c00044 	movi	r3,1
 8003b18:	ad84b03a 	or	r2,r21,r22
 8003b1c:	003b9106 	br	8002964 <__alt_data_end+0xf8002964>
 8003b20:	da013f15 	stw	r8,1276(sp)
 8003b24:	80093780 	call	8009378 <__fpclassifyd>
 8003b28:	da013f17 	ldw	r8,1276(sp)
 8003b2c:	1000f226 	beq	r2,zero,8003ef8 <___vfprintf_internal_r+0x1ae0>
 8003b30:	05bff7c4 	movi	r22,-33
 8003b34:	00bfffc4 	movi	r2,-1
 8003b38:	95ac703a 	and	r22,r18,r22
 8003b3c:	a0820b26 	beq	r20,r2,800436c <___vfprintf_internal_r+0x1f54>
 8003b40:	008011c4 	movi	r2,71
 8003b44:	b081fc26 	beq	r22,r2,8004338 <___vfprintf_internal_r+0x1f20>
 8003b48:	d8c12a17 	ldw	r3,1192(sp)
 8003b4c:	d9013917 	ldw	r4,1252(sp)
 8003b50:	18c04014 	ori	r3,r3,256
 8003b54:	d8c12d15 	stw	r3,1204(sp)
 8003b58:	20020616 	blt	r4,zero,8004374 <___vfprintf_internal_r+0x1f5c>
 8003b5c:	dd413917 	ldw	r21,1252(sp)
 8003b60:	d8012b05 	stb	zero,1196(sp)
 8003b64:	00801984 	movi	r2,102
 8003b68:	9081a526 	beq	r18,r2,8004200 <___vfprintf_internal_r+0x1de8>
 8003b6c:	00801184 	movi	r2,70
 8003b70:	9081a326 	beq	r18,r2,8004200 <___vfprintf_internal_r+0x1de8>
 8003b74:	00801144 	movi	r2,69
 8003b78:	b0820226 	beq	r22,r2,8004384 <___vfprintf_internal_r+0x1f6c>
 8003b7c:	a039883a 	mov	fp,r20
 8003b80:	d8812604 	addi	r2,sp,1176
 8003b84:	d8800115 	stw	r2,4(sp)
 8003b88:	d9012c17 	ldw	r4,1200(sp)
 8003b8c:	d8812504 	addi	r2,sp,1172
 8003b90:	d9413717 	ldw	r5,1244(sp)
 8003b94:	d8800215 	stw	r2,8(sp)
 8003b98:	d8812104 	addi	r2,sp,1156
 8003b9c:	df000015 	stw	fp,0(sp)
 8003ba0:	d8800315 	stw	r2,12(sp)
 8003ba4:	a80d883a 	mov	r6,r21
 8003ba8:	01c00084 	movi	r7,2
 8003bac:	da013f15 	stw	r8,1276(sp)
 8003bb0:	80048f00 	call	80048f0 <_dtoa_r>
 8003bb4:	1021883a 	mov	r16,r2
 8003bb8:	008019c4 	movi	r2,103
 8003bbc:	da013f17 	ldw	r8,1276(sp)
 8003bc0:	90800226 	beq	r18,r2,8003bcc <___vfprintf_internal_r+0x17b4>
 8003bc4:	008011c4 	movi	r2,71
 8003bc8:	9080031e 	bne	r18,r2,8003bd8 <___vfprintf_internal_r+0x17c0>
 8003bcc:	d9012a17 	ldw	r4,1192(sp)
 8003bd0:	2080004c 	andi	r2,r4,1
 8003bd4:	1001fe26 	beq	r2,zero,80043d0 <___vfprintf_internal_r+0x1fb8>
 8003bd8:	00801184 	movi	r2,70
 8003bdc:	8713883a 	add	r9,r16,fp
 8003be0:	b0819f26 	beq	r22,r2,8004260 <___vfprintf_internal_r+0x1e48>
 8003be4:	d9013717 	ldw	r4,1244(sp)
 8003be8:	a80b883a 	mov	r5,r21
 8003bec:	000d883a 	mov	r6,zero
 8003bf0:	000f883a 	mov	r7,zero
 8003bf4:	da013f15 	stw	r8,1276(sp)
 8003bf8:	da413e15 	stw	r9,1272(sp)
 8003bfc:	800d5a00 	call	800d5a0 <__eqdf2>
 8003c00:	da013f17 	ldw	r8,1276(sp)
 8003c04:	da413e17 	ldw	r9,1272(sp)
 8003c08:	10017b26 	beq	r2,zero,80041f8 <___vfprintf_internal_r+0x1de0>
 8003c0c:	d8812117 	ldw	r2,1156(sp)
 8003c10:	1240062e 	bgeu	r2,r9,8003c2c <___vfprintf_internal_r+0x1814>
 8003c14:	01000c04 	movi	r4,48
 8003c18:	10c00044 	addi	r3,r2,1
 8003c1c:	d8c12115 	stw	r3,1156(sp)
 8003c20:	11000005 	stb	r4,0(r2)
 8003c24:	d8812117 	ldw	r2,1156(sp)
 8003c28:	127ffb36 	bltu	r2,r9,8003c18 <__alt_data_end+0xf8003c18>
 8003c2c:	1405c83a 	sub	r2,r2,r16
 8003c30:	d8813515 	stw	r2,1236(sp)
 8003c34:	008011c4 	movi	r2,71
 8003c38:	b0816926 	beq	r22,r2,80041e0 <___vfprintf_internal_r+0x1dc8>
 8003c3c:	00801944 	movi	r2,101
 8003c40:	14823f0e 	bge	r2,r18,8004540 <___vfprintf_internal_r+0x2128>
 8003c44:	d8c12617 	ldw	r3,1176(sp)
 8003c48:	00801984 	movi	r2,102
 8003c4c:	d8c13315 	stw	r3,1228(sp)
 8003c50:	9081e126 	beq	r18,r2,80043d8 <___vfprintf_internal_r+0x1fc0>
 8003c54:	d8c13317 	ldw	r3,1228(sp)
 8003c58:	d9013517 	ldw	r4,1236(sp)
 8003c5c:	1901cb16 	blt	r3,r4,800438c <___vfprintf_internal_r+0x1f74>
 8003c60:	d9412a17 	ldw	r5,1192(sp)
 8003c64:	2880004c 	andi	r2,r5,1
 8003c68:	1001d11e 	bne	r2,zero,80043b0 <___vfprintf_internal_r+0x1f98>
 8003c6c:	1805883a 	mov	r2,r3
 8003c70:	18023116 	blt	r3,zero,8004538 <___vfprintf_internal_r+0x2120>
 8003c74:	d8c13317 	ldw	r3,1228(sp)
 8003c78:	048019c4 	movi	r18,103
 8003c7c:	d8c12e15 	stw	r3,1208(sp)
 8003c80:	df012b07 	ldb	fp,1196(sp)
 8003c84:	e0014e1e 	bne	fp,zero,80041c0 <___vfprintf_internal_r+0x1da8>
 8003c88:	d8c12d17 	ldw	r3,1204(sp)
 8003c8c:	df012783 	ldbu	fp,1182(sp)
 8003c90:	d8812b15 	stw	r2,1196(sp)
 8003c94:	d8c12a15 	stw	r3,1192(sp)
 8003c98:	0029883a 	mov	r20,zero
 8003c9c:	003b4706 	br	80029bc <__alt_data_end+0xf80029bc>
 8003ca0:	d8c12f17 	ldw	r3,1212(sp)
 8003ca4:	d9012f17 	ldw	r4,1212(sp)
 8003ca8:	d9412f17 	ldw	r5,1212(sp)
 8003cac:	18c00017 	ldw	r3,0(r3)
 8003cb0:	21000117 	ldw	r4,4(r4)
 8003cb4:	29400204 	addi	r5,r5,8
 8003cb8:	d8c13715 	stw	r3,1244(sp)
 8003cbc:	d9013915 	stw	r4,1252(sp)
 8003cc0:	d9412f15 	stw	r5,1212(sp)
 8003cc4:	003c3606 	br	8002da0 <__alt_data_end+0xf8002da0>
 8003cc8:	d9412a17 	ldw	r5,1192(sp)
 8003ccc:	2880100c 	andi	r2,r5,64
 8003cd0:	1000b026 	beq	r2,zero,8003f94 <___vfprintf_internal_r+0x1b7c>
 8003cd4:	d8812f17 	ldw	r2,1212(sp)
 8003cd8:	002d883a 	mov	r22,zero
 8003cdc:	00c00044 	movi	r3,1
 8003ce0:	1540000b 	ldhu	r21,0(r2)
 8003ce4:	10800104 	addi	r2,r2,4
 8003ce8:	d8812f15 	stw	r2,1212(sp)
 8003cec:	a805883a 	mov	r2,r21
 8003cf0:	003c6e06 	br	8002eac <__alt_data_end+0xf8002eac>
 8003cf4:	00c00084 	movi	r3,2
 8003cf8:	003c6c06 	br	8002eac <__alt_data_end+0xf8002eac>
 8003cfc:	d9412a17 	ldw	r5,1192(sp)
 8003d00:	2880100c 	andi	r2,r5,64
 8003d04:	10009b26 	beq	r2,zero,8003f74 <___vfprintf_internal_r+0x1b5c>
 8003d08:	d8812f17 	ldw	r2,1212(sp)
 8003d0c:	002d883a 	mov	r22,zero
 8003d10:	0007883a 	mov	r3,zero
 8003d14:	1540000b 	ldhu	r21,0(r2)
 8003d18:	10800104 	addi	r2,r2,4
 8003d1c:	d8812f15 	stw	r2,1212(sp)
 8003d20:	a805883a 	mov	r2,r21
 8003d24:	003c6106 	br	8002eac <__alt_data_end+0xf8002eac>
 8003d28:	8c800007 	ldb	r18,0(r17)
 8003d2c:	003a1f06 	br	80025ac <__alt_data_end+0xf80025ac>
 8003d30:	d9412a17 	ldw	r5,1192(sp)
 8003d34:	2880100c 	andi	r2,r5,64
 8003d38:	10009e26 	beq	r2,zero,8003fb4 <___vfprintf_internal_r+0x1b9c>
 8003d3c:	d8812f17 	ldw	r2,1212(sp)
 8003d40:	002d883a 	mov	r22,zero
 8003d44:	1540000b 	ldhu	r21,0(r2)
 8003d48:	10800104 	addi	r2,r2,4
 8003d4c:	d8812f15 	stw	r2,1212(sp)
 8003d50:	003c9506 	br	8002fa8 <__alt_data_end+0xf8002fa8>
 8003d54:	d9412a17 	ldw	r5,1192(sp)
 8003d58:	2880040c 	andi	r2,r5,16
 8003d5c:	10007e1e 	bne	r2,zero,8003f58 <___vfprintf_internal_r+0x1b40>
 8003d60:	d9412a17 	ldw	r5,1192(sp)
 8003d64:	2880100c 	andi	r2,r5,64
 8003d68:	10010826 	beq	r2,zero,800418c <___vfprintf_internal_r+0x1d74>
 8003d6c:	d8c12f17 	ldw	r3,1212(sp)
 8003d70:	d9013117 	ldw	r4,1220(sp)
 8003d74:	18800017 	ldw	r2,0(r3)
 8003d78:	18c00104 	addi	r3,r3,4
 8003d7c:	d8c12f15 	stw	r3,1212(sp)
 8003d80:	1100000d 	sth	r4,0(r2)
 8003d84:	0039e206 	br	8002510 <__alt_data_end+0xf8002510>
 8003d88:	d8c12a17 	ldw	r3,1192(sp)
 8003d8c:	1880100c 	andi	r2,r3,64
 8003d90:	10006a26 	beq	r2,zero,8003f3c <___vfprintf_internal_r+0x1b24>
 8003d94:	d9012f17 	ldw	r4,1212(sp)
 8003d98:	2540000f 	ldh	r21,0(r4)
 8003d9c:	21000104 	addi	r4,r4,4
 8003da0:	d9012f15 	stw	r4,1212(sp)
 8003da4:	a82dd7fa 	srai	r22,r21,31
 8003da8:	b005883a 	mov	r2,r22
 8003dac:	003ae906 	br	8002954 <__alt_data_end+0xf8002954>
 8003db0:	dc012e17 	ldw	r16,1208(sp)
 8003db4:	a009883a 	mov	r4,r20
 8003db8:	8829883a 	mov	r20,r17
 8003dbc:	2023883a 	mov	r17,r4
 8003dc0:	1d07883a 	add	r3,r3,r20
 8003dc4:	10800044 	addi	r2,r2,1
 8003dc8:	45400015 	stw	r21,0(r8)
 8003dcc:	45000115 	stw	r20,4(r8)
 8003dd0:	d8c12015 	stw	r3,1152(sp)
 8003dd4:	d8811f15 	stw	r2,1148(sp)
 8003dd8:	010001c4 	movi	r4,7
 8003ddc:	20bed716 	blt	r4,r2,800393c <__alt_data_end+0xf800393c>
 8003de0:	42000204 	addi	r8,r8,8
 8003de4:	003edc06 	br	8003958 <__alt_data_end+0xf8003958>
 8003de8:	d9012c17 	ldw	r4,1200(sp)
 8003dec:	980b883a 	mov	r5,r19
 8003df0:	d9811e04 	addi	r6,sp,1144
 8003df4:	80097200 	call	8009720 <__sprint_r>
 8003df8:	103aa31e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003dfc:	d8c12017 	ldw	r3,1152(sp)
 8003e00:	da000404 	addi	r8,sp,16
 8003e04:	003d5606 	br	8003360 <__alt_data_end+0xf8003360>
 8003e08:	d9011f17 	ldw	r4,1148(sp)
 8003e0c:	01420074 	movhi	r5,2049
 8003e10:	2946b404 	addi	r5,r5,6864
 8003e14:	18c00044 	addi	r3,r3,1
 8003e18:	21000044 	addi	r4,r4,1
 8003e1c:	41400015 	stw	r5,0(r8)
 8003e20:	01400044 	movi	r5,1
 8003e24:	41400115 	stw	r5,4(r8)
 8003e28:	d8c12015 	stw	r3,1152(sp)
 8003e2c:	d9011f15 	stw	r4,1148(sp)
 8003e30:	014001c4 	movi	r5,7
 8003e34:	29006a16 	blt	r5,r4,8003fe0 <___vfprintf_internal_r+0x1bc8>
 8003e38:	42000204 	addi	r8,r8,8
 8003e3c:	1025883a 	mov	r18,r2
 8003e40:	9000051e 	bne	r18,zero,8003e58 <___vfprintf_internal_r+0x1a40>
 8003e44:	d8813517 	ldw	r2,1236(sp)
 8003e48:	1000031e 	bne	r2,zero,8003e58 <___vfprintf_internal_r+0x1a40>
 8003e4c:	d9012a17 	ldw	r4,1192(sp)
 8003e50:	2080004c 	andi	r2,r4,1
 8003e54:	103b8026 	beq	r2,zero,8002c58 <__alt_data_end+0xf8002c58>
 8003e58:	d8813417 	ldw	r2,1232(sp)
 8003e5c:	d9413817 	ldw	r5,1248(sp)
 8003e60:	010001c4 	movi	r4,7
 8003e64:	40800015 	stw	r2,0(r8)
 8003e68:	d8811f17 	ldw	r2,1148(sp)
 8003e6c:	1947883a 	add	r3,r3,r5
 8003e70:	41400115 	stw	r5,4(r8)
 8003e74:	10800044 	addi	r2,r2,1
 8003e78:	d8c12015 	stw	r3,1152(sp)
 8003e7c:	d8811f15 	stw	r2,1148(sp)
 8003e80:	20813016 	blt	r4,r2,8004344 <___vfprintf_internal_r+0x1f2c>
 8003e84:	42000204 	addi	r8,r8,8
 8003e88:	04a5c83a 	sub	r18,zero,r18
 8003e8c:	04807a0e 	bge	zero,r18,8004078 <___vfprintf_internal_r+0x1c60>
 8003e90:	05000404 	movi	r20,16
 8003e94:	05420074 	movhi	r21,2049
 8003e98:	ad46b484 	addi	r21,r21,6866
 8003e9c:	a480920e 	bge	r20,r18,80040e8 <___vfprintf_internal_r+0x1cd0>
 8003ea0:	058001c4 	movi	r22,7
 8003ea4:	df012c17 	ldw	fp,1200(sp)
 8003ea8:	00000306 	br	8003eb8 <___vfprintf_internal_r+0x1aa0>
 8003eac:	42000204 	addi	r8,r8,8
 8003eb0:	94bffc04 	addi	r18,r18,-16
 8003eb4:	a4808c0e 	bge	r20,r18,80040e8 <___vfprintf_internal_r+0x1cd0>
 8003eb8:	18c00404 	addi	r3,r3,16
 8003ebc:	10800044 	addi	r2,r2,1
 8003ec0:	45c00015 	stw	r23,0(r8)
 8003ec4:	45000115 	stw	r20,4(r8)
 8003ec8:	d8c12015 	stw	r3,1152(sp)
 8003ecc:	d8811f15 	stw	r2,1148(sp)
 8003ed0:	b0bff60e 	bge	r22,r2,8003eac <__alt_data_end+0xf8003eac>
 8003ed4:	e009883a 	mov	r4,fp
 8003ed8:	980b883a 	mov	r5,r19
 8003edc:	d9811e04 	addi	r6,sp,1144
 8003ee0:	80097200 	call	8009720 <__sprint_r>
 8003ee4:	103a681e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003ee8:	d8c12017 	ldw	r3,1152(sp)
 8003eec:	d8811f17 	ldw	r2,1148(sp)
 8003ef0:	da000404 	addi	r8,sp,16
 8003ef4:	003fee06 	br	8003eb0 <__alt_data_end+0xf8003eb0>
 8003ef8:	008011c4 	movi	r2,71
 8003efc:	1480ad16 	blt	r2,r18,80041b4 <___vfprintf_internal_r+0x1d9c>
 8003f00:	04020074 	movhi	r16,2049
 8003f04:	8406a604 	addi	r16,r16,6808
 8003f08:	d9012a17 	ldw	r4,1192(sp)
 8003f0c:	00bfdfc4 	movi	r2,-129
 8003f10:	00c000c4 	movi	r3,3
 8003f14:	2088703a 	and	r4,r4,r2
 8003f18:	d8c12b15 	stw	r3,1196(sp)
 8003f1c:	d9012a15 	stw	r4,1192(sp)
 8003f20:	df012783 	ldbu	fp,1182(sp)
 8003f24:	d8c12e15 	stw	r3,1208(sp)
 8003f28:	0029883a 	mov	r20,zero
 8003f2c:	d8013315 	stw	zero,1228(sp)
 8003f30:	003aa206 	br	80029bc <__alt_data_end+0xf80029bc>
 8003f34:	dd012e15 	stw	r20,1208(sp)
 8003f38:	003c8206 	br	8003144 <__alt_data_end+0xf8003144>
 8003f3c:	d9412f17 	ldw	r5,1212(sp)
 8003f40:	2d400017 	ldw	r21,0(r5)
 8003f44:	29400104 	addi	r5,r5,4
 8003f48:	d9412f15 	stw	r5,1212(sp)
 8003f4c:	a82dd7fa 	srai	r22,r21,31
 8003f50:	b005883a 	mov	r2,r22
 8003f54:	003a7f06 	br	8002954 <__alt_data_end+0xf8002954>
 8003f58:	d8c12f17 	ldw	r3,1212(sp)
 8003f5c:	d9013117 	ldw	r4,1220(sp)
 8003f60:	18800017 	ldw	r2,0(r3)
 8003f64:	18c00104 	addi	r3,r3,4
 8003f68:	d8c12f15 	stw	r3,1212(sp)
 8003f6c:	11000015 	stw	r4,0(r2)
 8003f70:	00396706 	br	8002510 <__alt_data_end+0xf8002510>
 8003f74:	d8c12f17 	ldw	r3,1212(sp)
 8003f78:	002d883a 	mov	r22,zero
 8003f7c:	1d400017 	ldw	r21,0(r3)
 8003f80:	18c00104 	addi	r3,r3,4
 8003f84:	d8c12f15 	stw	r3,1212(sp)
 8003f88:	a805883a 	mov	r2,r21
 8003f8c:	0007883a 	mov	r3,zero
 8003f90:	003bc606 	br	8002eac <__alt_data_end+0xf8002eac>
 8003f94:	d8c12f17 	ldw	r3,1212(sp)
 8003f98:	002d883a 	mov	r22,zero
 8003f9c:	1d400017 	ldw	r21,0(r3)
 8003fa0:	18c00104 	addi	r3,r3,4
 8003fa4:	d8c12f15 	stw	r3,1212(sp)
 8003fa8:	a805883a 	mov	r2,r21
 8003fac:	00c00044 	movi	r3,1
 8003fb0:	003bbe06 	br	8002eac <__alt_data_end+0xf8002eac>
 8003fb4:	d8c12f17 	ldw	r3,1212(sp)
 8003fb8:	002d883a 	mov	r22,zero
 8003fbc:	1d400017 	ldw	r21,0(r3)
 8003fc0:	18c00104 	addi	r3,r3,4
 8003fc4:	d8c12f15 	stw	r3,1212(sp)
 8003fc8:	003bf706 	br	8002fa8 <__alt_data_end+0xf8002fa8>
 8003fcc:	04020074 	movhi	r16,2049
 8003fd0:	8406a404 	addi	r16,r16,6800
 8003fd4:	003b8506 	br	8002dec <__alt_data_end+0xf8002dec>
 8003fd8:	45000204 	addi	r20,r8,8
 8003fdc:	003d7206 	br	80035a8 <__alt_data_end+0xf80035a8>
 8003fe0:	d9012c17 	ldw	r4,1200(sp)
 8003fe4:	980b883a 	mov	r5,r19
 8003fe8:	d9811e04 	addi	r6,sp,1144
 8003fec:	80097200 	call	8009720 <__sprint_r>
 8003ff0:	103a251e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8003ff4:	dc812617 	ldw	r18,1176(sp)
 8003ff8:	d8c12017 	ldw	r3,1152(sp)
 8003ffc:	da000404 	addi	r8,sp,16
 8004000:	003f8f06 	br	8003e40 <__alt_data_end+0xf8003e40>
 8004004:	d9012a17 	ldw	r4,1192(sp)
 8004008:	8c400044 	addi	r17,r17,1
 800400c:	14800047 	ldb	r18,1(r2)
 8004010:	21000814 	ori	r4,r4,32
 8004014:	d9012a15 	stw	r4,1192(sp)
 8004018:	00396406 	br	80025ac <__alt_data_end+0xf80025ac>
 800401c:	d9012c17 	ldw	r4,1200(sp)
 8004020:	980b883a 	mov	r5,r19
 8004024:	d9811e04 	addi	r6,sp,1144
 8004028:	80097200 	call	8009720 <__sprint_r>
 800402c:	103a161e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8004030:	d8c12017 	ldw	r3,1152(sp)
 8004034:	da000404 	addi	r8,sp,16
 8004038:	003cdc06 	br	80033ac <__alt_data_end+0xf80033ac>
 800403c:	df013f15 	stw	fp,1276(sp)
 8004040:	800238c0 	call	800238c <strlen>
 8004044:	d8812e15 	stw	r2,1208(sp)
 8004048:	da013f17 	ldw	r8,1276(sp)
 800404c:	103c3f0e 	bge	r2,zero,800314c <__alt_data_end+0xf800314c>
 8004050:	0005883a 	mov	r2,zero
 8004054:	003c3d06 	br	800314c <__alt_data_end+0xf800314c>
 8004058:	d9012c17 	ldw	r4,1200(sp)
 800405c:	980b883a 	mov	r5,r19
 8004060:	d9811e04 	addi	r6,sp,1144
 8004064:	80097200 	call	8009720 <__sprint_r>
 8004068:	103a071e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 800406c:	d8c12017 	ldw	r3,1152(sp)
 8004070:	d8811f17 	ldw	r2,1148(sp)
 8004074:	da000404 	addi	r8,sp,16
 8004078:	d9013517 	ldw	r4,1236(sp)
 800407c:	10800044 	addi	r2,r2,1
 8004080:	44000015 	stw	r16,0(r8)
 8004084:	20c7883a 	add	r3,r4,r3
 8004088:	003aed06 	br	8002c40 <__alt_data_end+0xf8002c40>
 800408c:	01020074 	movhi	r4,2049
 8004090:	2106b884 	addi	r4,r4,6882
 8004094:	d9013615 	stw	r4,1240(sp)
 8004098:	003a8706 	br	8002ab8 <__alt_data_end+0xf8002ab8>
 800409c:	0029883a 	mov	r20,zero
 80040a0:	003dd706 	br	8003800 <__alt_data_end+0xf8003800>
 80040a4:	d9012c17 	ldw	r4,1200(sp)
 80040a8:	980b883a 	mov	r5,r19
 80040ac:	d9811e04 	addi	r6,sp,1144
 80040b0:	80097200 	call	8009720 <__sprint_r>
 80040b4:	1039f41e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 80040b8:	d8c12017 	ldw	r3,1152(sp)
 80040bc:	da000404 	addi	r8,sp,16
 80040c0:	003dce06 	br	80037fc <__alt_data_end+0xf80037fc>
 80040c4:	d9012c17 	ldw	r4,1200(sp)
 80040c8:	980b883a 	mov	r5,r19
 80040cc:	d9811e04 	addi	r6,sp,1144
 80040d0:	80097200 	call	8009720 <__sprint_r>
 80040d4:	1039ec1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 80040d8:	d8812617 	ldw	r2,1176(sp)
 80040dc:	d8c12017 	ldw	r3,1152(sp)
 80040e0:	da000404 	addi	r8,sp,16
 80040e4:	003e3106 	br	80039ac <__alt_data_end+0xf80039ac>
 80040e8:	1c87883a 	add	r3,r3,r18
 80040ec:	10800044 	addi	r2,r2,1
 80040f0:	45400015 	stw	r21,0(r8)
 80040f4:	44800115 	stw	r18,4(r8)
 80040f8:	d8c12015 	stw	r3,1152(sp)
 80040fc:	d8811f15 	stw	r2,1148(sp)
 8004100:	010001c4 	movi	r4,7
 8004104:	20bfd416 	blt	r4,r2,8004058 <__alt_data_end+0xf8004058>
 8004108:	42000204 	addi	r8,r8,8
 800410c:	003fda06 	br	8004078 <__alt_data_end+0xf8004078>
 8004110:	01420074 	movhi	r5,2049
 8004114:	2946b884 	addi	r5,r5,6882
 8004118:	d9413615 	stw	r5,1240(sp)
 800411c:	003af406 	br	8002cf0 <__alt_data_end+0xf8002cf0>
 8004120:	00800184 	movi	r2,6
 8004124:	1500012e 	bgeu	r2,r20,800412c <___vfprintf_internal_r+0x1d14>
 8004128:	1029883a 	mov	r20,r2
 800412c:	dd012e15 	stw	r20,1208(sp)
 8004130:	a005883a 	mov	r2,r20
 8004134:	a000d216 	blt	r20,zero,8004480 <___vfprintf_internal_r+0x2068>
 8004138:	d8812b15 	stw	r2,1196(sp)
 800413c:	dd412f15 	stw	r21,1212(sp)
 8004140:	0029883a 	mov	r20,zero
 8004144:	d8013315 	stw	zero,1228(sp)
 8004148:	04020074 	movhi	r16,2049
 800414c:	8406b204 	addi	r16,r16,6856
 8004150:	0005883a 	mov	r2,zero
 8004154:	003a2006 	br	80029d8 <__alt_data_end+0xf80029d8>
 8004158:	0029883a 	mov	r20,zero
 800415c:	003e2506 	br	80039f4 <__alt_data_end+0xf80039f4>
 8004160:	d9012c17 	ldw	r4,1200(sp)
 8004164:	980b883a 	mov	r5,r19
 8004168:	d9811e04 	addi	r6,sp,1144
 800416c:	80097200 	call	8009720 <__sprint_r>
 8004170:	1039c51e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8004174:	d8812617 	ldw	r2,1176(sp)
 8004178:	d9413517 	ldw	r5,1236(sp)
 800417c:	d8c12017 	ldw	r3,1152(sp)
 8004180:	da000404 	addi	r8,sp,16
 8004184:	2885c83a 	sub	r2,r5,r2
 8004188:	003e1906 	br	80039f0 <__alt_data_end+0xf80039f0>
 800418c:	d9412f17 	ldw	r5,1212(sp)
 8004190:	d8c13117 	ldw	r3,1220(sp)
 8004194:	28800017 	ldw	r2,0(r5)
 8004198:	29400104 	addi	r5,r5,4
 800419c:	d9412f15 	stw	r5,1212(sp)
 80041a0:	10c00015 	stw	r3,0(r2)
 80041a4:	0038da06 	br	8002510 <__alt_data_end+0xf8002510>
 80041a8:	07000b44 	movi	fp,45
 80041ac:	df012785 	stb	fp,1182(sp)
 80041b0:	003b0a06 	br	8002ddc <__alt_data_end+0xf8002ddc>
 80041b4:	04020074 	movhi	r16,2049
 80041b8:	8406a704 	addi	r16,r16,6812
 80041bc:	003f5206 	br	8003f08 <__alt_data_end+0xf8003f08>
 80041c0:	00c00b44 	movi	r3,45
 80041c4:	d8c12785 	stb	r3,1182(sp)
 80041c8:	d8c12d17 	ldw	r3,1204(sp)
 80041cc:	d8812b15 	stw	r2,1196(sp)
 80041d0:	0029883a 	mov	r20,zero
 80041d4:	d8c12a15 	stw	r3,1192(sp)
 80041d8:	00800b44 	movi	r2,45
 80041dc:	0039fb06 	br	80029cc <__alt_data_end+0xf80029cc>
 80041e0:	d8812617 	ldw	r2,1176(sp)
 80041e4:	00ffff44 	movi	r3,-3
 80041e8:	10c03216 	blt	r2,r3,80042b4 <___vfprintf_internal_r+0x1e9c>
 80041ec:	a0803116 	blt	r20,r2,80042b4 <___vfprintf_internal_r+0x1e9c>
 80041f0:	d8813315 	stw	r2,1228(sp)
 80041f4:	003e9706 	br	8003c54 <__alt_data_end+0xf8003c54>
 80041f8:	4805883a 	mov	r2,r9
 80041fc:	003e8b06 	br	8003c2c <__alt_data_end+0xf8003c2c>
 8004200:	d8812604 	addi	r2,sp,1176
 8004204:	d8800115 	stw	r2,4(sp)
 8004208:	d9012c17 	ldw	r4,1200(sp)
 800420c:	d8812504 	addi	r2,sp,1172
 8004210:	d9413717 	ldw	r5,1244(sp)
 8004214:	d8800215 	stw	r2,8(sp)
 8004218:	d8812104 	addi	r2,sp,1156
 800421c:	dd000015 	stw	r20,0(sp)
 8004220:	d8800315 	stw	r2,12(sp)
 8004224:	a80d883a 	mov	r6,r21
 8004228:	01c000c4 	movi	r7,3
 800422c:	da013f15 	stw	r8,1276(sp)
 8004230:	80048f00 	call	80048f0 <_dtoa_r>
 8004234:	1021883a 	mov	r16,r2
 8004238:	a039883a 	mov	fp,r20
 800423c:	da013f17 	ldw	r8,1276(sp)
 8004240:	003e6506 	br	8003bd8 <__alt_data_end+0xf8003bd8>
 8004244:	dd012b15 	stw	r20,1196(sp)
 8004248:	dd012e15 	stw	r20,1208(sp)
 800424c:	df012783 	ldbu	fp,1182(sp)
 8004250:	dd412f15 	stw	r21,1212(sp)
 8004254:	0029883a 	mov	r20,zero
 8004258:	d8013315 	stw	zero,1228(sp)
 800425c:	0039d706 	br	80029bc <__alt_data_end+0xf80029bc>
 8004260:	81000007 	ldb	r4,0(r16)
 8004264:	00800c04 	movi	r2,48
 8004268:	20800326 	beq	r4,r2,8004278 <___vfprintf_internal_r+0x1e60>
 800426c:	d8c12617 	ldw	r3,1176(sp)
 8004270:	48d3883a 	add	r9,r9,r3
 8004274:	003e5b06 	br	8003be4 <__alt_data_end+0xf8003be4>
 8004278:	d9013717 	ldw	r4,1244(sp)
 800427c:	a80b883a 	mov	r5,r21
 8004280:	000d883a 	mov	r6,zero
 8004284:	000f883a 	mov	r7,zero
 8004288:	da013f15 	stw	r8,1276(sp)
 800428c:	da413e15 	stw	r9,1272(sp)
 8004290:	800d5a00 	call	800d5a0 <__eqdf2>
 8004294:	da013f17 	ldw	r8,1276(sp)
 8004298:	da413e17 	ldw	r9,1272(sp)
 800429c:	103ff326 	beq	r2,zero,800426c <__alt_data_end+0xf800426c>
 80042a0:	00800044 	movi	r2,1
 80042a4:	1707c83a 	sub	r3,r2,fp
 80042a8:	d8c12615 	stw	r3,1176(sp)
 80042ac:	48d3883a 	add	r9,r9,r3
 80042b0:	003e4c06 	br	8003be4 <__alt_data_end+0xf8003be4>
 80042b4:	94bfff84 	addi	r18,r18,-2
 80042b8:	157fffc4 	addi	r21,r2,-1
 80042bc:	dd412615 	stw	r21,1176(sp)
 80042c0:	dc8122c5 	stb	r18,1163(sp)
 80042c4:	a8009016 	blt	r21,zero,8004508 <___vfprintf_internal_r+0x20f0>
 80042c8:	00800ac4 	movi	r2,43
 80042cc:	d8812305 	stb	r2,1164(sp)
 80042d0:	05000244 	movi	r20,9
 80042d4:	a5404a16 	blt	r20,r21,8004400 <___vfprintf_internal_r+0x1fe8>
 80042d8:	00800c04 	movi	r2,48
 80042dc:	ad400c04 	addi	r21,r21,48
 80042e0:	d8812345 	stb	r2,1165(sp)
 80042e4:	dd412385 	stb	r21,1166(sp)
 80042e8:	d8c123c4 	addi	r3,sp,1167
 80042ec:	d88122c4 	addi	r2,sp,1163
 80042f0:	1885c83a 	sub	r2,r3,r2
 80042f4:	d8c13517 	ldw	r3,1236(sp)
 80042f8:	d9013517 	ldw	r4,1236(sp)
 80042fc:	d8813a15 	stw	r2,1256(sp)
 8004300:	1887883a 	add	r3,r3,r2
 8004304:	d8c12e15 	stw	r3,1208(sp)
 8004308:	00800044 	movi	r2,1
 800430c:	11007a0e 	bge	r2,r4,80044f8 <___vfprintf_internal_r+0x20e0>
 8004310:	d8c12e17 	ldw	r3,1208(sp)
 8004314:	18c00044 	addi	r3,r3,1
 8004318:	d8c12e15 	stw	r3,1208(sp)
 800431c:	1805883a 	mov	r2,r3
 8004320:	18000216 	blt	r3,zero,800432c <___vfprintf_internal_r+0x1f14>
 8004324:	d8013315 	stw	zero,1228(sp)
 8004328:	003e5506 	br	8003c80 <__alt_data_end+0xf8003c80>
 800432c:	0005883a 	mov	r2,zero
 8004330:	d8013315 	stw	zero,1228(sp)
 8004334:	003e5206 	br	8003c80 <__alt_data_end+0xf8003c80>
 8004338:	a03e031e 	bne	r20,zero,8003b48 <__alt_data_end+0xf8003b48>
 800433c:	8029883a 	mov	r20,r16
 8004340:	003e0106 	br	8003b48 <__alt_data_end+0xf8003b48>
 8004344:	d9012c17 	ldw	r4,1200(sp)
 8004348:	980b883a 	mov	r5,r19
 800434c:	d9811e04 	addi	r6,sp,1144
 8004350:	80097200 	call	8009720 <__sprint_r>
 8004354:	10394c1e 	bne	r2,zero,8002888 <__alt_data_end+0xf8002888>
 8004358:	dc812617 	ldw	r18,1176(sp)
 800435c:	d8c12017 	ldw	r3,1152(sp)
 8004360:	d8811f17 	ldw	r2,1148(sp)
 8004364:	da000404 	addi	r8,sp,16
 8004368:	003ec706 	br	8003e88 <__alt_data_end+0xf8003e88>
 800436c:	05000184 	movi	r20,6
 8004370:	003df506 	br	8003b48 <__alt_data_end+0xf8003b48>
 8004374:	00c00b44 	movi	r3,45
 8004378:	2560003c 	xorhi	r21,r4,32768
 800437c:	d8c12b05 	stb	r3,1196(sp)
 8004380:	003df806 	br	8003b64 <__alt_data_end+0xf8003b64>
 8004384:	a7000044 	addi	fp,r20,1
 8004388:	003dfd06 	br	8003b80 <__alt_data_end+0xf8003b80>
 800438c:	d8c13317 	ldw	r3,1228(sp)
 8004390:	00c0610e 	bge	zero,r3,8004518 <___vfprintf_internal_r+0x2100>
 8004394:	00800044 	movi	r2,1
 8004398:	d9013517 	ldw	r4,1236(sp)
 800439c:	1105883a 	add	r2,r2,r4
 80043a0:	d8812e15 	stw	r2,1208(sp)
 80043a4:	10000716 	blt	r2,zero,80043c4 <___vfprintf_internal_r+0x1fac>
 80043a8:	048019c4 	movi	r18,103
 80043ac:	003e3406 	br	8003c80 <__alt_data_end+0xf8003c80>
 80043b0:	d8c13317 	ldw	r3,1228(sp)
 80043b4:	18c00044 	addi	r3,r3,1
 80043b8:	d8c12e15 	stw	r3,1208(sp)
 80043bc:	1805883a 	mov	r2,r3
 80043c0:	183ff90e 	bge	r3,zero,80043a8 <__alt_data_end+0xf80043a8>
 80043c4:	0005883a 	mov	r2,zero
 80043c8:	048019c4 	movi	r18,103
 80043cc:	003e2c06 	br	8003c80 <__alt_data_end+0xf8003c80>
 80043d0:	d8812117 	ldw	r2,1156(sp)
 80043d4:	003e1506 	br	8003c2c <__alt_data_end+0xf8003c2c>
 80043d8:	00c0400e 	bge	zero,r3,80044dc <___vfprintf_internal_r+0x20c4>
 80043dc:	a0002a1e 	bne	r20,zero,8004488 <___vfprintf_internal_r+0x2070>
 80043e0:	d9012a17 	ldw	r4,1192(sp)
 80043e4:	2080004c 	andi	r2,r4,1
 80043e8:	1000271e 	bne	r2,zero,8004488 <___vfprintf_internal_r+0x2070>
 80043ec:	1805883a 	mov	r2,r3
 80043f0:	18005a16 	blt	r3,zero,800455c <___vfprintf_internal_r+0x2144>
 80043f4:	d8c13317 	ldw	r3,1228(sp)
 80043f8:	d8c12e15 	stw	r3,1208(sp)
 80043fc:	003e2006 	br	8003c80 <__alt_data_end+0xf8003c80>
 8004400:	d8c12284 	addi	r3,sp,1162
 8004404:	4039883a 	mov	fp,r8
 8004408:	a809883a 	mov	r4,r21
 800440c:	01400284 	movi	r5,10
 8004410:	182d883a 	mov	r22,r3
 8004414:	800c3040 	call	800c304 <__modsi3>
 8004418:	10800c04 	addi	r2,r2,48
 800441c:	a809883a 	mov	r4,r21
 8004420:	b0800005 	stb	r2,0(r22)
 8004424:	01400284 	movi	r5,10
 8004428:	800c2bc0 	call	800c2bc <__divsi3>
 800442c:	102b883a 	mov	r21,r2
 8004430:	b0ffffc4 	addi	r3,r22,-1
 8004434:	a0bff416 	blt	r20,r2,8004408 <__alt_data_end+0xf8004408>
 8004438:	11400c04 	addi	r5,r2,48
 800443c:	b17fffc5 	stb	r5,-1(r22)
 8004440:	d88122c4 	addi	r2,sp,1163
 8004444:	e011883a 	mov	r8,fp
 8004448:	1880462e 	bgeu	r3,r2,8004564 <___vfprintf_internal_r+0x214c>
 800444c:	d9012344 	addi	r4,sp,1165
 8004450:	b007883a 	mov	r3,r22
 8004454:	00000206 	br	8004460 <___vfprintf_internal_r+0x2048>
 8004458:	19400003 	ldbu	r5,0(r3)
 800445c:	18c00044 	addi	r3,r3,1
 8004460:	21400005 	stb	r5,0(r4)
 8004464:	21000044 	addi	r4,r4,1
 8004468:	10fffb1e 	bne	r2,r3,8004458 <__alt_data_end+0xf8004458>
 800446c:	d8c12304 	addi	r3,sp,1164
 8004470:	1d87c83a 	sub	r3,r3,r22
 8004474:	d9412344 	addi	r5,sp,1165
 8004478:	28c7883a 	add	r3,r5,r3
 800447c:	003f9c06 	br	80042f0 <__alt_data_end+0xf80042f0>
 8004480:	0005883a 	mov	r2,zero
 8004484:	003f2c06 	br	8004138 <__alt_data_end+0xf8004138>
 8004488:	d8c13317 	ldw	r3,1228(sp)
 800448c:	a5000044 	addi	r20,r20,1
 8004490:	1d29883a 	add	r20,r3,r20
 8004494:	dd012e15 	stw	r20,1208(sp)
 8004498:	a005883a 	mov	r2,r20
 800449c:	a03df80e 	bge	r20,zero,8003c80 <__alt_data_end+0xf8003c80>
 80044a0:	0005883a 	mov	r2,zero
 80044a4:	003df606 	br	8003c80 <__alt_data_end+0xf8003c80>
 80044a8:	043fffc4 	movi	r16,-1
 80044ac:	0038d406 	br	8002800 <__alt_data_end+0xf8002800>
 80044b0:	d9012f17 	ldw	r4,1212(sp)
 80044b4:	8c800043 	ldbu	r18,1(r17)
 80044b8:	1023883a 	mov	r17,r2
 80044bc:	20c00017 	ldw	r3,0(r4)
 80044c0:	21000104 	addi	r4,r4,4
 80044c4:	d9012f15 	stw	r4,1212(sp)
 80044c8:	18001f16 	blt	r3,zero,8004548 <___vfprintf_internal_r+0x2130>
 80044cc:	94803fcc 	andi	r18,r18,255
 80044d0:	9480201c 	xori	r18,r18,128
 80044d4:	94bfe004 	addi	r18,r18,-128
 80044d8:	00383406 	br	80025ac <__alt_data_end+0xf80025ac>
 80044dc:	a000111e 	bne	r20,zero,8004524 <___vfprintf_internal_r+0x210c>
 80044e0:	d9012a17 	ldw	r4,1192(sp)
 80044e4:	2080004c 	andi	r2,r4,1
 80044e8:	10000e1e 	bne	r2,zero,8004524 <___vfprintf_internal_r+0x210c>
 80044ec:	00800044 	movi	r2,1
 80044f0:	d8812e15 	stw	r2,1208(sp)
 80044f4:	003de206 	br	8003c80 <__alt_data_end+0xf8003c80>
 80044f8:	d9412a17 	ldw	r5,1192(sp)
 80044fc:	2884703a 	and	r2,r5,r2
 8004500:	103f831e 	bne	r2,zero,8004310 <__alt_data_end+0xf8004310>
 8004504:	003f8506 	br	800431c <__alt_data_end+0xf800431c>
 8004508:	00800b44 	movi	r2,45
 800450c:	056bc83a 	sub	r21,zero,r21
 8004510:	d8812305 	stb	r2,1164(sp)
 8004514:	003f6e06 	br	80042d0 <__alt_data_end+0xf80042d0>
 8004518:	00800084 	movi	r2,2
 800451c:	10c5c83a 	sub	r2,r2,r3
 8004520:	003f9d06 	br	8004398 <__alt_data_end+0xf8004398>
 8004524:	a5000084 	addi	r20,r20,2
 8004528:	dd012e15 	stw	r20,1208(sp)
 800452c:	a005883a 	mov	r2,r20
 8004530:	a03dd30e 	bge	r20,zero,8003c80 <__alt_data_end+0xf8003c80>
 8004534:	003fda06 	br	80044a0 <__alt_data_end+0xf80044a0>
 8004538:	0005883a 	mov	r2,zero
 800453c:	003dcd06 	br	8003c74 <__alt_data_end+0xf8003c74>
 8004540:	d8812617 	ldw	r2,1176(sp)
 8004544:	003f5c06 	br	80042b8 <__alt_data_end+0xf80042b8>
 8004548:	94803fcc 	andi	r18,r18,255
 800454c:	9480201c 	xori	r18,r18,128
 8004550:	00ffffc4 	movi	r3,-1
 8004554:	94bfe004 	addi	r18,r18,-128
 8004558:	00381406 	br	80025ac <__alt_data_end+0xf80025ac>
 800455c:	0005883a 	mov	r2,zero
 8004560:	003fa406 	br	80043f4 <__alt_data_end+0xf80043f4>
 8004564:	d8c12344 	addi	r3,sp,1165
 8004568:	003f6106 	br	80042f0 <__alt_data_end+0xf80042f0>

0800456c <__vfprintf_internal>:
 800456c:	00820074 	movhi	r2,2049
 8004570:	108e1004 	addi	r2,r2,14400
 8004574:	2007883a 	mov	r3,r4
 8004578:	11000017 	ldw	r4,0(r2)
 800457c:	2805883a 	mov	r2,r5
 8004580:	300f883a 	mov	r7,r6
 8004584:	180b883a 	mov	r5,r3
 8004588:	100d883a 	mov	r6,r2
 800458c:	80024181 	jmpi	8002418 <___vfprintf_internal_r>

08004590 <__swsetup_r>:
 8004590:	00820074 	movhi	r2,2049
 8004594:	108e1004 	addi	r2,r2,14400
 8004598:	10800017 	ldw	r2,0(r2)
 800459c:	defffd04 	addi	sp,sp,-12
 80045a0:	dc400115 	stw	r17,4(sp)
 80045a4:	dc000015 	stw	r16,0(sp)
 80045a8:	dfc00215 	stw	ra,8(sp)
 80045ac:	2023883a 	mov	r17,r4
 80045b0:	2821883a 	mov	r16,r5
 80045b4:	10000226 	beq	r2,zero,80045c0 <__swsetup_r+0x30>
 80045b8:	10c00e17 	ldw	r3,56(r2)
 80045bc:	18002e26 	beq	r3,zero,8004678 <__swsetup_r+0xe8>
 80045c0:	8080030b 	ldhu	r2,12(r16)
 80045c4:	10c0020c 	andi	r3,r2,8
 80045c8:	100d883a 	mov	r6,r2
 80045cc:	18000f26 	beq	r3,zero,800460c <__swsetup_r+0x7c>
 80045d0:	80c00417 	ldw	r3,16(r16)
 80045d4:	18001526 	beq	r3,zero,800462c <__swsetup_r+0x9c>
 80045d8:	1100004c 	andi	r4,r2,1
 80045dc:	20001c1e 	bne	r4,zero,8004650 <__swsetup_r+0xc0>
 80045e0:	1080008c 	andi	r2,r2,2
 80045e4:	1000271e 	bne	r2,zero,8004684 <__swsetup_r+0xf4>
 80045e8:	80800517 	ldw	r2,20(r16)
 80045ec:	80800215 	stw	r2,8(r16)
 80045f0:	18001c26 	beq	r3,zero,8004664 <__swsetup_r+0xd4>
 80045f4:	0005883a 	mov	r2,zero
 80045f8:	dfc00217 	ldw	ra,8(sp)
 80045fc:	dc400117 	ldw	r17,4(sp)
 8004600:	dc000017 	ldw	r16,0(sp)
 8004604:	dec00304 	addi	sp,sp,12
 8004608:	f800283a 	ret
 800460c:	3080040c 	andi	r2,r6,16
 8004610:	10001726 	beq	r2,zero,8004670 <__swsetup_r+0xe0>
 8004614:	3080010c 	andi	r2,r6,4
 8004618:	10001d1e 	bne	r2,zero,8004690 <__swsetup_r+0x100>
 800461c:	80c00417 	ldw	r3,16(r16)
 8004620:	30800214 	ori	r2,r6,8
 8004624:	8080030d 	sth	r2,12(r16)
 8004628:	183feb1e 	bne	r3,zero,80045d8 <__alt_data_end+0xf80045d8>
 800462c:	1140a00c 	andi	r5,r2,640
 8004630:	01008004 	movi	r4,512
 8004634:	293fe826 	beq	r5,r4,80045d8 <__alt_data_end+0xf80045d8>
 8004638:	8809883a 	mov	r4,r17
 800463c:	800b883a 	mov	r5,r16
 8004640:	80070300 	call	8007030 <__smakebuf_r>
 8004644:	8080030b 	ldhu	r2,12(r16)
 8004648:	80c00417 	ldw	r3,16(r16)
 800464c:	003fe206 	br	80045d8 <__alt_data_end+0xf80045d8>
 8004650:	80800517 	ldw	r2,20(r16)
 8004654:	80000215 	stw	zero,8(r16)
 8004658:	0085c83a 	sub	r2,zero,r2
 800465c:	80800615 	stw	r2,24(r16)
 8004660:	183fe41e 	bne	r3,zero,80045f4 <__alt_data_end+0xf80045f4>
 8004664:	8080030b 	ldhu	r2,12(r16)
 8004668:	1080200c 	andi	r2,r2,128
 800466c:	103fe226 	beq	r2,zero,80045f8 <__alt_data_end+0xf80045f8>
 8004670:	00bfffc4 	movi	r2,-1
 8004674:	003fe006 	br	80045f8 <__alt_data_end+0xf80045f8>
 8004678:	1009883a 	mov	r4,r2
 800467c:	800624c0 	call	800624c <__sinit>
 8004680:	003fcf06 	br	80045c0 <__alt_data_end+0xf80045c0>
 8004684:	0005883a 	mov	r2,zero
 8004688:	80800215 	stw	r2,8(r16)
 800468c:	003fd806 	br	80045f0 <__alt_data_end+0xf80045f0>
 8004690:	81400c17 	ldw	r5,48(r16)
 8004694:	28000626 	beq	r5,zero,80046b0 <__swsetup_r+0x120>
 8004698:	80801004 	addi	r2,r16,64
 800469c:	28800326 	beq	r5,r2,80046ac <__swsetup_r+0x11c>
 80046a0:	8809883a 	mov	r4,r17
 80046a4:	80066800 	call	8006680 <_free_r>
 80046a8:	8180030b 	ldhu	r6,12(r16)
 80046ac:	80000c15 	stw	zero,48(r16)
 80046b0:	80c00417 	ldw	r3,16(r16)
 80046b4:	00bff6c4 	movi	r2,-37
 80046b8:	118c703a 	and	r6,r2,r6
 80046bc:	80000115 	stw	zero,4(r16)
 80046c0:	80c00015 	stw	r3,0(r16)
 80046c4:	003fd606 	br	8004620 <__alt_data_end+0xf8004620>

080046c8 <quorem>:
 80046c8:	defff204 	addi	sp,sp,-56
 80046cc:	dd400915 	stw	r21,36(sp)
 80046d0:	20800417 	ldw	r2,16(r4)
 80046d4:	2d400417 	ldw	r21,16(r5)
 80046d8:	dfc00d15 	stw	ra,52(sp)
 80046dc:	df000c15 	stw	fp,48(sp)
 80046e0:	ddc00b15 	stw	r23,44(sp)
 80046e4:	dd800a15 	stw	r22,40(sp)
 80046e8:	dd000815 	stw	r20,32(sp)
 80046ec:	dcc00715 	stw	r19,28(sp)
 80046f0:	dc800615 	stw	r18,24(sp)
 80046f4:	dc400515 	stw	r17,20(sp)
 80046f8:	dc000415 	stw	r16,16(sp)
 80046fc:	d9000015 	stw	r4,0(sp)
 8004700:	d9400115 	stw	r5,4(sp)
 8004704:	15407816 	blt	r2,r21,80048e8 <quorem+0x220>
 8004708:	ad7fffc4 	addi	r21,r21,-1
 800470c:	ad79883a 	add	fp,r21,r21
 8004710:	28c00504 	addi	r3,r5,20
 8004714:	e739883a 	add	fp,fp,fp
 8004718:	1f2f883a 	add	r23,r3,fp
 800471c:	24400504 	addi	r17,r4,20
 8004720:	8f39883a 	add	fp,r17,fp
 8004724:	b9400017 	ldw	r5,0(r23)
 8004728:	e1000017 	ldw	r4,0(fp)
 800472c:	d8c00215 	stw	r3,8(sp)
 8004730:	29400044 	addi	r5,r5,1
 8004734:	df000315 	stw	fp,12(sp)
 8004738:	800c3500 	call	800c350 <__udivsi3>
 800473c:	1021883a 	mov	r16,r2
 8004740:	10003026 	beq	r2,zero,8004804 <quorem+0x13c>
 8004744:	dcc00217 	ldw	r19,8(sp)
 8004748:	8829883a 	mov	r20,r17
 800474c:	002d883a 	mov	r22,zero
 8004750:	0039883a 	mov	fp,zero
 8004754:	9c800017 	ldw	r18,0(r19)
 8004758:	800b883a 	mov	r5,r16
 800475c:	9cc00104 	addi	r19,r19,4
 8004760:	913fffcc 	andi	r4,r18,65535
 8004764:	800c3600 	call	800c360 <__mulsi3>
 8004768:	9008d43a 	srli	r4,r18,16
 800476c:	800b883a 	mov	r5,r16
 8004770:	b0ad883a 	add	r22,r22,r2
 8004774:	800c3600 	call	800c360 <__mulsi3>
 8004778:	a1400017 	ldw	r5,0(r20)
 800477c:	b010d43a 	srli	r8,r22,16
 8004780:	b0ffffcc 	andi	r3,r22,65535
 8004784:	293fffcc 	andi	r4,r5,65535
 8004788:	2709883a 	add	r4,r4,fp
 800478c:	280cd43a 	srli	r6,r5,16
 8004790:	20c9c83a 	sub	r4,r4,r3
 8004794:	4085883a 	add	r2,r8,r2
 8004798:	2007d43a 	srai	r3,r4,16
 800479c:	117fffcc 	andi	r5,r2,65535
 80047a0:	314bc83a 	sub	r5,r6,r5
 80047a4:	28cb883a 	add	r5,r5,r3
 80047a8:	280c943a 	slli	r6,r5,16
 80047ac:	213fffcc 	andi	r4,r4,65535
 80047b0:	102cd43a 	srli	r22,r2,16
 80047b4:	3108b03a 	or	r4,r6,r4
 80047b8:	a1000015 	stw	r4,0(r20)
 80047bc:	2839d43a 	srai	fp,r5,16
 80047c0:	a5000104 	addi	r20,r20,4
 80047c4:	bcffe32e 	bgeu	r23,r19,8004754 <__alt_data_end+0xf8004754>
 80047c8:	d8c00317 	ldw	r3,12(sp)
 80047cc:	18800017 	ldw	r2,0(r3)
 80047d0:	10000c1e 	bne	r2,zero,8004804 <quorem+0x13c>
 80047d4:	18bfff04 	addi	r2,r3,-4
 80047d8:	8880082e 	bgeu	r17,r2,80047fc <quorem+0x134>
 80047dc:	18ffff17 	ldw	r3,-4(r3)
 80047e0:	18000326 	beq	r3,zero,80047f0 <quorem+0x128>
 80047e4:	00000506 	br	80047fc <quorem+0x134>
 80047e8:	10c00017 	ldw	r3,0(r2)
 80047ec:	1800031e 	bne	r3,zero,80047fc <quorem+0x134>
 80047f0:	10bfff04 	addi	r2,r2,-4
 80047f4:	ad7fffc4 	addi	r21,r21,-1
 80047f8:	88bffb36 	bltu	r17,r2,80047e8 <__alt_data_end+0xf80047e8>
 80047fc:	d8c00017 	ldw	r3,0(sp)
 8004800:	1d400415 	stw	r21,16(r3)
 8004804:	d9000017 	ldw	r4,0(sp)
 8004808:	d9400117 	ldw	r5,4(sp)
 800480c:	800875c0 	call	800875c <__mcmp>
 8004810:	10002816 	blt	r2,zero,80048b4 <quorem+0x1ec>
 8004814:	d8c00217 	ldw	r3,8(sp)
 8004818:	84000044 	addi	r16,r16,1
 800481c:	880d883a 	mov	r6,r17
 8004820:	000f883a 	mov	r7,zero
 8004824:	32800017 	ldw	r10,0(r6)
 8004828:	1a400017 	ldw	r9,0(r3)
 800482c:	31800104 	addi	r6,r6,4
 8004830:	523fffcc 	andi	r8,r10,65535
 8004834:	48bfffcc 	andi	r2,r9,65535
 8004838:	41cf883a 	add	r7,r8,r7
 800483c:	3891c83a 	sub	r8,r7,r2
 8004840:	4812d43a 	srli	r9,r9,16
 8004844:	500ed43a 	srli	r7,r10,16
 8004848:	4005d43a 	srai	r2,r8,16
 800484c:	423fffcc 	andi	r8,r8,65535
 8004850:	3a4fc83a 	sub	r7,r7,r9
 8004854:	388f883a 	add	r7,r7,r2
 8004858:	3804943a 	slli	r2,r7,16
 800485c:	18c00104 	addi	r3,r3,4
 8004860:	380fd43a 	srai	r7,r7,16
 8004864:	1210b03a 	or	r8,r2,r8
 8004868:	323fff15 	stw	r8,-4(r6)
 800486c:	b8ffed2e 	bgeu	r23,r3,8004824 <__alt_data_end+0xf8004824>
 8004870:	ad45883a 	add	r2,r21,r21
 8004874:	1085883a 	add	r2,r2,r2
 8004878:	8887883a 	add	r3,r17,r2
 800487c:	18800017 	ldw	r2,0(r3)
 8004880:	10000c1e 	bne	r2,zero,80048b4 <quorem+0x1ec>
 8004884:	18bfff04 	addi	r2,r3,-4
 8004888:	8880082e 	bgeu	r17,r2,80048ac <quorem+0x1e4>
 800488c:	18ffff17 	ldw	r3,-4(r3)
 8004890:	18000326 	beq	r3,zero,80048a0 <quorem+0x1d8>
 8004894:	00000506 	br	80048ac <quorem+0x1e4>
 8004898:	10c00017 	ldw	r3,0(r2)
 800489c:	1800031e 	bne	r3,zero,80048ac <quorem+0x1e4>
 80048a0:	10bfff04 	addi	r2,r2,-4
 80048a4:	ad7fffc4 	addi	r21,r21,-1
 80048a8:	88bffb36 	bltu	r17,r2,8004898 <__alt_data_end+0xf8004898>
 80048ac:	d8c00017 	ldw	r3,0(sp)
 80048b0:	1d400415 	stw	r21,16(r3)
 80048b4:	8005883a 	mov	r2,r16
 80048b8:	dfc00d17 	ldw	ra,52(sp)
 80048bc:	df000c17 	ldw	fp,48(sp)
 80048c0:	ddc00b17 	ldw	r23,44(sp)
 80048c4:	dd800a17 	ldw	r22,40(sp)
 80048c8:	dd400917 	ldw	r21,36(sp)
 80048cc:	dd000817 	ldw	r20,32(sp)
 80048d0:	dcc00717 	ldw	r19,28(sp)
 80048d4:	dc800617 	ldw	r18,24(sp)
 80048d8:	dc400517 	ldw	r17,20(sp)
 80048dc:	dc000417 	ldw	r16,16(sp)
 80048e0:	dec00e04 	addi	sp,sp,56
 80048e4:	f800283a 	ret
 80048e8:	0005883a 	mov	r2,zero
 80048ec:	003ff206 	br	80048b8 <__alt_data_end+0xf80048b8>

080048f0 <_dtoa_r>:
 80048f0:	20801017 	ldw	r2,64(r4)
 80048f4:	deffdf04 	addi	sp,sp,-132
 80048f8:	dcc01a15 	stw	r19,104(sp)
 80048fc:	dc801915 	stw	r18,100(sp)
 8004900:	dc401815 	stw	r17,96(sp)
 8004904:	dc001715 	stw	r16,92(sp)
 8004908:	dfc02015 	stw	ra,128(sp)
 800490c:	df001f15 	stw	fp,124(sp)
 8004910:	ddc01e15 	stw	r23,120(sp)
 8004914:	dd801d15 	stw	r22,116(sp)
 8004918:	dd401c15 	stw	r21,112(sp)
 800491c:	dd001b15 	stw	r20,108(sp)
 8004920:	d9400315 	stw	r5,12(sp)
 8004924:	d9c00415 	stw	r7,16(sp)
 8004928:	2021883a 	mov	r16,r4
 800492c:	3023883a 	mov	r17,r6
 8004930:	dcc02317 	ldw	r19,140(sp)
 8004934:	3025883a 	mov	r18,r6
 8004938:	10000826 	beq	r2,zero,800495c <_dtoa_r+0x6c>
 800493c:	20c01117 	ldw	r3,68(r4)
 8004940:	01800044 	movi	r6,1
 8004944:	100b883a 	mov	r5,r2
 8004948:	30cc983a 	sll	r6,r6,r3
 800494c:	10c00115 	stw	r3,4(r2)
 8004950:	11800215 	stw	r6,8(r2)
 8004954:	8007e940 	call	8007e94 <_Bfree>
 8004958:	80001015 	stw	zero,64(r16)
 800495c:	88002e16 	blt	r17,zero,8004a18 <_dtoa_r+0x128>
 8004960:	98000015 	stw	zero,0(r19)
 8004964:	88dffc2c 	andhi	r3,r17,32752
 8004968:	009ffc34 	movhi	r2,32752
 800496c:	18801b26 	beq	r3,r2,80049dc <_dtoa_r+0xec>
 8004970:	d9000317 	ldw	r4,12(sp)
 8004974:	900b883a 	mov	r5,r18
 8004978:	000d883a 	mov	r6,zero
 800497c:	000f883a 	mov	r7,zero
 8004980:	800d5a00 	call	800d5a0 <__eqdf2>
 8004984:	10002b1e 	bne	r2,zero,8004a34 <_dtoa_r+0x144>
 8004988:	d8c02217 	ldw	r3,136(sp)
 800498c:	d9002417 	ldw	r4,144(sp)
 8004990:	00800044 	movi	r2,1
 8004994:	18800015 	stw	r2,0(r3)
 8004998:	2001a026 	beq	r4,zero,800501c <_dtoa_r+0x72c>
 800499c:	00820074 	movhi	r2,2049
 80049a0:	1086b444 	addi	r2,r2,6865
 80049a4:	20800015 	stw	r2,0(r4)
 80049a8:	10bfffc4 	addi	r2,r2,-1
 80049ac:	dfc02017 	ldw	ra,128(sp)
 80049b0:	df001f17 	ldw	fp,124(sp)
 80049b4:	ddc01e17 	ldw	r23,120(sp)
 80049b8:	dd801d17 	ldw	r22,116(sp)
 80049bc:	dd401c17 	ldw	r21,112(sp)
 80049c0:	dd001b17 	ldw	r20,108(sp)
 80049c4:	dcc01a17 	ldw	r19,104(sp)
 80049c8:	dc801917 	ldw	r18,100(sp)
 80049cc:	dc401817 	ldw	r17,96(sp)
 80049d0:	dc001717 	ldw	r16,92(sp)
 80049d4:	dec02104 	addi	sp,sp,132
 80049d8:	f800283a 	ret
 80049dc:	d8c02217 	ldw	r3,136(sp)
 80049e0:	d9000317 	ldw	r4,12(sp)
 80049e4:	0089c3c4 	movi	r2,9999
 80049e8:	18800015 	stw	r2,0(r3)
 80049ec:	20017926 	beq	r4,zero,8004fd4 <_dtoa_r+0x6e4>
 80049f0:	00820074 	movhi	r2,2049
 80049f4:	1086c004 	addi	r2,r2,6912
 80049f8:	d9802417 	ldw	r6,144(sp)
 80049fc:	303feb26 	beq	r6,zero,80049ac <__alt_data_end+0xf80049ac>
 8004a00:	10c000c7 	ldb	r3,3(r2)
 8004a04:	18017a1e 	bne	r3,zero,8004ff0 <_dtoa_r+0x700>
 8004a08:	10c000c4 	addi	r3,r2,3
 8004a0c:	d9c02417 	ldw	r7,144(sp)
 8004a10:	38c00015 	stw	r3,0(r7)
 8004a14:	003fe506 	br	80049ac <__alt_data_end+0xf80049ac>
 8004a18:	04a00034 	movhi	r18,32768
 8004a1c:	94bfffc4 	addi	r18,r18,-1
 8004a20:	8ca4703a 	and	r18,r17,r18
 8004a24:	00800044 	movi	r2,1
 8004a28:	98800015 	stw	r2,0(r19)
 8004a2c:	9023883a 	mov	r17,r18
 8004a30:	003fcc06 	br	8004964 <__alt_data_end+0xf8004964>
 8004a34:	d9400317 	ldw	r5,12(sp)
 8004a38:	d8800204 	addi	r2,sp,8
 8004a3c:	8828d53a 	srli	r20,r17,20
 8004a40:	d8800015 	stw	r2,0(sp)
 8004a44:	8009883a 	mov	r4,r16
 8004a48:	900d883a 	mov	r6,r18
 8004a4c:	d9c00104 	addi	r7,sp,4
 8004a50:	8008abc0 	call	8008abc <__d2b>
 8004a54:	1039883a 	mov	fp,r2
 8004a58:	a001671e 	bne	r20,zero,8004ff8 <_dtoa_r+0x708>
 8004a5c:	dd400217 	ldw	r21,8(sp)
 8004a60:	dd000117 	ldw	r20,4(sp)
 8004a64:	00befbc4 	movi	r2,-1041
 8004a68:	ad29883a 	add	r20,r21,r20
 8004a6c:	a082d616 	blt	r20,r2,80055c8 <_dtoa_r+0xcd8>
 8004a70:	d9800317 	ldw	r6,12(sp)
 8004a74:	013f0384 	movi	r4,-1010
 8004a78:	2509c83a 	sub	r4,r4,r20
 8004a7c:	a0810484 	addi	r2,r20,1042
 8004a80:	8922983a 	sll	r17,r17,r4
 8004a84:	3084d83a 	srl	r2,r6,r2
 8004a88:	8888b03a 	or	r4,r17,r2
 8004a8c:	800e9c00 	call	800e9c0 <__floatunsidf>
 8004a90:	1009883a 	mov	r4,r2
 8004a94:	017f8434 	movhi	r5,65040
 8004a98:	00800044 	movi	r2,1
 8004a9c:	194b883a 	add	r5,r3,r5
 8004aa0:	a53fffc4 	addi	r20,r20,-1
 8004aa4:	d8800f15 	stw	r2,60(sp)
 8004aa8:	000d883a 	mov	r6,zero
 8004aac:	01cffe34 	movhi	r7,16376
 8004ab0:	800dfe80 	call	800dfe8 <__subdf3>
 8004ab4:	1009883a 	mov	r4,r2
 8004ab8:	180b883a 	mov	r5,r3
 8004abc:	0198dbf4 	movhi	r6,25455
 8004ac0:	3190d844 	addi	r6,r6,17249
 8004ac4:	01cff4f4 	movhi	r7,16339
 8004ac8:	39e1e9c4 	addi	r7,r7,-30809
 8004acc:	800d7e80 	call	800d7e8 <__muldf3>
 8004ad0:	180b883a 	mov	r5,r3
 8004ad4:	01a2d874 	movhi	r6,35681
 8004ad8:	31b22cc4 	addi	r6,r6,-14157
 8004adc:	01cff1f4 	movhi	r7,16327
 8004ae0:	39e28a04 	addi	r7,r7,-30168
 8004ae4:	1009883a 	mov	r4,r2
 8004ae8:	800c3880 	call	800c388 <__adddf3>
 8004aec:	a009883a 	mov	r4,r20
 8004af0:	1027883a 	mov	r19,r2
 8004af4:	1823883a 	mov	r17,r3
 8004af8:	800e8f00 	call	800e8f0 <__floatsidf>
 8004afc:	1009883a 	mov	r4,r2
 8004b00:	180b883a 	mov	r5,r3
 8004b04:	019427f4 	movhi	r6,20639
 8004b08:	319e7ec4 	addi	r6,r6,31227
 8004b0c:	01cff4f4 	movhi	r7,16339
 8004b10:	39d104c4 	addi	r7,r7,17427
 8004b14:	800d7e80 	call	800d7e8 <__muldf3>
 8004b18:	9809883a 	mov	r4,r19
 8004b1c:	880b883a 	mov	r5,r17
 8004b20:	100d883a 	mov	r6,r2
 8004b24:	180f883a 	mov	r7,r3
 8004b28:	800c3880 	call	800c388 <__adddf3>
 8004b2c:	1009883a 	mov	r4,r2
 8004b30:	180b883a 	mov	r5,r3
 8004b34:	1027883a 	mov	r19,r2
 8004b38:	1823883a 	mov	r17,r3
 8004b3c:	800e8700 	call	800e870 <__fixdfsi>
 8004b40:	9809883a 	mov	r4,r19
 8004b44:	880b883a 	mov	r5,r17
 8004b48:	000d883a 	mov	r6,zero
 8004b4c:	000f883a 	mov	r7,zero
 8004b50:	d8800615 	stw	r2,24(sp)
 8004b54:	800d6fc0 	call	800d6fc <__ledf2>
 8004b58:	10028416 	blt	r2,zero,800556c <_dtoa_r+0xc7c>
 8004b5c:	d9000617 	ldw	r4,24(sp)
 8004b60:	00800584 	movi	r2,22
 8004b64:	11027236 	bltu	r2,r4,8005530 <_dtoa_r+0xc40>
 8004b68:	200490fa 	slli	r2,r4,3
 8004b6c:	00c20074 	movhi	r3,2049
 8004b70:	18c6dc04 	addi	r3,r3,7024
 8004b74:	d9800317 	ldw	r6,12(sp)
 8004b78:	1885883a 	add	r2,r3,r2
 8004b7c:	11000017 	ldw	r4,0(r2)
 8004b80:	11400117 	ldw	r5,4(r2)
 8004b84:	900f883a 	mov	r7,r18
 8004b88:	800d6240 	call	800d624 <__gedf2>
 8004b8c:	0082930e 	bge	zero,r2,80055dc <_dtoa_r+0xcec>
 8004b90:	d9800617 	ldw	r6,24(sp)
 8004b94:	d8000e15 	stw	zero,56(sp)
 8004b98:	31bfffc4 	addi	r6,r6,-1
 8004b9c:	d9800615 	stw	r6,24(sp)
 8004ba0:	ad2bc83a 	sub	r21,r21,r20
 8004ba4:	ad7fffc4 	addi	r21,r21,-1
 8004ba8:	a8026c16 	blt	r21,zero,800555c <_dtoa_r+0xc6c>
 8004bac:	d8000815 	stw	zero,32(sp)
 8004bb0:	d8800617 	ldw	r2,24(sp)
 8004bb4:	10026116 	blt	r2,zero,800553c <_dtoa_r+0xc4c>
 8004bb8:	a8ab883a 	add	r21,r21,r2
 8004bbc:	d8800b15 	stw	r2,44(sp)
 8004bc0:	d8000a15 	stw	zero,40(sp)
 8004bc4:	d9c00417 	ldw	r7,16(sp)
 8004bc8:	00800244 	movi	r2,9
 8004bcc:	11c11636 	bltu	r2,r7,8005028 <_dtoa_r+0x738>
 8004bd0:	00800144 	movi	r2,5
 8004bd4:	11c4cc0e 	bge	r2,r7,8005f08 <_dtoa_r+0x1618>
 8004bd8:	39ffff04 	addi	r7,r7,-4
 8004bdc:	d9c00415 	stw	r7,16(sp)
 8004be0:	0027883a 	mov	r19,zero
 8004be4:	d8c00417 	ldw	r3,16(sp)
 8004be8:	008000c4 	movi	r2,3
 8004bec:	1883aa26 	beq	r3,r2,8005a98 <_dtoa_r+0x11a8>
 8004bf0:	10c35b0e 	bge	r2,r3,8005960 <_dtoa_r+0x1070>
 8004bf4:	d9000417 	ldw	r4,16(sp)
 8004bf8:	00800104 	movi	r2,4
 8004bfc:	2082da26 	beq	r4,r2,8005768 <_dtoa_r+0xe78>
 8004c00:	00800144 	movi	r2,5
 8004c04:	2081091e 	bne	r4,r2,800502c <_dtoa_r+0x73c>
 8004c08:	01c00044 	movi	r7,1
 8004c0c:	d9c00c15 	stw	r7,48(sp)
 8004c10:	d8c02117 	ldw	r3,132(sp)
 8004c14:	d9000617 	ldw	r4,24(sp)
 8004c18:	1907883a 	add	r3,r3,r4
 8004c1c:	19800044 	addi	r6,r3,1
 8004c20:	d8c00d15 	stw	r3,52(sp)
 8004c24:	d9800915 	stw	r6,36(sp)
 8004c28:	0183a90e 	bge	zero,r6,8005ad0 <_dtoa_r+0x11e0>
 8004c2c:	d9800917 	ldw	r6,36(sp)
 8004c30:	80001115 	stw	zero,68(r16)
 8004c34:	008005c4 	movi	r2,23
 8004c38:	1184b52e 	bgeu	r2,r6,8005f10 <_dtoa_r+0x1620>
 8004c3c:	00c00044 	movi	r3,1
 8004c40:	00800104 	movi	r2,4
 8004c44:	1085883a 	add	r2,r2,r2
 8004c48:	11000504 	addi	r4,r2,20
 8004c4c:	180b883a 	mov	r5,r3
 8004c50:	18c00044 	addi	r3,r3,1
 8004c54:	313ffb2e 	bgeu	r6,r4,8004c44 <__alt_data_end+0xf8004c44>
 8004c58:	81401115 	stw	r5,68(r16)
 8004c5c:	3023883a 	mov	r17,r6
 8004c60:	8009883a 	mov	r4,r16
 8004c64:	8007dec0 	call	8007dec <_Balloc>
 8004c68:	d8800715 	stw	r2,28(sp)
 8004c6c:	80801015 	stw	r2,64(r16)
 8004c70:	00800384 	movi	r2,14
 8004c74:	1440f936 	bltu	r2,r17,800505c <_dtoa_r+0x76c>
 8004c78:	9800f826 	beq	r19,zero,800505c <_dtoa_r+0x76c>
 8004c7c:	d9c00617 	ldw	r7,24(sp)
 8004c80:	01c39c0e 	bge	zero,r7,8005af4 <_dtoa_r+0x1204>
 8004c84:	388003cc 	andi	r2,r7,15
 8004c88:	100490fa 	slli	r2,r2,3
 8004c8c:	382dd13a 	srai	r22,r7,4
 8004c90:	00c20074 	movhi	r3,2049
 8004c94:	18c6dc04 	addi	r3,r3,7024
 8004c98:	1885883a 	add	r2,r3,r2
 8004c9c:	b0c0040c 	andi	r3,r22,16
 8004ca0:	12800017 	ldw	r10,0(r2)
 8004ca4:	12400117 	ldw	r9,4(r2)
 8004ca8:	18038526 	beq	r3,zero,8005ac0 <_dtoa_r+0x11d0>
 8004cac:	00820074 	movhi	r2,2049
 8004cb0:	1086d204 	addi	r2,r2,6984
 8004cb4:	11800817 	ldw	r6,32(r2)
 8004cb8:	11c00917 	ldw	r7,36(r2)
 8004cbc:	d9000317 	ldw	r4,12(sp)
 8004cc0:	900b883a 	mov	r5,r18
 8004cc4:	da401515 	stw	r9,84(sp)
 8004cc8:	da801615 	stw	r10,88(sp)
 8004ccc:	800cc040 	call	800cc04 <__divdf3>
 8004cd0:	da401517 	ldw	r9,84(sp)
 8004cd4:	da801617 	ldw	r10,88(sp)
 8004cd8:	1027883a 	mov	r19,r2
 8004cdc:	1829883a 	mov	r20,r3
 8004ce0:	b58003cc 	andi	r22,r22,15
 8004ce4:	044000c4 	movi	r17,3
 8004ce8:	b0001126 	beq	r22,zero,8004d30 <_dtoa_r+0x440>
 8004cec:	05c20074 	movhi	r23,2049
 8004cf0:	bdc6d204 	addi	r23,r23,6984
 8004cf4:	5005883a 	mov	r2,r10
 8004cf8:	4807883a 	mov	r3,r9
 8004cfc:	b180004c 	andi	r6,r22,1
 8004d00:	1009883a 	mov	r4,r2
 8004d04:	b02dd07a 	srai	r22,r22,1
 8004d08:	180b883a 	mov	r5,r3
 8004d0c:	30000426 	beq	r6,zero,8004d20 <_dtoa_r+0x430>
 8004d10:	b9800017 	ldw	r6,0(r23)
 8004d14:	b9c00117 	ldw	r7,4(r23)
 8004d18:	8c400044 	addi	r17,r17,1
 8004d1c:	800d7e80 	call	800d7e8 <__muldf3>
 8004d20:	bdc00204 	addi	r23,r23,8
 8004d24:	b03ff51e 	bne	r22,zero,8004cfc <__alt_data_end+0xf8004cfc>
 8004d28:	1015883a 	mov	r10,r2
 8004d2c:	1813883a 	mov	r9,r3
 8004d30:	9809883a 	mov	r4,r19
 8004d34:	a00b883a 	mov	r5,r20
 8004d38:	500d883a 	mov	r6,r10
 8004d3c:	480f883a 	mov	r7,r9
 8004d40:	800cc040 	call	800cc04 <__divdf3>
 8004d44:	1027883a 	mov	r19,r2
 8004d48:	1829883a 	mov	r20,r3
 8004d4c:	d8c00e17 	ldw	r3,56(sp)
 8004d50:	18000626 	beq	r3,zero,8004d6c <_dtoa_r+0x47c>
 8004d54:	9809883a 	mov	r4,r19
 8004d58:	a00b883a 	mov	r5,r20
 8004d5c:	000d883a 	mov	r6,zero
 8004d60:	01cffc34 	movhi	r7,16368
 8004d64:	800d6fc0 	call	800d6fc <__ledf2>
 8004d68:	10041516 	blt	r2,zero,8005dc0 <_dtoa_r+0x14d0>
 8004d6c:	8809883a 	mov	r4,r17
 8004d70:	800e8f00 	call	800e8f0 <__floatsidf>
 8004d74:	1009883a 	mov	r4,r2
 8004d78:	180b883a 	mov	r5,r3
 8004d7c:	980d883a 	mov	r6,r19
 8004d80:	a00f883a 	mov	r7,r20
 8004d84:	800d7e80 	call	800d7e8 <__muldf3>
 8004d88:	1009883a 	mov	r4,r2
 8004d8c:	180b883a 	mov	r5,r3
 8004d90:	000d883a 	mov	r6,zero
 8004d94:	01d00734 	movhi	r7,16412
 8004d98:	800c3880 	call	800c388 <__adddf3>
 8004d9c:	1023883a 	mov	r17,r2
 8004da0:	d8800917 	ldw	r2,36(sp)
 8004da4:	05bf3034 	movhi	r22,64704
 8004da8:	1daf883a 	add	r23,r3,r22
 8004dac:	10031e26 	beq	r2,zero,8005a28 <_dtoa_r+0x1138>
 8004db0:	d8c00617 	ldw	r3,24(sp)
 8004db4:	dac00917 	ldw	r11,36(sp)
 8004db8:	d8c01315 	stw	r3,76(sp)
 8004dbc:	d9000c17 	ldw	r4,48(sp)
 8004dc0:	20039626 	beq	r4,zero,8005c1c <_dtoa_r+0x132c>
 8004dc4:	58bfffc4 	addi	r2,r11,-1
 8004dc8:	100490fa 	slli	r2,r2,3
 8004dcc:	00c20074 	movhi	r3,2049
 8004dd0:	18c6dc04 	addi	r3,r3,7024
 8004dd4:	0009883a 	mov	r4,zero
 8004dd8:	1885883a 	add	r2,r3,r2
 8004ddc:	11800017 	ldw	r6,0(r2)
 8004de0:	11c00117 	ldw	r7,4(r2)
 8004de4:	d8800717 	ldw	r2,28(sp)
 8004de8:	014ff834 	movhi	r5,16352
 8004dec:	dac01615 	stw	r11,88(sp)
 8004df0:	15800044 	addi	r22,r2,1
 8004df4:	800cc040 	call	800cc04 <__divdf3>
 8004df8:	880d883a 	mov	r6,r17
 8004dfc:	b80f883a 	mov	r7,r23
 8004e00:	1009883a 	mov	r4,r2
 8004e04:	180b883a 	mov	r5,r3
 8004e08:	800dfe80 	call	800dfe8 <__subdf3>
 8004e0c:	a00b883a 	mov	r5,r20
 8004e10:	9809883a 	mov	r4,r19
 8004e14:	102f883a 	mov	r23,r2
 8004e18:	d8c01015 	stw	r3,64(sp)
 8004e1c:	800e8700 	call	800e870 <__fixdfsi>
 8004e20:	1009883a 	mov	r4,r2
 8004e24:	d8801515 	stw	r2,84(sp)
 8004e28:	800e8f00 	call	800e8f0 <__floatsidf>
 8004e2c:	9809883a 	mov	r4,r19
 8004e30:	a00b883a 	mov	r5,r20
 8004e34:	100d883a 	mov	r6,r2
 8004e38:	180f883a 	mov	r7,r3
 8004e3c:	800dfe80 	call	800dfe8 <__subdf3>
 8004e40:	da401517 	ldw	r9,84(sp)
 8004e44:	1827883a 	mov	r19,r3
 8004e48:	d8c00717 	ldw	r3,28(sp)
 8004e4c:	d9401017 	ldw	r5,64(sp)
 8004e50:	4a400c04 	addi	r9,r9,48
 8004e54:	1023883a 	mov	r17,r2
 8004e58:	1a400005 	stb	r9,0(r3)
 8004e5c:	b809883a 	mov	r4,r23
 8004e60:	880d883a 	mov	r6,r17
 8004e64:	980f883a 	mov	r7,r19
 8004e68:	4829883a 	mov	r20,r9
 8004e6c:	800d6240 	call	800d624 <__gedf2>
 8004e70:	00842216 	blt	zero,r2,8005efc <_dtoa_r+0x160c>
 8004e74:	0009883a 	mov	r4,zero
 8004e78:	014ffc34 	movhi	r5,16368
 8004e7c:	880d883a 	mov	r6,r17
 8004e80:	980f883a 	mov	r7,r19
 8004e84:	800dfe80 	call	800dfe8 <__subdf3>
 8004e88:	d9401017 	ldw	r5,64(sp)
 8004e8c:	b809883a 	mov	r4,r23
 8004e90:	100d883a 	mov	r6,r2
 8004e94:	180f883a 	mov	r7,r3
 8004e98:	800d6240 	call	800d624 <__gedf2>
 8004e9c:	dac01617 	ldw	r11,88(sp)
 8004ea0:	00841316 	blt	zero,r2,8005ef0 <_dtoa_r+0x1600>
 8004ea4:	00800044 	movi	r2,1
 8004ea8:	12c06c0e 	bge	r2,r11,800505c <_dtoa_r+0x76c>
 8004eac:	d9000717 	ldw	r4,28(sp)
 8004eb0:	dd401215 	stw	r21,72(sp)
 8004eb4:	dc001115 	stw	r16,68(sp)
 8004eb8:	22d7883a 	add	r11,r4,r11
 8004ebc:	dc801415 	stw	r18,80(sp)
 8004ec0:	582b883a 	mov	r21,r11
 8004ec4:	b021883a 	mov	r16,r22
 8004ec8:	dc801017 	ldw	r18,64(sp)
 8004ecc:	00000906 	br	8004ef4 <_dtoa_r+0x604>
 8004ed0:	800dfe80 	call	800dfe8 <__subdf3>
 8004ed4:	1009883a 	mov	r4,r2
 8004ed8:	180b883a 	mov	r5,r3
 8004edc:	b80d883a 	mov	r6,r23
 8004ee0:	900f883a 	mov	r7,r18
 8004ee4:	800d6fc0 	call	800d6fc <__ledf2>
 8004ee8:	1003ea16 	blt	r2,zero,8005e94 <_dtoa_r+0x15a4>
 8004eec:	b543ed26 	beq	r22,r21,8005ea4 <_dtoa_r+0x15b4>
 8004ef0:	b021883a 	mov	r16,r22
 8004ef4:	b809883a 	mov	r4,r23
 8004ef8:	900b883a 	mov	r5,r18
 8004efc:	000d883a 	mov	r6,zero
 8004f00:	01d00934 	movhi	r7,16420
 8004f04:	800d7e80 	call	800d7e8 <__muldf3>
 8004f08:	000d883a 	mov	r6,zero
 8004f0c:	01d00934 	movhi	r7,16420
 8004f10:	8809883a 	mov	r4,r17
 8004f14:	980b883a 	mov	r5,r19
 8004f18:	102f883a 	mov	r23,r2
 8004f1c:	1825883a 	mov	r18,r3
 8004f20:	800d7e80 	call	800d7e8 <__muldf3>
 8004f24:	180b883a 	mov	r5,r3
 8004f28:	1009883a 	mov	r4,r2
 8004f2c:	1823883a 	mov	r17,r3
 8004f30:	1027883a 	mov	r19,r2
 8004f34:	800e8700 	call	800e870 <__fixdfsi>
 8004f38:	1009883a 	mov	r4,r2
 8004f3c:	1029883a 	mov	r20,r2
 8004f40:	800e8f00 	call	800e8f0 <__floatsidf>
 8004f44:	9809883a 	mov	r4,r19
 8004f48:	880b883a 	mov	r5,r17
 8004f4c:	100d883a 	mov	r6,r2
 8004f50:	180f883a 	mov	r7,r3
 8004f54:	800dfe80 	call	800dfe8 <__subdf3>
 8004f58:	a5000c04 	addi	r20,r20,48
 8004f5c:	1009883a 	mov	r4,r2
 8004f60:	180b883a 	mov	r5,r3
 8004f64:	b80d883a 	mov	r6,r23
 8004f68:	900f883a 	mov	r7,r18
 8004f6c:	85000005 	stb	r20,0(r16)
 8004f70:	1023883a 	mov	r17,r2
 8004f74:	1827883a 	mov	r19,r3
 8004f78:	800d6fc0 	call	800d6fc <__ledf2>
 8004f7c:	b5800044 	addi	r22,r22,1
 8004f80:	0009883a 	mov	r4,zero
 8004f84:	014ffc34 	movhi	r5,16368
 8004f88:	880d883a 	mov	r6,r17
 8004f8c:	980f883a 	mov	r7,r19
 8004f90:	103fcf0e 	bge	r2,zero,8004ed0 <__alt_data_end+0xf8004ed0>
 8004f94:	d8c01317 	ldw	r3,76(sp)
 8004f98:	dc001117 	ldw	r16,68(sp)
 8004f9c:	d8c00615 	stw	r3,24(sp)
 8004fa0:	8009883a 	mov	r4,r16
 8004fa4:	e00b883a 	mov	r5,fp
 8004fa8:	8007e940 	call	8007e94 <_Bfree>
 8004fac:	d9800617 	ldw	r6,24(sp)
 8004fb0:	d9c02217 	ldw	r7,136(sp)
 8004fb4:	b0000005 	stb	zero,0(r22)
 8004fb8:	30800044 	addi	r2,r6,1
 8004fbc:	38800015 	stw	r2,0(r7)
 8004fc0:	d8802417 	ldw	r2,144(sp)
 8004fc4:	10026426 	beq	r2,zero,8005958 <_dtoa_r+0x1068>
 8004fc8:	15800015 	stw	r22,0(r2)
 8004fcc:	d8800717 	ldw	r2,28(sp)
 8004fd0:	003e7606 	br	80049ac <__alt_data_end+0xf80049ac>
 8004fd4:	00800434 	movhi	r2,16
 8004fd8:	10bfffc4 	addi	r2,r2,-1
 8004fdc:	88a2703a 	and	r17,r17,r2
 8004fe0:	883e831e 	bne	r17,zero,80049f0 <__alt_data_end+0xf80049f0>
 8004fe4:	00820074 	movhi	r2,2049
 8004fe8:	1086bd04 	addi	r2,r2,6900
 8004fec:	003e8206 	br	80049f8 <__alt_data_end+0xf80049f8>
 8004ff0:	10c00204 	addi	r3,r2,8
 8004ff4:	003e8506 	br	8004a0c <__alt_data_end+0xf8004a0c>
 8004ff8:	01400434 	movhi	r5,16
 8004ffc:	297fffc4 	addi	r5,r5,-1
 8005000:	914a703a 	and	r5,r18,r5
 8005004:	d9000317 	ldw	r4,12(sp)
 8005008:	294ffc34 	orhi	r5,r5,16368
 800500c:	a53f0044 	addi	r20,r20,-1023
 8005010:	dd400217 	ldw	r21,8(sp)
 8005014:	d8000f15 	stw	zero,60(sp)
 8005018:	003ea306 	br	8004aa8 <__alt_data_end+0xf8004aa8>
 800501c:	00820074 	movhi	r2,2049
 8005020:	1086b404 	addi	r2,r2,6864
 8005024:	003e6106 	br	80049ac <__alt_data_end+0xf80049ac>
 8005028:	d8000415 	stw	zero,16(sp)
 800502c:	8009883a 	mov	r4,r16
 8005030:	80001115 	stw	zero,68(r16)
 8005034:	000b883a 	mov	r5,zero
 8005038:	8007dec0 	call	8007dec <_Balloc>
 800503c:	00ffffc4 	movi	r3,-1
 8005040:	01000044 	movi	r4,1
 8005044:	d8800715 	stw	r2,28(sp)
 8005048:	d8c00d15 	stw	r3,52(sp)
 800504c:	80801015 	stw	r2,64(r16)
 8005050:	d8002115 	stw	zero,132(sp)
 8005054:	d8c00915 	stw	r3,36(sp)
 8005058:	d9000c15 	stw	r4,48(sp)
 800505c:	d8800117 	ldw	r2,4(sp)
 8005060:	10008e16 	blt	r2,zero,800529c <_dtoa_r+0x9ac>
 8005064:	d9000617 	ldw	r4,24(sp)
 8005068:	00c00384 	movi	r3,14
 800506c:	19008b16 	blt	r3,r4,800529c <_dtoa_r+0x9ac>
 8005070:	200490fa 	slli	r2,r4,3
 8005074:	d9802117 	ldw	r6,132(sp)
 8005078:	00c20074 	movhi	r3,2049
 800507c:	18c6dc04 	addi	r3,r3,7024
 8005080:	1885883a 	add	r2,r3,r2
 8005084:	14400017 	ldw	r17,0(r2)
 8005088:	14c00117 	ldw	r19,4(r2)
 800508c:	3001be16 	blt	r6,zero,8005788 <_dtoa_r+0xe98>
 8005090:	d9000317 	ldw	r4,12(sp)
 8005094:	880d883a 	mov	r6,r17
 8005098:	980f883a 	mov	r7,r19
 800509c:	900b883a 	mov	r5,r18
 80050a0:	800cc040 	call	800cc04 <__divdf3>
 80050a4:	180b883a 	mov	r5,r3
 80050a8:	1009883a 	mov	r4,r2
 80050ac:	800e8700 	call	800e870 <__fixdfsi>
 80050b0:	1009883a 	mov	r4,r2
 80050b4:	102f883a 	mov	r23,r2
 80050b8:	800e8f00 	call	800e8f0 <__floatsidf>
 80050bc:	1009883a 	mov	r4,r2
 80050c0:	180b883a 	mov	r5,r3
 80050c4:	880d883a 	mov	r6,r17
 80050c8:	980f883a 	mov	r7,r19
 80050cc:	800d7e80 	call	800d7e8 <__muldf3>
 80050d0:	d9000317 	ldw	r4,12(sp)
 80050d4:	900b883a 	mov	r5,r18
 80050d8:	100d883a 	mov	r6,r2
 80050dc:	180f883a 	mov	r7,r3
 80050e0:	800dfe80 	call	800dfe8 <__subdf3>
 80050e4:	d9c00717 	ldw	r7,28(sp)
 80050e8:	1009883a 	mov	r4,r2
 80050ec:	b8800c04 	addi	r2,r23,48
 80050f0:	38800005 	stb	r2,0(r7)
 80050f4:	3d800044 	addi	r22,r7,1
 80050f8:	d9c00917 	ldw	r7,36(sp)
 80050fc:	01800044 	movi	r6,1
 8005100:	180b883a 	mov	r5,r3
 8005104:	2005883a 	mov	r2,r4
 8005108:	39803e26 	beq	r7,r6,8005204 <_dtoa_r+0x914>
 800510c:	000d883a 	mov	r6,zero
 8005110:	01d00934 	movhi	r7,16420
 8005114:	800d7e80 	call	800d7e8 <__muldf3>
 8005118:	1009883a 	mov	r4,r2
 800511c:	180b883a 	mov	r5,r3
 8005120:	000d883a 	mov	r6,zero
 8005124:	000f883a 	mov	r7,zero
 8005128:	1029883a 	mov	r20,r2
 800512c:	182b883a 	mov	r21,r3
 8005130:	800d5a00 	call	800d5a0 <__eqdf2>
 8005134:	103f9a26 	beq	r2,zero,8004fa0 <__alt_data_end+0xf8004fa0>
 8005138:	d8c00717 	ldw	r3,28(sp)
 800513c:	d9000917 	ldw	r4,36(sp)
 8005140:	b025883a 	mov	r18,r22
 8005144:	df000415 	stw	fp,16(sp)
 8005148:	1905883a 	add	r2,r3,r4
 800514c:	15ffffc4 	addi	r23,r2,-1
 8005150:	dc000315 	stw	r16,12(sp)
 8005154:	00000a06 	br	8005180 <_dtoa_r+0x890>
 8005158:	800d7e80 	call	800d7e8 <__muldf3>
 800515c:	1009883a 	mov	r4,r2
 8005160:	180b883a 	mov	r5,r3
 8005164:	000d883a 	mov	r6,zero
 8005168:	000f883a 	mov	r7,zero
 800516c:	1029883a 	mov	r20,r2
 8005170:	182b883a 	mov	r21,r3
 8005174:	800d5a00 	call	800d5a0 <__eqdf2>
 8005178:	10021926 	beq	r2,zero,80059e0 <_dtoa_r+0x10f0>
 800517c:	e025883a 	mov	r18,fp
 8005180:	880d883a 	mov	r6,r17
 8005184:	980f883a 	mov	r7,r19
 8005188:	a009883a 	mov	r4,r20
 800518c:	a80b883a 	mov	r5,r21
 8005190:	800cc040 	call	800cc04 <__divdf3>
 8005194:	180b883a 	mov	r5,r3
 8005198:	1009883a 	mov	r4,r2
 800519c:	800e8700 	call	800e870 <__fixdfsi>
 80051a0:	1009883a 	mov	r4,r2
 80051a4:	1021883a 	mov	r16,r2
 80051a8:	800e8f00 	call	800e8f0 <__floatsidf>
 80051ac:	1009883a 	mov	r4,r2
 80051b0:	180b883a 	mov	r5,r3
 80051b4:	880d883a 	mov	r6,r17
 80051b8:	980f883a 	mov	r7,r19
 80051bc:	800d7e80 	call	800d7e8 <__muldf3>
 80051c0:	a009883a 	mov	r4,r20
 80051c4:	a80b883a 	mov	r5,r21
 80051c8:	100d883a 	mov	r6,r2
 80051cc:	180f883a 	mov	r7,r3
 80051d0:	800dfe80 	call	800dfe8 <__subdf3>
 80051d4:	82800c04 	addi	r10,r16,48
 80051d8:	97000044 	addi	fp,r18,1
 80051dc:	92800005 	stb	r10,0(r18)
 80051e0:	000d883a 	mov	r6,zero
 80051e4:	01d00934 	movhi	r7,16420
 80051e8:	1009883a 	mov	r4,r2
 80051ec:	180b883a 	mov	r5,r3
 80051f0:	e02d883a 	mov	r22,fp
 80051f4:	95ffd81e 	bne	r18,r23,8005158 <__alt_data_end+0xf8005158>
 80051f8:	802f883a 	mov	r23,r16
 80051fc:	df000417 	ldw	fp,16(sp)
 8005200:	dc000317 	ldw	r16,12(sp)
 8005204:	1009883a 	mov	r4,r2
 8005208:	180b883a 	mov	r5,r3
 800520c:	100d883a 	mov	r6,r2
 8005210:	180f883a 	mov	r7,r3
 8005214:	800c3880 	call	800c388 <__adddf3>
 8005218:	8809883a 	mov	r4,r17
 800521c:	980b883a 	mov	r5,r19
 8005220:	100d883a 	mov	r6,r2
 8005224:	180f883a 	mov	r7,r3
 8005228:	1025883a 	mov	r18,r2
 800522c:	1829883a 	mov	r20,r3
 8005230:	800d6fc0 	call	800d6fc <__ledf2>
 8005234:	10000816 	blt	r2,zero,8005258 <_dtoa_r+0x968>
 8005238:	8809883a 	mov	r4,r17
 800523c:	980b883a 	mov	r5,r19
 8005240:	900d883a 	mov	r6,r18
 8005244:	a00f883a 	mov	r7,r20
 8005248:	800d5a00 	call	800d5a0 <__eqdf2>
 800524c:	103f541e 	bne	r2,zero,8004fa0 <__alt_data_end+0xf8004fa0>
 8005250:	bdc0004c 	andi	r23,r23,1
 8005254:	b83f5226 	beq	r23,zero,8004fa0 <__alt_data_end+0xf8004fa0>
 8005258:	b53fffc3 	ldbu	r20,-1(r22)
 800525c:	b0ffff84 	addi	r3,r22,-2
 8005260:	01400e44 	movi	r5,57
 8005264:	d9800717 	ldw	r6,28(sp)
 8005268:	00000406 	br	800527c <_dtoa_r+0x98c>
 800526c:	30824326 	beq	r6,r2,8005b7c <_dtoa_r+0x128c>
 8005270:	1d000003 	ldbu	r20,0(r3)
 8005274:	102d883a 	mov	r22,r2
 8005278:	18ffffc4 	addi	r3,r3,-1
 800527c:	a1003fcc 	andi	r4,r20,255
 8005280:	2100201c 	xori	r4,r4,128
 8005284:	213fe004 	addi	r4,r4,-128
 8005288:	b0bfffc4 	addi	r2,r22,-1
 800528c:	217ff726 	beq	r4,r5,800526c <__alt_data_end+0xf800526c>
 8005290:	a2400044 	addi	r9,r20,1
 8005294:	12400005 	stb	r9,0(r2)
 8005298:	003f4106 	br	8004fa0 <__alt_data_end+0xf8004fa0>
 800529c:	d9000c17 	ldw	r4,48(sp)
 80052a0:	2000be26 	beq	r4,zero,800559c <_dtoa_r+0xcac>
 80052a4:	d9800417 	ldw	r6,16(sp)
 80052a8:	00c00044 	movi	r3,1
 80052ac:	19815e0e 	bge	r3,r6,8005828 <_dtoa_r+0xf38>
 80052b0:	d8800917 	ldw	r2,36(sp)
 80052b4:	d8c00a17 	ldw	r3,40(sp)
 80052b8:	153fffc4 	addi	r20,r2,-1
 80052bc:	1d01f816 	blt	r3,r20,8005aa0 <_dtoa_r+0x11b0>
 80052c0:	1d29c83a 	sub	r20,r3,r20
 80052c4:	d9c00917 	ldw	r7,36(sp)
 80052c8:	3802ad16 	blt	r7,zero,8005d80 <_dtoa_r+0x1490>
 80052cc:	dcc00817 	ldw	r19,32(sp)
 80052d0:	d8800917 	ldw	r2,36(sp)
 80052d4:	d8c00817 	ldw	r3,32(sp)
 80052d8:	8009883a 	mov	r4,r16
 80052dc:	01400044 	movi	r5,1
 80052e0:	1887883a 	add	r3,r3,r2
 80052e4:	d8c00815 	stw	r3,32(sp)
 80052e8:	a8ab883a 	add	r21,r21,r2
 80052ec:	800821c0 	call	800821c <__i2b>
 80052f0:	1023883a 	mov	r17,r2
 80052f4:	98000826 	beq	r19,zero,8005318 <_dtoa_r+0xa28>
 80052f8:	0540070e 	bge	zero,r21,8005318 <_dtoa_r+0xa28>
 80052fc:	a805883a 	mov	r2,r21
 8005300:	9d411716 	blt	r19,r21,8005760 <_dtoa_r+0xe70>
 8005304:	d9000817 	ldw	r4,32(sp)
 8005308:	98a7c83a 	sub	r19,r19,r2
 800530c:	a8abc83a 	sub	r21,r21,r2
 8005310:	2089c83a 	sub	r4,r4,r2
 8005314:	d9000815 	stw	r4,32(sp)
 8005318:	d9800a17 	ldw	r6,40(sp)
 800531c:	0180140e 	bge	zero,r6,8005370 <_dtoa_r+0xa80>
 8005320:	d9c00c17 	ldw	r7,48(sp)
 8005324:	3801d626 	beq	r7,zero,8005a80 <_dtoa_r+0x1190>
 8005328:	05000e0e 	bge	zero,r20,8005364 <_dtoa_r+0xa74>
 800532c:	880b883a 	mov	r5,r17
 8005330:	8009883a 	mov	r4,r16
 8005334:	a00d883a 	mov	r6,r20
 8005338:	80084c40 	call	80084c4 <__pow5mult>
 800533c:	e00d883a 	mov	r6,fp
 8005340:	8009883a 	mov	r4,r16
 8005344:	100b883a 	mov	r5,r2
 8005348:	1023883a 	mov	r17,r2
 800534c:	80082580 	call	8008258 <__multiply>
 8005350:	102d883a 	mov	r22,r2
 8005354:	e00b883a 	mov	r5,fp
 8005358:	8009883a 	mov	r4,r16
 800535c:	8007e940 	call	8007e94 <_Bfree>
 8005360:	b039883a 	mov	fp,r22
 8005364:	d8800a17 	ldw	r2,40(sp)
 8005368:	150dc83a 	sub	r6,r2,r20
 800536c:	30011f1e 	bne	r6,zero,80057ec <_dtoa_r+0xefc>
 8005370:	8009883a 	mov	r4,r16
 8005374:	01400044 	movi	r5,1
 8005378:	800821c0 	call	800821c <__i2b>
 800537c:	d8c00b17 	ldw	r3,44(sp)
 8005380:	1029883a 	mov	r20,r2
 8005384:	00c0050e 	bge	zero,r3,800539c <_dtoa_r+0xaac>
 8005388:	8009883a 	mov	r4,r16
 800538c:	100b883a 	mov	r5,r2
 8005390:	180d883a 	mov	r6,r3
 8005394:	80084c40 	call	80084c4 <__pow5mult>
 8005398:	1029883a 	mov	r20,r2
 800539c:	d9000417 	ldw	r4,16(sp)
 80053a0:	00800044 	movi	r2,1
 80053a4:	1100e00e 	bge	r2,r4,8005728 <_dtoa_r+0xe38>
 80053a8:	0025883a 	mov	r18,zero
 80053ac:	d8800b17 	ldw	r2,44(sp)
 80053b0:	10015f1e 	bne	r2,zero,8005930 <_dtoa_r+0x1040>
 80053b4:	00800044 	movi	r2,1
 80053b8:	1545883a 	add	r2,r2,r21
 80053bc:	108007cc 	andi	r2,r2,31
 80053c0:	10007a26 	beq	r2,zero,80055ac <_dtoa_r+0xcbc>
 80053c4:	01000804 	movi	r4,32
 80053c8:	2089c83a 	sub	r4,r4,r2
 80053cc:	00c00104 	movi	r3,4
 80053d0:	1902d20e 	bge	r3,r4,8005f1c <_dtoa_r+0x162c>
 80053d4:	00c00704 	movi	r3,28
 80053d8:	1885c83a 	sub	r2,r3,r2
 80053dc:	d8c00817 	ldw	r3,32(sp)
 80053e0:	98a7883a 	add	r19,r19,r2
 80053e4:	a8ab883a 	add	r21,r21,r2
 80053e8:	1887883a 	add	r3,r3,r2
 80053ec:	d8c00815 	stw	r3,32(sp)
 80053f0:	d9800817 	ldw	r6,32(sp)
 80053f4:	0180040e 	bge	zero,r6,8005408 <_dtoa_r+0xb18>
 80053f8:	e00b883a 	mov	r5,fp
 80053fc:	8009883a 	mov	r4,r16
 8005400:	800860c0 	call	800860c <__lshift>
 8005404:	1039883a 	mov	fp,r2
 8005408:	0540050e 	bge	zero,r21,8005420 <_dtoa_r+0xb30>
 800540c:	a00b883a 	mov	r5,r20
 8005410:	8009883a 	mov	r4,r16
 8005414:	a80d883a 	mov	r6,r21
 8005418:	800860c0 	call	800860c <__lshift>
 800541c:	1029883a 	mov	r20,r2
 8005420:	d9c00e17 	ldw	r7,56(sp)
 8005424:	3801301e 	bne	r7,zero,80058e8 <_dtoa_r+0xff8>
 8005428:	d9c00917 	ldw	r7,36(sp)
 800542c:	01c1500e 	bge	zero,r7,8005970 <_dtoa_r+0x1080>
 8005430:	d8800c17 	ldw	r2,48(sp)
 8005434:	10006b1e 	bne	r2,zero,80055e4 <_dtoa_r+0xcf4>
 8005438:	dc800717 	ldw	r18,28(sp)
 800543c:	dcc00917 	ldw	r19,36(sp)
 8005440:	902b883a 	mov	r21,r18
 8005444:	00000206 	br	8005450 <_dtoa_r+0xb60>
 8005448:	8007ebc0 	call	8007ebc <__multadd>
 800544c:	1039883a 	mov	fp,r2
 8005450:	e009883a 	mov	r4,fp
 8005454:	a00b883a 	mov	r5,r20
 8005458:	80046c80 	call	80046c8 <quorem>
 800545c:	10800c04 	addi	r2,r2,48
 8005460:	90800005 	stb	r2,0(r18)
 8005464:	94800044 	addi	r18,r18,1
 8005468:	9547c83a 	sub	r3,r18,r21
 800546c:	8009883a 	mov	r4,r16
 8005470:	e00b883a 	mov	r5,fp
 8005474:	01800284 	movi	r6,10
 8005478:	000f883a 	mov	r7,zero
 800547c:	1cfff216 	blt	r3,r19,8005448 <__alt_data_end+0xf8005448>
 8005480:	102f883a 	mov	r23,r2
 8005484:	d8800917 	ldw	r2,36(sp)
 8005488:	0082410e 	bge	zero,r2,8005d90 <_dtoa_r+0x14a0>
 800548c:	d9000717 	ldw	r4,28(sp)
 8005490:	002b883a 	mov	r21,zero
 8005494:	20ad883a 	add	r22,r4,r2
 8005498:	e00b883a 	mov	r5,fp
 800549c:	8009883a 	mov	r4,r16
 80054a0:	01800044 	movi	r6,1
 80054a4:	800860c0 	call	800860c <__lshift>
 80054a8:	1009883a 	mov	r4,r2
 80054ac:	a00b883a 	mov	r5,r20
 80054b0:	1039883a 	mov	fp,r2
 80054b4:	800875c0 	call	800875c <__mcmp>
 80054b8:	0080d10e 	bge	zero,r2,8005800 <_dtoa_r+0xf10>
 80054bc:	b13fffc3 	ldbu	r4,-1(r22)
 80054c0:	b0ffff84 	addi	r3,r22,-2
 80054c4:	01800e44 	movi	r6,57
 80054c8:	d9c00717 	ldw	r7,28(sp)
 80054cc:	00000406 	br	80054e0 <_dtoa_r+0xbf0>
 80054d0:	38813c26 	beq	r7,r2,80059c4 <_dtoa_r+0x10d4>
 80054d4:	19000003 	ldbu	r4,0(r3)
 80054d8:	102d883a 	mov	r22,r2
 80054dc:	18ffffc4 	addi	r3,r3,-1
 80054e0:	21403fcc 	andi	r5,r4,255
 80054e4:	2940201c 	xori	r5,r5,128
 80054e8:	297fe004 	addi	r5,r5,-128
 80054ec:	b0bfffc4 	addi	r2,r22,-1
 80054f0:	29bff726 	beq	r5,r6,80054d0 <__alt_data_end+0xf80054d0>
 80054f4:	21000044 	addi	r4,r4,1
 80054f8:	11000005 	stb	r4,0(r2)
 80054fc:	8009883a 	mov	r4,r16
 8005500:	a00b883a 	mov	r5,r20
 8005504:	8007e940 	call	8007e94 <_Bfree>
 8005508:	883ea526 	beq	r17,zero,8004fa0 <__alt_data_end+0xf8004fa0>
 800550c:	a8000426 	beq	r21,zero,8005520 <_dtoa_r+0xc30>
 8005510:	ac400326 	beq	r21,r17,8005520 <_dtoa_r+0xc30>
 8005514:	8009883a 	mov	r4,r16
 8005518:	a80b883a 	mov	r5,r21
 800551c:	8007e940 	call	8007e94 <_Bfree>
 8005520:	8009883a 	mov	r4,r16
 8005524:	880b883a 	mov	r5,r17
 8005528:	8007e940 	call	8007e94 <_Bfree>
 800552c:	003e9c06 	br	8004fa0 <__alt_data_end+0xf8004fa0>
 8005530:	01c00044 	movi	r7,1
 8005534:	d9c00e15 	stw	r7,56(sp)
 8005538:	003d9906 	br	8004ba0 <__alt_data_end+0xf8004ba0>
 800553c:	d8c00817 	ldw	r3,32(sp)
 8005540:	d9000617 	ldw	r4,24(sp)
 8005544:	d8000b15 	stw	zero,44(sp)
 8005548:	1907c83a 	sub	r3,r3,r4
 800554c:	010dc83a 	sub	r6,zero,r4
 8005550:	d8c00815 	stw	r3,32(sp)
 8005554:	d9800a15 	stw	r6,40(sp)
 8005558:	003d9a06 	br	8004bc4 <__alt_data_end+0xf8004bc4>
 800555c:	056bc83a 	sub	r21,zero,r21
 8005560:	dd400815 	stw	r21,32(sp)
 8005564:	002b883a 	mov	r21,zero
 8005568:	003d9106 	br	8004bb0 <__alt_data_end+0xf8004bb0>
 800556c:	d9000617 	ldw	r4,24(sp)
 8005570:	800e8f00 	call	800e8f0 <__floatsidf>
 8005574:	1009883a 	mov	r4,r2
 8005578:	180b883a 	mov	r5,r3
 800557c:	980d883a 	mov	r6,r19
 8005580:	880f883a 	mov	r7,r17
 8005584:	800d5a00 	call	800d5a0 <__eqdf2>
 8005588:	103d7426 	beq	r2,zero,8004b5c <__alt_data_end+0xf8004b5c>
 800558c:	d8c00617 	ldw	r3,24(sp)
 8005590:	18ffffc4 	addi	r3,r3,-1
 8005594:	d8c00615 	stw	r3,24(sp)
 8005598:	003d7006 	br	8004b5c <__alt_data_end+0xf8004b5c>
 800559c:	dd000a17 	ldw	r20,40(sp)
 80055a0:	dcc00817 	ldw	r19,32(sp)
 80055a4:	0023883a 	mov	r17,zero
 80055a8:	003f5206 	br	80052f4 <__alt_data_end+0xf80052f4>
 80055ac:	00800704 	movi	r2,28
 80055b0:	d9000817 	ldw	r4,32(sp)
 80055b4:	98a7883a 	add	r19,r19,r2
 80055b8:	a8ab883a 	add	r21,r21,r2
 80055bc:	2089883a 	add	r4,r4,r2
 80055c0:	d9000815 	stw	r4,32(sp)
 80055c4:	003f8a06 	br	80053f0 <__alt_data_end+0xf80053f0>
 80055c8:	d9c00317 	ldw	r7,12(sp)
 80055cc:	013efb84 	movi	r4,-1042
 80055d0:	2509c83a 	sub	r4,r4,r20
 80055d4:	3908983a 	sll	r4,r7,r4
 80055d8:	003d2c06 	br	8004a8c <__alt_data_end+0xf8004a8c>
 80055dc:	d8000e15 	stw	zero,56(sp)
 80055e0:	003d6f06 	br	8004ba0 <__alt_data_end+0xf8004ba0>
 80055e4:	04c0050e 	bge	zero,r19,80055fc <_dtoa_r+0xd0c>
 80055e8:	880b883a 	mov	r5,r17
 80055ec:	8009883a 	mov	r4,r16
 80055f0:	980d883a 	mov	r6,r19
 80055f4:	800860c0 	call	800860c <__lshift>
 80055f8:	1023883a 	mov	r17,r2
 80055fc:	9001681e 	bne	r18,zero,8005ba0 <_dtoa_r+0x12b0>
 8005600:	8827883a 	mov	r19,r17
 8005604:	d8c00717 	ldw	r3,28(sp)
 8005608:	d9000917 	ldw	r4,36(sp)
 800560c:	1dffffc4 	addi	r23,r3,-1
 8005610:	1825883a 	mov	r18,r3
 8005614:	d8c00317 	ldw	r3,12(sp)
 8005618:	b92f883a 	add	r23,r23,r4
 800561c:	ddc00515 	stw	r23,20(sp)
 8005620:	18c0004c 	andi	r3,r3,1
 8005624:	d8c00315 	stw	r3,12(sp)
 8005628:	e009883a 	mov	r4,fp
 800562c:	a00b883a 	mov	r5,r20
 8005630:	80046c80 	call	80046c8 <quorem>
 8005634:	e009883a 	mov	r4,fp
 8005638:	880b883a 	mov	r5,r17
 800563c:	102d883a 	mov	r22,r2
 8005640:	800875c0 	call	800875c <__mcmp>
 8005644:	8009883a 	mov	r4,r16
 8005648:	a00b883a 	mov	r5,r20
 800564c:	980d883a 	mov	r6,r19
 8005650:	102b883a 	mov	r21,r2
 8005654:	80087bc0 	call	80087bc <__mdiff>
 8005658:	1007883a 	mov	r3,r2
 800565c:	10800317 	ldw	r2,12(r2)
 8005660:	b5c00c04 	addi	r23,r22,48
 8005664:	10009b1e 	bne	r2,zero,80058d4 <_dtoa_r+0xfe4>
 8005668:	180b883a 	mov	r5,r3
 800566c:	e009883a 	mov	r4,fp
 8005670:	d8c01515 	stw	r3,84(sp)
 8005674:	800875c0 	call	800875c <__mcmp>
 8005678:	d8c01517 	ldw	r3,84(sp)
 800567c:	8009883a 	mov	r4,r16
 8005680:	d8801515 	stw	r2,84(sp)
 8005684:	180b883a 	mov	r5,r3
 8005688:	8007e940 	call	8007e94 <_Bfree>
 800568c:	d8801517 	ldw	r2,84(sp)
 8005690:	1000041e 	bne	r2,zero,80056a4 <_dtoa_r+0xdb4>
 8005694:	d9000417 	ldw	r4,16(sp)
 8005698:	2000021e 	bne	r4,zero,80056a4 <_dtoa_r+0xdb4>
 800569c:	d8c00317 	ldw	r3,12(sp)
 80056a0:	18007926 	beq	r3,zero,8005888 <_dtoa_r+0xf98>
 80056a4:	a8006616 	blt	r21,zero,8005840 <_dtoa_r+0xf50>
 80056a8:	a800041e 	bne	r21,zero,80056bc <_dtoa_r+0xdcc>
 80056ac:	d9000417 	ldw	r4,16(sp)
 80056b0:	2000021e 	bne	r4,zero,80056bc <_dtoa_r+0xdcc>
 80056b4:	d8c00317 	ldw	r3,12(sp)
 80056b8:	18006126 	beq	r3,zero,8005840 <_dtoa_r+0xf50>
 80056bc:	00814916 	blt	zero,r2,8005be4 <_dtoa_r+0x12f4>
 80056c0:	d8c00517 	ldw	r3,20(sp)
 80056c4:	95400044 	addi	r21,r18,1
 80056c8:	95c00005 	stb	r23,0(r18)
 80056cc:	a82d883a 	mov	r22,r21
 80056d0:	90c14c26 	beq	r18,r3,8005c04 <_dtoa_r+0x1314>
 80056d4:	e00b883a 	mov	r5,fp
 80056d8:	8009883a 	mov	r4,r16
 80056dc:	01800284 	movi	r6,10
 80056e0:	000f883a 	mov	r7,zero
 80056e4:	8007ebc0 	call	8007ebc <__multadd>
 80056e8:	1039883a 	mov	fp,r2
 80056ec:	8cc07026 	beq	r17,r19,80058b0 <_dtoa_r+0xfc0>
 80056f0:	880b883a 	mov	r5,r17
 80056f4:	01800284 	movi	r6,10
 80056f8:	000f883a 	mov	r7,zero
 80056fc:	8009883a 	mov	r4,r16
 8005700:	8007ebc0 	call	8007ebc <__multadd>
 8005704:	980b883a 	mov	r5,r19
 8005708:	8009883a 	mov	r4,r16
 800570c:	01800284 	movi	r6,10
 8005710:	000f883a 	mov	r7,zero
 8005714:	1023883a 	mov	r17,r2
 8005718:	8007ebc0 	call	8007ebc <__multadd>
 800571c:	1027883a 	mov	r19,r2
 8005720:	a825883a 	mov	r18,r21
 8005724:	003fc006 	br	8005628 <__alt_data_end+0xf8005628>
 8005728:	d9800317 	ldw	r6,12(sp)
 800572c:	303f1e1e 	bne	r6,zero,80053a8 <__alt_data_end+0xf80053a8>
 8005730:	00c00434 	movhi	r3,16
 8005734:	18ffffc4 	addi	r3,r3,-1
 8005738:	90c6703a 	and	r3,r18,r3
 800573c:	183f1a1e 	bne	r3,zero,80053a8 <__alt_data_end+0xf80053a8>
 8005740:	949ffc2c 	andhi	r18,r18,32752
 8005744:	903f1826 	beq	r18,zero,80053a8 <__alt_data_end+0xf80053a8>
 8005748:	d9c00817 	ldw	r7,32(sp)
 800574c:	a8ab883a 	add	r21,r21,r2
 8005750:	1025883a 	mov	r18,r2
 8005754:	388f883a 	add	r7,r7,r2
 8005758:	d9c00815 	stw	r7,32(sp)
 800575c:	003f1306 	br	80053ac <__alt_data_end+0xf80053ac>
 8005760:	9805883a 	mov	r2,r19
 8005764:	003ee706 	br	8005304 <__alt_data_end+0xf8005304>
 8005768:	01800044 	movi	r6,1
 800576c:	d9800c15 	stw	r6,48(sp)
 8005770:	d8802117 	ldw	r2,132(sp)
 8005774:	0080da0e 	bge	zero,r2,8005ae0 <_dtoa_r+0x11f0>
 8005778:	100d883a 	mov	r6,r2
 800577c:	d8800d15 	stw	r2,52(sp)
 8005780:	d8800915 	stw	r2,36(sp)
 8005784:	003d2a06 	br	8004c30 <__alt_data_end+0xf8004c30>
 8005788:	d8800917 	ldw	r2,36(sp)
 800578c:	00be4016 	blt	zero,r2,8005090 <__alt_data_end+0xf8005090>
 8005790:	1000b81e 	bne	r2,zero,8005a74 <_dtoa_r+0x1184>
 8005794:	8809883a 	mov	r4,r17
 8005798:	980b883a 	mov	r5,r19
 800579c:	000d883a 	mov	r6,zero
 80057a0:	01d00534 	movhi	r7,16404
 80057a4:	800d7e80 	call	800d7e8 <__muldf3>
 80057a8:	d9800317 	ldw	r6,12(sp)
 80057ac:	1009883a 	mov	r4,r2
 80057b0:	180b883a 	mov	r5,r3
 80057b4:	900f883a 	mov	r7,r18
 80057b8:	800d6240 	call	800d624 <__gedf2>
 80057bc:	0029883a 	mov	r20,zero
 80057c0:	0023883a 	mov	r17,zero
 80057c4:	10007716 	blt	r2,zero,80059a4 <_dtoa_r+0x10b4>
 80057c8:	d9002117 	ldw	r4,132(sp)
 80057cc:	dd800717 	ldw	r22,28(sp)
 80057d0:	0108303a 	nor	r4,zero,r4
 80057d4:	d9000615 	stw	r4,24(sp)
 80057d8:	8009883a 	mov	r4,r16
 80057dc:	a00b883a 	mov	r5,r20
 80057e0:	8007e940 	call	8007e94 <_Bfree>
 80057e4:	883f4e1e 	bne	r17,zero,8005520 <__alt_data_end+0xf8005520>
 80057e8:	003ded06 	br	8004fa0 <__alt_data_end+0xf8004fa0>
 80057ec:	e00b883a 	mov	r5,fp
 80057f0:	8009883a 	mov	r4,r16
 80057f4:	80084c40 	call	80084c4 <__pow5mult>
 80057f8:	1039883a 	mov	fp,r2
 80057fc:	003edc06 	br	8005370 <__alt_data_end+0xf8005370>
 8005800:	1000021e 	bne	r2,zero,800580c <_dtoa_r+0xf1c>
 8005804:	ba40004c 	andi	r9,r23,1
 8005808:	483f2c1e 	bne	r9,zero,80054bc <__alt_data_end+0xf80054bc>
 800580c:	01000c04 	movi	r4,48
 8005810:	00000106 	br	8005818 <_dtoa_r+0xf28>
 8005814:	102d883a 	mov	r22,r2
 8005818:	b0bfffc4 	addi	r2,r22,-1
 800581c:	10c00007 	ldb	r3,0(r2)
 8005820:	193ffc26 	beq	r3,r4,8005814 <__alt_data_end+0xf8005814>
 8005824:	003f3506 	br	80054fc <__alt_data_end+0xf80054fc>
 8005828:	d9c00f17 	ldw	r7,60(sp)
 800582c:	38015a26 	beq	r7,zero,8005d98 <_dtoa_r+0x14a8>
 8005830:	10810cc4 	addi	r2,r2,1075
 8005834:	dd000a17 	ldw	r20,40(sp)
 8005838:	dcc00817 	ldw	r19,32(sp)
 800583c:	003ea506 	br	80052d4 <__alt_data_end+0xf80052d4>
 8005840:	00800c0e 	bge	zero,r2,8005874 <_dtoa_r+0xf84>
 8005844:	e00b883a 	mov	r5,fp
 8005848:	8009883a 	mov	r4,r16
 800584c:	01800044 	movi	r6,1
 8005850:	800860c0 	call	800860c <__lshift>
 8005854:	1009883a 	mov	r4,r2
 8005858:	a00b883a 	mov	r5,r20
 800585c:	1039883a 	mov	fp,r2
 8005860:	800875c0 	call	800875c <__mcmp>
 8005864:	0081930e 	bge	zero,r2,8005eb4 <_dtoa_r+0x15c4>
 8005868:	00800e44 	movi	r2,57
 800586c:	b8800a26 	beq	r23,r2,8005898 <_dtoa_r+0xfa8>
 8005870:	b5c00c44 	addi	r23,r22,49
 8005874:	882b883a 	mov	r21,r17
 8005878:	95800044 	addi	r22,r18,1
 800587c:	95c00005 	stb	r23,0(r18)
 8005880:	9823883a 	mov	r17,r19
 8005884:	003f1d06 	br	80054fc <__alt_data_end+0xf80054fc>
 8005888:	00800e44 	movi	r2,57
 800588c:	b8800226 	beq	r23,r2,8005898 <_dtoa_r+0xfa8>
 8005890:	057ff716 	blt	zero,r21,8005870 <__alt_data_end+0xf8005870>
 8005894:	003ff706 	br	8005874 <__alt_data_end+0xf8005874>
 8005898:	01000e44 	movi	r4,57
 800589c:	882b883a 	mov	r21,r17
 80058a0:	95800044 	addi	r22,r18,1
 80058a4:	91000005 	stb	r4,0(r18)
 80058a8:	9823883a 	mov	r17,r19
 80058ac:	003f0406 	br	80054c0 <__alt_data_end+0xf80054c0>
 80058b0:	880b883a 	mov	r5,r17
 80058b4:	8009883a 	mov	r4,r16
 80058b8:	01800284 	movi	r6,10
 80058bc:	000f883a 	mov	r7,zero
 80058c0:	8007ebc0 	call	8007ebc <__multadd>
 80058c4:	1023883a 	mov	r17,r2
 80058c8:	1027883a 	mov	r19,r2
 80058cc:	a825883a 	mov	r18,r21
 80058d0:	003f5506 	br	8005628 <__alt_data_end+0xf8005628>
 80058d4:	8009883a 	mov	r4,r16
 80058d8:	180b883a 	mov	r5,r3
 80058dc:	8007e940 	call	8007e94 <_Bfree>
 80058e0:	00800044 	movi	r2,1
 80058e4:	003f6f06 	br	80056a4 <__alt_data_end+0xf80056a4>
 80058e8:	e009883a 	mov	r4,fp
 80058ec:	a00b883a 	mov	r5,r20
 80058f0:	800875c0 	call	800875c <__mcmp>
 80058f4:	103ecc0e 	bge	r2,zero,8005428 <__alt_data_end+0xf8005428>
 80058f8:	e00b883a 	mov	r5,fp
 80058fc:	8009883a 	mov	r4,r16
 8005900:	01800284 	movi	r6,10
 8005904:	000f883a 	mov	r7,zero
 8005908:	8007ebc0 	call	8007ebc <__multadd>
 800590c:	1039883a 	mov	fp,r2
 8005910:	d8800617 	ldw	r2,24(sp)
 8005914:	d8c00c17 	ldw	r3,48(sp)
 8005918:	10bfffc4 	addi	r2,r2,-1
 800591c:	d8800615 	stw	r2,24(sp)
 8005920:	1801681e 	bne	r3,zero,8005ec4 <_dtoa_r+0x15d4>
 8005924:	d9800d17 	ldw	r6,52(sp)
 8005928:	d9800915 	stw	r6,36(sp)
 800592c:	003ebe06 	br	8005428 <__alt_data_end+0xf8005428>
 8005930:	a0800417 	ldw	r2,16(r20)
 8005934:	10800104 	addi	r2,r2,4
 8005938:	1085883a 	add	r2,r2,r2
 800593c:	1085883a 	add	r2,r2,r2
 8005940:	a085883a 	add	r2,r20,r2
 8005944:	11000017 	ldw	r4,0(r2)
 8005948:	80081040 	call	8008104 <__hi0bits>
 800594c:	00c00804 	movi	r3,32
 8005950:	1885c83a 	sub	r2,r3,r2
 8005954:	003e9806 	br	80053b8 <__alt_data_end+0xf80053b8>
 8005958:	d8800717 	ldw	r2,28(sp)
 800595c:	003c1306 	br	80049ac <__alt_data_end+0xf80049ac>
 8005960:	00800084 	movi	r2,2
 8005964:	18bdb11e 	bne	r3,r2,800502c <__alt_data_end+0xf800502c>
 8005968:	d8000c15 	stw	zero,48(sp)
 800596c:	003f8006 	br	8005770 <__alt_data_end+0xf8005770>
 8005970:	d8c00417 	ldw	r3,16(sp)
 8005974:	00800084 	movi	r2,2
 8005978:	10fead0e 	bge	r2,r3,8005430 <__alt_data_end+0xf8005430>
 800597c:	383f921e 	bne	r7,zero,80057c8 <__alt_data_end+0xf80057c8>
 8005980:	a00b883a 	mov	r5,r20
 8005984:	8009883a 	mov	r4,r16
 8005988:	01800144 	movi	r6,5
 800598c:	8007ebc0 	call	8007ebc <__multadd>
 8005990:	e009883a 	mov	r4,fp
 8005994:	100b883a 	mov	r5,r2
 8005998:	1029883a 	mov	r20,r2
 800599c:	800875c0 	call	800875c <__mcmp>
 80059a0:	00bf890e 	bge	zero,r2,80057c8 <__alt_data_end+0xf80057c8>
 80059a4:	d9c00617 	ldw	r7,24(sp)
 80059a8:	d9800717 	ldw	r6,28(sp)
 80059ac:	00800c44 	movi	r2,49
 80059b0:	39c00044 	addi	r7,r7,1
 80059b4:	35800044 	addi	r22,r6,1
 80059b8:	30800005 	stb	r2,0(r6)
 80059bc:	d9c00615 	stw	r7,24(sp)
 80059c0:	003f8506 	br	80057d8 <__alt_data_end+0xf80057d8>
 80059c4:	d9800617 	ldw	r6,24(sp)
 80059c8:	d9c00717 	ldw	r7,28(sp)
 80059cc:	00800c44 	movi	r2,49
 80059d0:	31800044 	addi	r6,r6,1
 80059d4:	d9800615 	stw	r6,24(sp)
 80059d8:	38800005 	stb	r2,0(r7)
 80059dc:	003ec706 	br	80054fc <__alt_data_end+0xf80054fc>
 80059e0:	df000417 	ldw	fp,16(sp)
 80059e4:	dc000317 	ldw	r16,12(sp)
 80059e8:	003d6d06 	br	8004fa0 <__alt_data_end+0xf8004fa0>
 80059ec:	8809883a 	mov	r4,r17
 80059f0:	800e8f00 	call	800e8f0 <__floatsidf>
 80059f4:	9809883a 	mov	r4,r19
 80059f8:	a00b883a 	mov	r5,r20
 80059fc:	100d883a 	mov	r6,r2
 8005a00:	180f883a 	mov	r7,r3
 8005a04:	800d7e80 	call	800d7e8 <__muldf3>
 8005a08:	1009883a 	mov	r4,r2
 8005a0c:	180b883a 	mov	r5,r3
 8005a10:	000d883a 	mov	r6,zero
 8005a14:	01d00734 	movhi	r7,16412
 8005a18:	800c3880 	call	800c388 <__adddf3>
 8005a1c:	05bf3034 	movhi	r22,64704
 8005a20:	1023883a 	mov	r17,r2
 8005a24:	1daf883a 	add	r23,r3,r22
 8005a28:	9809883a 	mov	r4,r19
 8005a2c:	a00b883a 	mov	r5,r20
 8005a30:	000d883a 	mov	r6,zero
 8005a34:	01d00534 	movhi	r7,16404
 8005a38:	800dfe80 	call	800dfe8 <__subdf3>
 8005a3c:	1009883a 	mov	r4,r2
 8005a40:	180b883a 	mov	r5,r3
 8005a44:	880d883a 	mov	r6,r17
 8005a48:	b80f883a 	mov	r7,r23
 8005a4c:	1027883a 	mov	r19,r2
 8005a50:	1829883a 	mov	r20,r3
 8005a54:	800d6240 	call	800d624 <__gedf2>
 8005a58:	00806d16 	blt	zero,r2,8005c10 <_dtoa_r+0x1320>
 8005a5c:	b9e0003c 	xorhi	r7,r23,32768
 8005a60:	9809883a 	mov	r4,r19
 8005a64:	a00b883a 	mov	r5,r20
 8005a68:	880d883a 	mov	r6,r17
 8005a6c:	800d6fc0 	call	800d6fc <__ledf2>
 8005a70:	103d7a0e 	bge	r2,zero,800505c <__alt_data_end+0xf800505c>
 8005a74:	0029883a 	mov	r20,zero
 8005a78:	0023883a 	mov	r17,zero
 8005a7c:	003f5206 	br	80057c8 <__alt_data_end+0xf80057c8>
 8005a80:	d9800a17 	ldw	r6,40(sp)
 8005a84:	e00b883a 	mov	r5,fp
 8005a88:	8009883a 	mov	r4,r16
 8005a8c:	80084c40 	call	80084c4 <__pow5mult>
 8005a90:	1039883a 	mov	fp,r2
 8005a94:	003e3606 	br	8005370 <__alt_data_end+0xf8005370>
 8005a98:	d8000c15 	stw	zero,48(sp)
 8005a9c:	003c5c06 	br	8004c10 <__alt_data_end+0xf8004c10>
 8005aa0:	d9000a17 	ldw	r4,40(sp)
 8005aa4:	d9800b17 	ldw	r6,44(sp)
 8005aa8:	dd000a15 	stw	r20,40(sp)
 8005aac:	a105c83a 	sub	r2,r20,r4
 8005ab0:	308d883a 	add	r6,r6,r2
 8005ab4:	d9800b15 	stw	r6,44(sp)
 8005ab8:	0029883a 	mov	r20,zero
 8005abc:	003e0106 	br	80052c4 <__alt_data_end+0xf80052c4>
 8005ac0:	dcc00317 	ldw	r19,12(sp)
 8005ac4:	9029883a 	mov	r20,r18
 8005ac8:	04400084 	movi	r17,2
 8005acc:	003c8606 	br	8004ce8 <__alt_data_end+0xf8004ce8>
 8005ad0:	3023883a 	mov	r17,r6
 8005ad4:	80001115 	stw	zero,68(r16)
 8005ad8:	000b883a 	mov	r5,zero
 8005adc:	003c6006 	br	8004c60 <__alt_data_end+0xf8004c60>
 8005ae0:	04400044 	movi	r17,1
 8005ae4:	dc400d15 	stw	r17,52(sp)
 8005ae8:	dc400915 	stw	r17,36(sp)
 8005aec:	dc402115 	stw	r17,132(sp)
 8005af0:	003ff806 	br	8005ad4 <__alt_data_end+0xf8005ad4>
 8005af4:	d8800617 	ldw	r2,24(sp)
 8005af8:	00adc83a 	sub	r22,zero,r2
 8005afc:	b000ac26 	beq	r22,zero,8005db0 <_dtoa_r+0x14c0>
 8005b00:	b08003cc 	andi	r2,r22,15
 8005b04:	100490fa 	slli	r2,r2,3
 8005b08:	00c20074 	movhi	r3,2049
 8005b0c:	18c6dc04 	addi	r3,r3,7024
 8005b10:	d9000317 	ldw	r4,12(sp)
 8005b14:	1885883a 	add	r2,r3,r2
 8005b18:	11800017 	ldw	r6,0(r2)
 8005b1c:	11c00117 	ldw	r7,4(r2)
 8005b20:	b02dd13a 	srai	r22,r22,4
 8005b24:	900b883a 	mov	r5,r18
 8005b28:	800d7e80 	call	800d7e8 <__muldf3>
 8005b2c:	1027883a 	mov	r19,r2
 8005b30:	1829883a 	mov	r20,r3
 8005b34:	b000ec26 	beq	r22,zero,8005ee8 <_dtoa_r+0x15f8>
 8005b38:	05c20074 	movhi	r23,2049
 8005b3c:	bdc6d204 	addi	r23,r23,6984
 8005b40:	04400084 	movi	r17,2
 8005b44:	b180004c 	andi	r6,r22,1
 8005b48:	1009883a 	mov	r4,r2
 8005b4c:	b02dd07a 	srai	r22,r22,1
 8005b50:	180b883a 	mov	r5,r3
 8005b54:	30000426 	beq	r6,zero,8005b68 <_dtoa_r+0x1278>
 8005b58:	b9800017 	ldw	r6,0(r23)
 8005b5c:	b9c00117 	ldw	r7,4(r23)
 8005b60:	8c400044 	addi	r17,r17,1
 8005b64:	800d7e80 	call	800d7e8 <__muldf3>
 8005b68:	bdc00204 	addi	r23,r23,8
 8005b6c:	b03ff51e 	bne	r22,zero,8005b44 <__alt_data_end+0xf8005b44>
 8005b70:	1027883a 	mov	r19,r2
 8005b74:	1829883a 	mov	r20,r3
 8005b78:	003c7406 	br	8004d4c <__alt_data_end+0xf8004d4c>
 8005b7c:	d9800617 	ldw	r6,24(sp)
 8005b80:	d9c00717 	ldw	r7,28(sp)
 8005b84:	00c00c04 	movi	r3,48
 8005b88:	31800044 	addi	r6,r6,1
 8005b8c:	38c00005 	stb	r3,0(r7)
 8005b90:	02400c44 	movi	r9,49
 8005b94:	d9800615 	stw	r6,24(sp)
 8005b98:	12400005 	stb	r9,0(r2)
 8005b9c:	003d0006 	br	8004fa0 <__alt_data_end+0xf8004fa0>
 8005ba0:	89400117 	ldw	r5,4(r17)
 8005ba4:	8009883a 	mov	r4,r16
 8005ba8:	8007dec0 	call	8007dec <_Balloc>
 8005bac:	89800417 	ldw	r6,16(r17)
 8005bb0:	11000304 	addi	r4,r2,12
 8005bb4:	89400304 	addi	r5,r17,12
 8005bb8:	31800084 	addi	r6,r6,2
 8005bbc:	318d883a 	add	r6,r6,r6
 8005bc0:	318d883a 	add	r6,r6,r6
 8005bc4:	1025883a 	mov	r18,r2
 8005bc8:	8007a900 	call	8007a90 <memcpy>
 8005bcc:	8009883a 	mov	r4,r16
 8005bd0:	900b883a 	mov	r5,r18
 8005bd4:	01800044 	movi	r6,1
 8005bd8:	800860c0 	call	800860c <__lshift>
 8005bdc:	1027883a 	mov	r19,r2
 8005be0:	003e8806 	br	8005604 <__alt_data_end+0xf8005604>
 8005be4:	00800e44 	movi	r2,57
 8005be8:	b8bf2b26 	beq	r23,r2,8005898 <__alt_data_end+0xf8005898>
 8005bec:	ba400044 	addi	r9,r23,1
 8005bf0:	882b883a 	mov	r21,r17
 8005bf4:	95800044 	addi	r22,r18,1
 8005bf8:	92400005 	stb	r9,0(r18)
 8005bfc:	9823883a 	mov	r17,r19
 8005c00:	003e3e06 	br	80054fc <__alt_data_end+0xf80054fc>
 8005c04:	882b883a 	mov	r21,r17
 8005c08:	9823883a 	mov	r17,r19
 8005c0c:	003e2206 	br	8005498 <__alt_data_end+0xf8005498>
 8005c10:	0029883a 	mov	r20,zero
 8005c14:	0023883a 	mov	r17,zero
 8005c18:	003f6206 	br	80059a4 <__alt_data_end+0xf80059a4>
 8005c1c:	59bfffc4 	addi	r6,r11,-1
 8005c20:	300490fa 	slli	r2,r6,3
 8005c24:	00c20074 	movhi	r3,2049
 8005c28:	18c6dc04 	addi	r3,r3,7024
 8005c2c:	b80f883a 	mov	r7,r23
 8005c30:	1885883a 	add	r2,r3,r2
 8005c34:	11000017 	ldw	r4,0(r2)
 8005c38:	11400117 	ldw	r5,4(r2)
 8005c3c:	d8800717 	ldw	r2,28(sp)
 8005c40:	d9801015 	stw	r6,64(sp)
 8005c44:	880d883a 	mov	r6,r17
 8005c48:	dac01615 	stw	r11,88(sp)
 8005c4c:	15800044 	addi	r22,r2,1
 8005c50:	800d7e80 	call	800d7e8 <__muldf3>
 8005c54:	a00b883a 	mov	r5,r20
 8005c58:	9809883a 	mov	r4,r19
 8005c5c:	d8c01215 	stw	r3,72(sp)
 8005c60:	d8801115 	stw	r2,68(sp)
 8005c64:	800e8700 	call	800e870 <__fixdfsi>
 8005c68:	1009883a 	mov	r4,r2
 8005c6c:	1023883a 	mov	r17,r2
 8005c70:	800e8f00 	call	800e8f0 <__floatsidf>
 8005c74:	9809883a 	mov	r4,r19
 8005c78:	a00b883a 	mov	r5,r20
 8005c7c:	100d883a 	mov	r6,r2
 8005c80:	180f883a 	mov	r7,r3
 8005c84:	800dfe80 	call	800dfe8 <__subdf3>
 8005c88:	1815883a 	mov	r10,r3
 8005c8c:	d8c00717 	ldw	r3,28(sp)
 8005c90:	8c400c04 	addi	r17,r17,48
 8005c94:	102f883a 	mov	r23,r2
 8005c98:	1c400005 	stb	r17,0(r3)
 8005c9c:	dac01617 	ldw	r11,88(sp)
 8005ca0:	00800044 	movi	r2,1
 8005ca4:	58802426 	beq	r11,r2,8005d38 <_dtoa_r+0x1448>
 8005ca8:	d9800717 	ldw	r6,28(sp)
 8005cac:	dc001415 	stw	r16,80(sp)
 8005cb0:	b805883a 	mov	r2,r23
 8005cb4:	32d7883a 	add	r11,r6,r11
 8005cb8:	b027883a 	mov	r19,r22
 8005cbc:	5821883a 	mov	r16,r11
 8005cc0:	5007883a 	mov	r3,r10
 8005cc4:	902f883a 	mov	r23,r18
 8005cc8:	000d883a 	mov	r6,zero
 8005ccc:	01d00934 	movhi	r7,16420
 8005cd0:	1009883a 	mov	r4,r2
 8005cd4:	180b883a 	mov	r5,r3
 8005cd8:	800d7e80 	call	800d7e8 <__muldf3>
 8005cdc:	180b883a 	mov	r5,r3
 8005ce0:	1009883a 	mov	r4,r2
 8005ce4:	1829883a 	mov	r20,r3
 8005ce8:	1025883a 	mov	r18,r2
 8005cec:	800e8700 	call	800e870 <__fixdfsi>
 8005cf0:	1009883a 	mov	r4,r2
 8005cf4:	1023883a 	mov	r17,r2
 8005cf8:	800e8f00 	call	800e8f0 <__floatsidf>
 8005cfc:	9009883a 	mov	r4,r18
 8005d00:	a00b883a 	mov	r5,r20
 8005d04:	100d883a 	mov	r6,r2
 8005d08:	180f883a 	mov	r7,r3
 8005d0c:	8c400c04 	addi	r17,r17,48
 8005d10:	800dfe80 	call	800dfe8 <__subdf3>
 8005d14:	9cc00044 	addi	r19,r19,1
 8005d18:	9c7fffc5 	stb	r17,-1(r19)
 8005d1c:	9c3fea1e 	bne	r19,r16,8005cc8 <__alt_data_end+0xf8005cc8>
 8005d20:	d9c01017 	ldw	r7,64(sp)
 8005d24:	dc001417 	ldw	r16,80(sp)
 8005d28:	b825883a 	mov	r18,r23
 8005d2c:	1815883a 	mov	r10,r3
 8005d30:	102f883a 	mov	r23,r2
 8005d34:	b1ed883a 	add	r22,r22,r7
 8005d38:	d9001117 	ldw	r4,68(sp)
 8005d3c:	d9401217 	ldw	r5,72(sp)
 8005d40:	000d883a 	mov	r6,zero
 8005d44:	01cff834 	movhi	r7,16352
 8005d48:	da801615 	stw	r10,88(sp)
 8005d4c:	800c3880 	call	800c388 <__adddf3>
 8005d50:	da801617 	ldw	r10,88(sp)
 8005d54:	1009883a 	mov	r4,r2
 8005d58:	180b883a 	mov	r5,r3
 8005d5c:	500f883a 	mov	r7,r10
 8005d60:	b80d883a 	mov	r6,r23
 8005d64:	800d6fc0 	call	800d6fc <__ledf2>
 8005d68:	da801617 	ldw	r10,88(sp)
 8005d6c:	1000330e 	bge	r2,zero,8005e3c <_dtoa_r+0x154c>
 8005d70:	d9001317 	ldw	r4,76(sp)
 8005d74:	b53fffc3 	ldbu	r20,-1(r22)
 8005d78:	d9000615 	stw	r4,24(sp)
 8005d7c:	003d3706 	br	800525c <__alt_data_end+0xf800525c>
 8005d80:	d8800817 	ldw	r2,32(sp)
 8005d84:	11e7c83a 	sub	r19,r2,r7
 8005d88:	0005883a 	mov	r2,zero
 8005d8c:	003d5106 	br	80052d4 <__alt_data_end+0xf80052d4>
 8005d90:	00800044 	movi	r2,1
 8005d94:	003dbd06 	br	800548c <__alt_data_end+0xf800548c>
 8005d98:	d8800217 	ldw	r2,8(sp)
 8005d9c:	00c00d84 	movi	r3,54
 8005da0:	dd000a17 	ldw	r20,40(sp)
 8005da4:	1885c83a 	sub	r2,r3,r2
 8005da8:	dcc00817 	ldw	r19,32(sp)
 8005dac:	003d4906 	br	80052d4 <__alt_data_end+0xf80052d4>
 8005db0:	dcc00317 	ldw	r19,12(sp)
 8005db4:	9029883a 	mov	r20,r18
 8005db8:	04400084 	movi	r17,2
 8005dbc:	003be306 	br	8004d4c <__alt_data_end+0xf8004d4c>
 8005dc0:	d9000917 	ldw	r4,36(sp)
 8005dc4:	203f0926 	beq	r4,zero,80059ec <__alt_data_end+0xf80059ec>
 8005dc8:	d9800d17 	ldw	r6,52(sp)
 8005dcc:	01bca30e 	bge	zero,r6,800505c <__alt_data_end+0xf800505c>
 8005dd0:	a00b883a 	mov	r5,r20
 8005dd4:	9809883a 	mov	r4,r19
 8005dd8:	000d883a 	mov	r6,zero
 8005ddc:	01d00934 	movhi	r7,16420
 8005de0:	800d7e80 	call	800d7e8 <__muldf3>
 8005de4:	89000044 	addi	r4,r17,1
 8005de8:	1027883a 	mov	r19,r2
 8005dec:	1829883a 	mov	r20,r3
 8005df0:	800e8f00 	call	800e8f0 <__floatsidf>
 8005df4:	9809883a 	mov	r4,r19
 8005df8:	a00b883a 	mov	r5,r20
 8005dfc:	100d883a 	mov	r6,r2
 8005e00:	180f883a 	mov	r7,r3
 8005e04:	800d7e80 	call	800d7e8 <__muldf3>
 8005e08:	01d00734 	movhi	r7,16412
 8005e0c:	1009883a 	mov	r4,r2
 8005e10:	180b883a 	mov	r5,r3
 8005e14:	000d883a 	mov	r6,zero
 8005e18:	800c3880 	call	800c388 <__adddf3>
 8005e1c:	d9c00617 	ldw	r7,24(sp)
 8005e20:	05bf3034 	movhi	r22,64704
 8005e24:	1023883a 	mov	r17,r2
 8005e28:	39ffffc4 	addi	r7,r7,-1
 8005e2c:	d9c01315 	stw	r7,76(sp)
 8005e30:	1daf883a 	add	r23,r3,r22
 8005e34:	dac00d17 	ldw	r11,52(sp)
 8005e38:	003be006 	br	8004dbc <__alt_data_end+0xf8004dbc>
 8005e3c:	d9801117 	ldw	r6,68(sp)
 8005e40:	d9c01217 	ldw	r7,72(sp)
 8005e44:	0009883a 	mov	r4,zero
 8005e48:	014ff834 	movhi	r5,16352
 8005e4c:	da801615 	stw	r10,88(sp)
 8005e50:	800dfe80 	call	800dfe8 <__subdf3>
 8005e54:	da801617 	ldw	r10,88(sp)
 8005e58:	1009883a 	mov	r4,r2
 8005e5c:	180b883a 	mov	r5,r3
 8005e60:	b80d883a 	mov	r6,r23
 8005e64:	500f883a 	mov	r7,r10
 8005e68:	800d6240 	call	800d624 <__gedf2>
 8005e6c:	00bc7b0e 	bge	zero,r2,800505c <__alt_data_end+0xf800505c>
 8005e70:	01000c04 	movi	r4,48
 8005e74:	00000106 	br	8005e7c <_dtoa_r+0x158c>
 8005e78:	102d883a 	mov	r22,r2
 8005e7c:	b0bfffc4 	addi	r2,r22,-1
 8005e80:	10c00007 	ldb	r3,0(r2)
 8005e84:	193ffc26 	beq	r3,r4,8005e78 <__alt_data_end+0xf8005e78>
 8005e88:	d9001317 	ldw	r4,76(sp)
 8005e8c:	d9000615 	stw	r4,24(sp)
 8005e90:	003c4306 	br	8004fa0 <__alt_data_end+0xf8004fa0>
 8005e94:	d8c01317 	ldw	r3,76(sp)
 8005e98:	dc001117 	ldw	r16,68(sp)
 8005e9c:	d8c00615 	stw	r3,24(sp)
 8005ea0:	003cee06 	br	800525c <__alt_data_end+0xf800525c>
 8005ea4:	dd401217 	ldw	r21,72(sp)
 8005ea8:	dc001117 	ldw	r16,68(sp)
 8005eac:	dc801417 	ldw	r18,80(sp)
 8005eb0:	003c6a06 	br	800505c <__alt_data_end+0xf800505c>
 8005eb4:	103e6f1e 	bne	r2,zero,8005874 <__alt_data_end+0xf8005874>
 8005eb8:	b880004c 	andi	r2,r23,1
 8005ebc:	103e6d26 	beq	r2,zero,8005874 <__alt_data_end+0xf8005874>
 8005ec0:	003e6906 	br	8005868 <__alt_data_end+0xf8005868>
 8005ec4:	8009883a 	mov	r4,r16
 8005ec8:	880b883a 	mov	r5,r17
 8005ecc:	01800284 	movi	r6,10
 8005ed0:	000f883a 	mov	r7,zero
 8005ed4:	8007ebc0 	call	8007ebc <__multadd>
 8005ed8:	d9000d17 	ldw	r4,52(sp)
 8005edc:	1023883a 	mov	r17,r2
 8005ee0:	d9000915 	stw	r4,36(sp)
 8005ee4:	003d5006 	br	8005428 <__alt_data_end+0xf8005428>
 8005ee8:	04400084 	movi	r17,2
 8005eec:	003b9706 	br	8004d4c <__alt_data_end+0xf8004d4c>
 8005ef0:	d8801317 	ldw	r2,76(sp)
 8005ef4:	d8800615 	stw	r2,24(sp)
 8005ef8:	003cd806 	br	800525c <__alt_data_end+0xf800525c>
 8005efc:	d8801317 	ldw	r2,76(sp)
 8005f00:	d8800615 	stw	r2,24(sp)
 8005f04:	003c2606 	br	8004fa0 <__alt_data_end+0xf8004fa0>
 8005f08:	04c00044 	movi	r19,1
 8005f0c:	003b3506 	br	8004be4 <__alt_data_end+0xf8004be4>
 8005f10:	3023883a 	mov	r17,r6
 8005f14:	000b883a 	mov	r5,zero
 8005f18:	003b5106 	br	8004c60 <__alt_data_end+0xf8004c60>
 8005f1c:	20fd3426 	beq	r4,r3,80053f0 <__alt_data_end+0xf80053f0>
 8005f20:	00c00f04 	movi	r3,60
 8005f24:	1885c83a 	sub	r2,r3,r2
 8005f28:	003da106 	br	80055b0 <__alt_data_end+0xf80055b0>

08005f2c <_fflush_r>:
 8005f2c:	defffb04 	addi	sp,sp,-20
 8005f30:	dcc00315 	stw	r19,12(sp)
 8005f34:	dc400115 	stw	r17,4(sp)
 8005f38:	dfc00415 	stw	ra,16(sp)
 8005f3c:	dc800215 	stw	r18,8(sp)
 8005f40:	dc000015 	stw	r16,0(sp)
 8005f44:	2027883a 	mov	r19,r4
 8005f48:	2823883a 	mov	r17,r5
 8005f4c:	20000226 	beq	r4,zero,8005f58 <_fflush_r+0x2c>
 8005f50:	20800e17 	ldw	r2,56(r4)
 8005f54:	10005826 	beq	r2,zero,80060b8 <_fflush_r+0x18c>
 8005f58:	8880030b 	ldhu	r2,12(r17)
 8005f5c:	10ffffcc 	andi	r3,r2,65535
 8005f60:	18e0001c 	xori	r3,r3,32768
 8005f64:	18e00004 	addi	r3,r3,-32768
 8005f68:	18002b26 	beq	r3,zero,8006018 <_fflush_r+0xec>
 8005f6c:	10c0020c 	andi	r3,r2,8
 8005f70:	1800311e 	bne	r3,zero,8006038 <_fflush_r+0x10c>
 8005f74:	88c00117 	ldw	r3,4(r17)
 8005f78:	10820014 	ori	r2,r2,2048
 8005f7c:	8880030d 	sth	r2,12(r17)
 8005f80:	00c05c0e 	bge	zero,r3,80060f4 <_fflush_r+0x1c8>
 8005f84:	88c00a17 	ldw	r3,40(r17)
 8005f88:	18002326 	beq	r3,zero,8006018 <_fflush_r+0xec>
 8005f8c:	9c000017 	ldw	r16,0(r19)
 8005f90:	1104000c 	andi	r4,r2,4096
 8005f94:	98000015 	stw	zero,0(r19)
 8005f98:	20004b26 	beq	r4,zero,80060c8 <_fflush_r+0x19c>
 8005f9c:	89801417 	ldw	r6,80(r17)
 8005fa0:	1080010c 	andi	r2,r2,4
 8005fa4:	10000626 	beq	r2,zero,8005fc0 <_fflush_r+0x94>
 8005fa8:	89000117 	ldw	r4,4(r17)
 8005fac:	88800c17 	ldw	r2,48(r17)
 8005fb0:	310dc83a 	sub	r6,r6,r4
 8005fb4:	10000226 	beq	r2,zero,8005fc0 <_fflush_r+0x94>
 8005fb8:	88800f17 	ldw	r2,60(r17)
 8005fbc:	308dc83a 	sub	r6,r6,r2
 8005fc0:	89400717 	ldw	r5,28(r17)
 8005fc4:	9809883a 	mov	r4,r19
 8005fc8:	000f883a 	mov	r7,zero
 8005fcc:	183ee83a 	callr	r3
 8005fd0:	00ffffc4 	movi	r3,-1
 8005fd4:	10c04a26 	beq	r2,r3,8006100 <_fflush_r+0x1d4>
 8005fd8:	88c0030b 	ldhu	r3,12(r17)
 8005fdc:	89000417 	ldw	r4,16(r17)
 8005fe0:	88000115 	stw	zero,4(r17)
 8005fe4:	197dffcc 	andi	r5,r3,63487
 8005fe8:	8940030d 	sth	r5,12(r17)
 8005fec:	89000015 	stw	r4,0(r17)
 8005ff0:	18c4000c 	andi	r3,r3,4096
 8005ff4:	1800581e 	bne	r3,zero,8006158 <_fflush_r+0x22c>
 8005ff8:	89400c17 	ldw	r5,48(r17)
 8005ffc:	9c000015 	stw	r16,0(r19)
 8006000:	28000526 	beq	r5,zero,8006018 <_fflush_r+0xec>
 8006004:	88801004 	addi	r2,r17,64
 8006008:	28800226 	beq	r5,r2,8006014 <_fflush_r+0xe8>
 800600c:	9809883a 	mov	r4,r19
 8006010:	80066800 	call	8006680 <_free_r>
 8006014:	88000c15 	stw	zero,48(r17)
 8006018:	0005883a 	mov	r2,zero
 800601c:	dfc00417 	ldw	ra,16(sp)
 8006020:	dcc00317 	ldw	r19,12(sp)
 8006024:	dc800217 	ldw	r18,8(sp)
 8006028:	dc400117 	ldw	r17,4(sp)
 800602c:	dc000017 	ldw	r16,0(sp)
 8006030:	dec00504 	addi	sp,sp,20
 8006034:	f800283a 	ret
 8006038:	8c800417 	ldw	r18,16(r17)
 800603c:	903ff626 	beq	r18,zero,8006018 <__alt_data_end+0xf8006018>
 8006040:	8c000017 	ldw	r16,0(r17)
 8006044:	108000cc 	andi	r2,r2,3
 8006048:	8c800015 	stw	r18,0(r17)
 800604c:	84a1c83a 	sub	r16,r16,r18
 8006050:	10001b26 	beq	r2,zero,80060c0 <_fflush_r+0x194>
 8006054:	0005883a 	mov	r2,zero
 8006058:	88800215 	stw	r2,8(r17)
 800605c:	04000316 	blt	zero,r16,800606c <_fflush_r+0x140>
 8006060:	003fed06 	br	8006018 <__alt_data_end+0xf8006018>
 8006064:	90a5883a 	add	r18,r18,r2
 8006068:	043feb0e 	bge	zero,r16,8006018 <__alt_data_end+0xf8006018>
 800606c:	88800917 	ldw	r2,36(r17)
 8006070:	89400717 	ldw	r5,28(r17)
 8006074:	800f883a 	mov	r7,r16
 8006078:	900d883a 	mov	r6,r18
 800607c:	9809883a 	mov	r4,r19
 8006080:	103ee83a 	callr	r2
 8006084:	80a1c83a 	sub	r16,r16,r2
 8006088:	00bff616 	blt	zero,r2,8006064 <__alt_data_end+0xf8006064>
 800608c:	88c0030b 	ldhu	r3,12(r17)
 8006090:	00bfffc4 	movi	r2,-1
 8006094:	18c01014 	ori	r3,r3,64
 8006098:	88c0030d 	sth	r3,12(r17)
 800609c:	dfc00417 	ldw	ra,16(sp)
 80060a0:	dcc00317 	ldw	r19,12(sp)
 80060a4:	dc800217 	ldw	r18,8(sp)
 80060a8:	dc400117 	ldw	r17,4(sp)
 80060ac:	dc000017 	ldw	r16,0(sp)
 80060b0:	dec00504 	addi	sp,sp,20
 80060b4:	f800283a 	ret
 80060b8:	800624c0 	call	800624c <__sinit>
 80060bc:	003fa606 	br	8005f58 <__alt_data_end+0xf8005f58>
 80060c0:	88800517 	ldw	r2,20(r17)
 80060c4:	003fe406 	br	8006058 <__alt_data_end+0xf8006058>
 80060c8:	89400717 	ldw	r5,28(r17)
 80060cc:	000d883a 	mov	r6,zero
 80060d0:	9809883a 	mov	r4,r19
 80060d4:	01c00044 	movi	r7,1
 80060d8:	183ee83a 	callr	r3
 80060dc:	100d883a 	mov	r6,r2
 80060e0:	00bfffc4 	movi	r2,-1
 80060e4:	30801326 	beq	r6,r2,8006134 <_fflush_r+0x208>
 80060e8:	8880030b 	ldhu	r2,12(r17)
 80060ec:	88c00a17 	ldw	r3,40(r17)
 80060f0:	003fab06 	br	8005fa0 <__alt_data_end+0xf8005fa0>
 80060f4:	88c00f17 	ldw	r3,60(r17)
 80060f8:	00ffa216 	blt	zero,r3,8005f84 <__alt_data_end+0xf8005f84>
 80060fc:	003fc606 	br	8006018 <__alt_data_end+0xf8006018>
 8006100:	98c00017 	ldw	r3,0(r19)
 8006104:	183fb426 	beq	r3,zero,8005fd8 <__alt_data_end+0xf8005fd8>
 8006108:	01000744 	movi	r4,29
 800610c:	19000226 	beq	r3,r4,8006118 <_fflush_r+0x1ec>
 8006110:	01000584 	movi	r4,22
 8006114:	1900121e 	bne	r3,r4,8006160 <_fflush_r+0x234>
 8006118:	88c0030b 	ldhu	r3,12(r17)
 800611c:	88800417 	ldw	r2,16(r17)
 8006120:	88000115 	stw	zero,4(r17)
 8006124:	18fdffcc 	andi	r3,r3,63487
 8006128:	88c0030d 	sth	r3,12(r17)
 800612c:	88800015 	stw	r2,0(r17)
 8006130:	003fb106 	br	8005ff8 <__alt_data_end+0xf8005ff8>
 8006134:	98800017 	ldw	r2,0(r19)
 8006138:	103feb26 	beq	r2,zero,80060e8 <__alt_data_end+0xf80060e8>
 800613c:	00c00744 	movi	r3,29
 8006140:	10c00226 	beq	r2,r3,800614c <_fflush_r+0x220>
 8006144:	00c00584 	movi	r3,22
 8006148:	10ffd01e 	bne	r2,r3,800608c <__alt_data_end+0xf800608c>
 800614c:	9c000015 	stw	r16,0(r19)
 8006150:	0005883a 	mov	r2,zero
 8006154:	003fb106 	br	800601c <__alt_data_end+0xf800601c>
 8006158:	88801415 	stw	r2,80(r17)
 800615c:	003fa606 	br	8005ff8 <__alt_data_end+0xf8005ff8>
 8006160:	88c0030b 	ldhu	r3,12(r17)
 8006164:	18c01014 	ori	r3,r3,64
 8006168:	88c0030d 	sth	r3,12(r17)
 800616c:	003fab06 	br	800601c <__alt_data_end+0xf800601c>

08006170 <fflush>:
 8006170:	200b883a 	mov	r5,r4
 8006174:	20000426 	beq	r4,zero,8006188 <fflush+0x18>
 8006178:	00820074 	movhi	r2,2049
 800617c:	108e1004 	addi	r2,r2,14400
 8006180:	11000017 	ldw	r4,0(r2)
 8006184:	8005f2c1 	jmpi	8005f2c <_fflush_r>
 8006188:	00820074 	movhi	r2,2049
 800618c:	108e0f04 	addi	r2,r2,14396
 8006190:	11000017 	ldw	r4,0(r2)
 8006194:	01420034 	movhi	r5,2048
 8006198:	2957cb04 	addi	r5,r5,24364
 800619c:	8006ea41 	jmpi	8006ea4 <_fwalk_reent>

080061a0 <__fp_lock>:
 80061a0:	0005883a 	mov	r2,zero
 80061a4:	f800283a 	ret

080061a8 <__fp_unlock>:
 80061a8:	0005883a 	mov	r2,zero
 80061ac:	f800283a 	ret

080061b0 <_cleanup_r>:
 80061b0:	01420074 	movhi	r5,2049
 80061b4:	296b9d04 	addi	r5,r5,-20876
 80061b8:	8006dfc1 	jmpi	8006dfc <_fwalk>

080061bc <__sfmoreglue>:
 80061bc:	defffc04 	addi	sp,sp,-16
 80061c0:	dc800215 	stw	r18,8(sp)
 80061c4:	2825883a 	mov	r18,r5
 80061c8:	dc000015 	stw	r16,0(sp)
 80061cc:	01401a04 	movi	r5,104
 80061d0:	2021883a 	mov	r16,r4
 80061d4:	9009883a 	mov	r4,r18
 80061d8:	dfc00315 	stw	ra,12(sp)
 80061dc:	dc400115 	stw	r17,4(sp)
 80061e0:	800c3600 	call	800c360 <__mulsi3>
 80061e4:	8009883a 	mov	r4,r16
 80061e8:	11400304 	addi	r5,r2,12
 80061ec:	1023883a 	mov	r17,r2
 80061f0:	80071e40 	call	80071e4 <_malloc_r>
 80061f4:	1021883a 	mov	r16,r2
 80061f8:	10000726 	beq	r2,zero,8006218 <__sfmoreglue+0x5c>
 80061fc:	11000304 	addi	r4,r2,12
 8006200:	10000015 	stw	zero,0(r2)
 8006204:	14800115 	stw	r18,4(r2)
 8006208:	11000215 	stw	r4,8(r2)
 800620c:	000b883a 	mov	r5,zero
 8006210:	880d883a 	mov	r6,r17
 8006214:	8007cd80 	call	8007cd8 <memset>
 8006218:	8005883a 	mov	r2,r16
 800621c:	dfc00317 	ldw	ra,12(sp)
 8006220:	dc800217 	ldw	r18,8(sp)
 8006224:	dc400117 	ldw	r17,4(sp)
 8006228:	dc000017 	ldw	r16,0(sp)
 800622c:	dec00404 	addi	sp,sp,16
 8006230:	f800283a 	ret

08006234 <_cleanup>:
 8006234:	00820074 	movhi	r2,2049
 8006238:	108e0f04 	addi	r2,r2,14396
 800623c:	11000017 	ldw	r4,0(r2)
 8006240:	01420074 	movhi	r5,2049
 8006244:	296b9d04 	addi	r5,r5,-20876
 8006248:	8006dfc1 	jmpi	8006dfc <_fwalk>

0800624c <__sinit>:
 800624c:	20800e17 	ldw	r2,56(r4)
 8006250:	defff704 	addi	sp,sp,-36
 8006254:	dc800215 	stw	r18,8(sp)
 8006258:	dfc00815 	stw	ra,32(sp)
 800625c:	ddc00715 	stw	r23,28(sp)
 8006260:	dd800615 	stw	r22,24(sp)
 8006264:	dd400515 	stw	r21,20(sp)
 8006268:	dd000415 	stw	r20,16(sp)
 800626c:	dcc00315 	stw	r19,12(sp)
 8006270:	dc400115 	stw	r17,4(sp)
 8006274:	dc000015 	stw	r16,0(sp)
 8006278:	2025883a 	mov	r18,r4
 800627c:	10004f1e 	bne	r2,zero,80063bc <__sinit+0x170>
 8006280:	24000117 	ldw	r16,4(r4)
 8006284:	00c20034 	movhi	r3,2048
 8006288:	18d86c04 	addi	r3,r3,25008
 800628c:	20c00f15 	stw	r3,60(r4)
 8006290:	2080bb04 	addi	r2,r4,748
 8006294:	00c000c4 	movi	r3,3
 8006298:	05c00044 	movi	r23,1
 800629c:	20c0b915 	stw	r3,740(r4)
 80062a0:	2080ba15 	stw	r2,744(r4)
 80062a4:	25c00e15 	stw	r23,56(r4)
 80062a8:	2000b815 	stw	zero,736(r4)
 80062ac:	00800104 	movi	r2,4
 80062b0:	81001704 	addi	r4,r16,92
 80062b4:	000b883a 	mov	r5,zero
 80062b8:	01800204 	movi	r6,8
 80062bc:	80000015 	stw	zero,0(r16)
 80062c0:	80000115 	stw	zero,4(r16)
 80062c4:	80000215 	stw	zero,8(r16)
 80062c8:	8080030d 	sth	r2,12(r16)
 80062cc:	80001915 	stw	zero,100(r16)
 80062d0:	8000038d 	sth	zero,14(r16)
 80062d4:	80000415 	stw	zero,16(r16)
 80062d8:	80000515 	stw	zero,20(r16)
 80062dc:	80000615 	stw	zero,24(r16)
 80062e0:	8007cd80 	call	8007cd8 <memset>
 80062e4:	94400217 	ldw	r17,8(r18)
 80062e8:	05820074 	movhi	r22,2049
 80062ec:	b5a51104 	addi	r22,r22,-27580
 80062f0:	05420074 	movhi	r21,2049
 80062f4:	ad652804 	addi	r21,r21,-27488
 80062f8:	05020074 	movhi	r20,2049
 80062fc:	a5254704 	addi	r20,r20,-27364
 8006300:	04c20074 	movhi	r19,2049
 8006304:	9ce55e04 	addi	r19,r19,-27272
 8006308:	84000715 	stw	r16,28(r16)
 800630c:	85800815 	stw	r22,32(r16)
 8006310:	85400915 	stw	r21,36(r16)
 8006314:	85000a15 	stw	r20,40(r16)
 8006318:	84c00b15 	stw	r19,44(r16)
 800631c:	00800284 	movi	r2,10
 8006320:	89001704 	addi	r4,r17,92
 8006324:	000b883a 	mov	r5,zero
 8006328:	01800204 	movi	r6,8
 800632c:	88000015 	stw	zero,0(r17)
 8006330:	88000115 	stw	zero,4(r17)
 8006334:	88000215 	stw	zero,8(r17)
 8006338:	8880030d 	sth	r2,12(r17)
 800633c:	88001915 	stw	zero,100(r17)
 8006340:	8dc0038d 	sth	r23,14(r17)
 8006344:	88000415 	stw	zero,16(r17)
 8006348:	88000515 	stw	zero,20(r17)
 800634c:	88000615 	stw	zero,24(r17)
 8006350:	8007cd80 	call	8007cd8 <memset>
 8006354:	94000317 	ldw	r16,12(r18)
 8006358:	00800484 	movi	r2,18
 800635c:	8c400715 	stw	r17,28(r17)
 8006360:	8d800815 	stw	r22,32(r17)
 8006364:	8d400915 	stw	r21,36(r17)
 8006368:	8d000a15 	stw	r20,40(r17)
 800636c:	8cc00b15 	stw	r19,44(r17)
 8006370:	8080030d 	sth	r2,12(r16)
 8006374:	00800084 	movi	r2,2
 8006378:	80000015 	stw	zero,0(r16)
 800637c:	80000115 	stw	zero,4(r16)
 8006380:	80000215 	stw	zero,8(r16)
 8006384:	80001915 	stw	zero,100(r16)
 8006388:	8080038d 	sth	r2,14(r16)
 800638c:	80000415 	stw	zero,16(r16)
 8006390:	80000515 	stw	zero,20(r16)
 8006394:	80000615 	stw	zero,24(r16)
 8006398:	81001704 	addi	r4,r16,92
 800639c:	000b883a 	mov	r5,zero
 80063a0:	01800204 	movi	r6,8
 80063a4:	8007cd80 	call	8007cd8 <memset>
 80063a8:	84000715 	stw	r16,28(r16)
 80063ac:	85800815 	stw	r22,32(r16)
 80063b0:	85400915 	stw	r21,36(r16)
 80063b4:	85000a15 	stw	r20,40(r16)
 80063b8:	84c00b15 	stw	r19,44(r16)
 80063bc:	dfc00817 	ldw	ra,32(sp)
 80063c0:	ddc00717 	ldw	r23,28(sp)
 80063c4:	dd800617 	ldw	r22,24(sp)
 80063c8:	dd400517 	ldw	r21,20(sp)
 80063cc:	dd000417 	ldw	r20,16(sp)
 80063d0:	dcc00317 	ldw	r19,12(sp)
 80063d4:	dc800217 	ldw	r18,8(sp)
 80063d8:	dc400117 	ldw	r17,4(sp)
 80063dc:	dc000017 	ldw	r16,0(sp)
 80063e0:	dec00904 	addi	sp,sp,36
 80063e4:	f800283a 	ret

080063e8 <__sfp>:
 80063e8:	defffb04 	addi	sp,sp,-20
 80063ec:	00820074 	movhi	r2,2049
 80063f0:	108e0f04 	addi	r2,r2,14396
 80063f4:	dc800215 	stw	r18,8(sp)
 80063f8:	14800017 	ldw	r18,0(r2)
 80063fc:	dcc00315 	stw	r19,12(sp)
 8006400:	dfc00415 	stw	ra,16(sp)
 8006404:	90800e17 	ldw	r2,56(r18)
 8006408:	dc400115 	stw	r17,4(sp)
 800640c:	dc000015 	stw	r16,0(sp)
 8006410:	2027883a 	mov	r19,r4
 8006414:	10002f26 	beq	r2,zero,80064d4 <__sfp+0xec>
 8006418:	9480b804 	addi	r18,r18,736
 800641c:	047fffc4 	movi	r17,-1
 8006420:	91400117 	ldw	r5,4(r18)
 8006424:	94000217 	ldw	r16,8(r18)
 8006428:	297fffc4 	addi	r5,r5,-1
 800642c:	28000a16 	blt	r5,zero,8006458 <__sfp+0x70>
 8006430:	8080030f 	ldh	r2,12(r16)
 8006434:	10000c26 	beq	r2,zero,8006468 <__sfp+0x80>
 8006438:	80c01d04 	addi	r3,r16,116
 800643c:	00000206 	br	8006448 <__sfp+0x60>
 8006440:	18bfe60f 	ldh	r2,-104(r3)
 8006444:	10000826 	beq	r2,zero,8006468 <__sfp+0x80>
 8006448:	297fffc4 	addi	r5,r5,-1
 800644c:	1c3ffd04 	addi	r16,r3,-12
 8006450:	18c01a04 	addi	r3,r3,104
 8006454:	2c7ffa1e 	bne	r5,r17,8006440 <__alt_data_end+0xf8006440>
 8006458:	90800017 	ldw	r2,0(r18)
 800645c:	10002026 	beq	r2,zero,80064e0 <__sfp+0xf8>
 8006460:	1025883a 	mov	r18,r2
 8006464:	003fee06 	br	8006420 <__alt_data_end+0xf8006420>
 8006468:	00bfffc4 	movi	r2,-1
 800646c:	8080038d 	sth	r2,14(r16)
 8006470:	00800044 	movi	r2,1
 8006474:	8080030d 	sth	r2,12(r16)
 8006478:	80001915 	stw	zero,100(r16)
 800647c:	80000015 	stw	zero,0(r16)
 8006480:	80000215 	stw	zero,8(r16)
 8006484:	80000115 	stw	zero,4(r16)
 8006488:	80000415 	stw	zero,16(r16)
 800648c:	80000515 	stw	zero,20(r16)
 8006490:	80000615 	stw	zero,24(r16)
 8006494:	81001704 	addi	r4,r16,92
 8006498:	000b883a 	mov	r5,zero
 800649c:	01800204 	movi	r6,8
 80064a0:	8007cd80 	call	8007cd8 <memset>
 80064a4:	8005883a 	mov	r2,r16
 80064a8:	80000c15 	stw	zero,48(r16)
 80064ac:	80000d15 	stw	zero,52(r16)
 80064b0:	80001115 	stw	zero,68(r16)
 80064b4:	80001215 	stw	zero,72(r16)
 80064b8:	dfc00417 	ldw	ra,16(sp)
 80064bc:	dcc00317 	ldw	r19,12(sp)
 80064c0:	dc800217 	ldw	r18,8(sp)
 80064c4:	dc400117 	ldw	r17,4(sp)
 80064c8:	dc000017 	ldw	r16,0(sp)
 80064cc:	dec00504 	addi	sp,sp,20
 80064d0:	f800283a 	ret
 80064d4:	9009883a 	mov	r4,r18
 80064d8:	800624c0 	call	800624c <__sinit>
 80064dc:	003fce06 	br	8006418 <__alt_data_end+0xf8006418>
 80064e0:	9809883a 	mov	r4,r19
 80064e4:	01400104 	movi	r5,4
 80064e8:	80061bc0 	call	80061bc <__sfmoreglue>
 80064ec:	90800015 	stw	r2,0(r18)
 80064f0:	103fdb1e 	bne	r2,zero,8006460 <__alt_data_end+0xf8006460>
 80064f4:	00800304 	movi	r2,12
 80064f8:	98800015 	stw	r2,0(r19)
 80064fc:	0005883a 	mov	r2,zero
 8006500:	003fed06 	br	80064b8 <__alt_data_end+0xf80064b8>

08006504 <__sfp_lock_acquire>:
 8006504:	f800283a 	ret

08006508 <__sfp_lock_release>:
 8006508:	f800283a 	ret

0800650c <__sinit_lock_acquire>:
 800650c:	f800283a 	ret

08006510 <__sinit_lock_release>:
 8006510:	f800283a 	ret

08006514 <__fp_lock_all>:
 8006514:	00820074 	movhi	r2,2049
 8006518:	108e1004 	addi	r2,r2,14400
 800651c:	11000017 	ldw	r4,0(r2)
 8006520:	01420034 	movhi	r5,2048
 8006524:	29586804 	addi	r5,r5,24992
 8006528:	8006dfc1 	jmpi	8006dfc <_fwalk>

0800652c <__fp_unlock_all>:
 800652c:	00820074 	movhi	r2,2049
 8006530:	108e1004 	addi	r2,r2,14400
 8006534:	11000017 	ldw	r4,0(r2)
 8006538:	01420034 	movhi	r5,2048
 800653c:	29586a04 	addi	r5,r5,25000
 8006540:	8006dfc1 	jmpi	8006dfc <_fwalk>

08006544 <_malloc_trim_r>:
 8006544:	defffb04 	addi	sp,sp,-20
 8006548:	dcc00315 	stw	r19,12(sp)
 800654c:	dc800215 	stw	r18,8(sp)
 8006550:	dc400115 	stw	r17,4(sp)
 8006554:	dc000015 	stw	r16,0(sp)
 8006558:	2827883a 	mov	r19,r5
 800655c:	dfc00415 	stw	ra,16(sp)
 8006560:	04420074 	movhi	r17,2049
 8006564:	8c488804 	addi	r17,r17,8736
 8006568:	2021883a 	mov	r16,r4
 800656c:	800f0d80 	call	800f0d8 <__malloc_lock>
 8006570:	88800217 	ldw	r2,8(r17)
 8006574:	14800117 	ldw	r18,4(r2)
 8006578:	00bfff04 	movi	r2,-4
 800657c:	90a4703a 	and	r18,r18,r2
 8006580:	94e7c83a 	sub	r19,r18,r19
 8006584:	9cc3fbc4 	addi	r19,r19,4079
 8006588:	9826d33a 	srli	r19,r19,12
 800658c:	0083ffc4 	movi	r2,4095
 8006590:	9cffffc4 	addi	r19,r19,-1
 8006594:	9826933a 	slli	r19,r19,12
 8006598:	14c0060e 	bge	r2,r19,80065b4 <_malloc_trim_r+0x70>
 800659c:	8009883a 	mov	r4,r16
 80065a0:	000b883a 	mov	r5,zero
 80065a4:	80093e00 	call	80093e0 <_sbrk_r>
 80065a8:	88c00217 	ldw	r3,8(r17)
 80065ac:	1c87883a 	add	r3,r3,r18
 80065b0:	10c00a26 	beq	r2,r3,80065dc <_malloc_trim_r+0x98>
 80065b4:	8009883a 	mov	r4,r16
 80065b8:	800f0f80 	call	800f0f8 <__malloc_unlock>
 80065bc:	0005883a 	mov	r2,zero
 80065c0:	dfc00417 	ldw	ra,16(sp)
 80065c4:	dcc00317 	ldw	r19,12(sp)
 80065c8:	dc800217 	ldw	r18,8(sp)
 80065cc:	dc400117 	ldw	r17,4(sp)
 80065d0:	dc000017 	ldw	r16,0(sp)
 80065d4:	dec00504 	addi	sp,sp,20
 80065d8:	f800283a 	ret
 80065dc:	8009883a 	mov	r4,r16
 80065e0:	04cbc83a 	sub	r5,zero,r19
 80065e4:	80093e00 	call	80093e0 <_sbrk_r>
 80065e8:	00ffffc4 	movi	r3,-1
 80065ec:	10c01326 	beq	r2,r3,800663c <_malloc_trim_r+0xf8>
 80065f0:	00820074 	movhi	r2,2049
 80065f4:	1094ed04 	addi	r2,r2,21428
 80065f8:	11000017 	ldw	r4,0(r2)
 80065fc:	88c00217 	ldw	r3,8(r17)
 8006600:	94e5c83a 	sub	r18,r18,r19
 8006604:	94800054 	ori	r18,r18,1
 8006608:	24e7c83a 	sub	r19,r4,r19
 800660c:	1c800115 	stw	r18,4(r3)
 8006610:	8009883a 	mov	r4,r16
 8006614:	14c00015 	stw	r19,0(r2)
 8006618:	800f0f80 	call	800f0f8 <__malloc_unlock>
 800661c:	00800044 	movi	r2,1
 8006620:	dfc00417 	ldw	ra,16(sp)
 8006624:	dcc00317 	ldw	r19,12(sp)
 8006628:	dc800217 	ldw	r18,8(sp)
 800662c:	dc400117 	ldw	r17,4(sp)
 8006630:	dc000017 	ldw	r16,0(sp)
 8006634:	dec00504 	addi	sp,sp,20
 8006638:	f800283a 	ret
 800663c:	8009883a 	mov	r4,r16
 8006640:	000b883a 	mov	r5,zero
 8006644:	80093e00 	call	80093e0 <_sbrk_r>
 8006648:	88c00217 	ldw	r3,8(r17)
 800664c:	014003c4 	movi	r5,15
 8006650:	10c9c83a 	sub	r4,r2,r3
 8006654:	293fd70e 	bge	r5,r4,80065b4 <__alt_data_end+0xf80065b4>
 8006658:	01420074 	movhi	r5,2049
 800665c:	294e1204 	addi	r5,r5,14408
 8006660:	29400017 	ldw	r5,0(r5)
 8006664:	21000054 	ori	r4,r4,1
 8006668:	19000115 	stw	r4,4(r3)
 800666c:	1145c83a 	sub	r2,r2,r5
 8006670:	01420074 	movhi	r5,2049
 8006674:	2954ed04 	addi	r5,r5,21428
 8006678:	28800015 	stw	r2,0(r5)
 800667c:	003fcd06 	br	80065b4 <__alt_data_end+0xf80065b4>

08006680 <_free_r>:
 8006680:	defffd04 	addi	sp,sp,-12
 8006684:	dc000015 	stw	r16,0(sp)
 8006688:	dfc00215 	stw	ra,8(sp)
 800668c:	dc400115 	stw	r17,4(sp)
 8006690:	2821883a 	mov	r16,r5
 8006694:	28004c26 	beq	r5,zero,80067c8 <_free_r+0x148>
 8006698:	2023883a 	mov	r17,r4
 800669c:	800f0d80 	call	800f0d8 <__malloc_lock>
 80066a0:	823fff17 	ldw	r8,-4(r16)
 80066a4:	00bfff84 	movi	r2,-2
 80066a8:	81bffe04 	addi	r6,r16,-8
 80066ac:	4084703a 	and	r2,r8,r2
 80066b0:	3087883a 	add	r3,r6,r2
 80066b4:	01420074 	movhi	r5,2049
 80066b8:	29488804 	addi	r5,r5,8736
 80066bc:	1a400117 	ldw	r9,4(r3)
 80066c0:	29000217 	ldw	r4,8(r5)
 80066c4:	01ffff04 	movi	r7,-4
 80066c8:	49ce703a 	and	r7,r9,r7
 80066cc:	20c06526 	beq	r4,r3,8006864 <_free_r+0x1e4>
 80066d0:	19c00115 	stw	r7,4(r3)
 80066d4:	4200004c 	andi	r8,r8,1
 80066d8:	40003026 	beq	r8,zero,800679c <_free_r+0x11c>
 80066dc:	0009883a 	mov	r4,zero
 80066e0:	19d1883a 	add	r8,r3,r7
 80066e4:	42000117 	ldw	r8,4(r8)
 80066e8:	4200004c 	andi	r8,r8,1
 80066ec:	4000061e 	bne	r8,zero,8006708 <_free_r+0x88>
 80066f0:	11c5883a 	add	r2,r2,r7
 80066f4:	19c00217 	ldw	r7,8(r3)
 80066f8:	20004e26 	beq	r4,zero,8006834 <_free_r+0x1b4>
 80066fc:	18c00317 	ldw	r3,12(r3)
 8006700:	38c00315 	stw	r3,12(r7)
 8006704:	19c00215 	stw	r7,8(r3)
 8006708:	10c00054 	ori	r3,r2,1
 800670c:	30c00115 	stw	r3,4(r6)
 8006710:	3087883a 	add	r3,r6,r2
 8006714:	18800015 	stw	r2,0(r3)
 8006718:	20001a1e 	bne	r4,zero,8006784 <_free_r+0x104>
 800671c:	00c07fc4 	movi	r3,511
 8006720:	18802e2e 	bgeu	r3,r2,80067dc <_free_r+0x15c>
 8006724:	1006d27a 	srli	r3,r2,9
 8006728:	01000104 	movi	r4,4
 800672c:	20c06636 	bltu	r4,r3,80068c8 <_free_r+0x248>
 8006730:	1008d1ba 	srli	r4,r2,6
 8006734:	21000e04 	addi	r4,r4,56
 8006738:	210f883a 	add	r7,r4,r4
 800673c:	39cf883a 	add	r7,r7,r7
 8006740:	39cf883a 	add	r7,r7,r7
 8006744:	29cf883a 	add	r7,r5,r7
 8006748:	38c00217 	ldw	r3,8(r7)
 800674c:	01420074 	movhi	r5,2049
 8006750:	29488804 	addi	r5,r5,8736
 8006754:	19c06126 	beq	r3,r7,80068dc <_free_r+0x25c>
 8006758:	013fff04 	movi	r4,-4
 800675c:	19400117 	ldw	r5,4(r3)
 8006760:	290a703a 	and	r5,r5,r4
 8006764:	1140022e 	bgeu	r2,r5,8006770 <_free_r+0xf0>
 8006768:	18c00217 	ldw	r3,8(r3)
 800676c:	38fffb1e 	bne	r7,r3,800675c <__alt_data_end+0xf800675c>
 8006770:	18800317 	ldw	r2,12(r3)
 8006774:	30800315 	stw	r2,12(r6)
 8006778:	30c00215 	stw	r3,8(r6)
 800677c:	11800215 	stw	r6,8(r2)
 8006780:	19800315 	stw	r6,12(r3)
 8006784:	8809883a 	mov	r4,r17
 8006788:	dfc00217 	ldw	ra,8(sp)
 800678c:	dc400117 	ldw	r17,4(sp)
 8006790:	dc000017 	ldw	r16,0(sp)
 8006794:	dec00304 	addi	sp,sp,12
 8006798:	800f0f81 	jmpi	800f0f8 <__malloc_unlock>
 800679c:	813ffe17 	ldw	r4,-8(r16)
 80067a0:	2a400204 	addi	r9,r5,8
 80067a4:	310dc83a 	sub	r6,r6,r4
 80067a8:	32000217 	ldw	r8,8(r6)
 80067ac:	1105883a 	add	r2,r2,r4
 80067b0:	42404326 	beq	r8,r9,80068c0 <_free_r+0x240>
 80067b4:	32400317 	ldw	r9,12(r6)
 80067b8:	0009883a 	mov	r4,zero
 80067bc:	42400315 	stw	r9,12(r8)
 80067c0:	4a000215 	stw	r8,8(r9)
 80067c4:	003fc606 	br	80066e0 <__alt_data_end+0xf80066e0>
 80067c8:	dfc00217 	ldw	ra,8(sp)
 80067cc:	dc400117 	ldw	r17,4(sp)
 80067d0:	dc000017 	ldw	r16,0(sp)
 80067d4:	dec00304 	addi	sp,sp,12
 80067d8:	f800283a 	ret
 80067dc:	1004d0fa 	srli	r2,r2,3
 80067e0:	02000044 	movi	r8,1
 80067e4:	29c00117 	ldw	r7,4(r5)
 80067e8:	1087883a 	add	r3,r2,r2
 80067ec:	18c7883a 	add	r3,r3,r3
 80067f0:	18c7883a 	add	r3,r3,r3
 80067f4:	28c7883a 	add	r3,r5,r3
 80067f8:	1005d0ba 	srai	r2,r2,2
 80067fc:	19000217 	ldw	r4,8(r3)
 8006800:	30c00315 	stw	r3,12(r6)
 8006804:	4084983a 	sll	r2,r8,r2
 8006808:	31000215 	stw	r4,8(r6)
 800680c:	19800215 	stw	r6,8(r3)
 8006810:	11c4b03a 	or	r2,r2,r7
 8006814:	21800315 	stw	r6,12(r4)
 8006818:	8809883a 	mov	r4,r17
 800681c:	28800115 	stw	r2,4(r5)
 8006820:	dfc00217 	ldw	ra,8(sp)
 8006824:	dc400117 	ldw	r17,4(sp)
 8006828:	dc000017 	ldw	r16,0(sp)
 800682c:	dec00304 	addi	sp,sp,12
 8006830:	800f0f81 	jmpi	800f0f8 <__malloc_unlock>
 8006834:	02020074 	movhi	r8,2049
 8006838:	42088a04 	addi	r8,r8,8744
 800683c:	3a3faf1e 	bne	r7,r8,80066fc <__alt_data_end+0xf80066fc>
 8006840:	29800515 	stw	r6,20(r5)
 8006844:	29800415 	stw	r6,16(r5)
 8006848:	10c00054 	ori	r3,r2,1
 800684c:	31c00315 	stw	r7,12(r6)
 8006850:	31c00215 	stw	r7,8(r6)
 8006854:	30c00115 	stw	r3,4(r6)
 8006858:	308d883a 	add	r6,r6,r2
 800685c:	30800015 	stw	r2,0(r6)
 8006860:	003fc806 	br	8006784 <__alt_data_end+0xf8006784>
 8006864:	4200004c 	andi	r8,r8,1
 8006868:	3885883a 	add	r2,r7,r2
 800686c:	4000071e 	bne	r8,zero,800688c <_free_r+0x20c>
 8006870:	81fffe17 	ldw	r7,-8(r16)
 8006874:	31cdc83a 	sub	r6,r6,r7
 8006878:	30c00317 	ldw	r3,12(r6)
 800687c:	31000217 	ldw	r4,8(r6)
 8006880:	11c5883a 	add	r2,r2,r7
 8006884:	20c00315 	stw	r3,12(r4)
 8006888:	19000215 	stw	r4,8(r3)
 800688c:	00c20074 	movhi	r3,2049
 8006890:	18ce1304 	addi	r3,r3,14412
 8006894:	11000054 	ori	r4,r2,1
 8006898:	18c00017 	ldw	r3,0(r3)
 800689c:	31000115 	stw	r4,4(r6)
 80068a0:	29800215 	stw	r6,8(r5)
 80068a4:	10ffb736 	bltu	r2,r3,8006784 <__alt_data_end+0xf8006784>
 80068a8:	00820074 	movhi	r2,2049
 80068ac:	1094e504 	addi	r2,r2,21396
 80068b0:	11400017 	ldw	r5,0(r2)
 80068b4:	8809883a 	mov	r4,r17
 80068b8:	80065440 	call	8006544 <_malloc_trim_r>
 80068bc:	003fb106 	br	8006784 <__alt_data_end+0xf8006784>
 80068c0:	01000044 	movi	r4,1
 80068c4:	003f8606 	br	80066e0 <__alt_data_end+0xf80066e0>
 80068c8:	01000504 	movi	r4,20
 80068cc:	20c00b36 	bltu	r4,r3,80068fc <_free_r+0x27c>
 80068d0:	190016c4 	addi	r4,r3,91
 80068d4:	210f883a 	add	r7,r4,r4
 80068d8:	003f9806 	br	800673c <__alt_data_end+0xf800673c>
 80068dc:	2009d0ba 	srai	r4,r4,2
 80068e0:	00800044 	movi	r2,1
 80068e4:	29c00117 	ldw	r7,4(r5)
 80068e8:	1108983a 	sll	r4,r2,r4
 80068ec:	1805883a 	mov	r2,r3
 80068f0:	21c8b03a 	or	r4,r4,r7
 80068f4:	29000115 	stw	r4,4(r5)
 80068f8:	003f9e06 	br	8006774 <__alt_data_end+0xf8006774>
 80068fc:	01001504 	movi	r4,84
 8006900:	20c00436 	bltu	r4,r3,8006914 <_free_r+0x294>
 8006904:	1008d33a 	srli	r4,r2,12
 8006908:	21001b84 	addi	r4,r4,110
 800690c:	210f883a 	add	r7,r4,r4
 8006910:	003f8a06 	br	800673c <__alt_data_end+0xf800673c>
 8006914:	01005504 	movi	r4,340
 8006918:	20c00436 	bltu	r4,r3,800692c <_free_r+0x2ac>
 800691c:	1008d3fa 	srli	r4,r2,15
 8006920:	21001dc4 	addi	r4,r4,119
 8006924:	210f883a 	add	r7,r4,r4
 8006928:	003f8406 	br	800673c <__alt_data_end+0xf800673c>
 800692c:	01015504 	movi	r4,1364
 8006930:	20c00436 	bltu	r4,r3,8006944 <_free_r+0x2c4>
 8006934:	1008d4ba 	srli	r4,r2,18
 8006938:	21001f04 	addi	r4,r4,124
 800693c:	210f883a 	add	r7,r4,r4
 8006940:	003f7e06 	br	800673c <__alt_data_end+0xf800673c>
 8006944:	01c03f04 	movi	r7,252
 8006948:	01001f84 	movi	r4,126
 800694c:	003f7b06 	br	800673c <__alt_data_end+0xf800673c>

08006950 <__sfvwrite_r>:
 8006950:	30800217 	ldw	r2,8(r6)
 8006954:	defff404 	addi	sp,sp,-48
 8006958:	dcc00515 	stw	r19,20(sp)
 800695c:	dfc00b15 	stw	ra,44(sp)
 8006960:	df000a15 	stw	fp,40(sp)
 8006964:	ddc00915 	stw	r23,36(sp)
 8006968:	dd800815 	stw	r22,32(sp)
 800696c:	dd400715 	stw	r21,28(sp)
 8006970:	dd000615 	stw	r20,24(sp)
 8006974:	dc800415 	stw	r18,16(sp)
 8006978:	dc400315 	stw	r17,12(sp)
 800697c:	dc000215 	stw	r16,8(sp)
 8006980:	3027883a 	mov	r19,r6
 8006984:	10001d26 	beq	r2,zero,80069fc <__sfvwrite_r+0xac>
 8006988:	2880030b 	ldhu	r2,12(r5)
 800698c:	202b883a 	mov	r21,r4
 8006990:	2821883a 	mov	r16,r5
 8006994:	10c0020c 	andi	r3,r2,8
 8006998:	18002526 	beq	r3,zero,8006a30 <__sfvwrite_r+0xe0>
 800699c:	28c00417 	ldw	r3,16(r5)
 80069a0:	18002326 	beq	r3,zero,8006a30 <__sfvwrite_r+0xe0>
 80069a4:	10c0008c 	andi	r3,r2,2
 80069a8:	9c400017 	ldw	r17,0(r19)
 80069ac:	18002826 	beq	r3,zero,8006a50 <__sfvwrite_r+0x100>
 80069b0:	0029883a 	mov	r20,zero
 80069b4:	0025883a 	mov	r18,zero
 80069b8:	05810004 	movi	r22,1024
 80069bc:	a00d883a 	mov	r6,r20
 80069c0:	a809883a 	mov	r4,r21
 80069c4:	90004726 	beq	r18,zero,8006ae4 <__sfvwrite_r+0x194>
 80069c8:	900f883a 	mov	r7,r18
 80069cc:	81400717 	ldw	r5,28(r16)
 80069d0:	b480012e 	bgeu	r22,r18,80069d8 <__sfvwrite_r+0x88>
 80069d4:	01c10004 	movi	r7,1024
 80069d8:	80800917 	ldw	r2,36(r16)
 80069dc:	103ee83a 	callr	r2
 80069e0:	00804c0e 	bge	zero,r2,8006b14 <__sfvwrite_r+0x1c4>
 80069e4:	98c00217 	ldw	r3,8(r19)
 80069e8:	a0a9883a 	add	r20,r20,r2
 80069ec:	90a5c83a 	sub	r18,r18,r2
 80069f0:	1885c83a 	sub	r2,r3,r2
 80069f4:	98800215 	stw	r2,8(r19)
 80069f8:	103ff01e 	bne	r2,zero,80069bc <__alt_data_end+0xf80069bc>
 80069fc:	0005883a 	mov	r2,zero
 8006a00:	dfc00b17 	ldw	ra,44(sp)
 8006a04:	df000a17 	ldw	fp,40(sp)
 8006a08:	ddc00917 	ldw	r23,36(sp)
 8006a0c:	dd800817 	ldw	r22,32(sp)
 8006a10:	dd400717 	ldw	r21,28(sp)
 8006a14:	dd000617 	ldw	r20,24(sp)
 8006a18:	dcc00517 	ldw	r19,20(sp)
 8006a1c:	dc800417 	ldw	r18,16(sp)
 8006a20:	dc400317 	ldw	r17,12(sp)
 8006a24:	dc000217 	ldw	r16,8(sp)
 8006a28:	dec00c04 	addi	sp,sp,48
 8006a2c:	f800283a 	ret
 8006a30:	a809883a 	mov	r4,r21
 8006a34:	800b883a 	mov	r5,r16
 8006a38:	80045900 	call	8004590 <__swsetup_r>
 8006a3c:	1000e81e 	bne	r2,zero,8006de0 <__sfvwrite_r+0x490>
 8006a40:	8080030b 	ldhu	r2,12(r16)
 8006a44:	9c400017 	ldw	r17,0(r19)
 8006a48:	10c0008c 	andi	r3,r2,2
 8006a4c:	183fd81e 	bne	r3,zero,80069b0 <__alt_data_end+0xf80069b0>
 8006a50:	10c0004c 	andi	r3,r2,1
 8006a54:	002d883a 	mov	r22,zero
 8006a58:	1800331e 	bne	r3,zero,8006b28 <__sfvwrite_r+0x1d8>
 8006a5c:	0025883a 	mov	r18,zero
 8006a60:	90001c26 	beq	r18,zero,8006ad4 <__sfvwrite_r+0x184>
 8006a64:	10c0800c 	andi	r3,r2,512
 8006a68:	85000217 	ldw	r20,8(r16)
 8006a6c:	18006f26 	beq	r3,zero,8006c2c <__sfvwrite_r+0x2dc>
 8006a70:	95008936 	bltu	r18,r20,8006c98 <__sfvwrite_r+0x348>
 8006a74:	10c1200c 	andi	r3,r2,1152
 8006a78:	1800a11e 	bne	r3,zero,8006d00 <__sfvwrite_r+0x3b0>
 8006a7c:	81000017 	ldw	r4,0(r16)
 8006a80:	a02f883a 	mov	r23,r20
 8006a84:	a039883a 	mov	fp,r20
 8006a88:	9029883a 	mov	r20,r18
 8006a8c:	b00b883a 	mov	r5,r22
 8006a90:	b80d883a 	mov	r6,r23
 8006a94:	8007b9c0 	call	8007b9c <memmove>
 8006a98:	81400217 	ldw	r5,8(r16)
 8006a9c:	81000017 	ldw	r4,0(r16)
 8006aa0:	9005883a 	mov	r2,r18
 8006aa4:	2f39c83a 	sub	fp,r5,fp
 8006aa8:	25c7883a 	add	r3,r4,r23
 8006aac:	87000215 	stw	fp,8(r16)
 8006ab0:	80c00015 	stw	r3,0(r16)
 8006ab4:	98c00217 	ldw	r3,8(r19)
 8006ab8:	b0ad883a 	add	r22,r22,r2
 8006abc:	90a5c83a 	sub	r18,r18,r2
 8006ac0:	1d29c83a 	sub	r20,r3,r20
 8006ac4:	9d000215 	stw	r20,8(r19)
 8006ac8:	a03fcc26 	beq	r20,zero,80069fc <__alt_data_end+0xf80069fc>
 8006acc:	8080030b 	ldhu	r2,12(r16)
 8006ad0:	903fe41e 	bne	r18,zero,8006a64 <__alt_data_end+0xf8006a64>
 8006ad4:	8d800017 	ldw	r22,0(r17)
 8006ad8:	8c800117 	ldw	r18,4(r17)
 8006adc:	8c400204 	addi	r17,r17,8
 8006ae0:	003fdf06 	br	8006a60 <__alt_data_end+0xf8006a60>
 8006ae4:	8d000017 	ldw	r20,0(r17)
 8006ae8:	8c800117 	ldw	r18,4(r17)
 8006aec:	8c400204 	addi	r17,r17,8
 8006af0:	003fb206 	br	80069bc <__alt_data_end+0xf80069bc>
 8006af4:	8008e140 	call	8008e14 <_realloc_r>
 8006af8:	1039883a 	mov	fp,r2
 8006afc:	10009d1e 	bne	r2,zero,8006d74 <__sfvwrite_r+0x424>
 8006b00:	81400417 	ldw	r5,16(r16)
 8006b04:	a809883a 	mov	r4,r21
 8006b08:	80066800 	call	8006680 <_free_r>
 8006b0c:	00800304 	movi	r2,12
 8006b10:	a8800015 	stw	r2,0(r21)
 8006b14:	80c0030b 	ldhu	r3,12(r16)
 8006b18:	00bfffc4 	movi	r2,-1
 8006b1c:	18c01014 	ori	r3,r3,64
 8006b20:	80c0030d 	sth	r3,12(r16)
 8006b24:	003fb606 	br	8006a00 <__alt_data_end+0xf8006a00>
 8006b28:	0007883a 	mov	r3,zero
 8006b2c:	0039883a 	mov	fp,zero
 8006b30:	0025883a 	mov	r18,zero
 8006b34:	90001f26 	beq	r18,zero,8006bb4 <__sfvwrite_r+0x264>
 8006b38:	18006826 	beq	r3,zero,8006cdc <__sfvwrite_r+0x38c>
 8006b3c:	b02f883a 	mov	r23,r22
 8006b40:	9580012e 	bgeu	r18,r22,8006b48 <__sfvwrite_r+0x1f8>
 8006b44:	902f883a 	mov	r23,r18
 8006b48:	81000017 	ldw	r4,0(r16)
 8006b4c:	80800417 	ldw	r2,16(r16)
 8006b50:	b829883a 	mov	r20,r23
 8006b54:	81800217 	ldw	r6,8(r16)
 8006b58:	81c00517 	ldw	r7,20(r16)
 8006b5c:	1100022e 	bgeu	r2,r4,8006b68 <__sfvwrite_r+0x218>
 8006b60:	31d1883a 	add	r8,r6,r7
 8006b64:	45c01816 	blt	r8,r23,8006bc8 <__sfvwrite_r+0x278>
 8006b68:	b9c03f16 	blt	r23,r7,8006c68 <__sfvwrite_r+0x318>
 8006b6c:	80800917 	ldw	r2,36(r16)
 8006b70:	81400717 	ldw	r5,28(r16)
 8006b74:	a809883a 	mov	r4,r21
 8006b78:	d8c00115 	stw	r3,4(sp)
 8006b7c:	e00d883a 	mov	r6,fp
 8006b80:	103ee83a 	callr	r2
 8006b84:	1029883a 	mov	r20,r2
 8006b88:	d8c00117 	ldw	r3,4(sp)
 8006b8c:	00bfe10e 	bge	zero,r2,8006b14 <__alt_data_end+0xf8006b14>
 8006b90:	b52dc83a 	sub	r22,r22,r20
 8006b94:	b0001f26 	beq	r22,zero,8006c14 <__sfvwrite_r+0x2c4>
 8006b98:	98800217 	ldw	r2,8(r19)
 8006b9c:	e539883a 	add	fp,fp,r20
 8006ba0:	9525c83a 	sub	r18,r18,r20
 8006ba4:	1529c83a 	sub	r20,r2,r20
 8006ba8:	9d000215 	stw	r20,8(r19)
 8006bac:	a03f9326 	beq	r20,zero,80069fc <__alt_data_end+0xf80069fc>
 8006bb0:	903fe11e 	bne	r18,zero,8006b38 <__alt_data_end+0xf8006b38>
 8006bb4:	8f000017 	ldw	fp,0(r17)
 8006bb8:	8c800117 	ldw	r18,4(r17)
 8006bbc:	0007883a 	mov	r3,zero
 8006bc0:	8c400204 	addi	r17,r17,8
 8006bc4:	003fdb06 	br	8006b34 <__alt_data_end+0xf8006b34>
 8006bc8:	400d883a 	mov	r6,r8
 8006bcc:	e00b883a 	mov	r5,fp
 8006bd0:	d8c00115 	stw	r3,4(sp)
 8006bd4:	da000015 	stw	r8,0(sp)
 8006bd8:	8007b9c0 	call	8007b9c <memmove>
 8006bdc:	da000017 	ldw	r8,0(sp)
 8006be0:	80800017 	ldw	r2,0(r16)
 8006be4:	a809883a 	mov	r4,r21
 8006be8:	800b883a 	mov	r5,r16
 8006bec:	1205883a 	add	r2,r2,r8
 8006bf0:	80800015 	stw	r2,0(r16)
 8006bf4:	da000015 	stw	r8,0(sp)
 8006bf8:	8005f2c0 	call	8005f2c <_fflush_r>
 8006bfc:	d8c00117 	ldw	r3,4(sp)
 8006c00:	da000017 	ldw	r8,0(sp)
 8006c04:	103fc31e 	bne	r2,zero,8006b14 <__alt_data_end+0xf8006b14>
 8006c08:	4029883a 	mov	r20,r8
 8006c0c:	b52dc83a 	sub	r22,r22,r20
 8006c10:	b03fe11e 	bne	r22,zero,8006b98 <__alt_data_end+0xf8006b98>
 8006c14:	a809883a 	mov	r4,r21
 8006c18:	800b883a 	mov	r5,r16
 8006c1c:	8005f2c0 	call	8005f2c <_fflush_r>
 8006c20:	103fbc1e 	bne	r2,zero,8006b14 <__alt_data_end+0xf8006b14>
 8006c24:	0007883a 	mov	r3,zero
 8006c28:	003fdb06 	br	8006b98 <__alt_data_end+0xf8006b98>
 8006c2c:	81000017 	ldw	r4,0(r16)
 8006c30:	80800417 	ldw	r2,16(r16)
 8006c34:	1100012e 	bgeu	r2,r4,8006c3c <__sfvwrite_r+0x2ec>
 8006c38:	a4805836 	bltu	r20,r18,8006d9c <__sfvwrite_r+0x44c>
 8006c3c:	81c00517 	ldw	r7,20(r16)
 8006c40:	91c01a36 	bltu	r18,r7,8006cac <__sfvwrite_r+0x35c>
 8006c44:	80800917 	ldw	r2,36(r16)
 8006c48:	81400717 	ldw	r5,28(r16)
 8006c4c:	a809883a 	mov	r4,r21
 8006c50:	b00d883a 	mov	r6,r22
 8006c54:	103ee83a 	callr	r2
 8006c58:	1029883a 	mov	r20,r2
 8006c5c:	00bfad0e 	bge	zero,r2,8006b14 <__alt_data_end+0xf8006b14>
 8006c60:	a005883a 	mov	r2,r20
 8006c64:	003f9306 	br	8006ab4 <__alt_data_end+0xf8006ab4>
 8006c68:	b80d883a 	mov	r6,r23
 8006c6c:	e00b883a 	mov	r5,fp
 8006c70:	d8c00115 	stw	r3,4(sp)
 8006c74:	8007b9c0 	call	8007b9c <memmove>
 8006c78:	80800217 	ldw	r2,8(r16)
 8006c7c:	81000017 	ldw	r4,0(r16)
 8006c80:	d8c00117 	ldw	r3,4(sp)
 8006c84:	15c5c83a 	sub	r2,r2,r23
 8006c88:	25ef883a 	add	r23,r4,r23
 8006c8c:	80800215 	stw	r2,8(r16)
 8006c90:	85c00015 	stw	r23,0(r16)
 8006c94:	003fbe06 	br	8006b90 <__alt_data_end+0xf8006b90>
 8006c98:	81000017 	ldw	r4,0(r16)
 8006c9c:	9039883a 	mov	fp,r18
 8006ca0:	9029883a 	mov	r20,r18
 8006ca4:	902f883a 	mov	r23,r18
 8006ca8:	003f7806 	br	8006a8c <__alt_data_end+0xf8006a8c>
 8006cac:	b00b883a 	mov	r5,r22
 8006cb0:	900d883a 	mov	r6,r18
 8006cb4:	8007b9c0 	call	8007b9c <memmove>
 8006cb8:	80c00217 	ldw	r3,8(r16)
 8006cbc:	80800017 	ldw	r2,0(r16)
 8006cc0:	9029883a 	mov	r20,r18
 8006cc4:	1c87c83a 	sub	r3,r3,r18
 8006cc8:	1485883a 	add	r2,r2,r18
 8006ccc:	80800015 	stw	r2,0(r16)
 8006cd0:	80c00215 	stw	r3,8(r16)
 8006cd4:	9005883a 	mov	r2,r18
 8006cd8:	003f7606 	br	8006ab4 <__alt_data_end+0xf8006ab4>
 8006cdc:	e009883a 	mov	r4,fp
 8006ce0:	01400284 	movi	r5,10
 8006ce4:	900d883a 	mov	r6,r18
 8006ce8:	80079a80 	call	80079a8 <memchr>
 8006cec:	10003926 	beq	r2,zero,8006dd4 <__sfvwrite_r+0x484>
 8006cf0:	15800044 	addi	r22,r2,1
 8006cf4:	b72dc83a 	sub	r22,r22,fp
 8006cf8:	00c00044 	movi	r3,1
 8006cfc:	003f8f06 	br	8006b3c <__alt_data_end+0xf8006b3c>
 8006d00:	81000517 	ldw	r4,20(r16)
 8006d04:	81400417 	ldw	r5,16(r16)
 8006d08:	80c00017 	ldw	r3,0(r16)
 8006d0c:	210d883a 	add	r6,r4,r4
 8006d10:	3109883a 	add	r4,r6,r4
 8006d14:	2028d7fa 	srli	r20,r4,31
 8006d18:	196fc83a 	sub	r23,r3,r5
 8006d1c:	b9800044 	addi	r6,r23,1
 8006d20:	a109883a 	add	r4,r20,r4
 8006d24:	2029d07a 	srai	r20,r4,1
 8006d28:	348d883a 	add	r6,r6,r18
 8006d2c:	a180272e 	bgeu	r20,r6,8006dcc <__sfvwrite_r+0x47c>
 8006d30:	3029883a 	mov	r20,r6
 8006d34:	1081000c 	andi	r2,r2,1024
 8006d38:	a809883a 	mov	r4,r21
 8006d3c:	103f6d26 	beq	r2,zero,8006af4 <__alt_data_end+0xf8006af4>
 8006d40:	300b883a 	mov	r5,r6
 8006d44:	80071e40 	call	80071e4 <_malloc_r>
 8006d48:	1039883a 	mov	fp,r2
 8006d4c:	103f6f26 	beq	r2,zero,8006b0c <__alt_data_end+0xf8006b0c>
 8006d50:	81400417 	ldw	r5,16(r16)
 8006d54:	1009883a 	mov	r4,r2
 8006d58:	b80d883a 	mov	r6,r23
 8006d5c:	8007a900 	call	8007a90 <memcpy>
 8006d60:	8080030b 	ldhu	r2,12(r16)
 8006d64:	00fedfc4 	movi	r3,-1153
 8006d68:	10c4703a 	and	r2,r2,r3
 8006d6c:	10802014 	ori	r2,r2,128
 8006d70:	8080030d 	sth	r2,12(r16)
 8006d74:	e5c9883a 	add	r4,fp,r23
 8006d78:	a5c7c83a 	sub	r3,r20,r23
 8006d7c:	87000415 	stw	fp,16(r16)
 8006d80:	85000515 	stw	r20,20(r16)
 8006d84:	81000015 	stw	r4,0(r16)
 8006d88:	9039883a 	mov	fp,r18
 8006d8c:	80c00215 	stw	r3,8(r16)
 8006d90:	9029883a 	mov	r20,r18
 8006d94:	902f883a 	mov	r23,r18
 8006d98:	003f3c06 	br	8006a8c <__alt_data_end+0xf8006a8c>
 8006d9c:	b00b883a 	mov	r5,r22
 8006da0:	a00d883a 	mov	r6,r20
 8006da4:	8007b9c0 	call	8007b9c <memmove>
 8006da8:	80800017 	ldw	r2,0(r16)
 8006dac:	a809883a 	mov	r4,r21
 8006db0:	800b883a 	mov	r5,r16
 8006db4:	1505883a 	add	r2,r2,r20
 8006db8:	80800015 	stw	r2,0(r16)
 8006dbc:	8005f2c0 	call	8005f2c <_fflush_r>
 8006dc0:	103f541e 	bne	r2,zero,8006b14 <__alt_data_end+0xf8006b14>
 8006dc4:	a005883a 	mov	r2,r20
 8006dc8:	003f3a06 	br	8006ab4 <__alt_data_end+0xf8006ab4>
 8006dcc:	a00d883a 	mov	r6,r20
 8006dd0:	003fd806 	br	8006d34 <__alt_data_end+0xf8006d34>
 8006dd4:	95800044 	addi	r22,r18,1
 8006dd8:	00c00044 	movi	r3,1
 8006ddc:	003f5706 	br	8006b3c <__alt_data_end+0xf8006b3c>
 8006de0:	80c0030b 	ldhu	r3,12(r16)
 8006de4:	00bfffc4 	movi	r2,-1
 8006de8:	18c01014 	ori	r3,r3,64
 8006dec:	80c0030d 	sth	r3,12(r16)
 8006df0:	00c00244 	movi	r3,9
 8006df4:	a8c00015 	stw	r3,0(r21)
 8006df8:	003f0106 	br	8006a00 <__alt_data_end+0xf8006a00>

08006dfc <_fwalk>:
 8006dfc:	defff904 	addi	sp,sp,-28
 8006e00:	dcc00315 	stw	r19,12(sp)
 8006e04:	24c0b804 	addi	r19,r4,736
 8006e08:	dd400515 	stw	r21,20(sp)
 8006e0c:	dd000415 	stw	r20,16(sp)
 8006e10:	dfc00615 	stw	ra,24(sp)
 8006e14:	dc800215 	stw	r18,8(sp)
 8006e18:	dc400115 	stw	r17,4(sp)
 8006e1c:	dc000015 	stw	r16,0(sp)
 8006e20:	282b883a 	mov	r21,r5
 8006e24:	0029883a 	mov	r20,zero
 8006e28:	80065040 	call	8006504 <__sfp_lock_acquire>
 8006e2c:	98001226 	beq	r19,zero,8006e78 <_fwalk+0x7c>
 8006e30:	04bfffc4 	movi	r18,-1
 8006e34:	9c400117 	ldw	r17,4(r19)
 8006e38:	9c000217 	ldw	r16,8(r19)
 8006e3c:	8c7fffc4 	addi	r17,r17,-1
 8006e40:	88000b16 	blt	r17,zero,8006e70 <_fwalk+0x74>
 8006e44:	84000304 	addi	r16,r16,12
 8006e48:	80c0000f 	ldh	r3,0(r16)
 8006e4c:	8c7fffc4 	addi	r17,r17,-1
 8006e50:	813ffd04 	addi	r4,r16,-12
 8006e54:	18000426 	beq	r3,zero,8006e68 <_fwalk+0x6c>
 8006e58:	80c0008f 	ldh	r3,2(r16)
 8006e5c:	1c800226 	beq	r3,r18,8006e68 <_fwalk+0x6c>
 8006e60:	a83ee83a 	callr	r21
 8006e64:	a0a8b03a 	or	r20,r20,r2
 8006e68:	84001a04 	addi	r16,r16,104
 8006e6c:	8cbff61e 	bne	r17,r18,8006e48 <__alt_data_end+0xf8006e48>
 8006e70:	9cc00017 	ldw	r19,0(r19)
 8006e74:	983fef1e 	bne	r19,zero,8006e34 <__alt_data_end+0xf8006e34>
 8006e78:	80065080 	call	8006508 <__sfp_lock_release>
 8006e7c:	a005883a 	mov	r2,r20
 8006e80:	dfc00617 	ldw	ra,24(sp)
 8006e84:	dd400517 	ldw	r21,20(sp)
 8006e88:	dd000417 	ldw	r20,16(sp)
 8006e8c:	dcc00317 	ldw	r19,12(sp)
 8006e90:	dc800217 	ldw	r18,8(sp)
 8006e94:	dc400117 	ldw	r17,4(sp)
 8006e98:	dc000017 	ldw	r16,0(sp)
 8006e9c:	dec00704 	addi	sp,sp,28
 8006ea0:	f800283a 	ret

08006ea4 <_fwalk_reent>:
 8006ea4:	defff804 	addi	sp,sp,-32
 8006ea8:	dcc00315 	stw	r19,12(sp)
 8006eac:	24c0b804 	addi	r19,r4,736
 8006eb0:	dd800615 	stw	r22,24(sp)
 8006eb4:	dd400515 	stw	r21,20(sp)
 8006eb8:	dd000415 	stw	r20,16(sp)
 8006ebc:	dfc00715 	stw	ra,28(sp)
 8006ec0:	dc800215 	stw	r18,8(sp)
 8006ec4:	dc400115 	stw	r17,4(sp)
 8006ec8:	dc000015 	stw	r16,0(sp)
 8006ecc:	2029883a 	mov	r20,r4
 8006ed0:	282b883a 	mov	r21,r5
 8006ed4:	002d883a 	mov	r22,zero
 8006ed8:	80065040 	call	8006504 <__sfp_lock_acquire>
 8006edc:	98001326 	beq	r19,zero,8006f2c <_fwalk_reent+0x88>
 8006ee0:	04bfffc4 	movi	r18,-1
 8006ee4:	9c400117 	ldw	r17,4(r19)
 8006ee8:	9c000217 	ldw	r16,8(r19)
 8006eec:	8c7fffc4 	addi	r17,r17,-1
 8006ef0:	88000c16 	blt	r17,zero,8006f24 <_fwalk_reent+0x80>
 8006ef4:	84000304 	addi	r16,r16,12
 8006ef8:	80c0000f 	ldh	r3,0(r16)
 8006efc:	8c7fffc4 	addi	r17,r17,-1
 8006f00:	817ffd04 	addi	r5,r16,-12
 8006f04:	18000526 	beq	r3,zero,8006f1c <_fwalk_reent+0x78>
 8006f08:	80c0008f 	ldh	r3,2(r16)
 8006f0c:	a009883a 	mov	r4,r20
 8006f10:	1c800226 	beq	r3,r18,8006f1c <_fwalk_reent+0x78>
 8006f14:	a83ee83a 	callr	r21
 8006f18:	b0acb03a 	or	r22,r22,r2
 8006f1c:	84001a04 	addi	r16,r16,104
 8006f20:	8cbff51e 	bne	r17,r18,8006ef8 <__alt_data_end+0xf8006ef8>
 8006f24:	9cc00017 	ldw	r19,0(r19)
 8006f28:	983fee1e 	bne	r19,zero,8006ee4 <__alt_data_end+0xf8006ee4>
 8006f2c:	80065080 	call	8006508 <__sfp_lock_release>
 8006f30:	b005883a 	mov	r2,r22
 8006f34:	dfc00717 	ldw	ra,28(sp)
 8006f38:	dd800617 	ldw	r22,24(sp)
 8006f3c:	dd400517 	ldw	r21,20(sp)
 8006f40:	dd000417 	ldw	r20,16(sp)
 8006f44:	dcc00317 	ldw	r19,12(sp)
 8006f48:	dc800217 	ldw	r18,8(sp)
 8006f4c:	dc400117 	ldw	r17,4(sp)
 8006f50:	dc000017 	ldw	r16,0(sp)
 8006f54:	dec00804 	addi	sp,sp,32
 8006f58:	f800283a 	ret

08006f5c <_setlocale_r>:
 8006f5c:	defffe04 	addi	sp,sp,-8
 8006f60:	dc000015 	stw	r16,0(sp)
 8006f64:	dfc00115 	stw	ra,4(sp)
 8006f68:	3021883a 	mov	r16,r6
 8006f6c:	30000526 	beq	r6,zero,8006f84 <_setlocale_r+0x28>
 8006f70:	3009883a 	mov	r4,r6
 8006f74:	01420074 	movhi	r5,2049
 8006f78:	2946c204 	addi	r5,r5,6920
 8006f7c:	80095800 	call	8009580 <strcmp>
 8006f80:	1000061e 	bne	r2,zero,8006f9c <_setlocale_r+0x40>
 8006f84:	00820074 	movhi	r2,2049
 8006f88:	1086c104 	addi	r2,r2,6916
 8006f8c:	dfc00117 	ldw	ra,4(sp)
 8006f90:	dc000017 	ldw	r16,0(sp)
 8006f94:	dec00204 	addi	sp,sp,8
 8006f98:	f800283a 	ret
 8006f9c:	8009883a 	mov	r4,r16
 8006fa0:	01420074 	movhi	r5,2049
 8006fa4:	2946c104 	addi	r5,r5,6916
 8006fa8:	80095800 	call	8009580 <strcmp>
 8006fac:	103ff526 	beq	r2,zero,8006f84 <__alt_data_end+0xf8006f84>
 8006fb0:	8009883a 	mov	r4,r16
 8006fb4:	01420074 	movhi	r5,2049
 8006fb8:	2946ac04 	addi	r5,r5,6832
 8006fbc:	80095800 	call	8009580 <strcmp>
 8006fc0:	103ff026 	beq	r2,zero,8006f84 <__alt_data_end+0xf8006f84>
 8006fc4:	0005883a 	mov	r2,zero
 8006fc8:	003ff006 	br	8006f8c <__alt_data_end+0xf8006f8c>

08006fcc <__locale_charset>:
 8006fcc:	00820074 	movhi	r2,2049
 8006fd0:	10887204 	addi	r2,r2,8648
 8006fd4:	f800283a 	ret

08006fd8 <__locale_mb_cur_max>:
 8006fd8:	00820074 	movhi	r2,2049
 8006fdc:	108e1104 	addi	r2,r2,14404
 8006fe0:	10800017 	ldw	r2,0(r2)
 8006fe4:	f800283a 	ret

08006fe8 <__locale_msgcharset>:
 8006fe8:	00820074 	movhi	r2,2049
 8006fec:	10886a04 	addi	r2,r2,8616
 8006ff0:	f800283a 	ret

08006ff4 <__locale_cjk_lang>:
 8006ff4:	0005883a 	mov	r2,zero
 8006ff8:	f800283a 	ret

08006ffc <_localeconv_r>:
 8006ffc:	00820074 	movhi	r2,2049
 8007000:	10887a04 	addi	r2,r2,8680
 8007004:	f800283a 	ret

08007008 <setlocale>:
 8007008:	00c20074 	movhi	r3,2049
 800700c:	18ce1004 	addi	r3,r3,14400
 8007010:	2005883a 	mov	r2,r4
 8007014:	19000017 	ldw	r4,0(r3)
 8007018:	280d883a 	mov	r6,r5
 800701c:	100b883a 	mov	r5,r2
 8007020:	8006f5c1 	jmpi	8006f5c <_setlocale_r>

08007024 <localeconv>:
 8007024:	00820074 	movhi	r2,2049
 8007028:	10887a04 	addi	r2,r2,8680
 800702c:	f800283a 	ret

08007030 <__smakebuf_r>:
 8007030:	2880030b 	ldhu	r2,12(r5)
 8007034:	deffec04 	addi	sp,sp,-80
 8007038:	dc000f15 	stw	r16,60(sp)
 800703c:	dfc01315 	stw	ra,76(sp)
 8007040:	dcc01215 	stw	r19,72(sp)
 8007044:	dc801115 	stw	r18,68(sp)
 8007048:	dc401015 	stw	r17,64(sp)
 800704c:	10c0008c 	andi	r3,r2,2
 8007050:	2821883a 	mov	r16,r5
 8007054:	18003a1e 	bne	r3,zero,8007140 <__smakebuf_r+0x110>
 8007058:	2940038f 	ldh	r5,14(r5)
 800705c:	2023883a 	mov	r17,r4
 8007060:	28001b16 	blt	r5,zero,80070d0 <__smakebuf_r+0xa0>
 8007064:	d80d883a 	mov	r6,sp
 8007068:	800b0840 	call	800b084 <_fstat_r>
 800706c:	10001716 	blt	r2,zero,80070cc <__smakebuf_r+0x9c>
 8007070:	d8800117 	ldw	r2,4(sp)
 8007074:	00e00014 	movui	r3,32768
 8007078:	10bc000c 	andi	r2,r2,61440
 800707c:	10c03e26 	beq	r2,r3,8007178 <__smakebuf_r+0x148>
 8007080:	80c0030b 	ldhu	r3,12(r16)
 8007084:	18c20014 	ori	r3,r3,2048
 8007088:	80c0030d 	sth	r3,12(r16)
 800708c:	00c80004 	movi	r3,8192
 8007090:	10c0431e 	bne	r2,r3,80071a0 <__smakebuf_r+0x170>
 8007094:	8140038f 	ldh	r5,14(r16)
 8007098:	8809883a 	mov	r4,r17
 800709c:	800b0ec0 	call	800b0ec <_isatty_r>
 80070a0:	10004d26 	beq	r2,zero,80071d8 <__smakebuf_r+0x1a8>
 80070a4:	80c0030b 	ldhu	r3,12(r16)
 80070a8:	04c00044 	movi	r19,1
 80070ac:	808010c4 	addi	r2,r16,67
 80070b0:	1cc6b03a 	or	r3,r3,r19
 80070b4:	80c0030d 	sth	r3,12(r16)
 80070b8:	80800015 	stw	r2,0(r16)
 80070bc:	80800415 	stw	r2,16(r16)
 80070c0:	84c00515 	stw	r19,20(r16)
 80070c4:	04810004 	movi	r18,1024
 80070c8:	00000706 	br	80070e8 <__smakebuf_r+0xb8>
 80070cc:	8080030b 	ldhu	r2,12(r16)
 80070d0:	10c0200c 	andi	r3,r2,128
 80070d4:	1800261e 	bne	r3,zero,8007170 <__smakebuf_r+0x140>
 80070d8:	04810004 	movi	r18,1024
 80070dc:	10820014 	ori	r2,r2,2048
 80070e0:	8080030d 	sth	r2,12(r16)
 80070e4:	0027883a 	mov	r19,zero
 80070e8:	8809883a 	mov	r4,r17
 80070ec:	900b883a 	mov	r5,r18
 80070f0:	80071e40 	call	80071e4 <_malloc_r>
 80070f4:	10002d26 	beq	r2,zero,80071ac <__smakebuf_r+0x17c>
 80070f8:	80c0030b 	ldhu	r3,12(r16)
 80070fc:	01020034 	movhi	r4,2048
 8007100:	21186c04 	addi	r4,r4,25008
 8007104:	89000f15 	stw	r4,60(r17)
 8007108:	18c02014 	ori	r3,r3,128
 800710c:	80c0030d 	sth	r3,12(r16)
 8007110:	80800015 	stw	r2,0(r16)
 8007114:	80800415 	stw	r2,16(r16)
 8007118:	84800515 	stw	r18,20(r16)
 800711c:	98000d26 	beq	r19,zero,8007154 <__smakebuf_r+0x124>
 8007120:	8140038f 	ldh	r5,14(r16)
 8007124:	8809883a 	mov	r4,r17
 8007128:	800b0ec0 	call	800b0ec <_isatty_r>
 800712c:	10000926 	beq	r2,zero,8007154 <__smakebuf_r+0x124>
 8007130:	8080030b 	ldhu	r2,12(r16)
 8007134:	10800054 	ori	r2,r2,1
 8007138:	8080030d 	sth	r2,12(r16)
 800713c:	00000506 	br	8007154 <__smakebuf_r+0x124>
 8007140:	288010c4 	addi	r2,r5,67
 8007144:	28800015 	stw	r2,0(r5)
 8007148:	28800415 	stw	r2,16(r5)
 800714c:	00800044 	movi	r2,1
 8007150:	28800515 	stw	r2,20(r5)
 8007154:	dfc01317 	ldw	ra,76(sp)
 8007158:	dcc01217 	ldw	r19,72(sp)
 800715c:	dc801117 	ldw	r18,68(sp)
 8007160:	dc401017 	ldw	r17,64(sp)
 8007164:	dc000f17 	ldw	r16,60(sp)
 8007168:	dec01404 	addi	sp,sp,80
 800716c:	f800283a 	ret
 8007170:	04801004 	movi	r18,64
 8007174:	003fd906 	br	80070dc <__alt_data_end+0xf80070dc>
 8007178:	81000a17 	ldw	r4,40(r16)
 800717c:	00c20074 	movhi	r3,2049
 8007180:	18e54704 	addi	r3,r3,-27364
 8007184:	20ffbe1e 	bne	r4,r3,8007080 <__alt_data_end+0xf8007080>
 8007188:	80c0030b 	ldhu	r3,12(r16)
 800718c:	01010004 	movi	r4,1024
 8007190:	81001315 	stw	r4,76(r16)
 8007194:	1906b03a 	or	r3,r3,r4
 8007198:	80c0030d 	sth	r3,12(r16)
 800719c:	003fbb06 	br	800708c <__alt_data_end+0xf800708c>
 80071a0:	0027883a 	mov	r19,zero
 80071a4:	04810004 	movi	r18,1024
 80071a8:	003fcf06 	br	80070e8 <__alt_data_end+0xf80070e8>
 80071ac:	8080030b 	ldhu	r2,12(r16)
 80071b0:	10c0800c 	andi	r3,r2,512
 80071b4:	183fe71e 	bne	r3,zero,8007154 <__alt_data_end+0xf8007154>
 80071b8:	10800094 	ori	r2,r2,2
 80071bc:	80c010c4 	addi	r3,r16,67
 80071c0:	8080030d 	sth	r2,12(r16)
 80071c4:	00800044 	movi	r2,1
 80071c8:	80c00015 	stw	r3,0(r16)
 80071cc:	80c00415 	stw	r3,16(r16)
 80071d0:	80800515 	stw	r2,20(r16)
 80071d4:	003fdf06 	br	8007154 <__alt_data_end+0xf8007154>
 80071d8:	04c00044 	movi	r19,1
 80071dc:	04810004 	movi	r18,1024
 80071e0:	003fc106 	br	80070e8 <__alt_data_end+0xf80070e8>

080071e4 <_malloc_r>:
 80071e4:	defff504 	addi	sp,sp,-44
 80071e8:	dc800315 	stw	r18,12(sp)
 80071ec:	dfc00a15 	stw	ra,40(sp)
 80071f0:	df000915 	stw	fp,36(sp)
 80071f4:	ddc00815 	stw	r23,32(sp)
 80071f8:	dd800715 	stw	r22,28(sp)
 80071fc:	dd400615 	stw	r21,24(sp)
 8007200:	dd000515 	stw	r20,20(sp)
 8007204:	dcc00415 	stw	r19,16(sp)
 8007208:	dc400215 	stw	r17,8(sp)
 800720c:	dc000115 	stw	r16,4(sp)
 8007210:	288002c4 	addi	r2,r5,11
 8007214:	00c00584 	movi	r3,22
 8007218:	2025883a 	mov	r18,r4
 800721c:	18802b2e 	bgeu	r3,r2,80072cc <_malloc_r+0xe8>
 8007220:	047ffe04 	movi	r17,-8
 8007224:	1462703a 	and	r17,r2,r17
 8007228:	88002a16 	blt	r17,zero,80072d4 <_malloc_r+0xf0>
 800722c:	89402936 	bltu	r17,r5,80072d4 <_malloc_r+0xf0>
 8007230:	9009883a 	mov	r4,r18
 8007234:	800f0d80 	call	800f0d8 <__malloc_lock>
 8007238:	00807dc4 	movi	r2,503
 800723c:	14402936 	bltu	r2,r17,80072e4 <_malloc_r+0x100>
 8007240:	8808d0fa 	srli	r4,r17,3
 8007244:	04c20074 	movhi	r19,2049
 8007248:	9cc88804 	addi	r19,r19,8736
 800724c:	2105883a 	add	r2,r4,r4
 8007250:	1085883a 	add	r2,r2,r2
 8007254:	1085883a 	add	r2,r2,r2
 8007258:	9885883a 	add	r2,r19,r2
 800725c:	14000317 	ldw	r16,12(r2)
 8007260:	80815226 	beq	r16,r2,80077ac <_malloc_r+0x5c8>
 8007264:	81000117 	ldw	r4,4(r16)
 8007268:	00bfff04 	movi	r2,-4
 800726c:	80c00317 	ldw	r3,12(r16)
 8007270:	2084703a 	and	r2,r4,r2
 8007274:	8085883a 	add	r2,r16,r2
 8007278:	81000217 	ldw	r4,8(r16)
 800727c:	11400117 	ldw	r5,4(r2)
 8007280:	20c00315 	stw	r3,12(r4)
 8007284:	19000215 	stw	r4,8(r3)
 8007288:	28c00054 	ori	r3,r5,1
 800728c:	10c00115 	stw	r3,4(r2)
 8007290:	9009883a 	mov	r4,r18
 8007294:	800f0f80 	call	800f0f8 <__malloc_unlock>
 8007298:	80800204 	addi	r2,r16,8
 800729c:	dfc00a17 	ldw	ra,40(sp)
 80072a0:	df000917 	ldw	fp,36(sp)
 80072a4:	ddc00817 	ldw	r23,32(sp)
 80072a8:	dd800717 	ldw	r22,28(sp)
 80072ac:	dd400617 	ldw	r21,24(sp)
 80072b0:	dd000517 	ldw	r20,20(sp)
 80072b4:	dcc00417 	ldw	r19,16(sp)
 80072b8:	dc800317 	ldw	r18,12(sp)
 80072bc:	dc400217 	ldw	r17,8(sp)
 80072c0:	dc000117 	ldw	r16,4(sp)
 80072c4:	dec00b04 	addi	sp,sp,44
 80072c8:	f800283a 	ret
 80072cc:	04400404 	movi	r17,16
 80072d0:	897fd72e 	bgeu	r17,r5,8007230 <__alt_data_end+0xf8007230>
 80072d4:	00800304 	movi	r2,12
 80072d8:	90800015 	stw	r2,0(r18)
 80072dc:	0005883a 	mov	r2,zero
 80072e0:	003fee06 	br	800729c <__alt_data_end+0xf800729c>
 80072e4:	8808d27a 	srli	r4,r17,9
 80072e8:	20007126 	beq	r4,zero,80074b0 <_malloc_r+0x2cc>
 80072ec:	00800104 	movi	r2,4
 80072f0:	1100f536 	bltu	r2,r4,80076c8 <_malloc_r+0x4e4>
 80072f4:	8808d1ba 	srli	r4,r17,6
 80072f8:	21000e04 	addi	r4,r4,56
 80072fc:	210b883a 	add	r5,r4,r4
 8007300:	294b883a 	add	r5,r5,r5
 8007304:	294b883a 	add	r5,r5,r5
 8007308:	04c20074 	movhi	r19,2049
 800730c:	9cc88804 	addi	r19,r19,8736
 8007310:	994b883a 	add	r5,r19,r5
 8007314:	2c000317 	ldw	r16,12(r5)
 8007318:	2c000e26 	beq	r5,r16,8007354 <_malloc_r+0x170>
 800731c:	80c00117 	ldw	r3,4(r16)
 8007320:	01ffff04 	movi	r7,-4
 8007324:	018003c4 	movi	r6,15
 8007328:	19c6703a 	and	r3,r3,r7
 800732c:	1c45c83a 	sub	r2,r3,r17
 8007330:	30800716 	blt	r6,r2,8007350 <_malloc_r+0x16c>
 8007334:	1000610e 	bge	r2,zero,80074bc <_malloc_r+0x2d8>
 8007338:	84000317 	ldw	r16,12(r16)
 800733c:	2c000526 	beq	r5,r16,8007354 <_malloc_r+0x170>
 8007340:	80c00117 	ldw	r3,4(r16)
 8007344:	19c6703a 	and	r3,r3,r7
 8007348:	1c45c83a 	sub	r2,r3,r17
 800734c:	30bff90e 	bge	r6,r2,8007334 <__alt_data_end+0xf8007334>
 8007350:	213fffc4 	addi	r4,r4,-1
 8007354:	21000044 	addi	r4,r4,1
 8007358:	9c000417 	ldw	r16,16(r19)
 800735c:	00c20074 	movhi	r3,2049
 8007360:	18c88804 	addi	r3,r3,8736
 8007364:	1a400204 	addi	r9,r3,8
 8007368:	82410926 	beq	r16,r9,8007790 <_malloc_r+0x5ac>
 800736c:	81400117 	ldw	r5,4(r16)
 8007370:	00bfff04 	movi	r2,-4
 8007374:	018003c4 	movi	r6,15
 8007378:	2884703a 	and	r2,r5,r2
 800737c:	144bc83a 	sub	r5,r2,r17
 8007380:	3140f416 	blt	r6,r5,8007754 <_malloc_r+0x570>
 8007384:	1a400515 	stw	r9,20(r3)
 8007388:	1a400415 	stw	r9,16(r3)
 800738c:	2800570e 	bge	r5,zero,80074ec <_malloc_r+0x308>
 8007390:	01407fc4 	movi	r5,511
 8007394:	2880d436 	bltu	r5,r2,80076e8 <_malloc_r+0x504>
 8007398:	1004d0fa 	srli	r2,r2,3
 800739c:	02000044 	movi	r8,1
 80073a0:	19c00117 	ldw	r7,4(r3)
 80073a4:	108b883a 	add	r5,r2,r2
 80073a8:	294b883a 	add	r5,r5,r5
 80073ac:	1005d0ba 	srai	r2,r2,2
 80073b0:	294b883a 	add	r5,r5,r5
 80073b4:	28cb883a 	add	r5,r5,r3
 80073b8:	29800217 	ldw	r6,8(r5)
 80073bc:	4084983a 	sll	r2,r8,r2
 80073c0:	81400315 	stw	r5,12(r16)
 80073c4:	81800215 	stw	r6,8(r16)
 80073c8:	11c4b03a 	or	r2,r2,r7
 80073cc:	2c000215 	stw	r16,8(r5)
 80073d0:	18800115 	stw	r2,4(r3)
 80073d4:	34000315 	stw	r16,12(r6)
 80073d8:	2007d0ba 	srai	r3,r4,2
 80073dc:	01400044 	movi	r5,1
 80073e0:	28ca983a 	sll	r5,r5,r3
 80073e4:	11404936 	bltu	r2,r5,800750c <_malloc_r+0x328>
 80073e8:	1146703a 	and	r3,r2,r5
 80073ec:	18000a1e 	bne	r3,zero,8007418 <_malloc_r+0x234>
 80073f0:	00ffff04 	movi	r3,-4
 80073f4:	294b883a 	add	r5,r5,r5
 80073f8:	20c8703a 	and	r4,r4,r3
 80073fc:	1146703a 	and	r3,r2,r5
 8007400:	21000104 	addi	r4,r4,4
 8007404:	1800041e 	bne	r3,zero,8007418 <_malloc_r+0x234>
 8007408:	294b883a 	add	r5,r5,r5
 800740c:	1146703a 	and	r3,r2,r5
 8007410:	21000104 	addi	r4,r4,4
 8007414:	183ffc26 	beq	r3,zero,8007408 <__alt_data_end+0xf8007408>
 8007418:	023fff04 	movi	r8,-4
 800741c:	01c003c4 	movi	r7,15
 8007420:	2105883a 	add	r2,r4,r4
 8007424:	1085883a 	add	r2,r2,r2
 8007428:	1085883a 	add	r2,r2,r2
 800742c:	9897883a 	add	r11,r19,r2
 8007430:	5a800304 	addi	r10,r11,12
 8007434:	2019883a 	mov	r12,r4
 8007438:	54000017 	ldw	r16,0(r10)
 800743c:	51bffd04 	addi	r6,r10,-12
 8007440:	8180041e 	bne	r16,r6,8007454 <_malloc_r+0x270>
 8007444:	0000d406 	br	8007798 <_malloc_r+0x5b4>
 8007448:	1000dd0e 	bge	r2,zero,80077c0 <_malloc_r+0x5dc>
 800744c:	84000317 	ldw	r16,12(r16)
 8007450:	8180d126 	beq	r16,r6,8007798 <_malloc_r+0x5b4>
 8007454:	80c00117 	ldw	r3,4(r16)
 8007458:	1a06703a 	and	r3,r3,r8
 800745c:	1c45c83a 	sub	r2,r3,r17
 8007460:	38bff90e 	bge	r7,r2,8007448 <__alt_data_end+0xf8007448>
 8007464:	80c00317 	ldw	r3,12(r16)
 8007468:	81000217 	ldw	r4,8(r16)
 800746c:	89400054 	ori	r5,r17,1
 8007470:	81400115 	stw	r5,4(r16)
 8007474:	20c00315 	stw	r3,12(r4)
 8007478:	19000215 	stw	r4,8(r3)
 800747c:	8463883a 	add	r17,r16,r17
 8007480:	9c400515 	stw	r17,20(r19)
 8007484:	9c400415 	stw	r17,16(r19)
 8007488:	10c00054 	ori	r3,r2,1
 800748c:	8a400315 	stw	r9,12(r17)
 8007490:	8a400215 	stw	r9,8(r17)
 8007494:	88c00115 	stw	r3,4(r17)
 8007498:	88a3883a 	add	r17,r17,r2
 800749c:	88800015 	stw	r2,0(r17)
 80074a0:	9009883a 	mov	r4,r18
 80074a4:	800f0f80 	call	800f0f8 <__malloc_unlock>
 80074a8:	80800204 	addi	r2,r16,8
 80074ac:	003f7b06 	br	800729c <__alt_data_end+0xf800729c>
 80074b0:	01401f84 	movi	r5,126
 80074b4:	01000fc4 	movi	r4,63
 80074b8:	003f9106 	br	8007300 <__alt_data_end+0xf8007300>
 80074bc:	80800317 	ldw	r2,12(r16)
 80074c0:	81000217 	ldw	r4,8(r16)
 80074c4:	80c7883a 	add	r3,r16,r3
 80074c8:	19400117 	ldw	r5,4(r3)
 80074cc:	20800315 	stw	r2,12(r4)
 80074d0:	11000215 	stw	r4,8(r2)
 80074d4:	28800054 	ori	r2,r5,1
 80074d8:	18800115 	stw	r2,4(r3)
 80074dc:	9009883a 	mov	r4,r18
 80074e0:	800f0f80 	call	800f0f8 <__malloc_unlock>
 80074e4:	80800204 	addi	r2,r16,8
 80074e8:	003f6c06 	br	800729c <__alt_data_end+0xf800729c>
 80074ec:	8085883a 	add	r2,r16,r2
 80074f0:	10c00117 	ldw	r3,4(r2)
 80074f4:	9009883a 	mov	r4,r18
 80074f8:	18c00054 	ori	r3,r3,1
 80074fc:	10c00115 	stw	r3,4(r2)
 8007500:	800f0f80 	call	800f0f8 <__malloc_unlock>
 8007504:	80800204 	addi	r2,r16,8
 8007508:	003f6406 	br	800729c <__alt_data_end+0xf800729c>
 800750c:	9c000217 	ldw	r16,8(r19)
 8007510:	00bfff04 	movi	r2,-4
 8007514:	85400117 	ldw	r21,4(r16)
 8007518:	a8aa703a 	and	r21,r21,r2
 800751c:	ac400336 	bltu	r21,r17,800752c <_malloc_r+0x348>
 8007520:	ac45c83a 	sub	r2,r21,r17
 8007524:	00c003c4 	movi	r3,15
 8007528:	18805d16 	blt	r3,r2,80076a0 <_malloc_r+0x4bc>
 800752c:	00820074 	movhi	r2,2049
 8007530:	1094e504 	addi	r2,r2,21396
 8007534:	00c20074 	movhi	r3,2049
 8007538:	18ce1204 	addi	r3,r3,14408
 800753c:	15c00017 	ldw	r23,0(r2)
 8007540:	19000017 	ldw	r4,0(r3)
 8007544:	00bfffc4 	movi	r2,-1
 8007548:	8579883a 	add	fp,r16,r21
 800754c:	8def883a 	add	r23,r17,r23
 8007550:	2080e426 	beq	r4,r2,80078e4 <_malloc_r+0x700>
 8007554:	bdc403c4 	addi	r23,r23,4111
 8007558:	00bc0004 	movi	r2,-4096
 800755c:	b8ae703a 	and	r23,r23,r2
 8007560:	9009883a 	mov	r4,r18
 8007564:	b80b883a 	mov	r5,r23
 8007568:	d8c00015 	stw	r3,0(sp)
 800756c:	80093e00 	call	80093e0 <_sbrk_r>
 8007570:	1029883a 	mov	r20,r2
 8007574:	00bfffc4 	movi	r2,-1
 8007578:	d8c00017 	ldw	r3,0(sp)
 800757c:	a080a426 	beq	r20,r2,8007810 <_malloc_r+0x62c>
 8007580:	a700a236 	bltu	r20,fp,800780c <_malloc_r+0x628>
 8007584:	05820074 	movhi	r22,2049
 8007588:	b594ed04 	addi	r22,r22,21428
 800758c:	b0800017 	ldw	r2,0(r22)
 8007590:	b885883a 	add	r2,r23,r2
 8007594:	b0800015 	stw	r2,0(r22)
 8007598:	e500da26 	beq	fp,r20,8007904 <_malloc_r+0x720>
 800759c:	19000017 	ldw	r4,0(r3)
 80075a0:	00ffffc4 	movi	r3,-1
 80075a4:	20c0e426 	beq	r4,r3,8007938 <_malloc_r+0x754>
 80075a8:	a739c83a 	sub	fp,r20,fp
 80075ac:	1705883a 	add	r2,r2,fp
 80075b0:	b0800015 	stw	r2,0(r22)
 80075b4:	a08001cc 	andi	r2,r20,7
 80075b8:	1000b526 	beq	r2,zero,8007890 <_malloc_r+0x6ac>
 80075bc:	a0a9c83a 	sub	r20,r20,r2
 80075c0:	00c40204 	movi	r3,4104
 80075c4:	a5000204 	addi	r20,r20,8
 80075c8:	1885c83a 	sub	r2,r3,r2
 80075cc:	a5c7883a 	add	r3,r20,r23
 80075d0:	18c3ffcc 	andi	r3,r3,4095
 80075d4:	10efc83a 	sub	r23,r2,r3
 80075d8:	9009883a 	mov	r4,r18
 80075dc:	b80b883a 	mov	r5,r23
 80075e0:	80093e00 	call	80093e0 <_sbrk_r>
 80075e4:	00ffffc4 	movi	r3,-1
 80075e8:	10c0d026 	beq	r2,r3,800792c <_malloc_r+0x748>
 80075ec:	1505c83a 	sub	r2,r2,r20
 80075f0:	b887883a 	add	r3,r23,r2
 80075f4:	18c00054 	ori	r3,r3,1
 80075f8:	b0800017 	ldw	r2,0(r22)
 80075fc:	9d000215 	stw	r20,8(r19)
 8007600:	a0c00115 	stw	r3,4(r20)
 8007604:	b885883a 	add	r2,r23,r2
 8007608:	b0800015 	stw	r2,0(r22)
 800760c:	84c00e26 	beq	r16,r19,8007648 <_malloc_r+0x464>
 8007610:	00c003c4 	movi	r3,15
 8007614:	1d40a02e 	bgeu	r3,r21,8007898 <_malloc_r+0x6b4>
 8007618:	81400117 	ldw	r5,4(r16)
 800761c:	ad7ffd04 	addi	r21,r21,-12
 8007620:	013ffe04 	movi	r4,-8
 8007624:	a908703a 	and	r4,r21,r4
 8007628:	2940004c 	andi	r5,r5,1
 800762c:	214ab03a 	or	r5,r4,r5
 8007630:	81400115 	stw	r5,4(r16)
 8007634:	01800144 	movi	r6,5
 8007638:	810b883a 	add	r5,r16,r4
 800763c:	29800115 	stw	r6,4(r5)
 8007640:	29800215 	stw	r6,8(r5)
 8007644:	1900c036 	bltu	r3,r4,8007948 <_malloc_r+0x764>
 8007648:	00c20074 	movhi	r3,2049
 800764c:	18d4e404 	addi	r3,r3,21392
 8007650:	19000017 	ldw	r4,0(r3)
 8007654:	2080012e 	bgeu	r4,r2,800765c <_malloc_r+0x478>
 8007658:	18800015 	stw	r2,0(r3)
 800765c:	00c20074 	movhi	r3,2049
 8007660:	18d4e304 	addi	r3,r3,21388
 8007664:	19000017 	ldw	r4,0(r3)
 8007668:	9c000217 	ldw	r16,8(r19)
 800766c:	2080012e 	bgeu	r4,r2,8007674 <_malloc_r+0x490>
 8007670:	18800015 	stw	r2,0(r3)
 8007674:	80c00117 	ldw	r3,4(r16)
 8007678:	00bfff04 	movi	r2,-4
 800767c:	1886703a 	and	r3,r3,r2
 8007680:	1c45c83a 	sub	r2,r3,r17
 8007684:	1c400236 	bltu	r3,r17,8007690 <_malloc_r+0x4ac>
 8007688:	00c003c4 	movi	r3,15
 800768c:	18800416 	blt	r3,r2,80076a0 <_malloc_r+0x4bc>
 8007690:	9009883a 	mov	r4,r18
 8007694:	800f0f80 	call	800f0f8 <__malloc_unlock>
 8007698:	0005883a 	mov	r2,zero
 800769c:	003eff06 	br	800729c <__alt_data_end+0xf800729c>
 80076a0:	88c00054 	ori	r3,r17,1
 80076a4:	80c00115 	stw	r3,4(r16)
 80076a8:	8463883a 	add	r17,r16,r17
 80076ac:	10800054 	ori	r2,r2,1
 80076b0:	9c400215 	stw	r17,8(r19)
 80076b4:	88800115 	stw	r2,4(r17)
 80076b8:	9009883a 	mov	r4,r18
 80076bc:	800f0f80 	call	800f0f8 <__malloc_unlock>
 80076c0:	80800204 	addi	r2,r16,8
 80076c4:	003ef506 	br	800729c <__alt_data_end+0xf800729c>
 80076c8:	00800504 	movi	r2,20
 80076cc:	1100482e 	bgeu	r2,r4,80077f0 <_malloc_r+0x60c>
 80076d0:	00801504 	movi	r2,84
 80076d4:	11006836 	bltu	r2,r4,8007878 <_malloc_r+0x694>
 80076d8:	8808d33a 	srli	r4,r17,12
 80076dc:	21001b84 	addi	r4,r4,110
 80076e0:	210b883a 	add	r5,r4,r4
 80076e4:	003f0606 	br	8007300 <__alt_data_end+0xf8007300>
 80076e8:	1006d27a 	srli	r3,r2,9
 80076ec:	01400104 	movi	r5,4
 80076f0:	28c0422e 	bgeu	r5,r3,80077fc <_malloc_r+0x618>
 80076f4:	01400504 	movi	r5,20
 80076f8:	28c07c36 	bltu	r5,r3,80078ec <_malloc_r+0x708>
 80076fc:	194016c4 	addi	r5,r3,91
 8007700:	294d883a 	add	r6,r5,r5
 8007704:	318d883a 	add	r6,r6,r6
 8007708:	318d883a 	add	r6,r6,r6
 800770c:	998d883a 	add	r6,r19,r6
 8007710:	30c00217 	ldw	r3,8(r6)
 8007714:	01c20074 	movhi	r7,2049
 8007718:	39c88804 	addi	r7,r7,8736
 800771c:	19806326 	beq	r3,r6,80078ac <_malloc_r+0x6c8>
 8007720:	01ffff04 	movi	r7,-4
 8007724:	19400117 	ldw	r5,4(r3)
 8007728:	29ca703a 	and	r5,r5,r7
 800772c:	1140022e 	bgeu	r2,r5,8007738 <_malloc_r+0x554>
 8007730:	18c00217 	ldw	r3,8(r3)
 8007734:	30fffb1e 	bne	r6,r3,8007724 <__alt_data_end+0xf8007724>
 8007738:	19400317 	ldw	r5,12(r3)
 800773c:	98800117 	ldw	r2,4(r19)
 8007740:	81400315 	stw	r5,12(r16)
 8007744:	80c00215 	stw	r3,8(r16)
 8007748:	2c000215 	stw	r16,8(r5)
 800774c:	1c000315 	stw	r16,12(r3)
 8007750:	003f2106 	br	80073d8 <__alt_data_end+0xf80073d8>
 8007754:	88800054 	ori	r2,r17,1
 8007758:	80800115 	stw	r2,4(r16)
 800775c:	8463883a 	add	r17,r16,r17
 8007760:	1c400515 	stw	r17,20(r3)
 8007764:	1c400415 	stw	r17,16(r3)
 8007768:	28800054 	ori	r2,r5,1
 800776c:	88800115 	stw	r2,4(r17)
 8007770:	8a400315 	stw	r9,12(r17)
 8007774:	8a400215 	stw	r9,8(r17)
 8007778:	8963883a 	add	r17,r17,r5
 800777c:	89400015 	stw	r5,0(r17)
 8007780:	9009883a 	mov	r4,r18
 8007784:	800f0f80 	call	800f0f8 <__malloc_unlock>
 8007788:	80800204 	addi	r2,r16,8
 800778c:	003ec306 	br	800729c <__alt_data_end+0xf800729c>
 8007790:	18800117 	ldw	r2,4(r3)
 8007794:	003f1006 	br	80073d8 <__alt_data_end+0xf80073d8>
 8007798:	63000044 	addi	r12,r12,1
 800779c:	608000cc 	andi	r2,r12,3
 80077a0:	52800204 	addi	r10,r10,8
 80077a4:	103f241e 	bne	r2,zero,8007438 <__alt_data_end+0xf8007438>
 80077a8:	00002106 	br	8007830 <_malloc_r+0x64c>
 80077ac:	80800204 	addi	r2,r16,8
 80077b0:	84000517 	ldw	r16,20(r16)
 80077b4:	143eab1e 	bne	r2,r16,8007264 <__alt_data_end+0xf8007264>
 80077b8:	21000084 	addi	r4,r4,2
 80077bc:	003ee606 	br	8007358 <__alt_data_end+0xf8007358>
 80077c0:	80c7883a 	add	r3,r16,r3
 80077c4:	19400117 	ldw	r5,4(r3)
 80077c8:	80800317 	ldw	r2,12(r16)
 80077cc:	81000217 	ldw	r4,8(r16)
 80077d0:	29400054 	ori	r5,r5,1
 80077d4:	19400115 	stw	r5,4(r3)
 80077d8:	20800315 	stw	r2,12(r4)
 80077dc:	11000215 	stw	r4,8(r2)
 80077e0:	9009883a 	mov	r4,r18
 80077e4:	800f0f80 	call	800f0f8 <__malloc_unlock>
 80077e8:	80800204 	addi	r2,r16,8
 80077ec:	003eab06 	br	800729c <__alt_data_end+0xf800729c>
 80077f0:	210016c4 	addi	r4,r4,91
 80077f4:	210b883a 	add	r5,r4,r4
 80077f8:	003ec106 	br	8007300 <__alt_data_end+0xf8007300>
 80077fc:	100ad1ba 	srli	r5,r2,6
 8007800:	29400e04 	addi	r5,r5,56
 8007804:	294d883a 	add	r6,r5,r5
 8007808:	003fbe06 	br	8007704 <__alt_data_end+0xf8007704>
 800780c:	84ff5d26 	beq	r16,r19,8007584 <__alt_data_end+0xf8007584>
 8007810:	9c000217 	ldw	r16,8(r19)
 8007814:	00bfff04 	movi	r2,-4
 8007818:	80c00117 	ldw	r3,4(r16)
 800781c:	1886703a 	and	r3,r3,r2
 8007820:	003f9706 	br	8007680 <__alt_data_end+0xf8007680>
 8007824:	5ac00017 	ldw	r11,0(r11)
 8007828:	213fffc4 	addi	r4,r4,-1
 800782c:	58805c1e 	bne	r11,r2,80079a0 <_malloc_r+0x7bc>
 8007830:	20c000cc 	andi	r3,r4,3
 8007834:	58bffe04 	addi	r2,r11,-8
 8007838:	183ffa1e 	bne	r3,zero,8007824 <__alt_data_end+0xf8007824>
 800783c:	98800117 	ldw	r2,4(r19)
 8007840:	0146303a 	nor	r3,zero,r5
 8007844:	1884703a 	and	r2,r3,r2
 8007848:	98800115 	stw	r2,4(r19)
 800784c:	294b883a 	add	r5,r5,r5
 8007850:	117f2e36 	bltu	r2,r5,800750c <__alt_data_end+0xf800750c>
 8007854:	283f2d26 	beq	r5,zero,800750c <__alt_data_end+0xf800750c>
 8007858:	1146703a 	and	r3,r2,r5
 800785c:	6009883a 	mov	r4,r12
 8007860:	183eef1e 	bne	r3,zero,8007420 <__alt_data_end+0xf8007420>
 8007864:	294b883a 	add	r5,r5,r5
 8007868:	1146703a 	and	r3,r2,r5
 800786c:	21000104 	addi	r4,r4,4
 8007870:	183ffc26 	beq	r3,zero,8007864 <__alt_data_end+0xf8007864>
 8007874:	003eea06 	br	8007420 <__alt_data_end+0xf8007420>
 8007878:	00805504 	movi	r2,340
 800787c:	11001336 	bltu	r2,r4,80078cc <_malloc_r+0x6e8>
 8007880:	8808d3fa 	srli	r4,r17,15
 8007884:	21001dc4 	addi	r4,r4,119
 8007888:	210b883a 	add	r5,r4,r4
 800788c:	003e9c06 	br	8007300 <__alt_data_end+0xf8007300>
 8007890:	00840004 	movi	r2,4096
 8007894:	003f4d06 	br	80075cc <__alt_data_end+0xf80075cc>
 8007898:	00800044 	movi	r2,1
 800789c:	a0800115 	stw	r2,4(r20)
 80078a0:	a021883a 	mov	r16,r20
 80078a4:	0007883a 	mov	r3,zero
 80078a8:	003f7506 	br	8007680 <__alt_data_end+0xf8007680>
 80078ac:	280bd0ba 	srai	r5,r5,2
 80078b0:	01800044 	movi	r6,1
 80078b4:	38800117 	ldw	r2,4(r7)
 80078b8:	314c983a 	sll	r6,r6,r5
 80078bc:	180b883a 	mov	r5,r3
 80078c0:	3084b03a 	or	r2,r6,r2
 80078c4:	38800115 	stw	r2,4(r7)
 80078c8:	003f9d06 	br	8007740 <__alt_data_end+0xf8007740>
 80078cc:	00815504 	movi	r2,1364
 80078d0:	11001336 	bltu	r2,r4,8007920 <_malloc_r+0x73c>
 80078d4:	8808d4ba 	srli	r4,r17,18
 80078d8:	21001f04 	addi	r4,r4,124
 80078dc:	210b883a 	add	r5,r4,r4
 80078e0:	003e8706 	br	8007300 <__alt_data_end+0xf8007300>
 80078e4:	bdc00404 	addi	r23,r23,16
 80078e8:	003f1d06 	br	8007560 <__alt_data_end+0xf8007560>
 80078ec:	01401504 	movi	r5,84
 80078f0:	28c01c36 	bltu	r5,r3,8007964 <_malloc_r+0x780>
 80078f4:	100ad33a 	srli	r5,r2,12
 80078f8:	29401b84 	addi	r5,r5,110
 80078fc:	294d883a 	add	r6,r5,r5
 8007900:	003f8006 	br	8007704 <__alt_data_end+0xf8007704>
 8007904:	e103ffcc 	andi	r4,fp,4095
 8007908:	203f241e 	bne	r4,zero,800759c <__alt_data_end+0xf800759c>
 800790c:	98c00217 	ldw	r3,8(r19)
 8007910:	bd49883a 	add	r4,r23,r21
 8007914:	21000054 	ori	r4,r4,1
 8007918:	19000115 	stw	r4,4(r3)
 800791c:	003f4a06 	br	8007648 <__alt_data_end+0xf8007648>
 8007920:	01403f04 	movi	r5,252
 8007924:	01001f84 	movi	r4,126
 8007928:	003e7506 	br	8007300 <__alt_data_end+0xf8007300>
 800792c:	00c00044 	movi	r3,1
 8007930:	002f883a 	mov	r23,zero
 8007934:	003f3006 	br	80075f8 <__alt_data_end+0xf80075f8>
 8007938:	00820074 	movhi	r2,2049
 800793c:	108e1204 	addi	r2,r2,14408
 8007940:	15000015 	stw	r20,0(r2)
 8007944:	003f1b06 	br	80075b4 <__alt_data_end+0xf80075b4>
 8007948:	9009883a 	mov	r4,r18
 800794c:	81400204 	addi	r5,r16,8
 8007950:	80066800 	call	8006680 <_free_r>
 8007954:	00820074 	movhi	r2,2049
 8007958:	1094ed04 	addi	r2,r2,21428
 800795c:	10800017 	ldw	r2,0(r2)
 8007960:	003f3906 	br	8007648 <__alt_data_end+0xf8007648>
 8007964:	01405504 	movi	r5,340
 8007968:	28c00436 	bltu	r5,r3,800797c <_malloc_r+0x798>
 800796c:	100ad3fa 	srli	r5,r2,15
 8007970:	29401dc4 	addi	r5,r5,119
 8007974:	294d883a 	add	r6,r5,r5
 8007978:	003f6206 	br	8007704 <__alt_data_end+0xf8007704>
 800797c:	01415504 	movi	r5,1364
 8007980:	28c00436 	bltu	r5,r3,8007994 <_malloc_r+0x7b0>
 8007984:	100ad4ba 	srli	r5,r2,18
 8007988:	29401f04 	addi	r5,r5,124
 800798c:	294d883a 	add	r6,r5,r5
 8007990:	003f5c06 	br	8007704 <__alt_data_end+0xf8007704>
 8007994:	01803f04 	movi	r6,252
 8007998:	01401f84 	movi	r5,126
 800799c:	003f5906 	br	8007704 <__alt_data_end+0xf8007704>
 80079a0:	98800117 	ldw	r2,4(r19)
 80079a4:	003fa906 	br	800784c <__alt_data_end+0xf800784c>

080079a8 <memchr>:
 80079a8:	208000cc 	andi	r2,r4,3
 80079ac:	2811883a 	mov	r8,r5
 80079b0:	10003526 	beq	r2,zero,8007a88 <memchr+0xe0>
 80079b4:	30bfffc4 	addi	r2,r6,-1
 80079b8:	30001b26 	beq	r6,zero,8007a28 <memchr+0x80>
 80079bc:	21800003 	ldbu	r6,0(r4)
 80079c0:	28c03fcc 	andi	r3,r5,255
 80079c4:	30c01a26 	beq	r6,r3,8007a30 <memchr+0x88>
 80079c8:	180d883a 	mov	r6,r3
 80079cc:	00000406 	br	80079e0 <memchr+0x38>
 80079d0:	10001526 	beq	r2,zero,8007a28 <memchr+0x80>
 80079d4:	20c00003 	ldbu	r3,0(r4)
 80079d8:	10bfffc4 	addi	r2,r2,-1
 80079dc:	19801426 	beq	r3,r6,8007a30 <memchr+0x88>
 80079e0:	21000044 	addi	r4,r4,1
 80079e4:	20c000cc 	andi	r3,r4,3
 80079e8:	183ff91e 	bne	r3,zero,80079d0 <__alt_data_end+0xf80079d0>
 80079ec:	02c000c4 	movi	r11,3
 80079f0:	58801136 	bltu	r11,r2,8007a38 <memchr+0x90>
 80079f4:	10000c26 	beq	r2,zero,8007a28 <memchr+0x80>
 80079f8:	20c00003 	ldbu	r3,0(r4)
 80079fc:	29403fcc 	andi	r5,r5,255
 8007a00:	19400b26 	beq	r3,r5,8007a30 <memchr+0x88>
 8007a04:	20c00044 	addi	r3,r4,1
 8007a08:	2085883a 	add	r2,r4,r2
 8007a0c:	41803fcc 	andi	r6,r8,255
 8007a10:	00000306 	br	8007a20 <memchr+0x78>
 8007a14:	18c00044 	addi	r3,r3,1
 8007a18:	197fffc3 	ldbu	r5,-1(r3)
 8007a1c:	29800426 	beq	r5,r6,8007a30 <memchr+0x88>
 8007a20:	1809883a 	mov	r4,r3
 8007a24:	18bffb1e 	bne	r3,r2,8007a14 <__alt_data_end+0xf8007a14>
 8007a28:	0005883a 	mov	r2,zero
 8007a2c:	f800283a 	ret
 8007a30:	2005883a 	mov	r2,r4
 8007a34:	f800283a 	ret
 8007a38:	28c03fcc 	andi	r3,r5,255
 8007a3c:	180c923a 	slli	r6,r3,8
 8007a40:	02bfbff4 	movhi	r10,65279
 8007a44:	52bfbfc4 	addi	r10,r10,-257
 8007a48:	02602074 	movhi	r9,32897
 8007a4c:	4a602004 	addi	r9,r9,-32640
 8007a50:	30c6b03a 	or	r3,r6,r3
 8007a54:	180c943a 	slli	r6,r3,16
 8007a58:	30ccb03a 	or	r6,r6,r3
 8007a5c:	20c00017 	ldw	r3,0(r4)
 8007a60:	30c6f03a 	xor	r3,r6,r3
 8007a64:	1a8f883a 	add	r7,r3,r10
 8007a68:	00c6303a 	nor	r3,zero,r3
 8007a6c:	38c6703a 	and	r3,r7,r3
 8007a70:	1a46703a 	and	r3,r3,r9
 8007a74:	183fdf1e 	bne	r3,zero,80079f4 <__alt_data_end+0xf80079f4>
 8007a78:	10bfff04 	addi	r2,r2,-4
 8007a7c:	21000104 	addi	r4,r4,4
 8007a80:	58bff636 	bltu	r11,r2,8007a5c <__alt_data_end+0xf8007a5c>
 8007a84:	003fdb06 	br	80079f4 <__alt_data_end+0xf80079f4>
 8007a88:	3005883a 	mov	r2,r6
 8007a8c:	003fd706 	br	80079ec <__alt_data_end+0xf80079ec>

08007a90 <memcpy>:
 8007a90:	00c003c4 	movi	r3,15
 8007a94:	2005883a 	mov	r2,r4
 8007a98:	1980372e 	bgeu	r3,r6,8007b78 <memcpy+0xe8>
 8007a9c:	2146b03a 	or	r3,r4,r5
 8007aa0:	18c000cc 	andi	r3,r3,3
 8007aa4:	1800371e 	bne	r3,zero,8007b84 <memcpy+0xf4>
 8007aa8:	327ffc04 	addi	r9,r6,-16
 8007aac:	4812d13a 	srli	r9,r9,4
 8007ab0:	2007883a 	mov	r3,r4
 8007ab4:	280f883a 	mov	r7,r5
 8007ab8:	4808913a 	slli	r4,r9,4
 8007abc:	1109883a 	add	r4,r2,r4
 8007ac0:	21000404 	addi	r4,r4,16
 8007ac4:	3a000017 	ldw	r8,0(r7)
 8007ac8:	18c00404 	addi	r3,r3,16
 8007acc:	39c00404 	addi	r7,r7,16
 8007ad0:	1a3ffc15 	stw	r8,-16(r3)
 8007ad4:	3a3ffd17 	ldw	r8,-12(r7)
 8007ad8:	1a3ffd15 	stw	r8,-12(r3)
 8007adc:	3a3ffe17 	ldw	r8,-8(r7)
 8007ae0:	1a3ffe15 	stw	r8,-8(r3)
 8007ae4:	3a3fff17 	ldw	r8,-4(r7)
 8007ae8:	1a3fff15 	stw	r8,-4(r3)
 8007aec:	193ff51e 	bne	r3,r4,8007ac4 <__alt_data_end+0xf8007ac4>
 8007af0:	49000044 	addi	r4,r9,1
 8007af4:	2008913a 	slli	r4,r4,4
 8007af8:	328003cc 	andi	r10,r6,15
 8007afc:	1107883a 	add	r3,r2,r4
 8007b00:	290b883a 	add	r5,r5,r4
 8007b04:	010000c4 	movi	r4,3
 8007b08:	2280212e 	bgeu	r4,r10,8007b90 <memcpy+0x100>
 8007b0c:	52bfff04 	addi	r10,r10,-4
 8007b10:	5014d0ba 	srli	r10,r10,2
 8007b14:	180f883a 	mov	r7,r3
 8007b18:	2811883a 	mov	r8,r5
 8007b1c:	5289883a 	add	r4,r10,r10
 8007b20:	2109883a 	add	r4,r4,r4
 8007b24:	21000104 	addi	r4,r4,4
 8007b28:	1909883a 	add	r4,r3,r4
 8007b2c:	42400017 	ldw	r9,0(r8)
 8007b30:	39c00104 	addi	r7,r7,4
 8007b34:	42000104 	addi	r8,r8,4
 8007b38:	3a7fff15 	stw	r9,-4(r7)
 8007b3c:	393ffb1e 	bne	r7,r4,8007b2c <__alt_data_end+0xf8007b2c>
 8007b40:	51000044 	addi	r4,r10,1
 8007b44:	2109883a 	add	r4,r4,r4
 8007b48:	2109883a 	add	r4,r4,r4
 8007b4c:	318000cc 	andi	r6,r6,3
 8007b50:	1907883a 	add	r3,r3,r4
 8007b54:	290b883a 	add	r5,r5,r4
 8007b58:	30000c26 	beq	r6,zero,8007b8c <memcpy+0xfc>
 8007b5c:	298d883a 	add	r6,r5,r6
 8007b60:	29c00003 	ldbu	r7,0(r5)
 8007b64:	18c00044 	addi	r3,r3,1
 8007b68:	29400044 	addi	r5,r5,1
 8007b6c:	19ffffc5 	stb	r7,-1(r3)
 8007b70:	29bffb1e 	bne	r5,r6,8007b60 <__alt_data_end+0xf8007b60>
 8007b74:	f800283a 	ret
 8007b78:	2007883a 	mov	r3,r4
 8007b7c:	303ff71e 	bne	r6,zero,8007b5c <__alt_data_end+0xf8007b5c>
 8007b80:	00000206 	br	8007b8c <memcpy+0xfc>
 8007b84:	2007883a 	mov	r3,r4
 8007b88:	003ff406 	br	8007b5c <__alt_data_end+0xf8007b5c>
 8007b8c:	f800283a 	ret
 8007b90:	500d883a 	mov	r6,r10
 8007b94:	303ff11e 	bne	r6,zero,8007b5c <__alt_data_end+0xf8007b5c>
 8007b98:	003ffc06 	br	8007b8c <__alt_data_end+0xf8007b8c>

08007b9c <memmove>:
 8007b9c:	2005883a 	mov	r2,r4
 8007ba0:	29000b2e 	bgeu	r5,r4,8007bd0 <memmove+0x34>
 8007ba4:	298f883a 	add	r7,r5,r6
 8007ba8:	21c0092e 	bgeu	r4,r7,8007bd0 <memmove+0x34>
 8007bac:	2187883a 	add	r3,r4,r6
 8007bb0:	198bc83a 	sub	r5,r3,r6
 8007bb4:	30003e26 	beq	r6,zero,8007cb0 <memmove+0x114>
 8007bb8:	39ffffc4 	addi	r7,r7,-1
 8007bbc:	39000003 	ldbu	r4,0(r7)
 8007bc0:	18ffffc4 	addi	r3,r3,-1
 8007bc4:	19000005 	stb	r4,0(r3)
 8007bc8:	197ffb1e 	bne	r3,r5,8007bb8 <__alt_data_end+0xf8007bb8>
 8007bcc:	f800283a 	ret
 8007bd0:	00c003c4 	movi	r3,15
 8007bd4:	1980372e 	bgeu	r3,r6,8007cb4 <memmove+0x118>
 8007bd8:	1146b03a 	or	r3,r2,r5
 8007bdc:	18c000cc 	andi	r3,r3,3
 8007be0:	1800371e 	bne	r3,zero,8007cc0 <memmove+0x124>
 8007be4:	327ffc04 	addi	r9,r6,-16
 8007be8:	4812d13a 	srli	r9,r9,4
 8007bec:	280f883a 	mov	r7,r5
 8007bf0:	1007883a 	mov	r3,r2
 8007bf4:	4810913a 	slli	r8,r9,4
 8007bf8:	1211883a 	add	r8,r2,r8
 8007bfc:	42000404 	addi	r8,r8,16
 8007c00:	39000017 	ldw	r4,0(r7)
 8007c04:	18c00404 	addi	r3,r3,16
 8007c08:	39c00404 	addi	r7,r7,16
 8007c0c:	193ffc15 	stw	r4,-16(r3)
 8007c10:	393ffd17 	ldw	r4,-12(r7)
 8007c14:	193ffd15 	stw	r4,-12(r3)
 8007c18:	393ffe17 	ldw	r4,-8(r7)
 8007c1c:	193ffe15 	stw	r4,-8(r3)
 8007c20:	393fff17 	ldw	r4,-4(r7)
 8007c24:	193fff15 	stw	r4,-4(r3)
 8007c28:	1a3ff51e 	bne	r3,r8,8007c00 <__alt_data_end+0xf8007c00>
 8007c2c:	49000044 	addi	r4,r9,1
 8007c30:	2008913a 	slli	r4,r4,4
 8007c34:	328003cc 	andi	r10,r6,15
 8007c38:	1107883a 	add	r3,r2,r4
 8007c3c:	290b883a 	add	r5,r5,r4
 8007c40:	010000c4 	movi	r4,3
 8007c44:	2280212e 	bgeu	r4,r10,8007ccc <memmove+0x130>
 8007c48:	52bfff04 	addi	r10,r10,-4
 8007c4c:	5014d0ba 	srli	r10,r10,2
 8007c50:	180f883a 	mov	r7,r3
 8007c54:	2809883a 	mov	r4,r5
 8007c58:	5291883a 	add	r8,r10,r10
 8007c5c:	4211883a 	add	r8,r8,r8
 8007c60:	42400104 	addi	r9,r8,4
 8007c64:	1a53883a 	add	r9,r3,r9
 8007c68:	22000017 	ldw	r8,0(r4)
 8007c6c:	39c00104 	addi	r7,r7,4
 8007c70:	21000104 	addi	r4,r4,4
 8007c74:	3a3fff15 	stw	r8,-4(r7)
 8007c78:	3a7ffb1e 	bne	r7,r9,8007c68 <__alt_data_end+0xf8007c68>
 8007c7c:	51000044 	addi	r4,r10,1
 8007c80:	2109883a 	add	r4,r4,r4
 8007c84:	2109883a 	add	r4,r4,r4
 8007c88:	318000cc 	andi	r6,r6,3
 8007c8c:	1907883a 	add	r3,r3,r4
 8007c90:	290b883a 	add	r5,r5,r4
 8007c94:	30000c26 	beq	r6,zero,8007cc8 <memmove+0x12c>
 8007c98:	198d883a 	add	r6,r3,r6
 8007c9c:	29c00003 	ldbu	r7,0(r5)
 8007ca0:	18c00044 	addi	r3,r3,1
 8007ca4:	29400044 	addi	r5,r5,1
 8007ca8:	19ffffc5 	stb	r7,-1(r3)
 8007cac:	19bffb1e 	bne	r3,r6,8007c9c <__alt_data_end+0xf8007c9c>
 8007cb0:	f800283a 	ret
 8007cb4:	1007883a 	mov	r3,r2
 8007cb8:	303ff71e 	bne	r6,zero,8007c98 <__alt_data_end+0xf8007c98>
 8007cbc:	00000206 	br	8007cc8 <memmove+0x12c>
 8007cc0:	1007883a 	mov	r3,r2
 8007cc4:	003ff406 	br	8007c98 <__alt_data_end+0xf8007c98>
 8007cc8:	f800283a 	ret
 8007ccc:	500d883a 	mov	r6,r10
 8007cd0:	303ff11e 	bne	r6,zero,8007c98 <__alt_data_end+0xf8007c98>
 8007cd4:	003ffc06 	br	8007cc8 <__alt_data_end+0xf8007cc8>

08007cd8 <memset>:
 8007cd8:	20c000cc 	andi	r3,r4,3
 8007cdc:	2005883a 	mov	r2,r4
 8007ce0:	18003f26 	beq	r3,zero,8007de0 <memset+0x108>
 8007ce4:	31ffffc4 	addi	r7,r6,-1
 8007ce8:	30003b26 	beq	r6,zero,8007dd8 <memset+0x100>
 8007cec:	2813883a 	mov	r9,r5
 8007cf0:	200d883a 	mov	r6,r4
 8007cf4:	2007883a 	mov	r3,r4
 8007cf8:	00000406 	br	8007d0c <memset+0x34>
 8007cfc:	3a3fffc4 	addi	r8,r7,-1
 8007d00:	31800044 	addi	r6,r6,1
 8007d04:	38003426 	beq	r7,zero,8007dd8 <memset+0x100>
 8007d08:	400f883a 	mov	r7,r8
 8007d0c:	18c00044 	addi	r3,r3,1
 8007d10:	32400005 	stb	r9,0(r6)
 8007d14:	1a0000cc 	andi	r8,r3,3
 8007d18:	403ff81e 	bne	r8,zero,8007cfc <__alt_data_end+0xf8007cfc>
 8007d1c:	010000c4 	movi	r4,3
 8007d20:	21c0282e 	bgeu	r4,r7,8007dc4 <memset+0xec>
 8007d24:	29003fcc 	andi	r4,r5,255
 8007d28:	2010923a 	slli	r8,r4,8
 8007d2c:	4108b03a 	or	r4,r8,r4
 8007d30:	2010943a 	slli	r8,r4,16
 8007d34:	4110b03a 	or	r8,r8,r4
 8007d38:	010003c4 	movi	r4,15
 8007d3c:	21c0122e 	bgeu	r4,r7,8007d88 <memset+0xb0>
 8007d40:	3a7ffc04 	addi	r9,r7,-16
 8007d44:	4812d13a 	srli	r9,r9,4
 8007d48:	19000404 	addi	r4,r3,16
 8007d4c:	180d883a 	mov	r6,r3
 8007d50:	4814913a 	slli	r10,r9,4
 8007d54:	2289883a 	add	r4,r4,r10
 8007d58:	32000015 	stw	r8,0(r6)
 8007d5c:	32000115 	stw	r8,4(r6)
 8007d60:	32000215 	stw	r8,8(r6)
 8007d64:	32000315 	stw	r8,12(r6)
 8007d68:	31800404 	addi	r6,r6,16
 8007d6c:	313ffa1e 	bne	r6,r4,8007d58 <__alt_data_end+0xf8007d58>
 8007d70:	4a400044 	addi	r9,r9,1
 8007d74:	4812913a 	slli	r9,r9,4
 8007d78:	39c003cc 	andi	r7,r7,15
 8007d7c:	010000c4 	movi	r4,3
 8007d80:	1a47883a 	add	r3,r3,r9
 8007d84:	21c00f2e 	bgeu	r4,r7,8007dc4 <memset+0xec>
 8007d88:	3a7fff04 	addi	r9,r7,-4
 8007d8c:	4812d0ba 	srli	r9,r9,2
 8007d90:	19000104 	addi	r4,r3,4
 8007d94:	180d883a 	mov	r6,r3
 8007d98:	4a55883a 	add	r10,r9,r9
 8007d9c:	5295883a 	add	r10,r10,r10
 8007da0:	2289883a 	add	r4,r4,r10
 8007da4:	32000015 	stw	r8,0(r6)
 8007da8:	31800104 	addi	r6,r6,4
 8007dac:	313ffd1e 	bne	r6,r4,8007da4 <__alt_data_end+0xf8007da4>
 8007db0:	4a400044 	addi	r9,r9,1
 8007db4:	4a53883a 	add	r9,r9,r9
 8007db8:	4a53883a 	add	r9,r9,r9
 8007dbc:	1a47883a 	add	r3,r3,r9
 8007dc0:	39c000cc 	andi	r7,r7,3
 8007dc4:	38000526 	beq	r7,zero,8007ddc <memset+0x104>
 8007dc8:	19cf883a 	add	r7,r3,r7
 8007dcc:	19400005 	stb	r5,0(r3)
 8007dd0:	18c00044 	addi	r3,r3,1
 8007dd4:	19fffd1e 	bne	r3,r7,8007dcc <__alt_data_end+0xf8007dcc>
 8007dd8:	f800283a 	ret
 8007ddc:	f800283a 	ret
 8007de0:	2007883a 	mov	r3,r4
 8007de4:	300f883a 	mov	r7,r6
 8007de8:	003fcc06 	br	8007d1c <__alt_data_end+0xf8007d1c>

08007dec <_Balloc>:
 8007dec:	20801317 	ldw	r2,76(r4)
 8007df0:	defffc04 	addi	sp,sp,-16
 8007df4:	dc400115 	stw	r17,4(sp)
 8007df8:	dc000015 	stw	r16,0(sp)
 8007dfc:	dfc00315 	stw	ra,12(sp)
 8007e00:	dc800215 	stw	r18,8(sp)
 8007e04:	2023883a 	mov	r17,r4
 8007e08:	2821883a 	mov	r16,r5
 8007e0c:	10000f26 	beq	r2,zero,8007e4c <_Balloc+0x60>
 8007e10:	8407883a 	add	r3,r16,r16
 8007e14:	18c7883a 	add	r3,r3,r3
 8007e18:	10c7883a 	add	r3,r2,r3
 8007e1c:	18800017 	ldw	r2,0(r3)
 8007e20:	10001126 	beq	r2,zero,8007e68 <_Balloc+0x7c>
 8007e24:	11000017 	ldw	r4,0(r2)
 8007e28:	19000015 	stw	r4,0(r3)
 8007e2c:	10000415 	stw	zero,16(r2)
 8007e30:	10000315 	stw	zero,12(r2)
 8007e34:	dfc00317 	ldw	ra,12(sp)
 8007e38:	dc800217 	ldw	r18,8(sp)
 8007e3c:	dc400117 	ldw	r17,4(sp)
 8007e40:	dc000017 	ldw	r16,0(sp)
 8007e44:	dec00404 	addi	sp,sp,16
 8007e48:	f800283a 	ret
 8007e4c:	01400104 	movi	r5,4
 8007e50:	01800844 	movi	r6,33
 8007e54:	800ac740 	call	800ac74 <_calloc_r>
 8007e58:	88801315 	stw	r2,76(r17)
 8007e5c:	103fec1e 	bne	r2,zero,8007e10 <__alt_data_end+0xf8007e10>
 8007e60:	0005883a 	mov	r2,zero
 8007e64:	003ff306 	br	8007e34 <__alt_data_end+0xf8007e34>
 8007e68:	01400044 	movi	r5,1
 8007e6c:	2c24983a 	sll	r18,r5,r16
 8007e70:	8809883a 	mov	r4,r17
 8007e74:	91800144 	addi	r6,r18,5
 8007e78:	318d883a 	add	r6,r6,r6
 8007e7c:	318d883a 	add	r6,r6,r6
 8007e80:	800ac740 	call	800ac74 <_calloc_r>
 8007e84:	103ff626 	beq	r2,zero,8007e60 <__alt_data_end+0xf8007e60>
 8007e88:	14000115 	stw	r16,4(r2)
 8007e8c:	14800215 	stw	r18,8(r2)
 8007e90:	003fe606 	br	8007e2c <__alt_data_end+0xf8007e2c>

08007e94 <_Bfree>:
 8007e94:	28000826 	beq	r5,zero,8007eb8 <_Bfree+0x24>
 8007e98:	28c00117 	ldw	r3,4(r5)
 8007e9c:	20801317 	ldw	r2,76(r4)
 8007ea0:	18c7883a 	add	r3,r3,r3
 8007ea4:	18c7883a 	add	r3,r3,r3
 8007ea8:	10c5883a 	add	r2,r2,r3
 8007eac:	10c00017 	ldw	r3,0(r2)
 8007eb0:	28c00015 	stw	r3,0(r5)
 8007eb4:	11400015 	stw	r5,0(r2)
 8007eb8:	f800283a 	ret

08007ebc <__multadd>:
 8007ebc:	defff604 	addi	sp,sp,-40
 8007ec0:	dd400515 	stw	r21,20(sp)
 8007ec4:	2d400417 	ldw	r21,16(r5)
 8007ec8:	df000815 	stw	fp,32(sp)
 8007ecc:	ddc00715 	stw	r23,28(sp)
 8007ed0:	dd800615 	stw	r22,24(sp)
 8007ed4:	dd000415 	stw	r20,16(sp)
 8007ed8:	dc400115 	stw	r17,4(sp)
 8007edc:	dc000015 	stw	r16,0(sp)
 8007ee0:	dfc00915 	stw	ra,36(sp)
 8007ee4:	dcc00315 	stw	r19,12(sp)
 8007ee8:	dc800215 	stw	r18,8(sp)
 8007eec:	282d883a 	mov	r22,r5
 8007ef0:	202f883a 	mov	r23,r4
 8007ef4:	3029883a 	mov	r20,r6
 8007ef8:	3839883a 	mov	fp,r7
 8007efc:	2c000504 	addi	r16,r5,20
 8007f00:	0023883a 	mov	r17,zero
 8007f04:	84c00017 	ldw	r19,0(r16)
 8007f08:	a00b883a 	mov	r5,r20
 8007f0c:	8c400044 	addi	r17,r17,1
 8007f10:	993fffcc 	andi	r4,r19,65535
 8007f14:	800c3600 	call	800c360 <__mulsi3>
 8007f18:	1725883a 	add	r18,r2,fp
 8007f1c:	9808d43a 	srli	r4,r19,16
 8007f20:	9026d43a 	srli	r19,r18,16
 8007f24:	a00b883a 	mov	r5,r20
 8007f28:	800c3600 	call	800c360 <__mulsi3>
 8007f2c:	988f883a 	add	r7,r19,r2
 8007f30:	3804943a 	slli	r2,r7,16
 8007f34:	94bfffcc 	andi	r18,r18,65535
 8007f38:	3838d43a 	srli	fp,r7,16
 8007f3c:	14a5883a 	add	r18,r2,r18
 8007f40:	84800015 	stw	r18,0(r16)
 8007f44:	84000104 	addi	r16,r16,4
 8007f48:	8d7fee16 	blt	r17,r21,8007f04 <__alt_data_end+0xf8007f04>
 8007f4c:	e0000926 	beq	fp,zero,8007f74 <__multadd+0xb8>
 8007f50:	b0800217 	ldw	r2,8(r22)
 8007f54:	a880140e 	bge	r21,r2,8007fa8 <__multadd+0xec>
 8007f58:	a8800144 	addi	r2,r21,5
 8007f5c:	1085883a 	add	r2,r2,r2
 8007f60:	1085883a 	add	r2,r2,r2
 8007f64:	b085883a 	add	r2,r22,r2
 8007f68:	17000015 	stw	fp,0(r2)
 8007f6c:	ad400044 	addi	r21,r21,1
 8007f70:	b5400415 	stw	r21,16(r22)
 8007f74:	b005883a 	mov	r2,r22
 8007f78:	dfc00917 	ldw	ra,36(sp)
 8007f7c:	df000817 	ldw	fp,32(sp)
 8007f80:	ddc00717 	ldw	r23,28(sp)
 8007f84:	dd800617 	ldw	r22,24(sp)
 8007f88:	dd400517 	ldw	r21,20(sp)
 8007f8c:	dd000417 	ldw	r20,16(sp)
 8007f90:	dcc00317 	ldw	r19,12(sp)
 8007f94:	dc800217 	ldw	r18,8(sp)
 8007f98:	dc400117 	ldw	r17,4(sp)
 8007f9c:	dc000017 	ldw	r16,0(sp)
 8007fa0:	dec00a04 	addi	sp,sp,40
 8007fa4:	f800283a 	ret
 8007fa8:	b1400117 	ldw	r5,4(r22)
 8007fac:	b809883a 	mov	r4,r23
 8007fb0:	29400044 	addi	r5,r5,1
 8007fb4:	8007dec0 	call	8007dec <_Balloc>
 8007fb8:	b1800417 	ldw	r6,16(r22)
 8007fbc:	b1400304 	addi	r5,r22,12
 8007fc0:	11000304 	addi	r4,r2,12
 8007fc4:	31800084 	addi	r6,r6,2
 8007fc8:	318d883a 	add	r6,r6,r6
 8007fcc:	318d883a 	add	r6,r6,r6
 8007fd0:	1021883a 	mov	r16,r2
 8007fd4:	8007a900 	call	8007a90 <memcpy>
 8007fd8:	b0c00117 	ldw	r3,4(r22)
 8007fdc:	b8801317 	ldw	r2,76(r23)
 8007fe0:	18c7883a 	add	r3,r3,r3
 8007fe4:	18c7883a 	add	r3,r3,r3
 8007fe8:	10c5883a 	add	r2,r2,r3
 8007fec:	10c00017 	ldw	r3,0(r2)
 8007ff0:	b0c00015 	stw	r3,0(r22)
 8007ff4:	15800015 	stw	r22,0(r2)
 8007ff8:	802d883a 	mov	r22,r16
 8007ffc:	003fd606 	br	8007f58 <__alt_data_end+0xf8007f58>

08008000 <__s2b>:
 8008000:	defff904 	addi	sp,sp,-28
 8008004:	dd000415 	stw	r20,16(sp)
 8008008:	dc400115 	stw	r17,4(sp)
 800800c:	2829883a 	mov	r20,r5
 8008010:	2023883a 	mov	r17,r4
 8008014:	01400244 	movi	r5,9
 8008018:	39000204 	addi	r4,r7,8
 800801c:	dcc00315 	stw	r19,12(sp)
 8008020:	dc800215 	stw	r18,8(sp)
 8008024:	dfc00615 	stw	ra,24(sp)
 8008028:	dd400515 	stw	r21,20(sp)
 800802c:	dc000015 	stw	r16,0(sp)
 8008030:	3827883a 	mov	r19,r7
 8008034:	3025883a 	mov	r18,r6
 8008038:	800c2bc0 	call	800c2bc <__divsi3>
 800803c:	00c00044 	movi	r3,1
 8008040:	000b883a 	mov	r5,zero
 8008044:	1880030e 	bge	r3,r2,8008054 <__s2b+0x54>
 8008048:	18c7883a 	add	r3,r3,r3
 800804c:	29400044 	addi	r5,r5,1
 8008050:	18bffd16 	blt	r3,r2,8008048 <__alt_data_end+0xf8008048>
 8008054:	8809883a 	mov	r4,r17
 8008058:	8007dec0 	call	8007dec <_Balloc>
 800805c:	d8c00717 	ldw	r3,28(sp)
 8008060:	10c00515 	stw	r3,20(r2)
 8008064:	00c00044 	movi	r3,1
 8008068:	10c00415 	stw	r3,16(r2)
 800806c:	00c00244 	movi	r3,9
 8008070:	1c80210e 	bge	r3,r18,80080f8 <__s2b+0xf8>
 8008074:	a0eb883a 	add	r21,r20,r3
 8008078:	a821883a 	mov	r16,r21
 800807c:	a4a9883a 	add	r20,r20,r18
 8008080:	81c00007 	ldb	r7,0(r16)
 8008084:	8809883a 	mov	r4,r17
 8008088:	84000044 	addi	r16,r16,1
 800808c:	100b883a 	mov	r5,r2
 8008090:	01800284 	movi	r6,10
 8008094:	39fff404 	addi	r7,r7,-48
 8008098:	8007ebc0 	call	8007ebc <__multadd>
 800809c:	853ff81e 	bne	r16,r20,8008080 <__alt_data_end+0xf8008080>
 80080a0:	aca1883a 	add	r16,r21,r18
 80080a4:	843ffe04 	addi	r16,r16,-8
 80080a8:	94c00a0e 	bge	r18,r19,80080d4 <__s2b+0xd4>
 80080ac:	84e7883a 	add	r19,r16,r19
 80080b0:	9ca5c83a 	sub	r18,r19,r18
 80080b4:	81c00007 	ldb	r7,0(r16)
 80080b8:	8809883a 	mov	r4,r17
 80080bc:	84000044 	addi	r16,r16,1
 80080c0:	100b883a 	mov	r5,r2
 80080c4:	01800284 	movi	r6,10
 80080c8:	39fff404 	addi	r7,r7,-48
 80080cc:	8007ebc0 	call	8007ebc <__multadd>
 80080d0:	84bff81e 	bne	r16,r18,80080b4 <__alt_data_end+0xf80080b4>
 80080d4:	dfc00617 	ldw	ra,24(sp)
 80080d8:	dd400517 	ldw	r21,20(sp)
 80080dc:	dd000417 	ldw	r20,16(sp)
 80080e0:	dcc00317 	ldw	r19,12(sp)
 80080e4:	dc800217 	ldw	r18,8(sp)
 80080e8:	dc400117 	ldw	r17,4(sp)
 80080ec:	dc000017 	ldw	r16,0(sp)
 80080f0:	dec00704 	addi	sp,sp,28
 80080f4:	f800283a 	ret
 80080f8:	a4000284 	addi	r16,r20,10
 80080fc:	1825883a 	mov	r18,r3
 8008100:	003fe906 	br	80080a8 <__alt_data_end+0xf80080a8>

08008104 <__hi0bits>:
 8008104:	20bfffec 	andhi	r2,r4,65535
 8008108:	1000141e 	bne	r2,zero,800815c <__hi0bits+0x58>
 800810c:	2008943a 	slli	r4,r4,16
 8008110:	00800404 	movi	r2,16
 8008114:	20ffc02c 	andhi	r3,r4,65280
 8008118:	1800021e 	bne	r3,zero,8008124 <__hi0bits+0x20>
 800811c:	2008923a 	slli	r4,r4,8
 8008120:	10800204 	addi	r2,r2,8
 8008124:	20fc002c 	andhi	r3,r4,61440
 8008128:	1800021e 	bne	r3,zero,8008134 <__hi0bits+0x30>
 800812c:	2008913a 	slli	r4,r4,4
 8008130:	10800104 	addi	r2,r2,4
 8008134:	20f0002c 	andhi	r3,r4,49152
 8008138:	1800031e 	bne	r3,zero,8008148 <__hi0bits+0x44>
 800813c:	2109883a 	add	r4,r4,r4
 8008140:	10800084 	addi	r2,r2,2
 8008144:	2109883a 	add	r4,r4,r4
 8008148:	20000316 	blt	r4,zero,8008158 <__hi0bits+0x54>
 800814c:	2110002c 	andhi	r4,r4,16384
 8008150:	2000041e 	bne	r4,zero,8008164 <__hi0bits+0x60>
 8008154:	00800804 	movi	r2,32
 8008158:	f800283a 	ret
 800815c:	0005883a 	mov	r2,zero
 8008160:	003fec06 	br	8008114 <__alt_data_end+0xf8008114>
 8008164:	10800044 	addi	r2,r2,1
 8008168:	f800283a 	ret

0800816c <__lo0bits>:
 800816c:	20c00017 	ldw	r3,0(r4)
 8008170:	188001cc 	andi	r2,r3,7
 8008174:	10000826 	beq	r2,zero,8008198 <__lo0bits+0x2c>
 8008178:	1880004c 	andi	r2,r3,1
 800817c:	1000211e 	bne	r2,zero,8008204 <__lo0bits+0x98>
 8008180:	1880008c 	andi	r2,r3,2
 8008184:	1000211e 	bne	r2,zero,800820c <__lo0bits+0xa0>
 8008188:	1806d0ba 	srli	r3,r3,2
 800818c:	00800084 	movi	r2,2
 8008190:	20c00015 	stw	r3,0(r4)
 8008194:	f800283a 	ret
 8008198:	18bfffcc 	andi	r2,r3,65535
 800819c:	10001326 	beq	r2,zero,80081ec <__lo0bits+0x80>
 80081a0:	0005883a 	mov	r2,zero
 80081a4:	19403fcc 	andi	r5,r3,255
 80081a8:	2800021e 	bne	r5,zero,80081b4 <__lo0bits+0x48>
 80081ac:	1806d23a 	srli	r3,r3,8
 80081b0:	10800204 	addi	r2,r2,8
 80081b4:	194003cc 	andi	r5,r3,15
 80081b8:	2800021e 	bne	r5,zero,80081c4 <__lo0bits+0x58>
 80081bc:	1806d13a 	srli	r3,r3,4
 80081c0:	10800104 	addi	r2,r2,4
 80081c4:	194000cc 	andi	r5,r3,3
 80081c8:	2800021e 	bne	r5,zero,80081d4 <__lo0bits+0x68>
 80081cc:	1806d0ba 	srli	r3,r3,2
 80081d0:	10800084 	addi	r2,r2,2
 80081d4:	1940004c 	andi	r5,r3,1
 80081d8:	2800081e 	bne	r5,zero,80081fc <__lo0bits+0x90>
 80081dc:	1806d07a 	srli	r3,r3,1
 80081e0:	1800051e 	bne	r3,zero,80081f8 <__lo0bits+0x8c>
 80081e4:	00800804 	movi	r2,32
 80081e8:	f800283a 	ret
 80081ec:	1806d43a 	srli	r3,r3,16
 80081f0:	00800404 	movi	r2,16
 80081f4:	003feb06 	br	80081a4 <__alt_data_end+0xf80081a4>
 80081f8:	10800044 	addi	r2,r2,1
 80081fc:	20c00015 	stw	r3,0(r4)
 8008200:	f800283a 	ret
 8008204:	0005883a 	mov	r2,zero
 8008208:	f800283a 	ret
 800820c:	1806d07a 	srli	r3,r3,1
 8008210:	00800044 	movi	r2,1
 8008214:	20c00015 	stw	r3,0(r4)
 8008218:	f800283a 	ret

0800821c <__i2b>:
 800821c:	defffd04 	addi	sp,sp,-12
 8008220:	dc000015 	stw	r16,0(sp)
 8008224:	04000044 	movi	r16,1
 8008228:	dc400115 	stw	r17,4(sp)
 800822c:	2823883a 	mov	r17,r5
 8008230:	800b883a 	mov	r5,r16
 8008234:	dfc00215 	stw	ra,8(sp)
 8008238:	8007dec0 	call	8007dec <_Balloc>
 800823c:	14400515 	stw	r17,20(r2)
 8008240:	14000415 	stw	r16,16(r2)
 8008244:	dfc00217 	ldw	ra,8(sp)
 8008248:	dc400117 	ldw	r17,4(sp)
 800824c:	dc000017 	ldw	r16,0(sp)
 8008250:	dec00304 	addi	sp,sp,12
 8008254:	f800283a 	ret

08008258 <__multiply>:
 8008258:	defff004 	addi	sp,sp,-64
 800825c:	dc400715 	stw	r17,28(sp)
 8008260:	dc000615 	stw	r16,24(sp)
 8008264:	34400417 	ldw	r17,16(r6)
 8008268:	2c000417 	ldw	r16,16(r5)
 800826c:	df000e15 	stw	fp,56(sp)
 8008270:	dd000a15 	stw	r20,40(sp)
 8008274:	dfc00f15 	stw	ra,60(sp)
 8008278:	ddc00d15 	stw	r23,52(sp)
 800827c:	dd800c15 	stw	r22,48(sp)
 8008280:	dd400b15 	stw	r21,44(sp)
 8008284:	dcc00915 	stw	r19,36(sp)
 8008288:	dc800815 	stw	r18,32(sp)
 800828c:	2839883a 	mov	fp,r5
 8008290:	3029883a 	mov	r20,r6
 8008294:	8440050e 	bge	r16,r17,80082ac <__multiply+0x54>
 8008298:	8007883a 	mov	r3,r16
 800829c:	3039883a 	mov	fp,r6
 80082a0:	8821883a 	mov	r16,r17
 80082a4:	2829883a 	mov	r20,r5
 80082a8:	1823883a 	mov	r17,r3
 80082ac:	e0800217 	ldw	r2,8(fp)
 80082b0:	8447883a 	add	r3,r16,r17
 80082b4:	d8c00115 	stw	r3,4(sp)
 80082b8:	e1400117 	ldw	r5,4(fp)
 80082bc:	10c0010e 	bge	r2,r3,80082c4 <__multiply+0x6c>
 80082c0:	29400044 	addi	r5,r5,1
 80082c4:	8007dec0 	call	8007dec <_Balloc>
 80082c8:	d8c00117 	ldw	r3,4(sp)
 80082cc:	d8800515 	stw	r2,20(sp)
 80082d0:	18ef883a 	add	r23,r3,r3
 80082d4:	bdef883a 	add	r23,r23,r23
 80082d8:	10c00504 	addi	r3,r2,20
 80082dc:	1def883a 	add	r23,r3,r23
 80082e0:	d8c00015 	stw	r3,0(sp)
 80082e4:	ddc00215 	stw	r23,8(sp)
 80082e8:	1805883a 	mov	r2,r3
 80082ec:	1dc0042e 	bgeu	r3,r23,8008300 <__multiply+0xa8>
 80082f0:	d8c00217 	ldw	r3,8(sp)
 80082f4:	10000015 	stw	zero,0(r2)
 80082f8:	10800104 	addi	r2,r2,4
 80082fc:	10fffc36 	bltu	r2,r3,80082f0 <__alt_data_end+0xf80082f0>
 8008300:	8c63883a 	add	r17,r17,r17
 8008304:	a5000504 	addi	r20,r20,20
 8008308:	8c63883a 	add	r17,r17,r17
 800830c:	e7000504 	addi	fp,fp,20
 8008310:	8421883a 	add	r16,r16,r16
 8008314:	a463883a 	add	r17,r20,r17
 8008318:	8421883a 	add	r16,r16,r16
 800831c:	df000315 	stw	fp,12(sp)
 8008320:	dc400415 	stw	r17,16(sp)
 8008324:	e425883a 	add	r18,fp,r16
 8008328:	a440482e 	bgeu	r20,r17,800844c <__multiply+0x1f4>
 800832c:	a4000017 	ldw	r16,0(r20)
 8008330:	847fffcc 	andi	r17,r16,65535
 8008334:	88001d26 	beq	r17,zero,80083ac <__multiply+0x154>
 8008338:	dc000017 	ldw	r16,0(sp)
 800833c:	dcc00317 	ldw	r19,12(sp)
 8008340:	002b883a 	mov	r21,zero
 8008344:	9dc00017 	ldw	r23,0(r19)
 8008348:	85800017 	ldw	r22,0(r16)
 800834c:	880b883a 	mov	r5,r17
 8008350:	b93fffcc 	andi	r4,r23,65535
 8008354:	800c3600 	call	800c360 <__mulsi3>
 8008358:	b808d43a 	srli	r4,r23,16
 800835c:	b0ffffcc 	andi	r3,r22,65535
 8008360:	1885883a 	add	r2,r3,r2
 8008364:	880b883a 	mov	r5,r17
 8008368:	156b883a 	add	r21,r2,r21
 800836c:	b02cd43a 	srli	r22,r22,16
 8008370:	800c3600 	call	800c360 <__mulsi3>
 8008374:	a808d43a 	srli	r4,r21,16
 8008378:	b085883a 	add	r2,r22,r2
 800837c:	a8ffffcc 	andi	r3,r21,65535
 8008380:	110d883a 	add	r6,r2,r4
 8008384:	3004943a 	slli	r2,r6,16
 8008388:	9cc00104 	addi	r19,r19,4
 800838c:	8009883a 	mov	r4,r16
 8008390:	10c6b03a 	or	r3,r2,r3
 8008394:	80c00015 	stw	r3,0(r16)
 8008398:	302ad43a 	srli	r21,r6,16
 800839c:	84000104 	addi	r16,r16,4
 80083a0:	9cbfe836 	bltu	r19,r18,8008344 <__alt_data_end+0xf8008344>
 80083a4:	25400115 	stw	r21,4(r4)
 80083a8:	a4000017 	ldw	r16,0(r20)
 80083ac:	8020d43a 	srli	r16,r16,16
 80083b0:	80002026 	beq	r16,zero,8008434 <__multiply+0x1dc>
 80083b4:	d8c00017 	ldw	r3,0(sp)
 80083b8:	dd400317 	ldw	r21,12(sp)
 80083bc:	002f883a 	mov	r23,zero
 80083c0:	1f000017 	ldw	fp,0(r3)
 80083c4:	182d883a 	mov	r22,r3
 80083c8:	e023883a 	mov	r17,fp
 80083cc:	a900000b 	ldhu	r4,0(r21)
 80083d0:	8822d43a 	srli	r17,r17,16
 80083d4:	800b883a 	mov	r5,r16
 80083d8:	800c3600 	call	800c360 <__mulsi3>
 80083dc:	1445883a 	add	r2,r2,r17
 80083e0:	15ef883a 	add	r23,r2,r23
 80083e4:	b804943a 	slli	r2,r23,16
 80083e8:	e1ffffcc 	andi	r7,fp,65535
 80083ec:	ad400104 	addi	r21,r21,4
 80083f0:	11ceb03a 	or	r7,r2,r7
 80083f4:	b1c00015 	stw	r7,0(r22)
 80083f8:	a93fff17 	ldw	r4,-4(r21)
 80083fc:	b7000117 	ldw	fp,4(r22)
 8008400:	800b883a 	mov	r5,r16
 8008404:	2008d43a 	srli	r4,r4,16
 8008408:	e023883a 	mov	r17,fp
 800840c:	b027883a 	mov	r19,r22
 8008410:	800c3600 	call	800c360 <__mulsi3>
 8008414:	b812d43a 	srli	r9,r23,16
 8008418:	e23fffcc 	andi	r8,fp,65535
 800841c:	1205883a 	add	r2,r2,r8
 8008420:	1279883a 	add	fp,r2,r9
 8008424:	b5800104 	addi	r22,r22,4
 8008428:	e02ed43a 	srli	r23,fp,16
 800842c:	acbfe736 	bltu	r21,r18,80083cc <__alt_data_end+0xf80083cc>
 8008430:	9f000115 	stw	fp,4(r19)
 8008434:	d8c00017 	ldw	r3,0(sp)
 8008438:	a5000104 	addi	r20,r20,4
 800843c:	18c00104 	addi	r3,r3,4
 8008440:	d8c00015 	stw	r3,0(sp)
 8008444:	d8c00417 	ldw	r3,16(sp)
 8008448:	a0ffb836 	bltu	r20,r3,800832c <__alt_data_end+0xf800832c>
 800844c:	d8c00117 	ldw	r3,4(sp)
 8008450:	00c00c0e 	bge	zero,r3,8008484 <__multiply+0x22c>
 8008454:	d8c00217 	ldw	r3,8(sp)
 8008458:	18bfff17 	ldw	r2,-4(r3)
 800845c:	1dffff04 	addi	r23,r3,-4
 8008460:	10000326 	beq	r2,zero,8008470 <__multiply+0x218>
 8008464:	00000706 	br	8008484 <__multiply+0x22c>
 8008468:	b8800017 	ldw	r2,0(r23)
 800846c:	1000051e 	bne	r2,zero,8008484 <__multiply+0x22c>
 8008470:	d8c00117 	ldw	r3,4(sp)
 8008474:	bdffff04 	addi	r23,r23,-4
 8008478:	18ffffc4 	addi	r3,r3,-1
 800847c:	d8c00115 	stw	r3,4(sp)
 8008480:	183ff91e 	bne	r3,zero,8008468 <__alt_data_end+0xf8008468>
 8008484:	d8c00517 	ldw	r3,20(sp)
 8008488:	d9000117 	ldw	r4,4(sp)
 800848c:	1805883a 	mov	r2,r3
 8008490:	19000415 	stw	r4,16(r3)
 8008494:	dfc00f17 	ldw	ra,60(sp)
 8008498:	df000e17 	ldw	fp,56(sp)
 800849c:	ddc00d17 	ldw	r23,52(sp)
 80084a0:	dd800c17 	ldw	r22,48(sp)
 80084a4:	dd400b17 	ldw	r21,44(sp)
 80084a8:	dd000a17 	ldw	r20,40(sp)
 80084ac:	dcc00917 	ldw	r19,36(sp)
 80084b0:	dc800817 	ldw	r18,32(sp)
 80084b4:	dc400717 	ldw	r17,28(sp)
 80084b8:	dc000617 	ldw	r16,24(sp)
 80084bc:	dec01004 	addi	sp,sp,64
 80084c0:	f800283a 	ret

080084c4 <__pow5mult>:
 80084c4:	defffa04 	addi	sp,sp,-24
 80084c8:	dcc00315 	stw	r19,12(sp)
 80084cc:	dc800215 	stw	r18,8(sp)
 80084d0:	dc000015 	stw	r16,0(sp)
 80084d4:	dfc00515 	stw	ra,20(sp)
 80084d8:	dd000415 	stw	r20,16(sp)
 80084dc:	dc400115 	stw	r17,4(sp)
 80084e0:	308000cc 	andi	r2,r6,3
 80084e4:	3021883a 	mov	r16,r6
 80084e8:	2027883a 	mov	r19,r4
 80084ec:	2825883a 	mov	r18,r5
 80084f0:	1000301e 	bne	r2,zero,80085b4 <__pow5mult+0xf0>
 80084f4:	8021d0ba 	srai	r16,r16,2
 80084f8:	80001b26 	beq	r16,zero,8008568 <__pow5mult+0xa4>
 80084fc:	9c401217 	ldw	r17,72(r19)
 8008500:	88003726 	beq	r17,zero,80085e0 <__pow5mult+0x11c>
 8008504:	80c0004c 	andi	r3,r16,1
 8008508:	1800071e 	bne	r3,zero,8008528 <__pow5mult+0x64>
 800850c:	8021d07a 	srai	r16,r16,1
 8008510:	80001526 	beq	r16,zero,8008568 <__pow5mult+0xa4>
 8008514:	88800017 	ldw	r2,0(r17)
 8008518:	10001c26 	beq	r2,zero,800858c <__pow5mult+0xc8>
 800851c:	1023883a 	mov	r17,r2
 8008520:	80c0004c 	andi	r3,r16,1
 8008524:	183ff926 	beq	r3,zero,800850c <__alt_data_end+0xf800850c>
 8008528:	900b883a 	mov	r5,r18
 800852c:	880d883a 	mov	r6,r17
 8008530:	9809883a 	mov	r4,r19
 8008534:	80082580 	call	8008258 <__multiply>
 8008538:	90001c26 	beq	r18,zero,80085ac <__pow5mult+0xe8>
 800853c:	91000117 	ldw	r4,4(r18)
 8008540:	98c01317 	ldw	r3,76(r19)
 8008544:	8021d07a 	srai	r16,r16,1
 8008548:	2109883a 	add	r4,r4,r4
 800854c:	2109883a 	add	r4,r4,r4
 8008550:	1907883a 	add	r3,r3,r4
 8008554:	19000017 	ldw	r4,0(r3)
 8008558:	91000015 	stw	r4,0(r18)
 800855c:	1c800015 	stw	r18,0(r3)
 8008560:	1025883a 	mov	r18,r2
 8008564:	803feb1e 	bne	r16,zero,8008514 <__alt_data_end+0xf8008514>
 8008568:	9005883a 	mov	r2,r18
 800856c:	dfc00517 	ldw	ra,20(sp)
 8008570:	dd000417 	ldw	r20,16(sp)
 8008574:	dcc00317 	ldw	r19,12(sp)
 8008578:	dc800217 	ldw	r18,8(sp)
 800857c:	dc400117 	ldw	r17,4(sp)
 8008580:	dc000017 	ldw	r16,0(sp)
 8008584:	dec00604 	addi	sp,sp,24
 8008588:	f800283a 	ret
 800858c:	880b883a 	mov	r5,r17
 8008590:	880d883a 	mov	r6,r17
 8008594:	9809883a 	mov	r4,r19
 8008598:	80082580 	call	8008258 <__multiply>
 800859c:	88800015 	stw	r2,0(r17)
 80085a0:	10000015 	stw	zero,0(r2)
 80085a4:	1023883a 	mov	r17,r2
 80085a8:	003fdd06 	br	8008520 <__alt_data_end+0xf8008520>
 80085ac:	1025883a 	mov	r18,r2
 80085b0:	003fd606 	br	800850c <__alt_data_end+0xf800850c>
 80085b4:	10bfffc4 	addi	r2,r2,-1
 80085b8:	1085883a 	add	r2,r2,r2
 80085bc:	00c20074 	movhi	r3,2049
 80085c0:	18c6c504 	addi	r3,r3,6932
 80085c4:	1085883a 	add	r2,r2,r2
 80085c8:	1885883a 	add	r2,r3,r2
 80085cc:	11800017 	ldw	r6,0(r2)
 80085d0:	000f883a 	mov	r7,zero
 80085d4:	8007ebc0 	call	8007ebc <__multadd>
 80085d8:	1025883a 	mov	r18,r2
 80085dc:	003fc506 	br	80084f4 <__alt_data_end+0xf80084f4>
 80085e0:	05000044 	movi	r20,1
 80085e4:	9809883a 	mov	r4,r19
 80085e8:	a00b883a 	mov	r5,r20
 80085ec:	8007dec0 	call	8007dec <_Balloc>
 80085f0:	1023883a 	mov	r17,r2
 80085f4:	00809c44 	movi	r2,625
 80085f8:	88800515 	stw	r2,20(r17)
 80085fc:	8d000415 	stw	r20,16(r17)
 8008600:	9c401215 	stw	r17,72(r19)
 8008604:	88000015 	stw	zero,0(r17)
 8008608:	003fbe06 	br	8008504 <__alt_data_end+0xf8008504>

0800860c <__lshift>:
 800860c:	defff904 	addi	sp,sp,-28
 8008610:	dd000415 	stw	r20,16(sp)
 8008614:	dc400115 	stw	r17,4(sp)
 8008618:	2d000417 	ldw	r20,16(r5)
 800861c:	3023d17a 	srai	r17,r6,5
 8008620:	28800217 	ldw	r2,8(r5)
 8008624:	dd400515 	stw	r21,20(sp)
 8008628:	8d29883a 	add	r20,r17,r20
 800862c:	dcc00315 	stw	r19,12(sp)
 8008630:	dc800215 	stw	r18,8(sp)
 8008634:	dc000015 	stw	r16,0(sp)
 8008638:	dfc00615 	stw	ra,24(sp)
 800863c:	a4000044 	addi	r16,r20,1
 8008640:	2825883a 	mov	r18,r5
 8008644:	302b883a 	mov	r21,r6
 8008648:	2027883a 	mov	r19,r4
 800864c:	29400117 	ldw	r5,4(r5)
 8008650:	1400030e 	bge	r2,r16,8008660 <__lshift+0x54>
 8008654:	1085883a 	add	r2,r2,r2
 8008658:	29400044 	addi	r5,r5,1
 800865c:	143ffd16 	blt	r2,r16,8008654 <__alt_data_end+0xf8008654>
 8008660:	9809883a 	mov	r4,r19
 8008664:	8007dec0 	call	8007dec <_Balloc>
 8008668:	11000504 	addi	r4,r2,20
 800866c:	0440090e 	bge	zero,r17,8008694 <__lshift+0x88>
 8008670:	200f883a 	mov	r7,r4
 8008674:	0007883a 	mov	r3,zero
 8008678:	38000015 	stw	zero,0(r7)
 800867c:	18c00044 	addi	r3,r3,1
 8008680:	39c00104 	addi	r7,r7,4
 8008684:	1c7ffc1e 	bne	r3,r17,8008678 <__alt_data_end+0xf8008678>
 8008688:	18c7883a 	add	r3,r3,r3
 800868c:	18c7883a 	add	r3,r3,r3
 8008690:	20c9883a 	add	r4,r4,r3
 8008694:	92400417 	ldw	r9,16(r18)
 8008698:	90c00504 	addi	r3,r18,20
 800869c:	a98007cc 	andi	r6,r21,31
 80086a0:	4a53883a 	add	r9,r9,r9
 80086a4:	4a53883a 	add	r9,r9,r9
 80086a8:	1a53883a 	add	r9,r3,r9
 80086ac:	30002426 	beq	r6,zero,8008740 <__lshift+0x134>
 80086b0:	01400804 	movi	r5,32
 80086b4:	298bc83a 	sub	r5,r5,r6
 80086b8:	200f883a 	mov	r7,r4
 80086bc:	0011883a 	mov	r8,zero
 80086c0:	1a800017 	ldw	r10,0(r3)
 80086c4:	3809883a 	mov	r4,r7
 80086c8:	39c00104 	addi	r7,r7,4
 80086cc:	5194983a 	sll	r10,r10,r6
 80086d0:	18c00104 	addi	r3,r3,4
 80086d4:	4290b03a 	or	r8,r8,r10
 80086d8:	3a3fff15 	stw	r8,-4(r7)
 80086dc:	1a3fff17 	ldw	r8,-4(r3)
 80086e0:	4150d83a 	srl	r8,r8,r5
 80086e4:	1a7ff636 	bltu	r3,r9,80086c0 <__alt_data_end+0xf80086c0>
 80086e8:	22000115 	stw	r8,4(r4)
 80086ec:	40000126 	beq	r8,zero,80086f4 <__lshift+0xe8>
 80086f0:	a4000084 	addi	r16,r20,2
 80086f4:	91000117 	ldw	r4,4(r18)
 80086f8:	98c01317 	ldw	r3,76(r19)
 80086fc:	843fffc4 	addi	r16,r16,-1
 8008700:	2109883a 	add	r4,r4,r4
 8008704:	2109883a 	add	r4,r4,r4
 8008708:	1907883a 	add	r3,r3,r4
 800870c:	19000017 	ldw	r4,0(r3)
 8008710:	14000415 	stw	r16,16(r2)
 8008714:	91000015 	stw	r4,0(r18)
 8008718:	1c800015 	stw	r18,0(r3)
 800871c:	dfc00617 	ldw	ra,24(sp)
 8008720:	dd400517 	ldw	r21,20(sp)
 8008724:	dd000417 	ldw	r20,16(sp)
 8008728:	dcc00317 	ldw	r19,12(sp)
 800872c:	dc800217 	ldw	r18,8(sp)
 8008730:	dc400117 	ldw	r17,4(sp)
 8008734:	dc000017 	ldw	r16,0(sp)
 8008738:	dec00704 	addi	sp,sp,28
 800873c:	f800283a 	ret
 8008740:	200f883a 	mov	r7,r4
 8008744:	19800017 	ldw	r6,0(r3)
 8008748:	39c00104 	addi	r7,r7,4
 800874c:	18c00104 	addi	r3,r3,4
 8008750:	39bfff15 	stw	r6,-4(r7)
 8008754:	1a7ffb36 	bltu	r3,r9,8008744 <__alt_data_end+0xf8008744>
 8008758:	003fe606 	br	80086f4 <__alt_data_end+0xf80086f4>

0800875c <__mcmp>:
 800875c:	20800417 	ldw	r2,16(r4)
 8008760:	28c00417 	ldw	r3,16(r5)
 8008764:	10c5c83a 	sub	r2,r2,r3
 8008768:	1000111e 	bne	r2,zero,80087b0 <__mcmp+0x54>
 800876c:	18c7883a 	add	r3,r3,r3
 8008770:	18c7883a 	add	r3,r3,r3
 8008774:	21000504 	addi	r4,r4,20
 8008778:	29400504 	addi	r5,r5,20
 800877c:	20c5883a 	add	r2,r4,r3
 8008780:	28cb883a 	add	r5,r5,r3
 8008784:	00000106 	br	800878c <__mcmp+0x30>
 8008788:	2080082e 	bgeu	r4,r2,80087ac <__mcmp+0x50>
 800878c:	10bfff04 	addi	r2,r2,-4
 8008790:	297fff04 	addi	r5,r5,-4
 8008794:	11800017 	ldw	r6,0(r2)
 8008798:	28c00017 	ldw	r3,0(r5)
 800879c:	30fffa26 	beq	r6,r3,8008788 <__alt_data_end+0xf8008788>
 80087a0:	30c00436 	bltu	r6,r3,80087b4 <__mcmp+0x58>
 80087a4:	00800044 	movi	r2,1
 80087a8:	f800283a 	ret
 80087ac:	0005883a 	mov	r2,zero
 80087b0:	f800283a 	ret
 80087b4:	00bfffc4 	movi	r2,-1
 80087b8:	f800283a 	ret

080087bc <__mdiff>:
 80087bc:	defffc04 	addi	sp,sp,-16
 80087c0:	dc000015 	stw	r16,0(sp)
 80087c4:	2821883a 	mov	r16,r5
 80087c8:	200f883a 	mov	r7,r4
 80087cc:	300b883a 	mov	r5,r6
 80087d0:	8009883a 	mov	r4,r16
 80087d4:	dc400115 	stw	r17,4(sp)
 80087d8:	dfc00315 	stw	ra,12(sp)
 80087dc:	dc800215 	stw	r18,8(sp)
 80087e0:	3023883a 	mov	r17,r6
 80087e4:	800875c0 	call	800875c <__mcmp>
 80087e8:	10005226 	beq	r2,zero,8008934 <__mdiff+0x178>
 80087ec:	10004c16 	blt	r2,zero,8008920 <__mdiff+0x164>
 80087f0:	0025883a 	mov	r18,zero
 80087f4:	81400117 	ldw	r5,4(r16)
 80087f8:	3809883a 	mov	r4,r7
 80087fc:	8007dec0 	call	8007dec <_Balloc>
 8008800:	82800417 	ldw	r10,16(r16)
 8008804:	8b400417 	ldw	r13,16(r17)
 8008808:	81000504 	addi	r4,r16,20
 800880c:	5299883a 	add	r12,r10,r10
 8008810:	6b5b883a 	add	r13,r13,r13
 8008814:	6319883a 	add	r12,r12,r12
 8008818:	89800504 	addi	r6,r17,20
 800881c:	6b5b883a 	add	r13,r13,r13
 8008820:	14800315 	stw	r18,12(r2)
 8008824:	2319883a 	add	r12,r4,r12
 8008828:	335b883a 	add	r13,r6,r13
 800882c:	11400504 	addi	r5,r2,20
 8008830:	0007883a 	mov	r3,zero
 8008834:	00000106 	br	800883c <__mdiff+0x80>
 8008838:	400b883a 	mov	r5,r8
 800883c:	22400017 	ldw	r9,0(r4)
 8008840:	32000017 	ldw	r8,0(r6)
 8008844:	31800104 	addi	r6,r6,4
 8008848:	49ffffcc 	andi	r7,r9,65535
 800884c:	42ffffcc 	andi	r11,r8,65535
 8008850:	38c7883a 	add	r3,r7,r3
 8008854:	1acfc83a 	sub	r7,r3,r11
 8008858:	4010d43a 	srli	r8,r8,16
 800885c:	4806d43a 	srli	r3,r9,16
 8008860:	3817d43a 	srai	r11,r7,16
 8008864:	39ffffcc 	andi	r7,r7,65535
 8008868:	1a07c83a 	sub	r3,r3,r8
 800886c:	1ac7883a 	add	r3,r3,r11
 8008870:	1812943a 	slli	r9,r3,16
 8008874:	2a000104 	addi	r8,r5,4
 8008878:	21000104 	addi	r4,r4,4
 800887c:	49ceb03a 	or	r7,r9,r7
 8008880:	29c00015 	stw	r7,0(r5)
 8008884:	1807d43a 	srai	r3,r3,16
 8008888:	337feb36 	bltu	r6,r13,8008838 <__alt_data_end+0xf8008838>
 800888c:	2013883a 	mov	r9,r4
 8008890:	2300342e 	bgeu	r4,r12,8008964 <__mdiff+0x1a8>
 8008894:	400b883a 	mov	r5,r8
 8008898:	21c00017 	ldw	r7,0(r4)
 800889c:	29400104 	addi	r5,r5,4
 80088a0:	21000104 	addi	r4,r4,4
 80088a4:	39bfffcc 	andi	r6,r7,65535
 80088a8:	30cd883a 	add	r6,r6,r3
 80088ac:	3007d43a 	srai	r3,r6,16
 80088b0:	380ed43a 	srli	r7,r7,16
 80088b4:	31bfffcc 	andi	r6,r6,65535
 80088b8:	19c7883a 	add	r3,r3,r7
 80088bc:	180e943a 	slli	r7,r3,16
 80088c0:	1807d43a 	srai	r3,r3,16
 80088c4:	398cb03a 	or	r6,r7,r6
 80088c8:	29bfff15 	stw	r6,-4(r5)
 80088cc:	233ff236 	bltu	r4,r12,8008898 <__alt_data_end+0xf8008898>
 80088d0:	0248303a 	nor	r4,zero,r9
 80088d4:	2309883a 	add	r4,r4,r12
 80088d8:	2008d0ba 	srli	r4,r4,2
 80088dc:	21000044 	addi	r4,r4,1
 80088e0:	2109883a 	add	r4,r4,r4
 80088e4:	2109883a 	add	r4,r4,r4
 80088e8:	4111883a 	add	r8,r8,r4
 80088ec:	413fff04 	addi	r4,r8,-4
 80088f0:	3000041e 	bne	r6,zero,8008904 <__mdiff+0x148>
 80088f4:	213fff04 	addi	r4,r4,-4
 80088f8:	20c00017 	ldw	r3,0(r4)
 80088fc:	52bfffc4 	addi	r10,r10,-1
 8008900:	183ffc26 	beq	r3,zero,80088f4 <__alt_data_end+0xf80088f4>
 8008904:	12800415 	stw	r10,16(r2)
 8008908:	dfc00317 	ldw	ra,12(sp)
 800890c:	dc800217 	ldw	r18,8(sp)
 8008910:	dc400117 	ldw	r17,4(sp)
 8008914:	dc000017 	ldw	r16,0(sp)
 8008918:	dec00404 	addi	sp,sp,16
 800891c:	f800283a 	ret
 8008920:	8005883a 	mov	r2,r16
 8008924:	04800044 	movi	r18,1
 8008928:	8821883a 	mov	r16,r17
 800892c:	1023883a 	mov	r17,r2
 8008930:	003fb006 	br	80087f4 <__alt_data_end+0xf80087f4>
 8008934:	3809883a 	mov	r4,r7
 8008938:	000b883a 	mov	r5,zero
 800893c:	8007dec0 	call	8007dec <_Balloc>
 8008940:	00c00044 	movi	r3,1
 8008944:	10c00415 	stw	r3,16(r2)
 8008948:	10000515 	stw	zero,20(r2)
 800894c:	dfc00317 	ldw	ra,12(sp)
 8008950:	dc800217 	ldw	r18,8(sp)
 8008954:	dc400117 	ldw	r17,4(sp)
 8008958:	dc000017 	ldw	r16,0(sp)
 800895c:	dec00404 	addi	sp,sp,16
 8008960:	f800283a 	ret
 8008964:	380d883a 	mov	r6,r7
 8008968:	003fe006 	br	80088ec <__alt_data_end+0xf80088ec>

0800896c <__ulp>:
 800896c:	295ffc2c 	andhi	r5,r5,32752
 8008970:	00bf3034 	movhi	r2,64704
 8008974:	2887883a 	add	r3,r5,r2
 8008978:	00c0020e 	bge	zero,r3,8008984 <__ulp+0x18>
 800897c:	0005883a 	mov	r2,zero
 8008980:	f800283a 	ret
 8008984:	00c7c83a 	sub	r3,zero,r3
 8008988:	1805d53a 	srai	r2,r3,20
 800898c:	00c004c4 	movi	r3,19
 8008990:	18800a0e 	bge	r3,r2,80089bc <__ulp+0x50>
 8008994:	01000c84 	movi	r4,50
 8008998:	0007883a 	mov	r3,zero
 800899c:	20800516 	blt	r4,r2,80089b4 <__ulp+0x48>
 80089a0:	01000cc4 	movi	r4,51
 80089a4:	2085c83a 	sub	r2,r4,r2
 80089a8:	01000044 	movi	r4,1
 80089ac:	2084983a 	sll	r2,r4,r2
 80089b0:	f800283a 	ret
 80089b4:	00800044 	movi	r2,1
 80089b8:	f800283a 	ret
 80089bc:	00c00234 	movhi	r3,8
 80089c0:	1887d83a 	sra	r3,r3,r2
 80089c4:	0005883a 	mov	r2,zero
 80089c8:	f800283a 	ret

080089cc <__b2d>:
 80089cc:	21800417 	ldw	r6,16(r4)
 80089d0:	22000504 	addi	r8,r4,20
 80089d4:	deffff04 	addi	sp,sp,-4
 80089d8:	318d883a 	add	r6,r6,r6
 80089dc:	318d883a 	add	r6,r6,r6
 80089e0:	418d883a 	add	r6,r8,r6
 80089e4:	31ffff17 	ldw	r7,-4(r6)
 80089e8:	327fff04 	addi	r9,r6,-4
 80089ec:	dfc00015 	stw	ra,0(sp)
 80089f0:	3809883a 	mov	r4,r7
 80089f4:	80081040 	call	8008104 <__hi0bits>
 80089f8:	00c00804 	movi	r3,32
 80089fc:	1887c83a 	sub	r3,r3,r2
 8008a00:	28c00015 	stw	r3,0(r5)
 8008a04:	00c00284 	movi	r3,10
 8008a08:	18800d16 	blt	r3,r2,8008a40 <__b2d+0x74>
 8008a0c:	010002c4 	movi	r4,11
 8008a10:	2089c83a 	sub	r4,r4,r2
 8008a14:	3906d83a 	srl	r3,r7,r4
 8008a18:	18cffc34 	orhi	r3,r3,16368
 8008a1c:	4240232e 	bgeu	r8,r9,8008aac <__b2d+0xe0>
 8008a20:	317ffe17 	ldw	r5,-8(r6)
 8008a24:	2908d83a 	srl	r4,r5,r4
 8008a28:	10800544 	addi	r2,r2,21
 8008a2c:	388e983a 	sll	r7,r7,r2
 8008a30:	21c4b03a 	or	r2,r4,r7
 8008a34:	dfc00017 	ldw	ra,0(sp)
 8008a38:	dec00104 	addi	sp,sp,4
 8008a3c:	f800283a 	ret
 8008a40:	42401136 	bltu	r8,r9,8008a88 <__b2d+0xbc>
 8008a44:	113ffd44 	addi	r4,r2,-11
 8008a48:	000b883a 	mov	r5,zero
 8008a4c:	20001226 	beq	r4,zero,8008a98 <__b2d+0xcc>
 8008a50:	00c00ac4 	movi	r3,43
 8008a54:	1885c83a 	sub	r2,r3,r2
 8008a58:	3906983a 	sll	r3,r7,r4
 8008a5c:	288cd83a 	srl	r6,r5,r2
 8008a60:	18cffc34 	orhi	r3,r3,16368
 8008a64:	1986b03a 	or	r3,r3,r6
 8008a68:	4240122e 	bgeu	r8,r9,8008ab4 <__b2d+0xe8>
 8008a6c:	49bfff17 	ldw	r6,-4(r9)
 8008a70:	3084d83a 	srl	r2,r6,r2
 8008a74:	2908983a 	sll	r4,r5,r4
 8008a78:	1104b03a 	or	r2,r2,r4
 8008a7c:	dfc00017 	ldw	ra,0(sp)
 8008a80:	dec00104 	addi	sp,sp,4
 8008a84:	f800283a 	ret
 8008a88:	113ffd44 	addi	r4,r2,-11
 8008a8c:	327ffe04 	addi	r9,r6,-8
 8008a90:	317ffe17 	ldw	r5,-8(r6)
 8008a94:	203fee1e 	bne	r4,zero,8008a50 <__alt_data_end+0xf8008a50>
 8008a98:	38cffc34 	orhi	r3,r7,16368
 8008a9c:	2805883a 	mov	r2,r5
 8008aa0:	dfc00017 	ldw	ra,0(sp)
 8008aa4:	dec00104 	addi	sp,sp,4
 8008aa8:	f800283a 	ret
 8008aac:	0009883a 	mov	r4,zero
 8008ab0:	003fdd06 	br	8008a28 <__alt_data_end+0xf8008a28>
 8008ab4:	0005883a 	mov	r2,zero
 8008ab8:	003fee06 	br	8008a74 <__alt_data_end+0xf8008a74>

08008abc <__d2b>:
 8008abc:	defffa04 	addi	sp,sp,-24
 8008ac0:	dc400315 	stw	r17,12(sp)
 8008ac4:	2823883a 	mov	r17,r5
 8008ac8:	01400044 	movi	r5,1
 8008acc:	dc800415 	stw	r18,16(sp)
 8008ad0:	dc000215 	stw	r16,8(sp)
 8008ad4:	dfc00515 	stw	ra,20(sp)
 8008ad8:	3021883a 	mov	r16,r6
 8008adc:	3825883a 	mov	r18,r7
 8008ae0:	8007dec0 	call	8007dec <_Balloc>
 8008ae4:	8012907a 	slli	r9,r16,1
 8008ae8:	1011883a 	mov	r8,r2
 8008aec:	00800434 	movhi	r2,16
 8008af0:	10bfffc4 	addi	r2,r2,-1
 8008af4:	4812d57a 	srli	r9,r9,21
 8008af8:	80a0703a 	and	r16,r16,r2
 8008afc:	48000126 	beq	r9,zero,8008b04 <__d2b+0x48>
 8008b00:	84000434 	orhi	r16,r16,16
 8008b04:	dc000015 	stw	r16,0(sp)
 8008b08:	88001e26 	beq	r17,zero,8008b84 <__d2b+0xc8>
 8008b0c:	d9000104 	addi	r4,sp,4
 8008b10:	dc400115 	stw	r17,4(sp)
 8008b14:	800816c0 	call	800816c <__lo0bits>
 8008b18:	d8c00017 	ldw	r3,0(sp)
 8008b1c:	10002f1e 	bne	r2,zero,8008bdc <__d2b+0x120>
 8008b20:	d9000117 	ldw	r4,4(sp)
 8008b24:	41000515 	stw	r4,20(r8)
 8008b28:	180b003a 	cmpeq	r5,r3,zero
 8008b2c:	01000084 	movi	r4,2
 8008b30:	214bc83a 	sub	r5,r4,r5
 8008b34:	40c00615 	stw	r3,24(r8)
 8008b38:	41400415 	stw	r5,16(r8)
 8008b3c:	4800191e 	bne	r9,zero,8008ba4 <__d2b+0xe8>
 8008b40:	280690ba 	slli	r3,r5,2
 8008b44:	10bef384 	addi	r2,r2,-1074
 8008b48:	90800015 	stw	r2,0(r18)
 8008b4c:	40c5883a 	add	r2,r8,r3
 8008b50:	11000417 	ldw	r4,16(r2)
 8008b54:	80081040 	call	8008104 <__hi0bits>
 8008b58:	280a917a 	slli	r5,r5,5
 8008b5c:	d8c00617 	ldw	r3,24(sp)
 8008b60:	2885c83a 	sub	r2,r5,r2
 8008b64:	18800015 	stw	r2,0(r3)
 8008b68:	4005883a 	mov	r2,r8
 8008b6c:	dfc00517 	ldw	ra,20(sp)
 8008b70:	dc800417 	ldw	r18,16(sp)
 8008b74:	dc400317 	ldw	r17,12(sp)
 8008b78:	dc000217 	ldw	r16,8(sp)
 8008b7c:	dec00604 	addi	sp,sp,24
 8008b80:	f800283a 	ret
 8008b84:	d809883a 	mov	r4,sp
 8008b88:	800816c0 	call	800816c <__lo0bits>
 8008b8c:	d8c00017 	ldw	r3,0(sp)
 8008b90:	01400044 	movi	r5,1
 8008b94:	41400415 	stw	r5,16(r8)
 8008b98:	40c00515 	stw	r3,20(r8)
 8008b9c:	10800804 	addi	r2,r2,32
 8008ba0:	483fe726 	beq	r9,zero,8008b40 <__alt_data_end+0xf8008b40>
 8008ba4:	00c00d44 	movi	r3,53
 8008ba8:	4a7ef344 	addi	r9,r9,-1075
 8008bac:	4893883a 	add	r9,r9,r2
 8008bb0:	1885c83a 	sub	r2,r3,r2
 8008bb4:	d8c00617 	ldw	r3,24(sp)
 8008bb8:	92400015 	stw	r9,0(r18)
 8008bbc:	18800015 	stw	r2,0(r3)
 8008bc0:	4005883a 	mov	r2,r8
 8008bc4:	dfc00517 	ldw	ra,20(sp)
 8008bc8:	dc800417 	ldw	r18,16(sp)
 8008bcc:	dc400317 	ldw	r17,12(sp)
 8008bd0:	dc000217 	ldw	r16,8(sp)
 8008bd4:	dec00604 	addi	sp,sp,24
 8008bd8:	f800283a 	ret
 8008bdc:	01000804 	movi	r4,32
 8008be0:	2089c83a 	sub	r4,r4,r2
 8008be4:	1908983a 	sll	r4,r3,r4
 8008be8:	d9400117 	ldw	r5,4(sp)
 8008bec:	1886d83a 	srl	r3,r3,r2
 8008bf0:	2148b03a 	or	r4,r4,r5
 8008bf4:	41000515 	stw	r4,20(r8)
 8008bf8:	d8c00015 	stw	r3,0(sp)
 8008bfc:	003fca06 	br	8008b28 <__alt_data_end+0xf8008b28>

08008c00 <__ratio>:
 8008c00:	defffd04 	addi	sp,sp,-12
 8008c04:	2817883a 	mov	r11,r5
 8008c08:	201b883a 	mov	r13,r4
 8008c0c:	d9400104 	addi	r5,sp,4
 8008c10:	dfc00215 	stw	ra,8(sp)
 8008c14:	80089cc0 	call	80089cc <__b2d>
 8008c18:	5809883a 	mov	r4,r11
 8008c1c:	d80b883a 	mov	r5,sp
 8008c20:	1019883a 	mov	r12,r2
 8008c24:	1815883a 	mov	r10,r3
 8008c28:	80089cc0 	call	80089cc <__b2d>
 8008c2c:	69400417 	ldw	r5,16(r13)
 8008c30:	59000417 	ldw	r4,16(r11)
 8008c34:	d9800117 	ldw	r6,4(sp)
 8008c38:	2909c83a 	sub	r4,r5,r4
 8008c3c:	d9400017 	ldw	r5,0(sp)
 8008c40:	2008917a 	slli	r4,r4,5
 8008c44:	314bc83a 	sub	r5,r6,r5
 8008c48:	290b883a 	add	r5,r5,r4
 8008c4c:	01400a0e 	bge	zero,r5,8008c78 <__ratio+0x78>
 8008c50:	280a953a 	slli	r5,r5,20
 8008c54:	6009883a 	mov	r4,r12
 8008c58:	100d883a 	mov	r6,r2
 8008c5c:	2a95883a 	add	r10,r5,r10
 8008c60:	500b883a 	mov	r5,r10
 8008c64:	180f883a 	mov	r7,r3
 8008c68:	800cc040 	call	800cc04 <__divdf3>
 8008c6c:	dfc00217 	ldw	ra,8(sp)
 8008c70:	dec00304 	addi	sp,sp,12
 8008c74:	f800283a 	ret
 8008c78:	280a953a 	slli	r5,r5,20
 8008c7c:	6009883a 	mov	r4,r12
 8008c80:	100d883a 	mov	r6,r2
 8008c84:	1947c83a 	sub	r3,r3,r5
 8008c88:	180f883a 	mov	r7,r3
 8008c8c:	500b883a 	mov	r5,r10
 8008c90:	800cc040 	call	800cc04 <__divdf3>
 8008c94:	dfc00217 	ldw	ra,8(sp)
 8008c98:	dec00304 	addi	sp,sp,12
 8008c9c:	f800283a 	ret

08008ca0 <_mprec_log10>:
 8008ca0:	defffe04 	addi	sp,sp,-8
 8008ca4:	dc000015 	stw	r16,0(sp)
 8008ca8:	dfc00115 	stw	ra,4(sp)
 8008cac:	008005c4 	movi	r2,23
 8008cb0:	2021883a 	mov	r16,r4
 8008cb4:	11000d0e 	bge	r2,r4,8008cec <_mprec_log10+0x4c>
 8008cb8:	0005883a 	mov	r2,zero
 8008cbc:	00cffc34 	movhi	r3,16368
 8008cc0:	843fffc4 	addi	r16,r16,-1
 8008cc4:	1009883a 	mov	r4,r2
 8008cc8:	180b883a 	mov	r5,r3
 8008ccc:	000d883a 	mov	r6,zero
 8008cd0:	01d00934 	movhi	r7,16420
 8008cd4:	800d7e80 	call	800d7e8 <__muldf3>
 8008cd8:	803ff91e 	bne	r16,zero,8008cc0 <__alt_data_end+0xf8008cc0>
 8008cdc:	dfc00117 	ldw	ra,4(sp)
 8008ce0:	dc000017 	ldw	r16,0(sp)
 8008ce4:	dec00204 	addi	sp,sp,8
 8008ce8:	f800283a 	ret
 8008cec:	202090fa 	slli	r16,r4,3
 8008cf0:	00820074 	movhi	r2,2049
 8008cf4:	1086dc04 	addi	r2,r2,7024
 8008cf8:	1421883a 	add	r16,r2,r16
 8008cfc:	80800017 	ldw	r2,0(r16)
 8008d00:	80c00117 	ldw	r3,4(r16)
 8008d04:	dfc00117 	ldw	ra,4(sp)
 8008d08:	dc000017 	ldw	r16,0(sp)
 8008d0c:	dec00204 	addi	sp,sp,8
 8008d10:	f800283a 	ret

08008d14 <__copybits>:
 8008d14:	297fffc4 	addi	r5,r5,-1
 8008d18:	2811d17a 	srai	r8,r5,5
 8008d1c:	31c00417 	ldw	r7,16(r6)
 8008d20:	30800504 	addi	r2,r6,20
 8008d24:	42000044 	addi	r8,r8,1
 8008d28:	39cf883a 	add	r7,r7,r7
 8008d2c:	4211883a 	add	r8,r8,r8
 8008d30:	39cf883a 	add	r7,r7,r7
 8008d34:	4211883a 	add	r8,r8,r8
 8008d38:	11cf883a 	add	r7,r2,r7
 8008d3c:	2211883a 	add	r8,r4,r8
 8008d40:	11c00d2e 	bgeu	r2,r7,8008d78 <__copybits+0x64>
 8008d44:	2007883a 	mov	r3,r4
 8008d48:	11400017 	ldw	r5,0(r2)
 8008d4c:	18c00104 	addi	r3,r3,4
 8008d50:	10800104 	addi	r2,r2,4
 8008d54:	197fff15 	stw	r5,-4(r3)
 8008d58:	11fffb36 	bltu	r2,r7,8008d48 <__alt_data_end+0xf8008d48>
 8008d5c:	3985c83a 	sub	r2,r7,r6
 8008d60:	10bffac4 	addi	r2,r2,-21
 8008d64:	1004d0ba 	srli	r2,r2,2
 8008d68:	10800044 	addi	r2,r2,1
 8008d6c:	1085883a 	add	r2,r2,r2
 8008d70:	1085883a 	add	r2,r2,r2
 8008d74:	2089883a 	add	r4,r4,r2
 8008d78:	2200032e 	bgeu	r4,r8,8008d88 <__copybits+0x74>
 8008d7c:	20000015 	stw	zero,0(r4)
 8008d80:	21000104 	addi	r4,r4,4
 8008d84:	223ffd36 	bltu	r4,r8,8008d7c <__alt_data_end+0xf8008d7c>
 8008d88:	f800283a 	ret

08008d8c <__any_on>:
 8008d8c:	20800417 	ldw	r2,16(r4)
 8008d90:	2807d17a 	srai	r3,r5,5
 8008d94:	21000504 	addi	r4,r4,20
 8008d98:	10c00d0e 	bge	r2,r3,8008dd0 <__any_on+0x44>
 8008d9c:	1085883a 	add	r2,r2,r2
 8008da0:	1085883a 	add	r2,r2,r2
 8008da4:	2085883a 	add	r2,r4,r2
 8008da8:	2080182e 	bgeu	r4,r2,8008e0c <__any_on+0x80>
 8008dac:	10ffff17 	ldw	r3,-4(r2)
 8008db0:	10bfff04 	addi	r2,r2,-4
 8008db4:	1800041e 	bne	r3,zero,8008dc8 <__any_on+0x3c>
 8008db8:	2080142e 	bgeu	r4,r2,8008e0c <__any_on+0x80>
 8008dbc:	10bfff04 	addi	r2,r2,-4
 8008dc0:	10c00017 	ldw	r3,0(r2)
 8008dc4:	183ffc26 	beq	r3,zero,8008db8 <__alt_data_end+0xf8008db8>
 8008dc8:	00800044 	movi	r2,1
 8008dcc:	f800283a 	ret
 8008dd0:	18800a0e 	bge	r3,r2,8008dfc <__any_on+0x70>
 8008dd4:	18c7883a 	add	r3,r3,r3
 8008dd8:	18c7883a 	add	r3,r3,r3
 8008ddc:	294007cc 	andi	r5,r5,31
 8008de0:	20c5883a 	add	r2,r4,r3
 8008de4:	283ff026 	beq	r5,zero,8008da8 <__alt_data_end+0xf8008da8>
 8008de8:	10c00017 	ldw	r3,0(r2)
 8008dec:	194cd83a 	srl	r6,r3,r5
 8008df0:	314a983a 	sll	r5,r6,r5
 8008df4:	28fff41e 	bne	r5,r3,8008dc8 <__alt_data_end+0xf8008dc8>
 8008df8:	003feb06 	br	8008da8 <__alt_data_end+0xf8008da8>
 8008dfc:	18c7883a 	add	r3,r3,r3
 8008e00:	18c7883a 	add	r3,r3,r3
 8008e04:	20c5883a 	add	r2,r4,r3
 8008e08:	003fe706 	br	8008da8 <__alt_data_end+0xf8008da8>
 8008e0c:	0005883a 	mov	r2,zero
 8008e10:	f800283a 	ret

08008e14 <_realloc_r>:
 8008e14:	defff604 	addi	sp,sp,-40
 8008e18:	dd000415 	stw	r20,16(sp)
 8008e1c:	dc000015 	stw	r16,0(sp)
 8008e20:	dfc00915 	stw	ra,36(sp)
 8008e24:	df000815 	stw	fp,32(sp)
 8008e28:	ddc00715 	stw	r23,28(sp)
 8008e2c:	dd800615 	stw	r22,24(sp)
 8008e30:	dd400515 	stw	r21,20(sp)
 8008e34:	dcc00315 	stw	r19,12(sp)
 8008e38:	dc800215 	stw	r18,8(sp)
 8008e3c:	dc400115 	stw	r17,4(sp)
 8008e40:	2821883a 	mov	r16,r5
 8008e44:	3029883a 	mov	r20,r6
 8008e48:	28009a26 	beq	r5,zero,80090b4 <_realloc_r+0x2a0>
 8008e4c:	202b883a 	mov	r21,r4
 8008e50:	800f0d80 	call	800f0d8 <__malloc_lock>
 8008e54:	80ffff17 	ldw	r3,-4(r16)
 8008e58:	047fff04 	movi	r17,-4
 8008e5c:	a08002c4 	addi	r2,r20,11
 8008e60:	01000584 	movi	r4,22
 8008e64:	84fffe04 	addi	r19,r16,-8
 8008e68:	1c62703a 	and	r17,r3,r17
 8008e6c:	2080372e 	bgeu	r4,r2,8008f4c <_realloc_r+0x138>
 8008e70:	04bffe04 	movi	r18,-8
 8008e74:	14a4703a 	and	r18,r2,r18
 8008e78:	9005883a 	mov	r2,r18
 8008e7c:	90005b16 	blt	r18,zero,8008fec <_realloc_r+0x1d8>
 8008e80:	95005a36 	bltu	r18,r20,8008fec <_realloc_r+0x1d8>
 8008e84:	8880340e 	bge	r17,r2,8008f58 <_realloc_r+0x144>
 8008e88:	05c20074 	movhi	r23,2049
 8008e8c:	bdc88804 	addi	r23,r23,8736
 8008e90:	b9000217 	ldw	r4,8(r23)
 8008e94:	9c4b883a 	add	r5,r19,r17
 8008e98:	21409626 	beq	r4,r5,80090f4 <_realloc_r+0x2e0>
 8008e9c:	29800117 	ldw	r6,4(r5)
 8008ea0:	01ffff84 	movi	r7,-2
 8008ea4:	31ce703a 	and	r7,r6,r7
 8008ea8:	29cf883a 	add	r7,r5,r7
 8008eac:	39c00117 	ldw	r7,4(r7)
 8008eb0:	39c0004c 	andi	r7,r7,1
 8008eb4:	38004226 	beq	r7,zero,8008fc0 <_realloc_r+0x1ac>
 8008eb8:	000d883a 	mov	r6,zero
 8008ebc:	000b883a 	mov	r5,zero
 8008ec0:	18c0004c 	andi	r3,r3,1
 8008ec4:	18005c1e 	bne	r3,zero,8009038 <_realloc_r+0x224>
 8008ec8:	85bffe17 	ldw	r22,-8(r16)
 8008ecc:	00ffff04 	movi	r3,-4
 8008ed0:	9dadc83a 	sub	r22,r19,r22
 8008ed4:	b1c00117 	ldw	r7,4(r22)
 8008ed8:	38c6703a 	and	r3,r7,r3
 8008edc:	28005426 	beq	r5,zero,8009030 <_realloc_r+0x21c>
 8008ee0:	1c47883a 	add	r3,r3,r17
 8008ee4:	2900bf26 	beq	r5,r4,80091e4 <_realloc_r+0x3d0>
 8008ee8:	30ef883a 	add	r23,r6,r3
 8008eec:	b8807e16 	blt	r23,r2,80090e8 <_realloc_r+0x2d4>
 8008ef0:	28800317 	ldw	r2,12(r5)
 8008ef4:	28c00217 	ldw	r3,8(r5)
 8008ef8:	89bfff04 	addi	r6,r17,-4
 8008efc:	01000904 	movi	r4,36
 8008f00:	18800315 	stw	r2,12(r3)
 8008f04:	10c00215 	stw	r3,8(r2)
 8008f08:	b1400217 	ldw	r5,8(r22)
 8008f0c:	b0c00317 	ldw	r3,12(r22)
 8008f10:	b5000204 	addi	r20,r22,8
 8008f14:	28c00315 	stw	r3,12(r5)
 8008f18:	19400215 	stw	r5,8(r3)
 8008f1c:	21808536 	bltu	r4,r6,8009134 <_realloc_r+0x320>
 8008f20:	008004c4 	movi	r2,19
 8008f24:	1180932e 	bgeu	r2,r6,8009174 <_realloc_r+0x360>
 8008f28:	80800017 	ldw	r2,0(r16)
 8008f2c:	b0800215 	stw	r2,8(r22)
 8008f30:	80800117 	ldw	r2,4(r16)
 8008f34:	b0800315 	stw	r2,12(r22)
 8008f38:	008006c4 	movi	r2,27
 8008f3c:	1180df36 	bltu	r2,r6,80092bc <_realloc_r+0x4a8>
 8008f40:	b0c00404 	addi	r3,r22,16
 8008f44:	84000204 	addi	r16,r16,8
 8008f48:	00008b06 	br	8009178 <_realloc_r+0x364>
 8008f4c:	00800404 	movi	r2,16
 8008f50:	1025883a 	mov	r18,r2
 8008f54:	003fca06 	br	8008e80 <__alt_data_end+0xf8008e80>
 8008f58:	8029883a 	mov	r20,r16
 8008f5c:	8c8dc83a 	sub	r6,r17,r18
 8008f60:	008003c4 	movi	r2,15
 8008f64:	18c0004c 	andi	r3,r3,1
 8008f68:	11802436 	bltu	r2,r6,8008ffc <_realloc_r+0x1e8>
 8008f6c:	1c46b03a 	or	r3,r3,r17
 8008f70:	98c00115 	stw	r3,4(r19)
 8008f74:	9c63883a 	add	r17,r19,r17
 8008f78:	88800117 	ldw	r2,4(r17)
 8008f7c:	10800054 	ori	r2,r2,1
 8008f80:	88800115 	stw	r2,4(r17)
 8008f84:	a809883a 	mov	r4,r21
 8008f88:	800f0f80 	call	800f0f8 <__malloc_unlock>
 8008f8c:	a005883a 	mov	r2,r20
 8008f90:	dfc00917 	ldw	ra,36(sp)
 8008f94:	df000817 	ldw	fp,32(sp)
 8008f98:	ddc00717 	ldw	r23,28(sp)
 8008f9c:	dd800617 	ldw	r22,24(sp)
 8008fa0:	dd400517 	ldw	r21,20(sp)
 8008fa4:	dd000417 	ldw	r20,16(sp)
 8008fa8:	dcc00317 	ldw	r19,12(sp)
 8008fac:	dc800217 	ldw	r18,8(sp)
 8008fb0:	dc400117 	ldw	r17,4(sp)
 8008fb4:	dc000017 	ldw	r16,0(sp)
 8008fb8:	dec00a04 	addi	sp,sp,40
 8008fbc:	f800283a 	ret
 8008fc0:	01ffff04 	movi	r7,-4
 8008fc4:	31cc703a 	and	r6,r6,r7
 8008fc8:	344f883a 	add	r7,r6,r17
 8008fcc:	38bfbc16 	blt	r7,r2,8008ec0 <__alt_data_end+0xf8008ec0>
 8008fd0:	28800317 	ldw	r2,12(r5)
 8008fd4:	29000217 	ldw	r4,8(r5)
 8008fd8:	8029883a 	mov	r20,r16
 8008fdc:	3823883a 	mov	r17,r7
 8008fe0:	20800315 	stw	r2,12(r4)
 8008fe4:	11000215 	stw	r4,8(r2)
 8008fe8:	003fdc06 	br	8008f5c <__alt_data_end+0xf8008f5c>
 8008fec:	00800304 	movi	r2,12
 8008ff0:	a8800015 	stw	r2,0(r21)
 8008ff4:	0005883a 	mov	r2,zero
 8008ff8:	003fe506 	br	8008f90 <__alt_data_end+0xf8008f90>
 8008ffc:	1c86b03a 	or	r3,r3,r18
 8009000:	9c8b883a 	add	r5,r19,r18
 8009004:	98c00115 	stw	r3,4(r19)
 8009008:	30800054 	ori	r2,r6,1
 800900c:	28800115 	stw	r2,4(r5)
 8009010:	298d883a 	add	r6,r5,r6
 8009014:	30800117 	ldw	r2,4(r6)
 8009018:	a809883a 	mov	r4,r21
 800901c:	29400204 	addi	r5,r5,8
 8009020:	10800054 	ori	r2,r2,1
 8009024:	30800115 	stw	r2,4(r6)
 8009028:	80066800 	call	8006680 <_free_r>
 800902c:	003fd506 	br	8008f84 <__alt_data_end+0xf8008f84>
 8009030:	1c6f883a 	add	r23,r3,r17
 8009034:	b880370e 	bge	r23,r2,8009114 <_realloc_r+0x300>
 8009038:	a00b883a 	mov	r5,r20
 800903c:	a809883a 	mov	r4,r21
 8009040:	80071e40 	call	80071e4 <_malloc_r>
 8009044:	1029883a 	mov	r20,r2
 8009048:	1000c026 	beq	r2,zero,800934c <_realloc_r+0x538>
 800904c:	80ffff17 	ldw	r3,-4(r16)
 8009050:	113ffe04 	addi	r4,r2,-8
 8009054:	00bfff84 	movi	r2,-2
 8009058:	1884703a 	and	r2,r3,r2
 800905c:	9885883a 	add	r2,r19,r2
 8009060:	20809026 	beq	r4,r2,80092a4 <_realloc_r+0x490>
 8009064:	89bfff04 	addi	r6,r17,-4
 8009068:	00800904 	movi	r2,36
 800906c:	11805936 	bltu	r2,r6,80091d4 <_realloc_r+0x3c0>
 8009070:	00c004c4 	movi	r3,19
 8009074:	19803636 	bltu	r3,r6,8009150 <_realloc_r+0x33c>
 8009078:	a005883a 	mov	r2,r20
 800907c:	8007883a 	mov	r3,r16
 8009080:	19000017 	ldw	r4,0(r3)
 8009084:	11000015 	stw	r4,0(r2)
 8009088:	19000117 	ldw	r4,4(r3)
 800908c:	11000115 	stw	r4,4(r2)
 8009090:	18c00217 	ldw	r3,8(r3)
 8009094:	10c00215 	stw	r3,8(r2)
 8009098:	800b883a 	mov	r5,r16
 800909c:	a809883a 	mov	r4,r21
 80090a0:	80066800 	call	8006680 <_free_r>
 80090a4:	a809883a 	mov	r4,r21
 80090a8:	800f0f80 	call	800f0f8 <__malloc_unlock>
 80090ac:	a005883a 	mov	r2,r20
 80090b0:	003fb706 	br	8008f90 <__alt_data_end+0xf8008f90>
 80090b4:	300b883a 	mov	r5,r6
 80090b8:	dfc00917 	ldw	ra,36(sp)
 80090bc:	df000817 	ldw	fp,32(sp)
 80090c0:	ddc00717 	ldw	r23,28(sp)
 80090c4:	dd800617 	ldw	r22,24(sp)
 80090c8:	dd400517 	ldw	r21,20(sp)
 80090cc:	dd000417 	ldw	r20,16(sp)
 80090d0:	dcc00317 	ldw	r19,12(sp)
 80090d4:	dc800217 	ldw	r18,8(sp)
 80090d8:	dc400117 	ldw	r17,4(sp)
 80090dc:	dc000017 	ldw	r16,0(sp)
 80090e0:	dec00a04 	addi	sp,sp,40
 80090e4:	80071e41 	jmpi	80071e4 <_malloc_r>
 80090e8:	182f883a 	mov	r23,r3
 80090ec:	b8bfd216 	blt	r23,r2,8009038 <__alt_data_end+0xf8009038>
 80090f0:	00000806 	br	8009114 <_realloc_r+0x300>
 80090f4:	21800117 	ldw	r6,4(r4)
 80090f8:	017fff04 	movi	r5,-4
 80090fc:	91c00404 	addi	r7,r18,16
 8009100:	314c703a 	and	r6,r6,r5
 8009104:	344b883a 	add	r5,r6,r17
 8009108:	29c0250e 	bge	r5,r7,80091a0 <_realloc_r+0x38c>
 800910c:	200b883a 	mov	r5,r4
 8009110:	003f6b06 	br	8008ec0 <__alt_data_end+0xf8008ec0>
 8009114:	b0800317 	ldw	r2,12(r22)
 8009118:	b0c00217 	ldw	r3,8(r22)
 800911c:	89bfff04 	addi	r6,r17,-4
 8009120:	01000904 	movi	r4,36
 8009124:	18800315 	stw	r2,12(r3)
 8009128:	10c00215 	stw	r3,8(r2)
 800912c:	b5000204 	addi	r20,r22,8
 8009130:	21bf7b2e 	bgeu	r4,r6,8008f20 <__alt_data_end+0xf8008f20>
 8009134:	a009883a 	mov	r4,r20
 8009138:	800b883a 	mov	r5,r16
 800913c:	8007b9c0 	call	8007b9c <memmove>
 8009140:	b0c00117 	ldw	r3,4(r22)
 8009144:	b823883a 	mov	r17,r23
 8009148:	b027883a 	mov	r19,r22
 800914c:	003f8306 	br	8008f5c <__alt_data_end+0xf8008f5c>
 8009150:	80c00017 	ldw	r3,0(r16)
 8009154:	a0c00015 	stw	r3,0(r20)
 8009158:	80c00117 	ldw	r3,4(r16)
 800915c:	a0c00115 	stw	r3,4(r20)
 8009160:	00c006c4 	movi	r3,27
 8009164:	19804736 	bltu	r3,r6,8009284 <_realloc_r+0x470>
 8009168:	a0800204 	addi	r2,r20,8
 800916c:	80c00204 	addi	r3,r16,8
 8009170:	003fc306 	br	8009080 <__alt_data_end+0xf8009080>
 8009174:	a007883a 	mov	r3,r20
 8009178:	80800017 	ldw	r2,0(r16)
 800917c:	b823883a 	mov	r17,r23
 8009180:	b027883a 	mov	r19,r22
 8009184:	18800015 	stw	r2,0(r3)
 8009188:	80800117 	ldw	r2,4(r16)
 800918c:	18800115 	stw	r2,4(r3)
 8009190:	80800217 	ldw	r2,8(r16)
 8009194:	18800215 	stw	r2,8(r3)
 8009198:	b0c00117 	ldw	r3,4(r22)
 800919c:	003f6f06 	br	8008f5c <__alt_data_end+0xf8008f5c>
 80091a0:	9ca7883a 	add	r19,r19,r18
 80091a4:	2c85c83a 	sub	r2,r5,r18
 80091a8:	bcc00215 	stw	r19,8(r23)
 80091ac:	10800054 	ori	r2,r2,1
 80091b0:	98800115 	stw	r2,4(r19)
 80091b4:	80bfff17 	ldw	r2,-4(r16)
 80091b8:	a809883a 	mov	r4,r21
 80091bc:	1080004c 	andi	r2,r2,1
 80091c0:	90a4b03a 	or	r18,r18,r2
 80091c4:	84bfff15 	stw	r18,-4(r16)
 80091c8:	800f0f80 	call	800f0f8 <__malloc_unlock>
 80091cc:	8005883a 	mov	r2,r16
 80091d0:	003f6f06 	br	8008f90 <__alt_data_end+0xf8008f90>
 80091d4:	a009883a 	mov	r4,r20
 80091d8:	800b883a 	mov	r5,r16
 80091dc:	8007b9c0 	call	8007b9c <memmove>
 80091e0:	003fad06 	br	8009098 <__alt_data_end+0xf8009098>
 80091e4:	30f9883a 	add	fp,r6,r3
 80091e8:	91000404 	addi	r4,r18,16
 80091ec:	e13fbe16 	blt	fp,r4,80090e8 <__alt_data_end+0xf80090e8>
 80091f0:	b0800317 	ldw	r2,12(r22)
 80091f4:	b0c00217 	ldw	r3,8(r22)
 80091f8:	89bfff04 	addi	r6,r17,-4
 80091fc:	01000904 	movi	r4,36
 8009200:	18800315 	stw	r2,12(r3)
 8009204:	10c00215 	stw	r3,8(r2)
 8009208:	b4400204 	addi	r17,r22,8
 800920c:	21804336 	bltu	r4,r6,800931c <_realloc_r+0x508>
 8009210:	008004c4 	movi	r2,19
 8009214:	11803f2e 	bgeu	r2,r6,8009314 <_realloc_r+0x500>
 8009218:	80800017 	ldw	r2,0(r16)
 800921c:	b0800215 	stw	r2,8(r22)
 8009220:	80800117 	ldw	r2,4(r16)
 8009224:	b0800315 	stw	r2,12(r22)
 8009228:	008006c4 	movi	r2,27
 800922c:	11803f36 	bltu	r2,r6,800932c <_realloc_r+0x518>
 8009230:	b0c00404 	addi	r3,r22,16
 8009234:	84000204 	addi	r16,r16,8
 8009238:	80800017 	ldw	r2,0(r16)
 800923c:	18800015 	stw	r2,0(r3)
 8009240:	80800117 	ldw	r2,4(r16)
 8009244:	18800115 	stw	r2,4(r3)
 8009248:	80800217 	ldw	r2,8(r16)
 800924c:	18800215 	stw	r2,8(r3)
 8009250:	b487883a 	add	r3,r22,r18
 8009254:	e485c83a 	sub	r2,fp,r18
 8009258:	b8c00215 	stw	r3,8(r23)
 800925c:	10800054 	ori	r2,r2,1
 8009260:	18800115 	stw	r2,4(r3)
 8009264:	b0800117 	ldw	r2,4(r22)
 8009268:	a809883a 	mov	r4,r21
 800926c:	1080004c 	andi	r2,r2,1
 8009270:	90a4b03a 	or	r18,r18,r2
 8009274:	b4800115 	stw	r18,4(r22)
 8009278:	800f0f80 	call	800f0f8 <__malloc_unlock>
 800927c:	8805883a 	mov	r2,r17
 8009280:	003f4306 	br	8008f90 <__alt_data_end+0xf8008f90>
 8009284:	80c00217 	ldw	r3,8(r16)
 8009288:	a0c00215 	stw	r3,8(r20)
 800928c:	80c00317 	ldw	r3,12(r16)
 8009290:	a0c00315 	stw	r3,12(r20)
 8009294:	30801126 	beq	r6,r2,80092dc <_realloc_r+0x4c8>
 8009298:	a0800404 	addi	r2,r20,16
 800929c:	80c00404 	addi	r3,r16,16
 80092a0:	003f7706 	br	8009080 <__alt_data_end+0xf8009080>
 80092a4:	a13fff17 	ldw	r4,-4(r20)
 80092a8:	00bfff04 	movi	r2,-4
 80092ac:	8029883a 	mov	r20,r16
 80092b0:	2084703a 	and	r2,r4,r2
 80092b4:	88a3883a 	add	r17,r17,r2
 80092b8:	003f2806 	br	8008f5c <__alt_data_end+0xf8008f5c>
 80092bc:	80800217 	ldw	r2,8(r16)
 80092c0:	b0800415 	stw	r2,16(r22)
 80092c4:	80800317 	ldw	r2,12(r16)
 80092c8:	b0800515 	stw	r2,20(r22)
 80092cc:	31000a26 	beq	r6,r4,80092f8 <_realloc_r+0x4e4>
 80092d0:	b0c00604 	addi	r3,r22,24
 80092d4:	84000404 	addi	r16,r16,16
 80092d8:	003fa706 	br	8009178 <__alt_data_end+0xf8009178>
 80092dc:	81000417 	ldw	r4,16(r16)
 80092e0:	a0800604 	addi	r2,r20,24
 80092e4:	80c00604 	addi	r3,r16,24
 80092e8:	a1000415 	stw	r4,16(r20)
 80092ec:	81000517 	ldw	r4,20(r16)
 80092f0:	a1000515 	stw	r4,20(r20)
 80092f4:	003f6206 	br	8009080 <__alt_data_end+0xf8009080>
 80092f8:	80800417 	ldw	r2,16(r16)
 80092fc:	84000604 	addi	r16,r16,24
 8009300:	b0c00804 	addi	r3,r22,32
 8009304:	b0800615 	stw	r2,24(r22)
 8009308:	80bfff17 	ldw	r2,-4(r16)
 800930c:	b0800715 	stw	r2,28(r22)
 8009310:	003f9906 	br	8009178 <__alt_data_end+0xf8009178>
 8009314:	8807883a 	mov	r3,r17
 8009318:	003fc706 	br	8009238 <__alt_data_end+0xf8009238>
 800931c:	8809883a 	mov	r4,r17
 8009320:	800b883a 	mov	r5,r16
 8009324:	8007b9c0 	call	8007b9c <memmove>
 8009328:	003fc906 	br	8009250 <__alt_data_end+0xf8009250>
 800932c:	80800217 	ldw	r2,8(r16)
 8009330:	b0800415 	stw	r2,16(r22)
 8009334:	80800317 	ldw	r2,12(r16)
 8009338:	b0800515 	stw	r2,20(r22)
 800933c:	31000726 	beq	r6,r4,800935c <_realloc_r+0x548>
 8009340:	b0c00604 	addi	r3,r22,24
 8009344:	84000404 	addi	r16,r16,16
 8009348:	003fbb06 	br	8009238 <__alt_data_end+0xf8009238>
 800934c:	a809883a 	mov	r4,r21
 8009350:	800f0f80 	call	800f0f8 <__malloc_unlock>
 8009354:	0005883a 	mov	r2,zero
 8009358:	003f0d06 	br	8008f90 <__alt_data_end+0xf8008f90>
 800935c:	80800417 	ldw	r2,16(r16)
 8009360:	84000604 	addi	r16,r16,24
 8009364:	b0c00804 	addi	r3,r22,32
 8009368:	b0800615 	stw	r2,24(r22)
 800936c:	80bfff17 	ldw	r2,-4(r16)
 8009370:	b0800715 	stw	r2,28(r22)
 8009374:	003fb006 	br	8009238 <__alt_data_end+0xf8009238>

08009378 <__fpclassifyd>:
 8009378:	00a00034 	movhi	r2,32768
 800937c:	10bfffc4 	addi	r2,r2,-1
 8009380:	288a703a 	and	r5,r5,r2
 8009384:	28000726 	beq	r5,zero,80093a4 <__fpclassifyd+0x2c>
 8009388:	00bffc34 	movhi	r2,65520
 800938c:	2885883a 	add	r2,r5,r2
 8009390:	00dff834 	movhi	r3,32736
 8009394:	18ffffc4 	addi	r3,r3,-1
 8009398:	18800636 	bltu	r3,r2,80093b4 <__fpclassifyd+0x3c>
 800939c:	00800104 	movi	r2,4
 80093a0:	f800283a 	ret
 80093a4:	2005003a 	cmpeq	r2,r4,zero
 80093a8:	00c000c4 	movi	r3,3
 80093ac:	1885c83a 	sub	r2,r3,r2
 80093b0:	f800283a 	ret
 80093b4:	00800434 	movhi	r2,16
 80093b8:	10bfffc4 	addi	r2,r2,-1
 80093bc:	11400236 	bltu	r2,r5,80093c8 <__fpclassifyd+0x50>
 80093c0:	008000c4 	movi	r2,3
 80093c4:	f800283a 	ret
 80093c8:	009ffc34 	movhi	r2,32752
 80093cc:	28800226 	beq	r5,r2,80093d8 <__fpclassifyd+0x60>
 80093d0:	0005883a 	mov	r2,zero
 80093d4:	f800283a 	ret
 80093d8:	2005003a 	cmpeq	r2,r4,zero
 80093dc:	f800283a 	ret

080093e0 <_sbrk_r>:
 80093e0:	defffd04 	addi	sp,sp,-12
 80093e4:	dc400115 	stw	r17,4(sp)
 80093e8:	dc000015 	stw	r16,0(sp)
 80093ec:	2023883a 	mov	r17,r4
 80093f0:	04020074 	movhi	r16,2049
 80093f4:	8414e604 	addi	r16,r16,21400
 80093f8:	2809883a 	mov	r4,r5
 80093fc:	dfc00215 	stw	ra,8(sp)
 8009400:	80000015 	stw	zero,0(r16)
 8009404:	800f2e00 	call	800f2e0 <sbrk>
 8009408:	00ffffc4 	movi	r3,-1
 800940c:	10c00526 	beq	r2,r3,8009424 <_sbrk_r+0x44>
 8009410:	dfc00217 	ldw	ra,8(sp)
 8009414:	dc400117 	ldw	r17,4(sp)
 8009418:	dc000017 	ldw	r16,0(sp)
 800941c:	dec00304 	addi	sp,sp,12
 8009420:	f800283a 	ret
 8009424:	80c00017 	ldw	r3,0(r16)
 8009428:	183ff926 	beq	r3,zero,8009410 <__alt_data_end+0xf8009410>
 800942c:	88c00015 	stw	r3,0(r17)
 8009430:	dfc00217 	ldw	ra,8(sp)
 8009434:	dc400117 	ldw	r17,4(sp)
 8009438:	dc000017 	ldw	r16,0(sp)
 800943c:	dec00304 	addi	sp,sp,12
 8009440:	f800283a 	ret

08009444 <__sread>:
 8009444:	defffe04 	addi	sp,sp,-8
 8009448:	dc000015 	stw	r16,0(sp)
 800944c:	2821883a 	mov	r16,r5
 8009450:	2940038f 	ldh	r5,14(r5)
 8009454:	dfc00115 	stw	ra,4(sp)
 8009458:	800b1bc0 	call	800b1bc <_read_r>
 800945c:	10000716 	blt	r2,zero,800947c <__sread+0x38>
 8009460:	80c01417 	ldw	r3,80(r16)
 8009464:	1887883a 	add	r3,r3,r2
 8009468:	80c01415 	stw	r3,80(r16)
 800946c:	dfc00117 	ldw	ra,4(sp)
 8009470:	dc000017 	ldw	r16,0(sp)
 8009474:	dec00204 	addi	sp,sp,8
 8009478:	f800283a 	ret
 800947c:	80c0030b 	ldhu	r3,12(r16)
 8009480:	18fbffcc 	andi	r3,r3,61439
 8009484:	80c0030d 	sth	r3,12(r16)
 8009488:	dfc00117 	ldw	ra,4(sp)
 800948c:	dc000017 	ldw	r16,0(sp)
 8009490:	dec00204 	addi	sp,sp,8
 8009494:	f800283a 	ret

08009498 <__seofread>:
 8009498:	0005883a 	mov	r2,zero
 800949c:	f800283a 	ret

080094a0 <__swrite>:
 80094a0:	2880030b 	ldhu	r2,12(r5)
 80094a4:	defffb04 	addi	sp,sp,-20
 80094a8:	dcc00315 	stw	r19,12(sp)
 80094ac:	dc800215 	stw	r18,8(sp)
 80094b0:	dc400115 	stw	r17,4(sp)
 80094b4:	dc000015 	stw	r16,0(sp)
 80094b8:	dfc00415 	stw	ra,16(sp)
 80094bc:	10c0400c 	andi	r3,r2,256
 80094c0:	2821883a 	mov	r16,r5
 80094c4:	2027883a 	mov	r19,r4
 80094c8:	3025883a 	mov	r18,r6
 80094cc:	3823883a 	mov	r17,r7
 80094d0:	18000526 	beq	r3,zero,80094e8 <__swrite+0x48>
 80094d4:	2940038f 	ldh	r5,14(r5)
 80094d8:	000d883a 	mov	r6,zero
 80094dc:	01c00084 	movi	r7,2
 80094e0:	800b1500 	call	800b150 <_lseek_r>
 80094e4:	8080030b 	ldhu	r2,12(r16)
 80094e8:	8140038f 	ldh	r5,14(r16)
 80094ec:	10bbffcc 	andi	r2,r2,61439
 80094f0:	9809883a 	mov	r4,r19
 80094f4:	900d883a 	mov	r6,r18
 80094f8:	880f883a 	mov	r7,r17
 80094fc:	8080030d 	sth	r2,12(r16)
 8009500:	dfc00417 	ldw	ra,16(sp)
 8009504:	dcc00317 	ldw	r19,12(sp)
 8009508:	dc800217 	ldw	r18,8(sp)
 800950c:	dc400117 	ldw	r17,4(sp)
 8009510:	dc000017 	ldw	r16,0(sp)
 8009514:	dec00504 	addi	sp,sp,20
 8009518:	800aba41 	jmpi	800aba4 <_write_r>

0800951c <__sseek>:
 800951c:	defffe04 	addi	sp,sp,-8
 8009520:	dc000015 	stw	r16,0(sp)
 8009524:	2821883a 	mov	r16,r5
 8009528:	2940038f 	ldh	r5,14(r5)
 800952c:	dfc00115 	stw	ra,4(sp)
 8009530:	800b1500 	call	800b150 <_lseek_r>
 8009534:	00ffffc4 	movi	r3,-1
 8009538:	10c00826 	beq	r2,r3,800955c <__sseek+0x40>
 800953c:	80c0030b 	ldhu	r3,12(r16)
 8009540:	80801415 	stw	r2,80(r16)
 8009544:	18c40014 	ori	r3,r3,4096
 8009548:	80c0030d 	sth	r3,12(r16)
 800954c:	dfc00117 	ldw	ra,4(sp)
 8009550:	dc000017 	ldw	r16,0(sp)
 8009554:	dec00204 	addi	sp,sp,8
 8009558:	f800283a 	ret
 800955c:	80c0030b 	ldhu	r3,12(r16)
 8009560:	18fbffcc 	andi	r3,r3,61439
 8009564:	80c0030d 	sth	r3,12(r16)
 8009568:	dfc00117 	ldw	ra,4(sp)
 800956c:	dc000017 	ldw	r16,0(sp)
 8009570:	dec00204 	addi	sp,sp,8
 8009574:	f800283a 	ret

08009578 <__sclose>:
 8009578:	2940038f 	ldh	r5,14(r5)
 800957c:	800ac101 	jmpi	800ac10 <_close_r>

08009580 <strcmp>:
 8009580:	2144b03a 	or	r2,r4,r5
 8009584:	108000cc 	andi	r2,r2,3
 8009588:	1000171e 	bne	r2,zero,80095e8 <strcmp+0x68>
 800958c:	20800017 	ldw	r2,0(r4)
 8009590:	28c00017 	ldw	r3,0(r5)
 8009594:	10c0141e 	bne	r2,r3,80095e8 <strcmp+0x68>
 8009598:	027fbff4 	movhi	r9,65279
 800959c:	4a7fbfc4 	addi	r9,r9,-257
 80095a0:	1247883a 	add	r3,r2,r9
 80095a4:	0084303a 	nor	r2,zero,r2
 80095a8:	1884703a 	and	r2,r3,r2
 80095ac:	02202074 	movhi	r8,32897
 80095b0:	42202004 	addi	r8,r8,-32640
 80095b4:	1204703a 	and	r2,r2,r8
 80095b8:	10000226 	beq	r2,zero,80095c4 <strcmp+0x44>
 80095bc:	00001706 	br	800961c <strcmp+0x9c>
 80095c0:	3000161e 	bne	r6,zero,800961c <strcmp+0x9c>
 80095c4:	21000104 	addi	r4,r4,4
 80095c8:	20800017 	ldw	r2,0(r4)
 80095cc:	29400104 	addi	r5,r5,4
 80095d0:	28c00017 	ldw	r3,0(r5)
 80095d4:	124f883a 	add	r7,r2,r9
 80095d8:	008c303a 	nor	r6,zero,r2
 80095dc:	398c703a 	and	r6,r7,r6
 80095e0:	320c703a 	and	r6,r6,r8
 80095e4:	10fff626 	beq	r2,r3,80095c0 <__alt_data_end+0xf80095c0>
 80095e8:	20800007 	ldb	r2,0(r4)
 80095ec:	1000051e 	bne	r2,zero,8009604 <strcmp+0x84>
 80095f0:	00000606 	br	800960c <strcmp+0x8c>
 80095f4:	21000044 	addi	r4,r4,1
 80095f8:	20800007 	ldb	r2,0(r4)
 80095fc:	29400044 	addi	r5,r5,1
 8009600:	10000226 	beq	r2,zero,800960c <strcmp+0x8c>
 8009604:	28c00007 	ldb	r3,0(r5)
 8009608:	10fffa26 	beq	r2,r3,80095f4 <__alt_data_end+0xf80095f4>
 800960c:	20c00003 	ldbu	r3,0(r4)
 8009610:	28800003 	ldbu	r2,0(r5)
 8009614:	1885c83a 	sub	r2,r3,r2
 8009618:	f800283a 	ret
 800961c:	0005883a 	mov	r2,zero
 8009620:	f800283a 	ret

08009624 <__sprint_r.part.0>:
 8009624:	28801917 	ldw	r2,100(r5)
 8009628:	defff604 	addi	sp,sp,-40
 800962c:	dd800615 	stw	r22,24(sp)
 8009630:	dcc00315 	stw	r19,12(sp)
 8009634:	dfc00915 	stw	ra,36(sp)
 8009638:	df000815 	stw	fp,32(sp)
 800963c:	ddc00715 	stw	r23,28(sp)
 8009640:	dd400515 	stw	r21,20(sp)
 8009644:	dd000415 	stw	r20,16(sp)
 8009648:	dc800215 	stw	r18,8(sp)
 800964c:	dc400115 	stw	r17,4(sp)
 8009650:	dc000015 	stw	r16,0(sp)
 8009654:	1088000c 	andi	r2,r2,8192
 8009658:	2827883a 	mov	r19,r5
 800965c:	302d883a 	mov	r22,r6
 8009660:	10002d26 	beq	r2,zero,8009718 <__sprint_r.part.0+0xf4>
 8009664:	30800217 	ldw	r2,8(r6)
 8009668:	35c00017 	ldw	r23,0(r6)
 800966c:	10002826 	beq	r2,zero,8009710 <__sprint_r.part.0+0xec>
 8009670:	202b883a 	mov	r21,r4
 8009674:	bf000104 	addi	fp,r23,4
 8009678:	053fffc4 	movi	r20,-1
 800967c:	e4800017 	ldw	r18,0(fp)
 8009680:	bc400017 	ldw	r17,0(r23)
 8009684:	0021883a 	mov	r16,zero
 8009688:	9024d0ba 	srli	r18,r18,2
 800968c:	04800316 	blt	zero,r18,800969c <__sprint_r.part.0+0x78>
 8009690:	00001806 	br	80096f4 <__sprint_r.part.0+0xd0>
 8009694:	8c400104 	addi	r17,r17,4
 8009698:	94001526 	beq	r18,r16,80096f0 <__sprint_r.part.0+0xcc>
 800969c:	89400017 	ldw	r5,0(r17)
 80096a0:	a809883a 	mov	r4,r21
 80096a4:	980d883a 	mov	r6,r19
 80096a8:	800ae880 	call	800ae88 <_fputwc_r>
 80096ac:	84000044 	addi	r16,r16,1
 80096b0:	153ff81e 	bne	r2,r20,8009694 <__alt_data_end+0xf8009694>
 80096b4:	a005883a 	mov	r2,r20
 80096b8:	b0000215 	stw	zero,8(r22)
 80096bc:	b0000115 	stw	zero,4(r22)
 80096c0:	dfc00917 	ldw	ra,36(sp)
 80096c4:	df000817 	ldw	fp,32(sp)
 80096c8:	ddc00717 	ldw	r23,28(sp)
 80096cc:	dd800617 	ldw	r22,24(sp)
 80096d0:	dd400517 	ldw	r21,20(sp)
 80096d4:	dd000417 	ldw	r20,16(sp)
 80096d8:	dcc00317 	ldw	r19,12(sp)
 80096dc:	dc800217 	ldw	r18,8(sp)
 80096e0:	dc400117 	ldw	r17,4(sp)
 80096e4:	dc000017 	ldw	r16,0(sp)
 80096e8:	dec00a04 	addi	sp,sp,40
 80096ec:	f800283a 	ret
 80096f0:	b0800217 	ldw	r2,8(r22)
 80096f4:	94a5883a 	add	r18,r18,r18
 80096f8:	94a5883a 	add	r18,r18,r18
 80096fc:	1485c83a 	sub	r2,r2,r18
 8009700:	b0800215 	stw	r2,8(r22)
 8009704:	bdc00204 	addi	r23,r23,8
 8009708:	e7000204 	addi	fp,fp,8
 800970c:	103fdb1e 	bne	r2,zero,800967c <__alt_data_end+0xf800967c>
 8009710:	0005883a 	mov	r2,zero
 8009714:	003fe806 	br	80096b8 <__alt_data_end+0xf80096b8>
 8009718:	80069500 	call	8006950 <__sfvwrite_r>
 800971c:	003fe606 	br	80096b8 <__alt_data_end+0xf80096b8>

08009720 <__sprint_r>:
 8009720:	30c00217 	ldw	r3,8(r6)
 8009724:	18000126 	beq	r3,zero,800972c <__sprint_r+0xc>
 8009728:	80096241 	jmpi	8009624 <__sprint_r.part.0>
 800972c:	30000115 	stw	zero,4(r6)
 8009730:	0005883a 	mov	r2,zero
 8009734:	f800283a 	ret

08009738 <___vfiprintf_internal_r>:
 8009738:	defec804 	addi	sp,sp,-1248
 800973c:	dfc13715 	stw	ra,1244(sp)
 8009740:	df013615 	stw	fp,1240(sp)
 8009744:	ddc13515 	stw	r23,1236(sp)
 8009748:	dd813415 	stw	r22,1232(sp)
 800974c:	dd413315 	stw	r21,1228(sp)
 8009750:	dd013215 	stw	r20,1224(sp)
 8009754:	dcc13115 	stw	r19,1220(sp)
 8009758:	dc813015 	stw	r18,1216(sp)
 800975c:	dc412f15 	stw	r17,1212(sp)
 8009760:	dc012e15 	stw	r16,1208(sp)
 8009764:	d9012215 	stw	r4,1160(sp)
 8009768:	d9412015 	stw	r5,1152(sp)
 800976c:	d9c12315 	stw	r7,1164(sp)
 8009770:	3013883a 	mov	r9,r6
 8009774:	20000226 	beq	r4,zero,8009780 <___vfiprintf_internal_r+0x48>
 8009778:	20800e17 	ldw	r2,56(r4)
 800977c:	1000f926 	beq	r2,zero,8009b64 <___vfiprintf_internal_r+0x42c>
 8009780:	d8c12017 	ldw	r3,1152(sp)
 8009784:	1880030b 	ldhu	r2,12(r3)
 8009788:	1108000c 	andi	r4,r2,8192
 800978c:	1007883a 	mov	r3,r2
 8009790:	2000081e 	bne	r4,zero,80097b4 <___vfiprintf_internal_r+0x7c>
 8009794:	d9412017 	ldw	r5,1152(sp)
 8009798:	10c80014 	ori	r3,r2,8192
 800979c:	00b7ffc4 	movi	r2,-8193
 80097a0:	29001917 	ldw	r4,100(r5)
 80097a4:	28c0030d 	sth	r3,12(r5)
 80097a8:	2088703a 	and	r4,r4,r2
 80097ac:	29001915 	stw	r4,100(r5)
 80097b0:	1805883a 	mov	r2,r3
 80097b4:	1900020c 	andi	r4,r3,8
 80097b8:	2000a726 	beq	r4,zero,8009a58 <___vfiprintf_internal_r+0x320>
 80097bc:	d9412017 	ldw	r5,1152(sp)
 80097c0:	29000417 	ldw	r4,16(r5)
 80097c4:	2000a426 	beq	r4,zero,8009a58 <___vfiprintf_internal_r+0x320>
 80097c8:	18c0068c 	andi	r3,r3,26
 80097cc:	01000284 	movi	r4,10
 80097d0:	1900ad26 	beq	r3,r4,8009a88 <___vfiprintf_internal_r+0x350>
 80097d4:	d90109c4 	addi	r4,sp,1063
 80097d8:	d9410a04 	addi	r5,sp,1064
 80097dc:	2905c83a 	sub	r2,r5,r4
 80097e0:	d9011e15 	stw	r4,1144(sp)
 80097e4:	d9411f15 	stw	r5,1148(sp)
 80097e8:	dec11a15 	stw	sp,1128(sp)
 80097ec:	d8011c15 	stw	zero,1136(sp)
 80097f0:	d8011b15 	stw	zero,1132(sp)
 80097f4:	d8012715 	stw	zero,1180(sp)
 80097f8:	d8012415 	stw	zero,1168(sp)
 80097fc:	d811883a 	mov	r8,sp
 8009800:	04c20074 	movhi	r19,2049
 8009804:	9cc71204 	addi	r19,r19,7240
 8009808:	04020074 	movhi	r16,2049
 800980c:	84070e04 	addi	r16,r16,7224
 8009810:	d8812815 	stw	r2,1184(sp)
 8009814:	48800007 	ldb	r2,0(r9)
 8009818:	10040126 	beq	r2,zero,800a820 <___vfiprintf_internal_r+0x10e8>
 800981c:	00c00944 	movi	r3,37
 8009820:	4829883a 	mov	r20,r9
 8009824:	10c0021e 	bne	r2,r3,8009830 <___vfiprintf_internal_r+0xf8>
 8009828:	00001606 	br	8009884 <___vfiprintf_internal_r+0x14c>
 800982c:	10c00326 	beq	r2,r3,800983c <___vfiprintf_internal_r+0x104>
 8009830:	a5000044 	addi	r20,r20,1
 8009834:	a0800007 	ldb	r2,0(r20)
 8009838:	103ffc1e 	bne	r2,zero,800982c <__alt_data_end+0xf800982c>
 800983c:	a263c83a 	sub	r17,r20,r9
 8009840:	88001026 	beq	r17,zero,8009884 <___vfiprintf_internal_r+0x14c>
 8009844:	d8c11c17 	ldw	r3,1136(sp)
 8009848:	d8811b17 	ldw	r2,1132(sp)
 800984c:	42400015 	stw	r9,0(r8)
 8009850:	88c7883a 	add	r3,r17,r3
 8009854:	10800044 	addi	r2,r2,1
 8009858:	44400115 	stw	r17,4(r8)
 800985c:	d8c11c15 	stw	r3,1136(sp)
 8009860:	d8811b15 	stw	r2,1132(sp)
 8009864:	010001c4 	movi	r4,7
 8009868:	2080760e 	bge	r4,r2,8009a44 <___vfiprintf_internal_r+0x30c>
 800986c:	1803b41e 	bne	r3,zero,800a740 <___vfiprintf_internal_r+0x1008>
 8009870:	d8c12417 	ldw	r3,1168(sp)
 8009874:	d8011b15 	stw	zero,1132(sp)
 8009878:	d811883a 	mov	r8,sp
 800987c:	1c47883a 	add	r3,r3,r17
 8009880:	d8c12415 	stw	r3,1168(sp)
 8009884:	a0800007 	ldb	r2,0(r20)
 8009888:	1002dc26 	beq	r2,zero,800a3fc <___vfiprintf_internal_r+0xcc4>
 800988c:	04bfffc4 	movi	r18,-1
 8009890:	a2400044 	addi	r9,r20,1
 8009894:	a0c00047 	ldb	r3,1(r20)
 8009898:	d8011d85 	stb	zero,1142(sp)
 800989c:	002d883a 	mov	r22,zero
 80098a0:	d8012115 	stw	zero,1156(sp)
 80098a4:	0023883a 	mov	r17,zero
 80098a8:	05001604 	movi	r20,88
 80098ac:	05400244 	movi	r21,9
 80098b0:	402f883a 	mov	r23,r8
 80098b4:	900d883a 	mov	r6,r18
 80098b8:	4a400044 	addi	r9,r9,1
 80098bc:	18bff804 	addi	r2,r3,-32
 80098c0:	a0828736 	bltu	r20,r2,800a2e0 <___vfiprintf_internal_r+0xba8>
 80098c4:	1085883a 	add	r2,r2,r2
 80098c8:	1085883a 	add	r2,r2,r2
 80098cc:	01020074 	movhi	r4,2049
 80098d0:	21263804 	addi	r4,r4,-26400
 80098d4:	1105883a 	add	r2,r2,r4
 80098d8:	10800017 	ldw	r2,0(r2)
 80098dc:	1000683a 	jmp	r2
 80098e0:	0800a040 	call	800a04 <__reset-0x77ff5fc>
 80098e4:	0800a2e0 	cmpeqi	zero,at,651
 80098e8:	0800a2e0 	cmpeqi	zero,at,651
 80098ec:	0800a05c 	xori	zero,at,641
 80098f0:	0800a2e0 	cmpeqi	zero,at,651
 80098f4:	0800a2e0 	cmpeqi	zero,at,651
 80098f8:	0800a2e0 	cmpeqi	zero,at,651
 80098fc:	0800a2e0 	cmpeqi	zero,at,651
 8009900:	0800a2e0 	cmpeqi	zero,at,651
 8009904:	0800a2e0 	cmpeqi	zero,at,651
 8009908:	0800a0f0 	cmpltui	zero,at,643
 800990c:	0800a118 	cmpnei	zero,at,644
 8009910:	0800a2e0 	cmpeqi	zero,at,651
 8009914:	08009b84 	addi	zero,at,622
 8009918:	0800a124 	muli	zero,at,644
 800991c:	0800a2e0 	cmpeqi	zero,at,651
 8009920:	08009b90 	cmplti	zero,at,622
 8009924:	08009b9c 	xori	zero,at,622
 8009928:	08009b9c 	xori	zero,at,622
 800992c:	08009b9c 	xori	zero,at,622
 8009930:	08009b9c 	xori	zero,at,622
 8009934:	08009b9c 	xori	zero,at,622
 8009938:	08009b9c 	xori	zero,at,622
 800993c:	08009b9c 	xori	zero,at,622
 8009940:	08009b9c 	xori	zero,at,622
 8009944:	08009b9c 	xori	zero,at,622
 8009948:	0800a2e0 	cmpeqi	zero,at,651
 800994c:	0800a2e0 	cmpeqi	zero,at,651
 8009950:	0800a2e0 	cmpeqi	zero,at,651
 8009954:	0800a2e0 	cmpeqi	zero,at,651
 8009958:	0800a2e0 	cmpeqi	zero,at,651
 800995c:	0800a2e0 	cmpeqi	zero,at,651
 8009960:	0800a2e0 	cmpeqi	zero,at,651
 8009964:	0800a2e0 	cmpeqi	zero,at,651
 8009968:	0800a2e0 	cmpeqi	zero,at,651
 800996c:	0800a2e0 	cmpeqi	zero,at,651
 8009970:	08009be4 	muli	zero,at,623
 8009974:	0800a2e0 	cmpeqi	zero,at,651
 8009978:	0800a2e0 	cmpeqi	zero,at,651
 800997c:	0800a2e0 	cmpeqi	zero,at,651
 8009980:	0800a2e0 	cmpeqi	zero,at,651
 8009984:	0800a2e0 	cmpeqi	zero,at,651
 8009988:	0800a2e0 	cmpeqi	zero,at,651
 800998c:	0800a2e0 	cmpeqi	zero,at,651
 8009990:	0800a2e0 	cmpeqi	zero,at,651
 8009994:	0800a2e0 	cmpeqi	zero,at,651
 8009998:	0800a2e0 	cmpeqi	zero,at,651
 800999c:	08009f38 	rdprs	zero,at,636
 80099a0:	0800a2e0 	cmpeqi	zero,at,651
 80099a4:	0800a2e0 	cmpeqi	zero,at,651
 80099a8:	0800a2e0 	cmpeqi	zero,at,651
 80099ac:	0800a2e0 	cmpeqi	zero,at,651
 80099b0:	0800a2e0 	cmpeqi	zero,at,651
 80099b4:	08009f7c 	xorhi	zero,at,637
 80099b8:	0800a2e0 	cmpeqi	zero,at,651
 80099bc:	0800a2e0 	cmpeqi	zero,at,651
 80099c0:	08009fb4 	orhi	zero,at,638
 80099c4:	0800a2e0 	cmpeqi	zero,at,651
 80099c8:	0800a2e0 	cmpeqi	zero,at,651
 80099cc:	0800a2e0 	cmpeqi	zero,at,651
 80099d0:	0800a2e0 	cmpeqi	zero,at,651
 80099d4:	0800a2e0 	cmpeqi	zero,at,651
 80099d8:	0800a2e0 	cmpeqi	zero,at,651
 80099dc:	0800a2e0 	cmpeqi	zero,at,651
 80099e0:	0800a2e0 	cmpeqi	zero,at,651
 80099e4:	0800a2e0 	cmpeqi	zero,at,651
 80099e8:	0800a2e0 	cmpeqi	zero,at,651
 80099ec:	0800a010 	cmplti	zero,at,640
 80099f0:	0800a184 	addi	zero,at,646
 80099f4:	0800a2e0 	cmpeqi	zero,at,651
 80099f8:	0800a2e0 	cmpeqi	zero,at,651
 80099fc:	0800a2e0 	cmpeqi	zero,at,651
 8009a00:	0800a178 	rdprs	zero,at,645
 8009a04:	0800a184 	addi	zero,at,646
 8009a08:	0800a2e0 	cmpeqi	zero,at,651
 8009a0c:	0800a2e0 	cmpeqi	zero,at,651
 8009a10:	0800a068 	cmpgeui	zero,at,641
 8009a14:	0800a2e0 	cmpeqi	zero,at,651
 8009a18:	0800a080 	call	800a08 <__reset-0x77ff5f8>
 8009a1c:	0800a0b8 	rdprs	zero,at,642
 8009a20:	0800a298 	cmpnei	zero,at,650
 8009a24:	0800a1bc 	xorhi	zero,at,646
 8009a28:	0800a2e0 	cmpeqi	zero,at,651
 8009a2c:	0800a1c8 	cmpgei	zero,at,647
 8009a30:	0800a2e0 	cmpeqi	zero,at,651
 8009a34:	0800a220 	cmpeqi	zero,at,648
 8009a38:	0800a2e0 	cmpeqi	zero,at,651
 8009a3c:	0800a2e0 	cmpeqi	zero,at,651
 8009a40:	0800a258 	cmpnei	zero,at,649
 8009a44:	42000204 	addi	r8,r8,8
 8009a48:	d8c12417 	ldw	r3,1168(sp)
 8009a4c:	1c47883a 	add	r3,r3,r17
 8009a50:	d8c12415 	stw	r3,1168(sp)
 8009a54:	003f8b06 	br	8009884 <__alt_data_end+0xf8009884>
 8009a58:	d9012217 	ldw	r4,1160(sp)
 8009a5c:	d9412017 	ldw	r5,1152(sp)
 8009a60:	da412d15 	stw	r9,1204(sp)
 8009a64:	80045900 	call	8004590 <__swsetup_r>
 8009a68:	da412d17 	ldw	r9,1204(sp)
 8009a6c:	1000301e 	bne	r2,zero,8009b30 <___vfiprintf_internal_r+0x3f8>
 8009a70:	d8c12017 	ldw	r3,1152(sp)
 8009a74:	01000284 	movi	r4,10
 8009a78:	1880030b 	ldhu	r2,12(r3)
 8009a7c:	1007883a 	mov	r3,r2
 8009a80:	18c0068c 	andi	r3,r3,26
 8009a84:	193f531e 	bne	r3,r4,80097d4 <__alt_data_end+0xf80097d4>
 8009a88:	d9012017 	ldw	r4,1152(sp)
 8009a8c:	20c0038b 	ldhu	r3,14(r4)
 8009a90:	193fffcc 	andi	r4,r3,65535
 8009a94:	2120001c 	xori	r4,r4,32768
 8009a98:	21200004 	addi	r4,r4,-32768
 8009a9c:	203f4d16 	blt	r4,zero,80097d4 <__alt_data_end+0xf80097d4>
 8009aa0:	d9412017 	ldw	r5,1152(sp)
 8009aa4:	d9012217 	ldw	r4,1160(sp)
 8009aa8:	d9c12317 	ldw	r7,1164(sp)
 8009aac:	2b001917 	ldw	r12,100(r5)
 8009ab0:	2ac00717 	ldw	r11,28(r5)
 8009ab4:	2a800917 	ldw	r10,36(r5)
 8009ab8:	02010004 	movi	r8,1024
 8009abc:	10bfff4c 	andi	r2,r2,65533
 8009ac0:	da0b883a 	add	r5,sp,r8
 8009ac4:	480d883a 	mov	r6,r9
 8009ac8:	d881030d 	sth	r2,1036(sp)
 8009acc:	db011915 	stw	r12,1124(sp)
 8009ad0:	d8c1038d 	sth	r3,1038(sp)
 8009ad4:	dac10715 	stw	r11,1052(sp)
 8009ad8:	da810915 	stw	r10,1060(sp)
 8009adc:	dec10015 	stw	sp,1024(sp)
 8009ae0:	dec10415 	stw	sp,1040(sp)
 8009ae4:	da010215 	stw	r8,1032(sp)
 8009ae8:	da010515 	stw	r8,1044(sp)
 8009aec:	d8010615 	stw	zero,1048(sp)
 8009af0:	80097380 	call	8009738 <___vfiprintf_internal_r>
 8009af4:	1021883a 	mov	r16,r2
 8009af8:	10000416 	blt	r2,zero,8009b0c <___vfiprintf_internal_r+0x3d4>
 8009afc:	d9012217 	ldw	r4,1160(sp)
 8009b00:	d9410004 	addi	r5,sp,1024
 8009b04:	8005f2c0 	call	8005f2c <_fflush_r>
 8009b08:	10040b1e 	bne	r2,zero,800ab38 <___vfiprintf_internal_r+0x1400>
 8009b0c:	d881030b 	ldhu	r2,1036(sp)
 8009b10:	1080100c 	andi	r2,r2,64
 8009b14:	10000426 	beq	r2,zero,8009b28 <___vfiprintf_internal_r+0x3f0>
 8009b18:	d8c12017 	ldw	r3,1152(sp)
 8009b1c:	1880030b 	ldhu	r2,12(r3)
 8009b20:	10801014 	ori	r2,r2,64
 8009b24:	1880030d 	sth	r2,12(r3)
 8009b28:	8005883a 	mov	r2,r16
 8009b2c:	00000106 	br	8009b34 <___vfiprintf_internal_r+0x3fc>
 8009b30:	00bfffc4 	movi	r2,-1
 8009b34:	dfc13717 	ldw	ra,1244(sp)
 8009b38:	df013617 	ldw	fp,1240(sp)
 8009b3c:	ddc13517 	ldw	r23,1236(sp)
 8009b40:	dd813417 	ldw	r22,1232(sp)
 8009b44:	dd413317 	ldw	r21,1228(sp)
 8009b48:	dd013217 	ldw	r20,1224(sp)
 8009b4c:	dcc13117 	ldw	r19,1220(sp)
 8009b50:	dc813017 	ldw	r18,1216(sp)
 8009b54:	dc412f17 	ldw	r17,1212(sp)
 8009b58:	dc012e17 	ldw	r16,1208(sp)
 8009b5c:	dec13804 	addi	sp,sp,1248
 8009b60:	f800283a 	ret
 8009b64:	d9812d15 	stw	r6,1204(sp)
 8009b68:	800624c0 	call	800624c <__sinit>
 8009b6c:	da412d17 	ldw	r9,1204(sp)
 8009b70:	003f0306 	br	8009780 <__alt_data_end+0xf8009780>
 8009b74:	d9412117 	ldw	r5,1156(sp)
 8009b78:	d8812315 	stw	r2,1164(sp)
 8009b7c:	014bc83a 	sub	r5,zero,r5
 8009b80:	d9412115 	stw	r5,1156(sp)
 8009b84:	8c400114 	ori	r17,r17,4
 8009b88:	48c00007 	ldb	r3,0(r9)
 8009b8c:	003f4a06 	br	80098b8 <__alt_data_end+0xf80098b8>
 8009b90:	8c402014 	ori	r17,r17,128
 8009b94:	48c00007 	ldb	r3,0(r9)
 8009b98:	003f4706 	br	80098b8 <__alt_data_end+0xf80098b8>
 8009b9c:	4825883a 	mov	r18,r9
 8009ba0:	d8012115 	stw	zero,1156(sp)
 8009ba4:	1f3ff404 	addi	fp,r3,-48
 8009ba8:	00000106 	br	8009bb0 <___vfiprintf_internal_r+0x478>
 8009bac:	1025883a 	mov	r18,r2
 8009bb0:	d9012117 	ldw	r4,1156(sp)
 8009bb4:	01400284 	movi	r5,10
 8009bb8:	d9812b15 	stw	r6,1196(sp)
 8009bbc:	800c3600 	call	800c360 <__mulsi3>
 8009bc0:	90c00007 	ldb	r3,0(r18)
 8009bc4:	1739883a 	add	fp,r2,fp
 8009bc8:	df012115 	stw	fp,1156(sp)
 8009bcc:	90800044 	addi	r2,r18,1
 8009bd0:	1f3ff404 	addi	fp,r3,-48
 8009bd4:	1013883a 	mov	r9,r2
 8009bd8:	d9812b17 	ldw	r6,1196(sp)
 8009bdc:	af3ff32e 	bgeu	r21,fp,8009bac <__alt_data_end+0xf8009bac>
 8009be0:	003f3606 	br	80098bc <__alt_data_end+0xf80098bc>
 8009be4:	8c400414 	ori	r17,r17,16
 8009be8:	dd811d85 	stb	r22,1142(sp)
 8009bec:	8880080c 	andi	r2,r17,32
 8009bf0:	b811883a 	mov	r8,r23
 8009bf4:	3025883a 	mov	r18,r6
 8009bf8:	10016726 	beq	r2,zero,800a198 <___vfiprintf_internal_r+0xa60>
 8009bfc:	d8c12317 	ldw	r3,1164(sp)
 8009c00:	18800117 	ldw	r2,4(r3)
 8009c04:	1d000017 	ldw	r20,0(r3)
 8009c08:	18c00204 	addi	r3,r3,8
 8009c0c:	d8c12315 	stw	r3,1164(sp)
 8009c10:	102b883a 	mov	r21,r2
 8009c14:	10030416 	blt	r2,zero,800a828 <___vfiprintf_internal_r+0x10f0>
 8009c18:	dd811d83 	ldbu	r22,1142(sp)
 8009c1c:	900f883a 	mov	r7,r18
 8009c20:	00800044 	movi	r2,1
 8009c24:	a548b03a 	or	r4,r20,r21
 8009c28:	90000216 	blt	r18,zero,8009c34 <___vfiprintf_internal_r+0x4fc>
 8009c2c:	00ffdfc4 	movi	r3,-129
 8009c30:	88e2703a 	and	r17,r17,r3
 8009c34:	10803fcc 	andi	r2,r2,255
 8009c38:	2001db1e 	bne	r4,zero,800a3a8 <___vfiprintf_internal_r+0xc70>
 8009c3c:	9001da1e 	bne	r18,zero,800a3a8 <___vfiprintf_internal_r+0xc70>
 8009c40:	1002ab1e 	bne	r2,zero,800a6f0 <___vfiprintf_internal_r+0xfb8>
 8009c44:	8880004c 	andi	r2,r17,1
 8009c48:	1002a926 	beq	r2,zero,800a6f0 <___vfiprintf_internal_r+0xfb8>
 8009c4c:	d9c12817 	ldw	r7,1184(sp)
 8009c50:	00800c04 	movi	r2,48
 8009c54:	d88109c5 	stb	r2,1063(sp)
 8009c58:	ddc109c4 	addi	r23,sp,1063
 8009c5c:	3829883a 	mov	r20,r7
 8009c60:	3c80010e 	bge	r7,r18,8009c68 <___vfiprintf_internal_r+0x530>
 8009c64:	9029883a 	mov	r20,r18
 8009c68:	b5803fcc 	andi	r22,r22,255
 8009c6c:	b580201c 	xori	r22,r22,128
 8009c70:	b5bfe004 	addi	r22,r22,-128
 8009c74:	b0000126 	beq	r22,zero,8009c7c <___vfiprintf_internal_r+0x544>
 8009c78:	a5000044 	addi	r20,r20,1
 8009c7c:	8a80008c 	andi	r10,r17,2
 8009c80:	50000126 	beq	r10,zero,8009c88 <___vfiprintf_internal_r+0x550>
 8009c84:	a5000084 	addi	r20,r20,2
 8009c88:	8d40210c 	andi	r21,r17,132
 8009c8c:	a801aa1e 	bne	r21,zero,800a338 <___vfiprintf_internal_r+0xc00>
 8009c90:	d8c12117 	ldw	r3,1156(sp)
 8009c94:	1d2dc83a 	sub	r22,r3,r20
 8009c98:	0581a70e 	bge	zero,r22,800a338 <___vfiprintf_internal_r+0xc00>
 8009c9c:	07000404 	movi	fp,16
 8009ca0:	d8c11c17 	ldw	r3,1136(sp)
 8009ca4:	e583780e 	bge	fp,r22,800aa88 <___vfiprintf_internal_r+0x1350>
 8009ca8:	01420074 	movhi	r5,2049
 8009cac:	29471204 	addi	r5,r5,7240
 8009cb0:	dc412615 	stw	r17,1176(sp)
 8009cb4:	d9011b17 	ldw	r4,1132(sp)
 8009cb8:	b023883a 	mov	r17,r22
 8009cbc:	d9412515 	stw	r5,1172(sp)
 8009cc0:	030001c4 	movi	r12,7
 8009cc4:	d9c12915 	stw	r7,1188(sp)
 8009cc8:	da812a15 	stw	r10,1192(sp)
 8009ccc:	482d883a 	mov	r22,r9
 8009cd0:	00000506 	br	8009ce8 <___vfiprintf_internal_r+0x5b0>
 8009cd4:	21400084 	addi	r5,r4,2
 8009cd8:	42000204 	addi	r8,r8,8
 8009cdc:	1009883a 	mov	r4,r2
 8009ce0:	8c7ffc04 	addi	r17,r17,-16
 8009ce4:	e4400d0e 	bge	fp,r17,8009d1c <___vfiprintf_internal_r+0x5e4>
 8009ce8:	18c00404 	addi	r3,r3,16
 8009cec:	20800044 	addi	r2,r4,1
 8009cf0:	44c00015 	stw	r19,0(r8)
 8009cf4:	47000115 	stw	fp,4(r8)
 8009cf8:	d8c11c15 	stw	r3,1136(sp)
 8009cfc:	d8811b15 	stw	r2,1132(sp)
 8009d00:	60bff40e 	bge	r12,r2,8009cd4 <__alt_data_end+0xf8009cd4>
 8009d04:	1801801e 	bne	r3,zero,800a308 <___vfiprintf_internal_r+0xbd0>
 8009d08:	8c7ffc04 	addi	r17,r17,-16
 8009d0c:	0009883a 	mov	r4,zero
 8009d10:	01400044 	movi	r5,1
 8009d14:	d811883a 	mov	r8,sp
 8009d18:	e47ff316 	blt	fp,r17,8009ce8 <__alt_data_end+0xf8009ce8>
 8009d1c:	b013883a 	mov	r9,r22
 8009d20:	d9c12917 	ldw	r7,1188(sp)
 8009d24:	882d883a 	mov	r22,r17
 8009d28:	da812a17 	ldw	r10,1192(sp)
 8009d2c:	dc412617 	ldw	r17,1176(sp)
 8009d30:	d8812517 	ldw	r2,1172(sp)
 8009d34:	b0c7883a 	add	r3,r22,r3
 8009d38:	45800115 	stw	r22,4(r8)
 8009d3c:	40800015 	stw	r2,0(r8)
 8009d40:	d8c11c15 	stw	r3,1136(sp)
 8009d44:	d9411b15 	stw	r5,1132(sp)
 8009d48:	008001c4 	movi	r2,7
 8009d4c:	11426a16 	blt	r2,r5,800a6f8 <___vfiprintf_internal_r+0xfc0>
 8009d50:	d9011d87 	ldb	r4,1142(sp)
 8009d54:	42000204 	addi	r8,r8,8
 8009d58:	28800044 	addi	r2,r5,1
 8009d5c:	20017b1e 	bne	r4,zero,800a34c <___vfiprintf_internal_r+0xc14>
 8009d60:	50000c26 	beq	r10,zero,8009d94 <___vfiprintf_internal_r+0x65c>
 8009d64:	d9011d04 	addi	r4,sp,1140
 8009d68:	18c00084 	addi	r3,r3,2
 8009d6c:	41000015 	stw	r4,0(r8)
 8009d70:	01000084 	movi	r4,2
 8009d74:	41000115 	stw	r4,4(r8)
 8009d78:	d8c11c15 	stw	r3,1136(sp)
 8009d7c:	d8811b15 	stw	r2,1132(sp)
 8009d80:	010001c4 	movi	r4,7
 8009d84:	20821716 	blt	r4,r2,800a5e4 <___vfiprintf_internal_r+0xeac>
 8009d88:	100b883a 	mov	r5,r2
 8009d8c:	42000204 	addi	r8,r8,8
 8009d90:	10800044 	addi	r2,r2,1
 8009d94:	01002004 	movi	r4,128
 8009d98:	a901d126 	beq	r21,r4,800a4e0 <___vfiprintf_internal_r+0xda8>
 8009d9c:	91e5c83a 	sub	r18,r18,r7
 8009da0:	0480290e 	bge	zero,r18,8009e48 <___vfiprintf_internal_r+0x710>
 8009da4:	05800404 	movi	r22,16
 8009da8:	05420074 	movhi	r21,2049
 8009dac:	ad470e04 	addi	r21,r21,7224
 8009db0:	b4801c0e 	bge	r22,r18,8009e24 <___vfiprintf_internal_r+0x6ec>
 8009db4:	dc412515 	stw	r17,1172(sp)
 8009db8:	070001c4 	movi	fp,7
 8009dbc:	9023883a 	mov	r17,r18
 8009dc0:	d9c12615 	stw	r7,1176(sp)
 8009dc4:	4825883a 	mov	r18,r9
 8009dc8:	00000506 	br	8009de0 <___vfiprintf_internal_r+0x6a8>
 8009dcc:	28800084 	addi	r2,r5,2
 8009dd0:	42000204 	addi	r8,r8,8
 8009dd4:	200b883a 	mov	r5,r4
 8009dd8:	8c7ffc04 	addi	r17,r17,-16
 8009ddc:	b4400d0e 	bge	r22,r17,8009e14 <___vfiprintf_internal_r+0x6dc>
 8009de0:	18c00404 	addi	r3,r3,16
 8009de4:	29000044 	addi	r4,r5,1
 8009de8:	44000015 	stw	r16,0(r8)
 8009dec:	45800115 	stw	r22,4(r8)
 8009df0:	d8c11c15 	stw	r3,1136(sp)
 8009df4:	d9011b15 	stw	r4,1132(sp)
 8009df8:	e13ff40e 	bge	fp,r4,8009dcc <__alt_data_end+0xf8009dcc>
 8009dfc:	1801601e 	bne	r3,zero,800a380 <___vfiprintf_internal_r+0xc48>
 8009e00:	8c7ffc04 	addi	r17,r17,-16
 8009e04:	000b883a 	mov	r5,zero
 8009e08:	00800044 	movi	r2,1
 8009e0c:	d811883a 	mov	r8,sp
 8009e10:	b47ff316 	blt	r22,r17,8009de0 <__alt_data_end+0xf8009de0>
 8009e14:	9013883a 	mov	r9,r18
 8009e18:	d9c12617 	ldw	r7,1176(sp)
 8009e1c:	8825883a 	mov	r18,r17
 8009e20:	dc412517 	ldw	r17,1172(sp)
 8009e24:	1c87883a 	add	r3,r3,r18
 8009e28:	45400015 	stw	r21,0(r8)
 8009e2c:	44800115 	stw	r18,4(r8)
 8009e30:	d8c11c15 	stw	r3,1136(sp)
 8009e34:	d8811b15 	stw	r2,1132(sp)
 8009e38:	010001c4 	movi	r4,7
 8009e3c:	20819e16 	blt	r4,r2,800a4b8 <___vfiprintf_internal_r+0xd80>
 8009e40:	42000204 	addi	r8,r8,8
 8009e44:	10800044 	addi	r2,r2,1
 8009e48:	38c7883a 	add	r3,r7,r3
 8009e4c:	45c00015 	stw	r23,0(r8)
 8009e50:	41c00115 	stw	r7,4(r8)
 8009e54:	d8c11c15 	stw	r3,1136(sp)
 8009e58:	d8811b15 	stw	r2,1132(sp)
 8009e5c:	010001c4 	movi	r4,7
 8009e60:	20819d0e 	bge	r4,r2,800a4d8 <___vfiprintf_internal_r+0xda0>
 8009e64:	1802291e 	bne	r3,zero,800a70c <___vfiprintf_internal_r+0xfd4>
 8009e68:	d8011b15 	stw	zero,1132(sp)
 8009e6c:	d811883a 	mov	r8,sp
 8009e70:	8c40010c 	andi	r17,r17,4
 8009e74:	88017526 	beq	r17,zero,800a44c <___vfiprintf_internal_r+0xd14>
 8009e78:	d9412117 	ldw	r5,1156(sp)
 8009e7c:	2d23c83a 	sub	r17,r5,r20
 8009e80:	0441720e 	bge	zero,r17,800a44c <___vfiprintf_internal_r+0xd14>
 8009e84:	04800404 	movi	r18,16
 8009e88:	9443170e 	bge	r18,r17,800aae8 <___vfiprintf_internal_r+0x13b0>
 8009e8c:	01420074 	movhi	r5,2049
 8009e90:	29471204 	addi	r5,r5,7240
 8009e94:	d9011b17 	ldw	r4,1132(sp)
 8009e98:	d9412515 	stw	r5,1172(sp)
 8009e9c:	058001c4 	movi	r22,7
 8009ea0:	dd412217 	ldw	r21,1160(sp)
 8009ea4:	ddc12017 	ldw	r23,1152(sp)
 8009ea8:	4839883a 	mov	fp,r9
 8009eac:	00000506 	br	8009ec4 <___vfiprintf_internal_r+0x78c>
 8009eb0:	21400084 	addi	r5,r4,2
 8009eb4:	42000204 	addi	r8,r8,8
 8009eb8:	1009883a 	mov	r4,r2
 8009ebc:	8c7ffc04 	addi	r17,r17,-16
 8009ec0:	94400d0e 	bge	r18,r17,8009ef8 <___vfiprintf_internal_r+0x7c0>
 8009ec4:	18c00404 	addi	r3,r3,16
 8009ec8:	20800044 	addi	r2,r4,1
 8009ecc:	44c00015 	stw	r19,0(r8)
 8009ed0:	44800115 	stw	r18,4(r8)
 8009ed4:	d8c11c15 	stw	r3,1136(sp)
 8009ed8:	d8811b15 	stw	r2,1132(sp)
 8009edc:	b0bff40e 	bge	r22,r2,8009eb0 <__alt_data_end+0xf8009eb0>
 8009ee0:	18016b1e 	bne	r3,zero,800a490 <___vfiprintf_internal_r+0xd58>
 8009ee4:	8c7ffc04 	addi	r17,r17,-16
 8009ee8:	0009883a 	mov	r4,zero
 8009eec:	01400044 	movi	r5,1
 8009ef0:	d811883a 	mov	r8,sp
 8009ef4:	947ff316 	blt	r18,r17,8009ec4 <__alt_data_end+0xf8009ec4>
 8009ef8:	e013883a 	mov	r9,fp
 8009efc:	d8812517 	ldw	r2,1172(sp)
 8009f00:	1c47883a 	add	r3,r3,r17
 8009f04:	44400115 	stw	r17,4(r8)
 8009f08:	40800015 	stw	r2,0(r8)
 8009f0c:	d8c11c15 	stw	r3,1136(sp)
 8009f10:	d9411b15 	stw	r5,1132(sp)
 8009f14:	008001c4 	movi	r2,7
 8009f18:	11414c0e 	bge	r2,r5,800a44c <___vfiprintf_internal_r+0xd14>
 8009f1c:	1801431e 	bne	r3,zero,800a42c <___vfiprintf_internal_r+0xcf4>
 8009f20:	d8c12117 	ldw	r3,1156(sp)
 8009f24:	a0c28e16 	blt	r20,r3,800a960 <___vfiprintf_internal_r+0x1228>
 8009f28:	d9012417 	ldw	r4,1168(sp)
 8009f2c:	2509883a 	add	r4,r4,r20
 8009f30:	d9012415 	stw	r4,1168(sp)
 8009f34:	00015306 	br	800a484 <___vfiprintf_internal_r+0xd4c>
 8009f38:	8c400414 	ori	r17,r17,16
 8009f3c:	8880080c 	andi	r2,r17,32
 8009f40:	b811883a 	mov	r8,r23
 8009f44:	3025883a 	mov	r18,r6
 8009f48:	10005f26 	beq	r2,zero,800a0c8 <___vfiprintf_internal_r+0x990>
 8009f4c:	d8812317 	ldw	r2,1164(sp)
 8009f50:	d8c12317 	ldw	r3,1164(sp)
 8009f54:	15000017 	ldw	r20,0(r2)
 8009f58:	15400117 	ldw	r21,4(r2)
 8009f5c:	18c00204 	addi	r3,r3,8
 8009f60:	0005883a 	mov	r2,zero
 8009f64:	d8c12315 	stw	r3,1164(sp)
 8009f68:	a548b03a 	or	r4,r20,r21
 8009f6c:	d8011d85 	stb	zero,1142(sp)
 8009f70:	900f883a 	mov	r7,r18
 8009f74:	002d883a 	mov	r22,zero
 8009f78:	003f2b06 	br	8009c28 <__alt_data_end+0xf8009c28>
 8009f7c:	8c400414 	ori	r17,r17,16
 8009f80:	8880080c 	andi	r2,r17,32
 8009f84:	b811883a 	mov	r8,r23
 8009f88:	3025883a 	mov	r18,r6
 8009f8c:	1000a826 	beq	r2,zero,800a230 <___vfiprintf_internal_r+0xaf8>
 8009f90:	d8812317 	ldw	r2,1164(sp)
 8009f94:	d8c12317 	ldw	r3,1164(sp)
 8009f98:	15000017 	ldw	r20,0(r2)
 8009f9c:	15400117 	ldw	r21,4(r2)
 8009fa0:	18c00204 	addi	r3,r3,8
 8009fa4:	00800044 	movi	r2,1
 8009fa8:	d8c12315 	stw	r3,1164(sp)
 8009fac:	a548b03a 	or	r4,r20,r21
 8009fb0:	003fee06 	br	8009f6c <__alt_data_end+0xf8009f6c>
 8009fb4:	01420074 	movhi	r5,2049
 8009fb8:	2946a804 	addi	r5,r5,6816
 8009fbc:	dd811d85 	stb	r22,1142(sp)
 8009fc0:	d9412715 	stw	r5,1180(sp)
 8009fc4:	8880080c 	andi	r2,r17,32
 8009fc8:	b811883a 	mov	r8,r23
 8009fcc:	3025883a 	mov	r18,r6
 8009fd0:	1000a926 	beq	r2,zero,800a278 <___vfiprintf_internal_r+0xb40>
 8009fd4:	d9412317 	ldw	r5,1164(sp)
 8009fd8:	2d000017 	ldw	r20,0(r5)
 8009fdc:	2d400117 	ldw	r21,4(r5)
 8009fe0:	29400204 	addi	r5,r5,8
 8009fe4:	d9412315 	stw	r5,1164(sp)
 8009fe8:	8880004c 	andi	r2,r17,1
 8009fec:	1001d126 	beq	r2,zero,800a734 <___vfiprintf_internal_r+0xffc>
 8009ff0:	a548b03a 	or	r4,r20,r21
 8009ff4:	20021626 	beq	r4,zero,800a850 <___vfiprintf_internal_r+0x1118>
 8009ff8:	00800c04 	movi	r2,48
 8009ffc:	d8811d05 	stb	r2,1140(sp)
 800a000:	d8c11d45 	stb	r3,1141(sp)
 800a004:	8c400094 	ori	r17,r17,2
 800a008:	00800084 	movi	r2,2
 800a00c:	003fd706 	br	8009f6c <__alt_data_end+0xf8009f6c>
 800a010:	d9412317 	ldw	r5,1164(sp)
 800a014:	05000044 	movi	r20,1
 800a018:	b811883a 	mov	r8,r23
 800a01c:	28800017 	ldw	r2,0(r5)
 800a020:	29400104 	addi	r5,r5,4
 800a024:	d8011d85 	stb	zero,1142(sp)
 800a028:	d8810005 	stb	r2,1024(sp)
 800a02c:	d9412315 	stw	r5,1164(sp)
 800a030:	a00f883a 	mov	r7,r20
 800a034:	ddc10004 	addi	r23,sp,1024
 800a038:	0025883a 	mov	r18,zero
 800a03c:	003f0f06 	br	8009c7c <__alt_data_end+0xf8009c7c>
 800a040:	b0803fcc 	andi	r2,r22,255
 800a044:	1080201c 	xori	r2,r2,128
 800a048:	10bfe004 	addi	r2,r2,-128
 800a04c:	10021f1e 	bne	r2,zero,800a8cc <___vfiprintf_internal_r+0x1194>
 800a050:	05800804 	movi	r22,32
 800a054:	48c00007 	ldb	r3,0(r9)
 800a058:	003e1706 	br	80098b8 <__alt_data_end+0xf80098b8>
 800a05c:	8c400054 	ori	r17,r17,1
 800a060:	48c00007 	ldb	r3,0(r9)
 800a064:	003e1406 	br	80098b8 <__alt_data_end+0xf80098b8>
 800a068:	48c00007 	ldb	r3,0(r9)
 800a06c:	01001b04 	movi	r4,108
 800a070:	4805883a 	mov	r2,r9
 800a074:	19026526 	beq	r3,r4,800aa0c <___vfiprintf_internal_r+0x12d4>
 800a078:	8c400414 	ori	r17,r17,16
 800a07c:	003e0e06 	br	80098b8 <__alt_data_end+0xf80098b8>
 800a080:	dd811d85 	stb	r22,1142(sp)
 800a084:	8880080c 	andi	r2,r17,32
 800a088:	b811883a 	mov	r8,r23
 800a08c:	10020426 	beq	r2,zero,800a8a0 <___vfiprintf_internal_r+0x1168>
 800a090:	d8c12317 	ldw	r3,1164(sp)
 800a094:	d9012417 	ldw	r4,1168(sp)
 800a098:	d9412317 	ldw	r5,1164(sp)
 800a09c:	18800017 	ldw	r2,0(r3)
 800a0a0:	2007d7fa 	srai	r3,r4,31
 800a0a4:	29400104 	addi	r5,r5,4
 800a0a8:	d9412315 	stw	r5,1164(sp)
 800a0ac:	11000015 	stw	r4,0(r2)
 800a0b0:	10c00115 	stw	r3,4(r2)
 800a0b4:	003dd706 	br	8009814 <__alt_data_end+0xf8009814>
 800a0b8:	8880080c 	andi	r2,r17,32
 800a0bc:	b811883a 	mov	r8,r23
 800a0c0:	3025883a 	mov	r18,r6
 800a0c4:	103fa11e 	bne	r2,zero,8009f4c <__alt_data_end+0xf8009f4c>
 800a0c8:	8880040c 	andi	r2,r17,16
 800a0cc:	1001ea26 	beq	r2,zero,800a878 <___vfiprintf_internal_r+0x1140>
 800a0d0:	d9012317 	ldw	r4,1164(sp)
 800a0d4:	002b883a 	mov	r21,zero
 800a0d8:	0005883a 	mov	r2,zero
 800a0dc:	25000017 	ldw	r20,0(r4)
 800a0e0:	21000104 	addi	r4,r4,4
 800a0e4:	d9012315 	stw	r4,1164(sp)
 800a0e8:	a009883a 	mov	r4,r20
 800a0ec:	003f9f06 	br	8009f6c <__alt_data_end+0xf8009f6c>
 800a0f0:	d8812317 	ldw	r2,1164(sp)
 800a0f4:	d8c12317 	ldw	r3,1164(sp)
 800a0f8:	10800017 	ldw	r2,0(r2)
 800a0fc:	d8812115 	stw	r2,1156(sp)
 800a100:	d9012117 	ldw	r4,1156(sp)
 800a104:	18800104 	addi	r2,r3,4
 800a108:	203e9a16 	blt	r4,zero,8009b74 <__alt_data_end+0xf8009b74>
 800a10c:	d8812315 	stw	r2,1164(sp)
 800a110:	48c00007 	ldb	r3,0(r9)
 800a114:	003de806 	br	80098b8 <__alt_data_end+0xf80098b8>
 800a118:	05800ac4 	movi	r22,43
 800a11c:	48c00007 	ldb	r3,0(r9)
 800a120:	003de506 	br	80098b8 <__alt_data_end+0xf80098b8>
 800a124:	48c00007 	ldb	r3,0(r9)
 800a128:	01000a84 	movi	r4,42
 800a12c:	48800044 	addi	r2,r9,1
 800a130:	19028326 	beq	r3,r4,800ab40 <___vfiprintf_internal_r+0x1408>
 800a134:	1f3ff404 	addi	fp,r3,-48
 800a138:	af027a36 	bltu	r21,fp,800ab24 <___vfiprintf_internal_r+0x13ec>
 800a13c:	1025883a 	mov	r18,r2
 800a140:	0009883a 	mov	r4,zero
 800a144:	00000106 	br	800a14c <___vfiprintf_internal_r+0xa14>
 800a148:	4825883a 	mov	r18,r9
 800a14c:	01400284 	movi	r5,10
 800a150:	800c3600 	call	800c360 <__mulsi3>
 800a154:	90c00007 	ldb	r3,0(r18)
 800a158:	e089883a 	add	r4,fp,r2
 800a15c:	92400044 	addi	r9,r18,1
 800a160:	1f3ff404 	addi	fp,r3,-48
 800a164:	af3ff82e 	bgeu	r21,fp,800a148 <__alt_data_end+0xf800a148>
 800a168:	2025883a 	mov	r18,r4
 800a16c:	20022416 	blt	r4,zero,800aa00 <___vfiprintf_internal_r+0x12c8>
 800a170:	900d883a 	mov	r6,r18
 800a174:	003dd106 	br	80098bc <__alt_data_end+0xf80098bc>
 800a178:	8c401014 	ori	r17,r17,64
 800a17c:	48c00007 	ldb	r3,0(r9)
 800a180:	003dcd06 	br	80098b8 <__alt_data_end+0xf80098b8>
 800a184:	dd811d85 	stb	r22,1142(sp)
 800a188:	8880080c 	andi	r2,r17,32
 800a18c:	b811883a 	mov	r8,r23
 800a190:	3025883a 	mov	r18,r6
 800a194:	103e991e 	bne	r2,zero,8009bfc <__alt_data_end+0xf8009bfc>
 800a198:	8880040c 	andi	r2,r17,16
 800a19c:	1001d726 	beq	r2,zero,800a8fc <___vfiprintf_internal_r+0x11c4>
 800a1a0:	d9012317 	ldw	r4,1164(sp)
 800a1a4:	25000017 	ldw	r20,0(r4)
 800a1a8:	21000104 	addi	r4,r4,4
 800a1ac:	d9012315 	stw	r4,1164(sp)
 800a1b0:	a02bd7fa 	srai	r21,r20,31
 800a1b4:	a805883a 	mov	r2,r21
 800a1b8:	003e9606 	br	8009c14 <__alt_data_end+0xf8009c14>
 800a1bc:	8c400814 	ori	r17,r17,32
 800a1c0:	48c00007 	ldb	r3,0(r9)
 800a1c4:	003dbc06 	br	80098b8 <__alt_data_end+0xf80098b8>
 800a1c8:	d9412317 	ldw	r5,1164(sp)
 800a1cc:	b811883a 	mov	r8,r23
 800a1d0:	d8011d85 	stb	zero,1142(sp)
 800a1d4:	2dc00017 	ldw	r23,0(r5)
 800a1d8:	3025883a 	mov	r18,r6
 800a1dc:	2d400104 	addi	r21,r5,4
 800a1e0:	b8022f26 	beq	r23,zero,800aaa0 <___vfiprintf_internal_r+0x1368>
 800a1e4:	b809883a 	mov	r4,r23
 800a1e8:	30020f16 	blt	r6,zero,800aa28 <___vfiprintf_internal_r+0x12f0>
 800a1ec:	000b883a 	mov	r5,zero
 800a1f0:	da012b15 	stw	r8,1196(sp)
 800a1f4:	da412d15 	stw	r9,1204(sp)
 800a1f8:	80079a80 	call	80079a8 <memchr>
 800a1fc:	da012b17 	ldw	r8,1196(sp)
 800a200:	da412d17 	ldw	r9,1204(sp)
 800a204:	10024226 	beq	r2,zero,800ab10 <___vfiprintf_internal_r+0x13d8>
 800a208:	15cfc83a 	sub	r7,r2,r23
 800a20c:	91c1d616 	blt	r18,r7,800a968 <___vfiprintf_internal_r+0x1230>
 800a210:	dd811d83 	ldbu	r22,1142(sp)
 800a214:	dd412315 	stw	r21,1164(sp)
 800a218:	0025883a 	mov	r18,zero
 800a21c:	003e8f06 	br	8009c5c <__alt_data_end+0xf8009c5c>
 800a220:	8880080c 	andi	r2,r17,32
 800a224:	b811883a 	mov	r8,r23
 800a228:	3025883a 	mov	r18,r6
 800a22c:	103f581e 	bne	r2,zero,8009f90 <__alt_data_end+0xf8009f90>
 800a230:	8880040c 	andi	r2,r17,16
 800a234:	1001a726 	beq	r2,zero,800a8d4 <___vfiprintf_internal_r+0x119c>
 800a238:	d9012317 	ldw	r4,1164(sp)
 800a23c:	002b883a 	mov	r21,zero
 800a240:	00800044 	movi	r2,1
 800a244:	25000017 	ldw	r20,0(r4)
 800a248:	21000104 	addi	r4,r4,4
 800a24c:	d9012315 	stw	r4,1164(sp)
 800a250:	a009883a 	mov	r4,r20
 800a254:	003f4506 	br	8009f6c <__alt_data_end+0xf8009f6c>
 800a258:	01020074 	movhi	r4,2049
 800a25c:	2106ad04 	addi	r4,r4,6836
 800a260:	dd811d85 	stb	r22,1142(sp)
 800a264:	d9012715 	stw	r4,1180(sp)
 800a268:	8880080c 	andi	r2,r17,32
 800a26c:	b811883a 	mov	r8,r23
 800a270:	3025883a 	mov	r18,r6
 800a274:	103f571e 	bne	r2,zero,8009fd4 <__alt_data_end+0xf8009fd4>
 800a278:	8880040c 	andi	r2,r17,16
 800a27c:	10017626 	beq	r2,zero,800a858 <___vfiprintf_internal_r+0x1120>
 800a280:	d8812317 	ldw	r2,1164(sp)
 800a284:	002b883a 	mov	r21,zero
 800a288:	15000017 	ldw	r20,0(r2)
 800a28c:	10800104 	addi	r2,r2,4
 800a290:	d8812315 	stw	r2,1164(sp)
 800a294:	003f5406 	br	8009fe8 <__alt_data_end+0xf8009fe8>
 800a298:	d8c12317 	ldw	r3,1164(sp)
 800a29c:	00800c04 	movi	r2,48
 800a2a0:	01020074 	movhi	r4,2049
 800a2a4:	2106ad04 	addi	r4,r4,6836
 800a2a8:	1d000017 	ldw	r20,0(r3)
 800a2ac:	d8811d05 	stb	r2,1140(sp)
 800a2b0:	18c00104 	addi	r3,r3,4
 800a2b4:	00801e04 	movi	r2,120
 800a2b8:	d8811d45 	stb	r2,1141(sp)
 800a2bc:	d9012715 	stw	r4,1180(sp)
 800a2c0:	b811883a 	mov	r8,r23
 800a2c4:	3025883a 	mov	r18,r6
 800a2c8:	002b883a 	mov	r21,zero
 800a2cc:	8c400094 	ori	r17,r17,2
 800a2d0:	d8c12315 	stw	r3,1164(sp)
 800a2d4:	00800084 	movi	r2,2
 800a2d8:	a009883a 	mov	r4,r20
 800a2dc:	003f2306 	br	8009f6c <__alt_data_end+0xf8009f6c>
 800a2e0:	dd811d85 	stb	r22,1142(sp)
 800a2e4:	b811883a 	mov	r8,r23
 800a2e8:	18004426 	beq	r3,zero,800a3fc <___vfiprintf_internal_r+0xcc4>
 800a2ec:	05000044 	movi	r20,1
 800a2f0:	d8c10005 	stb	r3,1024(sp)
 800a2f4:	d8011d85 	stb	zero,1142(sp)
 800a2f8:	a00f883a 	mov	r7,r20
 800a2fc:	ddc10004 	addi	r23,sp,1024
 800a300:	0025883a 	mov	r18,zero
 800a304:	003e5d06 	br	8009c7c <__alt_data_end+0xf8009c7c>
 800a308:	d9012217 	ldw	r4,1160(sp)
 800a30c:	d9412017 	ldw	r5,1152(sp)
 800a310:	d9811a04 	addi	r6,sp,1128
 800a314:	db012b15 	stw	r12,1196(sp)
 800a318:	80096240 	call	8009624 <__sprint_r.part.0>
 800a31c:	db012b17 	ldw	r12,1196(sp)
 800a320:	10003c1e 	bne	r2,zero,800a414 <___vfiprintf_internal_r+0xcdc>
 800a324:	d9011b17 	ldw	r4,1132(sp)
 800a328:	d8c11c17 	ldw	r3,1136(sp)
 800a32c:	d811883a 	mov	r8,sp
 800a330:	21400044 	addi	r5,r4,1
 800a334:	003e6a06 	br	8009ce0 <__alt_data_end+0xf8009ce0>
 800a338:	d9411b17 	ldw	r5,1132(sp)
 800a33c:	d8c11c17 	ldw	r3,1136(sp)
 800a340:	28800044 	addi	r2,r5,1
 800a344:	d9011d87 	ldb	r4,1142(sp)
 800a348:	203e8526 	beq	r4,zero,8009d60 <__alt_data_end+0xf8009d60>
 800a34c:	01000044 	movi	r4,1
 800a350:	d9411d84 	addi	r5,sp,1142
 800a354:	1907883a 	add	r3,r3,r4
 800a358:	41400015 	stw	r5,0(r8)
 800a35c:	41000115 	stw	r4,4(r8)
 800a360:	d8c11c15 	stw	r3,1136(sp)
 800a364:	d8811b15 	stw	r2,1132(sp)
 800a368:	014001c4 	movi	r5,7
 800a36c:	28809816 	blt	r5,r2,800a5d0 <___vfiprintf_internal_r+0xe98>
 800a370:	100b883a 	mov	r5,r2
 800a374:	42000204 	addi	r8,r8,8
 800a378:	1105883a 	add	r2,r2,r4
 800a37c:	003e7806 	br	8009d60 <__alt_data_end+0xf8009d60>
 800a380:	d9012217 	ldw	r4,1160(sp)
 800a384:	d9412017 	ldw	r5,1152(sp)
 800a388:	d9811a04 	addi	r6,sp,1128
 800a38c:	80096240 	call	8009624 <__sprint_r.part.0>
 800a390:	1000201e 	bne	r2,zero,800a414 <___vfiprintf_internal_r+0xcdc>
 800a394:	d9411b17 	ldw	r5,1132(sp)
 800a398:	d8c11c17 	ldw	r3,1136(sp)
 800a39c:	d811883a 	mov	r8,sp
 800a3a0:	28800044 	addi	r2,r5,1
 800a3a4:	003e8c06 	br	8009dd8 <__alt_data_end+0xf8009dd8>
 800a3a8:	00c00044 	movi	r3,1
 800a3ac:	10c0ab26 	beq	r2,r3,800a65c <___vfiprintf_internal_r+0xf24>
 800a3b0:	00c00084 	movi	r3,2
 800a3b4:	10c0901e 	bne	r2,r3,800a5f8 <___vfiprintf_internal_r+0xec0>
 800a3b8:	d9412717 	ldw	r5,1180(sp)
 800a3bc:	d88109c4 	addi	r2,sp,1063
 800a3c0:	a0c003cc 	andi	r3,r20,15
 800a3c4:	a808973a 	slli	r4,r21,28
 800a3c8:	28c7883a 	add	r3,r5,r3
 800a3cc:	a028d13a 	srli	r20,r20,4
 800a3d0:	18c00003 	ldbu	r3,0(r3)
 800a3d4:	a82ad13a 	srli	r21,r21,4
 800a3d8:	2528b03a 	or	r20,r4,r20
 800a3dc:	10c00005 	stb	r3,0(r2)
 800a3e0:	a546b03a 	or	r3,r20,r21
 800a3e4:	102f883a 	mov	r23,r2
 800a3e8:	10bfffc4 	addi	r2,r2,-1
 800a3ec:	183ff41e 	bne	r3,zero,800a3c0 <__alt_data_end+0xf800a3c0>
 800a3f0:	d8811f17 	ldw	r2,1148(sp)
 800a3f4:	15cfc83a 	sub	r7,r2,r23
 800a3f8:	003e1806 	br	8009c5c <__alt_data_end+0xf8009c5c>
 800a3fc:	d8811c17 	ldw	r2,1136(sp)
 800a400:	10000426 	beq	r2,zero,800a414 <___vfiprintf_internal_r+0xcdc>
 800a404:	d9012217 	ldw	r4,1160(sp)
 800a408:	d9412017 	ldw	r5,1152(sp)
 800a40c:	d9811a04 	addi	r6,sp,1128
 800a410:	80096240 	call	8009624 <__sprint_r.part.0>
 800a414:	d8c12017 	ldw	r3,1152(sp)
 800a418:	1880030b 	ldhu	r2,12(r3)
 800a41c:	1080100c 	andi	r2,r2,64
 800a420:	103dc31e 	bne	r2,zero,8009b30 <__alt_data_end+0xf8009b30>
 800a424:	d8812417 	ldw	r2,1168(sp)
 800a428:	003dc206 	br	8009b34 <__alt_data_end+0xf8009b34>
 800a42c:	d9012217 	ldw	r4,1160(sp)
 800a430:	d9412017 	ldw	r5,1152(sp)
 800a434:	d9811a04 	addi	r6,sp,1128
 800a438:	da412d15 	stw	r9,1204(sp)
 800a43c:	80096240 	call	8009624 <__sprint_r.part.0>
 800a440:	da412d17 	ldw	r9,1204(sp)
 800a444:	103ff31e 	bne	r2,zero,800a414 <__alt_data_end+0xf800a414>
 800a448:	d8c11c17 	ldw	r3,1136(sp)
 800a44c:	d9412117 	ldw	r5,1156(sp)
 800a450:	a140010e 	bge	r20,r5,800a458 <___vfiprintf_internal_r+0xd20>
 800a454:	2829883a 	mov	r20,r5
 800a458:	d8812417 	ldw	r2,1168(sp)
 800a45c:	1505883a 	add	r2,r2,r20
 800a460:	d8812415 	stw	r2,1168(sp)
 800a464:	18000726 	beq	r3,zero,800a484 <___vfiprintf_internal_r+0xd4c>
 800a468:	d9012217 	ldw	r4,1160(sp)
 800a46c:	d9412017 	ldw	r5,1152(sp)
 800a470:	d9811a04 	addi	r6,sp,1128
 800a474:	da412d15 	stw	r9,1204(sp)
 800a478:	80096240 	call	8009624 <__sprint_r.part.0>
 800a47c:	da412d17 	ldw	r9,1204(sp)
 800a480:	103fe41e 	bne	r2,zero,800a414 <__alt_data_end+0xf800a414>
 800a484:	d8011b15 	stw	zero,1132(sp)
 800a488:	d811883a 	mov	r8,sp
 800a48c:	003ce106 	br	8009814 <__alt_data_end+0xf8009814>
 800a490:	a809883a 	mov	r4,r21
 800a494:	b80b883a 	mov	r5,r23
 800a498:	d9811a04 	addi	r6,sp,1128
 800a49c:	80096240 	call	8009624 <__sprint_r.part.0>
 800a4a0:	103fdc1e 	bne	r2,zero,800a414 <__alt_data_end+0xf800a414>
 800a4a4:	d9011b17 	ldw	r4,1132(sp)
 800a4a8:	d8c11c17 	ldw	r3,1136(sp)
 800a4ac:	d811883a 	mov	r8,sp
 800a4b0:	21400044 	addi	r5,r4,1
 800a4b4:	003e8106 	br	8009ebc <__alt_data_end+0xf8009ebc>
 800a4b8:	1800cb1e 	bne	r3,zero,800a7e8 <___vfiprintf_internal_r+0x10b0>
 800a4bc:	00800044 	movi	r2,1
 800a4c0:	ddc00015 	stw	r23,0(sp)
 800a4c4:	d9c00115 	stw	r7,4(sp)
 800a4c8:	d9c11c15 	stw	r7,1136(sp)
 800a4cc:	d8811b15 	stw	r2,1132(sp)
 800a4d0:	3807883a 	mov	r3,r7
 800a4d4:	d811883a 	mov	r8,sp
 800a4d8:	42000204 	addi	r8,r8,8
 800a4dc:	003e6406 	br	8009e70 <__alt_data_end+0xf8009e70>
 800a4e0:	d9012117 	ldw	r4,1156(sp)
 800a4e4:	252dc83a 	sub	r22,r4,r20
 800a4e8:	05be2c0e 	bge	zero,r22,8009d9c <__alt_data_end+0xf8009d9c>
 800a4ec:	07000404 	movi	fp,16
 800a4f0:	e581830e 	bge	fp,r22,800ab00 <___vfiprintf_internal_r+0x13c8>
 800a4f4:	05420074 	movhi	r21,2049
 800a4f8:	ad470e04 	addi	r21,r21,7224
 800a4fc:	dc412515 	stw	r17,1172(sp)
 800a500:	028001c4 	movi	r10,7
 800a504:	b023883a 	mov	r17,r22
 800a508:	d9c12615 	stw	r7,1176(sp)
 800a50c:	a82d883a 	mov	r22,r21
 800a510:	482b883a 	mov	r21,r9
 800a514:	00000506 	br	800a52c <___vfiprintf_internal_r+0xdf4>
 800a518:	29000084 	addi	r4,r5,2
 800a51c:	42000204 	addi	r8,r8,8
 800a520:	100b883a 	mov	r5,r2
 800a524:	8c7ffc04 	addi	r17,r17,-16
 800a528:	e4400d0e 	bge	fp,r17,800a560 <___vfiprintf_internal_r+0xe28>
 800a52c:	18c00404 	addi	r3,r3,16
 800a530:	28800044 	addi	r2,r5,1
 800a534:	44000015 	stw	r16,0(r8)
 800a538:	47000115 	stw	fp,4(r8)
 800a53c:	d8c11c15 	stw	r3,1136(sp)
 800a540:	d8811b15 	stw	r2,1132(sp)
 800a544:	50bff40e 	bge	r10,r2,800a518 <__alt_data_end+0xf800a518>
 800a548:	1800151e 	bne	r3,zero,800a5a0 <___vfiprintf_internal_r+0xe68>
 800a54c:	8c7ffc04 	addi	r17,r17,-16
 800a550:	000b883a 	mov	r5,zero
 800a554:	01000044 	movi	r4,1
 800a558:	d811883a 	mov	r8,sp
 800a55c:	e47ff316 	blt	fp,r17,800a52c <__alt_data_end+0xf800a52c>
 800a560:	a813883a 	mov	r9,r21
 800a564:	d9c12617 	ldw	r7,1176(sp)
 800a568:	b02b883a 	mov	r21,r22
 800a56c:	882d883a 	mov	r22,r17
 800a570:	dc412517 	ldw	r17,1172(sp)
 800a574:	1d87883a 	add	r3,r3,r22
 800a578:	45400015 	stw	r21,0(r8)
 800a57c:	45800115 	stw	r22,4(r8)
 800a580:	d8c11c15 	stw	r3,1136(sp)
 800a584:	d9011b15 	stw	r4,1132(sp)
 800a588:	008001c4 	movi	r2,7
 800a58c:	11009116 	blt	r2,r4,800a7d4 <___vfiprintf_internal_r+0x109c>
 800a590:	42000204 	addi	r8,r8,8
 800a594:	20800044 	addi	r2,r4,1
 800a598:	200b883a 	mov	r5,r4
 800a59c:	003dff06 	br	8009d9c <__alt_data_end+0xf8009d9c>
 800a5a0:	d9012217 	ldw	r4,1160(sp)
 800a5a4:	d9412017 	ldw	r5,1152(sp)
 800a5a8:	d9811a04 	addi	r6,sp,1128
 800a5ac:	da812c15 	stw	r10,1200(sp)
 800a5b0:	80096240 	call	8009624 <__sprint_r.part.0>
 800a5b4:	da812c17 	ldw	r10,1200(sp)
 800a5b8:	103f961e 	bne	r2,zero,800a414 <__alt_data_end+0xf800a414>
 800a5bc:	d9411b17 	ldw	r5,1132(sp)
 800a5c0:	d8c11c17 	ldw	r3,1136(sp)
 800a5c4:	d811883a 	mov	r8,sp
 800a5c8:	29000044 	addi	r4,r5,1
 800a5cc:	003fd506 	br	800a524 <__alt_data_end+0xf800a524>
 800a5d0:	1800701e 	bne	r3,zero,800a794 <___vfiprintf_internal_r+0x105c>
 800a5d4:	000b883a 	mov	r5,zero
 800a5d8:	2005883a 	mov	r2,r4
 800a5dc:	d811883a 	mov	r8,sp
 800a5e0:	003ddf06 	br	8009d60 <__alt_data_end+0xf8009d60>
 800a5e4:	18005d1e 	bne	r3,zero,800a75c <___vfiprintf_internal_r+0x1024>
 800a5e8:	000b883a 	mov	r5,zero
 800a5ec:	00800044 	movi	r2,1
 800a5f0:	d811883a 	mov	r8,sp
 800a5f4:	003de706 	br	8009d94 <__alt_data_end+0xf8009d94>
 800a5f8:	d8c109c4 	addi	r3,sp,1063
 800a5fc:	a008d0fa 	srli	r4,r20,3
 800a600:	a80a977a 	slli	r5,r21,29
 800a604:	a82ad0fa 	srli	r21,r21,3
 800a608:	a50001cc 	andi	r20,r20,7
 800a60c:	a0800c04 	addi	r2,r20,48
 800a610:	2928b03a 	or	r20,r5,r4
 800a614:	18800005 	stb	r2,0(r3)
 800a618:	a548b03a 	or	r4,r20,r21
 800a61c:	182f883a 	mov	r23,r3
 800a620:	18ffffc4 	addi	r3,r3,-1
 800a624:	203ff51e 	bne	r4,zero,800a5fc <__alt_data_end+0xf800a5fc>
 800a628:	8900004c 	andi	r4,r17,1
 800a62c:	b80b883a 	mov	r5,r23
 800a630:	203f6f26 	beq	r4,zero,800a3f0 <__alt_data_end+0xf800a3f0>
 800a634:	10803fcc 	andi	r2,r2,255
 800a638:	1080201c 	xori	r2,r2,128
 800a63c:	10bfe004 	addi	r2,r2,-128
 800a640:	01000c04 	movi	r4,48
 800a644:	1100f526 	beq	r2,r4,800aa1c <___vfiprintf_internal_r+0x12e4>
 800a648:	293fffc5 	stb	r4,-1(r5)
 800a64c:	d9011f17 	ldw	r4,1148(sp)
 800a650:	182f883a 	mov	r23,r3
 800a654:	20cfc83a 	sub	r7,r4,r3
 800a658:	003d8006 	br	8009c5c <__alt_data_end+0xf8009c5c>
 800a65c:	a800021e 	bne	r21,zero,800a668 <___vfiprintf_internal_r+0xf30>
 800a660:	00800244 	movi	r2,9
 800a664:	15001d2e 	bgeu	r2,r20,800a6dc <___vfiprintf_internal_r+0xfa4>
 800a668:	dc412515 	stw	r17,1172(sp)
 800a66c:	d88109c4 	addi	r2,sp,1063
 800a670:	a823883a 	mov	r17,r21
 800a674:	4039883a 	mov	fp,r8
 800a678:	482b883a 	mov	r21,r9
 800a67c:	a009883a 	mov	r4,r20
 800a680:	880b883a 	mov	r5,r17
 800a684:	01800284 	movi	r6,10
 800a688:	000f883a 	mov	r7,zero
 800a68c:	102f883a 	mov	r23,r2
 800a690:	800bc180 	call	800bc18 <__umoddi3>
 800a694:	10800c04 	addi	r2,r2,48
 800a698:	a009883a 	mov	r4,r20
 800a69c:	880b883a 	mov	r5,r17
 800a6a0:	b8800005 	stb	r2,0(r23)
 800a6a4:	01800284 	movi	r6,10
 800a6a8:	000f883a 	mov	r7,zero
 800a6ac:	800b5c40 	call	800b5c4 <__udivdi3>
 800a6b0:	1823883a 	mov	r17,r3
 800a6b4:	10c6b03a 	or	r3,r2,r3
 800a6b8:	1029883a 	mov	r20,r2
 800a6bc:	b8bfffc4 	addi	r2,r23,-1
 800a6c0:	183fee1e 	bne	r3,zero,800a67c <__alt_data_end+0xf800a67c>
 800a6c4:	d9411f17 	ldw	r5,1148(sp)
 800a6c8:	e011883a 	mov	r8,fp
 800a6cc:	dc412517 	ldw	r17,1172(sp)
 800a6d0:	a813883a 	mov	r9,r21
 800a6d4:	2dcfc83a 	sub	r7,r5,r23
 800a6d8:	003d6006 	br	8009c5c <__alt_data_end+0xf8009c5c>
 800a6dc:	a5000c04 	addi	r20,r20,48
 800a6e0:	dd0109c5 	stb	r20,1063(sp)
 800a6e4:	d9c12817 	ldw	r7,1184(sp)
 800a6e8:	ddc109c4 	addi	r23,sp,1063
 800a6ec:	003d5b06 	br	8009c5c <__alt_data_end+0xf8009c5c>
 800a6f0:	ddc10a04 	addi	r23,sp,1064
 800a6f4:	003d5906 	br	8009c5c <__alt_data_end+0xf8009c5c>
 800a6f8:	1800891e 	bne	r3,zero,800a920 <___vfiprintf_internal_r+0x11e8>
 800a6fc:	000b883a 	mov	r5,zero
 800a700:	00800044 	movi	r2,1
 800a704:	d811883a 	mov	r8,sp
 800a708:	003f0e06 	br	800a344 <__alt_data_end+0xf800a344>
 800a70c:	d9012217 	ldw	r4,1160(sp)
 800a710:	d9412017 	ldw	r5,1152(sp)
 800a714:	d9811a04 	addi	r6,sp,1128
 800a718:	da412d15 	stw	r9,1204(sp)
 800a71c:	80096240 	call	8009624 <__sprint_r.part.0>
 800a720:	da412d17 	ldw	r9,1204(sp)
 800a724:	103f3b1e 	bne	r2,zero,800a414 <__alt_data_end+0xf800a414>
 800a728:	d8c11c17 	ldw	r3,1136(sp)
 800a72c:	d811883a 	mov	r8,sp
 800a730:	003dcf06 	br	8009e70 <__alt_data_end+0xf8009e70>
 800a734:	00800084 	movi	r2,2
 800a738:	a548b03a 	or	r4,r20,r21
 800a73c:	003e0b06 	br	8009f6c <__alt_data_end+0xf8009f6c>
 800a740:	d9012217 	ldw	r4,1160(sp)
 800a744:	d9412017 	ldw	r5,1152(sp)
 800a748:	d9811a04 	addi	r6,sp,1128
 800a74c:	80096240 	call	8009624 <__sprint_r.part.0>
 800a750:	103f301e 	bne	r2,zero,800a414 <__alt_data_end+0xf800a414>
 800a754:	d811883a 	mov	r8,sp
 800a758:	003cbb06 	br	8009a48 <__alt_data_end+0xf8009a48>
 800a75c:	d9012217 	ldw	r4,1160(sp)
 800a760:	d9412017 	ldw	r5,1152(sp)
 800a764:	d9811a04 	addi	r6,sp,1128
 800a768:	d9c12b15 	stw	r7,1196(sp)
 800a76c:	da412d15 	stw	r9,1204(sp)
 800a770:	80096240 	call	8009624 <__sprint_r.part.0>
 800a774:	d9c12b17 	ldw	r7,1196(sp)
 800a778:	da412d17 	ldw	r9,1204(sp)
 800a77c:	103f251e 	bne	r2,zero,800a414 <__alt_data_end+0xf800a414>
 800a780:	d9411b17 	ldw	r5,1132(sp)
 800a784:	d8c11c17 	ldw	r3,1136(sp)
 800a788:	d811883a 	mov	r8,sp
 800a78c:	28800044 	addi	r2,r5,1
 800a790:	003d8006 	br	8009d94 <__alt_data_end+0xf8009d94>
 800a794:	d9012217 	ldw	r4,1160(sp)
 800a798:	d9412017 	ldw	r5,1152(sp)
 800a79c:	d9811a04 	addi	r6,sp,1128
 800a7a0:	d9c12b15 	stw	r7,1196(sp)
 800a7a4:	da412d15 	stw	r9,1204(sp)
 800a7a8:	da812c15 	stw	r10,1200(sp)
 800a7ac:	80096240 	call	8009624 <__sprint_r.part.0>
 800a7b0:	d9c12b17 	ldw	r7,1196(sp)
 800a7b4:	da412d17 	ldw	r9,1204(sp)
 800a7b8:	da812c17 	ldw	r10,1200(sp)
 800a7bc:	103f151e 	bne	r2,zero,800a414 <__alt_data_end+0xf800a414>
 800a7c0:	d9411b17 	ldw	r5,1132(sp)
 800a7c4:	d8c11c17 	ldw	r3,1136(sp)
 800a7c8:	d811883a 	mov	r8,sp
 800a7cc:	28800044 	addi	r2,r5,1
 800a7d0:	003d6306 	br	8009d60 <__alt_data_end+0xf8009d60>
 800a7d4:	18009e1e 	bne	r3,zero,800aa50 <___vfiprintf_internal_r+0x1318>
 800a7d8:	000b883a 	mov	r5,zero
 800a7dc:	00800044 	movi	r2,1
 800a7e0:	d811883a 	mov	r8,sp
 800a7e4:	003d6d06 	br	8009d9c <__alt_data_end+0xf8009d9c>
 800a7e8:	d9012217 	ldw	r4,1160(sp)
 800a7ec:	d9412017 	ldw	r5,1152(sp)
 800a7f0:	d9811a04 	addi	r6,sp,1128
 800a7f4:	d9c12b15 	stw	r7,1196(sp)
 800a7f8:	da412d15 	stw	r9,1204(sp)
 800a7fc:	80096240 	call	8009624 <__sprint_r.part.0>
 800a800:	d9c12b17 	ldw	r7,1196(sp)
 800a804:	da412d17 	ldw	r9,1204(sp)
 800a808:	103f021e 	bne	r2,zero,800a414 <__alt_data_end+0xf800a414>
 800a80c:	d8811b17 	ldw	r2,1132(sp)
 800a810:	d8c11c17 	ldw	r3,1136(sp)
 800a814:	d811883a 	mov	r8,sp
 800a818:	10800044 	addi	r2,r2,1
 800a81c:	003d8a06 	br	8009e48 <__alt_data_end+0xf8009e48>
 800a820:	4829883a 	mov	r20,r9
 800a824:	003c1706 	br	8009884 <__alt_data_end+0xf8009884>
 800a828:	0529c83a 	sub	r20,zero,r20
 800a82c:	a004c03a 	cmpne	r2,r20,zero
 800a830:	056bc83a 	sub	r21,zero,r21
 800a834:	a8abc83a 	sub	r21,r21,r2
 800a838:	05800b44 	movi	r22,45
 800a83c:	dd811d85 	stb	r22,1142(sp)
 800a840:	900f883a 	mov	r7,r18
 800a844:	00800044 	movi	r2,1
 800a848:	a548b03a 	or	r4,r20,r21
 800a84c:	003cf606 	br	8009c28 <__alt_data_end+0xf8009c28>
 800a850:	00800084 	movi	r2,2
 800a854:	003dc506 	br	8009f6c <__alt_data_end+0xf8009f6c>
 800a858:	8880100c 	andi	r2,r17,64
 800a85c:	10005a26 	beq	r2,zero,800a9c8 <___vfiprintf_internal_r+0x1290>
 800a860:	d9012317 	ldw	r4,1164(sp)
 800a864:	002b883a 	mov	r21,zero
 800a868:	2500000b 	ldhu	r20,0(r4)
 800a86c:	21000104 	addi	r4,r4,4
 800a870:	d9012315 	stw	r4,1164(sp)
 800a874:	003ddc06 	br	8009fe8 <__alt_data_end+0xf8009fe8>
 800a878:	8880100c 	andi	r2,r17,64
 800a87c:	10005826 	beq	r2,zero,800a9e0 <___vfiprintf_internal_r+0x12a8>
 800a880:	d9412317 	ldw	r5,1164(sp)
 800a884:	002b883a 	mov	r21,zero
 800a888:	0005883a 	mov	r2,zero
 800a88c:	2d00000b 	ldhu	r20,0(r5)
 800a890:	29400104 	addi	r5,r5,4
 800a894:	d9412315 	stw	r5,1164(sp)
 800a898:	a009883a 	mov	r4,r20
 800a89c:	003db306 	br	8009f6c <__alt_data_end+0xf8009f6c>
 800a8a0:	8880040c 	andi	r2,r17,16
 800a8a4:	1000411e 	bne	r2,zero,800a9ac <___vfiprintf_internal_r+0x1274>
 800a8a8:	8c40100c 	andi	r17,r17,64
 800a8ac:	88008726 	beq	r17,zero,800aacc <___vfiprintf_internal_r+0x1394>
 800a8b0:	d9412317 	ldw	r5,1164(sp)
 800a8b4:	d8c12417 	ldw	r3,1168(sp)
 800a8b8:	28800017 	ldw	r2,0(r5)
 800a8bc:	29400104 	addi	r5,r5,4
 800a8c0:	d9412315 	stw	r5,1164(sp)
 800a8c4:	10c0000d 	sth	r3,0(r2)
 800a8c8:	003bd206 	br	8009814 <__alt_data_end+0xf8009814>
 800a8cc:	48c00007 	ldb	r3,0(r9)
 800a8d0:	003bf906 	br	80098b8 <__alt_data_end+0xf80098b8>
 800a8d4:	8880100c 	andi	r2,r17,64
 800a8d8:	10002c26 	beq	r2,zero,800a98c <___vfiprintf_internal_r+0x1254>
 800a8dc:	d9412317 	ldw	r5,1164(sp)
 800a8e0:	002b883a 	mov	r21,zero
 800a8e4:	00800044 	movi	r2,1
 800a8e8:	2d00000b 	ldhu	r20,0(r5)
 800a8ec:	29400104 	addi	r5,r5,4
 800a8f0:	d9412315 	stw	r5,1164(sp)
 800a8f4:	a009883a 	mov	r4,r20
 800a8f8:	003d9c06 	br	8009f6c <__alt_data_end+0xf8009f6c>
 800a8fc:	8880100c 	andi	r2,r17,64
 800a900:	10001b26 	beq	r2,zero,800a970 <___vfiprintf_internal_r+0x1238>
 800a904:	d9412317 	ldw	r5,1164(sp)
 800a908:	2d00000f 	ldh	r20,0(r5)
 800a90c:	29400104 	addi	r5,r5,4
 800a910:	d9412315 	stw	r5,1164(sp)
 800a914:	a02bd7fa 	srai	r21,r20,31
 800a918:	a805883a 	mov	r2,r21
 800a91c:	003cbd06 	br	8009c14 <__alt_data_end+0xf8009c14>
 800a920:	d9012217 	ldw	r4,1160(sp)
 800a924:	d9412017 	ldw	r5,1152(sp)
 800a928:	d9811a04 	addi	r6,sp,1128
 800a92c:	d9c12b15 	stw	r7,1196(sp)
 800a930:	da412d15 	stw	r9,1204(sp)
 800a934:	da812c15 	stw	r10,1200(sp)
 800a938:	80096240 	call	8009624 <__sprint_r.part.0>
 800a93c:	d9c12b17 	ldw	r7,1196(sp)
 800a940:	da412d17 	ldw	r9,1204(sp)
 800a944:	da812c17 	ldw	r10,1200(sp)
 800a948:	103eb21e 	bne	r2,zero,800a414 <__alt_data_end+0xf800a414>
 800a94c:	d9411b17 	ldw	r5,1132(sp)
 800a950:	d8c11c17 	ldw	r3,1136(sp)
 800a954:	d811883a 	mov	r8,sp
 800a958:	28800044 	addi	r2,r5,1
 800a95c:	003e7906 	br	800a344 <__alt_data_end+0xf800a344>
 800a960:	1829883a 	mov	r20,r3
 800a964:	003d7006 	br	8009f28 <__alt_data_end+0xf8009f28>
 800a968:	900f883a 	mov	r7,r18
 800a96c:	003e2806 	br	800a210 <__alt_data_end+0xf800a210>
 800a970:	d8812317 	ldw	r2,1164(sp)
 800a974:	15000017 	ldw	r20,0(r2)
 800a978:	10800104 	addi	r2,r2,4
 800a97c:	d8812315 	stw	r2,1164(sp)
 800a980:	a02bd7fa 	srai	r21,r20,31
 800a984:	a805883a 	mov	r2,r21
 800a988:	003ca206 	br	8009c14 <__alt_data_end+0xf8009c14>
 800a98c:	d8812317 	ldw	r2,1164(sp)
 800a990:	002b883a 	mov	r21,zero
 800a994:	15000017 	ldw	r20,0(r2)
 800a998:	10800104 	addi	r2,r2,4
 800a99c:	d8812315 	stw	r2,1164(sp)
 800a9a0:	a009883a 	mov	r4,r20
 800a9a4:	00800044 	movi	r2,1
 800a9a8:	003d7006 	br	8009f6c <__alt_data_end+0xf8009f6c>
 800a9ac:	d8c12317 	ldw	r3,1164(sp)
 800a9b0:	d9012417 	ldw	r4,1168(sp)
 800a9b4:	18800017 	ldw	r2,0(r3)
 800a9b8:	18c00104 	addi	r3,r3,4
 800a9bc:	d8c12315 	stw	r3,1164(sp)
 800a9c0:	11000015 	stw	r4,0(r2)
 800a9c4:	003b9306 	br	8009814 <__alt_data_end+0xf8009814>
 800a9c8:	d9412317 	ldw	r5,1164(sp)
 800a9cc:	002b883a 	mov	r21,zero
 800a9d0:	2d000017 	ldw	r20,0(r5)
 800a9d4:	29400104 	addi	r5,r5,4
 800a9d8:	d9412315 	stw	r5,1164(sp)
 800a9dc:	003d8206 	br	8009fe8 <__alt_data_end+0xf8009fe8>
 800a9e0:	d8812317 	ldw	r2,1164(sp)
 800a9e4:	002b883a 	mov	r21,zero
 800a9e8:	15000017 	ldw	r20,0(r2)
 800a9ec:	10800104 	addi	r2,r2,4
 800a9f0:	d8812315 	stw	r2,1164(sp)
 800a9f4:	a009883a 	mov	r4,r20
 800a9f8:	0005883a 	mov	r2,zero
 800a9fc:	003d5b06 	br	8009f6c <__alt_data_end+0xf8009f6c>
 800aa00:	04bfffc4 	movi	r18,-1
 800aa04:	900d883a 	mov	r6,r18
 800aa08:	003bac06 	br	80098bc <__alt_data_end+0xf80098bc>
 800aa0c:	4a400044 	addi	r9,r9,1
 800aa10:	8c400814 	ori	r17,r17,32
 800aa14:	10c00047 	ldb	r3,1(r2)
 800aa18:	003ba706 	br	80098b8 <__alt_data_end+0xf80098b8>
 800aa1c:	d8c11f17 	ldw	r3,1148(sp)
 800aa20:	1dcfc83a 	sub	r7,r3,r23
 800aa24:	003c8d06 	br	8009c5c <__alt_data_end+0xf8009c5c>
 800aa28:	da012b15 	stw	r8,1196(sp)
 800aa2c:	da412d15 	stw	r9,1204(sp)
 800aa30:	800238c0 	call	800238c <strlen>
 800aa34:	100f883a 	mov	r7,r2
 800aa38:	dd811d83 	ldbu	r22,1142(sp)
 800aa3c:	dd412315 	stw	r21,1164(sp)
 800aa40:	0025883a 	mov	r18,zero
 800aa44:	da012b17 	ldw	r8,1196(sp)
 800aa48:	da412d17 	ldw	r9,1204(sp)
 800aa4c:	003c8306 	br	8009c5c <__alt_data_end+0xf8009c5c>
 800aa50:	d9012217 	ldw	r4,1160(sp)
 800aa54:	d9412017 	ldw	r5,1152(sp)
 800aa58:	d9811a04 	addi	r6,sp,1128
 800aa5c:	d9c12b15 	stw	r7,1196(sp)
 800aa60:	da412d15 	stw	r9,1204(sp)
 800aa64:	80096240 	call	8009624 <__sprint_r.part.0>
 800aa68:	d9c12b17 	ldw	r7,1196(sp)
 800aa6c:	da412d17 	ldw	r9,1204(sp)
 800aa70:	103e681e 	bne	r2,zero,800a414 <__alt_data_end+0xf800a414>
 800aa74:	d9411b17 	ldw	r5,1132(sp)
 800aa78:	d8c11c17 	ldw	r3,1136(sp)
 800aa7c:	d811883a 	mov	r8,sp
 800aa80:	28800044 	addi	r2,r5,1
 800aa84:	003cc506 	br	8009d9c <__alt_data_end+0xf8009d9c>
 800aa88:	d9411b17 	ldw	r5,1132(sp)
 800aa8c:	01020074 	movhi	r4,2049
 800aa90:	21071204 	addi	r4,r4,7240
 800aa94:	d9012515 	stw	r4,1172(sp)
 800aa98:	29400044 	addi	r5,r5,1
 800aa9c:	003ca406 	br	8009d30 <__alt_data_end+0xf8009d30>
 800aaa0:	00800184 	movi	r2,6
 800aaa4:	300f883a 	mov	r7,r6
 800aaa8:	1180012e 	bgeu	r2,r6,800aab0 <___vfiprintf_internal_r+0x1378>
 800aaac:	100f883a 	mov	r7,r2
 800aab0:	3829883a 	mov	r20,r7
 800aab4:	38001e16 	blt	r7,zero,800ab30 <___vfiprintf_internal_r+0x13f8>
 800aab8:	dd412315 	stw	r21,1164(sp)
 800aabc:	05c20074 	movhi	r23,2049
 800aac0:	bdc6b204 	addi	r23,r23,6856
 800aac4:	0025883a 	mov	r18,zero
 800aac8:	003c6c06 	br	8009c7c <__alt_data_end+0xf8009c7c>
 800aacc:	d9012317 	ldw	r4,1164(sp)
 800aad0:	d9412417 	ldw	r5,1168(sp)
 800aad4:	20800017 	ldw	r2,0(r4)
 800aad8:	21000104 	addi	r4,r4,4
 800aadc:	d9012315 	stw	r4,1164(sp)
 800aae0:	11400015 	stw	r5,0(r2)
 800aae4:	003b4b06 	br	8009814 <__alt_data_end+0xf8009814>
 800aae8:	d9411b17 	ldw	r5,1132(sp)
 800aaec:	00820074 	movhi	r2,2049
 800aaf0:	10871204 	addi	r2,r2,7240
 800aaf4:	d8812515 	stw	r2,1172(sp)
 800aaf8:	29400044 	addi	r5,r5,1
 800aafc:	003cff06 	br	8009efc <__alt_data_end+0xf8009efc>
 800ab00:	1009883a 	mov	r4,r2
 800ab04:	05420074 	movhi	r21,2049
 800ab08:	ad470e04 	addi	r21,r21,7224
 800ab0c:	003e9906 	br	800a574 <__alt_data_end+0xf800a574>
 800ab10:	900f883a 	mov	r7,r18
 800ab14:	dd811d83 	ldbu	r22,1142(sp)
 800ab18:	dd412315 	stw	r21,1164(sp)
 800ab1c:	0025883a 	mov	r18,zero
 800ab20:	003c4e06 	br	8009c5c <__alt_data_end+0xf8009c5c>
 800ab24:	1013883a 	mov	r9,r2
 800ab28:	000d883a 	mov	r6,zero
 800ab2c:	003b6306 	br	80098bc <__alt_data_end+0xf80098bc>
 800ab30:	0029883a 	mov	r20,zero
 800ab34:	003fe006 	br	800aab8 <__alt_data_end+0xf800aab8>
 800ab38:	043fffc4 	movi	r16,-1
 800ab3c:	003bf306 	br	8009b0c <__alt_data_end+0xf8009b0c>
 800ab40:	d9412317 	ldw	r5,1164(sp)
 800ab44:	48c00043 	ldbu	r3,1(r9)
 800ab48:	1013883a 	mov	r9,r2
 800ab4c:	29800017 	ldw	r6,0(r5)
 800ab50:	29000104 	addi	r4,r5,4
 800ab54:	d9012315 	stw	r4,1164(sp)
 800ab58:	30000416 	blt	r6,zero,800ab6c <___vfiprintf_internal_r+0x1434>
 800ab5c:	18c03fcc 	andi	r3,r3,255
 800ab60:	18c0201c 	xori	r3,r3,128
 800ab64:	18ffe004 	addi	r3,r3,-128
 800ab68:	003b5306 	br	80098b8 <__alt_data_end+0xf80098b8>
 800ab6c:	18c03fcc 	andi	r3,r3,255
 800ab70:	18c0201c 	xori	r3,r3,128
 800ab74:	01bfffc4 	movi	r6,-1
 800ab78:	18ffe004 	addi	r3,r3,-128
 800ab7c:	003b4e06 	br	80098b8 <__alt_data_end+0xf80098b8>

0800ab80 <__vfiprintf_internal>:
 800ab80:	00820074 	movhi	r2,2049
 800ab84:	108e1004 	addi	r2,r2,14400
 800ab88:	2007883a 	mov	r3,r4
 800ab8c:	11000017 	ldw	r4,0(r2)
 800ab90:	2805883a 	mov	r2,r5
 800ab94:	300f883a 	mov	r7,r6
 800ab98:	180b883a 	mov	r5,r3
 800ab9c:	100d883a 	mov	r6,r2
 800aba0:	80097381 	jmpi	8009738 <___vfiprintf_internal_r>

0800aba4 <_write_r>:
 800aba4:	defffd04 	addi	sp,sp,-12
 800aba8:	dc400115 	stw	r17,4(sp)
 800abac:	dc000015 	stw	r16,0(sp)
 800abb0:	2023883a 	mov	r17,r4
 800abb4:	04020074 	movhi	r16,2049
 800abb8:	8414e604 	addi	r16,r16,21400
 800abbc:	2809883a 	mov	r4,r5
 800abc0:	300b883a 	mov	r5,r6
 800abc4:	380d883a 	mov	r6,r7
 800abc8:	dfc00215 	stw	ra,8(sp)
 800abcc:	80000015 	stw	zero,0(r16)
 800abd0:	800f4100 	call	800f410 <write>
 800abd4:	00ffffc4 	movi	r3,-1
 800abd8:	10c00526 	beq	r2,r3,800abf0 <_write_r+0x4c>
 800abdc:	dfc00217 	ldw	ra,8(sp)
 800abe0:	dc400117 	ldw	r17,4(sp)
 800abe4:	dc000017 	ldw	r16,0(sp)
 800abe8:	dec00304 	addi	sp,sp,12
 800abec:	f800283a 	ret
 800abf0:	80c00017 	ldw	r3,0(r16)
 800abf4:	183ff926 	beq	r3,zero,800abdc <__alt_data_end+0xf800abdc>
 800abf8:	88c00015 	stw	r3,0(r17)
 800abfc:	dfc00217 	ldw	ra,8(sp)
 800ac00:	dc400117 	ldw	r17,4(sp)
 800ac04:	dc000017 	ldw	r16,0(sp)
 800ac08:	dec00304 	addi	sp,sp,12
 800ac0c:	f800283a 	ret

0800ac10 <_close_r>:
 800ac10:	defffd04 	addi	sp,sp,-12
 800ac14:	dc400115 	stw	r17,4(sp)
 800ac18:	dc000015 	stw	r16,0(sp)
 800ac1c:	2023883a 	mov	r17,r4
 800ac20:	04020074 	movhi	r16,2049
 800ac24:	8414e604 	addi	r16,r16,21400
 800ac28:	2809883a 	mov	r4,r5
 800ac2c:	dfc00215 	stw	ra,8(sp)
 800ac30:	80000015 	stw	zero,0(r16)
 800ac34:	800eb5c0 	call	800eb5c <close>
 800ac38:	00ffffc4 	movi	r3,-1
 800ac3c:	10c00526 	beq	r2,r3,800ac54 <_close_r+0x44>
 800ac40:	dfc00217 	ldw	ra,8(sp)
 800ac44:	dc400117 	ldw	r17,4(sp)
 800ac48:	dc000017 	ldw	r16,0(sp)
 800ac4c:	dec00304 	addi	sp,sp,12
 800ac50:	f800283a 	ret
 800ac54:	80c00017 	ldw	r3,0(r16)
 800ac58:	183ff926 	beq	r3,zero,800ac40 <__alt_data_end+0xf800ac40>
 800ac5c:	88c00015 	stw	r3,0(r17)
 800ac60:	dfc00217 	ldw	ra,8(sp)
 800ac64:	dc400117 	ldw	r17,4(sp)
 800ac68:	dc000017 	ldw	r16,0(sp)
 800ac6c:	dec00304 	addi	sp,sp,12
 800ac70:	f800283a 	ret

0800ac74 <_calloc_r>:
 800ac74:	defffe04 	addi	sp,sp,-8
 800ac78:	dc000015 	stw	r16,0(sp)
 800ac7c:	2021883a 	mov	r16,r4
 800ac80:	2809883a 	mov	r4,r5
 800ac84:	300b883a 	mov	r5,r6
 800ac88:	dfc00115 	stw	ra,4(sp)
 800ac8c:	800c3600 	call	800c360 <__mulsi3>
 800ac90:	8009883a 	mov	r4,r16
 800ac94:	100b883a 	mov	r5,r2
 800ac98:	80071e40 	call	80071e4 <_malloc_r>
 800ac9c:	1021883a 	mov	r16,r2
 800aca0:	10002826 	beq	r2,zero,800ad44 <_calloc_r+0xd0>
 800aca4:	11bfff17 	ldw	r6,-4(r2)
 800aca8:	00ffff04 	movi	r3,-4
 800acac:	00800904 	movi	r2,36
 800acb0:	30cc703a 	and	r6,r6,r3
 800acb4:	30cd883a 	add	r6,r6,r3
 800acb8:	11801436 	bltu	r2,r6,800ad0c <_calloc_r+0x98>
 800acbc:	00c004c4 	movi	r3,19
 800acc0:	19800936 	bltu	r3,r6,800ace8 <_calloc_r+0x74>
 800acc4:	8005883a 	mov	r2,r16
 800acc8:	10000015 	stw	zero,0(r2)
 800accc:	10000115 	stw	zero,4(r2)
 800acd0:	10000215 	stw	zero,8(r2)
 800acd4:	8005883a 	mov	r2,r16
 800acd8:	dfc00117 	ldw	ra,4(sp)
 800acdc:	dc000017 	ldw	r16,0(sp)
 800ace0:	dec00204 	addi	sp,sp,8
 800ace4:	f800283a 	ret
 800ace8:	80000015 	stw	zero,0(r16)
 800acec:	80000115 	stw	zero,4(r16)
 800acf0:	00c006c4 	movi	r3,27
 800acf4:	19800d2e 	bgeu	r3,r6,800ad2c <_calloc_r+0xb8>
 800acf8:	80000215 	stw	zero,8(r16)
 800acfc:	80000315 	stw	zero,12(r16)
 800ad00:	30800c26 	beq	r6,r2,800ad34 <_calloc_r+0xc0>
 800ad04:	80800404 	addi	r2,r16,16
 800ad08:	003fef06 	br	800acc8 <__alt_data_end+0xf800acc8>
 800ad0c:	8009883a 	mov	r4,r16
 800ad10:	000b883a 	mov	r5,zero
 800ad14:	8007cd80 	call	8007cd8 <memset>
 800ad18:	8005883a 	mov	r2,r16
 800ad1c:	dfc00117 	ldw	ra,4(sp)
 800ad20:	dc000017 	ldw	r16,0(sp)
 800ad24:	dec00204 	addi	sp,sp,8
 800ad28:	f800283a 	ret
 800ad2c:	80800204 	addi	r2,r16,8
 800ad30:	003fe506 	br	800acc8 <__alt_data_end+0xf800acc8>
 800ad34:	80000415 	stw	zero,16(r16)
 800ad38:	80800604 	addi	r2,r16,24
 800ad3c:	80000515 	stw	zero,20(r16)
 800ad40:	003fe106 	br	800acc8 <__alt_data_end+0xf800acc8>
 800ad44:	0005883a 	mov	r2,zero
 800ad48:	003fe306 	br	800acd8 <__alt_data_end+0xf800acd8>

0800ad4c <_fclose_r>:
 800ad4c:	defffc04 	addi	sp,sp,-16
 800ad50:	dc000015 	stw	r16,0(sp)
 800ad54:	dfc00315 	stw	ra,12(sp)
 800ad58:	dc800215 	stw	r18,8(sp)
 800ad5c:	dc400115 	stw	r17,4(sp)
 800ad60:	2821883a 	mov	r16,r5
 800ad64:	28003126 	beq	r5,zero,800ae2c <_fclose_r+0xe0>
 800ad68:	2023883a 	mov	r17,r4
 800ad6c:	80065040 	call	8006504 <__sfp_lock_acquire>
 800ad70:	88000226 	beq	r17,zero,800ad7c <_fclose_r+0x30>
 800ad74:	88800e17 	ldw	r2,56(r17)
 800ad78:	10003326 	beq	r2,zero,800ae48 <_fclose_r+0xfc>
 800ad7c:	8080030f 	ldh	r2,12(r16)
 800ad80:	10002226 	beq	r2,zero,800ae0c <_fclose_r+0xc0>
 800ad84:	8809883a 	mov	r4,r17
 800ad88:	800b883a 	mov	r5,r16
 800ad8c:	8005f2c0 	call	8005f2c <_fflush_r>
 800ad90:	80c00b17 	ldw	r3,44(r16)
 800ad94:	1025883a 	mov	r18,r2
 800ad98:	18000426 	beq	r3,zero,800adac <_fclose_r+0x60>
 800ad9c:	81400717 	ldw	r5,28(r16)
 800ada0:	8809883a 	mov	r4,r17
 800ada4:	183ee83a 	callr	r3
 800ada8:	10003016 	blt	r2,zero,800ae6c <_fclose_r+0x120>
 800adac:	8080030b 	ldhu	r2,12(r16)
 800adb0:	1080200c 	andi	r2,r2,128
 800adb4:	1000291e 	bne	r2,zero,800ae5c <_fclose_r+0x110>
 800adb8:	81400c17 	ldw	r5,48(r16)
 800adbc:	28000526 	beq	r5,zero,800add4 <_fclose_r+0x88>
 800adc0:	80801004 	addi	r2,r16,64
 800adc4:	28800226 	beq	r5,r2,800add0 <_fclose_r+0x84>
 800adc8:	8809883a 	mov	r4,r17
 800adcc:	80066800 	call	8006680 <_free_r>
 800add0:	80000c15 	stw	zero,48(r16)
 800add4:	81401117 	ldw	r5,68(r16)
 800add8:	28000326 	beq	r5,zero,800ade8 <_fclose_r+0x9c>
 800addc:	8809883a 	mov	r4,r17
 800ade0:	80066800 	call	8006680 <_free_r>
 800ade4:	80001115 	stw	zero,68(r16)
 800ade8:	8000030d 	sth	zero,12(r16)
 800adec:	80065080 	call	8006508 <__sfp_lock_release>
 800adf0:	9005883a 	mov	r2,r18
 800adf4:	dfc00317 	ldw	ra,12(sp)
 800adf8:	dc800217 	ldw	r18,8(sp)
 800adfc:	dc400117 	ldw	r17,4(sp)
 800ae00:	dc000017 	ldw	r16,0(sp)
 800ae04:	dec00404 	addi	sp,sp,16
 800ae08:	f800283a 	ret
 800ae0c:	80065080 	call	8006508 <__sfp_lock_release>
 800ae10:	0005883a 	mov	r2,zero
 800ae14:	dfc00317 	ldw	ra,12(sp)
 800ae18:	dc800217 	ldw	r18,8(sp)
 800ae1c:	dc400117 	ldw	r17,4(sp)
 800ae20:	dc000017 	ldw	r16,0(sp)
 800ae24:	dec00404 	addi	sp,sp,16
 800ae28:	f800283a 	ret
 800ae2c:	0005883a 	mov	r2,zero
 800ae30:	dfc00317 	ldw	ra,12(sp)
 800ae34:	dc800217 	ldw	r18,8(sp)
 800ae38:	dc400117 	ldw	r17,4(sp)
 800ae3c:	dc000017 	ldw	r16,0(sp)
 800ae40:	dec00404 	addi	sp,sp,16
 800ae44:	f800283a 	ret
 800ae48:	8809883a 	mov	r4,r17
 800ae4c:	800624c0 	call	800624c <__sinit>
 800ae50:	8080030f 	ldh	r2,12(r16)
 800ae54:	103fcb1e 	bne	r2,zero,800ad84 <__alt_data_end+0xf800ad84>
 800ae58:	003fec06 	br	800ae0c <__alt_data_end+0xf800ae0c>
 800ae5c:	81400417 	ldw	r5,16(r16)
 800ae60:	8809883a 	mov	r4,r17
 800ae64:	80066800 	call	8006680 <_free_r>
 800ae68:	003fd306 	br	800adb8 <__alt_data_end+0xf800adb8>
 800ae6c:	04bfffc4 	movi	r18,-1
 800ae70:	003fce06 	br	800adac <__alt_data_end+0xf800adac>

0800ae74 <fclose>:
 800ae74:	00820074 	movhi	r2,2049
 800ae78:	108e1004 	addi	r2,r2,14400
 800ae7c:	200b883a 	mov	r5,r4
 800ae80:	11000017 	ldw	r4,0(r2)
 800ae84:	800ad4c1 	jmpi	800ad4c <_fclose_r>

0800ae88 <_fputwc_r>:
 800ae88:	3080030b 	ldhu	r2,12(r6)
 800ae8c:	defff804 	addi	sp,sp,-32
 800ae90:	dcc00415 	stw	r19,16(sp)
 800ae94:	dc800315 	stw	r18,12(sp)
 800ae98:	dc000115 	stw	r16,4(sp)
 800ae9c:	dfc00715 	stw	ra,28(sp)
 800aea0:	dd400615 	stw	r21,24(sp)
 800aea4:	dd000515 	stw	r20,20(sp)
 800aea8:	dc400215 	stw	r17,8(sp)
 800aeac:	10c8000c 	andi	r3,r2,8192
 800aeb0:	3021883a 	mov	r16,r6
 800aeb4:	2027883a 	mov	r19,r4
 800aeb8:	2825883a 	mov	r18,r5
 800aebc:	1800051e 	bne	r3,zero,800aed4 <_fputwc_r+0x4c>
 800aec0:	30c01917 	ldw	r3,100(r6)
 800aec4:	10880014 	ori	r2,r2,8192
 800aec8:	3080030d 	sth	r2,12(r6)
 800aecc:	18880014 	ori	r2,r3,8192
 800aed0:	30801915 	stw	r2,100(r6)
 800aed4:	8006fd80 	call	8006fd8 <__locale_mb_cur_max>
 800aed8:	00c00044 	movi	r3,1
 800aedc:	10c03e26 	beq	r2,r3,800afd8 <_fputwc_r+0x150>
 800aee0:	9809883a 	mov	r4,r19
 800aee4:	d80b883a 	mov	r5,sp
 800aee8:	900d883a 	mov	r6,r18
 800aeec:	81c01704 	addi	r7,r16,92
 800aef0:	800b3c40 	call	800b3c4 <_wcrtomb_r>
 800aef4:	1029883a 	mov	r20,r2
 800aef8:	00bfffc4 	movi	r2,-1
 800aefc:	a0802026 	beq	r20,r2,800af80 <_fputwc_r+0xf8>
 800af00:	d9400003 	ldbu	r5,0(sp)
 800af04:	a0001c26 	beq	r20,zero,800af78 <_fputwc_r+0xf0>
 800af08:	0023883a 	mov	r17,zero
 800af0c:	05400284 	movi	r21,10
 800af10:	00000906 	br	800af38 <_fputwc_r+0xb0>
 800af14:	80c00017 	ldw	r3,0(r16)
 800af18:	19400005 	stb	r5,0(r3)
 800af1c:	80c00017 	ldw	r3,0(r16)
 800af20:	18c00044 	addi	r3,r3,1
 800af24:	80c00015 	stw	r3,0(r16)
 800af28:	8c400044 	addi	r17,r17,1
 800af2c:	dc47883a 	add	r3,sp,r17
 800af30:	8d00112e 	bgeu	r17,r20,800af78 <_fputwc_r+0xf0>
 800af34:	19400003 	ldbu	r5,0(r3)
 800af38:	80c00217 	ldw	r3,8(r16)
 800af3c:	18ffffc4 	addi	r3,r3,-1
 800af40:	80c00215 	stw	r3,8(r16)
 800af44:	183ff30e 	bge	r3,zero,800af14 <__alt_data_end+0xf800af14>
 800af48:	80800617 	ldw	r2,24(r16)
 800af4c:	18801916 	blt	r3,r2,800afb4 <_fputwc_r+0x12c>
 800af50:	80800017 	ldw	r2,0(r16)
 800af54:	11400005 	stb	r5,0(r2)
 800af58:	80800017 	ldw	r2,0(r16)
 800af5c:	10c00003 	ldbu	r3,0(r2)
 800af60:	10800044 	addi	r2,r2,1
 800af64:	1d402326 	beq	r3,r21,800aff4 <_fputwc_r+0x16c>
 800af68:	8c400044 	addi	r17,r17,1
 800af6c:	80800015 	stw	r2,0(r16)
 800af70:	dc47883a 	add	r3,sp,r17
 800af74:	8d3fef36 	bltu	r17,r20,800af34 <__alt_data_end+0xf800af34>
 800af78:	9005883a 	mov	r2,r18
 800af7c:	00000406 	br	800af90 <_fputwc_r+0x108>
 800af80:	80c0030b 	ldhu	r3,12(r16)
 800af84:	a005883a 	mov	r2,r20
 800af88:	18c01014 	ori	r3,r3,64
 800af8c:	80c0030d 	sth	r3,12(r16)
 800af90:	dfc00717 	ldw	ra,28(sp)
 800af94:	dd400617 	ldw	r21,24(sp)
 800af98:	dd000517 	ldw	r20,20(sp)
 800af9c:	dcc00417 	ldw	r19,16(sp)
 800afa0:	dc800317 	ldw	r18,12(sp)
 800afa4:	dc400217 	ldw	r17,8(sp)
 800afa8:	dc000117 	ldw	r16,4(sp)
 800afac:	dec00804 	addi	sp,sp,32
 800afb0:	f800283a 	ret
 800afb4:	9809883a 	mov	r4,r19
 800afb8:	29403fcc 	andi	r5,r5,255
 800afbc:	800d883a 	mov	r6,r16
 800afc0:	800b2280 	call	800b228 <__swbuf_r>
 800afc4:	10bfffe0 	cmpeqi	r2,r2,-1
 800afc8:	10803fcc 	andi	r2,r2,255
 800afcc:	103fd626 	beq	r2,zero,800af28 <__alt_data_end+0xf800af28>
 800afd0:	00bfffc4 	movi	r2,-1
 800afd4:	003fee06 	br	800af90 <__alt_data_end+0xf800af90>
 800afd8:	90ffffc4 	addi	r3,r18,-1
 800afdc:	01003f84 	movi	r4,254
 800afe0:	20ffbf36 	bltu	r4,r3,800aee0 <__alt_data_end+0xf800aee0>
 800afe4:	900b883a 	mov	r5,r18
 800afe8:	dc800005 	stb	r18,0(sp)
 800afec:	1029883a 	mov	r20,r2
 800aff0:	003fc506 	br	800af08 <__alt_data_end+0xf800af08>
 800aff4:	9809883a 	mov	r4,r19
 800aff8:	a80b883a 	mov	r5,r21
 800affc:	800d883a 	mov	r6,r16
 800b000:	800b2280 	call	800b228 <__swbuf_r>
 800b004:	10bfffe0 	cmpeqi	r2,r2,-1
 800b008:	003fef06 	br	800afc8 <__alt_data_end+0xf800afc8>

0800b00c <fputwc>:
 800b00c:	defffc04 	addi	sp,sp,-16
 800b010:	dc000115 	stw	r16,4(sp)
 800b014:	04020074 	movhi	r16,2049
 800b018:	840e1004 	addi	r16,r16,14400
 800b01c:	80800017 	ldw	r2,0(r16)
 800b020:	dc400215 	stw	r17,8(sp)
 800b024:	dfc00315 	stw	ra,12(sp)
 800b028:	2023883a 	mov	r17,r4
 800b02c:	280d883a 	mov	r6,r5
 800b030:	10000d26 	beq	r2,zero,800b068 <fputwc+0x5c>
 800b034:	10c00e17 	ldw	r3,56(r2)
 800b038:	1009883a 	mov	r4,r2
 800b03c:	1800041e 	bne	r3,zero,800b050 <fputwc+0x44>
 800b040:	d9400015 	stw	r5,0(sp)
 800b044:	800624c0 	call	800624c <__sinit>
 800b048:	81000017 	ldw	r4,0(r16)
 800b04c:	d9800017 	ldw	r6,0(sp)
 800b050:	880b883a 	mov	r5,r17
 800b054:	dfc00317 	ldw	ra,12(sp)
 800b058:	dc400217 	ldw	r17,8(sp)
 800b05c:	dc000117 	ldw	r16,4(sp)
 800b060:	dec00404 	addi	sp,sp,16
 800b064:	800ae881 	jmpi	800ae88 <_fputwc_r>
 800b068:	0009883a 	mov	r4,zero
 800b06c:	880b883a 	mov	r5,r17
 800b070:	dfc00317 	ldw	ra,12(sp)
 800b074:	dc400217 	ldw	r17,8(sp)
 800b078:	dc000117 	ldw	r16,4(sp)
 800b07c:	dec00404 	addi	sp,sp,16
 800b080:	800ae881 	jmpi	800ae88 <_fputwc_r>

0800b084 <_fstat_r>:
 800b084:	defffd04 	addi	sp,sp,-12
 800b088:	dc400115 	stw	r17,4(sp)
 800b08c:	dc000015 	stw	r16,0(sp)
 800b090:	2023883a 	mov	r17,r4
 800b094:	04020074 	movhi	r16,2049
 800b098:	8414e604 	addi	r16,r16,21400
 800b09c:	2809883a 	mov	r4,r5
 800b0a0:	300b883a 	mov	r5,r6
 800b0a4:	dfc00215 	stw	ra,8(sp)
 800b0a8:	80000015 	stw	zero,0(r16)
 800b0ac:	800eca80 	call	800eca8 <fstat>
 800b0b0:	00ffffc4 	movi	r3,-1
 800b0b4:	10c00526 	beq	r2,r3,800b0cc <_fstat_r+0x48>
 800b0b8:	dfc00217 	ldw	ra,8(sp)
 800b0bc:	dc400117 	ldw	r17,4(sp)
 800b0c0:	dc000017 	ldw	r16,0(sp)
 800b0c4:	dec00304 	addi	sp,sp,12
 800b0c8:	f800283a 	ret
 800b0cc:	80c00017 	ldw	r3,0(r16)
 800b0d0:	183ff926 	beq	r3,zero,800b0b8 <__alt_data_end+0xf800b0b8>
 800b0d4:	88c00015 	stw	r3,0(r17)
 800b0d8:	dfc00217 	ldw	ra,8(sp)
 800b0dc:	dc400117 	ldw	r17,4(sp)
 800b0e0:	dc000017 	ldw	r16,0(sp)
 800b0e4:	dec00304 	addi	sp,sp,12
 800b0e8:	f800283a 	ret

0800b0ec <_isatty_r>:
 800b0ec:	defffd04 	addi	sp,sp,-12
 800b0f0:	dc400115 	stw	r17,4(sp)
 800b0f4:	dc000015 	stw	r16,0(sp)
 800b0f8:	2023883a 	mov	r17,r4
 800b0fc:	04020074 	movhi	r16,2049
 800b100:	8414e604 	addi	r16,r16,21400
 800b104:	2809883a 	mov	r4,r5
 800b108:	dfc00215 	stw	ra,8(sp)
 800b10c:	80000015 	stw	zero,0(r16)
 800b110:	800edac0 	call	800edac <isatty>
 800b114:	00ffffc4 	movi	r3,-1
 800b118:	10c00526 	beq	r2,r3,800b130 <_isatty_r+0x44>
 800b11c:	dfc00217 	ldw	ra,8(sp)
 800b120:	dc400117 	ldw	r17,4(sp)
 800b124:	dc000017 	ldw	r16,0(sp)
 800b128:	dec00304 	addi	sp,sp,12
 800b12c:	f800283a 	ret
 800b130:	80c00017 	ldw	r3,0(r16)
 800b134:	183ff926 	beq	r3,zero,800b11c <__alt_data_end+0xf800b11c>
 800b138:	88c00015 	stw	r3,0(r17)
 800b13c:	dfc00217 	ldw	ra,8(sp)
 800b140:	dc400117 	ldw	r17,4(sp)
 800b144:	dc000017 	ldw	r16,0(sp)
 800b148:	dec00304 	addi	sp,sp,12
 800b14c:	f800283a 	ret

0800b150 <_lseek_r>:
 800b150:	defffd04 	addi	sp,sp,-12
 800b154:	dc400115 	stw	r17,4(sp)
 800b158:	dc000015 	stw	r16,0(sp)
 800b15c:	2023883a 	mov	r17,r4
 800b160:	04020074 	movhi	r16,2049
 800b164:	8414e604 	addi	r16,r16,21400
 800b168:	2809883a 	mov	r4,r5
 800b16c:	300b883a 	mov	r5,r6
 800b170:	380d883a 	mov	r6,r7
 800b174:	dfc00215 	stw	ra,8(sp)
 800b178:	80000015 	stw	zero,0(r16)
 800b17c:	800ef880 	call	800ef88 <lseek>
 800b180:	00ffffc4 	movi	r3,-1
 800b184:	10c00526 	beq	r2,r3,800b19c <_lseek_r+0x4c>
 800b188:	dfc00217 	ldw	ra,8(sp)
 800b18c:	dc400117 	ldw	r17,4(sp)
 800b190:	dc000017 	ldw	r16,0(sp)
 800b194:	dec00304 	addi	sp,sp,12
 800b198:	f800283a 	ret
 800b19c:	80c00017 	ldw	r3,0(r16)
 800b1a0:	183ff926 	beq	r3,zero,800b188 <__alt_data_end+0xf800b188>
 800b1a4:	88c00015 	stw	r3,0(r17)
 800b1a8:	dfc00217 	ldw	ra,8(sp)
 800b1ac:	dc400117 	ldw	r17,4(sp)
 800b1b0:	dc000017 	ldw	r16,0(sp)
 800b1b4:	dec00304 	addi	sp,sp,12
 800b1b8:	f800283a 	ret

0800b1bc <_read_r>:
 800b1bc:	defffd04 	addi	sp,sp,-12
 800b1c0:	dc400115 	stw	r17,4(sp)
 800b1c4:	dc000015 	stw	r16,0(sp)
 800b1c8:	2023883a 	mov	r17,r4
 800b1cc:	04020074 	movhi	r16,2049
 800b1d0:	8414e604 	addi	r16,r16,21400
 800b1d4:	2809883a 	mov	r4,r5
 800b1d8:	300b883a 	mov	r5,r6
 800b1dc:	380d883a 	mov	r6,r7
 800b1e0:	dfc00215 	stw	ra,8(sp)
 800b1e4:	80000015 	stw	zero,0(r16)
 800b1e8:	800f1680 	call	800f168 <read>
 800b1ec:	00ffffc4 	movi	r3,-1
 800b1f0:	10c00526 	beq	r2,r3,800b208 <_read_r+0x4c>
 800b1f4:	dfc00217 	ldw	ra,8(sp)
 800b1f8:	dc400117 	ldw	r17,4(sp)
 800b1fc:	dc000017 	ldw	r16,0(sp)
 800b200:	dec00304 	addi	sp,sp,12
 800b204:	f800283a 	ret
 800b208:	80c00017 	ldw	r3,0(r16)
 800b20c:	183ff926 	beq	r3,zero,800b1f4 <__alt_data_end+0xf800b1f4>
 800b210:	88c00015 	stw	r3,0(r17)
 800b214:	dfc00217 	ldw	ra,8(sp)
 800b218:	dc400117 	ldw	r17,4(sp)
 800b21c:	dc000017 	ldw	r16,0(sp)
 800b220:	dec00304 	addi	sp,sp,12
 800b224:	f800283a 	ret

0800b228 <__swbuf_r>:
 800b228:	defffc04 	addi	sp,sp,-16
 800b22c:	dc800215 	stw	r18,8(sp)
 800b230:	dc400115 	stw	r17,4(sp)
 800b234:	dc000015 	stw	r16,0(sp)
 800b238:	dfc00315 	stw	ra,12(sp)
 800b23c:	2023883a 	mov	r17,r4
 800b240:	2825883a 	mov	r18,r5
 800b244:	3021883a 	mov	r16,r6
 800b248:	20000226 	beq	r4,zero,800b254 <__swbuf_r+0x2c>
 800b24c:	20800e17 	ldw	r2,56(r4)
 800b250:	10004d26 	beq	r2,zero,800b388 <__swbuf_r+0x160>
 800b254:	80800617 	ldw	r2,24(r16)
 800b258:	80c0030b 	ldhu	r3,12(r16)
 800b25c:	80800215 	stw	r2,8(r16)
 800b260:	1880020c 	andi	r2,r3,8
 800b264:	10004126 	beq	r2,zero,800b36c <__swbuf_r+0x144>
 800b268:	80800417 	ldw	r2,16(r16)
 800b26c:	10003f26 	beq	r2,zero,800b36c <__swbuf_r+0x144>
 800b270:	1908000c 	andi	r4,r3,8192
 800b274:	94803fcc 	andi	r18,r18,255
 800b278:	20001726 	beq	r4,zero,800b2d8 <__swbuf_r+0xb0>
 800b27c:	80c00017 	ldw	r3,0(r16)
 800b280:	81000517 	ldw	r4,20(r16)
 800b284:	1885c83a 	sub	r2,r3,r2
 800b288:	11001d0e 	bge	r2,r4,800b300 <__swbuf_r+0xd8>
 800b28c:	81000217 	ldw	r4,8(r16)
 800b290:	19400044 	addi	r5,r3,1
 800b294:	81400015 	stw	r5,0(r16)
 800b298:	213fffc4 	addi	r4,r4,-1
 800b29c:	81000215 	stw	r4,8(r16)
 800b2a0:	1c800005 	stb	r18,0(r3)
 800b2a4:	80c00517 	ldw	r3,20(r16)
 800b2a8:	10800044 	addi	r2,r2,1
 800b2ac:	18802226 	beq	r3,r2,800b338 <__swbuf_r+0x110>
 800b2b0:	8080030b 	ldhu	r2,12(r16)
 800b2b4:	1080004c 	andi	r2,r2,1
 800b2b8:	1000251e 	bne	r2,zero,800b350 <__swbuf_r+0x128>
 800b2bc:	9005883a 	mov	r2,r18
 800b2c0:	dfc00317 	ldw	ra,12(sp)
 800b2c4:	dc800217 	ldw	r18,8(sp)
 800b2c8:	dc400117 	ldw	r17,4(sp)
 800b2cc:	dc000017 	ldw	r16,0(sp)
 800b2d0:	dec00404 	addi	sp,sp,16
 800b2d4:	f800283a 	ret
 800b2d8:	81401917 	ldw	r5,100(r16)
 800b2dc:	18c80014 	ori	r3,r3,8192
 800b2e0:	0137ffc4 	movi	r4,-8193
 800b2e4:	2908703a 	and	r4,r5,r4
 800b2e8:	80c0030d 	sth	r3,12(r16)
 800b2ec:	80c00017 	ldw	r3,0(r16)
 800b2f0:	81001915 	stw	r4,100(r16)
 800b2f4:	81000517 	ldw	r4,20(r16)
 800b2f8:	1885c83a 	sub	r2,r3,r2
 800b2fc:	113fe316 	blt	r2,r4,800b28c <__alt_data_end+0xf800b28c>
 800b300:	8809883a 	mov	r4,r17
 800b304:	800b883a 	mov	r5,r16
 800b308:	8005f2c0 	call	8005f2c <_fflush_r>
 800b30c:	10000e1e 	bne	r2,zero,800b348 <__swbuf_r+0x120>
 800b310:	80c00017 	ldw	r3,0(r16)
 800b314:	81000217 	ldw	r4,8(r16)
 800b318:	00800044 	movi	r2,1
 800b31c:	19400044 	addi	r5,r3,1
 800b320:	213fffc4 	addi	r4,r4,-1
 800b324:	81400015 	stw	r5,0(r16)
 800b328:	81000215 	stw	r4,8(r16)
 800b32c:	1c800005 	stb	r18,0(r3)
 800b330:	80c00517 	ldw	r3,20(r16)
 800b334:	18bfde1e 	bne	r3,r2,800b2b0 <__alt_data_end+0xf800b2b0>
 800b338:	8809883a 	mov	r4,r17
 800b33c:	800b883a 	mov	r5,r16
 800b340:	8005f2c0 	call	8005f2c <_fflush_r>
 800b344:	103fdd26 	beq	r2,zero,800b2bc <__alt_data_end+0xf800b2bc>
 800b348:	00bfffc4 	movi	r2,-1
 800b34c:	003fdc06 	br	800b2c0 <__alt_data_end+0xf800b2c0>
 800b350:	00800284 	movi	r2,10
 800b354:	90bfd91e 	bne	r18,r2,800b2bc <__alt_data_end+0xf800b2bc>
 800b358:	8809883a 	mov	r4,r17
 800b35c:	800b883a 	mov	r5,r16
 800b360:	8005f2c0 	call	8005f2c <_fflush_r>
 800b364:	103fd526 	beq	r2,zero,800b2bc <__alt_data_end+0xf800b2bc>
 800b368:	003ff706 	br	800b348 <__alt_data_end+0xf800b348>
 800b36c:	8809883a 	mov	r4,r17
 800b370:	800b883a 	mov	r5,r16
 800b374:	80045900 	call	8004590 <__swsetup_r>
 800b378:	80c0030b 	ldhu	r3,12(r16)
 800b37c:	1000041e 	bne	r2,zero,800b390 <__swbuf_r+0x168>
 800b380:	80800417 	ldw	r2,16(r16)
 800b384:	003fba06 	br	800b270 <__alt_data_end+0xf800b270>
 800b388:	800624c0 	call	800624c <__sinit>
 800b38c:	003fb106 	br	800b254 <__alt_data_end+0xf800b254>
 800b390:	18c01014 	ori	r3,r3,64
 800b394:	80c0030d 	sth	r3,12(r16)
 800b398:	00c00244 	movi	r3,9
 800b39c:	00bfffc4 	movi	r2,-1
 800b3a0:	88c00015 	stw	r3,0(r17)
 800b3a4:	003fc606 	br	800b2c0 <__alt_data_end+0xf800b2c0>

0800b3a8 <__swbuf>:
 800b3a8:	00c20074 	movhi	r3,2049
 800b3ac:	18ce1004 	addi	r3,r3,14400
 800b3b0:	2005883a 	mov	r2,r4
 800b3b4:	19000017 	ldw	r4,0(r3)
 800b3b8:	280d883a 	mov	r6,r5
 800b3bc:	100b883a 	mov	r5,r2
 800b3c0:	800b2281 	jmpi	800b228 <__swbuf_r>

0800b3c4 <_wcrtomb_r>:
 800b3c4:	defff604 	addi	sp,sp,-40
 800b3c8:	dc800815 	stw	r18,32(sp)
 800b3cc:	dc400715 	stw	r17,28(sp)
 800b3d0:	dc000615 	stw	r16,24(sp)
 800b3d4:	00820074 	movhi	r2,2049
 800b3d8:	108e1404 	addi	r2,r2,14416
 800b3dc:	dfc00915 	stw	ra,36(sp)
 800b3e0:	2021883a 	mov	r16,r4
 800b3e4:	3823883a 	mov	r17,r7
 800b3e8:	14800017 	ldw	r18,0(r2)
 800b3ec:	28001426 	beq	r5,zero,800b440 <_wcrtomb_r+0x7c>
 800b3f0:	d9400415 	stw	r5,16(sp)
 800b3f4:	d9800515 	stw	r6,20(sp)
 800b3f8:	8006fcc0 	call	8006fcc <__locale_charset>
 800b3fc:	d9400417 	ldw	r5,16(sp)
 800b400:	d9800517 	ldw	r6,20(sp)
 800b404:	8009883a 	mov	r4,r16
 800b408:	dc400015 	stw	r17,0(sp)
 800b40c:	100f883a 	mov	r7,r2
 800b410:	903ee83a 	callr	r18
 800b414:	00ffffc4 	movi	r3,-1
 800b418:	10c0031e 	bne	r2,r3,800b428 <_wcrtomb_r+0x64>
 800b41c:	88000015 	stw	zero,0(r17)
 800b420:	00c02284 	movi	r3,138
 800b424:	80c00015 	stw	r3,0(r16)
 800b428:	dfc00917 	ldw	ra,36(sp)
 800b42c:	dc800817 	ldw	r18,32(sp)
 800b430:	dc400717 	ldw	r17,28(sp)
 800b434:	dc000617 	ldw	r16,24(sp)
 800b438:	dec00a04 	addi	sp,sp,40
 800b43c:	f800283a 	ret
 800b440:	8006fcc0 	call	8006fcc <__locale_charset>
 800b444:	8009883a 	mov	r4,r16
 800b448:	dc400015 	stw	r17,0(sp)
 800b44c:	d9400104 	addi	r5,sp,4
 800b450:	000d883a 	mov	r6,zero
 800b454:	100f883a 	mov	r7,r2
 800b458:	903ee83a 	callr	r18
 800b45c:	003fed06 	br	800b414 <__alt_data_end+0xf800b414>

0800b460 <wcrtomb>:
 800b460:	defff504 	addi	sp,sp,-44
 800b464:	dc400515 	stw	r17,20(sp)
 800b468:	dc000415 	stw	r16,16(sp)
 800b46c:	dfc00a15 	stw	ra,40(sp)
 800b470:	dd400915 	stw	r21,36(sp)
 800b474:	dd000815 	stw	r20,32(sp)
 800b478:	dcc00715 	stw	r19,28(sp)
 800b47c:	dc800615 	stw	r18,24(sp)
 800b480:	2021883a 	mov	r16,r4
 800b484:	3023883a 	mov	r17,r6
 800b488:	20001d26 	beq	r4,zero,800b500 <wcrtomb+0xa0>
 800b48c:	04820074 	movhi	r18,2049
 800b490:	948e1004 	addi	r18,r18,14400
 800b494:	95400017 	ldw	r21,0(r18)
 800b498:	00820074 	movhi	r2,2049
 800b49c:	108e1404 	addi	r2,r2,14416
 800b4a0:	15000017 	ldw	r20,0(r2)
 800b4a4:	2827883a 	mov	r19,r5
 800b4a8:	8006fcc0 	call	8006fcc <__locale_charset>
 800b4ac:	a809883a 	mov	r4,r21
 800b4b0:	dc400015 	stw	r17,0(sp)
 800b4b4:	800b883a 	mov	r5,r16
 800b4b8:	980d883a 	mov	r6,r19
 800b4bc:	100f883a 	mov	r7,r2
 800b4c0:	a03ee83a 	callr	r20
 800b4c4:	00ffffc4 	movi	r3,-1
 800b4c8:	10c0041e 	bne	r2,r3,800b4dc <wcrtomb+0x7c>
 800b4cc:	90c00017 	ldw	r3,0(r18)
 800b4d0:	01002284 	movi	r4,138
 800b4d4:	88000015 	stw	zero,0(r17)
 800b4d8:	19000015 	stw	r4,0(r3)
 800b4dc:	dfc00a17 	ldw	ra,40(sp)
 800b4e0:	dd400917 	ldw	r21,36(sp)
 800b4e4:	dd000817 	ldw	r20,32(sp)
 800b4e8:	dcc00717 	ldw	r19,28(sp)
 800b4ec:	dc800617 	ldw	r18,24(sp)
 800b4f0:	dc400517 	ldw	r17,20(sp)
 800b4f4:	dc000417 	ldw	r16,16(sp)
 800b4f8:	dec00b04 	addi	sp,sp,44
 800b4fc:	f800283a 	ret
 800b500:	04820074 	movhi	r18,2049
 800b504:	948e1004 	addi	r18,r18,14400
 800b508:	94c00017 	ldw	r19,0(r18)
 800b50c:	00820074 	movhi	r2,2049
 800b510:	108e1404 	addi	r2,r2,14416
 800b514:	14000017 	ldw	r16,0(r2)
 800b518:	8006fcc0 	call	8006fcc <__locale_charset>
 800b51c:	9809883a 	mov	r4,r19
 800b520:	dc400015 	stw	r17,0(sp)
 800b524:	d9400104 	addi	r5,sp,4
 800b528:	000d883a 	mov	r6,zero
 800b52c:	100f883a 	mov	r7,r2
 800b530:	803ee83a 	callr	r16
 800b534:	003fe306 	br	800b4c4 <__alt_data_end+0xf800b4c4>

0800b538 <__ascii_wctomb>:
 800b538:	28000526 	beq	r5,zero,800b550 <__ascii_wctomb+0x18>
 800b53c:	00803fc4 	movi	r2,255
 800b540:	11800536 	bltu	r2,r6,800b558 <__ascii_wctomb+0x20>
 800b544:	29800005 	stb	r6,0(r5)
 800b548:	00800044 	movi	r2,1
 800b54c:	f800283a 	ret
 800b550:	0005883a 	mov	r2,zero
 800b554:	f800283a 	ret
 800b558:	00802284 	movi	r2,138
 800b55c:	20800015 	stw	r2,0(r4)
 800b560:	00bfffc4 	movi	r2,-1
 800b564:	f800283a 	ret

0800b568 <_wctomb_r>:
 800b568:	defff904 	addi	sp,sp,-28
 800b56c:	00820074 	movhi	r2,2049
 800b570:	108e1404 	addi	r2,r2,14416
 800b574:	dfc00615 	stw	ra,24(sp)
 800b578:	dc400515 	stw	r17,20(sp)
 800b57c:	dc000415 	stw	r16,16(sp)
 800b580:	3823883a 	mov	r17,r7
 800b584:	14000017 	ldw	r16,0(r2)
 800b588:	d9000115 	stw	r4,4(sp)
 800b58c:	d9400215 	stw	r5,8(sp)
 800b590:	d9800315 	stw	r6,12(sp)
 800b594:	8006fcc0 	call	8006fcc <__locale_charset>
 800b598:	d9000117 	ldw	r4,4(sp)
 800b59c:	d9400217 	ldw	r5,8(sp)
 800b5a0:	d9800317 	ldw	r6,12(sp)
 800b5a4:	dc400015 	stw	r17,0(sp)
 800b5a8:	100f883a 	mov	r7,r2
 800b5ac:	803ee83a 	callr	r16
 800b5b0:	dfc00617 	ldw	ra,24(sp)
 800b5b4:	dc400517 	ldw	r17,20(sp)
 800b5b8:	dc000417 	ldw	r16,16(sp)
 800b5bc:	dec00704 	addi	sp,sp,28
 800b5c0:	f800283a 	ret

0800b5c4 <__udivdi3>:
 800b5c4:	defff504 	addi	sp,sp,-44
 800b5c8:	dc800315 	stw	r18,12(sp)
 800b5cc:	dc400215 	stw	r17,8(sp)
 800b5d0:	dfc00a15 	stw	ra,40(sp)
 800b5d4:	df000915 	stw	fp,36(sp)
 800b5d8:	ddc00815 	stw	r23,32(sp)
 800b5dc:	dd800715 	stw	r22,28(sp)
 800b5e0:	dd400615 	stw	r21,24(sp)
 800b5e4:	dd000515 	stw	r20,20(sp)
 800b5e8:	dcc00415 	stw	r19,16(sp)
 800b5ec:	dc000115 	stw	r16,4(sp)
 800b5f0:	2025883a 	mov	r18,r4
 800b5f4:	2823883a 	mov	r17,r5
 800b5f8:	3800481e 	bne	r7,zero,800b71c <__udivdi3+0x158>
 800b5fc:	3021883a 	mov	r16,r6
 800b600:	2027883a 	mov	r19,r4
 800b604:	29805a2e 	bgeu	r5,r6,800b770 <__udivdi3+0x1ac>
 800b608:	00bfffd4 	movui	r2,65535
 800b60c:	2829883a 	mov	r20,r5
 800b610:	1180b436 	bltu	r2,r6,800b8e4 <__udivdi3+0x320>
 800b614:	00803fc4 	movi	r2,255
 800b618:	11816736 	bltu	r2,r6,800bbb8 <__udivdi3+0x5f4>
 800b61c:	0005883a 	mov	r2,zero
 800b620:	0007883a 	mov	r3,zero
 800b624:	3084d83a 	srl	r2,r6,r2
 800b628:	01020074 	movhi	r4,2049
 800b62c:	21071604 	addi	r4,r4,7256
 800b630:	2085883a 	add	r2,r4,r2
 800b634:	10800003 	ldbu	r2,0(r2)
 800b638:	10c7883a 	add	r3,r2,r3
 800b63c:	00800804 	movi	r2,32
 800b640:	10c5c83a 	sub	r2,r2,r3
 800b644:	10000526 	beq	r2,zero,800b65c <__udivdi3+0x98>
 800b648:	88a2983a 	sll	r17,r17,r2
 800b64c:	90c6d83a 	srl	r3,r18,r3
 800b650:	30a0983a 	sll	r16,r6,r2
 800b654:	90a6983a 	sll	r19,r18,r2
 800b658:	88e8b03a 	or	r20,r17,r3
 800b65c:	8022d43a 	srli	r17,r16,16
 800b660:	a009883a 	mov	r4,r20
 800b664:	857fffcc 	andi	r21,r16,65535
 800b668:	880b883a 	mov	r5,r17
 800b66c:	800c3580 	call	800c358 <__umodsi3>
 800b670:	a009883a 	mov	r4,r20
 800b674:	880b883a 	mov	r5,r17
 800b678:	102d883a 	mov	r22,r2
 800b67c:	800c3500 	call	800c350 <__udivsi3>
 800b680:	1009883a 	mov	r4,r2
 800b684:	a80b883a 	mov	r5,r21
 800b688:	1025883a 	mov	r18,r2
 800b68c:	800c3600 	call	800c360 <__mulsi3>
 800b690:	1009883a 	mov	r4,r2
 800b694:	b006943a 	slli	r3,r22,16
 800b698:	9804d43a 	srli	r2,r19,16
 800b69c:	1886b03a 	or	r3,r3,r2
 800b6a0:	1900052e 	bgeu	r3,r4,800b6b8 <__udivdi3+0xf4>
 800b6a4:	1c07883a 	add	r3,r3,r16
 800b6a8:	90bfffc4 	addi	r2,r18,-1
 800b6ac:	1c000136 	bltu	r3,r16,800b6b4 <__udivdi3+0xf0>
 800b6b0:	19015636 	bltu	r3,r4,800bc0c <__udivdi3+0x648>
 800b6b4:	1025883a 	mov	r18,r2
 800b6b8:	1929c83a 	sub	r20,r3,r4
 800b6bc:	880b883a 	mov	r5,r17
 800b6c0:	a009883a 	mov	r4,r20
 800b6c4:	800c3580 	call	800c358 <__umodsi3>
 800b6c8:	102d883a 	mov	r22,r2
 800b6cc:	880b883a 	mov	r5,r17
 800b6d0:	a009883a 	mov	r4,r20
 800b6d4:	b02c943a 	slli	r22,r22,16
 800b6d8:	800c3500 	call	800c350 <__udivsi3>
 800b6dc:	1009883a 	mov	r4,r2
 800b6e0:	a80b883a 	mov	r5,r21
 800b6e4:	9cffffcc 	andi	r19,r19,65535
 800b6e8:	1023883a 	mov	r17,r2
 800b6ec:	b4e6b03a 	or	r19,r22,r19
 800b6f0:	800c3600 	call	800c360 <__mulsi3>
 800b6f4:	9880052e 	bgeu	r19,r2,800b70c <__udivdi3+0x148>
 800b6f8:	9c27883a 	add	r19,r19,r16
 800b6fc:	88ffffc4 	addi	r3,r17,-1
 800b700:	9c011436 	bltu	r19,r16,800bb54 <__udivdi3+0x590>
 800b704:	9881132e 	bgeu	r19,r2,800bb54 <__udivdi3+0x590>
 800b708:	8c7fff84 	addi	r17,r17,-2
 800b70c:	9024943a 	slli	r18,r18,16
 800b710:	0007883a 	mov	r3,zero
 800b714:	8c84b03a 	or	r2,r17,r18
 800b718:	00006106 	br	800b8a0 <__udivdi3+0x2dc>
 800b71c:	29c05e36 	bltu	r5,r7,800b898 <__udivdi3+0x2d4>
 800b720:	00bfffd4 	movui	r2,65535
 800b724:	11c06a2e 	bgeu	r2,r7,800b8d0 <__udivdi3+0x30c>
 800b728:	00804034 	movhi	r2,256
 800b72c:	10bfffc4 	addi	r2,r2,-1
 800b730:	11c11236 	bltu	r2,r7,800bb7c <__udivdi3+0x5b8>
 800b734:	00c00404 	movi	r3,16
 800b738:	180b883a 	mov	r5,r3
 800b73c:	38c6d83a 	srl	r3,r7,r3
 800b740:	01020074 	movhi	r4,2049
 800b744:	21071604 	addi	r4,r4,7256
 800b748:	04000804 	movi	r16,32
 800b74c:	20c7883a 	add	r3,r4,r3
 800b750:	18800003 	ldbu	r2,0(r3)
 800b754:	1145883a 	add	r2,r2,r5
 800b758:	80a1c83a 	sub	r16,r16,r2
 800b75c:	80006c1e 	bne	r16,zero,800b910 <__udivdi3+0x34c>
 800b760:	3c411836 	bltu	r7,r17,800bbc4 <__udivdi3+0x600>
 800b764:	9185403a 	cmpgeu	r2,r18,r6
 800b768:	0007883a 	mov	r3,zero
 800b76c:	00004c06 	br	800b8a0 <__udivdi3+0x2dc>
 800b770:	3000041e 	bne	r6,zero,800b784 <__udivdi3+0x1c0>
 800b774:	01000044 	movi	r4,1
 800b778:	000b883a 	mov	r5,zero
 800b77c:	800c3500 	call	800c350 <__udivsi3>
 800b780:	1021883a 	mov	r16,r2
 800b784:	00bfffd4 	movui	r2,65535
 800b788:	14005c2e 	bgeu	r2,r16,800b8fc <__udivdi3+0x338>
 800b78c:	00804034 	movhi	r2,256
 800b790:	10bfffc4 	addi	r2,r2,-1
 800b794:	14010236 	bltu	r2,r16,800bba0 <__udivdi3+0x5dc>
 800b798:	00800404 	movi	r2,16
 800b79c:	1007883a 	mov	r3,r2
 800b7a0:	8084d83a 	srl	r2,r16,r2
 800b7a4:	01020074 	movhi	r4,2049
 800b7a8:	21071604 	addi	r4,r4,7256
 800b7ac:	2085883a 	add	r2,r4,r2
 800b7b0:	10800003 	ldbu	r2,0(r2)
 800b7b4:	10c7883a 	add	r3,r2,r3
 800b7b8:	00800804 	movi	r2,32
 800b7bc:	10c5c83a 	sub	r2,r2,r3
 800b7c0:	1000aa1e 	bne	r2,zero,800ba6c <__udivdi3+0x4a8>
 800b7c4:	8028d43a 	srli	r20,r16,16
 800b7c8:	8c23c83a 	sub	r17,r17,r16
 800b7cc:	857fffcc 	andi	r21,r16,65535
 800b7d0:	00c00044 	movi	r3,1
 800b7d4:	8809883a 	mov	r4,r17
 800b7d8:	a00b883a 	mov	r5,r20
 800b7dc:	d8c00015 	stw	r3,0(sp)
 800b7e0:	800c3580 	call	800c358 <__umodsi3>
 800b7e4:	8809883a 	mov	r4,r17
 800b7e8:	a00b883a 	mov	r5,r20
 800b7ec:	102d883a 	mov	r22,r2
 800b7f0:	800c3500 	call	800c350 <__udivsi3>
 800b7f4:	1009883a 	mov	r4,r2
 800b7f8:	a80b883a 	mov	r5,r21
 800b7fc:	1025883a 	mov	r18,r2
 800b800:	800c3600 	call	800c360 <__mulsi3>
 800b804:	1009883a 	mov	r4,r2
 800b808:	b00e943a 	slli	r7,r22,16
 800b80c:	9804d43a 	srli	r2,r19,16
 800b810:	d8c00017 	ldw	r3,0(sp)
 800b814:	388eb03a 	or	r7,r7,r2
 800b818:	3900052e 	bgeu	r7,r4,800b830 <__udivdi3+0x26c>
 800b81c:	3c0f883a 	add	r7,r7,r16
 800b820:	90bfffc4 	addi	r2,r18,-1
 800b824:	3c000136 	bltu	r7,r16,800b82c <__udivdi3+0x268>
 800b828:	3900f536 	bltu	r7,r4,800bc00 <__udivdi3+0x63c>
 800b82c:	1025883a 	mov	r18,r2
 800b830:	3923c83a 	sub	r17,r7,r4
 800b834:	8809883a 	mov	r4,r17
 800b838:	a00b883a 	mov	r5,r20
 800b83c:	d8c00015 	stw	r3,0(sp)
 800b840:	800c3580 	call	800c358 <__umodsi3>
 800b844:	102d883a 	mov	r22,r2
 800b848:	8809883a 	mov	r4,r17
 800b84c:	a00b883a 	mov	r5,r20
 800b850:	b02c943a 	slli	r22,r22,16
 800b854:	800c3500 	call	800c350 <__udivsi3>
 800b858:	1009883a 	mov	r4,r2
 800b85c:	a80b883a 	mov	r5,r21
 800b860:	9cffffcc 	andi	r19,r19,65535
 800b864:	1023883a 	mov	r17,r2
 800b868:	b4e6b03a 	or	r19,r22,r19
 800b86c:	800c3600 	call	800c360 <__mulsi3>
 800b870:	d8c00017 	ldw	r3,0(sp)
 800b874:	9880052e 	bgeu	r19,r2,800b88c <__udivdi3+0x2c8>
 800b878:	9c27883a 	add	r19,r19,r16
 800b87c:	893fffc4 	addi	r4,r17,-1
 800b880:	9c00b236 	bltu	r19,r16,800bb4c <__udivdi3+0x588>
 800b884:	9880b12e 	bgeu	r19,r2,800bb4c <__udivdi3+0x588>
 800b888:	8c7fff84 	addi	r17,r17,-2
 800b88c:	9024943a 	slli	r18,r18,16
 800b890:	8c84b03a 	or	r2,r17,r18
 800b894:	00000206 	br	800b8a0 <__udivdi3+0x2dc>
 800b898:	0007883a 	mov	r3,zero
 800b89c:	0005883a 	mov	r2,zero
 800b8a0:	dfc00a17 	ldw	ra,40(sp)
 800b8a4:	df000917 	ldw	fp,36(sp)
 800b8a8:	ddc00817 	ldw	r23,32(sp)
 800b8ac:	dd800717 	ldw	r22,28(sp)
 800b8b0:	dd400617 	ldw	r21,24(sp)
 800b8b4:	dd000517 	ldw	r20,20(sp)
 800b8b8:	dcc00417 	ldw	r19,16(sp)
 800b8bc:	dc800317 	ldw	r18,12(sp)
 800b8c0:	dc400217 	ldw	r17,8(sp)
 800b8c4:	dc000117 	ldw	r16,4(sp)
 800b8c8:	dec00b04 	addi	sp,sp,44
 800b8cc:	f800283a 	ret
 800b8d0:	00803fc4 	movi	r2,255
 800b8d4:	11c0ac36 	bltu	r2,r7,800bb88 <__udivdi3+0x5c4>
 800b8d8:	0007883a 	mov	r3,zero
 800b8dc:	000b883a 	mov	r5,zero
 800b8e0:	003f9606 	br	800b73c <__alt_data_end+0xf800b73c>
 800b8e4:	00804034 	movhi	r2,256
 800b8e8:	10bfffc4 	addi	r2,r2,-1
 800b8ec:	1180a936 	bltu	r2,r6,800bb94 <__udivdi3+0x5d0>
 800b8f0:	00800404 	movi	r2,16
 800b8f4:	1007883a 	mov	r3,r2
 800b8f8:	003f4a06 	br	800b624 <__alt_data_end+0xf800b624>
 800b8fc:	00803fc4 	movi	r2,255
 800b900:	1400aa36 	bltu	r2,r16,800bbac <__udivdi3+0x5e8>
 800b904:	0005883a 	mov	r2,zero
 800b908:	0007883a 	mov	r3,zero
 800b90c:	003fa406 	br	800b7a0 <__alt_data_end+0xf800b7a0>
 800b910:	3c0e983a 	sll	r7,r7,r16
 800b914:	3086d83a 	srl	r3,r6,r2
 800b918:	88aed83a 	srl	r23,r17,r2
 800b91c:	9084d83a 	srl	r2,r18,r2
 800b920:	38e6b03a 	or	r19,r7,r3
 800b924:	9828d43a 	srli	r20,r19,16
 800b928:	8c22983a 	sll	r17,r17,r16
 800b92c:	b809883a 	mov	r4,r23
 800b930:	a00b883a 	mov	r5,r20
 800b934:	342a983a 	sll	r21,r6,r16
 800b938:	88a2b03a 	or	r17,r17,r2
 800b93c:	800c3580 	call	800c358 <__umodsi3>
 800b940:	b809883a 	mov	r4,r23
 800b944:	a00b883a 	mov	r5,r20
 800b948:	1039883a 	mov	fp,r2
 800b94c:	9dbfffcc 	andi	r22,r19,65535
 800b950:	800c3500 	call	800c350 <__udivsi3>
 800b954:	1009883a 	mov	r4,r2
 800b958:	b00b883a 	mov	r5,r22
 800b95c:	102f883a 	mov	r23,r2
 800b960:	800c3600 	call	800c360 <__mulsi3>
 800b964:	1009883a 	mov	r4,r2
 800b968:	e00e943a 	slli	r7,fp,16
 800b96c:	8804d43a 	srli	r2,r17,16
 800b970:	388eb03a 	or	r7,r7,r2
 800b974:	3900042e 	bgeu	r7,r4,800b988 <__udivdi3+0x3c4>
 800b978:	3ccf883a 	add	r7,r7,r19
 800b97c:	b8bfffc4 	addi	r2,r23,-1
 800b980:	3cc0972e 	bgeu	r7,r19,800bbe0 <__udivdi3+0x61c>
 800b984:	102f883a 	mov	r23,r2
 800b988:	3939c83a 	sub	fp,r7,r4
 800b98c:	a00b883a 	mov	r5,r20
 800b990:	e009883a 	mov	r4,fp
 800b994:	800c3580 	call	800c358 <__umodsi3>
 800b998:	a00b883a 	mov	r5,r20
 800b99c:	e009883a 	mov	r4,fp
 800b9a0:	d8800015 	stw	r2,0(sp)
 800b9a4:	800c3500 	call	800c350 <__udivsi3>
 800b9a8:	1009883a 	mov	r4,r2
 800b9ac:	b00b883a 	mov	r5,r22
 800b9b0:	1029883a 	mov	r20,r2
 800b9b4:	800c3600 	call	800c360 <__mulsi3>
 800b9b8:	d8c00017 	ldw	r3,0(sp)
 800b9bc:	8c7fffcc 	andi	r17,r17,65535
 800b9c0:	1806943a 	slli	r3,r3,16
 800b9c4:	1c46b03a 	or	r3,r3,r17
 800b9c8:	1880042e 	bgeu	r3,r2,800b9dc <__udivdi3+0x418>
 800b9cc:	1cc7883a 	add	r3,r3,r19
 800b9d0:	a13fffc4 	addi	r4,r20,-1
 800b9d4:	1cc07e2e 	bgeu	r3,r19,800bbd0 <__udivdi3+0x60c>
 800b9d8:	2029883a 	mov	r20,r4
 800b9dc:	b82e943a 	slli	r23,r23,16
 800b9e0:	a822d43a 	srli	r17,r21,16
 800b9e4:	ad7fffcc 	andi	r21,r21,65535
 800b9e8:	a5e8b03a 	or	r20,r20,r23
 800b9ec:	a5bfffcc 	andi	r22,r20,65535
 800b9f0:	b009883a 	mov	r4,r22
 800b9f4:	a80b883a 	mov	r5,r21
 800b9f8:	18afc83a 	sub	r23,r3,r2
 800b9fc:	a026d43a 	srli	r19,r20,16
 800ba00:	800c3600 	call	800c360 <__mulsi3>
 800ba04:	b009883a 	mov	r4,r22
 800ba08:	880b883a 	mov	r5,r17
 800ba0c:	1039883a 	mov	fp,r2
 800ba10:	800c3600 	call	800c360 <__mulsi3>
 800ba14:	a80b883a 	mov	r5,r21
 800ba18:	9809883a 	mov	r4,r19
 800ba1c:	102d883a 	mov	r22,r2
 800ba20:	800c3600 	call	800c360 <__mulsi3>
 800ba24:	9809883a 	mov	r4,r19
 800ba28:	880b883a 	mov	r5,r17
 800ba2c:	102b883a 	mov	r21,r2
 800ba30:	800c3600 	call	800c360 <__mulsi3>
 800ba34:	100b883a 	mov	r5,r2
 800ba38:	e004d43a 	srli	r2,fp,16
 800ba3c:	ad89883a 	add	r4,r21,r22
 800ba40:	2089883a 	add	r4,r4,r2
 800ba44:	2540022e 	bgeu	r4,r21,800ba50 <__udivdi3+0x48c>
 800ba48:	00800074 	movhi	r2,1
 800ba4c:	288b883a 	add	r5,r5,r2
 800ba50:	2004d43a 	srli	r2,r4,16
 800ba54:	288b883a 	add	r5,r5,r2
 800ba58:	b9404536 	bltu	r23,r5,800bb70 <__udivdi3+0x5ac>
 800ba5c:	b9403f26 	beq	r23,r5,800bb5c <__udivdi3+0x598>
 800ba60:	a005883a 	mov	r2,r20
 800ba64:	0007883a 	mov	r3,zero
 800ba68:	003f8d06 	br	800b8a0 <__alt_data_end+0xf800b8a0>
 800ba6c:	80a0983a 	sll	r16,r16,r2
 800ba70:	88eed83a 	srl	r23,r17,r3
 800ba74:	90c6d83a 	srl	r3,r18,r3
 800ba78:	8028d43a 	srli	r20,r16,16
 800ba7c:	88a2983a 	sll	r17,r17,r2
 800ba80:	b809883a 	mov	r4,r23
 800ba84:	a00b883a 	mov	r5,r20
 800ba88:	88ecb03a 	or	r22,r17,r3
 800ba8c:	90a6983a 	sll	r19,r18,r2
 800ba90:	800c3580 	call	800c358 <__umodsi3>
 800ba94:	b809883a 	mov	r4,r23
 800ba98:	a00b883a 	mov	r5,r20
 800ba9c:	1023883a 	mov	r17,r2
 800baa0:	857fffcc 	andi	r21,r16,65535
 800baa4:	800c3500 	call	800c350 <__udivsi3>
 800baa8:	1009883a 	mov	r4,r2
 800baac:	a80b883a 	mov	r5,r21
 800bab0:	102f883a 	mov	r23,r2
 800bab4:	800c3600 	call	800c360 <__mulsi3>
 800bab8:	1009883a 	mov	r4,r2
 800babc:	880c943a 	slli	r6,r17,16
 800bac0:	b004d43a 	srli	r2,r22,16
 800bac4:	308cb03a 	or	r6,r6,r2
 800bac8:	3100062e 	bgeu	r6,r4,800bae4 <__udivdi3+0x520>
 800bacc:	340d883a 	add	r6,r6,r16
 800bad0:	b8bfffc4 	addi	r2,r23,-1
 800bad4:	34004836 	bltu	r6,r16,800bbf8 <__udivdi3+0x634>
 800bad8:	3100472e 	bgeu	r6,r4,800bbf8 <__udivdi3+0x634>
 800badc:	bdffff84 	addi	r23,r23,-2
 800bae0:	340d883a 	add	r6,r6,r16
 800bae4:	3125c83a 	sub	r18,r6,r4
 800bae8:	9009883a 	mov	r4,r18
 800baec:	a00b883a 	mov	r5,r20
 800baf0:	800c3580 	call	800c358 <__umodsi3>
 800baf4:	1023883a 	mov	r17,r2
 800baf8:	9009883a 	mov	r4,r18
 800bafc:	a00b883a 	mov	r5,r20
 800bb00:	8822943a 	slli	r17,r17,16
 800bb04:	800c3500 	call	800c350 <__udivsi3>
 800bb08:	1009883a 	mov	r4,r2
 800bb0c:	a80b883a 	mov	r5,r21
 800bb10:	b5bfffcc 	andi	r22,r22,65535
 800bb14:	1025883a 	mov	r18,r2
 800bb18:	8da2b03a 	or	r17,r17,r22
 800bb1c:	800c3600 	call	800c360 <__mulsi3>
 800bb20:	8880062e 	bgeu	r17,r2,800bb3c <__udivdi3+0x578>
 800bb24:	8c23883a 	add	r17,r17,r16
 800bb28:	90ffffc4 	addi	r3,r18,-1
 800bb2c:	8c003036 	bltu	r17,r16,800bbf0 <__udivdi3+0x62c>
 800bb30:	88802f2e 	bgeu	r17,r2,800bbf0 <__udivdi3+0x62c>
 800bb34:	94bfff84 	addi	r18,r18,-2
 800bb38:	8c23883a 	add	r17,r17,r16
 800bb3c:	b806943a 	slli	r3,r23,16
 800bb40:	88a3c83a 	sub	r17,r17,r2
 800bb44:	90c6b03a 	or	r3,r18,r3
 800bb48:	003f2206 	br	800b7d4 <__alt_data_end+0xf800b7d4>
 800bb4c:	2023883a 	mov	r17,r4
 800bb50:	003f4e06 	br	800b88c <__alt_data_end+0xf800b88c>
 800bb54:	1823883a 	mov	r17,r3
 800bb58:	003eec06 	br	800b70c <__alt_data_end+0xf800b70c>
 800bb5c:	2008943a 	slli	r4,r4,16
 800bb60:	9420983a 	sll	r16,r18,r16
 800bb64:	e73fffcc 	andi	fp,fp,65535
 800bb68:	2709883a 	add	r4,r4,fp
 800bb6c:	813fbc2e 	bgeu	r16,r4,800ba60 <__alt_data_end+0xf800ba60>
 800bb70:	a0bfffc4 	addi	r2,r20,-1
 800bb74:	0007883a 	mov	r3,zero
 800bb78:	003f4906 	br	800b8a0 <__alt_data_end+0xf800b8a0>
 800bb7c:	00c00604 	movi	r3,24
 800bb80:	180b883a 	mov	r5,r3
 800bb84:	003eed06 	br	800b73c <__alt_data_end+0xf800b73c>
 800bb88:	00c00204 	movi	r3,8
 800bb8c:	180b883a 	mov	r5,r3
 800bb90:	003eea06 	br	800b73c <__alt_data_end+0xf800b73c>
 800bb94:	00800604 	movi	r2,24
 800bb98:	1007883a 	mov	r3,r2
 800bb9c:	003ea106 	br	800b624 <__alt_data_end+0xf800b624>
 800bba0:	00800604 	movi	r2,24
 800bba4:	1007883a 	mov	r3,r2
 800bba8:	003efd06 	br	800b7a0 <__alt_data_end+0xf800b7a0>
 800bbac:	00800204 	movi	r2,8
 800bbb0:	1007883a 	mov	r3,r2
 800bbb4:	003efa06 	br	800b7a0 <__alt_data_end+0xf800b7a0>
 800bbb8:	00800204 	movi	r2,8
 800bbbc:	1007883a 	mov	r3,r2
 800bbc0:	003e9806 	br	800b624 <__alt_data_end+0xf800b624>
 800bbc4:	0007883a 	mov	r3,zero
 800bbc8:	00800044 	movi	r2,1
 800bbcc:	003f3406 	br	800b8a0 <__alt_data_end+0xf800b8a0>
 800bbd0:	18bf812e 	bgeu	r3,r2,800b9d8 <__alt_data_end+0xf800b9d8>
 800bbd4:	a53fff84 	addi	r20,r20,-2
 800bbd8:	1cc7883a 	add	r3,r3,r19
 800bbdc:	003f7f06 	br	800b9dc <__alt_data_end+0xf800b9dc>
 800bbe0:	393f682e 	bgeu	r7,r4,800b984 <__alt_data_end+0xf800b984>
 800bbe4:	bdffff84 	addi	r23,r23,-2
 800bbe8:	3ccf883a 	add	r7,r7,r19
 800bbec:	003f6606 	br	800b988 <__alt_data_end+0xf800b988>
 800bbf0:	1825883a 	mov	r18,r3
 800bbf4:	003fd106 	br	800bb3c <__alt_data_end+0xf800bb3c>
 800bbf8:	102f883a 	mov	r23,r2
 800bbfc:	003fb906 	br	800bae4 <__alt_data_end+0xf800bae4>
 800bc00:	94bfff84 	addi	r18,r18,-2
 800bc04:	3c0f883a 	add	r7,r7,r16
 800bc08:	003f0906 	br	800b830 <__alt_data_end+0xf800b830>
 800bc0c:	94bfff84 	addi	r18,r18,-2
 800bc10:	1c07883a 	add	r3,r3,r16
 800bc14:	003ea806 	br	800b6b8 <__alt_data_end+0xf800b6b8>

0800bc18 <__umoddi3>:
 800bc18:	defff304 	addi	sp,sp,-52
 800bc1c:	dd000715 	stw	r20,28(sp)
 800bc20:	dc800515 	stw	r18,20(sp)
 800bc24:	dc400415 	stw	r17,16(sp)
 800bc28:	dfc00c15 	stw	ra,48(sp)
 800bc2c:	df000b15 	stw	fp,44(sp)
 800bc30:	ddc00a15 	stw	r23,40(sp)
 800bc34:	dd800915 	stw	r22,36(sp)
 800bc38:	dd400815 	stw	r21,32(sp)
 800bc3c:	dcc00615 	stw	r19,24(sp)
 800bc40:	dc000315 	stw	r16,12(sp)
 800bc44:	2025883a 	mov	r18,r4
 800bc48:	2823883a 	mov	r17,r5
 800bc4c:	2829883a 	mov	r20,r5
 800bc50:	38003d1e 	bne	r7,zero,800bd48 <__umoddi3+0x130>
 800bc54:	3021883a 	mov	r16,r6
 800bc58:	2027883a 	mov	r19,r4
 800bc5c:	2980532e 	bgeu	r5,r6,800bdac <__umoddi3+0x194>
 800bc60:	00bfffd4 	movui	r2,65535
 800bc64:	1180a636 	bltu	r2,r6,800bf00 <__umoddi3+0x2e8>
 800bc68:	00803fc4 	movi	r2,255
 800bc6c:	11816336 	bltu	r2,r6,800c1fc <__umoddi3+0x5e4>
 800bc70:	0005883a 	mov	r2,zero
 800bc74:	0009883a 	mov	r4,zero
 800bc78:	3084d83a 	srl	r2,r6,r2
 800bc7c:	00c20074 	movhi	r3,2049
 800bc80:	18c71604 	addi	r3,r3,7256
 800bc84:	1885883a 	add	r2,r3,r2
 800bc88:	10800003 	ldbu	r2,0(r2)
 800bc8c:	1109883a 	add	r4,r2,r4
 800bc90:	00800804 	movi	r2,32
 800bc94:	1105c83a 	sub	r2,r2,r4
 800bc98:	10011026 	beq	r2,zero,800c0dc <__umoddi3+0x4c4>
 800bc9c:	9108d83a 	srl	r4,r18,r4
 800bca0:	88a2983a 	sll	r17,r17,r2
 800bca4:	30a0983a 	sll	r16,r6,r2
 800bca8:	90a6983a 	sll	r19,r18,r2
 800bcac:	8928b03a 	or	r20,r17,r4
 800bcb0:	1025883a 	mov	r18,r2
 800bcb4:	8022d43a 	srli	r17,r16,16
 800bcb8:	a009883a 	mov	r4,r20
 800bcbc:	857fffcc 	andi	r21,r16,65535
 800bcc0:	880b883a 	mov	r5,r17
 800bcc4:	800c3580 	call	800c358 <__umodsi3>
 800bcc8:	a009883a 	mov	r4,r20
 800bccc:	880b883a 	mov	r5,r17
 800bcd0:	102d883a 	mov	r22,r2
 800bcd4:	800c3500 	call	800c350 <__udivsi3>
 800bcd8:	1009883a 	mov	r4,r2
 800bcdc:	a80b883a 	mov	r5,r21
 800bce0:	800c3600 	call	800c360 <__mulsi3>
 800bce4:	1009883a 	mov	r4,r2
 800bce8:	b006943a 	slli	r3,r22,16
 800bcec:	9804d43a 	srli	r2,r19,16
 800bcf0:	1886b03a 	or	r3,r3,r2
 800bcf4:	1900042e 	bgeu	r3,r4,800bd08 <__umoddi3+0xf0>
 800bcf8:	1c07883a 	add	r3,r3,r16
 800bcfc:	1c000236 	bltu	r3,r16,800bd08 <__umoddi3+0xf0>
 800bd00:	1900012e 	bgeu	r3,r4,800bd08 <__umoddi3+0xf0>
 800bd04:	1c07883a 	add	r3,r3,r16
 800bd08:	1929c83a 	sub	r20,r3,r4
 800bd0c:	a009883a 	mov	r4,r20
 800bd10:	880b883a 	mov	r5,r17
 800bd14:	800c3580 	call	800c358 <__umodsi3>
 800bd18:	102d883a 	mov	r22,r2
 800bd1c:	a009883a 	mov	r4,r20
 800bd20:	880b883a 	mov	r5,r17
 800bd24:	b02c943a 	slli	r22,r22,16
 800bd28:	800c3500 	call	800c350 <__udivsi3>
 800bd2c:	1009883a 	mov	r4,r2
 800bd30:	a80b883a 	mov	r5,r21
 800bd34:	9cffffcc 	andi	r19,r19,65535
 800bd38:	800c3600 	call	800c360 <__mulsi3>
 800bd3c:	b4e6b03a 	or	r19,r22,r19
 800bd40:	9880582e 	bgeu	r19,r2,800bea4 <__umoddi3+0x28c>
 800bd44:	00005306 	br	800be94 <__umoddi3+0x27c>
 800bd48:	29c05a36 	bltu	r5,r7,800beb4 <__umoddi3+0x29c>
 800bd4c:	00bfffd4 	movui	r2,65535
 800bd50:	11c0662e 	bgeu	r2,r7,800beec <__umoddi3+0x2d4>
 800bd54:	00804034 	movhi	r2,256
 800bd58:	10bfffc4 	addi	r2,r2,-1
 800bd5c:	11c11b36 	bltu	r2,r7,800c1cc <__umoddi3+0x5b4>
 800bd60:	00c00404 	movi	r3,16
 800bd64:	1827883a 	mov	r19,r3
 800bd68:	38c6d83a 	srl	r3,r7,r3
 800bd6c:	01020074 	movhi	r4,2049
 800bd70:	21071604 	addi	r4,r4,7256
 800bd74:	04000804 	movi	r16,32
 800bd78:	20c7883a 	add	r3,r4,r3
 800bd7c:	18800003 	ldbu	r2,0(r3)
 800bd80:	14e7883a 	add	r19,r2,r19
 800bd84:	84e1c83a 	sub	r16,r16,r19
 800bd88:	8000681e 	bne	r16,zero,800bf2c <__umoddi3+0x314>
 800bd8c:	3c400136 	bltu	r7,r17,800bd94 <__umoddi3+0x17c>
 800bd90:	91812736 	bltu	r18,r6,800c230 <__umoddi3+0x618>
 800bd94:	9185c83a 	sub	r2,r18,r6
 800bd98:	89e3c83a 	sub	r17,r17,r7
 800bd9c:	90a5803a 	cmpltu	r18,r18,r2
 800bda0:	8ca9c83a 	sub	r20,r17,r18
 800bda4:	a007883a 	mov	r3,r20
 800bda8:	00004406 	br	800bebc <__umoddi3+0x2a4>
 800bdac:	3000041e 	bne	r6,zero,800bdc0 <__umoddi3+0x1a8>
 800bdb0:	01000044 	movi	r4,1
 800bdb4:	000b883a 	mov	r5,zero
 800bdb8:	800c3500 	call	800c350 <__udivsi3>
 800bdbc:	1021883a 	mov	r16,r2
 800bdc0:	00bfffd4 	movui	r2,65535
 800bdc4:	1400542e 	bgeu	r2,r16,800bf18 <__umoddi3+0x300>
 800bdc8:	00804034 	movhi	r2,256
 800bdcc:	10bfffc4 	addi	r2,r2,-1
 800bdd0:	14010736 	bltu	r2,r16,800c1f0 <__umoddi3+0x5d8>
 800bdd4:	00800404 	movi	r2,16
 800bdd8:	1007883a 	mov	r3,r2
 800bddc:	8084d83a 	srl	r2,r16,r2
 800bde0:	01020074 	movhi	r4,2049
 800bde4:	21071604 	addi	r4,r4,7256
 800bde8:	05400804 	movi	r21,32
 800bdec:	2085883a 	add	r2,r4,r2
 800bdf0:	10800003 	ldbu	r2,0(r2)
 800bdf4:	10c7883a 	add	r3,r2,r3
 800bdf8:	a8ebc83a 	sub	r21,r21,r3
 800bdfc:	a800b91e 	bne	r21,zero,800c0e4 <__umoddi3+0x4cc>
 800be00:	8028d43a 	srli	r20,r16,16
 800be04:	8c23c83a 	sub	r17,r17,r16
 800be08:	85bfffcc 	andi	r22,r16,65535
 800be0c:	0025883a 	mov	r18,zero
 800be10:	8809883a 	mov	r4,r17
 800be14:	a00b883a 	mov	r5,r20
 800be18:	800c3580 	call	800c358 <__umodsi3>
 800be1c:	8809883a 	mov	r4,r17
 800be20:	a00b883a 	mov	r5,r20
 800be24:	102b883a 	mov	r21,r2
 800be28:	800c3500 	call	800c350 <__udivsi3>
 800be2c:	1009883a 	mov	r4,r2
 800be30:	b00b883a 	mov	r5,r22
 800be34:	800c3600 	call	800c360 <__mulsi3>
 800be38:	1009883a 	mov	r4,r2
 800be3c:	a806943a 	slli	r3,r21,16
 800be40:	9804d43a 	srli	r2,r19,16
 800be44:	1886b03a 	or	r3,r3,r2
 800be48:	1900032e 	bgeu	r3,r4,800be58 <__umoddi3+0x240>
 800be4c:	1c07883a 	add	r3,r3,r16
 800be50:	1c000136 	bltu	r3,r16,800be58 <__umoddi3+0x240>
 800be54:	1900f436 	bltu	r3,r4,800c228 <__umoddi3+0x610>
 800be58:	1923c83a 	sub	r17,r3,r4
 800be5c:	8809883a 	mov	r4,r17
 800be60:	a00b883a 	mov	r5,r20
 800be64:	800c3580 	call	800c358 <__umodsi3>
 800be68:	102b883a 	mov	r21,r2
 800be6c:	8809883a 	mov	r4,r17
 800be70:	a00b883a 	mov	r5,r20
 800be74:	a82a943a 	slli	r21,r21,16
 800be78:	800c3500 	call	800c350 <__udivsi3>
 800be7c:	1009883a 	mov	r4,r2
 800be80:	b00b883a 	mov	r5,r22
 800be84:	9cffffcc 	andi	r19,r19,65535
 800be88:	800c3600 	call	800c360 <__mulsi3>
 800be8c:	ace6b03a 	or	r19,r21,r19
 800be90:	9880042e 	bgeu	r19,r2,800bea4 <__umoddi3+0x28c>
 800be94:	9c27883a 	add	r19,r19,r16
 800be98:	9c000236 	bltu	r19,r16,800bea4 <__umoddi3+0x28c>
 800be9c:	9880012e 	bgeu	r19,r2,800bea4 <__umoddi3+0x28c>
 800bea0:	9c27883a 	add	r19,r19,r16
 800bea4:	9885c83a 	sub	r2,r19,r2
 800bea8:	1484d83a 	srl	r2,r2,r18
 800beac:	0007883a 	mov	r3,zero
 800beb0:	00000206 	br	800bebc <__umoddi3+0x2a4>
 800beb4:	2005883a 	mov	r2,r4
 800beb8:	2807883a 	mov	r3,r5
 800bebc:	dfc00c17 	ldw	ra,48(sp)
 800bec0:	df000b17 	ldw	fp,44(sp)
 800bec4:	ddc00a17 	ldw	r23,40(sp)
 800bec8:	dd800917 	ldw	r22,36(sp)
 800becc:	dd400817 	ldw	r21,32(sp)
 800bed0:	dd000717 	ldw	r20,28(sp)
 800bed4:	dcc00617 	ldw	r19,24(sp)
 800bed8:	dc800517 	ldw	r18,20(sp)
 800bedc:	dc400417 	ldw	r17,16(sp)
 800bee0:	dc000317 	ldw	r16,12(sp)
 800bee4:	dec00d04 	addi	sp,sp,52
 800bee8:	f800283a 	ret
 800beec:	00803fc4 	movi	r2,255
 800bef0:	11c0b336 	bltu	r2,r7,800c1c0 <__umoddi3+0x5a8>
 800bef4:	0007883a 	mov	r3,zero
 800bef8:	0027883a 	mov	r19,zero
 800befc:	003f9a06 	br	800bd68 <__alt_data_end+0xf800bd68>
 800bf00:	00804034 	movhi	r2,256
 800bf04:	10bfffc4 	addi	r2,r2,-1
 800bf08:	1180b336 	bltu	r2,r6,800c1d8 <__umoddi3+0x5c0>
 800bf0c:	00800404 	movi	r2,16
 800bf10:	1009883a 	mov	r4,r2
 800bf14:	003f5806 	br	800bc78 <__alt_data_end+0xf800bc78>
 800bf18:	00803fc4 	movi	r2,255
 800bf1c:	1400b136 	bltu	r2,r16,800c1e4 <__umoddi3+0x5cc>
 800bf20:	0005883a 	mov	r2,zero
 800bf24:	0007883a 	mov	r3,zero
 800bf28:	003fac06 	br	800bddc <__alt_data_end+0xf800bddc>
 800bf2c:	34c4d83a 	srl	r2,r6,r19
 800bf30:	3c0e983a 	sll	r7,r7,r16
 800bf34:	8cf8d83a 	srl	fp,r17,r19
 800bf38:	8c22983a 	sll	r17,r17,r16
 800bf3c:	38a8b03a 	or	r20,r7,r2
 800bf40:	a02ad43a 	srli	r21,r20,16
 800bf44:	94c4d83a 	srl	r2,r18,r19
 800bf48:	e009883a 	mov	r4,fp
 800bf4c:	a80b883a 	mov	r5,r21
 800bf50:	342c983a 	sll	r22,r6,r16
 800bf54:	88a2b03a 	or	r17,r17,r2
 800bf58:	800c3580 	call	800c358 <__umodsi3>
 800bf5c:	e009883a 	mov	r4,fp
 800bf60:	a80b883a 	mov	r5,r21
 800bf64:	a5ffffcc 	andi	r23,r20,65535
 800bf68:	d8800215 	stw	r2,8(sp)
 800bf6c:	800c3500 	call	800c350 <__udivsi3>
 800bf70:	1009883a 	mov	r4,r2
 800bf74:	b80b883a 	mov	r5,r23
 800bf78:	1039883a 	mov	fp,r2
 800bf7c:	800c3600 	call	800c360 <__mulsi3>
 800bf80:	d8c00217 	ldw	r3,8(sp)
 800bf84:	1009883a 	mov	r4,r2
 800bf88:	8804d43a 	srli	r2,r17,16
 800bf8c:	1806943a 	slli	r3,r3,16
 800bf90:	9424983a 	sll	r18,r18,r16
 800bf94:	1886b03a 	or	r3,r3,r2
 800bf98:	1900042e 	bgeu	r3,r4,800bfac <__umoddi3+0x394>
 800bf9c:	1d07883a 	add	r3,r3,r20
 800bfa0:	e0bfffc4 	addi	r2,fp,-1
 800bfa4:	1d009c2e 	bgeu	r3,r20,800c218 <__umoddi3+0x600>
 800bfa8:	1039883a 	mov	fp,r2
 800bfac:	1907c83a 	sub	r3,r3,r4
 800bfb0:	1809883a 	mov	r4,r3
 800bfb4:	a80b883a 	mov	r5,r21
 800bfb8:	d8c00215 	stw	r3,8(sp)
 800bfbc:	800c3580 	call	800c358 <__umodsi3>
 800bfc0:	d8c00217 	ldw	r3,8(sp)
 800bfc4:	a80b883a 	mov	r5,r21
 800bfc8:	d8800015 	stw	r2,0(sp)
 800bfcc:	1809883a 	mov	r4,r3
 800bfd0:	800c3500 	call	800c350 <__udivsi3>
 800bfd4:	1009883a 	mov	r4,r2
 800bfd8:	b80b883a 	mov	r5,r23
 800bfdc:	102b883a 	mov	r21,r2
 800bfe0:	800c3600 	call	800c360 <__mulsi3>
 800bfe4:	d9c00017 	ldw	r7,0(sp)
 800bfe8:	8c7fffcc 	andi	r17,r17,65535
 800bfec:	380e943a 	slli	r7,r7,16
 800bff0:	3c4eb03a 	or	r7,r7,r17
 800bff4:	3880042e 	bgeu	r7,r2,800c008 <__umoddi3+0x3f0>
 800bff8:	3d0f883a 	add	r7,r7,r20
 800bffc:	a8ffffc4 	addi	r3,r21,-1
 800c000:	3d00812e 	bgeu	r7,r20,800c208 <__umoddi3+0x5f0>
 800c004:	182b883a 	mov	r21,r3
 800c008:	e038943a 	slli	fp,fp,16
 800c00c:	b010d43a 	srli	r8,r22,16
 800c010:	b1bfffcc 	andi	r6,r22,65535
 800c014:	af2ab03a 	or	r21,r21,fp
 800c018:	a82ed43a 	srli	r23,r21,16
 800c01c:	ad7fffcc 	andi	r21,r21,65535
 800c020:	300b883a 	mov	r5,r6
 800c024:	a809883a 	mov	r4,r21
 800c028:	38a3c83a 	sub	r17,r7,r2
 800c02c:	d9800115 	stw	r6,4(sp)
 800c030:	da000015 	stw	r8,0(sp)
 800c034:	800c3600 	call	800c360 <__mulsi3>
 800c038:	da000017 	ldw	r8,0(sp)
 800c03c:	a809883a 	mov	r4,r21
 800c040:	1039883a 	mov	fp,r2
 800c044:	400b883a 	mov	r5,r8
 800c048:	da000215 	stw	r8,8(sp)
 800c04c:	800c3600 	call	800c360 <__mulsi3>
 800c050:	d9800117 	ldw	r6,4(sp)
 800c054:	b809883a 	mov	r4,r23
 800c058:	d8800015 	stw	r2,0(sp)
 800c05c:	300b883a 	mov	r5,r6
 800c060:	800c3600 	call	800c360 <__mulsi3>
 800c064:	d8c00217 	ldw	r3,8(sp)
 800c068:	b809883a 	mov	r4,r23
 800c06c:	102b883a 	mov	r21,r2
 800c070:	180b883a 	mov	r5,r3
 800c074:	800c3600 	call	800c360 <__mulsi3>
 800c078:	d9c00017 	ldw	r7,0(sp)
 800c07c:	1007883a 	mov	r3,r2
 800c080:	e004d43a 	srli	r2,fp,16
 800c084:	a9c9883a 	add	r4,r21,r7
 800c088:	2089883a 	add	r4,r4,r2
 800c08c:	2540022e 	bgeu	r4,r21,800c098 <__umoddi3+0x480>
 800c090:	00800074 	movhi	r2,1
 800c094:	1887883a 	add	r3,r3,r2
 800c098:	2004d43a 	srli	r2,r4,16
 800c09c:	2008943a 	slli	r4,r4,16
 800c0a0:	e73fffcc 	andi	fp,fp,65535
 800c0a4:	1887883a 	add	r3,r3,r2
 800c0a8:	2709883a 	add	r4,r4,fp
 800c0ac:	88c03e36 	bltu	r17,r3,800c1a8 <__umoddi3+0x590>
 800c0b0:	88c06226 	beq	r17,r3,800c23c <__umoddi3+0x624>
 800c0b4:	88c7c83a 	sub	r3,r17,r3
 800c0b8:	202d883a 	mov	r22,r4
 800c0bc:	95adc83a 	sub	r22,r18,r22
 800c0c0:	95a5803a 	cmpltu	r18,r18,r22
 800c0c4:	1c87c83a 	sub	r3,r3,r18
 800c0c8:	1cc4983a 	sll	r2,r3,r19
 800c0cc:	b42cd83a 	srl	r22,r22,r16
 800c0d0:	1c06d83a 	srl	r3,r3,r16
 800c0d4:	1584b03a 	or	r2,r2,r22
 800c0d8:	003f7806 	br	800bebc <__alt_data_end+0xf800bebc>
 800c0dc:	0025883a 	mov	r18,zero
 800c0e0:	003ef406 	br	800bcb4 <__alt_data_end+0xf800bcb4>
 800c0e4:	8560983a 	sll	r16,r16,r21
 800c0e8:	88e6d83a 	srl	r19,r17,r3
 800c0ec:	90c6d83a 	srl	r3,r18,r3
 800c0f0:	8028d43a 	srli	r20,r16,16
 800c0f4:	8d62983a 	sll	r17,r17,r21
 800c0f8:	9809883a 	mov	r4,r19
 800c0fc:	a00b883a 	mov	r5,r20
 800c100:	88eeb03a 	or	r23,r17,r3
 800c104:	800c3580 	call	800c358 <__umodsi3>
 800c108:	9809883a 	mov	r4,r19
 800c10c:	a00b883a 	mov	r5,r20
 800c110:	1023883a 	mov	r17,r2
 800c114:	85bfffcc 	andi	r22,r16,65535
 800c118:	800c3500 	call	800c350 <__udivsi3>
 800c11c:	1009883a 	mov	r4,r2
 800c120:	b00b883a 	mov	r5,r22
 800c124:	800c3600 	call	800c360 <__mulsi3>
 800c128:	1007883a 	mov	r3,r2
 800c12c:	8808943a 	slli	r4,r17,16
 800c130:	b804d43a 	srli	r2,r23,16
 800c134:	9566983a 	sll	r19,r18,r21
 800c138:	2088b03a 	or	r4,r4,r2
 800c13c:	20c0042e 	bgeu	r4,r3,800c150 <__umoddi3+0x538>
 800c140:	2409883a 	add	r4,r4,r16
 800c144:	24000236 	bltu	r4,r16,800c150 <__umoddi3+0x538>
 800c148:	20c0012e 	bgeu	r4,r3,800c150 <__umoddi3+0x538>
 800c14c:	2409883a 	add	r4,r4,r16
 800c150:	20e5c83a 	sub	r18,r4,r3
 800c154:	9009883a 	mov	r4,r18
 800c158:	a00b883a 	mov	r5,r20
 800c15c:	800c3580 	call	800c358 <__umodsi3>
 800c160:	1023883a 	mov	r17,r2
 800c164:	9009883a 	mov	r4,r18
 800c168:	a00b883a 	mov	r5,r20
 800c16c:	8822943a 	slli	r17,r17,16
 800c170:	800c3500 	call	800c350 <__udivsi3>
 800c174:	1009883a 	mov	r4,r2
 800c178:	b00b883a 	mov	r5,r22
 800c17c:	bdffffcc 	andi	r23,r23,65535
 800c180:	800c3600 	call	800c360 <__mulsi3>
 800c184:	8de2b03a 	or	r17,r17,r23
 800c188:	8880042e 	bgeu	r17,r2,800c19c <__umoddi3+0x584>
 800c18c:	8c23883a 	add	r17,r17,r16
 800c190:	8c000236 	bltu	r17,r16,800c19c <__umoddi3+0x584>
 800c194:	8880012e 	bgeu	r17,r2,800c19c <__umoddi3+0x584>
 800c198:	8c23883a 	add	r17,r17,r16
 800c19c:	88a3c83a 	sub	r17,r17,r2
 800c1a0:	a825883a 	mov	r18,r21
 800c1a4:	003f1a06 	br	800be10 <__alt_data_end+0xf800be10>
 800c1a8:	25adc83a 	sub	r22,r4,r22
 800c1ac:	1d07c83a 	sub	r3,r3,r20
 800c1b0:	2589803a 	cmpltu	r4,r4,r22
 800c1b4:	1907c83a 	sub	r3,r3,r4
 800c1b8:	88c7c83a 	sub	r3,r17,r3
 800c1bc:	003fbf06 	br	800c0bc <__alt_data_end+0xf800c0bc>
 800c1c0:	00c00204 	movi	r3,8
 800c1c4:	1827883a 	mov	r19,r3
 800c1c8:	003ee706 	br	800bd68 <__alt_data_end+0xf800bd68>
 800c1cc:	00c00604 	movi	r3,24
 800c1d0:	1827883a 	mov	r19,r3
 800c1d4:	003ee406 	br	800bd68 <__alt_data_end+0xf800bd68>
 800c1d8:	00800604 	movi	r2,24
 800c1dc:	1009883a 	mov	r4,r2
 800c1e0:	003ea506 	br	800bc78 <__alt_data_end+0xf800bc78>
 800c1e4:	00800204 	movi	r2,8
 800c1e8:	1007883a 	mov	r3,r2
 800c1ec:	003efb06 	br	800bddc <__alt_data_end+0xf800bddc>
 800c1f0:	00800604 	movi	r2,24
 800c1f4:	1007883a 	mov	r3,r2
 800c1f8:	003ef806 	br	800bddc <__alt_data_end+0xf800bddc>
 800c1fc:	00800204 	movi	r2,8
 800c200:	1009883a 	mov	r4,r2
 800c204:	003e9c06 	br	800bc78 <__alt_data_end+0xf800bc78>
 800c208:	38bf7e2e 	bgeu	r7,r2,800c004 <__alt_data_end+0xf800c004>
 800c20c:	ad7fff84 	addi	r21,r21,-2
 800c210:	3d0f883a 	add	r7,r7,r20
 800c214:	003f7c06 	br	800c008 <__alt_data_end+0xf800c008>
 800c218:	193f632e 	bgeu	r3,r4,800bfa8 <__alt_data_end+0xf800bfa8>
 800c21c:	e73fff84 	addi	fp,fp,-2
 800c220:	1d07883a 	add	r3,r3,r20
 800c224:	003f6106 	br	800bfac <__alt_data_end+0xf800bfac>
 800c228:	1c07883a 	add	r3,r3,r16
 800c22c:	003f0a06 	br	800be58 <__alt_data_end+0xf800be58>
 800c230:	9005883a 	mov	r2,r18
 800c234:	a007883a 	mov	r3,r20
 800c238:	003f2006 	br	800bebc <__alt_data_end+0xf800bebc>
 800c23c:	913fda36 	bltu	r18,r4,800c1a8 <__alt_data_end+0xf800c1a8>
 800c240:	202d883a 	mov	r22,r4
 800c244:	0007883a 	mov	r3,zero
 800c248:	003f9c06 	br	800c0bc <__alt_data_end+0xf800c0bc>

0800c24c <udivmodsi4>:
 800c24c:	2900182e 	bgeu	r5,r4,800c2b0 <udivmodsi4+0x64>
 800c250:	28001716 	blt	r5,zero,800c2b0 <udivmodsi4+0x64>
 800c254:	00800804 	movi	r2,32
 800c258:	00c00044 	movi	r3,1
 800c25c:	00000206 	br	800c268 <udivmodsi4+0x1c>
 800c260:	10001126 	beq	r2,zero,800c2a8 <udivmodsi4+0x5c>
 800c264:	28000516 	blt	r5,zero,800c27c <udivmodsi4+0x30>
 800c268:	294b883a 	add	r5,r5,r5
 800c26c:	10bfffc4 	addi	r2,r2,-1
 800c270:	18c7883a 	add	r3,r3,r3
 800c274:	293ffa36 	bltu	r5,r4,800c260 <__alt_data_end+0xf800c260>
 800c278:	18000b26 	beq	r3,zero,800c2a8 <udivmodsi4+0x5c>
 800c27c:	0005883a 	mov	r2,zero
 800c280:	21400236 	bltu	r4,r5,800c28c <udivmodsi4+0x40>
 800c284:	2149c83a 	sub	r4,r4,r5
 800c288:	10c4b03a 	or	r2,r2,r3
 800c28c:	1806d07a 	srli	r3,r3,1
 800c290:	280ad07a 	srli	r5,r5,1
 800c294:	183ffa1e 	bne	r3,zero,800c280 <__alt_data_end+0xf800c280>
 800c298:	3000011e 	bne	r6,zero,800c2a0 <udivmodsi4+0x54>
 800c29c:	f800283a 	ret
 800c2a0:	2005883a 	mov	r2,r4
 800c2a4:	f800283a 	ret
 800c2a8:	0005883a 	mov	r2,zero
 800c2ac:	003ffa06 	br	800c298 <__alt_data_end+0xf800c298>
 800c2b0:	00c00044 	movi	r3,1
 800c2b4:	0005883a 	mov	r2,zero
 800c2b8:	003ff106 	br	800c280 <__alt_data_end+0xf800c280>

0800c2bc <__divsi3>:
 800c2bc:	deffff04 	addi	sp,sp,-4
 800c2c0:	dfc00015 	stw	ra,0(sp)
 800c2c4:	20000916 	blt	r4,zero,800c2ec <__divsi3+0x30>
 800c2c8:	000f883a 	mov	r7,zero
 800c2cc:	28000a16 	blt	r5,zero,800c2f8 <__divsi3+0x3c>
 800c2d0:	000d883a 	mov	r6,zero
 800c2d4:	800c24c0 	call	800c24c <udivmodsi4>
 800c2d8:	38000126 	beq	r7,zero,800c2e0 <__divsi3+0x24>
 800c2dc:	0085c83a 	sub	r2,zero,r2
 800c2e0:	dfc00017 	ldw	ra,0(sp)
 800c2e4:	dec00104 	addi	sp,sp,4
 800c2e8:	f800283a 	ret
 800c2ec:	0109c83a 	sub	r4,zero,r4
 800c2f0:	01c00044 	movi	r7,1
 800c2f4:	283ff60e 	bge	r5,zero,800c2d0 <__alt_data_end+0xf800c2d0>
 800c2f8:	014bc83a 	sub	r5,zero,r5
 800c2fc:	39c0005c 	xori	r7,r7,1
 800c300:	003ff306 	br	800c2d0 <__alt_data_end+0xf800c2d0>

0800c304 <__modsi3>:
 800c304:	20000316 	blt	r4,zero,800c314 <__modsi3+0x10>
 800c308:	28000c16 	blt	r5,zero,800c33c <__modsi3+0x38>
 800c30c:	01800044 	movi	r6,1
 800c310:	800c24c1 	jmpi	800c24c <udivmodsi4>
 800c314:	deffff04 	addi	sp,sp,-4
 800c318:	dfc00015 	stw	ra,0(sp)
 800c31c:	0109c83a 	sub	r4,zero,r4
 800c320:	28000916 	blt	r5,zero,800c348 <__modsi3+0x44>
 800c324:	01800044 	movi	r6,1
 800c328:	800c24c0 	call	800c24c <udivmodsi4>
 800c32c:	0085c83a 	sub	r2,zero,r2
 800c330:	dfc00017 	ldw	ra,0(sp)
 800c334:	dec00104 	addi	sp,sp,4
 800c338:	f800283a 	ret
 800c33c:	014bc83a 	sub	r5,zero,r5
 800c340:	01800044 	movi	r6,1
 800c344:	800c24c1 	jmpi	800c24c <udivmodsi4>
 800c348:	014bc83a 	sub	r5,zero,r5
 800c34c:	003ff506 	br	800c324 <__alt_data_end+0xf800c324>

0800c350 <__udivsi3>:
 800c350:	000d883a 	mov	r6,zero
 800c354:	800c24c1 	jmpi	800c24c <udivmodsi4>

0800c358 <__umodsi3>:
 800c358:	01800044 	movi	r6,1
 800c35c:	800c24c1 	jmpi	800c24c <udivmodsi4>

0800c360 <__mulsi3>:
 800c360:	0005883a 	mov	r2,zero
 800c364:	20000726 	beq	r4,zero,800c384 <__mulsi3+0x24>
 800c368:	20c0004c 	andi	r3,r4,1
 800c36c:	2008d07a 	srli	r4,r4,1
 800c370:	18000126 	beq	r3,zero,800c378 <__mulsi3+0x18>
 800c374:	1145883a 	add	r2,r2,r5
 800c378:	294b883a 	add	r5,r5,r5
 800c37c:	203ffa1e 	bne	r4,zero,800c368 <__alt_data_end+0xf800c368>
 800c380:	f800283a 	ret
 800c384:	f800283a 	ret

0800c388 <__adddf3>:
 800c388:	00800434 	movhi	r2,16
 800c38c:	10bfffc4 	addi	r2,r2,-1
 800c390:	defffb04 	addi	sp,sp,-20
 800c394:	2890703a 	and	r8,r5,r2
 800c398:	2806d7fa 	srli	r3,r5,31
 800c39c:	3884703a 	and	r2,r7,r2
 800c3a0:	2014d77a 	srli	r10,r4,29
 800c3a4:	3812d53a 	srli	r9,r7,20
 800c3a8:	dc400115 	stw	r17,4(sp)
 800c3ac:	100490fa 	slli	r2,r2,3
 800c3b0:	2822d53a 	srli	r17,r5,20
 800c3b4:	380ed7fa 	srli	r7,r7,31
 800c3b8:	400a90fa 	slli	r5,r8,3
 800c3bc:	3010d77a 	srli	r8,r6,29
 800c3c0:	dc800215 	stw	r18,8(sp)
 800c3c4:	dc000015 	stw	r16,0(sp)
 800c3c8:	dfc00415 	stw	ra,16(sp)
 800c3cc:	dcc00315 	stw	r19,12(sp)
 800c3d0:	1c803fcc 	andi	r18,r3,255
 800c3d4:	202090fa 	slli	r16,r4,3
 800c3d8:	8c41ffcc 	andi	r17,r17,2047
 800c3dc:	2a8ab03a 	or	r5,r5,r10
 800c3e0:	4901ffcc 	andi	r4,r9,2047
 800c3e4:	1204b03a 	or	r2,r2,r8
 800c3e8:	300c90fa 	slli	r6,r6,3
 800c3ec:	91c07126 	beq	r18,r7,800c5b4 <__adddf3+0x22c>
 800c3f0:	8907c83a 	sub	r3,r17,r4
 800c3f4:	00c0a00e 	bge	zero,r3,800c678 <__adddf3+0x2f0>
 800c3f8:	2000291e 	bne	r4,zero,800c4a0 <__adddf3+0x118>
 800c3fc:	1188b03a 	or	r4,r2,r6
 800c400:	20008b1e 	bne	r4,zero,800c630 <__adddf3+0x2a8>
 800c404:	808001cc 	andi	r2,r16,7
 800c408:	10005a26 	beq	r2,zero,800c574 <__adddf3+0x1ec>
 800c40c:	80c003cc 	andi	r3,r16,15
 800c410:	00800104 	movi	r2,4
 800c414:	18805726 	beq	r3,r2,800c574 <__adddf3+0x1ec>
 800c418:	81000104 	addi	r4,r16,4
 800c41c:	2421803a 	cmpltu	r16,r4,r16
 800c420:	2c0b883a 	add	r5,r5,r16
 800c424:	2880202c 	andhi	r2,r5,128
 800c428:	9007883a 	mov	r3,r18
 800c42c:	2021883a 	mov	r16,r4
 800c430:	10005326 	beq	r2,zero,800c580 <__adddf3+0x1f8>
 800c434:	8c400044 	addi	r17,r17,1
 800c438:	0081ffc4 	movi	r2,2047
 800c43c:	8880ae26 	beq	r17,r2,800c6f8 <__adddf3+0x370>
 800c440:	00bfe034 	movhi	r2,65408
 800c444:	10bfffc4 	addi	r2,r2,-1
 800c448:	288a703a 	and	r5,r5,r2
 800c44c:	2804977a 	slli	r2,r5,29
 800c450:	280a927a 	slli	r5,r5,9
 800c454:	8020d0fa 	srli	r16,r16,3
 800c458:	280ad33a 	srli	r5,r5,12
 800c45c:	1404b03a 	or	r2,r2,r16
 800c460:	8c41ffcc 	andi	r17,r17,2047
 800c464:	8822953a 	slli	r17,r17,20
 800c468:	18c03fcc 	andi	r3,r3,255
 800c46c:	180897fa 	slli	r4,r3,31
 800c470:	00c00434 	movhi	r3,16
 800c474:	18ffffc4 	addi	r3,r3,-1
 800c478:	28c6703a 	and	r3,r5,r3
 800c47c:	1c46b03a 	or	r3,r3,r17
 800c480:	1906b03a 	or	r3,r3,r4
 800c484:	dfc00417 	ldw	ra,16(sp)
 800c488:	dcc00317 	ldw	r19,12(sp)
 800c48c:	dc800217 	ldw	r18,8(sp)
 800c490:	dc400117 	ldw	r17,4(sp)
 800c494:	dc000017 	ldw	r16,0(sp)
 800c498:	dec00504 	addi	sp,sp,20
 800c49c:	f800283a 	ret
 800c4a0:	0101ffc4 	movi	r4,2047
 800c4a4:	893fd726 	beq	r17,r4,800c404 <__alt_data_end+0xf800c404>
 800c4a8:	10802034 	orhi	r2,r2,128
 800c4ac:	01000e04 	movi	r4,56
 800c4b0:	20c09416 	blt	r4,r3,800c704 <__adddf3+0x37c>
 800c4b4:	010007c4 	movi	r4,31
 800c4b8:	20c0b716 	blt	r4,r3,800c798 <__adddf3+0x410>
 800c4bc:	01000804 	movi	r4,32
 800c4c0:	20c9c83a 	sub	r4,r4,r3
 800c4c4:	30ced83a 	srl	r7,r6,r3
 800c4c8:	1110983a 	sll	r8,r2,r4
 800c4cc:	3108983a 	sll	r4,r6,r4
 800c4d0:	10c6d83a 	srl	r3,r2,r3
 800c4d4:	41c4b03a 	or	r2,r8,r7
 800c4d8:	2008c03a 	cmpne	r4,r4,zero
 800c4dc:	110cb03a 	or	r6,r2,r4
 800c4e0:	818dc83a 	sub	r6,r16,r6
 800c4e4:	81a1803a 	cmpltu	r16,r16,r6
 800c4e8:	28cbc83a 	sub	r5,r5,r3
 800c4ec:	2c0bc83a 	sub	r5,r5,r16
 800c4f0:	3021883a 	mov	r16,r6
 800c4f4:	2880202c 	andhi	r2,r5,128
 800c4f8:	103fc226 	beq	r2,zero,800c404 <__alt_data_end+0xf800c404>
 800c4fc:	04c02034 	movhi	r19,128
 800c500:	9cffffc4 	addi	r19,r19,-1
 800c504:	2ce6703a 	and	r19,r5,r19
 800c508:	98006c26 	beq	r19,zero,800c6bc <__adddf3+0x334>
 800c50c:	9809883a 	mov	r4,r19
 800c510:	800ea600 	call	800ea60 <__clzsi2>
 800c514:	10fffe04 	addi	r3,r2,-8
 800c518:	010007c4 	movi	r4,31
 800c51c:	20c06d16 	blt	r4,r3,800c6d4 <__adddf3+0x34c>
 800c520:	01000a04 	movi	r4,40
 800c524:	2085c83a 	sub	r2,r4,r2
 800c528:	8084d83a 	srl	r2,r16,r2
 800c52c:	98e6983a 	sll	r19,r19,r3
 800c530:	80e0983a 	sll	r16,r16,r3
 800c534:	14c4b03a 	or	r2,r2,r19
 800c538:	1c406a16 	blt	r3,r17,800c6e4 <__adddf3+0x35c>
 800c53c:	1c63c83a 	sub	r17,r3,r17
 800c540:	89400044 	addi	r5,r17,1
 800c544:	00c007c4 	movi	r3,31
 800c548:	19408616 	blt	r3,r5,800c764 <__adddf3+0x3dc>
 800c54c:	1c47c83a 	sub	r3,r3,r17
 800c550:	8148d83a 	srl	r4,r16,r5
 800c554:	80e0983a 	sll	r16,r16,r3
 800c558:	10c6983a 	sll	r3,r2,r3
 800c55c:	114ad83a 	srl	r5,r2,r5
 800c560:	8004c03a 	cmpne	r2,r16,zero
 800c564:	20e0b03a 	or	r16,r4,r3
 800c568:	80a0b03a 	or	r16,r16,r2
 800c56c:	0023883a 	mov	r17,zero
 800c570:	003fa406 	br	800c404 <__alt_data_end+0xf800c404>
 800c574:	2880202c 	andhi	r2,r5,128
 800c578:	9007883a 	mov	r3,r18
 800c57c:	103fad1e 	bne	r2,zero,800c434 <__alt_data_end+0xf800c434>
 800c580:	2804977a 	slli	r2,r5,29
 800c584:	8020d0fa 	srli	r16,r16,3
 800c588:	0101ffc4 	movi	r4,2047
 800c58c:	280ad0fa 	srli	r5,r5,3
 800c590:	1404b03a 	or	r2,r2,r16
 800c594:	8900031e 	bne	r17,r4,800c5a4 <__adddf3+0x21c>
 800c598:	1148b03a 	or	r4,r2,r5
 800c59c:	20005626 	beq	r4,zero,800c6f8 <__adddf3+0x370>
 800c5a0:	29400234 	orhi	r5,r5,8
 800c5a4:	01000434 	movhi	r4,16
 800c5a8:	213fffc4 	addi	r4,r4,-1
 800c5ac:	290a703a 	and	r5,r5,r4
 800c5b0:	003fab06 	br	800c460 <__alt_data_end+0xf800c460>
 800c5b4:	890fc83a 	sub	r7,r17,r4
 800c5b8:	01c0560e 	bge	zero,r7,800c714 <__adddf3+0x38c>
 800c5bc:	20002426 	beq	r4,zero,800c650 <__adddf3+0x2c8>
 800c5c0:	0101ffc4 	movi	r4,2047
 800c5c4:	893f8f26 	beq	r17,r4,800c404 <__alt_data_end+0xf800c404>
 800c5c8:	10802034 	orhi	r2,r2,128
 800c5cc:	01000e04 	movi	r4,56
 800c5d0:	21c09d0e 	bge	r4,r7,800c848 <__adddf3+0x4c0>
 800c5d4:	118cb03a 	or	r6,r2,r6
 800c5d8:	300cc03a 	cmpne	r6,r6,zero
 800c5dc:	000f883a 	mov	r7,zero
 800c5e0:	340d883a 	add	r6,r6,r16
 800c5e4:	3421803a 	cmpltu	r16,r6,r16
 800c5e8:	394b883a 	add	r5,r7,r5
 800c5ec:	2c0b883a 	add	r5,r5,r16
 800c5f0:	3021883a 	mov	r16,r6
 800c5f4:	2880202c 	andhi	r2,r5,128
 800c5f8:	103f8226 	beq	r2,zero,800c404 <__alt_data_end+0xf800c404>
 800c5fc:	8c400044 	addi	r17,r17,1
 800c600:	0081ffc4 	movi	r2,2047
 800c604:	8880cb26 	beq	r17,r2,800c934 <__adddf3+0x5ac>
 800c608:	00bfe034 	movhi	r2,65408
 800c60c:	10bfffc4 	addi	r2,r2,-1
 800c610:	288a703a 	and	r5,r5,r2
 800c614:	8006d07a 	srli	r3,r16,1
 800c618:	280497fa 	slli	r2,r5,31
 800c61c:	8400004c 	andi	r16,r16,1
 800c620:	80e0b03a 	or	r16,r16,r3
 800c624:	80a0b03a 	or	r16,r16,r2
 800c628:	280ad07a 	srli	r5,r5,1
 800c62c:	003f7506 	br	800c404 <__alt_data_end+0xf800c404>
 800c630:	18ffffc4 	addi	r3,r3,-1
 800c634:	1800481e 	bne	r3,zero,800c758 <__adddf3+0x3d0>
 800c638:	818dc83a 	sub	r6,r16,r6
 800c63c:	81a1803a 	cmpltu	r16,r16,r6
 800c640:	288bc83a 	sub	r5,r5,r2
 800c644:	2c0bc83a 	sub	r5,r5,r16
 800c648:	3021883a 	mov	r16,r6
 800c64c:	003fa906 	br	800c4f4 <__alt_data_end+0xf800c4f4>
 800c650:	1188b03a 	or	r4,r2,r6
 800c654:	203f6b26 	beq	r4,zero,800c404 <__alt_data_end+0xf800c404>
 800c658:	39ffffc4 	addi	r7,r7,-1
 800c65c:	3800931e 	bne	r7,zero,800c8ac <__adddf3+0x524>
 800c660:	340d883a 	add	r6,r6,r16
 800c664:	3421803a 	cmpltu	r16,r6,r16
 800c668:	114b883a 	add	r5,r2,r5
 800c66c:	2c0b883a 	add	r5,r5,r16
 800c670:	3021883a 	mov	r16,r6
 800c674:	003fdf06 	br	800c5f4 <__alt_data_end+0xf800c5f4>
 800c678:	1800531e 	bne	r3,zero,800c7c8 <__adddf3+0x440>
 800c67c:	88c00044 	addi	r3,r17,1
 800c680:	18c1ffcc 	andi	r3,r3,2047
 800c684:	01000044 	movi	r4,1
 800c688:	20c0a00e 	bge	r4,r3,800c90c <__adddf3+0x584>
 800c68c:	8187c83a 	sub	r3,r16,r6
 800c690:	80c9803a 	cmpltu	r4,r16,r3
 800c694:	28a7c83a 	sub	r19,r5,r2
 800c698:	9927c83a 	sub	r19,r19,r4
 800c69c:	9900202c 	andhi	r4,r19,128
 800c6a0:	20006226 	beq	r4,zero,800c82c <__adddf3+0x4a4>
 800c6a4:	3421c83a 	sub	r16,r6,r16
 800c6a8:	1145c83a 	sub	r2,r2,r5
 800c6ac:	340d803a 	cmpltu	r6,r6,r16
 800c6b0:	11a7c83a 	sub	r19,r2,r6
 800c6b4:	3825883a 	mov	r18,r7
 800c6b8:	983f941e 	bne	r19,zero,800c50c <__alt_data_end+0xf800c50c>
 800c6bc:	8009883a 	mov	r4,r16
 800c6c0:	800ea600 	call	800ea60 <__clzsi2>
 800c6c4:	10800804 	addi	r2,r2,32
 800c6c8:	10fffe04 	addi	r3,r2,-8
 800c6cc:	010007c4 	movi	r4,31
 800c6d0:	20ff930e 	bge	r4,r3,800c520 <__alt_data_end+0xf800c520>
 800c6d4:	10bff604 	addi	r2,r2,-40
 800c6d8:	8084983a 	sll	r2,r16,r2
 800c6dc:	0021883a 	mov	r16,zero
 800c6e0:	1c7f960e 	bge	r3,r17,800c53c <__alt_data_end+0xf800c53c>
 800c6e4:	017fe034 	movhi	r5,65408
 800c6e8:	297fffc4 	addi	r5,r5,-1
 800c6ec:	88e3c83a 	sub	r17,r17,r3
 800c6f0:	114a703a 	and	r5,r2,r5
 800c6f4:	003f4306 	br	800c404 <__alt_data_end+0xf800c404>
 800c6f8:	000b883a 	mov	r5,zero
 800c6fc:	0005883a 	mov	r2,zero
 800c700:	003f5706 	br	800c460 <__alt_data_end+0xf800c460>
 800c704:	118cb03a 	or	r6,r2,r6
 800c708:	300cc03a 	cmpne	r6,r6,zero
 800c70c:	0007883a 	mov	r3,zero
 800c710:	003f7306 	br	800c4e0 <__alt_data_end+0xf800c4e0>
 800c714:	3800961e 	bne	r7,zero,800c970 <__adddf3+0x5e8>
 800c718:	89000044 	addi	r4,r17,1
 800c71c:	2201ffcc 	andi	r8,r4,2047
 800c720:	01c00044 	movi	r7,1
 800c724:	3a00680e 	bge	r7,r8,800c8c8 <__adddf3+0x540>
 800c728:	01c1ffc4 	movi	r7,2047
 800c72c:	21c0a726 	beq	r4,r7,800c9cc <__adddf3+0x644>
 800c730:	340d883a 	add	r6,r6,r16
 800c734:	3421803a 	cmpltu	r16,r6,r16
 800c738:	114b883a 	add	r5,r2,r5
 800c73c:	2c0b883a 	add	r5,r5,r16
 800c740:	282097fa 	slli	r16,r5,31
 800c744:	300cd07a 	srli	r6,r6,1
 800c748:	280ad07a 	srli	r5,r5,1
 800c74c:	2023883a 	mov	r17,r4
 800c750:	81a0b03a 	or	r16,r16,r6
 800c754:	003f2b06 	br	800c404 <__alt_data_end+0xf800c404>
 800c758:	0101ffc4 	movi	r4,2047
 800c75c:	893f531e 	bne	r17,r4,800c4ac <__alt_data_end+0xf800c4ac>
 800c760:	003f2806 	br	800c404 <__alt_data_end+0xf800c404>
 800c764:	893ff844 	addi	r4,r17,-31
 800c768:	00c00804 	movi	r3,32
 800c76c:	1108d83a 	srl	r4,r2,r4
 800c770:	28c05126 	beq	r5,r3,800c8b8 <__adddf3+0x530>
 800c774:	00c00fc4 	movi	r3,63
 800c778:	1c63c83a 	sub	r17,r3,r17
 800c77c:	1444983a 	sll	r2,r2,r17
 800c780:	1420b03a 	or	r16,r2,r16
 800c784:	8020c03a 	cmpne	r16,r16,zero
 800c788:	8120b03a 	or	r16,r16,r4
 800c78c:	000b883a 	mov	r5,zero
 800c790:	0023883a 	mov	r17,zero
 800c794:	003f1b06 	br	800c404 <__alt_data_end+0xf800c404>
 800c798:	193ff804 	addi	r4,r3,-32
 800c79c:	01c00804 	movi	r7,32
 800c7a0:	1108d83a 	srl	r4,r2,r4
 800c7a4:	19c04626 	beq	r3,r7,800c8c0 <__adddf3+0x538>
 800c7a8:	01c01004 	movi	r7,64
 800c7ac:	38c7c83a 	sub	r3,r7,r3
 800c7b0:	10c4983a 	sll	r2,r2,r3
 800c7b4:	118cb03a 	or	r6,r2,r6
 800c7b8:	300cc03a 	cmpne	r6,r6,zero
 800c7bc:	310cb03a 	or	r6,r6,r4
 800c7c0:	0007883a 	mov	r3,zero
 800c7c4:	003f4606 	br	800c4e0 <__alt_data_end+0xf800c4e0>
 800c7c8:	88002b26 	beq	r17,zero,800c878 <__adddf3+0x4f0>
 800c7cc:	0201ffc4 	movi	r8,2047
 800c7d0:	22002f26 	beq	r4,r8,800c890 <__adddf3+0x508>
 800c7d4:	00c7c83a 	sub	r3,zero,r3
 800c7d8:	29402034 	orhi	r5,r5,128
 800c7dc:	02000e04 	movi	r8,56
 800c7e0:	40c07616 	blt	r8,r3,800c9bc <__adddf3+0x634>
 800c7e4:	020007c4 	movi	r8,31
 800c7e8:	40c0d216 	blt	r8,r3,800cb34 <__adddf3+0x7ac>
 800c7ec:	02000804 	movi	r8,32
 800c7f0:	40d1c83a 	sub	r8,r8,r3
 800c7f4:	2a14983a 	sll	r10,r5,r8
 800c7f8:	80d2d83a 	srl	r9,r16,r3
 800c7fc:	8210983a 	sll	r8,r16,r8
 800c800:	28cad83a 	srl	r5,r5,r3
 800c804:	5252b03a 	or	r9,r10,r9
 800c808:	4006c03a 	cmpne	r3,r8,zero
 800c80c:	48e0b03a 	or	r16,r9,r3
 800c810:	3421c83a 	sub	r16,r6,r16
 800c814:	114bc83a 	sub	r5,r2,r5
 800c818:	340d803a 	cmpltu	r6,r6,r16
 800c81c:	298bc83a 	sub	r5,r5,r6
 800c820:	2023883a 	mov	r17,r4
 800c824:	3825883a 	mov	r18,r7
 800c828:	003f3206 	br	800c4f4 <__alt_data_end+0xf800c4f4>
 800c82c:	98c4b03a 	or	r2,r19,r3
 800c830:	10001c1e 	bne	r2,zero,800c8a4 <__adddf3+0x51c>
 800c834:	0007883a 	mov	r3,zero
 800c838:	000b883a 	mov	r5,zero
 800c83c:	0021883a 	mov	r16,zero
 800c840:	0023883a 	mov	r17,zero
 800c844:	003f4e06 	br	800c580 <__alt_data_end+0xf800c580>
 800c848:	010007c4 	movi	r4,31
 800c84c:	21c03c16 	blt	r4,r7,800c940 <__adddf3+0x5b8>
 800c850:	01000804 	movi	r4,32
 800c854:	21c9c83a 	sub	r4,r4,r7
 800c858:	31d0d83a 	srl	r8,r6,r7
 800c85c:	1112983a 	sll	r9,r2,r4
 800c860:	3108983a 	sll	r4,r6,r4
 800c864:	11ced83a 	srl	r7,r2,r7
 800c868:	4a04b03a 	or	r2,r9,r8
 800c86c:	2008c03a 	cmpne	r4,r4,zero
 800c870:	110cb03a 	or	r6,r2,r4
 800c874:	003f5a06 	br	800c5e0 <__alt_data_end+0xf800c5e0>
 800c878:	2c10b03a 	or	r8,r5,r16
 800c87c:	40000426 	beq	r8,zero,800c890 <__adddf3+0x508>
 800c880:	00c6303a 	nor	r3,zero,r3
 800c884:	183fe226 	beq	r3,zero,800c810 <__alt_data_end+0xf800c810>
 800c888:	0201ffc4 	movi	r8,2047
 800c88c:	223fd31e 	bne	r4,r8,800c7dc <__alt_data_end+0xf800c7dc>
 800c890:	100b883a 	mov	r5,r2
 800c894:	3021883a 	mov	r16,r6
 800c898:	2023883a 	mov	r17,r4
 800c89c:	3825883a 	mov	r18,r7
 800c8a0:	003ed806 	br	800c404 <__alt_data_end+0xf800c404>
 800c8a4:	1821883a 	mov	r16,r3
 800c8a8:	003f1706 	br	800c508 <__alt_data_end+0xf800c508>
 800c8ac:	0101ffc4 	movi	r4,2047
 800c8b0:	893f461e 	bne	r17,r4,800c5cc <__alt_data_end+0xf800c5cc>
 800c8b4:	003ed306 	br	800c404 <__alt_data_end+0xf800c404>
 800c8b8:	0005883a 	mov	r2,zero
 800c8bc:	003fb006 	br	800c780 <__alt_data_end+0xf800c780>
 800c8c0:	0005883a 	mov	r2,zero
 800c8c4:	003fbb06 	br	800c7b4 <__alt_data_end+0xf800c7b4>
 800c8c8:	2c06b03a 	or	r3,r5,r16
 800c8cc:	8800841e 	bne	r17,zero,800cae0 <__adddf3+0x758>
 800c8d0:	1800b226 	beq	r3,zero,800cb9c <__adddf3+0x814>
 800c8d4:	1186b03a 	or	r3,r2,r6
 800c8d8:	183eca26 	beq	r3,zero,800c404 <__alt_data_end+0xf800c404>
 800c8dc:	340d883a 	add	r6,r6,r16
 800c8e0:	114b883a 	add	r5,r2,r5
 800c8e4:	3421803a 	cmpltu	r16,r6,r16
 800c8e8:	2c0b883a 	add	r5,r5,r16
 800c8ec:	2880202c 	andhi	r2,r5,128
 800c8f0:	1000c026 	beq	r2,zero,800cbf4 <__adddf3+0x86c>
 800c8f4:	00bfe034 	movhi	r2,65408
 800c8f8:	10bfffc4 	addi	r2,r2,-1
 800c8fc:	288a703a 	and	r5,r5,r2
 800c900:	3021883a 	mov	r16,r6
 800c904:	3823883a 	mov	r17,r7
 800c908:	003ebe06 	br	800c404 <__alt_data_end+0xf800c404>
 800c90c:	2c06b03a 	or	r3,r5,r16
 800c910:	8800221e 	bne	r17,zero,800c99c <__adddf3+0x614>
 800c914:	1800481e 	bne	r3,zero,800ca38 <__adddf3+0x6b0>
 800c918:	1186b03a 	or	r3,r2,r6
 800c91c:	18000426 	beq	r3,zero,800c930 <__adddf3+0x5a8>
 800c920:	100b883a 	mov	r5,r2
 800c924:	3021883a 	mov	r16,r6
 800c928:	3825883a 	mov	r18,r7
 800c92c:	003eb506 	br	800c404 <__alt_data_end+0xf800c404>
 800c930:	0007883a 	mov	r3,zero
 800c934:	000b883a 	mov	r5,zero
 800c938:	0021883a 	mov	r16,zero
 800c93c:	003f1006 	br	800c580 <__alt_data_end+0xf800c580>
 800c940:	393ff804 	addi	r4,r7,-32
 800c944:	02000804 	movi	r8,32
 800c948:	1108d83a 	srl	r4,r2,r4
 800c94c:	3a007726 	beq	r7,r8,800cb2c <__adddf3+0x7a4>
 800c950:	02001004 	movi	r8,64
 800c954:	41cfc83a 	sub	r7,r8,r7
 800c958:	11c4983a 	sll	r2,r2,r7
 800c95c:	118cb03a 	or	r6,r2,r6
 800c960:	300cc03a 	cmpne	r6,r6,zero
 800c964:	310cb03a 	or	r6,r6,r4
 800c968:	000f883a 	mov	r7,zero
 800c96c:	003f1c06 	br	800c5e0 <__alt_data_end+0xf800c5e0>
 800c970:	88001a1e 	bne	r17,zero,800c9dc <__adddf3+0x654>
 800c974:	2c10b03a 	or	r8,r5,r16
 800c978:	40005526 	beq	r8,zero,800cad0 <__adddf3+0x748>
 800c97c:	01ce303a 	nor	r7,zero,r7
 800c980:	3800511e 	bne	r7,zero,800cac8 <__adddf3+0x740>
 800c984:	81a1883a 	add	r16,r16,r6
 800c988:	114b883a 	add	r5,r2,r5
 800c98c:	818d803a 	cmpltu	r6,r16,r6
 800c990:	298b883a 	add	r5,r5,r6
 800c994:	2023883a 	mov	r17,r4
 800c998:	003f1606 	br	800c5f4 <__alt_data_end+0xf800c5f4>
 800c99c:	1800341e 	bne	r3,zero,800ca70 <__adddf3+0x6e8>
 800c9a0:	1186b03a 	or	r3,r2,r6
 800c9a4:	18006f26 	beq	r3,zero,800cb64 <__adddf3+0x7dc>
 800c9a8:	100b883a 	mov	r5,r2
 800c9ac:	3021883a 	mov	r16,r6
 800c9b0:	3825883a 	mov	r18,r7
 800c9b4:	0441ffc4 	movi	r17,2047
 800c9b8:	003e9206 	br	800c404 <__alt_data_end+0xf800c404>
 800c9bc:	2c20b03a 	or	r16,r5,r16
 800c9c0:	8020c03a 	cmpne	r16,r16,zero
 800c9c4:	000b883a 	mov	r5,zero
 800c9c8:	003f9106 	br	800c810 <__alt_data_end+0xf800c810>
 800c9cc:	2023883a 	mov	r17,r4
 800c9d0:	000b883a 	mov	r5,zero
 800c9d4:	0021883a 	mov	r16,zero
 800c9d8:	003ee906 	br	800c580 <__alt_data_end+0xf800c580>
 800c9dc:	0201ffc4 	movi	r8,2047
 800c9e0:	22003b26 	beq	r4,r8,800cad0 <__adddf3+0x748>
 800c9e4:	01cfc83a 	sub	r7,zero,r7
 800c9e8:	29402034 	orhi	r5,r5,128
 800c9ec:	02000e04 	movi	r8,56
 800c9f0:	41c06216 	blt	r8,r7,800cb7c <__adddf3+0x7f4>
 800c9f4:	020007c4 	movi	r8,31
 800c9f8:	41c07016 	blt	r8,r7,800cbbc <__adddf3+0x834>
 800c9fc:	02000804 	movi	r8,32
 800ca00:	41d1c83a 	sub	r8,r8,r7
 800ca04:	2a14983a 	sll	r10,r5,r8
 800ca08:	81d2d83a 	srl	r9,r16,r7
 800ca0c:	8210983a 	sll	r8,r16,r8
 800ca10:	29cad83a 	srl	r5,r5,r7
 800ca14:	5252b03a 	or	r9,r10,r9
 800ca18:	400ec03a 	cmpne	r7,r8,zero
 800ca1c:	49e0b03a 	or	r16,r9,r7
 800ca20:	81a1883a 	add	r16,r16,r6
 800ca24:	2885883a 	add	r2,r5,r2
 800ca28:	818d803a 	cmpltu	r6,r16,r6
 800ca2c:	118b883a 	add	r5,r2,r6
 800ca30:	2023883a 	mov	r17,r4
 800ca34:	003eef06 	br	800c5f4 <__alt_data_end+0xf800c5f4>
 800ca38:	1186b03a 	or	r3,r2,r6
 800ca3c:	183e7126 	beq	r3,zero,800c404 <__alt_data_end+0xf800c404>
 800ca40:	8187c83a 	sub	r3,r16,r6
 800ca44:	80d1803a 	cmpltu	r8,r16,r3
 800ca48:	2889c83a 	sub	r4,r5,r2
 800ca4c:	2209c83a 	sub	r4,r4,r8
 800ca50:	2200202c 	andhi	r8,r4,128
 800ca54:	40005426 	beq	r8,zero,800cba8 <__adddf3+0x820>
 800ca58:	3421c83a 	sub	r16,r6,r16
 800ca5c:	114bc83a 	sub	r5,r2,r5
 800ca60:	340d803a 	cmpltu	r6,r6,r16
 800ca64:	298bc83a 	sub	r5,r5,r6
 800ca68:	3825883a 	mov	r18,r7
 800ca6c:	003e6506 	br	800c404 <__alt_data_end+0xf800c404>
 800ca70:	1186b03a 	or	r3,r2,r6
 800ca74:	18002b26 	beq	r3,zero,800cb24 <__adddf3+0x79c>
 800ca78:	2806d0fa 	srli	r3,r5,3
 800ca7c:	8020d0fa 	srli	r16,r16,3
 800ca80:	280a977a 	slli	r5,r5,29
 800ca84:	1900022c 	andhi	r4,r3,8
 800ca88:	2c20b03a 	or	r16,r5,r16
 800ca8c:	20000826 	beq	r4,zero,800cab0 <__adddf3+0x728>
 800ca90:	1008d0fa 	srli	r4,r2,3
 800ca94:	2140022c 	andhi	r5,r4,8
 800ca98:	2800051e 	bne	r5,zero,800cab0 <__adddf3+0x728>
 800ca9c:	300cd0fa 	srli	r6,r6,3
 800caa0:	1004977a 	slli	r2,r2,29
 800caa4:	2007883a 	mov	r3,r4
 800caa8:	3825883a 	mov	r18,r7
 800caac:	11a0b03a 	or	r16,r2,r6
 800cab0:	800ad77a 	srli	r5,r16,29
 800cab4:	180690fa 	slli	r3,r3,3
 800cab8:	802090fa 	slli	r16,r16,3
 800cabc:	0441ffc4 	movi	r17,2047
 800cac0:	28cab03a 	or	r5,r5,r3
 800cac4:	003e4f06 	br	800c404 <__alt_data_end+0xf800c404>
 800cac8:	0201ffc4 	movi	r8,2047
 800cacc:	223fc71e 	bne	r4,r8,800c9ec <__alt_data_end+0xf800c9ec>
 800cad0:	100b883a 	mov	r5,r2
 800cad4:	3021883a 	mov	r16,r6
 800cad8:	2023883a 	mov	r17,r4
 800cadc:	003e4906 	br	800c404 <__alt_data_end+0xf800c404>
 800cae0:	18002a26 	beq	r3,zero,800cb8c <__adddf3+0x804>
 800cae4:	1186b03a 	or	r3,r2,r6
 800cae8:	18000e26 	beq	r3,zero,800cb24 <__adddf3+0x79c>
 800caec:	2806d0fa 	srli	r3,r5,3
 800caf0:	8020d0fa 	srli	r16,r16,3
 800caf4:	280a977a 	slli	r5,r5,29
 800caf8:	1900022c 	andhi	r4,r3,8
 800cafc:	2c20b03a 	or	r16,r5,r16
 800cb00:	203feb26 	beq	r4,zero,800cab0 <__alt_data_end+0xf800cab0>
 800cb04:	1008d0fa 	srli	r4,r2,3
 800cb08:	2140022c 	andhi	r5,r4,8
 800cb0c:	283fe81e 	bne	r5,zero,800cab0 <__alt_data_end+0xf800cab0>
 800cb10:	300cd0fa 	srli	r6,r6,3
 800cb14:	1004977a 	slli	r2,r2,29
 800cb18:	2007883a 	mov	r3,r4
 800cb1c:	11a0b03a 	or	r16,r2,r6
 800cb20:	003fe306 	br	800cab0 <__alt_data_end+0xf800cab0>
 800cb24:	0441ffc4 	movi	r17,2047
 800cb28:	003e3606 	br	800c404 <__alt_data_end+0xf800c404>
 800cb2c:	0005883a 	mov	r2,zero
 800cb30:	003f8a06 	br	800c95c <__alt_data_end+0xf800c95c>
 800cb34:	1a3ff804 	addi	r8,r3,-32
 800cb38:	02400804 	movi	r9,32
 800cb3c:	2a10d83a 	srl	r8,r5,r8
 800cb40:	1a402a26 	beq	r3,r9,800cbec <__adddf3+0x864>
 800cb44:	02401004 	movi	r9,64
 800cb48:	48c7c83a 	sub	r3,r9,r3
 800cb4c:	28ca983a 	sll	r5,r5,r3
 800cb50:	2c20b03a 	or	r16,r5,r16
 800cb54:	8020c03a 	cmpne	r16,r16,zero
 800cb58:	8220b03a 	or	r16,r16,r8
 800cb5c:	000b883a 	mov	r5,zero
 800cb60:	003f2b06 	br	800c810 <__alt_data_end+0xf800c810>
 800cb64:	0007883a 	mov	r3,zero
 800cb68:	01402034 	movhi	r5,128
 800cb6c:	297fffc4 	addi	r5,r5,-1
 800cb70:	043ffe04 	movi	r16,-8
 800cb74:	0441ffc4 	movi	r17,2047
 800cb78:	003e8106 	br	800c580 <__alt_data_end+0xf800c580>
 800cb7c:	2c20b03a 	or	r16,r5,r16
 800cb80:	8020c03a 	cmpne	r16,r16,zero
 800cb84:	000b883a 	mov	r5,zero
 800cb88:	003fa506 	br	800ca20 <__alt_data_end+0xf800ca20>
 800cb8c:	100b883a 	mov	r5,r2
 800cb90:	3021883a 	mov	r16,r6
 800cb94:	0441ffc4 	movi	r17,2047
 800cb98:	003e1a06 	br	800c404 <__alt_data_end+0xf800c404>
 800cb9c:	100b883a 	mov	r5,r2
 800cba0:	3021883a 	mov	r16,r6
 800cba4:	003e1706 	br	800c404 <__alt_data_end+0xf800c404>
 800cba8:	20c4b03a 	or	r2,r4,r3
 800cbac:	103f6026 	beq	r2,zero,800c930 <__alt_data_end+0xf800c930>
 800cbb0:	200b883a 	mov	r5,r4
 800cbb4:	1821883a 	mov	r16,r3
 800cbb8:	003e1206 	br	800c404 <__alt_data_end+0xf800c404>
 800cbbc:	3a3ff804 	addi	r8,r7,-32
 800cbc0:	02400804 	movi	r9,32
 800cbc4:	2a10d83a 	srl	r8,r5,r8
 800cbc8:	3a400c26 	beq	r7,r9,800cbfc <__adddf3+0x874>
 800cbcc:	02401004 	movi	r9,64
 800cbd0:	49cfc83a 	sub	r7,r9,r7
 800cbd4:	29ca983a 	sll	r5,r5,r7
 800cbd8:	2c20b03a 	or	r16,r5,r16
 800cbdc:	8020c03a 	cmpne	r16,r16,zero
 800cbe0:	8220b03a 	or	r16,r16,r8
 800cbe4:	000b883a 	mov	r5,zero
 800cbe8:	003f8d06 	br	800ca20 <__alt_data_end+0xf800ca20>
 800cbec:	000b883a 	mov	r5,zero
 800cbf0:	003fd706 	br	800cb50 <__alt_data_end+0xf800cb50>
 800cbf4:	3021883a 	mov	r16,r6
 800cbf8:	003e0206 	br	800c404 <__alt_data_end+0xf800c404>
 800cbfc:	000b883a 	mov	r5,zero
 800cc00:	003ff506 	br	800cbd8 <__alt_data_end+0xf800cbd8>

0800cc04 <__divdf3>:
 800cc04:	defff004 	addi	sp,sp,-64
 800cc08:	dd000a15 	stw	r20,40(sp)
 800cc0c:	2828d53a 	srli	r20,r5,20
 800cc10:	dd800c15 	stw	r22,48(sp)
 800cc14:	282cd7fa 	srli	r22,r5,31
 800cc18:	df000e15 	stw	fp,56(sp)
 800cc1c:	dcc00915 	stw	r19,36(sp)
 800cc20:	dc800815 	stw	r18,32(sp)
 800cc24:	04c00434 	movhi	r19,16
 800cc28:	9cffffc4 	addi	r19,r19,-1
 800cc2c:	dfc00f15 	stw	ra,60(sp)
 800cc30:	ddc00d15 	stw	r23,52(sp)
 800cc34:	dd400b15 	stw	r21,44(sp)
 800cc38:	dc400715 	stw	r17,28(sp)
 800cc3c:	dc000615 	stw	r16,24(sp)
 800cc40:	a501ffcc 	andi	r20,r20,2047
 800cc44:	2025883a 	mov	r18,r4
 800cc48:	2ce6703a 	and	r19,r5,r19
 800cc4c:	b7003fcc 	andi	fp,r22,255
 800cc50:	a0006a26 	beq	r20,zero,800cdfc <__divdf3+0x1f8>
 800cc54:	0081ffc4 	movi	r2,2047
 800cc58:	2021883a 	mov	r16,r4
 800cc5c:	a0803726 	beq	r20,r2,800cd3c <__divdf3+0x138>
 800cc60:	98800434 	orhi	r2,r19,16
 800cc64:	100490fa 	slli	r2,r2,3
 800cc68:	2026d77a 	srli	r19,r4,29
 800cc6c:	202090fa 	slli	r16,r4,3
 800cc70:	a53f0044 	addi	r20,r20,-1023
 800cc74:	14e6b03a 	or	r19,r2,r19
 800cc78:	002b883a 	mov	r21,zero
 800cc7c:	0013883a 	mov	r9,zero
 800cc80:	3804d53a 	srli	r2,r7,20
 800cc84:	382ed7fa 	srli	r23,r7,31
 800cc88:	04400434 	movhi	r17,16
 800cc8c:	8c7fffc4 	addi	r17,r17,-1
 800cc90:	1081ffcc 	andi	r2,r2,2047
 800cc94:	3025883a 	mov	r18,r6
 800cc98:	3c62703a 	and	r17,r7,r17
 800cc9c:	ba803fcc 	andi	r10,r23,255
 800cca0:	10007326 	beq	r2,zero,800ce70 <__divdf3+0x26c>
 800cca4:	0101ffc4 	movi	r4,2047
 800cca8:	11006b26 	beq	r2,r4,800ce58 <__divdf3+0x254>
 800ccac:	89000434 	orhi	r4,r17,16
 800ccb0:	200890fa 	slli	r4,r4,3
 800ccb4:	3022d77a 	srli	r17,r6,29
 800ccb8:	302490fa 	slli	r18,r6,3
 800ccbc:	10bf0044 	addi	r2,r2,-1023
 800ccc0:	2462b03a 	or	r17,r4,r17
 800ccc4:	000f883a 	mov	r7,zero
 800ccc8:	b5caf03a 	xor	r5,r22,r23
 800cccc:	3d48b03a 	or	r4,r7,r21
 800ccd0:	00c003c4 	movi	r3,15
 800ccd4:	2811883a 	mov	r8,r5
 800ccd8:	2d403fcc 	andi	r21,r5,255
 800ccdc:	19009436 	bltu	r3,r4,800cf30 <__divdf3+0x32c>
 800cce0:	2109883a 	add	r4,r4,r4
 800cce4:	00c20074 	movhi	r3,2049
 800cce8:	18f33f04 	addi	r3,r3,-13060
 800ccec:	2109883a 	add	r4,r4,r4
 800ccf0:	20c9883a 	add	r4,r4,r3
 800ccf4:	20c00017 	ldw	r3,0(r4)
 800ccf8:	1800683a 	jmp	r3
 800ccfc:	0800cf30 	cmpltui	zero,at,828
 800cd00:	0800cd98 	cmpnei	zero,at,822
 800cd04:	0800cf20 	cmpeqi	zero,at,828
 800cd08:	0800cd68 	cmpgeui	zero,at,821
 800cd0c:	0800cf20 	cmpeqi	zero,at,828
 800cd10:	0800cf08 	cmpgei	zero,at,828
 800cd14:	0800cf20 	cmpeqi	zero,at,828
 800cd18:	0800cd68 	cmpgeui	zero,at,821
 800cd1c:	0800cd98 	cmpnei	zero,at,822
 800cd20:	0800cd98 	cmpnei	zero,at,822
 800cd24:	0800cf08 	cmpgei	zero,at,828
 800cd28:	0800cd68 	cmpgeui	zero,at,821
 800cd2c:	0800cd58 	cmpnei	zero,at,821
 800cd30:	0800cd58 	cmpnei	zero,at,821
 800cd34:	0800cd58 	cmpnei	zero,at,821
 800cd38:	0800d2c0 	call	800d2c <__reset-0x77ff2d4>
 800cd3c:	9904b03a 	or	r2,r19,r4
 800cd40:	10006e1e 	bne	r2,zero,800cefc <__divdf3+0x2f8>
 800cd44:	05400204 	movi	r21,8
 800cd48:	0027883a 	mov	r19,zero
 800cd4c:	0021883a 	mov	r16,zero
 800cd50:	02400084 	movi	r9,2
 800cd54:	003fca06 	br	800cc80 <__alt_data_end+0xf800cc80>
 800cd58:	9823883a 	mov	r17,r19
 800cd5c:	8025883a 	mov	r18,r16
 800cd60:	e015883a 	mov	r10,fp
 800cd64:	480f883a 	mov	r7,r9
 800cd68:	00800084 	movi	r2,2
 800cd6c:	38800926 	beq	r7,r2,800cd94 <__divdf3+0x190>
 800cd70:	008000c4 	movi	r2,3
 800cd74:	38820226 	beq	r7,r2,800d580 <__divdf3+0x97c>
 800cd78:	00800044 	movi	r2,1
 800cd7c:	3881b81e 	bne	r7,r2,800d460 <__divdf3+0x85c>
 800cd80:	5011883a 	mov	r8,r10
 800cd84:	0005883a 	mov	r2,zero
 800cd88:	0027883a 	mov	r19,zero
 800cd8c:	0021883a 	mov	r16,zero
 800cd90:	00000506 	br	800cda8 <__divdf3+0x1a4>
 800cd94:	502b883a 	mov	r21,r10
 800cd98:	aa00004c 	andi	r8,r21,1
 800cd9c:	0081ffc4 	movi	r2,2047
 800cda0:	0027883a 	mov	r19,zero
 800cda4:	0021883a 	mov	r16,zero
 800cda8:	1004953a 	slli	r2,r2,20
 800cdac:	42003fcc 	andi	r8,r8,255
 800cdb0:	401097fa 	slli	r8,r8,31
 800cdb4:	00c00434 	movhi	r3,16
 800cdb8:	18ffffc4 	addi	r3,r3,-1
 800cdbc:	98e6703a 	and	r19,r19,r3
 800cdc0:	9886b03a 	or	r3,r19,r2
 800cdc4:	1a06b03a 	or	r3,r3,r8
 800cdc8:	8005883a 	mov	r2,r16
 800cdcc:	dfc00f17 	ldw	ra,60(sp)
 800cdd0:	df000e17 	ldw	fp,56(sp)
 800cdd4:	ddc00d17 	ldw	r23,52(sp)
 800cdd8:	dd800c17 	ldw	r22,48(sp)
 800cddc:	dd400b17 	ldw	r21,44(sp)
 800cde0:	dd000a17 	ldw	r20,40(sp)
 800cde4:	dcc00917 	ldw	r19,36(sp)
 800cde8:	dc800817 	ldw	r18,32(sp)
 800cdec:	dc400717 	ldw	r17,28(sp)
 800cdf0:	dc000617 	ldw	r16,24(sp)
 800cdf4:	dec01004 	addi	sp,sp,64
 800cdf8:	f800283a 	ret
 800cdfc:	9904b03a 	or	r2,r19,r4
 800ce00:	10003926 	beq	r2,zero,800cee8 <__divdf3+0x2e4>
 800ce04:	98015326 	beq	r19,zero,800d354 <__divdf3+0x750>
 800ce08:	9809883a 	mov	r4,r19
 800ce0c:	d9800215 	stw	r6,8(sp)
 800ce10:	d9c00515 	stw	r7,20(sp)
 800ce14:	800ea600 	call	800ea60 <__clzsi2>
 800ce18:	d9800217 	ldw	r6,8(sp)
 800ce1c:	d9c00517 	ldw	r7,20(sp)
 800ce20:	00c009c4 	movi	r3,39
 800ce24:	18814716 	blt	r3,r2,800d344 <__divdf3+0x740>
 800ce28:	01400a04 	movi	r5,40
 800ce2c:	143ffe04 	addi	r16,r2,-8
 800ce30:	288bc83a 	sub	r5,r5,r2
 800ce34:	9c26983a 	sll	r19,r19,r16
 800ce38:	914ad83a 	srl	r5,r18,r5
 800ce3c:	9420983a 	sll	r16,r18,r16
 800ce40:	2ce6b03a 	or	r19,r5,r19
 800ce44:	053f0344 	movi	r20,-1011
 800ce48:	a0a9c83a 	sub	r20,r20,r2
 800ce4c:	002b883a 	mov	r21,zero
 800ce50:	0013883a 	mov	r9,zero
 800ce54:	003f8a06 	br	800cc80 <__alt_data_end+0xf800cc80>
 800ce58:	8988b03a 	or	r4,r17,r6
 800ce5c:	2000201e 	bne	r4,zero,800cee0 <__divdf3+0x2dc>
 800ce60:	0023883a 	mov	r17,zero
 800ce64:	0025883a 	mov	r18,zero
 800ce68:	01c00084 	movi	r7,2
 800ce6c:	003f9606 	br	800ccc8 <__alt_data_end+0xf800ccc8>
 800ce70:	8988b03a 	or	r4,r17,r6
 800ce74:	20001626 	beq	r4,zero,800ced0 <__divdf3+0x2cc>
 800ce78:	88012826 	beq	r17,zero,800d31c <__divdf3+0x718>
 800ce7c:	8809883a 	mov	r4,r17
 800ce80:	d9800215 	stw	r6,8(sp)
 800ce84:	da400315 	stw	r9,12(sp)
 800ce88:	da800415 	stw	r10,16(sp)
 800ce8c:	800ea600 	call	800ea60 <__clzsi2>
 800ce90:	d9800217 	ldw	r6,8(sp)
 800ce94:	da400317 	ldw	r9,12(sp)
 800ce98:	da800417 	ldw	r10,16(sp)
 800ce9c:	010009c4 	movi	r4,39
 800cea0:	20811a16 	blt	r4,r2,800d30c <__divdf3+0x708>
 800cea4:	01000a04 	movi	r4,40
 800cea8:	14bffe04 	addi	r18,r2,-8
 800ceac:	2089c83a 	sub	r4,r4,r2
 800ceb0:	8ca2983a 	sll	r17,r17,r18
 800ceb4:	3108d83a 	srl	r4,r6,r4
 800ceb8:	34a4983a 	sll	r18,r6,r18
 800cebc:	2462b03a 	or	r17,r4,r17
 800cec0:	013f0344 	movi	r4,-1011
 800cec4:	2085c83a 	sub	r2,r4,r2
 800cec8:	000f883a 	mov	r7,zero
 800cecc:	003f7e06 	br	800ccc8 <__alt_data_end+0xf800ccc8>
 800ced0:	0023883a 	mov	r17,zero
 800ced4:	0025883a 	mov	r18,zero
 800ced8:	01c00044 	movi	r7,1
 800cedc:	003f7a06 	br	800ccc8 <__alt_data_end+0xf800ccc8>
 800cee0:	01c000c4 	movi	r7,3
 800cee4:	003f7806 	br	800ccc8 <__alt_data_end+0xf800ccc8>
 800cee8:	05400104 	movi	r21,4
 800ceec:	0027883a 	mov	r19,zero
 800cef0:	0021883a 	mov	r16,zero
 800cef4:	02400044 	movi	r9,1
 800cef8:	003f6106 	br	800cc80 <__alt_data_end+0xf800cc80>
 800cefc:	05400304 	movi	r21,12
 800cf00:	024000c4 	movi	r9,3
 800cf04:	003f5e06 	br	800cc80 <__alt_data_end+0xf800cc80>
 800cf08:	0011883a 	mov	r8,zero
 800cf0c:	04c00434 	movhi	r19,16
 800cf10:	9cffffc4 	addi	r19,r19,-1
 800cf14:	043fffc4 	movi	r16,-1
 800cf18:	0081ffc4 	movi	r2,2047
 800cf1c:	003fa206 	br	800cda8 <__alt_data_end+0xf800cda8>
 800cf20:	0005883a 	mov	r2,zero
 800cf24:	0027883a 	mov	r19,zero
 800cf28:	0021883a 	mov	r16,zero
 800cf2c:	003f9e06 	br	800cda8 <__alt_data_end+0xf800cda8>
 800cf30:	a085c83a 	sub	r2,r20,r2
 800cf34:	d8800115 	stw	r2,4(sp)
 800cf38:	8cc11b36 	bltu	r17,r19,800d3a8 <__divdf3+0x7a4>
 800cf3c:	9c411926 	beq	r19,r17,800d3a4 <__divdf3+0x7a0>
 800cf40:	d8c00117 	ldw	r3,4(sp)
 800cf44:	002d883a 	mov	r22,zero
 800cf48:	18ffffc4 	addi	r3,r3,-1
 800cf4c:	d8c00115 	stw	r3,4(sp)
 800cf50:	9006d63a 	srli	r3,r18,24
 800cf54:	8822923a 	slli	r17,r17,8
 800cf58:	9024923a 	slli	r18,r18,8
 800cf5c:	9809883a 	mov	r4,r19
 800cf60:	1c6eb03a 	or	r23,r3,r17
 800cf64:	b828d43a 	srli	r20,r23,16
 800cf68:	dc800015 	stw	r18,0(sp)
 800cf6c:	bcbfffcc 	andi	r18,r23,65535
 800cf70:	a00b883a 	mov	r5,r20
 800cf74:	800c3500 	call	800c350 <__udivsi3>
 800cf78:	1009883a 	mov	r4,r2
 800cf7c:	900b883a 	mov	r5,r18
 800cf80:	1039883a 	mov	fp,r2
 800cf84:	800c3600 	call	800c360 <__mulsi3>
 800cf88:	9809883a 	mov	r4,r19
 800cf8c:	a00b883a 	mov	r5,r20
 800cf90:	1023883a 	mov	r17,r2
 800cf94:	800c3580 	call	800c358 <__umodsi3>
 800cf98:	1004943a 	slli	r2,r2,16
 800cf9c:	8008d43a 	srli	r4,r16,16
 800cfa0:	110ab03a 	or	r5,r2,r4
 800cfa4:	2c40062e 	bgeu	r5,r17,800cfc0 <__divdf3+0x3bc>
 800cfa8:	2dcb883a 	add	r5,r5,r23
 800cfac:	e0bfffc4 	addi	r2,fp,-1
 800cfb0:	2dc11136 	bltu	r5,r23,800d3f8 <__divdf3+0x7f4>
 800cfb4:	2c41102e 	bgeu	r5,r17,800d3f8 <__divdf3+0x7f4>
 800cfb8:	e73fff84 	addi	fp,fp,-2
 800cfbc:	2dcb883a 	add	r5,r5,r23
 800cfc0:	2c67c83a 	sub	r19,r5,r17
 800cfc4:	9809883a 	mov	r4,r19
 800cfc8:	a00b883a 	mov	r5,r20
 800cfcc:	800c3500 	call	800c350 <__udivsi3>
 800cfd0:	1009883a 	mov	r4,r2
 800cfd4:	900b883a 	mov	r5,r18
 800cfd8:	1023883a 	mov	r17,r2
 800cfdc:	800c3600 	call	800c360 <__mulsi3>
 800cfe0:	9809883a 	mov	r4,r19
 800cfe4:	a00b883a 	mov	r5,r20
 800cfe8:	d8800215 	stw	r2,8(sp)
 800cfec:	800c3580 	call	800c358 <__umodsi3>
 800cff0:	1004943a 	slli	r2,r2,16
 800cff4:	da000217 	ldw	r8,8(sp)
 800cff8:	843fffcc 	andi	r16,r16,65535
 800cffc:	140eb03a 	or	r7,r2,r16
 800d000:	3a00062e 	bgeu	r7,r8,800d01c <__divdf3+0x418>
 800d004:	3dcf883a 	add	r7,r7,r23
 800d008:	88bfffc4 	addi	r2,r17,-1
 800d00c:	3dc0f836 	bltu	r7,r23,800d3f0 <__divdf3+0x7ec>
 800d010:	3a00f72e 	bgeu	r7,r8,800d3f0 <__divdf3+0x7ec>
 800d014:	8c7fff84 	addi	r17,r17,-2
 800d018:	3dcf883a 	add	r7,r7,r23
 800d01c:	e004943a 	slli	r2,fp,16
 800d020:	d8c00017 	ldw	r3,0(sp)
 800d024:	3a0fc83a 	sub	r7,r7,r8
 800d028:	88a2b03a 	or	r17,r17,r2
 800d02c:	1f3fffcc 	andi	fp,r3,65535
 800d030:	8a7fffcc 	andi	r9,r17,65535
 800d034:	4809883a 	mov	r4,r9
 800d038:	e00b883a 	mov	r5,fp
 800d03c:	1826d43a 	srli	r19,r3,16
 800d040:	d9c00515 	stw	r7,20(sp)
 800d044:	da400315 	stw	r9,12(sp)
 800d048:	800c3600 	call	800c360 <__mulsi3>
 800d04c:	da400317 	ldw	r9,12(sp)
 800d050:	8820d43a 	srli	r16,r17,16
 800d054:	980b883a 	mov	r5,r19
 800d058:	4809883a 	mov	r4,r9
 800d05c:	d8800215 	stw	r2,8(sp)
 800d060:	800c3600 	call	800c360 <__mulsi3>
 800d064:	8009883a 	mov	r4,r16
 800d068:	e00b883a 	mov	r5,fp
 800d06c:	d8800415 	stw	r2,16(sp)
 800d070:	800c3600 	call	800c360 <__mulsi3>
 800d074:	8009883a 	mov	r4,r16
 800d078:	980b883a 	mov	r5,r19
 800d07c:	d8800315 	stw	r2,12(sp)
 800d080:	800c3600 	call	800c360 <__mulsi3>
 800d084:	da000217 	ldw	r8,8(sp)
 800d088:	da400317 	ldw	r9,12(sp)
 800d08c:	da800417 	ldw	r10,16(sp)
 800d090:	100b883a 	mov	r5,r2
 800d094:	4004d43a 	srli	r2,r8,16
 800d098:	4a89883a 	add	r4,r9,r10
 800d09c:	d9c00517 	ldw	r7,20(sp)
 800d0a0:	2089883a 	add	r4,r4,r2
 800d0a4:	2240022e 	bgeu	r4,r9,800d0b0 <__divdf3+0x4ac>
 800d0a8:	00800074 	movhi	r2,1
 800d0ac:	288b883a 	add	r5,r5,r2
 800d0b0:	2004d43a 	srli	r2,r4,16
 800d0b4:	2020943a 	slli	r16,r4,16
 800d0b8:	423fffcc 	andi	r8,r8,65535
 800d0bc:	288b883a 	add	r5,r5,r2
 800d0c0:	8221883a 	add	r16,r16,r8
 800d0c4:	3940ab36 	bltu	r7,r5,800d374 <__divdf3+0x770>
 800d0c8:	3940a926 	beq	r7,r5,800d370 <__divdf3+0x76c>
 800d0cc:	394bc83a 	sub	r5,r7,r5
 800d0d0:	b421c83a 	sub	r16,r22,r16
 800d0d4:	b42d803a 	cmpltu	r22,r22,r16
 800d0d8:	2dadc83a 	sub	r22,r5,r22
 800d0dc:	b5c0da26 	beq	r22,r23,800d448 <__divdf3+0x844>
 800d0e0:	b009883a 	mov	r4,r22
 800d0e4:	a00b883a 	mov	r5,r20
 800d0e8:	800c3500 	call	800c350 <__udivsi3>
 800d0ec:	1009883a 	mov	r4,r2
 800d0f0:	900b883a 	mov	r5,r18
 800d0f4:	d8800215 	stw	r2,8(sp)
 800d0f8:	800c3600 	call	800c360 <__mulsi3>
 800d0fc:	b009883a 	mov	r4,r22
 800d100:	a00b883a 	mov	r5,r20
 800d104:	d8800515 	stw	r2,20(sp)
 800d108:	800c3580 	call	800c358 <__umodsi3>
 800d10c:	1004943a 	slli	r2,r2,16
 800d110:	8008d43a 	srli	r4,r16,16
 800d114:	d9c00517 	ldw	r7,20(sp)
 800d118:	da000217 	ldw	r8,8(sp)
 800d11c:	110ab03a 	or	r5,r2,r4
 800d120:	29c0062e 	bgeu	r5,r7,800d13c <__divdf3+0x538>
 800d124:	2dcb883a 	add	r5,r5,r23
 800d128:	40bfffc4 	addi	r2,r8,-1
 800d12c:	2dc0ca36 	bltu	r5,r23,800d458 <__divdf3+0x854>
 800d130:	29c0c92e 	bgeu	r5,r7,800d458 <__divdf3+0x854>
 800d134:	423fff84 	addi	r8,r8,-2
 800d138:	2dcb883a 	add	r5,r5,r23
 800d13c:	29cfc83a 	sub	r7,r5,r7
 800d140:	3809883a 	mov	r4,r7
 800d144:	a00b883a 	mov	r5,r20
 800d148:	da000215 	stw	r8,8(sp)
 800d14c:	d9c00515 	stw	r7,20(sp)
 800d150:	800c3500 	call	800c350 <__udivsi3>
 800d154:	900b883a 	mov	r5,r18
 800d158:	1009883a 	mov	r4,r2
 800d15c:	102d883a 	mov	r22,r2
 800d160:	800c3600 	call	800c360 <__mulsi3>
 800d164:	d9c00517 	ldw	r7,20(sp)
 800d168:	a00b883a 	mov	r5,r20
 800d16c:	1025883a 	mov	r18,r2
 800d170:	3809883a 	mov	r4,r7
 800d174:	800c3580 	call	800c358 <__umodsi3>
 800d178:	1004943a 	slli	r2,r2,16
 800d17c:	843fffcc 	andi	r16,r16,65535
 800d180:	da000217 	ldw	r8,8(sp)
 800d184:	140eb03a 	or	r7,r2,r16
 800d188:	3c80062e 	bgeu	r7,r18,800d1a4 <__divdf3+0x5a0>
 800d18c:	3dcf883a 	add	r7,r7,r23
 800d190:	b0bfffc4 	addi	r2,r22,-1
 800d194:	3dc0ae36 	bltu	r7,r23,800d450 <__divdf3+0x84c>
 800d198:	3c80ad2e 	bgeu	r7,r18,800d450 <__divdf3+0x84c>
 800d19c:	b5bfff84 	addi	r22,r22,-2
 800d1a0:	3dcf883a 	add	r7,r7,r23
 800d1a4:	4010943a 	slli	r8,r8,16
 800d1a8:	3ca9c83a 	sub	r20,r7,r18
 800d1ac:	e00b883a 	mov	r5,fp
 800d1b0:	b224b03a 	or	r18,r22,r8
 800d1b4:	91ffffcc 	andi	r7,r18,65535
 800d1b8:	3809883a 	mov	r4,r7
 800d1bc:	d9c00515 	stw	r7,20(sp)
 800d1c0:	800c3600 	call	800c360 <__mulsi3>
 800d1c4:	d9c00517 	ldw	r7,20(sp)
 800d1c8:	9020d43a 	srli	r16,r18,16
 800d1cc:	980b883a 	mov	r5,r19
 800d1d0:	3809883a 	mov	r4,r7
 800d1d4:	102d883a 	mov	r22,r2
 800d1d8:	800c3600 	call	800c360 <__mulsi3>
 800d1dc:	e00b883a 	mov	r5,fp
 800d1e0:	8009883a 	mov	r4,r16
 800d1e4:	d8800515 	stw	r2,20(sp)
 800d1e8:	800c3600 	call	800c360 <__mulsi3>
 800d1ec:	8009883a 	mov	r4,r16
 800d1f0:	980b883a 	mov	r5,r19
 800d1f4:	1039883a 	mov	fp,r2
 800d1f8:	800c3600 	call	800c360 <__mulsi3>
 800d1fc:	d9c00517 	ldw	r7,20(sp)
 800d200:	100b883a 	mov	r5,r2
 800d204:	b004d43a 	srli	r2,r22,16
 800d208:	e1c9883a 	add	r4,fp,r7
 800d20c:	2089883a 	add	r4,r4,r2
 800d210:	2700022e 	bgeu	r4,fp,800d21c <__divdf3+0x618>
 800d214:	00800074 	movhi	r2,1
 800d218:	288b883a 	add	r5,r5,r2
 800d21c:	2004d43a 	srli	r2,r4,16
 800d220:	2008943a 	slli	r4,r4,16
 800d224:	b5bfffcc 	andi	r22,r22,65535
 800d228:	288b883a 	add	r5,r5,r2
 800d22c:	25ad883a 	add	r22,r4,r22
 800d230:	a140632e 	bgeu	r20,r5,800d3c0 <__divdf3+0x7bc>
 800d234:	a5e9883a 	add	r20,r20,r23
 800d238:	90bfffc4 	addi	r2,r18,-1
 800d23c:	a5c0702e 	bgeu	r20,r23,800d400 <__divdf3+0x7fc>
 800d240:	1025883a 	mov	r18,r2
 800d244:	a1406126 	beq	r20,r5,800d3cc <__divdf3+0x7c8>
 800d248:	94800054 	ori	r18,r18,1
 800d24c:	d8c00117 	ldw	r3,4(sp)
 800d250:	1880ffc4 	addi	r2,r3,1023
 800d254:	0080720e 	bge	zero,r2,800d420 <__divdf3+0x81c>
 800d258:	90c001cc 	andi	r3,r18,7
 800d25c:	18000726 	beq	r3,zero,800d27c <__divdf3+0x678>
 800d260:	910003cc 	andi	r4,r18,15
 800d264:	00c00104 	movi	r3,4
 800d268:	20c00426 	beq	r4,r3,800d27c <__divdf3+0x678>
 800d26c:	90c7883a 	add	r3,r18,r3
 800d270:	1ca5803a 	cmpltu	r18,r3,r18
 800d274:	8ca3883a 	add	r17,r17,r18
 800d278:	1825883a 	mov	r18,r3
 800d27c:	88c0402c 	andhi	r3,r17,256
 800d280:	18000526 	beq	r3,zero,800d298 <__divdf3+0x694>
 800d284:	d8c00117 	ldw	r3,4(sp)
 800d288:	00bfc034 	movhi	r2,65280
 800d28c:	10bfffc4 	addi	r2,r2,-1
 800d290:	88a2703a 	and	r17,r17,r2
 800d294:	18810004 	addi	r2,r3,1024
 800d298:	00c1ff84 	movi	r3,2046
 800d29c:	18bebe16 	blt	r3,r2,800cd98 <__alt_data_end+0xf800cd98>
 800d2a0:	8820977a 	slli	r16,r17,29
 800d2a4:	9024d0fa 	srli	r18,r18,3
 800d2a8:	8822927a 	slli	r17,r17,9
 800d2ac:	1081ffcc 	andi	r2,r2,2047
 800d2b0:	84a0b03a 	or	r16,r16,r18
 800d2b4:	8826d33a 	srli	r19,r17,12
 800d2b8:	aa00004c 	andi	r8,r21,1
 800d2bc:	003eba06 	br	800cda8 <__alt_data_end+0xf800cda8>
 800d2c0:	9880022c 	andhi	r2,r19,8
 800d2c4:	10000a26 	beq	r2,zero,800d2f0 <__divdf3+0x6ec>
 800d2c8:	8880022c 	andhi	r2,r17,8
 800d2cc:	1000081e 	bne	r2,zero,800d2f0 <__divdf3+0x6ec>
 800d2d0:	00800434 	movhi	r2,16
 800d2d4:	10bfffc4 	addi	r2,r2,-1
 800d2d8:	8cc00234 	orhi	r19,r17,8
 800d2dc:	98a6703a 	and	r19,r19,r2
 800d2e0:	b811883a 	mov	r8,r23
 800d2e4:	9021883a 	mov	r16,r18
 800d2e8:	0081ffc4 	movi	r2,2047
 800d2ec:	003eae06 	br	800cda8 <__alt_data_end+0xf800cda8>
 800d2f0:	00800434 	movhi	r2,16
 800d2f4:	10bfffc4 	addi	r2,r2,-1
 800d2f8:	9cc00234 	orhi	r19,r19,8
 800d2fc:	98a6703a 	and	r19,r19,r2
 800d300:	b011883a 	mov	r8,r22
 800d304:	0081ffc4 	movi	r2,2047
 800d308:	003ea706 	br	800cda8 <__alt_data_end+0xf800cda8>
 800d30c:	147ff604 	addi	r17,r2,-40
 800d310:	3462983a 	sll	r17,r6,r17
 800d314:	0025883a 	mov	r18,zero
 800d318:	003ee906 	br	800cec0 <__alt_data_end+0xf800cec0>
 800d31c:	3009883a 	mov	r4,r6
 800d320:	d9800215 	stw	r6,8(sp)
 800d324:	da400315 	stw	r9,12(sp)
 800d328:	da800415 	stw	r10,16(sp)
 800d32c:	800ea600 	call	800ea60 <__clzsi2>
 800d330:	10800804 	addi	r2,r2,32
 800d334:	da800417 	ldw	r10,16(sp)
 800d338:	da400317 	ldw	r9,12(sp)
 800d33c:	d9800217 	ldw	r6,8(sp)
 800d340:	003ed606 	br	800ce9c <__alt_data_end+0xf800ce9c>
 800d344:	14fff604 	addi	r19,r2,-40
 800d348:	94e6983a 	sll	r19,r18,r19
 800d34c:	0021883a 	mov	r16,zero
 800d350:	003ebc06 	br	800ce44 <__alt_data_end+0xf800ce44>
 800d354:	d9800215 	stw	r6,8(sp)
 800d358:	d9c00515 	stw	r7,20(sp)
 800d35c:	800ea600 	call	800ea60 <__clzsi2>
 800d360:	10800804 	addi	r2,r2,32
 800d364:	d9c00517 	ldw	r7,20(sp)
 800d368:	d9800217 	ldw	r6,8(sp)
 800d36c:	003eac06 	br	800ce20 <__alt_data_end+0xf800ce20>
 800d370:	b400292e 	bgeu	r22,r16,800d418 <__divdf3+0x814>
 800d374:	d8c00017 	ldw	r3,0(sp)
 800d378:	b0ed883a 	add	r22,r22,r3
 800d37c:	b0c5803a 	cmpltu	r2,r22,r3
 800d380:	15c5883a 	add	r2,r2,r23
 800d384:	11cf883a 	add	r7,r2,r7
 800d388:	88bfffc4 	addi	r2,r17,-1
 800d38c:	b9c0122e 	bgeu	r23,r7,800d3d8 <__divdf3+0x7d4>
 800d390:	39405036 	bltu	r7,r5,800d4d4 <__divdf3+0x8d0>
 800d394:	29c01e26 	beq	r5,r7,800d410 <__divdf3+0x80c>
 800d398:	394bc83a 	sub	r5,r7,r5
 800d39c:	1023883a 	mov	r17,r2
 800d3a0:	003f4b06 	br	800d0d0 <__alt_data_end+0xf800d0d0>
 800d3a4:	943ee62e 	bgeu	r18,r16,800cf40 <__alt_data_end+0xf800cf40>
 800d3a8:	980497fa 	slli	r2,r19,31
 800d3ac:	8006d07a 	srli	r3,r16,1
 800d3b0:	802c97fa 	slli	r22,r16,31
 800d3b4:	9826d07a 	srli	r19,r19,1
 800d3b8:	18a0b03a 	or	r16,r3,r2
 800d3bc:	003ee406 	br	800cf50 <__alt_data_end+0xf800cf50>
 800d3c0:	a17fa11e 	bne	r20,r5,800d248 <__alt_data_end+0xf800d248>
 800d3c4:	b03f9b1e 	bne	r22,zero,800d234 <__alt_data_end+0xf800d234>
 800d3c8:	d8000015 	stw	zero,0(sp)
 800d3cc:	d8c00017 	ldw	r3,0(sp)
 800d3d0:	1dbf9d1e 	bne	r3,r22,800d248 <__alt_data_end+0xf800d248>
 800d3d4:	003f9d06 	br	800d24c <__alt_data_end+0xf800d24c>
 800d3d8:	3dffef1e 	bne	r7,r23,800d398 <__alt_data_end+0xf800d398>
 800d3dc:	d8c00017 	ldw	r3,0(sp)
 800d3e0:	b0ffeb2e 	bgeu	r22,r3,800d390 <__alt_data_end+0xf800d390>
 800d3e4:	b94bc83a 	sub	r5,r23,r5
 800d3e8:	1023883a 	mov	r17,r2
 800d3ec:	003f3806 	br	800d0d0 <__alt_data_end+0xf800d0d0>
 800d3f0:	1023883a 	mov	r17,r2
 800d3f4:	003f0906 	br	800d01c <__alt_data_end+0xf800d01c>
 800d3f8:	1039883a 	mov	fp,r2
 800d3fc:	003ef006 	br	800cfc0 <__alt_data_end+0xf800cfc0>
 800d400:	a1403b36 	bltu	r20,r5,800d4f0 <__divdf3+0x8ec>
 800d404:	2d005826 	beq	r5,r20,800d568 <__divdf3+0x964>
 800d408:	1025883a 	mov	r18,r2
 800d40c:	003f8e06 	br	800d248 <__alt_data_end+0xf800d248>
 800d410:	b4003036 	bltu	r22,r16,800d4d4 <__divdf3+0x8d0>
 800d414:	1023883a 	mov	r17,r2
 800d418:	000b883a 	mov	r5,zero
 800d41c:	003f2c06 	br	800d0d0 <__alt_data_end+0xf800d0d0>
 800d420:	d8c00117 	ldw	r3,4(sp)
 800d424:	00bf0084 	movi	r2,-1022
 800d428:	10c5c83a 	sub	r2,r2,r3
 800d42c:	00c00e04 	movi	r3,56
 800d430:	18800d0e 	bge	r3,r2,800d468 <__divdf3+0x864>
 800d434:	aa00004c 	andi	r8,r21,1
 800d438:	0005883a 	mov	r2,zero
 800d43c:	0027883a 	mov	r19,zero
 800d440:	0021883a 	mov	r16,zero
 800d444:	003e5806 	br	800cda8 <__alt_data_end+0xf800cda8>
 800d448:	04bfffc4 	movi	r18,-1
 800d44c:	003f7f06 	br	800d24c <__alt_data_end+0xf800d24c>
 800d450:	102d883a 	mov	r22,r2
 800d454:	003f5306 	br	800d1a4 <__alt_data_end+0xf800d1a4>
 800d458:	1011883a 	mov	r8,r2
 800d45c:	003f3706 	br	800d13c <__alt_data_end+0xf800d13c>
 800d460:	502b883a 	mov	r21,r10
 800d464:	003f7906 	br	800d24c <__alt_data_end+0xf800d24c>
 800d468:	00c007c4 	movi	r3,31
 800d46c:	18802816 	blt	r3,r2,800d510 <__divdf3+0x90c>
 800d470:	d9000117 	ldw	r4,4(sp)
 800d474:	908ad83a 	srl	r5,r18,r2
 800d478:	8884d83a 	srl	r2,r17,r2
 800d47c:	20c10784 	addi	r3,r4,1054
 800d480:	88c8983a 	sll	r4,r17,r3
 800d484:	90c6983a 	sll	r3,r18,r3
 800d488:	2908b03a 	or	r4,r5,r4
 800d48c:	1806c03a 	cmpne	r3,r3,zero
 800d490:	20c6b03a 	or	r3,r4,r3
 800d494:	190001cc 	andi	r4,r3,7
 800d498:	20000726 	beq	r4,zero,800d4b8 <__divdf3+0x8b4>
 800d49c:	194003cc 	andi	r5,r3,15
 800d4a0:	01000104 	movi	r4,4
 800d4a4:	29000426 	beq	r5,r4,800d4b8 <__divdf3+0x8b4>
 800d4a8:	1909883a 	add	r4,r3,r4
 800d4ac:	20c7803a 	cmpltu	r3,r4,r3
 800d4b0:	10c5883a 	add	r2,r2,r3
 800d4b4:	2007883a 	mov	r3,r4
 800d4b8:	1100202c 	andhi	r4,r2,128
 800d4bc:	20002226 	beq	r4,zero,800d548 <__divdf3+0x944>
 800d4c0:	aa00004c 	andi	r8,r21,1
 800d4c4:	00800044 	movi	r2,1
 800d4c8:	0027883a 	mov	r19,zero
 800d4cc:	0021883a 	mov	r16,zero
 800d4d0:	003e3506 	br	800cda8 <__alt_data_end+0xf800cda8>
 800d4d4:	d8c00017 	ldw	r3,0(sp)
 800d4d8:	8c7fff84 	addi	r17,r17,-2
 800d4dc:	b0ed883a 	add	r22,r22,r3
 800d4e0:	b0c5803a 	cmpltu	r2,r22,r3
 800d4e4:	15c5883a 	add	r2,r2,r23
 800d4e8:	11cf883a 	add	r7,r2,r7
 800d4ec:	003ef706 	br	800d0cc <__alt_data_end+0xf800d0cc>
 800d4f0:	d8c00017 	ldw	r3,0(sp)
 800d4f4:	18c9883a 	add	r4,r3,r3
 800d4f8:	20c5803a 	cmpltu	r2,r4,r3
 800d4fc:	15c7883a 	add	r3,r2,r23
 800d500:	a0e9883a 	add	r20,r20,r3
 800d504:	90bfff84 	addi	r2,r18,-2
 800d508:	d9000015 	stw	r4,0(sp)
 800d50c:	003f4c06 	br	800d240 <__alt_data_end+0xf800d240>
 800d510:	d9000117 	ldw	r4,4(sp)
 800d514:	00fef884 	movi	r3,-1054
 800d518:	1907c83a 	sub	r3,r3,r4
 800d51c:	01000804 	movi	r4,32
 800d520:	88c6d83a 	srl	r3,r17,r3
 800d524:	11001426 	beq	r2,r4,800d578 <__divdf3+0x974>
 800d528:	d9000117 	ldw	r4,4(sp)
 800d52c:	20810f84 	addi	r2,r4,1086
 800d530:	8884983a 	sll	r2,r17,r2
 800d534:	1484b03a 	or	r2,r2,r18
 800d538:	1004c03a 	cmpne	r2,r2,zero
 800d53c:	10c6b03a 	or	r3,r2,r3
 800d540:	0005883a 	mov	r2,zero
 800d544:	003fd306 	br	800d494 <__alt_data_end+0xf800d494>
 800d548:	1020977a 	slli	r16,r2,29
 800d54c:	1806d0fa 	srli	r3,r3,3
 800d550:	1004927a 	slli	r2,r2,9
 800d554:	aa00004c 	andi	r8,r21,1
 800d558:	80e0b03a 	or	r16,r16,r3
 800d55c:	1026d33a 	srli	r19,r2,12
 800d560:	0005883a 	mov	r2,zero
 800d564:	003e1006 	br	800cda8 <__alt_data_end+0xf800cda8>
 800d568:	d8c00017 	ldw	r3,0(sp)
 800d56c:	1dbfe036 	bltu	r3,r22,800d4f0 <__alt_data_end+0xf800d4f0>
 800d570:	1025883a 	mov	r18,r2
 800d574:	003f9506 	br	800d3cc <__alt_data_end+0xf800d3cc>
 800d578:	0005883a 	mov	r2,zero
 800d57c:	003fed06 	br	800d534 <__alt_data_end+0xf800d534>
 800d580:	00800434 	movhi	r2,16
 800d584:	10bfffc4 	addi	r2,r2,-1
 800d588:	8cc00234 	orhi	r19,r17,8
 800d58c:	98a6703a 	and	r19,r19,r2
 800d590:	5011883a 	mov	r8,r10
 800d594:	9021883a 	mov	r16,r18
 800d598:	0081ffc4 	movi	r2,2047
 800d59c:	003e0206 	br	800cda8 <__alt_data_end+0xf800cda8>

0800d5a0 <__eqdf2>:
 800d5a0:	2806d53a 	srli	r3,r5,20
 800d5a4:	3810d53a 	srli	r8,r7,20
 800d5a8:	00800434 	movhi	r2,16
 800d5ac:	10bfffc4 	addi	r2,r2,-1
 800d5b0:	18c1ffcc 	andi	r3,r3,2047
 800d5b4:	0241ffc4 	movi	r9,2047
 800d5b8:	2894703a 	and	r10,r5,r2
 800d5bc:	4201ffcc 	andi	r8,r8,2047
 800d5c0:	3884703a 	and	r2,r7,r2
 800d5c4:	280ad7fa 	srli	r5,r5,31
 800d5c8:	380ed7fa 	srli	r7,r7,31
 800d5cc:	1a400f26 	beq	r3,r9,800d60c <__eqdf2+0x6c>
 800d5d0:	0241ffc4 	movi	r9,2047
 800d5d4:	42400326 	beq	r8,r9,800d5e4 <__eqdf2+0x44>
 800d5d8:	1a000526 	beq	r3,r8,800d5f0 <__eqdf2+0x50>
 800d5dc:	00800044 	movi	r2,1
 800d5e0:	f800283a 	ret
 800d5e4:	1192b03a 	or	r9,r2,r6
 800d5e8:	483ffc1e 	bne	r9,zero,800d5dc <__alt_data_end+0xf800d5dc>
 800d5ec:	1a3ffb1e 	bne	r3,r8,800d5dc <__alt_data_end+0xf800d5dc>
 800d5f0:	50bffa1e 	bne	r10,r2,800d5dc <__alt_data_end+0xf800d5dc>
 800d5f4:	21bff91e 	bne	r4,r6,800d5dc <__alt_data_end+0xf800d5dc>
 800d5f8:	29c00826 	beq	r5,r7,800d61c <__eqdf2+0x7c>
 800d5fc:	183ff71e 	bne	r3,zero,800d5dc <__alt_data_end+0xf800d5dc>
 800d600:	5104b03a 	or	r2,r10,r4
 800d604:	1004c03a 	cmpne	r2,r2,zero
 800d608:	f800283a 	ret
 800d60c:	5112b03a 	or	r9,r10,r4
 800d610:	483fef26 	beq	r9,zero,800d5d0 <__alt_data_end+0xf800d5d0>
 800d614:	00800044 	movi	r2,1
 800d618:	f800283a 	ret
 800d61c:	0005883a 	mov	r2,zero
 800d620:	f800283a 	ret

0800d624 <__gedf2>:
 800d624:	2804d53a 	srli	r2,r5,20
 800d628:	3810d53a 	srli	r8,r7,20
 800d62c:	00c00434 	movhi	r3,16
 800d630:	18ffffc4 	addi	r3,r3,-1
 800d634:	1081ffcc 	andi	r2,r2,2047
 800d638:	0241ffc4 	movi	r9,2047
 800d63c:	28d4703a 	and	r10,r5,r3
 800d640:	4201ffcc 	andi	r8,r8,2047
 800d644:	38c6703a 	and	r3,r7,r3
 800d648:	280ad7fa 	srli	r5,r5,31
 800d64c:	380ed7fa 	srli	r7,r7,31
 800d650:	12401b26 	beq	r2,r9,800d6c0 <__gedf2+0x9c>
 800d654:	0241ffc4 	movi	r9,2047
 800d658:	42400926 	beq	r8,r9,800d680 <__gedf2+0x5c>
 800d65c:	10000c1e 	bne	r2,zero,800d690 <__gedf2+0x6c>
 800d660:	5112b03a 	or	r9,r10,r4
 800d664:	4813003a 	cmpeq	r9,r9,zero
 800d668:	4817883a 	mov	r11,r9
 800d66c:	40000a26 	beq	r8,zero,800d698 <__gedf2+0x74>
 800d670:	48001626 	beq	r9,zero,800d6cc <__gedf2+0xa8>
 800d674:	38000d1e 	bne	r7,zero,800d6ac <__gedf2+0x88>
 800d678:	00bfffc4 	movi	r2,-1
 800d67c:	f800283a 	ret
 800d680:	1992b03a 	or	r9,r3,r6
 800d684:	483ff526 	beq	r9,zero,800d65c <__alt_data_end+0xf800d65c>
 800d688:	00bfff84 	movi	r2,-2
 800d68c:	f800283a 	ret
 800d690:	40000e1e 	bne	r8,zero,800d6cc <__gedf2+0xa8>
 800d694:	0017883a 	mov	r11,zero
 800d698:	1992b03a 	or	r9,r3,r6
 800d69c:	4813003a 	cmpeq	r9,r9,zero
 800d6a0:	5800041e 	bne	r11,zero,800d6b4 <__gedf2+0x90>
 800d6a4:	48000926 	beq	r9,zero,800d6cc <__gedf2+0xa8>
 800d6a8:	283ff31e 	bne	r5,zero,800d678 <__alt_data_end+0xf800d678>
 800d6ac:	00800044 	movi	r2,1
 800d6b0:	f800283a 	ret
 800d6b4:	483fef26 	beq	r9,zero,800d674 <__alt_data_end+0xf800d674>
 800d6b8:	0005883a 	mov	r2,zero
 800d6bc:	f800283a 	ret
 800d6c0:	5112b03a 	or	r9,r10,r4
 800d6c4:	483fe326 	beq	r9,zero,800d654 <__alt_data_end+0xf800d654>
 800d6c8:	003fef06 	br	800d688 <__alt_data_end+0xf800d688>
 800d6cc:	29fff61e 	bne	r5,r7,800d6a8 <__alt_data_end+0xf800d6a8>
 800d6d0:	40bff516 	blt	r8,r2,800d6a8 <__alt_data_end+0xf800d6a8>
 800d6d4:	12000316 	blt	r2,r8,800d6e4 <__gedf2+0xc0>
 800d6d8:	1abff336 	bltu	r3,r10,800d6a8 <__alt_data_end+0xf800d6a8>
 800d6dc:	50c00326 	beq	r10,r3,800d6ec <__gedf2+0xc8>
 800d6e0:	50fff52e 	bgeu	r10,r3,800d6b8 <__alt_data_end+0xf800d6b8>
 800d6e4:	283fe426 	beq	r5,zero,800d678 <__alt_data_end+0xf800d678>
 800d6e8:	003ff006 	br	800d6ac <__alt_data_end+0xf800d6ac>
 800d6ec:	313fee36 	bltu	r6,r4,800d6a8 <__alt_data_end+0xf800d6a8>
 800d6f0:	21bff12e 	bgeu	r4,r6,800d6b8 <__alt_data_end+0xf800d6b8>
 800d6f4:	283fe026 	beq	r5,zero,800d678 <__alt_data_end+0xf800d678>
 800d6f8:	003fec06 	br	800d6ac <__alt_data_end+0xf800d6ac>

0800d6fc <__ledf2>:
 800d6fc:	2806d53a 	srli	r3,r5,20
 800d700:	3810d53a 	srli	r8,r7,20
 800d704:	00800434 	movhi	r2,16
 800d708:	10bfffc4 	addi	r2,r2,-1
 800d70c:	18c1ffcc 	andi	r3,r3,2047
 800d710:	0241ffc4 	movi	r9,2047
 800d714:	2894703a 	and	r10,r5,r2
 800d718:	4201ffcc 	andi	r8,r8,2047
 800d71c:	3884703a 	and	r2,r7,r2
 800d720:	280ad7fa 	srli	r5,r5,31
 800d724:	380ed7fa 	srli	r7,r7,31
 800d728:	1a402026 	beq	r3,r9,800d7ac <__ledf2+0xb0>
 800d72c:	0241ffc4 	movi	r9,2047
 800d730:	42401726 	beq	r8,r9,800d790 <__ledf2+0x94>
 800d734:	18000b26 	beq	r3,zero,800d764 <__ledf2+0x68>
 800d738:	29403fcc 	andi	r5,r5,255
 800d73c:	39c03fcc 	andi	r7,r7,255
 800d740:	40000f1e 	bne	r8,zero,800d780 <__ledf2+0x84>
 800d744:	0017883a 	mov	r11,zero
 800d748:	1192b03a 	or	r9,r2,r6
 800d74c:	4813003a 	cmpeq	r9,r9,zero
 800d750:	58001326 	beq	r11,zero,800d7a0 <__ledf2+0xa4>
 800d754:	48001e1e 	bne	r9,zero,800d7d0 <__ledf2+0xd4>
 800d758:	38000b1e 	bne	r7,zero,800d788 <__ledf2+0x8c>
 800d75c:	00bfffc4 	movi	r2,-1
 800d760:	f800283a 	ret
 800d764:	5112b03a 	or	r9,r10,r4
 800d768:	4813003a 	cmpeq	r9,r9,zero
 800d76c:	4817883a 	mov	r11,r9
 800d770:	29403fcc 	andi	r5,r5,255
 800d774:	39c03fcc 	andi	r7,r7,255
 800d778:	403ff326 	beq	r8,zero,800d748 <__alt_data_end+0xf800d748>
 800d77c:	483ff61e 	bne	r9,zero,800d758 <__alt_data_end+0xf800d758>
 800d780:	29c00e26 	beq	r5,r7,800d7bc <__ledf2+0xc0>
 800d784:	283ff51e 	bne	r5,zero,800d75c <__alt_data_end+0xf800d75c>
 800d788:	00800044 	movi	r2,1
 800d78c:	f800283a 	ret
 800d790:	1192b03a 	or	r9,r2,r6
 800d794:	483fe726 	beq	r9,zero,800d734 <__alt_data_end+0xf800d734>
 800d798:	00800084 	movi	r2,2
 800d79c:	f800283a 	ret
 800d7a0:	483ff726 	beq	r9,zero,800d780 <__alt_data_end+0xf800d780>
 800d7a4:	283ff826 	beq	r5,zero,800d788 <__alt_data_end+0xf800d788>
 800d7a8:	003fec06 	br	800d75c <__alt_data_end+0xf800d75c>
 800d7ac:	5112b03a 	or	r9,r10,r4
 800d7b0:	483fde26 	beq	r9,zero,800d72c <__alt_data_end+0xf800d72c>
 800d7b4:	00800084 	movi	r2,2
 800d7b8:	f800283a 	ret
 800d7bc:	40fff116 	blt	r8,r3,800d784 <__alt_data_end+0xf800d784>
 800d7c0:	1a000716 	blt	r3,r8,800d7e0 <__ledf2+0xe4>
 800d7c4:	12bfef36 	bltu	r2,r10,800d784 <__alt_data_end+0xf800d784>
 800d7c8:	50800326 	beq	r10,r2,800d7d8 <__ledf2+0xdc>
 800d7cc:	50800436 	bltu	r10,r2,800d7e0 <__ledf2+0xe4>
 800d7d0:	0005883a 	mov	r2,zero
 800d7d4:	f800283a 	ret
 800d7d8:	313fea36 	bltu	r6,r4,800d784 <__alt_data_end+0xf800d784>
 800d7dc:	21bffc2e 	bgeu	r4,r6,800d7d0 <__alt_data_end+0xf800d7d0>
 800d7e0:	283fde26 	beq	r5,zero,800d75c <__alt_data_end+0xf800d75c>
 800d7e4:	003fe806 	br	800d788 <__alt_data_end+0xf800d788>

0800d7e8 <__muldf3>:
 800d7e8:	deffee04 	addi	sp,sp,-72
 800d7ec:	dc400915 	stw	r17,36(sp)
 800d7f0:	2822d53a 	srli	r17,r5,20
 800d7f4:	dc000815 	stw	r16,32(sp)
 800d7f8:	2820d7fa 	srli	r16,r5,31
 800d7fc:	df001015 	stw	fp,64(sp)
 800d800:	dd000c15 	stw	r20,48(sp)
 800d804:	dcc00b15 	stw	r19,44(sp)
 800d808:	dfc01115 	stw	ra,68(sp)
 800d80c:	04c00434 	movhi	r19,16
 800d810:	9cffffc4 	addi	r19,r19,-1
 800d814:	ddc00f15 	stw	r23,60(sp)
 800d818:	dd800e15 	stw	r22,56(sp)
 800d81c:	dd400d15 	stw	r21,52(sp)
 800d820:	dc800a15 	stw	r18,40(sp)
 800d824:	8c41ffcc 	andi	r17,r17,2047
 800d828:	2029883a 	mov	r20,r4
 800d82c:	2ce6703a 	and	r19,r5,r19
 800d830:	8039883a 	mov	fp,r16
 800d834:	82003fcc 	andi	r8,r16,255
 800d838:	88005d26 	beq	r17,zero,800d9b0 <__muldf3+0x1c8>
 800d83c:	0081ffc4 	movi	r2,2047
 800d840:	202f883a 	mov	r23,r4
 800d844:	88803326 	beq	r17,r2,800d914 <__muldf3+0x12c>
 800d848:	98800434 	orhi	r2,r19,16
 800d84c:	100490fa 	slli	r2,r2,3
 800d850:	2026d77a 	srli	r19,r4,29
 800d854:	202e90fa 	slli	r23,r4,3
 800d858:	8c7f0044 	addi	r17,r17,-1023
 800d85c:	14e6b03a 	or	r19,r2,r19
 800d860:	002d883a 	mov	r22,zero
 800d864:	000b883a 	mov	r5,zero
 800d868:	3804d53a 	srli	r2,r7,20
 800d86c:	3828d7fa 	srli	r20,r7,31
 800d870:	04800434 	movhi	r18,16
 800d874:	94bfffc4 	addi	r18,r18,-1
 800d878:	1081ffcc 	andi	r2,r2,2047
 800d87c:	302b883a 	mov	r21,r6
 800d880:	3ca4703a 	and	r18,r7,r18
 800d884:	a2403fcc 	andi	r9,r20,255
 800d888:	10006826 	beq	r2,zero,800da2c <__muldf3+0x244>
 800d88c:	00c1ffc4 	movi	r3,2047
 800d890:	10c06026 	beq	r2,r3,800da14 <__muldf3+0x22c>
 800d894:	90c00434 	orhi	r3,r18,16
 800d898:	180690fa 	slli	r3,r3,3
 800d89c:	3024d77a 	srli	r18,r6,29
 800d8a0:	302a90fa 	slli	r21,r6,3
 800d8a4:	10bf0044 	addi	r2,r2,-1023
 800d8a8:	1ca4b03a 	or	r18,r3,r18
 800d8ac:	0007883a 	mov	r3,zero
 800d8b0:	1d88b03a 	or	r4,r3,r22
 800d8b4:	2109883a 	add	r4,r4,r4
 800d8b8:	2109883a 	add	r4,r4,r4
 800d8bc:	01820074 	movhi	r6,2049
 800d8c0:	31b63504 	addi	r6,r6,-10028
 800d8c4:	2189883a 	add	r4,r4,r6
 800d8c8:	21000017 	ldw	r4,0(r4)
 800d8cc:	852cf03a 	xor	r22,r16,r20
 800d8d0:	2000683a 	jmp	r4
 800d8d4:	0800db1c 	xori	zero,at,876
 800d8d8:	0800db0c 	andi	zero,at,876
 800d8dc:	0800db0c 	andi	zero,at,876
 800d8e0:	0800daf8 	rdprs	zero,at,875
 800d8e4:	0800d934 	orhi	zero,at,868
 800d8e8:	0800d934 	orhi	zero,at,868
 800d8ec:	0800dae0 	cmpeqi	zero,at,875
 800d8f0:	0800daf8 	rdprs	zero,at,875
 800d8f4:	0800d934 	orhi	zero,at,868
 800d8f8:	0800dae0 	cmpeqi	zero,at,875
 800d8fc:	0800d934 	orhi	zero,at,868
 800d900:	0800daf8 	rdprs	zero,at,875
 800d904:	0800d930 	cmpltui	zero,at,868
 800d908:	0800d930 	cmpltui	zero,at,868
 800d90c:	0800d930 	cmpltui	zero,at,868
 800d910:	0800de34 	orhi	zero,at,888
 800d914:	9904b03a 	or	r2,r19,r4
 800d918:	10006e1e 	bne	r2,zero,800dad4 <__muldf3+0x2ec>
 800d91c:	05800204 	movi	r22,8
 800d920:	0027883a 	mov	r19,zero
 800d924:	002f883a 	mov	r23,zero
 800d928:	01400084 	movi	r5,2
 800d92c:	003fce06 	br	800d868 <__alt_data_end+0xf800d868>
 800d930:	402d883a 	mov	r22,r8
 800d934:	00800084 	movi	r2,2
 800d938:	28805626 	beq	r5,r2,800da94 <__muldf3+0x2ac>
 800d93c:	008000c4 	movi	r2,3
 800d940:	2881a226 	beq	r5,r2,800dfcc <__muldf3+0x7e4>
 800d944:	00800044 	movi	r2,1
 800d948:	28811d1e 	bne	r5,r2,800ddc0 <__muldf3+0x5d8>
 800d94c:	b039883a 	mov	fp,r22
 800d950:	0005883a 	mov	r2,zero
 800d954:	0027883a 	mov	r19,zero
 800d958:	002f883a 	mov	r23,zero
 800d95c:	1004953a 	slli	r2,r2,20
 800d960:	e7003fcc 	andi	fp,fp,255
 800d964:	e03897fa 	slli	fp,fp,31
 800d968:	00c00434 	movhi	r3,16
 800d96c:	18ffffc4 	addi	r3,r3,-1
 800d970:	98e6703a 	and	r19,r19,r3
 800d974:	9886b03a 	or	r3,r19,r2
 800d978:	1f06b03a 	or	r3,r3,fp
 800d97c:	b805883a 	mov	r2,r23
 800d980:	dfc01117 	ldw	ra,68(sp)
 800d984:	df001017 	ldw	fp,64(sp)
 800d988:	ddc00f17 	ldw	r23,60(sp)
 800d98c:	dd800e17 	ldw	r22,56(sp)
 800d990:	dd400d17 	ldw	r21,52(sp)
 800d994:	dd000c17 	ldw	r20,48(sp)
 800d998:	dcc00b17 	ldw	r19,44(sp)
 800d99c:	dc800a17 	ldw	r18,40(sp)
 800d9a0:	dc400917 	ldw	r17,36(sp)
 800d9a4:	dc000817 	ldw	r16,32(sp)
 800d9a8:	dec01204 	addi	sp,sp,72
 800d9ac:	f800283a 	ret
 800d9b0:	9904b03a 	or	r2,r19,r4
 800d9b4:	10004226 	beq	r2,zero,800dac0 <__muldf3+0x2d8>
 800d9b8:	98013426 	beq	r19,zero,800de8c <__muldf3+0x6a4>
 800d9bc:	9809883a 	mov	r4,r19
 800d9c0:	d9800515 	stw	r6,20(sp)
 800d9c4:	d9c00415 	stw	r7,16(sp)
 800d9c8:	da000615 	stw	r8,24(sp)
 800d9cc:	800ea600 	call	800ea60 <__clzsi2>
 800d9d0:	d9800517 	ldw	r6,20(sp)
 800d9d4:	d9c00417 	ldw	r7,16(sp)
 800d9d8:	da000617 	ldw	r8,24(sp)
 800d9dc:	00c009c4 	movi	r3,39
 800d9e0:	18812616 	blt	r3,r2,800de7c <__muldf3+0x694>
 800d9e4:	00c00a04 	movi	r3,40
 800d9e8:	15fffe04 	addi	r23,r2,-8
 800d9ec:	1887c83a 	sub	r3,r3,r2
 800d9f0:	9de6983a 	sll	r19,r19,r23
 800d9f4:	a0c6d83a 	srl	r3,r20,r3
 800d9f8:	a5ee983a 	sll	r23,r20,r23
 800d9fc:	1ce6b03a 	or	r19,r3,r19
 800da00:	047f0344 	movi	r17,-1011
 800da04:	88a3c83a 	sub	r17,r17,r2
 800da08:	002d883a 	mov	r22,zero
 800da0c:	000b883a 	mov	r5,zero
 800da10:	003f9506 	br	800d868 <__alt_data_end+0xf800d868>
 800da14:	9186b03a 	or	r3,r18,r6
 800da18:	1800271e 	bne	r3,zero,800dab8 <__muldf3+0x2d0>
 800da1c:	0025883a 	mov	r18,zero
 800da20:	002b883a 	mov	r21,zero
 800da24:	00c00084 	movi	r3,2
 800da28:	003fa106 	br	800d8b0 <__alt_data_end+0xf800d8b0>
 800da2c:	9186b03a 	or	r3,r18,r6
 800da30:	18001d26 	beq	r3,zero,800daa8 <__muldf3+0x2c0>
 800da34:	90012226 	beq	r18,zero,800dec0 <__muldf3+0x6d8>
 800da38:	9009883a 	mov	r4,r18
 800da3c:	d9400415 	stw	r5,16(sp)
 800da40:	d9800515 	stw	r6,20(sp)
 800da44:	da000615 	stw	r8,24(sp)
 800da48:	da400715 	stw	r9,28(sp)
 800da4c:	800ea600 	call	800ea60 <__clzsi2>
 800da50:	d9400417 	ldw	r5,16(sp)
 800da54:	d9800517 	ldw	r6,20(sp)
 800da58:	da000617 	ldw	r8,24(sp)
 800da5c:	da400717 	ldw	r9,28(sp)
 800da60:	00c009c4 	movi	r3,39
 800da64:	18811216 	blt	r3,r2,800deb0 <__muldf3+0x6c8>
 800da68:	01c00a04 	movi	r7,40
 800da6c:	157ffe04 	addi	r21,r2,-8
 800da70:	388fc83a 	sub	r7,r7,r2
 800da74:	9564983a 	sll	r18,r18,r21
 800da78:	31ced83a 	srl	r7,r6,r7
 800da7c:	356a983a 	sll	r21,r6,r21
 800da80:	3ca4b03a 	or	r18,r7,r18
 800da84:	00ff0344 	movi	r3,-1011
 800da88:	1885c83a 	sub	r2,r3,r2
 800da8c:	0007883a 	mov	r3,zero
 800da90:	003f8706 	br	800d8b0 <__alt_data_end+0xf800d8b0>
 800da94:	b039883a 	mov	fp,r22
 800da98:	0081ffc4 	movi	r2,2047
 800da9c:	0027883a 	mov	r19,zero
 800daa0:	002f883a 	mov	r23,zero
 800daa4:	003fad06 	br	800d95c <__alt_data_end+0xf800d95c>
 800daa8:	0025883a 	mov	r18,zero
 800daac:	002b883a 	mov	r21,zero
 800dab0:	00c00044 	movi	r3,1
 800dab4:	003f7e06 	br	800d8b0 <__alt_data_end+0xf800d8b0>
 800dab8:	00c000c4 	movi	r3,3
 800dabc:	003f7c06 	br	800d8b0 <__alt_data_end+0xf800d8b0>
 800dac0:	05800104 	movi	r22,4
 800dac4:	0027883a 	mov	r19,zero
 800dac8:	002f883a 	mov	r23,zero
 800dacc:	01400044 	movi	r5,1
 800dad0:	003f6506 	br	800d868 <__alt_data_end+0xf800d868>
 800dad4:	05800304 	movi	r22,12
 800dad8:	014000c4 	movi	r5,3
 800dadc:	003f6206 	br	800d868 <__alt_data_end+0xf800d868>
 800dae0:	0039883a 	mov	fp,zero
 800dae4:	04c00434 	movhi	r19,16
 800dae8:	9cffffc4 	addi	r19,r19,-1
 800daec:	05ffffc4 	movi	r23,-1
 800daf0:	0081ffc4 	movi	r2,2047
 800daf4:	003f9906 	br	800d95c <__alt_data_end+0xf800d95c>
 800daf8:	9027883a 	mov	r19,r18
 800dafc:	a82f883a 	mov	r23,r21
 800db00:	482d883a 	mov	r22,r9
 800db04:	180b883a 	mov	r5,r3
 800db08:	003f8a06 	br	800d934 <__alt_data_end+0xf800d934>
 800db0c:	9027883a 	mov	r19,r18
 800db10:	a82f883a 	mov	r23,r21
 800db14:	180b883a 	mov	r5,r3
 800db18:	003f8606 	br	800d934 <__alt_data_end+0xf800d934>
 800db1c:	a828d43a 	srli	r20,r21,16
 800db20:	b820d43a 	srli	r16,r23,16
 800db24:	ad7fffcc 	andi	r21,r21,65535
 800db28:	bdffffcc 	andi	r23,r23,65535
 800db2c:	8885883a 	add	r2,r17,r2
 800db30:	a809883a 	mov	r4,r21
 800db34:	b80b883a 	mov	r5,r23
 800db38:	d8800015 	stw	r2,0(sp)
 800db3c:	800c3600 	call	800c360 <__mulsi3>
 800db40:	a009883a 	mov	r4,r20
 800db44:	b80b883a 	mov	r5,r23
 800db48:	d8800415 	stw	r2,16(sp)
 800db4c:	800c3600 	call	800c360 <__mulsi3>
 800db50:	a809883a 	mov	r4,r21
 800db54:	800b883a 	mov	r5,r16
 800db58:	d8800615 	stw	r2,24(sp)
 800db5c:	800c3600 	call	800c360 <__mulsi3>
 800db60:	a009883a 	mov	r4,r20
 800db64:	800b883a 	mov	r5,r16
 800db68:	1023883a 	mov	r17,r2
 800db6c:	800c3600 	call	800c360 <__mulsi3>
 800db70:	d9c00417 	ldw	r7,16(sp)
 800db74:	da000617 	ldw	r8,24(sp)
 800db78:	1039883a 	mov	fp,r2
 800db7c:	3804d43a 	srli	r2,r7,16
 800db80:	8a07883a 	add	r3,r17,r8
 800db84:	1887883a 	add	r3,r3,r2
 800db88:	1c40022e 	bgeu	r3,r17,800db94 <__muldf3+0x3ac>
 800db8c:	00800074 	movhi	r2,1
 800db90:	e0b9883a 	add	fp,fp,r2
 800db94:	1804943a 	slli	r2,r3,16
 800db98:	1806d43a 	srli	r3,r3,16
 800db9c:	9022d43a 	srli	r17,r18,16
 800dba0:	39ffffcc 	andi	r7,r7,65535
 800dba4:	94bfffcc 	andi	r18,r18,65535
 800dba8:	11cf883a 	add	r7,r2,r7
 800dbac:	b80b883a 	mov	r5,r23
 800dbb0:	9009883a 	mov	r4,r18
 800dbb4:	d8c00215 	stw	r3,8(sp)
 800dbb8:	d9c00315 	stw	r7,12(sp)
 800dbbc:	800c3600 	call	800c360 <__mulsi3>
 800dbc0:	b80b883a 	mov	r5,r23
 800dbc4:	8809883a 	mov	r4,r17
 800dbc8:	d8800415 	stw	r2,16(sp)
 800dbcc:	800c3600 	call	800c360 <__mulsi3>
 800dbd0:	9009883a 	mov	r4,r18
 800dbd4:	800b883a 	mov	r5,r16
 800dbd8:	d8800715 	stw	r2,28(sp)
 800dbdc:	800c3600 	call	800c360 <__mulsi3>
 800dbe0:	8809883a 	mov	r4,r17
 800dbe4:	800b883a 	mov	r5,r16
 800dbe8:	102f883a 	mov	r23,r2
 800dbec:	800c3600 	call	800c360 <__mulsi3>
 800dbf0:	d9c00417 	ldw	r7,16(sp)
 800dbf4:	da400717 	ldw	r9,28(sp)
 800dbf8:	1011883a 	mov	r8,r2
 800dbfc:	3804d43a 	srli	r2,r7,16
 800dc00:	ba47883a 	add	r3,r23,r9
 800dc04:	1887883a 	add	r3,r3,r2
 800dc08:	1dc0022e 	bgeu	r3,r23,800dc14 <__muldf3+0x42c>
 800dc0c:	00800074 	movhi	r2,1
 800dc10:	4091883a 	add	r8,r8,r2
 800dc14:	1804d43a 	srli	r2,r3,16
 800dc18:	182e943a 	slli	r23,r3,16
 800dc1c:	9820d43a 	srli	r16,r19,16
 800dc20:	9cffffcc 	andi	r19,r19,65535
 800dc24:	39ffffcc 	andi	r7,r7,65535
 800dc28:	4085883a 	add	r2,r8,r2
 800dc2c:	a809883a 	mov	r4,r21
 800dc30:	980b883a 	mov	r5,r19
 800dc34:	b9ef883a 	add	r23,r23,r7
 800dc38:	d8800115 	stw	r2,4(sp)
 800dc3c:	800c3600 	call	800c360 <__mulsi3>
 800dc40:	a009883a 	mov	r4,r20
 800dc44:	980b883a 	mov	r5,r19
 800dc48:	d8800415 	stw	r2,16(sp)
 800dc4c:	800c3600 	call	800c360 <__mulsi3>
 800dc50:	a809883a 	mov	r4,r21
 800dc54:	800b883a 	mov	r5,r16
 800dc58:	d8800715 	stw	r2,28(sp)
 800dc5c:	800c3600 	call	800c360 <__mulsi3>
 800dc60:	a009883a 	mov	r4,r20
 800dc64:	800b883a 	mov	r5,r16
 800dc68:	102b883a 	mov	r21,r2
 800dc6c:	800c3600 	call	800c360 <__mulsi3>
 800dc70:	d9c00417 	ldw	r7,16(sp)
 800dc74:	da400717 	ldw	r9,28(sp)
 800dc78:	1011883a 	mov	r8,r2
 800dc7c:	3804d43a 	srli	r2,r7,16
 800dc80:	aa47883a 	add	r3,r21,r9
 800dc84:	1887883a 	add	r3,r3,r2
 800dc88:	1d40022e 	bgeu	r3,r21,800dc94 <__muldf3+0x4ac>
 800dc8c:	00800074 	movhi	r2,1
 800dc90:	4091883a 	add	r8,r8,r2
 800dc94:	1828d43a 	srli	r20,r3,16
 800dc98:	1806943a 	slli	r3,r3,16
 800dc9c:	39ffffcc 	andi	r7,r7,65535
 800dca0:	9009883a 	mov	r4,r18
 800dca4:	980b883a 	mov	r5,r19
 800dca8:	19eb883a 	add	r21,r3,r7
 800dcac:	4529883a 	add	r20,r8,r20
 800dcb0:	800c3600 	call	800c360 <__mulsi3>
 800dcb4:	980b883a 	mov	r5,r19
 800dcb8:	8809883a 	mov	r4,r17
 800dcbc:	d8800415 	stw	r2,16(sp)
 800dcc0:	800c3600 	call	800c360 <__mulsi3>
 800dcc4:	9009883a 	mov	r4,r18
 800dcc8:	800b883a 	mov	r5,r16
 800dccc:	1027883a 	mov	r19,r2
 800dcd0:	800c3600 	call	800c360 <__mulsi3>
 800dcd4:	8809883a 	mov	r4,r17
 800dcd8:	800b883a 	mov	r5,r16
 800dcdc:	1025883a 	mov	r18,r2
 800dce0:	800c3600 	call	800c360 <__mulsi3>
 800dce4:	d9c00417 	ldw	r7,16(sp)
 800dce8:	1011883a 	mov	r8,r2
 800dcec:	94c7883a 	add	r3,r18,r19
 800dcf0:	3804d43a 	srli	r2,r7,16
 800dcf4:	1887883a 	add	r3,r3,r2
 800dcf8:	1c80022e 	bgeu	r3,r18,800dd04 <__muldf3+0x51c>
 800dcfc:	00800074 	movhi	r2,1
 800dd00:	4091883a 	add	r8,r8,r2
 800dd04:	1804943a 	slli	r2,r3,16
 800dd08:	d9400217 	ldw	r5,8(sp)
 800dd0c:	39ffffcc 	andi	r7,r7,65535
 800dd10:	11cf883a 	add	r7,r2,r7
 800dd14:	d8800117 	ldw	r2,4(sp)
 800dd18:	b949883a 	add	r4,r23,r5
 800dd1c:	2739883a 	add	fp,r4,fp
 800dd20:	e5ef803a 	cmpltu	r23,fp,r23
 800dd24:	388f883a 	add	r7,r7,r2
 800dd28:	3dcb883a 	add	r5,r7,r23
 800dd2c:	a149883a 	add	r4,r20,r5
 800dd30:	2def803a 	cmpltu	r23,r5,r23
 800dd34:	d9400117 	ldw	r5,4(sp)
 800dd38:	e579883a 	add	fp,fp,r21
 800dd3c:	e56b803a 	cmpltu	r21,fp,r21
 800dd40:	1804d43a 	srli	r2,r3,16
 800dd44:	394f803a 	cmpltu	r7,r7,r5
 800dd48:	2547883a 	add	r3,r4,r21
 800dd4c:	b9e6b03a 	or	r19,r23,r7
 800dd50:	1d6b803a 	cmpltu	r21,r3,r21
 800dd54:	2529803a 	cmpltu	r20,r4,r20
 800dd58:	98a7883a 	add	r19,r19,r2
 800dd5c:	ad2ab03a 	or	r21,r21,r20
 800dd60:	9d67883a 	add	r19,r19,r21
 800dd64:	e02e927a 	slli	r23,fp,9
 800dd68:	9a27883a 	add	r19,r19,r8
 800dd6c:	d9000317 	ldw	r4,12(sp)
 800dd70:	1804d5fa 	srli	r2,r3,23
 800dd74:	9826927a 	slli	r19,r19,9
 800dd78:	e038d5fa 	srli	fp,fp,23
 800dd7c:	b92eb03a 	or	r23,r23,r4
 800dd80:	1806927a 	slli	r3,r3,9
 800dd84:	98a6b03a 	or	r19,r19,r2
 800dd88:	b82ec03a 	cmpne	r23,r23,zero
 800dd8c:	bf2eb03a 	or	r23,r23,fp
 800dd90:	9880402c 	andhi	r2,r19,256
 800dd94:	b8eeb03a 	or	r23,r23,r3
 800dd98:	10000926 	beq	r2,zero,800ddc0 <__muldf3+0x5d8>
 800dd9c:	b806d07a 	srli	r3,r23,1
 800dda0:	bdc0004c 	andi	r23,r23,1
 800dda4:	980497fa 	slli	r2,r19,31
 800dda8:	b8eeb03a 	or	r23,r23,r3
 800ddac:	d8c00017 	ldw	r3,0(sp)
 800ddb0:	9826d07a 	srli	r19,r19,1
 800ddb4:	b8aeb03a 	or	r23,r23,r2
 800ddb8:	18c00044 	addi	r3,r3,1
 800ddbc:	d8c00015 	stw	r3,0(sp)
 800ddc0:	d8c00017 	ldw	r3,0(sp)
 800ddc4:	1880ffc4 	addi	r2,r3,1023
 800ddc8:	0080490e 	bge	zero,r2,800def0 <__muldf3+0x708>
 800ddcc:	b8c001cc 	andi	r3,r23,7
 800ddd0:	18000726 	beq	r3,zero,800ddf0 <__muldf3+0x608>
 800ddd4:	b90003cc 	andi	r4,r23,15
 800ddd8:	00c00104 	movi	r3,4
 800dddc:	20c00426 	beq	r4,r3,800ddf0 <__muldf3+0x608>
 800dde0:	b8c7883a 	add	r3,r23,r3
 800dde4:	1def803a 	cmpltu	r23,r3,r23
 800dde8:	9de7883a 	add	r19,r19,r23
 800ddec:	182f883a 	mov	r23,r3
 800ddf0:	98c0402c 	andhi	r3,r19,256
 800ddf4:	18000526 	beq	r3,zero,800de0c <__muldf3+0x624>
 800ddf8:	d8c00017 	ldw	r3,0(sp)
 800ddfc:	00bfc034 	movhi	r2,65280
 800de00:	10bfffc4 	addi	r2,r2,-1
 800de04:	98a6703a 	and	r19,r19,r2
 800de08:	18810004 	addi	r2,r3,1024
 800de0c:	00c1ff84 	movi	r3,2046
 800de10:	18bf2016 	blt	r3,r2,800da94 <__alt_data_end+0xf800da94>
 800de14:	9806977a 	slli	r3,r19,29
 800de18:	b82ed0fa 	srli	r23,r23,3
 800de1c:	9826927a 	slli	r19,r19,9
 800de20:	1081ffcc 	andi	r2,r2,2047
 800de24:	1deeb03a 	or	r23,r3,r23
 800de28:	9826d33a 	srli	r19,r19,12
 800de2c:	b039883a 	mov	fp,r22
 800de30:	003eca06 	br	800d95c <__alt_data_end+0xf800d95c>
 800de34:	9880022c 	andhi	r2,r19,8
 800de38:	10000a26 	beq	r2,zero,800de64 <__muldf3+0x67c>
 800de3c:	9080022c 	andhi	r2,r18,8
 800de40:	1000081e 	bne	r2,zero,800de64 <__muldf3+0x67c>
 800de44:	00800434 	movhi	r2,16
 800de48:	10bfffc4 	addi	r2,r2,-1
 800de4c:	94c00234 	orhi	r19,r18,8
 800de50:	98a6703a 	and	r19,r19,r2
 800de54:	a039883a 	mov	fp,r20
 800de58:	a82f883a 	mov	r23,r21
 800de5c:	0081ffc4 	movi	r2,2047
 800de60:	003ebe06 	br	800d95c <__alt_data_end+0xf800d95c>
 800de64:	00800434 	movhi	r2,16
 800de68:	10bfffc4 	addi	r2,r2,-1
 800de6c:	9cc00234 	orhi	r19,r19,8
 800de70:	98a6703a 	and	r19,r19,r2
 800de74:	0081ffc4 	movi	r2,2047
 800de78:	003eb806 	br	800d95c <__alt_data_end+0xf800d95c>
 800de7c:	14fff604 	addi	r19,r2,-40
 800de80:	a4e6983a 	sll	r19,r20,r19
 800de84:	002f883a 	mov	r23,zero
 800de88:	003edd06 	br	800da00 <__alt_data_end+0xf800da00>
 800de8c:	d9800515 	stw	r6,20(sp)
 800de90:	d9c00415 	stw	r7,16(sp)
 800de94:	da000615 	stw	r8,24(sp)
 800de98:	800ea600 	call	800ea60 <__clzsi2>
 800de9c:	10800804 	addi	r2,r2,32
 800dea0:	da000617 	ldw	r8,24(sp)
 800dea4:	d9c00417 	ldw	r7,16(sp)
 800dea8:	d9800517 	ldw	r6,20(sp)
 800deac:	003ecb06 	br	800d9dc <__alt_data_end+0xf800d9dc>
 800deb0:	14bff604 	addi	r18,r2,-40
 800deb4:	34a4983a 	sll	r18,r6,r18
 800deb8:	002b883a 	mov	r21,zero
 800debc:	003ef106 	br	800da84 <__alt_data_end+0xf800da84>
 800dec0:	3009883a 	mov	r4,r6
 800dec4:	d9400415 	stw	r5,16(sp)
 800dec8:	d9800515 	stw	r6,20(sp)
 800decc:	da000615 	stw	r8,24(sp)
 800ded0:	da400715 	stw	r9,28(sp)
 800ded4:	800ea600 	call	800ea60 <__clzsi2>
 800ded8:	10800804 	addi	r2,r2,32
 800dedc:	da400717 	ldw	r9,28(sp)
 800dee0:	da000617 	ldw	r8,24(sp)
 800dee4:	d9800517 	ldw	r6,20(sp)
 800dee8:	d9400417 	ldw	r5,16(sp)
 800deec:	003edc06 	br	800da60 <__alt_data_end+0xf800da60>
 800def0:	d8c00017 	ldw	r3,0(sp)
 800def4:	00bf0084 	movi	r2,-1022
 800def8:	10c5c83a 	sub	r2,r2,r3
 800defc:	00c00e04 	movi	r3,56
 800df00:	18be9216 	blt	r3,r2,800d94c <__alt_data_end+0xf800d94c>
 800df04:	00c007c4 	movi	r3,31
 800df08:	18801916 	blt	r3,r2,800df70 <__muldf3+0x788>
 800df0c:	d9000017 	ldw	r4,0(sp)
 800df10:	b88ad83a 	srl	r5,r23,r2
 800df14:	9884d83a 	srl	r2,r19,r2
 800df18:	20c10784 	addi	r3,r4,1054
 800df1c:	98c8983a 	sll	r4,r19,r3
 800df20:	b8c6983a 	sll	r3,r23,r3
 800df24:	2908b03a 	or	r4,r5,r4
 800df28:	1806c03a 	cmpne	r3,r3,zero
 800df2c:	20c6b03a 	or	r3,r4,r3
 800df30:	190001cc 	andi	r4,r3,7
 800df34:	20000726 	beq	r4,zero,800df54 <__muldf3+0x76c>
 800df38:	194003cc 	andi	r5,r3,15
 800df3c:	01000104 	movi	r4,4
 800df40:	29000426 	beq	r5,r4,800df54 <__muldf3+0x76c>
 800df44:	1909883a 	add	r4,r3,r4
 800df48:	20c7803a 	cmpltu	r3,r4,r3
 800df4c:	10c5883a 	add	r2,r2,r3
 800df50:	2007883a 	mov	r3,r4
 800df54:	1100202c 	andhi	r4,r2,128
 800df58:	20001226 	beq	r4,zero,800dfa4 <__muldf3+0x7bc>
 800df5c:	b039883a 	mov	fp,r22
 800df60:	00800044 	movi	r2,1
 800df64:	0027883a 	mov	r19,zero
 800df68:	002f883a 	mov	r23,zero
 800df6c:	003e7b06 	br	800d95c <__alt_data_end+0xf800d95c>
 800df70:	d9400017 	ldw	r5,0(sp)
 800df74:	00fef884 	movi	r3,-1054
 800df78:	01000804 	movi	r4,32
 800df7c:	1947c83a 	sub	r3,r3,r5
 800df80:	98c6d83a 	srl	r3,r19,r3
 800df84:	11000f26 	beq	r2,r4,800dfc4 <__muldf3+0x7dc>
 800df88:	28810f84 	addi	r2,r5,1086
 800df8c:	9884983a 	sll	r2,r19,r2
 800df90:	15c4b03a 	or	r2,r2,r23
 800df94:	1004c03a 	cmpne	r2,r2,zero
 800df98:	10c6b03a 	or	r3,r2,r3
 800df9c:	0005883a 	mov	r2,zero
 800dfa0:	003fe306 	br	800df30 <__alt_data_end+0xf800df30>
 800dfa4:	102e977a 	slli	r23,r2,29
 800dfa8:	1806d0fa 	srli	r3,r3,3
 800dfac:	1004927a 	slli	r2,r2,9
 800dfb0:	b039883a 	mov	fp,r22
 800dfb4:	b8eeb03a 	or	r23,r23,r3
 800dfb8:	1026d33a 	srli	r19,r2,12
 800dfbc:	0005883a 	mov	r2,zero
 800dfc0:	003e6606 	br	800d95c <__alt_data_end+0xf800d95c>
 800dfc4:	0005883a 	mov	r2,zero
 800dfc8:	003ff106 	br	800df90 <__alt_data_end+0xf800df90>
 800dfcc:	00800434 	movhi	r2,16
 800dfd0:	10bfffc4 	addi	r2,r2,-1
 800dfd4:	9cc00234 	orhi	r19,r19,8
 800dfd8:	98a6703a 	and	r19,r19,r2
 800dfdc:	b039883a 	mov	fp,r22
 800dfe0:	0081ffc4 	movi	r2,2047
 800dfe4:	003e5d06 	br	800d95c <__alt_data_end+0xf800d95c>

0800dfe8 <__subdf3>:
 800dfe8:	02000434 	movhi	r8,16
 800dfec:	423fffc4 	addi	r8,r8,-1
 800dff0:	defffb04 	addi	sp,sp,-20
 800dff4:	2a06703a 	and	r3,r5,r8
 800dff8:	3a10703a 	and	r8,r7,r8
 800dffc:	3804d53a 	srli	r2,r7,20
 800e000:	dc800215 	stw	r18,8(sp)
 800e004:	dc400115 	stw	r17,4(sp)
 800e008:	2824d7fa 	srli	r18,r5,31
 800e00c:	2822d53a 	srli	r17,r5,20
 800e010:	401090fa 	slli	r8,r8,3
 800e014:	180a90fa 	slli	r5,r3,3
 800e018:	3006d77a 	srli	r3,r6,29
 800e01c:	2014d77a 	srli	r10,r4,29
 800e020:	dc000015 	stw	r16,0(sp)
 800e024:	40d0b03a 	or	r8,r8,r3
 800e028:	dfc00415 	stw	ra,16(sp)
 800e02c:	dcc00315 	stw	r19,12(sp)
 800e030:	1081ffcc 	andi	r2,r2,2047
 800e034:	00c1ffc4 	movi	r3,2047
 800e038:	9013883a 	mov	r9,r18
 800e03c:	8c41ffcc 	andi	r17,r17,2047
 800e040:	94803fcc 	andi	r18,r18,255
 800e044:	2a8ab03a 	or	r5,r5,r10
 800e048:	202090fa 	slli	r16,r4,3
 800e04c:	380ed7fa 	srli	r7,r7,31
 800e050:	300c90fa 	slli	r6,r6,3
 800e054:	10c02e26 	beq	r2,r3,800e110 <__subdf3+0x128>
 800e058:	39c0005c 	xori	r7,r7,1
 800e05c:	8887c83a 	sub	r3,r17,r2
 800e060:	91c03026 	beq	r18,r7,800e124 <__subdf3+0x13c>
 800e064:	00c0a40e 	bge	zero,r3,800e2f8 <__subdf3+0x310>
 800e068:	10004c1e 	bne	r2,zero,800e19c <__subdf3+0x1b4>
 800e06c:	4184b03a 	or	r2,r8,r6
 800e070:	10008f1e 	bne	r2,zero,800e2b0 <__subdf3+0x2c8>
 800e074:	808001cc 	andi	r2,r16,7
 800e078:	10007d26 	beq	r2,zero,800e270 <__subdf3+0x288>
 800e07c:	80c003cc 	andi	r3,r16,15
 800e080:	00800104 	movi	r2,4
 800e084:	18807a26 	beq	r3,r2,800e270 <__subdf3+0x288>
 800e088:	80c00104 	addi	r3,r16,4
 800e08c:	1c21803a 	cmpltu	r16,r3,r16
 800e090:	2c0b883a 	add	r5,r5,r16
 800e094:	2880202c 	andhi	r2,r5,128
 800e098:	9240004c 	andi	r9,r18,1
 800e09c:	1821883a 	mov	r16,r3
 800e0a0:	10007626 	beq	r2,zero,800e27c <__subdf3+0x294>
 800e0a4:	8c400044 	addi	r17,r17,1
 800e0a8:	0081ffc4 	movi	r2,2047
 800e0ac:	8880b226 	beq	r17,r2,800e378 <__subdf3+0x390>
 800e0b0:	00bfe034 	movhi	r2,65408
 800e0b4:	10bfffc4 	addi	r2,r2,-1
 800e0b8:	288a703a 	and	r5,r5,r2
 800e0bc:	2804977a 	slli	r2,r5,29
 800e0c0:	280a927a 	slli	r5,r5,9
 800e0c4:	8020d0fa 	srli	r16,r16,3
 800e0c8:	280ad33a 	srli	r5,r5,12
 800e0cc:	1404b03a 	or	r2,r2,r16
 800e0d0:	8c41ffcc 	andi	r17,r17,2047
 800e0d4:	8822953a 	slli	r17,r17,20
 800e0d8:	4a403fcc 	andi	r9,r9,255
 800e0dc:	481297fa 	slli	r9,r9,31
 800e0e0:	00c00434 	movhi	r3,16
 800e0e4:	18ffffc4 	addi	r3,r3,-1
 800e0e8:	28c6703a 	and	r3,r5,r3
 800e0ec:	1c46b03a 	or	r3,r3,r17
 800e0f0:	1a46b03a 	or	r3,r3,r9
 800e0f4:	dfc00417 	ldw	ra,16(sp)
 800e0f8:	dcc00317 	ldw	r19,12(sp)
 800e0fc:	dc800217 	ldw	r18,8(sp)
 800e100:	dc400117 	ldw	r17,4(sp)
 800e104:	dc000017 	ldw	r16,0(sp)
 800e108:	dec00504 	addi	sp,sp,20
 800e10c:	f800283a 	ret
 800e110:	4186b03a 	or	r3,r8,r6
 800e114:	183fd026 	beq	r3,zero,800e058 <__alt_data_end+0xf800e058>
 800e118:	39c03fcc 	andi	r7,r7,255
 800e11c:	8887c83a 	sub	r3,r17,r2
 800e120:	91ffd01e 	bne	r18,r7,800e064 <__alt_data_end+0xf800e064>
 800e124:	00c09b0e 	bge	zero,r3,800e394 <__subdf3+0x3ac>
 800e128:	10006926 	beq	r2,zero,800e2d0 <__subdf3+0x2e8>
 800e12c:	0081ffc4 	movi	r2,2047
 800e130:	88bfd026 	beq	r17,r2,800e074 <__alt_data_end+0xf800e074>
 800e134:	42002034 	orhi	r8,r8,128
 800e138:	00800e04 	movi	r2,56
 800e13c:	10c0e20e 	bge	r2,r3,800e4c8 <__subdf3+0x4e0>
 800e140:	418cb03a 	or	r6,r8,r6
 800e144:	300cc03a 	cmpne	r6,r6,zero
 800e148:	0007883a 	mov	r3,zero
 800e14c:	340d883a 	add	r6,r6,r16
 800e150:	3421803a 	cmpltu	r16,r6,r16
 800e154:	194b883a 	add	r5,r3,r5
 800e158:	2c0b883a 	add	r5,r5,r16
 800e15c:	3021883a 	mov	r16,r6
 800e160:	2880202c 	andhi	r2,r5,128
 800e164:	103fc326 	beq	r2,zero,800e074 <__alt_data_end+0xf800e074>
 800e168:	8c400044 	addi	r17,r17,1
 800e16c:	0081ffc4 	movi	r2,2047
 800e170:	88811026 	beq	r17,r2,800e5b4 <__subdf3+0x5cc>
 800e174:	00bfe034 	movhi	r2,65408
 800e178:	10bfffc4 	addi	r2,r2,-1
 800e17c:	288a703a 	and	r5,r5,r2
 800e180:	8006d07a 	srli	r3,r16,1
 800e184:	280497fa 	slli	r2,r5,31
 800e188:	8400004c 	andi	r16,r16,1
 800e18c:	80e0b03a 	or	r16,r16,r3
 800e190:	80a0b03a 	or	r16,r16,r2
 800e194:	280ad07a 	srli	r5,r5,1
 800e198:	003fb606 	br	800e074 <__alt_data_end+0xf800e074>
 800e19c:	0081ffc4 	movi	r2,2047
 800e1a0:	88bfb426 	beq	r17,r2,800e074 <__alt_data_end+0xf800e074>
 800e1a4:	42002034 	orhi	r8,r8,128
 800e1a8:	00800e04 	movi	r2,56
 800e1ac:	10c07516 	blt	r2,r3,800e384 <__subdf3+0x39c>
 800e1b0:	008007c4 	movi	r2,31
 800e1b4:	10c09816 	blt	r2,r3,800e418 <__subdf3+0x430>
 800e1b8:	00800804 	movi	r2,32
 800e1bc:	10c5c83a 	sub	r2,r2,r3
 800e1c0:	30c8d83a 	srl	r4,r6,r3
 800e1c4:	408e983a 	sll	r7,r8,r2
 800e1c8:	3084983a 	sll	r2,r6,r2
 800e1cc:	40c6d83a 	srl	r3,r8,r3
 800e1d0:	3908b03a 	or	r4,r7,r4
 800e1d4:	1004c03a 	cmpne	r2,r2,zero
 800e1d8:	208cb03a 	or	r6,r4,r2
 800e1dc:	818dc83a 	sub	r6,r16,r6
 800e1e0:	81a1803a 	cmpltu	r16,r16,r6
 800e1e4:	28cbc83a 	sub	r5,r5,r3
 800e1e8:	2c0bc83a 	sub	r5,r5,r16
 800e1ec:	3021883a 	mov	r16,r6
 800e1f0:	2880202c 	andhi	r2,r5,128
 800e1f4:	103f9f26 	beq	r2,zero,800e074 <__alt_data_end+0xf800e074>
 800e1f8:	04c02034 	movhi	r19,128
 800e1fc:	9cffffc4 	addi	r19,r19,-1
 800e200:	2ce6703a 	and	r19,r5,r19
 800e204:	98004d26 	beq	r19,zero,800e33c <__subdf3+0x354>
 800e208:	9809883a 	mov	r4,r19
 800e20c:	800ea600 	call	800ea60 <__clzsi2>
 800e210:	10fffe04 	addi	r3,r2,-8
 800e214:	010007c4 	movi	r4,31
 800e218:	20c04e16 	blt	r4,r3,800e354 <__subdf3+0x36c>
 800e21c:	01000a04 	movi	r4,40
 800e220:	2085c83a 	sub	r2,r4,r2
 800e224:	8084d83a 	srl	r2,r16,r2
 800e228:	98e6983a 	sll	r19,r19,r3
 800e22c:	80e0983a 	sll	r16,r16,r3
 800e230:	14c4b03a 	or	r2,r2,r19
 800e234:	1c404b16 	blt	r3,r17,800e364 <__subdf3+0x37c>
 800e238:	1c63c83a 	sub	r17,r3,r17
 800e23c:	89400044 	addi	r5,r17,1
 800e240:	00c007c4 	movi	r3,31
 800e244:	19406716 	blt	r3,r5,800e3e4 <__subdf3+0x3fc>
 800e248:	1c47c83a 	sub	r3,r3,r17
 800e24c:	8148d83a 	srl	r4,r16,r5
 800e250:	80e0983a 	sll	r16,r16,r3
 800e254:	10c6983a 	sll	r3,r2,r3
 800e258:	114ad83a 	srl	r5,r2,r5
 800e25c:	8004c03a 	cmpne	r2,r16,zero
 800e260:	20e0b03a 	or	r16,r4,r3
 800e264:	80a0b03a 	or	r16,r16,r2
 800e268:	0023883a 	mov	r17,zero
 800e26c:	003f8106 	br	800e074 <__alt_data_end+0xf800e074>
 800e270:	2880202c 	andhi	r2,r5,128
 800e274:	9240004c 	andi	r9,r18,1
 800e278:	103f8a1e 	bne	r2,zero,800e0a4 <__alt_data_end+0xf800e0a4>
 800e27c:	2804977a 	slli	r2,r5,29
 800e280:	8020d0fa 	srli	r16,r16,3
 800e284:	00c1ffc4 	movi	r3,2047
 800e288:	280ad0fa 	srli	r5,r5,3
 800e28c:	1404b03a 	or	r2,r2,r16
 800e290:	88c0031e 	bne	r17,r3,800e2a0 <__subdf3+0x2b8>
 800e294:	1146b03a 	or	r3,r2,r5
 800e298:	18003726 	beq	r3,zero,800e378 <__subdf3+0x390>
 800e29c:	29400234 	orhi	r5,r5,8
 800e2a0:	00c00434 	movhi	r3,16
 800e2a4:	18ffffc4 	addi	r3,r3,-1
 800e2a8:	28ca703a 	and	r5,r5,r3
 800e2ac:	003f8806 	br	800e0d0 <__alt_data_end+0xf800e0d0>
 800e2b0:	18ffffc4 	addi	r3,r3,-1
 800e2b4:	1800481e 	bne	r3,zero,800e3d8 <__subdf3+0x3f0>
 800e2b8:	818dc83a 	sub	r6,r16,r6
 800e2bc:	81a1803a 	cmpltu	r16,r16,r6
 800e2c0:	2a0bc83a 	sub	r5,r5,r8
 800e2c4:	2c0bc83a 	sub	r5,r5,r16
 800e2c8:	3021883a 	mov	r16,r6
 800e2cc:	003fc806 	br	800e1f0 <__alt_data_end+0xf800e1f0>
 800e2d0:	4184b03a 	or	r2,r8,r6
 800e2d4:	103f6726 	beq	r2,zero,800e074 <__alt_data_end+0xf800e074>
 800e2d8:	18ffffc4 	addi	r3,r3,-1
 800e2dc:	1800931e 	bne	r3,zero,800e52c <__subdf3+0x544>
 800e2e0:	340d883a 	add	r6,r6,r16
 800e2e4:	3421803a 	cmpltu	r16,r6,r16
 800e2e8:	414b883a 	add	r5,r8,r5
 800e2ec:	2c0b883a 	add	r5,r5,r16
 800e2f0:	3021883a 	mov	r16,r6
 800e2f4:	003f9a06 	br	800e160 <__alt_data_end+0xf800e160>
 800e2f8:	1800531e 	bne	r3,zero,800e448 <__subdf3+0x460>
 800e2fc:	88800044 	addi	r2,r17,1
 800e300:	1081ffcc 	andi	r2,r2,2047
 800e304:	00c00044 	movi	r3,1
 800e308:	1880a00e 	bge	r3,r2,800e58c <__subdf3+0x5a4>
 800e30c:	8185c83a 	sub	r2,r16,r6
 800e310:	8087803a 	cmpltu	r3,r16,r2
 800e314:	2a27c83a 	sub	r19,r5,r8
 800e318:	98e7c83a 	sub	r19,r19,r3
 800e31c:	98c0202c 	andhi	r3,r19,128
 800e320:	18006226 	beq	r3,zero,800e4ac <__subdf3+0x4c4>
 800e324:	3421c83a 	sub	r16,r6,r16
 800e328:	414bc83a 	sub	r5,r8,r5
 800e32c:	340d803a 	cmpltu	r6,r6,r16
 800e330:	29a7c83a 	sub	r19,r5,r6
 800e334:	3825883a 	mov	r18,r7
 800e338:	983fb31e 	bne	r19,zero,800e208 <__alt_data_end+0xf800e208>
 800e33c:	8009883a 	mov	r4,r16
 800e340:	800ea600 	call	800ea60 <__clzsi2>
 800e344:	10800804 	addi	r2,r2,32
 800e348:	10fffe04 	addi	r3,r2,-8
 800e34c:	010007c4 	movi	r4,31
 800e350:	20ffb20e 	bge	r4,r3,800e21c <__alt_data_end+0xf800e21c>
 800e354:	10bff604 	addi	r2,r2,-40
 800e358:	8084983a 	sll	r2,r16,r2
 800e35c:	0021883a 	mov	r16,zero
 800e360:	1c7fb50e 	bge	r3,r17,800e238 <__alt_data_end+0xf800e238>
 800e364:	017fe034 	movhi	r5,65408
 800e368:	297fffc4 	addi	r5,r5,-1
 800e36c:	88e3c83a 	sub	r17,r17,r3
 800e370:	114a703a 	and	r5,r2,r5
 800e374:	003f3f06 	br	800e074 <__alt_data_end+0xf800e074>
 800e378:	000b883a 	mov	r5,zero
 800e37c:	0005883a 	mov	r2,zero
 800e380:	003f5306 	br	800e0d0 <__alt_data_end+0xf800e0d0>
 800e384:	418cb03a 	or	r6,r8,r6
 800e388:	300cc03a 	cmpne	r6,r6,zero
 800e38c:	0007883a 	mov	r3,zero
 800e390:	003f9206 	br	800e1dc <__alt_data_end+0xf800e1dc>
 800e394:	1800961e 	bne	r3,zero,800e5f0 <__subdf3+0x608>
 800e398:	88800044 	addi	r2,r17,1
 800e39c:	1101ffcc 	andi	r4,r2,2047
 800e3a0:	00c00044 	movi	r3,1
 800e3a4:	1900680e 	bge	r3,r4,800e548 <__subdf3+0x560>
 800e3a8:	00c1ffc4 	movi	r3,2047
 800e3ac:	10c0b626 	beq	r2,r3,800e688 <__subdf3+0x6a0>
 800e3b0:	340d883a 	add	r6,r6,r16
 800e3b4:	3421803a 	cmpltu	r16,r6,r16
 800e3b8:	414b883a 	add	r5,r8,r5
 800e3bc:	2c0b883a 	add	r5,r5,r16
 800e3c0:	282097fa 	slli	r16,r5,31
 800e3c4:	300cd07a 	srli	r6,r6,1
 800e3c8:	280ad07a 	srli	r5,r5,1
 800e3cc:	1023883a 	mov	r17,r2
 800e3d0:	81a0b03a 	or	r16,r16,r6
 800e3d4:	003f2706 	br	800e074 <__alt_data_end+0xf800e074>
 800e3d8:	0081ffc4 	movi	r2,2047
 800e3dc:	88bf721e 	bne	r17,r2,800e1a8 <__alt_data_end+0xf800e1a8>
 800e3e0:	003f2406 	br	800e074 <__alt_data_end+0xf800e074>
 800e3e4:	893ff844 	addi	r4,r17,-31
 800e3e8:	00c00804 	movi	r3,32
 800e3ec:	1108d83a 	srl	r4,r2,r4
 800e3f0:	28c05126 	beq	r5,r3,800e538 <__subdf3+0x550>
 800e3f4:	00c00fc4 	movi	r3,63
 800e3f8:	1c63c83a 	sub	r17,r3,r17
 800e3fc:	1444983a 	sll	r2,r2,r17
 800e400:	1420b03a 	or	r16,r2,r16
 800e404:	8020c03a 	cmpne	r16,r16,zero
 800e408:	8120b03a 	or	r16,r16,r4
 800e40c:	000b883a 	mov	r5,zero
 800e410:	0023883a 	mov	r17,zero
 800e414:	003f1706 	br	800e074 <__alt_data_end+0xf800e074>
 800e418:	18bff804 	addi	r2,r3,-32
 800e41c:	01000804 	movi	r4,32
 800e420:	4084d83a 	srl	r2,r8,r2
 800e424:	19004626 	beq	r3,r4,800e540 <__subdf3+0x558>
 800e428:	01001004 	movi	r4,64
 800e42c:	20c7c83a 	sub	r3,r4,r3
 800e430:	40d0983a 	sll	r8,r8,r3
 800e434:	418cb03a 	or	r6,r8,r6
 800e438:	300cc03a 	cmpne	r6,r6,zero
 800e43c:	308cb03a 	or	r6,r6,r2
 800e440:	0007883a 	mov	r3,zero
 800e444:	003f6506 	br	800e1dc <__alt_data_end+0xf800e1dc>
 800e448:	88002b26 	beq	r17,zero,800e4f8 <__subdf3+0x510>
 800e44c:	0101ffc4 	movi	r4,2047
 800e450:	11002f26 	beq	r2,r4,800e510 <__subdf3+0x528>
 800e454:	00c7c83a 	sub	r3,zero,r3
 800e458:	29402034 	orhi	r5,r5,128
 800e45c:	01000e04 	movi	r4,56
 800e460:	20c08516 	blt	r4,r3,800e678 <__subdf3+0x690>
 800e464:	010007c4 	movi	r4,31
 800e468:	20c0cd16 	blt	r4,r3,800e7a0 <__subdf3+0x7b8>
 800e46c:	01000804 	movi	r4,32
 800e470:	20c9c83a 	sub	r4,r4,r3
 800e474:	2914983a 	sll	r10,r5,r4
 800e478:	80d2d83a 	srl	r9,r16,r3
 800e47c:	8108983a 	sll	r4,r16,r4
 800e480:	28cad83a 	srl	r5,r5,r3
 800e484:	5252b03a 	or	r9,r10,r9
 800e488:	2006c03a 	cmpne	r3,r4,zero
 800e48c:	48e0b03a 	or	r16,r9,r3
 800e490:	3421c83a 	sub	r16,r6,r16
 800e494:	414bc83a 	sub	r5,r8,r5
 800e498:	340d803a 	cmpltu	r6,r6,r16
 800e49c:	298bc83a 	sub	r5,r5,r6
 800e4a0:	1023883a 	mov	r17,r2
 800e4a4:	3825883a 	mov	r18,r7
 800e4a8:	003f5106 	br	800e1f0 <__alt_data_end+0xf800e1f0>
 800e4ac:	9886b03a 	or	r3,r19,r2
 800e4b0:	18001c1e 	bne	r3,zero,800e524 <__subdf3+0x53c>
 800e4b4:	0013883a 	mov	r9,zero
 800e4b8:	000b883a 	mov	r5,zero
 800e4bc:	0021883a 	mov	r16,zero
 800e4c0:	0023883a 	mov	r17,zero
 800e4c4:	003f6d06 	br	800e27c <__alt_data_end+0xf800e27c>
 800e4c8:	008007c4 	movi	r2,31
 800e4cc:	10c03c16 	blt	r2,r3,800e5c0 <__subdf3+0x5d8>
 800e4d0:	00800804 	movi	r2,32
 800e4d4:	10c5c83a 	sub	r2,r2,r3
 800e4d8:	30c8d83a 	srl	r4,r6,r3
 800e4dc:	408e983a 	sll	r7,r8,r2
 800e4e0:	3084983a 	sll	r2,r6,r2
 800e4e4:	40c6d83a 	srl	r3,r8,r3
 800e4e8:	3908b03a 	or	r4,r7,r4
 800e4ec:	1004c03a 	cmpne	r2,r2,zero
 800e4f0:	208cb03a 	or	r6,r4,r2
 800e4f4:	003f1506 	br	800e14c <__alt_data_end+0xf800e14c>
 800e4f8:	2c08b03a 	or	r4,r5,r16
 800e4fc:	20000426 	beq	r4,zero,800e510 <__subdf3+0x528>
 800e500:	00c6303a 	nor	r3,zero,r3
 800e504:	183fe226 	beq	r3,zero,800e490 <__alt_data_end+0xf800e490>
 800e508:	0101ffc4 	movi	r4,2047
 800e50c:	113fd31e 	bne	r2,r4,800e45c <__alt_data_end+0xf800e45c>
 800e510:	400b883a 	mov	r5,r8
 800e514:	3021883a 	mov	r16,r6
 800e518:	1023883a 	mov	r17,r2
 800e51c:	3825883a 	mov	r18,r7
 800e520:	003ed406 	br	800e074 <__alt_data_end+0xf800e074>
 800e524:	1021883a 	mov	r16,r2
 800e528:	003f3606 	br	800e204 <__alt_data_end+0xf800e204>
 800e52c:	0081ffc4 	movi	r2,2047
 800e530:	88bf011e 	bne	r17,r2,800e138 <__alt_data_end+0xf800e138>
 800e534:	003ecf06 	br	800e074 <__alt_data_end+0xf800e074>
 800e538:	0005883a 	mov	r2,zero
 800e53c:	003fb006 	br	800e400 <__alt_data_end+0xf800e400>
 800e540:	0011883a 	mov	r8,zero
 800e544:	003fbb06 	br	800e434 <__alt_data_end+0xf800e434>
 800e548:	2c04b03a 	or	r2,r5,r16
 800e54c:	88007f1e 	bne	r17,zero,800e74c <__subdf3+0x764>
 800e550:	1000a926 	beq	r2,zero,800e7f8 <__subdf3+0x810>
 800e554:	4184b03a 	or	r2,r8,r6
 800e558:	103ec626 	beq	r2,zero,800e074 <__alt_data_end+0xf800e074>
 800e55c:	340d883a 	add	r6,r6,r16
 800e560:	414b883a 	add	r5,r8,r5
 800e564:	3421803a 	cmpltu	r16,r6,r16
 800e568:	2c0b883a 	add	r5,r5,r16
 800e56c:	2880202c 	andhi	r2,r5,128
 800e570:	1000bb26 	beq	r2,zero,800e860 <__subdf3+0x878>
 800e574:	00bfe034 	movhi	r2,65408
 800e578:	10bfffc4 	addi	r2,r2,-1
 800e57c:	288a703a 	and	r5,r5,r2
 800e580:	3021883a 	mov	r16,r6
 800e584:	1823883a 	mov	r17,r3
 800e588:	003eba06 	br	800e074 <__alt_data_end+0xf800e074>
 800e58c:	2c04b03a 	or	r2,r5,r16
 800e590:	8800311e 	bne	r17,zero,800e658 <__subdf3+0x670>
 800e594:	1000451e 	bne	r2,zero,800e6ac <__subdf3+0x6c4>
 800e598:	4184b03a 	or	r2,r8,r6
 800e59c:	10000426 	beq	r2,zero,800e5b0 <__subdf3+0x5c8>
 800e5a0:	400b883a 	mov	r5,r8
 800e5a4:	3021883a 	mov	r16,r6
 800e5a8:	3825883a 	mov	r18,r7
 800e5ac:	003eb106 	br	800e074 <__alt_data_end+0xf800e074>
 800e5b0:	0013883a 	mov	r9,zero
 800e5b4:	000b883a 	mov	r5,zero
 800e5b8:	0021883a 	mov	r16,zero
 800e5bc:	003f2f06 	br	800e27c <__alt_data_end+0xf800e27c>
 800e5c0:	18bff804 	addi	r2,r3,-32
 800e5c4:	01000804 	movi	r4,32
 800e5c8:	4084d83a 	srl	r2,r8,r2
 800e5cc:	19007226 	beq	r3,r4,800e798 <__subdf3+0x7b0>
 800e5d0:	01001004 	movi	r4,64
 800e5d4:	20c7c83a 	sub	r3,r4,r3
 800e5d8:	40d0983a 	sll	r8,r8,r3
 800e5dc:	418cb03a 	or	r6,r8,r6
 800e5e0:	300cc03a 	cmpne	r6,r6,zero
 800e5e4:	308cb03a 	or	r6,r6,r2
 800e5e8:	0007883a 	mov	r3,zero
 800e5ec:	003ed706 	br	800e14c <__alt_data_end+0xf800e14c>
 800e5f0:	8800291e 	bne	r17,zero,800e698 <__subdf3+0x6b0>
 800e5f4:	2c08b03a 	or	r4,r5,r16
 800e5f8:	20005026 	beq	r4,zero,800e73c <__subdf3+0x754>
 800e5fc:	00c6303a 	nor	r3,zero,r3
 800e600:	18000f26 	beq	r3,zero,800e640 <__subdf3+0x658>
 800e604:	0101ffc4 	movi	r4,2047
 800e608:	11004c26 	beq	r2,r4,800e73c <__subdf3+0x754>
 800e60c:	01000e04 	movi	r4,56
 800e610:	20c07516 	blt	r4,r3,800e7e8 <__subdf3+0x800>
 800e614:	010007c4 	movi	r4,31
 800e618:	20c08316 	blt	r4,r3,800e828 <__subdf3+0x840>
 800e61c:	01000804 	movi	r4,32
 800e620:	20c9c83a 	sub	r4,r4,r3
 800e624:	2914983a 	sll	r10,r5,r4
 800e628:	80ced83a 	srl	r7,r16,r3
 800e62c:	8108983a 	sll	r4,r16,r4
 800e630:	28cad83a 	srl	r5,r5,r3
 800e634:	51ceb03a 	or	r7,r10,r7
 800e638:	2006c03a 	cmpne	r3,r4,zero
 800e63c:	38e0b03a 	or	r16,r7,r3
 800e640:	81a1883a 	add	r16,r16,r6
 800e644:	2a0b883a 	add	r5,r5,r8
 800e648:	818d803a 	cmpltu	r6,r16,r6
 800e64c:	298b883a 	add	r5,r5,r6
 800e650:	1023883a 	mov	r17,r2
 800e654:	003ec206 	br	800e160 <__alt_data_end+0xf800e160>
 800e658:	1000221e 	bne	r2,zero,800e6e4 <__subdf3+0x6fc>
 800e65c:	4184b03a 	or	r2,r8,r6
 800e660:	10005b26 	beq	r2,zero,800e7d0 <__subdf3+0x7e8>
 800e664:	400b883a 	mov	r5,r8
 800e668:	3021883a 	mov	r16,r6
 800e66c:	3825883a 	mov	r18,r7
 800e670:	0441ffc4 	movi	r17,2047
 800e674:	003e7f06 	br	800e074 <__alt_data_end+0xf800e074>
 800e678:	2c20b03a 	or	r16,r5,r16
 800e67c:	8020c03a 	cmpne	r16,r16,zero
 800e680:	000b883a 	mov	r5,zero
 800e684:	003f8206 	br	800e490 <__alt_data_end+0xf800e490>
 800e688:	1023883a 	mov	r17,r2
 800e68c:	000b883a 	mov	r5,zero
 800e690:	0021883a 	mov	r16,zero
 800e694:	003ef906 	br	800e27c <__alt_data_end+0xf800e27c>
 800e698:	0101ffc4 	movi	r4,2047
 800e69c:	11002726 	beq	r2,r4,800e73c <__subdf3+0x754>
 800e6a0:	00c7c83a 	sub	r3,zero,r3
 800e6a4:	29402034 	orhi	r5,r5,128
 800e6a8:	003fd806 	br	800e60c <__alt_data_end+0xf800e60c>
 800e6ac:	4184b03a 	or	r2,r8,r6
 800e6b0:	103e7026 	beq	r2,zero,800e074 <__alt_data_end+0xf800e074>
 800e6b4:	8185c83a 	sub	r2,r16,r6
 800e6b8:	8089803a 	cmpltu	r4,r16,r2
 800e6bc:	2a07c83a 	sub	r3,r5,r8
 800e6c0:	1907c83a 	sub	r3,r3,r4
 800e6c4:	1900202c 	andhi	r4,r3,128
 800e6c8:	20005226 	beq	r4,zero,800e814 <__subdf3+0x82c>
 800e6cc:	3421c83a 	sub	r16,r6,r16
 800e6d0:	414bc83a 	sub	r5,r8,r5
 800e6d4:	340d803a 	cmpltu	r6,r6,r16
 800e6d8:	298bc83a 	sub	r5,r5,r6
 800e6dc:	3825883a 	mov	r18,r7
 800e6e0:	003e6406 	br	800e074 <__alt_data_end+0xf800e074>
 800e6e4:	4184b03a 	or	r2,r8,r6
 800e6e8:	10002926 	beq	r2,zero,800e790 <__subdf3+0x7a8>
 800e6ec:	2804d0fa 	srli	r2,r5,3
 800e6f0:	8020d0fa 	srli	r16,r16,3
 800e6f4:	280a977a 	slli	r5,r5,29
 800e6f8:	10c0022c 	andhi	r3,r2,8
 800e6fc:	2c20b03a 	or	r16,r5,r16
 800e700:	18000826 	beq	r3,zero,800e724 <__subdf3+0x73c>
 800e704:	4006d0fa 	srli	r3,r8,3
 800e708:	1900022c 	andhi	r4,r3,8
 800e70c:	2000051e 	bne	r4,zero,800e724 <__subdf3+0x73c>
 800e710:	300cd0fa 	srli	r6,r6,3
 800e714:	4010977a 	slli	r8,r8,29
 800e718:	1805883a 	mov	r2,r3
 800e71c:	3825883a 	mov	r18,r7
 800e720:	41a0b03a 	or	r16,r8,r6
 800e724:	800ad77a 	srli	r5,r16,29
 800e728:	100490fa 	slli	r2,r2,3
 800e72c:	802090fa 	slli	r16,r16,3
 800e730:	0441ffc4 	movi	r17,2047
 800e734:	288ab03a 	or	r5,r5,r2
 800e738:	003e4e06 	br	800e074 <__alt_data_end+0xf800e074>
 800e73c:	400b883a 	mov	r5,r8
 800e740:	3021883a 	mov	r16,r6
 800e744:	1023883a 	mov	r17,r2
 800e748:	003e4a06 	br	800e074 <__alt_data_end+0xf800e074>
 800e74c:	10002d26 	beq	r2,zero,800e804 <__subdf3+0x81c>
 800e750:	4184b03a 	or	r2,r8,r6
 800e754:	10000e26 	beq	r2,zero,800e790 <__subdf3+0x7a8>
 800e758:	2804d0fa 	srli	r2,r5,3
 800e75c:	8020d0fa 	srli	r16,r16,3
 800e760:	280a977a 	slli	r5,r5,29
 800e764:	10c0022c 	andhi	r3,r2,8
 800e768:	2c20b03a 	or	r16,r5,r16
 800e76c:	183fed26 	beq	r3,zero,800e724 <__alt_data_end+0xf800e724>
 800e770:	4006d0fa 	srli	r3,r8,3
 800e774:	1900022c 	andhi	r4,r3,8
 800e778:	203fea1e 	bne	r4,zero,800e724 <__alt_data_end+0xf800e724>
 800e77c:	300cd0fa 	srli	r6,r6,3
 800e780:	4010977a 	slli	r8,r8,29
 800e784:	1805883a 	mov	r2,r3
 800e788:	41a0b03a 	or	r16,r8,r6
 800e78c:	003fe506 	br	800e724 <__alt_data_end+0xf800e724>
 800e790:	0441ffc4 	movi	r17,2047
 800e794:	003e3706 	br	800e074 <__alt_data_end+0xf800e074>
 800e798:	0011883a 	mov	r8,zero
 800e79c:	003f8f06 	br	800e5dc <__alt_data_end+0xf800e5dc>
 800e7a0:	193ff804 	addi	r4,r3,-32
 800e7a4:	02400804 	movi	r9,32
 800e7a8:	2908d83a 	srl	r4,r5,r4
 800e7ac:	1a402a26 	beq	r3,r9,800e858 <__subdf3+0x870>
 800e7b0:	02401004 	movi	r9,64
 800e7b4:	48c7c83a 	sub	r3,r9,r3
 800e7b8:	28ca983a 	sll	r5,r5,r3
 800e7bc:	2c20b03a 	or	r16,r5,r16
 800e7c0:	8020c03a 	cmpne	r16,r16,zero
 800e7c4:	8120b03a 	or	r16,r16,r4
 800e7c8:	000b883a 	mov	r5,zero
 800e7cc:	003f3006 	br	800e490 <__alt_data_end+0xf800e490>
 800e7d0:	0013883a 	mov	r9,zero
 800e7d4:	01402034 	movhi	r5,128
 800e7d8:	297fffc4 	addi	r5,r5,-1
 800e7dc:	043ffe04 	movi	r16,-8
 800e7e0:	0441ffc4 	movi	r17,2047
 800e7e4:	003ea506 	br	800e27c <__alt_data_end+0xf800e27c>
 800e7e8:	2c20b03a 	or	r16,r5,r16
 800e7ec:	8020c03a 	cmpne	r16,r16,zero
 800e7f0:	000b883a 	mov	r5,zero
 800e7f4:	003f9206 	br	800e640 <__alt_data_end+0xf800e640>
 800e7f8:	400b883a 	mov	r5,r8
 800e7fc:	3021883a 	mov	r16,r6
 800e800:	003e1c06 	br	800e074 <__alt_data_end+0xf800e074>
 800e804:	400b883a 	mov	r5,r8
 800e808:	3021883a 	mov	r16,r6
 800e80c:	0441ffc4 	movi	r17,2047
 800e810:	003e1806 	br	800e074 <__alt_data_end+0xf800e074>
 800e814:	1888b03a 	or	r4,r3,r2
 800e818:	203f6526 	beq	r4,zero,800e5b0 <__alt_data_end+0xf800e5b0>
 800e81c:	180b883a 	mov	r5,r3
 800e820:	1021883a 	mov	r16,r2
 800e824:	003e1306 	br	800e074 <__alt_data_end+0xf800e074>
 800e828:	193ff804 	addi	r4,r3,-32
 800e82c:	01c00804 	movi	r7,32
 800e830:	2908d83a 	srl	r4,r5,r4
 800e834:	19c00c26 	beq	r3,r7,800e868 <__subdf3+0x880>
 800e838:	01c01004 	movi	r7,64
 800e83c:	38c7c83a 	sub	r3,r7,r3
 800e840:	28ca983a 	sll	r5,r5,r3
 800e844:	2c20b03a 	or	r16,r5,r16
 800e848:	8020c03a 	cmpne	r16,r16,zero
 800e84c:	8120b03a 	or	r16,r16,r4
 800e850:	000b883a 	mov	r5,zero
 800e854:	003f7a06 	br	800e640 <__alt_data_end+0xf800e640>
 800e858:	000b883a 	mov	r5,zero
 800e85c:	003fd706 	br	800e7bc <__alt_data_end+0xf800e7bc>
 800e860:	3021883a 	mov	r16,r6
 800e864:	003e0306 	br	800e074 <__alt_data_end+0xf800e074>
 800e868:	000b883a 	mov	r5,zero
 800e86c:	003ff506 	br	800e844 <__alt_data_end+0xf800e844>

0800e870 <__fixdfsi>:
 800e870:	2806d53a 	srli	r3,r5,20
 800e874:	00800434 	movhi	r2,16
 800e878:	10bfffc4 	addi	r2,r2,-1
 800e87c:	0180ff84 	movi	r6,1022
 800e880:	18c1ffcc 	andi	r3,r3,2047
 800e884:	2884703a 	and	r2,r5,r2
 800e888:	280ad7fa 	srli	r5,r5,31
 800e88c:	30c0120e 	bge	r6,r3,800e8d8 <__fixdfsi+0x68>
 800e890:	01810744 	movi	r6,1053
 800e894:	30c00c16 	blt	r6,r3,800e8c8 <__fixdfsi+0x58>
 800e898:	01810cc4 	movi	r6,1075
 800e89c:	30cdc83a 	sub	r6,r6,r3
 800e8a0:	01c007c4 	movi	r7,31
 800e8a4:	10800434 	orhi	r2,r2,16
 800e8a8:	39800d16 	blt	r7,r6,800e8e0 <__fixdfsi+0x70>
 800e8ac:	18fefb44 	addi	r3,r3,-1043
 800e8b0:	2188d83a 	srl	r4,r4,r6
 800e8b4:	10c4983a 	sll	r2,r2,r3
 800e8b8:	2084b03a 	or	r2,r4,r2
 800e8bc:	28000726 	beq	r5,zero,800e8dc <__fixdfsi+0x6c>
 800e8c0:	0085c83a 	sub	r2,zero,r2
 800e8c4:	f800283a 	ret
 800e8c8:	00a00034 	movhi	r2,32768
 800e8cc:	10bfffc4 	addi	r2,r2,-1
 800e8d0:	2885883a 	add	r2,r5,r2
 800e8d4:	f800283a 	ret
 800e8d8:	0005883a 	mov	r2,zero
 800e8dc:	f800283a 	ret
 800e8e0:	010104c4 	movi	r4,1043
 800e8e4:	20c7c83a 	sub	r3,r4,r3
 800e8e8:	10c4d83a 	srl	r2,r2,r3
 800e8ec:	003ff306 	br	800e8bc <__alt_data_end+0xf800e8bc>

0800e8f0 <__floatsidf>:
 800e8f0:	defffd04 	addi	sp,sp,-12
 800e8f4:	dc000015 	stw	r16,0(sp)
 800e8f8:	dfc00215 	stw	ra,8(sp)
 800e8fc:	dc400115 	stw	r17,4(sp)
 800e900:	2021883a 	mov	r16,r4
 800e904:	20002926 	beq	r4,zero,800e9ac <__floatsidf+0xbc>
 800e908:	2022d7fa 	srli	r17,r4,31
 800e90c:	88000126 	beq	r17,zero,800e914 <__floatsidf+0x24>
 800e910:	0121c83a 	sub	r16,zero,r4
 800e914:	8009883a 	mov	r4,r16
 800e918:	800ea600 	call	800ea60 <__clzsi2>
 800e91c:	01810784 	movi	r6,1054
 800e920:	00c00284 	movi	r3,10
 800e924:	308dc83a 	sub	r6,r6,r2
 800e928:	1880150e 	bge	r3,r2,800e980 <__floatsidf+0x90>
 800e92c:	113ffd44 	addi	r4,r2,-11
 800e930:	8108983a 	sll	r4,r16,r4
 800e934:	00800434 	movhi	r2,16
 800e938:	10bfffc4 	addi	r2,r2,-1
 800e93c:	3181ffcc 	andi	r6,r6,2047
 800e940:	2088703a 	and	r4,r4,r2
 800e944:	880b883a 	mov	r5,r17
 800e948:	0005883a 	mov	r2,zero
 800e94c:	300c953a 	slli	r6,r6,20
 800e950:	29403fcc 	andi	r5,r5,255
 800e954:	280a97fa 	slli	r5,r5,31
 800e958:	00c00434 	movhi	r3,16
 800e95c:	18ffffc4 	addi	r3,r3,-1
 800e960:	20c8703a 	and	r4,r4,r3
 800e964:	2186b03a 	or	r3,r4,r6
 800e968:	1946b03a 	or	r3,r3,r5
 800e96c:	dfc00217 	ldw	ra,8(sp)
 800e970:	dc400117 	ldw	r17,4(sp)
 800e974:	dc000017 	ldw	r16,0(sp)
 800e978:	dec00304 	addi	sp,sp,12
 800e97c:	f800283a 	ret
 800e980:	010002c4 	movi	r4,11
 800e984:	2089c83a 	sub	r4,r4,r2
 800e988:	8108d83a 	srl	r4,r16,r4
 800e98c:	10800544 	addi	r2,r2,21
 800e990:	00c00434 	movhi	r3,16
 800e994:	18ffffc4 	addi	r3,r3,-1
 800e998:	8084983a 	sll	r2,r16,r2
 800e99c:	20c8703a 	and	r4,r4,r3
 800e9a0:	3181ffcc 	andi	r6,r6,2047
 800e9a4:	880b883a 	mov	r5,r17
 800e9a8:	003fe806 	br	800e94c <__alt_data_end+0xf800e94c>
 800e9ac:	000b883a 	mov	r5,zero
 800e9b0:	000d883a 	mov	r6,zero
 800e9b4:	0009883a 	mov	r4,zero
 800e9b8:	0005883a 	mov	r2,zero
 800e9bc:	003fe306 	br	800e94c <__alt_data_end+0xf800e94c>

0800e9c0 <__floatunsidf>:
 800e9c0:	defffe04 	addi	sp,sp,-8
 800e9c4:	dc000015 	stw	r16,0(sp)
 800e9c8:	dfc00115 	stw	ra,4(sp)
 800e9cc:	2021883a 	mov	r16,r4
 800e9d0:	20001f26 	beq	r4,zero,800ea50 <__floatunsidf+0x90>
 800e9d4:	800ea600 	call	800ea60 <__clzsi2>
 800e9d8:	01010784 	movi	r4,1054
 800e9dc:	00c00284 	movi	r3,10
 800e9e0:	2089c83a 	sub	r4,r4,r2
 800e9e4:	1880100e 	bge	r3,r2,800ea28 <__floatunsidf+0x68>
 800e9e8:	117ffd44 	addi	r5,r2,-11
 800e9ec:	814a983a 	sll	r5,r16,r5
 800e9f0:	00800434 	movhi	r2,16
 800e9f4:	10bfffc4 	addi	r2,r2,-1
 800e9f8:	2101ffcc 	andi	r4,r4,2047
 800e9fc:	288a703a 	and	r5,r5,r2
 800ea00:	0005883a 	mov	r2,zero
 800ea04:	2008953a 	slli	r4,r4,20
 800ea08:	00c00434 	movhi	r3,16
 800ea0c:	18ffffc4 	addi	r3,r3,-1
 800ea10:	28c6703a 	and	r3,r5,r3
 800ea14:	1906b03a 	or	r3,r3,r4
 800ea18:	dfc00117 	ldw	ra,4(sp)
 800ea1c:	dc000017 	ldw	r16,0(sp)
 800ea20:	dec00204 	addi	sp,sp,8
 800ea24:	f800283a 	ret
 800ea28:	014002c4 	movi	r5,11
 800ea2c:	288bc83a 	sub	r5,r5,r2
 800ea30:	814ad83a 	srl	r5,r16,r5
 800ea34:	10800544 	addi	r2,r2,21
 800ea38:	00c00434 	movhi	r3,16
 800ea3c:	18ffffc4 	addi	r3,r3,-1
 800ea40:	8084983a 	sll	r2,r16,r2
 800ea44:	28ca703a 	and	r5,r5,r3
 800ea48:	2101ffcc 	andi	r4,r4,2047
 800ea4c:	003fed06 	br	800ea04 <__alt_data_end+0xf800ea04>
 800ea50:	0009883a 	mov	r4,zero
 800ea54:	000b883a 	mov	r5,zero
 800ea58:	0005883a 	mov	r2,zero
 800ea5c:	003fe906 	br	800ea04 <__alt_data_end+0xf800ea04>

0800ea60 <__clzsi2>:
 800ea60:	00bfffd4 	movui	r2,65535
 800ea64:	11000b36 	bltu	r2,r4,800ea94 <__clzsi2+0x34>
 800ea68:	00803fc4 	movi	r2,255
 800ea6c:	11001e2e 	bgeu	r2,r4,800eae8 <__clzsi2+0x88>
 800ea70:	00c00204 	movi	r3,8
 800ea74:	20c8d83a 	srl	r4,r4,r3
 800ea78:	00c20074 	movhi	r3,2049
 800ea7c:	18c71604 	addi	r3,r3,7256
 800ea80:	00800604 	movi	r2,24
 800ea84:	1909883a 	add	r4,r3,r4
 800ea88:	20c00003 	ldbu	r3,0(r4)
 800ea8c:	10c5c83a 	sub	r2,r2,r3
 800ea90:	f800283a 	ret
 800ea94:	00804034 	movhi	r2,256
 800ea98:	10bfffc4 	addi	r2,r2,-1
 800ea9c:	11000936 	bltu	r2,r4,800eac4 <__clzsi2+0x64>
 800eaa0:	00800404 	movi	r2,16
 800eaa4:	1007883a 	mov	r3,r2
 800eaa8:	20c8d83a 	srl	r4,r4,r3
 800eaac:	00c20074 	movhi	r3,2049
 800eab0:	18c71604 	addi	r3,r3,7256
 800eab4:	1909883a 	add	r4,r3,r4
 800eab8:	20c00003 	ldbu	r3,0(r4)
 800eabc:	10c5c83a 	sub	r2,r2,r3
 800eac0:	f800283a 	ret
 800eac4:	00c00604 	movi	r3,24
 800eac8:	20c8d83a 	srl	r4,r4,r3
 800eacc:	00c20074 	movhi	r3,2049
 800ead0:	18c71604 	addi	r3,r3,7256
 800ead4:	00800204 	movi	r2,8
 800ead8:	1909883a 	add	r4,r3,r4
 800eadc:	20c00003 	ldbu	r3,0(r4)
 800eae0:	10c5c83a 	sub	r2,r2,r3
 800eae4:	f800283a 	ret
 800eae8:	0007883a 	mov	r3,zero
 800eaec:	20c8d83a 	srl	r4,r4,r3
 800eaf0:	00c20074 	movhi	r3,2049
 800eaf4:	18c71604 	addi	r3,r3,7256
 800eaf8:	00800804 	movi	r2,32
 800eafc:	1909883a 	add	r4,r3,r4
 800eb00:	20c00003 	ldbu	r3,0(r4)
 800eb04:	10c5c83a 	sub	r2,r2,r3
 800eb08:	f800283a 	ret

0800eb0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eb0c:	defffe04 	addi	sp,sp,-8
 800eb10:	dfc00115 	stw	ra,4(sp)
 800eb14:	df000015 	stw	fp,0(sp)
 800eb18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eb1c:	00820074 	movhi	r2,2049
 800eb20:	108e1a04 	addi	r2,r2,14440
 800eb24:	10800017 	ldw	r2,0(r2)
 800eb28:	10000526 	beq	r2,zero,800eb40 <alt_get_errno+0x34>
 800eb2c:	00820074 	movhi	r2,2049
 800eb30:	108e1a04 	addi	r2,r2,14440
 800eb34:	10800017 	ldw	r2,0(r2)
 800eb38:	103ee83a 	callr	r2
 800eb3c:	00000206 	br	800eb48 <alt_get_errno+0x3c>
 800eb40:	00820074 	movhi	r2,2049
 800eb44:	1094e604 	addi	r2,r2,21400
}
 800eb48:	e037883a 	mov	sp,fp
 800eb4c:	dfc00117 	ldw	ra,4(sp)
 800eb50:	df000017 	ldw	fp,0(sp)
 800eb54:	dec00204 	addi	sp,sp,8
 800eb58:	f800283a 	ret

0800eb5c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800eb5c:	defffb04 	addi	sp,sp,-20
 800eb60:	dfc00415 	stw	ra,16(sp)
 800eb64:	df000315 	stw	fp,12(sp)
 800eb68:	df000304 	addi	fp,sp,12
 800eb6c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800eb70:	e0bfff17 	ldw	r2,-4(fp)
 800eb74:	10000816 	blt	r2,zero,800eb98 <close+0x3c>
 800eb78:	e13fff17 	ldw	r4,-4(fp)
 800eb7c:	01400304 	movi	r5,12
 800eb80:	800c3600 	call	800c360 <__mulsi3>
 800eb84:	1007883a 	mov	r3,r2
 800eb88:	00820074 	movhi	r2,2049
 800eb8c:	10899404 	addi	r2,r2,9808
 800eb90:	1885883a 	add	r2,r3,r2
 800eb94:	00000106 	br	800eb9c <close+0x40>
 800eb98:	0005883a 	mov	r2,zero
 800eb9c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800eba0:	e0bffd17 	ldw	r2,-12(fp)
 800eba4:	10001826 	beq	r2,zero,800ec08 <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800eba8:	e0bffd17 	ldw	r2,-12(fp)
 800ebac:	10800017 	ldw	r2,0(r2)
 800ebb0:	10800417 	ldw	r2,16(r2)
 800ebb4:	10000626 	beq	r2,zero,800ebd0 <close+0x74>
 800ebb8:	e0bffd17 	ldw	r2,-12(fp)
 800ebbc:	10800017 	ldw	r2,0(r2)
 800ebc0:	10800417 	ldw	r2,16(r2)
 800ebc4:	e13ffd17 	ldw	r4,-12(fp)
 800ebc8:	103ee83a 	callr	r2
 800ebcc:	00000106 	br	800ebd4 <close+0x78>
 800ebd0:	0005883a 	mov	r2,zero
 800ebd4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800ebd8:	e13fff17 	ldw	r4,-4(fp)
 800ebdc:	800f2600 	call	800f260 <alt_release_fd>
    if (rval < 0)
 800ebe0:	e0bffe17 	ldw	r2,-8(fp)
 800ebe4:	1000060e 	bge	r2,zero,800ec00 <close+0xa4>
    {
      ALT_ERRNO = -rval;
 800ebe8:	800eb0c0 	call	800eb0c <alt_get_errno>
 800ebec:	e0fffe17 	ldw	r3,-8(fp)
 800ebf0:	00c7c83a 	sub	r3,zero,r3
 800ebf4:	10c00015 	stw	r3,0(r2)
      return -1;
 800ebf8:	00bfffc4 	movi	r2,-1
 800ebfc:	00000606 	br	800ec18 <close+0xbc>
    }
    return 0;
 800ec00:	0005883a 	mov	r2,zero
 800ec04:	00000406 	br	800ec18 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ec08:	800eb0c0 	call	800eb0c <alt_get_errno>
 800ec0c:	00c01444 	movi	r3,81
 800ec10:	10c00015 	stw	r3,0(r2)
    return -1;
 800ec14:	00bfffc4 	movi	r2,-1
  }
}
 800ec18:	e037883a 	mov	sp,fp
 800ec1c:	dfc00117 	ldw	ra,4(sp)
 800ec20:	df000017 	ldw	fp,0(sp)
 800ec24:	dec00204 	addi	sp,sp,8
 800ec28:	f800283a 	ret

0800ec2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800ec2c:	defffc04 	addi	sp,sp,-16
 800ec30:	df000315 	stw	fp,12(sp)
 800ec34:	df000304 	addi	fp,sp,12
 800ec38:	e13ffd15 	stw	r4,-12(fp)
 800ec3c:	e17ffe15 	stw	r5,-8(fp)
 800ec40:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800ec44:	e0bfff17 	ldw	r2,-4(fp)
}
 800ec48:	e037883a 	mov	sp,fp
 800ec4c:	df000017 	ldw	fp,0(sp)
 800ec50:	dec00104 	addi	sp,sp,4
 800ec54:	f800283a 	ret

0800ec58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ec58:	defffe04 	addi	sp,sp,-8
 800ec5c:	dfc00115 	stw	ra,4(sp)
 800ec60:	df000015 	stw	fp,0(sp)
 800ec64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ec68:	00820074 	movhi	r2,2049
 800ec6c:	108e1a04 	addi	r2,r2,14440
 800ec70:	10800017 	ldw	r2,0(r2)
 800ec74:	10000526 	beq	r2,zero,800ec8c <alt_get_errno+0x34>
 800ec78:	00820074 	movhi	r2,2049
 800ec7c:	108e1a04 	addi	r2,r2,14440
 800ec80:	10800017 	ldw	r2,0(r2)
 800ec84:	103ee83a 	callr	r2
 800ec88:	00000206 	br	800ec94 <alt_get_errno+0x3c>
 800ec8c:	00820074 	movhi	r2,2049
 800ec90:	1094e604 	addi	r2,r2,21400
}
 800ec94:	e037883a 	mov	sp,fp
 800ec98:	dfc00117 	ldw	ra,4(sp)
 800ec9c:	df000017 	ldw	fp,0(sp)
 800eca0:	dec00204 	addi	sp,sp,8
 800eca4:	f800283a 	ret

0800eca8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800eca8:	defffb04 	addi	sp,sp,-20
 800ecac:	dfc00415 	stw	ra,16(sp)
 800ecb0:	df000315 	stw	fp,12(sp)
 800ecb4:	df000304 	addi	fp,sp,12
 800ecb8:	e13ffe15 	stw	r4,-8(fp)
 800ecbc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ecc0:	e0bffe17 	ldw	r2,-8(fp)
 800ecc4:	10000816 	blt	r2,zero,800ece8 <fstat+0x40>
 800ecc8:	e13ffe17 	ldw	r4,-8(fp)
 800eccc:	01400304 	movi	r5,12
 800ecd0:	800c3600 	call	800c360 <__mulsi3>
 800ecd4:	1007883a 	mov	r3,r2
 800ecd8:	00820074 	movhi	r2,2049
 800ecdc:	10899404 	addi	r2,r2,9808
 800ece0:	1885883a 	add	r2,r3,r2
 800ece4:	00000106 	br	800ecec <fstat+0x44>
 800ece8:	0005883a 	mov	r2,zero
 800ecec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800ecf0:	e0bffd17 	ldw	r2,-12(fp)
 800ecf4:	10001026 	beq	r2,zero,800ed38 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800ecf8:	e0bffd17 	ldw	r2,-12(fp)
 800ecfc:	10800017 	ldw	r2,0(r2)
 800ed00:	10800817 	ldw	r2,32(r2)
 800ed04:	10000726 	beq	r2,zero,800ed24 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800ed08:	e0bffd17 	ldw	r2,-12(fp)
 800ed0c:	10800017 	ldw	r2,0(r2)
 800ed10:	10800817 	ldw	r2,32(r2)
 800ed14:	e13ffd17 	ldw	r4,-12(fp)
 800ed18:	e17fff17 	ldw	r5,-4(fp)
 800ed1c:	103ee83a 	callr	r2
 800ed20:	00000906 	br	800ed48 <fstat+0xa0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800ed24:	e0bfff17 	ldw	r2,-4(fp)
 800ed28:	00c80004 	movi	r3,8192
 800ed2c:	10c00115 	stw	r3,4(r2)
      return 0;
 800ed30:	0005883a 	mov	r2,zero
 800ed34:	00000406 	br	800ed48 <fstat+0xa0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ed38:	800ec580 	call	800ec58 <alt_get_errno>
 800ed3c:	00c01444 	movi	r3,81
 800ed40:	10c00015 	stw	r3,0(r2)
    return -1;
 800ed44:	00bfffc4 	movi	r2,-1
  }
}
 800ed48:	e037883a 	mov	sp,fp
 800ed4c:	dfc00117 	ldw	ra,4(sp)
 800ed50:	df000017 	ldw	fp,0(sp)
 800ed54:	dec00204 	addi	sp,sp,8
 800ed58:	f800283a 	ret

0800ed5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ed5c:	defffe04 	addi	sp,sp,-8
 800ed60:	dfc00115 	stw	ra,4(sp)
 800ed64:	df000015 	stw	fp,0(sp)
 800ed68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ed6c:	00820074 	movhi	r2,2049
 800ed70:	108e1a04 	addi	r2,r2,14440
 800ed74:	10800017 	ldw	r2,0(r2)
 800ed78:	10000526 	beq	r2,zero,800ed90 <alt_get_errno+0x34>
 800ed7c:	00820074 	movhi	r2,2049
 800ed80:	108e1a04 	addi	r2,r2,14440
 800ed84:	10800017 	ldw	r2,0(r2)
 800ed88:	103ee83a 	callr	r2
 800ed8c:	00000206 	br	800ed98 <alt_get_errno+0x3c>
 800ed90:	00820074 	movhi	r2,2049
 800ed94:	1094e604 	addi	r2,r2,21400
}
 800ed98:	e037883a 	mov	sp,fp
 800ed9c:	dfc00117 	ldw	ra,4(sp)
 800eda0:	df000017 	ldw	fp,0(sp)
 800eda4:	dec00204 	addi	sp,sp,8
 800eda8:	f800283a 	ret

0800edac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800edac:	deffed04 	addi	sp,sp,-76
 800edb0:	dfc01215 	stw	ra,72(sp)
 800edb4:	df001115 	stw	fp,68(sp)
 800edb8:	df001104 	addi	fp,sp,68
 800edbc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800edc0:	e0bfff17 	ldw	r2,-4(fp)
 800edc4:	10000816 	blt	r2,zero,800ede8 <isatty+0x3c>
 800edc8:	e13fff17 	ldw	r4,-4(fp)
 800edcc:	01400304 	movi	r5,12
 800edd0:	800c3600 	call	800c360 <__mulsi3>
 800edd4:	1007883a 	mov	r3,r2
 800edd8:	00820074 	movhi	r2,2049
 800eddc:	10899404 	addi	r2,r2,9808
 800ede0:	1885883a 	add	r2,r3,r2
 800ede4:	00000106 	br	800edec <isatty+0x40>
 800ede8:	0005883a 	mov	r2,zero
 800edec:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800edf0:	e0bfef17 	ldw	r2,-68(fp)
 800edf4:	10000e26 	beq	r2,zero,800ee30 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800edf8:	e0bfef17 	ldw	r2,-68(fp)
 800edfc:	10800017 	ldw	r2,0(r2)
 800ee00:	10800817 	ldw	r2,32(r2)
 800ee04:	1000021e 	bne	r2,zero,800ee10 <isatty+0x64>
    {
      return 1;
 800ee08:	00800044 	movi	r2,1
 800ee0c:	00000c06 	br	800ee40 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800ee10:	e0bff004 	addi	r2,fp,-64
 800ee14:	e13fff17 	ldw	r4,-4(fp)
 800ee18:	100b883a 	mov	r5,r2
 800ee1c:	800eca80 	call	800eca8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800ee20:	e0bff117 	ldw	r2,-60(fp)
 800ee24:	10880020 	cmpeqi	r2,r2,8192
 800ee28:	10803fcc 	andi	r2,r2,255
 800ee2c:	00000406 	br	800ee40 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ee30:	800ed5c0 	call	800ed5c <alt_get_errno>
 800ee34:	00c01444 	movi	r3,81
 800ee38:	10c00015 	stw	r3,0(r2)
    return 0;
 800ee3c:	0005883a 	mov	r2,zero
  }
}
 800ee40:	e037883a 	mov	sp,fp
 800ee44:	dfc00117 	ldw	ra,4(sp)
 800ee48:	df000017 	ldw	fp,0(sp)
 800ee4c:	dec00204 	addi	sp,sp,8
 800ee50:	f800283a 	ret

0800ee54 <alt_load_section>:
 800ee54:	defffc04 	addi	sp,sp,-16
 800ee58:	df000315 	stw	fp,12(sp)
 800ee5c:	df000304 	addi	fp,sp,12
 800ee60:	e13ffd15 	stw	r4,-12(fp)
 800ee64:	e17ffe15 	stw	r5,-8(fp)
 800ee68:	e1bfff15 	stw	r6,-4(fp)
 800ee6c:	e0fffe17 	ldw	r3,-8(fp)
 800ee70:	e0bffd17 	ldw	r2,-12(fp)
 800ee74:	18800c26 	beq	r3,r2,800eea8 <alt_load_section+0x54>
 800ee78:	00000806 	br	800ee9c <alt_load_section+0x48>
 800ee7c:	e0bffe17 	ldw	r2,-8(fp)
 800ee80:	10c00104 	addi	r3,r2,4
 800ee84:	e0fffe15 	stw	r3,-8(fp)
 800ee88:	e0fffd17 	ldw	r3,-12(fp)
 800ee8c:	19000104 	addi	r4,r3,4
 800ee90:	e13ffd15 	stw	r4,-12(fp)
 800ee94:	18c00017 	ldw	r3,0(r3)
 800ee98:	10c00015 	stw	r3,0(r2)
 800ee9c:	e0fffe17 	ldw	r3,-8(fp)
 800eea0:	e0bfff17 	ldw	r2,-4(fp)
 800eea4:	18bff51e 	bne	r3,r2,800ee7c <__alt_data_end+0xf800ee7c>
 800eea8:	e037883a 	mov	sp,fp
 800eeac:	df000017 	ldw	fp,0(sp)
 800eeb0:	dec00104 	addi	sp,sp,4
 800eeb4:	f800283a 	ret

0800eeb8 <alt_load>:
 800eeb8:	defffe04 	addi	sp,sp,-8
 800eebc:	dfc00115 	stw	ra,4(sp)
 800eec0:	df000015 	stw	fp,0(sp)
 800eec4:	d839883a 	mov	fp,sp
 800eec8:	01020074 	movhi	r4,2049
 800eecc:	210e1f04 	addi	r4,r4,14460
 800eed0:	01420074 	movhi	r5,2049
 800eed4:	29476104 	addi	r5,r5,7556
 800eed8:	01820074 	movhi	r6,2049
 800eedc:	318e1f04 	addi	r6,r6,14460
 800eee0:	800ee540 	call	800ee54 <alt_load_section>
 800eee4:	01020034 	movhi	r4,2048
 800eee8:	21000804 	addi	r4,r4,32
 800eeec:	01420034 	movhi	r5,2048
 800eef0:	29400804 	addi	r5,r5,32
 800eef4:	01820034 	movhi	r6,2048
 800eef8:	31806f04 	addi	r6,r6,444
 800eefc:	800ee540 	call	800ee54 <alt_load_section>
 800ef00:	01020074 	movhi	r4,2049
 800ef04:	2104c504 	addi	r4,r4,4884
 800ef08:	01420074 	movhi	r5,2049
 800ef0c:	2944c504 	addi	r5,r5,4884
 800ef10:	01820074 	movhi	r6,2049
 800ef14:	31876104 	addi	r6,r6,7556
 800ef18:	800ee540 	call	800ee54 <alt_load_section>
 800ef1c:	80102840 	call	8010284 <alt_dcache_flush_all>
 800ef20:	80104480 	call	8010448 <alt_icache_flush_all>
 800ef24:	e037883a 	mov	sp,fp
 800ef28:	dfc00117 	ldw	ra,4(sp)
 800ef2c:	df000017 	ldw	fp,0(sp)
 800ef30:	dec00204 	addi	sp,sp,8
 800ef34:	f800283a 	ret

0800ef38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ef38:	defffe04 	addi	sp,sp,-8
 800ef3c:	dfc00115 	stw	ra,4(sp)
 800ef40:	df000015 	stw	fp,0(sp)
 800ef44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ef48:	00820074 	movhi	r2,2049
 800ef4c:	108e1a04 	addi	r2,r2,14440
 800ef50:	10800017 	ldw	r2,0(r2)
 800ef54:	10000526 	beq	r2,zero,800ef6c <alt_get_errno+0x34>
 800ef58:	00820074 	movhi	r2,2049
 800ef5c:	108e1a04 	addi	r2,r2,14440
 800ef60:	10800017 	ldw	r2,0(r2)
 800ef64:	103ee83a 	callr	r2
 800ef68:	00000206 	br	800ef74 <alt_get_errno+0x3c>
 800ef6c:	00820074 	movhi	r2,2049
 800ef70:	1094e604 	addi	r2,r2,21400
}
 800ef74:	e037883a 	mov	sp,fp
 800ef78:	dfc00117 	ldw	ra,4(sp)
 800ef7c:	df000017 	ldw	fp,0(sp)
 800ef80:	dec00204 	addi	sp,sp,8
 800ef84:	f800283a 	ret

0800ef88 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800ef88:	defff904 	addi	sp,sp,-28
 800ef8c:	dfc00615 	stw	ra,24(sp)
 800ef90:	df000515 	stw	fp,20(sp)
 800ef94:	df000504 	addi	fp,sp,20
 800ef98:	e13ffd15 	stw	r4,-12(fp)
 800ef9c:	e17ffe15 	stw	r5,-8(fp)
 800efa0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800efa4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800efa8:	e0bffd17 	ldw	r2,-12(fp)
 800efac:	10000816 	blt	r2,zero,800efd0 <lseek+0x48>
 800efb0:	e13ffd17 	ldw	r4,-12(fp)
 800efb4:	01400304 	movi	r5,12
 800efb8:	800c3600 	call	800c360 <__mulsi3>
 800efbc:	1007883a 	mov	r3,r2
 800efc0:	00820074 	movhi	r2,2049
 800efc4:	10899404 	addi	r2,r2,9808
 800efc8:	1885883a 	add	r2,r3,r2
 800efcc:	00000106 	br	800efd4 <lseek+0x4c>
 800efd0:	0005883a 	mov	r2,zero
 800efd4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800efd8:	e0bffc17 	ldw	r2,-16(fp)
 800efdc:	10001026 	beq	r2,zero,800f020 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800efe0:	e0bffc17 	ldw	r2,-16(fp)
 800efe4:	10800017 	ldw	r2,0(r2)
 800efe8:	10800717 	ldw	r2,28(r2)
 800efec:	10000926 	beq	r2,zero,800f014 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800eff0:	e0bffc17 	ldw	r2,-16(fp)
 800eff4:	10800017 	ldw	r2,0(r2)
 800eff8:	10800717 	ldw	r2,28(r2)
 800effc:	e13ffc17 	ldw	r4,-16(fp)
 800f000:	e17ffe17 	ldw	r5,-8(fp)
 800f004:	e1bfff17 	ldw	r6,-4(fp)
 800f008:	103ee83a 	callr	r2
 800f00c:	e0bffb15 	stw	r2,-20(fp)
 800f010:	00000506 	br	800f028 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800f014:	00bfde84 	movi	r2,-134
 800f018:	e0bffb15 	stw	r2,-20(fp)
 800f01c:	00000206 	br	800f028 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800f020:	00bfebc4 	movi	r2,-81
 800f024:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800f028:	e0bffb17 	ldw	r2,-20(fp)
 800f02c:	1000060e 	bge	r2,zero,800f048 <lseek+0xc0>
  {
    ALT_ERRNO = -rc;
 800f030:	800ef380 	call	800ef38 <alt_get_errno>
 800f034:	e0fffb17 	ldw	r3,-20(fp)
 800f038:	00c7c83a 	sub	r3,zero,r3
 800f03c:	10c00015 	stw	r3,0(r2)
    rc = -1;
 800f040:	00bfffc4 	movi	r2,-1
 800f044:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800f048:	e0bffb17 	ldw	r2,-20(fp)
}
 800f04c:	e037883a 	mov	sp,fp
 800f050:	dfc00117 	ldw	ra,4(sp)
 800f054:	df000017 	ldw	fp,0(sp)
 800f058:	dec00204 	addi	sp,sp,8
 800f05c:	f800283a 	ret

0800f060 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800f060:	defffd04 	addi	sp,sp,-12
 800f064:	dfc00215 	stw	ra,8(sp)
 800f068:	df000115 	stw	fp,4(sp)
 800f06c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800f070:	0009883a 	mov	r4,zero
 800f074:	800f53c0 	call	800f53c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800f078:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800f07c:	800f5700 	call	800f570 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800f080:	01020074 	movhi	r4,2049
 800f084:	21075904 	addi	r4,r4,7524
 800f088:	01420074 	movhi	r5,2049
 800f08c:	29475904 	addi	r5,r5,7524
 800f090:	01820074 	movhi	r6,2049
 800f094:	31875904 	addi	r6,r6,7524
 800f098:	801080c0 	call	801080c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800f09c:	80103900 	call	8010390 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800f0a0:	01020074 	movhi	r4,2049
 800f0a4:	2100fb04 	addi	r4,r4,1004
 800f0a8:	8010f580 	call	8010f58 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800f0ac:	d126db17 	ldw	r4,-25748(gp)
 800f0b0:	d0e6dc17 	ldw	r3,-25744(gp)
 800f0b4:	d0a6dd17 	ldw	r2,-25740(gp)
 800f0b8:	180b883a 	mov	r5,r3
 800f0bc:	100d883a 	mov	r6,r2
 800f0c0:	80003780 	call	8000378 <main>
 800f0c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800f0c8:	01000044 	movi	r4,1
 800f0cc:	800eb5c0 	call	800eb5c <close>
  exit (result);
 800f0d0:	e13fff17 	ldw	r4,-4(fp)
 800f0d4:	8010f6c0 	call	8010f6c <exit>

0800f0d8 <__malloc_lock>:
 800f0d8:	defffe04 	addi	sp,sp,-8
 800f0dc:	df000115 	stw	fp,4(sp)
 800f0e0:	df000104 	addi	fp,sp,4
 800f0e4:	e13fff15 	stw	r4,-4(fp)
 800f0e8:	e037883a 	mov	sp,fp
 800f0ec:	df000017 	ldw	fp,0(sp)
 800f0f0:	dec00104 	addi	sp,sp,4
 800f0f4:	f800283a 	ret

0800f0f8 <__malloc_unlock>:
 800f0f8:	defffe04 	addi	sp,sp,-8
 800f0fc:	df000115 	stw	fp,4(sp)
 800f100:	df000104 	addi	fp,sp,4
 800f104:	e13fff15 	stw	r4,-4(fp)
 800f108:	e037883a 	mov	sp,fp
 800f10c:	df000017 	ldw	fp,0(sp)
 800f110:	dec00104 	addi	sp,sp,4
 800f114:	f800283a 	ret

0800f118 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f118:	defffe04 	addi	sp,sp,-8
 800f11c:	dfc00115 	stw	ra,4(sp)
 800f120:	df000015 	stw	fp,0(sp)
 800f124:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f128:	00820074 	movhi	r2,2049
 800f12c:	108e1a04 	addi	r2,r2,14440
 800f130:	10800017 	ldw	r2,0(r2)
 800f134:	10000526 	beq	r2,zero,800f14c <alt_get_errno+0x34>
 800f138:	00820074 	movhi	r2,2049
 800f13c:	108e1a04 	addi	r2,r2,14440
 800f140:	10800017 	ldw	r2,0(r2)
 800f144:	103ee83a 	callr	r2
 800f148:	00000206 	br	800f154 <alt_get_errno+0x3c>
 800f14c:	00820074 	movhi	r2,2049
 800f150:	1094e604 	addi	r2,r2,21400
}
 800f154:	e037883a 	mov	sp,fp
 800f158:	dfc00117 	ldw	ra,4(sp)
 800f15c:	df000017 	ldw	fp,0(sp)
 800f160:	dec00204 	addi	sp,sp,8
 800f164:	f800283a 	ret

0800f168 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800f168:	defff904 	addi	sp,sp,-28
 800f16c:	dfc00615 	stw	ra,24(sp)
 800f170:	df000515 	stw	fp,20(sp)
 800f174:	df000504 	addi	fp,sp,20
 800f178:	e13ffd15 	stw	r4,-12(fp)
 800f17c:	e17ffe15 	stw	r5,-8(fp)
 800f180:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f184:	e0bffd17 	ldw	r2,-12(fp)
 800f188:	10000816 	blt	r2,zero,800f1ac <read+0x44>
 800f18c:	e13ffd17 	ldw	r4,-12(fp)
 800f190:	01400304 	movi	r5,12
 800f194:	800c3600 	call	800c360 <__mulsi3>
 800f198:	1007883a 	mov	r3,r2
 800f19c:	00820074 	movhi	r2,2049
 800f1a0:	10899404 	addi	r2,r2,9808
 800f1a4:	1885883a 	add	r2,r3,r2
 800f1a8:	00000106 	br	800f1b0 <read+0x48>
 800f1ac:	0005883a 	mov	r2,zero
 800f1b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f1b4:	e0bffb17 	ldw	r2,-20(fp)
 800f1b8:	10002026 	beq	r2,zero,800f23c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f1bc:	e0bffb17 	ldw	r2,-20(fp)
 800f1c0:	10800217 	ldw	r2,8(r2)
 800f1c4:	108000cc 	andi	r2,r2,3
 800f1c8:	10800060 	cmpeqi	r2,r2,1
 800f1cc:	1000171e 	bne	r2,zero,800f22c <read+0xc4>
        (fd->dev->read))
 800f1d0:	e0bffb17 	ldw	r2,-20(fp)
 800f1d4:	10800017 	ldw	r2,0(r2)
 800f1d8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f1dc:	10001326 	beq	r2,zero,800f22c <read+0xc4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800f1e0:	e0bffb17 	ldw	r2,-20(fp)
 800f1e4:	10800017 	ldw	r2,0(r2)
 800f1e8:	10800517 	ldw	r2,20(r2)
 800f1ec:	e0ffff17 	ldw	r3,-4(fp)
 800f1f0:	e13ffb17 	ldw	r4,-20(fp)
 800f1f4:	e17ffe17 	ldw	r5,-8(fp)
 800f1f8:	180d883a 	mov	r6,r3
 800f1fc:	103ee83a 	callr	r2
 800f200:	e0bffc15 	stw	r2,-16(fp)
 800f204:	e0bffc17 	ldw	r2,-16(fp)
 800f208:	1000060e 	bge	r2,zero,800f224 <read+0xbc>
        {
          ALT_ERRNO = -rval;
 800f20c:	800f1180 	call	800f118 <alt_get_errno>
 800f210:	e0fffc17 	ldw	r3,-16(fp)
 800f214:	00c7c83a 	sub	r3,zero,r3
 800f218:	10c00015 	stw	r3,0(r2)
          return -1;
 800f21c:	00bfffc4 	movi	r2,-1
 800f220:	00000a06 	br	800f24c <read+0xe4>
        }
        return rval;
 800f224:	e0bffc17 	ldw	r2,-16(fp)
 800f228:	00000806 	br	800f24c <read+0xe4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800f22c:	800f1180 	call	800f118 <alt_get_errno>
 800f230:	00c00344 	movi	r3,13
 800f234:	10c00015 	stw	r3,0(r2)
 800f238:	00000306 	br	800f248 <read+0xe0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800f23c:	800f1180 	call	800f118 <alt_get_errno>
 800f240:	00c01444 	movi	r3,81
 800f244:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800f248:	00bfffc4 	movi	r2,-1
}
 800f24c:	e037883a 	mov	sp,fp
 800f250:	dfc00117 	ldw	ra,4(sp)
 800f254:	df000017 	ldw	fp,0(sp)
 800f258:	dec00204 	addi	sp,sp,8
 800f25c:	f800283a 	ret

0800f260 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800f260:	defffc04 	addi	sp,sp,-16
 800f264:	dfc00315 	stw	ra,12(sp)
 800f268:	df000215 	stw	fp,8(sp)
 800f26c:	dc000115 	stw	r16,4(sp)
 800f270:	df000204 	addi	fp,sp,8
 800f274:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800f278:	e0bffe17 	ldw	r2,-8(fp)
 800f27c:	108000d0 	cmplti	r2,r2,3
 800f280:	1000111e 	bne	r2,zero,800f2c8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800f284:	04020074 	movhi	r16,2049
 800f288:	84099404 	addi	r16,r16,9808
 800f28c:	e0bffe17 	ldw	r2,-8(fp)
 800f290:	1009883a 	mov	r4,r2
 800f294:	01400304 	movi	r5,12
 800f298:	800c3600 	call	800c360 <__mulsi3>
 800f29c:	8085883a 	add	r2,r16,r2
 800f2a0:	10800204 	addi	r2,r2,8
 800f2a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800f2a8:	04020074 	movhi	r16,2049
 800f2ac:	84099404 	addi	r16,r16,9808
 800f2b0:	e0bffe17 	ldw	r2,-8(fp)
 800f2b4:	1009883a 	mov	r4,r2
 800f2b8:	01400304 	movi	r5,12
 800f2bc:	800c3600 	call	800c360 <__mulsi3>
 800f2c0:	8085883a 	add	r2,r16,r2
 800f2c4:	10000015 	stw	zero,0(r2)
  }
}
 800f2c8:	e6ffff04 	addi	sp,fp,-4
 800f2cc:	dfc00217 	ldw	ra,8(sp)
 800f2d0:	df000117 	ldw	fp,4(sp)
 800f2d4:	dc000017 	ldw	r16,0(sp)
 800f2d8:	dec00304 	addi	sp,sp,12
 800f2dc:	f800283a 	ret

0800f2e0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800f2e0:	defff904 	addi	sp,sp,-28
 800f2e4:	df000615 	stw	fp,24(sp)
 800f2e8:	df000604 	addi	fp,sp,24
 800f2ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f2f0:	0005303a 	rdctl	r2,status
 800f2f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f2f8:	e0fffc17 	ldw	r3,-16(fp)
 800f2fc:	00bfff84 	movi	r2,-2
 800f300:	1884703a 	and	r2,r3,r2
 800f304:	1001703a 	wrctl	status,r2
  
  return context;
 800f308:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800f30c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800f310:	d0a00f17 	ldw	r2,-32708(gp)
 800f314:	10c000c4 	addi	r3,r2,3
 800f318:	00bfff04 	movi	r2,-4
 800f31c:	1884703a 	and	r2,r3,r2
 800f320:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800f324:	d0e00f17 	ldw	r3,-32708(gp)
 800f328:	e0bfff17 	ldw	r2,-4(fp)
 800f32c:	1885883a 	add	r2,r3,r2
 800f330:	00c40034 	movhi	r3,4096
 800f334:	18c00004 	addi	r3,r3,0
 800f338:	1880062e 	bgeu	r3,r2,800f354 <sbrk+0x74>
 800f33c:	e0bffa17 	ldw	r2,-24(fp)
 800f340:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f344:	e0bffd17 	ldw	r2,-12(fp)
 800f348:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800f34c:	00bfffc4 	movi	r2,-1
 800f350:	00000b06 	br	800f380 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800f354:	d0a00f17 	ldw	r2,-32708(gp)
 800f358:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800f35c:	d0e00f17 	ldw	r3,-32708(gp)
 800f360:	e0bfff17 	ldw	r2,-4(fp)
 800f364:	1885883a 	add	r2,r3,r2
 800f368:	d0a00f15 	stw	r2,-32708(gp)
 800f36c:	e0bffa17 	ldw	r2,-24(fp)
 800f370:	e0bffe15 	stw	r2,-8(fp)
 800f374:	e0bffe17 	ldw	r2,-8(fp)
 800f378:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800f37c:	e0bffb17 	ldw	r2,-20(fp)
} 
 800f380:	e037883a 	mov	sp,fp
 800f384:	df000017 	ldw	fp,0(sp)
 800f388:	dec00104 	addi	sp,sp,4
 800f38c:	f800283a 	ret

0800f390 <usleep>:
 800f390:	defffd04 	addi	sp,sp,-12
 800f394:	dfc00215 	stw	ra,8(sp)
 800f398:	df000115 	stw	fp,4(sp)
 800f39c:	df000104 	addi	fp,sp,4
 800f3a0:	e13fff15 	stw	r4,-4(fp)
 800f3a4:	e13fff17 	ldw	r4,-4(fp)
 800f3a8:	80101300 	call	8010130 <alt_busy_sleep>
 800f3ac:	e037883a 	mov	sp,fp
 800f3b0:	dfc00117 	ldw	ra,4(sp)
 800f3b4:	df000017 	ldw	fp,0(sp)
 800f3b8:	dec00204 	addi	sp,sp,8
 800f3bc:	f800283a 	ret

0800f3c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f3c0:	defffe04 	addi	sp,sp,-8
 800f3c4:	dfc00115 	stw	ra,4(sp)
 800f3c8:	df000015 	stw	fp,0(sp)
 800f3cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f3d0:	00820074 	movhi	r2,2049
 800f3d4:	108e1a04 	addi	r2,r2,14440
 800f3d8:	10800017 	ldw	r2,0(r2)
 800f3dc:	10000526 	beq	r2,zero,800f3f4 <alt_get_errno+0x34>
 800f3e0:	00820074 	movhi	r2,2049
 800f3e4:	108e1a04 	addi	r2,r2,14440
 800f3e8:	10800017 	ldw	r2,0(r2)
 800f3ec:	103ee83a 	callr	r2
 800f3f0:	00000206 	br	800f3fc <alt_get_errno+0x3c>
 800f3f4:	00820074 	movhi	r2,2049
 800f3f8:	1094e604 	addi	r2,r2,21400
}
 800f3fc:	e037883a 	mov	sp,fp
 800f400:	dfc00117 	ldw	ra,4(sp)
 800f404:	df000017 	ldw	fp,0(sp)
 800f408:	dec00204 	addi	sp,sp,8
 800f40c:	f800283a 	ret

0800f410 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800f410:	defff904 	addi	sp,sp,-28
 800f414:	dfc00615 	stw	ra,24(sp)
 800f418:	df000515 	stw	fp,20(sp)
 800f41c:	df000504 	addi	fp,sp,20
 800f420:	e13ffd15 	stw	r4,-12(fp)
 800f424:	e17ffe15 	stw	r5,-8(fp)
 800f428:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f42c:	e0bffd17 	ldw	r2,-12(fp)
 800f430:	10000816 	blt	r2,zero,800f454 <write+0x44>
 800f434:	e13ffd17 	ldw	r4,-12(fp)
 800f438:	01400304 	movi	r5,12
 800f43c:	800c3600 	call	800c360 <__mulsi3>
 800f440:	1007883a 	mov	r3,r2
 800f444:	00820074 	movhi	r2,2049
 800f448:	10899404 	addi	r2,r2,9808
 800f44c:	1885883a 	add	r2,r3,r2
 800f450:	00000106 	br	800f458 <write+0x48>
 800f454:	0005883a 	mov	r2,zero
 800f458:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f45c:	e0bffb17 	ldw	r2,-20(fp)
 800f460:	10001f26 	beq	r2,zero,800f4e0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800f464:	e0bffb17 	ldw	r2,-20(fp)
 800f468:	10800217 	ldw	r2,8(r2)
 800f46c:	108000cc 	andi	r2,r2,3
 800f470:	10001726 	beq	r2,zero,800f4d0 <write+0xc0>
 800f474:	e0bffb17 	ldw	r2,-20(fp)
 800f478:	10800017 	ldw	r2,0(r2)
 800f47c:	10800617 	ldw	r2,24(r2)
 800f480:	10001326 	beq	r2,zero,800f4d0 <write+0xc0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800f484:	e0bffb17 	ldw	r2,-20(fp)
 800f488:	10800017 	ldw	r2,0(r2)
 800f48c:	10800617 	ldw	r2,24(r2)
 800f490:	e0ffff17 	ldw	r3,-4(fp)
 800f494:	e13ffb17 	ldw	r4,-20(fp)
 800f498:	e17ffe17 	ldw	r5,-8(fp)
 800f49c:	180d883a 	mov	r6,r3
 800f4a0:	103ee83a 	callr	r2
 800f4a4:	e0bffc15 	stw	r2,-16(fp)
 800f4a8:	e0bffc17 	ldw	r2,-16(fp)
 800f4ac:	1000060e 	bge	r2,zero,800f4c8 <write+0xb8>
      {
        ALT_ERRNO = -rval;
 800f4b0:	800f3c00 	call	800f3c0 <alt_get_errno>
 800f4b4:	e0fffc17 	ldw	r3,-16(fp)
 800f4b8:	00c7c83a 	sub	r3,zero,r3
 800f4bc:	10c00015 	stw	r3,0(r2)
        return -1;
 800f4c0:	00bfffc4 	movi	r2,-1
 800f4c4:	00000a06 	br	800f4f0 <write+0xe0>
      }
      return rval;
 800f4c8:	e0bffc17 	ldw	r2,-16(fp)
 800f4cc:	00000806 	br	800f4f0 <write+0xe0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800f4d0:	800f3c00 	call	800f3c0 <alt_get_errno>
 800f4d4:	00c00344 	movi	r3,13
 800f4d8:	10c00015 	stw	r3,0(r2)
 800f4dc:	00000306 	br	800f4ec <write+0xdc>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800f4e0:	800f3c00 	call	800f3c0 <alt_get_errno>
 800f4e4:	00c01444 	movi	r3,81
 800f4e8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800f4ec:	00bfffc4 	movi	r2,-1
}
 800f4f0:	e037883a 	mov	sp,fp
 800f4f4:	dfc00117 	ldw	ra,4(sp)
 800f4f8:	df000017 	ldw	fp,0(sp)
 800f4fc:	dec00204 	addi	sp,sp,8
 800f500:	f800283a 	ret

0800f504 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800f504:	defffd04 	addi	sp,sp,-12
 800f508:	dfc00215 	stw	ra,8(sp)
 800f50c:	df000115 	stw	fp,4(sp)
 800f510:	df000104 	addi	fp,sp,4
 800f514:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800f518:	e13fff17 	ldw	r4,-4(fp)
 800f51c:	01420074 	movhi	r5,2049
 800f520:	294e1704 	addi	r5,r5,14428
 800f524:	80102f00 	call	80102f0 <alt_dev_llist_insert>
}
 800f528:	e037883a 	mov	sp,fp
 800f52c:	dfc00117 	ldw	ra,4(sp)
 800f530:	df000017 	ldw	fp,0(sp)
 800f534:	dec00204 	addi	sp,sp,8
 800f538:	f800283a 	ret

0800f53c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800f53c:	defffd04 	addi	sp,sp,-12
 800f540:	dfc00215 	stw	ra,8(sp)
 800f544:	df000115 	stw	fp,4(sp)
 800f548:	df000104 	addi	fp,sp,4
 800f54c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 800f550:	8010cc00 	call	8010cc0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800f554:	00800044 	movi	r2,1
 800f558:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800f55c:	e037883a 	mov	sp,fp
 800f560:	dfc00117 	ldw	ra,4(sp)
 800f564:	df000017 	ldw	fp,0(sp)
 800f568:	dec00204 	addi	sp,sp,8
 800f56c:	f800283a 	ret

0800f570 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800f570:	defffe04 	addi	sp,sp,-8
 800f574:	dfc00115 	stw	ra,4(sp)
 800f578:	df000015 	stw	fp,0(sp)
 800f57c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 800f580:	01020074 	movhi	r4,2049
 800f584:	2109fe04 	addi	r4,r4,10232
 800f588:	000b883a 	mov	r5,zero
 800f58c:	01800144 	movi	r6,5
 800f590:	800f71c0 	call	800f71c <altera_avalon_jtag_uart_init>
 800f594:	01020074 	movhi	r4,2049
 800f598:	2109f404 	addi	r4,r4,10192
 800f59c:	800f5040 	call	800f504 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800f5a0:	0001883a 	nop
}
 800f5a4:	e037883a 	mov	sp,fp
 800f5a8:	dfc00117 	ldw	ra,4(sp)
 800f5ac:	df000017 	ldw	fp,0(sp)
 800f5b0:	dec00204 	addi	sp,sp,8
 800f5b4:	f800283a 	ret

0800f5b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800f5b8:	defffa04 	addi	sp,sp,-24
 800f5bc:	dfc00515 	stw	ra,20(sp)
 800f5c0:	df000415 	stw	fp,16(sp)
 800f5c4:	df000404 	addi	fp,sp,16
 800f5c8:	e13ffd15 	stw	r4,-12(fp)
 800f5cc:	e17ffe15 	stw	r5,-8(fp)
 800f5d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f5d4:	e0bffd17 	ldw	r2,-12(fp)
 800f5d8:	10800017 	ldw	r2,0(r2)
 800f5dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800f5e0:	e0bffc17 	ldw	r2,-16(fp)
 800f5e4:	10c00a04 	addi	r3,r2,40
 800f5e8:	e0bffd17 	ldw	r2,-12(fp)
 800f5ec:	10800217 	ldw	r2,8(r2)
 800f5f0:	1809883a 	mov	r4,r3
 800f5f4:	e17ffe17 	ldw	r5,-8(fp)
 800f5f8:	e1bfff17 	ldw	r6,-4(fp)
 800f5fc:	100f883a 	mov	r7,r2
 800f600:	800fbd00 	call	800fbd0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800f604:	e037883a 	mov	sp,fp
 800f608:	dfc00117 	ldw	ra,4(sp)
 800f60c:	df000017 	ldw	fp,0(sp)
 800f610:	dec00204 	addi	sp,sp,8
 800f614:	f800283a 	ret

0800f618 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800f618:	defffa04 	addi	sp,sp,-24
 800f61c:	dfc00515 	stw	ra,20(sp)
 800f620:	df000415 	stw	fp,16(sp)
 800f624:	df000404 	addi	fp,sp,16
 800f628:	e13ffd15 	stw	r4,-12(fp)
 800f62c:	e17ffe15 	stw	r5,-8(fp)
 800f630:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f634:	e0bffd17 	ldw	r2,-12(fp)
 800f638:	10800017 	ldw	r2,0(r2)
 800f63c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800f640:	e0bffc17 	ldw	r2,-16(fp)
 800f644:	10c00a04 	addi	r3,r2,40
 800f648:	e0bffd17 	ldw	r2,-12(fp)
 800f64c:	10800217 	ldw	r2,8(r2)
 800f650:	1809883a 	mov	r4,r3
 800f654:	e17ffe17 	ldw	r5,-8(fp)
 800f658:	e1bfff17 	ldw	r6,-4(fp)
 800f65c:	100f883a 	mov	r7,r2
 800f660:	800fdd80 	call	800fdd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800f664:	e037883a 	mov	sp,fp
 800f668:	dfc00117 	ldw	ra,4(sp)
 800f66c:	df000017 	ldw	fp,0(sp)
 800f670:	dec00204 	addi	sp,sp,8
 800f674:	f800283a 	ret

0800f678 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800f678:	defffc04 	addi	sp,sp,-16
 800f67c:	dfc00315 	stw	ra,12(sp)
 800f680:	df000215 	stw	fp,8(sp)
 800f684:	df000204 	addi	fp,sp,8
 800f688:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f68c:	e0bfff17 	ldw	r2,-4(fp)
 800f690:	10800017 	ldw	r2,0(r2)
 800f694:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800f698:	e0bffe17 	ldw	r2,-8(fp)
 800f69c:	10c00a04 	addi	r3,r2,40
 800f6a0:	e0bfff17 	ldw	r2,-4(fp)
 800f6a4:	10800217 	ldw	r2,8(r2)
 800f6a8:	1809883a 	mov	r4,r3
 800f6ac:	100b883a 	mov	r5,r2
 800f6b0:	800fa7c0 	call	800fa7c <altera_avalon_jtag_uart_close>
}
 800f6b4:	e037883a 	mov	sp,fp
 800f6b8:	dfc00117 	ldw	ra,4(sp)
 800f6bc:	df000017 	ldw	fp,0(sp)
 800f6c0:	dec00204 	addi	sp,sp,8
 800f6c4:	f800283a 	ret

0800f6c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800f6c8:	defffa04 	addi	sp,sp,-24
 800f6cc:	dfc00515 	stw	ra,20(sp)
 800f6d0:	df000415 	stw	fp,16(sp)
 800f6d4:	df000404 	addi	fp,sp,16
 800f6d8:	e13ffd15 	stw	r4,-12(fp)
 800f6dc:	e17ffe15 	stw	r5,-8(fp)
 800f6e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800f6e4:	e0bffd17 	ldw	r2,-12(fp)
 800f6e8:	10800017 	ldw	r2,0(r2)
 800f6ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800f6f0:	e0bffc17 	ldw	r2,-16(fp)
 800f6f4:	10800a04 	addi	r2,r2,40
 800f6f8:	1009883a 	mov	r4,r2
 800f6fc:	e17ffe17 	ldw	r5,-8(fp)
 800f700:	e1bfff17 	ldw	r6,-4(fp)
 800f704:	800fae40 	call	800fae4 <altera_avalon_jtag_uart_ioctl>
}
 800f708:	e037883a 	mov	sp,fp
 800f70c:	dfc00117 	ldw	ra,4(sp)
 800f710:	df000017 	ldw	fp,0(sp)
 800f714:	dec00204 	addi	sp,sp,8
 800f718:	f800283a 	ret

0800f71c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800f71c:	defffa04 	addi	sp,sp,-24
 800f720:	dfc00515 	stw	ra,20(sp)
 800f724:	df000415 	stw	fp,16(sp)
 800f728:	df000404 	addi	fp,sp,16
 800f72c:	e13ffd15 	stw	r4,-12(fp)
 800f730:	e17ffe15 	stw	r5,-8(fp)
 800f734:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f738:	e0bffd17 	ldw	r2,-12(fp)
 800f73c:	00c00044 	movi	r3,1
 800f740:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800f744:	e0bffd17 	ldw	r2,-12(fp)
 800f748:	10800017 	ldw	r2,0(r2)
 800f74c:	10800104 	addi	r2,r2,4
 800f750:	e0fffd17 	ldw	r3,-12(fp)
 800f754:	18c00817 	ldw	r3,32(r3)
 800f758:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800f75c:	e0fffe17 	ldw	r3,-8(fp)
 800f760:	e0bfff17 	ldw	r2,-4(fp)
 800f764:	d8000015 	stw	zero,0(sp)
 800f768:	1809883a 	mov	r4,r3
 800f76c:	100b883a 	mov	r5,r2
 800f770:	01820074 	movhi	r6,2049
 800f774:	31bdf704 	addi	r6,r6,-2084
 800f778:	e1fffd17 	ldw	r7,-12(fp)
 800f77c:	80104640 	call	8010464 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800f780:	e0bffd17 	ldw	r2,-12(fp)
 800f784:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800f788:	e0bffd17 	ldw	r2,-12(fp)
 800f78c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800f790:	00820074 	movhi	r2,2049
 800f794:	1094eb04 	addi	r2,r2,21420
 800f798:	10800017 	ldw	r2,0(r2)
 800f79c:	1809883a 	mov	r4,r3
 800f7a0:	100b883a 	mov	r5,r2
 800f7a4:	01820074 	movhi	r6,2049
 800f7a8:	31be7604 	addi	r6,r6,-1576
 800f7ac:	e1fffd17 	ldw	r7,-12(fp)
 800f7b0:	800fff00 	call	800fff0 <alt_alarm_start>
 800f7b4:	1000040e 	bge	r2,zero,800f7c8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800f7b8:	e0bffd17 	ldw	r2,-12(fp)
 800f7bc:	00e00034 	movhi	r3,32768
 800f7c0:	18ffffc4 	addi	r3,r3,-1
 800f7c4:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800f7c8:	e037883a 	mov	sp,fp
 800f7cc:	dfc00117 	ldw	ra,4(sp)
 800f7d0:	df000017 	ldw	fp,0(sp)
 800f7d4:	dec00204 	addi	sp,sp,8
 800f7d8:	f800283a 	ret

0800f7dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800f7dc:	defff804 	addi	sp,sp,-32
 800f7e0:	df000715 	stw	fp,28(sp)
 800f7e4:	df000704 	addi	fp,sp,28
 800f7e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800f7ec:	e0bfff17 	ldw	r2,-4(fp)
 800f7f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800f7f4:	e0bffb17 	ldw	r2,-20(fp)
 800f7f8:	10800017 	ldw	r2,0(r2)
 800f7fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f800:	e0bffc17 	ldw	r2,-16(fp)
 800f804:	10800104 	addi	r2,r2,4
 800f808:	10800037 	ldwio	r2,0(r2)
 800f80c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800f810:	e0bffd17 	ldw	r2,-12(fp)
 800f814:	1080c00c 	andi	r2,r2,768
 800f818:	1000011e 	bne	r2,zero,800f820 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800f81c:	00006a06 	br	800f9c8 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800f820:	e0bffd17 	ldw	r2,-12(fp)
 800f824:	1080400c 	andi	r2,r2,256
 800f828:	10003226 	beq	r2,zero,800f8f4 <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800f82c:	00800074 	movhi	r2,1
 800f830:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f834:	e0bffb17 	ldw	r2,-20(fp)
 800f838:	10800a17 	ldw	r2,40(r2)
 800f83c:	10800044 	addi	r2,r2,1
 800f840:	1081ffcc 	andi	r2,r2,2047
 800f844:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800f848:	e0bffb17 	ldw	r2,-20(fp)
 800f84c:	10c00b17 	ldw	r3,44(r2)
 800f850:	e0bffe17 	ldw	r2,-8(fp)
 800f854:	1880011e 	bne	r3,r2,800f85c <altera_avalon_jtag_uart_irq+0x80>
          break;
 800f858:	00001506 	br	800f8b0 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800f85c:	e0bffc17 	ldw	r2,-16(fp)
 800f860:	10800037 	ldwio	r2,0(r2)
 800f864:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800f868:	e0bff917 	ldw	r2,-28(fp)
 800f86c:	10a0000c 	andi	r2,r2,32768
 800f870:	1000011e 	bne	r2,zero,800f878 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800f874:	00000e06 	br	800f8b0 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800f878:	e0bffb17 	ldw	r2,-20(fp)
 800f87c:	10800a17 	ldw	r2,40(r2)
 800f880:	e0fff917 	ldw	r3,-28(fp)
 800f884:	e13ffb17 	ldw	r4,-20(fp)
 800f888:	2085883a 	add	r2,r4,r2
 800f88c:	10800e04 	addi	r2,r2,56
 800f890:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f894:	e0bffb17 	ldw	r2,-20(fp)
 800f898:	10800a17 	ldw	r2,40(r2)
 800f89c:	10800044 	addi	r2,r2,1
 800f8a0:	10c1ffcc 	andi	r3,r2,2047
 800f8a4:	e0bffb17 	ldw	r2,-20(fp)
 800f8a8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800f8ac:	003fe106 	br	800f834 <__alt_data_end+0xf800f834>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800f8b0:	e0bff917 	ldw	r2,-28(fp)
 800f8b4:	10bfffec 	andhi	r2,r2,65535
 800f8b8:	10000e26 	beq	r2,zero,800f8f4 <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f8bc:	e0bffb17 	ldw	r2,-20(fp)
 800f8c0:	10c00817 	ldw	r3,32(r2)
 800f8c4:	00bfff84 	movi	r2,-2
 800f8c8:	1886703a 	and	r3,r3,r2
 800f8cc:	e0bffb17 	ldw	r2,-20(fp)
 800f8d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800f8d4:	e0bffc17 	ldw	r2,-16(fp)
 800f8d8:	10800104 	addi	r2,r2,4
 800f8dc:	e0fffb17 	ldw	r3,-20(fp)
 800f8e0:	18c00817 	ldw	r3,32(r3)
 800f8e4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f8e8:	e0bffc17 	ldw	r2,-16(fp)
 800f8ec:	10800104 	addi	r2,r2,4
 800f8f0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800f8f4:	e0bffd17 	ldw	r2,-12(fp)
 800f8f8:	1080800c 	andi	r2,r2,512
 800f8fc:	10003126 	beq	r2,zero,800f9c4 <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800f900:	e0bffd17 	ldw	r2,-12(fp)
 800f904:	1004d43a 	srli	r2,r2,16
 800f908:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f90c:	00001406 	br	800f960 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800f910:	e0bffc17 	ldw	r2,-16(fp)
 800f914:	e0fffb17 	ldw	r3,-20(fp)
 800f918:	18c00d17 	ldw	r3,52(r3)
 800f91c:	e13ffb17 	ldw	r4,-20(fp)
 800f920:	20c7883a 	add	r3,r4,r3
 800f924:	18c20e04 	addi	r3,r3,2104
 800f928:	18c00003 	ldbu	r3,0(r3)
 800f92c:	18c03fcc 	andi	r3,r3,255
 800f930:	18c0201c 	xori	r3,r3,128
 800f934:	18ffe004 	addi	r3,r3,-128
 800f938:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f93c:	e0bffb17 	ldw	r2,-20(fp)
 800f940:	10800d17 	ldw	r2,52(r2)
 800f944:	10800044 	addi	r2,r2,1
 800f948:	10c1ffcc 	andi	r3,r2,2047
 800f94c:	e0bffb17 	ldw	r2,-20(fp)
 800f950:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800f954:	e0bffa17 	ldw	r2,-24(fp)
 800f958:	10bfffc4 	addi	r2,r2,-1
 800f95c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f960:	e0bffa17 	ldw	r2,-24(fp)
 800f964:	10000526 	beq	r2,zero,800f97c <altera_avalon_jtag_uart_irq+0x1a0>
 800f968:	e0bffb17 	ldw	r2,-20(fp)
 800f96c:	10c00d17 	ldw	r3,52(r2)
 800f970:	e0bffb17 	ldw	r2,-20(fp)
 800f974:	10800c17 	ldw	r2,48(r2)
 800f978:	18bfe51e 	bne	r3,r2,800f910 <__alt_data_end+0xf800f910>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800f97c:	e0bffa17 	ldw	r2,-24(fp)
 800f980:	10001026 	beq	r2,zero,800f9c4 <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f984:	e0bffb17 	ldw	r2,-20(fp)
 800f988:	10c00817 	ldw	r3,32(r2)
 800f98c:	00bfff44 	movi	r2,-3
 800f990:	1886703a 	and	r3,r3,r2
 800f994:	e0bffb17 	ldw	r2,-20(fp)
 800f998:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f99c:	e0bffb17 	ldw	r2,-20(fp)
 800f9a0:	10800017 	ldw	r2,0(r2)
 800f9a4:	10800104 	addi	r2,r2,4
 800f9a8:	e0fffb17 	ldw	r3,-20(fp)
 800f9ac:	18c00817 	ldw	r3,32(r3)
 800f9b0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f9b4:	e0bffc17 	ldw	r2,-16(fp)
 800f9b8:	10800104 	addi	r2,r2,4
 800f9bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800f9c0:	003f8f06 	br	800f800 <__alt_data_end+0xf800f800>
 800f9c4:	003f8e06 	br	800f800 <__alt_data_end+0xf800f800>
}
 800f9c8:	e037883a 	mov	sp,fp
 800f9cc:	df000017 	ldw	fp,0(sp)
 800f9d0:	dec00104 	addi	sp,sp,4
 800f9d4:	f800283a 	ret

0800f9d8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800f9d8:	defff804 	addi	sp,sp,-32
 800f9dc:	df000715 	stw	fp,28(sp)
 800f9e0:	df000704 	addi	fp,sp,28
 800f9e4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800f9e8:	e0bffb17 	ldw	r2,-20(fp)
 800f9ec:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800f9f0:	e0bff917 	ldw	r2,-28(fp)
 800f9f4:	10800017 	ldw	r2,0(r2)
 800f9f8:	10800104 	addi	r2,r2,4
 800f9fc:	10800037 	ldwio	r2,0(r2)
 800fa00:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800fa04:	e0bffa17 	ldw	r2,-24(fp)
 800fa08:	1081000c 	andi	r2,r2,1024
 800fa0c:	10000a26 	beq	r2,zero,800fa38 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800fa10:	e0bff917 	ldw	r2,-28(fp)
 800fa14:	10800017 	ldw	r2,0(r2)
 800fa18:	10800104 	addi	r2,r2,4
 800fa1c:	e0fff917 	ldw	r3,-28(fp)
 800fa20:	18c00817 	ldw	r3,32(r3)
 800fa24:	18c10014 	ori	r3,r3,1024
 800fa28:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 800fa2c:	e0bff917 	ldw	r2,-28(fp)
 800fa30:	10000915 	stw	zero,36(r2)
 800fa34:	00000a06 	br	800fa60 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800fa38:	e0bff917 	ldw	r2,-28(fp)
 800fa3c:	10800917 	ldw	r2,36(r2)
 800fa40:	00e00034 	movhi	r3,32768
 800fa44:	18ffff04 	addi	r3,r3,-4
 800fa48:	18800536 	bltu	r3,r2,800fa60 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 800fa4c:	e0bff917 	ldw	r2,-28(fp)
 800fa50:	10800917 	ldw	r2,36(r2)
 800fa54:	10c00044 	addi	r3,r2,1
 800fa58:	e0bff917 	ldw	r2,-28(fp)
 800fa5c:	10c00915 	stw	r3,36(r2)
 800fa60:	00820074 	movhi	r2,2049
 800fa64:	1094eb04 	addi	r2,r2,21420
 800fa68:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800fa6c:	e037883a 	mov	sp,fp
 800fa70:	df000017 	ldw	fp,0(sp)
 800fa74:	dec00104 	addi	sp,sp,4
 800fa78:	f800283a 	ret

0800fa7c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800fa7c:	defffd04 	addi	sp,sp,-12
 800fa80:	df000215 	stw	fp,8(sp)
 800fa84:	df000204 	addi	fp,sp,8
 800fa88:	e13ffe15 	stw	r4,-8(fp)
 800fa8c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fa90:	00000506 	br	800faa8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800fa94:	e0bfff17 	ldw	r2,-4(fp)
 800fa98:	1090000c 	andi	r2,r2,16384
 800fa9c:	10000226 	beq	r2,zero,800faa8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800faa0:	00bffd44 	movi	r2,-11
 800faa4:	00000b06 	br	800fad4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800faa8:	e0bffe17 	ldw	r2,-8(fp)
 800faac:	10c00d17 	ldw	r3,52(r2)
 800fab0:	e0bffe17 	ldw	r2,-8(fp)
 800fab4:	10800c17 	ldw	r2,48(r2)
 800fab8:	18800526 	beq	r3,r2,800fad0 <altera_avalon_jtag_uart_close+0x54>
 800fabc:	e0bffe17 	ldw	r2,-8(fp)
 800fac0:	10c00917 	ldw	r3,36(r2)
 800fac4:	e0bffe17 	ldw	r2,-8(fp)
 800fac8:	10800117 	ldw	r2,4(r2)
 800facc:	18bff136 	bltu	r3,r2,800fa94 <__alt_data_end+0xf800fa94>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800fad0:	0005883a 	mov	r2,zero
}
 800fad4:	e037883a 	mov	sp,fp
 800fad8:	df000017 	ldw	fp,0(sp)
 800fadc:	dec00104 	addi	sp,sp,4
 800fae0:	f800283a 	ret

0800fae4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800fae4:	defffa04 	addi	sp,sp,-24
 800fae8:	df000515 	stw	fp,20(sp)
 800faec:	df000504 	addi	fp,sp,20
 800faf0:	e13ffd15 	stw	r4,-12(fp)
 800faf4:	e17ffe15 	stw	r5,-8(fp)
 800faf8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800fafc:	00bff9c4 	movi	r2,-25
 800fb00:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800fb04:	e0bffe17 	ldw	r2,-8(fp)
 800fb08:	10da8060 	cmpeqi	r3,r2,27137
 800fb0c:	1800031e 	bne	r3,zero,800fb1c <altera_avalon_jtag_uart_ioctl+0x38>
 800fb10:	109a80a0 	cmpeqi	r2,r2,27138
 800fb14:	1000191e 	bne	r2,zero,800fb7c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800fb18:	00002806 	br	800fbbc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800fb1c:	e0bffd17 	ldw	r2,-12(fp)
 800fb20:	10c00117 	ldw	r3,4(r2)
 800fb24:	00a00034 	movhi	r2,32768
 800fb28:	10bfffc4 	addi	r2,r2,-1
 800fb2c:	18801226 	beq	r3,r2,800fb78 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800fb30:	e0bfff17 	ldw	r2,-4(fp)
 800fb34:	10800017 	ldw	r2,0(r2)
 800fb38:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800fb3c:	e0bffc17 	ldw	r2,-16(fp)
 800fb40:	10800090 	cmplti	r2,r2,2
 800fb44:	1000061e 	bne	r2,zero,800fb60 <altera_avalon_jtag_uart_ioctl+0x7c>
 800fb48:	e0fffc17 	ldw	r3,-16(fp)
 800fb4c:	00a00034 	movhi	r2,32768
 800fb50:	10bfffc4 	addi	r2,r2,-1
 800fb54:	18800226 	beq	r3,r2,800fb60 <altera_avalon_jtag_uart_ioctl+0x7c>
 800fb58:	e0bffc17 	ldw	r2,-16(fp)
 800fb5c:	00000206 	br	800fb68 <altera_avalon_jtag_uart_ioctl+0x84>
 800fb60:	00a00034 	movhi	r2,32768
 800fb64:	10bfff84 	addi	r2,r2,-2
 800fb68:	e0fffd17 	ldw	r3,-12(fp)
 800fb6c:	18800115 	stw	r2,4(r3)
      rc = 0;
 800fb70:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fb74:	00001106 	br	800fbbc <altera_avalon_jtag_uart_ioctl+0xd8>
 800fb78:	00001006 	br	800fbbc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800fb7c:	e0bffd17 	ldw	r2,-12(fp)
 800fb80:	10c00117 	ldw	r3,4(r2)
 800fb84:	00a00034 	movhi	r2,32768
 800fb88:	10bfffc4 	addi	r2,r2,-1
 800fb8c:	18800a26 	beq	r3,r2,800fbb8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800fb90:	e0bffd17 	ldw	r2,-12(fp)
 800fb94:	10c00917 	ldw	r3,36(r2)
 800fb98:	e0bffd17 	ldw	r2,-12(fp)
 800fb9c:	10800117 	ldw	r2,4(r2)
 800fba0:	1885803a 	cmpltu	r2,r3,r2
 800fba4:	10c03fcc 	andi	r3,r2,255
 800fba8:	e0bfff17 	ldw	r2,-4(fp)
 800fbac:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800fbb0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fbb4:	00000006 	br	800fbb8 <altera_avalon_jtag_uart_ioctl+0xd4>
 800fbb8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800fbbc:	e0bffb17 	ldw	r2,-20(fp)
}
 800fbc0:	e037883a 	mov	sp,fp
 800fbc4:	df000017 	ldw	fp,0(sp)
 800fbc8:	dec00104 	addi	sp,sp,4
 800fbcc:	f800283a 	ret

0800fbd0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800fbd0:	defff304 	addi	sp,sp,-52
 800fbd4:	dfc00c15 	stw	ra,48(sp)
 800fbd8:	df000b15 	stw	fp,44(sp)
 800fbdc:	df000b04 	addi	fp,sp,44
 800fbe0:	e13ffc15 	stw	r4,-16(fp)
 800fbe4:	e17ffd15 	stw	r5,-12(fp)
 800fbe8:	e1bffe15 	stw	r6,-8(fp)
 800fbec:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800fbf0:	e0bffd17 	ldw	r2,-12(fp)
 800fbf4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fbf8:	00004906 	br	800fd20 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800fbfc:	e0bffc17 	ldw	r2,-16(fp)
 800fc00:	10800a17 	ldw	r2,40(r2)
 800fc04:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800fc08:	e0bffc17 	ldw	r2,-16(fp)
 800fc0c:	10800b17 	ldw	r2,44(r2)
 800fc10:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800fc14:	e0fff717 	ldw	r3,-36(fp)
 800fc18:	e0bff817 	ldw	r2,-32(fp)
 800fc1c:	18800536 	bltu	r3,r2,800fc34 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800fc20:	e0fff717 	ldw	r3,-36(fp)
 800fc24:	e0bff817 	ldw	r2,-32(fp)
 800fc28:	1885c83a 	sub	r2,r3,r2
 800fc2c:	e0bff615 	stw	r2,-40(fp)
 800fc30:	00000406 	br	800fc44 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800fc34:	00c20004 	movi	r3,2048
 800fc38:	e0bff817 	ldw	r2,-32(fp)
 800fc3c:	1885c83a 	sub	r2,r3,r2
 800fc40:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fc44:	e0bff617 	ldw	r2,-40(fp)
 800fc48:	1000011e 	bne	r2,zero,800fc50 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800fc4c:	00001d06 	br	800fcc4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800fc50:	e0fffe17 	ldw	r3,-8(fp)
 800fc54:	e0bff617 	ldw	r2,-40(fp)
 800fc58:	1880022e 	bgeu	r3,r2,800fc64 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800fc5c:	e0bffe17 	ldw	r2,-8(fp)
 800fc60:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800fc64:	e0bff817 	ldw	r2,-32(fp)
 800fc68:	10800e04 	addi	r2,r2,56
 800fc6c:	e0fffc17 	ldw	r3,-16(fp)
 800fc70:	1885883a 	add	r2,r3,r2
 800fc74:	e13ff517 	ldw	r4,-44(fp)
 800fc78:	100b883a 	mov	r5,r2
 800fc7c:	e1bff617 	ldw	r6,-40(fp)
 800fc80:	8007a900 	call	8007a90 <memcpy>
      ptr   += n;
 800fc84:	e0fff517 	ldw	r3,-44(fp)
 800fc88:	e0bff617 	ldw	r2,-40(fp)
 800fc8c:	1885883a 	add	r2,r3,r2
 800fc90:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800fc94:	e0fffe17 	ldw	r3,-8(fp)
 800fc98:	e0bff617 	ldw	r2,-40(fp)
 800fc9c:	1885c83a 	sub	r2,r3,r2
 800fca0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fca4:	e0fff817 	ldw	r3,-32(fp)
 800fca8:	e0bff617 	ldw	r2,-40(fp)
 800fcac:	1885883a 	add	r2,r3,r2
 800fcb0:	10c1ffcc 	andi	r3,r2,2047
 800fcb4:	e0bffc17 	ldw	r2,-16(fp)
 800fcb8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800fcbc:	e0bffe17 	ldw	r2,-8(fp)
 800fcc0:	00bfce16 	blt	zero,r2,800fbfc <__alt_data_end+0xf800fbfc>

    /* If we read any data then return it */
    if (ptr != buffer)
 800fcc4:	e0fff517 	ldw	r3,-44(fp)
 800fcc8:	e0bffd17 	ldw	r2,-12(fp)
 800fccc:	18800126 	beq	r3,r2,800fcd4 <altera_avalon_jtag_uart_read+0x104>
      break;
 800fcd0:	00001506 	br	800fd28 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800fcd4:	e0bfff17 	ldw	r2,-4(fp)
 800fcd8:	1090000c 	andi	r2,r2,16384
 800fcdc:	10000126 	beq	r2,zero,800fce4 <altera_avalon_jtag_uart_read+0x114>
      break;
 800fce0:	00001106 	br	800fd28 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800fce4:	0001883a 	nop
 800fce8:	e0bffc17 	ldw	r2,-16(fp)
 800fcec:	10c00a17 	ldw	r3,40(r2)
 800fcf0:	e0bff717 	ldw	r2,-36(fp)
 800fcf4:	1880051e 	bne	r3,r2,800fd0c <altera_avalon_jtag_uart_read+0x13c>
 800fcf8:	e0bffc17 	ldw	r2,-16(fp)
 800fcfc:	10c00917 	ldw	r3,36(r2)
 800fd00:	e0bffc17 	ldw	r2,-16(fp)
 800fd04:	10800117 	ldw	r2,4(r2)
 800fd08:	18bff736 	bltu	r3,r2,800fce8 <__alt_data_end+0xf800fce8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800fd0c:	e0bffc17 	ldw	r2,-16(fp)
 800fd10:	10c00a17 	ldw	r3,40(r2)
 800fd14:	e0bff717 	ldw	r2,-36(fp)
 800fd18:	1880011e 	bne	r3,r2,800fd20 <altera_avalon_jtag_uart_read+0x150>
      break;
 800fd1c:	00000206 	br	800fd28 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fd20:	e0bffe17 	ldw	r2,-8(fp)
 800fd24:	00bfb516 	blt	zero,r2,800fbfc <__alt_data_end+0xf800fbfc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800fd28:	e0fff517 	ldw	r3,-44(fp)
 800fd2c:	e0bffd17 	ldw	r2,-12(fp)
 800fd30:	18801726 	beq	r3,r2,800fd90 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fd34:	0005303a 	rdctl	r2,status
 800fd38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fd3c:	e0fffa17 	ldw	r3,-24(fp)
 800fd40:	00bfff84 	movi	r2,-2
 800fd44:	1884703a 	and	r2,r3,r2
 800fd48:	1001703a 	wrctl	status,r2
  
  return context;
 800fd4c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800fd50:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800fd54:	e0bffc17 	ldw	r2,-16(fp)
 800fd58:	10800817 	ldw	r2,32(r2)
 800fd5c:	10c00054 	ori	r3,r2,1
 800fd60:	e0bffc17 	ldw	r2,-16(fp)
 800fd64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fd68:	e0bffc17 	ldw	r2,-16(fp)
 800fd6c:	10800017 	ldw	r2,0(r2)
 800fd70:	10800104 	addi	r2,r2,4
 800fd74:	e0fffc17 	ldw	r3,-16(fp)
 800fd78:	18c00817 	ldw	r3,32(r3)
 800fd7c:	10c00035 	stwio	r3,0(r2)
 800fd80:	e0bff917 	ldw	r2,-28(fp)
 800fd84:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fd88:	e0bffb17 	ldw	r2,-20(fp)
 800fd8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800fd90:	e0fff517 	ldw	r3,-44(fp)
 800fd94:	e0bffd17 	ldw	r2,-12(fp)
 800fd98:	18800426 	beq	r3,r2,800fdac <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
 800fd9c:	e0fff517 	ldw	r3,-44(fp)
 800fda0:	e0bffd17 	ldw	r2,-12(fp)
 800fda4:	1885c83a 	sub	r2,r3,r2
 800fda8:	00000606 	br	800fdc4 <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
 800fdac:	e0bfff17 	ldw	r2,-4(fp)
 800fdb0:	1090000c 	andi	r2,r2,16384
 800fdb4:	10000226 	beq	r2,zero,800fdc0 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
 800fdb8:	00bffd44 	movi	r2,-11
 800fdbc:	00000106 	br	800fdc4 <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
 800fdc0:	00bffec4 	movi	r2,-5
}
 800fdc4:	e037883a 	mov	sp,fp
 800fdc8:	dfc00117 	ldw	ra,4(sp)
 800fdcc:	df000017 	ldw	fp,0(sp)
 800fdd0:	dec00204 	addi	sp,sp,8
 800fdd4:	f800283a 	ret

0800fdd8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800fdd8:	defff304 	addi	sp,sp,-52
 800fddc:	dfc00c15 	stw	ra,48(sp)
 800fde0:	df000b15 	stw	fp,44(sp)
 800fde4:	df000b04 	addi	fp,sp,44
 800fde8:	e13ffc15 	stw	r4,-16(fp)
 800fdec:	e17ffd15 	stw	r5,-12(fp)
 800fdf0:	e1bffe15 	stw	r6,-8(fp)
 800fdf4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800fdf8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800fdfc:	e0bffd17 	ldw	r2,-12(fp)
 800fe00:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fe04:	00003906 	br	800feec <altera_avalon_jtag_uart_write+0x114>
 800fe08:	00003806 	br	800feec <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800fe0c:	e0bffc17 	ldw	r2,-16(fp)
 800fe10:	10800c17 	ldw	r2,48(r2)
 800fe14:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800fe18:	e0bffc17 	ldw	r2,-16(fp)
 800fe1c:	10800d17 	ldw	r2,52(r2)
 800fe20:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800fe24:	e0fff817 	ldw	r3,-32(fp)
 800fe28:	e0bff517 	ldw	r2,-44(fp)
 800fe2c:	1880062e 	bgeu	r3,r2,800fe48 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
 800fe30:	e0fff517 	ldw	r3,-44(fp)
 800fe34:	e0bff817 	ldw	r2,-32(fp)
 800fe38:	1885c83a 	sub	r2,r3,r2
 800fe3c:	10bfffc4 	addi	r2,r2,-1
 800fe40:	e0bff615 	stw	r2,-40(fp)
 800fe44:	00000b06 	br	800fe74 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 800fe48:	e0bff517 	ldw	r2,-44(fp)
 800fe4c:	10000526 	beq	r2,zero,800fe64 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800fe50:	00c20004 	movi	r3,2048
 800fe54:	e0bff817 	ldw	r2,-32(fp)
 800fe58:	1885c83a 	sub	r2,r3,r2
 800fe5c:	e0bff615 	stw	r2,-40(fp)
 800fe60:	00000406 	br	800fe74 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800fe64:	00c1ffc4 	movi	r3,2047
 800fe68:	e0bff817 	ldw	r2,-32(fp)
 800fe6c:	1885c83a 	sub	r2,r3,r2
 800fe70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fe74:	e0bff617 	ldw	r2,-40(fp)
 800fe78:	1000011e 	bne	r2,zero,800fe80 <altera_avalon_jtag_uart_write+0xa8>
        break;
 800fe7c:	00001d06 	br	800fef4 <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
 800fe80:	e0fffe17 	ldw	r3,-8(fp)
 800fe84:	e0bff617 	ldw	r2,-40(fp)
 800fe88:	1880022e 	bgeu	r3,r2,800fe94 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 800fe8c:	e0bffe17 	ldw	r2,-8(fp)
 800fe90:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800fe94:	e0bff817 	ldw	r2,-32(fp)
 800fe98:	10820e04 	addi	r2,r2,2104
 800fe9c:	e0fffc17 	ldw	r3,-16(fp)
 800fea0:	1885883a 	add	r2,r3,r2
 800fea4:	1009883a 	mov	r4,r2
 800fea8:	e17ffd17 	ldw	r5,-12(fp)
 800feac:	e1bff617 	ldw	r6,-40(fp)
 800feb0:	8007a900 	call	8007a90 <memcpy>
      ptr   += n;
 800feb4:	e0fffd17 	ldw	r3,-12(fp)
 800feb8:	e0bff617 	ldw	r2,-40(fp)
 800febc:	1885883a 	add	r2,r3,r2
 800fec0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800fec4:	e0fffe17 	ldw	r3,-8(fp)
 800fec8:	e0bff617 	ldw	r2,-40(fp)
 800fecc:	1885c83a 	sub	r2,r3,r2
 800fed0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fed4:	e0fff817 	ldw	r3,-32(fp)
 800fed8:	e0bff617 	ldw	r2,-40(fp)
 800fedc:	1885883a 	add	r2,r3,r2
 800fee0:	10c1ffcc 	andi	r3,r2,2047
 800fee4:	e0bffc17 	ldw	r2,-16(fp)
 800fee8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800feec:	e0bffe17 	ldw	r2,-8(fp)
 800fef0:	00bfc616 	blt	zero,r2,800fe0c <__alt_data_end+0xf800fe0c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fef4:	0005303a 	rdctl	r2,status
 800fef8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fefc:	e0fffa17 	ldw	r3,-24(fp)
 800ff00:	00bfff84 	movi	r2,-2
 800ff04:	1884703a 	and	r2,r3,r2
 800ff08:	1001703a 	wrctl	status,r2
  
  return context;
 800ff0c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800ff10:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800ff14:	e0bffc17 	ldw	r2,-16(fp)
 800ff18:	10800817 	ldw	r2,32(r2)
 800ff1c:	10c00094 	ori	r3,r2,2
 800ff20:	e0bffc17 	ldw	r2,-16(fp)
 800ff24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ff28:	e0bffc17 	ldw	r2,-16(fp)
 800ff2c:	10800017 	ldw	r2,0(r2)
 800ff30:	10800104 	addi	r2,r2,4
 800ff34:	e0fffc17 	ldw	r3,-16(fp)
 800ff38:	18c00817 	ldw	r3,32(r3)
 800ff3c:	10c00035 	stwio	r3,0(r2)
 800ff40:	e0bff917 	ldw	r2,-28(fp)
 800ff44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ff48:	e0bffb17 	ldw	r2,-20(fp)
 800ff4c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800ff50:	e0bffe17 	ldw	r2,-8(fp)
 800ff54:	0080120e 	bge	zero,r2,800ffa0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800ff58:	e0bfff17 	ldw	r2,-4(fp)
 800ff5c:	1090000c 	andi	r2,r2,16384
 800ff60:	10000126 	beq	r2,zero,800ff68 <altera_avalon_jtag_uart_write+0x190>
        break;
 800ff64:	00001006 	br	800ffa8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800ff68:	0001883a 	nop
 800ff6c:	e0bffc17 	ldw	r2,-16(fp)
 800ff70:	10c00d17 	ldw	r3,52(r2)
 800ff74:	e0bff517 	ldw	r2,-44(fp)
 800ff78:	1880051e 	bne	r3,r2,800ff90 <altera_avalon_jtag_uart_write+0x1b8>
 800ff7c:	e0bffc17 	ldw	r2,-16(fp)
 800ff80:	10c00917 	ldw	r3,36(r2)
 800ff84:	e0bffc17 	ldw	r2,-16(fp)
 800ff88:	10800117 	ldw	r2,4(r2)
 800ff8c:	18bff736 	bltu	r3,r2,800ff6c <__alt_data_end+0xf800ff6c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800ff90:	e0bffc17 	ldw	r2,-16(fp)
 800ff94:	10800917 	ldw	r2,36(r2)
 800ff98:	10000126 	beq	r2,zero,800ffa0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800ff9c:	00000206 	br	800ffa8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800ffa0:	e0bffe17 	ldw	r2,-8(fp)
 800ffa4:	00bf9816 	blt	zero,r2,800fe08 <__alt_data_end+0xf800fe08>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800ffa8:	e0fffd17 	ldw	r3,-12(fp)
 800ffac:	e0bff717 	ldw	r2,-36(fp)
 800ffb0:	18800426 	beq	r3,r2,800ffc4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800ffb4:	e0fffd17 	ldw	r3,-12(fp)
 800ffb8:	e0bff717 	ldw	r2,-36(fp)
 800ffbc:	1885c83a 	sub	r2,r3,r2
 800ffc0:	00000606 	br	800ffdc <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800ffc4:	e0bfff17 	ldw	r2,-4(fp)
 800ffc8:	1090000c 	andi	r2,r2,16384
 800ffcc:	10000226 	beq	r2,zero,800ffd8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800ffd0:	00bffd44 	movi	r2,-11
 800ffd4:	00000106 	br	800ffdc <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800ffd8:	00bffec4 	movi	r2,-5
}
 800ffdc:	e037883a 	mov	sp,fp
 800ffe0:	dfc00117 	ldw	ra,4(sp)
 800ffe4:	df000017 	ldw	fp,0(sp)
 800ffe8:	dec00204 	addi	sp,sp,8
 800ffec:	f800283a 	ret

0800fff0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800fff0:	defff504 	addi	sp,sp,-44
 800fff4:	df000a15 	stw	fp,40(sp)
 800fff8:	df000a04 	addi	fp,sp,40
 800fffc:	e13ffc15 	stw	r4,-16(fp)
 8010000:	e17ffd15 	stw	r5,-12(fp)
 8010004:	e1bffe15 	stw	r6,-8(fp)
 8010008:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801000c:	e03ff615 	stw	zero,-40(fp)
 8010010:	00820074 	movhi	r2,2049
 8010014:	1094eb04 	addi	r2,r2,21420
 8010018:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 801001c:	10003f26 	beq	r2,zero,801011c <alt_alarm_start+0x12c>
  {
    if (alarm)
 8010020:	e0bffc17 	ldw	r2,-16(fp)
 8010024:	10003b26 	beq	r2,zero,8010114 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8010028:	e0bffc17 	ldw	r2,-16(fp)
 801002c:	e0fffe17 	ldw	r3,-8(fp)
 8010030:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8010034:	e0bffc17 	ldw	r2,-16(fp)
 8010038:	e0ffff17 	ldw	r3,-4(fp)
 801003c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010040:	0005303a 	rdctl	r2,status
 8010044:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010048:	e0fff817 	ldw	r3,-32(fp)
 801004c:	00bfff84 	movi	r2,-2
 8010050:	1884703a 	and	r2,r3,r2
 8010054:	1001703a 	wrctl	status,r2
  
  return context;
 8010058:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 801005c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8010060:	00820074 	movhi	r2,2049
 8010064:	1094ec04 	addi	r2,r2,21424
 8010068:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 801006c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8010070:	e0fffd17 	ldw	r3,-12(fp)
 8010074:	e0bff617 	ldw	r2,-40(fp)
 8010078:	1885883a 	add	r2,r3,r2
 801007c:	10c00044 	addi	r3,r2,1
 8010080:	e0bffc17 	ldw	r2,-16(fp)
 8010084:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8010088:	e0bffc17 	ldw	r2,-16(fp)
 801008c:	10c00217 	ldw	r3,8(r2)
 8010090:	e0bff617 	ldw	r2,-40(fp)
 8010094:	1880042e 	bgeu	r3,r2,80100a8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8010098:	e0bffc17 	ldw	r2,-16(fp)
 801009c:	00c00044 	movi	r3,1
 80100a0:	10c00405 	stb	r3,16(r2)
 80100a4:	00000206 	br	80100b0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 80100a8:	e0bffc17 	ldw	r2,-16(fp)
 80100ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80100b0:	e0bffc17 	ldw	r2,-16(fp)
 80100b4:	00c20074 	movhi	r3,2049
 80100b8:	18ce1d04 	addi	r3,r3,14452
 80100bc:	e0fff915 	stw	r3,-28(fp)
 80100c0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80100c4:	e0bffa17 	ldw	r2,-24(fp)
 80100c8:	e0fff917 	ldw	r3,-28(fp)
 80100cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80100d0:	e0bff917 	ldw	r2,-28(fp)
 80100d4:	10c00017 	ldw	r3,0(r2)
 80100d8:	e0bffa17 	ldw	r2,-24(fp)
 80100dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80100e0:	e0bff917 	ldw	r2,-28(fp)
 80100e4:	10800017 	ldw	r2,0(r2)
 80100e8:	e0fffa17 	ldw	r3,-24(fp)
 80100ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80100f0:	e0bff917 	ldw	r2,-28(fp)
 80100f4:	e0fffa17 	ldw	r3,-24(fp)
 80100f8:	10c00015 	stw	r3,0(r2)
 80100fc:	e0bff717 	ldw	r2,-36(fp)
 8010100:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010104:	e0bffb17 	ldw	r2,-20(fp)
 8010108:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801010c:	0005883a 	mov	r2,zero
 8010110:	00000306 	br	8010120 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8010114:	00bffa84 	movi	r2,-22
 8010118:	00000106 	br	8010120 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 801011c:	00bfde84 	movi	r2,-134
  }
}
 8010120:	e037883a 	mov	sp,fp
 8010124:	df000017 	ldw	fp,0(sp)
 8010128:	dec00104 	addi	sp,sp,4
 801012c:	f800283a 	ret

08010130 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8010130:	defffa04 	addi	sp,sp,-24
 8010134:	dfc00515 	stw	ra,20(sp)
 8010138:	df000415 	stw	fp,16(sp)
 801013c:	df000404 	addi	fp,sp,16
 8010140:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8010144:	00800244 	movi	r2,9
 8010148:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 801014c:	e13ffd17 	ldw	r4,-12(fp)
 8010150:	014003f4 	movhi	r5,15
 8010154:	29509004 	addi	r5,r5,16960
 8010158:	800c3600 	call	800c360 <__mulsi3>
 801015c:	0100bef4 	movhi	r4,763
 8010160:	213c2004 	addi	r4,r4,-3968
 8010164:	100b883a 	mov	r5,r2
 8010168:	800c3500 	call	800c350 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 801016c:	01200034 	movhi	r4,32768
 8010170:	213fffc4 	addi	r4,r4,-1
 8010174:	100b883a 	mov	r5,r2
 8010178:	800c3500 	call	800c350 <__udivsi3>
 801017c:	e13fff17 	ldw	r4,-4(fp)
 8010180:	100b883a 	mov	r5,r2
 8010184:	800c3500 	call	800c350 <__udivsi3>
 8010188:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 801018c:	e0bffe17 	ldw	r2,-8(fp)
 8010190:	10002926 	beq	r2,zero,8010238 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 8010194:	e03ffc15 	stw	zero,-16(fp)
 8010198:	00001606 	br	80101f4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 801019c:	00a00034 	movhi	r2,32768
 80101a0:	10bfffc4 	addi	r2,r2,-1
 80101a4:	10bfffc4 	addi	r2,r2,-1
 80101a8:	103ffe1e 	bne	r2,zero,80101a4 <__alt_data_end+0xf80101a4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 80101ac:	e13ffd17 	ldw	r4,-12(fp)
 80101b0:	014003f4 	movhi	r5,15
 80101b4:	29509004 	addi	r5,r5,16960
 80101b8:	800c3600 	call	800c360 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 80101bc:	0100bef4 	movhi	r4,763
 80101c0:	213c2004 	addi	r4,r4,-3968
 80101c4:	100b883a 	mov	r5,r2
 80101c8:	800c3500 	call	800c350 <__udivsi3>
 80101cc:	01200034 	movhi	r4,32768
 80101d0:	213fffc4 	addi	r4,r4,-1
 80101d4:	100b883a 	mov	r5,r2
 80101d8:	800c3500 	call	800c350 <__udivsi3>
 80101dc:	e0ffff17 	ldw	r3,-4(fp)
 80101e0:	1885c83a 	sub	r2,r3,r2
 80101e4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 80101e8:	e0bffc17 	ldw	r2,-16(fp)
 80101ec:	10800044 	addi	r2,r2,1
 80101f0:	e0bffc15 	stw	r2,-16(fp)
 80101f4:	e0fffc17 	ldw	r3,-16(fp)
 80101f8:	e0bffe17 	ldw	r2,-8(fp)
 80101fc:	18bfe716 	blt	r3,r2,801019c <__alt_data_end+0xf801019c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010200:	e13ffd17 	ldw	r4,-12(fp)
 8010204:	014003f4 	movhi	r5,15
 8010208:	29509004 	addi	r5,r5,16960
 801020c:	800c3600 	call	800c360 <__mulsi3>
 8010210:	0100bef4 	movhi	r4,763
 8010214:	213c2004 	addi	r4,r4,-3968
 8010218:	100b883a 	mov	r5,r2
 801021c:	800c3500 	call	800c350 <__udivsi3>
 8010220:	1009883a 	mov	r4,r2
 8010224:	e17fff17 	ldw	r5,-4(fp)
 8010228:	800c3600 	call	800c360 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 801022c:	10bfffc4 	addi	r2,r2,-1
 8010230:	103ffe1e 	bne	r2,zero,801022c <__alt_data_end+0xf801022c>
 8010234:	00000d06 	br	801026c <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010238:	e13ffd17 	ldw	r4,-12(fp)
 801023c:	014003f4 	movhi	r5,15
 8010240:	29509004 	addi	r5,r5,16960
 8010244:	800c3600 	call	800c360 <__mulsi3>
 8010248:	0100bef4 	movhi	r4,763
 801024c:	213c2004 	addi	r4,r4,-3968
 8010250:	100b883a 	mov	r5,r2
 8010254:	800c3500 	call	800c350 <__udivsi3>
 8010258:	1009883a 	mov	r4,r2
 801025c:	e17fff17 	ldw	r5,-4(fp)
 8010260:	800c3600 	call	800c360 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8010264:	10bfffc4 	addi	r2,r2,-1
 8010268:	00bffe16 	blt	zero,r2,8010264 <__alt_data_end+0xf8010264>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 801026c:	0005883a 	mov	r2,zero
}
 8010270:	e037883a 	mov	sp,fp
 8010274:	dfc00117 	ldw	ra,4(sp)
 8010278:	df000017 	ldw	fp,0(sp)
 801027c:	dec00204 	addi	sp,sp,8
 8010280:	f800283a 	ret

08010284 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8010284:	deffff04 	addi	sp,sp,-4
 8010288:	df000015 	stw	fp,0(sp)
 801028c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010290:	e037883a 	mov	sp,fp
 8010294:	df000017 	ldw	fp,0(sp)
 8010298:	dec00104 	addi	sp,sp,4
 801029c:	f800283a 	ret

080102a0 <alt_get_errno>:
 80102a0:	defffe04 	addi	sp,sp,-8
 80102a4:	dfc00115 	stw	ra,4(sp)
 80102a8:	df000015 	stw	fp,0(sp)
 80102ac:	d839883a 	mov	fp,sp
 80102b0:	00820074 	movhi	r2,2049
 80102b4:	108e1a04 	addi	r2,r2,14440
 80102b8:	10800017 	ldw	r2,0(r2)
 80102bc:	10000526 	beq	r2,zero,80102d4 <alt_get_errno+0x34>
 80102c0:	00820074 	movhi	r2,2049
 80102c4:	108e1a04 	addi	r2,r2,14440
 80102c8:	10800017 	ldw	r2,0(r2)
 80102cc:	103ee83a 	callr	r2
 80102d0:	00000206 	br	80102dc <alt_get_errno+0x3c>
 80102d4:	00820074 	movhi	r2,2049
 80102d8:	1094e604 	addi	r2,r2,21400
 80102dc:	e037883a 	mov	sp,fp
 80102e0:	dfc00117 	ldw	ra,4(sp)
 80102e4:	df000017 	ldw	fp,0(sp)
 80102e8:	dec00204 	addi	sp,sp,8
 80102ec:	f800283a 	ret

080102f0 <alt_dev_llist_insert>:
 80102f0:	defffa04 	addi	sp,sp,-24
 80102f4:	dfc00515 	stw	ra,20(sp)
 80102f8:	df000415 	stw	fp,16(sp)
 80102fc:	df000404 	addi	fp,sp,16
 8010300:	e13ffe15 	stw	r4,-8(fp)
 8010304:	e17fff15 	stw	r5,-4(fp)
 8010308:	e0bffe17 	ldw	r2,-8(fp)
 801030c:	10000326 	beq	r2,zero,801031c <alt_dev_llist_insert+0x2c>
 8010310:	e0bffe17 	ldw	r2,-8(fp)
 8010314:	10800217 	ldw	r2,8(r2)
 8010318:	1000051e 	bne	r2,zero,8010330 <alt_dev_llist_insert+0x40>
 801031c:	80102a00 	call	80102a0 <alt_get_errno>
 8010320:	00c00584 	movi	r3,22
 8010324:	10c00015 	stw	r3,0(r2)
 8010328:	00bffa84 	movi	r2,-22
 801032c:	00001306 	br	801037c <alt_dev_llist_insert+0x8c>
 8010330:	e0bffe17 	ldw	r2,-8(fp)
 8010334:	e0ffff17 	ldw	r3,-4(fp)
 8010338:	e0fffc15 	stw	r3,-16(fp)
 801033c:	e0bffd15 	stw	r2,-12(fp)
 8010340:	e0bffd17 	ldw	r2,-12(fp)
 8010344:	e0fffc17 	ldw	r3,-16(fp)
 8010348:	10c00115 	stw	r3,4(r2)
 801034c:	e0bffc17 	ldw	r2,-16(fp)
 8010350:	10c00017 	ldw	r3,0(r2)
 8010354:	e0bffd17 	ldw	r2,-12(fp)
 8010358:	10c00015 	stw	r3,0(r2)
 801035c:	e0bffc17 	ldw	r2,-16(fp)
 8010360:	10800017 	ldw	r2,0(r2)
 8010364:	e0fffd17 	ldw	r3,-12(fp)
 8010368:	10c00115 	stw	r3,4(r2)
 801036c:	e0bffc17 	ldw	r2,-16(fp)
 8010370:	e0fffd17 	ldw	r3,-12(fp)
 8010374:	10c00015 	stw	r3,0(r2)
 8010378:	0005883a 	mov	r2,zero
 801037c:	e037883a 	mov	sp,fp
 8010380:	dfc00117 	ldw	ra,4(sp)
 8010384:	df000017 	ldw	fp,0(sp)
 8010388:	dec00204 	addi	sp,sp,8
 801038c:	f800283a 	ret

08010390 <_do_ctors>:
 8010390:	defffd04 	addi	sp,sp,-12
 8010394:	dfc00215 	stw	ra,8(sp)
 8010398:	df000115 	stw	fp,4(sp)
 801039c:	df000104 	addi	fp,sp,4
 80103a0:	00820074 	movhi	r2,2049
 80103a4:	1084c404 	addi	r2,r2,4880
 80103a8:	e0bfff15 	stw	r2,-4(fp)
 80103ac:	00000606 	br	80103c8 <_do_ctors+0x38>
 80103b0:	e0bfff17 	ldw	r2,-4(fp)
 80103b4:	10800017 	ldw	r2,0(r2)
 80103b8:	103ee83a 	callr	r2
 80103bc:	e0bfff17 	ldw	r2,-4(fp)
 80103c0:	10bfff04 	addi	r2,r2,-4
 80103c4:	e0bfff15 	stw	r2,-4(fp)
 80103c8:	e0ffff17 	ldw	r3,-4(fp)
 80103cc:	00820074 	movhi	r2,2049
 80103d0:	1084c504 	addi	r2,r2,4884
 80103d4:	18bff62e 	bgeu	r3,r2,80103b0 <__alt_data_end+0xf80103b0>
 80103d8:	e037883a 	mov	sp,fp
 80103dc:	dfc00117 	ldw	ra,4(sp)
 80103e0:	df000017 	ldw	fp,0(sp)
 80103e4:	dec00204 	addi	sp,sp,8
 80103e8:	f800283a 	ret

080103ec <_do_dtors>:
 80103ec:	defffd04 	addi	sp,sp,-12
 80103f0:	dfc00215 	stw	ra,8(sp)
 80103f4:	df000115 	stw	fp,4(sp)
 80103f8:	df000104 	addi	fp,sp,4
 80103fc:	00820074 	movhi	r2,2049
 8010400:	1084c404 	addi	r2,r2,4880
 8010404:	e0bfff15 	stw	r2,-4(fp)
 8010408:	00000606 	br	8010424 <_do_dtors+0x38>
 801040c:	e0bfff17 	ldw	r2,-4(fp)
 8010410:	10800017 	ldw	r2,0(r2)
 8010414:	103ee83a 	callr	r2
 8010418:	e0bfff17 	ldw	r2,-4(fp)
 801041c:	10bfff04 	addi	r2,r2,-4
 8010420:	e0bfff15 	stw	r2,-4(fp)
 8010424:	e0ffff17 	ldw	r3,-4(fp)
 8010428:	00820074 	movhi	r2,2049
 801042c:	1084c504 	addi	r2,r2,4884
 8010430:	18bff62e 	bgeu	r3,r2,801040c <__alt_data_end+0xf801040c>
 8010434:	e037883a 	mov	sp,fp
 8010438:	dfc00117 	ldw	ra,4(sp)
 801043c:	df000017 	ldw	fp,0(sp)
 8010440:	dec00204 	addi	sp,sp,8
 8010444:	f800283a 	ret

08010448 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8010448:	deffff04 	addi	sp,sp,-4
 801044c:	df000015 	stw	fp,0(sp)
 8010450:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8010454:	e037883a 	mov	sp,fp
 8010458:	df000017 	ldw	fp,0(sp)
 801045c:	dec00104 	addi	sp,sp,4
 8010460:	f800283a 	ret

08010464 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010464:	defff904 	addi	sp,sp,-28
 8010468:	dfc00615 	stw	ra,24(sp)
 801046c:	df000515 	stw	fp,20(sp)
 8010470:	df000504 	addi	fp,sp,20
 8010474:	e13ffc15 	stw	r4,-16(fp)
 8010478:	e17ffd15 	stw	r5,-12(fp)
 801047c:	e1bffe15 	stw	r6,-8(fp)
 8010480:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8010484:	e0800217 	ldw	r2,8(fp)
 8010488:	d8800015 	stw	r2,0(sp)
 801048c:	e13ffc17 	ldw	r4,-16(fp)
 8010490:	e17ffd17 	ldw	r5,-12(fp)
 8010494:	e1bffe17 	ldw	r6,-8(fp)
 8010498:	e1ffff17 	ldw	r7,-4(fp)
 801049c:	801063c0 	call	801063c <alt_iic_isr_register>
}  
 80104a0:	e037883a 	mov	sp,fp
 80104a4:	dfc00117 	ldw	ra,4(sp)
 80104a8:	df000017 	ldw	fp,0(sp)
 80104ac:	dec00204 	addi	sp,sp,8
 80104b0:	f800283a 	ret

080104b4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80104b4:	defff904 	addi	sp,sp,-28
 80104b8:	df000615 	stw	fp,24(sp)
 80104bc:	df000604 	addi	fp,sp,24
 80104c0:	e13ffe15 	stw	r4,-8(fp)
 80104c4:	e17fff15 	stw	r5,-4(fp)
 80104c8:	e0bfff17 	ldw	r2,-4(fp)
 80104cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80104d0:	0005303a 	rdctl	r2,status
 80104d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80104d8:	e0fffb17 	ldw	r3,-20(fp)
 80104dc:	00bfff84 	movi	r2,-2
 80104e0:	1884703a 	and	r2,r3,r2
 80104e4:	1001703a 	wrctl	status,r2
  
  return context;
 80104e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80104ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80104f0:	e0bffa17 	ldw	r2,-24(fp)
 80104f4:	00c00044 	movi	r3,1
 80104f8:	1884983a 	sll	r2,r3,r2
 80104fc:	1007883a 	mov	r3,r2
 8010500:	00820074 	movhi	r2,2049
 8010504:	1094ea04 	addi	r2,r2,21416
 8010508:	10800017 	ldw	r2,0(r2)
 801050c:	1886b03a 	or	r3,r3,r2
 8010510:	00820074 	movhi	r2,2049
 8010514:	1094ea04 	addi	r2,r2,21416
 8010518:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801051c:	00820074 	movhi	r2,2049
 8010520:	1094ea04 	addi	r2,r2,21416
 8010524:	10800017 	ldw	r2,0(r2)
 8010528:	100170fa 	wrctl	ienable,r2
 801052c:	e0bffc17 	ldw	r2,-16(fp)
 8010530:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010534:	e0bffd17 	ldw	r2,-12(fp)
 8010538:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801053c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 8010540:	e037883a 	mov	sp,fp
 8010544:	df000017 	ldw	fp,0(sp)
 8010548:	dec00104 	addi	sp,sp,4
 801054c:	f800283a 	ret

08010550 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8010550:	defff904 	addi	sp,sp,-28
 8010554:	df000615 	stw	fp,24(sp)
 8010558:	df000604 	addi	fp,sp,24
 801055c:	e13ffe15 	stw	r4,-8(fp)
 8010560:	e17fff15 	stw	r5,-4(fp)
 8010564:	e0bfff17 	ldw	r2,-4(fp)
 8010568:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801056c:	0005303a 	rdctl	r2,status
 8010570:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010574:	e0fffb17 	ldw	r3,-20(fp)
 8010578:	00bfff84 	movi	r2,-2
 801057c:	1884703a 	and	r2,r3,r2
 8010580:	1001703a 	wrctl	status,r2
  
  return context;
 8010584:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010588:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 801058c:	e0bffa17 	ldw	r2,-24(fp)
 8010590:	00c00044 	movi	r3,1
 8010594:	1884983a 	sll	r2,r3,r2
 8010598:	0084303a 	nor	r2,zero,r2
 801059c:	1007883a 	mov	r3,r2
 80105a0:	00820074 	movhi	r2,2049
 80105a4:	1094ea04 	addi	r2,r2,21416
 80105a8:	10800017 	ldw	r2,0(r2)
 80105ac:	1886703a 	and	r3,r3,r2
 80105b0:	00820074 	movhi	r2,2049
 80105b4:	1094ea04 	addi	r2,r2,21416
 80105b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80105bc:	00820074 	movhi	r2,2049
 80105c0:	1094ea04 	addi	r2,r2,21416
 80105c4:	10800017 	ldw	r2,0(r2)
 80105c8:	100170fa 	wrctl	ienable,r2
 80105cc:	e0bffc17 	ldw	r2,-16(fp)
 80105d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80105d4:	e0bffd17 	ldw	r2,-12(fp)
 80105d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80105dc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 80105e0:	e037883a 	mov	sp,fp
 80105e4:	df000017 	ldw	fp,0(sp)
 80105e8:	dec00104 	addi	sp,sp,4
 80105ec:	f800283a 	ret

080105f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80105f0:	defffc04 	addi	sp,sp,-16
 80105f4:	df000315 	stw	fp,12(sp)
 80105f8:	df000304 	addi	fp,sp,12
 80105fc:	e13ffe15 	stw	r4,-8(fp)
 8010600:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010604:	000530fa 	rdctl	r2,ienable
 8010608:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 801060c:	e0bfff17 	ldw	r2,-4(fp)
 8010610:	00c00044 	movi	r3,1
 8010614:	1884983a 	sll	r2,r3,r2
 8010618:	1007883a 	mov	r3,r2
 801061c:	e0bffd17 	ldw	r2,-12(fp)
 8010620:	1884703a 	and	r2,r3,r2
 8010624:	1004c03a 	cmpne	r2,r2,zero
 8010628:	10803fcc 	andi	r2,r2,255
}
 801062c:	e037883a 	mov	sp,fp
 8010630:	df000017 	ldw	fp,0(sp)
 8010634:	dec00104 	addi	sp,sp,4
 8010638:	f800283a 	ret

0801063c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801063c:	defff504 	addi	sp,sp,-44
 8010640:	dfc00a15 	stw	ra,40(sp)
 8010644:	df000915 	stw	fp,36(sp)
 8010648:	df000904 	addi	fp,sp,36
 801064c:	e13ffc15 	stw	r4,-16(fp)
 8010650:	e17ffd15 	stw	r5,-12(fp)
 8010654:	e1bffe15 	stw	r6,-8(fp)
 8010658:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 801065c:	00bffa84 	movi	r2,-22
 8010660:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010664:	e0bffd17 	ldw	r2,-12(fp)
 8010668:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 801066c:	e0bff817 	ldw	r2,-32(fp)
 8010670:	10800808 	cmpgei	r2,r2,32
 8010674:	1000271e 	bne	r2,zero,8010714 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010678:	0005303a 	rdctl	r2,status
 801067c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010680:	e0fffa17 	ldw	r3,-24(fp)
 8010684:	00bfff84 	movi	r2,-2
 8010688:	1884703a 	and	r2,r3,r2
 801068c:	1001703a 	wrctl	status,r2
  
  return context;
 8010690:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8010694:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8010698:	00c20074 	movhi	r3,2049
 801069c:	18d4f704 	addi	r3,r3,21468
 80106a0:	e0bff817 	ldw	r2,-32(fp)
 80106a4:	100490fa 	slli	r2,r2,3
 80106a8:	1885883a 	add	r2,r3,r2
 80106ac:	e0fffe17 	ldw	r3,-8(fp)
 80106b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80106b4:	00c20074 	movhi	r3,2049
 80106b8:	18d4f704 	addi	r3,r3,21468
 80106bc:	e0bff817 	ldw	r2,-32(fp)
 80106c0:	100490fa 	slli	r2,r2,3
 80106c4:	1885883a 	add	r2,r3,r2
 80106c8:	10800104 	addi	r2,r2,4
 80106cc:	e0ffff17 	ldw	r3,-4(fp)
 80106d0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80106d4:	e0bffe17 	ldw	r2,-8(fp)
 80106d8:	10000526 	beq	r2,zero,80106f0 <alt_iic_isr_register+0xb4>
 80106dc:	e0bff817 	ldw	r2,-32(fp)
 80106e0:	e13ffc17 	ldw	r4,-16(fp)
 80106e4:	100b883a 	mov	r5,r2
 80106e8:	80104b40 	call	80104b4 <alt_ic_irq_enable>
 80106ec:	00000406 	br	8010700 <alt_iic_isr_register+0xc4>
 80106f0:	e0bff817 	ldw	r2,-32(fp)
 80106f4:	e13ffc17 	ldw	r4,-16(fp)
 80106f8:	100b883a 	mov	r5,r2
 80106fc:	80105500 	call	8010550 <alt_ic_irq_disable>
 8010700:	e0bff715 	stw	r2,-36(fp)
 8010704:	e0bff917 	ldw	r2,-28(fp)
 8010708:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801070c:	e0bffb17 	ldw	r2,-20(fp)
 8010710:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8010714:	e0bff717 	ldw	r2,-36(fp)
}
 8010718:	e037883a 	mov	sp,fp
 801071c:	dfc00117 	ldw	ra,4(sp)
 8010720:	df000017 	ldw	fp,0(sp)
 8010724:	dec00204 	addi	sp,sp,8
 8010728:	f800283a 	ret

0801072c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801072c:	defff804 	addi	sp,sp,-32
 8010730:	dfc00715 	stw	ra,28(sp)
 8010734:	df000615 	stw	fp,24(sp)
 8010738:	dc000515 	stw	r16,20(sp)
 801073c:	df000604 	addi	fp,sp,24
 8010740:	e13ffb15 	stw	r4,-20(fp)
 8010744:	e17ffc15 	stw	r5,-16(fp)
 8010748:	e1bffd15 	stw	r6,-12(fp)
 801074c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8010750:	e13ffc17 	ldw	r4,-16(fp)
 8010754:	e17ffd17 	ldw	r5,-12(fp)
 8010758:	e1bffe17 	ldw	r6,-8(fp)
 801075c:	80109c80 	call	80109c8 <open>
 8010760:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8010764:	e0bffa17 	ldw	r2,-24(fp)
 8010768:	10002216 	blt	r2,zero,80107f4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 801076c:	04020074 	movhi	r16,2049
 8010770:	84099404 	addi	r16,r16,9808
 8010774:	e0bffa17 	ldw	r2,-24(fp)
 8010778:	1009883a 	mov	r4,r2
 801077c:	01400304 	movi	r5,12
 8010780:	800c3600 	call	800c360 <__mulsi3>
 8010784:	8085883a 	add	r2,r16,r2
 8010788:	10c00017 	ldw	r3,0(r2)
 801078c:	e0bffb17 	ldw	r2,-20(fp)
 8010790:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8010794:	04020074 	movhi	r16,2049
 8010798:	84099404 	addi	r16,r16,9808
 801079c:	e0bffa17 	ldw	r2,-24(fp)
 80107a0:	1009883a 	mov	r4,r2
 80107a4:	01400304 	movi	r5,12
 80107a8:	800c3600 	call	800c360 <__mulsi3>
 80107ac:	8085883a 	add	r2,r16,r2
 80107b0:	10800104 	addi	r2,r2,4
 80107b4:	10c00017 	ldw	r3,0(r2)
 80107b8:	e0bffb17 	ldw	r2,-20(fp)
 80107bc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80107c0:	04020074 	movhi	r16,2049
 80107c4:	84099404 	addi	r16,r16,9808
 80107c8:	e0bffa17 	ldw	r2,-24(fp)
 80107cc:	1009883a 	mov	r4,r2
 80107d0:	01400304 	movi	r5,12
 80107d4:	800c3600 	call	800c360 <__mulsi3>
 80107d8:	8085883a 	add	r2,r16,r2
 80107dc:	10800204 	addi	r2,r2,8
 80107e0:	10c00017 	ldw	r3,0(r2)
 80107e4:	e0bffb17 	ldw	r2,-20(fp)
 80107e8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80107ec:	e13ffa17 	ldw	r4,-24(fp)
 80107f0:	800f2600 	call	800f260 <alt_release_fd>
  }
} 
 80107f4:	e6ffff04 	addi	sp,fp,-4
 80107f8:	dfc00217 	ldw	ra,8(sp)
 80107fc:	df000117 	ldw	fp,4(sp)
 8010800:	dc000017 	ldw	r16,0(sp)
 8010804:	dec00304 	addi	sp,sp,12
 8010808:	f800283a 	ret

0801080c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 801080c:	defffb04 	addi	sp,sp,-20
 8010810:	dfc00415 	stw	ra,16(sp)
 8010814:	df000315 	stw	fp,12(sp)
 8010818:	df000304 	addi	fp,sp,12
 801081c:	e13ffd15 	stw	r4,-12(fp)
 8010820:	e17ffe15 	stw	r5,-8(fp)
 8010824:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8010828:	01020074 	movhi	r4,2049
 801082c:	21099704 	addi	r4,r4,9820
 8010830:	e17ffd17 	ldw	r5,-12(fp)
 8010834:	01800044 	movi	r6,1
 8010838:	01c07fc4 	movi	r7,511
 801083c:	801072c0 	call	801072c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8010840:	01020074 	movhi	r4,2049
 8010844:	21099404 	addi	r4,r4,9808
 8010848:	e17ffe17 	ldw	r5,-8(fp)
 801084c:	000d883a 	mov	r6,zero
 8010850:	01c07fc4 	movi	r7,511
 8010854:	801072c0 	call	801072c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8010858:	01020074 	movhi	r4,2049
 801085c:	21099a04 	addi	r4,r4,9832
 8010860:	e17fff17 	ldw	r5,-4(fp)
 8010864:	01800044 	movi	r6,1
 8010868:	01c07fc4 	movi	r7,511
 801086c:	801072c0 	call	801072c <alt_open_fd>
}  
 8010870:	e037883a 	mov	sp,fp
 8010874:	dfc00117 	ldw	ra,4(sp)
 8010878:	df000017 	ldw	fp,0(sp)
 801087c:	dec00204 	addi	sp,sp,8
 8010880:	f800283a 	ret

08010884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010884:	defffe04 	addi	sp,sp,-8
 8010888:	dfc00115 	stw	ra,4(sp)
 801088c:	df000015 	stw	fp,0(sp)
 8010890:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010894:	00820074 	movhi	r2,2049
 8010898:	108e1a04 	addi	r2,r2,14440
 801089c:	10800017 	ldw	r2,0(r2)
 80108a0:	10000526 	beq	r2,zero,80108b8 <alt_get_errno+0x34>
 80108a4:	00820074 	movhi	r2,2049
 80108a8:	108e1a04 	addi	r2,r2,14440
 80108ac:	10800017 	ldw	r2,0(r2)
 80108b0:	103ee83a 	callr	r2
 80108b4:	00000206 	br	80108c0 <alt_get_errno+0x3c>
 80108b8:	00820074 	movhi	r2,2049
 80108bc:	1094e604 	addi	r2,r2,21400
}
 80108c0:	e037883a 	mov	sp,fp
 80108c4:	dfc00117 	ldw	ra,4(sp)
 80108c8:	df000017 	ldw	fp,0(sp)
 80108cc:	dec00204 	addi	sp,sp,8
 80108d0:	f800283a 	ret

080108d4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80108d4:	defffb04 	addi	sp,sp,-20
 80108d8:	dfc00415 	stw	ra,16(sp)
 80108dc:	df000315 	stw	fp,12(sp)
 80108e0:	dc000215 	stw	r16,8(sp)
 80108e4:	df000304 	addi	fp,sp,12
 80108e8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80108ec:	e0bffe17 	ldw	r2,-8(fp)
 80108f0:	10800217 	ldw	r2,8(r2)
 80108f4:	10d00034 	orhi	r3,r2,16384
 80108f8:	e0bffe17 	ldw	r2,-8(fp)
 80108fc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010900:	e03ffd15 	stw	zero,-12(fp)
 8010904:	00002306 	br	8010994 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010908:	04020074 	movhi	r16,2049
 801090c:	84099404 	addi	r16,r16,9808
 8010910:	e0bffd17 	ldw	r2,-12(fp)
 8010914:	1009883a 	mov	r4,r2
 8010918:	01400304 	movi	r5,12
 801091c:	800c3600 	call	800c360 <__mulsi3>
 8010920:	8085883a 	add	r2,r16,r2
 8010924:	10c00017 	ldw	r3,0(r2)
 8010928:	e0bffe17 	ldw	r2,-8(fp)
 801092c:	10800017 	ldw	r2,0(r2)
 8010930:	1880151e 	bne	r3,r2,8010988 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010934:	04020074 	movhi	r16,2049
 8010938:	84099404 	addi	r16,r16,9808
 801093c:	e0bffd17 	ldw	r2,-12(fp)
 8010940:	1009883a 	mov	r4,r2
 8010944:	01400304 	movi	r5,12
 8010948:	800c3600 	call	800c360 <__mulsi3>
 801094c:	8085883a 	add	r2,r16,r2
 8010950:	10800204 	addi	r2,r2,8
 8010954:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010958:	10000b0e 	bge	r2,zero,8010988 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 801095c:	e13ffd17 	ldw	r4,-12(fp)
 8010960:	01400304 	movi	r5,12
 8010964:	800c3600 	call	800c360 <__mulsi3>
 8010968:	1007883a 	mov	r3,r2
 801096c:	00820074 	movhi	r2,2049
 8010970:	10899404 	addi	r2,r2,9808
 8010974:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010978:	e0bffe17 	ldw	r2,-8(fp)
 801097c:	18800226 	beq	r3,r2,8010988 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8010980:	00bffcc4 	movi	r2,-13
 8010984:	00000a06 	br	80109b0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010988:	e0bffd17 	ldw	r2,-12(fp)
 801098c:	10800044 	addi	r2,r2,1
 8010990:	e0bffd15 	stw	r2,-12(fp)
 8010994:	00820074 	movhi	r2,2049
 8010998:	108e1904 	addi	r2,r2,14436
 801099c:	10800017 	ldw	r2,0(r2)
 80109a0:	1007883a 	mov	r3,r2
 80109a4:	e0bffd17 	ldw	r2,-12(fp)
 80109a8:	18bfd72e 	bgeu	r3,r2,8010908 <__alt_data_end+0xf8010908>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80109ac:	0005883a 	mov	r2,zero
}
 80109b0:	e6ffff04 	addi	sp,fp,-4
 80109b4:	dfc00217 	ldw	ra,8(sp)
 80109b8:	df000117 	ldw	fp,4(sp)
 80109bc:	dc000017 	ldw	r16,0(sp)
 80109c0:	dec00304 	addi	sp,sp,12
 80109c4:	f800283a 	ret

080109c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80109c8:	defff604 	addi	sp,sp,-40
 80109cc:	dfc00915 	stw	ra,36(sp)
 80109d0:	df000815 	stw	fp,32(sp)
 80109d4:	df000804 	addi	fp,sp,32
 80109d8:	e13ffd15 	stw	r4,-12(fp)
 80109dc:	e17ffe15 	stw	r5,-8(fp)
 80109e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80109e4:	00bfffc4 	movi	r2,-1
 80109e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80109ec:	00bffb44 	movi	r2,-19
 80109f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80109f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80109f8:	e13ffd17 	ldw	r4,-12(fp)
 80109fc:	01420074 	movhi	r5,2049
 8010a00:	294e1704 	addi	r5,r5,14428
 8010a04:	8010ce00 	call	8010ce0 <alt_find_dev>
 8010a08:	e0bff815 	stw	r2,-32(fp)
 8010a0c:	e0bff817 	ldw	r2,-32(fp)
 8010a10:	1000051e 	bne	r2,zero,8010a28 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8010a14:	e13ffd17 	ldw	r4,-12(fp)
 8010a18:	8010d700 	call	8010d70 <alt_find_file>
 8010a1c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8010a20:	00800044 	movi	r2,1
 8010a24:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8010a28:	e0bff817 	ldw	r2,-32(fp)
 8010a2c:	10002b26 	beq	r2,zero,8010adc <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8010a30:	e13ff817 	ldw	r4,-32(fp)
 8010a34:	8010e840 	call	8010e84 <alt_get_fd>
 8010a38:	e0bff915 	stw	r2,-28(fp)
 8010a3c:	e0bff917 	ldw	r2,-28(fp)
 8010a40:	1000030e 	bge	r2,zero,8010a50 <open+0x88>
    {
      status = index;
 8010a44:	e0bff917 	ldw	r2,-28(fp)
 8010a48:	e0bffa15 	stw	r2,-24(fp)
 8010a4c:	00002506 	br	8010ae4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8010a50:	e13ff917 	ldw	r4,-28(fp)
 8010a54:	01400304 	movi	r5,12
 8010a58:	800c3600 	call	800c360 <__mulsi3>
 8010a5c:	1007883a 	mov	r3,r2
 8010a60:	00820074 	movhi	r2,2049
 8010a64:	10899404 	addi	r2,r2,9808
 8010a68:	1885883a 	add	r2,r3,r2
 8010a6c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8010a70:	e0fffe17 	ldw	r3,-8(fp)
 8010a74:	00900034 	movhi	r2,16384
 8010a78:	10bfffc4 	addi	r2,r2,-1
 8010a7c:	1886703a 	and	r3,r3,r2
 8010a80:	e0bffc17 	ldw	r2,-16(fp)
 8010a84:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8010a88:	e0bffb17 	ldw	r2,-20(fp)
 8010a8c:	1000051e 	bne	r2,zero,8010aa4 <open+0xdc>
 8010a90:	e13ffc17 	ldw	r4,-16(fp)
 8010a94:	80108d40 	call	80108d4 <alt_file_locked>
 8010a98:	e0bffa15 	stw	r2,-24(fp)
 8010a9c:	e0bffa17 	ldw	r2,-24(fp)
 8010aa0:	10001016 	blt	r2,zero,8010ae4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8010aa4:	e0bff817 	ldw	r2,-32(fp)
 8010aa8:	10800317 	ldw	r2,12(r2)
 8010aac:	10000826 	beq	r2,zero,8010ad0 <open+0x108>
 8010ab0:	e0bff817 	ldw	r2,-32(fp)
 8010ab4:	10800317 	ldw	r2,12(r2)
 8010ab8:	e13ffc17 	ldw	r4,-16(fp)
 8010abc:	e17ffd17 	ldw	r5,-12(fp)
 8010ac0:	e1bffe17 	ldw	r6,-8(fp)
 8010ac4:	e1ffff17 	ldw	r7,-4(fp)
 8010ac8:	103ee83a 	callr	r2
 8010acc:	00000106 	br	8010ad4 <open+0x10c>
 8010ad0:	0005883a 	mov	r2,zero
 8010ad4:	e0bffa15 	stw	r2,-24(fp)
 8010ad8:	00000206 	br	8010ae4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8010adc:	00bffb44 	movi	r2,-19
 8010ae0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8010ae4:	e0bffa17 	ldw	r2,-24(fp)
 8010ae8:	1000080e 	bge	r2,zero,8010b0c <open+0x144>
  {
    alt_release_fd (index);  
 8010aec:	e13ff917 	ldw	r4,-28(fp)
 8010af0:	800f2600 	call	800f260 <alt_release_fd>
    ALT_ERRNO = -status;
 8010af4:	80108840 	call	8010884 <alt_get_errno>
 8010af8:	e0fffa17 	ldw	r3,-24(fp)
 8010afc:	00c7c83a 	sub	r3,zero,r3
 8010b00:	10c00015 	stw	r3,0(r2)
    return -1;
 8010b04:	00bfffc4 	movi	r2,-1
 8010b08:	00000106 	br	8010b10 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8010b0c:	e0bff917 	ldw	r2,-28(fp)
}
 8010b10:	e037883a 	mov	sp,fp
 8010b14:	dfc00117 	ldw	ra,4(sp)
 8010b18:	df000017 	ldw	fp,0(sp)
 8010b1c:	dec00204 	addi	sp,sp,8
 8010b20:	f800283a 	ret

08010b24 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8010b24:	defffa04 	addi	sp,sp,-24
 8010b28:	df000515 	stw	fp,20(sp)
 8010b2c:	df000504 	addi	fp,sp,20
 8010b30:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010b34:	0005303a 	rdctl	r2,status
 8010b38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010b3c:	e0fffc17 	ldw	r3,-16(fp)
 8010b40:	00bfff84 	movi	r2,-2
 8010b44:	1884703a 	and	r2,r3,r2
 8010b48:	1001703a 	wrctl	status,r2
  
  return context;
 8010b4c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8010b50:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8010b54:	e0bfff17 	ldw	r2,-4(fp)
 8010b58:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8010b5c:	e0bffd17 	ldw	r2,-12(fp)
 8010b60:	10800017 	ldw	r2,0(r2)
 8010b64:	e0fffd17 	ldw	r3,-12(fp)
 8010b68:	18c00117 	ldw	r3,4(r3)
 8010b6c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8010b70:	e0bffd17 	ldw	r2,-12(fp)
 8010b74:	10800117 	ldw	r2,4(r2)
 8010b78:	e0fffd17 	ldw	r3,-12(fp)
 8010b7c:	18c00017 	ldw	r3,0(r3)
 8010b80:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010b84:	e0bffd17 	ldw	r2,-12(fp)
 8010b88:	e0fffd17 	ldw	r3,-12(fp)
 8010b8c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010b90:	e0bffd17 	ldw	r2,-12(fp)
 8010b94:	e0fffd17 	ldw	r3,-12(fp)
 8010b98:	10c00015 	stw	r3,0(r2)
 8010b9c:	e0bffb17 	ldw	r2,-20(fp)
 8010ba0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010ba4:	e0bffe17 	ldw	r2,-8(fp)
 8010ba8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8010bac:	e037883a 	mov	sp,fp
 8010bb0:	df000017 	ldw	fp,0(sp)
 8010bb4:	dec00104 	addi	sp,sp,4
 8010bb8:	f800283a 	ret

08010bbc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8010bbc:	defffb04 	addi	sp,sp,-20
 8010bc0:	dfc00415 	stw	ra,16(sp)
 8010bc4:	df000315 	stw	fp,12(sp)
 8010bc8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8010bcc:	d0a01117 	ldw	r2,-32700(gp)
 8010bd0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010bd4:	d0a6e017 	ldw	r2,-25728(gp)
 8010bd8:	10800044 	addi	r2,r2,1
 8010bdc:	d0a6e015 	stw	r2,-25728(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010be0:	00002e06 	br	8010c9c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010be4:	e0bffd17 	ldw	r2,-12(fp)
 8010be8:	10800017 	ldw	r2,0(r2)
 8010bec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8010bf0:	e0bffd17 	ldw	r2,-12(fp)
 8010bf4:	10800403 	ldbu	r2,16(r2)
 8010bf8:	10803fcc 	andi	r2,r2,255
 8010bfc:	10000426 	beq	r2,zero,8010c10 <alt_tick+0x54>
 8010c00:	d0a6e017 	ldw	r2,-25728(gp)
 8010c04:	1000021e 	bne	r2,zero,8010c10 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8010c08:	e0bffd17 	ldw	r2,-12(fp)
 8010c0c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8010c10:	e0bffd17 	ldw	r2,-12(fp)
 8010c14:	10800217 	ldw	r2,8(r2)
 8010c18:	d0e6e017 	ldw	r3,-25728(gp)
 8010c1c:	18801d36 	bltu	r3,r2,8010c94 <alt_tick+0xd8>
 8010c20:	e0bffd17 	ldw	r2,-12(fp)
 8010c24:	10800403 	ldbu	r2,16(r2)
 8010c28:	10803fcc 	andi	r2,r2,255
 8010c2c:	1000191e 	bne	r2,zero,8010c94 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8010c30:	e0bffd17 	ldw	r2,-12(fp)
 8010c34:	10800317 	ldw	r2,12(r2)
 8010c38:	e0fffd17 	ldw	r3,-12(fp)
 8010c3c:	18c00517 	ldw	r3,20(r3)
 8010c40:	1809883a 	mov	r4,r3
 8010c44:	103ee83a 	callr	r2
 8010c48:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8010c4c:	e0bfff17 	ldw	r2,-4(fp)
 8010c50:	1000031e 	bne	r2,zero,8010c60 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010c54:	e13ffd17 	ldw	r4,-12(fp)
 8010c58:	8010b240 	call	8010b24 <alt_alarm_stop>
 8010c5c:	00000d06 	br	8010c94 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8010c60:	e0bffd17 	ldw	r2,-12(fp)
 8010c64:	10c00217 	ldw	r3,8(r2)
 8010c68:	e0bfff17 	ldw	r2,-4(fp)
 8010c6c:	1887883a 	add	r3,r3,r2
 8010c70:	e0bffd17 	ldw	r2,-12(fp)
 8010c74:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010c78:	e0bffd17 	ldw	r2,-12(fp)
 8010c7c:	10c00217 	ldw	r3,8(r2)
 8010c80:	d0a6e017 	ldw	r2,-25728(gp)
 8010c84:	1880032e 	bgeu	r3,r2,8010c94 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010c88:	e0bffd17 	ldw	r2,-12(fp)
 8010c8c:	00c00044 	movi	r3,1
 8010c90:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010c94:	e0bffe17 	ldw	r2,-8(fp)
 8010c98:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010c9c:	e0fffd17 	ldw	r3,-12(fp)
 8010ca0:	d0a01104 	addi	r2,gp,-32700
 8010ca4:	18bfcf1e 	bne	r3,r2,8010be4 <__alt_data_end+0xf8010be4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010ca8:	0001883a 	nop
}
 8010cac:	e037883a 	mov	sp,fp
 8010cb0:	dfc00117 	ldw	ra,4(sp)
 8010cb4:	df000017 	ldw	fp,0(sp)
 8010cb8:	dec00204 	addi	sp,sp,8
 8010cbc:	f800283a 	ret

08010cc0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8010cc0:	deffff04 	addi	sp,sp,-4
 8010cc4:	df000015 	stw	fp,0(sp)
 8010cc8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8010ccc:	000170fa 	wrctl	ienable,zero
}
 8010cd0:	e037883a 	mov	sp,fp
 8010cd4:	df000017 	ldw	fp,0(sp)
 8010cd8:	dec00104 	addi	sp,sp,4
 8010cdc:	f800283a 	ret

08010ce0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8010ce0:	defffa04 	addi	sp,sp,-24
 8010ce4:	dfc00515 	stw	ra,20(sp)
 8010ce8:	df000415 	stw	fp,16(sp)
 8010cec:	df000404 	addi	fp,sp,16
 8010cf0:	e13ffe15 	stw	r4,-8(fp)
 8010cf4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8010cf8:	e0bfff17 	ldw	r2,-4(fp)
 8010cfc:	10800017 	ldw	r2,0(r2)
 8010d00:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8010d04:	e13ffe17 	ldw	r4,-8(fp)
 8010d08:	800238c0 	call	800238c <strlen>
 8010d0c:	10800044 	addi	r2,r2,1
 8010d10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010d14:	00000d06 	br	8010d4c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010d18:	e0bffc17 	ldw	r2,-16(fp)
 8010d1c:	10c00217 	ldw	r3,8(r2)
 8010d20:	e0bffd17 	ldw	r2,-12(fp)
 8010d24:	1809883a 	mov	r4,r3
 8010d28:	e17ffe17 	ldw	r5,-8(fp)
 8010d2c:	100d883a 	mov	r6,r2
 8010d30:	8010fa40 	call	8010fa4 <memcmp>
 8010d34:	1000021e 	bne	r2,zero,8010d40 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010d38:	e0bffc17 	ldw	r2,-16(fp)
 8010d3c:	00000706 	br	8010d5c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8010d40:	e0bffc17 	ldw	r2,-16(fp)
 8010d44:	10800017 	ldw	r2,0(r2)
 8010d48:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010d4c:	e0fffc17 	ldw	r3,-16(fp)
 8010d50:	e0bfff17 	ldw	r2,-4(fp)
 8010d54:	18bff01e 	bne	r3,r2,8010d18 <__alt_data_end+0xf8010d18>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8010d58:	0005883a 	mov	r2,zero
}
 8010d5c:	e037883a 	mov	sp,fp
 8010d60:	dfc00117 	ldw	ra,4(sp)
 8010d64:	df000017 	ldw	fp,0(sp)
 8010d68:	dec00204 	addi	sp,sp,8
 8010d6c:	f800283a 	ret

08010d70 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8010d70:	defffb04 	addi	sp,sp,-20
 8010d74:	dfc00415 	stw	ra,16(sp)
 8010d78:	df000315 	stw	fp,12(sp)
 8010d7c:	df000304 	addi	fp,sp,12
 8010d80:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8010d84:	00820074 	movhi	r2,2049
 8010d88:	108e1504 	addi	r2,r2,14420
 8010d8c:	10800017 	ldw	r2,0(r2)
 8010d90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010d94:	00003106 	br	8010e5c <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8010d98:	e0bffd17 	ldw	r2,-12(fp)
 8010d9c:	10800217 	ldw	r2,8(r2)
 8010da0:	1009883a 	mov	r4,r2
 8010da4:	800238c0 	call	800238c <strlen>
 8010da8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8010dac:	e0bffd17 	ldw	r2,-12(fp)
 8010db0:	10c00217 	ldw	r3,8(r2)
 8010db4:	e0bffe17 	ldw	r2,-8(fp)
 8010db8:	10bfffc4 	addi	r2,r2,-1
 8010dbc:	1885883a 	add	r2,r3,r2
 8010dc0:	10800003 	ldbu	r2,0(r2)
 8010dc4:	10803fcc 	andi	r2,r2,255
 8010dc8:	1080201c 	xori	r2,r2,128
 8010dcc:	10bfe004 	addi	r2,r2,-128
 8010dd0:	10800bd8 	cmpnei	r2,r2,47
 8010dd4:	1000031e 	bne	r2,zero,8010de4 <alt_find_file+0x74>
    {
      len -= 1;
 8010dd8:	e0bffe17 	ldw	r2,-8(fp)
 8010ddc:	10bfffc4 	addi	r2,r2,-1
 8010de0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010de4:	e0bffe17 	ldw	r2,-8(fp)
 8010de8:	e0ffff17 	ldw	r3,-4(fp)
 8010dec:	1885883a 	add	r2,r3,r2
 8010df0:	10800003 	ldbu	r2,0(r2)
 8010df4:	10803fcc 	andi	r2,r2,255
 8010df8:	1080201c 	xori	r2,r2,128
 8010dfc:	10bfe004 	addi	r2,r2,-128
 8010e00:	10800be0 	cmpeqi	r2,r2,47
 8010e04:	1000081e 	bne	r2,zero,8010e28 <alt_find_file+0xb8>
 8010e08:	e0bffe17 	ldw	r2,-8(fp)
 8010e0c:	e0ffff17 	ldw	r3,-4(fp)
 8010e10:	1885883a 	add	r2,r3,r2
 8010e14:	10800003 	ldbu	r2,0(r2)
 8010e18:	10803fcc 	andi	r2,r2,255
 8010e1c:	1080201c 	xori	r2,r2,128
 8010e20:	10bfe004 	addi	r2,r2,-128
 8010e24:	10000a1e 	bne	r2,zero,8010e50 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8010e28:	e0bffd17 	ldw	r2,-12(fp)
 8010e2c:	10c00217 	ldw	r3,8(r2)
 8010e30:	e0bffe17 	ldw	r2,-8(fp)
 8010e34:	1809883a 	mov	r4,r3
 8010e38:	e17fff17 	ldw	r5,-4(fp)
 8010e3c:	100d883a 	mov	r6,r2
 8010e40:	8010fa40 	call	8010fa4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010e44:	1000021e 	bne	r2,zero,8010e50 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8010e48:	e0bffd17 	ldw	r2,-12(fp)
 8010e4c:	00000806 	br	8010e70 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8010e50:	e0bffd17 	ldw	r2,-12(fp)
 8010e54:	10800017 	ldw	r2,0(r2)
 8010e58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010e5c:	e0fffd17 	ldw	r3,-12(fp)
 8010e60:	00820074 	movhi	r2,2049
 8010e64:	108e1504 	addi	r2,r2,14420
 8010e68:	18bfcb1e 	bne	r3,r2,8010d98 <__alt_data_end+0xf8010d98>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8010e6c:	0005883a 	mov	r2,zero
}
 8010e70:	e037883a 	mov	sp,fp
 8010e74:	dfc00117 	ldw	ra,4(sp)
 8010e78:	df000017 	ldw	fp,0(sp)
 8010e7c:	dec00204 	addi	sp,sp,8
 8010e80:	f800283a 	ret

08010e84 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8010e84:	defffa04 	addi	sp,sp,-24
 8010e88:	dfc00515 	stw	ra,20(sp)
 8010e8c:	df000415 	stw	fp,16(sp)
 8010e90:	dc000315 	stw	r16,12(sp)
 8010e94:	df000404 	addi	fp,sp,16
 8010e98:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8010e9c:	00bffa04 	movi	r2,-24
 8010ea0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010ea4:	e03ffc15 	stw	zero,-16(fp)
 8010ea8:	00002106 	br	8010f30 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8010eac:	04020074 	movhi	r16,2049
 8010eb0:	84099404 	addi	r16,r16,9808
 8010eb4:	e0bffc17 	ldw	r2,-16(fp)
 8010eb8:	1009883a 	mov	r4,r2
 8010ebc:	01400304 	movi	r5,12
 8010ec0:	800c3600 	call	800c360 <__mulsi3>
 8010ec4:	8085883a 	add	r2,r16,r2
 8010ec8:	10800017 	ldw	r2,0(r2)
 8010ecc:	1000151e 	bne	r2,zero,8010f24 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8010ed0:	04020074 	movhi	r16,2049
 8010ed4:	84099404 	addi	r16,r16,9808
 8010ed8:	e0bffc17 	ldw	r2,-16(fp)
 8010edc:	1009883a 	mov	r4,r2
 8010ee0:	01400304 	movi	r5,12
 8010ee4:	800c3600 	call	800c360 <__mulsi3>
 8010ee8:	8085883a 	add	r2,r16,r2
 8010eec:	e0fffe17 	ldw	r3,-8(fp)
 8010ef0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8010ef4:	00820074 	movhi	r2,2049
 8010ef8:	108e1904 	addi	r2,r2,14436
 8010efc:	10c00017 	ldw	r3,0(r2)
 8010f00:	e0bffc17 	ldw	r2,-16(fp)
 8010f04:	1880040e 	bge	r3,r2,8010f18 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8010f08:	00820074 	movhi	r2,2049
 8010f0c:	108e1904 	addi	r2,r2,14436
 8010f10:	e0fffc17 	ldw	r3,-16(fp)
 8010f14:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8010f18:	e0bffc17 	ldw	r2,-16(fp)
 8010f1c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8010f20:	00000606 	br	8010f3c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010f24:	e0bffc17 	ldw	r2,-16(fp)
 8010f28:	10800044 	addi	r2,r2,1
 8010f2c:	e0bffc15 	stw	r2,-16(fp)
 8010f30:	e0bffc17 	ldw	r2,-16(fp)
 8010f34:	10800810 	cmplti	r2,r2,32
 8010f38:	103fdc1e 	bne	r2,zero,8010eac <__alt_data_end+0xf8010eac>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8010f3c:	e0bffd17 	ldw	r2,-12(fp)
}
 8010f40:	e6ffff04 	addi	sp,fp,-4
 8010f44:	dfc00217 	ldw	ra,8(sp)
 8010f48:	df000117 	ldw	fp,4(sp)
 8010f4c:	dc000017 	ldw	r16,0(sp)
 8010f50:	dec00304 	addi	sp,sp,12
 8010f54:	f800283a 	ret

08010f58 <atexit>:
 8010f58:	200b883a 	mov	r5,r4
 8010f5c:	000d883a 	mov	r6,zero
 8010f60:	0009883a 	mov	r4,zero
 8010f64:	000f883a 	mov	r7,zero
 8010f68:	80110201 	jmpi	8011020 <__register_exitproc>

08010f6c <exit>:
 8010f6c:	defffe04 	addi	sp,sp,-8
 8010f70:	000b883a 	mov	r5,zero
 8010f74:	dc000015 	stw	r16,0(sp)
 8010f78:	dfc00115 	stw	ra,4(sp)
 8010f7c:	2021883a 	mov	r16,r4
 8010f80:	801113c0 	call	801113c <__call_exitprocs>
 8010f84:	00820074 	movhi	r2,2049
 8010f88:	108e0f04 	addi	r2,r2,14396
 8010f8c:	11000017 	ldw	r4,0(r2)
 8010f90:	20800f17 	ldw	r2,60(r4)
 8010f94:	10000126 	beq	r2,zero,8010f9c <exit+0x30>
 8010f98:	103ee83a 	callr	r2
 8010f9c:	8009883a 	mov	r4,r16
 8010fa0:	80112e00 	call	80112e0 <_exit>

08010fa4 <memcmp>:
 8010fa4:	01c000c4 	movi	r7,3
 8010fa8:	3980192e 	bgeu	r7,r6,8011010 <memcmp+0x6c>
 8010fac:	2144b03a 	or	r2,r4,r5
 8010fb0:	11c4703a 	and	r2,r2,r7
 8010fb4:	10000f26 	beq	r2,zero,8010ff4 <memcmp+0x50>
 8010fb8:	21c00003 	ldbu	r7,0(r4)
 8010fbc:	28800003 	ldbu	r2,0(r5)
 8010fc0:	3880151e 	bne	r7,r2,8011018 <memcmp+0x74>
 8010fc4:	30ffff84 	addi	r3,r6,-2
 8010fc8:	01bfffc4 	movi	r6,-1
 8010fcc:	00000406 	br	8010fe0 <memcmp+0x3c>
 8010fd0:	21c00003 	ldbu	r7,0(r4)
 8010fd4:	28800003 	ldbu	r2,0(r5)
 8010fd8:	18ffffc4 	addi	r3,r3,-1
 8010fdc:	38800e1e 	bne	r7,r2,8011018 <memcmp+0x74>
 8010fe0:	21000044 	addi	r4,r4,1
 8010fe4:	29400044 	addi	r5,r5,1
 8010fe8:	19bff91e 	bne	r3,r6,8010fd0 <__alt_data_end+0xf8010fd0>
 8010fec:	0005883a 	mov	r2,zero
 8010ff0:	f800283a 	ret
 8010ff4:	20c00017 	ldw	r3,0(r4)
 8010ff8:	28800017 	ldw	r2,0(r5)
 8010ffc:	1880041e 	bne	r3,r2,8011010 <memcmp+0x6c>
 8011000:	31bfff04 	addi	r6,r6,-4
 8011004:	21000104 	addi	r4,r4,4
 8011008:	29400104 	addi	r5,r5,4
 801100c:	39bff936 	bltu	r7,r6,8010ff4 <__alt_data_end+0xf8010ff4>
 8011010:	303fe91e 	bne	r6,zero,8010fb8 <__alt_data_end+0xf8010fb8>
 8011014:	003ff506 	br	8010fec <__alt_data_end+0xf8010fec>
 8011018:	3885c83a 	sub	r2,r7,r2
 801101c:	f800283a 	ret

08011020 <__register_exitproc>:
 8011020:	defffa04 	addi	sp,sp,-24
 8011024:	00820074 	movhi	r2,2049
 8011028:	108e0f04 	addi	r2,r2,14396
 801102c:	dc000315 	stw	r16,12(sp)
 8011030:	14000017 	ldw	r16,0(r2)
 8011034:	dc400415 	stw	r17,16(sp)
 8011038:	dfc00515 	stw	ra,20(sp)
 801103c:	80805217 	ldw	r2,328(r16)
 8011040:	2023883a 	mov	r17,r4
 8011044:	10003a26 	beq	r2,zero,8011130 <__register_exitproc+0x110>
 8011048:	10c00117 	ldw	r3,4(r2)
 801104c:	020007c4 	movi	r8,31
 8011050:	40c0190e 	bge	r8,r3,80110b8 <__register_exitproc+0x98>
 8011054:	00800034 	movhi	r2,0
 8011058:	10800004 	addi	r2,r2,0
 801105c:	1000061e 	bne	r2,zero,8011078 <__register_exitproc+0x58>
 8011060:	00bfffc4 	movi	r2,-1
 8011064:	dfc00517 	ldw	ra,20(sp)
 8011068:	dc400417 	ldw	r17,16(sp)
 801106c:	dc000317 	ldw	r16,12(sp)
 8011070:	dec00604 	addi	sp,sp,24
 8011074:	f800283a 	ret
 8011078:	01006404 	movi	r4,400
 801107c:	d9400015 	stw	r5,0(sp)
 8011080:	d9800115 	stw	r6,4(sp)
 8011084:	d9c00215 	stw	r7,8(sp)
 8011088:	00000000 	call	0 <__reset-0x8000000>
 801108c:	d9400017 	ldw	r5,0(sp)
 8011090:	d9800117 	ldw	r6,4(sp)
 8011094:	d9c00217 	ldw	r7,8(sp)
 8011098:	103ff126 	beq	r2,zero,8011060 <__alt_data_end+0xf8011060>
 801109c:	81005217 	ldw	r4,328(r16)
 80110a0:	10000115 	stw	zero,4(r2)
 80110a4:	0007883a 	mov	r3,zero
 80110a8:	11000015 	stw	r4,0(r2)
 80110ac:	80805215 	stw	r2,328(r16)
 80110b0:	10006215 	stw	zero,392(r2)
 80110b4:	10006315 	stw	zero,396(r2)
 80110b8:	88000d1e 	bne	r17,zero,80110f0 <__register_exitproc+0xd0>
 80110bc:	19000084 	addi	r4,r3,2
 80110c0:	2109883a 	add	r4,r4,r4
 80110c4:	18c00044 	addi	r3,r3,1
 80110c8:	2109883a 	add	r4,r4,r4
 80110cc:	10c00115 	stw	r3,4(r2)
 80110d0:	1105883a 	add	r2,r2,r4
 80110d4:	11400015 	stw	r5,0(r2)
 80110d8:	0005883a 	mov	r2,zero
 80110dc:	dfc00517 	ldw	ra,20(sp)
 80110e0:	dc400417 	ldw	r17,16(sp)
 80110e4:	dc000317 	ldw	r16,12(sp)
 80110e8:	dec00604 	addi	sp,sp,24
 80110ec:	f800283a 	ret
 80110f0:	18c9883a 	add	r4,r3,r3
 80110f4:	2109883a 	add	r4,r4,r4
 80110f8:	1109883a 	add	r4,r2,r4
 80110fc:	21802215 	stw	r6,136(r4)
 8011100:	01800044 	movi	r6,1
 8011104:	12006217 	ldw	r8,392(r2)
 8011108:	30cc983a 	sll	r6,r6,r3
 801110c:	4190b03a 	or	r8,r8,r6
 8011110:	12006215 	stw	r8,392(r2)
 8011114:	21c04215 	stw	r7,264(r4)
 8011118:	01000084 	movi	r4,2
 801111c:	893fe71e 	bne	r17,r4,80110bc <__alt_data_end+0xf80110bc>
 8011120:	11006317 	ldw	r4,396(r2)
 8011124:	218cb03a 	or	r6,r4,r6
 8011128:	11806315 	stw	r6,396(r2)
 801112c:	003fe306 	br	80110bc <__alt_data_end+0xf80110bc>
 8011130:	80805304 	addi	r2,r16,332
 8011134:	80805215 	stw	r2,328(r16)
 8011138:	003fc306 	br	8011048 <__alt_data_end+0xf8011048>

0801113c <__call_exitprocs>:
 801113c:	00820074 	movhi	r2,2049
 8011140:	108e0f04 	addi	r2,r2,14396
 8011144:	10800017 	ldw	r2,0(r2)
 8011148:	defff304 	addi	sp,sp,-52
 801114c:	df000b15 	stw	fp,44(sp)
 8011150:	d8800015 	stw	r2,0(sp)
 8011154:	10805204 	addi	r2,r2,328
 8011158:	dd400815 	stw	r21,32(sp)
 801115c:	dfc00c15 	stw	ra,48(sp)
 8011160:	ddc00a15 	stw	r23,40(sp)
 8011164:	dd800915 	stw	r22,36(sp)
 8011168:	dd000715 	stw	r20,28(sp)
 801116c:	dcc00615 	stw	r19,24(sp)
 8011170:	dc800515 	stw	r18,20(sp)
 8011174:	dc400415 	stw	r17,16(sp)
 8011178:	dc000315 	stw	r16,12(sp)
 801117c:	d9000115 	stw	r4,4(sp)
 8011180:	2839883a 	mov	fp,r5
 8011184:	d8800215 	stw	r2,8(sp)
 8011188:	057fffc4 	movi	r21,-1
 801118c:	d8800017 	ldw	r2,0(sp)
 8011190:	14805217 	ldw	r18,328(r2)
 8011194:	90001826 	beq	r18,zero,80111f8 <__call_exitprocs+0xbc>
 8011198:	ddc00217 	ldw	r23,8(sp)
 801119c:	90c00117 	ldw	r3,4(r18)
 80111a0:	1c3fffc4 	addi	r16,r3,-1
 80111a4:	80001116 	blt	r16,zero,80111ec <__call_exitprocs+0xb0>
 80111a8:	18c00044 	addi	r3,r3,1
 80111ac:	8427883a 	add	r19,r16,r16
 80111b0:	18c7883a 	add	r3,r3,r3
 80111b4:	95802204 	addi	r22,r18,136
 80111b8:	9ce7883a 	add	r19,r19,r19
 80111bc:	18c7883a 	add	r3,r3,r3
 80111c0:	b4e7883a 	add	r19,r22,r19
 80111c4:	90e3883a 	add	r17,r18,r3
 80111c8:	e0001726 	beq	fp,zero,8011228 <__call_exitprocs+0xec>
 80111cc:	8c87c83a 	sub	r3,r17,r18
 80111d0:	b0c7883a 	add	r3,r22,r3
 80111d4:	18c01e17 	ldw	r3,120(r3)
 80111d8:	1f001326 	beq	r3,fp,8011228 <__call_exitprocs+0xec>
 80111dc:	843fffc4 	addi	r16,r16,-1
 80111e0:	9cffff04 	addi	r19,r19,-4
 80111e4:	8c7fff04 	addi	r17,r17,-4
 80111e8:	857ff71e 	bne	r16,r21,80111c8 <__alt_data_end+0xf80111c8>
 80111ec:	00800034 	movhi	r2,0
 80111f0:	10800004 	addi	r2,r2,0
 80111f4:	10002a1e 	bne	r2,zero,80112a0 <__call_exitprocs+0x164>
 80111f8:	dfc00c17 	ldw	ra,48(sp)
 80111fc:	df000b17 	ldw	fp,44(sp)
 8011200:	ddc00a17 	ldw	r23,40(sp)
 8011204:	dd800917 	ldw	r22,36(sp)
 8011208:	dd400817 	ldw	r21,32(sp)
 801120c:	dd000717 	ldw	r20,28(sp)
 8011210:	dcc00617 	ldw	r19,24(sp)
 8011214:	dc800517 	ldw	r18,20(sp)
 8011218:	dc400417 	ldw	r17,16(sp)
 801121c:	dc000317 	ldw	r16,12(sp)
 8011220:	dec00d04 	addi	sp,sp,52
 8011224:	f800283a 	ret
 8011228:	91000117 	ldw	r4,4(r18)
 801122c:	88c00017 	ldw	r3,0(r17)
 8011230:	213fffc4 	addi	r4,r4,-1
 8011234:	24001526 	beq	r4,r16,801128c <__call_exitprocs+0x150>
 8011238:	88000015 	stw	zero,0(r17)
 801123c:	183fe726 	beq	r3,zero,80111dc <__alt_data_end+0xf80111dc>
 8011240:	00800044 	movi	r2,1
 8011244:	1408983a 	sll	r4,r2,r16
 8011248:	91406217 	ldw	r5,392(r18)
 801124c:	95000117 	ldw	r20,4(r18)
 8011250:	214a703a 	and	r5,r4,r5
 8011254:	28000b26 	beq	r5,zero,8011284 <__call_exitprocs+0x148>
 8011258:	91406317 	ldw	r5,396(r18)
 801125c:	2148703a 	and	r4,r4,r5
 8011260:	20000c1e 	bne	r4,zero,8011294 <__call_exitprocs+0x158>
 8011264:	99400017 	ldw	r5,0(r19)
 8011268:	d9000117 	ldw	r4,4(sp)
 801126c:	183ee83a 	callr	r3
 8011270:	90c00117 	ldw	r3,4(r18)
 8011274:	1d3fc51e 	bne	r3,r20,801118c <__alt_data_end+0xf801118c>
 8011278:	b8c00017 	ldw	r3,0(r23)
 801127c:	1cbfd726 	beq	r3,r18,80111dc <__alt_data_end+0xf80111dc>
 8011280:	003fc206 	br	801118c <__alt_data_end+0xf801118c>
 8011284:	183ee83a 	callr	r3
 8011288:	003ff906 	br	8011270 <__alt_data_end+0xf8011270>
 801128c:	94000115 	stw	r16,4(r18)
 8011290:	003fea06 	br	801123c <__alt_data_end+0xf801123c>
 8011294:	99000017 	ldw	r4,0(r19)
 8011298:	183ee83a 	callr	r3
 801129c:	003ff406 	br	8011270 <__alt_data_end+0xf8011270>
 80112a0:	90c00117 	ldw	r3,4(r18)
 80112a4:	1800081e 	bne	r3,zero,80112c8 <__call_exitprocs+0x18c>
 80112a8:	90c00017 	ldw	r3,0(r18)
 80112ac:	18000a26 	beq	r3,zero,80112d8 <__call_exitprocs+0x19c>
 80112b0:	9009883a 	mov	r4,r18
 80112b4:	b8c00015 	stw	r3,0(r23)
 80112b8:	00000000 	call	0 <__reset-0x8000000>
 80112bc:	bc800017 	ldw	r18,0(r23)
 80112c0:	903fb61e 	bne	r18,zero,801119c <__alt_data_end+0xf801119c>
 80112c4:	003fcc06 	br	80111f8 <__alt_data_end+0xf80111f8>
 80112c8:	90c00017 	ldw	r3,0(r18)
 80112cc:	902f883a 	mov	r23,r18
 80112d0:	1825883a 	mov	r18,r3
 80112d4:	003ffa06 	br	80112c0 <__alt_data_end+0xf80112c0>
 80112d8:	0007883a 	mov	r3,zero
 80112dc:	003ffb06 	br	80112cc <__alt_data_end+0xf80112cc>

080112e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80112e0:	defffd04 	addi	sp,sp,-12
 80112e4:	df000215 	stw	fp,8(sp)
 80112e8:	df000204 	addi	fp,sp,8
 80112ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80112f0:	0001883a 	nop
 80112f4:	e0bfff17 	ldw	r2,-4(fp)
 80112f8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80112fc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8011300:	10000226 	beq	r2,zero,801130c <_exit+0x2c>
    ALT_SIM_FAIL();
 8011304:	002af070 	cmpltui	zero,zero,43969
 8011308:	00000106 	br	8011310 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 801130c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8011310:	003fff06 	br	8011310 <__alt_data_end+0xf8011310>
