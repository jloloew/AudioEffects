
final_project_app.elf:     file format elf32-littlenios2
final_project_app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00005458 memsz 0x00005458 flags r-x
    LOAD off    0x00006478 vaddr 0x10005478 paddr 0x10006ef4 align 2**12
         filesz 0x00001a7c memsz 0x00001a7c flags rw-
    LOAD off    0x00008970 vaddr 0x10008970 paddr 0x10008970 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005270  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  1000542c  1000542c  0000642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a7c  10005478  10006ef4  00006478  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  10008970  10008970  00008970  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00007ef4  2**0
                  CONTENTS
  7 .sdram        00000000  10008ac0  10008ac0  00007ef4  2**0
                  CONTENTS
  8 .comment      0000005c  00000000  00000000  00007ef4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000930  00000000  00000000  00007f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00015ee4  00000000  00000000  00008880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005c49  00000000  00000000  0001e764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006821  00000000  00000000  000243ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001438  00000000  00000000  0002abd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002266  00000000  00000000  0002c008  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000048a8  00000000  00000000  0002e26e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00032b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002f0  00000000  00000000  00032b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00035309  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0003530c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00035318  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00035319  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003531a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003531e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00035322  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00035326  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00035331  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0003533c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00035347  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002e  00000000  00000000  00035358  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00061250  00000000  00000000  00035386  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
1000542c l    d  .rodata	00000000 .rodata
10005478 l    d  .rwdata	00000000 .rwdata
10008970 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10008ac0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_app_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
10006eac l     O .rwdata	00000004 LEDG
10006eb0 l     O .rwdata	00000004 LEDR
10006eb4 l     O .rwdata	00000004 AUDIO
10006eb8 l     O .rwdata	00000004 AUDIO_CONFIG
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
10005478 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10001cb4 l     F .text	00000008 __fp_lock
10001cbc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
10002da0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10002ec0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10002eec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10002ff0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
100030e8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100031d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100033b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10006ee4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000362c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10003770 l     F .text	00000038 alt_dev_reg
10005e4c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10003a48 l     F .text	000001fc altera_avalon_jtag_uart_irq
10003c44 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100043b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10004844 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000499c l     F .text	00000050 alt_get_errno
100049ec l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10002c3c g     F .text	00000064 _isatty_r
100032fc g     F .text	00000078 alt_main
10000248 g     F .text	000000b8 _puts_r
100089c0 g     O .bss	00000100 alt_irq
10002ca0 g     F .text	0000006c _lseek_r
10006ef4 g       *ABS*	00000000 __flash_rwdata_start
10008ac0 g       *ABS*	00000000 __alt_heap_start
10002964 g     F .text	0000005c __sseek
10001d60 g     F .text	0000019c __sinit
10001cd0 g     F .text	00000078 __sfmoreglue
10003394 g     F .text	00000020 __malloc_unlock
10001204 g     F .text	0000013c memmove
10001d48 g     F .text	00000018 _cleanup
10004dd8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10002bd4 g     F .text	00000068 _fstat_r
1000897c g     O .bss	00000004 errno
100028e0 g     F .text	00000008 __seofread
10008984 g     O .bss	00000004 alt_argv
1000eeac g       *ABS*	00000000 _gp
10005ccc g     O .rwdata	00000180 alt_fd_list
10004df8 g     F .text	00000090 alt_find_dev
100010f8 g     F .text	0000010c memcpy
10001cc4 g     F .text	0000000c _cleanup_r
10004924 g     F .text	00000078 alt_io_redirect
1000542c g       *ABS*	00000000 __DTOR_END__
10000300 g     F .text	00000014 puts
10003e3c g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10003040 g     F .text	000000a8 isatty
10008978 g     O .bss	00000004 __malloc_top_pad
100003a0 g     F .text	000004ac __sfvwrite_r
100018a4 g     F .text	00000064 _sbrk_r
10002d0c g     F .text	0000006c _read_r
10006edc g     O .rwdata	00000004 alt_max_fd
10002a98 g     F .text	00000128 _fclose_r
10001c84 g     F .text	00000030 fflush
10008974 g     O .bss	00000004 __malloc_max_sbrked_mem
10003224 g     F .text	000000d8 lseek
10006ebc g     O .rwdata	00000004 _global_impure_ptr
10001340 g     F .text	00000564 _realloc_r
10008ac0 g       *ABS*	00000000 __bss_end
10004754 g     F .text	000000f0 alt_iic_isr_register
10004cd4 g     F .text	00000104 alt_tick
10002028 g     F .text	00000018 __fp_lock_all
10004708 g     F .text	0000004c alt_ic_irq_enabled
10004c3c g     F .text	00000098 alt_alarm_stop
1000898c g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10005ca4 g     O .rwdata	00000028 alt_dev_null
1000439c g     F .text	0000001c alt_dcache_flush_all
10006ef4 g       *ABS*	00000000 __ram_rwdata_end
10006ed4 g     O .rwdata	00000008 alt_dev_list
1000367c g     F .text	000000f4 write
10005478 g       *ABS*	00000000 __ram_rodata_end
10002f3c g     F .text	000000b4 fstat
10008ac0 g       *ABS*	00000000 end
10003988 g     F .text	000000c0 altera_avalon_jtag_uart_init
1000542c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10004044 g     F .text	00000218 altera_avalon_jtag_uart_write
10002018 g     F .text	00000004 __sfp_lock_acquire
10001010 g     F .text	000000e8 memchr
10002194 g     F .text	000002d0 _free_r
10005254 g     F .text	000001a4 __call_exitprocs
10006ec4 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
10008990 g     O .bss	00000004 _alt_tick_rate
10008994 g     O .bss	00000004 _alt_nticks
10003404 g     F .text	000000f8 read
100037dc g     F .text	00000048 alt_sys_init
10005138 g     F .text	0000011c __register_exitproc
10003ce8 g     F .text	00000068 altera_avalon_jtag_uart_close
10002d78 g     F .text	00000028 .hidden __mulsi3
10005478 g       *ABS*	00000000 __ram_rwdata_start
1000542c g       *ABS*	00000000 __ram_rodata_start
10008998 g     O .bss	00000028 __malloc_current_mallinfo
10003824 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10004f9c g     F .text	000000d4 alt_get_fd
10002a34 g     F .text	00000064 _close_r
100050bc g     F .text	0000007c memcmp
100038e4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10008ac0 g       *ABS*	00000000 __alt_stack_base
10003934 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10001908 g     F .text	00000138 __swsetup_r
10001efc g     F .text	0000011c __sfp
1000589c g     O .rwdata	00000408 __malloc_av_
10002024 g     F .text	00000004 __sinit_lock_release
1000288c g     F .text	00000054 __sread
10004e88 g     F .text	00000114 alt_find_file
10004408 g     F .text	000000a0 alt_dev_llist_insert
10003374 g     F .text	00000020 __malloc_lock
1000357c g     F .text	000000b0 sbrk
10001a40 g     F .text	00000244 _fflush_r
10008970 g       *ABS*	00000000 __bss_start
10002778 g     F .text	00000114 memset
100001f8 g     F .text	00000050 main
10008988 g     O .bss	00000004 alt_envp
10008970 g     O .bss	00000004 __malloc_max_total_mem
10003884 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100029c0 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10002bc0 g     F .text	00000014 fclose
1000084c g     F .text	000007c4 _malloc_r
10006ee0 g     O .rwdata	00000004 alt_errno
10002464 g     F .text	000000a8 _fwalk
10002058 g     F .text	0000013c _malloc_trim_r
1000542c g       *ABS*	00000000 __CTOR_END__
1000542c g       *ABS*	00000000 __flash_rodata_start
1000542c g       *ABS*	00000000 __DTOR_LIST__
100037a8 g     F .text	00000034 alt_irq_init
100034fc g     F .text	00000080 alt_release_fd
10005070 g     F .text	00000014 atexit
100029c8 g     F .text	0000006c _write_r
10006ec0 g     O .rwdata	00000004 _impure_ptr
10008980 g     O .bss	00000004 alt_argc
10004504 g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
10002040 g     F .text	00000018 __fp_unlock_all
10006ecc g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000457c g     F .text	00000050 alt_ic_isr_register
10006ef4 g       *ABS*	00000000 _edata
10008ac0 g       *ABS*	00000000 _end
100001bc g       *ABS*	00000000 __ram_exceptions_end
10003d50 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10004668 g     F .text	000000a0 alt_ic_irq_disable
100028e8 g     F .text	0000007c __swrite
10006ec8 g     O .rwdata	00000004 __malloc_trim_threshold
10005084 g     F .text	00000038 exit
1000250c g     F .text	000000b8 _fwalk_reent
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000201c g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100053f8 g     F .text	00000034 _exit
1000425c g     F .text	00000140 alt_alarm_start
100025c4 g     F .text	000001b4 __smakebuf_r
10000314 g     F .text	0000008c strlen
10004ae0 g     F .text	0000015c open
10004560 g     F .text	0000001c alt_icache_flush_all
10006ee8 g     O .rwdata	00000004 alt_priority_mask
100045cc g     F .text	0000009c alt_ic_irq_enable
10006eec g     O .rwdata	00000008 alt_alarm_list
100044a8 g     F .text	0000005c _do_ctors
10002df0 g     F .text	000000d0 close
10003154 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
10002020 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40074 	movhi	r3,4097
10000130:	18e27004 	addi	r3,r3,-30272
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10800017 	ldw	r2,0(r2)
10000144:	01040074 	movhi	r4,4097
10000148:	21227004 	addi	r4,r4,-30272
1000014c:	e0fffd17 	ldw	r3,-12(fp)
10000150:	180690fa 	slli	r3,r3,3
10000154:	20c7883a 	add	r3,r4,r3
10000158:	18c00104 	addi	r3,r3,4
1000015c:	18c00017 	ldw	r3,0(r3)
10000160:	1809883a 	mov	r4,r3
10000164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
100001c8:	d6bbab14 	ori	gp,gp,61100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
100001d0:	10a25c14 	ori	r2,r2,35184

    movhi r3, %hi(__bss_end)
100001d4:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
100001d8:	18e2b014 	ori	r3,r3,35520

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	00031540 	call	10003154 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	00032fc0 	call	100032fc <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <main>:
static volatile int *LEDR			= (int *)0x00000070; // 18 LEDs
static volatile int *AUDIO			= (int *)0x00000040;
static volatile int *AUDIO_CONFIG	= (int *)0x00000050;

int main()
{
100001f8:	defffe04 	addi	sp,sp,-8
100001fc:	dfc00115 	stw	ra,4(sp)
10000200:	df000015 	stw	fp,0(sp)
10000204:	d839883a 	mov	fp,sp
	printf("System started.\n");
10000208:	01040034 	movhi	r4,4096
1000020c:	21150b04 	addi	r4,r4,21548
10000210:	00003000 	call	10000300 <puts>
	
	*LEDR = 0xAAAAA;
10000214:	d0a00117 	ldw	r2,-32764(gp)
10000218:	00c002f4 	movhi	r3,11
1000021c:	18eaaa84 	addi	r3,r3,-21846
10000220:	10c00015 	stw	r3,0(r2)
	*LEDG = 0x55;
10000224:	d0a00017 	ldw	r2,-32768(gp)
10000228:	00c01544 	movi	r3,85
1000022c:	10c00015 	stw	r3,0(r2)
	
	return 0;
10000230:	0005883a 	mov	r2,zero
}
10000234:	e037883a 	mov	sp,fp
10000238:	dfc00117 	ldw	ra,4(sp)
1000023c:	df000017 	ldw	fp,0(sp)
10000240:	dec00204 	addi	sp,sp,8
10000244:	f800283a 	ret

10000248 <_puts_r>:
10000248:	defff604 	addi	sp,sp,-40
1000024c:	dc400815 	stw	r17,32(sp)
10000250:	2023883a 	mov	r17,r4
10000254:	2809883a 	mov	r4,r5
10000258:	dc000715 	stw	r16,28(sp)
1000025c:	dfc00915 	stw	ra,36(sp)
10000260:	2821883a 	mov	r16,r5
10000264:	00003140 	call	10000314 <strlen>
10000268:	00c40034 	movhi	r3,4096
1000026c:	18dbb004 	addi	r3,r3,28352
10000270:	18c00017 	ldw	r3,0(r3)
10000274:	11000044 	addi	r4,r2,1
10000278:	d8800115 	stw	r2,4(sp)
1000027c:	18c00217 	ldw	r3,8(r3)
10000280:	00840034 	movhi	r2,4096
10000284:	10950f04 	addi	r2,r2,21564
10000288:	d8800215 	stw	r2,8(sp)
1000028c:	1940030b 	ldhu	r5,12(r3)
10000290:	00800044 	movi	r2,1
10000294:	d8800315 	stw	r2,12(sp)
10000298:	00800084 	movi	r2,2
1000029c:	d8800515 	stw	r2,20(sp)
100002a0:	dc000015 	stw	r16,0(sp)
100002a4:	d9000615 	stw	r4,24(sp)
100002a8:	dec00415 	stw	sp,16(sp)
100002ac:	2888000c 	andi	r2,r5,8192
100002b0:	1000061e 	bne	r2,zero,100002cc <_puts_r+0x84>
100002b4:	19001917 	ldw	r4,100(r3)
100002b8:	00b7ffc4 	movi	r2,-8193
100002bc:	29480014 	ori	r5,r5,8192
100002c0:	2084703a 	and	r2,r4,r2
100002c4:	1940030d 	sth	r5,12(r3)
100002c8:	18801915 	stw	r2,100(r3)
100002cc:	89400217 	ldw	r5,8(r17)
100002d0:	8809883a 	mov	r4,r17
100002d4:	d9800404 	addi	r6,sp,16
100002d8:	00003a00 	call	100003a0 <__sfvwrite_r>
100002dc:	1000061e 	bne	r2,zero,100002f8 <_puts_r+0xb0>
100002e0:	00800284 	movi	r2,10
100002e4:	dfc00917 	ldw	ra,36(sp)
100002e8:	dc400817 	ldw	r17,32(sp)
100002ec:	dc000717 	ldw	r16,28(sp)
100002f0:	dec00a04 	addi	sp,sp,40
100002f4:	f800283a 	ret
100002f8:	00bfffc4 	movi	r2,-1
100002fc:	003ff906 	br	100002e4 <__alt_data_end+0xf80002e4>

10000300 <puts>:
10000300:	00840034 	movhi	r2,4096
10000304:	109bb004 	addi	r2,r2,28352
10000308:	200b883a 	mov	r5,r4
1000030c:	11000017 	ldw	r4,0(r2)
10000310:	00002481 	jmpi	10000248 <_puts_r>

10000314 <strlen>:
10000314:	208000cc 	andi	r2,r4,3
10000318:	10001d26 	beq	r2,zero,10000390 <strlen+0x7c>
1000031c:	20800007 	ldb	r2,0(r4)
10000320:	10001d26 	beq	r2,zero,10000398 <strlen+0x84>
10000324:	2005883a 	mov	r2,r4
10000328:	00000206 	br	10000334 <strlen+0x20>
1000032c:	10c00007 	ldb	r3,0(r2)
10000330:	18001526 	beq	r3,zero,10000388 <strlen+0x74>
10000334:	10800044 	addi	r2,r2,1
10000338:	10c000cc 	andi	r3,r2,3
1000033c:	183ffb1e 	bne	r3,zero,1000032c <__alt_data_end+0xf800032c>
10000340:	10c00017 	ldw	r3,0(r2)
10000344:	01ffbff4 	movhi	r7,65279
10000348:	39ffbfc4 	addi	r7,r7,-257
1000034c:	01a02074 	movhi	r6,32897
10000350:	31a02004 	addi	r6,r6,-32640
10000354:	00000206 	br	10000360 <strlen+0x4c>
10000358:	10800104 	addi	r2,r2,4
1000035c:	10c00017 	ldw	r3,0(r2)
10000360:	19cb883a 	add	r5,r3,r7
10000364:	00c6303a 	nor	r3,zero,r3
10000368:	28c6703a 	and	r3,r5,r3
1000036c:	1986703a 	and	r3,r3,r6
10000370:	183ff926 	beq	r3,zero,10000358 <__alt_data_end+0xf8000358>
10000374:	10c00007 	ldb	r3,0(r2)
10000378:	18000326 	beq	r3,zero,10000388 <strlen+0x74>
1000037c:	10800044 	addi	r2,r2,1
10000380:	10c00007 	ldb	r3,0(r2)
10000384:	183ffd1e 	bne	r3,zero,1000037c <__alt_data_end+0xf800037c>
10000388:	1105c83a 	sub	r2,r2,r4
1000038c:	f800283a 	ret
10000390:	2005883a 	mov	r2,r4
10000394:	003fea06 	br	10000340 <__alt_data_end+0xf8000340>
10000398:	0005883a 	mov	r2,zero
1000039c:	f800283a 	ret

100003a0 <__sfvwrite_r>:
100003a0:	30800217 	ldw	r2,8(r6)
100003a4:	defff404 	addi	sp,sp,-48
100003a8:	dcc00515 	stw	r19,20(sp)
100003ac:	dfc00b15 	stw	ra,44(sp)
100003b0:	df000a15 	stw	fp,40(sp)
100003b4:	ddc00915 	stw	r23,36(sp)
100003b8:	dd800815 	stw	r22,32(sp)
100003bc:	dd400715 	stw	r21,28(sp)
100003c0:	dd000615 	stw	r20,24(sp)
100003c4:	dc800415 	stw	r18,16(sp)
100003c8:	dc400315 	stw	r17,12(sp)
100003cc:	dc000215 	stw	r16,8(sp)
100003d0:	3027883a 	mov	r19,r6
100003d4:	10001d26 	beq	r2,zero,1000044c <__sfvwrite_r+0xac>
100003d8:	2880030b 	ldhu	r2,12(r5)
100003dc:	202b883a 	mov	r21,r4
100003e0:	2821883a 	mov	r16,r5
100003e4:	10c0020c 	andi	r3,r2,8
100003e8:	18002526 	beq	r3,zero,10000480 <__sfvwrite_r+0xe0>
100003ec:	28c00417 	ldw	r3,16(r5)
100003f0:	18002326 	beq	r3,zero,10000480 <__sfvwrite_r+0xe0>
100003f4:	10c0008c 	andi	r3,r2,2
100003f8:	9c400017 	ldw	r17,0(r19)
100003fc:	18002826 	beq	r3,zero,100004a0 <__sfvwrite_r+0x100>
10000400:	0029883a 	mov	r20,zero
10000404:	0025883a 	mov	r18,zero
10000408:	05810004 	movi	r22,1024
1000040c:	a00d883a 	mov	r6,r20
10000410:	a809883a 	mov	r4,r21
10000414:	90004726 	beq	r18,zero,10000534 <__sfvwrite_r+0x194>
10000418:	900f883a 	mov	r7,r18
1000041c:	81400717 	ldw	r5,28(r16)
10000420:	b480012e 	bgeu	r22,r18,10000428 <__sfvwrite_r+0x88>
10000424:	01c10004 	movi	r7,1024
10000428:	80800917 	ldw	r2,36(r16)
1000042c:	103ee83a 	callr	r2
10000430:	00804c0e 	bge	zero,r2,10000564 <__sfvwrite_r+0x1c4>
10000434:	98c00217 	ldw	r3,8(r19)
10000438:	a0a9883a 	add	r20,r20,r2
1000043c:	90a5c83a 	sub	r18,r18,r2
10000440:	1885c83a 	sub	r2,r3,r2
10000444:	98800215 	stw	r2,8(r19)
10000448:	103ff01e 	bne	r2,zero,1000040c <__alt_data_end+0xf800040c>
1000044c:	0005883a 	mov	r2,zero
10000450:	dfc00b17 	ldw	ra,44(sp)
10000454:	df000a17 	ldw	fp,40(sp)
10000458:	ddc00917 	ldw	r23,36(sp)
1000045c:	dd800817 	ldw	r22,32(sp)
10000460:	dd400717 	ldw	r21,28(sp)
10000464:	dd000617 	ldw	r20,24(sp)
10000468:	dcc00517 	ldw	r19,20(sp)
1000046c:	dc800417 	ldw	r18,16(sp)
10000470:	dc400317 	ldw	r17,12(sp)
10000474:	dc000217 	ldw	r16,8(sp)
10000478:	dec00c04 	addi	sp,sp,48
1000047c:	f800283a 	ret
10000480:	a809883a 	mov	r4,r21
10000484:	800b883a 	mov	r5,r16
10000488:	00019080 	call	10001908 <__swsetup_r>
1000048c:	1000e81e 	bne	r2,zero,10000830 <__sfvwrite_r+0x490>
10000490:	8080030b 	ldhu	r2,12(r16)
10000494:	9c400017 	ldw	r17,0(r19)
10000498:	10c0008c 	andi	r3,r2,2
1000049c:	183fd81e 	bne	r3,zero,10000400 <__alt_data_end+0xf8000400>
100004a0:	10c0004c 	andi	r3,r2,1
100004a4:	002d883a 	mov	r22,zero
100004a8:	1800331e 	bne	r3,zero,10000578 <__sfvwrite_r+0x1d8>
100004ac:	0025883a 	mov	r18,zero
100004b0:	90001c26 	beq	r18,zero,10000524 <__sfvwrite_r+0x184>
100004b4:	10c0800c 	andi	r3,r2,512
100004b8:	85000217 	ldw	r20,8(r16)
100004bc:	18006f26 	beq	r3,zero,1000067c <__sfvwrite_r+0x2dc>
100004c0:	95008936 	bltu	r18,r20,100006e8 <__sfvwrite_r+0x348>
100004c4:	10c1200c 	andi	r3,r2,1152
100004c8:	1800a11e 	bne	r3,zero,10000750 <__sfvwrite_r+0x3b0>
100004cc:	81000017 	ldw	r4,0(r16)
100004d0:	a02f883a 	mov	r23,r20
100004d4:	a039883a 	mov	fp,r20
100004d8:	9029883a 	mov	r20,r18
100004dc:	b00b883a 	mov	r5,r22
100004e0:	b80d883a 	mov	r6,r23
100004e4:	00012040 	call	10001204 <memmove>
100004e8:	81400217 	ldw	r5,8(r16)
100004ec:	81000017 	ldw	r4,0(r16)
100004f0:	9005883a 	mov	r2,r18
100004f4:	2f39c83a 	sub	fp,r5,fp
100004f8:	25c7883a 	add	r3,r4,r23
100004fc:	87000215 	stw	fp,8(r16)
10000500:	80c00015 	stw	r3,0(r16)
10000504:	98c00217 	ldw	r3,8(r19)
10000508:	b0ad883a 	add	r22,r22,r2
1000050c:	90a5c83a 	sub	r18,r18,r2
10000510:	1d29c83a 	sub	r20,r3,r20
10000514:	9d000215 	stw	r20,8(r19)
10000518:	a03fcc26 	beq	r20,zero,1000044c <__alt_data_end+0xf800044c>
1000051c:	8080030b 	ldhu	r2,12(r16)
10000520:	903fe41e 	bne	r18,zero,100004b4 <__alt_data_end+0xf80004b4>
10000524:	8d800017 	ldw	r22,0(r17)
10000528:	8c800117 	ldw	r18,4(r17)
1000052c:	8c400204 	addi	r17,r17,8
10000530:	003fdf06 	br	100004b0 <__alt_data_end+0xf80004b0>
10000534:	8d000017 	ldw	r20,0(r17)
10000538:	8c800117 	ldw	r18,4(r17)
1000053c:	8c400204 	addi	r17,r17,8
10000540:	003fb206 	br	1000040c <__alt_data_end+0xf800040c>
10000544:	00013400 	call	10001340 <_realloc_r>
10000548:	1039883a 	mov	fp,r2
1000054c:	10009d1e 	bne	r2,zero,100007c4 <__sfvwrite_r+0x424>
10000550:	81400417 	ldw	r5,16(r16)
10000554:	a809883a 	mov	r4,r21
10000558:	00021940 	call	10002194 <_free_r>
1000055c:	00800304 	movi	r2,12
10000560:	a8800015 	stw	r2,0(r21)
10000564:	80c0030b 	ldhu	r3,12(r16)
10000568:	00bfffc4 	movi	r2,-1
1000056c:	18c01014 	ori	r3,r3,64
10000570:	80c0030d 	sth	r3,12(r16)
10000574:	003fb606 	br	10000450 <__alt_data_end+0xf8000450>
10000578:	0007883a 	mov	r3,zero
1000057c:	0039883a 	mov	fp,zero
10000580:	0025883a 	mov	r18,zero
10000584:	90001f26 	beq	r18,zero,10000604 <__sfvwrite_r+0x264>
10000588:	18006826 	beq	r3,zero,1000072c <__sfvwrite_r+0x38c>
1000058c:	b02f883a 	mov	r23,r22
10000590:	9580012e 	bgeu	r18,r22,10000598 <__sfvwrite_r+0x1f8>
10000594:	902f883a 	mov	r23,r18
10000598:	81000017 	ldw	r4,0(r16)
1000059c:	80800417 	ldw	r2,16(r16)
100005a0:	b829883a 	mov	r20,r23
100005a4:	81800217 	ldw	r6,8(r16)
100005a8:	81c00517 	ldw	r7,20(r16)
100005ac:	1100022e 	bgeu	r2,r4,100005b8 <__sfvwrite_r+0x218>
100005b0:	31d1883a 	add	r8,r6,r7
100005b4:	45c01816 	blt	r8,r23,10000618 <__sfvwrite_r+0x278>
100005b8:	b9c03f16 	blt	r23,r7,100006b8 <__sfvwrite_r+0x318>
100005bc:	80800917 	ldw	r2,36(r16)
100005c0:	81400717 	ldw	r5,28(r16)
100005c4:	a809883a 	mov	r4,r21
100005c8:	d8c00115 	stw	r3,4(sp)
100005cc:	e00d883a 	mov	r6,fp
100005d0:	103ee83a 	callr	r2
100005d4:	1029883a 	mov	r20,r2
100005d8:	d8c00117 	ldw	r3,4(sp)
100005dc:	00bfe10e 	bge	zero,r2,10000564 <__alt_data_end+0xf8000564>
100005e0:	b52dc83a 	sub	r22,r22,r20
100005e4:	b0001f26 	beq	r22,zero,10000664 <__sfvwrite_r+0x2c4>
100005e8:	98800217 	ldw	r2,8(r19)
100005ec:	e539883a 	add	fp,fp,r20
100005f0:	9525c83a 	sub	r18,r18,r20
100005f4:	1529c83a 	sub	r20,r2,r20
100005f8:	9d000215 	stw	r20,8(r19)
100005fc:	a03f9326 	beq	r20,zero,1000044c <__alt_data_end+0xf800044c>
10000600:	903fe11e 	bne	r18,zero,10000588 <__alt_data_end+0xf8000588>
10000604:	8f000017 	ldw	fp,0(r17)
10000608:	8c800117 	ldw	r18,4(r17)
1000060c:	0007883a 	mov	r3,zero
10000610:	8c400204 	addi	r17,r17,8
10000614:	003fdb06 	br	10000584 <__alt_data_end+0xf8000584>
10000618:	400d883a 	mov	r6,r8
1000061c:	e00b883a 	mov	r5,fp
10000620:	d8c00115 	stw	r3,4(sp)
10000624:	da000015 	stw	r8,0(sp)
10000628:	00012040 	call	10001204 <memmove>
1000062c:	da000017 	ldw	r8,0(sp)
10000630:	80800017 	ldw	r2,0(r16)
10000634:	a809883a 	mov	r4,r21
10000638:	800b883a 	mov	r5,r16
1000063c:	1205883a 	add	r2,r2,r8
10000640:	80800015 	stw	r2,0(r16)
10000644:	da000015 	stw	r8,0(sp)
10000648:	0001a400 	call	10001a40 <_fflush_r>
1000064c:	d8c00117 	ldw	r3,4(sp)
10000650:	da000017 	ldw	r8,0(sp)
10000654:	103fc31e 	bne	r2,zero,10000564 <__alt_data_end+0xf8000564>
10000658:	4029883a 	mov	r20,r8
1000065c:	b52dc83a 	sub	r22,r22,r20
10000660:	b03fe11e 	bne	r22,zero,100005e8 <__alt_data_end+0xf80005e8>
10000664:	a809883a 	mov	r4,r21
10000668:	800b883a 	mov	r5,r16
1000066c:	0001a400 	call	10001a40 <_fflush_r>
10000670:	103fbc1e 	bne	r2,zero,10000564 <__alt_data_end+0xf8000564>
10000674:	0007883a 	mov	r3,zero
10000678:	003fdb06 	br	100005e8 <__alt_data_end+0xf80005e8>
1000067c:	81000017 	ldw	r4,0(r16)
10000680:	80800417 	ldw	r2,16(r16)
10000684:	1100012e 	bgeu	r2,r4,1000068c <__sfvwrite_r+0x2ec>
10000688:	a4805836 	bltu	r20,r18,100007ec <__sfvwrite_r+0x44c>
1000068c:	81c00517 	ldw	r7,20(r16)
10000690:	91c01a36 	bltu	r18,r7,100006fc <__sfvwrite_r+0x35c>
10000694:	80800917 	ldw	r2,36(r16)
10000698:	81400717 	ldw	r5,28(r16)
1000069c:	a809883a 	mov	r4,r21
100006a0:	b00d883a 	mov	r6,r22
100006a4:	103ee83a 	callr	r2
100006a8:	1029883a 	mov	r20,r2
100006ac:	00bfad0e 	bge	zero,r2,10000564 <__alt_data_end+0xf8000564>
100006b0:	a005883a 	mov	r2,r20
100006b4:	003f9306 	br	10000504 <__alt_data_end+0xf8000504>
100006b8:	b80d883a 	mov	r6,r23
100006bc:	e00b883a 	mov	r5,fp
100006c0:	d8c00115 	stw	r3,4(sp)
100006c4:	00012040 	call	10001204 <memmove>
100006c8:	80800217 	ldw	r2,8(r16)
100006cc:	81000017 	ldw	r4,0(r16)
100006d0:	d8c00117 	ldw	r3,4(sp)
100006d4:	15c5c83a 	sub	r2,r2,r23
100006d8:	25ef883a 	add	r23,r4,r23
100006dc:	80800215 	stw	r2,8(r16)
100006e0:	85c00015 	stw	r23,0(r16)
100006e4:	003fbe06 	br	100005e0 <__alt_data_end+0xf80005e0>
100006e8:	81000017 	ldw	r4,0(r16)
100006ec:	9039883a 	mov	fp,r18
100006f0:	9029883a 	mov	r20,r18
100006f4:	902f883a 	mov	r23,r18
100006f8:	003f7806 	br	100004dc <__alt_data_end+0xf80004dc>
100006fc:	b00b883a 	mov	r5,r22
10000700:	900d883a 	mov	r6,r18
10000704:	00012040 	call	10001204 <memmove>
10000708:	80c00217 	ldw	r3,8(r16)
1000070c:	80800017 	ldw	r2,0(r16)
10000710:	9029883a 	mov	r20,r18
10000714:	1c87c83a 	sub	r3,r3,r18
10000718:	1485883a 	add	r2,r2,r18
1000071c:	80800015 	stw	r2,0(r16)
10000720:	80c00215 	stw	r3,8(r16)
10000724:	9005883a 	mov	r2,r18
10000728:	003f7606 	br	10000504 <__alt_data_end+0xf8000504>
1000072c:	e009883a 	mov	r4,fp
10000730:	01400284 	movi	r5,10
10000734:	900d883a 	mov	r6,r18
10000738:	00010100 	call	10001010 <memchr>
1000073c:	10003926 	beq	r2,zero,10000824 <__sfvwrite_r+0x484>
10000740:	15800044 	addi	r22,r2,1
10000744:	b72dc83a 	sub	r22,r22,fp
10000748:	00c00044 	movi	r3,1
1000074c:	003f8f06 	br	1000058c <__alt_data_end+0xf800058c>
10000750:	81000517 	ldw	r4,20(r16)
10000754:	81400417 	ldw	r5,16(r16)
10000758:	80c00017 	ldw	r3,0(r16)
1000075c:	210d883a 	add	r6,r4,r4
10000760:	3109883a 	add	r4,r6,r4
10000764:	2028d7fa 	srli	r20,r4,31
10000768:	196fc83a 	sub	r23,r3,r5
1000076c:	b9800044 	addi	r6,r23,1
10000770:	a109883a 	add	r4,r20,r4
10000774:	2029d07a 	srai	r20,r4,1
10000778:	348d883a 	add	r6,r6,r18
1000077c:	a180272e 	bgeu	r20,r6,1000081c <__sfvwrite_r+0x47c>
10000780:	3029883a 	mov	r20,r6
10000784:	1081000c 	andi	r2,r2,1024
10000788:	a809883a 	mov	r4,r21
1000078c:	103f6d26 	beq	r2,zero,10000544 <__alt_data_end+0xf8000544>
10000790:	300b883a 	mov	r5,r6
10000794:	000084c0 	call	1000084c <_malloc_r>
10000798:	1039883a 	mov	fp,r2
1000079c:	103f6f26 	beq	r2,zero,1000055c <__alt_data_end+0xf800055c>
100007a0:	81400417 	ldw	r5,16(r16)
100007a4:	1009883a 	mov	r4,r2
100007a8:	b80d883a 	mov	r6,r23
100007ac:	00010f80 	call	100010f8 <memcpy>
100007b0:	8080030b 	ldhu	r2,12(r16)
100007b4:	00fedfc4 	movi	r3,-1153
100007b8:	10c4703a 	and	r2,r2,r3
100007bc:	10802014 	ori	r2,r2,128
100007c0:	8080030d 	sth	r2,12(r16)
100007c4:	e5c9883a 	add	r4,fp,r23
100007c8:	a5c7c83a 	sub	r3,r20,r23
100007cc:	87000415 	stw	fp,16(r16)
100007d0:	85000515 	stw	r20,20(r16)
100007d4:	81000015 	stw	r4,0(r16)
100007d8:	9039883a 	mov	fp,r18
100007dc:	80c00215 	stw	r3,8(r16)
100007e0:	9029883a 	mov	r20,r18
100007e4:	902f883a 	mov	r23,r18
100007e8:	003f3c06 	br	100004dc <__alt_data_end+0xf80004dc>
100007ec:	b00b883a 	mov	r5,r22
100007f0:	a00d883a 	mov	r6,r20
100007f4:	00012040 	call	10001204 <memmove>
100007f8:	80800017 	ldw	r2,0(r16)
100007fc:	a809883a 	mov	r4,r21
10000800:	800b883a 	mov	r5,r16
10000804:	1505883a 	add	r2,r2,r20
10000808:	80800015 	stw	r2,0(r16)
1000080c:	0001a400 	call	10001a40 <_fflush_r>
10000810:	103f541e 	bne	r2,zero,10000564 <__alt_data_end+0xf8000564>
10000814:	a005883a 	mov	r2,r20
10000818:	003f3a06 	br	10000504 <__alt_data_end+0xf8000504>
1000081c:	a00d883a 	mov	r6,r20
10000820:	003fd806 	br	10000784 <__alt_data_end+0xf8000784>
10000824:	95800044 	addi	r22,r18,1
10000828:	00c00044 	movi	r3,1
1000082c:	003f5706 	br	1000058c <__alt_data_end+0xf800058c>
10000830:	80c0030b 	ldhu	r3,12(r16)
10000834:	00bfffc4 	movi	r2,-1
10000838:	18c01014 	ori	r3,r3,64
1000083c:	80c0030d 	sth	r3,12(r16)
10000840:	00c00244 	movi	r3,9
10000844:	a8c00015 	stw	r3,0(r21)
10000848:	003f0106 	br	10000450 <__alt_data_end+0xf8000450>

1000084c <_malloc_r>:
1000084c:	defff504 	addi	sp,sp,-44
10000850:	dc800315 	stw	r18,12(sp)
10000854:	dfc00a15 	stw	ra,40(sp)
10000858:	df000915 	stw	fp,36(sp)
1000085c:	ddc00815 	stw	r23,32(sp)
10000860:	dd800715 	stw	r22,28(sp)
10000864:	dd400615 	stw	r21,24(sp)
10000868:	dd000515 	stw	r20,20(sp)
1000086c:	dcc00415 	stw	r19,16(sp)
10000870:	dc400215 	stw	r17,8(sp)
10000874:	dc000115 	stw	r16,4(sp)
10000878:	288002c4 	addi	r2,r5,11
1000087c:	00c00584 	movi	r3,22
10000880:	2025883a 	mov	r18,r4
10000884:	18802b2e 	bgeu	r3,r2,10000934 <_malloc_r+0xe8>
10000888:	047ffe04 	movi	r17,-8
1000088c:	1462703a 	and	r17,r2,r17
10000890:	88002a16 	blt	r17,zero,1000093c <_malloc_r+0xf0>
10000894:	89402936 	bltu	r17,r5,1000093c <_malloc_r+0xf0>
10000898:	9009883a 	mov	r4,r18
1000089c:	00033740 	call	10003374 <__malloc_lock>
100008a0:	00807dc4 	movi	r2,503
100008a4:	14402936 	bltu	r2,r17,1000094c <_malloc_r+0x100>
100008a8:	8808d0fa 	srli	r4,r17,3
100008ac:	04c40034 	movhi	r19,4096
100008b0:	9cd62704 	addi	r19,r19,22684
100008b4:	2105883a 	add	r2,r4,r4
100008b8:	1085883a 	add	r2,r2,r2
100008bc:	1085883a 	add	r2,r2,r2
100008c0:	9885883a 	add	r2,r19,r2
100008c4:	14000317 	ldw	r16,12(r2)
100008c8:	80815226 	beq	r16,r2,10000e14 <_malloc_r+0x5c8>
100008cc:	81000117 	ldw	r4,4(r16)
100008d0:	00bfff04 	movi	r2,-4
100008d4:	80c00317 	ldw	r3,12(r16)
100008d8:	2084703a 	and	r2,r4,r2
100008dc:	8085883a 	add	r2,r16,r2
100008e0:	81000217 	ldw	r4,8(r16)
100008e4:	11400117 	ldw	r5,4(r2)
100008e8:	20c00315 	stw	r3,12(r4)
100008ec:	19000215 	stw	r4,8(r3)
100008f0:	28c00054 	ori	r3,r5,1
100008f4:	10c00115 	stw	r3,4(r2)
100008f8:	9009883a 	mov	r4,r18
100008fc:	00033940 	call	10003394 <__malloc_unlock>
10000900:	80800204 	addi	r2,r16,8
10000904:	dfc00a17 	ldw	ra,40(sp)
10000908:	df000917 	ldw	fp,36(sp)
1000090c:	ddc00817 	ldw	r23,32(sp)
10000910:	dd800717 	ldw	r22,28(sp)
10000914:	dd400617 	ldw	r21,24(sp)
10000918:	dd000517 	ldw	r20,20(sp)
1000091c:	dcc00417 	ldw	r19,16(sp)
10000920:	dc800317 	ldw	r18,12(sp)
10000924:	dc400217 	ldw	r17,8(sp)
10000928:	dc000117 	ldw	r16,4(sp)
1000092c:	dec00b04 	addi	sp,sp,44
10000930:	f800283a 	ret
10000934:	04400404 	movi	r17,16
10000938:	897fd72e 	bgeu	r17,r5,10000898 <__alt_data_end+0xf8000898>
1000093c:	00800304 	movi	r2,12
10000940:	90800015 	stw	r2,0(r18)
10000944:	0005883a 	mov	r2,zero
10000948:	003fee06 	br	10000904 <__alt_data_end+0xf8000904>
1000094c:	8808d27a 	srli	r4,r17,9
10000950:	20007126 	beq	r4,zero,10000b18 <_malloc_r+0x2cc>
10000954:	00800104 	movi	r2,4
10000958:	1100f536 	bltu	r2,r4,10000d30 <_malloc_r+0x4e4>
1000095c:	8808d1ba 	srli	r4,r17,6
10000960:	21000e04 	addi	r4,r4,56
10000964:	210b883a 	add	r5,r4,r4
10000968:	294b883a 	add	r5,r5,r5
1000096c:	294b883a 	add	r5,r5,r5
10000970:	04c40034 	movhi	r19,4096
10000974:	9cd62704 	addi	r19,r19,22684
10000978:	994b883a 	add	r5,r19,r5
1000097c:	2c000317 	ldw	r16,12(r5)
10000980:	2c000e26 	beq	r5,r16,100009bc <_malloc_r+0x170>
10000984:	80c00117 	ldw	r3,4(r16)
10000988:	01ffff04 	movi	r7,-4
1000098c:	018003c4 	movi	r6,15
10000990:	19c6703a 	and	r3,r3,r7
10000994:	1c45c83a 	sub	r2,r3,r17
10000998:	30800716 	blt	r6,r2,100009b8 <_malloc_r+0x16c>
1000099c:	1000610e 	bge	r2,zero,10000b24 <_malloc_r+0x2d8>
100009a0:	84000317 	ldw	r16,12(r16)
100009a4:	2c000526 	beq	r5,r16,100009bc <_malloc_r+0x170>
100009a8:	80c00117 	ldw	r3,4(r16)
100009ac:	19c6703a 	and	r3,r3,r7
100009b0:	1c45c83a 	sub	r2,r3,r17
100009b4:	30bff90e 	bge	r6,r2,1000099c <__alt_data_end+0xf800099c>
100009b8:	213fffc4 	addi	r4,r4,-1
100009bc:	21000044 	addi	r4,r4,1
100009c0:	9c000417 	ldw	r16,16(r19)
100009c4:	00c40034 	movhi	r3,4096
100009c8:	18d62704 	addi	r3,r3,22684
100009cc:	1a400204 	addi	r9,r3,8
100009d0:	82410926 	beq	r16,r9,10000df8 <_malloc_r+0x5ac>
100009d4:	81400117 	ldw	r5,4(r16)
100009d8:	00bfff04 	movi	r2,-4
100009dc:	018003c4 	movi	r6,15
100009e0:	2884703a 	and	r2,r5,r2
100009e4:	144bc83a 	sub	r5,r2,r17
100009e8:	3140f416 	blt	r6,r5,10000dbc <_malloc_r+0x570>
100009ec:	1a400515 	stw	r9,20(r3)
100009f0:	1a400415 	stw	r9,16(r3)
100009f4:	2800570e 	bge	r5,zero,10000b54 <_malloc_r+0x308>
100009f8:	01407fc4 	movi	r5,511
100009fc:	2880d436 	bltu	r5,r2,10000d50 <_malloc_r+0x504>
10000a00:	1004d0fa 	srli	r2,r2,3
10000a04:	02000044 	movi	r8,1
10000a08:	19c00117 	ldw	r7,4(r3)
10000a0c:	108b883a 	add	r5,r2,r2
10000a10:	294b883a 	add	r5,r5,r5
10000a14:	1005d0ba 	srai	r2,r2,2
10000a18:	294b883a 	add	r5,r5,r5
10000a1c:	28cb883a 	add	r5,r5,r3
10000a20:	29800217 	ldw	r6,8(r5)
10000a24:	4084983a 	sll	r2,r8,r2
10000a28:	81400315 	stw	r5,12(r16)
10000a2c:	81800215 	stw	r6,8(r16)
10000a30:	11c4b03a 	or	r2,r2,r7
10000a34:	2c000215 	stw	r16,8(r5)
10000a38:	18800115 	stw	r2,4(r3)
10000a3c:	34000315 	stw	r16,12(r6)
10000a40:	2007d0ba 	srai	r3,r4,2
10000a44:	01400044 	movi	r5,1
10000a48:	28ca983a 	sll	r5,r5,r3
10000a4c:	11404936 	bltu	r2,r5,10000b74 <_malloc_r+0x328>
10000a50:	1146703a 	and	r3,r2,r5
10000a54:	18000a1e 	bne	r3,zero,10000a80 <_malloc_r+0x234>
10000a58:	00ffff04 	movi	r3,-4
10000a5c:	294b883a 	add	r5,r5,r5
10000a60:	20c8703a 	and	r4,r4,r3
10000a64:	1146703a 	and	r3,r2,r5
10000a68:	21000104 	addi	r4,r4,4
10000a6c:	1800041e 	bne	r3,zero,10000a80 <_malloc_r+0x234>
10000a70:	294b883a 	add	r5,r5,r5
10000a74:	1146703a 	and	r3,r2,r5
10000a78:	21000104 	addi	r4,r4,4
10000a7c:	183ffc26 	beq	r3,zero,10000a70 <__alt_data_end+0xf8000a70>
10000a80:	023fff04 	movi	r8,-4
10000a84:	01c003c4 	movi	r7,15
10000a88:	2105883a 	add	r2,r4,r4
10000a8c:	1085883a 	add	r2,r2,r2
10000a90:	1085883a 	add	r2,r2,r2
10000a94:	9897883a 	add	r11,r19,r2
10000a98:	5a800304 	addi	r10,r11,12
10000a9c:	2019883a 	mov	r12,r4
10000aa0:	54000017 	ldw	r16,0(r10)
10000aa4:	51bffd04 	addi	r6,r10,-12
10000aa8:	8180041e 	bne	r16,r6,10000abc <_malloc_r+0x270>
10000aac:	0000d406 	br	10000e00 <_malloc_r+0x5b4>
10000ab0:	1000dd0e 	bge	r2,zero,10000e28 <_malloc_r+0x5dc>
10000ab4:	84000317 	ldw	r16,12(r16)
10000ab8:	8180d126 	beq	r16,r6,10000e00 <_malloc_r+0x5b4>
10000abc:	80c00117 	ldw	r3,4(r16)
10000ac0:	1a06703a 	and	r3,r3,r8
10000ac4:	1c45c83a 	sub	r2,r3,r17
10000ac8:	38bff90e 	bge	r7,r2,10000ab0 <__alt_data_end+0xf8000ab0>
10000acc:	80c00317 	ldw	r3,12(r16)
10000ad0:	81000217 	ldw	r4,8(r16)
10000ad4:	89400054 	ori	r5,r17,1
10000ad8:	81400115 	stw	r5,4(r16)
10000adc:	20c00315 	stw	r3,12(r4)
10000ae0:	19000215 	stw	r4,8(r3)
10000ae4:	8463883a 	add	r17,r16,r17
10000ae8:	9c400515 	stw	r17,20(r19)
10000aec:	9c400415 	stw	r17,16(r19)
10000af0:	10c00054 	ori	r3,r2,1
10000af4:	8a400315 	stw	r9,12(r17)
10000af8:	8a400215 	stw	r9,8(r17)
10000afc:	88c00115 	stw	r3,4(r17)
10000b00:	88a3883a 	add	r17,r17,r2
10000b04:	88800015 	stw	r2,0(r17)
10000b08:	9009883a 	mov	r4,r18
10000b0c:	00033940 	call	10003394 <__malloc_unlock>
10000b10:	80800204 	addi	r2,r16,8
10000b14:	003f7b06 	br	10000904 <__alt_data_end+0xf8000904>
10000b18:	01401f84 	movi	r5,126
10000b1c:	01000fc4 	movi	r4,63
10000b20:	003f9106 	br	10000968 <__alt_data_end+0xf8000968>
10000b24:	80800317 	ldw	r2,12(r16)
10000b28:	81000217 	ldw	r4,8(r16)
10000b2c:	80c7883a 	add	r3,r16,r3
10000b30:	19400117 	ldw	r5,4(r3)
10000b34:	20800315 	stw	r2,12(r4)
10000b38:	11000215 	stw	r4,8(r2)
10000b3c:	28800054 	ori	r2,r5,1
10000b40:	18800115 	stw	r2,4(r3)
10000b44:	9009883a 	mov	r4,r18
10000b48:	00033940 	call	10003394 <__malloc_unlock>
10000b4c:	80800204 	addi	r2,r16,8
10000b50:	003f6c06 	br	10000904 <__alt_data_end+0xf8000904>
10000b54:	8085883a 	add	r2,r16,r2
10000b58:	10c00117 	ldw	r3,4(r2)
10000b5c:	9009883a 	mov	r4,r18
10000b60:	18c00054 	ori	r3,r3,1
10000b64:	10c00115 	stw	r3,4(r2)
10000b68:	00033940 	call	10003394 <__malloc_unlock>
10000b6c:	80800204 	addi	r2,r16,8
10000b70:	003f6406 	br	10000904 <__alt_data_end+0xf8000904>
10000b74:	9c000217 	ldw	r16,8(r19)
10000b78:	00bfff04 	movi	r2,-4
10000b7c:	85400117 	ldw	r21,4(r16)
10000b80:	a8aa703a 	and	r21,r21,r2
10000b84:	ac400336 	bltu	r21,r17,10000b94 <_malloc_r+0x348>
10000b88:	ac45c83a 	sub	r2,r21,r17
10000b8c:	00c003c4 	movi	r3,15
10000b90:	18805d16 	blt	r3,r2,10000d08 <_malloc_r+0x4bc>
10000b94:	00840074 	movhi	r2,4097
10000b98:	10a25e04 	addi	r2,r2,-30344
10000b9c:	00c40034 	movhi	r3,4096
10000ba0:	18dbb104 	addi	r3,r3,28356
10000ba4:	15c00017 	ldw	r23,0(r2)
10000ba8:	19000017 	ldw	r4,0(r3)
10000bac:	00bfffc4 	movi	r2,-1
10000bb0:	8579883a 	add	fp,r16,r21
10000bb4:	8def883a 	add	r23,r17,r23
10000bb8:	2080e426 	beq	r4,r2,10000f4c <_malloc_r+0x700>
10000bbc:	bdc403c4 	addi	r23,r23,4111
10000bc0:	00bc0004 	movi	r2,-4096
10000bc4:	b8ae703a 	and	r23,r23,r2
10000bc8:	9009883a 	mov	r4,r18
10000bcc:	b80b883a 	mov	r5,r23
10000bd0:	d8c00015 	stw	r3,0(sp)
10000bd4:	00018a40 	call	100018a4 <_sbrk_r>
10000bd8:	1029883a 	mov	r20,r2
10000bdc:	00bfffc4 	movi	r2,-1
10000be0:	d8c00017 	ldw	r3,0(sp)
10000be4:	a080a426 	beq	r20,r2,10000e78 <_malloc_r+0x62c>
10000be8:	a700a236 	bltu	r20,fp,10000e74 <_malloc_r+0x628>
10000bec:	05840074 	movhi	r22,4097
10000bf0:	b5a26604 	addi	r22,r22,-30312
10000bf4:	b0800017 	ldw	r2,0(r22)
10000bf8:	b885883a 	add	r2,r23,r2
10000bfc:	b0800015 	stw	r2,0(r22)
10000c00:	e500da26 	beq	fp,r20,10000f6c <_malloc_r+0x720>
10000c04:	19000017 	ldw	r4,0(r3)
10000c08:	00ffffc4 	movi	r3,-1
10000c0c:	20c0e426 	beq	r4,r3,10000fa0 <_malloc_r+0x754>
10000c10:	a739c83a 	sub	fp,r20,fp
10000c14:	1705883a 	add	r2,r2,fp
10000c18:	b0800015 	stw	r2,0(r22)
10000c1c:	a08001cc 	andi	r2,r20,7
10000c20:	1000b526 	beq	r2,zero,10000ef8 <_malloc_r+0x6ac>
10000c24:	a0a9c83a 	sub	r20,r20,r2
10000c28:	00c40204 	movi	r3,4104
10000c2c:	a5000204 	addi	r20,r20,8
10000c30:	1885c83a 	sub	r2,r3,r2
10000c34:	a5c7883a 	add	r3,r20,r23
10000c38:	18c3ffcc 	andi	r3,r3,4095
10000c3c:	10efc83a 	sub	r23,r2,r3
10000c40:	9009883a 	mov	r4,r18
10000c44:	b80b883a 	mov	r5,r23
10000c48:	00018a40 	call	100018a4 <_sbrk_r>
10000c4c:	00ffffc4 	movi	r3,-1
10000c50:	10c0d026 	beq	r2,r3,10000f94 <_malloc_r+0x748>
10000c54:	1505c83a 	sub	r2,r2,r20
10000c58:	b887883a 	add	r3,r23,r2
10000c5c:	18c00054 	ori	r3,r3,1
10000c60:	b0800017 	ldw	r2,0(r22)
10000c64:	9d000215 	stw	r20,8(r19)
10000c68:	a0c00115 	stw	r3,4(r20)
10000c6c:	b885883a 	add	r2,r23,r2
10000c70:	b0800015 	stw	r2,0(r22)
10000c74:	84c00e26 	beq	r16,r19,10000cb0 <_malloc_r+0x464>
10000c78:	00c003c4 	movi	r3,15
10000c7c:	1d40a02e 	bgeu	r3,r21,10000f00 <_malloc_r+0x6b4>
10000c80:	81400117 	ldw	r5,4(r16)
10000c84:	ad7ffd04 	addi	r21,r21,-12
10000c88:	013ffe04 	movi	r4,-8
10000c8c:	a908703a 	and	r4,r21,r4
10000c90:	2940004c 	andi	r5,r5,1
10000c94:	214ab03a 	or	r5,r4,r5
10000c98:	81400115 	stw	r5,4(r16)
10000c9c:	01800144 	movi	r6,5
10000ca0:	810b883a 	add	r5,r16,r4
10000ca4:	29800115 	stw	r6,4(r5)
10000ca8:	29800215 	stw	r6,8(r5)
10000cac:	1900c036 	bltu	r3,r4,10000fb0 <_malloc_r+0x764>
10000cb0:	00c40074 	movhi	r3,4097
10000cb4:	18e25d04 	addi	r3,r3,-30348
10000cb8:	19000017 	ldw	r4,0(r3)
10000cbc:	2080012e 	bgeu	r4,r2,10000cc4 <_malloc_r+0x478>
10000cc0:	18800015 	stw	r2,0(r3)
10000cc4:	00c40074 	movhi	r3,4097
10000cc8:	18e25c04 	addi	r3,r3,-30352
10000ccc:	19000017 	ldw	r4,0(r3)
10000cd0:	9c000217 	ldw	r16,8(r19)
10000cd4:	2080012e 	bgeu	r4,r2,10000cdc <_malloc_r+0x490>
10000cd8:	18800015 	stw	r2,0(r3)
10000cdc:	80c00117 	ldw	r3,4(r16)
10000ce0:	00bfff04 	movi	r2,-4
10000ce4:	1886703a 	and	r3,r3,r2
10000ce8:	1c45c83a 	sub	r2,r3,r17
10000cec:	1c400236 	bltu	r3,r17,10000cf8 <_malloc_r+0x4ac>
10000cf0:	00c003c4 	movi	r3,15
10000cf4:	18800416 	blt	r3,r2,10000d08 <_malloc_r+0x4bc>
10000cf8:	9009883a 	mov	r4,r18
10000cfc:	00033940 	call	10003394 <__malloc_unlock>
10000d00:	0005883a 	mov	r2,zero
10000d04:	003eff06 	br	10000904 <__alt_data_end+0xf8000904>
10000d08:	88c00054 	ori	r3,r17,1
10000d0c:	80c00115 	stw	r3,4(r16)
10000d10:	8463883a 	add	r17,r16,r17
10000d14:	10800054 	ori	r2,r2,1
10000d18:	9c400215 	stw	r17,8(r19)
10000d1c:	88800115 	stw	r2,4(r17)
10000d20:	9009883a 	mov	r4,r18
10000d24:	00033940 	call	10003394 <__malloc_unlock>
10000d28:	80800204 	addi	r2,r16,8
10000d2c:	003ef506 	br	10000904 <__alt_data_end+0xf8000904>
10000d30:	00800504 	movi	r2,20
10000d34:	1100482e 	bgeu	r2,r4,10000e58 <_malloc_r+0x60c>
10000d38:	00801504 	movi	r2,84
10000d3c:	11006836 	bltu	r2,r4,10000ee0 <_malloc_r+0x694>
10000d40:	8808d33a 	srli	r4,r17,12
10000d44:	21001b84 	addi	r4,r4,110
10000d48:	210b883a 	add	r5,r4,r4
10000d4c:	003f0606 	br	10000968 <__alt_data_end+0xf8000968>
10000d50:	1006d27a 	srli	r3,r2,9
10000d54:	01400104 	movi	r5,4
10000d58:	28c0422e 	bgeu	r5,r3,10000e64 <_malloc_r+0x618>
10000d5c:	01400504 	movi	r5,20
10000d60:	28c07c36 	bltu	r5,r3,10000f54 <_malloc_r+0x708>
10000d64:	194016c4 	addi	r5,r3,91
10000d68:	294d883a 	add	r6,r5,r5
10000d6c:	318d883a 	add	r6,r6,r6
10000d70:	318d883a 	add	r6,r6,r6
10000d74:	998d883a 	add	r6,r19,r6
10000d78:	30c00217 	ldw	r3,8(r6)
10000d7c:	01c40034 	movhi	r7,4096
10000d80:	39d62704 	addi	r7,r7,22684
10000d84:	19806326 	beq	r3,r6,10000f14 <_malloc_r+0x6c8>
10000d88:	01ffff04 	movi	r7,-4
10000d8c:	19400117 	ldw	r5,4(r3)
10000d90:	29ca703a 	and	r5,r5,r7
10000d94:	1140022e 	bgeu	r2,r5,10000da0 <_malloc_r+0x554>
10000d98:	18c00217 	ldw	r3,8(r3)
10000d9c:	30fffb1e 	bne	r6,r3,10000d8c <__alt_data_end+0xf8000d8c>
10000da0:	19400317 	ldw	r5,12(r3)
10000da4:	98800117 	ldw	r2,4(r19)
10000da8:	81400315 	stw	r5,12(r16)
10000dac:	80c00215 	stw	r3,8(r16)
10000db0:	2c000215 	stw	r16,8(r5)
10000db4:	1c000315 	stw	r16,12(r3)
10000db8:	003f2106 	br	10000a40 <__alt_data_end+0xf8000a40>
10000dbc:	88800054 	ori	r2,r17,1
10000dc0:	80800115 	stw	r2,4(r16)
10000dc4:	8463883a 	add	r17,r16,r17
10000dc8:	1c400515 	stw	r17,20(r3)
10000dcc:	1c400415 	stw	r17,16(r3)
10000dd0:	28800054 	ori	r2,r5,1
10000dd4:	88800115 	stw	r2,4(r17)
10000dd8:	8a400315 	stw	r9,12(r17)
10000ddc:	8a400215 	stw	r9,8(r17)
10000de0:	8963883a 	add	r17,r17,r5
10000de4:	89400015 	stw	r5,0(r17)
10000de8:	9009883a 	mov	r4,r18
10000dec:	00033940 	call	10003394 <__malloc_unlock>
10000df0:	80800204 	addi	r2,r16,8
10000df4:	003ec306 	br	10000904 <__alt_data_end+0xf8000904>
10000df8:	18800117 	ldw	r2,4(r3)
10000dfc:	003f1006 	br	10000a40 <__alt_data_end+0xf8000a40>
10000e00:	63000044 	addi	r12,r12,1
10000e04:	608000cc 	andi	r2,r12,3
10000e08:	52800204 	addi	r10,r10,8
10000e0c:	103f241e 	bne	r2,zero,10000aa0 <__alt_data_end+0xf8000aa0>
10000e10:	00002106 	br	10000e98 <_malloc_r+0x64c>
10000e14:	80800204 	addi	r2,r16,8
10000e18:	84000517 	ldw	r16,20(r16)
10000e1c:	143eab1e 	bne	r2,r16,100008cc <__alt_data_end+0xf80008cc>
10000e20:	21000084 	addi	r4,r4,2
10000e24:	003ee606 	br	100009c0 <__alt_data_end+0xf80009c0>
10000e28:	80c7883a 	add	r3,r16,r3
10000e2c:	19400117 	ldw	r5,4(r3)
10000e30:	80800317 	ldw	r2,12(r16)
10000e34:	81000217 	ldw	r4,8(r16)
10000e38:	29400054 	ori	r5,r5,1
10000e3c:	19400115 	stw	r5,4(r3)
10000e40:	20800315 	stw	r2,12(r4)
10000e44:	11000215 	stw	r4,8(r2)
10000e48:	9009883a 	mov	r4,r18
10000e4c:	00033940 	call	10003394 <__malloc_unlock>
10000e50:	80800204 	addi	r2,r16,8
10000e54:	003eab06 	br	10000904 <__alt_data_end+0xf8000904>
10000e58:	210016c4 	addi	r4,r4,91
10000e5c:	210b883a 	add	r5,r4,r4
10000e60:	003ec106 	br	10000968 <__alt_data_end+0xf8000968>
10000e64:	100ad1ba 	srli	r5,r2,6
10000e68:	29400e04 	addi	r5,r5,56
10000e6c:	294d883a 	add	r6,r5,r5
10000e70:	003fbe06 	br	10000d6c <__alt_data_end+0xf8000d6c>
10000e74:	84ff5d26 	beq	r16,r19,10000bec <__alt_data_end+0xf8000bec>
10000e78:	9c000217 	ldw	r16,8(r19)
10000e7c:	00bfff04 	movi	r2,-4
10000e80:	80c00117 	ldw	r3,4(r16)
10000e84:	1886703a 	and	r3,r3,r2
10000e88:	003f9706 	br	10000ce8 <__alt_data_end+0xf8000ce8>
10000e8c:	5ac00017 	ldw	r11,0(r11)
10000e90:	213fffc4 	addi	r4,r4,-1
10000e94:	58805c1e 	bne	r11,r2,10001008 <_malloc_r+0x7bc>
10000e98:	20c000cc 	andi	r3,r4,3
10000e9c:	58bffe04 	addi	r2,r11,-8
10000ea0:	183ffa1e 	bne	r3,zero,10000e8c <__alt_data_end+0xf8000e8c>
10000ea4:	98800117 	ldw	r2,4(r19)
10000ea8:	0146303a 	nor	r3,zero,r5
10000eac:	1884703a 	and	r2,r3,r2
10000eb0:	98800115 	stw	r2,4(r19)
10000eb4:	294b883a 	add	r5,r5,r5
10000eb8:	117f2e36 	bltu	r2,r5,10000b74 <__alt_data_end+0xf8000b74>
10000ebc:	283f2d26 	beq	r5,zero,10000b74 <__alt_data_end+0xf8000b74>
10000ec0:	1146703a 	and	r3,r2,r5
10000ec4:	6009883a 	mov	r4,r12
10000ec8:	183eef1e 	bne	r3,zero,10000a88 <__alt_data_end+0xf8000a88>
10000ecc:	294b883a 	add	r5,r5,r5
10000ed0:	1146703a 	and	r3,r2,r5
10000ed4:	21000104 	addi	r4,r4,4
10000ed8:	183ffc26 	beq	r3,zero,10000ecc <__alt_data_end+0xf8000ecc>
10000edc:	003eea06 	br	10000a88 <__alt_data_end+0xf8000a88>
10000ee0:	00805504 	movi	r2,340
10000ee4:	11001336 	bltu	r2,r4,10000f34 <_malloc_r+0x6e8>
10000ee8:	8808d3fa 	srli	r4,r17,15
10000eec:	21001dc4 	addi	r4,r4,119
10000ef0:	210b883a 	add	r5,r4,r4
10000ef4:	003e9c06 	br	10000968 <__alt_data_end+0xf8000968>
10000ef8:	00840004 	movi	r2,4096
10000efc:	003f4d06 	br	10000c34 <__alt_data_end+0xf8000c34>
10000f00:	00800044 	movi	r2,1
10000f04:	a0800115 	stw	r2,4(r20)
10000f08:	a021883a 	mov	r16,r20
10000f0c:	0007883a 	mov	r3,zero
10000f10:	003f7506 	br	10000ce8 <__alt_data_end+0xf8000ce8>
10000f14:	280bd0ba 	srai	r5,r5,2
10000f18:	01800044 	movi	r6,1
10000f1c:	38800117 	ldw	r2,4(r7)
10000f20:	314c983a 	sll	r6,r6,r5
10000f24:	180b883a 	mov	r5,r3
10000f28:	3084b03a 	or	r2,r6,r2
10000f2c:	38800115 	stw	r2,4(r7)
10000f30:	003f9d06 	br	10000da8 <__alt_data_end+0xf8000da8>
10000f34:	00815504 	movi	r2,1364
10000f38:	11001336 	bltu	r2,r4,10000f88 <_malloc_r+0x73c>
10000f3c:	8808d4ba 	srli	r4,r17,18
10000f40:	21001f04 	addi	r4,r4,124
10000f44:	210b883a 	add	r5,r4,r4
10000f48:	003e8706 	br	10000968 <__alt_data_end+0xf8000968>
10000f4c:	bdc00404 	addi	r23,r23,16
10000f50:	003f1d06 	br	10000bc8 <__alt_data_end+0xf8000bc8>
10000f54:	01401504 	movi	r5,84
10000f58:	28c01c36 	bltu	r5,r3,10000fcc <_malloc_r+0x780>
10000f5c:	100ad33a 	srli	r5,r2,12
10000f60:	29401b84 	addi	r5,r5,110
10000f64:	294d883a 	add	r6,r5,r5
10000f68:	003f8006 	br	10000d6c <__alt_data_end+0xf8000d6c>
10000f6c:	e103ffcc 	andi	r4,fp,4095
10000f70:	203f241e 	bne	r4,zero,10000c04 <__alt_data_end+0xf8000c04>
10000f74:	98c00217 	ldw	r3,8(r19)
10000f78:	bd49883a 	add	r4,r23,r21
10000f7c:	21000054 	ori	r4,r4,1
10000f80:	19000115 	stw	r4,4(r3)
10000f84:	003f4a06 	br	10000cb0 <__alt_data_end+0xf8000cb0>
10000f88:	01403f04 	movi	r5,252
10000f8c:	01001f84 	movi	r4,126
10000f90:	003e7506 	br	10000968 <__alt_data_end+0xf8000968>
10000f94:	00c00044 	movi	r3,1
10000f98:	002f883a 	mov	r23,zero
10000f9c:	003f3006 	br	10000c60 <__alt_data_end+0xf8000c60>
10000fa0:	00840034 	movhi	r2,4096
10000fa4:	109bb104 	addi	r2,r2,28356
10000fa8:	15000015 	stw	r20,0(r2)
10000fac:	003f1b06 	br	10000c1c <__alt_data_end+0xf8000c1c>
10000fb0:	9009883a 	mov	r4,r18
10000fb4:	81400204 	addi	r5,r16,8
10000fb8:	00021940 	call	10002194 <_free_r>
10000fbc:	00840074 	movhi	r2,4097
10000fc0:	10a26604 	addi	r2,r2,-30312
10000fc4:	10800017 	ldw	r2,0(r2)
10000fc8:	003f3906 	br	10000cb0 <__alt_data_end+0xf8000cb0>
10000fcc:	01405504 	movi	r5,340
10000fd0:	28c00436 	bltu	r5,r3,10000fe4 <_malloc_r+0x798>
10000fd4:	100ad3fa 	srli	r5,r2,15
10000fd8:	29401dc4 	addi	r5,r5,119
10000fdc:	294d883a 	add	r6,r5,r5
10000fe0:	003f6206 	br	10000d6c <__alt_data_end+0xf8000d6c>
10000fe4:	01415504 	movi	r5,1364
10000fe8:	28c00436 	bltu	r5,r3,10000ffc <_malloc_r+0x7b0>
10000fec:	100ad4ba 	srli	r5,r2,18
10000ff0:	29401f04 	addi	r5,r5,124
10000ff4:	294d883a 	add	r6,r5,r5
10000ff8:	003f5c06 	br	10000d6c <__alt_data_end+0xf8000d6c>
10000ffc:	01803f04 	movi	r6,252
10001000:	01401f84 	movi	r5,126
10001004:	003f5906 	br	10000d6c <__alt_data_end+0xf8000d6c>
10001008:	98800117 	ldw	r2,4(r19)
1000100c:	003fa906 	br	10000eb4 <__alt_data_end+0xf8000eb4>

10001010 <memchr>:
10001010:	208000cc 	andi	r2,r4,3
10001014:	2811883a 	mov	r8,r5
10001018:	10003526 	beq	r2,zero,100010f0 <memchr+0xe0>
1000101c:	30bfffc4 	addi	r2,r6,-1
10001020:	30001b26 	beq	r6,zero,10001090 <memchr+0x80>
10001024:	21800003 	ldbu	r6,0(r4)
10001028:	28c03fcc 	andi	r3,r5,255
1000102c:	30c01a26 	beq	r6,r3,10001098 <memchr+0x88>
10001030:	180d883a 	mov	r6,r3
10001034:	00000406 	br	10001048 <memchr+0x38>
10001038:	10001526 	beq	r2,zero,10001090 <memchr+0x80>
1000103c:	20c00003 	ldbu	r3,0(r4)
10001040:	10bfffc4 	addi	r2,r2,-1
10001044:	19801426 	beq	r3,r6,10001098 <memchr+0x88>
10001048:	21000044 	addi	r4,r4,1
1000104c:	20c000cc 	andi	r3,r4,3
10001050:	183ff91e 	bne	r3,zero,10001038 <__alt_data_end+0xf8001038>
10001054:	02c000c4 	movi	r11,3
10001058:	58801136 	bltu	r11,r2,100010a0 <memchr+0x90>
1000105c:	10000c26 	beq	r2,zero,10001090 <memchr+0x80>
10001060:	20c00003 	ldbu	r3,0(r4)
10001064:	29403fcc 	andi	r5,r5,255
10001068:	19400b26 	beq	r3,r5,10001098 <memchr+0x88>
1000106c:	20c00044 	addi	r3,r4,1
10001070:	2085883a 	add	r2,r4,r2
10001074:	41803fcc 	andi	r6,r8,255
10001078:	00000306 	br	10001088 <memchr+0x78>
1000107c:	18c00044 	addi	r3,r3,1
10001080:	197fffc3 	ldbu	r5,-1(r3)
10001084:	29800426 	beq	r5,r6,10001098 <memchr+0x88>
10001088:	1809883a 	mov	r4,r3
1000108c:	18bffb1e 	bne	r3,r2,1000107c <__alt_data_end+0xf800107c>
10001090:	0005883a 	mov	r2,zero
10001094:	f800283a 	ret
10001098:	2005883a 	mov	r2,r4
1000109c:	f800283a 	ret
100010a0:	28c03fcc 	andi	r3,r5,255
100010a4:	180c923a 	slli	r6,r3,8
100010a8:	02bfbff4 	movhi	r10,65279
100010ac:	52bfbfc4 	addi	r10,r10,-257
100010b0:	02602074 	movhi	r9,32897
100010b4:	4a602004 	addi	r9,r9,-32640
100010b8:	30c6b03a 	or	r3,r6,r3
100010bc:	180c943a 	slli	r6,r3,16
100010c0:	30ccb03a 	or	r6,r6,r3
100010c4:	20c00017 	ldw	r3,0(r4)
100010c8:	30c6f03a 	xor	r3,r6,r3
100010cc:	1a8f883a 	add	r7,r3,r10
100010d0:	00c6303a 	nor	r3,zero,r3
100010d4:	38c6703a 	and	r3,r7,r3
100010d8:	1a46703a 	and	r3,r3,r9
100010dc:	183fdf1e 	bne	r3,zero,1000105c <__alt_data_end+0xf800105c>
100010e0:	10bfff04 	addi	r2,r2,-4
100010e4:	21000104 	addi	r4,r4,4
100010e8:	58bff636 	bltu	r11,r2,100010c4 <__alt_data_end+0xf80010c4>
100010ec:	003fdb06 	br	1000105c <__alt_data_end+0xf800105c>
100010f0:	3005883a 	mov	r2,r6
100010f4:	003fd706 	br	10001054 <__alt_data_end+0xf8001054>

100010f8 <memcpy>:
100010f8:	00c003c4 	movi	r3,15
100010fc:	2005883a 	mov	r2,r4
10001100:	1980372e 	bgeu	r3,r6,100011e0 <memcpy+0xe8>
10001104:	2146b03a 	or	r3,r4,r5
10001108:	18c000cc 	andi	r3,r3,3
1000110c:	1800371e 	bne	r3,zero,100011ec <memcpy+0xf4>
10001110:	327ffc04 	addi	r9,r6,-16
10001114:	4812d13a 	srli	r9,r9,4
10001118:	2007883a 	mov	r3,r4
1000111c:	280f883a 	mov	r7,r5
10001120:	4808913a 	slli	r4,r9,4
10001124:	1109883a 	add	r4,r2,r4
10001128:	21000404 	addi	r4,r4,16
1000112c:	3a000017 	ldw	r8,0(r7)
10001130:	18c00404 	addi	r3,r3,16
10001134:	39c00404 	addi	r7,r7,16
10001138:	1a3ffc15 	stw	r8,-16(r3)
1000113c:	3a3ffd17 	ldw	r8,-12(r7)
10001140:	1a3ffd15 	stw	r8,-12(r3)
10001144:	3a3ffe17 	ldw	r8,-8(r7)
10001148:	1a3ffe15 	stw	r8,-8(r3)
1000114c:	3a3fff17 	ldw	r8,-4(r7)
10001150:	1a3fff15 	stw	r8,-4(r3)
10001154:	193ff51e 	bne	r3,r4,1000112c <__alt_data_end+0xf800112c>
10001158:	49000044 	addi	r4,r9,1
1000115c:	2008913a 	slli	r4,r4,4
10001160:	328003cc 	andi	r10,r6,15
10001164:	1107883a 	add	r3,r2,r4
10001168:	290b883a 	add	r5,r5,r4
1000116c:	010000c4 	movi	r4,3
10001170:	2280212e 	bgeu	r4,r10,100011f8 <memcpy+0x100>
10001174:	52bfff04 	addi	r10,r10,-4
10001178:	5014d0ba 	srli	r10,r10,2
1000117c:	180f883a 	mov	r7,r3
10001180:	2811883a 	mov	r8,r5
10001184:	5289883a 	add	r4,r10,r10
10001188:	2109883a 	add	r4,r4,r4
1000118c:	21000104 	addi	r4,r4,4
10001190:	1909883a 	add	r4,r3,r4
10001194:	42400017 	ldw	r9,0(r8)
10001198:	39c00104 	addi	r7,r7,4
1000119c:	42000104 	addi	r8,r8,4
100011a0:	3a7fff15 	stw	r9,-4(r7)
100011a4:	393ffb1e 	bne	r7,r4,10001194 <__alt_data_end+0xf8001194>
100011a8:	51000044 	addi	r4,r10,1
100011ac:	2109883a 	add	r4,r4,r4
100011b0:	2109883a 	add	r4,r4,r4
100011b4:	318000cc 	andi	r6,r6,3
100011b8:	1907883a 	add	r3,r3,r4
100011bc:	290b883a 	add	r5,r5,r4
100011c0:	30000c26 	beq	r6,zero,100011f4 <memcpy+0xfc>
100011c4:	298d883a 	add	r6,r5,r6
100011c8:	29c00003 	ldbu	r7,0(r5)
100011cc:	18c00044 	addi	r3,r3,1
100011d0:	29400044 	addi	r5,r5,1
100011d4:	19ffffc5 	stb	r7,-1(r3)
100011d8:	29bffb1e 	bne	r5,r6,100011c8 <__alt_data_end+0xf80011c8>
100011dc:	f800283a 	ret
100011e0:	2007883a 	mov	r3,r4
100011e4:	303ff71e 	bne	r6,zero,100011c4 <__alt_data_end+0xf80011c4>
100011e8:	00000206 	br	100011f4 <memcpy+0xfc>
100011ec:	2007883a 	mov	r3,r4
100011f0:	003ff406 	br	100011c4 <__alt_data_end+0xf80011c4>
100011f4:	f800283a 	ret
100011f8:	500d883a 	mov	r6,r10
100011fc:	303ff11e 	bne	r6,zero,100011c4 <__alt_data_end+0xf80011c4>
10001200:	003ffc06 	br	100011f4 <__alt_data_end+0xf80011f4>

10001204 <memmove>:
10001204:	2005883a 	mov	r2,r4
10001208:	29000b2e 	bgeu	r5,r4,10001238 <memmove+0x34>
1000120c:	298f883a 	add	r7,r5,r6
10001210:	21c0092e 	bgeu	r4,r7,10001238 <memmove+0x34>
10001214:	2187883a 	add	r3,r4,r6
10001218:	198bc83a 	sub	r5,r3,r6
1000121c:	30003e26 	beq	r6,zero,10001318 <memmove+0x114>
10001220:	39ffffc4 	addi	r7,r7,-1
10001224:	39000003 	ldbu	r4,0(r7)
10001228:	18ffffc4 	addi	r3,r3,-1
1000122c:	19000005 	stb	r4,0(r3)
10001230:	197ffb1e 	bne	r3,r5,10001220 <__alt_data_end+0xf8001220>
10001234:	f800283a 	ret
10001238:	00c003c4 	movi	r3,15
1000123c:	1980372e 	bgeu	r3,r6,1000131c <memmove+0x118>
10001240:	1146b03a 	or	r3,r2,r5
10001244:	18c000cc 	andi	r3,r3,3
10001248:	1800371e 	bne	r3,zero,10001328 <memmove+0x124>
1000124c:	327ffc04 	addi	r9,r6,-16
10001250:	4812d13a 	srli	r9,r9,4
10001254:	280f883a 	mov	r7,r5
10001258:	1007883a 	mov	r3,r2
1000125c:	4810913a 	slli	r8,r9,4
10001260:	1211883a 	add	r8,r2,r8
10001264:	42000404 	addi	r8,r8,16
10001268:	39000017 	ldw	r4,0(r7)
1000126c:	18c00404 	addi	r3,r3,16
10001270:	39c00404 	addi	r7,r7,16
10001274:	193ffc15 	stw	r4,-16(r3)
10001278:	393ffd17 	ldw	r4,-12(r7)
1000127c:	193ffd15 	stw	r4,-12(r3)
10001280:	393ffe17 	ldw	r4,-8(r7)
10001284:	193ffe15 	stw	r4,-8(r3)
10001288:	393fff17 	ldw	r4,-4(r7)
1000128c:	193fff15 	stw	r4,-4(r3)
10001290:	1a3ff51e 	bne	r3,r8,10001268 <__alt_data_end+0xf8001268>
10001294:	49000044 	addi	r4,r9,1
10001298:	2008913a 	slli	r4,r4,4
1000129c:	328003cc 	andi	r10,r6,15
100012a0:	1107883a 	add	r3,r2,r4
100012a4:	290b883a 	add	r5,r5,r4
100012a8:	010000c4 	movi	r4,3
100012ac:	2280212e 	bgeu	r4,r10,10001334 <memmove+0x130>
100012b0:	52bfff04 	addi	r10,r10,-4
100012b4:	5014d0ba 	srli	r10,r10,2
100012b8:	180f883a 	mov	r7,r3
100012bc:	2809883a 	mov	r4,r5
100012c0:	5291883a 	add	r8,r10,r10
100012c4:	4211883a 	add	r8,r8,r8
100012c8:	42400104 	addi	r9,r8,4
100012cc:	1a53883a 	add	r9,r3,r9
100012d0:	22000017 	ldw	r8,0(r4)
100012d4:	39c00104 	addi	r7,r7,4
100012d8:	21000104 	addi	r4,r4,4
100012dc:	3a3fff15 	stw	r8,-4(r7)
100012e0:	3a7ffb1e 	bne	r7,r9,100012d0 <__alt_data_end+0xf80012d0>
100012e4:	51000044 	addi	r4,r10,1
100012e8:	2109883a 	add	r4,r4,r4
100012ec:	2109883a 	add	r4,r4,r4
100012f0:	318000cc 	andi	r6,r6,3
100012f4:	1907883a 	add	r3,r3,r4
100012f8:	290b883a 	add	r5,r5,r4
100012fc:	30000c26 	beq	r6,zero,10001330 <memmove+0x12c>
10001300:	198d883a 	add	r6,r3,r6
10001304:	29c00003 	ldbu	r7,0(r5)
10001308:	18c00044 	addi	r3,r3,1
1000130c:	29400044 	addi	r5,r5,1
10001310:	19ffffc5 	stb	r7,-1(r3)
10001314:	19bffb1e 	bne	r3,r6,10001304 <__alt_data_end+0xf8001304>
10001318:	f800283a 	ret
1000131c:	1007883a 	mov	r3,r2
10001320:	303ff71e 	bne	r6,zero,10001300 <__alt_data_end+0xf8001300>
10001324:	00000206 	br	10001330 <memmove+0x12c>
10001328:	1007883a 	mov	r3,r2
1000132c:	003ff406 	br	10001300 <__alt_data_end+0xf8001300>
10001330:	f800283a 	ret
10001334:	500d883a 	mov	r6,r10
10001338:	303ff11e 	bne	r6,zero,10001300 <__alt_data_end+0xf8001300>
1000133c:	003ffc06 	br	10001330 <__alt_data_end+0xf8001330>

10001340 <_realloc_r>:
10001340:	defff604 	addi	sp,sp,-40
10001344:	dd000415 	stw	r20,16(sp)
10001348:	dc000015 	stw	r16,0(sp)
1000134c:	dfc00915 	stw	ra,36(sp)
10001350:	df000815 	stw	fp,32(sp)
10001354:	ddc00715 	stw	r23,28(sp)
10001358:	dd800615 	stw	r22,24(sp)
1000135c:	dd400515 	stw	r21,20(sp)
10001360:	dcc00315 	stw	r19,12(sp)
10001364:	dc800215 	stw	r18,8(sp)
10001368:	dc400115 	stw	r17,4(sp)
1000136c:	2821883a 	mov	r16,r5
10001370:	3029883a 	mov	r20,r6
10001374:	28009a26 	beq	r5,zero,100015e0 <_realloc_r+0x2a0>
10001378:	202b883a 	mov	r21,r4
1000137c:	00033740 	call	10003374 <__malloc_lock>
10001380:	80ffff17 	ldw	r3,-4(r16)
10001384:	047fff04 	movi	r17,-4
10001388:	a08002c4 	addi	r2,r20,11
1000138c:	01000584 	movi	r4,22
10001390:	84fffe04 	addi	r19,r16,-8
10001394:	1c62703a 	and	r17,r3,r17
10001398:	2080372e 	bgeu	r4,r2,10001478 <_realloc_r+0x138>
1000139c:	04bffe04 	movi	r18,-8
100013a0:	14a4703a 	and	r18,r2,r18
100013a4:	9005883a 	mov	r2,r18
100013a8:	90005b16 	blt	r18,zero,10001518 <_realloc_r+0x1d8>
100013ac:	95005a36 	bltu	r18,r20,10001518 <_realloc_r+0x1d8>
100013b0:	8880340e 	bge	r17,r2,10001484 <_realloc_r+0x144>
100013b4:	05c40034 	movhi	r23,4096
100013b8:	bdd62704 	addi	r23,r23,22684
100013bc:	b9000217 	ldw	r4,8(r23)
100013c0:	9c4b883a 	add	r5,r19,r17
100013c4:	21409626 	beq	r4,r5,10001620 <_realloc_r+0x2e0>
100013c8:	29800117 	ldw	r6,4(r5)
100013cc:	01ffff84 	movi	r7,-2
100013d0:	31ce703a 	and	r7,r6,r7
100013d4:	29cf883a 	add	r7,r5,r7
100013d8:	39c00117 	ldw	r7,4(r7)
100013dc:	39c0004c 	andi	r7,r7,1
100013e0:	38004226 	beq	r7,zero,100014ec <_realloc_r+0x1ac>
100013e4:	000d883a 	mov	r6,zero
100013e8:	000b883a 	mov	r5,zero
100013ec:	18c0004c 	andi	r3,r3,1
100013f0:	18005c1e 	bne	r3,zero,10001564 <_realloc_r+0x224>
100013f4:	85bffe17 	ldw	r22,-8(r16)
100013f8:	00ffff04 	movi	r3,-4
100013fc:	9dadc83a 	sub	r22,r19,r22
10001400:	b1c00117 	ldw	r7,4(r22)
10001404:	38c6703a 	and	r3,r7,r3
10001408:	28005426 	beq	r5,zero,1000155c <_realloc_r+0x21c>
1000140c:	1c47883a 	add	r3,r3,r17
10001410:	2900bf26 	beq	r5,r4,10001710 <_realloc_r+0x3d0>
10001414:	30ef883a 	add	r23,r6,r3
10001418:	b8807e16 	blt	r23,r2,10001614 <_realloc_r+0x2d4>
1000141c:	28800317 	ldw	r2,12(r5)
10001420:	28c00217 	ldw	r3,8(r5)
10001424:	89bfff04 	addi	r6,r17,-4
10001428:	01000904 	movi	r4,36
1000142c:	18800315 	stw	r2,12(r3)
10001430:	10c00215 	stw	r3,8(r2)
10001434:	b1400217 	ldw	r5,8(r22)
10001438:	b0c00317 	ldw	r3,12(r22)
1000143c:	b5000204 	addi	r20,r22,8
10001440:	28c00315 	stw	r3,12(r5)
10001444:	19400215 	stw	r5,8(r3)
10001448:	21808536 	bltu	r4,r6,10001660 <_realloc_r+0x320>
1000144c:	008004c4 	movi	r2,19
10001450:	1180932e 	bgeu	r2,r6,100016a0 <_realloc_r+0x360>
10001454:	80800017 	ldw	r2,0(r16)
10001458:	b0800215 	stw	r2,8(r22)
1000145c:	80800117 	ldw	r2,4(r16)
10001460:	b0800315 	stw	r2,12(r22)
10001464:	008006c4 	movi	r2,27
10001468:	1180df36 	bltu	r2,r6,100017e8 <_realloc_r+0x4a8>
1000146c:	b0c00404 	addi	r3,r22,16
10001470:	84000204 	addi	r16,r16,8
10001474:	00008b06 	br	100016a4 <_realloc_r+0x364>
10001478:	00800404 	movi	r2,16
1000147c:	1025883a 	mov	r18,r2
10001480:	003fca06 	br	100013ac <__alt_data_end+0xf80013ac>
10001484:	8029883a 	mov	r20,r16
10001488:	8c8dc83a 	sub	r6,r17,r18
1000148c:	008003c4 	movi	r2,15
10001490:	18c0004c 	andi	r3,r3,1
10001494:	11802436 	bltu	r2,r6,10001528 <_realloc_r+0x1e8>
10001498:	1c46b03a 	or	r3,r3,r17
1000149c:	98c00115 	stw	r3,4(r19)
100014a0:	9c63883a 	add	r17,r19,r17
100014a4:	88800117 	ldw	r2,4(r17)
100014a8:	10800054 	ori	r2,r2,1
100014ac:	88800115 	stw	r2,4(r17)
100014b0:	a809883a 	mov	r4,r21
100014b4:	00033940 	call	10003394 <__malloc_unlock>
100014b8:	a005883a 	mov	r2,r20
100014bc:	dfc00917 	ldw	ra,36(sp)
100014c0:	df000817 	ldw	fp,32(sp)
100014c4:	ddc00717 	ldw	r23,28(sp)
100014c8:	dd800617 	ldw	r22,24(sp)
100014cc:	dd400517 	ldw	r21,20(sp)
100014d0:	dd000417 	ldw	r20,16(sp)
100014d4:	dcc00317 	ldw	r19,12(sp)
100014d8:	dc800217 	ldw	r18,8(sp)
100014dc:	dc400117 	ldw	r17,4(sp)
100014e0:	dc000017 	ldw	r16,0(sp)
100014e4:	dec00a04 	addi	sp,sp,40
100014e8:	f800283a 	ret
100014ec:	01ffff04 	movi	r7,-4
100014f0:	31cc703a 	and	r6,r6,r7
100014f4:	344f883a 	add	r7,r6,r17
100014f8:	38bfbc16 	blt	r7,r2,100013ec <__alt_data_end+0xf80013ec>
100014fc:	28800317 	ldw	r2,12(r5)
10001500:	29000217 	ldw	r4,8(r5)
10001504:	8029883a 	mov	r20,r16
10001508:	3823883a 	mov	r17,r7
1000150c:	20800315 	stw	r2,12(r4)
10001510:	11000215 	stw	r4,8(r2)
10001514:	003fdc06 	br	10001488 <__alt_data_end+0xf8001488>
10001518:	00800304 	movi	r2,12
1000151c:	a8800015 	stw	r2,0(r21)
10001520:	0005883a 	mov	r2,zero
10001524:	003fe506 	br	100014bc <__alt_data_end+0xf80014bc>
10001528:	1c86b03a 	or	r3,r3,r18
1000152c:	9c8b883a 	add	r5,r19,r18
10001530:	98c00115 	stw	r3,4(r19)
10001534:	30800054 	ori	r2,r6,1
10001538:	28800115 	stw	r2,4(r5)
1000153c:	298d883a 	add	r6,r5,r6
10001540:	30800117 	ldw	r2,4(r6)
10001544:	a809883a 	mov	r4,r21
10001548:	29400204 	addi	r5,r5,8
1000154c:	10800054 	ori	r2,r2,1
10001550:	30800115 	stw	r2,4(r6)
10001554:	00021940 	call	10002194 <_free_r>
10001558:	003fd506 	br	100014b0 <__alt_data_end+0xf80014b0>
1000155c:	1c6f883a 	add	r23,r3,r17
10001560:	b880370e 	bge	r23,r2,10001640 <_realloc_r+0x300>
10001564:	a00b883a 	mov	r5,r20
10001568:	a809883a 	mov	r4,r21
1000156c:	000084c0 	call	1000084c <_malloc_r>
10001570:	1029883a 	mov	r20,r2
10001574:	1000c026 	beq	r2,zero,10001878 <_realloc_r+0x538>
10001578:	80ffff17 	ldw	r3,-4(r16)
1000157c:	113ffe04 	addi	r4,r2,-8
10001580:	00bfff84 	movi	r2,-2
10001584:	1884703a 	and	r2,r3,r2
10001588:	9885883a 	add	r2,r19,r2
1000158c:	20809026 	beq	r4,r2,100017d0 <_realloc_r+0x490>
10001590:	89bfff04 	addi	r6,r17,-4
10001594:	00800904 	movi	r2,36
10001598:	11805936 	bltu	r2,r6,10001700 <_realloc_r+0x3c0>
1000159c:	00c004c4 	movi	r3,19
100015a0:	19803636 	bltu	r3,r6,1000167c <_realloc_r+0x33c>
100015a4:	a005883a 	mov	r2,r20
100015a8:	8007883a 	mov	r3,r16
100015ac:	19000017 	ldw	r4,0(r3)
100015b0:	11000015 	stw	r4,0(r2)
100015b4:	19000117 	ldw	r4,4(r3)
100015b8:	11000115 	stw	r4,4(r2)
100015bc:	18c00217 	ldw	r3,8(r3)
100015c0:	10c00215 	stw	r3,8(r2)
100015c4:	800b883a 	mov	r5,r16
100015c8:	a809883a 	mov	r4,r21
100015cc:	00021940 	call	10002194 <_free_r>
100015d0:	a809883a 	mov	r4,r21
100015d4:	00033940 	call	10003394 <__malloc_unlock>
100015d8:	a005883a 	mov	r2,r20
100015dc:	003fb706 	br	100014bc <__alt_data_end+0xf80014bc>
100015e0:	300b883a 	mov	r5,r6
100015e4:	dfc00917 	ldw	ra,36(sp)
100015e8:	df000817 	ldw	fp,32(sp)
100015ec:	ddc00717 	ldw	r23,28(sp)
100015f0:	dd800617 	ldw	r22,24(sp)
100015f4:	dd400517 	ldw	r21,20(sp)
100015f8:	dd000417 	ldw	r20,16(sp)
100015fc:	dcc00317 	ldw	r19,12(sp)
10001600:	dc800217 	ldw	r18,8(sp)
10001604:	dc400117 	ldw	r17,4(sp)
10001608:	dc000017 	ldw	r16,0(sp)
1000160c:	dec00a04 	addi	sp,sp,40
10001610:	000084c1 	jmpi	1000084c <_malloc_r>
10001614:	182f883a 	mov	r23,r3
10001618:	b8bfd216 	blt	r23,r2,10001564 <__alt_data_end+0xf8001564>
1000161c:	00000806 	br	10001640 <_realloc_r+0x300>
10001620:	21800117 	ldw	r6,4(r4)
10001624:	017fff04 	movi	r5,-4
10001628:	91c00404 	addi	r7,r18,16
1000162c:	314c703a 	and	r6,r6,r5
10001630:	344b883a 	add	r5,r6,r17
10001634:	29c0250e 	bge	r5,r7,100016cc <_realloc_r+0x38c>
10001638:	200b883a 	mov	r5,r4
1000163c:	003f6b06 	br	100013ec <__alt_data_end+0xf80013ec>
10001640:	b0800317 	ldw	r2,12(r22)
10001644:	b0c00217 	ldw	r3,8(r22)
10001648:	89bfff04 	addi	r6,r17,-4
1000164c:	01000904 	movi	r4,36
10001650:	18800315 	stw	r2,12(r3)
10001654:	10c00215 	stw	r3,8(r2)
10001658:	b5000204 	addi	r20,r22,8
1000165c:	21bf7b2e 	bgeu	r4,r6,1000144c <__alt_data_end+0xf800144c>
10001660:	a009883a 	mov	r4,r20
10001664:	800b883a 	mov	r5,r16
10001668:	00012040 	call	10001204 <memmove>
1000166c:	b0c00117 	ldw	r3,4(r22)
10001670:	b823883a 	mov	r17,r23
10001674:	b027883a 	mov	r19,r22
10001678:	003f8306 	br	10001488 <__alt_data_end+0xf8001488>
1000167c:	80c00017 	ldw	r3,0(r16)
10001680:	a0c00015 	stw	r3,0(r20)
10001684:	80c00117 	ldw	r3,4(r16)
10001688:	a0c00115 	stw	r3,4(r20)
1000168c:	00c006c4 	movi	r3,27
10001690:	19804736 	bltu	r3,r6,100017b0 <_realloc_r+0x470>
10001694:	a0800204 	addi	r2,r20,8
10001698:	80c00204 	addi	r3,r16,8
1000169c:	003fc306 	br	100015ac <__alt_data_end+0xf80015ac>
100016a0:	a007883a 	mov	r3,r20
100016a4:	80800017 	ldw	r2,0(r16)
100016a8:	b823883a 	mov	r17,r23
100016ac:	b027883a 	mov	r19,r22
100016b0:	18800015 	stw	r2,0(r3)
100016b4:	80800117 	ldw	r2,4(r16)
100016b8:	18800115 	stw	r2,4(r3)
100016bc:	80800217 	ldw	r2,8(r16)
100016c0:	18800215 	stw	r2,8(r3)
100016c4:	b0c00117 	ldw	r3,4(r22)
100016c8:	003f6f06 	br	10001488 <__alt_data_end+0xf8001488>
100016cc:	9ca7883a 	add	r19,r19,r18
100016d0:	2c85c83a 	sub	r2,r5,r18
100016d4:	bcc00215 	stw	r19,8(r23)
100016d8:	10800054 	ori	r2,r2,1
100016dc:	98800115 	stw	r2,4(r19)
100016e0:	80bfff17 	ldw	r2,-4(r16)
100016e4:	a809883a 	mov	r4,r21
100016e8:	1080004c 	andi	r2,r2,1
100016ec:	90a4b03a 	or	r18,r18,r2
100016f0:	84bfff15 	stw	r18,-4(r16)
100016f4:	00033940 	call	10003394 <__malloc_unlock>
100016f8:	8005883a 	mov	r2,r16
100016fc:	003f6f06 	br	100014bc <__alt_data_end+0xf80014bc>
10001700:	a009883a 	mov	r4,r20
10001704:	800b883a 	mov	r5,r16
10001708:	00012040 	call	10001204 <memmove>
1000170c:	003fad06 	br	100015c4 <__alt_data_end+0xf80015c4>
10001710:	30f9883a 	add	fp,r6,r3
10001714:	91000404 	addi	r4,r18,16
10001718:	e13fbe16 	blt	fp,r4,10001614 <__alt_data_end+0xf8001614>
1000171c:	b0800317 	ldw	r2,12(r22)
10001720:	b0c00217 	ldw	r3,8(r22)
10001724:	89bfff04 	addi	r6,r17,-4
10001728:	01000904 	movi	r4,36
1000172c:	18800315 	stw	r2,12(r3)
10001730:	10c00215 	stw	r3,8(r2)
10001734:	b4400204 	addi	r17,r22,8
10001738:	21804336 	bltu	r4,r6,10001848 <_realloc_r+0x508>
1000173c:	008004c4 	movi	r2,19
10001740:	11803f2e 	bgeu	r2,r6,10001840 <_realloc_r+0x500>
10001744:	80800017 	ldw	r2,0(r16)
10001748:	b0800215 	stw	r2,8(r22)
1000174c:	80800117 	ldw	r2,4(r16)
10001750:	b0800315 	stw	r2,12(r22)
10001754:	008006c4 	movi	r2,27
10001758:	11803f36 	bltu	r2,r6,10001858 <_realloc_r+0x518>
1000175c:	b0c00404 	addi	r3,r22,16
10001760:	84000204 	addi	r16,r16,8
10001764:	80800017 	ldw	r2,0(r16)
10001768:	18800015 	stw	r2,0(r3)
1000176c:	80800117 	ldw	r2,4(r16)
10001770:	18800115 	stw	r2,4(r3)
10001774:	80800217 	ldw	r2,8(r16)
10001778:	18800215 	stw	r2,8(r3)
1000177c:	b487883a 	add	r3,r22,r18
10001780:	e485c83a 	sub	r2,fp,r18
10001784:	b8c00215 	stw	r3,8(r23)
10001788:	10800054 	ori	r2,r2,1
1000178c:	18800115 	stw	r2,4(r3)
10001790:	b0800117 	ldw	r2,4(r22)
10001794:	a809883a 	mov	r4,r21
10001798:	1080004c 	andi	r2,r2,1
1000179c:	90a4b03a 	or	r18,r18,r2
100017a0:	b4800115 	stw	r18,4(r22)
100017a4:	00033940 	call	10003394 <__malloc_unlock>
100017a8:	8805883a 	mov	r2,r17
100017ac:	003f4306 	br	100014bc <__alt_data_end+0xf80014bc>
100017b0:	80c00217 	ldw	r3,8(r16)
100017b4:	a0c00215 	stw	r3,8(r20)
100017b8:	80c00317 	ldw	r3,12(r16)
100017bc:	a0c00315 	stw	r3,12(r20)
100017c0:	30801126 	beq	r6,r2,10001808 <_realloc_r+0x4c8>
100017c4:	a0800404 	addi	r2,r20,16
100017c8:	80c00404 	addi	r3,r16,16
100017cc:	003f7706 	br	100015ac <__alt_data_end+0xf80015ac>
100017d0:	a13fff17 	ldw	r4,-4(r20)
100017d4:	00bfff04 	movi	r2,-4
100017d8:	8029883a 	mov	r20,r16
100017dc:	2084703a 	and	r2,r4,r2
100017e0:	88a3883a 	add	r17,r17,r2
100017e4:	003f2806 	br	10001488 <__alt_data_end+0xf8001488>
100017e8:	80800217 	ldw	r2,8(r16)
100017ec:	b0800415 	stw	r2,16(r22)
100017f0:	80800317 	ldw	r2,12(r16)
100017f4:	b0800515 	stw	r2,20(r22)
100017f8:	31000a26 	beq	r6,r4,10001824 <_realloc_r+0x4e4>
100017fc:	b0c00604 	addi	r3,r22,24
10001800:	84000404 	addi	r16,r16,16
10001804:	003fa706 	br	100016a4 <__alt_data_end+0xf80016a4>
10001808:	81000417 	ldw	r4,16(r16)
1000180c:	a0800604 	addi	r2,r20,24
10001810:	80c00604 	addi	r3,r16,24
10001814:	a1000415 	stw	r4,16(r20)
10001818:	81000517 	ldw	r4,20(r16)
1000181c:	a1000515 	stw	r4,20(r20)
10001820:	003f6206 	br	100015ac <__alt_data_end+0xf80015ac>
10001824:	80800417 	ldw	r2,16(r16)
10001828:	84000604 	addi	r16,r16,24
1000182c:	b0c00804 	addi	r3,r22,32
10001830:	b0800615 	stw	r2,24(r22)
10001834:	80bfff17 	ldw	r2,-4(r16)
10001838:	b0800715 	stw	r2,28(r22)
1000183c:	003f9906 	br	100016a4 <__alt_data_end+0xf80016a4>
10001840:	8807883a 	mov	r3,r17
10001844:	003fc706 	br	10001764 <__alt_data_end+0xf8001764>
10001848:	8809883a 	mov	r4,r17
1000184c:	800b883a 	mov	r5,r16
10001850:	00012040 	call	10001204 <memmove>
10001854:	003fc906 	br	1000177c <__alt_data_end+0xf800177c>
10001858:	80800217 	ldw	r2,8(r16)
1000185c:	b0800415 	stw	r2,16(r22)
10001860:	80800317 	ldw	r2,12(r16)
10001864:	b0800515 	stw	r2,20(r22)
10001868:	31000726 	beq	r6,r4,10001888 <_realloc_r+0x548>
1000186c:	b0c00604 	addi	r3,r22,24
10001870:	84000404 	addi	r16,r16,16
10001874:	003fbb06 	br	10001764 <__alt_data_end+0xf8001764>
10001878:	a809883a 	mov	r4,r21
1000187c:	00033940 	call	10003394 <__malloc_unlock>
10001880:	0005883a 	mov	r2,zero
10001884:	003f0d06 	br	100014bc <__alt_data_end+0xf80014bc>
10001888:	80800417 	ldw	r2,16(r16)
1000188c:	84000604 	addi	r16,r16,24
10001890:	b0c00804 	addi	r3,r22,32
10001894:	b0800615 	stw	r2,24(r22)
10001898:	80bfff17 	ldw	r2,-4(r16)
1000189c:	b0800715 	stw	r2,28(r22)
100018a0:	003fb006 	br	10001764 <__alt_data_end+0xf8001764>

100018a4 <_sbrk_r>:
100018a4:	defffd04 	addi	sp,sp,-12
100018a8:	dc400115 	stw	r17,4(sp)
100018ac:	dc000015 	stw	r16,0(sp)
100018b0:	2023883a 	mov	r17,r4
100018b4:	04040074 	movhi	r16,4097
100018b8:	84225f04 	addi	r16,r16,-30340
100018bc:	2809883a 	mov	r4,r5
100018c0:	dfc00215 	stw	ra,8(sp)
100018c4:	80000015 	stw	zero,0(r16)
100018c8:	000357c0 	call	1000357c <sbrk>
100018cc:	00ffffc4 	movi	r3,-1
100018d0:	10c00526 	beq	r2,r3,100018e8 <_sbrk_r+0x44>
100018d4:	dfc00217 	ldw	ra,8(sp)
100018d8:	dc400117 	ldw	r17,4(sp)
100018dc:	dc000017 	ldw	r16,0(sp)
100018e0:	dec00304 	addi	sp,sp,12
100018e4:	f800283a 	ret
100018e8:	80c00017 	ldw	r3,0(r16)
100018ec:	183ff926 	beq	r3,zero,100018d4 <__alt_data_end+0xf80018d4>
100018f0:	88c00015 	stw	r3,0(r17)
100018f4:	dfc00217 	ldw	ra,8(sp)
100018f8:	dc400117 	ldw	r17,4(sp)
100018fc:	dc000017 	ldw	r16,0(sp)
10001900:	dec00304 	addi	sp,sp,12
10001904:	f800283a 	ret

10001908 <__swsetup_r>:
10001908:	00840034 	movhi	r2,4096
1000190c:	109bb004 	addi	r2,r2,28352
10001910:	10800017 	ldw	r2,0(r2)
10001914:	defffd04 	addi	sp,sp,-12
10001918:	dc400115 	stw	r17,4(sp)
1000191c:	dc000015 	stw	r16,0(sp)
10001920:	dfc00215 	stw	ra,8(sp)
10001924:	2023883a 	mov	r17,r4
10001928:	2821883a 	mov	r16,r5
1000192c:	10000226 	beq	r2,zero,10001938 <__swsetup_r+0x30>
10001930:	10c00e17 	ldw	r3,56(r2)
10001934:	18002e26 	beq	r3,zero,100019f0 <__swsetup_r+0xe8>
10001938:	8080030b 	ldhu	r2,12(r16)
1000193c:	10c0020c 	andi	r3,r2,8
10001940:	100d883a 	mov	r6,r2
10001944:	18000f26 	beq	r3,zero,10001984 <__swsetup_r+0x7c>
10001948:	80c00417 	ldw	r3,16(r16)
1000194c:	18001526 	beq	r3,zero,100019a4 <__swsetup_r+0x9c>
10001950:	1100004c 	andi	r4,r2,1
10001954:	20001c1e 	bne	r4,zero,100019c8 <__swsetup_r+0xc0>
10001958:	1080008c 	andi	r2,r2,2
1000195c:	1000271e 	bne	r2,zero,100019fc <__swsetup_r+0xf4>
10001960:	80800517 	ldw	r2,20(r16)
10001964:	80800215 	stw	r2,8(r16)
10001968:	18001c26 	beq	r3,zero,100019dc <__swsetup_r+0xd4>
1000196c:	0005883a 	mov	r2,zero
10001970:	dfc00217 	ldw	ra,8(sp)
10001974:	dc400117 	ldw	r17,4(sp)
10001978:	dc000017 	ldw	r16,0(sp)
1000197c:	dec00304 	addi	sp,sp,12
10001980:	f800283a 	ret
10001984:	3080040c 	andi	r2,r6,16
10001988:	10001726 	beq	r2,zero,100019e8 <__swsetup_r+0xe0>
1000198c:	3080010c 	andi	r2,r6,4
10001990:	10001d1e 	bne	r2,zero,10001a08 <__swsetup_r+0x100>
10001994:	80c00417 	ldw	r3,16(r16)
10001998:	30800214 	ori	r2,r6,8
1000199c:	8080030d 	sth	r2,12(r16)
100019a0:	183feb1e 	bne	r3,zero,10001950 <__alt_data_end+0xf8001950>
100019a4:	1140a00c 	andi	r5,r2,640
100019a8:	01008004 	movi	r4,512
100019ac:	293fe826 	beq	r5,r4,10001950 <__alt_data_end+0xf8001950>
100019b0:	8809883a 	mov	r4,r17
100019b4:	800b883a 	mov	r5,r16
100019b8:	00025c40 	call	100025c4 <__smakebuf_r>
100019bc:	8080030b 	ldhu	r2,12(r16)
100019c0:	80c00417 	ldw	r3,16(r16)
100019c4:	003fe206 	br	10001950 <__alt_data_end+0xf8001950>
100019c8:	80800517 	ldw	r2,20(r16)
100019cc:	80000215 	stw	zero,8(r16)
100019d0:	0085c83a 	sub	r2,zero,r2
100019d4:	80800615 	stw	r2,24(r16)
100019d8:	183fe41e 	bne	r3,zero,1000196c <__alt_data_end+0xf800196c>
100019dc:	8080030b 	ldhu	r2,12(r16)
100019e0:	1080200c 	andi	r2,r2,128
100019e4:	103fe226 	beq	r2,zero,10001970 <__alt_data_end+0xf8001970>
100019e8:	00bfffc4 	movi	r2,-1
100019ec:	003fe006 	br	10001970 <__alt_data_end+0xf8001970>
100019f0:	1009883a 	mov	r4,r2
100019f4:	0001d600 	call	10001d60 <__sinit>
100019f8:	003fcf06 	br	10001938 <__alt_data_end+0xf8001938>
100019fc:	0005883a 	mov	r2,zero
10001a00:	80800215 	stw	r2,8(r16)
10001a04:	003fd806 	br	10001968 <__alt_data_end+0xf8001968>
10001a08:	81400c17 	ldw	r5,48(r16)
10001a0c:	28000626 	beq	r5,zero,10001a28 <__swsetup_r+0x120>
10001a10:	80801004 	addi	r2,r16,64
10001a14:	28800326 	beq	r5,r2,10001a24 <__swsetup_r+0x11c>
10001a18:	8809883a 	mov	r4,r17
10001a1c:	00021940 	call	10002194 <_free_r>
10001a20:	8180030b 	ldhu	r6,12(r16)
10001a24:	80000c15 	stw	zero,48(r16)
10001a28:	80c00417 	ldw	r3,16(r16)
10001a2c:	00bff6c4 	movi	r2,-37
10001a30:	118c703a 	and	r6,r2,r6
10001a34:	80000115 	stw	zero,4(r16)
10001a38:	80c00015 	stw	r3,0(r16)
10001a3c:	003fd606 	br	10001998 <__alt_data_end+0xf8001998>

10001a40 <_fflush_r>:
10001a40:	defffb04 	addi	sp,sp,-20
10001a44:	dcc00315 	stw	r19,12(sp)
10001a48:	dc400115 	stw	r17,4(sp)
10001a4c:	dfc00415 	stw	ra,16(sp)
10001a50:	dc800215 	stw	r18,8(sp)
10001a54:	dc000015 	stw	r16,0(sp)
10001a58:	2027883a 	mov	r19,r4
10001a5c:	2823883a 	mov	r17,r5
10001a60:	20000226 	beq	r4,zero,10001a6c <_fflush_r+0x2c>
10001a64:	20800e17 	ldw	r2,56(r4)
10001a68:	10005826 	beq	r2,zero,10001bcc <_fflush_r+0x18c>
10001a6c:	8880030b 	ldhu	r2,12(r17)
10001a70:	10ffffcc 	andi	r3,r2,65535
10001a74:	18e0001c 	xori	r3,r3,32768
10001a78:	18e00004 	addi	r3,r3,-32768
10001a7c:	18002b26 	beq	r3,zero,10001b2c <_fflush_r+0xec>
10001a80:	10c0020c 	andi	r3,r2,8
10001a84:	1800311e 	bne	r3,zero,10001b4c <_fflush_r+0x10c>
10001a88:	88c00117 	ldw	r3,4(r17)
10001a8c:	10820014 	ori	r2,r2,2048
10001a90:	8880030d 	sth	r2,12(r17)
10001a94:	00c05c0e 	bge	zero,r3,10001c08 <_fflush_r+0x1c8>
10001a98:	88c00a17 	ldw	r3,40(r17)
10001a9c:	18002326 	beq	r3,zero,10001b2c <_fflush_r+0xec>
10001aa0:	9c000017 	ldw	r16,0(r19)
10001aa4:	1104000c 	andi	r4,r2,4096
10001aa8:	98000015 	stw	zero,0(r19)
10001aac:	20004b26 	beq	r4,zero,10001bdc <_fflush_r+0x19c>
10001ab0:	89801417 	ldw	r6,80(r17)
10001ab4:	1080010c 	andi	r2,r2,4
10001ab8:	10000626 	beq	r2,zero,10001ad4 <_fflush_r+0x94>
10001abc:	89000117 	ldw	r4,4(r17)
10001ac0:	88800c17 	ldw	r2,48(r17)
10001ac4:	310dc83a 	sub	r6,r6,r4
10001ac8:	10000226 	beq	r2,zero,10001ad4 <_fflush_r+0x94>
10001acc:	88800f17 	ldw	r2,60(r17)
10001ad0:	308dc83a 	sub	r6,r6,r2
10001ad4:	89400717 	ldw	r5,28(r17)
10001ad8:	9809883a 	mov	r4,r19
10001adc:	000f883a 	mov	r7,zero
10001ae0:	183ee83a 	callr	r3
10001ae4:	00ffffc4 	movi	r3,-1
10001ae8:	10c04a26 	beq	r2,r3,10001c14 <_fflush_r+0x1d4>
10001aec:	88c0030b 	ldhu	r3,12(r17)
10001af0:	89000417 	ldw	r4,16(r17)
10001af4:	88000115 	stw	zero,4(r17)
10001af8:	197dffcc 	andi	r5,r3,63487
10001afc:	8940030d 	sth	r5,12(r17)
10001b00:	89000015 	stw	r4,0(r17)
10001b04:	18c4000c 	andi	r3,r3,4096
10001b08:	1800581e 	bne	r3,zero,10001c6c <_fflush_r+0x22c>
10001b0c:	89400c17 	ldw	r5,48(r17)
10001b10:	9c000015 	stw	r16,0(r19)
10001b14:	28000526 	beq	r5,zero,10001b2c <_fflush_r+0xec>
10001b18:	88801004 	addi	r2,r17,64
10001b1c:	28800226 	beq	r5,r2,10001b28 <_fflush_r+0xe8>
10001b20:	9809883a 	mov	r4,r19
10001b24:	00021940 	call	10002194 <_free_r>
10001b28:	88000c15 	stw	zero,48(r17)
10001b2c:	0005883a 	mov	r2,zero
10001b30:	dfc00417 	ldw	ra,16(sp)
10001b34:	dcc00317 	ldw	r19,12(sp)
10001b38:	dc800217 	ldw	r18,8(sp)
10001b3c:	dc400117 	ldw	r17,4(sp)
10001b40:	dc000017 	ldw	r16,0(sp)
10001b44:	dec00504 	addi	sp,sp,20
10001b48:	f800283a 	ret
10001b4c:	8c800417 	ldw	r18,16(r17)
10001b50:	903ff626 	beq	r18,zero,10001b2c <__alt_data_end+0xf8001b2c>
10001b54:	8c000017 	ldw	r16,0(r17)
10001b58:	108000cc 	andi	r2,r2,3
10001b5c:	8c800015 	stw	r18,0(r17)
10001b60:	84a1c83a 	sub	r16,r16,r18
10001b64:	10001b26 	beq	r2,zero,10001bd4 <_fflush_r+0x194>
10001b68:	0005883a 	mov	r2,zero
10001b6c:	88800215 	stw	r2,8(r17)
10001b70:	04000316 	blt	zero,r16,10001b80 <_fflush_r+0x140>
10001b74:	003fed06 	br	10001b2c <__alt_data_end+0xf8001b2c>
10001b78:	90a5883a 	add	r18,r18,r2
10001b7c:	043feb0e 	bge	zero,r16,10001b2c <__alt_data_end+0xf8001b2c>
10001b80:	88800917 	ldw	r2,36(r17)
10001b84:	89400717 	ldw	r5,28(r17)
10001b88:	800f883a 	mov	r7,r16
10001b8c:	900d883a 	mov	r6,r18
10001b90:	9809883a 	mov	r4,r19
10001b94:	103ee83a 	callr	r2
10001b98:	80a1c83a 	sub	r16,r16,r2
10001b9c:	00bff616 	blt	zero,r2,10001b78 <__alt_data_end+0xf8001b78>
10001ba0:	88c0030b 	ldhu	r3,12(r17)
10001ba4:	00bfffc4 	movi	r2,-1
10001ba8:	18c01014 	ori	r3,r3,64
10001bac:	88c0030d 	sth	r3,12(r17)
10001bb0:	dfc00417 	ldw	ra,16(sp)
10001bb4:	dcc00317 	ldw	r19,12(sp)
10001bb8:	dc800217 	ldw	r18,8(sp)
10001bbc:	dc400117 	ldw	r17,4(sp)
10001bc0:	dc000017 	ldw	r16,0(sp)
10001bc4:	dec00504 	addi	sp,sp,20
10001bc8:	f800283a 	ret
10001bcc:	0001d600 	call	10001d60 <__sinit>
10001bd0:	003fa606 	br	10001a6c <__alt_data_end+0xf8001a6c>
10001bd4:	88800517 	ldw	r2,20(r17)
10001bd8:	003fe406 	br	10001b6c <__alt_data_end+0xf8001b6c>
10001bdc:	89400717 	ldw	r5,28(r17)
10001be0:	000d883a 	mov	r6,zero
10001be4:	9809883a 	mov	r4,r19
10001be8:	01c00044 	movi	r7,1
10001bec:	183ee83a 	callr	r3
10001bf0:	100d883a 	mov	r6,r2
10001bf4:	00bfffc4 	movi	r2,-1
10001bf8:	30801326 	beq	r6,r2,10001c48 <_fflush_r+0x208>
10001bfc:	8880030b 	ldhu	r2,12(r17)
10001c00:	88c00a17 	ldw	r3,40(r17)
10001c04:	003fab06 	br	10001ab4 <__alt_data_end+0xf8001ab4>
10001c08:	88c00f17 	ldw	r3,60(r17)
10001c0c:	00ffa216 	blt	zero,r3,10001a98 <__alt_data_end+0xf8001a98>
10001c10:	003fc606 	br	10001b2c <__alt_data_end+0xf8001b2c>
10001c14:	98c00017 	ldw	r3,0(r19)
10001c18:	183fb426 	beq	r3,zero,10001aec <__alt_data_end+0xf8001aec>
10001c1c:	01000744 	movi	r4,29
10001c20:	19000226 	beq	r3,r4,10001c2c <_fflush_r+0x1ec>
10001c24:	01000584 	movi	r4,22
10001c28:	1900121e 	bne	r3,r4,10001c74 <_fflush_r+0x234>
10001c2c:	88c0030b 	ldhu	r3,12(r17)
10001c30:	88800417 	ldw	r2,16(r17)
10001c34:	88000115 	stw	zero,4(r17)
10001c38:	18fdffcc 	andi	r3,r3,63487
10001c3c:	88c0030d 	sth	r3,12(r17)
10001c40:	88800015 	stw	r2,0(r17)
10001c44:	003fb106 	br	10001b0c <__alt_data_end+0xf8001b0c>
10001c48:	98800017 	ldw	r2,0(r19)
10001c4c:	103feb26 	beq	r2,zero,10001bfc <__alt_data_end+0xf8001bfc>
10001c50:	00c00744 	movi	r3,29
10001c54:	10c00226 	beq	r2,r3,10001c60 <_fflush_r+0x220>
10001c58:	00c00584 	movi	r3,22
10001c5c:	10ffd01e 	bne	r2,r3,10001ba0 <__alt_data_end+0xf8001ba0>
10001c60:	9c000015 	stw	r16,0(r19)
10001c64:	0005883a 	mov	r2,zero
10001c68:	003fb106 	br	10001b30 <__alt_data_end+0xf8001b30>
10001c6c:	88801415 	stw	r2,80(r17)
10001c70:	003fa606 	br	10001b0c <__alt_data_end+0xf8001b0c>
10001c74:	88c0030b 	ldhu	r3,12(r17)
10001c78:	18c01014 	ori	r3,r3,64
10001c7c:	88c0030d 	sth	r3,12(r17)
10001c80:	003fab06 	br	10001b30 <__alt_data_end+0xf8001b30>

10001c84 <fflush>:
10001c84:	200b883a 	mov	r5,r4
10001c88:	20000426 	beq	r4,zero,10001c9c <fflush+0x18>
10001c8c:	00840034 	movhi	r2,4096
10001c90:	109bb004 	addi	r2,r2,28352
10001c94:	11000017 	ldw	r4,0(r2)
10001c98:	0001a401 	jmpi	10001a40 <_fflush_r>
10001c9c:	00840034 	movhi	r2,4096
10001ca0:	109baf04 	addi	r2,r2,28348
10001ca4:	11000017 	ldw	r4,0(r2)
10001ca8:	01440034 	movhi	r5,4096
10001cac:	29469004 	addi	r5,r5,6720
10001cb0:	000250c1 	jmpi	1000250c <_fwalk_reent>

10001cb4 <__fp_lock>:
10001cb4:	0005883a 	mov	r2,zero
10001cb8:	f800283a 	ret

10001cbc <__fp_unlock>:
10001cbc:	0005883a 	mov	r2,zero
10001cc0:	f800283a 	ret

10001cc4 <_cleanup_r>:
10001cc4:	01440034 	movhi	r5,4096
10001cc8:	294af004 	addi	r5,r5,11200
10001ccc:	00024641 	jmpi	10002464 <_fwalk>

10001cd0 <__sfmoreglue>:
10001cd0:	defffc04 	addi	sp,sp,-16
10001cd4:	dc800215 	stw	r18,8(sp)
10001cd8:	2825883a 	mov	r18,r5
10001cdc:	dc000015 	stw	r16,0(sp)
10001ce0:	01401a04 	movi	r5,104
10001ce4:	2021883a 	mov	r16,r4
10001ce8:	9009883a 	mov	r4,r18
10001cec:	dfc00315 	stw	ra,12(sp)
10001cf0:	dc400115 	stw	r17,4(sp)
10001cf4:	0002d780 	call	10002d78 <__mulsi3>
10001cf8:	8009883a 	mov	r4,r16
10001cfc:	11400304 	addi	r5,r2,12
10001d00:	1023883a 	mov	r17,r2
10001d04:	000084c0 	call	1000084c <_malloc_r>
10001d08:	1021883a 	mov	r16,r2
10001d0c:	10000726 	beq	r2,zero,10001d2c <__sfmoreglue+0x5c>
10001d10:	11000304 	addi	r4,r2,12
10001d14:	10000015 	stw	zero,0(r2)
10001d18:	14800115 	stw	r18,4(r2)
10001d1c:	11000215 	stw	r4,8(r2)
10001d20:	000b883a 	mov	r5,zero
10001d24:	880d883a 	mov	r6,r17
10001d28:	00027780 	call	10002778 <memset>
10001d2c:	8005883a 	mov	r2,r16
10001d30:	dfc00317 	ldw	ra,12(sp)
10001d34:	dc800217 	ldw	r18,8(sp)
10001d38:	dc400117 	ldw	r17,4(sp)
10001d3c:	dc000017 	ldw	r16,0(sp)
10001d40:	dec00404 	addi	sp,sp,16
10001d44:	f800283a 	ret

10001d48 <_cleanup>:
10001d48:	00840034 	movhi	r2,4096
10001d4c:	109baf04 	addi	r2,r2,28348
10001d50:	11000017 	ldw	r4,0(r2)
10001d54:	01440034 	movhi	r5,4096
10001d58:	294af004 	addi	r5,r5,11200
10001d5c:	00024641 	jmpi	10002464 <_fwalk>

10001d60 <__sinit>:
10001d60:	20800e17 	ldw	r2,56(r4)
10001d64:	defff704 	addi	sp,sp,-36
10001d68:	dc800215 	stw	r18,8(sp)
10001d6c:	dfc00815 	stw	ra,32(sp)
10001d70:	ddc00715 	stw	r23,28(sp)
10001d74:	dd800615 	stw	r22,24(sp)
10001d78:	dd400515 	stw	r21,20(sp)
10001d7c:	dd000415 	stw	r20,16(sp)
10001d80:	dcc00315 	stw	r19,12(sp)
10001d84:	dc400115 	stw	r17,4(sp)
10001d88:	dc000015 	stw	r16,0(sp)
10001d8c:	2025883a 	mov	r18,r4
10001d90:	10004f1e 	bne	r2,zero,10001ed0 <__sinit+0x170>
10001d94:	24000117 	ldw	r16,4(r4)
10001d98:	00c40034 	movhi	r3,4096
10001d9c:	18c73104 	addi	r3,r3,7364
10001da0:	20c00f15 	stw	r3,60(r4)
10001da4:	2080bb04 	addi	r2,r4,748
10001da8:	00c000c4 	movi	r3,3
10001dac:	05c00044 	movi	r23,1
10001db0:	20c0b915 	stw	r3,740(r4)
10001db4:	2080ba15 	stw	r2,744(r4)
10001db8:	25c00e15 	stw	r23,56(r4)
10001dbc:	2000b815 	stw	zero,736(r4)
10001dc0:	00800104 	movi	r2,4
10001dc4:	81001704 	addi	r4,r16,92
10001dc8:	000b883a 	mov	r5,zero
10001dcc:	01800204 	movi	r6,8
10001dd0:	80000015 	stw	zero,0(r16)
10001dd4:	80000115 	stw	zero,4(r16)
10001dd8:	80000215 	stw	zero,8(r16)
10001ddc:	8080030d 	sth	r2,12(r16)
10001de0:	80001915 	stw	zero,100(r16)
10001de4:	8000038d 	sth	zero,14(r16)
10001de8:	80000415 	stw	zero,16(r16)
10001dec:	80000515 	stw	zero,20(r16)
10001df0:	80000615 	stw	zero,24(r16)
10001df4:	00027780 	call	10002778 <memset>
10001df8:	94400217 	ldw	r17,8(r18)
10001dfc:	05840034 	movhi	r22,4096
10001e00:	b58a2304 	addi	r22,r22,10380
10001e04:	05440034 	movhi	r21,4096
10001e08:	ad4a3a04 	addi	r21,r21,10472
10001e0c:	05040034 	movhi	r20,4096
10001e10:	a50a5904 	addi	r20,r20,10596
10001e14:	04c40034 	movhi	r19,4096
10001e18:	9cca7004 	addi	r19,r19,10688
10001e1c:	84000715 	stw	r16,28(r16)
10001e20:	85800815 	stw	r22,32(r16)
10001e24:	85400915 	stw	r21,36(r16)
10001e28:	85000a15 	stw	r20,40(r16)
10001e2c:	84c00b15 	stw	r19,44(r16)
10001e30:	00800284 	movi	r2,10
10001e34:	89001704 	addi	r4,r17,92
10001e38:	000b883a 	mov	r5,zero
10001e3c:	01800204 	movi	r6,8
10001e40:	88000015 	stw	zero,0(r17)
10001e44:	88000115 	stw	zero,4(r17)
10001e48:	88000215 	stw	zero,8(r17)
10001e4c:	8880030d 	sth	r2,12(r17)
10001e50:	88001915 	stw	zero,100(r17)
10001e54:	8dc0038d 	sth	r23,14(r17)
10001e58:	88000415 	stw	zero,16(r17)
10001e5c:	88000515 	stw	zero,20(r17)
10001e60:	88000615 	stw	zero,24(r17)
10001e64:	00027780 	call	10002778 <memset>
10001e68:	94000317 	ldw	r16,12(r18)
10001e6c:	00800484 	movi	r2,18
10001e70:	8c400715 	stw	r17,28(r17)
10001e74:	8d800815 	stw	r22,32(r17)
10001e78:	8d400915 	stw	r21,36(r17)
10001e7c:	8d000a15 	stw	r20,40(r17)
10001e80:	8cc00b15 	stw	r19,44(r17)
10001e84:	8080030d 	sth	r2,12(r16)
10001e88:	00800084 	movi	r2,2
10001e8c:	80000015 	stw	zero,0(r16)
10001e90:	80000115 	stw	zero,4(r16)
10001e94:	80000215 	stw	zero,8(r16)
10001e98:	80001915 	stw	zero,100(r16)
10001e9c:	8080038d 	sth	r2,14(r16)
10001ea0:	80000415 	stw	zero,16(r16)
10001ea4:	80000515 	stw	zero,20(r16)
10001ea8:	80000615 	stw	zero,24(r16)
10001eac:	81001704 	addi	r4,r16,92
10001eb0:	000b883a 	mov	r5,zero
10001eb4:	01800204 	movi	r6,8
10001eb8:	00027780 	call	10002778 <memset>
10001ebc:	84000715 	stw	r16,28(r16)
10001ec0:	85800815 	stw	r22,32(r16)
10001ec4:	85400915 	stw	r21,36(r16)
10001ec8:	85000a15 	stw	r20,40(r16)
10001ecc:	84c00b15 	stw	r19,44(r16)
10001ed0:	dfc00817 	ldw	ra,32(sp)
10001ed4:	ddc00717 	ldw	r23,28(sp)
10001ed8:	dd800617 	ldw	r22,24(sp)
10001edc:	dd400517 	ldw	r21,20(sp)
10001ee0:	dd000417 	ldw	r20,16(sp)
10001ee4:	dcc00317 	ldw	r19,12(sp)
10001ee8:	dc800217 	ldw	r18,8(sp)
10001eec:	dc400117 	ldw	r17,4(sp)
10001ef0:	dc000017 	ldw	r16,0(sp)
10001ef4:	dec00904 	addi	sp,sp,36
10001ef8:	f800283a 	ret

10001efc <__sfp>:
10001efc:	defffb04 	addi	sp,sp,-20
10001f00:	00840034 	movhi	r2,4096
10001f04:	109baf04 	addi	r2,r2,28348
10001f08:	dc800215 	stw	r18,8(sp)
10001f0c:	14800017 	ldw	r18,0(r2)
10001f10:	dcc00315 	stw	r19,12(sp)
10001f14:	dfc00415 	stw	ra,16(sp)
10001f18:	90800e17 	ldw	r2,56(r18)
10001f1c:	dc400115 	stw	r17,4(sp)
10001f20:	dc000015 	stw	r16,0(sp)
10001f24:	2027883a 	mov	r19,r4
10001f28:	10002f26 	beq	r2,zero,10001fe8 <__sfp+0xec>
10001f2c:	9480b804 	addi	r18,r18,736
10001f30:	047fffc4 	movi	r17,-1
10001f34:	91400117 	ldw	r5,4(r18)
10001f38:	94000217 	ldw	r16,8(r18)
10001f3c:	297fffc4 	addi	r5,r5,-1
10001f40:	28000a16 	blt	r5,zero,10001f6c <__sfp+0x70>
10001f44:	8080030f 	ldh	r2,12(r16)
10001f48:	10000c26 	beq	r2,zero,10001f7c <__sfp+0x80>
10001f4c:	80c01d04 	addi	r3,r16,116
10001f50:	00000206 	br	10001f5c <__sfp+0x60>
10001f54:	18bfe60f 	ldh	r2,-104(r3)
10001f58:	10000826 	beq	r2,zero,10001f7c <__sfp+0x80>
10001f5c:	297fffc4 	addi	r5,r5,-1
10001f60:	1c3ffd04 	addi	r16,r3,-12
10001f64:	18c01a04 	addi	r3,r3,104
10001f68:	2c7ffa1e 	bne	r5,r17,10001f54 <__alt_data_end+0xf8001f54>
10001f6c:	90800017 	ldw	r2,0(r18)
10001f70:	10002026 	beq	r2,zero,10001ff4 <__sfp+0xf8>
10001f74:	1025883a 	mov	r18,r2
10001f78:	003fee06 	br	10001f34 <__alt_data_end+0xf8001f34>
10001f7c:	00bfffc4 	movi	r2,-1
10001f80:	8080038d 	sth	r2,14(r16)
10001f84:	00800044 	movi	r2,1
10001f88:	8080030d 	sth	r2,12(r16)
10001f8c:	80001915 	stw	zero,100(r16)
10001f90:	80000015 	stw	zero,0(r16)
10001f94:	80000215 	stw	zero,8(r16)
10001f98:	80000115 	stw	zero,4(r16)
10001f9c:	80000415 	stw	zero,16(r16)
10001fa0:	80000515 	stw	zero,20(r16)
10001fa4:	80000615 	stw	zero,24(r16)
10001fa8:	81001704 	addi	r4,r16,92
10001fac:	000b883a 	mov	r5,zero
10001fb0:	01800204 	movi	r6,8
10001fb4:	00027780 	call	10002778 <memset>
10001fb8:	8005883a 	mov	r2,r16
10001fbc:	80000c15 	stw	zero,48(r16)
10001fc0:	80000d15 	stw	zero,52(r16)
10001fc4:	80001115 	stw	zero,68(r16)
10001fc8:	80001215 	stw	zero,72(r16)
10001fcc:	dfc00417 	ldw	ra,16(sp)
10001fd0:	dcc00317 	ldw	r19,12(sp)
10001fd4:	dc800217 	ldw	r18,8(sp)
10001fd8:	dc400117 	ldw	r17,4(sp)
10001fdc:	dc000017 	ldw	r16,0(sp)
10001fe0:	dec00504 	addi	sp,sp,20
10001fe4:	f800283a 	ret
10001fe8:	9009883a 	mov	r4,r18
10001fec:	0001d600 	call	10001d60 <__sinit>
10001ff0:	003fce06 	br	10001f2c <__alt_data_end+0xf8001f2c>
10001ff4:	9809883a 	mov	r4,r19
10001ff8:	01400104 	movi	r5,4
10001ffc:	0001cd00 	call	10001cd0 <__sfmoreglue>
10002000:	90800015 	stw	r2,0(r18)
10002004:	103fdb1e 	bne	r2,zero,10001f74 <__alt_data_end+0xf8001f74>
10002008:	00800304 	movi	r2,12
1000200c:	98800015 	stw	r2,0(r19)
10002010:	0005883a 	mov	r2,zero
10002014:	003fed06 	br	10001fcc <__alt_data_end+0xf8001fcc>

10002018 <__sfp_lock_acquire>:
10002018:	f800283a 	ret

1000201c <__sfp_lock_release>:
1000201c:	f800283a 	ret

10002020 <__sinit_lock_acquire>:
10002020:	f800283a 	ret

10002024 <__sinit_lock_release>:
10002024:	f800283a 	ret

10002028 <__fp_lock_all>:
10002028:	00840034 	movhi	r2,4096
1000202c:	109bb004 	addi	r2,r2,28352
10002030:	11000017 	ldw	r4,0(r2)
10002034:	01440034 	movhi	r5,4096
10002038:	29472d04 	addi	r5,r5,7348
1000203c:	00024641 	jmpi	10002464 <_fwalk>

10002040 <__fp_unlock_all>:
10002040:	00840034 	movhi	r2,4096
10002044:	109bb004 	addi	r2,r2,28352
10002048:	11000017 	ldw	r4,0(r2)
1000204c:	01440034 	movhi	r5,4096
10002050:	29472f04 	addi	r5,r5,7356
10002054:	00024641 	jmpi	10002464 <_fwalk>

10002058 <_malloc_trim_r>:
10002058:	defffb04 	addi	sp,sp,-20
1000205c:	dcc00315 	stw	r19,12(sp)
10002060:	dc800215 	stw	r18,8(sp)
10002064:	dc400115 	stw	r17,4(sp)
10002068:	dc000015 	stw	r16,0(sp)
1000206c:	2827883a 	mov	r19,r5
10002070:	dfc00415 	stw	ra,16(sp)
10002074:	04440034 	movhi	r17,4096
10002078:	8c562704 	addi	r17,r17,22684
1000207c:	2021883a 	mov	r16,r4
10002080:	00033740 	call	10003374 <__malloc_lock>
10002084:	88800217 	ldw	r2,8(r17)
10002088:	14800117 	ldw	r18,4(r2)
1000208c:	00bfff04 	movi	r2,-4
10002090:	90a4703a 	and	r18,r18,r2
10002094:	94e7c83a 	sub	r19,r18,r19
10002098:	9cc3fbc4 	addi	r19,r19,4079
1000209c:	9826d33a 	srli	r19,r19,12
100020a0:	0083ffc4 	movi	r2,4095
100020a4:	9cffffc4 	addi	r19,r19,-1
100020a8:	9826933a 	slli	r19,r19,12
100020ac:	14c0060e 	bge	r2,r19,100020c8 <_malloc_trim_r+0x70>
100020b0:	8009883a 	mov	r4,r16
100020b4:	000b883a 	mov	r5,zero
100020b8:	00018a40 	call	100018a4 <_sbrk_r>
100020bc:	88c00217 	ldw	r3,8(r17)
100020c0:	1c87883a 	add	r3,r3,r18
100020c4:	10c00a26 	beq	r2,r3,100020f0 <_malloc_trim_r+0x98>
100020c8:	8009883a 	mov	r4,r16
100020cc:	00033940 	call	10003394 <__malloc_unlock>
100020d0:	0005883a 	mov	r2,zero
100020d4:	dfc00417 	ldw	ra,16(sp)
100020d8:	dcc00317 	ldw	r19,12(sp)
100020dc:	dc800217 	ldw	r18,8(sp)
100020e0:	dc400117 	ldw	r17,4(sp)
100020e4:	dc000017 	ldw	r16,0(sp)
100020e8:	dec00504 	addi	sp,sp,20
100020ec:	f800283a 	ret
100020f0:	8009883a 	mov	r4,r16
100020f4:	04cbc83a 	sub	r5,zero,r19
100020f8:	00018a40 	call	100018a4 <_sbrk_r>
100020fc:	00ffffc4 	movi	r3,-1
10002100:	10c01326 	beq	r2,r3,10002150 <_malloc_trim_r+0xf8>
10002104:	00840074 	movhi	r2,4097
10002108:	10a26604 	addi	r2,r2,-30312
1000210c:	11000017 	ldw	r4,0(r2)
10002110:	88c00217 	ldw	r3,8(r17)
10002114:	94e5c83a 	sub	r18,r18,r19
10002118:	94800054 	ori	r18,r18,1
1000211c:	24e7c83a 	sub	r19,r4,r19
10002120:	1c800115 	stw	r18,4(r3)
10002124:	8009883a 	mov	r4,r16
10002128:	14c00015 	stw	r19,0(r2)
1000212c:	00033940 	call	10003394 <__malloc_unlock>
10002130:	00800044 	movi	r2,1
10002134:	dfc00417 	ldw	ra,16(sp)
10002138:	dcc00317 	ldw	r19,12(sp)
1000213c:	dc800217 	ldw	r18,8(sp)
10002140:	dc400117 	ldw	r17,4(sp)
10002144:	dc000017 	ldw	r16,0(sp)
10002148:	dec00504 	addi	sp,sp,20
1000214c:	f800283a 	ret
10002150:	8009883a 	mov	r4,r16
10002154:	000b883a 	mov	r5,zero
10002158:	00018a40 	call	100018a4 <_sbrk_r>
1000215c:	88c00217 	ldw	r3,8(r17)
10002160:	014003c4 	movi	r5,15
10002164:	10c9c83a 	sub	r4,r2,r3
10002168:	293fd70e 	bge	r5,r4,100020c8 <__alt_data_end+0xf80020c8>
1000216c:	01440034 	movhi	r5,4096
10002170:	295bb104 	addi	r5,r5,28356
10002174:	29400017 	ldw	r5,0(r5)
10002178:	21000054 	ori	r4,r4,1
1000217c:	19000115 	stw	r4,4(r3)
10002180:	1145c83a 	sub	r2,r2,r5
10002184:	01440074 	movhi	r5,4097
10002188:	29626604 	addi	r5,r5,-30312
1000218c:	28800015 	stw	r2,0(r5)
10002190:	003fcd06 	br	100020c8 <__alt_data_end+0xf80020c8>

10002194 <_free_r>:
10002194:	defffd04 	addi	sp,sp,-12
10002198:	dc000015 	stw	r16,0(sp)
1000219c:	dfc00215 	stw	ra,8(sp)
100021a0:	dc400115 	stw	r17,4(sp)
100021a4:	2821883a 	mov	r16,r5
100021a8:	28004c26 	beq	r5,zero,100022dc <_free_r+0x148>
100021ac:	2023883a 	mov	r17,r4
100021b0:	00033740 	call	10003374 <__malloc_lock>
100021b4:	823fff17 	ldw	r8,-4(r16)
100021b8:	00bfff84 	movi	r2,-2
100021bc:	81bffe04 	addi	r6,r16,-8
100021c0:	4084703a 	and	r2,r8,r2
100021c4:	3087883a 	add	r3,r6,r2
100021c8:	01440034 	movhi	r5,4096
100021cc:	29562704 	addi	r5,r5,22684
100021d0:	1a400117 	ldw	r9,4(r3)
100021d4:	29000217 	ldw	r4,8(r5)
100021d8:	01ffff04 	movi	r7,-4
100021dc:	49ce703a 	and	r7,r9,r7
100021e0:	20c06526 	beq	r4,r3,10002378 <_free_r+0x1e4>
100021e4:	19c00115 	stw	r7,4(r3)
100021e8:	4200004c 	andi	r8,r8,1
100021ec:	40003026 	beq	r8,zero,100022b0 <_free_r+0x11c>
100021f0:	0009883a 	mov	r4,zero
100021f4:	19d1883a 	add	r8,r3,r7
100021f8:	42000117 	ldw	r8,4(r8)
100021fc:	4200004c 	andi	r8,r8,1
10002200:	4000061e 	bne	r8,zero,1000221c <_free_r+0x88>
10002204:	11c5883a 	add	r2,r2,r7
10002208:	19c00217 	ldw	r7,8(r3)
1000220c:	20004e26 	beq	r4,zero,10002348 <_free_r+0x1b4>
10002210:	18c00317 	ldw	r3,12(r3)
10002214:	38c00315 	stw	r3,12(r7)
10002218:	19c00215 	stw	r7,8(r3)
1000221c:	10c00054 	ori	r3,r2,1
10002220:	30c00115 	stw	r3,4(r6)
10002224:	3087883a 	add	r3,r6,r2
10002228:	18800015 	stw	r2,0(r3)
1000222c:	20001a1e 	bne	r4,zero,10002298 <_free_r+0x104>
10002230:	00c07fc4 	movi	r3,511
10002234:	18802e2e 	bgeu	r3,r2,100022f0 <_free_r+0x15c>
10002238:	1006d27a 	srli	r3,r2,9
1000223c:	01000104 	movi	r4,4
10002240:	20c06636 	bltu	r4,r3,100023dc <_free_r+0x248>
10002244:	1008d1ba 	srli	r4,r2,6
10002248:	21000e04 	addi	r4,r4,56
1000224c:	210f883a 	add	r7,r4,r4
10002250:	39cf883a 	add	r7,r7,r7
10002254:	39cf883a 	add	r7,r7,r7
10002258:	29cf883a 	add	r7,r5,r7
1000225c:	38c00217 	ldw	r3,8(r7)
10002260:	01440034 	movhi	r5,4096
10002264:	29562704 	addi	r5,r5,22684
10002268:	19c06126 	beq	r3,r7,100023f0 <_free_r+0x25c>
1000226c:	013fff04 	movi	r4,-4
10002270:	19400117 	ldw	r5,4(r3)
10002274:	290a703a 	and	r5,r5,r4
10002278:	1140022e 	bgeu	r2,r5,10002284 <_free_r+0xf0>
1000227c:	18c00217 	ldw	r3,8(r3)
10002280:	38fffb1e 	bne	r7,r3,10002270 <__alt_data_end+0xf8002270>
10002284:	18800317 	ldw	r2,12(r3)
10002288:	30800315 	stw	r2,12(r6)
1000228c:	30c00215 	stw	r3,8(r6)
10002290:	11800215 	stw	r6,8(r2)
10002294:	19800315 	stw	r6,12(r3)
10002298:	8809883a 	mov	r4,r17
1000229c:	dfc00217 	ldw	ra,8(sp)
100022a0:	dc400117 	ldw	r17,4(sp)
100022a4:	dc000017 	ldw	r16,0(sp)
100022a8:	dec00304 	addi	sp,sp,12
100022ac:	00033941 	jmpi	10003394 <__malloc_unlock>
100022b0:	813ffe17 	ldw	r4,-8(r16)
100022b4:	2a400204 	addi	r9,r5,8
100022b8:	310dc83a 	sub	r6,r6,r4
100022bc:	32000217 	ldw	r8,8(r6)
100022c0:	1105883a 	add	r2,r2,r4
100022c4:	42404326 	beq	r8,r9,100023d4 <_free_r+0x240>
100022c8:	32400317 	ldw	r9,12(r6)
100022cc:	0009883a 	mov	r4,zero
100022d0:	42400315 	stw	r9,12(r8)
100022d4:	4a000215 	stw	r8,8(r9)
100022d8:	003fc606 	br	100021f4 <__alt_data_end+0xf80021f4>
100022dc:	dfc00217 	ldw	ra,8(sp)
100022e0:	dc400117 	ldw	r17,4(sp)
100022e4:	dc000017 	ldw	r16,0(sp)
100022e8:	dec00304 	addi	sp,sp,12
100022ec:	f800283a 	ret
100022f0:	1004d0fa 	srli	r2,r2,3
100022f4:	02000044 	movi	r8,1
100022f8:	29c00117 	ldw	r7,4(r5)
100022fc:	1087883a 	add	r3,r2,r2
10002300:	18c7883a 	add	r3,r3,r3
10002304:	18c7883a 	add	r3,r3,r3
10002308:	28c7883a 	add	r3,r5,r3
1000230c:	1005d0ba 	srai	r2,r2,2
10002310:	19000217 	ldw	r4,8(r3)
10002314:	30c00315 	stw	r3,12(r6)
10002318:	4084983a 	sll	r2,r8,r2
1000231c:	31000215 	stw	r4,8(r6)
10002320:	19800215 	stw	r6,8(r3)
10002324:	11c4b03a 	or	r2,r2,r7
10002328:	21800315 	stw	r6,12(r4)
1000232c:	8809883a 	mov	r4,r17
10002330:	28800115 	stw	r2,4(r5)
10002334:	dfc00217 	ldw	ra,8(sp)
10002338:	dc400117 	ldw	r17,4(sp)
1000233c:	dc000017 	ldw	r16,0(sp)
10002340:	dec00304 	addi	sp,sp,12
10002344:	00033941 	jmpi	10003394 <__malloc_unlock>
10002348:	02040034 	movhi	r8,4096
1000234c:	42162904 	addi	r8,r8,22692
10002350:	3a3faf1e 	bne	r7,r8,10002210 <__alt_data_end+0xf8002210>
10002354:	29800515 	stw	r6,20(r5)
10002358:	29800415 	stw	r6,16(r5)
1000235c:	10c00054 	ori	r3,r2,1
10002360:	31c00315 	stw	r7,12(r6)
10002364:	31c00215 	stw	r7,8(r6)
10002368:	30c00115 	stw	r3,4(r6)
1000236c:	308d883a 	add	r6,r6,r2
10002370:	30800015 	stw	r2,0(r6)
10002374:	003fc806 	br	10002298 <__alt_data_end+0xf8002298>
10002378:	4200004c 	andi	r8,r8,1
1000237c:	3885883a 	add	r2,r7,r2
10002380:	4000071e 	bne	r8,zero,100023a0 <_free_r+0x20c>
10002384:	81fffe17 	ldw	r7,-8(r16)
10002388:	31cdc83a 	sub	r6,r6,r7
1000238c:	30c00317 	ldw	r3,12(r6)
10002390:	31000217 	ldw	r4,8(r6)
10002394:	11c5883a 	add	r2,r2,r7
10002398:	20c00315 	stw	r3,12(r4)
1000239c:	19000215 	stw	r4,8(r3)
100023a0:	00c40034 	movhi	r3,4096
100023a4:	18dbb204 	addi	r3,r3,28360
100023a8:	11000054 	ori	r4,r2,1
100023ac:	18c00017 	ldw	r3,0(r3)
100023b0:	31000115 	stw	r4,4(r6)
100023b4:	29800215 	stw	r6,8(r5)
100023b8:	10ffb736 	bltu	r2,r3,10002298 <__alt_data_end+0xf8002298>
100023bc:	00840074 	movhi	r2,4097
100023c0:	10a25e04 	addi	r2,r2,-30344
100023c4:	11400017 	ldw	r5,0(r2)
100023c8:	8809883a 	mov	r4,r17
100023cc:	00020580 	call	10002058 <_malloc_trim_r>
100023d0:	003fb106 	br	10002298 <__alt_data_end+0xf8002298>
100023d4:	01000044 	movi	r4,1
100023d8:	003f8606 	br	100021f4 <__alt_data_end+0xf80021f4>
100023dc:	01000504 	movi	r4,20
100023e0:	20c00b36 	bltu	r4,r3,10002410 <_free_r+0x27c>
100023e4:	190016c4 	addi	r4,r3,91
100023e8:	210f883a 	add	r7,r4,r4
100023ec:	003f9806 	br	10002250 <__alt_data_end+0xf8002250>
100023f0:	2009d0ba 	srai	r4,r4,2
100023f4:	00800044 	movi	r2,1
100023f8:	29c00117 	ldw	r7,4(r5)
100023fc:	1108983a 	sll	r4,r2,r4
10002400:	1805883a 	mov	r2,r3
10002404:	21c8b03a 	or	r4,r4,r7
10002408:	29000115 	stw	r4,4(r5)
1000240c:	003f9e06 	br	10002288 <__alt_data_end+0xf8002288>
10002410:	01001504 	movi	r4,84
10002414:	20c00436 	bltu	r4,r3,10002428 <_free_r+0x294>
10002418:	1008d33a 	srli	r4,r2,12
1000241c:	21001b84 	addi	r4,r4,110
10002420:	210f883a 	add	r7,r4,r4
10002424:	003f8a06 	br	10002250 <__alt_data_end+0xf8002250>
10002428:	01005504 	movi	r4,340
1000242c:	20c00436 	bltu	r4,r3,10002440 <_free_r+0x2ac>
10002430:	1008d3fa 	srli	r4,r2,15
10002434:	21001dc4 	addi	r4,r4,119
10002438:	210f883a 	add	r7,r4,r4
1000243c:	003f8406 	br	10002250 <__alt_data_end+0xf8002250>
10002440:	01015504 	movi	r4,1364
10002444:	20c00436 	bltu	r4,r3,10002458 <_free_r+0x2c4>
10002448:	1008d4ba 	srli	r4,r2,18
1000244c:	21001f04 	addi	r4,r4,124
10002450:	210f883a 	add	r7,r4,r4
10002454:	003f7e06 	br	10002250 <__alt_data_end+0xf8002250>
10002458:	01c03f04 	movi	r7,252
1000245c:	01001f84 	movi	r4,126
10002460:	003f7b06 	br	10002250 <__alt_data_end+0xf8002250>

10002464 <_fwalk>:
10002464:	defff904 	addi	sp,sp,-28
10002468:	dcc00315 	stw	r19,12(sp)
1000246c:	24c0b804 	addi	r19,r4,736
10002470:	dd400515 	stw	r21,20(sp)
10002474:	dd000415 	stw	r20,16(sp)
10002478:	dfc00615 	stw	ra,24(sp)
1000247c:	dc800215 	stw	r18,8(sp)
10002480:	dc400115 	stw	r17,4(sp)
10002484:	dc000015 	stw	r16,0(sp)
10002488:	282b883a 	mov	r21,r5
1000248c:	0029883a 	mov	r20,zero
10002490:	00020180 	call	10002018 <__sfp_lock_acquire>
10002494:	98001226 	beq	r19,zero,100024e0 <_fwalk+0x7c>
10002498:	04bfffc4 	movi	r18,-1
1000249c:	9c400117 	ldw	r17,4(r19)
100024a0:	9c000217 	ldw	r16,8(r19)
100024a4:	8c7fffc4 	addi	r17,r17,-1
100024a8:	88000b16 	blt	r17,zero,100024d8 <_fwalk+0x74>
100024ac:	84000304 	addi	r16,r16,12
100024b0:	80c0000f 	ldh	r3,0(r16)
100024b4:	8c7fffc4 	addi	r17,r17,-1
100024b8:	813ffd04 	addi	r4,r16,-12
100024bc:	18000426 	beq	r3,zero,100024d0 <_fwalk+0x6c>
100024c0:	80c0008f 	ldh	r3,2(r16)
100024c4:	1c800226 	beq	r3,r18,100024d0 <_fwalk+0x6c>
100024c8:	a83ee83a 	callr	r21
100024cc:	a0a8b03a 	or	r20,r20,r2
100024d0:	84001a04 	addi	r16,r16,104
100024d4:	8cbff61e 	bne	r17,r18,100024b0 <__alt_data_end+0xf80024b0>
100024d8:	9cc00017 	ldw	r19,0(r19)
100024dc:	983fef1e 	bne	r19,zero,1000249c <__alt_data_end+0xf800249c>
100024e0:	000201c0 	call	1000201c <__sfp_lock_release>
100024e4:	a005883a 	mov	r2,r20
100024e8:	dfc00617 	ldw	ra,24(sp)
100024ec:	dd400517 	ldw	r21,20(sp)
100024f0:	dd000417 	ldw	r20,16(sp)
100024f4:	dcc00317 	ldw	r19,12(sp)
100024f8:	dc800217 	ldw	r18,8(sp)
100024fc:	dc400117 	ldw	r17,4(sp)
10002500:	dc000017 	ldw	r16,0(sp)
10002504:	dec00704 	addi	sp,sp,28
10002508:	f800283a 	ret

1000250c <_fwalk_reent>:
1000250c:	defff804 	addi	sp,sp,-32
10002510:	dcc00315 	stw	r19,12(sp)
10002514:	24c0b804 	addi	r19,r4,736
10002518:	dd800615 	stw	r22,24(sp)
1000251c:	dd400515 	stw	r21,20(sp)
10002520:	dd000415 	stw	r20,16(sp)
10002524:	dfc00715 	stw	ra,28(sp)
10002528:	dc800215 	stw	r18,8(sp)
1000252c:	dc400115 	stw	r17,4(sp)
10002530:	dc000015 	stw	r16,0(sp)
10002534:	2029883a 	mov	r20,r4
10002538:	282b883a 	mov	r21,r5
1000253c:	002d883a 	mov	r22,zero
10002540:	00020180 	call	10002018 <__sfp_lock_acquire>
10002544:	98001326 	beq	r19,zero,10002594 <_fwalk_reent+0x88>
10002548:	04bfffc4 	movi	r18,-1
1000254c:	9c400117 	ldw	r17,4(r19)
10002550:	9c000217 	ldw	r16,8(r19)
10002554:	8c7fffc4 	addi	r17,r17,-1
10002558:	88000c16 	blt	r17,zero,1000258c <_fwalk_reent+0x80>
1000255c:	84000304 	addi	r16,r16,12
10002560:	80c0000f 	ldh	r3,0(r16)
10002564:	8c7fffc4 	addi	r17,r17,-1
10002568:	817ffd04 	addi	r5,r16,-12
1000256c:	18000526 	beq	r3,zero,10002584 <_fwalk_reent+0x78>
10002570:	80c0008f 	ldh	r3,2(r16)
10002574:	a009883a 	mov	r4,r20
10002578:	1c800226 	beq	r3,r18,10002584 <_fwalk_reent+0x78>
1000257c:	a83ee83a 	callr	r21
10002580:	b0acb03a 	or	r22,r22,r2
10002584:	84001a04 	addi	r16,r16,104
10002588:	8cbff51e 	bne	r17,r18,10002560 <__alt_data_end+0xf8002560>
1000258c:	9cc00017 	ldw	r19,0(r19)
10002590:	983fee1e 	bne	r19,zero,1000254c <__alt_data_end+0xf800254c>
10002594:	000201c0 	call	1000201c <__sfp_lock_release>
10002598:	b005883a 	mov	r2,r22
1000259c:	dfc00717 	ldw	ra,28(sp)
100025a0:	dd800617 	ldw	r22,24(sp)
100025a4:	dd400517 	ldw	r21,20(sp)
100025a8:	dd000417 	ldw	r20,16(sp)
100025ac:	dcc00317 	ldw	r19,12(sp)
100025b0:	dc800217 	ldw	r18,8(sp)
100025b4:	dc400117 	ldw	r17,4(sp)
100025b8:	dc000017 	ldw	r16,0(sp)
100025bc:	dec00804 	addi	sp,sp,32
100025c0:	f800283a 	ret

100025c4 <__smakebuf_r>:
100025c4:	2880030b 	ldhu	r2,12(r5)
100025c8:	deffec04 	addi	sp,sp,-80
100025cc:	dc000f15 	stw	r16,60(sp)
100025d0:	dfc01315 	stw	ra,76(sp)
100025d4:	dcc01215 	stw	r19,72(sp)
100025d8:	dc801115 	stw	r18,68(sp)
100025dc:	dc401015 	stw	r17,64(sp)
100025e0:	10c0008c 	andi	r3,r2,2
100025e4:	2821883a 	mov	r16,r5
100025e8:	18003a1e 	bne	r3,zero,100026d4 <__smakebuf_r+0x110>
100025ec:	2940038f 	ldh	r5,14(r5)
100025f0:	2023883a 	mov	r17,r4
100025f4:	28001b16 	blt	r5,zero,10002664 <__smakebuf_r+0xa0>
100025f8:	d80d883a 	mov	r6,sp
100025fc:	0002bd40 	call	10002bd4 <_fstat_r>
10002600:	10001716 	blt	r2,zero,10002660 <__smakebuf_r+0x9c>
10002604:	d8800117 	ldw	r2,4(sp)
10002608:	00e00014 	movui	r3,32768
1000260c:	10bc000c 	andi	r2,r2,61440
10002610:	10c03e26 	beq	r2,r3,1000270c <__smakebuf_r+0x148>
10002614:	80c0030b 	ldhu	r3,12(r16)
10002618:	18c20014 	ori	r3,r3,2048
1000261c:	80c0030d 	sth	r3,12(r16)
10002620:	00c80004 	movi	r3,8192
10002624:	10c0431e 	bne	r2,r3,10002734 <__smakebuf_r+0x170>
10002628:	8140038f 	ldh	r5,14(r16)
1000262c:	8809883a 	mov	r4,r17
10002630:	0002c3c0 	call	10002c3c <_isatty_r>
10002634:	10004d26 	beq	r2,zero,1000276c <__smakebuf_r+0x1a8>
10002638:	80c0030b 	ldhu	r3,12(r16)
1000263c:	04c00044 	movi	r19,1
10002640:	808010c4 	addi	r2,r16,67
10002644:	1cc6b03a 	or	r3,r3,r19
10002648:	80c0030d 	sth	r3,12(r16)
1000264c:	80800015 	stw	r2,0(r16)
10002650:	80800415 	stw	r2,16(r16)
10002654:	84c00515 	stw	r19,20(r16)
10002658:	04810004 	movi	r18,1024
1000265c:	00000706 	br	1000267c <__smakebuf_r+0xb8>
10002660:	8080030b 	ldhu	r2,12(r16)
10002664:	10c0200c 	andi	r3,r2,128
10002668:	1800261e 	bne	r3,zero,10002704 <__smakebuf_r+0x140>
1000266c:	04810004 	movi	r18,1024
10002670:	10820014 	ori	r2,r2,2048
10002674:	8080030d 	sth	r2,12(r16)
10002678:	0027883a 	mov	r19,zero
1000267c:	8809883a 	mov	r4,r17
10002680:	900b883a 	mov	r5,r18
10002684:	000084c0 	call	1000084c <_malloc_r>
10002688:	10002d26 	beq	r2,zero,10002740 <__smakebuf_r+0x17c>
1000268c:	80c0030b 	ldhu	r3,12(r16)
10002690:	01040034 	movhi	r4,4096
10002694:	21073104 	addi	r4,r4,7364
10002698:	89000f15 	stw	r4,60(r17)
1000269c:	18c02014 	ori	r3,r3,128
100026a0:	80c0030d 	sth	r3,12(r16)
100026a4:	80800015 	stw	r2,0(r16)
100026a8:	80800415 	stw	r2,16(r16)
100026ac:	84800515 	stw	r18,20(r16)
100026b0:	98000d26 	beq	r19,zero,100026e8 <__smakebuf_r+0x124>
100026b4:	8140038f 	ldh	r5,14(r16)
100026b8:	8809883a 	mov	r4,r17
100026bc:	0002c3c0 	call	10002c3c <_isatty_r>
100026c0:	10000926 	beq	r2,zero,100026e8 <__smakebuf_r+0x124>
100026c4:	8080030b 	ldhu	r2,12(r16)
100026c8:	10800054 	ori	r2,r2,1
100026cc:	8080030d 	sth	r2,12(r16)
100026d0:	00000506 	br	100026e8 <__smakebuf_r+0x124>
100026d4:	288010c4 	addi	r2,r5,67
100026d8:	28800015 	stw	r2,0(r5)
100026dc:	28800415 	stw	r2,16(r5)
100026e0:	00800044 	movi	r2,1
100026e4:	28800515 	stw	r2,20(r5)
100026e8:	dfc01317 	ldw	ra,76(sp)
100026ec:	dcc01217 	ldw	r19,72(sp)
100026f0:	dc801117 	ldw	r18,68(sp)
100026f4:	dc401017 	ldw	r17,64(sp)
100026f8:	dc000f17 	ldw	r16,60(sp)
100026fc:	dec01404 	addi	sp,sp,80
10002700:	f800283a 	ret
10002704:	04801004 	movi	r18,64
10002708:	003fd906 	br	10002670 <__alt_data_end+0xf8002670>
1000270c:	81000a17 	ldw	r4,40(r16)
10002710:	00c40034 	movhi	r3,4096
10002714:	18ca5904 	addi	r3,r3,10596
10002718:	20ffbe1e 	bne	r4,r3,10002614 <__alt_data_end+0xf8002614>
1000271c:	80c0030b 	ldhu	r3,12(r16)
10002720:	01010004 	movi	r4,1024
10002724:	81001315 	stw	r4,76(r16)
10002728:	1906b03a 	or	r3,r3,r4
1000272c:	80c0030d 	sth	r3,12(r16)
10002730:	003fbb06 	br	10002620 <__alt_data_end+0xf8002620>
10002734:	0027883a 	mov	r19,zero
10002738:	04810004 	movi	r18,1024
1000273c:	003fcf06 	br	1000267c <__alt_data_end+0xf800267c>
10002740:	8080030b 	ldhu	r2,12(r16)
10002744:	10c0800c 	andi	r3,r2,512
10002748:	183fe71e 	bne	r3,zero,100026e8 <__alt_data_end+0xf80026e8>
1000274c:	10800094 	ori	r2,r2,2
10002750:	80c010c4 	addi	r3,r16,67
10002754:	8080030d 	sth	r2,12(r16)
10002758:	00800044 	movi	r2,1
1000275c:	80c00015 	stw	r3,0(r16)
10002760:	80c00415 	stw	r3,16(r16)
10002764:	80800515 	stw	r2,20(r16)
10002768:	003fdf06 	br	100026e8 <__alt_data_end+0xf80026e8>
1000276c:	04c00044 	movi	r19,1
10002770:	04810004 	movi	r18,1024
10002774:	003fc106 	br	1000267c <__alt_data_end+0xf800267c>

10002778 <memset>:
10002778:	20c000cc 	andi	r3,r4,3
1000277c:	2005883a 	mov	r2,r4
10002780:	18003f26 	beq	r3,zero,10002880 <memset+0x108>
10002784:	31ffffc4 	addi	r7,r6,-1
10002788:	30003b26 	beq	r6,zero,10002878 <memset+0x100>
1000278c:	2813883a 	mov	r9,r5
10002790:	200d883a 	mov	r6,r4
10002794:	2007883a 	mov	r3,r4
10002798:	00000406 	br	100027ac <memset+0x34>
1000279c:	3a3fffc4 	addi	r8,r7,-1
100027a0:	31800044 	addi	r6,r6,1
100027a4:	38003426 	beq	r7,zero,10002878 <memset+0x100>
100027a8:	400f883a 	mov	r7,r8
100027ac:	18c00044 	addi	r3,r3,1
100027b0:	32400005 	stb	r9,0(r6)
100027b4:	1a0000cc 	andi	r8,r3,3
100027b8:	403ff81e 	bne	r8,zero,1000279c <__alt_data_end+0xf800279c>
100027bc:	010000c4 	movi	r4,3
100027c0:	21c0282e 	bgeu	r4,r7,10002864 <memset+0xec>
100027c4:	29003fcc 	andi	r4,r5,255
100027c8:	2010923a 	slli	r8,r4,8
100027cc:	4108b03a 	or	r4,r8,r4
100027d0:	2010943a 	slli	r8,r4,16
100027d4:	4110b03a 	or	r8,r8,r4
100027d8:	010003c4 	movi	r4,15
100027dc:	21c0122e 	bgeu	r4,r7,10002828 <memset+0xb0>
100027e0:	3a7ffc04 	addi	r9,r7,-16
100027e4:	4812d13a 	srli	r9,r9,4
100027e8:	19000404 	addi	r4,r3,16
100027ec:	180d883a 	mov	r6,r3
100027f0:	4814913a 	slli	r10,r9,4
100027f4:	2289883a 	add	r4,r4,r10
100027f8:	32000015 	stw	r8,0(r6)
100027fc:	32000115 	stw	r8,4(r6)
10002800:	32000215 	stw	r8,8(r6)
10002804:	32000315 	stw	r8,12(r6)
10002808:	31800404 	addi	r6,r6,16
1000280c:	313ffa1e 	bne	r6,r4,100027f8 <__alt_data_end+0xf80027f8>
10002810:	4a400044 	addi	r9,r9,1
10002814:	4812913a 	slli	r9,r9,4
10002818:	39c003cc 	andi	r7,r7,15
1000281c:	010000c4 	movi	r4,3
10002820:	1a47883a 	add	r3,r3,r9
10002824:	21c00f2e 	bgeu	r4,r7,10002864 <memset+0xec>
10002828:	3a7fff04 	addi	r9,r7,-4
1000282c:	4812d0ba 	srli	r9,r9,2
10002830:	19000104 	addi	r4,r3,4
10002834:	180d883a 	mov	r6,r3
10002838:	4a55883a 	add	r10,r9,r9
1000283c:	5295883a 	add	r10,r10,r10
10002840:	2289883a 	add	r4,r4,r10
10002844:	32000015 	stw	r8,0(r6)
10002848:	31800104 	addi	r6,r6,4
1000284c:	313ffd1e 	bne	r6,r4,10002844 <__alt_data_end+0xf8002844>
10002850:	4a400044 	addi	r9,r9,1
10002854:	4a53883a 	add	r9,r9,r9
10002858:	4a53883a 	add	r9,r9,r9
1000285c:	1a47883a 	add	r3,r3,r9
10002860:	39c000cc 	andi	r7,r7,3
10002864:	38000526 	beq	r7,zero,1000287c <memset+0x104>
10002868:	19cf883a 	add	r7,r3,r7
1000286c:	19400005 	stb	r5,0(r3)
10002870:	18c00044 	addi	r3,r3,1
10002874:	19fffd1e 	bne	r3,r7,1000286c <__alt_data_end+0xf800286c>
10002878:	f800283a 	ret
1000287c:	f800283a 	ret
10002880:	2007883a 	mov	r3,r4
10002884:	300f883a 	mov	r7,r6
10002888:	003fcc06 	br	100027bc <__alt_data_end+0xf80027bc>

1000288c <__sread>:
1000288c:	defffe04 	addi	sp,sp,-8
10002890:	dc000015 	stw	r16,0(sp)
10002894:	2821883a 	mov	r16,r5
10002898:	2940038f 	ldh	r5,14(r5)
1000289c:	dfc00115 	stw	ra,4(sp)
100028a0:	0002d0c0 	call	10002d0c <_read_r>
100028a4:	10000716 	blt	r2,zero,100028c4 <__sread+0x38>
100028a8:	80c01417 	ldw	r3,80(r16)
100028ac:	1887883a 	add	r3,r3,r2
100028b0:	80c01415 	stw	r3,80(r16)
100028b4:	dfc00117 	ldw	ra,4(sp)
100028b8:	dc000017 	ldw	r16,0(sp)
100028bc:	dec00204 	addi	sp,sp,8
100028c0:	f800283a 	ret
100028c4:	80c0030b 	ldhu	r3,12(r16)
100028c8:	18fbffcc 	andi	r3,r3,61439
100028cc:	80c0030d 	sth	r3,12(r16)
100028d0:	dfc00117 	ldw	ra,4(sp)
100028d4:	dc000017 	ldw	r16,0(sp)
100028d8:	dec00204 	addi	sp,sp,8
100028dc:	f800283a 	ret

100028e0 <__seofread>:
100028e0:	0005883a 	mov	r2,zero
100028e4:	f800283a 	ret

100028e8 <__swrite>:
100028e8:	2880030b 	ldhu	r2,12(r5)
100028ec:	defffb04 	addi	sp,sp,-20
100028f0:	dcc00315 	stw	r19,12(sp)
100028f4:	dc800215 	stw	r18,8(sp)
100028f8:	dc400115 	stw	r17,4(sp)
100028fc:	dc000015 	stw	r16,0(sp)
10002900:	dfc00415 	stw	ra,16(sp)
10002904:	10c0400c 	andi	r3,r2,256
10002908:	2821883a 	mov	r16,r5
1000290c:	2027883a 	mov	r19,r4
10002910:	3025883a 	mov	r18,r6
10002914:	3823883a 	mov	r17,r7
10002918:	18000526 	beq	r3,zero,10002930 <__swrite+0x48>
1000291c:	2940038f 	ldh	r5,14(r5)
10002920:	000d883a 	mov	r6,zero
10002924:	01c00084 	movi	r7,2
10002928:	0002ca00 	call	10002ca0 <_lseek_r>
1000292c:	8080030b 	ldhu	r2,12(r16)
10002930:	8140038f 	ldh	r5,14(r16)
10002934:	10bbffcc 	andi	r2,r2,61439
10002938:	9809883a 	mov	r4,r19
1000293c:	900d883a 	mov	r6,r18
10002940:	880f883a 	mov	r7,r17
10002944:	8080030d 	sth	r2,12(r16)
10002948:	dfc00417 	ldw	ra,16(sp)
1000294c:	dcc00317 	ldw	r19,12(sp)
10002950:	dc800217 	ldw	r18,8(sp)
10002954:	dc400117 	ldw	r17,4(sp)
10002958:	dc000017 	ldw	r16,0(sp)
1000295c:	dec00504 	addi	sp,sp,20
10002960:	00029c81 	jmpi	100029c8 <_write_r>

10002964 <__sseek>:
10002964:	defffe04 	addi	sp,sp,-8
10002968:	dc000015 	stw	r16,0(sp)
1000296c:	2821883a 	mov	r16,r5
10002970:	2940038f 	ldh	r5,14(r5)
10002974:	dfc00115 	stw	ra,4(sp)
10002978:	0002ca00 	call	10002ca0 <_lseek_r>
1000297c:	00ffffc4 	movi	r3,-1
10002980:	10c00826 	beq	r2,r3,100029a4 <__sseek+0x40>
10002984:	80c0030b 	ldhu	r3,12(r16)
10002988:	80801415 	stw	r2,80(r16)
1000298c:	18c40014 	ori	r3,r3,4096
10002990:	80c0030d 	sth	r3,12(r16)
10002994:	dfc00117 	ldw	ra,4(sp)
10002998:	dc000017 	ldw	r16,0(sp)
1000299c:	dec00204 	addi	sp,sp,8
100029a0:	f800283a 	ret
100029a4:	80c0030b 	ldhu	r3,12(r16)
100029a8:	18fbffcc 	andi	r3,r3,61439
100029ac:	80c0030d 	sth	r3,12(r16)
100029b0:	dfc00117 	ldw	ra,4(sp)
100029b4:	dc000017 	ldw	r16,0(sp)
100029b8:	dec00204 	addi	sp,sp,8
100029bc:	f800283a 	ret

100029c0 <__sclose>:
100029c0:	2940038f 	ldh	r5,14(r5)
100029c4:	0002a341 	jmpi	10002a34 <_close_r>

100029c8 <_write_r>:
100029c8:	defffd04 	addi	sp,sp,-12
100029cc:	dc400115 	stw	r17,4(sp)
100029d0:	dc000015 	stw	r16,0(sp)
100029d4:	2023883a 	mov	r17,r4
100029d8:	04040074 	movhi	r16,4097
100029dc:	84225f04 	addi	r16,r16,-30340
100029e0:	2809883a 	mov	r4,r5
100029e4:	300b883a 	mov	r5,r6
100029e8:	380d883a 	mov	r6,r7
100029ec:	dfc00215 	stw	ra,8(sp)
100029f0:	80000015 	stw	zero,0(r16)
100029f4:	000367c0 	call	1000367c <write>
100029f8:	00ffffc4 	movi	r3,-1
100029fc:	10c00526 	beq	r2,r3,10002a14 <_write_r+0x4c>
10002a00:	dfc00217 	ldw	ra,8(sp)
10002a04:	dc400117 	ldw	r17,4(sp)
10002a08:	dc000017 	ldw	r16,0(sp)
10002a0c:	dec00304 	addi	sp,sp,12
10002a10:	f800283a 	ret
10002a14:	80c00017 	ldw	r3,0(r16)
10002a18:	183ff926 	beq	r3,zero,10002a00 <__alt_data_end+0xf8002a00>
10002a1c:	88c00015 	stw	r3,0(r17)
10002a20:	dfc00217 	ldw	ra,8(sp)
10002a24:	dc400117 	ldw	r17,4(sp)
10002a28:	dc000017 	ldw	r16,0(sp)
10002a2c:	dec00304 	addi	sp,sp,12
10002a30:	f800283a 	ret

10002a34 <_close_r>:
10002a34:	defffd04 	addi	sp,sp,-12
10002a38:	dc400115 	stw	r17,4(sp)
10002a3c:	dc000015 	stw	r16,0(sp)
10002a40:	2023883a 	mov	r17,r4
10002a44:	04040074 	movhi	r16,4097
10002a48:	84225f04 	addi	r16,r16,-30340
10002a4c:	2809883a 	mov	r4,r5
10002a50:	dfc00215 	stw	ra,8(sp)
10002a54:	80000015 	stw	zero,0(r16)
10002a58:	0002df00 	call	10002df0 <close>
10002a5c:	00ffffc4 	movi	r3,-1
10002a60:	10c00526 	beq	r2,r3,10002a78 <_close_r+0x44>
10002a64:	dfc00217 	ldw	ra,8(sp)
10002a68:	dc400117 	ldw	r17,4(sp)
10002a6c:	dc000017 	ldw	r16,0(sp)
10002a70:	dec00304 	addi	sp,sp,12
10002a74:	f800283a 	ret
10002a78:	80c00017 	ldw	r3,0(r16)
10002a7c:	183ff926 	beq	r3,zero,10002a64 <__alt_data_end+0xf8002a64>
10002a80:	88c00015 	stw	r3,0(r17)
10002a84:	dfc00217 	ldw	ra,8(sp)
10002a88:	dc400117 	ldw	r17,4(sp)
10002a8c:	dc000017 	ldw	r16,0(sp)
10002a90:	dec00304 	addi	sp,sp,12
10002a94:	f800283a 	ret

10002a98 <_fclose_r>:
10002a98:	defffc04 	addi	sp,sp,-16
10002a9c:	dc000015 	stw	r16,0(sp)
10002aa0:	dfc00315 	stw	ra,12(sp)
10002aa4:	dc800215 	stw	r18,8(sp)
10002aa8:	dc400115 	stw	r17,4(sp)
10002aac:	2821883a 	mov	r16,r5
10002ab0:	28003126 	beq	r5,zero,10002b78 <_fclose_r+0xe0>
10002ab4:	2023883a 	mov	r17,r4
10002ab8:	00020180 	call	10002018 <__sfp_lock_acquire>
10002abc:	88000226 	beq	r17,zero,10002ac8 <_fclose_r+0x30>
10002ac0:	88800e17 	ldw	r2,56(r17)
10002ac4:	10003326 	beq	r2,zero,10002b94 <_fclose_r+0xfc>
10002ac8:	8080030f 	ldh	r2,12(r16)
10002acc:	10002226 	beq	r2,zero,10002b58 <_fclose_r+0xc0>
10002ad0:	8809883a 	mov	r4,r17
10002ad4:	800b883a 	mov	r5,r16
10002ad8:	0001a400 	call	10001a40 <_fflush_r>
10002adc:	80c00b17 	ldw	r3,44(r16)
10002ae0:	1025883a 	mov	r18,r2
10002ae4:	18000426 	beq	r3,zero,10002af8 <_fclose_r+0x60>
10002ae8:	81400717 	ldw	r5,28(r16)
10002aec:	8809883a 	mov	r4,r17
10002af0:	183ee83a 	callr	r3
10002af4:	10003016 	blt	r2,zero,10002bb8 <_fclose_r+0x120>
10002af8:	8080030b 	ldhu	r2,12(r16)
10002afc:	1080200c 	andi	r2,r2,128
10002b00:	1000291e 	bne	r2,zero,10002ba8 <_fclose_r+0x110>
10002b04:	81400c17 	ldw	r5,48(r16)
10002b08:	28000526 	beq	r5,zero,10002b20 <_fclose_r+0x88>
10002b0c:	80801004 	addi	r2,r16,64
10002b10:	28800226 	beq	r5,r2,10002b1c <_fclose_r+0x84>
10002b14:	8809883a 	mov	r4,r17
10002b18:	00021940 	call	10002194 <_free_r>
10002b1c:	80000c15 	stw	zero,48(r16)
10002b20:	81401117 	ldw	r5,68(r16)
10002b24:	28000326 	beq	r5,zero,10002b34 <_fclose_r+0x9c>
10002b28:	8809883a 	mov	r4,r17
10002b2c:	00021940 	call	10002194 <_free_r>
10002b30:	80001115 	stw	zero,68(r16)
10002b34:	8000030d 	sth	zero,12(r16)
10002b38:	000201c0 	call	1000201c <__sfp_lock_release>
10002b3c:	9005883a 	mov	r2,r18
10002b40:	dfc00317 	ldw	ra,12(sp)
10002b44:	dc800217 	ldw	r18,8(sp)
10002b48:	dc400117 	ldw	r17,4(sp)
10002b4c:	dc000017 	ldw	r16,0(sp)
10002b50:	dec00404 	addi	sp,sp,16
10002b54:	f800283a 	ret
10002b58:	000201c0 	call	1000201c <__sfp_lock_release>
10002b5c:	0005883a 	mov	r2,zero
10002b60:	dfc00317 	ldw	ra,12(sp)
10002b64:	dc800217 	ldw	r18,8(sp)
10002b68:	dc400117 	ldw	r17,4(sp)
10002b6c:	dc000017 	ldw	r16,0(sp)
10002b70:	dec00404 	addi	sp,sp,16
10002b74:	f800283a 	ret
10002b78:	0005883a 	mov	r2,zero
10002b7c:	dfc00317 	ldw	ra,12(sp)
10002b80:	dc800217 	ldw	r18,8(sp)
10002b84:	dc400117 	ldw	r17,4(sp)
10002b88:	dc000017 	ldw	r16,0(sp)
10002b8c:	dec00404 	addi	sp,sp,16
10002b90:	f800283a 	ret
10002b94:	8809883a 	mov	r4,r17
10002b98:	0001d600 	call	10001d60 <__sinit>
10002b9c:	8080030f 	ldh	r2,12(r16)
10002ba0:	103fcb1e 	bne	r2,zero,10002ad0 <__alt_data_end+0xf8002ad0>
10002ba4:	003fec06 	br	10002b58 <__alt_data_end+0xf8002b58>
10002ba8:	81400417 	ldw	r5,16(r16)
10002bac:	8809883a 	mov	r4,r17
10002bb0:	00021940 	call	10002194 <_free_r>
10002bb4:	003fd306 	br	10002b04 <__alt_data_end+0xf8002b04>
10002bb8:	04bfffc4 	movi	r18,-1
10002bbc:	003fce06 	br	10002af8 <__alt_data_end+0xf8002af8>

10002bc0 <fclose>:
10002bc0:	00840034 	movhi	r2,4096
10002bc4:	109bb004 	addi	r2,r2,28352
10002bc8:	200b883a 	mov	r5,r4
10002bcc:	11000017 	ldw	r4,0(r2)
10002bd0:	0002a981 	jmpi	10002a98 <_fclose_r>

10002bd4 <_fstat_r>:
10002bd4:	defffd04 	addi	sp,sp,-12
10002bd8:	dc400115 	stw	r17,4(sp)
10002bdc:	dc000015 	stw	r16,0(sp)
10002be0:	2023883a 	mov	r17,r4
10002be4:	04040074 	movhi	r16,4097
10002be8:	84225f04 	addi	r16,r16,-30340
10002bec:	2809883a 	mov	r4,r5
10002bf0:	300b883a 	mov	r5,r6
10002bf4:	dfc00215 	stw	ra,8(sp)
10002bf8:	80000015 	stw	zero,0(r16)
10002bfc:	0002f3c0 	call	10002f3c <fstat>
10002c00:	00ffffc4 	movi	r3,-1
10002c04:	10c00526 	beq	r2,r3,10002c1c <_fstat_r+0x48>
10002c08:	dfc00217 	ldw	ra,8(sp)
10002c0c:	dc400117 	ldw	r17,4(sp)
10002c10:	dc000017 	ldw	r16,0(sp)
10002c14:	dec00304 	addi	sp,sp,12
10002c18:	f800283a 	ret
10002c1c:	80c00017 	ldw	r3,0(r16)
10002c20:	183ff926 	beq	r3,zero,10002c08 <__alt_data_end+0xf8002c08>
10002c24:	88c00015 	stw	r3,0(r17)
10002c28:	dfc00217 	ldw	ra,8(sp)
10002c2c:	dc400117 	ldw	r17,4(sp)
10002c30:	dc000017 	ldw	r16,0(sp)
10002c34:	dec00304 	addi	sp,sp,12
10002c38:	f800283a 	ret

10002c3c <_isatty_r>:
10002c3c:	defffd04 	addi	sp,sp,-12
10002c40:	dc400115 	stw	r17,4(sp)
10002c44:	dc000015 	stw	r16,0(sp)
10002c48:	2023883a 	mov	r17,r4
10002c4c:	04040074 	movhi	r16,4097
10002c50:	84225f04 	addi	r16,r16,-30340
10002c54:	2809883a 	mov	r4,r5
10002c58:	dfc00215 	stw	ra,8(sp)
10002c5c:	80000015 	stw	zero,0(r16)
10002c60:	00030400 	call	10003040 <isatty>
10002c64:	00ffffc4 	movi	r3,-1
10002c68:	10c00526 	beq	r2,r3,10002c80 <_isatty_r+0x44>
10002c6c:	dfc00217 	ldw	ra,8(sp)
10002c70:	dc400117 	ldw	r17,4(sp)
10002c74:	dc000017 	ldw	r16,0(sp)
10002c78:	dec00304 	addi	sp,sp,12
10002c7c:	f800283a 	ret
10002c80:	80c00017 	ldw	r3,0(r16)
10002c84:	183ff926 	beq	r3,zero,10002c6c <__alt_data_end+0xf8002c6c>
10002c88:	88c00015 	stw	r3,0(r17)
10002c8c:	dfc00217 	ldw	ra,8(sp)
10002c90:	dc400117 	ldw	r17,4(sp)
10002c94:	dc000017 	ldw	r16,0(sp)
10002c98:	dec00304 	addi	sp,sp,12
10002c9c:	f800283a 	ret

10002ca0 <_lseek_r>:
10002ca0:	defffd04 	addi	sp,sp,-12
10002ca4:	dc400115 	stw	r17,4(sp)
10002ca8:	dc000015 	stw	r16,0(sp)
10002cac:	2023883a 	mov	r17,r4
10002cb0:	04040074 	movhi	r16,4097
10002cb4:	84225f04 	addi	r16,r16,-30340
10002cb8:	2809883a 	mov	r4,r5
10002cbc:	300b883a 	mov	r5,r6
10002cc0:	380d883a 	mov	r6,r7
10002cc4:	dfc00215 	stw	ra,8(sp)
10002cc8:	80000015 	stw	zero,0(r16)
10002ccc:	00032240 	call	10003224 <lseek>
10002cd0:	00ffffc4 	movi	r3,-1
10002cd4:	10c00526 	beq	r2,r3,10002cec <_lseek_r+0x4c>
10002cd8:	dfc00217 	ldw	ra,8(sp)
10002cdc:	dc400117 	ldw	r17,4(sp)
10002ce0:	dc000017 	ldw	r16,0(sp)
10002ce4:	dec00304 	addi	sp,sp,12
10002ce8:	f800283a 	ret
10002cec:	80c00017 	ldw	r3,0(r16)
10002cf0:	183ff926 	beq	r3,zero,10002cd8 <__alt_data_end+0xf8002cd8>
10002cf4:	88c00015 	stw	r3,0(r17)
10002cf8:	dfc00217 	ldw	ra,8(sp)
10002cfc:	dc400117 	ldw	r17,4(sp)
10002d00:	dc000017 	ldw	r16,0(sp)
10002d04:	dec00304 	addi	sp,sp,12
10002d08:	f800283a 	ret

10002d0c <_read_r>:
10002d0c:	defffd04 	addi	sp,sp,-12
10002d10:	dc400115 	stw	r17,4(sp)
10002d14:	dc000015 	stw	r16,0(sp)
10002d18:	2023883a 	mov	r17,r4
10002d1c:	04040074 	movhi	r16,4097
10002d20:	84225f04 	addi	r16,r16,-30340
10002d24:	2809883a 	mov	r4,r5
10002d28:	300b883a 	mov	r5,r6
10002d2c:	380d883a 	mov	r6,r7
10002d30:	dfc00215 	stw	ra,8(sp)
10002d34:	80000015 	stw	zero,0(r16)
10002d38:	00034040 	call	10003404 <read>
10002d3c:	00ffffc4 	movi	r3,-1
10002d40:	10c00526 	beq	r2,r3,10002d58 <_read_r+0x4c>
10002d44:	dfc00217 	ldw	ra,8(sp)
10002d48:	dc400117 	ldw	r17,4(sp)
10002d4c:	dc000017 	ldw	r16,0(sp)
10002d50:	dec00304 	addi	sp,sp,12
10002d54:	f800283a 	ret
10002d58:	80c00017 	ldw	r3,0(r16)
10002d5c:	183ff926 	beq	r3,zero,10002d44 <__alt_data_end+0xf8002d44>
10002d60:	88c00015 	stw	r3,0(r17)
10002d64:	dfc00217 	ldw	ra,8(sp)
10002d68:	dc400117 	ldw	r17,4(sp)
10002d6c:	dc000017 	ldw	r16,0(sp)
10002d70:	dec00304 	addi	sp,sp,12
10002d74:	f800283a 	ret

10002d78 <__mulsi3>:
10002d78:	0005883a 	mov	r2,zero
10002d7c:	20000726 	beq	r4,zero,10002d9c <__mulsi3+0x24>
10002d80:	20c0004c 	andi	r3,r4,1
10002d84:	2008d07a 	srli	r4,r4,1
10002d88:	18000126 	beq	r3,zero,10002d90 <__mulsi3+0x18>
10002d8c:	1145883a 	add	r2,r2,r5
10002d90:	294b883a 	add	r5,r5,r5
10002d94:	203ffa1e 	bne	r4,zero,10002d80 <__alt_data_end+0xf8002d80>
10002d98:	f800283a 	ret
10002d9c:	f800283a 	ret

10002da0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002da0:	defffe04 	addi	sp,sp,-8
10002da4:	dfc00115 	stw	ra,4(sp)
10002da8:	df000015 	stw	fp,0(sp)
10002dac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10002db0:	00840034 	movhi	r2,4096
10002db4:	109bb804 	addi	r2,r2,28384
10002db8:	10800017 	ldw	r2,0(r2)
10002dbc:	10000526 	beq	r2,zero,10002dd4 <alt_get_errno+0x34>
10002dc0:	00840034 	movhi	r2,4096
10002dc4:	109bb804 	addi	r2,r2,28384
10002dc8:	10800017 	ldw	r2,0(r2)
10002dcc:	103ee83a 	callr	r2
10002dd0:	00000206 	br	10002ddc <alt_get_errno+0x3c>
10002dd4:	00840074 	movhi	r2,4097
10002dd8:	10a25f04 	addi	r2,r2,-30340
}
10002ddc:	e037883a 	mov	sp,fp
10002de0:	dfc00117 	ldw	ra,4(sp)
10002de4:	df000017 	ldw	fp,0(sp)
10002de8:	dec00204 	addi	sp,sp,8
10002dec:	f800283a 	ret

10002df0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10002df0:	defffb04 	addi	sp,sp,-20
10002df4:	dfc00415 	stw	ra,16(sp)
10002df8:	df000315 	stw	fp,12(sp)
10002dfc:	df000304 	addi	fp,sp,12
10002e00:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10002e04:	e0bfff17 	ldw	r2,-4(fp)
10002e08:	10000816 	blt	r2,zero,10002e2c <close+0x3c>
10002e0c:	e13fff17 	ldw	r4,-4(fp)
10002e10:	01400304 	movi	r5,12
10002e14:	0002d780 	call	10002d78 <__mulsi3>
10002e18:	1007883a 	mov	r3,r2
10002e1c:	00840034 	movhi	r2,4096
10002e20:	10973304 	addi	r2,r2,23756
10002e24:	1885883a 	add	r2,r3,r2
10002e28:	00000106 	br	10002e30 <close+0x40>
10002e2c:	0005883a 	mov	r2,zero
10002e30:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10002e34:	e0bffd17 	ldw	r2,-12(fp)
10002e38:	10001826 	beq	r2,zero,10002e9c <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10002e3c:	e0bffd17 	ldw	r2,-12(fp)
10002e40:	10800017 	ldw	r2,0(r2)
10002e44:	10800417 	ldw	r2,16(r2)
10002e48:	10000626 	beq	r2,zero,10002e64 <close+0x74>
10002e4c:	e0bffd17 	ldw	r2,-12(fp)
10002e50:	10800017 	ldw	r2,0(r2)
10002e54:	10800417 	ldw	r2,16(r2)
10002e58:	e13ffd17 	ldw	r4,-12(fp)
10002e5c:	103ee83a 	callr	r2
10002e60:	00000106 	br	10002e68 <close+0x78>
10002e64:	0005883a 	mov	r2,zero
10002e68:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10002e6c:	e13fff17 	ldw	r4,-4(fp)
10002e70:	00034fc0 	call	100034fc <alt_release_fd>
    if (rval < 0)
10002e74:	e0bffe17 	ldw	r2,-8(fp)
10002e78:	1000060e 	bge	r2,zero,10002e94 <close+0xa4>
    {
      ALT_ERRNO = -rval;
10002e7c:	0002da00 	call	10002da0 <alt_get_errno>
10002e80:	e0fffe17 	ldw	r3,-8(fp)
10002e84:	00c7c83a 	sub	r3,zero,r3
10002e88:	10c00015 	stw	r3,0(r2)
      return -1;
10002e8c:	00bfffc4 	movi	r2,-1
10002e90:	00000606 	br	10002eac <close+0xbc>
    }
    return 0;
10002e94:	0005883a 	mov	r2,zero
10002e98:	00000406 	br	10002eac <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10002e9c:	0002da00 	call	10002da0 <alt_get_errno>
10002ea0:	00c01444 	movi	r3,81
10002ea4:	10c00015 	stw	r3,0(r2)
    return -1;
10002ea8:	00bfffc4 	movi	r2,-1
  }
}
10002eac:	e037883a 	mov	sp,fp
10002eb0:	dfc00117 	ldw	ra,4(sp)
10002eb4:	df000017 	ldw	fp,0(sp)
10002eb8:	dec00204 	addi	sp,sp,8
10002ebc:	f800283a 	ret

10002ec0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10002ec0:	defffc04 	addi	sp,sp,-16
10002ec4:	df000315 	stw	fp,12(sp)
10002ec8:	df000304 	addi	fp,sp,12
10002ecc:	e13ffd15 	stw	r4,-12(fp)
10002ed0:	e17ffe15 	stw	r5,-8(fp)
10002ed4:	e1bfff15 	stw	r6,-4(fp)
  return len;
10002ed8:	e0bfff17 	ldw	r2,-4(fp)
}
10002edc:	e037883a 	mov	sp,fp
10002ee0:	df000017 	ldw	fp,0(sp)
10002ee4:	dec00104 	addi	sp,sp,4
10002ee8:	f800283a 	ret

10002eec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002eec:	defffe04 	addi	sp,sp,-8
10002ef0:	dfc00115 	stw	ra,4(sp)
10002ef4:	df000015 	stw	fp,0(sp)
10002ef8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10002efc:	00840034 	movhi	r2,4096
10002f00:	109bb804 	addi	r2,r2,28384
10002f04:	10800017 	ldw	r2,0(r2)
10002f08:	10000526 	beq	r2,zero,10002f20 <alt_get_errno+0x34>
10002f0c:	00840034 	movhi	r2,4096
10002f10:	109bb804 	addi	r2,r2,28384
10002f14:	10800017 	ldw	r2,0(r2)
10002f18:	103ee83a 	callr	r2
10002f1c:	00000206 	br	10002f28 <alt_get_errno+0x3c>
10002f20:	00840074 	movhi	r2,4097
10002f24:	10a25f04 	addi	r2,r2,-30340
}
10002f28:	e037883a 	mov	sp,fp
10002f2c:	dfc00117 	ldw	ra,4(sp)
10002f30:	df000017 	ldw	fp,0(sp)
10002f34:	dec00204 	addi	sp,sp,8
10002f38:	f800283a 	ret

10002f3c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10002f3c:	defffb04 	addi	sp,sp,-20
10002f40:	dfc00415 	stw	ra,16(sp)
10002f44:	df000315 	stw	fp,12(sp)
10002f48:	df000304 	addi	fp,sp,12
10002f4c:	e13ffe15 	stw	r4,-8(fp)
10002f50:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10002f54:	e0bffe17 	ldw	r2,-8(fp)
10002f58:	10000816 	blt	r2,zero,10002f7c <fstat+0x40>
10002f5c:	e13ffe17 	ldw	r4,-8(fp)
10002f60:	01400304 	movi	r5,12
10002f64:	0002d780 	call	10002d78 <__mulsi3>
10002f68:	1007883a 	mov	r3,r2
10002f6c:	00840034 	movhi	r2,4096
10002f70:	10973304 	addi	r2,r2,23756
10002f74:	1885883a 	add	r2,r3,r2
10002f78:	00000106 	br	10002f80 <fstat+0x44>
10002f7c:	0005883a 	mov	r2,zero
10002f80:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10002f84:	e0bffd17 	ldw	r2,-12(fp)
10002f88:	10001026 	beq	r2,zero,10002fcc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10002f8c:	e0bffd17 	ldw	r2,-12(fp)
10002f90:	10800017 	ldw	r2,0(r2)
10002f94:	10800817 	ldw	r2,32(r2)
10002f98:	10000726 	beq	r2,zero,10002fb8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10002f9c:	e0bffd17 	ldw	r2,-12(fp)
10002fa0:	10800017 	ldw	r2,0(r2)
10002fa4:	10800817 	ldw	r2,32(r2)
10002fa8:	e13ffd17 	ldw	r4,-12(fp)
10002fac:	e17fff17 	ldw	r5,-4(fp)
10002fb0:	103ee83a 	callr	r2
10002fb4:	00000906 	br	10002fdc <fstat+0xa0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10002fb8:	e0bfff17 	ldw	r2,-4(fp)
10002fbc:	00c80004 	movi	r3,8192
10002fc0:	10c00115 	stw	r3,4(r2)
      return 0;
10002fc4:	0005883a 	mov	r2,zero
10002fc8:	00000406 	br	10002fdc <fstat+0xa0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10002fcc:	0002eec0 	call	10002eec <alt_get_errno>
10002fd0:	00c01444 	movi	r3,81
10002fd4:	10c00015 	stw	r3,0(r2)
    return -1;
10002fd8:	00bfffc4 	movi	r2,-1
  }
}
10002fdc:	e037883a 	mov	sp,fp
10002fe0:	dfc00117 	ldw	ra,4(sp)
10002fe4:	df000017 	ldw	fp,0(sp)
10002fe8:	dec00204 	addi	sp,sp,8
10002fec:	f800283a 	ret

10002ff0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002ff0:	defffe04 	addi	sp,sp,-8
10002ff4:	dfc00115 	stw	ra,4(sp)
10002ff8:	df000015 	stw	fp,0(sp)
10002ffc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003000:	00840034 	movhi	r2,4096
10003004:	109bb804 	addi	r2,r2,28384
10003008:	10800017 	ldw	r2,0(r2)
1000300c:	10000526 	beq	r2,zero,10003024 <alt_get_errno+0x34>
10003010:	00840034 	movhi	r2,4096
10003014:	109bb804 	addi	r2,r2,28384
10003018:	10800017 	ldw	r2,0(r2)
1000301c:	103ee83a 	callr	r2
10003020:	00000206 	br	1000302c <alt_get_errno+0x3c>
10003024:	00840074 	movhi	r2,4097
10003028:	10a25f04 	addi	r2,r2,-30340
}
1000302c:	e037883a 	mov	sp,fp
10003030:	dfc00117 	ldw	ra,4(sp)
10003034:	df000017 	ldw	fp,0(sp)
10003038:	dec00204 	addi	sp,sp,8
1000303c:	f800283a 	ret

10003040 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10003040:	deffed04 	addi	sp,sp,-76
10003044:	dfc01215 	stw	ra,72(sp)
10003048:	df001115 	stw	fp,68(sp)
1000304c:	df001104 	addi	fp,sp,68
10003050:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003054:	e0bfff17 	ldw	r2,-4(fp)
10003058:	10000816 	blt	r2,zero,1000307c <isatty+0x3c>
1000305c:	e13fff17 	ldw	r4,-4(fp)
10003060:	01400304 	movi	r5,12
10003064:	0002d780 	call	10002d78 <__mulsi3>
10003068:	1007883a 	mov	r3,r2
1000306c:	00840034 	movhi	r2,4096
10003070:	10973304 	addi	r2,r2,23756
10003074:	1885883a 	add	r2,r3,r2
10003078:	00000106 	br	10003080 <isatty+0x40>
1000307c:	0005883a 	mov	r2,zero
10003080:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10003084:	e0bfef17 	ldw	r2,-68(fp)
10003088:	10000e26 	beq	r2,zero,100030c4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000308c:	e0bfef17 	ldw	r2,-68(fp)
10003090:	10800017 	ldw	r2,0(r2)
10003094:	10800817 	ldw	r2,32(r2)
10003098:	1000021e 	bne	r2,zero,100030a4 <isatty+0x64>
    {
      return 1;
1000309c:	00800044 	movi	r2,1
100030a0:	00000c06 	br	100030d4 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100030a4:	e0bff004 	addi	r2,fp,-64
100030a8:	e13fff17 	ldw	r4,-4(fp)
100030ac:	100b883a 	mov	r5,r2
100030b0:	0002f3c0 	call	10002f3c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100030b4:	e0bff117 	ldw	r2,-60(fp)
100030b8:	10880020 	cmpeqi	r2,r2,8192
100030bc:	10803fcc 	andi	r2,r2,255
100030c0:	00000406 	br	100030d4 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100030c4:	0002ff00 	call	10002ff0 <alt_get_errno>
100030c8:	00c01444 	movi	r3,81
100030cc:	10c00015 	stw	r3,0(r2)
    return 0;
100030d0:	0005883a 	mov	r2,zero
  }
}
100030d4:	e037883a 	mov	sp,fp
100030d8:	dfc00117 	ldw	ra,4(sp)
100030dc:	df000017 	ldw	fp,0(sp)
100030e0:	dec00204 	addi	sp,sp,8
100030e4:	f800283a 	ret

100030e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100030e8:	defffc04 	addi	sp,sp,-16
100030ec:	df000315 	stw	fp,12(sp)
100030f0:	df000304 	addi	fp,sp,12
100030f4:	e13ffd15 	stw	r4,-12(fp)
100030f8:	e17ffe15 	stw	r5,-8(fp)
100030fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10003100:	e0fffe17 	ldw	r3,-8(fp)
10003104:	e0bffd17 	ldw	r2,-12(fp)
10003108:	18800e26 	beq	r3,r2,10003144 <alt_load_section+0x5c>
  {
    while( to != end )
1000310c:	00000a06 	br	10003138 <alt_load_section+0x50>
    {
      *to++ = *from++;
10003110:	e0bffd17 	ldw	r2,-12(fp)
10003114:	10c00017 	ldw	r3,0(r2)
10003118:	e0bffe17 	ldw	r2,-8(fp)
1000311c:	10c00015 	stw	r3,0(r2)
10003120:	e0bffe17 	ldw	r2,-8(fp)
10003124:	10800104 	addi	r2,r2,4
10003128:	e0bffe15 	stw	r2,-8(fp)
1000312c:	e0bffd17 	ldw	r2,-12(fp)
10003130:	10800104 	addi	r2,r2,4
10003134:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10003138:	e0fffe17 	ldw	r3,-8(fp)
1000313c:	e0bfff17 	ldw	r2,-4(fp)
10003140:	18bff31e 	bne	r3,r2,10003110 <__alt_data_end+0xf8003110>
    {
      *to++ = *from++;
    }
  }
}
10003144:	e037883a 	mov	sp,fp
10003148:	df000017 	ldw	fp,0(sp)
1000314c:	dec00104 	addi	sp,sp,4
10003150:	f800283a 	ret

10003154 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10003154:	defffe04 	addi	sp,sp,-8
10003158:	dfc00115 	stw	ra,4(sp)
1000315c:	df000015 	stw	fp,0(sp)
10003160:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10003164:	01040034 	movhi	r4,4096
10003168:	211bbd04 	addi	r4,r4,28404
1000316c:	01440034 	movhi	r5,4096
10003170:	29551e04 	addi	r5,r5,21624
10003174:	01840034 	movhi	r6,4096
10003178:	319bbd04 	addi	r6,r6,28404
1000317c:	00030e80 	call	100030e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10003180:	01040034 	movhi	r4,4096
10003184:	21000804 	addi	r4,r4,32
10003188:	01440034 	movhi	r5,4096
1000318c:	29400804 	addi	r5,r5,32
10003190:	01840034 	movhi	r6,4096
10003194:	31806f04 	addi	r6,r6,444
10003198:	00030e80 	call	100030e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000319c:	01040034 	movhi	r4,4096
100031a0:	21150b04 	addi	r4,r4,21548
100031a4:	01440034 	movhi	r5,4096
100031a8:	29550b04 	addi	r5,r5,21548
100031ac:	01840034 	movhi	r6,4096
100031b0:	31951e04 	addi	r6,r6,21624
100031b4:	00030e80 	call	100030e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100031b8:	000439c0 	call	1000439c <alt_dcache_flush_all>
  alt_icache_flush_all();
100031bc:	00045600 	call	10004560 <alt_icache_flush_all>
}
100031c0:	e037883a 	mov	sp,fp
100031c4:	dfc00117 	ldw	ra,4(sp)
100031c8:	df000017 	ldw	fp,0(sp)
100031cc:	dec00204 	addi	sp,sp,8
100031d0:	f800283a 	ret

100031d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100031d4:	defffe04 	addi	sp,sp,-8
100031d8:	dfc00115 	stw	ra,4(sp)
100031dc:	df000015 	stw	fp,0(sp)
100031e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100031e4:	00840034 	movhi	r2,4096
100031e8:	109bb804 	addi	r2,r2,28384
100031ec:	10800017 	ldw	r2,0(r2)
100031f0:	10000526 	beq	r2,zero,10003208 <alt_get_errno+0x34>
100031f4:	00840034 	movhi	r2,4096
100031f8:	109bb804 	addi	r2,r2,28384
100031fc:	10800017 	ldw	r2,0(r2)
10003200:	103ee83a 	callr	r2
10003204:	00000206 	br	10003210 <alt_get_errno+0x3c>
10003208:	00840074 	movhi	r2,4097
1000320c:	10a25f04 	addi	r2,r2,-30340
}
10003210:	e037883a 	mov	sp,fp
10003214:	dfc00117 	ldw	ra,4(sp)
10003218:	df000017 	ldw	fp,0(sp)
1000321c:	dec00204 	addi	sp,sp,8
10003220:	f800283a 	ret

10003224 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10003224:	defff904 	addi	sp,sp,-28
10003228:	dfc00615 	stw	ra,24(sp)
1000322c:	df000515 	stw	fp,20(sp)
10003230:	df000504 	addi	fp,sp,20
10003234:	e13ffd15 	stw	r4,-12(fp)
10003238:	e17ffe15 	stw	r5,-8(fp)
1000323c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10003240:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003244:	e0bffd17 	ldw	r2,-12(fp)
10003248:	10000816 	blt	r2,zero,1000326c <lseek+0x48>
1000324c:	e13ffd17 	ldw	r4,-12(fp)
10003250:	01400304 	movi	r5,12
10003254:	0002d780 	call	10002d78 <__mulsi3>
10003258:	1007883a 	mov	r3,r2
1000325c:	00840034 	movhi	r2,4096
10003260:	10973304 	addi	r2,r2,23756
10003264:	1885883a 	add	r2,r3,r2
10003268:	00000106 	br	10003270 <lseek+0x4c>
1000326c:	0005883a 	mov	r2,zero
10003270:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10003274:	e0bffc17 	ldw	r2,-16(fp)
10003278:	10001026 	beq	r2,zero,100032bc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000327c:	e0bffc17 	ldw	r2,-16(fp)
10003280:	10800017 	ldw	r2,0(r2)
10003284:	10800717 	ldw	r2,28(r2)
10003288:	10000926 	beq	r2,zero,100032b0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000328c:	e0bffc17 	ldw	r2,-16(fp)
10003290:	10800017 	ldw	r2,0(r2)
10003294:	10800717 	ldw	r2,28(r2)
10003298:	e13ffc17 	ldw	r4,-16(fp)
1000329c:	e17ffe17 	ldw	r5,-8(fp)
100032a0:	e1bfff17 	ldw	r6,-4(fp)
100032a4:	103ee83a 	callr	r2
100032a8:	e0bffb15 	stw	r2,-20(fp)
100032ac:	00000506 	br	100032c4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100032b0:	00bfde84 	movi	r2,-134
100032b4:	e0bffb15 	stw	r2,-20(fp)
100032b8:	00000206 	br	100032c4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100032bc:	00bfebc4 	movi	r2,-81
100032c0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100032c4:	e0bffb17 	ldw	r2,-20(fp)
100032c8:	1000060e 	bge	r2,zero,100032e4 <lseek+0xc0>
  {
    ALT_ERRNO = -rc;
100032cc:	00031d40 	call	100031d4 <alt_get_errno>
100032d0:	e0fffb17 	ldw	r3,-20(fp)
100032d4:	00c7c83a 	sub	r3,zero,r3
100032d8:	10c00015 	stw	r3,0(r2)
    rc = -1;
100032dc:	00bfffc4 	movi	r2,-1
100032e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100032e4:	e0bffb17 	ldw	r2,-20(fp)
}
100032e8:	e037883a 	mov	sp,fp
100032ec:	dfc00117 	ldw	ra,4(sp)
100032f0:	df000017 	ldw	fp,0(sp)
100032f4:	dec00204 	addi	sp,sp,8
100032f8:	f800283a 	ret

100032fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100032fc:	defffd04 	addi	sp,sp,-12
10003300:	dfc00215 	stw	ra,8(sp)
10003304:	df000115 	stw	fp,4(sp)
10003308:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000330c:	0009883a 	mov	r4,zero
10003310:	00037a80 	call	100037a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10003314:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10003318:	00037dc0 	call	100037dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000331c:	01040034 	movhi	r4,4096
10003320:	21151404 	addi	r4,r4,21584
10003324:	01440034 	movhi	r5,4096
10003328:	29551404 	addi	r5,r5,21584
1000332c:	01840034 	movhi	r6,4096
10003330:	31951404 	addi	r6,r6,21584
10003334:	00049240 	call	10004924 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10003338:	00044a80 	call	100044a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000333c:	01040034 	movhi	r4,4096
10003340:	21114104 	addi	r4,r4,17668
10003344:	00050700 	call	10005070 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10003348:	d126b517 	ldw	r4,-25900(gp)
1000334c:	d0e6b617 	ldw	r3,-25896(gp)
10003350:	d0a6b717 	ldw	r2,-25892(gp)
10003354:	180b883a 	mov	r5,r3
10003358:	100d883a 	mov	r6,r2
1000335c:	00001f80 	call	100001f8 <main>
10003360:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10003364:	01000044 	movi	r4,1
10003368:	0002df00 	call	10002df0 <close>
  exit (result);
1000336c:	e13fff17 	ldw	r4,-4(fp)
10003370:	00050840 	call	10005084 <exit>

10003374 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10003374:	defffe04 	addi	sp,sp,-8
10003378:	df000115 	stw	fp,4(sp)
1000337c:	df000104 	addi	fp,sp,4
10003380:	e13fff15 	stw	r4,-4(fp)
}
10003384:	e037883a 	mov	sp,fp
10003388:	df000017 	ldw	fp,0(sp)
1000338c:	dec00104 	addi	sp,sp,4
10003390:	f800283a 	ret

10003394 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10003394:	defffe04 	addi	sp,sp,-8
10003398:	df000115 	stw	fp,4(sp)
1000339c:	df000104 	addi	fp,sp,4
100033a0:	e13fff15 	stw	r4,-4(fp)
}
100033a4:	e037883a 	mov	sp,fp
100033a8:	df000017 	ldw	fp,0(sp)
100033ac:	dec00104 	addi	sp,sp,4
100033b0:	f800283a 	ret

100033b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100033b4:	defffe04 	addi	sp,sp,-8
100033b8:	dfc00115 	stw	ra,4(sp)
100033bc:	df000015 	stw	fp,0(sp)
100033c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100033c4:	00840034 	movhi	r2,4096
100033c8:	109bb804 	addi	r2,r2,28384
100033cc:	10800017 	ldw	r2,0(r2)
100033d0:	10000526 	beq	r2,zero,100033e8 <alt_get_errno+0x34>
100033d4:	00840034 	movhi	r2,4096
100033d8:	109bb804 	addi	r2,r2,28384
100033dc:	10800017 	ldw	r2,0(r2)
100033e0:	103ee83a 	callr	r2
100033e4:	00000206 	br	100033f0 <alt_get_errno+0x3c>
100033e8:	00840074 	movhi	r2,4097
100033ec:	10a25f04 	addi	r2,r2,-30340
}
100033f0:	e037883a 	mov	sp,fp
100033f4:	dfc00117 	ldw	ra,4(sp)
100033f8:	df000017 	ldw	fp,0(sp)
100033fc:	dec00204 	addi	sp,sp,8
10003400:	f800283a 	ret

10003404 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10003404:	defff904 	addi	sp,sp,-28
10003408:	dfc00615 	stw	ra,24(sp)
1000340c:	df000515 	stw	fp,20(sp)
10003410:	df000504 	addi	fp,sp,20
10003414:	e13ffd15 	stw	r4,-12(fp)
10003418:	e17ffe15 	stw	r5,-8(fp)
1000341c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003420:	e0bffd17 	ldw	r2,-12(fp)
10003424:	10000816 	blt	r2,zero,10003448 <read+0x44>
10003428:	e13ffd17 	ldw	r4,-12(fp)
1000342c:	01400304 	movi	r5,12
10003430:	0002d780 	call	10002d78 <__mulsi3>
10003434:	1007883a 	mov	r3,r2
10003438:	00840034 	movhi	r2,4096
1000343c:	10973304 	addi	r2,r2,23756
10003440:	1885883a 	add	r2,r3,r2
10003444:	00000106 	br	1000344c <read+0x48>
10003448:	0005883a 	mov	r2,zero
1000344c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10003450:	e0bffb17 	ldw	r2,-20(fp)
10003454:	10002026 	beq	r2,zero,100034d8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10003458:	e0bffb17 	ldw	r2,-20(fp)
1000345c:	10800217 	ldw	r2,8(r2)
10003460:	108000cc 	andi	r2,r2,3
10003464:	10800060 	cmpeqi	r2,r2,1
10003468:	1000171e 	bne	r2,zero,100034c8 <read+0xc4>
        (fd->dev->read))
1000346c:	e0bffb17 	ldw	r2,-20(fp)
10003470:	10800017 	ldw	r2,0(r2)
10003474:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10003478:	10001326 	beq	r2,zero,100034c8 <read+0xc4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000347c:	e0bffb17 	ldw	r2,-20(fp)
10003480:	10800017 	ldw	r2,0(r2)
10003484:	10800517 	ldw	r2,20(r2)
10003488:	e0ffff17 	ldw	r3,-4(fp)
1000348c:	e13ffb17 	ldw	r4,-20(fp)
10003490:	e17ffe17 	ldw	r5,-8(fp)
10003494:	180d883a 	mov	r6,r3
10003498:	103ee83a 	callr	r2
1000349c:	e0bffc15 	stw	r2,-16(fp)
100034a0:	e0bffc17 	ldw	r2,-16(fp)
100034a4:	1000060e 	bge	r2,zero,100034c0 <read+0xbc>
        {
          ALT_ERRNO = -rval;
100034a8:	00033b40 	call	100033b4 <alt_get_errno>
100034ac:	e0fffc17 	ldw	r3,-16(fp)
100034b0:	00c7c83a 	sub	r3,zero,r3
100034b4:	10c00015 	stw	r3,0(r2)
          return -1;
100034b8:	00bfffc4 	movi	r2,-1
100034bc:	00000a06 	br	100034e8 <read+0xe4>
        }
        return rval;
100034c0:	e0bffc17 	ldw	r2,-16(fp)
100034c4:	00000806 	br	100034e8 <read+0xe4>
      }
      else
      {
        ALT_ERRNO = EACCES;
100034c8:	00033b40 	call	100033b4 <alt_get_errno>
100034cc:	00c00344 	movi	r3,13
100034d0:	10c00015 	stw	r3,0(r2)
100034d4:	00000306 	br	100034e4 <read+0xe0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
100034d8:	00033b40 	call	100033b4 <alt_get_errno>
100034dc:	00c01444 	movi	r3,81
100034e0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
100034e4:	00bfffc4 	movi	r2,-1
}
100034e8:	e037883a 	mov	sp,fp
100034ec:	dfc00117 	ldw	ra,4(sp)
100034f0:	df000017 	ldw	fp,0(sp)
100034f4:	dec00204 	addi	sp,sp,8
100034f8:	f800283a 	ret

100034fc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
100034fc:	defffc04 	addi	sp,sp,-16
10003500:	dfc00315 	stw	ra,12(sp)
10003504:	df000215 	stw	fp,8(sp)
10003508:	dc000115 	stw	r16,4(sp)
1000350c:	df000204 	addi	fp,sp,8
10003510:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10003514:	e0bffe17 	ldw	r2,-8(fp)
10003518:	108000d0 	cmplti	r2,r2,3
1000351c:	1000111e 	bne	r2,zero,10003564 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10003520:	04040034 	movhi	r16,4096
10003524:	84173304 	addi	r16,r16,23756
10003528:	e0bffe17 	ldw	r2,-8(fp)
1000352c:	1009883a 	mov	r4,r2
10003530:	01400304 	movi	r5,12
10003534:	0002d780 	call	10002d78 <__mulsi3>
10003538:	8085883a 	add	r2,r16,r2
1000353c:	10800204 	addi	r2,r2,8
10003540:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10003544:	04040034 	movhi	r16,4096
10003548:	84173304 	addi	r16,r16,23756
1000354c:	e0bffe17 	ldw	r2,-8(fp)
10003550:	1009883a 	mov	r4,r2
10003554:	01400304 	movi	r5,12
10003558:	0002d780 	call	10002d78 <__mulsi3>
1000355c:	8085883a 	add	r2,r16,r2
10003560:	10000015 	stw	zero,0(r2)
  }
}
10003564:	e6ffff04 	addi	sp,fp,-4
10003568:	dfc00217 	ldw	ra,8(sp)
1000356c:	df000117 	ldw	fp,4(sp)
10003570:	dc000017 	ldw	r16,0(sp)
10003574:	dec00304 	addi	sp,sp,12
10003578:	f800283a 	ret

1000357c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000357c:	defff904 	addi	sp,sp,-28
10003580:	df000615 	stw	fp,24(sp)
10003584:	df000604 	addi	fp,sp,24
10003588:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000358c:	0005303a 	rdctl	r2,status
10003590:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003594:	e0fffc17 	ldw	r3,-16(fp)
10003598:	00bfff84 	movi	r2,-2
1000359c:	1884703a 	and	r2,r3,r2
100035a0:	1001703a 	wrctl	status,r2
  
  return context;
100035a4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100035a8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100035ac:	d0a00e17 	ldw	r2,-32712(gp)
100035b0:	10c000c4 	addi	r3,r2,3
100035b4:	00bfff04 	movi	r2,-4
100035b8:	1884703a 	and	r2,r3,r2
100035bc:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100035c0:	d0e00e17 	ldw	r3,-32712(gp)
100035c4:	e0bfff17 	ldw	r2,-4(fp)
100035c8:	1885883a 	add	r2,r3,r2
100035cc:	00c60034 	movhi	r3,6144
100035d0:	18c00004 	addi	r3,r3,0
100035d4:	1880062e 	bgeu	r3,r2,100035f0 <sbrk+0x74>
100035d8:	e0bffa17 	ldw	r2,-24(fp)
100035dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100035e0:	e0bffd17 	ldw	r2,-12(fp)
100035e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
100035e8:	00bfffc4 	movi	r2,-1
100035ec:	00000b06 	br	1000361c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
100035f0:	d0a00e17 	ldw	r2,-32712(gp)
100035f4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
100035f8:	d0e00e17 	ldw	r3,-32712(gp)
100035fc:	e0bfff17 	ldw	r2,-4(fp)
10003600:	1885883a 	add	r2,r3,r2
10003604:	d0a00e15 	stw	r2,-32712(gp)
10003608:	e0bffa17 	ldw	r2,-24(fp)
1000360c:	e0bffe15 	stw	r2,-8(fp)
10003610:	e0bffe17 	ldw	r2,-8(fp)
10003614:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10003618:	e0bffb17 	ldw	r2,-20(fp)
} 
1000361c:	e037883a 	mov	sp,fp
10003620:	df000017 	ldw	fp,0(sp)
10003624:	dec00104 	addi	sp,sp,4
10003628:	f800283a 	ret

1000362c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000362c:	defffe04 	addi	sp,sp,-8
10003630:	dfc00115 	stw	ra,4(sp)
10003634:	df000015 	stw	fp,0(sp)
10003638:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000363c:	00840034 	movhi	r2,4096
10003640:	109bb804 	addi	r2,r2,28384
10003644:	10800017 	ldw	r2,0(r2)
10003648:	10000526 	beq	r2,zero,10003660 <alt_get_errno+0x34>
1000364c:	00840034 	movhi	r2,4096
10003650:	109bb804 	addi	r2,r2,28384
10003654:	10800017 	ldw	r2,0(r2)
10003658:	103ee83a 	callr	r2
1000365c:	00000206 	br	10003668 <alt_get_errno+0x3c>
10003660:	00840074 	movhi	r2,4097
10003664:	10a25f04 	addi	r2,r2,-30340
}
10003668:	e037883a 	mov	sp,fp
1000366c:	dfc00117 	ldw	ra,4(sp)
10003670:	df000017 	ldw	fp,0(sp)
10003674:	dec00204 	addi	sp,sp,8
10003678:	f800283a 	ret

1000367c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000367c:	defff904 	addi	sp,sp,-28
10003680:	dfc00615 	stw	ra,24(sp)
10003684:	df000515 	stw	fp,20(sp)
10003688:	df000504 	addi	fp,sp,20
1000368c:	e13ffd15 	stw	r4,-12(fp)
10003690:	e17ffe15 	stw	r5,-8(fp)
10003694:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003698:	e0bffd17 	ldw	r2,-12(fp)
1000369c:	10000816 	blt	r2,zero,100036c0 <write+0x44>
100036a0:	e13ffd17 	ldw	r4,-12(fp)
100036a4:	01400304 	movi	r5,12
100036a8:	0002d780 	call	10002d78 <__mulsi3>
100036ac:	1007883a 	mov	r3,r2
100036b0:	00840034 	movhi	r2,4096
100036b4:	10973304 	addi	r2,r2,23756
100036b8:	1885883a 	add	r2,r3,r2
100036bc:	00000106 	br	100036c4 <write+0x48>
100036c0:	0005883a 	mov	r2,zero
100036c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100036c8:	e0bffb17 	ldw	r2,-20(fp)
100036cc:	10001f26 	beq	r2,zero,1000374c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
100036d0:	e0bffb17 	ldw	r2,-20(fp)
100036d4:	10800217 	ldw	r2,8(r2)
100036d8:	108000cc 	andi	r2,r2,3
100036dc:	10001726 	beq	r2,zero,1000373c <write+0xc0>
100036e0:	e0bffb17 	ldw	r2,-20(fp)
100036e4:	10800017 	ldw	r2,0(r2)
100036e8:	10800617 	ldw	r2,24(r2)
100036ec:	10001326 	beq	r2,zero,1000373c <write+0xc0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
100036f0:	e0bffb17 	ldw	r2,-20(fp)
100036f4:	10800017 	ldw	r2,0(r2)
100036f8:	10800617 	ldw	r2,24(r2)
100036fc:	e0ffff17 	ldw	r3,-4(fp)
10003700:	e13ffb17 	ldw	r4,-20(fp)
10003704:	e17ffe17 	ldw	r5,-8(fp)
10003708:	180d883a 	mov	r6,r3
1000370c:	103ee83a 	callr	r2
10003710:	e0bffc15 	stw	r2,-16(fp)
10003714:	e0bffc17 	ldw	r2,-16(fp)
10003718:	1000060e 	bge	r2,zero,10003734 <write+0xb8>
      {
        ALT_ERRNO = -rval;
1000371c:	000362c0 	call	1000362c <alt_get_errno>
10003720:	e0fffc17 	ldw	r3,-16(fp)
10003724:	00c7c83a 	sub	r3,zero,r3
10003728:	10c00015 	stw	r3,0(r2)
        return -1;
1000372c:	00bfffc4 	movi	r2,-1
10003730:	00000a06 	br	1000375c <write+0xe0>
      }
      return rval;
10003734:	e0bffc17 	ldw	r2,-16(fp)
10003738:	00000806 	br	1000375c <write+0xe0>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000373c:	000362c0 	call	1000362c <alt_get_errno>
10003740:	00c00344 	movi	r3,13
10003744:	10c00015 	stw	r3,0(r2)
10003748:	00000306 	br	10003758 <write+0xdc>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000374c:	000362c0 	call	1000362c <alt_get_errno>
10003750:	00c01444 	movi	r3,81
10003754:	10c00015 	stw	r3,0(r2)
  }
  return -1;
10003758:	00bfffc4 	movi	r2,-1
}
1000375c:	e037883a 	mov	sp,fp
10003760:	dfc00117 	ldw	ra,4(sp)
10003764:	df000017 	ldw	fp,0(sp)
10003768:	dec00204 	addi	sp,sp,8
1000376c:	f800283a 	ret

10003770 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10003770:	defffd04 	addi	sp,sp,-12
10003774:	dfc00215 	stw	ra,8(sp)
10003778:	df000115 	stw	fp,4(sp)
1000377c:	df000104 	addi	fp,sp,4
10003780:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10003784:	e13fff17 	ldw	r4,-4(fp)
10003788:	01440034 	movhi	r5,4096
1000378c:	295bb504 	addi	r5,r5,28372
10003790:	00044080 	call	10004408 <alt_dev_llist_insert>
}
10003794:	e037883a 	mov	sp,fp
10003798:	dfc00117 	ldw	ra,4(sp)
1000379c:	df000017 	ldw	fp,0(sp)
100037a0:	dec00204 	addi	sp,sp,8
100037a4:	f800283a 	ret

100037a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100037a8:	defffd04 	addi	sp,sp,-12
100037ac:	dfc00215 	stw	ra,8(sp)
100037b0:	df000115 	stw	fp,4(sp)
100037b4:	df000104 	addi	fp,sp,4
100037b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
100037bc:	0004dd80 	call	10004dd8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100037c0:	00800044 	movi	r2,1
100037c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100037c8:	e037883a 	mov	sp,fp
100037cc:	dfc00117 	ldw	ra,4(sp)
100037d0:	df000017 	ldw	fp,0(sp)
100037d4:	dec00204 	addi	sp,sp,8
100037d8:	f800283a 	ret

100037dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100037dc:	defffe04 	addi	sp,sp,-8
100037e0:	dfc00115 	stw	ra,4(sp)
100037e4:	df000015 	stw	fp,0(sp)
100037e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100037ec:	01040034 	movhi	r4,4096
100037f0:	21179d04 	addi	r4,r4,24180
100037f4:	000b883a 	mov	r5,zero
100037f8:	01800044 	movi	r6,1
100037fc:	00039880 	call	10003988 <altera_avalon_jtag_uart_init>
10003800:	01040034 	movhi	r4,4096
10003804:	21179304 	addi	r4,r4,24140
10003808:	00037700 	call	10003770 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000380c:	0001883a 	nop
}
10003810:	e037883a 	mov	sp,fp
10003814:	dfc00117 	ldw	ra,4(sp)
10003818:	df000017 	ldw	fp,0(sp)
1000381c:	dec00204 	addi	sp,sp,8
10003820:	f800283a 	ret

10003824 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10003824:	defffa04 	addi	sp,sp,-24
10003828:	dfc00515 	stw	ra,20(sp)
1000382c:	df000415 	stw	fp,16(sp)
10003830:	df000404 	addi	fp,sp,16
10003834:	e13ffd15 	stw	r4,-12(fp)
10003838:	e17ffe15 	stw	r5,-8(fp)
1000383c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003840:	e0bffd17 	ldw	r2,-12(fp)
10003844:	10800017 	ldw	r2,0(r2)
10003848:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000384c:	e0bffc17 	ldw	r2,-16(fp)
10003850:	10c00a04 	addi	r3,r2,40
10003854:	e0bffd17 	ldw	r2,-12(fp)
10003858:	10800217 	ldw	r2,8(r2)
1000385c:	1809883a 	mov	r4,r3
10003860:	e17ffe17 	ldw	r5,-8(fp)
10003864:	e1bfff17 	ldw	r6,-4(fp)
10003868:	100f883a 	mov	r7,r2
1000386c:	0003e3c0 	call	10003e3c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10003870:	e037883a 	mov	sp,fp
10003874:	dfc00117 	ldw	ra,4(sp)
10003878:	df000017 	ldw	fp,0(sp)
1000387c:	dec00204 	addi	sp,sp,8
10003880:	f800283a 	ret

10003884 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10003884:	defffa04 	addi	sp,sp,-24
10003888:	dfc00515 	stw	ra,20(sp)
1000388c:	df000415 	stw	fp,16(sp)
10003890:	df000404 	addi	fp,sp,16
10003894:	e13ffd15 	stw	r4,-12(fp)
10003898:	e17ffe15 	stw	r5,-8(fp)
1000389c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100038a0:	e0bffd17 	ldw	r2,-12(fp)
100038a4:	10800017 	ldw	r2,0(r2)
100038a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100038ac:	e0bffc17 	ldw	r2,-16(fp)
100038b0:	10c00a04 	addi	r3,r2,40
100038b4:	e0bffd17 	ldw	r2,-12(fp)
100038b8:	10800217 	ldw	r2,8(r2)
100038bc:	1809883a 	mov	r4,r3
100038c0:	e17ffe17 	ldw	r5,-8(fp)
100038c4:	e1bfff17 	ldw	r6,-4(fp)
100038c8:	100f883a 	mov	r7,r2
100038cc:	00040440 	call	10004044 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100038d0:	e037883a 	mov	sp,fp
100038d4:	dfc00117 	ldw	ra,4(sp)
100038d8:	df000017 	ldw	fp,0(sp)
100038dc:	dec00204 	addi	sp,sp,8
100038e0:	f800283a 	ret

100038e4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100038e4:	defffc04 	addi	sp,sp,-16
100038e8:	dfc00315 	stw	ra,12(sp)
100038ec:	df000215 	stw	fp,8(sp)
100038f0:	df000204 	addi	fp,sp,8
100038f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100038f8:	e0bfff17 	ldw	r2,-4(fp)
100038fc:	10800017 	ldw	r2,0(r2)
10003900:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10003904:	e0bffe17 	ldw	r2,-8(fp)
10003908:	10c00a04 	addi	r3,r2,40
1000390c:	e0bfff17 	ldw	r2,-4(fp)
10003910:	10800217 	ldw	r2,8(r2)
10003914:	1809883a 	mov	r4,r3
10003918:	100b883a 	mov	r5,r2
1000391c:	0003ce80 	call	10003ce8 <altera_avalon_jtag_uart_close>
}
10003920:	e037883a 	mov	sp,fp
10003924:	dfc00117 	ldw	ra,4(sp)
10003928:	df000017 	ldw	fp,0(sp)
1000392c:	dec00204 	addi	sp,sp,8
10003930:	f800283a 	ret

10003934 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10003934:	defffa04 	addi	sp,sp,-24
10003938:	dfc00515 	stw	ra,20(sp)
1000393c:	df000415 	stw	fp,16(sp)
10003940:	df000404 	addi	fp,sp,16
10003944:	e13ffd15 	stw	r4,-12(fp)
10003948:	e17ffe15 	stw	r5,-8(fp)
1000394c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10003950:	e0bffd17 	ldw	r2,-12(fp)
10003954:	10800017 	ldw	r2,0(r2)
10003958:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000395c:	e0bffc17 	ldw	r2,-16(fp)
10003960:	10800a04 	addi	r2,r2,40
10003964:	1009883a 	mov	r4,r2
10003968:	e17ffe17 	ldw	r5,-8(fp)
1000396c:	e1bfff17 	ldw	r6,-4(fp)
10003970:	0003d500 	call	10003d50 <altera_avalon_jtag_uart_ioctl>
}
10003974:	e037883a 	mov	sp,fp
10003978:	dfc00117 	ldw	ra,4(sp)
1000397c:	df000017 	ldw	fp,0(sp)
10003980:	dec00204 	addi	sp,sp,8
10003984:	f800283a 	ret

10003988 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10003988:	defffa04 	addi	sp,sp,-24
1000398c:	dfc00515 	stw	ra,20(sp)
10003990:	df000415 	stw	fp,16(sp)
10003994:	df000404 	addi	fp,sp,16
10003998:	e13ffd15 	stw	r4,-12(fp)
1000399c:	e17ffe15 	stw	r5,-8(fp)
100039a0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100039a4:	e0bffd17 	ldw	r2,-12(fp)
100039a8:	00c00044 	movi	r3,1
100039ac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100039b0:	e0bffd17 	ldw	r2,-12(fp)
100039b4:	10800017 	ldw	r2,0(r2)
100039b8:	10800104 	addi	r2,r2,4
100039bc:	e0fffd17 	ldw	r3,-12(fp)
100039c0:	18c00817 	ldw	r3,32(r3)
100039c4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100039c8:	e0fffe17 	ldw	r3,-8(fp)
100039cc:	e0bfff17 	ldw	r2,-4(fp)
100039d0:	d8000015 	stw	zero,0(sp)
100039d4:	1809883a 	mov	r4,r3
100039d8:	100b883a 	mov	r5,r2
100039dc:	01840034 	movhi	r6,4096
100039e0:	318e9204 	addi	r6,r6,14920
100039e4:	e1fffd17 	ldw	r7,-12(fp)
100039e8:	000457c0 	call	1000457c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100039ec:	e0bffd17 	ldw	r2,-12(fp)
100039f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100039f4:	e0bffd17 	ldw	r2,-12(fp)
100039f8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100039fc:	00840074 	movhi	r2,4097
10003a00:	10a26404 	addi	r2,r2,-30320
10003a04:	10800017 	ldw	r2,0(r2)
10003a08:	1809883a 	mov	r4,r3
10003a0c:	100b883a 	mov	r5,r2
10003a10:	01840034 	movhi	r6,4096
10003a14:	318f1104 	addi	r6,r6,15428
10003a18:	e1fffd17 	ldw	r7,-12(fp)
10003a1c:	000425c0 	call	1000425c <alt_alarm_start>
10003a20:	1000040e 	bge	r2,zero,10003a34 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10003a24:	e0bffd17 	ldw	r2,-12(fp)
10003a28:	00e00034 	movhi	r3,32768
10003a2c:	18ffffc4 	addi	r3,r3,-1
10003a30:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10003a34:	e037883a 	mov	sp,fp
10003a38:	dfc00117 	ldw	ra,4(sp)
10003a3c:	df000017 	ldw	fp,0(sp)
10003a40:	dec00204 	addi	sp,sp,8
10003a44:	f800283a 	ret

10003a48 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10003a48:	defff804 	addi	sp,sp,-32
10003a4c:	df000715 	stw	fp,28(sp)
10003a50:	df000704 	addi	fp,sp,28
10003a54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10003a58:	e0bfff17 	ldw	r2,-4(fp)
10003a5c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10003a60:	e0bffb17 	ldw	r2,-20(fp)
10003a64:	10800017 	ldw	r2,0(r2)
10003a68:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003a6c:	e0bffc17 	ldw	r2,-16(fp)
10003a70:	10800104 	addi	r2,r2,4
10003a74:	10800037 	ldwio	r2,0(r2)
10003a78:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10003a7c:	e0bffd17 	ldw	r2,-12(fp)
10003a80:	1080c00c 	andi	r2,r2,768
10003a84:	1000011e 	bne	r2,zero,10003a8c <altera_avalon_jtag_uart_irq+0x44>
      break;
10003a88:	00006a06 	br	10003c34 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10003a8c:	e0bffd17 	ldw	r2,-12(fp)
10003a90:	1080400c 	andi	r2,r2,256
10003a94:	10003226 	beq	r2,zero,10003b60 <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10003a98:	00800074 	movhi	r2,1
10003a9c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003aa0:	e0bffb17 	ldw	r2,-20(fp)
10003aa4:	10800a17 	ldw	r2,40(r2)
10003aa8:	10800044 	addi	r2,r2,1
10003aac:	1081ffcc 	andi	r2,r2,2047
10003ab0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10003ab4:	e0bffb17 	ldw	r2,-20(fp)
10003ab8:	10c00b17 	ldw	r3,44(r2)
10003abc:	e0bffe17 	ldw	r2,-8(fp)
10003ac0:	1880011e 	bne	r3,r2,10003ac8 <altera_avalon_jtag_uart_irq+0x80>
          break;
10003ac4:	00001506 	br	10003b1c <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10003ac8:	e0bffc17 	ldw	r2,-16(fp)
10003acc:	10800037 	ldwio	r2,0(r2)
10003ad0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10003ad4:	e0bff917 	ldw	r2,-28(fp)
10003ad8:	10a0000c 	andi	r2,r2,32768
10003adc:	1000011e 	bne	r2,zero,10003ae4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10003ae0:	00000e06 	br	10003b1c <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10003ae4:	e0bffb17 	ldw	r2,-20(fp)
10003ae8:	10800a17 	ldw	r2,40(r2)
10003aec:	e0fff917 	ldw	r3,-28(fp)
10003af0:	e13ffb17 	ldw	r4,-20(fp)
10003af4:	2085883a 	add	r2,r4,r2
10003af8:	10800e04 	addi	r2,r2,56
10003afc:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003b00:	e0bffb17 	ldw	r2,-20(fp)
10003b04:	10800a17 	ldw	r2,40(r2)
10003b08:	10800044 	addi	r2,r2,1
10003b0c:	10c1ffcc 	andi	r3,r2,2047
10003b10:	e0bffb17 	ldw	r2,-20(fp)
10003b14:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10003b18:	003fe106 	br	10003aa0 <__alt_data_end+0xf8003aa0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10003b1c:	e0bff917 	ldw	r2,-28(fp)
10003b20:	10bfffec 	andhi	r2,r2,65535
10003b24:	10000e26 	beq	r2,zero,10003b60 <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003b28:	e0bffb17 	ldw	r2,-20(fp)
10003b2c:	10c00817 	ldw	r3,32(r2)
10003b30:	00bfff84 	movi	r2,-2
10003b34:	1886703a 	and	r3,r3,r2
10003b38:	e0bffb17 	ldw	r2,-20(fp)
10003b3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10003b40:	e0bffc17 	ldw	r2,-16(fp)
10003b44:	10800104 	addi	r2,r2,4
10003b48:	e0fffb17 	ldw	r3,-20(fp)
10003b4c:	18c00817 	ldw	r3,32(r3)
10003b50:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003b54:	e0bffc17 	ldw	r2,-16(fp)
10003b58:	10800104 	addi	r2,r2,4
10003b5c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10003b60:	e0bffd17 	ldw	r2,-12(fp)
10003b64:	1080800c 	andi	r2,r2,512
10003b68:	10003126 	beq	r2,zero,10003c30 <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10003b6c:	e0bffd17 	ldw	r2,-12(fp)
10003b70:	1004d43a 	srli	r2,r2,16
10003b74:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10003b78:	00001406 	br	10003bcc <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10003b7c:	e0bffc17 	ldw	r2,-16(fp)
10003b80:	e0fffb17 	ldw	r3,-20(fp)
10003b84:	18c00d17 	ldw	r3,52(r3)
10003b88:	e13ffb17 	ldw	r4,-20(fp)
10003b8c:	20c7883a 	add	r3,r4,r3
10003b90:	18c20e04 	addi	r3,r3,2104
10003b94:	18c00003 	ldbu	r3,0(r3)
10003b98:	18c03fcc 	andi	r3,r3,255
10003b9c:	18c0201c 	xori	r3,r3,128
10003ba0:	18ffe004 	addi	r3,r3,-128
10003ba4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003ba8:	e0bffb17 	ldw	r2,-20(fp)
10003bac:	10800d17 	ldw	r2,52(r2)
10003bb0:	10800044 	addi	r2,r2,1
10003bb4:	10c1ffcc 	andi	r3,r2,2047
10003bb8:	e0bffb17 	ldw	r2,-20(fp)
10003bbc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10003bc0:	e0bffa17 	ldw	r2,-24(fp)
10003bc4:	10bfffc4 	addi	r2,r2,-1
10003bc8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10003bcc:	e0bffa17 	ldw	r2,-24(fp)
10003bd0:	10000526 	beq	r2,zero,10003be8 <altera_avalon_jtag_uart_irq+0x1a0>
10003bd4:	e0bffb17 	ldw	r2,-20(fp)
10003bd8:	10c00d17 	ldw	r3,52(r2)
10003bdc:	e0bffb17 	ldw	r2,-20(fp)
10003be0:	10800c17 	ldw	r2,48(r2)
10003be4:	18bfe51e 	bne	r3,r2,10003b7c <__alt_data_end+0xf8003b7c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10003be8:	e0bffa17 	ldw	r2,-24(fp)
10003bec:	10001026 	beq	r2,zero,10003c30 <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10003bf0:	e0bffb17 	ldw	r2,-20(fp)
10003bf4:	10c00817 	ldw	r3,32(r2)
10003bf8:	00bfff44 	movi	r2,-3
10003bfc:	1886703a 	and	r3,r3,r2
10003c00:	e0bffb17 	ldw	r2,-20(fp)
10003c04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10003c08:	e0bffb17 	ldw	r2,-20(fp)
10003c0c:	10800017 	ldw	r2,0(r2)
10003c10:	10800104 	addi	r2,r2,4
10003c14:	e0fffb17 	ldw	r3,-20(fp)
10003c18:	18c00817 	ldw	r3,32(r3)
10003c1c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003c20:	e0bffc17 	ldw	r2,-16(fp)
10003c24:	10800104 	addi	r2,r2,4
10003c28:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10003c2c:	003f8f06 	br	10003a6c <__alt_data_end+0xf8003a6c>
10003c30:	003f8e06 	br	10003a6c <__alt_data_end+0xf8003a6c>
}
10003c34:	e037883a 	mov	sp,fp
10003c38:	df000017 	ldw	fp,0(sp)
10003c3c:	dec00104 	addi	sp,sp,4
10003c40:	f800283a 	ret

10003c44 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10003c44:	defff804 	addi	sp,sp,-32
10003c48:	df000715 	stw	fp,28(sp)
10003c4c:	df000704 	addi	fp,sp,28
10003c50:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10003c54:	e0bffb17 	ldw	r2,-20(fp)
10003c58:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10003c5c:	e0bff917 	ldw	r2,-28(fp)
10003c60:	10800017 	ldw	r2,0(r2)
10003c64:	10800104 	addi	r2,r2,4
10003c68:	10800037 	ldwio	r2,0(r2)
10003c6c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10003c70:	e0bffa17 	ldw	r2,-24(fp)
10003c74:	1081000c 	andi	r2,r2,1024
10003c78:	10000a26 	beq	r2,zero,10003ca4 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10003c7c:	e0bff917 	ldw	r2,-28(fp)
10003c80:	10800017 	ldw	r2,0(r2)
10003c84:	10800104 	addi	r2,r2,4
10003c88:	e0fff917 	ldw	r3,-28(fp)
10003c8c:	18c00817 	ldw	r3,32(r3)
10003c90:	18c10014 	ori	r3,r3,1024
10003c94:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
10003c98:	e0bff917 	ldw	r2,-28(fp)
10003c9c:	10000915 	stw	zero,36(r2)
10003ca0:	00000a06 	br	10003ccc <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10003ca4:	e0bff917 	ldw	r2,-28(fp)
10003ca8:	10800917 	ldw	r2,36(r2)
10003cac:	00e00034 	movhi	r3,32768
10003cb0:	18ffff04 	addi	r3,r3,-4
10003cb4:	18800536 	bltu	r3,r2,10003ccc <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
10003cb8:	e0bff917 	ldw	r2,-28(fp)
10003cbc:	10800917 	ldw	r2,36(r2)
10003cc0:	10c00044 	addi	r3,r2,1
10003cc4:	e0bff917 	ldw	r2,-28(fp)
10003cc8:	10c00915 	stw	r3,36(r2)
10003ccc:	00840074 	movhi	r2,4097
10003cd0:	10a26404 	addi	r2,r2,-30320
10003cd4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10003cd8:	e037883a 	mov	sp,fp
10003cdc:	df000017 	ldw	fp,0(sp)
10003ce0:	dec00104 	addi	sp,sp,4
10003ce4:	f800283a 	ret

10003ce8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10003ce8:	defffd04 	addi	sp,sp,-12
10003cec:	df000215 	stw	fp,8(sp)
10003cf0:	df000204 	addi	fp,sp,8
10003cf4:	e13ffe15 	stw	r4,-8(fp)
10003cf8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003cfc:	00000506 	br	10003d14 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10003d00:	e0bfff17 	ldw	r2,-4(fp)
10003d04:	1090000c 	andi	r2,r2,16384
10003d08:	10000226 	beq	r2,zero,10003d14 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10003d0c:	00bffd44 	movi	r2,-11
10003d10:	00000b06 	br	10003d40 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003d14:	e0bffe17 	ldw	r2,-8(fp)
10003d18:	10c00d17 	ldw	r3,52(r2)
10003d1c:	e0bffe17 	ldw	r2,-8(fp)
10003d20:	10800c17 	ldw	r2,48(r2)
10003d24:	18800526 	beq	r3,r2,10003d3c <altera_avalon_jtag_uart_close+0x54>
10003d28:	e0bffe17 	ldw	r2,-8(fp)
10003d2c:	10c00917 	ldw	r3,36(r2)
10003d30:	e0bffe17 	ldw	r2,-8(fp)
10003d34:	10800117 	ldw	r2,4(r2)
10003d38:	18bff136 	bltu	r3,r2,10003d00 <__alt_data_end+0xf8003d00>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10003d3c:	0005883a 	mov	r2,zero
}
10003d40:	e037883a 	mov	sp,fp
10003d44:	df000017 	ldw	fp,0(sp)
10003d48:	dec00104 	addi	sp,sp,4
10003d4c:	f800283a 	ret

10003d50 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10003d50:	defffa04 	addi	sp,sp,-24
10003d54:	df000515 	stw	fp,20(sp)
10003d58:	df000504 	addi	fp,sp,20
10003d5c:	e13ffd15 	stw	r4,-12(fp)
10003d60:	e17ffe15 	stw	r5,-8(fp)
10003d64:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10003d68:	00bff9c4 	movi	r2,-25
10003d6c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10003d70:	e0bffe17 	ldw	r2,-8(fp)
10003d74:	10da8060 	cmpeqi	r3,r2,27137
10003d78:	1800031e 	bne	r3,zero,10003d88 <altera_avalon_jtag_uart_ioctl+0x38>
10003d7c:	109a80a0 	cmpeqi	r2,r2,27138
10003d80:	1000191e 	bne	r2,zero,10003de8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10003d84:	00002806 	br	10003e28 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10003d88:	e0bffd17 	ldw	r2,-12(fp)
10003d8c:	10c00117 	ldw	r3,4(r2)
10003d90:	00a00034 	movhi	r2,32768
10003d94:	10bfffc4 	addi	r2,r2,-1
10003d98:	18801226 	beq	r3,r2,10003de4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10003d9c:	e0bfff17 	ldw	r2,-4(fp)
10003da0:	10800017 	ldw	r2,0(r2)
10003da4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10003da8:	e0bffc17 	ldw	r2,-16(fp)
10003dac:	10800090 	cmplti	r2,r2,2
10003db0:	1000061e 	bne	r2,zero,10003dcc <altera_avalon_jtag_uart_ioctl+0x7c>
10003db4:	e0fffc17 	ldw	r3,-16(fp)
10003db8:	00a00034 	movhi	r2,32768
10003dbc:	10bfffc4 	addi	r2,r2,-1
10003dc0:	18800226 	beq	r3,r2,10003dcc <altera_avalon_jtag_uart_ioctl+0x7c>
10003dc4:	e0bffc17 	ldw	r2,-16(fp)
10003dc8:	00000206 	br	10003dd4 <altera_avalon_jtag_uart_ioctl+0x84>
10003dcc:	00a00034 	movhi	r2,32768
10003dd0:	10bfff84 	addi	r2,r2,-2
10003dd4:	e0fffd17 	ldw	r3,-12(fp)
10003dd8:	18800115 	stw	r2,4(r3)
      rc = 0;
10003ddc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10003de0:	00001106 	br	10003e28 <altera_avalon_jtag_uart_ioctl+0xd8>
10003de4:	00001006 	br	10003e28 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10003de8:	e0bffd17 	ldw	r2,-12(fp)
10003dec:	10c00117 	ldw	r3,4(r2)
10003df0:	00a00034 	movhi	r2,32768
10003df4:	10bfffc4 	addi	r2,r2,-1
10003df8:	18800a26 	beq	r3,r2,10003e24 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10003dfc:	e0bffd17 	ldw	r2,-12(fp)
10003e00:	10c00917 	ldw	r3,36(r2)
10003e04:	e0bffd17 	ldw	r2,-12(fp)
10003e08:	10800117 	ldw	r2,4(r2)
10003e0c:	1885803a 	cmpltu	r2,r3,r2
10003e10:	10c03fcc 	andi	r3,r2,255
10003e14:	e0bfff17 	ldw	r2,-4(fp)
10003e18:	10c00015 	stw	r3,0(r2)
      rc = 0;
10003e1c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10003e20:	00000006 	br	10003e24 <altera_avalon_jtag_uart_ioctl+0xd4>
10003e24:	0001883a 	nop

  default:
    break;
  }

  return rc;
10003e28:	e0bffb17 	ldw	r2,-20(fp)
}
10003e2c:	e037883a 	mov	sp,fp
10003e30:	df000017 	ldw	fp,0(sp)
10003e34:	dec00104 	addi	sp,sp,4
10003e38:	f800283a 	ret

10003e3c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10003e3c:	defff304 	addi	sp,sp,-52
10003e40:	dfc00c15 	stw	ra,48(sp)
10003e44:	df000b15 	stw	fp,44(sp)
10003e48:	df000b04 	addi	fp,sp,44
10003e4c:	e13ffc15 	stw	r4,-16(fp)
10003e50:	e17ffd15 	stw	r5,-12(fp)
10003e54:	e1bffe15 	stw	r6,-8(fp)
10003e58:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10003e5c:	e0bffd17 	ldw	r2,-12(fp)
10003e60:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10003e64:	00004906 	br	10003f8c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10003e68:	e0bffc17 	ldw	r2,-16(fp)
10003e6c:	10800a17 	ldw	r2,40(r2)
10003e70:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10003e74:	e0bffc17 	ldw	r2,-16(fp)
10003e78:	10800b17 	ldw	r2,44(r2)
10003e7c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10003e80:	e0fff717 	ldw	r3,-36(fp)
10003e84:	e0bff817 	ldw	r2,-32(fp)
10003e88:	18800536 	bltu	r3,r2,10003ea0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10003e8c:	e0fff717 	ldw	r3,-36(fp)
10003e90:	e0bff817 	ldw	r2,-32(fp)
10003e94:	1885c83a 	sub	r2,r3,r2
10003e98:	e0bff615 	stw	r2,-40(fp)
10003e9c:	00000406 	br	10003eb0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10003ea0:	00c20004 	movi	r3,2048
10003ea4:	e0bff817 	ldw	r2,-32(fp)
10003ea8:	1885c83a 	sub	r2,r3,r2
10003eac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10003eb0:	e0bff617 	ldw	r2,-40(fp)
10003eb4:	1000011e 	bne	r2,zero,10003ebc <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10003eb8:	00001d06 	br	10003f30 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10003ebc:	e0fffe17 	ldw	r3,-8(fp)
10003ec0:	e0bff617 	ldw	r2,-40(fp)
10003ec4:	1880022e 	bgeu	r3,r2,10003ed0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
10003ec8:	e0bffe17 	ldw	r2,-8(fp)
10003ecc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10003ed0:	e0bff817 	ldw	r2,-32(fp)
10003ed4:	10800e04 	addi	r2,r2,56
10003ed8:	e0fffc17 	ldw	r3,-16(fp)
10003edc:	1885883a 	add	r2,r3,r2
10003ee0:	e13ff517 	ldw	r4,-44(fp)
10003ee4:	100b883a 	mov	r5,r2
10003ee8:	e1bff617 	ldw	r6,-40(fp)
10003eec:	00010f80 	call	100010f8 <memcpy>
      ptr   += n;
10003ef0:	e0fff517 	ldw	r3,-44(fp)
10003ef4:	e0bff617 	ldw	r2,-40(fp)
10003ef8:	1885883a 	add	r2,r3,r2
10003efc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10003f00:	e0fffe17 	ldw	r3,-8(fp)
10003f04:	e0bff617 	ldw	r2,-40(fp)
10003f08:	1885c83a 	sub	r2,r3,r2
10003f0c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003f10:	e0fff817 	ldw	r3,-32(fp)
10003f14:	e0bff617 	ldw	r2,-40(fp)
10003f18:	1885883a 	add	r2,r3,r2
10003f1c:	10c1ffcc 	andi	r3,r2,2047
10003f20:	e0bffc17 	ldw	r2,-16(fp)
10003f24:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10003f28:	e0bffe17 	ldw	r2,-8(fp)
10003f2c:	00bfce16 	blt	zero,r2,10003e68 <__alt_data_end+0xf8003e68>

    /* If we read any data then return it */
    if (ptr != buffer)
10003f30:	e0fff517 	ldw	r3,-44(fp)
10003f34:	e0bffd17 	ldw	r2,-12(fp)
10003f38:	18800126 	beq	r3,r2,10003f40 <altera_avalon_jtag_uart_read+0x104>
      break;
10003f3c:	00001506 	br	10003f94 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10003f40:	e0bfff17 	ldw	r2,-4(fp)
10003f44:	1090000c 	andi	r2,r2,16384
10003f48:	10000126 	beq	r2,zero,10003f50 <altera_avalon_jtag_uart_read+0x114>
      break;
10003f4c:	00001106 	br	10003f94 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10003f50:	0001883a 	nop
10003f54:	e0bffc17 	ldw	r2,-16(fp)
10003f58:	10c00a17 	ldw	r3,40(r2)
10003f5c:	e0bff717 	ldw	r2,-36(fp)
10003f60:	1880051e 	bne	r3,r2,10003f78 <altera_avalon_jtag_uart_read+0x13c>
10003f64:	e0bffc17 	ldw	r2,-16(fp)
10003f68:	10c00917 	ldw	r3,36(r2)
10003f6c:	e0bffc17 	ldw	r2,-16(fp)
10003f70:	10800117 	ldw	r2,4(r2)
10003f74:	18bff736 	bltu	r3,r2,10003f54 <__alt_data_end+0xf8003f54>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10003f78:	e0bffc17 	ldw	r2,-16(fp)
10003f7c:	10c00a17 	ldw	r3,40(r2)
10003f80:	e0bff717 	ldw	r2,-36(fp)
10003f84:	1880011e 	bne	r3,r2,10003f8c <altera_avalon_jtag_uart_read+0x150>
      break;
10003f88:	00000206 	br	10003f94 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10003f8c:	e0bffe17 	ldw	r2,-8(fp)
10003f90:	00bfb516 	blt	zero,r2,10003e68 <__alt_data_end+0xf8003e68>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10003f94:	e0fff517 	ldw	r3,-44(fp)
10003f98:	e0bffd17 	ldw	r2,-12(fp)
10003f9c:	18801726 	beq	r3,r2,10003ffc <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003fa0:	0005303a 	rdctl	r2,status
10003fa4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003fa8:	e0fffa17 	ldw	r3,-24(fp)
10003fac:	00bfff84 	movi	r2,-2
10003fb0:	1884703a 	and	r2,r3,r2
10003fb4:	1001703a 	wrctl	status,r2
  
  return context;
10003fb8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10003fbc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003fc0:	e0bffc17 	ldw	r2,-16(fp)
10003fc4:	10800817 	ldw	r2,32(r2)
10003fc8:	10c00054 	ori	r3,r2,1
10003fcc:	e0bffc17 	ldw	r2,-16(fp)
10003fd0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10003fd4:	e0bffc17 	ldw	r2,-16(fp)
10003fd8:	10800017 	ldw	r2,0(r2)
10003fdc:	10800104 	addi	r2,r2,4
10003fe0:	e0fffc17 	ldw	r3,-16(fp)
10003fe4:	18c00817 	ldw	r3,32(r3)
10003fe8:	10c00035 	stwio	r3,0(r2)
10003fec:	e0bff917 	ldw	r2,-28(fp)
10003ff0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10003ff4:	e0bffb17 	ldw	r2,-20(fp)
10003ff8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10003ffc:	e0fff517 	ldw	r3,-44(fp)
10004000:	e0bffd17 	ldw	r2,-12(fp)
10004004:	18800426 	beq	r3,r2,10004018 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
10004008:	e0fff517 	ldw	r3,-44(fp)
1000400c:	e0bffd17 	ldw	r2,-12(fp)
10004010:	1885c83a 	sub	r2,r3,r2
10004014:	00000606 	br	10004030 <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
10004018:	e0bfff17 	ldw	r2,-4(fp)
1000401c:	1090000c 	andi	r2,r2,16384
10004020:	10000226 	beq	r2,zero,1000402c <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
10004024:	00bffd44 	movi	r2,-11
10004028:	00000106 	br	10004030 <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
1000402c:	00bffec4 	movi	r2,-5
}
10004030:	e037883a 	mov	sp,fp
10004034:	dfc00117 	ldw	ra,4(sp)
10004038:	df000017 	ldw	fp,0(sp)
1000403c:	dec00204 	addi	sp,sp,8
10004040:	f800283a 	ret

10004044 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10004044:	defff304 	addi	sp,sp,-52
10004048:	dfc00c15 	stw	ra,48(sp)
1000404c:	df000b15 	stw	fp,44(sp)
10004050:	df000b04 	addi	fp,sp,44
10004054:	e13ffc15 	stw	r4,-16(fp)
10004058:	e17ffd15 	stw	r5,-12(fp)
1000405c:	e1bffe15 	stw	r6,-8(fp)
10004060:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10004064:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10004068:	e0bffd17 	ldw	r2,-12(fp)
1000406c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10004070:	00003906 	br	10004158 <altera_avalon_jtag_uart_write+0x114>
10004074:	00003806 	br	10004158 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10004078:	e0bffc17 	ldw	r2,-16(fp)
1000407c:	10800c17 	ldw	r2,48(r2)
10004080:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10004084:	e0bffc17 	ldw	r2,-16(fp)
10004088:	10800d17 	ldw	r2,52(r2)
1000408c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10004090:	e0fff817 	ldw	r3,-32(fp)
10004094:	e0bff517 	ldw	r2,-44(fp)
10004098:	1880062e 	bgeu	r3,r2,100040b4 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
1000409c:	e0fff517 	ldw	r3,-44(fp)
100040a0:	e0bff817 	ldw	r2,-32(fp)
100040a4:	1885c83a 	sub	r2,r3,r2
100040a8:	10bfffc4 	addi	r2,r2,-1
100040ac:	e0bff615 	stw	r2,-40(fp)
100040b0:	00000b06 	br	100040e0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
100040b4:	e0bff517 	ldw	r2,-44(fp)
100040b8:	10000526 	beq	r2,zero,100040d0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100040bc:	00c20004 	movi	r3,2048
100040c0:	e0bff817 	ldw	r2,-32(fp)
100040c4:	1885c83a 	sub	r2,r3,r2
100040c8:	e0bff615 	stw	r2,-40(fp)
100040cc:	00000406 	br	100040e0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100040d0:	00c1ffc4 	movi	r3,2047
100040d4:	e0bff817 	ldw	r2,-32(fp)
100040d8:	1885c83a 	sub	r2,r3,r2
100040dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100040e0:	e0bff617 	ldw	r2,-40(fp)
100040e4:	1000011e 	bne	r2,zero,100040ec <altera_avalon_jtag_uart_write+0xa8>
        break;
100040e8:	00001d06 	br	10004160 <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
100040ec:	e0fffe17 	ldw	r3,-8(fp)
100040f0:	e0bff617 	ldw	r2,-40(fp)
100040f4:	1880022e 	bgeu	r3,r2,10004100 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
100040f8:	e0bffe17 	ldw	r2,-8(fp)
100040fc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10004100:	e0bff817 	ldw	r2,-32(fp)
10004104:	10820e04 	addi	r2,r2,2104
10004108:	e0fffc17 	ldw	r3,-16(fp)
1000410c:	1885883a 	add	r2,r3,r2
10004110:	1009883a 	mov	r4,r2
10004114:	e17ffd17 	ldw	r5,-12(fp)
10004118:	e1bff617 	ldw	r6,-40(fp)
1000411c:	00010f80 	call	100010f8 <memcpy>
      ptr   += n;
10004120:	e0fffd17 	ldw	r3,-12(fp)
10004124:	e0bff617 	ldw	r2,-40(fp)
10004128:	1885883a 	add	r2,r3,r2
1000412c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10004130:	e0fffe17 	ldw	r3,-8(fp)
10004134:	e0bff617 	ldw	r2,-40(fp)
10004138:	1885c83a 	sub	r2,r3,r2
1000413c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004140:	e0fff817 	ldw	r3,-32(fp)
10004144:	e0bff617 	ldw	r2,-40(fp)
10004148:	1885883a 	add	r2,r3,r2
1000414c:	10c1ffcc 	andi	r3,r2,2047
10004150:	e0bffc17 	ldw	r2,-16(fp)
10004154:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10004158:	e0bffe17 	ldw	r2,-8(fp)
1000415c:	00bfc616 	blt	zero,r2,10004078 <__alt_data_end+0xf8004078>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004160:	0005303a 	rdctl	r2,status
10004164:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004168:	e0fffa17 	ldw	r3,-24(fp)
1000416c:	00bfff84 	movi	r2,-2
10004170:	1884703a 	and	r2,r3,r2
10004174:	1001703a 	wrctl	status,r2
  
  return context;
10004178:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000417c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10004180:	e0bffc17 	ldw	r2,-16(fp)
10004184:	10800817 	ldw	r2,32(r2)
10004188:	10c00094 	ori	r3,r2,2
1000418c:	e0bffc17 	ldw	r2,-16(fp)
10004190:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10004194:	e0bffc17 	ldw	r2,-16(fp)
10004198:	10800017 	ldw	r2,0(r2)
1000419c:	10800104 	addi	r2,r2,4
100041a0:	e0fffc17 	ldw	r3,-16(fp)
100041a4:	18c00817 	ldw	r3,32(r3)
100041a8:	10c00035 	stwio	r3,0(r2)
100041ac:	e0bff917 	ldw	r2,-28(fp)
100041b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100041b4:	e0bffb17 	ldw	r2,-20(fp)
100041b8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100041bc:	e0bffe17 	ldw	r2,-8(fp)
100041c0:	0080120e 	bge	zero,r2,1000420c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
100041c4:	e0bfff17 	ldw	r2,-4(fp)
100041c8:	1090000c 	andi	r2,r2,16384
100041cc:	10000126 	beq	r2,zero,100041d4 <altera_avalon_jtag_uart_write+0x190>
        break;
100041d0:	00001006 	br	10004214 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100041d4:	0001883a 	nop
100041d8:	e0bffc17 	ldw	r2,-16(fp)
100041dc:	10c00d17 	ldw	r3,52(r2)
100041e0:	e0bff517 	ldw	r2,-44(fp)
100041e4:	1880051e 	bne	r3,r2,100041fc <altera_avalon_jtag_uart_write+0x1b8>
100041e8:	e0bffc17 	ldw	r2,-16(fp)
100041ec:	10c00917 	ldw	r3,36(r2)
100041f0:	e0bffc17 	ldw	r2,-16(fp)
100041f4:	10800117 	ldw	r2,4(r2)
100041f8:	18bff736 	bltu	r3,r2,100041d8 <__alt_data_end+0xf80041d8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100041fc:	e0bffc17 	ldw	r2,-16(fp)
10004200:	10800917 	ldw	r2,36(r2)
10004204:	10000126 	beq	r2,zero,1000420c <altera_avalon_jtag_uart_write+0x1c8>
         break;
10004208:	00000206 	br	10004214 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000420c:	e0bffe17 	ldw	r2,-8(fp)
10004210:	00bf9816 	blt	zero,r2,10004074 <__alt_data_end+0xf8004074>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10004214:	e0fffd17 	ldw	r3,-12(fp)
10004218:	e0bff717 	ldw	r2,-36(fp)
1000421c:	18800426 	beq	r3,r2,10004230 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10004220:	e0fffd17 	ldw	r3,-12(fp)
10004224:	e0bff717 	ldw	r2,-36(fp)
10004228:	1885c83a 	sub	r2,r3,r2
1000422c:	00000606 	br	10004248 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10004230:	e0bfff17 	ldw	r2,-4(fp)
10004234:	1090000c 	andi	r2,r2,16384
10004238:	10000226 	beq	r2,zero,10004244 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000423c:	00bffd44 	movi	r2,-11
10004240:	00000106 	br	10004248 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10004244:	00bffec4 	movi	r2,-5
}
10004248:	e037883a 	mov	sp,fp
1000424c:	dfc00117 	ldw	ra,4(sp)
10004250:	df000017 	ldw	fp,0(sp)
10004254:	dec00204 	addi	sp,sp,8
10004258:	f800283a 	ret

1000425c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000425c:	defff504 	addi	sp,sp,-44
10004260:	df000a15 	stw	fp,40(sp)
10004264:	df000a04 	addi	fp,sp,40
10004268:	e13ffc15 	stw	r4,-16(fp)
1000426c:	e17ffd15 	stw	r5,-12(fp)
10004270:	e1bffe15 	stw	r6,-8(fp)
10004274:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10004278:	e03ff615 	stw	zero,-40(fp)
1000427c:	00840074 	movhi	r2,4097
10004280:	10a26404 	addi	r2,r2,-30320
10004284:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10004288:	10003f26 	beq	r2,zero,10004388 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000428c:	e0bffc17 	ldw	r2,-16(fp)
10004290:	10003b26 	beq	r2,zero,10004380 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10004294:	e0bffc17 	ldw	r2,-16(fp)
10004298:	e0fffe17 	ldw	r3,-8(fp)
1000429c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100042a0:	e0bffc17 	ldw	r2,-16(fp)
100042a4:	e0ffff17 	ldw	r3,-4(fp)
100042a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100042ac:	0005303a 	rdctl	r2,status
100042b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100042b4:	e0fff817 	ldw	r3,-32(fp)
100042b8:	00bfff84 	movi	r2,-2
100042bc:	1884703a 	and	r2,r3,r2
100042c0:	1001703a 	wrctl	status,r2
  
  return context;
100042c4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
100042c8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100042cc:	00840074 	movhi	r2,4097
100042d0:	10a26504 	addi	r2,r2,-30316
100042d4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
100042d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100042dc:	e0fffd17 	ldw	r3,-12(fp)
100042e0:	e0bff617 	ldw	r2,-40(fp)
100042e4:	1885883a 	add	r2,r3,r2
100042e8:	10c00044 	addi	r3,r2,1
100042ec:	e0bffc17 	ldw	r2,-16(fp)
100042f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100042f4:	e0bffc17 	ldw	r2,-16(fp)
100042f8:	10c00217 	ldw	r3,8(r2)
100042fc:	e0bff617 	ldw	r2,-40(fp)
10004300:	1880042e 	bgeu	r3,r2,10004314 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10004304:	e0bffc17 	ldw	r2,-16(fp)
10004308:	00c00044 	movi	r3,1
1000430c:	10c00405 	stb	r3,16(r2)
10004310:	00000206 	br	1000431c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10004314:	e0bffc17 	ldw	r2,-16(fp)
10004318:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000431c:	e0bffc17 	ldw	r2,-16(fp)
10004320:	00c40034 	movhi	r3,4096
10004324:	18dbbb04 	addi	r3,r3,28396
10004328:	e0fff915 	stw	r3,-28(fp)
1000432c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10004330:	e0bffa17 	ldw	r2,-24(fp)
10004334:	e0fff917 	ldw	r3,-28(fp)
10004338:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000433c:	e0bff917 	ldw	r2,-28(fp)
10004340:	10c00017 	ldw	r3,0(r2)
10004344:	e0bffa17 	ldw	r2,-24(fp)
10004348:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000434c:	e0bff917 	ldw	r2,-28(fp)
10004350:	10800017 	ldw	r2,0(r2)
10004354:	e0fffa17 	ldw	r3,-24(fp)
10004358:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000435c:	e0bff917 	ldw	r2,-28(fp)
10004360:	e0fffa17 	ldw	r3,-24(fp)
10004364:	10c00015 	stw	r3,0(r2)
10004368:	e0bff717 	ldw	r2,-36(fp)
1000436c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004370:	e0bffb17 	ldw	r2,-20(fp)
10004374:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10004378:	0005883a 	mov	r2,zero
1000437c:	00000306 	br	1000438c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10004380:	00bffa84 	movi	r2,-22
10004384:	00000106 	br	1000438c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10004388:	00bfde84 	movi	r2,-134
  }
}
1000438c:	e037883a 	mov	sp,fp
10004390:	df000017 	ldw	fp,0(sp)
10004394:	dec00104 	addi	sp,sp,4
10004398:	f800283a 	ret

1000439c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000439c:	deffff04 	addi	sp,sp,-4
100043a0:	df000015 	stw	fp,0(sp)
100043a4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100043a8:	e037883a 	mov	sp,fp
100043ac:	df000017 	ldw	fp,0(sp)
100043b0:	dec00104 	addi	sp,sp,4
100043b4:	f800283a 	ret

100043b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100043b8:	defffe04 	addi	sp,sp,-8
100043bc:	dfc00115 	stw	ra,4(sp)
100043c0:	df000015 	stw	fp,0(sp)
100043c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100043c8:	00840034 	movhi	r2,4096
100043cc:	109bb804 	addi	r2,r2,28384
100043d0:	10800017 	ldw	r2,0(r2)
100043d4:	10000526 	beq	r2,zero,100043ec <alt_get_errno+0x34>
100043d8:	00840034 	movhi	r2,4096
100043dc:	109bb804 	addi	r2,r2,28384
100043e0:	10800017 	ldw	r2,0(r2)
100043e4:	103ee83a 	callr	r2
100043e8:	00000206 	br	100043f4 <alt_get_errno+0x3c>
100043ec:	00840074 	movhi	r2,4097
100043f0:	10a25f04 	addi	r2,r2,-30340
}
100043f4:	e037883a 	mov	sp,fp
100043f8:	dfc00117 	ldw	ra,4(sp)
100043fc:	df000017 	ldw	fp,0(sp)
10004400:	dec00204 	addi	sp,sp,8
10004404:	f800283a 	ret

10004408 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10004408:	defffa04 	addi	sp,sp,-24
1000440c:	dfc00515 	stw	ra,20(sp)
10004410:	df000415 	stw	fp,16(sp)
10004414:	df000404 	addi	fp,sp,16
10004418:	e13ffe15 	stw	r4,-8(fp)
1000441c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10004420:	e0bffe17 	ldw	r2,-8(fp)
10004424:	10000326 	beq	r2,zero,10004434 <alt_dev_llist_insert+0x2c>
10004428:	e0bffe17 	ldw	r2,-8(fp)
1000442c:	10800217 	ldw	r2,8(r2)
10004430:	1000051e 	bne	r2,zero,10004448 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
10004434:	00043b80 	call	100043b8 <alt_get_errno>
10004438:	00c00584 	movi	r3,22
1000443c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
10004440:	00bffa84 	movi	r2,-22
10004444:	00001306 	br	10004494 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10004448:	e0bffe17 	ldw	r2,-8(fp)
1000444c:	e0ffff17 	ldw	r3,-4(fp)
10004450:	e0fffc15 	stw	r3,-16(fp)
10004454:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10004458:	e0bffd17 	ldw	r2,-12(fp)
1000445c:	e0fffc17 	ldw	r3,-16(fp)
10004460:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10004464:	e0bffc17 	ldw	r2,-16(fp)
10004468:	10c00017 	ldw	r3,0(r2)
1000446c:	e0bffd17 	ldw	r2,-12(fp)
10004470:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10004474:	e0bffc17 	ldw	r2,-16(fp)
10004478:	10800017 	ldw	r2,0(r2)
1000447c:	e0fffd17 	ldw	r3,-12(fp)
10004480:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10004484:	e0bffc17 	ldw	r2,-16(fp)
10004488:	e0fffd17 	ldw	r3,-12(fp)
1000448c:	10c00015 	stw	r3,0(r2)

  return 0;  
10004490:	0005883a 	mov	r2,zero
}
10004494:	e037883a 	mov	sp,fp
10004498:	dfc00117 	ldw	ra,4(sp)
1000449c:	df000017 	ldw	fp,0(sp)
100044a0:	dec00204 	addi	sp,sp,8
100044a4:	f800283a 	ret

100044a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100044a8:	defffd04 	addi	sp,sp,-12
100044ac:	dfc00215 	stw	ra,8(sp)
100044b0:	df000115 	stw	fp,4(sp)
100044b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100044b8:	00840034 	movhi	r2,4096
100044bc:	10950a04 	addi	r2,r2,21544
100044c0:	e0bfff15 	stw	r2,-4(fp)
100044c4:	00000606 	br	100044e0 <_do_ctors+0x38>
        (*ctor) (); 
100044c8:	e0bfff17 	ldw	r2,-4(fp)
100044cc:	10800017 	ldw	r2,0(r2)
100044d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100044d4:	e0bfff17 	ldw	r2,-4(fp)
100044d8:	10bfff04 	addi	r2,r2,-4
100044dc:	e0bfff15 	stw	r2,-4(fp)
100044e0:	e0ffff17 	ldw	r3,-4(fp)
100044e4:	00840034 	movhi	r2,4096
100044e8:	10950b04 	addi	r2,r2,21548
100044ec:	18bff62e 	bgeu	r3,r2,100044c8 <__alt_data_end+0xf80044c8>
        (*ctor) (); 
}
100044f0:	e037883a 	mov	sp,fp
100044f4:	dfc00117 	ldw	ra,4(sp)
100044f8:	df000017 	ldw	fp,0(sp)
100044fc:	dec00204 	addi	sp,sp,8
10004500:	f800283a 	ret

10004504 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10004504:	defffd04 	addi	sp,sp,-12
10004508:	dfc00215 	stw	ra,8(sp)
1000450c:	df000115 	stw	fp,4(sp)
10004510:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10004514:	00840034 	movhi	r2,4096
10004518:	10950a04 	addi	r2,r2,21544
1000451c:	e0bfff15 	stw	r2,-4(fp)
10004520:	00000606 	br	1000453c <_do_dtors+0x38>
        (*dtor) (); 
10004524:	e0bfff17 	ldw	r2,-4(fp)
10004528:	10800017 	ldw	r2,0(r2)
1000452c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10004530:	e0bfff17 	ldw	r2,-4(fp)
10004534:	10bfff04 	addi	r2,r2,-4
10004538:	e0bfff15 	stw	r2,-4(fp)
1000453c:	e0ffff17 	ldw	r3,-4(fp)
10004540:	00840034 	movhi	r2,4096
10004544:	10950b04 	addi	r2,r2,21548
10004548:	18bff62e 	bgeu	r3,r2,10004524 <__alt_data_end+0xf8004524>
        (*dtor) (); 
}
1000454c:	e037883a 	mov	sp,fp
10004550:	dfc00117 	ldw	ra,4(sp)
10004554:	df000017 	ldw	fp,0(sp)
10004558:	dec00204 	addi	sp,sp,8
1000455c:	f800283a 	ret

10004560 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10004560:	deffff04 	addi	sp,sp,-4
10004564:	df000015 	stw	fp,0(sp)
10004568:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000456c:	e037883a 	mov	sp,fp
10004570:	df000017 	ldw	fp,0(sp)
10004574:	dec00104 	addi	sp,sp,4
10004578:	f800283a 	ret

1000457c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000457c:	defff904 	addi	sp,sp,-28
10004580:	dfc00615 	stw	ra,24(sp)
10004584:	df000515 	stw	fp,20(sp)
10004588:	df000504 	addi	fp,sp,20
1000458c:	e13ffc15 	stw	r4,-16(fp)
10004590:	e17ffd15 	stw	r5,-12(fp)
10004594:	e1bffe15 	stw	r6,-8(fp)
10004598:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000459c:	e0800217 	ldw	r2,8(fp)
100045a0:	d8800015 	stw	r2,0(sp)
100045a4:	e13ffc17 	ldw	r4,-16(fp)
100045a8:	e17ffd17 	ldw	r5,-12(fp)
100045ac:	e1bffe17 	ldw	r6,-8(fp)
100045b0:	e1ffff17 	ldw	r7,-4(fp)
100045b4:	00047540 	call	10004754 <alt_iic_isr_register>
}  
100045b8:	e037883a 	mov	sp,fp
100045bc:	dfc00117 	ldw	ra,4(sp)
100045c0:	df000017 	ldw	fp,0(sp)
100045c4:	dec00204 	addi	sp,sp,8
100045c8:	f800283a 	ret

100045cc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100045cc:	defff904 	addi	sp,sp,-28
100045d0:	df000615 	stw	fp,24(sp)
100045d4:	df000604 	addi	fp,sp,24
100045d8:	e13ffe15 	stw	r4,-8(fp)
100045dc:	e17fff15 	stw	r5,-4(fp)
100045e0:	e0bfff17 	ldw	r2,-4(fp)
100045e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100045e8:	0005303a 	rdctl	r2,status
100045ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100045f0:	e0fffb17 	ldw	r3,-20(fp)
100045f4:	00bfff84 	movi	r2,-2
100045f8:	1884703a 	and	r2,r3,r2
100045fc:	1001703a 	wrctl	status,r2
  
  return context;
10004600:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10004604:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10004608:	e0bffa17 	ldw	r2,-24(fp)
1000460c:	00c00044 	movi	r3,1
10004610:	1884983a 	sll	r2,r3,r2
10004614:	1007883a 	mov	r3,r2
10004618:	00840074 	movhi	r2,4097
1000461c:	10a26304 	addi	r2,r2,-30324
10004620:	10800017 	ldw	r2,0(r2)
10004624:	1886b03a 	or	r3,r3,r2
10004628:	00840074 	movhi	r2,4097
1000462c:	10a26304 	addi	r2,r2,-30324
10004630:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10004634:	00840074 	movhi	r2,4097
10004638:	10a26304 	addi	r2,r2,-30324
1000463c:	10800017 	ldw	r2,0(r2)
10004640:	100170fa 	wrctl	ienable,r2
10004644:	e0bffc17 	ldw	r2,-16(fp)
10004648:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000464c:	e0bffd17 	ldw	r2,-12(fp)
10004650:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10004654:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
10004658:	e037883a 	mov	sp,fp
1000465c:	df000017 	ldw	fp,0(sp)
10004660:	dec00104 	addi	sp,sp,4
10004664:	f800283a 	ret

10004668 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10004668:	defff904 	addi	sp,sp,-28
1000466c:	df000615 	stw	fp,24(sp)
10004670:	df000604 	addi	fp,sp,24
10004674:	e13ffe15 	stw	r4,-8(fp)
10004678:	e17fff15 	stw	r5,-4(fp)
1000467c:	e0bfff17 	ldw	r2,-4(fp)
10004680:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004684:	0005303a 	rdctl	r2,status
10004688:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000468c:	e0fffb17 	ldw	r3,-20(fp)
10004690:	00bfff84 	movi	r2,-2
10004694:	1884703a 	and	r2,r3,r2
10004698:	1001703a 	wrctl	status,r2
  
  return context;
1000469c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100046a0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100046a4:	e0bffa17 	ldw	r2,-24(fp)
100046a8:	00c00044 	movi	r3,1
100046ac:	1884983a 	sll	r2,r3,r2
100046b0:	0084303a 	nor	r2,zero,r2
100046b4:	1007883a 	mov	r3,r2
100046b8:	00840074 	movhi	r2,4097
100046bc:	10a26304 	addi	r2,r2,-30324
100046c0:	10800017 	ldw	r2,0(r2)
100046c4:	1886703a 	and	r3,r3,r2
100046c8:	00840074 	movhi	r2,4097
100046cc:	10a26304 	addi	r2,r2,-30324
100046d0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100046d4:	00840074 	movhi	r2,4097
100046d8:	10a26304 	addi	r2,r2,-30324
100046dc:	10800017 	ldw	r2,0(r2)
100046e0:	100170fa 	wrctl	ienable,r2
100046e4:	e0bffc17 	ldw	r2,-16(fp)
100046e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100046ec:	e0bffd17 	ldw	r2,-12(fp)
100046f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100046f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
100046f8:	e037883a 	mov	sp,fp
100046fc:	df000017 	ldw	fp,0(sp)
10004700:	dec00104 	addi	sp,sp,4
10004704:	f800283a 	ret

10004708 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10004708:	defffc04 	addi	sp,sp,-16
1000470c:	df000315 	stw	fp,12(sp)
10004710:	df000304 	addi	fp,sp,12
10004714:	e13ffe15 	stw	r4,-8(fp)
10004718:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000471c:	000530fa 	rdctl	r2,ienable
10004720:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10004724:	e0bfff17 	ldw	r2,-4(fp)
10004728:	00c00044 	movi	r3,1
1000472c:	1884983a 	sll	r2,r3,r2
10004730:	1007883a 	mov	r3,r2
10004734:	e0bffd17 	ldw	r2,-12(fp)
10004738:	1884703a 	and	r2,r3,r2
1000473c:	1004c03a 	cmpne	r2,r2,zero
10004740:	10803fcc 	andi	r2,r2,255
}
10004744:	e037883a 	mov	sp,fp
10004748:	df000017 	ldw	fp,0(sp)
1000474c:	dec00104 	addi	sp,sp,4
10004750:	f800283a 	ret

10004754 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10004754:	defff504 	addi	sp,sp,-44
10004758:	dfc00a15 	stw	ra,40(sp)
1000475c:	df000915 	stw	fp,36(sp)
10004760:	df000904 	addi	fp,sp,36
10004764:	e13ffc15 	stw	r4,-16(fp)
10004768:	e17ffd15 	stw	r5,-12(fp)
1000476c:	e1bffe15 	stw	r6,-8(fp)
10004770:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10004774:	00bffa84 	movi	r2,-22
10004778:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000477c:	e0bffd17 	ldw	r2,-12(fp)
10004780:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10004784:	e0bff817 	ldw	r2,-32(fp)
10004788:	10800808 	cmpgei	r2,r2,32
1000478c:	1000271e 	bne	r2,zero,1000482c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004790:	0005303a 	rdctl	r2,status
10004794:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004798:	e0fffa17 	ldw	r3,-24(fp)
1000479c:	00bfff84 	movi	r2,-2
100047a0:	1884703a 	and	r2,r3,r2
100047a4:	1001703a 	wrctl	status,r2
  
  return context;
100047a8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100047ac:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
100047b0:	00c40074 	movhi	r3,4097
100047b4:	18e27004 	addi	r3,r3,-30272
100047b8:	e0bff817 	ldw	r2,-32(fp)
100047bc:	100490fa 	slli	r2,r2,3
100047c0:	1885883a 	add	r2,r3,r2
100047c4:	e0fffe17 	ldw	r3,-8(fp)
100047c8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100047cc:	00c40074 	movhi	r3,4097
100047d0:	18e27004 	addi	r3,r3,-30272
100047d4:	e0bff817 	ldw	r2,-32(fp)
100047d8:	100490fa 	slli	r2,r2,3
100047dc:	1885883a 	add	r2,r3,r2
100047e0:	10800104 	addi	r2,r2,4
100047e4:	e0ffff17 	ldw	r3,-4(fp)
100047e8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100047ec:	e0bffe17 	ldw	r2,-8(fp)
100047f0:	10000526 	beq	r2,zero,10004808 <alt_iic_isr_register+0xb4>
100047f4:	e0bff817 	ldw	r2,-32(fp)
100047f8:	e13ffc17 	ldw	r4,-16(fp)
100047fc:	100b883a 	mov	r5,r2
10004800:	00045cc0 	call	100045cc <alt_ic_irq_enable>
10004804:	00000406 	br	10004818 <alt_iic_isr_register+0xc4>
10004808:	e0bff817 	ldw	r2,-32(fp)
1000480c:	e13ffc17 	ldw	r4,-16(fp)
10004810:	100b883a 	mov	r5,r2
10004814:	00046680 	call	10004668 <alt_ic_irq_disable>
10004818:	e0bff715 	stw	r2,-36(fp)
1000481c:	e0bff917 	ldw	r2,-28(fp)
10004820:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004824:	e0bffb17 	ldw	r2,-20(fp)
10004828:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000482c:	e0bff717 	ldw	r2,-36(fp)
}
10004830:	e037883a 	mov	sp,fp
10004834:	dfc00117 	ldw	ra,4(sp)
10004838:	df000017 	ldw	fp,0(sp)
1000483c:	dec00204 	addi	sp,sp,8
10004840:	f800283a 	ret

10004844 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10004844:	defff804 	addi	sp,sp,-32
10004848:	dfc00715 	stw	ra,28(sp)
1000484c:	df000615 	stw	fp,24(sp)
10004850:	dc000515 	stw	r16,20(sp)
10004854:	df000604 	addi	fp,sp,24
10004858:	e13ffb15 	stw	r4,-20(fp)
1000485c:	e17ffc15 	stw	r5,-16(fp)
10004860:	e1bffd15 	stw	r6,-12(fp)
10004864:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10004868:	e13ffc17 	ldw	r4,-16(fp)
1000486c:	e17ffd17 	ldw	r5,-12(fp)
10004870:	e1bffe17 	ldw	r6,-8(fp)
10004874:	0004ae00 	call	10004ae0 <open>
10004878:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000487c:	e0bffa17 	ldw	r2,-24(fp)
10004880:	10002216 	blt	r2,zero,1000490c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10004884:	04040034 	movhi	r16,4096
10004888:	84173304 	addi	r16,r16,23756
1000488c:	e0bffa17 	ldw	r2,-24(fp)
10004890:	1009883a 	mov	r4,r2
10004894:	01400304 	movi	r5,12
10004898:	0002d780 	call	10002d78 <__mulsi3>
1000489c:	8085883a 	add	r2,r16,r2
100048a0:	10c00017 	ldw	r3,0(r2)
100048a4:	e0bffb17 	ldw	r2,-20(fp)
100048a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100048ac:	04040034 	movhi	r16,4096
100048b0:	84173304 	addi	r16,r16,23756
100048b4:	e0bffa17 	ldw	r2,-24(fp)
100048b8:	1009883a 	mov	r4,r2
100048bc:	01400304 	movi	r5,12
100048c0:	0002d780 	call	10002d78 <__mulsi3>
100048c4:	8085883a 	add	r2,r16,r2
100048c8:	10800104 	addi	r2,r2,4
100048cc:	10c00017 	ldw	r3,0(r2)
100048d0:	e0bffb17 	ldw	r2,-20(fp)
100048d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100048d8:	04040034 	movhi	r16,4096
100048dc:	84173304 	addi	r16,r16,23756
100048e0:	e0bffa17 	ldw	r2,-24(fp)
100048e4:	1009883a 	mov	r4,r2
100048e8:	01400304 	movi	r5,12
100048ec:	0002d780 	call	10002d78 <__mulsi3>
100048f0:	8085883a 	add	r2,r16,r2
100048f4:	10800204 	addi	r2,r2,8
100048f8:	10c00017 	ldw	r3,0(r2)
100048fc:	e0bffb17 	ldw	r2,-20(fp)
10004900:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10004904:	e13ffa17 	ldw	r4,-24(fp)
10004908:	00034fc0 	call	100034fc <alt_release_fd>
  }
} 
1000490c:	e6ffff04 	addi	sp,fp,-4
10004910:	dfc00217 	ldw	ra,8(sp)
10004914:	df000117 	ldw	fp,4(sp)
10004918:	dc000017 	ldw	r16,0(sp)
1000491c:	dec00304 	addi	sp,sp,12
10004920:	f800283a 	ret

10004924 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10004924:	defffb04 	addi	sp,sp,-20
10004928:	dfc00415 	stw	ra,16(sp)
1000492c:	df000315 	stw	fp,12(sp)
10004930:	df000304 	addi	fp,sp,12
10004934:	e13ffd15 	stw	r4,-12(fp)
10004938:	e17ffe15 	stw	r5,-8(fp)
1000493c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10004940:	01040034 	movhi	r4,4096
10004944:	21173604 	addi	r4,r4,23768
10004948:	e17ffd17 	ldw	r5,-12(fp)
1000494c:	01800044 	movi	r6,1
10004950:	01c07fc4 	movi	r7,511
10004954:	00048440 	call	10004844 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10004958:	01040034 	movhi	r4,4096
1000495c:	21173304 	addi	r4,r4,23756
10004960:	e17ffe17 	ldw	r5,-8(fp)
10004964:	000d883a 	mov	r6,zero
10004968:	01c07fc4 	movi	r7,511
1000496c:	00048440 	call	10004844 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10004970:	01040034 	movhi	r4,4096
10004974:	21173904 	addi	r4,r4,23780
10004978:	e17fff17 	ldw	r5,-4(fp)
1000497c:	01800044 	movi	r6,1
10004980:	01c07fc4 	movi	r7,511
10004984:	00048440 	call	10004844 <alt_open_fd>
}  
10004988:	e037883a 	mov	sp,fp
1000498c:	dfc00117 	ldw	ra,4(sp)
10004990:	df000017 	ldw	fp,0(sp)
10004994:	dec00204 	addi	sp,sp,8
10004998:	f800283a 	ret

1000499c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000499c:	defffe04 	addi	sp,sp,-8
100049a0:	dfc00115 	stw	ra,4(sp)
100049a4:	df000015 	stw	fp,0(sp)
100049a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100049ac:	00840034 	movhi	r2,4096
100049b0:	109bb804 	addi	r2,r2,28384
100049b4:	10800017 	ldw	r2,0(r2)
100049b8:	10000526 	beq	r2,zero,100049d0 <alt_get_errno+0x34>
100049bc:	00840034 	movhi	r2,4096
100049c0:	109bb804 	addi	r2,r2,28384
100049c4:	10800017 	ldw	r2,0(r2)
100049c8:	103ee83a 	callr	r2
100049cc:	00000206 	br	100049d8 <alt_get_errno+0x3c>
100049d0:	00840074 	movhi	r2,4097
100049d4:	10a25f04 	addi	r2,r2,-30340
}
100049d8:	e037883a 	mov	sp,fp
100049dc:	dfc00117 	ldw	ra,4(sp)
100049e0:	df000017 	ldw	fp,0(sp)
100049e4:	dec00204 	addi	sp,sp,8
100049e8:	f800283a 	ret

100049ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100049ec:	defffb04 	addi	sp,sp,-20
100049f0:	dfc00415 	stw	ra,16(sp)
100049f4:	df000315 	stw	fp,12(sp)
100049f8:	dc000215 	stw	r16,8(sp)
100049fc:	df000304 	addi	fp,sp,12
10004a00:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10004a04:	e0bffe17 	ldw	r2,-8(fp)
10004a08:	10800217 	ldw	r2,8(r2)
10004a0c:	10d00034 	orhi	r3,r2,16384
10004a10:	e0bffe17 	ldw	r2,-8(fp)
10004a14:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10004a18:	e03ffd15 	stw	zero,-12(fp)
10004a1c:	00002306 	br	10004aac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10004a20:	04040034 	movhi	r16,4096
10004a24:	84173304 	addi	r16,r16,23756
10004a28:	e0bffd17 	ldw	r2,-12(fp)
10004a2c:	1009883a 	mov	r4,r2
10004a30:	01400304 	movi	r5,12
10004a34:	0002d780 	call	10002d78 <__mulsi3>
10004a38:	8085883a 	add	r2,r16,r2
10004a3c:	10c00017 	ldw	r3,0(r2)
10004a40:	e0bffe17 	ldw	r2,-8(fp)
10004a44:	10800017 	ldw	r2,0(r2)
10004a48:	1880151e 	bne	r3,r2,10004aa0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004a4c:	04040034 	movhi	r16,4096
10004a50:	84173304 	addi	r16,r16,23756
10004a54:	e0bffd17 	ldw	r2,-12(fp)
10004a58:	1009883a 	mov	r4,r2
10004a5c:	01400304 	movi	r5,12
10004a60:	0002d780 	call	10002d78 <__mulsi3>
10004a64:	8085883a 	add	r2,r16,r2
10004a68:	10800204 	addi	r2,r2,8
10004a6c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10004a70:	10000b0e 	bge	r2,zero,10004aa0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10004a74:	e13ffd17 	ldw	r4,-12(fp)
10004a78:	01400304 	movi	r5,12
10004a7c:	0002d780 	call	10002d78 <__mulsi3>
10004a80:	1007883a 	mov	r3,r2
10004a84:	00840034 	movhi	r2,4096
10004a88:	10973304 	addi	r2,r2,23756
10004a8c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004a90:	e0bffe17 	ldw	r2,-8(fp)
10004a94:	18800226 	beq	r3,r2,10004aa0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10004a98:	00bffcc4 	movi	r2,-13
10004a9c:	00000a06 	br	10004ac8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10004aa0:	e0bffd17 	ldw	r2,-12(fp)
10004aa4:	10800044 	addi	r2,r2,1
10004aa8:	e0bffd15 	stw	r2,-12(fp)
10004aac:	00840034 	movhi	r2,4096
10004ab0:	109bb704 	addi	r2,r2,28380
10004ab4:	10800017 	ldw	r2,0(r2)
10004ab8:	1007883a 	mov	r3,r2
10004abc:	e0bffd17 	ldw	r2,-12(fp)
10004ac0:	18bfd72e 	bgeu	r3,r2,10004a20 <__alt_data_end+0xf8004a20>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10004ac4:	0005883a 	mov	r2,zero
}
10004ac8:	e6ffff04 	addi	sp,fp,-4
10004acc:	dfc00217 	ldw	ra,8(sp)
10004ad0:	df000117 	ldw	fp,4(sp)
10004ad4:	dc000017 	ldw	r16,0(sp)
10004ad8:	dec00304 	addi	sp,sp,12
10004adc:	f800283a 	ret

10004ae0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10004ae0:	defff604 	addi	sp,sp,-40
10004ae4:	dfc00915 	stw	ra,36(sp)
10004ae8:	df000815 	stw	fp,32(sp)
10004aec:	df000804 	addi	fp,sp,32
10004af0:	e13ffd15 	stw	r4,-12(fp)
10004af4:	e17ffe15 	stw	r5,-8(fp)
10004af8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10004afc:	00bfffc4 	movi	r2,-1
10004b00:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10004b04:	00bffb44 	movi	r2,-19
10004b08:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10004b0c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10004b10:	e13ffd17 	ldw	r4,-12(fp)
10004b14:	01440034 	movhi	r5,4096
10004b18:	295bb504 	addi	r5,r5,28372
10004b1c:	0004df80 	call	10004df8 <alt_find_dev>
10004b20:	e0bff815 	stw	r2,-32(fp)
10004b24:	e0bff817 	ldw	r2,-32(fp)
10004b28:	1000051e 	bne	r2,zero,10004b40 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10004b2c:	e13ffd17 	ldw	r4,-12(fp)
10004b30:	0004e880 	call	10004e88 <alt_find_file>
10004b34:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10004b38:	00800044 	movi	r2,1
10004b3c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10004b40:	e0bff817 	ldw	r2,-32(fp)
10004b44:	10002b26 	beq	r2,zero,10004bf4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10004b48:	e13ff817 	ldw	r4,-32(fp)
10004b4c:	0004f9c0 	call	10004f9c <alt_get_fd>
10004b50:	e0bff915 	stw	r2,-28(fp)
10004b54:	e0bff917 	ldw	r2,-28(fp)
10004b58:	1000030e 	bge	r2,zero,10004b68 <open+0x88>
    {
      status = index;
10004b5c:	e0bff917 	ldw	r2,-28(fp)
10004b60:	e0bffa15 	stw	r2,-24(fp)
10004b64:	00002506 	br	10004bfc <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10004b68:	e13ff917 	ldw	r4,-28(fp)
10004b6c:	01400304 	movi	r5,12
10004b70:	0002d780 	call	10002d78 <__mulsi3>
10004b74:	1007883a 	mov	r3,r2
10004b78:	00840034 	movhi	r2,4096
10004b7c:	10973304 	addi	r2,r2,23756
10004b80:	1885883a 	add	r2,r3,r2
10004b84:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10004b88:	e0fffe17 	ldw	r3,-8(fp)
10004b8c:	00900034 	movhi	r2,16384
10004b90:	10bfffc4 	addi	r2,r2,-1
10004b94:	1886703a 	and	r3,r3,r2
10004b98:	e0bffc17 	ldw	r2,-16(fp)
10004b9c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10004ba0:	e0bffb17 	ldw	r2,-20(fp)
10004ba4:	1000051e 	bne	r2,zero,10004bbc <open+0xdc>
10004ba8:	e13ffc17 	ldw	r4,-16(fp)
10004bac:	00049ec0 	call	100049ec <alt_file_locked>
10004bb0:	e0bffa15 	stw	r2,-24(fp)
10004bb4:	e0bffa17 	ldw	r2,-24(fp)
10004bb8:	10001016 	blt	r2,zero,10004bfc <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10004bbc:	e0bff817 	ldw	r2,-32(fp)
10004bc0:	10800317 	ldw	r2,12(r2)
10004bc4:	10000826 	beq	r2,zero,10004be8 <open+0x108>
10004bc8:	e0bff817 	ldw	r2,-32(fp)
10004bcc:	10800317 	ldw	r2,12(r2)
10004bd0:	e13ffc17 	ldw	r4,-16(fp)
10004bd4:	e17ffd17 	ldw	r5,-12(fp)
10004bd8:	e1bffe17 	ldw	r6,-8(fp)
10004bdc:	e1ffff17 	ldw	r7,-4(fp)
10004be0:	103ee83a 	callr	r2
10004be4:	00000106 	br	10004bec <open+0x10c>
10004be8:	0005883a 	mov	r2,zero
10004bec:	e0bffa15 	stw	r2,-24(fp)
10004bf0:	00000206 	br	10004bfc <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10004bf4:	00bffb44 	movi	r2,-19
10004bf8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10004bfc:	e0bffa17 	ldw	r2,-24(fp)
10004c00:	1000080e 	bge	r2,zero,10004c24 <open+0x144>
  {
    alt_release_fd (index);  
10004c04:	e13ff917 	ldw	r4,-28(fp)
10004c08:	00034fc0 	call	100034fc <alt_release_fd>
    ALT_ERRNO = -status;
10004c0c:	000499c0 	call	1000499c <alt_get_errno>
10004c10:	e0fffa17 	ldw	r3,-24(fp)
10004c14:	00c7c83a 	sub	r3,zero,r3
10004c18:	10c00015 	stw	r3,0(r2)
    return -1;
10004c1c:	00bfffc4 	movi	r2,-1
10004c20:	00000106 	br	10004c28 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10004c24:	e0bff917 	ldw	r2,-28(fp)
}
10004c28:	e037883a 	mov	sp,fp
10004c2c:	dfc00117 	ldw	ra,4(sp)
10004c30:	df000017 	ldw	fp,0(sp)
10004c34:	dec00204 	addi	sp,sp,8
10004c38:	f800283a 	ret

10004c3c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10004c3c:	defffa04 	addi	sp,sp,-24
10004c40:	df000515 	stw	fp,20(sp)
10004c44:	df000504 	addi	fp,sp,20
10004c48:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004c4c:	0005303a 	rdctl	r2,status
10004c50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004c54:	e0fffc17 	ldw	r3,-16(fp)
10004c58:	00bfff84 	movi	r2,-2
10004c5c:	1884703a 	and	r2,r3,r2
10004c60:	1001703a 	wrctl	status,r2
  
  return context;
10004c64:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10004c68:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10004c6c:	e0bfff17 	ldw	r2,-4(fp)
10004c70:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10004c74:	e0bffd17 	ldw	r2,-12(fp)
10004c78:	10800017 	ldw	r2,0(r2)
10004c7c:	e0fffd17 	ldw	r3,-12(fp)
10004c80:	18c00117 	ldw	r3,4(r3)
10004c84:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10004c88:	e0bffd17 	ldw	r2,-12(fp)
10004c8c:	10800117 	ldw	r2,4(r2)
10004c90:	e0fffd17 	ldw	r3,-12(fp)
10004c94:	18c00017 	ldw	r3,0(r3)
10004c98:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10004c9c:	e0bffd17 	ldw	r2,-12(fp)
10004ca0:	e0fffd17 	ldw	r3,-12(fp)
10004ca4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10004ca8:	e0bffd17 	ldw	r2,-12(fp)
10004cac:	e0fffd17 	ldw	r3,-12(fp)
10004cb0:	10c00015 	stw	r3,0(r2)
10004cb4:	e0bffb17 	ldw	r2,-20(fp)
10004cb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004cbc:	e0bffe17 	ldw	r2,-8(fp)
10004cc0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10004cc4:	e037883a 	mov	sp,fp
10004cc8:	df000017 	ldw	fp,0(sp)
10004ccc:	dec00104 	addi	sp,sp,4
10004cd0:	f800283a 	ret

10004cd4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10004cd4:	defffb04 	addi	sp,sp,-20
10004cd8:	dfc00415 	stw	ra,16(sp)
10004cdc:	df000315 	stw	fp,12(sp)
10004ce0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10004ce4:	d0a01017 	ldw	r2,-32704(gp)
10004ce8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10004cec:	d0a6ba17 	ldw	r2,-25880(gp)
10004cf0:	10800044 	addi	r2,r2,1
10004cf4:	d0a6ba15 	stw	r2,-25880(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10004cf8:	00002e06 	br	10004db4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10004cfc:	e0bffd17 	ldw	r2,-12(fp)
10004d00:	10800017 	ldw	r2,0(r2)
10004d04:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10004d08:	e0bffd17 	ldw	r2,-12(fp)
10004d0c:	10800403 	ldbu	r2,16(r2)
10004d10:	10803fcc 	andi	r2,r2,255
10004d14:	10000426 	beq	r2,zero,10004d28 <alt_tick+0x54>
10004d18:	d0a6ba17 	ldw	r2,-25880(gp)
10004d1c:	1000021e 	bne	r2,zero,10004d28 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10004d20:	e0bffd17 	ldw	r2,-12(fp)
10004d24:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10004d28:	e0bffd17 	ldw	r2,-12(fp)
10004d2c:	10800217 	ldw	r2,8(r2)
10004d30:	d0e6ba17 	ldw	r3,-25880(gp)
10004d34:	18801d36 	bltu	r3,r2,10004dac <alt_tick+0xd8>
10004d38:	e0bffd17 	ldw	r2,-12(fp)
10004d3c:	10800403 	ldbu	r2,16(r2)
10004d40:	10803fcc 	andi	r2,r2,255
10004d44:	1000191e 	bne	r2,zero,10004dac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10004d48:	e0bffd17 	ldw	r2,-12(fp)
10004d4c:	10800317 	ldw	r2,12(r2)
10004d50:	e0fffd17 	ldw	r3,-12(fp)
10004d54:	18c00517 	ldw	r3,20(r3)
10004d58:	1809883a 	mov	r4,r3
10004d5c:	103ee83a 	callr	r2
10004d60:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10004d64:	e0bfff17 	ldw	r2,-4(fp)
10004d68:	1000031e 	bne	r2,zero,10004d78 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10004d6c:	e13ffd17 	ldw	r4,-12(fp)
10004d70:	0004c3c0 	call	10004c3c <alt_alarm_stop>
10004d74:	00000d06 	br	10004dac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10004d78:	e0bffd17 	ldw	r2,-12(fp)
10004d7c:	10c00217 	ldw	r3,8(r2)
10004d80:	e0bfff17 	ldw	r2,-4(fp)
10004d84:	1887883a 	add	r3,r3,r2
10004d88:	e0bffd17 	ldw	r2,-12(fp)
10004d8c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10004d90:	e0bffd17 	ldw	r2,-12(fp)
10004d94:	10c00217 	ldw	r3,8(r2)
10004d98:	d0a6ba17 	ldw	r2,-25880(gp)
10004d9c:	1880032e 	bgeu	r3,r2,10004dac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10004da0:	e0bffd17 	ldw	r2,-12(fp)
10004da4:	00c00044 	movi	r3,1
10004da8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10004dac:	e0bffe17 	ldw	r2,-8(fp)
10004db0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10004db4:	e0fffd17 	ldw	r3,-12(fp)
10004db8:	d0a01004 	addi	r2,gp,-32704
10004dbc:	18bfcf1e 	bne	r3,r2,10004cfc <__alt_data_end+0xf8004cfc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10004dc0:	0001883a 	nop
}
10004dc4:	e037883a 	mov	sp,fp
10004dc8:	dfc00117 	ldw	ra,4(sp)
10004dcc:	df000017 	ldw	fp,0(sp)
10004dd0:	dec00204 	addi	sp,sp,8
10004dd4:	f800283a 	ret

10004dd8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10004dd8:	deffff04 	addi	sp,sp,-4
10004ddc:	df000015 	stw	fp,0(sp)
10004de0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10004de4:	000170fa 	wrctl	ienable,zero
}
10004de8:	e037883a 	mov	sp,fp
10004dec:	df000017 	ldw	fp,0(sp)
10004df0:	dec00104 	addi	sp,sp,4
10004df4:	f800283a 	ret

10004df8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10004df8:	defffa04 	addi	sp,sp,-24
10004dfc:	dfc00515 	stw	ra,20(sp)
10004e00:	df000415 	stw	fp,16(sp)
10004e04:	df000404 	addi	fp,sp,16
10004e08:	e13ffe15 	stw	r4,-8(fp)
10004e0c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10004e10:	e0bfff17 	ldw	r2,-4(fp)
10004e14:	10800017 	ldw	r2,0(r2)
10004e18:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10004e1c:	e13ffe17 	ldw	r4,-8(fp)
10004e20:	00003140 	call	10000314 <strlen>
10004e24:	10800044 	addi	r2,r2,1
10004e28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10004e2c:	00000d06 	br	10004e64 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10004e30:	e0bffc17 	ldw	r2,-16(fp)
10004e34:	10c00217 	ldw	r3,8(r2)
10004e38:	e0bffd17 	ldw	r2,-12(fp)
10004e3c:	1809883a 	mov	r4,r3
10004e40:	e17ffe17 	ldw	r5,-8(fp)
10004e44:	100d883a 	mov	r6,r2
10004e48:	00050bc0 	call	100050bc <memcmp>
10004e4c:	1000021e 	bne	r2,zero,10004e58 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10004e50:	e0bffc17 	ldw	r2,-16(fp)
10004e54:	00000706 	br	10004e74 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10004e58:	e0bffc17 	ldw	r2,-16(fp)
10004e5c:	10800017 	ldw	r2,0(r2)
10004e60:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10004e64:	e0fffc17 	ldw	r3,-16(fp)
10004e68:	e0bfff17 	ldw	r2,-4(fp)
10004e6c:	18bff01e 	bne	r3,r2,10004e30 <__alt_data_end+0xf8004e30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10004e70:	0005883a 	mov	r2,zero
}
10004e74:	e037883a 	mov	sp,fp
10004e78:	dfc00117 	ldw	ra,4(sp)
10004e7c:	df000017 	ldw	fp,0(sp)
10004e80:	dec00204 	addi	sp,sp,8
10004e84:	f800283a 	ret

10004e88 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10004e88:	defffb04 	addi	sp,sp,-20
10004e8c:	dfc00415 	stw	ra,16(sp)
10004e90:	df000315 	stw	fp,12(sp)
10004e94:	df000304 	addi	fp,sp,12
10004e98:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10004e9c:	00840034 	movhi	r2,4096
10004ea0:	109bb304 	addi	r2,r2,28364
10004ea4:	10800017 	ldw	r2,0(r2)
10004ea8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10004eac:	00003106 	br	10004f74 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10004eb0:	e0bffd17 	ldw	r2,-12(fp)
10004eb4:	10800217 	ldw	r2,8(r2)
10004eb8:	1009883a 	mov	r4,r2
10004ebc:	00003140 	call	10000314 <strlen>
10004ec0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10004ec4:	e0bffd17 	ldw	r2,-12(fp)
10004ec8:	10c00217 	ldw	r3,8(r2)
10004ecc:	e0bffe17 	ldw	r2,-8(fp)
10004ed0:	10bfffc4 	addi	r2,r2,-1
10004ed4:	1885883a 	add	r2,r3,r2
10004ed8:	10800003 	ldbu	r2,0(r2)
10004edc:	10803fcc 	andi	r2,r2,255
10004ee0:	1080201c 	xori	r2,r2,128
10004ee4:	10bfe004 	addi	r2,r2,-128
10004ee8:	10800bd8 	cmpnei	r2,r2,47
10004eec:	1000031e 	bne	r2,zero,10004efc <alt_find_file+0x74>
    {
      len -= 1;
10004ef0:	e0bffe17 	ldw	r2,-8(fp)
10004ef4:	10bfffc4 	addi	r2,r2,-1
10004ef8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10004efc:	e0bffe17 	ldw	r2,-8(fp)
10004f00:	e0ffff17 	ldw	r3,-4(fp)
10004f04:	1885883a 	add	r2,r3,r2
10004f08:	10800003 	ldbu	r2,0(r2)
10004f0c:	10803fcc 	andi	r2,r2,255
10004f10:	1080201c 	xori	r2,r2,128
10004f14:	10bfe004 	addi	r2,r2,-128
10004f18:	10800be0 	cmpeqi	r2,r2,47
10004f1c:	1000081e 	bne	r2,zero,10004f40 <alt_find_file+0xb8>
10004f20:	e0bffe17 	ldw	r2,-8(fp)
10004f24:	e0ffff17 	ldw	r3,-4(fp)
10004f28:	1885883a 	add	r2,r3,r2
10004f2c:	10800003 	ldbu	r2,0(r2)
10004f30:	10803fcc 	andi	r2,r2,255
10004f34:	1080201c 	xori	r2,r2,128
10004f38:	10bfe004 	addi	r2,r2,-128
10004f3c:	10000a1e 	bne	r2,zero,10004f68 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10004f40:	e0bffd17 	ldw	r2,-12(fp)
10004f44:	10c00217 	ldw	r3,8(r2)
10004f48:	e0bffe17 	ldw	r2,-8(fp)
10004f4c:	1809883a 	mov	r4,r3
10004f50:	e17fff17 	ldw	r5,-4(fp)
10004f54:	100d883a 	mov	r6,r2
10004f58:	00050bc0 	call	100050bc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10004f5c:	1000021e 	bne	r2,zero,10004f68 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10004f60:	e0bffd17 	ldw	r2,-12(fp)
10004f64:	00000806 	br	10004f88 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10004f68:	e0bffd17 	ldw	r2,-12(fp)
10004f6c:	10800017 	ldw	r2,0(r2)
10004f70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10004f74:	e0fffd17 	ldw	r3,-12(fp)
10004f78:	00840034 	movhi	r2,4096
10004f7c:	109bb304 	addi	r2,r2,28364
10004f80:	18bfcb1e 	bne	r3,r2,10004eb0 <__alt_data_end+0xf8004eb0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10004f84:	0005883a 	mov	r2,zero
}
10004f88:	e037883a 	mov	sp,fp
10004f8c:	dfc00117 	ldw	ra,4(sp)
10004f90:	df000017 	ldw	fp,0(sp)
10004f94:	dec00204 	addi	sp,sp,8
10004f98:	f800283a 	ret

10004f9c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10004f9c:	defffa04 	addi	sp,sp,-24
10004fa0:	dfc00515 	stw	ra,20(sp)
10004fa4:	df000415 	stw	fp,16(sp)
10004fa8:	dc000315 	stw	r16,12(sp)
10004fac:	df000404 	addi	fp,sp,16
10004fb0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10004fb4:	00bffa04 	movi	r2,-24
10004fb8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10004fbc:	e03ffc15 	stw	zero,-16(fp)
10004fc0:	00002106 	br	10005048 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10004fc4:	04040034 	movhi	r16,4096
10004fc8:	84173304 	addi	r16,r16,23756
10004fcc:	e0bffc17 	ldw	r2,-16(fp)
10004fd0:	1009883a 	mov	r4,r2
10004fd4:	01400304 	movi	r5,12
10004fd8:	0002d780 	call	10002d78 <__mulsi3>
10004fdc:	8085883a 	add	r2,r16,r2
10004fe0:	10800017 	ldw	r2,0(r2)
10004fe4:	1000151e 	bne	r2,zero,1000503c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10004fe8:	04040034 	movhi	r16,4096
10004fec:	84173304 	addi	r16,r16,23756
10004ff0:	e0bffc17 	ldw	r2,-16(fp)
10004ff4:	1009883a 	mov	r4,r2
10004ff8:	01400304 	movi	r5,12
10004ffc:	0002d780 	call	10002d78 <__mulsi3>
10005000:	8085883a 	add	r2,r16,r2
10005004:	e0fffe17 	ldw	r3,-8(fp)
10005008:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000500c:	00840034 	movhi	r2,4096
10005010:	109bb704 	addi	r2,r2,28380
10005014:	10c00017 	ldw	r3,0(r2)
10005018:	e0bffc17 	ldw	r2,-16(fp)
1000501c:	1880040e 	bge	r3,r2,10005030 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10005020:	00840034 	movhi	r2,4096
10005024:	109bb704 	addi	r2,r2,28380
10005028:	e0fffc17 	ldw	r3,-16(fp)
1000502c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10005030:	e0bffc17 	ldw	r2,-16(fp)
10005034:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10005038:	00000606 	br	10005054 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000503c:	e0bffc17 	ldw	r2,-16(fp)
10005040:	10800044 	addi	r2,r2,1
10005044:	e0bffc15 	stw	r2,-16(fp)
10005048:	e0bffc17 	ldw	r2,-16(fp)
1000504c:	10800810 	cmplti	r2,r2,32
10005050:	103fdc1e 	bne	r2,zero,10004fc4 <__alt_data_end+0xf8004fc4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10005054:	e0bffd17 	ldw	r2,-12(fp)
}
10005058:	e6ffff04 	addi	sp,fp,-4
1000505c:	dfc00217 	ldw	ra,8(sp)
10005060:	df000117 	ldw	fp,4(sp)
10005064:	dc000017 	ldw	r16,0(sp)
10005068:	dec00304 	addi	sp,sp,12
1000506c:	f800283a 	ret

10005070 <atexit>:
10005070:	200b883a 	mov	r5,r4
10005074:	000d883a 	mov	r6,zero
10005078:	0009883a 	mov	r4,zero
1000507c:	000f883a 	mov	r7,zero
10005080:	00051381 	jmpi	10005138 <__register_exitproc>

10005084 <exit>:
10005084:	defffe04 	addi	sp,sp,-8
10005088:	000b883a 	mov	r5,zero
1000508c:	dc000015 	stw	r16,0(sp)
10005090:	dfc00115 	stw	ra,4(sp)
10005094:	2021883a 	mov	r16,r4
10005098:	00052540 	call	10005254 <__call_exitprocs>
1000509c:	00840034 	movhi	r2,4096
100050a0:	109baf04 	addi	r2,r2,28348
100050a4:	11000017 	ldw	r4,0(r2)
100050a8:	20800f17 	ldw	r2,60(r4)
100050ac:	10000126 	beq	r2,zero,100050b4 <exit+0x30>
100050b0:	103ee83a 	callr	r2
100050b4:	8009883a 	mov	r4,r16
100050b8:	00053f80 	call	100053f8 <_exit>

100050bc <memcmp>:
100050bc:	01c000c4 	movi	r7,3
100050c0:	3980192e 	bgeu	r7,r6,10005128 <memcmp+0x6c>
100050c4:	2144b03a 	or	r2,r4,r5
100050c8:	11c4703a 	and	r2,r2,r7
100050cc:	10000f26 	beq	r2,zero,1000510c <memcmp+0x50>
100050d0:	21c00003 	ldbu	r7,0(r4)
100050d4:	28800003 	ldbu	r2,0(r5)
100050d8:	3880151e 	bne	r7,r2,10005130 <memcmp+0x74>
100050dc:	30ffff84 	addi	r3,r6,-2
100050e0:	01bfffc4 	movi	r6,-1
100050e4:	00000406 	br	100050f8 <memcmp+0x3c>
100050e8:	21c00003 	ldbu	r7,0(r4)
100050ec:	28800003 	ldbu	r2,0(r5)
100050f0:	18ffffc4 	addi	r3,r3,-1
100050f4:	38800e1e 	bne	r7,r2,10005130 <memcmp+0x74>
100050f8:	21000044 	addi	r4,r4,1
100050fc:	29400044 	addi	r5,r5,1
10005100:	19bff91e 	bne	r3,r6,100050e8 <__alt_data_end+0xf80050e8>
10005104:	0005883a 	mov	r2,zero
10005108:	f800283a 	ret
1000510c:	20c00017 	ldw	r3,0(r4)
10005110:	28800017 	ldw	r2,0(r5)
10005114:	1880041e 	bne	r3,r2,10005128 <memcmp+0x6c>
10005118:	31bfff04 	addi	r6,r6,-4
1000511c:	21000104 	addi	r4,r4,4
10005120:	29400104 	addi	r5,r5,4
10005124:	39bff936 	bltu	r7,r6,1000510c <__alt_data_end+0xf800510c>
10005128:	303fe91e 	bne	r6,zero,100050d0 <__alt_data_end+0xf80050d0>
1000512c:	003ff506 	br	10005104 <__alt_data_end+0xf8005104>
10005130:	3885c83a 	sub	r2,r7,r2
10005134:	f800283a 	ret

10005138 <__register_exitproc>:
10005138:	defffa04 	addi	sp,sp,-24
1000513c:	00840034 	movhi	r2,4096
10005140:	109baf04 	addi	r2,r2,28348
10005144:	dc000315 	stw	r16,12(sp)
10005148:	14000017 	ldw	r16,0(r2)
1000514c:	dc400415 	stw	r17,16(sp)
10005150:	dfc00515 	stw	ra,20(sp)
10005154:	80805217 	ldw	r2,328(r16)
10005158:	2023883a 	mov	r17,r4
1000515c:	10003a26 	beq	r2,zero,10005248 <__register_exitproc+0x110>
10005160:	10c00117 	ldw	r3,4(r2)
10005164:	020007c4 	movi	r8,31
10005168:	40c0190e 	bge	r8,r3,100051d0 <__register_exitproc+0x98>
1000516c:	00800034 	movhi	r2,0
10005170:	10800004 	addi	r2,r2,0
10005174:	1000061e 	bne	r2,zero,10005190 <__register_exitproc+0x58>
10005178:	00bfffc4 	movi	r2,-1
1000517c:	dfc00517 	ldw	ra,20(sp)
10005180:	dc400417 	ldw	r17,16(sp)
10005184:	dc000317 	ldw	r16,12(sp)
10005188:	dec00604 	addi	sp,sp,24
1000518c:	f800283a 	ret
10005190:	01006404 	movi	r4,400
10005194:	d9400015 	stw	r5,0(sp)
10005198:	d9800115 	stw	r6,4(sp)
1000519c:	d9c00215 	stw	r7,8(sp)
100051a0:	00000000 	call	10000000 <__reset>
100051a4:	d9400017 	ldw	r5,0(sp)
100051a8:	d9800117 	ldw	r6,4(sp)
100051ac:	d9c00217 	ldw	r7,8(sp)
100051b0:	103ff126 	beq	r2,zero,10005178 <__alt_data_end+0xf8005178>
100051b4:	81005217 	ldw	r4,328(r16)
100051b8:	10000115 	stw	zero,4(r2)
100051bc:	0007883a 	mov	r3,zero
100051c0:	11000015 	stw	r4,0(r2)
100051c4:	80805215 	stw	r2,328(r16)
100051c8:	10006215 	stw	zero,392(r2)
100051cc:	10006315 	stw	zero,396(r2)
100051d0:	88000d1e 	bne	r17,zero,10005208 <__register_exitproc+0xd0>
100051d4:	19000084 	addi	r4,r3,2
100051d8:	2109883a 	add	r4,r4,r4
100051dc:	18c00044 	addi	r3,r3,1
100051e0:	2109883a 	add	r4,r4,r4
100051e4:	10c00115 	stw	r3,4(r2)
100051e8:	1105883a 	add	r2,r2,r4
100051ec:	11400015 	stw	r5,0(r2)
100051f0:	0005883a 	mov	r2,zero
100051f4:	dfc00517 	ldw	ra,20(sp)
100051f8:	dc400417 	ldw	r17,16(sp)
100051fc:	dc000317 	ldw	r16,12(sp)
10005200:	dec00604 	addi	sp,sp,24
10005204:	f800283a 	ret
10005208:	18c9883a 	add	r4,r3,r3
1000520c:	2109883a 	add	r4,r4,r4
10005210:	1109883a 	add	r4,r2,r4
10005214:	21802215 	stw	r6,136(r4)
10005218:	01800044 	movi	r6,1
1000521c:	12006217 	ldw	r8,392(r2)
10005220:	30cc983a 	sll	r6,r6,r3
10005224:	4190b03a 	or	r8,r8,r6
10005228:	12006215 	stw	r8,392(r2)
1000522c:	21c04215 	stw	r7,264(r4)
10005230:	01000084 	movi	r4,2
10005234:	893fe71e 	bne	r17,r4,100051d4 <__alt_data_end+0xf80051d4>
10005238:	11006317 	ldw	r4,396(r2)
1000523c:	218cb03a 	or	r6,r4,r6
10005240:	11806315 	stw	r6,396(r2)
10005244:	003fe306 	br	100051d4 <__alt_data_end+0xf80051d4>
10005248:	80805304 	addi	r2,r16,332
1000524c:	80805215 	stw	r2,328(r16)
10005250:	003fc306 	br	10005160 <__alt_data_end+0xf8005160>

10005254 <__call_exitprocs>:
10005254:	00840034 	movhi	r2,4096
10005258:	109baf04 	addi	r2,r2,28348
1000525c:	10800017 	ldw	r2,0(r2)
10005260:	defff304 	addi	sp,sp,-52
10005264:	df000b15 	stw	fp,44(sp)
10005268:	d8800015 	stw	r2,0(sp)
1000526c:	10805204 	addi	r2,r2,328
10005270:	dd400815 	stw	r21,32(sp)
10005274:	dfc00c15 	stw	ra,48(sp)
10005278:	ddc00a15 	stw	r23,40(sp)
1000527c:	dd800915 	stw	r22,36(sp)
10005280:	dd000715 	stw	r20,28(sp)
10005284:	dcc00615 	stw	r19,24(sp)
10005288:	dc800515 	stw	r18,20(sp)
1000528c:	dc400415 	stw	r17,16(sp)
10005290:	dc000315 	stw	r16,12(sp)
10005294:	d9000115 	stw	r4,4(sp)
10005298:	2839883a 	mov	fp,r5
1000529c:	d8800215 	stw	r2,8(sp)
100052a0:	057fffc4 	movi	r21,-1
100052a4:	d8800017 	ldw	r2,0(sp)
100052a8:	14805217 	ldw	r18,328(r2)
100052ac:	90001826 	beq	r18,zero,10005310 <__call_exitprocs+0xbc>
100052b0:	ddc00217 	ldw	r23,8(sp)
100052b4:	90c00117 	ldw	r3,4(r18)
100052b8:	1c3fffc4 	addi	r16,r3,-1
100052bc:	80001116 	blt	r16,zero,10005304 <__call_exitprocs+0xb0>
100052c0:	18c00044 	addi	r3,r3,1
100052c4:	8427883a 	add	r19,r16,r16
100052c8:	18c7883a 	add	r3,r3,r3
100052cc:	95802204 	addi	r22,r18,136
100052d0:	9ce7883a 	add	r19,r19,r19
100052d4:	18c7883a 	add	r3,r3,r3
100052d8:	b4e7883a 	add	r19,r22,r19
100052dc:	90e3883a 	add	r17,r18,r3
100052e0:	e0001726 	beq	fp,zero,10005340 <__call_exitprocs+0xec>
100052e4:	8c87c83a 	sub	r3,r17,r18
100052e8:	b0c7883a 	add	r3,r22,r3
100052ec:	18c01e17 	ldw	r3,120(r3)
100052f0:	1f001326 	beq	r3,fp,10005340 <__call_exitprocs+0xec>
100052f4:	843fffc4 	addi	r16,r16,-1
100052f8:	9cffff04 	addi	r19,r19,-4
100052fc:	8c7fff04 	addi	r17,r17,-4
10005300:	857ff71e 	bne	r16,r21,100052e0 <__alt_data_end+0xf80052e0>
10005304:	00800034 	movhi	r2,0
10005308:	10800004 	addi	r2,r2,0
1000530c:	10002a1e 	bne	r2,zero,100053b8 <__call_exitprocs+0x164>
10005310:	dfc00c17 	ldw	ra,48(sp)
10005314:	df000b17 	ldw	fp,44(sp)
10005318:	ddc00a17 	ldw	r23,40(sp)
1000531c:	dd800917 	ldw	r22,36(sp)
10005320:	dd400817 	ldw	r21,32(sp)
10005324:	dd000717 	ldw	r20,28(sp)
10005328:	dcc00617 	ldw	r19,24(sp)
1000532c:	dc800517 	ldw	r18,20(sp)
10005330:	dc400417 	ldw	r17,16(sp)
10005334:	dc000317 	ldw	r16,12(sp)
10005338:	dec00d04 	addi	sp,sp,52
1000533c:	f800283a 	ret
10005340:	91000117 	ldw	r4,4(r18)
10005344:	88c00017 	ldw	r3,0(r17)
10005348:	213fffc4 	addi	r4,r4,-1
1000534c:	24001526 	beq	r4,r16,100053a4 <__call_exitprocs+0x150>
10005350:	88000015 	stw	zero,0(r17)
10005354:	183fe726 	beq	r3,zero,100052f4 <__alt_data_end+0xf80052f4>
10005358:	00800044 	movi	r2,1
1000535c:	1408983a 	sll	r4,r2,r16
10005360:	91406217 	ldw	r5,392(r18)
10005364:	95000117 	ldw	r20,4(r18)
10005368:	214a703a 	and	r5,r4,r5
1000536c:	28000b26 	beq	r5,zero,1000539c <__call_exitprocs+0x148>
10005370:	91406317 	ldw	r5,396(r18)
10005374:	2148703a 	and	r4,r4,r5
10005378:	20000c1e 	bne	r4,zero,100053ac <__call_exitprocs+0x158>
1000537c:	99400017 	ldw	r5,0(r19)
10005380:	d9000117 	ldw	r4,4(sp)
10005384:	183ee83a 	callr	r3
10005388:	90c00117 	ldw	r3,4(r18)
1000538c:	1d3fc51e 	bne	r3,r20,100052a4 <__alt_data_end+0xf80052a4>
10005390:	b8c00017 	ldw	r3,0(r23)
10005394:	1cbfd726 	beq	r3,r18,100052f4 <__alt_data_end+0xf80052f4>
10005398:	003fc206 	br	100052a4 <__alt_data_end+0xf80052a4>
1000539c:	183ee83a 	callr	r3
100053a0:	003ff906 	br	10005388 <__alt_data_end+0xf8005388>
100053a4:	94000115 	stw	r16,4(r18)
100053a8:	003fea06 	br	10005354 <__alt_data_end+0xf8005354>
100053ac:	99000017 	ldw	r4,0(r19)
100053b0:	183ee83a 	callr	r3
100053b4:	003ff406 	br	10005388 <__alt_data_end+0xf8005388>
100053b8:	90c00117 	ldw	r3,4(r18)
100053bc:	1800081e 	bne	r3,zero,100053e0 <__call_exitprocs+0x18c>
100053c0:	90c00017 	ldw	r3,0(r18)
100053c4:	18000a26 	beq	r3,zero,100053f0 <__call_exitprocs+0x19c>
100053c8:	9009883a 	mov	r4,r18
100053cc:	b8c00015 	stw	r3,0(r23)
100053d0:	00000000 	call	10000000 <__reset>
100053d4:	bc800017 	ldw	r18,0(r23)
100053d8:	903fb61e 	bne	r18,zero,100052b4 <__alt_data_end+0xf80052b4>
100053dc:	003fcc06 	br	10005310 <__alt_data_end+0xf8005310>
100053e0:	90c00017 	ldw	r3,0(r18)
100053e4:	902f883a 	mov	r23,r18
100053e8:	1825883a 	mov	r18,r3
100053ec:	003ffa06 	br	100053d8 <__alt_data_end+0xf80053d8>
100053f0:	0007883a 	mov	r3,zero
100053f4:	003ffb06 	br	100053e4 <__alt_data_end+0xf80053e4>

100053f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100053f8:	defffd04 	addi	sp,sp,-12
100053fc:	df000215 	stw	fp,8(sp)
10005400:	df000204 	addi	fp,sp,8
10005404:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10005408:	0001883a 	nop
1000540c:	e0bfff17 	ldw	r2,-4(fp)
10005410:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10005414:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10005418:	10000226 	beq	r2,zero,10005424 <_exit+0x2c>
    ALT_SIM_FAIL();
1000541c:	002af070 	cmpltui	zero,zero,43969
10005420:	00000106 	br	10005428 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10005424:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10005428:	003fff06 	br	10005428 <__alt_data_end+0xf8005428>
